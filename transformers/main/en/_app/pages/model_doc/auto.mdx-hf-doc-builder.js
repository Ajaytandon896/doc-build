import{S as bOt,i as vOt,s as FOt,e as a,k as l,w as F,t as o,M as TOt,c as n,d as t,m as i,a as s,x as T,h as r,b as c,G as e,g as b,y as M,q as E,o as C,B as w,v as MOt,L as I}from"../../chunks/vendor-hf-doc-builder.js";import{T as kZr}from"../../chunks/Tip-hf-doc-builder.js";import{D as R}from"../../chunks/Docstring-hf-doc-builder.js";import{C as P}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as re}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as B}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function EOt($){let g,v,u,f,p,d,h,Eo,Ei,xm,at,Ci,wi,P7,$m,Oe,Qe,Ai,Rn,B7,Pn,Bn,I7,Li,In,N7,yi,km,xa;return{c(){g=a("p"),v=o("If your "),u=a("code"),f=o("NewModelConfig"),p=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Eo=o(`, make sure its
`),Ei=a("code"),xm=o("model_type"),at=o(" attribute is set to the same key you use when registering the config (here "),Ci=a("code"),wi=o('"new-model"'),P7=o(")."),$m=l(),Oe=a("p"),Qe=o("Likewise, if your "),Ai=a("code"),Rn=o("NewModel"),B7=o(" is a subclass of "),Pn=a("a"),Bn=o("PreTrainedModel"),I7=o(`, make sure its
`),Li=a("code"),In=o("config_class"),N7=o(` attribute is set to the same class you use when registering the model (here
`),yi=a("code"),km=o("NewModelConfig"),xa=o(")."),this.h()},l(We){g=n(We,"P",{});var Ae=s(g);v=r(Ae,"If your "),u=n(Ae,"CODE",{});var gS=s(u);f=r(gS,"NewModelConfig"),gS.forEach(t),p=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var xi=s(d);h=r(xi,"PretrainedConfig"),xi.forEach(t),Eo=r(Ae,`, make sure its
`),Ei=n(Ae,"CODE",{});var hS=s(Ei);xm=r(hS,"model_type"),hS.forEach(t),at=r(Ae," attribute is set to the same key you use when registering the config (here "),Ci=n(Ae,"CODE",{});var uS=s(Ci);wi=r(uS,'"new-model"'),uS.forEach(t),P7=r(Ae,")."),Ae.forEach(t),$m=i(We),Oe=n(We,"P",{});var Co=s(Oe);Qe=r(Co,"Likewise, if your "),Ai=n(Co,"CODE",{});var $a=s(Ai);Rn=r($a,"NewModel"),$a.forEach(t),B7=r(Co," is a subclass of "),Pn=n(Co,"A",{href:!0});var pS=s(Pn);Bn=r(pS,"PreTrainedModel"),pS.forEach(t),I7=r(Co,`, make sure its
`),Li=n(Co,"CODE",{});var Sm=s(Li);In=r(Sm,"config_class"),Sm.forEach(t),N7=r(Co,` attribute is set to the same class you use when registering the model (here
`),yi=n(Co,"CODE",{});var _S=s(yi);km=r(_S,"NewModelConfig"),_S.forEach(t),xa=r(Co,")."),Co.forEach(t),this.h()},h(){c(Pn,"href","/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel")},m(We,Ae){b(We,g,Ae),e(g,v),e(g,u),e(u,f),e(g,p),e(g,d),e(d,h),e(g,Eo),e(g,Ei),e(Ei,xm),e(g,at),e(g,Ci),e(Ci,wi),e(g,P7),b(We,$m,Ae),b(We,Oe,Ae),e(Oe,Qe),e(Oe,Ai),e(Ai,Rn),e(Oe,B7),e(Oe,Pn),e(Pn,Bn),e(Oe,I7),e(Oe,Li),e(Li,In),e(Oe,N7),e(Oe,yi),e(yi,km),e(Oe,xa)},d(We){We&&t(g),We&&t($m),We&&t(Oe)}}}function COt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function wOt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")

# Download vocabulary from huggingface.co and define model-specific arguments
tokenizer = AutoTokenizer.from_pretrained("roberta-base", add_prefix_space=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and define model-specific arguments</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;roberta-base&quot;</span>, add_prefix_space=<span class="hljs-literal">True</span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function AOt($){let g,v,u,f,p;return{c(){g=a("p"),v=o("Passing "),u=a("code"),f=o("use_auth_token=True"),p=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),u=n(h,"CODE",{});var Eo=s(u);f=r(Eo,"use_auth_token=True"),Eo.forEach(t),p=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,u),e(u,f),e(g,p)},d(d){d&&t(g)}}}function LOt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function yOt($){let g,v,u,f,p;return{c(){g=a("p"),v=o("Passing "),u=a("code"),f=o("use_auth_token=True"),p=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),u=n(h,"CODE",{});var Eo=s(u);f=r(Eo,"use_auth_token=True"),Eo.forEach(t),p=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,u),e(u,f),e(g,p)},d(d){d&&t(g)}}}function xOt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function $Ot($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function kOt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function SOt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function ROt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function POt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function BOt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function IOt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function NOt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function qOt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function jOt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function DOt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function GOt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function OOt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function VOt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function XOt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function zOt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function QOt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function WOt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function HOt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function UOt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function JOt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function YOt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function KOt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function ZOt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function eVt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function oVt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function rVt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("dandelin/vilt-b32-finetuned-vqa")
model = AutoModelForVisualQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function tVt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa")

# Update configuration during loading
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/vilt_tf_model_config.json")
model = AutoModelForVisualQuestionAnswering.from_pretrained(
    "./tf_model/vilt_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/vilt_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/vilt_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function aVt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function nVt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function sVt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function lVt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function iVt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function dVt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function cVt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function mVt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function fVt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function gVt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function hVt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function uVt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function pVt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function _Vt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function bVt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function vVt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function FVt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function TVt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function MVt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function EVt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function CVt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function wVt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function AVt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function LVt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function yVt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function xVt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function $Vt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function kVt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function SVt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function RVt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function PVt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function BVt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function IVt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function NVt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function qVt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function jVt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function DVt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function GVt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function OVt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function VVt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function XVt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function zVt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function QVt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function WVt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function HVt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function UVt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function JVt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function YVt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function KVt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function ZVt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function eXt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function oXt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function rXt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function tXt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function aXt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function nXt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function sXt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function lXt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function iXt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function dXt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function cXt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function mXt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function fXt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function gXt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function hXt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function uXt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function pXt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function _Xt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function bXt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function vXt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function FXt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function TXt($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function MXt($){let g,v,u,f,p,d,h,Eo,Ei,xm,at,Ci,wi,P7,$m,Oe,Qe,Ai,Rn,B7,Pn,Bn,I7,Li,In,N7,yi,km,xa,We,Ae,gS,xi,hS,uS,Co,$a,pS,Sm,_S,qQe,EOe,$i,Rm,Pte,q7,jQe,Bte,DQe,COe,Nn,GQe,Ite,OQe,VQe,Nte,XQe,zQe,wOe,j7,AOe,bS,QQe,LOe,Pm,yOe,ki,Bm,qte,D7,WQe,jte,HQe,xOe,wo,G7,UQe,O7,JQe,vS,YQe,KQe,ZQe,V7,eWe,Dte,oWe,rWe,tWe,Ar,X7,aWe,Gte,nWe,sWe,Si,lWe,Ote,iWe,dWe,Vte,cWe,mWe,fWe,A,Im,Xte,gWe,hWe,FS,uWe,pWe,_We,Nm,zte,bWe,vWe,TS,FWe,TWe,MWe,qm,Qte,EWe,CWe,MS,wWe,AWe,LWe,jm,Wte,yWe,xWe,ES,$We,kWe,SWe,Dm,Hte,RWe,PWe,CS,BWe,IWe,NWe,Gm,Ute,qWe,jWe,wS,DWe,GWe,OWe,Om,Jte,VWe,XWe,AS,zWe,QWe,WWe,Vm,Yte,HWe,UWe,LS,JWe,YWe,KWe,Xm,Kte,ZWe,eHe,yS,oHe,rHe,tHe,zm,Zte,aHe,nHe,xS,sHe,lHe,iHe,Qm,eae,dHe,cHe,$S,mHe,fHe,gHe,Wm,oae,hHe,uHe,kS,pHe,_He,bHe,Hm,rae,vHe,FHe,SS,THe,MHe,EHe,Um,tae,CHe,wHe,RS,AHe,LHe,yHe,Jm,aae,xHe,$He,PS,kHe,SHe,RHe,Ym,nae,PHe,BHe,BS,IHe,NHe,qHe,Km,sae,jHe,DHe,IS,GHe,OHe,VHe,Zm,lae,XHe,zHe,NS,QHe,WHe,HHe,ef,iae,UHe,JHe,qS,YHe,KHe,ZHe,of,dae,eUe,oUe,jS,rUe,tUe,aUe,rf,cae,nUe,sUe,DS,lUe,iUe,dUe,tf,mae,cUe,mUe,GS,fUe,gUe,hUe,af,fae,uUe,pUe,OS,_Ue,bUe,vUe,nf,gae,FUe,TUe,VS,MUe,EUe,CUe,sf,hae,wUe,AUe,XS,LUe,yUe,xUe,lf,uae,$Ue,kUe,zS,SUe,RUe,PUe,df,pae,BUe,IUe,QS,NUe,qUe,jUe,cf,_ae,DUe,GUe,WS,OUe,VUe,XUe,mf,bae,zUe,QUe,HS,WUe,HUe,UUe,ff,vae,JUe,YUe,US,KUe,ZUe,eJe,gf,Fae,oJe,rJe,JS,tJe,aJe,nJe,hf,Tae,sJe,lJe,YS,iJe,dJe,cJe,uf,Mae,mJe,fJe,KS,gJe,hJe,uJe,pf,Eae,pJe,_Je,ZS,bJe,vJe,FJe,_f,Cae,TJe,MJe,eR,EJe,CJe,wJe,bf,wae,AJe,LJe,oR,yJe,xJe,$Je,vf,Aae,kJe,SJe,rR,RJe,PJe,BJe,Ff,Lae,IJe,NJe,tR,qJe,jJe,DJe,Tf,yae,GJe,OJe,aR,VJe,XJe,zJe,Mf,xae,QJe,WJe,nR,HJe,UJe,JJe,Ef,$ae,YJe,KJe,sR,ZJe,eYe,oYe,Cf,kae,rYe,tYe,lR,aYe,nYe,sYe,wf,Sae,lYe,iYe,iR,dYe,cYe,mYe,Af,Rae,fYe,gYe,dR,hYe,uYe,pYe,Lf,Pae,_Ye,bYe,cR,vYe,FYe,TYe,yf,Bae,MYe,EYe,mR,CYe,wYe,AYe,xf,Iae,LYe,yYe,fR,xYe,$Ye,kYe,$f,Nae,SYe,RYe,gR,PYe,BYe,IYe,kf,qae,NYe,qYe,hR,jYe,DYe,GYe,Sf,jae,OYe,VYe,uR,XYe,zYe,QYe,Rf,Dae,WYe,HYe,pR,UYe,JYe,YYe,Pf,Gae,KYe,ZYe,_R,eKe,oKe,rKe,Bf,Oae,tKe,aKe,bR,nKe,sKe,lKe,If,Vae,iKe,dKe,vR,cKe,mKe,fKe,Nf,Xae,gKe,hKe,FR,uKe,pKe,_Ke,qf,zae,bKe,vKe,TR,FKe,TKe,MKe,jf,Qae,EKe,CKe,MR,wKe,AKe,LKe,Df,Wae,yKe,xKe,ER,$Ke,kKe,SKe,Gf,Hae,RKe,PKe,CR,BKe,IKe,NKe,Of,Uae,qKe,jKe,wR,DKe,GKe,OKe,Vf,Jae,VKe,XKe,AR,zKe,QKe,WKe,Xf,Yae,HKe,UKe,LR,JKe,YKe,KKe,zf,Kae,ZKe,eZe,yR,oZe,rZe,tZe,Qf,Zae,aZe,nZe,xR,sZe,lZe,iZe,Wf,ene,dZe,cZe,$R,mZe,fZe,gZe,Hf,one,hZe,uZe,kR,pZe,_Ze,bZe,Uf,rne,vZe,FZe,SR,TZe,MZe,EZe,Jf,tne,CZe,wZe,RR,AZe,LZe,yZe,Yf,ane,xZe,$Ze,PR,kZe,SZe,RZe,Kf,nne,PZe,BZe,BR,IZe,NZe,qZe,Zf,sne,jZe,DZe,IR,GZe,OZe,VZe,eg,lne,XZe,zZe,NR,QZe,WZe,HZe,og,ine,UZe,JZe,qR,YZe,KZe,ZZe,rg,dne,eeo,oeo,jR,reo,teo,aeo,tg,cne,neo,seo,DR,leo,ieo,deo,ag,mne,ceo,meo,GR,feo,geo,heo,ng,fne,ueo,peo,OR,_eo,beo,veo,sg,gne,Feo,Teo,VR,Meo,Eeo,Ceo,lg,hne,weo,Aeo,XR,Leo,yeo,xeo,ig,une,$eo,keo,zR,Seo,Reo,Peo,dg,pne,Beo,Ieo,QR,Neo,qeo,jeo,cg,_ne,Deo,Geo,WR,Oeo,Veo,Xeo,mg,bne,zeo,Qeo,HR,Weo,Heo,Ueo,fg,vne,Jeo,Yeo,UR,Keo,Zeo,eoo,gg,Fne,ooo,roo,JR,too,aoo,noo,hg,Tne,soo,loo,YR,ioo,doo,coo,ug,Mne,moo,foo,KR,goo,hoo,uoo,pg,Ene,poo,_oo,ZR,boo,voo,Foo,_g,Cne,Too,Moo,eP,Eoo,Coo,woo,bg,wne,Aoo,Loo,oP,yoo,xoo,$oo,vg,Ane,koo,Soo,rP,Roo,Poo,Boo,Fg,Lne,Ioo,Noo,tP,qoo,joo,Doo,Tg,yne,Goo,Ooo,aP,Voo,Xoo,zoo,Mg,xne,Qoo,Woo,nP,Hoo,Uoo,Joo,Eg,$ne,Yoo,Koo,sP,Zoo,ero,oro,Cg,kne,rro,tro,lP,aro,nro,sro,wg,Sne,lro,iro,iP,dro,cro,mro,Ag,Rne,fro,gro,dP,hro,uro,pro,Lg,Pne,_ro,bro,cP,vro,Fro,Tro,yg,Bne,Mro,Ero,mP,Cro,wro,Aro,xg,Ine,Lro,yro,fP,xro,$ro,kro,$g,Nne,Sro,Rro,gP,Pro,Bro,Iro,kg,qne,Nro,qro,hP,jro,Dro,Gro,Sg,jne,Oro,Vro,uP,Xro,zro,Qro,Rg,Dne,Wro,Hro,pP,Uro,Jro,Yro,Pg,Gne,Kro,Zro,_P,eto,oto,rto,Bg,One,tto,ato,bP,nto,sto,lto,Ig,Vne,ito,dto,vP,cto,mto,fto,Ng,Xne,gto,hto,FP,uto,pto,_to,qg,zne,bto,vto,TP,Fto,Tto,Mto,jg,Qne,Eto,Cto,MP,wto,Ato,Lto,Dg,Wne,yto,xto,EP,$to,kto,Sto,Gg,Hne,Rto,Pto,CP,Bto,Ito,Nto,Og,Une,qto,jto,wP,Dto,Gto,Oto,Vg,Jne,Vto,Xto,AP,zto,Qto,Wto,Xg,Yne,Hto,Uto,LP,Jto,Yto,Kto,zg,Zto,Qg,z7,eao,Kne,oao,$Oe,Ri,Wg,Zne,Q7,rao,ese,tao,kOe,Ao,W7,aao,H7,nao,yP,sao,lao,iao,U7,dao,ose,cao,mao,fao,Lr,J7,gao,rse,hao,uao,ka,pao,tse,_ao,bao,ase,vao,Fao,nse,Tao,Mao,Eao,k,qn,sse,Cao,wao,xP,Aao,Lao,$P,yao,xao,$ao,jn,lse,kao,Sao,kP,Rao,Pao,SP,Bao,Iao,Nao,Dn,ise,qao,jao,RP,Dao,Gao,PP,Oao,Vao,Xao,Hg,dse,zao,Qao,BP,Wao,Hao,Uao,Gn,cse,Jao,Yao,IP,Kao,Zao,NP,eno,ono,rno,Ug,mse,tno,ano,qP,nno,sno,lno,Jg,fse,ino,dno,jP,cno,mno,fno,Yg,gse,gno,hno,DP,uno,pno,_no,On,hse,bno,vno,GP,Fno,Tno,OP,Mno,Eno,Cno,Vn,use,wno,Ano,VP,Lno,yno,XP,xno,$no,kno,Xn,pse,Sno,Rno,zP,Pno,Bno,QP,Ino,Nno,qno,Kg,_se,jno,Dno,WP,Gno,Ono,Vno,Zg,bse,Xno,zno,HP,Qno,Wno,Hno,eh,vse,Uno,Jno,UP,Yno,Kno,Zno,zn,Fse,eso,oso,JP,rso,tso,YP,aso,nso,sso,oh,Tse,lso,iso,KP,dso,cso,mso,Qn,Mse,fso,gso,ZP,hso,uso,eB,pso,_so,bso,Wn,Ese,vso,Fso,oB,Tso,Mso,rB,Eso,Cso,wso,Hn,Cse,Aso,Lso,tB,yso,xso,aB,$so,kso,Sso,Un,wse,Rso,Pso,nB,Bso,Iso,sB,Nso,qso,jso,rh,Ase,Dso,Gso,lB,Oso,Vso,Xso,Jn,Lse,zso,Qso,iB,Wso,Hso,dB,Uso,Jso,Yso,Yn,yse,Kso,Zso,cB,elo,olo,mB,rlo,tlo,alo,Kn,xse,nlo,slo,fB,llo,ilo,gB,dlo,clo,mlo,Zn,$se,flo,glo,hB,hlo,ulo,uB,plo,_lo,blo,es,kse,vlo,Flo,pB,Tlo,Mlo,_B,Elo,Clo,wlo,os,Sse,Alo,Llo,bB,ylo,xlo,vB,$lo,klo,Slo,th,Rse,Rlo,Plo,FB,Blo,Ilo,Nlo,rs,Pse,qlo,jlo,TB,Dlo,Glo,MB,Olo,Vlo,Xlo,ah,Bse,zlo,Qlo,EB,Wlo,Hlo,Ulo,ts,Ise,Jlo,Ylo,CB,Klo,Zlo,wB,eio,oio,rio,as,Nse,tio,aio,AB,nio,sio,LB,lio,iio,dio,ns,qse,cio,mio,yB,fio,gio,xB,hio,uio,pio,nh,jse,_io,bio,$B,vio,Fio,Tio,ss,Dse,Mio,Eio,kB,Cio,wio,SB,Aio,Lio,yio,ls,Gse,xio,$io,RB,kio,Sio,PB,Rio,Pio,Bio,is,Ose,Iio,Nio,BB,qio,jio,IB,Dio,Gio,Oio,sh,Vse,Vio,Xio,NB,zio,Qio,Wio,ds,Xse,Hio,Uio,qB,Jio,Yio,jB,Kio,Zio,edo,cs,zse,odo,rdo,DB,tdo,ado,GB,ndo,sdo,ldo,ms,Qse,ido,ddo,OB,cdo,mdo,VB,fdo,gdo,hdo,fs,Wse,udo,pdo,XB,_do,bdo,zB,vdo,Fdo,Tdo,gs,Hse,Mdo,Edo,QB,Cdo,wdo,WB,Ado,Ldo,ydo,hs,Use,xdo,$do,HB,kdo,Sdo,UB,Rdo,Pdo,Bdo,us,Jse,Ido,Ndo,JB,qdo,jdo,YB,Ddo,Gdo,Odo,ps,Yse,Vdo,Xdo,KB,zdo,Qdo,ZB,Wdo,Hdo,Udo,lh,Kse,Jdo,Ydo,eI,Kdo,Zdo,eco,_s,Zse,oco,rco,oI,tco,aco,rI,nco,sco,lco,ih,ele,ico,dco,tI,cco,mco,fco,dh,ole,gco,hco,aI,uco,pco,_co,bs,rle,bco,vco,nI,Fco,Tco,sI,Mco,Eco,Cco,vs,tle,wco,Aco,lI,Lco,yco,iI,xco,$co,kco,Fs,ale,Sco,Rco,dI,Pco,Bco,cI,Ico,Nco,qco,ch,nle,jco,Dco,mI,Gco,Oco,Vco,Ts,sle,Xco,zco,fI,Qco,Wco,gI,Hco,Uco,Jco,Ms,lle,Yco,Kco,hI,Zco,emo,uI,omo,rmo,tmo,Es,ile,amo,nmo,pI,smo,lmo,_I,imo,dmo,cmo,Cs,dle,mmo,fmo,bI,gmo,hmo,vI,umo,pmo,_mo,ws,cle,bmo,vmo,FI,Fmo,Tmo,TI,Mmo,Emo,Cmo,As,mle,wmo,Amo,MI,Lmo,ymo,EI,xmo,$mo,kmo,mh,fle,Smo,Rmo,CI,Pmo,Bmo,Imo,Ls,gle,Nmo,qmo,wI,jmo,Dmo,AI,Gmo,Omo,Vmo,fh,hle,Xmo,zmo,LI,Qmo,Wmo,Hmo,gh,ule,Umo,Jmo,yI,Ymo,Kmo,Zmo,hh,ple,efo,ofo,xI,rfo,tfo,afo,uh,_le,nfo,sfo,$I,lfo,ifo,dfo,ys,ble,cfo,mfo,kI,ffo,gfo,SI,hfo,ufo,pfo,ph,vle,_fo,bfo,RI,vfo,Ffo,Tfo,xs,Fle,Mfo,Efo,PI,Cfo,wfo,BI,Afo,Lfo,yfo,$s,Tle,xfo,$fo,II,kfo,Sfo,NI,Rfo,Pfo,Bfo,ks,Mle,Ifo,Nfo,qI,qfo,jfo,jI,Dfo,Gfo,Ofo,Ss,Ele,Vfo,Xfo,DI,zfo,Qfo,GI,Wfo,Hfo,Ufo,Rs,Cle,Jfo,Yfo,OI,Kfo,Zfo,VI,ego,ogo,rgo,Ps,wle,tgo,ago,XI,ngo,sgo,zI,lgo,igo,dgo,_h,Ale,cgo,mgo,QI,fgo,ggo,hgo,bh,Lle,ugo,pgo,WI,_go,bgo,vgo,Bs,yle,Fgo,Tgo,HI,Mgo,Ego,UI,Cgo,wgo,Ago,Is,xle,Lgo,ygo,JI,xgo,$go,YI,kgo,Sgo,Rgo,Ns,$le,Pgo,Bgo,KI,Igo,Ngo,ZI,qgo,jgo,Dgo,vh,kle,Ggo,Ogo,eN,Vgo,Xgo,zgo,Fh,Sle,Qgo,Wgo,oN,Hgo,Ugo,Jgo,Th,Rle,Ygo,Kgo,rN,Zgo,eho,oho,qs,Ple,rho,tho,tN,aho,nho,aN,sho,lho,iho,js,Ble,dho,cho,nN,mho,fho,sN,gho,hho,uho,Mh,Ile,pho,_ho,lN,bho,vho,Fho,Eh,Nle,Tho,Mho,iN,Eho,Cho,who,Ch,qle,Aho,Lho,dN,yho,xho,$ho,Ds,jle,kho,Sho,cN,Rho,Pho,mN,Bho,Iho,Nho,wh,Dle,qho,jho,fN,Dho,Gho,Oho,Ah,Gle,Vho,Xho,gN,zho,Qho,Who,Gs,Ole,Hho,Uho,hN,Jho,Yho,uN,Kho,Zho,euo,Os,Vle,ouo,ruo,pN,tuo,auo,_N,nuo,suo,luo,Vs,Xle,iuo,duo,bN,cuo,muo,vN,fuo,guo,huo,Xs,zle,uuo,puo,FN,_uo,buo,TN,vuo,Fuo,Tuo,Lh,Muo,yh,Y7,Euo,Qle,Cuo,SOe,Pi,xh,Wle,K7,wuo,Hle,Auo,ROe,Lo,Z7,Luo,ey,yuo,MN,xuo,$uo,kuo,oy,Suo,Ule,Ruo,Puo,Buo,He,ry,Iuo,Jle,Nuo,quo,Sa,juo,Yle,Duo,Guo,Kle,Ouo,Vuo,Zle,Xuo,zuo,Quo,Y,$h,eie,Wuo,Huo,EN,Uuo,Juo,Yuo,kh,oie,Kuo,Zuo,CN,epo,opo,rpo,Sh,rie,tpo,apo,wN,npo,spo,lpo,Rh,tie,ipo,dpo,AN,cpo,mpo,fpo,Ph,aie,gpo,hpo,LN,upo,ppo,_po,Bh,nie,bpo,vpo,yN,Fpo,Tpo,Mpo,Ih,sie,Epo,Cpo,xN,wpo,Apo,Lpo,Nh,lie,ypo,xpo,$N,$po,kpo,Spo,qh,iie,Rpo,Ppo,kN,Bpo,Ipo,Npo,jh,die,qpo,jpo,SN,Dpo,Gpo,Opo,Dh,cie,Vpo,Xpo,RN,zpo,Qpo,Wpo,Gh,mie,Hpo,Upo,PN,Jpo,Ypo,Kpo,Oh,fie,Zpo,e_o,BN,o_o,r_o,t_o,Vh,gie,a_o,n_o,IN,s_o,l_o,i_o,Xh,hie,d_o,c_o,NN,m_o,f_o,g_o,zh,uie,h_o,u_o,qN,p_o,__o,b_o,Qh,pie,v_o,F_o,jN,T_o,M_o,E_o,Wh,_ie,C_o,w_o,DN,A_o,L_o,y_o,Hh,bie,x_o,$_o,GN,k_o,S_o,R_o,Uh,vie,P_o,B_o,ON,I_o,N_o,q_o,Jh,Fie,j_o,D_o,VN,G_o,O_o,V_o,Yh,Tie,X_o,z_o,XN,Q_o,W_o,H_o,Kh,Mie,U_o,J_o,zN,Y_o,K_o,Z_o,Zh,Eie,e2o,o2o,QN,r2o,t2o,a2o,eu,Cie,n2o,s2o,WN,l2o,i2o,d2o,ou,wie,c2o,m2o,HN,f2o,g2o,h2o,ru,Aie,u2o,p2o,UN,_2o,b2o,v2o,tu,Lie,F2o,T2o,JN,M2o,E2o,C2o,au,yie,w2o,A2o,YN,L2o,y2o,x2o,nu,xie,$2o,k2o,KN,S2o,R2o,P2o,su,$ie,B2o,I2o,ZN,N2o,q2o,j2o,lu,kie,D2o,G2o,eq,O2o,V2o,X2o,iu,Sie,z2o,Q2o,oq,W2o,H2o,U2o,du,J2o,cu,Y2o,mu,ty,K2o,Rie,Z2o,POe,Bi,fu,Pie,ay,ebo,Bie,obo,BOe,yo,ny,rbo,sy,tbo,rq,abo,nbo,sbo,ly,lbo,Iie,ibo,dbo,cbo,Ue,iy,mbo,Nie,fbo,gbo,Ii,hbo,qie,ubo,pbo,jie,_bo,bbo,vbo,he,gu,Die,Fbo,Tbo,tq,Mbo,Ebo,Cbo,hu,Gie,wbo,Abo,Oie,Lbo,ybo,xbo,uu,Vie,$bo,kbo,aq,Sbo,Rbo,Pbo,pu,Xie,Bbo,Ibo,nq,Nbo,qbo,jbo,_u,zie,Dbo,Gbo,sq,Obo,Vbo,Xbo,bu,Qie,zbo,Qbo,lq,Wbo,Hbo,Ubo,vu,Wie,Jbo,Ybo,iq,Kbo,Zbo,evo,Fu,Hie,ovo,rvo,dq,tvo,avo,nvo,Tu,Uie,svo,lvo,cq,ivo,dvo,cvo,Mu,Jie,mvo,fvo,mq,gvo,hvo,uvo,Eu,Yie,pvo,_vo,fq,bvo,vvo,Fvo,Cu,Kie,Tvo,Mvo,gq,Evo,Cvo,wvo,wu,Zie,Avo,Lvo,hq,yvo,xvo,$vo,Au,ede,kvo,Svo,uq,Rvo,Pvo,Bvo,Lu,ode,Ivo,Nvo,pq,qvo,jvo,Dvo,yu,rde,Gvo,Ovo,_q,Vvo,Xvo,zvo,xu,tde,Qvo,Wvo,bq,Hvo,Uvo,Jvo,$u,ade,Yvo,Kvo,vq,Zvo,e1o,o1o,ku,r1o,Su,t1o,Ru,dy,a1o,nde,n1o,IOe,Ni,Pu,sde,cy,s1o,lde,l1o,NOe,xo,my,i1o,qi,d1o,Fq,c1o,m1o,Tq,f1o,g1o,h1o,fy,u1o,ide,p1o,_1o,b1o,nt,gy,v1o,dde,F1o,T1o,ji,M1o,cde,E1o,C1o,Mq,w1o,A1o,L1o,Bu,y1o,Je,hy,x1o,mde,$1o,k1o,Ra,S1o,fde,R1o,P1o,gde,B1o,I1o,hde,N1o,q1o,j1o,y,Iu,ude,D1o,G1o,Eq,O1o,V1o,X1o,Nu,pde,z1o,Q1o,Cq,W1o,H1o,U1o,qu,_de,J1o,Y1o,wq,K1o,Z1o,eFo,ju,bde,oFo,rFo,Aq,tFo,aFo,nFo,Du,vde,sFo,lFo,Lq,iFo,dFo,cFo,Gu,Fde,mFo,fFo,yq,gFo,hFo,uFo,Ou,Tde,pFo,_Fo,xq,bFo,vFo,FFo,Vu,Mde,TFo,MFo,$q,EFo,CFo,wFo,Xu,Ede,AFo,LFo,kq,yFo,xFo,$Fo,zu,Cde,kFo,SFo,Sq,RFo,PFo,BFo,Qu,wde,IFo,NFo,Rq,qFo,jFo,DFo,Wu,Ade,GFo,OFo,Pq,VFo,XFo,zFo,Hu,Lde,QFo,WFo,Bq,HFo,UFo,JFo,Uu,yde,YFo,KFo,Iq,ZFo,eTo,oTo,Ju,xde,rTo,tTo,Nq,aTo,nTo,sTo,Yu,$de,lTo,iTo,qq,dTo,cTo,mTo,Ku,kde,fTo,gTo,jq,hTo,uTo,pTo,Zu,Sde,_To,bTo,Dq,vTo,FTo,TTo,ep,Rde,MTo,ETo,Gq,CTo,wTo,ATo,op,Pde,LTo,yTo,Oq,xTo,$To,kTo,rp,Bde,STo,RTo,Vq,PTo,BTo,ITo,tp,Ide,NTo,qTo,Xq,jTo,DTo,GTo,ap,Nde,OTo,VTo,zq,XTo,zTo,QTo,np,qde,WTo,HTo,Qq,UTo,JTo,YTo,sp,jde,KTo,ZTo,Wq,eMo,oMo,rMo,lp,Dde,tMo,aMo,Hq,nMo,sMo,lMo,ip,Gde,iMo,dMo,Uq,cMo,mMo,fMo,dp,Ode,gMo,hMo,Jq,uMo,pMo,_Mo,cp,Vde,bMo,vMo,Yq,FMo,TMo,MMo,mp,Xde,EMo,CMo,Kq,wMo,AMo,LMo,fp,zde,yMo,xMo,Zq,$Mo,kMo,SMo,gp,Qde,RMo,PMo,ej,BMo,IMo,NMo,hp,Wde,qMo,jMo,oj,DMo,GMo,OMo,up,Hde,VMo,XMo,rj,zMo,QMo,WMo,zs,Ude,HMo,UMo,tj,JMo,YMo,aj,KMo,ZMo,eEo,pp,Jde,oEo,rEo,nj,tEo,aEo,nEo,_p,Yde,sEo,lEo,sj,iEo,dEo,cEo,bp,Kde,mEo,fEo,lj,gEo,hEo,uEo,vp,Zde,pEo,_Eo,ij,bEo,vEo,FEo,Fp,ece,TEo,MEo,dj,EEo,CEo,wEo,Tp,oce,AEo,LEo,cj,yEo,xEo,$Eo,Mp,rce,kEo,SEo,mj,REo,PEo,BEo,Ep,tce,IEo,NEo,fj,qEo,jEo,DEo,Cp,ace,GEo,OEo,gj,VEo,XEo,zEo,wp,nce,QEo,WEo,hj,HEo,UEo,JEo,Ap,sce,YEo,KEo,uj,ZEo,e4o,o4o,Lp,lce,r4o,t4o,pj,a4o,n4o,s4o,yp,ice,l4o,i4o,_j,d4o,c4o,m4o,xp,dce,f4o,g4o,bj,h4o,u4o,p4o,$p,cce,_4o,b4o,vj,v4o,F4o,T4o,kp,mce,M4o,E4o,Fj,C4o,w4o,A4o,Sp,fce,L4o,y4o,Tj,x4o,$4o,k4o,Rp,gce,S4o,R4o,Mj,P4o,B4o,I4o,Pp,hce,N4o,q4o,Ej,j4o,D4o,G4o,Bp,uce,O4o,V4o,Cj,X4o,z4o,Q4o,Ip,pce,W4o,H4o,wj,U4o,J4o,Y4o,Np,_ce,K4o,Z4o,Aj,eCo,oCo,rCo,qp,bce,tCo,aCo,Lj,nCo,sCo,lCo,jp,vce,iCo,dCo,yj,cCo,mCo,fCo,Dp,Fce,gCo,hCo,xj,uCo,pCo,_Co,Gp,Tce,bCo,vCo,$j,FCo,TCo,MCo,Op,Mce,ECo,CCo,kj,wCo,ACo,LCo,Vp,Ece,yCo,xCo,Sj,$Co,kCo,SCo,Xp,Cce,RCo,PCo,Rj,BCo,ICo,NCo,zp,wce,qCo,jCo,Pj,DCo,GCo,OCo,Qp,Ace,VCo,XCo,Bj,zCo,QCo,WCo,Wp,Lce,HCo,UCo,Ij,JCo,YCo,KCo,Hp,yce,ZCo,e5o,Nj,o5o,r5o,t5o,Up,xce,a5o,n5o,qj,s5o,l5o,i5o,Jp,$ce,d5o,c5o,jj,m5o,f5o,g5o,Yp,kce,h5o,u5o,Dj,p5o,_5o,b5o,Kp,Sce,v5o,F5o,Gj,T5o,M5o,E5o,Zp,Rce,C5o,w5o,Oj,A5o,L5o,y5o,e_,Pce,x5o,$5o,Vj,k5o,S5o,R5o,o_,Bce,P5o,B5o,Xj,I5o,N5o,q5o,r_,Ice,j5o,D5o,zj,G5o,O5o,V5o,t_,Nce,X5o,z5o,Qj,Q5o,W5o,H5o,a_,qce,U5o,J5o,Wj,Y5o,K5o,Z5o,n_,jce,e3o,o3o,Hj,r3o,t3o,a3o,s_,Dce,n3o,s3o,Uj,l3o,i3o,d3o,l_,Gce,c3o,m3o,Jj,f3o,g3o,h3o,i_,Oce,u3o,p3o,Yj,_3o,b3o,v3o,d_,Vce,F3o,T3o,Kj,M3o,E3o,C3o,c_,Xce,w3o,A3o,Zj,L3o,y3o,x3o,m_,zce,$3o,k3o,eD,S3o,R3o,P3o,f_,Qce,B3o,I3o,oD,N3o,q3o,j3o,g_,Wce,D3o,G3o,rD,O3o,V3o,X3o,h_,Hce,z3o,Q3o,tD,W3o,H3o,U3o,u_,Uce,J3o,Y3o,aD,K3o,Z3o,e0o,p_,Jce,o0o,r0o,nD,t0o,a0o,n0o,__,Yce,s0o,l0o,sD,i0o,d0o,c0o,b_,Kce,m0o,f0o,lD,g0o,h0o,u0o,v_,Zce,p0o,_0o,iD,b0o,v0o,F0o,F_,eme,T0o,M0o,dD,E0o,C0o,w0o,T_,ome,A0o,L0o,cD,y0o,x0o,$0o,M_,rme,k0o,S0o,mD,R0o,P0o,B0o,E_,tme,I0o,N0o,fD,q0o,j0o,D0o,C_,ame,G0o,O0o,gD,V0o,X0o,z0o,w_,nme,Q0o,W0o,hD,H0o,U0o,J0o,A_,sme,Y0o,K0o,uD,Z0o,ewo,owo,L_,lme,rwo,two,pD,awo,nwo,swo,y_,ime,lwo,iwo,_D,dwo,cwo,mwo,x_,dme,fwo,gwo,bD,hwo,uwo,pwo,$_,cme,_wo,bwo,vD,vwo,Fwo,Two,k_,mme,Mwo,Ewo,FD,Cwo,wwo,Awo,S_,fme,Lwo,ywo,TD,xwo,$wo,kwo,R_,gme,Swo,Rwo,MD,Pwo,Bwo,Iwo,P_,hme,Nwo,qwo,ED,jwo,Dwo,Gwo,B_,ume,Owo,Vwo,CD,Xwo,zwo,Qwo,I_,Wwo,pme,Hwo,Uwo,_me,Jwo,Ywo,N_,qOe,Di,q_,bme,uy,Kwo,vme,Zwo,jOe,$o,py,eAo,Gi,oAo,wD,rAo,tAo,AD,aAo,nAo,sAo,_y,lAo,Fme,iAo,dAo,cAo,st,by,mAo,Tme,fAo,gAo,Oi,hAo,Mme,uAo,pAo,LD,_Ao,bAo,vAo,j_,FAo,Ye,vy,TAo,Eme,MAo,EAo,Pa,CAo,Cme,wAo,AAo,wme,LAo,yAo,Ame,xAo,$Ao,kAo,G,D_,Lme,SAo,RAo,yD,PAo,BAo,IAo,G_,yme,NAo,qAo,xD,jAo,DAo,GAo,O_,xme,OAo,VAo,$D,XAo,zAo,QAo,V_,$me,WAo,HAo,kD,UAo,JAo,YAo,X_,kme,KAo,ZAo,SD,e6o,o6o,r6o,z_,Sme,t6o,a6o,RD,n6o,s6o,l6o,Q_,Rme,i6o,d6o,PD,c6o,m6o,f6o,W_,Pme,g6o,h6o,BD,u6o,p6o,_6o,H_,Bme,b6o,v6o,ID,F6o,T6o,M6o,U_,Ime,E6o,C6o,ND,w6o,A6o,L6o,J_,Nme,y6o,x6o,qD,$6o,k6o,S6o,Y_,qme,R6o,P6o,jD,B6o,I6o,N6o,K_,jme,q6o,j6o,DD,D6o,G6o,O6o,Z_,Dme,V6o,X6o,GD,z6o,Q6o,W6o,e2,Gme,H6o,U6o,OD,J6o,Y6o,K6o,o2,Ome,Z6o,eLo,VD,oLo,rLo,tLo,r2,Vme,aLo,nLo,XD,sLo,lLo,iLo,t2,Xme,dLo,cLo,zD,mLo,fLo,gLo,a2,zme,hLo,uLo,QD,pLo,_Lo,bLo,n2,Qme,vLo,FLo,WD,TLo,MLo,ELo,s2,Wme,CLo,wLo,HD,ALo,LLo,yLo,l2,Hme,xLo,$Lo,UD,kLo,SLo,RLo,i2,Ume,PLo,BLo,JD,ILo,NLo,qLo,d2,Jme,jLo,DLo,YD,GLo,OLo,VLo,c2,Yme,XLo,zLo,KD,QLo,WLo,HLo,m2,Kme,ULo,JLo,ZD,YLo,KLo,ZLo,f2,Zme,e7o,o7o,eG,r7o,t7o,a7o,g2,efe,n7o,s7o,oG,l7o,i7o,d7o,h2,ofe,c7o,m7o,rG,f7o,g7o,h7o,u2,rfe,u7o,p7o,tG,_7o,b7o,v7o,p2,tfe,F7o,T7o,aG,M7o,E7o,C7o,_2,afe,w7o,A7o,nG,L7o,y7o,x7o,b2,nfe,$7o,k7o,sG,S7o,R7o,P7o,v2,sfe,B7o,I7o,lG,N7o,q7o,j7o,F2,lfe,D7o,G7o,iG,O7o,V7o,X7o,T2,ife,z7o,Q7o,dG,W7o,H7o,U7o,M2,dfe,J7o,Y7o,cG,K7o,Z7o,eyo,E2,cfe,oyo,ryo,mG,tyo,ayo,nyo,C2,mfe,syo,lyo,fG,iyo,dyo,cyo,w2,ffe,myo,fyo,gG,gyo,hyo,uyo,A2,gfe,pyo,_yo,hG,byo,vyo,Fyo,L2,hfe,Tyo,Myo,uG,Eyo,Cyo,wyo,y2,ufe,Ayo,Lyo,pG,yyo,xyo,$yo,x2,pfe,kyo,Syo,_G,Ryo,Pyo,Byo,$2,Iyo,_fe,Nyo,qyo,bfe,jyo,Dyo,k2,DOe,Vi,S2,vfe,Fy,Gyo,Ffe,Oyo,GOe,ko,Ty,Vyo,Xi,Xyo,bG,zyo,Qyo,vG,Wyo,Hyo,Uyo,My,Jyo,Tfe,Yyo,Kyo,Zyo,lt,Ey,e8o,Mfe,o8o,r8o,zi,t8o,Efe,a8o,n8o,FG,s8o,l8o,i8o,R2,d8o,Ke,Cy,c8o,Cfe,m8o,f8o,Ba,g8o,wfe,h8o,u8o,Afe,p8o,_8o,Lfe,b8o,v8o,F8o,z,P2,yfe,T8o,M8o,TG,E8o,C8o,w8o,B2,xfe,A8o,L8o,MG,y8o,x8o,$8o,I2,$fe,k8o,S8o,EG,R8o,P8o,B8o,N2,kfe,I8o,N8o,CG,q8o,j8o,D8o,q2,Sfe,G8o,O8o,wG,V8o,X8o,z8o,j2,Rfe,Q8o,W8o,AG,H8o,U8o,J8o,D2,Pfe,Y8o,K8o,LG,Z8o,e9o,o9o,G2,Bfe,r9o,t9o,yG,a9o,n9o,s9o,O2,Ife,l9o,i9o,xG,d9o,c9o,m9o,V2,Nfe,f9o,g9o,$G,h9o,u9o,p9o,X2,qfe,_9o,b9o,kG,v9o,F9o,T9o,z2,jfe,M9o,E9o,SG,C9o,w9o,A9o,Q2,Dfe,L9o,y9o,RG,x9o,$9o,k9o,W2,Gfe,S9o,R9o,PG,P9o,B9o,I9o,H2,Ofe,N9o,q9o,BG,j9o,D9o,G9o,U2,Vfe,O9o,V9o,IG,X9o,z9o,Q9o,J2,Xfe,W9o,H9o,NG,U9o,J9o,Y9o,Y2,zfe,K9o,Z9o,qG,exo,oxo,rxo,K2,Qfe,txo,axo,jG,nxo,sxo,lxo,Z2,Wfe,ixo,dxo,DG,cxo,mxo,fxo,eb,Hfe,gxo,hxo,GG,uxo,pxo,_xo,ob,Ufe,bxo,vxo,OG,Fxo,Txo,Mxo,rb,Jfe,Exo,Cxo,VG,wxo,Axo,Lxo,tb,Yfe,yxo,xxo,XG,$xo,kxo,Sxo,ab,Kfe,Rxo,Pxo,zG,Bxo,Ixo,Nxo,nb,Zfe,qxo,jxo,QG,Dxo,Gxo,Oxo,sb,ege,Vxo,Xxo,WG,zxo,Qxo,Wxo,lb,oge,Hxo,Uxo,HG,Jxo,Yxo,Kxo,ib,rge,Zxo,e$o,UG,o$o,r$o,t$o,db,tge,a$o,n$o,JG,s$o,l$o,i$o,cb,age,d$o,c$o,YG,m$o,f$o,g$o,mb,nge,h$o,u$o,KG,p$o,_$o,b$o,fb,sge,v$o,F$o,ZG,T$o,M$o,E$o,gb,lge,C$o,w$o,eO,A$o,L$o,y$o,hb,ige,x$o,$$o,oO,k$o,S$o,R$o,ub,dge,P$o,B$o,rO,I$o,N$o,q$o,pb,cge,j$o,D$o,tO,G$o,O$o,V$o,_b,mge,X$o,z$o,aO,Q$o,W$o,H$o,bb,fge,U$o,J$o,nO,Y$o,K$o,Z$o,vb,eko,gge,oko,rko,hge,tko,ako,Fb,OOe,Qi,Tb,uge,wy,nko,pge,sko,VOe,So,Ay,lko,Wi,iko,sO,dko,cko,lO,mko,fko,gko,Ly,hko,_ge,uko,pko,_ko,it,yy,bko,bge,vko,Fko,Hi,Tko,vge,Mko,Eko,iO,Cko,wko,Ako,Mb,Lko,Ze,xy,yko,Fge,xko,$ko,Ia,kko,Tge,Sko,Rko,Mge,Pko,Bko,Ege,Iko,Nko,qko,W,Eb,Cge,jko,Dko,dO,Gko,Oko,Vko,Cb,wge,Xko,zko,cO,Qko,Wko,Hko,wb,Age,Uko,Jko,mO,Yko,Kko,Zko,Ab,Lge,eSo,oSo,fO,rSo,tSo,aSo,Lb,yge,nSo,sSo,gO,lSo,iSo,dSo,yb,xge,cSo,mSo,hO,fSo,gSo,hSo,xb,$ge,uSo,pSo,uO,_So,bSo,vSo,$b,kge,FSo,TSo,pO,MSo,ESo,CSo,kb,Sge,wSo,ASo,_O,LSo,ySo,xSo,Sb,Rge,$So,kSo,bO,SSo,RSo,PSo,Rb,Pge,BSo,ISo,vO,NSo,qSo,jSo,Pb,Bge,DSo,GSo,FO,OSo,VSo,XSo,Bb,Ige,zSo,QSo,TO,WSo,HSo,USo,Ib,Nge,JSo,YSo,MO,KSo,ZSo,eRo,Nb,qge,oRo,rRo,EO,tRo,aRo,nRo,qb,jge,sRo,lRo,CO,iRo,dRo,cRo,jb,Dge,mRo,fRo,wO,gRo,hRo,uRo,Db,Gge,pRo,_Ro,AO,bRo,vRo,FRo,Gb,Oge,TRo,MRo,LO,ERo,CRo,wRo,Ob,Vge,ARo,LRo,yO,yRo,xRo,$Ro,Vb,Xge,kRo,SRo,xO,RRo,PRo,BRo,Xb,zge,IRo,NRo,$O,qRo,jRo,DRo,zb,Qge,GRo,ORo,kO,VRo,XRo,zRo,Qb,Wge,QRo,WRo,SO,HRo,URo,JRo,Wb,Hge,YRo,KRo,RO,ZRo,ePo,oPo,Hb,Uge,rPo,tPo,PO,aPo,nPo,sPo,Ub,Jge,lPo,iPo,BO,dPo,cPo,mPo,Jb,Yge,fPo,gPo,IO,hPo,uPo,pPo,Yb,Kge,_Po,bPo,NO,vPo,FPo,TPo,Kb,Zge,MPo,EPo,qO,CPo,wPo,APo,Zb,ehe,LPo,yPo,jO,xPo,$Po,kPo,ev,ohe,SPo,RPo,DO,PPo,BPo,IPo,ov,rhe,NPo,qPo,the,jPo,DPo,GPo,rv,ahe,OPo,VPo,GO,XPo,zPo,QPo,tv,nhe,WPo,HPo,OO,UPo,JPo,YPo,av,she,KPo,ZPo,VO,eBo,oBo,rBo,nv,lhe,tBo,aBo,XO,nBo,sBo,lBo,sv,iBo,ihe,dBo,cBo,dhe,mBo,fBo,lv,XOe,Ui,iv,che,$y,gBo,mhe,hBo,zOe,Ro,ky,uBo,Ji,pBo,zO,_Bo,bBo,QO,vBo,FBo,TBo,Sy,MBo,fhe,EBo,CBo,wBo,dt,Ry,ABo,ghe,LBo,yBo,Yi,xBo,hhe,$Bo,kBo,WO,SBo,RBo,PBo,dv,BBo,eo,Py,IBo,uhe,NBo,qBo,Na,jBo,phe,DBo,GBo,_he,OBo,VBo,bhe,XBo,zBo,QBo,ue,cv,vhe,WBo,HBo,HO,UBo,JBo,YBo,mv,Fhe,KBo,ZBo,UO,eIo,oIo,rIo,fv,The,tIo,aIo,JO,nIo,sIo,lIo,gv,Mhe,iIo,dIo,YO,cIo,mIo,fIo,hv,Ehe,gIo,hIo,KO,uIo,pIo,_Io,uv,Che,bIo,vIo,ZO,FIo,TIo,MIo,pv,whe,EIo,CIo,eV,wIo,AIo,LIo,_v,Ahe,yIo,xIo,oV,$Io,kIo,SIo,bv,Lhe,RIo,PIo,rV,BIo,IIo,NIo,vv,yhe,qIo,jIo,tV,DIo,GIo,OIo,Fv,xhe,VIo,XIo,aV,zIo,QIo,WIo,Tv,$he,HIo,UIo,nV,JIo,YIo,KIo,Mv,khe,ZIo,eNo,sV,oNo,rNo,tNo,Ev,She,aNo,nNo,lV,sNo,lNo,iNo,Cv,Rhe,dNo,cNo,iV,mNo,fNo,gNo,wv,Phe,hNo,uNo,dV,pNo,_No,bNo,Av,Bhe,vNo,FNo,cV,TNo,MNo,ENo,Lv,CNo,Ihe,wNo,ANo,Nhe,LNo,yNo,yv,QOe,Ki,xv,qhe,By,xNo,jhe,$No,WOe,Po,Iy,kNo,Zi,SNo,mV,RNo,PNo,fV,BNo,INo,NNo,Ny,qNo,Dhe,jNo,DNo,GNo,ct,qy,ONo,Ghe,VNo,XNo,ed,zNo,Ohe,QNo,WNo,gV,HNo,UNo,JNo,$v,YNo,oo,jy,KNo,Vhe,ZNo,eqo,qa,oqo,Xhe,rqo,tqo,zhe,aqo,nqo,Qhe,sqo,lqo,iqo,N,kv,Whe,dqo,cqo,hV,mqo,fqo,gqo,Sv,Hhe,hqo,uqo,uV,pqo,_qo,bqo,Rv,Uhe,vqo,Fqo,pV,Tqo,Mqo,Eqo,Pv,Jhe,Cqo,wqo,_V,Aqo,Lqo,yqo,Bv,Yhe,xqo,$qo,bV,kqo,Sqo,Rqo,Iv,Khe,Pqo,Bqo,vV,Iqo,Nqo,qqo,Nv,Zhe,jqo,Dqo,FV,Gqo,Oqo,Vqo,qv,eue,Xqo,zqo,TV,Qqo,Wqo,Hqo,jv,oue,Uqo,Jqo,MV,Yqo,Kqo,Zqo,Dv,rue,ejo,ojo,EV,rjo,tjo,ajo,Gv,tue,njo,sjo,CV,ljo,ijo,djo,Ov,aue,cjo,mjo,wV,fjo,gjo,hjo,Vv,nue,ujo,pjo,AV,_jo,bjo,vjo,Xv,sue,Fjo,Tjo,LV,Mjo,Ejo,Cjo,zv,lue,wjo,Ajo,yV,Ljo,yjo,xjo,Qv,iue,$jo,kjo,xV,Sjo,Rjo,Pjo,Wv,due,Bjo,Ijo,$V,Njo,qjo,jjo,Hv,cue,Djo,Gjo,kV,Ojo,Vjo,Xjo,Uv,mue,zjo,Qjo,SV,Wjo,Hjo,Ujo,Jv,fue,Jjo,Yjo,RV,Kjo,Zjo,eDo,Yv,gue,oDo,rDo,PV,tDo,aDo,nDo,Kv,hue,sDo,lDo,BV,iDo,dDo,cDo,Zv,uue,mDo,fDo,IV,gDo,hDo,uDo,e1,pue,pDo,_Do,NV,bDo,vDo,FDo,o1,_ue,TDo,MDo,qV,EDo,CDo,wDo,r1,bue,ADo,LDo,jV,yDo,xDo,$Do,t1,vue,kDo,SDo,DV,RDo,PDo,BDo,a1,Fue,IDo,NDo,GV,qDo,jDo,DDo,n1,Tue,GDo,ODo,OV,VDo,XDo,zDo,s1,Mue,QDo,WDo,VV,HDo,UDo,JDo,l1,Eue,YDo,KDo,XV,ZDo,eGo,oGo,i1,Cue,rGo,tGo,zV,aGo,nGo,sGo,d1,wue,lGo,iGo,QV,dGo,cGo,mGo,c1,Aue,fGo,gGo,WV,hGo,uGo,pGo,m1,Lue,_Go,bGo,HV,vGo,FGo,TGo,f1,yue,MGo,EGo,UV,CGo,wGo,AGo,g1,xue,LGo,yGo,JV,xGo,$Go,kGo,h1,$ue,SGo,RGo,YV,PGo,BGo,IGo,u1,kue,NGo,qGo,KV,jGo,DGo,GGo,p1,Sue,OGo,VGo,ZV,XGo,zGo,QGo,_1,Rue,WGo,HGo,eX,UGo,JGo,YGo,b1,Pue,KGo,ZGo,oX,eOo,oOo,rOo,v1,Bue,tOo,aOo,rX,nOo,sOo,lOo,F1,Iue,iOo,dOo,tX,cOo,mOo,fOo,T1,Nue,gOo,hOo,aX,uOo,pOo,_Oo,M1,que,bOo,vOo,nX,FOo,TOo,MOo,E1,jue,EOo,COo,sX,wOo,AOo,LOo,C1,Due,yOo,xOo,lX,$Oo,kOo,SOo,w1,Gue,ROo,POo,iX,BOo,IOo,NOo,A1,qOo,Oue,jOo,DOo,Vue,GOo,OOo,L1,HOe,od,y1,Xue,Dy,VOo,zue,XOo,UOe,Bo,Gy,zOo,rd,QOo,dX,WOo,HOo,cX,UOo,JOo,YOo,Oy,KOo,Que,ZOo,eVo,oVo,mt,Vy,rVo,Wue,tVo,aVo,td,nVo,Hue,sVo,lVo,mX,iVo,dVo,cVo,x1,mVo,ro,Xy,fVo,Uue,gVo,hVo,ja,uVo,Jue,pVo,_Vo,Yue,bVo,vVo,Kue,FVo,TVo,MVo,Z,$1,Zue,EVo,CVo,fX,wVo,AVo,LVo,k1,epe,yVo,xVo,gX,$Vo,kVo,SVo,S1,ope,RVo,PVo,hX,BVo,IVo,NVo,R1,rpe,qVo,jVo,uX,DVo,GVo,OVo,P1,tpe,VVo,XVo,pX,zVo,QVo,WVo,B1,ape,HVo,UVo,_X,JVo,YVo,KVo,I1,npe,ZVo,eXo,bX,oXo,rXo,tXo,N1,spe,aXo,nXo,vX,sXo,lXo,iXo,q1,lpe,dXo,cXo,FX,mXo,fXo,gXo,j1,ipe,hXo,uXo,TX,pXo,_Xo,bXo,D1,dpe,vXo,FXo,MX,TXo,MXo,EXo,G1,cpe,CXo,wXo,EX,AXo,LXo,yXo,O1,mpe,xXo,$Xo,CX,kXo,SXo,RXo,V1,fpe,PXo,BXo,wX,IXo,NXo,qXo,X1,gpe,jXo,DXo,AX,GXo,OXo,VXo,z1,hpe,XXo,zXo,LX,QXo,WXo,HXo,Q1,upe,UXo,JXo,yX,YXo,KXo,ZXo,W1,ppe,ezo,ozo,xX,rzo,tzo,azo,H1,_pe,nzo,szo,$X,lzo,izo,dzo,U1,bpe,czo,mzo,kX,fzo,gzo,hzo,J1,vpe,uzo,pzo,SX,_zo,bzo,vzo,Y1,Fpe,Fzo,Tzo,RX,Mzo,Ezo,Czo,K1,Tpe,wzo,Azo,PX,Lzo,yzo,xzo,Z1,Mpe,$zo,kzo,BX,Szo,Rzo,Pzo,eF,Epe,Bzo,Izo,IX,Nzo,qzo,jzo,oF,Cpe,Dzo,Gzo,NX,Ozo,Vzo,Xzo,rF,wpe,zzo,Qzo,qX,Wzo,Hzo,Uzo,tF,Ape,Jzo,Yzo,jX,Kzo,Zzo,eQo,aF,Lpe,oQo,rQo,DX,tQo,aQo,nQo,nF,ype,sQo,lQo,GX,iQo,dQo,cQo,sF,mQo,xpe,fQo,gQo,$pe,hQo,uQo,lF,JOe,ad,iF,kpe,zy,pQo,Spe,_Qo,YOe,Io,Qy,bQo,nd,vQo,OX,FQo,TQo,VX,MQo,EQo,CQo,Wy,wQo,Rpe,AQo,LQo,yQo,ft,Hy,xQo,Ppe,$Qo,kQo,sd,SQo,Bpe,RQo,PQo,XX,BQo,IQo,NQo,dF,qQo,to,Uy,jQo,Ipe,DQo,GQo,Da,OQo,Npe,VQo,XQo,qpe,zQo,QQo,jpe,WQo,HQo,UQo,No,cF,Dpe,JQo,YQo,zX,KQo,ZQo,eWo,mF,Gpe,oWo,rWo,QX,tWo,aWo,nWo,fF,Ope,sWo,lWo,WX,iWo,dWo,cWo,gF,Vpe,mWo,fWo,HX,gWo,hWo,uWo,hF,Xpe,pWo,_Wo,UX,bWo,vWo,FWo,uF,zpe,TWo,MWo,JX,EWo,CWo,wWo,pF,AWo,Qpe,LWo,yWo,Wpe,xWo,$Wo,_F,KOe,ld,bF,Hpe,Jy,kWo,Upe,SWo,ZOe,qo,Yy,RWo,id,PWo,YX,BWo,IWo,KX,NWo,qWo,jWo,Ky,DWo,Jpe,GWo,OWo,VWo,gt,Zy,XWo,Ype,zWo,QWo,dd,WWo,Kpe,HWo,UWo,ZX,JWo,YWo,KWo,vF,ZWo,ao,e8,eHo,Zpe,oHo,rHo,Ga,tHo,e_e,aHo,nHo,o_e,sHo,lHo,r_e,iHo,dHo,cHo,H,FF,t_e,mHo,fHo,ez,gHo,hHo,uHo,TF,a_e,pHo,_Ho,oz,bHo,vHo,FHo,MF,n_e,THo,MHo,rz,EHo,CHo,wHo,EF,s_e,AHo,LHo,tz,yHo,xHo,$Ho,CF,l_e,kHo,SHo,az,RHo,PHo,BHo,wF,i_e,IHo,NHo,nz,qHo,jHo,DHo,AF,d_e,GHo,OHo,sz,VHo,XHo,zHo,LF,c_e,QHo,WHo,lz,HHo,UHo,JHo,yF,m_e,YHo,KHo,iz,ZHo,eUo,oUo,xF,f_e,rUo,tUo,dz,aUo,nUo,sUo,$F,g_e,lUo,iUo,cz,dUo,cUo,mUo,kF,h_e,fUo,gUo,mz,hUo,uUo,pUo,SF,u_e,_Uo,bUo,fz,vUo,FUo,TUo,RF,p_e,MUo,EUo,gz,CUo,wUo,AUo,PF,__e,LUo,yUo,hz,xUo,$Uo,kUo,BF,b_e,SUo,RUo,uz,PUo,BUo,IUo,IF,v_e,NUo,qUo,pz,jUo,DUo,GUo,NF,F_e,OUo,VUo,_z,XUo,zUo,QUo,qF,T_e,WUo,HUo,bz,UUo,JUo,YUo,jF,M_e,KUo,ZUo,vz,eJo,oJo,rJo,DF,E_e,tJo,aJo,Fz,nJo,sJo,lJo,GF,C_e,iJo,dJo,Tz,cJo,mJo,fJo,OF,w_e,gJo,hJo,Mz,uJo,pJo,_Jo,VF,A_e,bJo,vJo,Ez,FJo,TJo,MJo,XF,L_e,EJo,CJo,Cz,wJo,AJo,LJo,zF,y_e,yJo,xJo,wz,$Jo,kJo,SJo,QF,x_e,RJo,PJo,Az,BJo,IJo,NJo,WF,$_e,qJo,jJo,Lz,DJo,GJo,OJo,HF,k_e,VJo,XJo,yz,zJo,QJo,WJo,UF,S_e,HJo,UJo,xz,JJo,YJo,KJo,JF,R_e,ZJo,eYo,$z,oYo,rYo,tYo,YF,P_e,aYo,nYo,kz,sYo,lYo,iYo,KF,B_e,dYo,cYo,Sz,mYo,fYo,gYo,ZF,I_e,hYo,uYo,Rz,pYo,_Yo,bYo,eT,N_e,vYo,FYo,Pz,TYo,MYo,EYo,oT,q_e,CYo,wYo,Bz,AYo,LYo,yYo,rT,xYo,j_e,$Yo,kYo,D_e,SYo,RYo,tT,eVe,cd,aT,G_e,o8,PYo,O_e,BYo,oVe,jo,r8,IYo,md,NYo,Iz,qYo,jYo,Nz,DYo,GYo,OYo,t8,VYo,V_e,XYo,zYo,QYo,ht,a8,WYo,X_e,HYo,UYo,fd,JYo,z_e,YYo,KYo,qz,ZYo,eKo,oKo,nT,rKo,no,n8,tKo,Q_e,aKo,nKo,Oa,sKo,W_e,lKo,iKo,H_e,dKo,cKo,U_e,mKo,fKo,gKo,V,sT,J_e,hKo,uKo,jz,pKo,_Ko,bKo,lT,Y_e,vKo,FKo,Dz,TKo,MKo,EKo,iT,K_e,CKo,wKo,Gz,AKo,LKo,yKo,dT,Z_e,xKo,$Ko,Oz,kKo,SKo,RKo,cT,e2e,PKo,BKo,Vz,IKo,NKo,qKo,mT,o2e,jKo,DKo,Xz,GKo,OKo,VKo,fT,r2e,XKo,zKo,zz,QKo,WKo,HKo,gT,t2e,UKo,JKo,Qz,YKo,KKo,ZKo,hT,a2e,eZo,oZo,Wz,rZo,tZo,aZo,uT,n2e,nZo,sZo,Hz,lZo,iZo,dZo,pT,s2e,cZo,mZo,Uz,fZo,gZo,hZo,_T,l2e,uZo,pZo,Jz,_Zo,bZo,vZo,bT,i2e,FZo,TZo,Yz,MZo,EZo,CZo,vT,d2e,wZo,AZo,Kz,LZo,yZo,xZo,FT,c2e,$Zo,kZo,Zz,SZo,RZo,PZo,TT,m2e,BZo,IZo,eQ,NZo,qZo,jZo,MT,f2e,DZo,GZo,oQ,OZo,VZo,XZo,ET,g2e,zZo,QZo,rQ,WZo,HZo,UZo,CT,h2e,JZo,YZo,tQ,KZo,ZZo,eer,wT,u2e,oer,rer,aQ,ter,aer,ner,AT,p2e,ser,ler,nQ,ier,der,cer,LT,_2e,mer,fer,sQ,ger,her,uer,yT,b2e,per,_er,lQ,ber,ver,Fer,xT,v2e,Ter,Mer,iQ,Eer,Cer,wer,$T,F2e,Aer,Ler,dQ,yer,xer,$er,kT,T2e,ker,Ser,cQ,Rer,Per,Ber,ST,M2e,Ier,Ner,mQ,qer,jer,Der,RT,E2e,Ger,Oer,fQ,Ver,Xer,zer,PT,C2e,Qer,Wer,gQ,Her,Uer,Jer,BT,w2e,Yer,Ker,hQ,Zer,eor,oor,IT,A2e,ror,tor,uQ,aor,nor,sor,NT,L2e,lor,ior,pQ,dor,cor,mor,qT,y2e,gor,hor,_Q,uor,por,_or,jT,x2e,bor,vor,bQ,For,Tor,Mor,DT,$2e,Eor,Cor,vQ,wor,Aor,Lor,GT,k2e,yor,xor,FQ,$or,kor,Sor,OT,S2e,Ror,Por,TQ,Bor,Ior,Nor,VT,R2e,qor,jor,MQ,Dor,Gor,Oor,XT,P2e,Vor,Xor,EQ,zor,Qor,Wor,zT,B2e,Hor,Uor,CQ,Jor,Yor,Kor,QT,I2e,Zor,err,wQ,orr,rrr,trr,WT,arr,N2e,nrr,srr,q2e,lrr,irr,HT,rVe,gd,UT,j2e,s8,drr,D2e,crr,tVe,Do,l8,mrr,hd,frr,AQ,grr,hrr,LQ,urr,prr,_rr,i8,brr,G2e,vrr,Frr,Trr,ut,d8,Mrr,O2e,Err,Crr,ud,wrr,V2e,Arr,Lrr,yQ,yrr,xrr,$rr,JT,krr,so,c8,Srr,X2e,Rrr,Prr,Va,Brr,z2e,Irr,Nrr,Q2e,qrr,jrr,W2e,Drr,Grr,Orr,H2e,YT,U2e,Vrr,Xrr,xQ,zrr,Qrr,Wrr,KT,Hrr,J2e,Urr,Jrr,Y2e,Yrr,Krr,ZT,aVe,pd,eM,K2e,m8,Zrr,Z2e,etr,nVe,Go,f8,otr,_d,rtr,$Q,ttr,atr,kQ,ntr,str,ltr,g8,itr,ebe,dtr,ctr,mtr,pt,h8,ftr,obe,gtr,htr,bd,utr,rbe,ptr,_tr,SQ,btr,vtr,Ftr,oM,Ttr,lo,u8,Mtr,tbe,Etr,Ctr,Xa,wtr,abe,Atr,Ltr,nbe,ytr,xtr,sbe,$tr,ktr,Str,Fe,rM,lbe,Rtr,Ptr,RQ,Btr,Itr,Ntr,tM,ibe,qtr,jtr,PQ,Dtr,Gtr,Otr,aM,dbe,Vtr,Xtr,BQ,ztr,Qtr,Wtr,nM,cbe,Htr,Utr,IQ,Jtr,Ytr,Ktr,Qs,mbe,Ztr,ear,NQ,oar,rar,qQ,tar,aar,nar,sM,fbe,sar,lar,jQ,iar,dar,car,Ws,gbe,mar,far,DQ,gar,har,GQ,uar,par,_ar,_t,hbe,bar,Far,OQ,Tar,Mar,VQ,Ear,Car,XQ,war,Aar,Lar,lM,ube,yar,xar,zQ,$ar,kar,Sar,iM,pbe,Rar,Par,QQ,Bar,Iar,Nar,dM,_be,qar,jar,WQ,Dar,Gar,Oar,cM,bbe,Var,Xar,HQ,zar,Qar,War,mM,vbe,Har,Uar,UQ,Jar,Yar,Kar,fM,Fbe,Zar,enr,JQ,onr,rnr,tnr,gM,Tbe,anr,nnr,YQ,snr,lnr,inr,hM,dnr,Mbe,cnr,mnr,Ebe,fnr,gnr,uM,sVe,vd,pM,Cbe,p8,hnr,wbe,unr,lVe,Oo,_8,pnr,Fd,_nr,KQ,bnr,vnr,ZQ,Fnr,Tnr,Mnr,b8,Enr,Abe,Cnr,wnr,Anr,bt,v8,Lnr,Lbe,ynr,xnr,Td,$nr,ybe,knr,Snr,eW,Rnr,Pnr,Bnr,_M,Inr,io,F8,Nnr,xbe,qnr,jnr,za,Dnr,$be,Gnr,Onr,kbe,Vnr,Xnr,Sbe,znr,Qnr,Wnr,Rbe,bM,Pbe,Hnr,Unr,oW,Jnr,Ynr,Knr,vM,Znr,Bbe,esr,osr,Ibe,rsr,tsr,FM,iVe,Md,TM,Nbe,T8,asr,qbe,nsr,dVe,Vo,M8,ssr,Ed,lsr,rW,isr,dsr,tW,csr,msr,fsr,E8,gsr,jbe,hsr,usr,psr,vt,C8,_sr,Dbe,bsr,vsr,Cd,Fsr,Gbe,Tsr,Msr,aW,Esr,Csr,wsr,MM,Asr,co,w8,Lsr,Obe,ysr,xsr,Qa,$sr,Vbe,ksr,Ssr,Xbe,Rsr,Psr,zbe,Bsr,Isr,Nsr,Qbe,EM,Wbe,qsr,jsr,nW,Dsr,Gsr,Osr,CM,Vsr,Hbe,Xsr,zsr,Ube,Qsr,Wsr,wM,cVe,wd,AM,Jbe,A8,Hsr,Ybe,Usr,mVe,Xo,L8,Jsr,Ad,Ysr,sW,Ksr,Zsr,lW,elr,olr,rlr,y8,tlr,Kbe,alr,nlr,slr,Ft,x8,llr,Zbe,ilr,dlr,Ld,clr,eve,mlr,flr,iW,glr,hlr,ulr,LM,plr,mo,$8,_lr,ove,blr,vlr,Wa,Flr,rve,Tlr,Mlr,tve,Elr,Clr,ave,wlr,Alr,Llr,Pe,yM,nve,ylr,xlr,dW,$lr,klr,Slr,xM,sve,Rlr,Plr,cW,Blr,Ilr,Nlr,$M,lve,qlr,jlr,mW,Dlr,Glr,Olr,kM,ive,Vlr,Xlr,fW,zlr,Qlr,Wlr,SM,dve,Hlr,Ulr,gW,Jlr,Ylr,Klr,RM,cve,Zlr,eir,hW,oir,rir,tir,PM,mve,air,nir,uW,sir,lir,iir,BM,fve,dir,cir,pW,mir,fir,gir,IM,gve,hir,uir,_W,pir,_ir,bir,NM,vir,hve,Fir,Tir,uve,Mir,Eir,qM,fVe,yd,jM,pve,k8,Cir,_ve,wir,gVe,zo,S8,Air,xd,Lir,bW,yir,xir,vW,$ir,kir,Sir,R8,Rir,bve,Pir,Bir,Iir,Tt,P8,Nir,vve,qir,jir,$d,Dir,Fve,Gir,Oir,FW,Vir,Xir,zir,DM,Qir,fo,B8,Wir,Tve,Hir,Uir,Ha,Jir,Mve,Yir,Kir,Eve,Zir,edr,Cve,odr,rdr,tdr,et,GM,wve,adr,ndr,TW,sdr,ldr,idr,OM,Ave,ddr,cdr,MW,mdr,fdr,gdr,VM,Lve,hdr,udr,EW,pdr,_dr,bdr,XM,yve,vdr,Fdr,CW,Tdr,Mdr,Edr,zM,xve,Cdr,wdr,wW,Adr,Ldr,ydr,QM,xdr,$ve,$dr,kdr,kve,Sdr,Rdr,WM,hVe,kd,HM,Sve,I8,Pdr,Rve,Bdr,uVe,Qo,N8,Idr,Sd,Ndr,AW,qdr,jdr,LW,Ddr,Gdr,Odr,q8,Vdr,Pve,Xdr,zdr,Qdr,Mt,j8,Wdr,Bve,Hdr,Udr,Rd,Jdr,Ive,Ydr,Kdr,yW,Zdr,ecr,ocr,UM,rcr,go,D8,tcr,Nve,acr,ncr,Ua,scr,qve,lcr,icr,jve,dcr,ccr,Dve,mcr,fcr,gcr,Le,JM,Gve,hcr,ucr,xW,pcr,_cr,bcr,YM,Ove,vcr,Fcr,$W,Tcr,Mcr,Ecr,KM,Vve,Ccr,wcr,kW,Acr,Lcr,ycr,ZM,Xve,xcr,$cr,SW,kcr,Scr,Rcr,eE,zve,Pcr,Bcr,RW,Icr,Ncr,qcr,oE,Qve,jcr,Dcr,PW,Gcr,Ocr,Vcr,rE,Wve,Xcr,zcr,BW,Qcr,Wcr,Hcr,tE,Hve,Ucr,Jcr,IW,Ycr,Kcr,Zcr,aE,Uve,emr,omr,NW,rmr,tmr,amr,nE,Jve,nmr,smr,qW,lmr,imr,dmr,sE,cmr,Yve,mmr,fmr,Kve,gmr,hmr,lE,pVe,Pd,iE,Zve,G8,umr,e1e,pmr,_Ve,Wo,O8,_mr,Bd,bmr,jW,vmr,Fmr,DW,Tmr,Mmr,Emr,V8,Cmr,o1e,wmr,Amr,Lmr,Et,X8,ymr,r1e,xmr,$mr,Id,kmr,t1e,Smr,Rmr,GW,Pmr,Bmr,Imr,dE,Nmr,ho,z8,qmr,a1e,jmr,Dmr,Ja,Gmr,n1e,Omr,Vmr,s1e,Xmr,zmr,l1e,Qmr,Wmr,Hmr,Q8,cE,i1e,Umr,Jmr,OW,Ymr,Kmr,Zmr,mE,d1e,efr,ofr,VW,rfr,tfr,afr,fE,nfr,c1e,sfr,lfr,m1e,ifr,dfr,gE,bVe,Nd,hE,f1e,W8,cfr,g1e,mfr,vVe,Ho,H8,ffr,qd,gfr,XW,hfr,ufr,zW,pfr,_fr,bfr,U8,vfr,h1e,Ffr,Tfr,Mfr,Ct,J8,Efr,u1e,Cfr,wfr,jd,Afr,p1e,Lfr,yfr,QW,xfr,$fr,kfr,uE,Sfr,uo,Y8,Rfr,_1e,Pfr,Bfr,Ya,Ifr,b1e,Nfr,qfr,v1e,jfr,Dfr,F1e,Gfr,Ofr,Vfr,ot,pE,T1e,Xfr,zfr,WW,Qfr,Wfr,Hfr,_E,M1e,Ufr,Jfr,HW,Yfr,Kfr,Zfr,bE,E1e,egr,ogr,UW,rgr,tgr,agr,vE,C1e,ngr,sgr,JW,lgr,igr,dgr,FE,w1e,cgr,mgr,YW,fgr,ggr,hgr,TE,ugr,A1e,pgr,_gr,L1e,bgr,vgr,ME,FVe,Dd,EE,y1e,K8,Fgr,x1e,Tgr,TVe,Uo,Z8,Mgr,Gd,Egr,KW,Cgr,wgr,ZW,Agr,Lgr,ygr,e9,xgr,$1e,$gr,kgr,Sgr,wt,o9,Rgr,k1e,Pgr,Bgr,Od,Igr,S1e,Ngr,qgr,eH,jgr,Dgr,Ggr,CE,Ogr,po,r9,Vgr,R1e,Xgr,zgr,Ka,Qgr,P1e,Wgr,Hgr,B1e,Ugr,Jgr,I1e,Ygr,Kgr,Zgr,Vd,wE,N1e,ehr,ohr,oH,rhr,thr,ahr,AE,q1e,nhr,shr,rH,lhr,ihr,dhr,LE,j1e,chr,mhr,tH,fhr,ghr,hhr,yE,uhr,D1e,phr,_hr,G1e,bhr,vhr,xE,MVe,Xd,$E,O1e,t9,Fhr,V1e,Thr,EVe,Jo,a9,Mhr,zd,Ehr,aH,Chr,whr,nH,Ahr,Lhr,yhr,n9,xhr,X1e,$hr,khr,Shr,At,s9,Rhr,z1e,Phr,Bhr,Qd,Ihr,Q1e,Nhr,qhr,sH,jhr,Dhr,Ghr,kE,Ohr,_o,l9,Vhr,W1e,Xhr,zhr,Za,Qhr,H1e,Whr,Hhr,U1e,Uhr,Jhr,J1e,Yhr,Khr,Zhr,i9,SE,Y1e,eur,our,lH,rur,tur,aur,RE,K1e,nur,sur,iH,lur,iur,dur,PE,cur,Z1e,mur,fur,eFe,gur,hur,BE,CVe,Wd,IE,oFe,d9,uur,rFe,pur,wVe,Yo,c9,_ur,Hd,bur,dH,vur,Fur,cH,Tur,Mur,Eur,m9,Cur,tFe,wur,Aur,Lur,Lt,f9,yur,aFe,xur,$ur,Ud,kur,nFe,Sur,Rur,mH,Pur,Bur,Iur,NE,Nur,bo,g9,qur,sFe,jur,Dur,en,Gur,lFe,Our,Vur,iFe,Xur,zur,dFe,Qur,Wur,Hur,cFe,qE,mFe,Uur,Jur,fH,Yur,Kur,Zur,jE,epr,fFe,opr,rpr,gFe,tpr,apr,DE,AVe,Jd,GE,hFe,h9,npr,uFe,spr,LVe,Ko,u9,lpr,Yd,ipr,gH,dpr,cpr,hH,mpr,fpr,gpr,p9,hpr,pFe,upr,ppr,_pr,yt,_9,bpr,_Fe,vpr,Fpr,Kd,Tpr,bFe,Mpr,Epr,uH,Cpr,wpr,Apr,OE,Lpr,vo,b9,ypr,vFe,xpr,$pr,on,kpr,FFe,Spr,Rpr,TFe,Ppr,Bpr,MFe,Ipr,Npr,qpr,rn,VE,EFe,jpr,Dpr,pH,Gpr,Opr,Vpr,XE,CFe,Xpr,zpr,_H,Qpr,Wpr,Hpr,zE,wFe,Upr,Jpr,bH,Ypr,Kpr,Zpr,QE,AFe,e_r,o_r,vH,r_r,t_r,a_r,WE,n_r,LFe,s_r,l_r,yFe,i_r,d_r,HE,yVe,Zd,UE,xFe,v9,c_r,$Fe,m_r,xVe,Zo,F9,f_r,ec,g_r,FH,h_r,u_r,TH,p_r,__r,b_r,T9,v_r,kFe,F_r,T_r,M_r,xt,M9,E_r,SFe,C_r,w_r,oc,A_r,RFe,L_r,y_r,MH,x_r,$_r,k_r,JE,S_r,Fo,E9,R_r,PFe,P_r,B_r,tn,I_r,BFe,N_r,q_r,IFe,j_r,D_r,NFe,G_r,O_r,V_r,qFe,YE,jFe,X_r,z_r,EH,Q_r,W_r,H_r,KE,U_r,DFe,J_r,Y_r,GFe,K_r,Z_r,ZE,$Ve,rc,e4,OFe,C9,e2r,VFe,o2r,kVe,er,w9,r2r,tc,t2r,CH,a2r,n2r,wH,s2r,l2r,i2r,A9,d2r,XFe,c2r,m2r,f2r,$t,L9,g2r,zFe,h2r,u2r,ac,p2r,QFe,_2r,b2r,AH,v2r,F2r,T2r,o4,M2r,yr,y9,E2r,WFe,C2r,w2r,an,A2r,HFe,L2r,y2r,UFe,x2r,$2r,JFe,k2r,S2r,R2r,j,r4,YFe,P2r,B2r,LH,I2r,N2r,q2r,t4,KFe,j2r,D2r,yH,G2r,O2r,V2r,a4,ZFe,X2r,z2r,xH,Q2r,W2r,H2r,n4,eTe,U2r,J2r,$H,Y2r,K2r,Z2r,s4,oTe,ebr,obr,kH,rbr,tbr,abr,l4,rTe,nbr,sbr,SH,lbr,ibr,dbr,i4,tTe,cbr,mbr,RH,fbr,gbr,hbr,d4,aTe,ubr,pbr,PH,_br,bbr,vbr,c4,nTe,Fbr,Tbr,BH,Mbr,Ebr,Cbr,m4,sTe,wbr,Abr,IH,Lbr,ybr,xbr,f4,lTe,$br,kbr,NH,Sbr,Rbr,Pbr,g4,iTe,Bbr,Ibr,qH,Nbr,qbr,jbr,h4,dTe,Dbr,Gbr,jH,Obr,Vbr,Xbr,u4,cTe,zbr,Qbr,DH,Wbr,Hbr,Ubr,p4,mTe,Jbr,Ybr,GH,Kbr,Zbr,evr,_4,fTe,ovr,rvr,OH,tvr,avr,nvr,b4,gTe,svr,lvr,VH,ivr,dvr,cvr,Hs,hTe,mvr,fvr,XH,gvr,hvr,zH,uvr,pvr,_vr,v4,uTe,bvr,vvr,QH,Fvr,Tvr,Mvr,F4,pTe,Evr,Cvr,WH,wvr,Avr,Lvr,T4,_Te,yvr,xvr,HH,$vr,kvr,Svr,M4,bTe,Rvr,Pvr,UH,Bvr,Ivr,Nvr,E4,vTe,qvr,jvr,JH,Dvr,Gvr,Ovr,C4,FTe,Vvr,Xvr,YH,zvr,Qvr,Wvr,w4,TTe,Hvr,Uvr,KH,Jvr,Yvr,Kvr,A4,MTe,Zvr,e1r,ZH,o1r,r1r,t1r,L4,ETe,a1r,n1r,eU,s1r,l1r,i1r,y4,CTe,d1r,c1r,oU,m1r,f1r,g1r,x4,wTe,h1r,u1r,rU,p1r,_1r,b1r,$4,ATe,v1r,F1r,tU,T1r,M1r,E1r,k4,LTe,C1r,w1r,aU,A1r,L1r,y1r,S4,yTe,x1r,$1r,nU,k1r,S1r,R1r,R4,xTe,P1r,B1r,sU,I1r,N1r,q1r,P4,$Te,j1r,D1r,lU,G1r,O1r,V1r,B4,kTe,X1r,z1r,iU,Q1r,W1r,H1r,I4,STe,U1r,J1r,dU,Y1r,K1r,Z1r,N4,RTe,eFr,oFr,cU,rFr,tFr,aFr,q4,PTe,nFr,sFr,mU,lFr,iFr,dFr,j4,BTe,cFr,mFr,fU,fFr,gFr,hFr,D4,ITe,uFr,pFr,gU,_Fr,bFr,vFr,G4,NTe,FFr,TFr,hU,MFr,EFr,CFr,O4,qTe,wFr,AFr,uU,LFr,yFr,xFr,V4,jTe,$Fr,kFr,pU,SFr,RFr,PFr,X4,DTe,BFr,IFr,_U,NFr,qFr,jFr,z4,GTe,DFr,GFr,bU,OFr,VFr,XFr,Q4,OTe,zFr,QFr,vU,WFr,HFr,UFr,W4,VTe,JFr,YFr,FU,KFr,ZFr,eTr,H4,SVe,nc,U4,XTe,x9,oTr,zTe,rTr,RVe,or,$9,tTr,sc,aTr,TU,nTr,sTr,MU,lTr,iTr,dTr,k9,cTr,QTe,mTr,fTr,gTr,kt,S9,hTr,WTe,uTr,pTr,lc,_Tr,HTe,bTr,vTr,EU,FTr,TTr,MTr,J4,ETr,xr,R9,CTr,UTe,wTr,ATr,nn,LTr,JTe,yTr,xTr,YTe,$Tr,kTr,KTe,STr,RTr,PTr,se,Y4,ZTe,BTr,ITr,CU,NTr,qTr,jTr,K4,eMe,DTr,GTr,wU,OTr,VTr,XTr,Z4,oMe,zTr,QTr,AU,WTr,HTr,UTr,eC,rMe,JTr,YTr,LU,KTr,ZTr,eMr,oC,tMe,oMr,rMr,yU,tMr,aMr,nMr,rC,aMe,sMr,lMr,xU,iMr,dMr,cMr,tC,nMe,mMr,fMr,$U,gMr,hMr,uMr,aC,sMe,pMr,_Mr,kU,bMr,vMr,FMr,nC,lMe,TMr,MMr,SU,EMr,CMr,wMr,sC,iMe,AMr,LMr,RU,yMr,xMr,$Mr,lC,dMe,kMr,SMr,PU,RMr,PMr,BMr,iC,cMe,IMr,NMr,BU,qMr,jMr,DMr,dC,mMe,GMr,OMr,IU,VMr,XMr,zMr,cC,fMe,QMr,WMr,NU,HMr,UMr,JMr,mC,gMe,YMr,KMr,qU,ZMr,eEr,oEr,fC,hMe,rEr,tEr,jU,aEr,nEr,sEr,gC,uMe,lEr,iEr,DU,dEr,cEr,mEr,hC,pMe,fEr,gEr,GU,hEr,uEr,pEr,uC,_Me,_Er,bEr,OU,vEr,FEr,TEr,pC,bMe,MEr,EEr,VU,CEr,wEr,AEr,_C,vMe,LEr,yEr,XU,xEr,$Er,kEr,bC,FMe,SEr,REr,zU,PEr,BEr,IEr,vC,TMe,NEr,qEr,QU,jEr,DEr,GEr,FC,PVe,ic,TC,MMe,P9,OEr,EMe,VEr,BVe,rr,B9,XEr,dc,zEr,WU,QEr,WEr,HU,HEr,UEr,JEr,I9,YEr,CMe,KEr,ZEr,e4r,St,N9,o4r,wMe,r4r,t4r,cc,a4r,AMe,n4r,s4r,UU,l4r,i4r,d4r,MC,c4r,$r,q9,m4r,LMe,f4r,g4r,sn,h4r,yMe,u4r,p4r,xMe,_4r,b4r,$Me,v4r,F4r,T4r,Me,EC,kMe,M4r,E4r,JU,C4r,w4r,A4r,CC,SMe,L4r,y4r,YU,x4r,$4r,k4r,wC,RMe,S4r,R4r,KU,P4r,B4r,I4r,AC,PMe,N4r,q4r,ZU,j4r,D4r,G4r,LC,BMe,O4r,V4r,eJ,X4r,z4r,Q4r,yC,IMe,W4r,H4r,oJ,U4r,J4r,Y4r,xC,NMe,K4r,Z4r,rJ,eCr,oCr,rCr,$C,qMe,tCr,aCr,tJ,nCr,sCr,lCr,kC,jMe,iCr,dCr,aJ,cCr,mCr,fCr,SC,DMe,gCr,hCr,nJ,uCr,pCr,_Cr,RC,GMe,bCr,vCr,sJ,FCr,TCr,MCr,PC,OMe,ECr,CCr,lJ,wCr,ACr,LCr,BC,VMe,yCr,xCr,iJ,$Cr,kCr,SCr,IC,IVe,mc,NC,XMe,j9,RCr,zMe,PCr,NVe,tr,D9,BCr,fc,ICr,dJ,NCr,qCr,cJ,jCr,DCr,GCr,G9,OCr,QMe,VCr,XCr,zCr,Rt,O9,QCr,WMe,WCr,HCr,gc,UCr,HMe,JCr,YCr,mJ,KCr,ZCr,e5r,qC,o5r,kr,V9,r5r,UMe,t5r,a5r,ln,n5r,JMe,s5r,l5r,YMe,i5r,d5r,KMe,c5r,m5r,f5r,dn,jC,ZMe,g5r,h5r,fJ,u5r,p5r,_5r,DC,eEe,b5r,v5r,gJ,F5r,T5r,M5r,GC,oEe,E5r,C5r,hJ,w5r,A5r,L5r,OC,rEe,y5r,x5r,uJ,$5r,k5r,S5r,VC,qVe,hc,XC,tEe,X9,R5r,aEe,P5r,jVe,ar,z9,B5r,uc,I5r,pJ,N5r,q5r,_J,j5r,D5r,G5r,Q9,O5r,nEe,V5r,X5r,z5r,Pt,W9,Q5r,sEe,W5r,H5r,pc,U5r,lEe,J5r,Y5r,bJ,K5r,Z5r,e3r,zC,o3r,Sr,H9,r3r,iEe,t3r,a3r,cn,n3r,dEe,s3r,l3r,cEe,i3r,d3r,mEe,c3r,m3r,f3r,ie,QC,fEe,g3r,h3r,vJ,u3r,p3r,_3r,WC,gEe,b3r,v3r,FJ,F3r,T3r,M3r,HC,hEe,E3r,C3r,TJ,w3r,A3r,L3r,UC,uEe,y3r,x3r,MJ,$3r,k3r,S3r,JC,pEe,R3r,P3r,EJ,B3r,I3r,N3r,YC,_Ee,q3r,j3r,CJ,D3r,G3r,O3r,KC,bEe,V3r,X3r,wJ,z3r,Q3r,W3r,ZC,vEe,H3r,U3r,AJ,J3r,Y3r,K3r,e5,FEe,Z3r,e0r,LJ,o0r,r0r,t0r,o5,TEe,a0r,n0r,yJ,s0r,l0r,i0r,r5,MEe,d0r,c0r,xJ,m0r,f0r,g0r,t5,EEe,h0r,u0r,$J,p0r,_0r,b0r,a5,CEe,v0r,F0r,kJ,T0r,M0r,E0r,n5,wEe,C0r,w0r,SJ,A0r,L0r,y0r,s5,AEe,x0r,$0r,RJ,k0r,S0r,R0r,l5,LEe,P0r,B0r,PJ,I0r,N0r,q0r,i5,yEe,j0r,D0r,BJ,G0r,O0r,V0r,d5,xEe,X0r,z0r,IJ,Q0r,W0r,H0r,c5,$Ee,U0r,J0r,NJ,Y0r,K0r,Z0r,m5,kEe,ewr,owr,qJ,rwr,twr,awr,f5,DVe,_c,g5,SEe,U9,nwr,REe,swr,GVe,nr,J9,lwr,bc,iwr,jJ,dwr,cwr,DJ,mwr,fwr,gwr,Y9,hwr,PEe,uwr,pwr,_wr,Bt,K9,bwr,BEe,vwr,Fwr,vc,Twr,IEe,Mwr,Ewr,GJ,Cwr,wwr,Awr,h5,Lwr,Rr,Z9,ywr,NEe,xwr,$wr,mn,kwr,qEe,Swr,Rwr,jEe,Pwr,Bwr,DEe,Iwr,Nwr,qwr,ye,u5,GEe,jwr,Dwr,OJ,Gwr,Owr,Vwr,p5,OEe,Xwr,zwr,VJ,Qwr,Wwr,Hwr,_5,VEe,Uwr,Jwr,XJ,Ywr,Kwr,Zwr,b5,XEe,eAr,oAr,zJ,rAr,tAr,aAr,v5,zEe,nAr,sAr,QJ,lAr,iAr,dAr,F5,QEe,cAr,mAr,WJ,fAr,gAr,hAr,T5,WEe,uAr,pAr,HJ,_Ar,bAr,vAr,M5,HEe,FAr,TAr,UJ,MAr,EAr,CAr,E5,UEe,wAr,AAr,JJ,LAr,yAr,xAr,C5,JEe,$Ar,kAr,YJ,SAr,RAr,PAr,w5,OVe,Fc,A5,YEe,ex,BAr,KEe,IAr,VVe,sr,ox,NAr,Tc,qAr,KJ,jAr,DAr,ZJ,GAr,OAr,VAr,rx,XAr,ZEe,zAr,QAr,WAr,It,tx,HAr,e4e,UAr,JAr,Mc,YAr,o4e,KAr,ZAr,eY,e6r,o6r,r6r,L5,t6r,Pr,ax,a6r,r4e,n6r,s6r,fn,l6r,t4e,i6r,d6r,a4e,c6r,m6r,n4e,f6r,g6r,h6r,te,y5,s4e,u6r,p6r,oY,_6r,b6r,v6r,x5,l4e,F6r,T6r,rY,M6r,E6r,C6r,$5,i4e,w6r,A6r,tY,L6r,y6r,x6r,k5,d4e,$6r,k6r,aY,S6r,R6r,P6r,S5,c4e,B6r,I6r,nY,N6r,q6r,j6r,R5,m4e,D6r,G6r,sY,O6r,V6r,X6r,P5,f4e,z6r,Q6r,lY,W6r,H6r,U6r,B5,g4e,J6r,Y6r,iY,K6r,Z6r,eLr,I5,h4e,oLr,rLr,dY,tLr,aLr,nLr,N5,u4e,sLr,lLr,cY,iLr,dLr,cLr,q5,p4e,mLr,fLr,mY,gLr,hLr,uLr,j5,_4e,pLr,_Lr,fY,bLr,vLr,FLr,D5,b4e,TLr,MLr,gY,ELr,CLr,wLr,G5,v4e,ALr,LLr,hY,yLr,xLr,$Lr,O5,F4e,kLr,SLr,uY,RLr,PLr,BLr,V5,T4e,ILr,NLr,pY,qLr,jLr,DLr,X5,M4e,GLr,OLr,_Y,VLr,XLr,zLr,z5,E4e,QLr,WLr,bY,HLr,ULr,JLr,Q5,C4e,YLr,KLr,vY,ZLr,e7r,o7r,W5,w4e,r7r,t7r,FY,a7r,n7r,s7r,H5,A4e,l7r,i7r,TY,d7r,c7r,m7r,U5,L4e,f7r,g7r,MY,h7r,u7r,p7r,J5,y4e,_7r,b7r,EY,v7r,F7r,T7r,Y5,x4e,M7r,E7r,CY,C7r,w7r,A7r,K5,$4e,L7r,y7r,wY,x7r,$7r,k7r,Z5,k4e,S7r,R7r,AY,P7r,B7r,I7r,e3,XVe,Ec,o3,S4e,nx,N7r,R4e,q7r,zVe,lr,sx,j7r,Cc,D7r,LY,G7r,O7r,yY,V7r,X7r,z7r,lx,Q7r,P4e,W7r,H7r,U7r,Nt,ix,J7r,B4e,Y7r,K7r,wc,Z7r,I4e,eyr,oyr,xY,ryr,tyr,ayr,r3,nyr,Br,dx,syr,N4e,lyr,iyr,gn,dyr,q4e,cyr,myr,j4e,fyr,gyr,D4e,hyr,uyr,pyr,pe,t3,G4e,_yr,byr,$Y,vyr,Fyr,Tyr,a3,O4e,Myr,Eyr,kY,Cyr,wyr,Ayr,n3,V4e,Lyr,yyr,SY,xyr,$yr,kyr,s3,X4e,Syr,Ryr,RY,Pyr,Byr,Iyr,l3,z4e,Nyr,qyr,PY,jyr,Dyr,Gyr,i3,Q4e,Oyr,Vyr,BY,Xyr,zyr,Qyr,d3,W4e,Wyr,Hyr,IY,Uyr,Jyr,Yyr,c3,H4e,Kyr,Zyr,NY,e8r,o8r,r8r,m3,U4e,t8r,a8r,qY,n8r,s8r,l8r,f3,J4e,i8r,d8r,jY,c8r,m8r,f8r,g3,Y4e,g8r,h8r,DY,u8r,p8r,_8r,h3,K4e,b8r,v8r,GY,F8r,T8r,M8r,u3,Z4e,E8r,C8r,OY,w8r,A8r,L8r,p3,eCe,y8r,x8r,VY,$8r,k8r,S8r,_3,oCe,R8r,P8r,XY,B8r,I8r,N8r,b3,rCe,q8r,j8r,zY,D8r,G8r,O8r,v3,tCe,V8r,X8r,QY,z8r,Q8r,W8r,F3,QVe,Ac,T3,aCe,cx,H8r,nCe,U8r,WVe,ir,mx,J8r,Lc,Y8r,WY,K8r,Z8r,HY,e9r,o9r,r9r,fx,t9r,sCe,a9r,n9r,s9r,qt,gx,l9r,lCe,i9r,d9r,yc,c9r,iCe,m9r,f9r,UY,g9r,h9r,u9r,M3,p9r,Ir,hx,_9r,dCe,b9r,v9r,hn,F9r,cCe,T9r,M9r,mCe,E9r,C9r,fCe,w9r,A9r,L9r,ux,E3,gCe,y9r,x9r,JY,$9r,k9r,S9r,C3,hCe,R9r,P9r,YY,B9r,I9r,N9r,w3,HVe,xc,A3,uCe,px,q9r,pCe,j9r,UVe,dr,_x,D9r,$c,G9r,KY,O9r,V9r,ZY,X9r,z9r,Q9r,bx,W9r,_Ce,H9r,U9r,J9r,jt,vx,Y9r,bCe,K9r,Z9r,kc,exr,vCe,oxr,rxr,eK,txr,axr,nxr,L3,sxr,Nr,Fx,lxr,FCe,ixr,dxr,un,cxr,TCe,mxr,fxr,MCe,gxr,hxr,ECe,uxr,pxr,_xr,CCe,y3,wCe,bxr,vxr,oK,Fxr,Txr,Mxr,x3,JVe,Sc,$3,ACe,Tx,Exr,LCe,Cxr,YVe,cr,Mx,wxr,Rc,Axr,rK,Lxr,yxr,tK,xxr,$xr,kxr,Ex,Sxr,yCe,Rxr,Pxr,Bxr,Dt,Cx,Ixr,xCe,Nxr,qxr,Pc,jxr,$Ce,Dxr,Gxr,aK,Oxr,Vxr,Xxr,k3,zxr,qr,wx,Qxr,kCe,Wxr,Hxr,pn,Uxr,SCe,Jxr,Yxr,RCe,Kxr,Zxr,PCe,e$r,o$r,r$r,de,S3,BCe,t$r,a$r,nK,n$r,s$r,l$r,R3,ICe,i$r,d$r,sK,c$r,m$r,f$r,P3,NCe,g$r,h$r,lK,u$r,p$r,_$r,B3,qCe,b$r,v$r,iK,F$r,T$r,M$r,I3,jCe,E$r,C$r,dK,w$r,A$r,L$r,N3,DCe,y$r,x$r,cK,$$r,k$r,S$r,q3,GCe,R$r,P$r,mK,B$r,I$r,N$r,j3,OCe,q$r,j$r,fK,D$r,G$r,O$r,D3,VCe,V$r,X$r,gK,z$r,Q$r,W$r,G3,XCe,H$r,U$r,hK,J$r,Y$r,K$r,O3,zCe,Z$r,ekr,uK,okr,rkr,tkr,V3,QCe,akr,nkr,pK,skr,lkr,ikr,X3,WCe,dkr,ckr,_K,mkr,fkr,gkr,z3,HCe,hkr,ukr,bK,pkr,_kr,bkr,Q3,UCe,vkr,Fkr,vK,Tkr,Mkr,Ekr,W3,JCe,Ckr,wkr,FK,Akr,Lkr,ykr,H3,YCe,xkr,$kr,TK,kkr,Skr,Rkr,U3,KCe,Pkr,Bkr,MK,Ikr,Nkr,qkr,J3,ZCe,jkr,Dkr,EK,Gkr,Okr,Vkr,Y3,e5e,Xkr,zkr,CK,Qkr,Wkr,Hkr,K3,KVe,Bc,Z3,o5e,Ax,Ukr,r5e,Jkr,ZVe,mr,Lx,Ykr,Ic,Kkr,wK,Zkr,eSr,AK,oSr,rSr,tSr,yx,aSr,t5e,nSr,sSr,lSr,Gt,xx,iSr,a5e,dSr,cSr,Nc,mSr,n5e,fSr,gSr,LK,hSr,uSr,pSr,e0,_Sr,jr,$x,bSr,s5e,vSr,FSr,_n,TSr,l5e,MSr,ESr,i5e,CSr,wSr,d5e,ASr,LSr,ySr,ce,o0,c5e,xSr,$Sr,yK,kSr,SSr,RSr,r0,m5e,PSr,BSr,xK,ISr,NSr,qSr,t0,f5e,jSr,DSr,$K,GSr,OSr,VSr,a0,g5e,XSr,zSr,kK,QSr,WSr,HSr,n0,h5e,USr,JSr,SK,YSr,KSr,ZSr,s0,u5e,eRr,oRr,RK,rRr,tRr,aRr,l0,p5e,nRr,sRr,PK,lRr,iRr,dRr,i0,_5e,cRr,mRr,BK,fRr,gRr,hRr,d0,b5e,uRr,pRr,IK,_Rr,bRr,vRr,c0,v5e,FRr,TRr,NK,MRr,ERr,CRr,m0,F5e,wRr,ARr,qK,LRr,yRr,xRr,f0,T5e,$Rr,kRr,jK,SRr,RRr,PRr,g0,M5e,BRr,IRr,DK,NRr,qRr,jRr,h0,E5e,DRr,GRr,GK,ORr,VRr,XRr,u0,C5e,zRr,QRr,OK,WRr,HRr,URr,p0,w5e,JRr,YRr,VK,KRr,ZRr,ePr,_0,A5e,oPr,rPr,XK,tPr,aPr,nPr,b0,L5e,sPr,lPr,zK,iPr,dPr,cPr,v0,y5e,mPr,fPr,QK,gPr,hPr,uPr,F0,x5e,pPr,_Pr,WK,bPr,vPr,FPr,T0,eXe,qc,M0,$5e,kx,TPr,k5e,MPr,oXe,fr,Sx,EPr,jc,CPr,HK,wPr,APr,UK,LPr,yPr,xPr,Rx,$Pr,S5e,kPr,SPr,RPr,Ot,Px,PPr,R5e,BPr,IPr,Dc,NPr,P5e,qPr,jPr,JK,DPr,GPr,OPr,E0,VPr,Dr,Bx,XPr,B5e,zPr,QPr,bn,WPr,I5e,HPr,UPr,N5e,JPr,YPr,q5e,KPr,ZPr,eBr,j5e,C0,D5e,oBr,rBr,YK,tBr,aBr,nBr,w0,rXe,Gc,A0,G5e,Ix,sBr,O5e,lBr,tXe,gr,Nx,iBr,Oc,dBr,KK,cBr,mBr,ZK,fBr,gBr,hBr,qx,uBr,V5e,pBr,_Br,bBr,Vt,jx,vBr,X5e,FBr,TBr,Vc,MBr,z5e,EBr,CBr,eZ,wBr,ABr,LBr,L0,yBr,Gr,Dx,xBr,Q5e,$Br,kBr,vn,SBr,W5e,RBr,PBr,H5e,BBr,IBr,U5e,NBr,qBr,jBr,J5e,y0,Y5e,DBr,GBr,oZ,OBr,VBr,XBr,x0,aXe,Xc,$0,K5e,Gx,zBr,Z5e,QBr,nXe,hr,Ox,WBr,zc,HBr,rZ,UBr,JBr,tZ,YBr,KBr,ZBr,Vx,eIr,e3e,oIr,rIr,tIr,Xt,Xx,aIr,o3e,nIr,sIr,Qc,lIr,r3e,iIr,dIr,aZ,cIr,mIr,fIr,k0,gIr,Or,zx,hIr,t3e,uIr,pIr,Fn,_Ir,a3e,bIr,vIr,n3e,FIr,TIr,s3e,MIr,EIr,CIr,oe,S0,l3e,wIr,AIr,nZ,LIr,yIr,xIr,R0,i3e,$Ir,kIr,sZ,SIr,RIr,PIr,P0,d3e,BIr,IIr,lZ,NIr,qIr,jIr,B0,c3e,DIr,GIr,iZ,OIr,VIr,XIr,I0,m3e,zIr,QIr,dZ,WIr,HIr,UIr,N0,f3e,JIr,YIr,cZ,KIr,ZIr,eNr,q0,g3e,oNr,rNr,mZ,tNr,aNr,nNr,j0,h3e,sNr,lNr,fZ,iNr,dNr,cNr,D0,u3e,mNr,fNr,gZ,gNr,hNr,uNr,G0,p3e,pNr,_Nr,hZ,bNr,vNr,FNr,O0,_3e,TNr,MNr,uZ,ENr,CNr,wNr,V0,b3e,ANr,LNr,pZ,yNr,xNr,$Nr,X0,v3e,kNr,SNr,_Z,RNr,PNr,BNr,z0,F3e,INr,NNr,bZ,qNr,jNr,DNr,Q0,T3e,GNr,ONr,vZ,VNr,XNr,zNr,W0,M3e,QNr,WNr,FZ,HNr,UNr,JNr,H0,E3e,YNr,KNr,TZ,ZNr,eqr,oqr,U0,C3e,rqr,tqr,MZ,aqr,nqr,sqr,J0,w3e,lqr,iqr,EZ,dqr,cqr,mqr,Y0,A3e,fqr,gqr,CZ,hqr,uqr,pqr,K0,L3e,_qr,bqr,wZ,vqr,Fqr,Tqr,Z0,y3e,Mqr,Eqr,AZ,Cqr,wqr,Aqr,ew,x3e,Lqr,yqr,LZ,xqr,$qr,kqr,ow,$3e,Sqr,Rqr,yZ,Pqr,Bqr,Iqr,rw,k3e,Nqr,qqr,xZ,jqr,Dqr,Gqr,tw,S3e,Oqr,Vqr,$Z,Xqr,zqr,Qqr,aw,R3e,Wqr,Hqr,kZ,Uqr,Jqr,Yqr,nw,sXe,Wc,sw,P3e,Qx,Kqr,B3e,Zqr,lXe,ur,Wx,ejr,Hc,ojr,SZ,rjr,tjr,RZ,ajr,njr,sjr,Hx,ljr,I3e,ijr,djr,cjr,zt,Ux,mjr,N3e,fjr,gjr,Uc,hjr,q3e,ujr,pjr,PZ,_jr,bjr,vjr,lw,Fjr,Vr,Jx,Tjr,j3e,Mjr,Ejr,Tn,Cjr,D3e,wjr,Ajr,G3e,Ljr,yjr,O3e,xjr,$jr,kjr,xe,iw,V3e,Sjr,Rjr,BZ,Pjr,Bjr,Ijr,dw,X3e,Njr,qjr,IZ,jjr,Djr,Gjr,cw,z3e,Ojr,Vjr,NZ,Xjr,zjr,Qjr,mw,Q3e,Wjr,Hjr,qZ,Ujr,Jjr,Yjr,fw,W3e,Kjr,Zjr,jZ,eDr,oDr,rDr,gw,H3e,tDr,aDr,DZ,nDr,sDr,lDr,hw,U3e,iDr,dDr,GZ,cDr,mDr,fDr,uw,J3e,gDr,hDr,OZ,uDr,pDr,_Dr,pw,Y3e,bDr,vDr,VZ,FDr,TDr,MDr,_w,K3e,EDr,CDr,XZ,wDr,ADr,LDr,bw,iXe,Jc,vw,Z3e,Yx,yDr,e0e,xDr,dXe,pr,Kx,$Dr,Yc,kDr,zZ,SDr,RDr,QZ,PDr,BDr,IDr,Zx,NDr,o0e,qDr,jDr,DDr,Qt,e$,GDr,r0e,ODr,VDr,Kc,XDr,t0e,zDr,QDr,WZ,WDr,HDr,UDr,Fw,JDr,Xr,o$,YDr,a0e,KDr,ZDr,Mn,eGr,n0e,oGr,rGr,s0e,tGr,aGr,l0e,nGr,sGr,lGr,Ee,Tw,i0e,iGr,dGr,HZ,cGr,mGr,fGr,Mw,d0e,gGr,hGr,UZ,uGr,pGr,_Gr,Ew,c0e,bGr,vGr,JZ,FGr,TGr,MGr,Cw,m0e,EGr,CGr,YZ,wGr,AGr,LGr,ww,f0e,yGr,xGr,KZ,$Gr,kGr,SGr,Aw,g0e,RGr,PGr,ZZ,BGr,IGr,NGr,Lw,h0e,qGr,jGr,eee,DGr,GGr,OGr,yw,u0e,VGr,XGr,oee,zGr,QGr,WGr,xw,p0e,HGr,UGr,ree,JGr,YGr,KGr,$w,_0e,ZGr,eOr,tee,oOr,rOr,tOr,kw,b0e,aOr,nOr,aee,sOr,lOr,iOr,Sw,v0e,dOr,cOr,nee,mOr,fOr,gOr,Rw,F0e,hOr,uOr,see,pOr,_Or,bOr,Pw,cXe,Zc,Bw,T0e,r$,vOr,M0e,FOr,mXe,_r,t$,TOr,em,MOr,lee,EOr,COr,iee,wOr,AOr,LOr,a$,yOr,E0e,xOr,$Or,kOr,Wt,n$,SOr,C0e,ROr,POr,om,BOr,w0e,IOr,NOr,dee,qOr,jOr,DOr,Iw,GOr,zr,s$,OOr,A0e,VOr,XOr,En,zOr,L0e,QOr,WOr,y0e,HOr,UOr,x0e,JOr,YOr,KOr,$e,Nw,$0e,ZOr,eVr,cee,oVr,rVr,tVr,qw,k0e,aVr,nVr,mee,sVr,lVr,iVr,jw,S0e,dVr,cVr,fee,mVr,fVr,gVr,Dw,R0e,hVr,uVr,gee,pVr,_Vr,bVr,Gw,P0e,vVr,FVr,hee,TVr,MVr,EVr,Ow,B0e,CVr,wVr,uee,AVr,LVr,yVr,Vw,I0e,xVr,$Vr,pee,kVr,SVr,RVr,Xw,N0e,PVr,BVr,_ee,IVr,NVr,qVr,zw,q0e,jVr,DVr,bee,GVr,OVr,VVr,Qw,j0e,XVr,zVr,vee,QVr,WVr,HVr,Ww,fXe,rm,Hw,D0e,l$,UVr,G0e,JVr,gXe,br,i$,YVr,tm,KVr,Fee,ZVr,eXr,Tee,oXr,rXr,tXr,d$,aXr,O0e,nXr,sXr,lXr,Ht,c$,iXr,V0e,dXr,cXr,am,mXr,X0e,fXr,gXr,Mee,hXr,uXr,pXr,Uw,_Xr,Qr,m$,bXr,z0e,vXr,FXr,Cn,TXr,Q0e,MXr,EXr,W0e,CXr,wXr,H0e,AXr,LXr,yXr,ke,Jw,U0e,xXr,$Xr,Eee,kXr,SXr,RXr,Yw,J0e,PXr,BXr,Cee,IXr,NXr,qXr,Kw,Y0e,jXr,DXr,wee,GXr,OXr,VXr,Zw,K0e,XXr,zXr,Aee,QXr,WXr,HXr,eA,Z0e,UXr,JXr,Lee,YXr,KXr,ZXr,oA,ewe,ezr,ozr,yee,rzr,tzr,azr,rA,owe,nzr,szr,xee,lzr,izr,dzr,tA,rwe,czr,mzr,$ee,fzr,gzr,hzr,aA,twe,uzr,pzr,kee,_zr,bzr,vzr,nA,awe,Fzr,Tzr,See,Mzr,Ezr,Czr,sA,hXe,nm,lA,nwe,f$,wzr,swe,Azr,uXe,vr,g$,Lzr,sm,yzr,Ree,xzr,$zr,Pee,kzr,Szr,Rzr,h$,Pzr,lwe,Bzr,Izr,Nzr,Ut,u$,qzr,iwe,jzr,Dzr,lm,Gzr,dwe,Ozr,Vzr,Bee,Xzr,zzr,Qzr,iA,Wzr,Wr,p$,Hzr,cwe,Uzr,Jzr,wn,Yzr,mwe,Kzr,Zzr,fwe,eQr,oQr,gwe,rQr,tQr,aQr,Se,dA,hwe,nQr,sQr,Iee,lQr,iQr,dQr,cA,uwe,cQr,mQr,Nee,fQr,gQr,hQr,mA,pwe,uQr,pQr,qee,_Qr,bQr,vQr,fA,_we,FQr,TQr,jee,MQr,EQr,CQr,gA,bwe,wQr,AQr,Dee,LQr,yQr,xQr,hA,vwe,$Qr,kQr,Gee,SQr,RQr,PQr,uA,Fwe,BQr,IQr,Oee,NQr,qQr,jQr,pA,Twe,DQr,GQr,Vee,OQr,VQr,XQr,_A,Mwe,zQr,QQr,Xee,WQr,HQr,UQr,bA,Ewe,JQr,YQr,zee,KQr,ZQr,eWr,vA,pXe,im,FA,Cwe,_$,oWr,wwe,rWr,_Xe,Fr,b$,tWr,dm,aWr,Qee,nWr,sWr,Wee,lWr,iWr,dWr,v$,cWr,Awe,mWr,fWr,gWr,Jt,F$,hWr,Lwe,uWr,pWr,cm,_Wr,ywe,bWr,vWr,Hee,FWr,TWr,MWr,TA,EWr,Hr,T$,CWr,xwe,wWr,AWr,An,LWr,$we,yWr,xWr,kwe,$Wr,kWr,Swe,SWr,RWr,PWr,Re,MA,Rwe,BWr,IWr,Uee,NWr,qWr,jWr,EA,Pwe,DWr,GWr,Jee,OWr,VWr,XWr,CA,Bwe,zWr,QWr,Yee,WWr,HWr,UWr,wA,Iwe,JWr,YWr,Kee,KWr,ZWr,eHr,AA,Nwe,oHr,rHr,Zee,tHr,aHr,nHr,LA,qwe,sHr,lHr,eoe,iHr,dHr,cHr,yA,jwe,mHr,fHr,ooe,gHr,hHr,uHr,xA,Dwe,pHr,_Hr,roe,bHr,vHr,FHr,$A,Gwe,THr,MHr,toe,EHr,CHr,wHr,kA,Owe,AHr,LHr,aoe,yHr,xHr,$Hr,SA,bXe,mm,RA,Vwe,M$,kHr,Xwe,SHr,vXe,Tr,E$,RHr,fm,PHr,noe,BHr,IHr,soe,NHr,qHr,jHr,C$,DHr,zwe,GHr,OHr,VHr,Yt,w$,XHr,Qwe,zHr,QHr,gm,WHr,Wwe,HHr,UHr,loe,JHr,YHr,KHr,PA,ZHr,Ur,A$,eUr,Hwe,oUr,rUr,Ln,tUr,Uwe,aUr,nUr,Jwe,sUr,lUr,Ywe,iUr,dUr,cUr,Ve,BA,Kwe,mUr,fUr,ioe,gUr,hUr,uUr,IA,Zwe,pUr,_Ur,doe,bUr,vUr,FUr,NA,eAe,TUr,MUr,coe,EUr,CUr,wUr,qA,oAe,AUr,LUr,moe,yUr,xUr,$Ur,jA,rAe,kUr,SUr,foe,RUr,PUr,BUr,DA,tAe,IUr,NUr,goe,qUr,jUr,DUr,GA,aAe,GUr,OUr,hoe,VUr,XUr,zUr,OA,nAe,QUr,WUr,uoe,HUr,UUr,JUr,VA,FXe,hm,XA,sAe,L$,YUr,lAe,KUr,TXe,Mr,y$,ZUr,um,eJr,poe,oJr,rJr,_oe,tJr,aJr,nJr,x$,sJr,iAe,lJr,iJr,dJr,Kt,$$,cJr,dAe,mJr,fJr,pm,gJr,cAe,hJr,uJr,boe,pJr,_Jr,bJr,zA,vJr,Jr,k$,FJr,mAe,TJr,MJr,yn,EJr,fAe,CJr,wJr,gAe,AJr,LJr,hAe,yJr,xJr,$Jr,Xe,QA,uAe,kJr,SJr,voe,RJr,PJr,BJr,WA,pAe,IJr,NJr,Foe,qJr,jJr,DJr,HA,_Ae,GJr,OJr,Toe,VJr,XJr,zJr,UA,bAe,QJr,WJr,Moe,HJr,UJr,JJr,JA,vAe,YJr,KJr,Eoe,ZJr,eYr,oYr,YA,FAe,rYr,tYr,Coe,aYr,nYr,sYr,KA,TAe,lYr,iYr,woe,dYr,cYr,mYr,ZA,MAe,fYr,gYr,Aoe,hYr,uYr,pYr,e6,MXe,_m,o6,EAe,S$,_Yr,CAe,bYr,EXe,Er,R$,vYr,bm,FYr,Loe,TYr,MYr,yoe,EYr,CYr,wYr,P$,AYr,wAe,LYr,yYr,xYr,Zt,B$,$Yr,AAe,kYr,SYr,vm,RYr,LAe,PYr,BYr,xoe,IYr,NYr,qYr,r6,jYr,Yr,I$,DYr,yAe,GYr,OYr,xn,VYr,xAe,XYr,zYr,$Ae,QYr,WYr,kAe,HYr,UYr,JYr,SAe,t6,RAe,YYr,KYr,$oe,ZYr,eKr,oKr,a6,CXe,Fm,n6,PAe,N$,rKr,BAe,tKr,wXe,Cr,q$,aKr,Tm,nKr,koe,sKr,lKr,Soe,iKr,dKr,cKr,j$,mKr,IAe,fKr,gKr,hKr,ea,D$,uKr,NAe,pKr,_Kr,Mm,bKr,qAe,vKr,FKr,Roe,TKr,MKr,EKr,s6,CKr,Kr,G$,wKr,jAe,AKr,LKr,$n,yKr,DAe,xKr,$Kr,GAe,kKr,SKr,OAe,RKr,PKr,BKr,O$,l6,VAe,IKr,NKr,Poe,qKr,jKr,DKr,i6,XAe,GKr,OKr,Boe,VKr,XKr,zKr,d6,AXe,Em,c6,zAe,V$,QKr,QAe,WKr,LXe,wr,X$,HKr,Cm,UKr,Ioe,JKr,YKr,Noe,KKr,ZKr,eZr,z$,oZr,WAe,rZr,tZr,aZr,oa,Q$,nZr,HAe,sZr,lZr,wm,iZr,UAe,dZr,cZr,qoe,mZr,fZr,gZr,m6,hZr,Zr,W$,uZr,JAe,pZr,_Zr,kn,bZr,YAe,vZr,FZr,KAe,TZr,MZr,ZAe,EZr,CZr,wZr,e6e,f6,o6e,AZr,LZr,joe,yZr,xZr,$Zr,g6,yXe;return d=new re({}),xa=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),q7=new re({}),j7=new P({props:{code:"",highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Pm=new kZr({props:{warning:!0,$$slots:{default:[EOt]},$$scope:{ctx:$}}}),D7=new re({}),G7=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/configuration_auto.py#L604"}}),X7=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/configuration_auto.py#L627"}}),zg=new B({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[COt]},$$scope:{ctx:$}}}),z7=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/configuration_auto.py#L750"}}),Q7=new re({}),W7=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/tokenization_auto.py#L402"}}),J7=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/tokenization_auto.py#L416"}}),Lh=new B({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[wOt]},$$scope:{ctx:$}}}),Y7=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/tokenization_auto.py#L615"}}),K7=new re({}),Z7=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/feature_extraction_auto.py#L194"}}),ry=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/main/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/feature_extraction_auto.py#L208"}}),du=new kZr({props:{$$slots:{default:[AOt]},$$scope:{ctx:$}}}),cu=new B({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[LOt]},$$scope:{ctx:$}}}),ty=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/feature_extraction_auto.py#L335"}}),ay=new re({}),ny=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/processing_auto.py#L89"}}),iy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/processing_auto.py#L103"}}),ku=new kZr({props:{$$slots:{default:[yOt]},$$scope:{ctx:$}}}),Su=new B({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[xOt]},$$scope:{ctx:$}}}),dy=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/processing_auto.py#L256"}}),cy=new re({}),my=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L771"}}),gy=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomModel">BloomModel</a> (BLOOM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (CANINE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenModel">CodeGenModel</a> (CodeGen model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (FLAVA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXModel">GPTNeoXModel</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/main/en/model_doc/groupvit#transformers.GroupViTConfig">GroupViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/groupvit#transformers.GroupViTModel">GroupViTModel</a> (GroupViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model">LayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/levit#transformers.LevitModel">LevitModel</a> (LeViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Model">LongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTModel">MCTCTModel</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaModel">NezhaModel</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Bu=new B({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[$Ot]},$$scope:{ctx:$}}}),hy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),N_=new B({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[kOt]},$$scope:{ctx:$}}}),uy=new re({}),py=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L778"}}),by=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (FLAVA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForPreTraining">NezhaForPreTraining</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),j_=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[SOt]},$$scope:{ctx:$}}}),vy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),k2=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[ROt]},$$scope:{ctx:$}}}),Fy=new re({}),Ty=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L793"}}),Ey=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenForCausalLM">CodeGenForCausalLM</a> (CodeGen model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM">GPTNeoXForCausalLM</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),R2=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[POt]},$$scope:{ctx:$}}}),Cy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Fb=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[BOt]},$$scope:{ctx:$}}}),wy=new re({}),Ay=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L800"}}),yy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForMaskedLM">NezhaForMaskedLM</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Mb=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[IOt]},$$scope:{ctx:$}}}),xy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),lv=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[NOt]},$$scope:{ctx:$}}}),$y=new re({}),ky=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L807"}}),Ry=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration">LongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLM-ProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),dv=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[qOt]},$$scope:{ctx:$}}}),Py=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),yv=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[jOt]},$$scope:{ctx:$}}}),By=new re({}),Iy=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L816"}}),qy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomForSequenceClassification">BloomForSequenceClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification">LayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForSequenceClassification">NezhaForSequenceClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),$v=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[DOt]},$$scope:{ctx:$}}}),jy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),L1=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[GOt]},$$scope:{ctx:$}}}),Dy=new re({}),Gy=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L861"}}),Vy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (CANINE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForMultipleChoice">NezhaForMultipleChoice</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),x1=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[OOt]},$$scope:{ctx:$}}}),Xy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),lF=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[VOt]},$$scope:{ctx:$}}}),zy=new re({}),Qy=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L868"}}),Hy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction">NezhaForNextSentencePrediction</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),dF=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[XOt]},$$scope:{ctx:$}}}),Uy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),_F=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[zOt]},$$scope:{ctx:$}}}),Jy=new re({}),Yy=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L854"}}),Zy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomForTokenClassification">BloomForTokenClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification">LayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForTokenClassification">NezhaForTokenClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),vF=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[QOt]},$$scope:{ctx:$}}}),e8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),tT=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[WOt]},$$scope:{ctx:$}}}),o8=new re({}),r8=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L825"}}),a8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (CANINE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForQuestionAnswering">NezhaForQuestionAnswering</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),nT=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[HOt]},$$scope:{ctx:$}}}),n8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),HT=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[UOt]},$$scope:{ctx:$}}}),s8=new re({}),l8=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L832"}}),d8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),JT=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[JOt]},$$scope:{ctx:$}}}),c8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),ZT=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[YOt]},$$scope:{ctx:$}}}),m8=new re({}),f8=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L877"}}),h8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/levit#transformers.LevitForImageClassification">LevitForImageClassification</a> or <a href="/docs/transformers/main/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher">LevitForImageClassificationWithTeacher</a> (LeViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),oM=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[KOt]},$$scope:{ctx:$}}}),u8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),uM=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[ZOt]},$$scope:{ctx:$}}}),p8=new re({}),_8=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L916"}}),v8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),_M=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[eVt]},$$scope:{ctx:$}}}),F8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),FM=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[oVt]},$$scope:{ctx:$}}}),T8=new re({}),M8=new R({props:{name:"class transformers.AutoModelForVisualQuestionAnswering",anchor:"transformers.AutoModelForVisualQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L843"}}),C8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltForQuestionAnswering">ViltForQuestionAnswering</a> (ViLT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),MM=new B({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.example",$$slots:{default:[rVt]},$$scope:{ctx:$}}}),w8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),wM=new B({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.example",$$slots:{default:[tVt]},$$scope:{ctx:$}}}),A8=new re({}),L8=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L923"}}),x8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),LM=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[aVt]},$$scope:{ctx:$}}}),$8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),qM=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[nVt]},$$scope:{ctx:$}}}),k8=new re({}),S8=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L946"}}),P8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),DM=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[sVt]},$$scope:{ctx:$}}}),B8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),WM=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[lVt]},$$scope:{ctx:$}}}),I8=new re({}),N8=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L930"}}),j8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTForCTC">MCTCTForCTC</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),UM=new B({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[iVt]},$$scope:{ctx:$}}}),D8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),lE=new B({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[dVt]},$$scope:{ctx:$}}}),G8=new re({}),O8=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L937"}}),X8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),dE=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[cVt]},$$scope:{ctx:$}}}),z8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),gE=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[mVt]},$$scope:{ctx:$}}}),W8=new re({}),H8=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L955"}}),J8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),uE=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[fVt]},$$scope:{ctx:$}}}),Y8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),ME=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[gVt]},$$scope:{ctx:$}}}),K8=new re({}),Z8=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L962"}}),o9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),CE=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[hVt]},$$scope:{ctx:$}}}),r9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),xE=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[uVt]},$$scope:{ctx:$}}}),t9=new re({}),a9=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L909"}}),s9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),kE=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[pVt]},$$scope:{ctx:$}}}),l9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),BE=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[_Vt]},$$scope:{ctx:$}}}),d9=new re({}),c9=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L884"}}),f9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),NE=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[bVt]},$$scope:{ctx:$}}}),g9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),DE=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[vVt]},$$scope:{ctx:$}}}),h9=new re({}),u9=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L891"}}),_9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),OE=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[FVt]},$$scope:{ctx:$}}}),b9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),HE=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[TVt]},$$scope:{ctx:$}}}),v9=new re({}),F9=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L900"}}),M9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),JE=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[MVt]},$$scope:{ctx:$}}}),E9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),ZE=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[EVt]},$$scope:{ctx:$}}}),C9=new re({}),w9=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L406"}}),L9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.TFOPTModel">TFOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),o4=new B({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[CVt]},$$scope:{ctx:$}}}),y9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),H4=new B({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[wVt]},$$scope:{ctx:$}}}),x9=new re({}),$9=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L413"}}),S9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),J4=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[AVt]},$$scope:{ctx:$}}}),R9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),FC=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[LVt]},$$scope:{ctx:$}}}),P9=new re({}),B9=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L428"}}),N9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.TFOPTForCausalLM">TFOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),MC=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[yVt]},$$scope:{ctx:$}}}),q9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),IC=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[xVt]},$$scope:{ctx:$}}}),j9=new re({}),D9=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L444"}}),O9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),qC=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[$Vt]},$$scope:{ctx:$}}}),V9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),VC=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[kVt]},$$scope:{ctx:$}}}),X9=new re({}),z9=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L469"}}),W9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),zC=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[SVt]},$$scope:{ctx:$}}}),H9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),f5=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[RVt]},$$scope:{ctx:$}}}),U9=new re({}),J9=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L476"}}),K9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),h5=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[PVt]},$$scope:{ctx:$}}}),Z9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),w5=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[BVt]},$$scope:{ctx:$}}}),ex=new re({}),ox=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L485"}}),tx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),L5=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[IVt]},$$scope:{ctx:$}}}),ax=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),e3=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[NVt]},$$scope:{ctx:$}}}),nx=new re({}),sx=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L521"}}),ix=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),r3=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[qVt]},$$scope:{ctx:$}}}),dx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),F3=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[jVt]},$$scope:{ctx:$}}}),cx=new re({}),mx=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L528"}}),gx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),M3=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[DVt]},$$scope:{ctx:$}}}),hx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),w3=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[GVt]},$$scope:{ctx:$}}}),px=new re({}),_x=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L501"}}),vx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),L3=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[OVt]},$$scope:{ctx:$}}}),Fx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),x3=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[VVt]},$$scope:{ctx:$}}}),Tx=new re({}),Mx=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L512"}}),Cx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),k3=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[XVt]},$$scope:{ctx:$}}}),wx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),K3=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[zVt]},$$scope:{ctx:$}}}),Ax=new re({}),Lx=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L494"}}),xx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),e0=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[QVt]},$$scope:{ctx:$}}}),$x=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),T0=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[WVt]},$$scope:{ctx:$}}}),kx=new re({}),Sx=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L462"}}),Px=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),E0=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[HVt]},$$scope:{ctx:$}}}),Bx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),w0=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[UVt]},$$scope:{ctx:$}}}),Ix=new re({}),Nx=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L537"}}),jx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),L0=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[JVt]},$$scope:{ctx:$}}}),Dx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),x0=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[YVt]},$$scope:{ctx:$}}}),Gx=new re({}),Ox=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L246"}}),Xx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5Model">FlaxLongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.FlaxOPTModel">FlaxOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),k0=new B({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[KVt]},$$scope:{ctx:$}}}),zx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),nw=new B({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[ZVt]},$$scope:{ctx:$}}}),Qx=new re({}),Wx=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L260"}}),Ux=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.FlaxOPTForCausalLM">FlaxOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),lw=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[eXt]},$$scope:{ctx:$}}}),Jx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),bw=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[oXt]},$$scope:{ctx:$}}}),Yx=new re({}),Kx=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L253"}}),e$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Fw=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[rXt]},$$scope:{ctx:$}}}),o$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Pw=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[tXt]},$$scope:{ctx:$}}}),r$=new re({}),t$=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L267"}}),n$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Iw=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[aXt]},$$scope:{ctx:$}}}),s$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Ww=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[nXt]},$$scope:{ctx:$}}}),l$=new re({}),i$=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),c$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Uw=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[sXt]},$$scope:{ctx:$}}}),m$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),sA=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[lXt]},$$scope:{ctx:$}}}),f$=new re({}),g$=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),u$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),iA=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[iXt]},$$scope:{ctx:$}}}),p$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),vA=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[dXt]},$$scope:{ctx:$}}}),_$=new re({}),b$=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L292"}}),F$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),TA=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[cXt]},$$scope:{ctx:$}}}),T$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),SA=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[mXt]},$$scope:{ctx:$}}}),M$=new re({}),E$=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),w$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),PA=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[fXt]},$$scope:{ctx:$}}}),A$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),VA=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[gXt]},$$scope:{ctx:$}}}),L$=new re({}),y$=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L308"}}),$$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),zA=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[hXt]},$$scope:{ctx:$}}}),k$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),e6=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[uXt]},$$scope:{ctx:$}}}),S$=new re({}),R$=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),B$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),r6=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[pXt]},$$scope:{ctx:$}}}),I$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),a6=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[_Xt]},$$scope:{ctx:$}}}),N$=new re({}),q$=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),D$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),s6=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[bXt]},$$scope:{ctx:$}}}),G$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),d6=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[vXt]},$$scope:{ctx:$}}}),V$=new re({}),X$=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L333"}}),Q$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),m6=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[FXt]},$$scope:{ctx:$}}}),W$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),g6=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[TXt]},$$scope:{ctx:$}}}),{c(){g=a("meta"),v=l(),u=a("h1"),f=a("a"),p=a("span"),F(d.$$.fragment),h=l(),Eo=a("span"),Ei=o("Auto Classes"),xm=l(),at=a("p"),Ci=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),wi=a("code"),P7=o("from_pretrained()"),$m=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Oe=l(),Qe=a("p"),Ai=o("Instantiating one of "),Rn=a("a"),B7=o("AutoConfig"),Pn=o(", "),Bn=a("a"),I7=o("AutoModel"),Li=o(`, and
`),In=a("a"),N7=o("AutoTokenizer"),yi=o(" will directly create a class of the relevant architecture. For instance"),km=l(),F(xa.$$.fragment),We=l(),Ae=a("p"),gS=o("will create a model that is an instance of "),xi=a("a"),hS=o("BertModel"),uS=o("."),Co=l(),$a=a("p"),pS=o("There is one class of "),Sm=a("code"),_S=o("AutoModel"),qQe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),EOe=l(),$i=a("h2"),Rm=a("a"),Pte=a("span"),F(q7.$$.fragment),jQe=l(),Bte=a("span"),DQe=o("Extending the Auto Classes"),COe=l(),Nn=a("p"),GQe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Ite=a("code"),OQe=o("NewModel"),VQe=o(", make sure you have a "),Nte=a("code"),XQe=o("NewModelConfig"),zQe=o(` then you can add those to the auto
classes like this:`),wOe=l(),F(j7.$$.fragment),AOe=l(),bS=a("p"),QQe=o("You will then be able to use the auto classes like you would usually do!"),LOe=l(),F(Pm.$$.fragment),yOe=l(),ki=a("h2"),Bm=a("a"),qte=a("span"),F(D7.$$.fragment),WQe=l(),jte=a("span"),HQe=o("AutoConfig"),xOe=l(),wo=a("div"),F(G7.$$.fragment),UQe=l(),O7=a("p"),JQe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),vS=a("a"),YQe=o("from_pretrained()"),KQe=o(" class method."),ZQe=l(),V7=a("p"),eWe=o("This class cannot be instantiated directly using "),Dte=a("code"),oWe=o("__init__()"),rWe=o(" (throws an error)."),tWe=l(),Ar=a("div"),F(X7.$$.fragment),aWe=l(),Gte=a("p"),nWe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),sWe=l(),Si=a("p"),lWe=o("The configuration class to instantiate is selected based on the "),Ote=a("code"),iWe=o("model_type"),dWe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Vte=a("code"),cWe=o("pretrained_model_name_or_path"),mWe=o(":"),fWe=l(),A=a("ul"),Im=a("li"),Xte=a("strong"),gWe=o("albert"),hWe=o(" \u2014 "),FS=a("a"),uWe=o("AlbertConfig"),pWe=o(" (ALBERT model)"),_We=l(),Nm=a("li"),zte=a("strong"),bWe=o("bart"),vWe=o(" \u2014 "),TS=a("a"),FWe=o("BartConfig"),TWe=o(" (BART model)"),MWe=l(),qm=a("li"),Qte=a("strong"),EWe=o("beit"),CWe=o(" \u2014 "),MS=a("a"),wWe=o("BeitConfig"),AWe=o(" (BEiT model)"),LWe=l(),jm=a("li"),Wte=a("strong"),yWe=o("bert"),xWe=o(" \u2014 "),ES=a("a"),$We=o("BertConfig"),kWe=o(" (BERT model)"),SWe=l(),Dm=a("li"),Hte=a("strong"),RWe=o("bert-generation"),PWe=o(" \u2014 "),CS=a("a"),BWe=o("BertGenerationConfig"),IWe=o(" (Bert Generation model)"),NWe=l(),Gm=a("li"),Ute=a("strong"),qWe=o("big_bird"),jWe=o(" \u2014 "),wS=a("a"),DWe=o("BigBirdConfig"),GWe=o(" (BigBird model)"),OWe=l(),Om=a("li"),Jte=a("strong"),VWe=o("bigbird_pegasus"),XWe=o(" \u2014 "),AS=a("a"),zWe=o("BigBirdPegasusConfig"),QWe=o(" (BigBird-Pegasus model)"),WWe=l(),Vm=a("li"),Yte=a("strong"),HWe=o("blenderbot"),UWe=o(" \u2014 "),LS=a("a"),JWe=o("BlenderbotConfig"),YWe=o(" (Blenderbot model)"),KWe=l(),Xm=a("li"),Kte=a("strong"),ZWe=o("blenderbot-small"),eHe=o(" \u2014 "),yS=a("a"),oHe=o("BlenderbotSmallConfig"),rHe=o(" (BlenderbotSmall model)"),tHe=l(),zm=a("li"),Zte=a("strong"),aHe=o("bloom"),nHe=o(" \u2014 "),xS=a("a"),sHe=o("BloomConfig"),lHe=o(" (BLOOM model)"),iHe=l(),Qm=a("li"),eae=a("strong"),dHe=o("camembert"),cHe=o(" \u2014 "),$S=a("a"),mHe=o("CamembertConfig"),fHe=o(" (CamemBERT model)"),gHe=l(),Wm=a("li"),oae=a("strong"),hHe=o("canine"),uHe=o(" \u2014 "),kS=a("a"),pHe=o("CanineConfig"),_He=o(" (CANINE model)"),bHe=l(),Hm=a("li"),rae=a("strong"),vHe=o("clip"),FHe=o(" \u2014 "),SS=a("a"),THe=o("CLIPConfig"),MHe=o(" (CLIP model)"),EHe=l(),Um=a("li"),tae=a("strong"),CHe=o("codegen"),wHe=o(" \u2014 "),RS=a("a"),AHe=o("CodeGenConfig"),LHe=o(" (CodeGen model)"),yHe=l(),Jm=a("li"),aae=a("strong"),xHe=o("convbert"),$He=o(" \u2014 "),PS=a("a"),kHe=o("ConvBertConfig"),SHe=o(" (ConvBERT model)"),RHe=l(),Ym=a("li"),nae=a("strong"),PHe=o("convnext"),BHe=o(" \u2014 "),BS=a("a"),IHe=o("ConvNextConfig"),NHe=o(" (ConvNeXT model)"),qHe=l(),Km=a("li"),sae=a("strong"),jHe=o("ctrl"),DHe=o(" \u2014 "),IS=a("a"),GHe=o("CTRLConfig"),OHe=o(" (CTRL model)"),VHe=l(),Zm=a("li"),lae=a("strong"),XHe=o("cvt"),zHe=o(" \u2014 "),NS=a("a"),QHe=o("CvtConfig"),WHe=o(" (CvT model)"),HHe=l(),ef=a("li"),iae=a("strong"),UHe=o("data2vec-audio"),JHe=o(" \u2014 "),qS=a("a"),YHe=o("Data2VecAudioConfig"),KHe=o(" (Data2VecAudio model)"),ZHe=l(),of=a("li"),dae=a("strong"),eUe=o("data2vec-text"),oUe=o(" \u2014 "),jS=a("a"),rUe=o("Data2VecTextConfig"),tUe=o(" (Data2VecText model)"),aUe=l(),rf=a("li"),cae=a("strong"),nUe=o("data2vec-vision"),sUe=o(" \u2014 "),DS=a("a"),lUe=o("Data2VecVisionConfig"),iUe=o(" (Data2VecVision model)"),dUe=l(),tf=a("li"),mae=a("strong"),cUe=o("deberta"),mUe=o(" \u2014 "),GS=a("a"),fUe=o("DebertaConfig"),gUe=o(" (DeBERTa model)"),hUe=l(),af=a("li"),fae=a("strong"),uUe=o("deberta-v2"),pUe=o(" \u2014 "),OS=a("a"),_Ue=o("DebertaV2Config"),bUe=o(" (DeBERTa-v2 model)"),vUe=l(),nf=a("li"),gae=a("strong"),FUe=o("decision_transformer"),TUe=o(" \u2014 "),VS=a("a"),MUe=o("DecisionTransformerConfig"),EUe=o(" (Decision Transformer model)"),CUe=l(),sf=a("li"),hae=a("strong"),wUe=o("deit"),AUe=o(" \u2014 "),XS=a("a"),LUe=o("DeiTConfig"),yUe=o(" (DeiT model)"),xUe=l(),lf=a("li"),uae=a("strong"),$Ue=o("detr"),kUe=o(" \u2014 "),zS=a("a"),SUe=o("DetrConfig"),RUe=o(" (DETR model)"),PUe=l(),df=a("li"),pae=a("strong"),BUe=o("distilbert"),IUe=o(" \u2014 "),QS=a("a"),NUe=o("DistilBertConfig"),qUe=o(" (DistilBERT model)"),jUe=l(),cf=a("li"),_ae=a("strong"),DUe=o("dpr"),GUe=o(" \u2014 "),WS=a("a"),OUe=o("DPRConfig"),VUe=o(" (DPR model)"),XUe=l(),mf=a("li"),bae=a("strong"),zUe=o("dpt"),QUe=o(" \u2014 "),HS=a("a"),WUe=o("DPTConfig"),HUe=o(" (DPT model)"),UUe=l(),ff=a("li"),vae=a("strong"),JUe=o("electra"),YUe=o(" \u2014 "),US=a("a"),KUe=o("ElectraConfig"),ZUe=o(" (ELECTRA model)"),eJe=l(),gf=a("li"),Fae=a("strong"),oJe=o("encoder-decoder"),rJe=o(" \u2014 "),JS=a("a"),tJe=o("EncoderDecoderConfig"),aJe=o(" (Encoder decoder model)"),nJe=l(),hf=a("li"),Tae=a("strong"),sJe=o("flaubert"),lJe=o(" \u2014 "),YS=a("a"),iJe=o("FlaubertConfig"),dJe=o(" (FlauBERT model)"),cJe=l(),uf=a("li"),Mae=a("strong"),mJe=o("flava"),fJe=o(" \u2014 "),KS=a("a"),gJe=o("FlavaConfig"),hJe=o(" (FLAVA model)"),uJe=l(),pf=a("li"),Eae=a("strong"),pJe=o("fnet"),_Je=o(" \u2014 "),ZS=a("a"),bJe=o("FNetConfig"),vJe=o(" (FNet model)"),FJe=l(),_f=a("li"),Cae=a("strong"),TJe=o("fsmt"),MJe=o(" \u2014 "),eR=a("a"),EJe=o("FSMTConfig"),CJe=o(" (FairSeq Machine-Translation model)"),wJe=l(),bf=a("li"),wae=a("strong"),AJe=o("funnel"),LJe=o(" \u2014 "),oR=a("a"),yJe=o("FunnelConfig"),xJe=o(" (Funnel Transformer model)"),$Je=l(),vf=a("li"),Aae=a("strong"),kJe=o("glpn"),SJe=o(" \u2014 "),rR=a("a"),RJe=o("GLPNConfig"),PJe=o(" (GLPN model)"),BJe=l(),Ff=a("li"),Lae=a("strong"),IJe=o("gpt2"),NJe=o(" \u2014 "),tR=a("a"),qJe=o("GPT2Config"),jJe=o(" (OpenAI GPT-2 model)"),DJe=l(),Tf=a("li"),yae=a("strong"),GJe=o("gpt_neo"),OJe=o(" \u2014 "),aR=a("a"),VJe=o("GPTNeoConfig"),XJe=o(" (GPT Neo model)"),zJe=l(),Mf=a("li"),xae=a("strong"),QJe=o("gpt_neox"),WJe=o(" \u2014 "),nR=a("a"),HJe=o("GPTNeoXConfig"),UJe=o(" (GPT NeoX model)"),JJe=l(),Ef=a("li"),$ae=a("strong"),YJe=o("gptj"),KJe=o(" \u2014 "),sR=a("a"),ZJe=o("GPTJConfig"),eYe=o(" (GPT-J model)"),oYe=l(),Cf=a("li"),kae=a("strong"),rYe=o("groupvit"),tYe=o(" \u2014 "),lR=a("a"),aYe=o("GroupViTConfig"),nYe=o(" (GroupViT model)"),sYe=l(),wf=a("li"),Sae=a("strong"),lYe=o("hubert"),iYe=o(" \u2014 "),iR=a("a"),dYe=o("HubertConfig"),cYe=o(" (Hubert model)"),mYe=l(),Af=a("li"),Rae=a("strong"),fYe=o("ibert"),gYe=o(" \u2014 "),dR=a("a"),hYe=o("IBertConfig"),uYe=o(" (I-BERT model)"),pYe=l(),Lf=a("li"),Pae=a("strong"),_Ye=o("imagegpt"),bYe=o(" \u2014 "),cR=a("a"),vYe=o("ImageGPTConfig"),FYe=o(" (ImageGPT model)"),TYe=l(),yf=a("li"),Bae=a("strong"),MYe=o("layoutlm"),EYe=o(" \u2014 "),mR=a("a"),CYe=o("LayoutLMConfig"),wYe=o(" (LayoutLM model)"),AYe=l(),xf=a("li"),Iae=a("strong"),LYe=o("layoutlmv2"),yYe=o(" \u2014 "),fR=a("a"),xYe=o("LayoutLMv2Config"),$Ye=o(" (LayoutLMv2 model)"),kYe=l(),$f=a("li"),Nae=a("strong"),SYe=o("layoutlmv3"),RYe=o(" \u2014 "),gR=a("a"),PYe=o("LayoutLMv3Config"),BYe=o(" (LayoutLMv3 model)"),IYe=l(),kf=a("li"),qae=a("strong"),NYe=o("led"),qYe=o(" \u2014 "),hR=a("a"),jYe=o("LEDConfig"),DYe=o(" (LED model)"),GYe=l(),Sf=a("li"),jae=a("strong"),OYe=o("levit"),VYe=o(" \u2014 "),uR=a("a"),XYe=o("LevitConfig"),zYe=o(" (LeViT model)"),QYe=l(),Rf=a("li"),Dae=a("strong"),WYe=o("longformer"),HYe=o(" \u2014 "),pR=a("a"),UYe=o("LongformerConfig"),JYe=o(" (Longformer model)"),YYe=l(),Pf=a("li"),Gae=a("strong"),KYe=o("longt5"),ZYe=o(" \u2014 "),_R=a("a"),eKe=o("LongT5Config"),oKe=o(" (LongT5 model)"),rKe=l(),Bf=a("li"),Oae=a("strong"),tKe=o("luke"),aKe=o(" \u2014 "),bR=a("a"),nKe=o("LukeConfig"),sKe=o(" (LUKE model)"),lKe=l(),If=a("li"),Vae=a("strong"),iKe=o("lxmert"),dKe=o(" \u2014 "),vR=a("a"),cKe=o("LxmertConfig"),mKe=o(" (LXMERT model)"),fKe=l(),Nf=a("li"),Xae=a("strong"),gKe=o("m2m_100"),hKe=o(" \u2014 "),FR=a("a"),uKe=o("M2M100Config"),pKe=o(" (M2M100 model)"),_Ke=l(),qf=a("li"),zae=a("strong"),bKe=o("marian"),vKe=o(" \u2014 "),TR=a("a"),FKe=o("MarianConfig"),TKe=o(" (Marian model)"),MKe=l(),jf=a("li"),Qae=a("strong"),EKe=o("maskformer"),CKe=o(" \u2014 "),MR=a("a"),wKe=o("MaskFormerConfig"),AKe=o(" (MaskFormer model)"),LKe=l(),Df=a("li"),Wae=a("strong"),yKe=o("mbart"),xKe=o(" \u2014 "),ER=a("a"),$Ke=o("MBartConfig"),kKe=o(" (mBART model)"),SKe=l(),Gf=a("li"),Hae=a("strong"),RKe=o("mctct"),PKe=o(" \u2014 "),CR=a("a"),BKe=o("MCTCTConfig"),IKe=o(" (M-CTC-T model)"),NKe=l(),Of=a("li"),Uae=a("strong"),qKe=o("megatron-bert"),jKe=o(" \u2014 "),wR=a("a"),DKe=o("MegatronBertConfig"),GKe=o(" (Megatron-BERT model)"),OKe=l(),Vf=a("li"),Jae=a("strong"),VKe=o("mobilebert"),XKe=o(" \u2014 "),AR=a("a"),zKe=o("MobileBertConfig"),QKe=o(" (MobileBERT model)"),WKe=l(),Xf=a("li"),Yae=a("strong"),HKe=o("mpnet"),UKe=o(" \u2014 "),LR=a("a"),JKe=o("MPNetConfig"),YKe=o(" (MPNet model)"),KKe=l(),zf=a("li"),Kae=a("strong"),ZKe=o("mt5"),eZe=o(" \u2014 "),yR=a("a"),oZe=o("MT5Config"),rZe=o(" (MT5 model)"),tZe=l(),Qf=a("li"),Zae=a("strong"),aZe=o("nezha"),nZe=o(" \u2014 "),xR=a("a"),sZe=o("NezhaConfig"),lZe=o(" (Nezha model)"),iZe=l(),Wf=a("li"),ene=a("strong"),dZe=o("nystromformer"),cZe=o(" \u2014 "),$R=a("a"),mZe=o("NystromformerConfig"),fZe=o(" (Nystr\xF6mformer model)"),gZe=l(),Hf=a("li"),one=a("strong"),hZe=o("openai-gpt"),uZe=o(" \u2014 "),kR=a("a"),pZe=o("OpenAIGPTConfig"),_Ze=o(" (OpenAI GPT model)"),bZe=l(),Uf=a("li"),rne=a("strong"),vZe=o("opt"),FZe=o(" \u2014 "),SR=a("a"),TZe=o("OPTConfig"),MZe=o(" (OPT model)"),EZe=l(),Jf=a("li"),tne=a("strong"),CZe=o("pegasus"),wZe=o(" \u2014 "),RR=a("a"),AZe=o("PegasusConfig"),LZe=o(" (Pegasus model)"),yZe=l(),Yf=a("li"),ane=a("strong"),xZe=o("perceiver"),$Ze=o(" \u2014 "),PR=a("a"),kZe=o("PerceiverConfig"),SZe=o(" (Perceiver model)"),RZe=l(),Kf=a("li"),nne=a("strong"),PZe=o("plbart"),BZe=o(" \u2014 "),BR=a("a"),IZe=o("PLBartConfig"),NZe=o(" (PLBart model)"),qZe=l(),Zf=a("li"),sne=a("strong"),jZe=o("poolformer"),DZe=o(" \u2014 "),IR=a("a"),GZe=o("PoolFormerConfig"),OZe=o(" (PoolFormer model)"),VZe=l(),eg=a("li"),lne=a("strong"),XZe=o("prophetnet"),zZe=o(" \u2014 "),NR=a("a"),QZe=o("ProphetNetConfig"),WZe=o(" (ProphetNet model)"),HZe=l(),og=a("li"),ine=a("strong"),UZe=o("qdqbert"),JZe=o(" \u2014 "),qR=a("a"),YZe=o("QDQBertConfig"),KZe=o(" (QDQBert model)"),ZZe=l(),rg=a("li"),dne=a("strong"),eeo=o("rag"),oeo=o(" \u2014 "),jR=a("a"),reo=o("RagConfig"),teo=o(" (RAG model)"),aeo=l(),tg=a("li"),cne=a("strong"),neo=o("realm"),seo=o(" \u2014 "),DR=a("a"),leo=o("RealmConfig"),ieo=o(" (REALM model)"),deo=l(),ag=a("li"),mne=a("strong"),ceo=o("reformer"),meo=o(" \u2014 "),GR=a("a"),feo=o("ReformerConfig"),geo=o(" (Reformer model)"),heo=l(),ng=a("li"),fne=a("strong"),ueo=o("regnet"),peo=o(" \u2014 "),OR=a("a"),_eo=o("RegNetConfig"),beo=o(" (RegNet model)"),veo=l(),sg=a("li"),gne=a("strong"),Feo=o("rembert"),Teo=o(" \u2014 "),VR=a("a"),Meo=o("RemBertConfig"),Eeo=o(" (RemBERT model)"),Ceo=l(),lg=a("li"),hne=a("strong"),weo=o("resnet"),Aeo=o(" \u2014 "),XR=a("a"),Leo=o("ResNetConfig"),yeo=o(" (ResNet model)"),xeo=l(),ig=a("li"),une=a("strong"),$eo=o("retribert"),keo=o(" \u2014 "),zR=a("a"),Seo=o("RetriBertConfig"),Reo=o(" (RetriBERT model)"),Peo=l(),dg=a("li"),pne=a("strong"),Beo=o("roberta"),Ieo=o(" \u2014 "),QR=a("a"),Neo=o("RobertaConfig"),qeo=o(" (RoBERTa model)"),jeo=l(),cg=a("li"),_ne=a("strong"),Deo=o("roformer"),Geo=o(" \u2014 "),WR=a("a"),Oeo=o("RoFormerConfig"),Veo=o(" (RoFormer model)"),Xeo=l(),mg=a("li"),bne=a("strong"),zeo=o("segformer"),Qeo=o(" \u2014 "),HR=a("a"),Weo=o("SegformerConfig"),Heo=o(" (SegFormer model)"),Ueo=l(),fg=a("li"),vne=a("strong"),Jeo=o("sew"),Yeo=o(" \u2014 "),UR=a("a"),Keo=o("SEWConfig"),Zeo=o(" (SEW model)"),eoo=l(),gg=a("li"),Fne=a("strong"),ooo=o("sew-d"),roo=o(" \u2014 "),JR=a("a"),too=o("SEWDConfig"),aoo=o(" (SEW-D model)"),noo=l(),hg=a("li"),Tne=a("strong"),soo=o("speech-encoder-decoder"),loo=o(" \u2014 "),YR=a("a"),ioo=o("SpeechEncoderDecoderConfig"),doo=o(" (Speech Encoder decoder model)"),coo=l(),ug=a("li"),Mne=a("strong"),moo=o("speech_to_text"),foo=o(" \u2014 "),KR=a("a"),goo=o("Speech2TextConfig"),hoo=o(" (Speech2Text model)"),uoo=l(),pg=a("li"),Ene=a("strong"),poo=o("speech_to_text_2"),_oo=o(" \u2014 "),ZR=a("a"),boo=o("Speech2Text2Config"),voo=o(" (Speech2Text2 model)"),Foo=l(),_g=a("li"),Cne=a("strong"),Too=o("splinter"),Moo=o(" \u2014 "),eP=a("a"),Eoo=o("SplinterConfig"),Coo=o(" (Splinter model)"),woo=l(),bg=a("li"),wne=a("strong"),Aoo=o("squeezebert"),Loo=o(" \u2014 "),oP=a("a"),yoo=o("SqueezeBertConfig"),xoo=o(" (SqueezeBERT model)"),$oo=l(),vg=a("li"),Ane=a("strong"),koo=o("swin"),Soo=o(" \u2014 "),rP=a("a"),Roo=o("SwinConfig"),Poo=o(" (Swin Transformer model)"),Boo=l(),Fg=a("li"),Lne=a("strong"),Ioo=o("t5"),Noo=o(" \u2014 "),tP=a("a"),qoo=o("T5Config"),joo=o(" (T5 model)"),Doo=l(),Tg=a("li"),yne=a("strong"),Goo=o("tapas"),Ooo=o(" \u2014 "),aP=a("a"),Voo=o("TapasConfig"),Xoo=o(" (TAPAS model)"),zoo=l(),Mg=a("li"),xne=a("strong"),Qoo=o("trajectory_transformer"),Woo=o(" \u2014 "),nP=a("a"),Hoo=o("TrajectoryTransformerConfig"),Uoo=o(" (Trajectory Transformer model)"),Joo=l(),Eg=a("li"),$ne=a("strong"),Yoo=o("transfo-xl"),Koo=o(" \u2014 "),sP=a("a"),Zoo=o("TransfoXLConfig"),ero=o(" (Transformer-XL model)"),oro=l(),Cg=a("li"),kne=a("strong"),rro=o("trocr"),tro=o(" \u2014 "),lP=a("a"),aro=o("TrOCRConfig"),nro=o(" (TrOCR model)"),sro=l(),wg=a("li"),Sne=a("strong"),lro=o("unispeech"),iro=o(" \u2014 "),iP=a("a"),dro=o("UniSpeechConfig"),cro=o(" (UniSpeech model)"),mro=l(),Ag=a("li"),Rne=a("strong"),fro=o("unispeech-sat"),gro=o(" \u2014 "),dP=a("a"),hro=o("UniSpeechSatConfig"),uro=o(" (UniSpeechSat model)"),pro=l(),Lg=a("li"),Pne=a("strong"),_ro=o("van"),bro=o(" \u2014 "),cP=a("a"),vro=o("VanConfig"),Fro=o(" (VAN model)"),Tro=l(),yg=a("li"),Bne=a("strong"),Mro=o("vilt"),Ero=o(" \u2014 "),mP=a("a"),Cro=o("ViltConfig"),wro=o(" (ViLT model)"),Aro=l(),xg=a("li"),Ine=a("strong"),Lro=o("vision-encoder-decoder"),yro=o(" \u2014 "),fP=a("a"),xro=o("VisionEncoderDecoderConfig"),$ro=o(" (Vision Encoder decoder model)"),kro=l(),$g=a("li"),Nne=a("strong"),Sro=o("vision-text-dual-encoder"),Rro=o(" \u2014 "),gP=a("a"),Pro=o("VisionTextDualEncoderConfig"),Bro=o(" (VisionTextDualEncoder model)"),Iro=l(),kg=a("li"),qne=a("strong"),Nro=o("visual_bert"),qro=o(" \u2014 "),hP=a("a"),jro=o("VisualBertConfig"),Dro=o(" (VisualBERT model)"),Gro=l(),Sg=a("li"),jne=a("strong"),Oro=o("vit"),Vro=o(" \u2014 "),uP=a("a"),Xro=o("ViTConfig"),zro=o(" (ViT model)"),Qro=l(),Rg=a("li"),Dne=a("strong"),Wro=o("vit_mae"),Hro=o(" \u2014 "),pP=a("a"),Uro=o("ViTMAEConfig"),Jro=o(" (ViTMAE model)"),Yro=l(),Pg=a("li"),Gne=a("strong"),Kro=o("wav2vec2"),Zro=o(" \u2014 "),_P=a("a"),eto=o("Wav2Vec2Config"),oto=o(" (Wav2Vec2 model)"),rto=l(),Bg=a("li"),One=a("strong"),tto=o("wav2vec2-conformer"),ato=o(" \u2014 "),bP=a("a"),nto=o("Wav2Vec2ConformerConfig"),sto=o(" (Wav2Vec2-Conformer model)"),lto=l(),Ig=a("li"),Vne=a("strong"),ito=o("wavlm"),dto=o(" \u2014 "),vP=a("a"),cto=o("WavLMConfig"),mto=o(" (WavLM model)"),fto=l(),Ng=a("li"),Xne=a("strong"),gto=o("xglm"),hto=o(" \u2014 "),FP=a("a"),uto=o("XGLMConfig"),pto=o(" (XGLM model)"),_to=l(),qg=a("li"),zne=a("strong"),bto=o("xlm"),vto=o(" \u2014 "),TP=a("a"),Fto=o("XLMConfig"),Tto=o(" (XLM model)"),Mto=l(),jg=a("li"),Qne=a("strong"),Eto=o("xlm-prophetnet"),Cto=o(" \u2014 "),MP=a("a"),wto=o("XLMProphetNetConfig"),Ato=o(" (XLM-ProphetNet model)"),Lto=l(),Dg=a("li"),Wne=a("strong"),yto=o("xlm-roberta"),xto=o(" \u2014 "),EP=a("a"),$to=o("XLMRobertaConfig"),kto=o(" (XLM-RoBERTa model)"),Sto=l(),Gg=a("li"),Hne=a("strong"),Rto=o("xlm-roberta-xl"),Pto=o(" \u2014 "),CP=a("a"),Bto=o("XLMRobertaXLConfig"),Ito=o(" (XLM-RoBERTa-XL model)"),Nto=l(),Og=a("li"),Une=a("strong"),qto=o("xlnet"),jto=o(" \u2014 "),wP=a("a"),Dto=o("XLNetConfig"),Gto=o(" (XLNet model)"),Oto=l(),Vg=a("li"),Jne=a("strong"),Vto=o("yolos"),Xto=o(" \u2014 "),AP=a("a"),zto=o("YolosConfig"),Qto=o(" (YOLOS model)"),Wto=l(),Xg=a("li"),Yne=a("strong"),Hto=o("yoso"),Uto=o(" \u2014 "),LP=a("a"),Jto=o("YosoConfig"),Yto=o(" (YOSO model)"),Kto=l(),F(zg.$$.fragment),Zto=l(),Qg=a("div"),F(z7.$$.fragment),eao=l(),Kne=a("p"),oao=o("Register a new configuration for this class."),$Oe=l(),Ri=a("h2"),Wg=a("a"),Zne=a("span"),F(Q7.$$.fragment),rao=l(),ese=a("span"),tao=o("AutoTokenizer"),kOe=l(),Ao=a("div"),F(W7.$$.fragment),aao=l(),H7=a("p"),nao=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),yP=a("a"),sao=o("AutoTokenizer.from_pretrained()"),lao=o(" class method."),iao=l(),U7=a("p"),dao=o("This class cannot be instantiated directly using "),ose=a("code"),cao=o("__init__()"),mao=o(" (throws an error)."),fao=l(),Lr=a("div"),F(J7.$$.fragment),gao=l(),rse=a("p"),hao=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),uao=l(),ka=a("p"),pao=o("The tokenizer class to instantiate is selected based on the "),tse=a("code"),_ao=o("model_type"),bao=o(` property of the config object (either
passed as an argument or loaded from `),ase=a("code"),vao=o("pretrained_model_name_or_path"),Fao=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nse=a("code"),Tao=o("pretrained_model_name_or_path"),Mao=o(":"),Eao=l(),k=a("ul"),qn=a("li"),sse=a("strong"),Cao=o("albert"),wao=o(" \u2014 "),xP=a("a"),Aao=o("AlbertTokenizer"),Lao=o(" or "),$P=a("a"),yao=o("AlbertTokenizerFast"),xao=o(" (ALBERT model)"),$ao=l(),jn=a("li"),lse=a("strong"),kao=o("bart"),Sao=o(" \u2014 "),kP=a("a"),Rao=o("BartTokenizer"),Pao=o(" or "),SP=a("a"),Bao=o("BartTokenizerFast"),Iao=o(" (BART model)"),Nao=l(),Dn=a("li"),ise=a("strong"),qao=o("barthez"),jao=o(" \u2014 "),RP=a("a"),Dao=o("BarthezTokenizer"),Gao=o(" or "),PP=a("a"),Oao=o("BarthezTokenizerFast"),Vao=o(" (BARThez model)"),Xao=l(),Hg=a("li"),dse=a("strong"),zao=o("bartpho"),Qao=o(" \u2014 "),BP=a("a"),Wao=o("BartphoTokenizer"),Hao=o(" (BARTpho model)"),Uao=l(),Gn=a("li"),cse=a("strong"),Jao=o("bert"),Yao=o(" \u2014 "),IP=a("a"),Kao=o("BertTokenizer"),Zao=o(" or "),NP=a("a"),eno=o("BertTokenizerFast"),ono=o(" (BERT model)"),rno=l(),Ug=a("li"),mse=a("strong"),tno=o("bert-generation"),ano=o(" \u2014 "),qP=a("a"),nno=o("BertGenerationTokenizer"),sno=o(" (Bert Generation model)"),lno=l(),Jg=a("li"),fse=a("strong"),ino=o("bert-japanese"),dno=o(" \u2014 "),jP=a("a"),cno=o("BertJapaneseTokenizer"),mno=o(" (BertJapanese model)"),fno=l(),Yg=a("li"),gse=a("strong"),gno=o("bertweet"),hno=o(" \u2014 "),DP=a("a"),uno=o("BertweetTokenizer"),pno=o(" (BERTweet model)"),_no=l(),On=a("li"),hse=a("strong"),bno=o("big_bird"),vno=o(" \u2014 "),GP=a("a"),Fno=o("BigBirdTokenizer"),Tno=o(" or "),OP=a("a"),Mno=o("BigBirdTokenizerFast"),Eno=o(" (BigBird model)"),Cno=l(),Vn=a("li"),use=a("strong"),wno=o("bigbird_pegasus"),Ano=o(" \u2014 "),VP=a("a"),Lno=o("PegasusTokenizer"),yno=o(" or "),XP=a("a"),xno=o("PegasusTokenizerFast"),$no=o(" (BigBird-Pegasus model)"),kno=l(),Xn=a("li"),pse=a("strong"),Sno=o("blenderbot"),Rno=o(" \u2014 "),zP=a("a"),Pno=o("BlenderbotTokenizer"),Bno=o(" or "),QP=a("a"),Ino=o("BlenderbotTokenizerFast"),Nno=o(" (Blenderbot model)"),qno=l(),Kg=a("li"),_se=a("strong"),jno=o("blenderbot-small"),Dno=o(" \u2014 "),WP=a("a"),Gno=o("BlenderbotSmallTokenizer"),Ono=o(" (BlenderbotSmall model)"),Vno=l(),Zg=a("li"),bse=a("strong"),Xno=o("bloom"),zno=o(" \u2014 "),HP=a("a"),Qno=o("BloomTokenizerFast"),Wno=o(" (BLOOM model)"),Hno=l(),eh=a("li"),vse=a("strong"),Uno=o("byt5"),Jno=o(" \u2014 "),UP=a("a"),Yno=o("ByT5Tokenizer"),Kno=o(" (ByT5 model)"),Zno=l(),zn=a("li"),Fse=a("strong"),eso=o("camembert"),oso=o(" \u2014 "),JP=a("a"),rso=o("CamembertTokenizer"),tso=o(" or "),YP=a("a"),aso=o("CamembertTokenizerFast"),nso=o(" (CamemBERT model)"),sso=l(),oh=a("li"),Tse=a("strong"),lso=o("canine"),iso=o(" \u2014 "),KP=a("a"),dso=o("CanineTokenizer"),cso=o(" (CANINE model)"),mso=l(),Qn=a("li"),Mse=a("strong"),fso=o("clip"),gso=o(" \u2014 "),ZP=a("a"),hso=o("CLIPTokenizer"),uso=o(" or "),eB=a("a"),pso=o("CLIPTokenizerFast"),_so=o(" (CLIP model)"),bso=l(),Wn=a("li"),Ese=a("strong"),vso=o("codegen"),Fso=o(" \u2014 "),oB=a("a"),Tso=o("CodeGenTokenizer"),Mso=o(" or "),rB=a("a"),Eso=o("CodeGenTokenizerFast"),Cso=o(" (CodeGen model)"),wso=l(),Hn=a("li"),Cse=a("strong"),Aso=o("convbert"),Lso=o(" \u2014 "),tB=a("a"),yso=o("ConvBertTokenizer"),xso=o(" or "),aB=a("a"),$so=o("ConvBertTokenizerFast"),kso=o(" (ConvBERT model)"),Sso=l(),Un=a("li"),wse=a("strong"),Rso=o("cpm"),Pso=o(" \u2014 "),nB=a("a"),Bso=o("CpmTokenizer"),Iso=o(" or "),sB=a("a"),Nso=o("CpmTokenizerFast"),qso=o(" (CPM model)"),jso=l(),rh=a("li"),Ase=a("strong"),Dso=o("ctrl"),Gso=o(" \u2014 "),lB=a("a"),Oso=o("CTRLTokenizer"),Vso=o(" (CTRL model)"),Xso=l(),Jn=a("li"),Lse=a("strong"),zso=o("data2vec-text"),Qso=o(" \u2014 "),iB=a("a"),Wso=o("RobertaTokenizer"),Hso=o(" or "),dB=a("a"),Uso=o("RobertaTokenizerFast"),Jso=o(" (Data2VecText model)"),Yso=l(),Yn=a("li"),yse=a("strong"),Kso=o("deberta"),Zso=o(" \u2014 "),cB=a("a"),elo=o("DebertaTokenizer"),olo=o(" or "),mB=a("a"),rlo=o("DebertaTokenizerFast"),tlo=o(" (DeBERTa model)"),alo=l(),Kn=a("li"),xse=a("strong"),nlo=o("deberta-v2"),slo=o(" \u2014 "),fB=a("a"),llo=o("DebertaV2Tokenizer"),ilo=o(" or "),gB=a("a"),dlo=o("DebertaV2TokenizerFast"),clo=o(" (DeBERTa-v2 model)"),mlo=l(),Zn=a("li"),$se=a("strong"),flo=o("distilbert"),glo=o(" \u2014 "),hB=a("a"),hlo=o("DistilBertTokenizer"),ulo=o(" or "),uB=a("a"),plo=o("DistilBertTokenizerFast"),_lo=o(" (DistilBERT model)"),blo=l(),es=a("li"),kse=a("strong"),vlo=o("dpr"),Flo=o(" \u2014 "),pB=a("a"),Tlo=o("DPRQuestionEncoderTokenizer"),Mlo=o(" or "),_B=a("a"),Elo=o("DPRQuestionEncoderTokenizerFast"),Clo=o(" (DPR model)"),wlo=l(),os=a("li"),Sse=a("strong"),Alo=o("electra"),Llo=o(" \u2014 "),bB=a("a"),ylo=o("ElectraTokenizer"),xlo=o(" or "),vB=a("a"),$lo=o("ElectraTokenizerFast"),klo=o(" (ELECTRA model)"),Slo=l(),th=a("li"),Rse=a("strong"),Rlo=o("flaubert"),Plo=o(" \u2014 "),FB=a("a"),Blo=o("FlaubertTokenizer"),Ilo=o(" (FlauBERT model)"),Nlo=l(),rs=a("li"),Pse=a("strong"),qlo=o("fnet"),jlo=o(" \u2014 "),TB=a("a"),Dlo=o("FNetTokenizer"),Glo=o(" or "),MB=a("a"),Olo=o("FNetTokenizerFast"),Vlo=o(" (FNet model)"),Xlo=l(),ah=a("li"),Bse=a("strong"),zlo=o("fsmt"),Qlo=o(" \u2014 "),EB=a("a"),Wlo=o("FSMTTokenizer"),Hlo=o(" (FairSeq Machine-Translation model)"),Ulo=l(),ts=a("li"),Ise=a("strong"),Jlo=o("funnel"),Ylo=o(" \u2014 "),CB=a("a"),Klo=o("FunnelTokenizer"),Zlo=o(" or "),wB=a("a"),eio=o("FunnelTokenizerFast"),oio=o(" (Funnel Transformer model)"),rio=l(),as=a("li"),Nse=a("strong"),tio=o("gpt2"),aio=o(" \u2014 "),AB=a("a"),nio=o("GPT2Tokenizer"),sio=o(" or "),LB=a("a"),lio=o("GPT2TokenizerFast"),iio=o(" (OpenAI GPT-2 model)"),dio=l(),ns=a("li"),qse=a("strong"),cio=o("gpt_neo"),mio=o(" \u2014 "),yB=a("a"),fio=o("GPT2Tokenizer"),gio=o(" or "),xB=a("a"),hio=o("GPT2TokenizerFast"),uio=o(" (GPT Neo model)"),pio=l(),nh=a("li"),jse=a("strong"),_io=o("gpt_neox"),bio=o(" \u2014 "),$B=a("a"),vio=o("GPTNeoXTokenizerFast"),Fio=o(" (GPT NeoX model)"),Tio=l(),ss=a("li"),Dse=a("strong"),Mio=o("gptj"),Eio=o(" \u2014 "),kB=a("a"),Cio=o("GPT2Tokenizer"),wio=o(" or "),SB=a("a"),Aio=o("GPT2TokenizerFast"),Lio=o(" (GPT-J model)"),yio=l(),ls=a("li"),Gse=a("strong"),xio=o("groupvit"),$io=o(" \u2014 "),RB=a("a"),kio=o("CLIPTokenizer"),Sio=o(" or "),PB=a("a"),Rio=o("CLIPTokenizerFast"),Pio=o(" (GroupViT model)"),Bio=l(),is=a("li"),Ose=a("strong"),Iio=o("herbert"),Nio=o(" \u2014 "),BB=a("a"),qio=o("HerbertTokenizer"),jio=o(" or "),IB=a("a"),Dio=o("HerbertTokenizerFast"),Gio=o(" (HerBERT model)"),Oio=l(),sh=a("li"),Vse=a("strong"),Vio=o("hubert"),Xio=o(" \u2014 "),NB=a("a"),zio=o("Wav2Vec2CTCTokenizer"),Qio=o(" (Hubert model)"),Wio=l(),ds=a("li"),Xse=a("strong"),Hio=o("ibert"),Uio=o(" \u2014 "),qB=a("a"),Jio=o("RobertaTokenizer"),Yio=o(" or "),jB=a("a"),Kio=o("RobertaTokenizerFast"),Zio=o(" (I-BERT model)"),edo=l(),cs=a("li"),zse=a("strong"),odo=o("layoutlm"),rdo=o(" \u2014 "),DB=a("a"),tdo=o("LayoutLMTokenizer"),ado=o(" or "),GB=a("a"),ndo=o("LayoutLMTokenizerFast"),sdo=o(" (LayoutLM model)"),ldo=l(),ms=a("li"),Qse=a("strong"),ido=o("layoutlmv2"),ddo=o(" \u2014 "),OB=a("a"),cdo=o("LayoutLMv2Tokenizer"),mdo=o(" or "),VB=a("a"),fdo=o("LayoutLMv2TokenizerFast"),gdo=o(" (LayoutLMv2 model)"),hdo=l(),fs=a("li"),Wse=a("strong"),udo=o("layoutlmv3"),pdo=o(" \u2014 "),XB=a("a"),_do=o("LayoutLMv3Tokenizer"),bdo=o(" or "),zB=a("a"),vdo=o("LayoutLMv3TokenizerFast"),Fdo=o(" (LayoutLMv3 model)"),Tdo=l(),gs=a("li"),Hse=a("strong"),Mdo=o("layoutxlm"),Edo=o(" \u2014 "),QB=a("a"),Cdo=o("LayoutXLMTokenizer"),wdo=o(" or "),WB=a("a"),Ado=o("LayoutXLMTokenizerFast"),Ldo=o(" (LayoutXLM model)"),ydo=l(),hs=a("li"),Use=a("strong"),xdo=o("led"),$do=o(" \u2014 "),HB=a("a"),kdo=o("LEDTokenizer"),Sdo=o(" or "),UB=a("a"),Rdo=o("LEDTokenizerFast"),Pdo=o(" (LED model)"),Bdo=l(),us=a("li"),Jse=a("strong"),Ido=o("longformer"),Ndo=o(" \u2014 "),JB=a("a"),qdo=o("LongformerTokenizer"),jdo=o(" or "),YB=a("a"),Ddo=o("LongformerTokenizerFast"),Gdo=o(" (Longformer model)"),Odo=l(),ps=a("li"),Yse=a("strong"),Vdo=o("longt5"),Xdo=o(" \u2014 "),KB=a("a"),zdo=o("T5Tokenizer"),Qdo=o(" or "),ZB=a("a"),Wdo=o("T5TokenizerFast"),Hdo=o(" (LongT5 model)"),Udo=l(),lh=a("li"),Kse=a("strong"),Jdo=o("luke"),Ydo=o(" \u2014 "),eI=a("a"),Kdo=o("LukeTokenizer"),Zdo=o(" (LUKE model)"),eco=l(),_s=a("li"),Zse=a("strong"),oco=o("lxmert"),rco=o(" \u2014 "),oI=a("a"),tco=o("LxmertTokenizer"),aco=o(" or "),rI=a("a"),nco=o("LxmertTokenizerFast"),sco=o(" (LXMERT model)"),lco=l(),ih=a("li"),ele=a("strong"),ico=o("m2m_100"),dco=o(" \u2014 "),tI=a("a"),cco=o("M2M100Tokenizer"),mco=o(" (M2M100 model)"),fco=l(),dh=a("li"),ole=a("strong"),gco=o("marian"),hco=o(" \u2014 "),aI=a("a"),uco=o("MarianTokenizer"),pco=o(" (Marian model)"),_co=l(),bs=a("li"),rle=a("strong"),bco=o("mbart"),vco=o(" \u2014 "),nI=a("a"),Fco=o("MBartTokenizer"),Tco=o(" or "),sI=a("a"),Mco=o("MBartTokenizerFast"),Eco=o(" (mBART model)"),Cco=l(),vs=a("li"),tle=a("strong"),wco=o("mbart50"),Aco=o(" \u2014 "),lI=a("a"),Lco=o("MBart50Tokenizer"),yco=o(" or "),iI=a("a"),xco=o("MBart50TokenizerFast"),$co=o(" (mBART-50 model)"),kco=l(),Fs=a("li"),ale=a("strong"),Sco=o("megatron-bert"),Rco=o(" \u2014 "),dI=a("a"),Pco=o("BertTokenizer"),Bco=o(" or "),cI=a("a"),Ico=o("BertTokenizerFast"),Nco=o(" (Megatron-BERT model)"),qco=l(),ch=a("li"),nle=a("strong"),jco=o("mluke"),Dco=o(" \u2014 "),mI=a("a"),Gco=o("MLukeTokenizer"),Oco=o(" (mLUKE model)"),Vco=l(),Ts=a("li"),sle=a("strong"),Xco=o("mobilebert"),zco=o(" \u2014 "),fI=a("a"),Qco=o("MobileBertTokenizer"),Wco=o(" or "),gI=a("a"),Hco=o("MobileBertTokenizerFast"),Uco=o(" (MobileBERT model)"),Jco=l(),Ms=a("li"),lle=a("strong"),Yco=o("mpnet"),Kco=o(" \u2014 "),hI=a("a"),Zco=o("MPNetTokenizer"),emo=o(" or "),uI=a("a"),omo=o("MPNetTokenizerFast"),rmo=o(" (MPNet model)"),tmo=l(),Es=a("li"),ile=a("strong"),amo=o("mt5"),nmo=o(" \u2014 "),pI=a("a"),smo=o("MT5Tokenizer"),lmo=o(" or "),_I=a("a"),imo=o("MT5TokenizerFast"),dmo=o(" (MT5 model)"),cmo=l(),Cs=a("li"),dle=a("strong"),mmo=o("nezha"),fmo=o(" \u2014 "),bI=a("a"),gmo=o("BertTokenizer"),hmo=o(" or "),vI=a("a"),umo=o("BertTokenizerFast"),pmo=o(" (Nezha model)"),_mo=l(),ws=a("li"),cle=a("strong"),bmo=o("nystromformer"),vmo=o(" \u2014 "),FI=a("a"),Fmo=o("AlbertTokenizer"),Tmo=o(" or "),TI=a("a"),Mmo=o("AlbertTokenizerFast"),Emo=o(" (Nystr\xF6mformer model)"),Cmo=l(),As=a("li"),mle=a("strong"),wmo=o("openai-gpt"),Amo=o(" \u2014 "),MI=a("a"),Lmo=o("OpenAIGPTTokenizer"),ymo=o(" or "),EI=a("a"),xmo=o("OpenAIGPTTokenizerFast"),$mo=o(" (OpenAI GPT model)"),kmo=l(),mh=a("li"),fle=a("strong"),Smo=o("opt"),Rmo=o(" \u2014 "),CI=a("a"),Pmo=o("GPT2Tokenizer"),Bmo=o(" (OPT model)"),Imo=l(),Ls=a("li"),gle=a("strong"),Nmo=o("pegasus"),qmo=o(" \u2014 "),wI=a("a"),jmo=o("PegasusTokenizer"),Dmo=o(" or "),AI=a("a"),Gmo=o("PegasusTokenizerFast"),Omo=o(" (Pegasus model)"),Vmo=l(),fh=a("li"),hle=a("strong"),Xmo=o("perceiver"),zmo=o(" \u2014 "),LI=a("a"),Qmo=o("PerceiverTokenizer"),Wmo=o(" (Perceiver model)"),Hmo=l(),gh=a("li"),ule=a("strong"),Umo=o("phobert"),Jmo=o(" \u2014 "),yI=a("a"),Ymo=o("PhobertTokenizer"),Kmo=o(" (PhoBERT model)"),Zmo=l(),hh=a("li"),ple=a("strong"),efo=o("plbart"),ofo=o(" \u2014 "),xI=a("a"),rfo=o("PLBartTokenizer"),tfo=o(" (PLBart model)"),afo=l(),uh=a("li"),_le=a("strong"),nfo=o("prophetnet"),sfo=o(" \u2014 "),$I=a("a"),lfo=o("ProphetNetTokenizer"),ifo=o(" (ProphetNet model)"),dfo=l(),ys=a("li"),ble=a("strong"),cfo=o("qdqbert"),mfo=o(" \u2014 "),kI=a("a"),ffo=o("BertTokenizer"),gfo=o(" or "),SI=a("a"),hfo=o("BertTokenizerFast"),ufo=o(" (QDQBert model)"),pfo=l(),ph=a("li"),vle=a("strong"),_fo=o("rag"),bfo=o(" \u2014 "),RI=a("a"),vfo=o("RagTokenizer"),Ffo=o(" (RAG model)"),Tfo=l(),xs=a("li"),Fle=a("strong"),Mfo=o("realm"),Efo=o(" \u2014 "),PI=a("a"),Cfo=o("RealmTokenizer"),wfo=o(" or "),BI=a("a"),Afo=o("RealmTokenizerFast"),Lfo=o(" (REALM model)"),yfo=l(),$s=a("li"),Tle=a("strong"),xfo=o("reformer"),$fo=o(" \u2014 "),II=a("a"),kfo=o("ReformerTokenizer"),Sfo=o(" or "),NI=a("a"),Rfo=o("ReformerTokenizerFast"),Pfo=o(" (Reformer model)"),Bfo=l(),ks=a("li"),Mle=a("strong"),Ifo=o("rembert"),Nfo=o(" \u2014 "),qI=a("a"),qfo=o("RemBertTokenizer"),jfo=o(" or "),jI=a("a"),Dfo=o("RemBertTokenizerFast"),Gfo=o(" (RemBERT model)"),Ofo=l(),Ss=a("li"),Ele=a("strong"),Vfo=o("retribert"),Xfo=o(" \u2014 "),DI=a("a"),zfo=o("RetriBertTokenizer"),Qfo=o(" or "),GI=a("a"),Wfo=o("RetriBertTokenizerFast"),Hfo=o(" (RetriBERT model)"),Ufo=l(),Rs=a("li"),Cle=a("strong"),Jfo=o("roberta"),Yfo=o(" \u2014 "),OI=a("a"),Kfo=o("RobertaTokenizer"),Zfo=o(" or "),VI=a("a"),ego=o("RobertaTokenizerFast"),ogo=o(" (RoBERTa model)"),rgo=l(),Ps=a("li"),wle=a("strong"),tgo=o("roformer"),ago=o(" \u2014 "),XI=a("a"),ngo=o("RoFormerTokenizer"),sgo=o(" or "),zI=a("a"),lgo=o("RoFormerTokenizerFast"),igo=o(" (RoFormer model)"),dgo=l(),_h=a("li"),Ale=a("strong"),cgo=o("speech_to_text"),mgo=o(" \u2014 "),QI=a("a"),fgo=o("Speech2TextTokenizer"),ggo=o(" (Speech2Text model)"),hgo=l(),bh=a("li"),Lle=a("strong"),ugo=o("speech_to_text_2"),pgo=o(" \u2014 "),WI=a("a"),_go=o("Speech2Text2Tokenizer"),bgo=o(" (Speech2Text2 model)"),vgo=l(),Bs=a("li"),yle=a("strong"),Fgo=o("splinter"),Tgo=o(" \u2014 "),HI=a("a"),Mgo=o("SplinterTokenizer"),Ego=o(" or "),UI=a("a"),Cgo=o("SplinterTokenizerFast"),wgo=o(" (Splinter model)"),Ago=l(),Is=a("li"),xle=a("strong"),Lgo=o("squeezebert"),ygo=o(" \u2014 "),JI=a("a"),xgo=o("SqueezeBertTokenizer"),$go=o(" or "),YI=a("a"),kgo=o("SqueezeBertTokenizerFast"),Sgo=o(" (SqueezeBERT model)"),Rgo=l(),Ns=a("li"),$le=a("strong"),Pgo=o("t5"),Bgo=o(" \u2014 "),KI=a("a"),Igo=o("T5Tokenizer"),Ngo=o(" or "),ZI=a("a"),qgo=o("T5TokenizerFast"),jgo=o(" (T5 model)"),Dgo=l(),vh=a("li"),kle=a("strong"),Ggo=o("tapas"),Ogo=o(" \u2014 "),eN=a("a"),Vgo=o("TapasTokenizer"),Xgo=o(" (TAPAS model)"),zgo=l(),Fh=a("li"),Sle=a("strong"),Qgo=o("tapex"),Wgo=o(" \u2014 "),oN=a("a"),Hgo=o("TapexTokenizer"),Ugo=o(" (TAPEX model)"),Jgo=l(),Th=a("li"),Rle=a("strong"),Ygo=o("transfo-xl"),Kgo=o(" \u2014 "),rN=a("a"),Zgo=o("TransfoXLTokenizer"),eho=o(" (Transformer-XL model)"),oho=l(),qs=a("li"),Ple=a("strong"),rho=o("vilt"),tho=o(" \u2014 "),tN=a("a"),aho=o("BertTokenizer"),nho=o(" or "),aN=a("a"),sho=o("BertTokenizerFast"),lho=o(" (ViLT model)"),iho=l(),js=a("li"),Ble=a("strong"),dho=o("visual_bert"),cho=o(" \u2014 "),nN=a("a"),mho=o("BertTokenizer"),fho=o(" or "),sN=a("a"),gho=o("BertTokenizerFast"),hho=o(" (VisualBERT model)"),uho=l(),Mh=a("li"),Ile=a("strong"),pho=o("wav2vec2"),_ho=o(" \u2014 "),lN=a("a"),bho=o("Wav2Vec2CTCTokenizer"),vho=o(" (Wav2Vec2 model)"),Fho=l(),Eh=a("li"),Nle=a("strong"),Tho=o("wav2vec2-conformer"),Mho=o(" \u2014 "),iN=a("a"),Eho=o("Wav2Vec2CTCTokenizer"),Cho=o(" (Wav2Vec2-Conformer model)"),who=l(),Ch=a("li"),qle=a("strong"),Aho=o("wav2vec2_phoneme"),Lho=o(" \u2014 "),dN=a("a"),yho=o("Wav2Vec2PhonemeCTCTokenizer"),xho=o(" (Wav2Vec2Phoneme model)"),$ho=l(),Ds=a("li"),jle=a("strong"),kho=o("xglm"),Sho=o(" \u2014 "),cN=a("a"),Rho=o("XGLMTokenizer"),Pho=o(" or "),mN=a("a"),Bho=o("XGLMTokenizerFast"),Iho=o(" (XGLM model)"),Nho=l(),wh=a("li"),Dle=a("strong"),qho=o("xlm"),jho=o(" \u2014 "),fN=a("a"),Dho=o("XLMTokenizer"),Gho=o(" (XLM model)"),Oho=l(),Ah=a("li"),Gle=a("strong"),Vho=o("xlm-prophetnet"),Xho=o(" \u2014 "),gN=a("a"),zho=o("XLMProphetNetTokenizer"),Qho=o(" (XLM-ProphetNet model)"),Who=l(),Gs=a("li"),Ole=a("strong"),Hho=o("xlm-roberta"),Uho=o(" \u2014 "),hN=a("a"),Jho=o("XLMRobertaTokenizer"),Yho=o(" or "),uN=a("a"),Kho=o("XLMRobertaTokenizerFast"),Zho=o(" (XLM-RoBERTa model)"),euo=l(),Os=a("li"),Vle=a("strong"),ouo=o("xlm-roberta-xl"),ruo=o(" \u2014 "),pN=a("a"),tuo=o("RobertaTokenizer"),auo=o(" or "),_N=a("a"),nuo=o("RobertaTokenizerFast"),suo=o(" (XLM-RoBERTa-XL model)"),luo=l(),Vs=a("li"),Xle=a("strong"),iuo=o("xlnet"),duo=o(" \u2014 "),bN=a("a"),cuo=o("XLNetTokenizer"),muo=o(" or "),vN=a("a"),fuo=o("XLNetTokenizerFast"),guo=o(" (XLNet model)"),huo=l(),Xs=a("li"),zle=a("strong"),uuo=o("yoso"),puo=o(" \u2014 "),FN=a("a"),_uo=o("AlbertTokenizer"),buo=o(" or "),TN=a("a"),vuo=o("AlbertTokenizerFast"),Fuo=o(" (YOSO model)"),Tuo=l(),F(Lh.$$.fragment),Muo=l(),yh=a("div"),F(Y7.$$.fragment),Euo=l(),Qle=a("p"),Cuo=o("Register a new tokenizer in this mapping."),SOe=l(),Pi=a("h2"),xh=a("a"),Wle=a("span"),F(K7.$$.fragment),wuo=l(),Hle=a("span"),Auo=o("AutoFeatureExtractor"),ROe=l(),Lo=a("div"),F(Z7.$$.fragment),Luo=l(),ey=a("p"),yuo=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),MN=a("a"),xuo=o("AutoFeatureExtractor.from_pretrained()"),$uo=o(" class method."),kuo=l(),oy=a("p"),Suo=o("This class cannot be instantiated directly using "),Ule=a("code"),Ruo=o("__init__()"),Puo=o(" (throws an error)."),Buo=l(),He=a("div"),F(ry.$$.fragment),Iuo=l(),Jle=a("p"),Nuo=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),quo=l(),Sa=a("p"),juo=o("The feature extractor class to instantiate is selected based on the "),Yle=a("code"),Duo=o("model_type"),Guo=o(` property of the config object
(either passed as an argument or loaded from `),Kle=a("code"),Ouo=o("pretrained_model_name_or_path"),Vuo=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Zle=a("code"),Xuo=o("pretrained_model_name_or_path"),zuo=o(":"),Quo=l(),Y=a("ul"),$h=a("li"),eie=a("strong"),Wuo=o("beit"),Huo=o(" \u2014 "),EN=a("a"),Uuo=o("BeitFeatureExtractor"),Juo=o(" (BEiT model)"),Yuo=l(),kh=a("li"),oie=a("strong"),Kuo=o("clip"),Zuo=o(" \u2014 "),CN=a("a"),epo=o("CLIPFeatureExtractor"),opo=o(" (CLIP model)"),rpo=l(),Sh=a("li"),rie=a("strong"),tpo=o("convnext"),apo=o(" \u2014 "),wN=a("a"),npo=o("ConvNextFeatureExtractor"),spo=o(" (ConvNeXT model)"),lpo=l(),Rh=a("li"),tie=a("strong"),ipo=o("cvt"),dpo=o(" \u2014 "),AN=a("a"),cpo=o("ConvNextFeatureExtractor"),mpo=o(" (CvT model)"),fpo=l(),Ph=a("li"),aie=a("strong"),gpo=o("data2vec-audio"),hpo=o(" \u2014 "),LN=a("a"),upo=o("Wav2Vec2FeatureExtractor"),ppo=o(" (Data2VecAudio model)"),_po=l(),Bh=a("li"),nie=a("strong"),bpo=o("data2vec-vision"),vpo=o(" \u2014 "),yN=a("a"),Fpo=o("BeitFeatureExtractor"),Tpo=o(" (Data2VecVision model)"),Mpo=l(),Ih=a("li"),sie=a("strong"),Epo=o("deit"),Cpo=o(" \u2014 "),xN=a("a"),wpo=o("DeiTFeatureExtractor"),Apo=o(" (DeiT model)"),Lpo=l(),Nh=a("li"),lie=a("strong"),ypo=o("detr"),xpo=o(" \u2014 "),$N=a("a"),$po=o("DetrFeatureExtractor"),kpo=o(" (DETR model)"),Spo=l(),qh=a("li"),iie=a("strong"),Rpo=o("dpt"),Ppo=o(" \u2014 "),kN=a("a"),Bpo=o("DPTFeatureExtractor"),Ipo=o(" (DPT model)"),Npo=l(),jh=a("li"),die=a("strong"),qpo=o("flava"),jpo=o(" \u2014 "),SN=a("a"),Dpo=o("FlavaFeatureExtractor"),Gpo=o(" (FLAVA model)"),Opo=l(),Dh=a("li"),cie=a("strong"),Vpo=o("glpn"),Xpo=o(" \u2014 "),RN=a("a"),zpo=o("GLPNFeatureExtractor"),Qpo=o(" (GLPN model)"),Wpo=l(),Gh=a("li"),mie=a("strong"),Hpo=o("groupvit"),Upo=o(" \u2014 "),PN=a("a"),Jpo=o("CLIPFeatureExtractor"),Ypo=o(" (GroupViT model)"),Kpo=l(),Oh=a("li"),fie=a("strong"),Zpo=o("hubert"),e_o=o(" \u2014 "),BN=a("a"),o_o=o("Wav2Vec2FeatureExtractor"),r_o=o(" (Hubert model)"),t_o=l(),Vh=a("li"),gie=a("strong"),a_o=o("imagegpt"),n_o=o(" \u2014 "),IN=a("a"),s_o=o("ImageGPTFeatureExtractor"),l_o=o(" (ImageGPT model)"),i_o=l(),Xh=a("li"),hie=a("strong"),d_o=o("layoutlmv2"),c_o=o(" \u2014 "),NN=a("a"),m_o=o("LayoutLMv2FeatureExtractor"),f_o=o(" (LayoutLMv2 model)"),g_o=l(),zh=a("li"),uie=a("strong"),h_o=o("layoutlmv3"),u_o=o(" \u2014 "),qN=a("a"),p_o=o("LayoutLMv3FeatureExtractor"),__o=o(" (LayoutLMv3 model)"),b_o=l(),Qh=a("li"),pie=a("strong"),v_o=o("levit"),F_o=o(" \u2014 "),jN=a("a"),T_o=o("LevitFeatureExtractor"),M_o=o(" (LeViT model)"),E_o=l(),Wh=a("li"),_ie=a("strong"),C_o=o("maskformer"),w_o=o(" \u2014 "),DN=a("a"),A_o=o("MaskFormerFeatureExtractor"),L_o=o(" (MaskFormer model)"),y_o=l(),Hh=a("li"),bie=a("strong"),x_o=o("mctct"),$_o=o(" \u2014 "),GN=a("a"),k_o=o("MCTCTFeatureExtractor"),S_o=o(" (M-CTC-T model)"),R_o=l(),Uh=a("li"),vie=a("strong"),P_o=o("perceiver"),B_o=o(" \u2014 "),ON=a("a"),I_o=o("PerceiverFeatureExtractor"),N_o=o(" (Perceiver model)"),q_o=l(),Jh=a("li"),Fie=a("strong"),j_o=o("poolformer"),D_o=o(" \u2014 "),VN=a("a"),G_o=o("PoolFormerFeatureExtractor"),O_o=o(" (PoolFormer model)"),V_o=l(),Yh=a("li"),Tie=a("strong"),X_o=o("regnet"),z_o=o(" \u2014 "),XN=a("a"),Q_o=o("ConvNextFeatureExtractor"),W_o=o(" (RegNet model)"),H_o=l(),Kh=a("li"),Mie=a("strong"),U_o=o("resnet"),J_o=o(" \u2014 "),zN=a("a"),Y_o=o("ConvNextFeatureExtractor"),K_o=o(" (ResNet model)"),Z_o=l(),Zh=a("li"),Eie=a("strong"),e2o=o("segformer"),o2o=o(" \u2014 "),QN=a("a"),r2o=o("SegformerFeatureExtractor"),t2o=o(" (SegFormer model)"),a2o=l(),eu=a("li"),Cie=a("strong"),n2o=o("speech_to_text"),s2o=o(" \u2014 "),WN=a("a"),l2o=o("Speech2TextFeatureExtractor"),i2o=o(" (Speech2Text model)"),d2o=l(),ou=a("li"),wie=a("strong"),c2o=o("swin"),m2o=o(" \u2014 "),HN=a("a"),f2o=o("ViTFeatureExtractor"),g2o=o(" (Swin Transformer model)"),h2o=l(),ru=a("li"),Aie=a("strong"),u2o=o("van"),p2o=o(" \u2014 "),UN=a("a"),_2o=o("ConvNextFeatureExtractor"),b2o=o(" (VAN model)"),v2o=l(),tu=a("li"),Lie=a("strong"),F2o=o("vilt"),T2o=o(" \u2014 "),JN=a("a"),M2o=o("ViltFeatureExtractor"),E2o=o(" (ViLT model)"),C2o=l(),au=a("li"),yie=a("strong"),w2o=o("vit"),A2o=o(" \u2014 "),YN=a("a"),L2o=o("ViTFeatureExtractor"),y2o=o(" (ViT model)"),x2o=l(),nu=a("li"),xie=a("strong"),$2o=o("vit_mae"),k2o=o(" \u2014 "),KN=a("a"),S2o=o("ViTFeatureExtractor"),R2o=o(" (ViTMAE model)"),P2o=l(),su=a("li"),$ie=a("strong"),B2o=o("wav2vec2"),I2o=o(" \u2014 "),ZN=a("a"),N2o=o("Wav2Vec2FeatureExtractor"),q2o=o(" (Wav2Vec2 model)"),j2o=l(),lu=a("li"),kie=a("strong"),D2o=o("wav2vec2-conformer"),G2o=o(" \u2014 "),eq=a("a"),O2o=o("Wav2Vec2FeatureExtractor"),V2o=o(" (Wav2Vec2-Conformer model)"),X2o=l(),iu=a("li"),Sie=a("strong"),z2o=o("yolos"),Q2o=o(" \u2014 "),oq=a("a"),W2o=o("YolosFeatureExtractor"),H2o=o(" (YOLOS model)"),U2o=l(),F(du.$$.fragment),J2o=l(),F(cu.$$.fragment),Y2o=l(),mu=a("div"),F(ty.$$.fragment),K2o=l(),Rie=a("p"),Z2o=o("Register a new feature extractor for this class."),POe=l(),Bi=a("h2"),fu=a("a"),Pie=a("span"),F(ay.$$.fragment),ebo=l(),Bie=a("span"),obo=o("AutoProcessor"),BOe=l(),yo=a("div"),F(ny.$$.fragment),rbo=l(),sy=a("p"),tbo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),rq=a("a"),abo=o("AutoProcessor.from_pretrained()"),nbo=o(" class method."),sbo=l(),ly=a("p"),lbo=o("This class cannot be instantiated directly using "),Iie=a("code"),ibo=o("__init__()"),dbo=o(" (throws an error)."),cbo=l(),Ue=a("div"),F(iy.$$.fragment),mbo=l(),Nie=a("p"),fbo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),gbo=l(),Ii=a("p"),hbo=o("The processor class to instantiate is selected based on the "),qie=a("code"),ubo=o("model_type"),pbo=o(` property of the config object (either
passed as an argument or loaded from `),jie=a("code"),_bo=o("pretrained_model_name_or_path"),bbo=o(" if possible):"),vbo=l(),he=a("ul"),gu=a("li"),Die=a("strong"),Fbo=o("clip"),Tbo=o(" \u2014 "),tq=a("a"),Mbo=o("CLIPProcessor"),Ebo=o(" (CLIP model)"),Cbo=l(),hu=a("li"),Gie=a("strong"),wbo=o("flava"),Abo=o(" \u2014 "),Oie=a("code"),Lbo=o("FLAVAProcessor"),ybo=o(" (FLAVA model)"),xbo=l(),uu=a("li"),Vie=a("strong"),$bo=o("groupvit"),kbo=o(" \u2014 "),aq=a("a"),Sbo=o("CLIPProcessor"),Rbo=o(" (GroupViT model)"),Pbo=l(),pu=a("li"),Xie=a("strong"),Bbo=o("layoutlmv2"),Ibo=o(" \u2014 "),nq=a("a"),Nbo=o("LayoutLMv2Processor"),qbo=o(" (LayoutLMv2 model)"),jbo=l(),_u=a("li"),zie=a("strong"),Dbo=o("layoutlmv3"),Gbo=o(" \u2014 "),sq=a("a"),Obo=o("LayoutLMv3Processor"),Vbo=o(" (LayoutLMv3 model)"),Xbo=l(),bu=a("li"),Qie=a("strong"),zbo=o("layoutxlm"),Qbo=o(" \u2014 "),lq=a("a"),Wbo=o("LayoutXLMProcessor"),Hbo=o(" (LayoutXLM model)"),Ubo=l(),vu=a("li"),Wie=a("strong"),Jbo=o("sew"),Ybo=o(" \u2014 "),iq=a("a"),Kbo=o("Wav2Vec2Processor"),Zbo=o(" (SEW model)"),evo=l(),Fu=a("li"),Hie=a("strong"),ovo=o("sew-d"),rvo=o(" \u2014 "),dq=a("a"),tvo=o("Wav2Vec2Processor"),avo=o(" (SEW-D model)"),nvo=l(),Tu=a("li"),Uie=a("strong"),svo=o("speech_to_text"),lvo=o(" \u2014 "),cq=a("a"),ivo=o("Speech2TextProcessor"),dvo=o(" (Speech2Text model)"),cvo=l(),Mu=a("li"),Jie=a("strong"),mvo=o("speech_to_text_2"),fvo=o(" \u2014 "),mq=a("a"),gvo=o("Speech2Text2Processor"),hvo=o(" (Speech2Text2 model)"),uvo=l(),Eu=a("li"),Yie=a("strong"),pvo=o("trocr"),_vo=o(" \u2014 "),fq=a("a"),bvo=o("TrOCRProcessor"),vvo=o(" (TrOCR model)"),Fvo=l(),Cu=a("li"),Kie=a("strong"),Tvo=o("unispeech"),Mvo=o(" \u2014 "),gq=a("a"),Evo=o("Wav2Vec2Processor"),Cvo=o(" (UniSpeech model)"),wvo=l(),wu=a("li"),Zie=a("strong"),Avo=o("unispeech-sat"),Lvo=o(" \u2014 "),hq=a("a"),yvo=o("Wav2Vec2Processor"),xvo=o(" (UniSpeechSat model)"),$vo=l(),Au=a("li"),ede=a("strong"),kvo=o("vilt"),Svo=o(" \u2014 "),uq=a("a"),Rvo=o("ViltProcessor"),Pvo=o(" (ViLT model)"),Bvo=l(),Lu=a("li"),ode=a("strong"),Ivo=o("vision-text-dual-encoder"),Nvo=o(" \u2014 "),pq=a("a"),qvo=o("VisionTextDualEncoderProcessor"),jvo=o(" (VisionTextDualEncoder model)"),Dvo=l(),yu=a("li"),rde=a("strong"),Gvo=o("wav2vec2"),Ovo=o(" \u2014 "),_q=a("a"),Vvo=o("Wav2Vec2Processor"),Xvo=o(" (Wav2Vec2 model)"),zvo=l(),xu=a("li"),tde=a("strong"),Qvo=o("wav2vec2-conformer"),Wvo=o(" \u2014 "),bq=a("a"),Hvo=o("Wav2Vec2Processor"),Uvo=o(" (Wav2Vec2-Conformer model)"),Jvo=l(),$u=a("li"),ade=a("strong"),Yvo=o("wavlm"),Kvo=o(" \u2014 "),vq=a("a"),Zvo=o("Wav2Vec2Processor"),e1o=o(" (WavLM model)"),o1o=l(),F(ku.$$.fragment),r1o=l(),F(Su.$$.fragment),t1o=l(),Ru=a("div"),F(dy.$$.fragment),a1o=l(),nde=a("p"),n1o=o("Register a new processor for this class."),IOe=l(),Ni=a("h2"),Pu=a("a"),sde=a("span"),F(cy.$$.fragment),s1o=l(),lde=a("span"),l1o=o("AutoModel"),NOe=l(),xo=a("div"),F(my.$$.fragment),i1o=l(),qi=a("p"),d1o=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Fq=a("a"),c1o=o("from_pretrained()"),m1o=o(" class method or the "),Tq=a("a"),f1o=o("from_config()"),g1o=o(` class
method.`),h1o=l(),fy=a("p"),u1o=o("This class cannot be instantiated directly using "),ide=a("code"),p1o=o("__init__()"),_1o=o(" (throws an error)."),b1o=l(),nt=a("div"),F(gy.$$.fragment),v1o=l(),dde=a("p"),F1o=o("Instantiates one of the base model classes of the library from a configuration."),T1o=l(),ji=a("p"),M1o=o(`Note:
Loading a model from its configuration file does `),cde=a("strong"),E1o=o("not"),C1o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Mq=a("a"),w1o=o("from_pretrained()"),A1o=o(" to load the model weights."),L1o=l(),F(Bu.$$.fragment),y1o=l(),Je=a("div"),F(hy.$$.fragment),x1o=l(),mde=a("p"),$1o=o("Instantiate one of the base model classes of the library from a pretrained model."),k1o=l(),Ra=a("p"),S1o=o("The model class to instantiate is selected based on the "),fde=a("code"),R1o=o("model_type"),P1o=o(` property of the config object (either
passed as an argument or loaded from `),gde=a("code"),B1o=o("pretrained_model_name_or_path"),I1o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hde=a("code"),N1o=o("pretrained_model_name_or_path"),q1o=o(":"),j1o=l(),y=a("ul"),Iu=a("li"),ude=a("strong"),D1o=o("albert"),G1o=o(" \u2014 "),Eq=a("a"),O1o=o("AlbertModel"),V1o=o(" (ALBERT model)"),X1o=l(),Nu=a("li"),pde=a("strong"),z1o=o("bart"),Q1o=o(" \u2014 "),Cq=a("a"),W1o=o("BartModel"),H1o=o(" (BART model)"),U1o=l(),qu=a("li"),_de=a("strong"),J1o=o("beit"),Y1o=o(" \u2014 "),wq=a("a"),K1o=o("BeitModel"),Z1o=o(" (BEiT model)"),eFo=l(),ju=a("li"),bde=a("strong"),oFo=o("bert"),rFo=o(" \u2014 "),Aq=a("a"),tFo=o("BertModel"),aFo=o(" (BERT model)"),nFo=l(),Du=a("li"),vde=a("strong"),sFo=o("bert-generation"),lFo=o(" \u2014 "),Lq=a("a"),iFo=o("BertGenerationEncoder"),dFo=o(" (Bert Generation model)"),cFo=l(),Gu=a("li"),Fde=a("strong"),mFo=o("big_bird"),fFo=o(" \u2014 "),yq=a("a"),gFo=o("BigBirdModel"),hFo=o(" (BigBird model)"),uFo=l(),Ou=a("li"),Tde=a("strong"),pFo=o("bigbird_pegasus"),_Fo=o(" \u2014 "),xq=a("a"),bFo=o("BigBirdPegasusModel"),vFo=o(" (BigBird-Pegasus model)"),FFo=l(),Vu=a("li"),Mde=a("strong"),TFo=o("blenderbot"),MFo=o(" \u2014 "),$q=a("a"),EFo=o("BlenderbotModel"),CFo=o(" (Blenderbot model)"),wFo=l(),Xu=a("li"),Ede=a("strong"),AFo=o("blenderbot-small"),LFo=o(" \u2014 "),kq=a("a"),yFo=o("BlenderbotSmallModel"),xFo=o(" (BlenderbotSmall model)"),$Fo=l(),zu=a("li"),Cde=a("strong"),kFo=o("bloom"),SFo=o(" \u2014 "),Sq=a("a"),RFo=o("BloomModel"),PFo=o(" (BLOOM model)"),BFo=l(),Qu=a("li"),wde=a("strong"),IFo=o("camembert"),NFo=o(" \u2014 "),Rq=a("a"),qFo=o("CamembertModel"),jFo=o(" (CamemBERT model)"),DFo=l(),Wu=a("li"),Ade=a("strong"),GFo=o("canine"),OFo=o(" \u2014 "),Pq=a("a"),VFo=o("CanineModel"),XFo=o(" (CANINE model)"),zFo=l(),Hu=a("li"),Lde=a("strong"),QFo=o("clip"),WFo=o(" \u2014 "),Bq=a("a"),HFo=o("CLIPModel"),UFo=o(" (CLIP model)"),JFo=l(),Uu=a("li"),yde=a("strong"),YFo=o("codegen"),KFo=o(" \u2014 "),Iq=a("a"),ZFo=o("CodeGenModel"),eTo=o(" (CodeGen model)"),oTo=l(),Ju=a("li"),xde=a("strong"),rTo=o("convbert"),tTo=o(" \u2014 "),Nq=a("a"),aTo=o("ConvBertModel"),nTo=o(" (ConvBERT model)"),sTo=l(),Yu=a("li"),$de=a("strong"),lTo=o("convnext"),iTo=o(" \u2014 "),qq=a("a"),dTo=o("ConvNextModel"),cTo=o(" (ConvNeXT model)"),mTo=l(),Ku=a("li"),kde=a("strong"),fTo=o("ctrl"),gTo=o(" \u2014 "),jq=a("a"),hTo=o("CTRLModel"),uTo=o(" (CTRL model)"),pTo=l(),Zu=a("li"),Sde=a("strong"),_To=o("cvt"),bTo=o(" \u2014 "),Dq=a("a"),vTo=o("CvtModel"),FTo=o(" (CvT model)"),TTo=l(),ep=a("li"),Rde=a("strong"),MTo=o("data2vec-audio"),ETo=o(" \u2014 "),Gq=a("a"),CTo=o("Data2VecAudioModel"),wTo=o(" (Data2VecAudio model)"),ATo=l(),op=a("li"),Pde=a("strong"),LTo=o("data2vec-text"),yTo=o(" \u2014 "),Oq=a("a"),xTo=o("Data2VecTextModel"),$To=o(" (Data2VecText model)"),kTo=l(),rp=a("li"),Bde=a("strong"),STo=o("data2vec-vision"),RTo=o(" \u2014 "),Vq=a("a"),PTo=o("Data2VecVisionModel"),BTo=o(" (Data2VecVision model)"),ITo=l(),tp=a("li"),Ide=a("strong"),NTo=o("deberta"),qTo=o(" \u2014 "),Xq=a("a"),jTo=o("DebertaModel"),DTo=o(" (DeBERTa model)"),GTo=l(),ap=a("li"),Nde=a("strong"),OTo=o("deberta-v2"),VTo=o(" \u2014 "),zq=a("a"),XTo=o("DebertaV2Model"),zTo=o(" (DeBERTa-v2 model)"),QTo=l(),np=a("li"),qde=a("strong"),WTo=o("decision_transformer"),HTo=o(" \u2014 "),Qq=a("a"),UTo=o("DecisionTransformerModel"),JTo=o(" (Decision Transformer model)"),YTo=l(),sp=a("li"),jde=a("strong"),KTo=o("deit"),ZTo=o(" \u2014 "),Wq=a("a"),eMo=o("DeiTModel"),oMo=o(" (DeiT model)"),rMo=l(),lp=a("li"),Dde=a("strong"),tMo=o("detr"),aMo=o(" \u2014 "),Hq=a("a"),nMo=o("DetrModel"),sMo=o(" (DETR model)"),lMo=l(),ip=a("li"),Gde=a("strong"),iMo=o("distilbert"),dMo=o(" \u2014 "),Uq=a("a"),cMo=o("DistilBertModel"),mMo=o(" (DistilBERT model)"),fMo=l(),dp=a("li"),Ode=a("strong"),gMo=o("dpr"),hMo=o(" \u2014 "),Jq=a("a"),uMo=o("DPRQuestionEncoder"),pMo=o(" (DPR model)"),_Mo=l(),cp=a("li"),Vde=a("strong"),bMo=o("dpt"),vMo=o(" \u2014 "),Yq=a("a"),FMo=o("DPTModel"),TMo=o(" (DPT model)"),MMo=l(),mp=a("li"),Xde=a("strong"),EMo=o("electra"),CMo=o(" \u2014 "),Kq=a("a"),wMo=o("ElectraModel"),AMo=o(" (ELECTRA model)"),LMo=l(),fp=a("li"),zde=a("strong"),yMo=o("flaubert"),xMo=o(" \u2014 "),Zq=a("a"),$Mo=o("FlaubertModel"),kMo=o(" (FlauBERT model)"),SMo=l(),gp=a("li"),Qde=a("strong"),RMo=o("flava"),PMo=o(" \u2014 "),ej=a("a"),BMo=o("FlavaModel"),IMo=o(" (FLAVA model)"),NMo=l(),hp=a("li"),Wde=a("strong"),qMo=o("fnet"),jMo=o(" \u2014 "),oj=a("a"),DMo=o("FNetModel"),GMo=o(" (FNet model)"),OMo=l(),up=a("li"),Hde=a("strong"),VMo=o("fsmt"),XMo=o(" \u2014 "),rj=a("a"),zMo=o("FSMTModel"),QMo=o(" (FairSeq Machine-Translation model)"),WMo=l(),zs=a("li"),Ude=a("strong"),HMo=o("funnel"),UMo=o(" \u2014 "),tj=a("a"),JMo=o("FunnelModel"),YMo=o(" or "),aj=a("a"),KMo=o("FunnelBaseModel"),ZMo=o(" (Funnel Transformer model)"),eEo=l(),pp=a("li"),Jde=a("strong"),oEo=o("glpn"),rEo=o(" \u2014 "),nj=a("a"),tEo=o("GLPNModel"),aEo=o(" (GLPN model)"),nEo=l(),_p=a("li"),Yde=a("strong"),sEo=o("gpt2"),lEo=o(" \u2014 "),sj=a("a"),iEo=o("GPT2Model"),dEo=o(" (OpenAI GPT-2 model)"),cEo=l(),bp=a("li"),Kde=a("strong"),mEo=o("gpt_neo"),fEo=o(" \u2014 "),lj=a("a"),gEo=o("GPTNeoModel"),hEo=o(" (GPT Neo model)"),uEo=l(),vp=a("li"),Zde=a("strong"),pEo=o("gpt_neox"),_Eo=o(" \u2014 "),ij=a("a"),bEo=o("GPTNeoXModel"),vEo=o(" (GPT NeoX model)"),FEo=l(),Fp=a("li"),ece=a("strong"),TEo=o("gptj"),MEo=o(" \u2014 "),dj=a("a"),EEo=o("GPTJModel"),CEo=o(" (GPT-J model)"),wEo=l(),Tp=a("li"),oce=a("strong"),AEo=o("groupvit"),LEo=o(" \u2014 "),cj=a("a"),yEo=o("GroupViTModel"),xEo=o(" (GroupViT model)"),$Eo=l(),Mp=a("li"),rce=a("strong"),kEo=o("hubert"),SEo=o(" \u2014 "),mj=a("a"),REo=o("HubertModel"),PEo=o(" (Hubert model)"),BEo=l(),Ep=a("li"),tce=a("strong"),IEo=o("ibert"),NEo=o(" \u2014 "),fj=a("a"),qEo=o("IBertModel"),jEo=o(" (I-BERT model)"),DEo=l(),Cp=a("li"),ace=a("strong"),GEo=o("imagegpt"),OEo=o(" \u2014 "),gj=a("a"),VEo=o("ImageGPTModel"),XEo=o(" (ImageGPT model)"),zEo=l(),wp=a("li"),nce=a("strong"),QEo=o("layoutlm"),WEo=o(" \u2014 "),hj=a("a"),HEo=o("LayoutLMModel"),UEo=o(" (LayoutLM model)"),JEo=l(),Ap=a("li"),sce=a("strong"),YEo=o("layoutlmv2"),KEo=o(" \u2014 "),uj=a("a"),ZEo=o("LayoutLMv2Model"),e4o=o(" (LayoutLMv2 model)"),o4o=l(),Lp=a("li"),lce=a("strong"),r4o=o("layoutlmv3"),t4o=o(" \u2014 "),pj=a("a"),a4o=o("LayoutLMv3Model"),n4o=o(" (LayoutLMv3 model)"),s4o=l(),yp=a("li"),ice=a("strong"),l4o=o("led"),i4o=o(" \u2014 "),_j=a("a"),d4o=o("LEDModel"),c4o=o(" (LED model)"),m4o=l(),xp=a("li"),dce=a("strong"),f4o=o("levit"),g4o=o(" \u2014 "),bj=a("a"),h4o=o("LevitModel"),u4o=o(" (LeViT model)"),p4o=l(),$p=a("li"),cce=a("strong"),_4o=o("longformer"),b4o=o(" \u2014 "),vj=a("a"),v4o=o("LongformerModel"),F4o=o(" (Longformer model)"),T4o=l(),kp=a("li"),mce=a("strong"),M4o=o("longt5"),E4o=o(" \u2014 "),Fj=a("a"),C4o=o("LongT5Model"),w4o=o(" (LongT5 model)"),A4o=l(),Sp=a("li"),fce=a("strong"),L4o=o("luke"),y4o=o(" \u2014 "),Tj=a("a"),x4o=o("LukeModel"),$4o=o(" (LUKE model)"),k4o=l(),Rp=a("li"),gce=a("strong"),S4o=o("lxmert"),R4o=o(" \u2014 "),Mj=a("a"),P4o=o("LxmertModel"),B4o=o(" (LXMERT model)"),I4o=l(),Pp=a("li"),hce=a("strong"),N4o=o("m2m_100"),q4o=o(" \u2014 "),Ej=a("a"),j4o=o("M2M100Model"),D4o=o(" (M2M100 model)"),G4o=l(),Bp=a("li"),uce=a("strong"),O4o=o("marian"),V4o=o(" \u2014 "),Cj=a("a"),X4o=o("MarianModel"),z4o=o(" (Marian model)"),Q4o=l(),Ip=a("li"),pce=a("strong"),W4o=o("maskformer"),H4o=o(" \u2014 "),wj=a("a"),U4o=o("MaskFormerModel"),J4o=o(" (MaskFormer model)"),Y4o=l(),Np=a("li"),_ce=a("strong"),K4o=o("mbart"),Z4o=o(" \u2014 "),Aj=a("a"),eCo=o("MBartModel"),oCo=o(" (mBART model)"),rCo=l(),qp=a("li"),bce=a("strong"),tCo=o("mctct"),aCo=o(" \u2014 "),Lj=a("a"),nCo=o("MCTCTModel"),sCo=o(" (M-CTC-T model)"),lCo=l(),jp=a("li"),vce=a("strong"),iCo=o("megatron-bert"),dCo=o(" \u2014 "),yj=a("a"),cCo=o("MegatronBertModel"),mCo=o(" (Megatron-BERT model)"),fCo=l(),Dp=a("li"),Fce=a("strong"),gCo=o("mobilebert"),hCo=o(" \u2014 "),xj=a("a"),uCo=o("MobileBertModel"),pCo=o(" (MobileBERT model)"),_Co=l(),Gp=a("li"),Tce=a("strong"),bCo=o("mpnet"),vCo=o(" \u2014 "),$j=a("a"),FCo=o("MPNetModel"),TCo=o(" (MPNet model)"),MCo=l(),Op=a("li"),Mce=a("strong"),ECo=o("mt5"),CCo=o(" \u2014 "),kj=a("a"),wCo=o("MT5Model"),ACo=o(" (MT5 model)"),LCo=l(),Vp=a("li"),Ece=a("strong"),yCo=o("nezha"),xCo=o(" \u2014 "),Sj=a("a"),$Co=o("NezhaModel"),kCo=o(" (Nezha model)"),SCo=l(),Xp=a("li"),Cce=a("strong"),RCo=o("nystromformer"),PCo=o(" \u2014 "),Rj=a("a"),BCo=o("NystromformerModel"),ICo=o(" (Nystr\xF6mformer model)"),NCo=l(),zp=a("li"),wce=a("strong"),qCo=o("openai-gpt"),jCo=o(" \u2014 "),Pj=a("a"),DCo=o("OpenAIGPTModel"),GCo=o(" (OpenAI GPT model)"),OCo=l(),Qp=a("li"),Ace=a("strong"),VCo=o("opt"),XCo=o(" \u2014 "),Bj=a("a"),zCo=o("OPTModel"),QCo=o(" (OPT model)"),WCo=l(),Wp=a("li"),Lce=a("strong"),HCo=o("pegasus"),UCo=o(" \u2014 "),Ij=a("a"),JCo=o("PegasusModel"),YCo=o(" (Pegasus model)"),KCo=l(),Hp=a("li"),yce=a("strong"),ZCo=o("perceiver"),e5o=o(" \u2014 "),Nj=a("a"),o5o=o("PerceiverModel"),r5o=o(" (Perceiver model)"),t5o=l(),Up=a("li"),xce=a("strong"),a5o=o("plbart"),n5o=o(" \u2014 "),qj=a("a"),s5o=o("PLBartModel"),l5o=o(" (PLBart model)"),i5o=l(),Jp=a("li"),$ce=a("strong"),d5o=o("poolformer"),c5o=o(" \u2014 "),jj=a("a"),m5o=o("PoolFormerModel"),f5o=o(" (PoolFormer model)"),g5o=l(),Yp=a("li"),kce=a("strong"),h5o=o("prophetnet"),u5o=o(" \u2014 "),Dj=a("a"),p5o=o("ProphetNetModel"),_5o=o(" (ProphetNet model)"),b5o=l(),Kp=a("li"),Sce=a("strong"),v5o=o("qdqbert"),F5o=o(" \u2014 "),Gj=a("a"),T5o=o("QDQBertModel"),M5o=o(" (QDQBert model)"),E5o=l(),Zp=a("li"),Rce=a("strong"),C5o=o("reformer"),w5o=o(" \u2014 "),Oj=a("a"),A5o=o("ReformerModel"),L5o=o(" (Reformer model)"),y5o=l(),e_=a("li"),Pce=a("strong"),x5o=o("regnet"),$5o=o(" \u2014 "),Vj=a("a"),k5o=o("RegNetModel"),S5o=o(" (RegNet model)"),R5o=l(),o_=a("li"),Bce=a("strong"),P5o=o("rembert"),B5o=o(" \u2014 "),Xj=a("a"),I5o=o("RemBertModel"),N5o=o(" (RemBERT model)"),q5o=l(),r_=a("li"),Ice=a("strong"),j5o=o("resnet"),D5o=o(" \u2014 "),zj=a("a"),G5o=o("ResNetModel"),O5o=o(" (ResNet model)"),V5o=l(),t_=a("li"),Nce=a("strong"),X5o=o("retribert"),z5o=o(" \u2014 "),Qj=a("a"),Q5o=o("RetriBertModel"),W5o=o(" (RetriBERT model)"),H5o=l(),a_=a("li"),qce=a("strong"),U5o=o("roberta"),J5o=o(" \u2014 "),Wj=a("a"),Y5o=o("RobertaModel"),K5o=o(" (RoBERTa model)"),Z5o=l(),n_=a("li"),jce=a("strong"),e3o=o("roformer"),o3o=o(" \u2014 "),Hj=a("a"),r3o=o("RoFormerModel"),t3o=o(" (RoFormer model)"),a3o=l(),s_=a("li"),Dce=a("strong"),n3o=o("segformer"),s3o=o(" \u2014 "),Uj=a("a"),l3o=o("SegformerModel"),i3o=o(" (SegFormer model)"),d3o=l(),l_=a("li"),Gce=a("strong"),c3o=o("sew"),m3o=o(" \u2014 "),Jj=a("a"),f3o=o("SEWModel"),g3o=o(" (SEW model)"),h3o=l(),i_=a("li"),Oce=a("strong"),u3o=o("sew-d"),p3o=o(" \u2014 "),Yj=a("a"),_3o=o("SEWDModel"),b3o=o(" (SEW-D model)"),v3o=l(),d_=a("li"),Vce=a("strong"),F3o=o("speech_to_text"),T3o=o(" \u2014 "),Kj=a("a"),M3o=o("Speech2TextModel"),E3o=o(" (Speech2Text model)"),C3o=l(),c_=a("li"),Xce=a("strong"),w3o=o("splinter"),A3o=o(" \u2014 "),Zj=a("a"),L3o=o("SplinterModel"),y3o=o(" (Splinter model)"),x3o=l(),m_=a("li"),zce=a("strong"),$3o=o("squeezebert"),k3o=o(" \u2014 "),eD=a("a"),S3o=o("SqueezeBertModel"),R3o=o(" (SqueezeBERT model)"),P3o=l(),f_=a("li"),Qce=a("strong"),B3o=o("swin"),I3o=o(" \u2014 "),oD=a("a"),N3o=o("SwinModel"),q3o=o(" (Swin Transformer model)"),j3o=l(),g_=a("li"),Wce=a("strong"),D3o=o("t5"),G3o=o(" \u2014 "),rD=a("a"),O3o=o("T5Model"),V3o=o(" (T5 model)"),X3o=l(),h_=a("li"),Hce=a("strong"),z3o=o("tapas"),Q3o=o(" \u2014 "),tD=a("a"),W3o=o("TapasModel"),H3o=o(" (TAPAS model)"),U3o=l(),u_=a("li"),Uce=a("strong"),J3o=o("trajectory_transformer"),Y3o=o(" \u2014 "),aD=a("a"),K3o=o("TrajectoryTransformerModel"),Z3o=o(" (Trajectory Transformer model)"),e0o=l(),p_=a("li"),Jce=a("strong"),o0o=o("transfo-xl"),r0o=o(" \u2014 "),nD=a("a"),t0o=o("TransfoXLModel"),a0o=o(" (Transformer-XL model)"),n0o=l(),__=a("li"),Yce=a("strong"),s0o=o("unispeech"),l0o=o(" \u2014 "),sD=a("a"),i0o=o("UniSpeechModel"),d0o=o(" (UniSpeech model)"),c0o=l(),b_=a("li"),Kce=a("strong"),m0o=o("unispeech-sat"),f0o=o(" \u2014 "),lD=a("a"),g0o=o("UniSpeechSatModel"),h0o=o(" (UniSpeechSat model)"),u0o=l(),v_=a("li"),Zce=a("strong"),p0o=o("van"),_0o=o(" \u2014 "),iD=a("a"),b0o=o("VanModel"),v0o=o(" (VAN model)"),F0o=l(),F_=a("li"),eme=a("strong"),T0o=o("vilt"),M0o=o(" \u2014 "),dD=a("a"),E0o=o("ViltModel"),C0o=o(" (ViLT model)"),w0o=l(),T_=a("li"),ome=a("strong"),A0o=o("vision-text-dual-encoder"),L0o=o(" \u2014 "),cD=a("a"),y0o=o("VisionTextDualEncoderModel"),x0o=o(" (VisionTextDualEncoder model)"),$0o=l(),M_=a("li"),rme=a("strong"),k0o=o("visual_bert"),S0o=o(" \u2014 "),mD=a("a"),R0o=o("VisualBertModel"),P0o=o(" (VisualBERT model)"),B0o=l(),E_=a("li"),tme=a("strong"),I0o=o("vit"),N0o=o(" \u2014 "),fD=a("a"),q0o=o("ViTModel"),j0o=o(" (ViT model)"),D0o=l(),C_=a("li"),ame=a("strong"),G0o=o("vit_mae"),O0o=o(" \u2014 "),gD=a("a"),V0o=o("ViTMAEModel"),X0o=o(" (ViTMAE model)"),z0o=l(),w_=a("li"),nme=a("strong"),Q0o=o("wav2vec2"),W0o=o(" \u2014 "),hD=a("a"),H0o=o("Wav2Vec2Model"),U0o=o(" (Wav2Vec2 model)"),J0o=l(),A_=a("li"),sme=a("strong"),Y0o=o("wav2vec2-conformer"),K0o=o(" \u2014 "),uD=a("a"),Z0o=o("Wav2Vec2ConformerModel"),ewo=o(" (Wav2Vec2-Conformer model)"),owo=l(),L_=a("li"),lme=a("strong"),rwo=o("wavlm"),two=o(" \u2014 "),pD=a("a"),awo=o("WavLMModel"),nwo=o(" (WavLM model)"),swo=l(),y_=a("li"),ime=a("strong"),lwo=o("xglm"),iwo=o(" \u2014 "),_D=a("a"),dwo=o("XGLMModel"),cwo=o(" (XGLM model)"),mwo=l(),x_=a("li"),dme=a("strong"),fwo=o("xlm"),gwo=o(" \u2014 "),bD=a("a"),hwo=o("XLMModel"),uwo=o(" (XLM model)"),pwo=l(),$_=a("li"),cme=a("strong"),_wo=o("xlm-prophetnet"),bwo=o(" \u2014 "),vD=a("a"),vwo=o("XLMProphetNetModel"),Fwo=o(" (XLM-ProphetNet model)"),Two=l(),k_=a("li"),mme=a("strong"),Mwo=o("xlm-roberta"),Ewo=o(" \u2014 "),FD=a("a"),Cwo=o("XLMRobertaModel"),wwo=o(" (XLM-RoBERTa model)"),Awo=l(),S_=a("li"),fme=a("strong"),Lwo=o("xlm-roberta-xl"),ywo=o(" \u2014 "),TD=a("a"),xwo=o("XLMRobertaXLModel"),$wo=o(" (XLM-RoBERTa-XL model)"),kwo=l(),R_=a("li"),gme=a("strong"),Swo=o("xlnet"),Rwo=o(" \u2014 "),MD=a("a"),Pwo=o("XLNetModel"),Bwo=o(" (XLNet model)"),Iwo=l(),P_=a("li"),hme=a("strong"),Nwo=o("yolos"),qwo=o(" \u2014 "),ED=a("a"),jwo=o("YolosModel"),Dwo=o(" (YOLOS model)"),Gwo=l(),B_=a("li"),ume=a("strong"),Owo=o("yoso"),Vwo=o(" \u2014 "),CD=a("a"),Xwo=o("YosoModel"),zwo=o(" (YOSO model)"),Qwo=l(),I_=a("p"),Wwo=o("The model is set in evaluation mode by default using "),pme=a("code"),Hwo=o("model.eval()"),Uwo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_me=a("code"),Jwo=o("model.train()"),Ywo=l(),F(N_.$$.fragment),qOe=l(),Di=a("h2"),q_=a("a"),bme=a("span"),F(uy.$$.fragment),Kwo=l(),vme=a("span"),Zwo=o("AutoModelForPreTraining"),jOe=l(),$o=a("div"),F(py.$$.fragment),eAo=l(),Gi=a("p"),oAo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),wD=a("a"),rAo=o("from_pretrained()"),tAo=o(" class method or the "),AD=a("a"),aAo=o("from_config()"),nAo=o(` class
method.`),sAo=l(),_y=a("p"),lAo=o("This class cannot be instantiated directly using "),Fme=a("code"),iAo=o("__init__()"),dAo=o(" (throws an error)."),cAo=l(),st=a("div"),F(by.$$.fragment),mAo=l(),Tme=a("p"),fAo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),gAo=l(),Oi=a("p"),hAo=o(`Note:
Loading a model from its configuration file does `),Mme=a("strong"),uAo=o("not"),pAo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LD=a("a"),_Ao=o("from_pretrained()"),bAo=o(" to load the model weights."),vAo=l(),F(j_.$$.fragment),FAo=l(),Ye=a("div"),F(vy.$$.fragment),TAo=l(),Eme=a("p"),MAo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),EAo=l(),Pa=a("p"),CAo=o("The model class to instantiate is selected based on the "),Cme=a("code"),wAo=o("model_type"),AAo=o(` property of the config object (either
passed as an argument or loaded from `),wme=a("code"),LAo=o("pretrained_model_name_or_path"),yAo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ame=a("code"),xAo=o("pretrained_model_name_or_path"),$Ao=o(":"),kAo=l(),G=a("ul"),D_=a("li"),Lme=a("strong"),SAo=o("albert"),RAo=o(" \u2014 "),yD=a("a"),PAo=o("AlbertForPreTraining"),BAo=o(" (ALBERT model)"),IAo=l(),G_=a("li"),yme=a("strong"),NAo=o("bart"),qAo=o(" \u2014 "),xD=a("a"),jAo=o("BartForConditionalGeneration"),DAo=o(" (BART model)"),GAo=l(),O_=a("li"),xme=a("strong"),OAo=o("bert"),VAo=o(" \u2014 "),$D=a("a"),XAo=o("BertForPreTraining"),zAo=o(" (BERT model)"),QAo=l(),V_=a("li"),$me=a("strong"),WAo=o("big_bird"),HAo=o(" \u2014 "),kD=a("a"),UAo=o("BigBirdForPreTraining"),JAo=o(" (BigBird model)"),YAo=l(),X_=a("li"),kme=a("strong"),KAo=o("bloom"),ZAo=o(" \u2014 "),SD=a("a"),e6o=o("BloomForCausalLM"),o6o=o(" (BLOOM model)"),r6o=l(),z_=a("li"),Sme=a("strong"),t6o=o("camembert"),a6o=o(" \u2014 "),RD=a("a"),n6o=o("CamembertForMaskedLM"),s6o=o(" (CamemBERT model)"),l6o=l(),Q_=a("li"),Rme=a("strong"),i6o=o("ctrl"),d6o=o(" \u2014 "),PD=a("a"),c6o=o("CTRLLMHeadModel"),m6o=o(" (CTRL model)"),f6o=l(),W_=a("li"),Pme=a("strong"),g6o=o("data2vec-text"),h6o=o(" \u2014 "),BD=a("a"),u6o=o("Data2VecTextForMaskedLM"),p6o=o(" (Data2VecText model)"),_6o=l(),H_=a("li"),Bme=a("strong"),b6o=o("deberta"),v6o=o(" \u2014 "),ID=a("a"),F6o=o("DebertaForMaskedLM"),T6o=o(" (DeBERTa model)"),M6o=l(),U_=a("li"),Ime=a("strong"),E6o=o("deberta-v2"),C6o=o(" \u2014 "),ND=a("a"),w6o=o("DebertaV2ForMaskedLM"),A6o=o(" (DeBERTa-v2 model)"),L6o=l(),J_=a("li"),Nme=a("strong"),y6o=o("distilbert"),x6o=o(" \u2014 "),qD=a("a"),$6o=o("DistilBertForMaskedLM"),k6o=o(" (DistilBERT model)"),S6o=l(),Y_=a("li"),qme=a("strong"),R6o=o("electra"),P6o=o(" \u2014 "),jD=a("a"),B6o=o("ElectraForPreTraining"),I6o=o(" (ELECTRA model)"),N6o=l(),K_=a("li"),jme=a("strong"),q6o=o("flaubert"),j6o=o(" \u2014 "),DD=a("a"),D6o=o("FlaubertWithLMHeadModel"),G6o=o(" (FlauBERT model)"),O6o=l(),Z_=a("li"),Dme=a("strong"),V6o=o("flava"),X6o=o(" \u2014 "),GD=a("a"),z6o=o("FlavaForPreTraining"),Q6o=o(" (FLAVA model)"),W6o=l(),e2=a("li"),Gme=a("strong"),H6o=o("fnet"),U6o=o(" \u2014 "),OD=a("a"),J6o=o("FNetForPreTraining"),Y6o=o(" (FNet model)"),K6o=l(),o2=a("li"),Ome=a("strong"),Z6o=o("fsmt"),eLo=o(" \u2014 "),VD=a("a"),oLo=o("FSMTForConditionalGeneration"),rLo=o(" (FairSeq Machine-Translation model)"),tLo=l(),r2=a("li"),Vme=a("strong"),aLo=o("funnel"),nLo=o(" \u2014 "),XD=a("a"),sLo=o("FunnelForPreTraining"),lLo=o(" (Funnel Transformer model)"),iLo=l(),t2=a("li"),Xme=a("strong"),dLo=o("gpt2"),cLo=o(" \u2014 "),zD=a("a"),mLo=o("GPT2LMHeadModel"),fLo=o(" (OpenAI GPT-2 model)"),gLo=l(),a2=a("li"),zme=a("strong"),hLo=o("ibert"),uLo=o(" \u2014 "),QD=a("a"),pLo=o("IBertForMaskedLM"),_Lo=o(" (I-BERT model)"),bLo=l(),n2=a("li"),Qme=a("strong"),vLo=o("layoutlm"),FLo=o(" \u2014 "),WD=a("a"),TLo=o("LayoutLMForMaskedLM"),MLo=o(" (LayoutLM model)"),ELo=l(),s2=a("li"),Wme=a("strong"),CLo=o("longformer"),wLo=o(" \u2014 "),HD=a("a"),ALo=o("LongformerForMaskedLM"),LLo=o(" (Longformer model)"),yLo=l(),l2=a("li"),Hme=a("strong"),xLo=o("lxmert"),$Lo=o(" \u2014 "),UD=a("a"),kLo=o("LxmertForPreTraining"),SLo=o(" (LXMERT model)"),RLo=l(),i2=a("li"),Ume=a("strong"),PLo=o("megatron-bert"),BLo=o(" \u2014 "),JD=a("a"),ILo=o("MegatronBertForPreTraining"),NLo=o(" (Megatron-BERT model)"),qLo=l(),d2=a("li"),Jme=a("strong"),jLo=o("mobilebert"),DLo=o(" \u2014 "),YD=a("a"),GLo=o("MobileBertForPreTraining"),OLo=o(" (MobileBERT model)"),VLo=l(),c2=a("li"),Yme=a("strong"),XLo=o("mpnet"),zLo=o(" \u2014 "),KD=a("a"),QLo=o("MPNetForMaskedLM"),WLo=o(" (MPNet model)"),HLo=l(),m2=a("li"),Kme=a("strong"),ULo=o("nezha"),JLo=o(" \u2014 "),ZD=a("a"),YLo=o("NezhaForPreTraining"),KLo=o(" (Nezha model)"),ZLo=l(),f2=a("li"),Zme=a("strong"),e7o=o("openai-gpt"),o7o=o(" \u2014 "),eG=a("a"),r7o=o("OpenAIGPTLMHeadModel"),t7o=o(" (OpenAI GPT model)"),a7o=l(),g2=a("li"),efe=a("strong"),n7o=o("retribert"),s7o=o(" \u2014 "),oG=a("a"),l7o=o("RetriBertModel"),i7o=o(" (RetriBERT model)"),d7o=l(),h2=a("li"),ofe=a("strong"),c7o=o("roberta"),m7o=o(" \u2014 "),rG=a("a"),f7o=o("RobertaForMaskedLM"),g7o=o(" (RoBERTa model)"),h7o=l(),u2=a("li"),rfe=a("strong"),u7o=o("splinter"),p7o=o(" \u2014 "),tG=a("a"),_7o=o("SplinterForPreTraining"),b7o=o(" (Splinter model)"),v7o=l(),p2=a("li"),tfe=a("strong"),F7o=o("squeezebert"),T7o=o(" \u2014 "),aG=a("a"),M7o=o("SqueezeBertForMaskedLM"),E7o=o(" (SqueezeBERT model)"),C7o=l(),_2=a("li"),afe=a("strong"),w7o=o("t5"),A7o=o(" \u2014 "),nG=a("a"),L7o=o("T5ForConditionalGeneration"),y7o=o(" (T5 model)"),x7o=l(),b2=a("li"),nfe=a("strong"),$7o=o("tapas"),k7o=o(" \u2014 "),sG=a("a"),S7o=o("TapasForMaskedLM"),R7o=o(" (TAPAS model)"),P7o=l(),v2=a("li"),sfe=a("strong"),B7o=o("transfo-xl"),I7o=o(" \u2014 "),lG=a("a"),N7o=o("TransfoXLLMHeadModel"),q7o=o(" (Transformer-XL model)"),j7o=l(),F2=a("li"),lfe=a("strong"),D7o=o("unispeech"),G7o=o(" \u2014 "),iG=a("a"),O7o=o("UniSpeechForPreTraining"),V7o=o(" (UniSpeech model)"),X7o=l(),T2=a("li"),ife=a("strong"),z7o=o("unispeech-sat"),Q7o=o(" \u2014 "),dG=a("a"),W7o=o("UniSpeechSatForPreTraining"),H7o=o(" (UniSpeechSat model)"),U7o=l(),M2=a("li"),dfe=a("strong"),J7o=o("visual_bert"),Y7o=o(" \u2014 "),cG=a("a"),K7o=o("VisualBertForPreTraining"),Z7o=o(" (VisualBERT model)"),eyo=l(),E2=a("li"),cfe=a("strong"),oyo=o("vit_mae"),ryo=o(" \u2014 "),mG=a("a"),tyo=o("ViTMAEForPreTraining"),ayo=o(" (ViTMAE model)"),nyo=l(),C2=a("li"),mfe=a("strong"),syo=o("wav2vec2"),lyo=o(" \u2014 "),fG=a("a"),iyo=o("Wav2Vec2ForPreTraining"),dyo=o(" (Wav2Vec2 model)"),cyo=l(),w2=a("li"),ffe=a("strong"),myo=o("wav2vec2-conformer"),fyo=o(" \u2014 "),gG=a("a"),gyo=o("Wav2Vec2ConformerForPreTraining"),hyo=o(" (Wav2Vec2-Conformer model)"),uyo=l(),A2=a("li"),gfe=a("strong"),pyo=o("xlm"),_yo=o(" \u2014 "),hG=a("a"),byo=o("XLMWithLMHeadModel"),vyo=o(" (XLM model)"),Fyo=l(),L2=a("li"),hfe=a("strong"),Tyo=o("xlm-roberta"),Myo=o(" \u2014 "),uG=a("a"),Eyo=o("XLMRobertaForMaskedLM"),Cyo=o(" (XLM-RoBERTa model)"),wyo=l(),y2=a("li"),ufe=a("strong"),Ayo=o("xlm-roberta-xl"),Lyo=o(" \u2014 "),pG=a("a"),yyo=o("XLMRobertaXLForMaskedLM"),xyo=o(" (XLM-RoBERTa-XL model)"),$yo=l(),x2=a("li"),pfe=a("strong"),kyo=o("xlnet"),Syo=o(" \u2014 "),_G=a("a"),Ryo=o("XLNetLMHeadModel"),Pyo=o(" (XLNet model)"),Byo=l(),$2=a("p"),Iyo=o("The model is set in evaluation mode by default using "),_fe=a("code"),Nyo=o("model.eval()"),qyo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bfe=a("code"),jyo=o("model.train()"),Dyo=l(),F(k2.$$.fragment),DOe=l(),Vi=a("h2"),S2=a("a"),vfe=a("span"),F(Fy.$$.fragment),Gyo=l(),Ffe=a("span"),Oyo=o("AutoModelForCausalLM"),GOe=l(),ko=a("div"),F(Ty.$$.fragment),Vyo=l(),Xi=a("p"),Xyo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),bG=a("a"),zyo=o("from_pretrained()"),Qyo=o(" class method or the "),vG=a("a"),Wyo=o("from_config()"),Hyo=o(` class
method.`),Uyo=l(),My=a("p"),Jyo=o("This class cannot be instantiated directly using "),Tfe=a("code"),Yyo=o("__init__()"),Kyo=o(" (throws an error)."),Zyo=l(),lt=a("div"),F(Ey.$$.fragment),e8o=l(),Mfe=a("p"),o8o=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),r8o=l(),zi=a("p"),t8o=o(`Note:
Loading a model from its configuration file does `),Efe=a("strong"),a8o=o("not"),n8o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FG=a("a"),s8o=o("from_pretrained()"),l8o=o(" to load the model weights."),i8o=l(),F(R2.$$.fragment),d8o=l(),Ke=a("div"),F(Cy.$$.fragment),c8o=l(),Cfe=a("p"),m8o=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),f8o=l(),Ba=a("p"),g8o=o("The model class to instantiate is selected based on the "),wfe=a("code"),h8o=o("model_type"),u8o=o(` property of the config object (either
passed as an argument or loaded from `),Afe=a("code"),p8o=o("pretrained_model_name_or_path"),_8o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lfe=a("code"),b8o=o("pretrained_model_name_or_path"),v8o=o(":"),F8o=l(),z=a("ul"),P2=a("li"),yfe=a("strong"),T8o=o("bart"),M8o=o(" \u2014 "),TG=a("a"),E8o=o("BartForCausalLM"),C8o=o(" (BART model)"),w8o=l(),B2=a("li"),xfe=a("strong"),A8o=o("bert"),L8o=o(" \u2014 "),MG=a("a"),y8o=o("BertLMHeadModel"),x8o=o(" (BERT model)"),$8o=l(),I2=a("li"),$fe=a("strong"),k8o=o("bert-generation"),S8o=o(" \u2014 "),EG=a("a"),R8o=o("BertGenerationDecoder"),P8o=o(" (Bert Generation model)"),B8o=l(),N2=a("li"),kfe=a("strong"),I8o=o("big_bird"),N8o=o(" \u2014 "),CG=a("a"),q8o=o("BigBirdForCausalLM"),j8o=o(" (BigBird model)"),D8o=l(),q2=a("li"),Sfe=a("strong"),G8o=o("bigbird_pegasus"),O8o=o(" \u2014 "),wG=a("a"),V8o=o("BigBirdPegasusForCausalLM"),X8o=o(" (BigBird-Pegasus model)"),z8o=l(),j2=a("li"),Rfe=a("strong"),Q8o=o("blenderbot"),W8o=o(" \u2014 "),AG=a("a"),H8o=o("BlenderbotForCausalLM"),U8o=o(" (Blenderbot model)"),J8o=l(),D2=a("li"),Pfe=a("strong"),Y8o=o("blenderbot-small"),K8o=o(" \u2014 "),LG=a("a"),Z8o=o("BlenderbotSmallForCausalLM"),e9o=o(" (BlenderbotSmall model)"),o9o=l(),G2=a("li"),Bfe=a("strong"),r9o=o("bloom"),t9o=o(" \u2014 "),yG=a("a"),a9o=o("BloomForCausalLM"),n9o=o(" (BLOOM model)"),s9o=l(),O2=a("li"),Ife=a("strong"),l9o=o("camembert"),i9o=o(" \u2014 "),xG=a("a"),d9o=o("CamembertForCausalLM"),c9o=o(" (CamemBERT model)"),m9o=l(),V2=a("li"),Nfe=a("strong"),f9o=o("codegen"),g9o=o(" \u2014 "),$G=a("a"),h9o=o("CodeGenForCausalLM"),u9o=o(" (CodeGen model)"),p9o=l(),X2=a("li"),qfe=a("strong"),_9o=o("ctrl"),b9o=o(" \u2014 "),kG=a("a"),v9o=o("CTRLLMHeadModel"),F9o=o(" (CTRL model)"),T9o=l(),z2=a("li"),jfe=a("strong"),M9o=o("data2vec-text"),E9o=o(" \u2014 "),SG=a("a"),C9o=o("Data2VecTextForCausalLM"),w9o=o(" (Data2VecText model)"),A9o=l(),Q2=a("li"),Dfe=a("strong"),L9o=o("electra"),y9o=o(" \u2014 "),RG=a("a"),x9o=o("ElectraForCausalLM"),$9o=o(" (ELECTRA model)"),k9o=l(),W2=a("li"),Gfe=a("strong"),S9o=o("gpt2"),R9o=o(" \u2014 "),PG=a("a"),P9o=o("GPT2LMHeadModel"),B9o=o(" (OpenAI GPT-2 model)"),I9o=l(),H2=a("li"),Ofe=a("strong"),N9o=o("gpt_neo"),q9o=o(" \u2014 "),BG=a("a"),j9o=o("GPTNeoForCausalLM"),D9o=o(" (GPT Neo model)"),G9o=l(),U2=a("li"),Vfe=a("strong"),O9o=o("gpt_neox"),V9o=o(" \u2014 "),IG=a("a"),X9o=o("GPTNeoXForCausalLM"),z9o=o(" (GPT NeoX model)"),Q9o=l(),J2=a("li"),Xfe=a("strong"),W9o=o("gptj"),H9o=o(" \u2014 "),NG=a("a"),U9o=o("GPTJForCausalLM"),J9o=o(" (GPT-J model)"),Y9o=l(),Y2=a("li"),zfe=a("strong"),K9o=o("marian"),Z9o=o(" \u2014 "),qG=a("a"),exo=o("MarianForCausalLM"),oxo=o(" (Marian model)"),rxo=l(),K2=a("li"),Qfe=a("strong"),txo=o("mbart"),axo=o(" \u2014 "),jG=a("a"),nxo=o("MBartForCausalLM"),sxo=o(" (mBART model)"),lxo=l(),Z2=a("li"),Wfe=a("strong"),ixo=o("megatron-bert"),dxo=o(" \u2014 "),DG=a("a"),cxo=o("MegatronBertForCausalLM"),mxo=o(" (Megatron-BERT model)"),fxo=l(),eb=a("li"),Hfe=a("strong"),gxo=o("openai-gpt"),hxo=o(" \u2014 "),GG=a("a"),uxo=o("OpenAIGPTLMHeadModel"),pxo=o(" (OpenAI GPT model)"),_xo=l(),ob=a("li"),Ufe=a("strong"),bxo=o("opt"),vxo=o(" \u2014 "),OG=a("a"),Fxo=o("OPTForCausalLM"),Txo=o(" (OPT model)"),Mxo=l(),rb=a("li"),Jfe=a("strong"),Exo=o("pegasus"),Cxo=o(" \u2014 "),VG=a("a"),wxo=o("PegasusForCausalLM"),Axo=o(" (Pegasus model)"),Lxo=l(),tb=a("li"),Yfe=a("strong"),yxo=o("plbart"),xxo=o(" \u2014 "),XG=a("a"),$xo=o("PLBartForCausalLM"),kxo=o(" (PLBart model)"),Sxo=l(),ab=a("li"),Kfe=a("strong"),Rxo=o("prophetnet"),Pxo=o(" \u2014 "),zG=a("a"),Bxo=o("ProphetNetForCausalLM"),Ixo=o(" (ProphetNet model)"),Nxo=l(),nb=a("li"),Zfe=a("strong"),qxo=o("qdqbert"),jxo=o(" \u2014 "),QG=a("a"),Dxo=o("QDQBertLMHeadModel"),Gxo=o(" (QDQBert model)"),Oxo=l(),sb=a("li"),ege=a("strong"),Vxo=o("reformer"),Xxo=o(" \u2014 "),WG=a("a"),zxo=o("ReformerModelWithLMHead"),Qxo=o(" (Reformer model)"),Wxo=l(),lb=a("li"),oge=a("strong"),Hxo=o("rembert"),Uxo=o(" \u2014 "),HG=a("a"),Jxo=o("RemBertForCausalLM"),Yxo=o(" (RemBERT model)"),Kxo=l(),ib=a("li"),rge=a("strong"),Zxo=o("roberta"),e$o=o(" \u2014 "),UG=a("a"),o$o=o("RobertaForCausalLM"),r$o=o(" (RoBERTa model)"),t$o=l(),db=a("li"),tge=a("strong"),a$o=o("roformer"),n$o=o(" \u2014 "),JG=a("a"),s$o=o("RoFormerForCausalLM"),l$o=o(" (RoFormer model)"),i$o=l(),cb=a("li"),age=a("strong"),d$o=o("speech_to_text_2"),c$o=o(" \u2014 "),YG=a("a"),m$o=o("Speech2Text2ForCausalLM"),f$o=o(" (Speech2Text2 model)"),g$o=l(),mb=a("li"),nge=a("strong"),h$o=o("transfo-xl"),u$o=o(" \u2014 "),KG=a("a"),p$o=o("TransfoXLLMHeadModel"),_$o=o(" (Transformer-XL model)"),b$o=l(),fb=a("li"),sge=a("strong"),v$o=o("trocr"),F$o=o(" \u2014 "),ZG=a("a"),T$o=o("TrOCRForCausalLM"),M$o=o(" (TrOCR model)"),E$o=l(),gb=a("li"),lge=a("strong"),C$o=o("xglm"),w$o=o(" \u2014 "),eO=a("a"),A$o=o("XGLMForCausalLM"),L$o=o(" (XGLM model)"),y$o=l(),hb=a("li"),ige=a("strong"),x$o=o("xlm"),$$o=o(" \u2014 "),oO=a("a"),k$o=o("XLMWithLMHeadModel"),S$o=o(" (XLM model)"),R$o=l(),ub=a("li"),dge=a("strong"),P$o=o("xlm-prophetnet"),B$o=o(" \u2014 "),rO=a("a"),I$o=o("XLMProphetNetForCausalLM"),N$o=o(" (XLM-ProphetNet model)"),q$o=l(),pb=a("li"),cge=a("strong"),j$o=o("xlm-roberta"),D$o=o(" \u2014 "),tO=a("a"),G$o=o("XLMRobertaForCausalLM"),O$o=o(" (XLM-RoBERTa model)"),V$o=l(),_b=a("li"),mge=a("strong"),X$o=o("xlm-roberta-xl"),z$o=o(" \u2014 "),aO=a("a"),Q$o=o("XLMRobertaXLForCausalLM"),W$o=o(" (XLM-RoBERTa-XL model)"),H$o=l(),bb=a("li"),fge=a("strong"),U$o=o("xlnet"),J$o=o(" \u2014 "),nO=a("a"),Y$o=o("XLNetLMHeadModel"),K$o=o(" (XLNet model)"),Z$o=l(),vb=a("p"),eko=o("The model is set in evaluation mode by default using "),gge=a("code"),oko=o("model.eval()"),rko=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hge=a("code"),tko=o("model.train()"),ako=l(),F(Fb.$$.fragment),OOe=l(),Qi=a("h2"),Tb=a("a"),uge=a("span"),F(wy.$$.fragment),nko=l(),pge=a("span"),sko=o("AutoModelForMaskedLM"),VOe=l(),So=a("div"),F(Ay.$$.fragment),lko=l(),Wi=a("p"),iko=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),sO=a("a"),dko=o("from_pretrained()"),cko=o(" class method or the "),lO=a("a"),mko=o("from_config()"),fko=o(` class
method.`),gko=l(),Ly=a("p"),hko=o("This class cannot be instantiated directly using "),_ge=a("code"),uko=o("__init__()"),pko=o(" (throws an error)."),_ko=l(),it=a("div"),F(yy.$$.fragment),bko=l(),bge=a("p"),vko=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Fko=l(),Hi=a("p"),Tko=o(`Note:
Loading a model from its configuration file does `),vge=a("strong"),Mko=o("not"),Eko=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iO=a("a"),Cko=o("from_pretrained()"),wko=o(" to load the model weights."),Ako=l(),F(Mb.$$.fragment),Lko=l(),Ze=a("div"),F(xy.$$.fragment),yko=l(),Fge=a("p"),xko=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),$ko=l(),Ia=a("p"),kko=o("The model class to instantiate is selected based on the "),Tge=a("code"),Sko=o("model_type"),Rko=o(` property of the config object (either
passed as an argument or loaded from `),Mge=a("code"),Pko=o("pretrained_model_name_or_path"),Bko=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ege=a("code"),Iko=o("pretrained_model_name_or_path"),Nko=o(":"),qko=l(),W=a("ul"),Eb=a("li"),Cge=a("strong"),jko=o("albert"),Dko=o(" \u2014 "),dO=a("a"),Gko=o("AlbertForMaskedLM"),Oko=o(" (ALBERT model)"),Vko=l(),Cb=a("li"),wge=a("strong"),Xko=o("bart"),zko=o(" \u2014 "),cO=a("a"),Qko=o("BartForConditionalGeneration"),Wko=o(" (BART model)"),Hko=l(),wb=a("li"),Age=a("strong"),Uko=o("bert"),Jko=o(" \u2014 "),mO=a("a"),Yko=o("BertForMaskedLM"),Kko=o(" (BERT model)"),Zko=l(),Ab=a("li"),Lge=a("strong"),eSo=o("big_bird"),oSo=o(" \u2014 "),fO=a("a"),rSo=o("BigBirdForMaskedLM"),tSo=o(" (BigBird model)"),aSo=l(),Lb=a("li"),yge=a("strong"),nSo=o("camembert"),sSo=o(" \u2014 "),gO=a("a"),lSo=o("CamembertForMaskedLM"),iSo=o(" (CamemBERT model)"),dSo=l(),yb=a("li"),xge=a("strong"),cSo=o("convbert"),mSo=o(" \u2014 "),hO=a("a"),fSo=o("ConvBertForMaskedLM"),gSo=o(" (ConvBERT model)"),hSo=l(),xb=a("li"),$ge=a("strong"),uSo=o("data2vec-text"),pSo=o(" \u2014 "),uO=a("a"),_So=o("Data2VecTextForMaskedLM"),bSo=o(" (Data2VecText model)"),vSo=l(),$b=a("li"),kge=a("strong"),FSo=o("deberta"),TSo=o(" \u2014 "),pO=a("a"),MSo=o("DebertaForMaskedLM"),ESo=o(" (DeBERTa model)"),CSo=l(),kb=a("li"),Sge=a("strong"),wSo=o("deberta-v2"),ASo=o(" \u2014 "),_O=a("a"),LSo=o("DebertaV2ForMaskedLM"),ySo=o(" (DeBERTa-v2 model)"),xSo=l(),Sb=a("li"),Rge=a("strong"),$So=o("distilbert"),kSo=o(" \u2014 "),bO=a("a"),SSo=o("DistilBertForMaskedLM"),RSo=o(" (DistilBERT model)"),PSo=l(),Rb=a("li"),Pge=a("strong"),BSo=o("electra"),ISo=o(" \u2014 "),vO=a("a"),NSo=o("ElectraForMaskedLM"),qSo=o(" (ELECTRA model)"),jSo=l(),Pb=a("li"),Bge=a("strong"),DSo=o("flaubert"),GSo=o(" \u2014 "),FO=a("a"),OSo=o("FlaubertWithLMHeadModel"),VSo=o(" (FlauBERT model)"),XSo=l(),Bb=a("li"),Ige=a("strong"),zSo=o("fnet"),QSo=o(" \u2014 "),TO=a("a"),WSo=o("FNetForMaskedLM"),HSo=o(" (FNet model)"),USo=l(),Ib=a("li"),Nge=a("strong"),JSo=o("funnel"),YSo=o(" \u2014 "),MO=a("a"),KSo=o("FunnelForMaskedLM"),ZSo=o(" (Funnel Transformer model)"),eRo=l(),Nb=a("li"),qge=a("strong"),oRo=o("ibert"),rRo=o(" \u2014 "),EO=a("a"),tRo=o("IBertForMaskedLM"),aRo=o(" (I-BERT model)"),nRo=l(),qb=a("li"),jge=a("strong"),sRo=o("layoutlm"),lRo=o(" \u2014 "),CO=a("a"),iRo=o("LayoutLMForMaskedLM"),dRo=o(" (LayoutLM model)"),cRo=l(),jb=a("li"),Dge=a("strong"),mRo=o("longformer"),fRo=o(" \u2014 "),wO=a("a"),gRo=o("LongformerForMaskedLM"),hRo=o(" (Longformer model)"),uRo=l(),Db=a("li"),Gge=a("strong"),pRo=o("luke"),_Ro=o(" \u2014 "),AO=a("a"),bRo=o("LukeForMaskedLM"),vRo=o(" (LUKE model)"),FRo=l(),Gb=a("li"),Oge=a("strong"),TRo=o("mbart"),MRo=o(" \u2014 "),LO=a("a"),ERo=o("MBartForConditionalGeneration"),CRo=o(" (mBART model)"),wRo=l(),Ob=a("li"),Vge=a("strong"),ARo=o("megatron-bert"),LRo=o(" \u2014 "),yO=a("a"),yRo=o("MegatronBertForMaskedLM"),xRo=o(" (Megatron-BERT model)"),$Ro=l(),Vb=a("li"),Xge=a("strong"),kRo=o("mobilebert"),SRo=o(" \u2014 "),xO=a("a"),RRo=o("MobileBertForMaskedLM"),PRo=o(" (MobileBERT model)"),BRo=l(),Xb=a("li"),zge=a("strong"),IRo=o("mpnet"),NRo=o(" \u2014 "),$O=a("a"),qRo=o("MPNetForMaskedLM"),jRo=o(" (MPNet model)"),DRo=l(),zb=a("li"),Qge=a("strong"),GRo=o("nezha"),ORo=o(" \u2014 "),kO=a("a"),VRo=o("NezhaForMaskedLM"),XRo=o(" (Nezha model)"),zRo=l(),Qb=a("li"),Wge=a("strong"),QRo=o("nystromformer"),WRo=o(" \u2014 "),SO=a("a"),HRo=o("NystromformerForMaskedLM"),URo=o(" (Nystr\xF6mformer model)"),JRo=l(),Wb=a("li"),Hge=a("strong"),YRo=o("perceiver"),KRo=o(" \u2014 "),RO=a("a"),ZRo=o("PerceiverForMaskedLM"),ePo=o(" (Perceiver model)"),oPo=l(),Hb=a("li"),Uge=a("strong"),rPo=o("qdqbert"),tPo=o(" \u2014 "),PO=a("a"),aPo=o("QDQBertForMaskedLM"),nPo=o(" (QDQBert model)"),sPo=l(),Ub=a("li"),Jge=a("strong"),lPo=o("reformer"),iPo=o(" \u2014 "),BO=a("a"),dPo=o("ReformerForMaskedLM"),cPo=o(" (Reformer model)"),mPo=l(),Jb=a("li"),Yge=a("strong"),fPo=o("rembert"),gPo=o(" \u2014 "),IO=a("a"),hPo=o("RemBertForMaskedLM"),uPo=o(" (RemBERT model)"),pPo=l(),Yb=a("li"),Kge=a("strong"),_Po=o("roberta"),bPo=o(" \u2014 "),NO=a("a"),vPo=o("RobertaForMaskedLM"),FPo=o(" (RoBERTa model)"),TPo=l(),Kb=a("li"),Zge=a("strong"),MPo=o("roformer"),EPo=o(" \u2014 "),qO=a("a"),CPo=o("RoFormerForMaskedLM"),wPo=o(" (RoFormer model)"),APo=l(),Zb=a("li"),ehe=a("strong"),LPo=o("squeezebert"),yPo=o(" \u2014 "),jO=a("a"),xPo=o("SqueezeBertForMaskedLM"),$Po=o(" (SqueezeBERT model)"),kPo=l(),ev=a("li"),ohe=a("strong"),SPo=o("tapas"),RPo=o(" \u2014 "),DO=a("a"),PPo=o("TapasForMaskedLM"),BPo=o(" (TAPAS model)"),IPo=l(),ov=a("li"),rhe=a("strong"),NPo=o("wav2vec2"),qPo=o(" \u2014 "),the=a("code"),jPo=o("Wav2Vec2ForMaskedLM"),DPo=o(" (Wav2Vec2 model)"),GPo=l(),rv=a("li"),ahe=a("strong"),OPo=o("xlm"),VPo=o(" \u2014 "),GO=a("a"),XPo=o("XLMWithLMHeadModel"),zPo=o(" (XLM model)"),QPo=l(),tv=a("li"),nhe=a("strong"),WPo=o("xlm-roberta"),HPo=o(" \u2014 "),OO=a("a"),UPo=o("XLMRobertaForMaskedLM"),JPo=o(" (XLM-RoBERTa model)"),YPo=l(),av=a("li"),she=a("strong"),KPo=o("xlm-roberta-xl"),ZPo=o(" \u2014 "),VO=a("a"),eBo=o("XLMRobertaXLForMaskedLM"),oBo=o(" (XLM-RoBERTa-XL model)"),rBo=l(),nv=a("li"),lhe=a("strong"),tBo=o("yoso"),aBo=o(" \u2014 "),XO=a("a"),nBo=o("YosoForMaskedLM"),sBo=o(" (YOSO model)"),lBo=l(),sv=a("p"),iBo=o("The model is set in evaluation mode by default using "),ihe=a("code"),dBo=o("model.eval()"),cBo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dhe=a("code"),mBo=o("model.train()"),fBo=l(),F(lv.$$.fragment),XOe=l(),Ui=a("h2"),iv=a("a"),che=a("span"),F($y.$$.fragment),gBo=l(),mhe=a("span"),hBo=o("AutoModelForSeq2SeqLM"),zOe=l(),Ro=a("div"),F(ky.$$.fragment),uBo=l(),Ji=a("p"),pBo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),zO=a("a"),_Bo=o("from_pretrained()"),bBo=o(" class method or the "),QO=a("a"),vBo=o("from_config()"),FBo=o(` class
method.`),TBo=l(),Sy=a("p"),MBo=o("This class cannot be instantiated directly using "),fhe=a("code"),EBo=o("__init__()"),CBo=o(" (throws an error)."),wBo=l(),dt=a("div"),F(Ry.$$.fragment),ABo=l(),ghe=a("p"),LBo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),yBo=l(),Yi=a("p"),xBo=o(`Note:
Loading a model from its configuration file does `),hhe=a("strong"),$Bo=o("not"),kBo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WO=a("a"),SBo=o("from_pretrained()"),RBo=o(" to load the model weights."),PBo=l(),F(dv.$$.fragment),BBo=l(),eo=a("div"),F(Py.$$.fragment),IBo=l(),uhe=a("p"),NBo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),qBo=l(),Na=a("p"),jBo=o("The model class to instantiate is selected based on the "),phe=a("code"),DBo=o("model_type"),GBo=o(` property of the config object (either
passed as an argument or loaded from `),_he=a("code"),OBo=o("pretrained_model_name_or_path"),VBo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bhe=a("code"),XBo=o("pretrained_model_name_or_path"),zBo=o(":"),QBo=l(),ue=a("ul"),cv=a("li"),vhe=a("strong"),WBo=o("bart"),HBo=o(" \u2014 "),HO=a("a"),UBo=o("BartForConditionalGeneration"),JBo=o(" (BART model)"),YBo=l(),mv=a("li"),Fhe=a("strong"),KBo=o("bigbird_pegasus"),ZBo=o(" \u2014 "),UO=a("a"),eIo=o("BigBirdPegasusForConditionalGeneration"),oIo=o(" (BigBird-Pegasus model)"),rIo=l(),fv=a("li"),The=a("strong"),tIo=o("blenderbot"),aIo=o(" \u2014 "),JO=a("a"),nIo=o("BlenderbotForConditionalGeneration"),sIo=o(" (Blenderbot model)"),lIo=l(),gv=a("li"),Mhe=a("strong"),iIo=o("blenderbot-small"),dIo=o(" \u2014 "),YO=a("a"),cIo=o("BlenderbotSmallForConditionalGeneration"),mIo=o(" (BlenderbotSmall model)"),fIo=l(),hv=a("li"),Ehe=a("strong"),gIo=o("encoder-decoder"),hIo=o(" \u2014 "),KO=a("a"),uIo=o("EncoderDecoderModel"),pIo=o(" (Encoder decoder model)"),_Io=l(),uv=a("li"),Che=a("strong"),bIo=o("fsmt"),vIo=o(" \u2014 "),ZO=a("a"),FIo=o("FSMTForConditionalGeneration"),TIo=o(" (FairSeq Machine-Translation model)"),MIo=l(),pv=a("li"),whe=a("strong"),EIo=o("led"),CIo=o(" \u2014 "),eV=a("a"),wIo=o("LEDForConditionalGeneration"),AIo=o(" (LED model)"),LIo=l(),_v=a("li"),Ahe=a("strong"),yIo=o("longt5"),xIo=o(" \u2014 "),oV=a("a"),$Io=o("LongT5ForConditionalGeneration"),kIo=o(" (LongT5 model)"),SIo=l(),bv=a("li"),Lhe=a("strong"),RIo=o("m2m_100"),PIo=o(" \u2014 "),rV=a("a"),BIo=o("M2M100ForConditionalGeneration"),IIo=o(" (M2M100 model)"),NIo=l(),vv=a("li"),yhe=a("strong"),qIo=o("marian"),jIo=o(" \u2014 "),tV=a("a"),DIo=o("MarianMTModel"),GIo=o(" (Marian model)"),OIo=l(),Fv=a("li"),xhe=a("strong"),VIo=o("mbart"),XIo=o(" \u2014 "),aV=a("a"),zIo=o("MBartForConditionalGeneration"),QIo=o(" (mBART model)"),WIo=l(),Tv=a("li"),$he=a("strong"),HIo=o("mt5"),UIo=o(" \u2014 "),nV=a("a"),JIo=o("MT5ForConditionalGeneration"),YIo=o(" (MT5 model)"),KIo=l(),Mv=a("li"),khe=a("strong"),ZIo=o("pegasus"),eNo=o(" \u2014 "),sV=a("a"),oNo=o("PegasusForConditionalGeneration"),rNo=o(" (Pegasus model)"),tNo=l(),Ev=a("li"),She=a("strong"),aNo=o("plbart"),nNo=o(" \u2014 "),lV=a("a"),sNo=o("PLBartForConditionalGeneration"),lNo=o(" (PLBart model)"),iNo=l(),Cv=a("li"),Rhe=a("strong"),dNo=o("prophetnet"),cNo=o(" \u2014 "),iV=a("a"),mNo=o("ProphetNetForConditionalGeneration"),fNo=o(" (ProphetNet model)"),gNo=l(),wv=a("li"),Phe=a("strong"),hNo=o("t5"),uNo=o(" \u2014 "),dV=a("a"),pNo=o("T5ForConditionalGeneration"),_No=o(" (T5 model)"),bNo=l(),Av=a("li"),Bhe=a("strong"),vNo=o("xlm-prophetnet"),FNo=o(" \u2014 "),cV=a("a"),TNo=o("XLMProphetNetForConditionalGeneration"),MNo=o(" (XLM-ProphetNet model)"),ENo=l(),Lv=a("p"),CNo=o("The model is set in evaluation mode by default using "),Ihe=a("code"),wNo=o("model.eval()"),ANo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nhe=a("code"),LNo=o("model.train()"),yNo=l(),F(yv.$$.fragment),QOe=l(),Ki=a("h2"),xv=a("a"),qhe=a("span"),F(By.$$.fragment),xNo=l(),jhe=a("span"),$No=o("AutoModelForSequenceClassification"),WOe=l(),Po=a("div"),F(Iy.$$.fragment),kNo=l(),Zi=a("p"),SNo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),mV=a("a"),RNo=o("from_pretrained()"),PNo=o(" class method or the "),fV=a("a"),BNo=o("from_config()"),INo=o(` class
method.`),NNo=l(),Ny=a("p"),qNo=o("This class cannot be instantiated directly using "),Dhe=a("code"),jNo=o("__init__()"),DNo=o(" (throws an error)."),GNo=l(),ct=a("div"),F(qy.$$.fragment),ONo=l(),Ghe=a("p"),VNo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),XNo=l(),ed=a("p"),zNo=o(`Note:
Loading a model from its configuration file does `),Ohe=a("strong"),QNo=o("not"),WNo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gV=a("a"),HNo=o("from_pretrained()"),UNo=o(" to load the model weights."),JNo=l(),F($v.$$.fragment),YNo=l(),oo=a("div"),F(jy.$$.fragment),KNo=l(),Vhe=a("p"),ZNo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),eqo=l(),qa=a("p"),oqo=o("The model class to instantiate is selected based on the "),Xhe=a("code"),rqo=o("model_type"),tqo=o(` property of the config object (either
passed as an argument or loaded from `),zhe=a("code"),aqo=o("pretrained_model_name_or_path"),nqo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qhe=a("code"),sqo=o("pretrained_model_name_or_path"),lqo=o(":"),iqo=l(),N=a("ul"),kv=a("li"),Whe=a("strong"),dqo=o("albert"),cqo=o(" \u2014 "),hV=a("a"),mqo=o("AlbertForSequenceClassification"),fqo=o(" (ALBERT model)"),gqo=l(),Sv=a("li"),Hhe=a("strong"),hqo=o("bart"),uqo=o(" \u2014 "),uV=a("a"),pqo=o("BartForSequenceClassification"),_qo=o(" (BART model)"),bqo=l(),Rv=a("li"),Uhe=a("strong"),vqo=o("bert"),Fqo=o(" \u2014 "),pV=a("a"),Tqo=o("BertForSequenceClassification"),Mqo=o(" (BERT model)"),Eqo=l(),Pv=a("li"),Jhe=a("strong"),Cqo=o("big_bird"),wqo=o(" \u2014 "),_V=a("a"),Aqo=o("BigBirdForSequenceClassification"),Lqo=o(" (BigBird model)"),yqo=l(),Bv=a("li"),Yhe=a("strong"),xqo=o("bigbird_pegasus"),$qo=o(" \u2014 "),bV=a("a"),kqo=o("BigBirdPegasusForSequenceClassification"),Sqo=o(" (BigBird-Pegasus model)"),Rqo=l(),Iv=a("li"),Khe=a("strong"),Pqo=o("bloom"),Bqo=o(" \u2014 "),vV=a("a"),Iqo=o("BloomForSequenceClassification"),Nqo=o(" (BLOOM model)"),qqo=l(),Nv=a("li"),Zhe=a("strong"),jqo=o("camembert"),Dqo=o(" \u2014 "),FV=a("a"),Gqo=o("CamembertForSequenceClassification"),Oqo=o(" (CamemBERT model)"),Vqo=l(),qv=a("li"),eue=a("strong"),Xqo=o("canine"),zqo=o(" \u2014 "),TV=a("a"),Qqo=o("CanineForSequenceClassification"),Wqo=o(" (CANINE model)"),Hqo=l(),jv=a("li"),oue=a("strong"),Uqo=o("convbert"),Jqo=o(" \u2014 "),MV=a("a"),Yqo=o("ConvBertForSequenceClassification"),Kqo=o(" (ConvBERT model)"),Zqo=l(),Dv=a("li"),rue=a("strong"),ejo=o("ctrl"),ojo=o(" \u2014 "),EV=a("a"),rjo=o("CTRLForSequenceClassification"),tjo=o(" (CTRL model)"),ajo=l(),Gv=a("li"),tue=a("strong"),njo=o("data2vec-text"),sjo=o(" \u2014 "),CV=a("a"),ljo=o("Data2VecTextForSequenceClassification"),ijo=o(" (Data2VecText model)"),djo=l(),Ov=a("li"),aue=a("strong"),cjo=o("deberta"),mjo=o(" \u2014 "),wV=a("a"),fjo=o("DebertaForSequenceClassification"),gjo=o(" (DeBERTa model)"),hjo=l(),Vv=a("li"),nue=a("strong"),ujo=o("deberta-v2"),pjo=o(" \u2014 "),AV=a("a"),_jo=o("DebertaV2ForSequenceClassification"),bjo=o(" (DeBERTa-v2 model)"),vjo=l(),Xv=a("li"),sue=a("strong"),Fjo=o("distilbert"),Tjo=o(" \u2014 "),LV=a("a"),Mjo=o("DistilBertForSequenceClassification"),Ejo=o(" (DistilBERT model)"),Cjo=l(),zv=a("li"),lue=a("strong"),wjo=o("electra"),Ajo=o(" \u2014 "),yV=a("a"),Ljo=o("ElectraForSequenceClassification"),yjo=o(" (ELECTRA model)"),xjo=l(),Qv=a("li"),iue=a("strong"),$jo=o("flaubert"),kjo=o(" \u2014 "),xV=a("a"),Sjo=o("FlaubertForSequenceClassification"),Rjo=o(" (FlauBERT model)"),Pjo=l(),Wv=a("li"),due=a("strong"),Bjo=o("fnet"),Ijo=o(" \u2014 "),$V=a("a"),Njo=o("FNetForSequenceClassification"),qjo=o(" (FNet model)"),jjo=l(),Hv=a("li"),cue=a("strong"),Djo=o("funnel"),Gjo=o(" \u2014 "),kV=a("a"),Ojo=o("FunnelForSequenceClassification"),Vjo=o(" (Funnel Transformer model)"),Xjo=l(),Uv=a("li"),mue=a("strong"),zjo=o("gpt2"),Qjo=o(" \u2014 "),SV=a("a"),Wjo=o("GPT2ForSequenceClassification"),Hjo=o(" (OpenAI GPT-2 model)"),Ujo=l(),Jv=a("li"),fue=a("strong"),Jjo=o("gpt_neo"),Yjo=o(" \u2014 "),RV=a("a"),Kjo=o("GPTNeoForSequenceClassification"),Zjo=o(" (GPT Neo model)"),eDo=l(),Yv=a("li"),gue=a("strong"),oDo=o("gptj"),rDo=o(" \u2014 "),PV=a("a"),tDo=o("GPTJForSequenceClassification"),aDo=o(" (GPT-J model)"),nDo=l(),Kv=a("li"),hue=a("strong"),sDo=o("ibert"),lDo=o(" \u2014 "),BV=a("a"),iDo=o("IBertForSequenceClassification"),dDo=o(" (I-BERT model)"),cDo=l(),Zv=a("li"),uue=a("strong"),mDo=o("layoutlm"),fDo=o(" \u2014 "),IV=a("a"),gDo=o("LayoutLMForSequenceClassification"),hDo=o(" (LayoutLM model)"),uDo=l(),e1=a("li"),pue=a("strong"),pDo=o("layoutlmv2"),_Do=o(" \u2014 "),NV=a("a"),bDo=o("LayoutLMv2ForSequenceClassification"),vDo=o(" (LayoutLMv2 model)"),FDo=l(),o1=a("li"),_ue=a("strong"),TDo=o("layoutlmv3"),MDo=o(" \u2014 "),qV=a("a"),EDo=o("LayoutLMv3ForSequenceClassification"),CDo=o(" (LayoutLMv3 model)"),wDo=l(),r1=a("li"),bue=a("strong"),ADo=o("led"),LDo=o(" \u2014 "),jV=a("a"),yDo=o("LEDForSequenceClassification"),xDo=o(" (LED model)"),$Do=l(),t1=a("li"),vue=a("strong"),kDo=o("longformer"),SDo=o(" \u2014 "),DV=a("a"),RDo=o("LongformerForSequenceClassification"),PDo=o(" (Longformer model)"),BDo=l(),a1=a("li"),Fue=a("strong"),IDo=o("mbart"),NDo=o(" \u2014 "),GV=a("a"),qDo=o("MBartForSequenceClassification"),jDo=o(" (mBART model)"),DDo=l(),n1=a("li"),Tue=a("strong"),GDo=o("megatron-bert"),ODo=o(" \u2014 "),OV=a("a"),VDo=o("MegatronBertForSequenceClassification"),XDo=o(" (Megatron-BERT model)"),zDo=l(),s1=a("li"),Mue=a("strong"),QDo=o("mobilebert"),WDo=o(" \u2014 "),VV=a("a"),HDo=o("MobileBertForSequenceClassification"),UDo=o(" (MobileBERT model)"),JDo=l(),l1=a("li"),Eue=a("strong"),YDo=o("mpnet"),KDo=o(" \u2014 "),XV=a("a"),ZDo=o("MPNetForSequenceClassification"),eGo=o(" (MPNet model)"),oGo=l(),i1=a("li"),Cue=a("strong"),rGo=o("nezha"),tGo=o(" \u2014 "),zV=a("a"),aGo=o("NezhaForSequenceClassification"),nGo=o(" (Nezha model)"),sGo=l(),d1=a("li"),wue=a("strong"),lGo=o("nystromformer"),iGo=o(" \u2014 "),QV=a("a"),dGo=o("NystromformerForSequenceClassification"),cGo=o(" (Nystr\xF6mformer model)"),mGo=l(),c1=a("li"),Aue=a("strong"),fGo=o("openai-gpt"),gGo=o(" \u2014 "),WV=a("a"),hGo=o("OpenAIGPTForSequenceClassification"),uGo=o(" (OpenAI GPT model)"),pGo=l(),m1=a("li"),Lue=a("strong"),_Go=o("perceiver"),bGo=o(" \u2014 "),HV=a("a"),vGo=o("PerceiverForSequenceClassification"),FGo=o(" (Perceiver model)"),TGo=l(),f1=a("li"),yue=a("strong"),MGo=o("plbart"),EGo=o(" \u2014 "),UV=a("a"),CGo=o("PLBartForSequenceClassification"),wGo=o(" (PLBart model)"),AGo=l(),g1=a("li"),xue=a("strong"),LGo=o("qdqbert"),yGo=o(" \u2014 "),JV=a("a"),xGo=o("QDQBertForSequenceClassification"),$Go=o(" (QDQBert model)"),kGo=l(),h1=a("li"),$ue=a("strong"),SGo=o("reformer"),RGo=o(" \u2014 "),YV=a("a"),PGo=o("ReformerForSequenceClassification"),BGo=o(" (Reformer model)"),IGo=l(),u1=a("li"),kue=a("strong"),NGo=o("rembert"),qGo=o(" \u2014 "),KV=a("a"),jGo=o("RemBertForSequenceClassification"),DGo=o(" (RemBERT model)"),GGo=l(),p1=a("li"),Sue=a("strong"),OGo=o("roberta"),VGo=o(" \u2014 "),ZV=a("a"),XGo=o("RobertaForSequenceClassification"),zGo=o(" (RoBERTa model)"),QGo=l(),_1=a("li"),Rue=a("strong"),WGo=o("roformer"),HGo=o(" \u2014 "),eX=a("a"),UGo=o("RoFormerForSequenceClassification"),JGo=o(" (RoFormer model)"),YGo=l(),b1=a("li"),Pue=a("strong"),KGo=o("squeezebert"),ZGo=o(" \u2014 "),oX=a("a"),eOo=o("SqueezeBertForSequenceClassification"),oOo=o(" (SqueezeBERT model)"),rOo=l(),v1=a("li"),Bue=a("strong"),tOo=o("tapas"),aOo=o(" \u2014 "),rX=a("a"),nOo=o("TapasForSequenceClassification"),sOo=o(" (TAPAS model)"),lOo=l(),F1=a("li"),Iue=a("strong"),iOo=o("transfo-xl"),dOo=o(" \u2014 "),tX=a("a"),cOo=o("TransfoXLForSequenceClassification"),mOo=o(" (Transformer-XL model)"),fOo=l(),T1=a("li"),Nue=a("strong"),gOo=o("xlm"),hOo=o(" \u2014 "),aX=a("a"),uOo=o("XLMForSequenceClassification"),pOo=o(" (XLM model)"),_Oo=l(),M1=a("li"),que=a("strong"),bOo=o("xlm-roberta"),vOo=o(" \u2014 "),nX=a("a"),FOo=o("XLMRobertaForSequenceClassification"),TOo=o(" (XLM-RoBERTa model)"),MOo=l(),E1=a("li"),jue=a("strong"),EOo=o("xlm-roberta-xl"),COo=o(" \u2014 "),sX=a("a"),wOo=o("XLMRobertaXLForSequenceClassification"),AOo=o(" (XLM-RoBERTa-XL model)"),LOo=l(),C1=a("li"),Due=a("strong"),yOo=o("xlnet"),xOo=o(" \u2014 "),lX=a("a"),$Oo=o("XLNetForSequenceClassification"),kOo=o(" (XLNet model)"),SOo=l(),w1=a("li"),Gue=a("strong"),ROo=o("yoso"),POo=o(" \u2014 "),iX=a("a"),BOo=o("YosoForSequenceClassification"),IOo=o(" (YOSO model)"),NOo=l(),A1=a("p"),qOo=o("The model is set in evaluation mode by default using "),Oue=a("code"),jOo=o("model.eval()"),DOo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vue=a("code"),GOo=o("model.train()"),OOo=l(),F(L1.$$.fragment),HOe=l(),od=a("h2"),y1=a("a"),Xue=a("span"),F(Dy.$$.fragment),VOo=l(),zue=a("span"),XOo=o("AutoModelForMultipleChoice"),UOe=l(),Bo=a("div"),F(Gy.$$.fragment),zOo=l(),rd=a("p"),QOo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),dX=a("a"),WOo=o("from_pretrained()"),HOo=o(" class method or the "),cX=a("a"),UOo=o("from_config()"),JOo=o(` class
method.`),YOo=l(),Oy=a("p"),KOo=o("This class cannot be instantiated directly using "),Que=a("code"),ZOo=o("__init__()"),eVo=o(" (throws an error)."),oVo=l(),mt=a("div"),F(Vy.$$.fragment),rVo=l(),Wue=a("p"),tVo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),aVo=l(),td=a("p"),nVo=o(`Note:
Loading a model from its configuration file does `),Hue=a("strong"),sVo=o("not"),lVo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mX=a("a"),iVo=o("from_pretrained()"),dVo=o(" to load the model weights."),cVo=l(),F(x1.$$.fragment),mVo=l(),ro=a("div"),F(Xy.$$.fragment),fVo=l(),Uue=a("p"),gVo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),hVo=l(),ja=a("p"),uVo=o("The model class to instantiate is selected based on the "),Jue=a("code"),pVo=o("model_type"),_Vo=o(` property of the config object (either
passed as an argument or loaded from `),Yue=a("code"),bVo=o("pretrained_model_name_or_path"),vVo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kue=a("code"),FVo=o("pretrained_model_name_or_path"),TVo=o(":"),MVo=l(),Z=a("ul"),$1=a("li"),Zue=a("strong"),EVo=o("albert"),CVo=o(" \u2014 "),fX=a("a"),wVo=o("AlbertForMultipleChoice"),AVo=o(" (ALBERT model)"),LVo=l(),k1=a("li"),epe=a("strong"),yVo=o("bert"),xVo=o(" \u2014 "),gX=a("a"),$Vo=o("BertForMultipleChoice"),kVo=o(" (BERT model)"),SVo=l(),S1=a("li"),ope=a("strong"),RVo=o("big_bird"),PVo=o(" \u2014 "),hX=a("a"),BVo=o("BigBirdForMultipleChoice"),IVo=o(" (BigBird model)"),NVo=l(),R1=a("li"),rpe=a("strong"),qVo=o("camembert"),jVo=o(" \u2014 "),uX=a("a"),DVo=o("CamembertForMultipleChoice"),GVo=o(" (CamemBERT model)"),OVo=l(),P1=a("li"),tpe=a("strong"),VVo=o("canine"),XVo=o(" \u2014 "),pX=a("a"),zVo=o("CanineForMultipleChoice"),QVo=o(" (CANINE model)"),WVo=l(),B1=a("li"),ape=a("strong"),HVo=o("convbert"),UVo=o(" \u2014 "),_X=a("a"),JVo=o("ConvBertForMultipleChoice"),YVo=o(" (ConvBERT model)"),KVo=l(),I1=a("li"),npe=a("strong"),ZVo=o("data2vec-text"),eXo=o(" \u2014 "),bX=a("a"),oXo=o("Data2VecTextForMultipleChoice"),rXo=o(" (Data2VecText model)"),tXo=l(),N1=a("li"),spe=a("strong"),aXo=o("deberta-v2"),nXo=o(" \u2014 "),vX=a("a"),sXo=o("DebertaV2ForMultipleChoice"),lXo=o(" (DeBERTa-v2 model)"),iXo=l(),q1=a("li"),lpe=a("strong"),dXo=o("distilbert"),cXo=o(" \u2014 "),FX=a("a"),mXo=o("DistilBertForMultipleChoice"),fXo=o(" (DistilBERT model)"),gXo=l(),j1=a("li"),ipe=a("strong"),hXo=o("electra"),uXo=o(" \u2014 "),TX=a("a"),pXo=o("ElectraForMultipleChoice"),_Xo=o(" (ELECTRA model)"),bXo=l(),D1=a("li"),dpe=a("strong"),vXo=o("flaubert"),FXo=o(" \u2014 "),MX=a("a"),TXo=o("FlaubertForMultipleChoice"),MXo=o(" (FlauBERT model)"),EXo=l(),G1=a("li"),cpe=a("strong"),CXo=o("fnet"),wXo=o(" \u2014 "),EX=a("a"),AXo=o("FNetForMultipleChoice"),LXo=o(" (FNet model)"),yXo=l(),O1=a("li"),mpe=a("strong"),xXo=o("funnel"),$Xo=o(" \u2014 "),CX=a("a"),kXo=o("FunnelForMultipleChoice"),SXo=o(" (Funnel Transformer model)"),RXo=l(),V1=a("li"),fpe=a("strong"),PXo=o("ibert"),BXo=o(" \u2014 "),wX=a("a"),IXo=o("IBertForMultipleChoice"),NXo=o(" (I-BERT model)"),qXo=l(),X1=a("li"),gpe=a("strong"),jXo=o("longformer"),DXo=o(" \u2014 "),AX=a("a"),GXo=o("LongformerForMultipleChoice"),OXo=o(" (Longformer model)"),VXo=l(),z1=a("li"),hpe=a("strong"),XXo=o("megatron-bert"),zXo=o(" \u2014 "),LX=a("a"),QXo=o("MegatronBertForMultipleChoice"),WXo=o(" (Megatron-BERT model)"),HXo=l(),Q1=a("li"),upe=a("strong"),UXo=o("mobilebert"),JXo=o(" \u2014 "),yX=a("a"),YXo=o("MobileBertForMultipleChoice"),KXo=o(" (MobileBERT model)"),ZXo=l(),W1=a("li"),ppe=a("strong"),ezo=o("mpnet"),ozo=o(" \u2014 "),xX=a("a"),rzo=o("MPNetForMultipleChoice"),tzo=o(" (MPNet model)"),azo=l(),H1=a("li"),_pe=a("strong"),nzo=o("nezha"),szo=o(" \u2014 "),$X=a("a"),lzo=o("NezhaForMultipleChoice"),izo=o(" (Nezha model)"),dzo=l(),U1=a("li"),bpe=a("strong"),czo=o("nystromformer"),mzo=o(" \u2014 "),kX=a("a"),fzo=o("NystromformerForMultipleChoice"),gzo=o(" (Nystr\xF6mformer model)"),hzo=l(),J1=a("li"),vpe=a("strong"),uzo=o("qdqbert"),pzo=o(" \u2014 "),SX=a("a"),_zo=o("QDQBertForMultipleChoice"),bzo=o(" (QDQBert model)"),vzo=l(),Y1=a("li"),Fpe=a("strong"),Fzo=o("rembert"),Tzo=o(" \u2014 "),RX=a("a"),Mzo=o("RemBertForMultipleChoice"),Ezo=o(" (RemBERT model)"),Czo=l(),K1=a("li"),Tpe=a("strong"),wzo=o("roberta"),Azo=o(" \u2014 "),PX=a("a"),Lzo=o("RobertaForMultipleChoice"),yzo=o(" (RoBERTa model)"),xzo=l(),Z1=a("li"),Mpe=a("strong"),$zo=o("roformer"),kzo=o(" \u2014 "),BX=a("a"),Szo=o("RoFormerForMultipleChoice"),Rzo=o(" (RoFormer model)"),Pzo=l(),eF=a("li"),Epe=a("strong"),Bzo=o("squeezebert"),Izo=o(" \u2014 "),IX=a("a"),Nzo=o("SqueezeBertForMultipleChoice"),qzo=o(" (SqueezeBERT model)"),jzo=l(),oF=a("li"),Cpe=a("strong"),Dzo=o("xlm"),Gzo=o(" \u2014 "),NX=a("a"),Ozo=o("XLMForMultipleChoice"),Vzo=o(" (XLM model)"),Xzo=l(),rF=a("li"),wpe=a("strong"),zzo=o("xlm-roberta"),Qzo=o(" \u2014 "),qX=a("a"),Wzo=o("XLMRobertaForMultipleChoice"),Hzo=o(" (XLM-RoBERTa model)"),Uzo=l(),tF=a("li"),Ape=a("strong"),Jzo=o("xlm-roberta-xl"),Yzo=o(" \u2014 "),jX=a("a"),Kzo=o("XLMRobertaXLForMultipleChoice"),Zzo=o(" (XLM-RoBERTa-XL model)"),eQo=l(),aF=a("li"),Lpe=a("strong"),oQo=o("xlnet"),rQo=o(" \u2014 "),DX=a("a"),tQo=o("XLNetForMultipleChoice"),aQo=o(" (XLNet model)"),nQo=l(),nF=a("li"),ype=a("strong"),sQo=o("yoso"),lQo=o(" \u2014 "),GX=a("a"),iQo=o("YosoForMultipleChoice"),dQo=o(" (YOSO model)"),cQo=l(),sF=a("p"),mQo=o("The model is set in evaluation mode by default using "),xpe=a("code"),fQo=o("model.eval()"),gQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$pe=a("code"),hQo=o("model.train()"),uQo=l(),F(lF.$$.fragment),JOe=l(),ad=a("h2"),iF=a("a"),kpe=a("span"),F(zy.$$.fragment),pQo=l(),Spe=a("span"),_Qo=o("AutoModelForNextSentencePrediction"),YOe=l(),Io=a("div"),F(Qy.$$.fragment),bQo=l(),nd=a("p"),vQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),OX=a("a"),FQo=o("from_pretrained()"),TQo=o(" class method or the "),VX=a("a"),MQo=o("from_config()"),EQo=o(` class
method.`),CQo=l(),Wy=a("p"),wQo=o("This class cannot be instantiated directly using "),Rpe=a("code"),AQo=o("__init__()"),LQo=o(" (throws an error)."),yQo=l(),ft=a("div"),F(Hy.$$.fragment),xQo=l(),Ppe=a("p"),$Qo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),kQo=l(),sd=a("p"),SQo=o(`Note:
Loading a model from its configuration file does `),Bpe=a("strong"),RQo=o("not"),PQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XX=a("a"),BQo=o("from_pretrained()"),IQo=o(" to load the model weights."),NQo=l(),F(dF.$$.fragment),qQo=l(),to=a("div"),F(Uy.$$.fragment),jQo=l(),Ipe=a("p"),DQo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),GQo=l(),Da=a("p"),OQo=o("The model class to instantiate is selected based on the "),Npe=a("code"),VQo=o("model_type"),XQo=o(` property of the config object (either
passed as an argument or loaded from `),qpe=a("code"),zQo=o("pretrained_model_name_or_path"),QQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jpe=a("code"),WQo=o("pretrained_model_name_or_path"),HQo=o(":"),UQo=l(),No=a("ul"),cF=a("li"),Dpe=a("strong"),JQo=o("bert"),YQo=o(" \u2014 "),zX=a("a"),KQo=o("BertForNextSentencePrediction"),ZQo=o(" (BERT model)"),eWo=l(),mF=a("li"),Gpe=a("strong"),oWo=o("fnet"),rWo=o(" \u2014 "),QX=a("a"),tWo=o("FNetForNextSentencePrediction"),aWo=o(" (FNet model)"),nWo=l(),fF=a("li"),Ope=a("strong"),sWo=o("megatron-bert"),lWo=o(" \u2014 "),WX=a("a"),iWo=o("MegatronBertForNextSentencePrediction"),dWo=o(" (Megatron-BERT model)"),cWo=l(),gF=a("li"),Vpe=a("strong"),mWo=o("mobilebert"),fWo=o(" \u2014 "),HX=a("a"),gWo=o("MobileBertForNextSentencePrediction"),hWo=o(" (MobileBERT model)"),uWo=l(),hF=a("li"),Xpe=a("strong"),pWo=o("nezha"),_Wo=o(" \u2014 "),UX=a("a"),bWo=o("NezhaForNextSentencePrediction"),vWo=o(" (Nezha model)"),FWo=l(),uF=a("li"),zpe=a("strong"),TWo=o("qdqbert"),MWo=o(" \u2014 "),JX=a("a"),EWo=o("QDQBertForNextSentencePrediction"),CWo=o(" (QDQBert model)"),wWo=l(),pF=a("p"),AWo=o("The model is set in evaluation mode by default using "),Qpe=a("code"),LWo=o("model.eval()"),yWo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wpe=a("code"),xWo=o("model.train()"),$Wo=l(),F(_F.$$.fragment),KOe=l(),ld=a("h2"),bF=a("a"),Hpe=a("span"),F(Jy.$$.fragment),kWo=l(),Upe=a("span"),SWo=o("AutoModelForTokenClassification"),ZOe=l(),qo=a("div"),F(Yy.$$.fragment),RWo=l(),id=a("p"),PWo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),YX=a("a"),BWo=o("from_pretrained()"),IWo=o(" class method or the "),KX=a("a"),NWo=o("from_config()"),qWo=o(` class
method.`),jWo=l(),Ky=a("p"),DWo=o("This class cannot be instantiated directly using "),Jpe=a("code"),GWo=o("__init__()"),OWo=o(" (throws an error)."),VWo=l(),gt=a("div"),F(Zy.$$.fragment),XWo=l(),Ype=a("p"),zWo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),QWo=l(),dd=a("p"),WWo=o(`Note:
Loading a model from its configuration file does `),Kpe=a("strong"),HWo=o("not"),UWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZX=a("a"),JWo=o("from_pretrained()"),YWo=o(" to load the model weights."),KWo=l(),F(vF.$$.fragment),ZWo=l(),ao=a("div"),F(e8.$$.fragment),eHo=l(),Zpe=a("p"),oHo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),rHo=l(),Ga=a("p"),tHo=o("The model class to instantiate is selected based on the "),e_e=a("code"),aHo=o("model_type"),nHo=o(` property of the config object (either
passed as an argument or loaded from `),o_e=a("code"),sHo=o("pretrained_model_name_or_path"),lHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r_e=a("code"),iHo=o("pretrained_model_name_or_path"),dHo=o(":"),cHo=l(),H=a("ul"),FF=a("li"),t_e=a("strong"),mHo=o("albert"),fHo=o(" \u2014 "),ez=a("a"),gHo=o("AlbertForTokenClassification"),hHo=o(" (ALBERT model)"),uHo=l(),TF=a("li"),a_e=a("strong"),pHo=o("bert"),_Ho=o(" \u2014 "),oz=a("a"),bHo=o("BertForTokenClassification"),vHo=o(" (BERT model)"),FHo=l(),MF=a("li"),n_e=a("strong"),THo=o("big_bird"),MHo=o(" \u2014 "),rz=a("a"),EHo=o("BigBirdForTokenClassification"),CHo=o(" (BigBird model)"),wHo=l(),EF=a("li"),s_e=a("strong"),AHo=o("bloom"),LHo=o(" \u2014 "),tz=a("a"),yHo=o("BloomForTokenClassification"),xHo=o(" (BLOOM model)"),$Ho=l(),CF=a("li"),l_e=a("strong"),kHo=o("camembert"),SHo=o(" \u2014 "),az=a("a"),RHo=o("CamembertForTokenClassification"),PHo=o(" (CamemBERT model)"),BHo=l(),wF=a("li"),i_e=a("strong"),IHo=o("canine"),NHo=o(" \u2014 "),nz=a("a"),qHo=o("CanineForTokenClassification"),jHo=o(" (CANINE model)"),DHo=l(),AF=a("li"),d_e=a("strong"),GHo=o("convbert"),OHo=o(" \u2014 "),sz=a("a"),VHo=o("ConvBertForTokenClassification"),XHo=o(" (ConvBERT model)"),zHo=l(),LF=a("li"),c_e=a("strong"),QHo=o("data2vec-text"),WHo=o(" \u2014 "),lz=a("a"),HHo=o("Data2VecTextForTokenClassification"),UHo=o(" (Data2VecText model)"),JHo=l(),yF=a("li"),m_e=a("strong"),YHo=o("deberta"),KHo=o(" \u2014 "),iz=a("a"),ZHo=o("DebertaForTokenClassification"),eUo=o(" (DeBERTa model)"),oUo=l(),xF=a("li"),f_e=a("strong"),rUo=o("deberta-v2"),tUo=o(" \u2014 "),dz=a("a"),aUo=o("DebertaV2ForTokenClassification"),nUo=o(" (DeBERTa-v2 model)"),sUo=l(),$F=a("li"),g_e=a("strong"),lUo=o("distilbert"),iUo=o(" \u2014 "),cz=a("a"),dUo=o("DistilBertForTokenClassification"),cUo=o(" (DistilBERT model)"),mUo=l(),kF=a("li"),h_e=a("strong"),fUo=o("electra"),gUo=o(" \u2014 "),mz=a("a"),hUo=o("ElectraForTokenClassification"),uUo=o(" (ELECTRA model)"),pUo=l(),SF=a("li"),u_e=a("strong"),_Uo=o("flaubert"),bUo=o(" \u2014 "),fz=a("a"),vUo=o("FlaubertForTokenClassification"),FUo=o(" (FlauBERT model)"),TUo=l(),RF=a("li"),p_e=a("strong"),MUo=o("fnet"),EUo=o(" \u2014 "),gz=a("a"),CUo=o("FNetForTokenClassification"),wUo=o(" (FNet model)"),AUo=l(),PF=a("li"),__e=a("strong"),LUo=o("funnel"),yUo=o(" \u2014 "),hz=a("a"),xUo=o("FunnelForTokenClassification"),$Uo=o(" (Funnel Transformer model)"),kUo=l(),BF=a("li"),b_e=a("strong"),SUo=o("gpt2"),RUo=o(" \u2014 "),uz=a("a"),PUo=o("GPT2ForTokenClassification"),BUo=o(" (OpenAI GPT-2 model)"),IUo=l(),IF=a("li"),v_e=a("strong"),NUo=o("ibert"),qUo=o(" \u2014 "),pz=a("a"),jUo=o("IBertForTokenClassification"),DUo=o(" (I-BERT model)"),GUo=l(),NF=a("li"),F_e=a("strong"),OUo=o("layoutlm"),VUo=o(" \u2014 "),_z=a("a"),XUo=o("LayoutLMForTokenClassification"),zUo=o(" (LayoutLM model)"),QUo=l(),qF=a("li"),T_e=a("strong"),WUo=o("layoutlmv2"),HUo=o(" \u2014 "),bz=a("a"),UUo=o("LayoutLMv2ForTokenClassification"),JUo=o(" (LayoutLMv2 model)"),YUo=l(),jF=a("li"),M_e=a("strong"),KUo=o("layoutlmv3"),ZUo=o(" \u2014 "),vz=a("a"),eJo=o("LayoutLMv3ForTokenClassification"),oJo=o(" (LayoutLMv3 model)"),rJo=l(),DF=a("li"),E_e=a("strong"),tJo=o("longformer"),aJo=o(" \u2014 "),Fz=a("a"),nJo=o("LongformerForTokenClassification"),sJo=o(" (Longformer model)"),lJo=l(),GF=a("li"),C_e=a("strong"),iJo=o("megatron-bert"),dJo=o(" \u2014 "),Tz=a("a"),cJo=o("MegatronBertForTokenClassification"),mJo=o(" (Megatron-BERT model)"),fJo=l(),OF=a("li"),w_e=a("strong"),gJo=o("mobilebert"),hJo=o(" \u2014 "),Mz=a("a"),uJo=o("MobileBertForTokenClassification"),pJo=o(" (MobileBERT model)"),_Jo=l(),VF=a("li"),A_e=a("strong"),bJo=o("mpnet"),vJo=o(" \u2014 "),Ez=a("a"),FJo=o("MPNetForTokenClassification"),TJo=o(" (MPNet model)"),MJo=l(),XF=a("li"),L_e=a("strong"),EJo=o("nezha"),CJo=o(" \u2014 "),Cz=a("a"),wJo=o("NezhaForTokenClassification"),AJo=o(" (Nezha model)"),LJo=l(),zF=a("li"),y_e=a("strong"),yJo=o("nystromformer"),xJo=o(" \u2014 "),wz=a("a"),$Jo=o("NystromformerForTokenClassification"),kJo=o(" (Nystr\xF6mformer model)"),SJo=l(),QF=a("li"),x_e=a("strong"),RJo=o("qdqbert"),PJo=o(" \u2014 "),Az=a("a"),BJo=o("QDQBertForTokenClassification"),IJo=o(" (QDQBert model)"),NJo=l(),WF=a("li"),$_e=a("strong"),qJo=o("rembert"),jJo=o(" \u2014 "),Lz=a("a"),DJo=o("RemBertForTokenClassification"),GJo=o(" (RemBERT model)"),OJo=l(),HF=a("li"),k_e=a("strong"),VJo=o("roberta"),XJo=o(" \u2014 "),yz=a("a"),zJo=o("RobertaForTokenClassification"),QJo=o(" (RoBERTa model)"),WJo=l(),UF=a("li"),S_e=a("strong"),HJo=o("roformer"),UJo=o(" \u2014 "),xz=a("a"),JJo=o("RoFormerForTokenClassification"),YJo=o(" (RoFormer model)"),KJo=l(),JF=a("li"),R_e=a("strong"),ZJo=o("squeezebert"),eYo=o(" \u2014 "),$z=a("a"),oYo=o("SqueezeBertForTokenClassification"),rYo=o(" (SqueezeBERT model)"),tYo=l(),YF=a("li"),P_e=a("strong"),aYo=o("xlm"),nYo=o(" \u2014 "),kz=a("a"),sYo=o("XLMForTokenClassification"),lYo=o(" (XLM model)"),iYo=l(),KF=a("li"),B_e=a("strong"),dYo=o("xlm-roberta"),cYo=o(" \u2014 "),Sz=a("a"),mYo=o("XLMRobertaForTokenClassification"),fYo=o(" (XLM-RoBERTa model)"),gYo=l(),ZF=a("li"),I_e=a("strong"),hYo=o("xlm-roberta-xl"),uYo=o(" \u2014 "),Rz=a("a"),pYo=o("XLMRobertaXLForTokenClassification"),_Yo=o(" (XLM-RoBERTa-XL model)"),bYo=l(),eT=a("li"),N_e=a("strong"),vYo=o("xlnet"),FYo=o(" \u2014 "),Pz=a("a"),TYo=o("XLNetForTokenClassification"),MYo=o(" (XLNet model)"),EYo=l(),oT=a("li"),q_e=a("strong"),CYo=o("yoso"),wYo=o(" \u2014 "),Bz=a("a"),AYo=o("YosoForTokenClassification"),LYo=o(" (YOSO model)"),yYo=l(),rT=a("p"),xYo=o("The model is set in evaluation mode by default using "),j_e=a("code"),$Yo=o("model.eval()"),kYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),D_e=a("code"),SYo=o("model.train()"),RYo=l(),F(tT.$$.fragment),eVe=l(),cd=a("h2"),aT=a("a"),G_e=a("span"),F(o8.$$.fragment),PYo=l(),O_e=a("span"),BYo=o("AutoModelForQuestionAnswering"),oVe=l(),jo=a("div"),F(r8.$$.fragment),IYo=l(),md=a("p"),NYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Iz=a("a"),qYo=o("from_pretrained()"),jYo=o(" class method or the "),Nz=a("a"),DYo=o("from_config()"),GYo=o(` class
method.`),OYo=l(),t8=a("p"),VYo=o("This class cannot be instantiated directly using "),V_e=a("code"),XYo=o("__init__()"),zYo=o(" (throws an error)."),QYo=l(),ht=a("div"),F(a8.$$.fragment),WYo=l(),X_e=a("p"),HYo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),UYo=l(),fd=a("p"),JYo=o(`Note:
Loading a model from its configuration file does `),z_e=a("strong"),YYo=o("not"),KYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qz=a("a"),ZYo=o("from_pretrained()"),eKo=o(" to load the model weights."),oKo=l(),F(nT.$$.fragment),rKo=l(),no=a("div"),F(n8.$$.fragment),tKo=l(),Q_e=a("p"),aKo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),nKo=l(),Oa=a("p"),sKo=o("The model class to instantiate is selected based on the "),W_e=a("code"),lKo=o("model_type"),iKo=o(` property of the config object (either
passed as an argument or loaded from `),H_e=a("code"),dKo=o("pretrained_model_name_or_path"),cKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U_e=a("code"),mKo=o("pretrained_model_name_or_path"),fKo=o(":"),gKo=l(),V=a("ul"),sT=a("li"),J_e=a("strong"),hKo=o("albert"),uKo=o(" \u2014 "),jz=a("a"),pKo=o("AlbertForQuestionAnswering"),_Ko=o(" (ALBERT model)"),bKo=l(),lT=a("li"),Y_e=a("strong"),vKo=o("bart"),FKo=o(" \u2014 "),Dz=a("a"),TKo=o("BartForQuestionAnswering"),MKo=o(" (BART model)"),EKo=l(),iT=a("li"),K_e=a("strong"),CKo=o("bert"),wKo=o(" \u2014 "),Gz=a("a"),AKo=o("BertForQuestionAnswering"),LKo=o(" (BERT model)"),yKo=l(),dT=a("li"),Z_e=a("strong"),xKo=o("big_bird"),$Ko=o(" \u2014 "),Oz=a("a"),kKo=o("BigBirdForQuestionAnswering"),SKo=o(" (BigBird model)"),RKo=l(),cT=a("li"),e2e=a("strong"),PKo=o("bigbird_pegasus"),BKo=o(" \u2014 "),Vz=a("a"),IKo=o("BigBirdPegasusForQuestionAnswering"),NKo=o(" (BigBird-Pegasus model)"),qKo=l(),mT=a("li"),o2e=a("strong"),jKo=o("camembert"),DKo=o(" \u2014 "),Xz=a("a"),GKo=o("CamembertForQuestionAnswering"),OKo=o(" (CamemBERT model)"),VKo=l(),fT=a("li"),r2e=a("strong"),XKo=o("canine"),zKo=o(" \u2014 "),zz=a("a"),QKo=o("CanineForQuestionAnswering"),WKo=o(" (CANINE model)"),HKo=l(),gT=a("li"),t2e=a("strong"),UKo=o("convbert"),JKo=o(" \u2014 "),Qz=a("a"),YKo=o("ConvBertForQuestionAnswering"),KKo=o(" (ConvBERT model)"),ZKo=l(),hT=a("li"),a2e=a("strong"),eZo=o("data2vec-text"),oZo=o(" \u2014 "),Wz=a("a"),rZo=o("Data2VecTextForQuestionAnswering"),tZo=o(" (Data2VecText model)"),aZo=l(),uT=a("li"),n2e=a("strong"),nZo=o("deberta"),sZo=o(" \u2014 "),Hz=a("a"),lZo=o("DebertaForQuestionAnswering"),iZo=o(" (DeBERTa model)"),dZo=l(),pT=a("li"),s2e=a("strong"),cZo=o("deberta-v2"),mZo=o(" \u2014 "),Uz=a("a"),fZo=o("DebertaV2ForQuestionAnswering"),gZo=o(" (DeBERTa-v2 model)"),hZo=l(),_T=a("li"),l2e=a("strong"),uZo=o("distilbert"),pZo=o(" \u2014 "),Jz=a("a"),_Zo=o("DistilBertForQuestionAnswering"),bZo=o(" (DistilBERT model)"),vZo=l(),bT=a("li"),i2e=a("strong"),FZo=o("electra"),TZo=o(" \u2014 "),Yz=a("a"),MZo=o("ElectraForQuestionAnswering"),EZo=o(" (ELECTRA model)"),CZo=l(),vT=a("li"),d2e=a("strong"),wZo=o("flaubert"),AZo=o(" \u2014 "),Kz=a("a"),LZo=o("FlaubertForQuestionAnsweringSimple"),yZo=o(" (FlauBERT model)"),xZo=l(),FT=a("li"),c2e=a("strong"),$Zo=o("fnet"),kZo=o(" \u2014 "),Zz=a("a"),SZo=o("FNetForQuestionAnswering"),RZo=o(" (FNet model)"),PZo=l(),TT=a("li"),m2e=a("strong"),BZo=o("funnel"),IZo=o(" \u2014 "),eQ=a("a"),NZo=o("FunnelForQuestionAnswering"),qZo=o(" (Funnel Transformer model)"),jZo=l(),MT=a("li"),f2e=a("strong"),DZo=o("gptj"),GZo=o(" \u2014 "),oQ=a("a"),OZo=o("GPTJForQuestionAnswering"),VZo=o(" (GPT-J model)"),XZo=l(),ET=a("li"),g2e=a("strong"),zZo=o("ibert"),QZo=o(" \u2014 "),rQ=a("a"),WZo=o("IBertForQuestionAnswering"),HZo=o(" (I-BERT model)"),UZo=l(),CT=a("li"),h2e=a("strong"),JZo=o("layoutlmv2"),YZo=o(" \u2014 "),tQ=a("a"),KZo=o("LayoutLMv2ForQuestionAnswering"),ZZo=o(" (LayoutLMv2 model)"),eer=l(),wT=a("li"),u2e=a("strong"),oer=o("layoutlmv3"),rer=o(" \u2014 "),aQ=a("a"),ter=o("LayoutLMv3ForQuestionAnswering"),aer=o(" (LayoutLMv3 model)"),ner=l(),AT=a("li"),p2e=a("strong"),ser=o("led"),ler=o(" \u2014 "),nQ=a("a"),ier=o("LEDForQuestionAnswering"),der=o(" (LED model)"),cer=l(),LT=a("li"),_2e=a("strong"),mer=o("longformer"),fer=o(" \u2014 "),sQ=a("a"),ger=o("LongformerForQuestionAnswering"),her=o(" (Longformer model)"),uer=l(),yT=a("li"),b2e=a("strong"),per=o("lxmert"),_er=o(" \u2014 "),lQ=a("a"),ber=o("LxmertForQuestionAnswering"),ver=o(" (LXMERT model)"),Fer=l(),xT=a("li"),v2e=a("strong"),Ter=o("mbart"),Mer=o(" \u2014 "),iQ=a("a"),Eer=o("MBartForQuestionAnswering"),Cer=o(" (mBART model)"),wer=l(),$T=a("li"),F2e=a("strong"),Aer=o("megatron-bert"),Ler=o(" \u2014 "),dQ=a("a"),yer=o("MegatronBertForQuestionAnswering"),xer=o(" (Megatron-BERT model)"),$er=l(),kT=a("li"),T2e=a("strong"),ker=o("mobilebert"),Ser=o(" \u2014 "),cQ=a("a"),Rer=o("MobileBertForQuestionAnswering"),Per=o(" (MobileBERT model)"),Ber=l(),ST=a("li"),M2e=a("strong"),Ier=o("mpnet"),Ner=o(" \u2014 "),mQ=a("a"),qer=o("MPNetForQuestionAnswering"),jer=o(" (MPNet model)"),Der=l(),RT=a("li"),E2e=a("strong"),Ger=o("nezha"),Oer=o(" \u2014 "),fQ=a("a"),Ver=o("NezhaForQuestionAnswering"),Xer=o(" (Nezha model)"),zer=l(),PT=a("li"),C2e=a("strong"),Qer=o("nystromformer"),Wer=o(" \u2014 "),gQ=a("a"),Her=o("NystromformerForQuestionAnswering"),Uer=o(" (Nystr\xF6mformer model)"),Jer=l(),BT=a("li"),w2e=a("strong"),Yer=o("qdqbert"),Ker=o(" \u2014 "),hQ=a("a"),Zer=o("QDQBertForQuestionAnswering"),eor=o(" (QDQBert model)"),oor=l(),IT=a("li"),A2e=a("strong"),ror=o("reformer"),tor=o(" \u2014 "),uQ=a("a"),aor=o("ReformerForQuestionAnswering"),nor=o(" (Reformer model)"),sor=l(),NT=a("li"),L2e=a("strong"),lor=o("rembert"),ior=o(" \u2014 "),pQ=a("a"),dor=o("RemBertForQuestionAnswering"),cor=o(" (RemBERT model)"),mor=l(),qT=a("li"),y2e=a("strong"),gor=o("roberta"),hor=o(" \u2014 "),_Q=a("a"),uor=o("RobertaForQuestionAnswering"),por=o(" (RoBERTa model)"),_or=l(),jT=a("li"),x2e=a("strong"),bor=o("roformer"),vor=o(" \u2014 "),bQ=a("a"),For=o("RoFormerForQuestionAnswering"),Tor=o(" (RoFormer model)"),Mor=l(),DT=a("li"),$2e=a("strong"),Eor=o("splinter"),Cor=o(" \u2014 "),vQ=a("a"),wor=o("SplinterForQuestionAnswering"),Aor=o(" (Splinter model)"),Lor=l(),GT=a("li"),k2e=a("strong"),yor=o("squeezebert"),xor=o(" \u2014 "),FQ=a("a"),$or=o("SqueezeBertForQuestionAnswering"),kor=o(" (SqueezeBERT model)"),Sor=l(),OT=a("li"),S2e=a("strong"),Ror=o("xlm"),Por=o(" \u2014 "),TQ=a("a"),Bor=o("XLMForQuestionAnsweringSimple"),Ior=o(" (XLM model)"),Nor=l(),VT=a("li"),R2e=a("strong"),qor=o("xlm-roberta"),jor=o(" \u2014 "),MQ=a("a"),Dor=o("XLMRobertaForQuestionAnswering"),Gor=o(" (XLM-RoBERTa model)"),Oor=l(),XT=a("li"),P2e=a("strong"),Vor=o("xlm-roberta-xl"),Xor=o(" \u2014 "),EQ=a("a"),zor=o("XLMRobertaXLForQuestionAnswering"),Qor=o(" (XLM-RoBERTa-XL model)"),Wor=l(),zT=a("li"),B2e=a("strong"),Hor=o("xlnet"),Uor=o(" \u2014 "),CQ=a("a"),Jor=o("XLNetForQuestionAnsweringSimple"),Yor=o(" (XLNet model)"),Kor=l(),QT=a("li"),I2e=a("strong"),Zor=o("yoso"),err=o(" \u2014 "),wQ=a("a"),orr=o("YosoForQuestionAnswering"),rrr=o(" (YOSO model)"),trr=l(),WT=a("p"),arr=o("The model is set in evaluation mode by default using "),N2e=a("code"),nrr=o("model.eval()"),srr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),q2e=a("code"),lrr=o("model.train()"),irr=l(),F(HT.$$.fragment),rVe=l(),gd=a("h2"),UT=a("a"),j2e=a("span"),F(s8.$$.fragment),drr=l(),D2e=a("span"),crr=o("AutoModelForTableQuestionAnswering"),tVe=l(),Do=a("div"),F(l8.$$.fragment),mrr=l(),hd=a("p"),frr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),AQ=a("a"),grr=o("from_pretrained()"),hrr=o(" class method or the "),LQ=a("a"),urr=o("from_config()"),prr=o(` class
method.`),_rr=l(),i8=a("p"),brr=o("This class cannot be instantiated directly using "),G2e=a("code"),vrr=o("__init__()"),Frr=o(" (throws an error)."),Trr=l(),ut=a("div"),F(d8.$$.fragment),Mrr=l(),O2e=a("p"),Err=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Crr=l(),ud=a("p"),wrr=o(`Note:
Loading a model from its configuration file does `),V2e=a("strong"),Arr=o("not"),Lrr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yQ=a("a"),yrr=o("from_pretrained()"),xrr=o(" to load the model weights."),$rr=l(),F(JT.$$.fragment),krr=l(),so=a("div"),F(c8.$$.fragment),Srr=l(),X2e=a("p"),Rrr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Prr=l(),Va=a("p"),Brr=o("The model class to instantiate is selected based on the "),z2e=a("code"),Irr=o("model_type"),Nrr=o(` property of the config object (either
passed as an argument or loaded from `),Q2e=a("code"),qrr=o("pretrained_model_name_or_path"),jrr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W2e=a("code"),Drr=o("pretrained_model_name_or_path"),Grr=o(":"),Orr=l(),H2e=a("ul"),YT=a("li"),U2e=a("strong"),Vrr=o("tapas"),Xrr=o(" \u2014 "),xQ=a("a"),zrr=o("TapasForQuestionAnswering"),Qrr=o(" (TAPAS model)"),Wrr=l(),KT=a("p"),Hrr=o("The model is set in evaluation mode by default using "),J2e=a("code"),Urr=o("model.eval()"),Jrr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Y2e=a("code"),Yrr=o("model.train()"),Krr=l(),F(ZT.$$.fragment),aVe=l(),pd=a("h2"),eM=a("a"),K2e=a("span"),F(m8.$$.fragment),Zrr=l(),Z2e=a("span"),etr=o("AutoModelForImageClassification"),nVe=l(),Go=a("div"),F(f8.$$.fragment),otr=l(),_d=a("p"),rtr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),$Q=a("a"),ttr=o("from_pretrained()"),atr=o(" class method or the "),kQ=a("a"),ntr=o("from_config()"),str=o(` class
method.`),ltr=l(),g8=a("p"),itr=o("This class cannot be instantiated directly using "),ebe=a("code"),dtr=o("__init__()"),ctr=o(" (throws an error)."),mtr=l(),pt=a("div"),F(h8.$$.fragment),ftr=l(),obe=a("p"),gtr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),htr=l(),bd=a("p"),utr=o(`Note:
Loading a model from its configuration file does `),rbe=a("strong"),ptr=o("not"),_tr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SQ=a("a"),btr=o("from_pretrained()"),vtr=o(" to load the model weights."),Ftr=l(),F(oM.$$.fragment),Ttr=l(),lo=a("div"),F(u8.$$.fragment),Mtr=l(),tbe=a("p"),Etr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Ctr=l(),Xa=a("p"),wtr=o("The model class to instantiate is selected based on the "),abe=a("code"),Atr=o("model_type"),Ltr=o(` property of the config object (either
passed as an argument or loaded from `),nbe=a("code"),ytr=o("pretrained_model_name_or_path"),xtr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sbe=a("code"),$tr=o("pretrained_model_name_or_path"),ktr=o(":"),Str=l(),Fe=a("ul"),rM=a("li"),lbe=a("strong"),Rtr=o("beit"),Ptr=o(" \u2014 "),RQ=a("a"),Btr=o("BeitForImageClassification"),Itr=o(" (BEiT model)"),Ntr=l(),tM=a("li"),ibe=a("strong"),qtr=o("convnext"),jtr=o(" \u2014 "),PQ=a("a"),Dtr=o("ConvNextForImageClassification"),Gtr=o(" (ConvNeXT model)"),Otr=l(),aM=a("li"),dbe=a("strong"),Vtr=o("cvt"),Xtr=o(" \u2014 "),BQ=a("a"),ztr=o("CvtForImageClassification"),Qtr=o(" (CvT model)"),Wtr=l(),nM=a("li"),cbe=a("strong"),Htr=o("data2vec-vision"),Utr=o(" \u2014 "),IQ=a("a"),Jtr=o("Data2VecVisionForImageClassification"),Ytr=o(" (Data2VecVision model)"),Ktr=l(),Qs=a("li"),mbe=a("strong"),Ztr=o("deit"),ear=o(" \u2014 "),NQ=a("a"),oar=o("DeiTForImageClassification"),rar=o(" or "),qQ=a("a"),tar=o("DeiTForImageClassificationWithTeacher"),aar=o(" (DeiT model)"),nar=l(),sM=a("li"),fbe=a("strong"),sar=o("imagegpt"),lar=o(" \u2014 "),jQ=a("a"),iar=o("ImageGPTForImageClassification"),dar=o(" (ImageGPT model)"),car=l(),Ws=a("li"),gbe=a("strong"),mar=o("levit"),far=o(" \u2014 "),DQ=a("a"),gar=o("LevitForImageClassification"),har=o(" or "),GQ=a("a"),uar=o("LevitForImageClassificationWithTeacher"),par=o(" (LeViT model)"),_ar=l(),_t=a("li"),hbe=a("strong"),bar=o("perceiver"),Far=o(" \u2014 "),OQ=a("a"),Tar=o("PerceiverForImageClassificationLearned"),Mar=o(" or "),VQ=a("a"),Ear=o("PerceiverForImageClassificationFourier"),Car=o(" or "),XQ=a("a"),war=o("PerceiverForImageClassificationConvProcessing"),Aar=o(" (Perceiver model)"),Lar=l(),lM=a("li"),ube=a("strong"),yar=o("poolformer"),xar=o(" \u2014 "),zQ=a("a"),$ar=o("PoolFormerForImageClassification"),kar=o(" (PoolFormer model)"),Sar=l(),iM=a("li"),pbe=a("strong"),Rar=o("regnet"),Par=o(" \u2014 "),QQ=a("a"),Bar=o("RegNetForImageClassification"),Iar=o(" (RegNet model)"),Nar=l(),dM=a("li"),_be=a("strong"),qar=o("resnet"),jar=o(" \u2014 "),WQ=a("a"),Dar=o("ResNetForImageClassification"),Gar=o(" (ResNet model)"),Oar=l(),cM=a("li"),bbe=a("strong"),Var=o("segformer"),Xar=o(" \u2014 "),HQ=a("a"),zar=o("SegformerForImageClassification"),Qar=o(" (SegFormer model)"),War=l(),mM=a("li"),vbe=a("strong"),Har=o("swin"),Uar=o(" \u2014 "),UQ=a("a"),Jar=o("SwinForImageClassification"),Yar=o(" (Swin Transformer model)"),Kar=l(),fM=a("li"),Fbe=a("strong"),Zar=o("van"),enr=o(" \u2014 "),JQ=a("a"),onr=o("VanForImageClassification"),rnr=o(" (VAN model)"),tnr=l(),gM=a("li"),Tbe=a("strong"),anr=o("vit"),nnr=o(" \u2014 "),YQ=a("a"),snr=o("ViTForImageClassification"),lnr=o(" (ViT model)"),inr=l(),hM=a("p"),dnr=o("The model is set in evaluation mode by default using "),Mbe=a("code"),cnr=o("model.eval()"),mnr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ebe=a("code"),fnr=o("model.train()"),gnr=l(),F(uM.$$.fragment),sVe=l(),vd=a("h2"),pM=a("a"),Cbe=a("span"),F(p8.$$.fragment),hnr=l(),wbe=a("span"),unr=o("AutoModelForVision2Seq"),lVe=l(),Oo=a("div"),F(_8.$$.fragment),pnr=l(),Fd=a("p"),_nr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),KQ=a("a"),bnr=o("from_pretrained()"),vnr=o(" class method or the "),ZQ=a("a"),Fnr=o("from_config()"),Tnr=o(` class
method.`),Mnr=l(),b8=a("p"),Enr=o("This class cannot be instantiated directly using "),Abe=a("code"),Cnr=o("__init__()"),wnr=o(" (throws an error)."),Anr=l(),bt=a("div"),F(v8.$$.fragment),Lnr=l(),Lbe=a("p"),ynr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),xnr=l(),Td=a("p"),$nr=o(`Note:
Loading a model from its configuration file does `),ybe=a("strong"),knr=o("not"),Snr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eW=a("a"),Rnr=o("from_pretrained()"),Pnr=o(" to load the model weights."),Bnr=l(),F(_M.$$.fragment),Inr=l(),io=a("div"),F(F8.$$.fragment),Nnr=l(),xbe=a("p"),qnr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),jnr=l(),za=a("p"),Dnr=o("The model class to instantiate is selected based on the "),$be=a("code"),Gnr=o("model_type"),Onr=o(` property of the config object (either
passed as an argument or loaded from `),kbe=a("code"),Vnr=o("pretrained_model_name_or_path"),Xnr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sbe=a("code"),znr=o("pretrained_model_name_or_path"),Qnr=o(":"),Wnr=l(),Rbe=a("ul"),bM=a("li"),Pbe=a("strong"),Hnr=o("vision-encoder-decoder"),Unr=o(" \u2014 "),oW=a("a"),Jnr=o("VisionEncoderDecoderModel"),Ynr=o(" (Vision Encoder decoder model)"),Knr=l(),vM=a("p"),Znr=o("The model is set in evaluation mode by default using "),Bbe=a("code"),esr=o("model.eval()"),osr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ibe=a("code"),rsr=o("model.train()"),tsr=l(),F(FM.$$.fragment),iVe=l(),Md=a("h2"),TM=a("a"),Nbe=a("span"),F(T8.$$.fragment),asr=l(),qbe=a("span"),nsr=o("AutoModelForVisualQuestionAnswering"),dVe=l(),Vo=a("div"),F(M8.$$.fragment),ssr=l(),Ed=a("p"),lsr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),rW=a("a"),isr=o("from_pretrained()"),dsr=o(" class method or the "),tW=a("a"),csr=o("from_config()"),msr=o(` class
method.`),fsr=l(),E8=a("p"),gsr=o("This class cannot be instantiated directly using "),jbe=a("code"),hsr=o("__init__()"),usr=o(" (throws an error)."),psr=l(),vt=a("div"),F(C8.$$.fragment),_sr=l(),Dbe=a("p"),bsr=o("Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),vsr=l(),Cd=a("p"),Fsr=o(`Note:
Loading a model from its configuration file does `),Gbe=a("strong"),Tsr=o("not"),Msr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aW=a("a"),Esr=o("from_pretrained()"),Csr=o(" to load the model weights."),wsr=l(),F(MM.$$.fragment),Asr=l(),co=a("div"),F(w8.$$.fragment),Lsr=l(),Obe=a("p"),ysr=o("Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),xsr=l(),Qa=a("p"),$sr=o("The model class to instantiate is selected based on the "),Vbe=a("code"),ksr=o("model_type"),Ssr=o(` property of the config object (either
passed as an argument or loaded from `),Xbe=a("code"),Rsr=o("pretrained_model_name_or_path"),Psr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zbe=a("code"),Bsr=o("pretrained_model_name_or_path"),Isr=o(":"),Nsr=l(),Qbe=a("ul"),EM=a("li"),Wbe=a("strong"),qsr=o("vilt"),jsr=o(" \u2014 "),nW=a("a"),Dsr=o("ViltForQuestionAnswering"),Gsr=o(" (ViLT model)"),Osr=l(),CM=a("p"),Vsr=o("The model is set in evaluation mode by default using "),Hbe=a("code"),Xsr=o("model.eval()"),zsr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ube=a("code"),Qsr=o("model.train()"),Wsr=l(),F(wM.$$.fragment),cVe=l(),wd=a("h2"),AM=a("a"),Jbe=a("span"),F(A8.$$.fragment),Hsr=l(),Ybe=a("span"),Usr=o("AutoModelForAudioClassification"),mVe=l(),Xo=a("div"),F(L8.$$.fragment),Jsr=l(),Ad=a("p"),Ysr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),sW=a("a"),Ksr=o("from_pretrained()"),Zsr=o(" class method or the "),lW=a("a"),elr=o("from_config()"),olr=o(` class
method.`),rlr=l(),y8=a("p"),tlr=o("This class cannot be instantiated directly using "),Kbe=a("code"),alr=o("__init__()"),nlr=o(" (throws an error)."),slr=l(),Ft=a("div"),F(x8.$$.fragment),llr=l(),Zbe=a("p"),ilr=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),dlr=l(),Ld=a("p"),clr=o(`Note:
Loading a model from its configuration file does `),eve=a("strong"),mlr=o("not"),flr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iW=a("a"),glr=o("from_pretrained()"),hlr=o(" to load the model weights."),ulr=l(),F(LM.$$.fragment),plr=l(),mo=a("div"),F($8.$$.fragment),_lr=l(),ove=a("p"),blr=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),vlr=l(),Wa=a("p"),Flr=o("The model class to instantiate is selected based on the "),rve=a("code"),Tlr=o("model_type"),Mlr=o(` property of the config object (either
passed as an argument or loaded from `),tve=a("code"),Elr=o("pretrained_model_name_or_path"),Clr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ave=a("code"),wlr=o("pretrained_model_name_or_path"),Alr=o(":"),Llr=l(),Pe=a("ul"),yM=a("li"),nve=a("strong"),ylr=o("data2vec-audio"),xlr=o(" \u2014 "),dW=a("a"),$lr=o("Data2VecAudioForSequenceClassification"),klr=o(" (Data2VecAudio model)"),Slr=l(),xM=a("li"),sve=a("strong"),Rlr=o("hubert"),Plr=o(" \u2014 "),cW=a("a"),Blr=o("HubertForSequenceClassification"),Ilr=o(" (Hubert model)"),Nlr=l(),$M=a("li"),lve=a("strong"),qlr=o("sew"),jlr=o(" \u2014 "),mW=a("a"),Dlr=o("SEWForSequenceClassification"),Glr=o(" (SEW model)"),Olr=l(),kM=a("li"),ive=a("strong"),Vlr=o("sew-d"),Xlr=o(" \u2014 "),fW=a("a"),zlr=o("SEWDForSequenceClassification"),Qlr=o(" (SEW-D model)"),Wlr=l(),SM=a("li"),dve=a("strong"),Hlr=o("unispeech"),Ulr=o(" \u2014 "),gW=a("a"),Jlr=o("UniSpeechForSequenceClassification"),Ylr=o(" (UniSpeech model)"),Klr=l(),RM=a("li"),cve=a("strong"),Zlr=o("unispeech-sat"),eir=o(" \u2014 "),hW=a("a"),oir=o("UniSpeechSatForSequenceClassification"),rir=o(" (UniSpeechSat model)"),tir=l(),PM=a("li"),mve=a("strong"),air=o("wav2vec2"),nir=o(" \u2014 "),uW=a("a"),sir=o("Wav2Vec2ForSequenceClassification"),lir=o(" (Wav2Vec2 model)"),iir=l(),BM=a("li"),fve=a("strong"),dir=o("wav2vec2-conformer"),cir=o(" \u2014 "),pW=a("a"),mir=o("Wav2Vec2ConformerForSequenceClassification"),fir=o(" (Wav2Vec2-Conformer model)"),gir=l(),IM=a("li"),gve=a("strong"),hir=o("wavlm"),uir=o(" \u2014 "),_W=a("a"),pir=o("WavLMForSequenceClassification"),_ir=o(" (WavLM model)"),bir=l(),NM=a("p"),vir=o("The model is set in evaluation mode by default using "),hve=a("code"),Fir=o("model.eval()"),Tir=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),uve=a("code"),Mir=o("model.train()"),Eir=l(),F(qM.$$.fragment),fVe=l(),yd=a("h2"),jM=a("a"),pve=a("span"),F(k8.$$.fragment),Cir=l(),_ve=a("span"),wir=o("AutoModelForAudioFrameClassification"),gVe=l(),zo=a("div"),F(S8.$$.fragment),Air=l(),xd=a("p"),Lir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),bW=a("a"),yir=o("from_pretrained()"),xir=o(" class method or the "),vW=a("a"),$ir=o("from_config()"),kir=o(` class
method.`),Sir=l(),R8=a("p"),Rir=o("This class cannot be instantiated directly using "),bve=a("code"),Pir=o("__init__()"),Bir=o(" (throws an error)."),Iir=l(),Tt=a("div"),F(P8.$$.fragment),Nir=l(),vve=a("p"),qir=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),jir=l(),$d=a("p"),Dir=o(`Note:
Loading a model from its configuration file does `),Fve=a("strong"),Gir=o("not"),Oir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FW=a("a"),Vir=o("from_pretrained()"),Xir=o(" to load the model weights."),zir=l(),F(DM.$$.fragment),Qir=l(),fo=a("div"),F(B8.$$.fragment),Wir=l(),Tve=a("p"),Hir=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),Uir=l(),Ha=a("p"),Jir=o("The model class to instantiate is selected based on the "),Mve=a("code"),Yir=o("model_type"),Kir=o(` property of the config object (either
passed as an argument or loaded from `),Eve=a("code"),Zir=o("pretrained_model_name_or_path"),edr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cve=a("code"),odr=o("pretrained_model_name_or_path"),rdr=o(":"),tdr=l(),et=a("ul"),GM=a("li"),wve=a("strong"),adr=o("data2vec-audio"),ndr=o(" \u2014 "),TW=a("a"),sdr=o("Data2VecAudioForAudioFrameClassification"),ldr=o(" (Data2VecAudio model)"),idr=l(),OM=a("li"),Ave=a("strong"),ddr=o("unispeech-sat"),cdr=o(" \u2014 "),MW=a("a"),mdr=o("UniSpeechSatForAudioFrameClassification"),fdr=o(" (UniSpeechSat model)"),gdr=l(),VM=a("li"),Lve=a("strong"),hdr=o("wav2vec2"),udr=o(" \u2014 "),EW=a("a"),pdr=o("Wav2Vec2ForAudioFrameClassification"),_dr=o(" (Wav2Vec2 model)"),bdr=l(),XM=a("li"),yve=a("strong"),vdr=o("wav2vec2-conformer"),Fdr=o(" \u2014 "),CW=a("a"),Tdr=o("Wav2Vec2ConformerForAudioFrameClassification"),Mdr=o(" (Wav2Vec2-Conformer model)"),Edr=l(),zM=a("li"),xve=a("strong"),Cdr=o("wavlm"),wdr=o(" \u2014 "),wW=a("a"),Adr=o("WavLMForAudioFrameClassification"),Ldr=o(" (WavLM model)"),ydr=l(),QM=a("p"),xdr=o("The model is set in evaluation mode by default using "),$ve=a("code"),$dr=o("model.eval()"),kdr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kve=a("code"),Sdr=o("model.train()"),Rdr=l(),F(WM.$$.fragment),hVe=l(),kd=a("h2"),HM=a("a"),Sve=a("span"),F(I8.$$.fragment),Pdr=l(),Rve=a("span"),Bdr=o("AutoModelForCTC"),uVe=l(),Qo=a("div"),F(N8.$$.fragment),Idr=l(),Sd=a("p"),Ndr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),AW=a("a"),qdr=o("from_pretrained()"),jdr=o(" class method or the "),LW=a("a"),Ddr=o("from_config()"),Gdr=o(` class
method.`),Odr=l(),q8=a("p"),Vdr=o("This class cannot be instantiated directly using "),Pve=a("code"),Xdr=o("__init__()"),zdr=o(" (throws an error)."),Qdr=l(),Mt=a("div"),F(j8.$$.fragment),Wdr=l(),Bve=a("p"),Hdr=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Udr=l(),Rd=a("p"),Jdr=o(`Note:
Loading a model from its configuration file does `),Ive=a("strong"),Ydr=o("not"),Kdr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yW=a("a"),Zdr=o("from_pretrained()"),ecr=o(" to load the model weights."),ocr=l(),F(UM.$$.fragment),rcr=l(),go=a("div"),F(D8.$$.fragment),tcr=l(),Nve=a("p"),acr=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),ncr=l(),Ua=a("p"),scr=o("The model class to instantiate is selected based on the "),qve=a("code"),lcr=o("model_type"),icr=o(` property of the config object (either
passed as an argument or loaded from `),jve=a("code"),dcr=o("pretrained_model_name_or_path"),ccr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dve=a("code"),mcr=o("pretrained_model_name_or_path"),fcr=o(":"),gcr=l(),Le=a("ul"),JM=a("li"),Gve=a("strong"),hcr=o("data2vec-audio"),ucr=o(" \u2014 "),xW=a("a"),pcr=o("Data2VecAudioForCTC"),_cr=o(" (Data2VecAudio model)"),bcr=l(),YM=a("li"),Ove=a("strong"),vcr=o("hubert"),Fcr=o(" \u2014 "),$W=a("a"),Tcr=o("HubertForCTC"),Mcr=o(" (Hubert model)"),Ecr=l(),KM=a("li"),Vve=a("strong"),Ccr=o("mctct"),wcr=o(" \u2014 "),kW=a("a"),Acr=o("MCTCTForCTC"),Lcr=o(" (M-CTC-T model)"),ycr=l(),ZM=a("li"),Xve=a("strong"),xcr=o("sew"),$cr=o(" \u2014 "),SW=a("a"),kcr=o("SEWForCTC"),Scr=o(" (SEW model)"),Rcr=l(),eE=a("li"),zve=a("strong"),Pcr=o("sew-d"),Bcr=o(" \u2014 "),RW=a("a"),Icr=o("SEWDForCTC"),Ncr=o(" (SEW-D model)"),qcr=l(),oE=a("li"),Qve=a("strong"),jcr=o("unispeech"),Dcr=o(" \u2014 "),PW=a("a"),Gcr=o("UniSpeechForCTC"),Ocr=o(" (UniSpeech model)"),Vcr=l(),rE=a("li"),Wve=a("strong"),Xcr=o("unispeech-sat"),zcr=o(" \u2014 "),BW=a("a"),Qcr=o("UniSpeechSatForCTC"),Wcr=o(" (UniSpeechSat model)"),Hcr=l(),tE=a("li"),Hve=a("strong"),Ucr=o("wav2vec2"),Jcr=o(" \u2014 "),IW=a("a"),Ycr=o("Wav2Vec2ForCTC"),Kcr=o(" (Wav2Vec2 model)"),Zcr=l(),aE=a("li"),Uve=a("strong"),emr=o("wav2vec2-conformer"),omr=o(" \u2014 "),NW=a("a"),rmr=o("Wav2Vec2ConformerForCTC"),tmr=o(" (Wav2Vec2-Conformer model)"),amr=l(),nE=a("li"),Jve=a("strong"),nmr=o("wavlm"),smr=o(" \u2014 "),qW=a("a"),lmr=o("WavLMForCTC"),imr=o(" (WavLM model)"),dmr=l(),sE=a("p"),cmr=o("The model is set in evaluation mode by default using "),Yve=a("code"),mmr=o("model.eval()"),fmr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Kve=a("code"),gmr=o("model.train()"),hmr=l(),F(lE.$$.fragment),pVe=l(),Pd=a("h2"),iE=a("a"),Zve=a("span"),F(G8.$$.fragment),umr=l(),e1e=a("span"),pmr=o("AutoModelForSpeechSeq2Seq"),_Ve=l(),Wo=a("div"),F(O8.$$.fragment),_mr=l(),Bd=a("p"),bmr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),jW=a("a"),vmr=o("from_pretrained()"),Fmr=o(" class method or the "),DW=a("a"),Tmr=o("from_config()"),Mmr=o(` class
method.`),Emr=l(),V8=a("p"),Cmr=o("This class cannot be instantiated directly using "),o1e=a("code"),wmr=o("__init__()"),Amr=o(" (throws an error)."),Lmr=l(),Et=a("div"),F(X8.$$.fragment),ymr=l(),r1e=a("p"),xmr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),$mr=l(),Id=a("p"),kmr=o(`Note:
Loading a model from its configuration file does `),t1e=a("strong"),Smr=o("not"),Rmr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GW=a("a"),Pmr=o("from_pretrained()"),Bmr=o(" to load the model weights."),Imr=l(),F(dE.$$.fragment),Nmr=l(),ho=a("div"),F(z8.$$.fragment),qmr=l(),a1e=a("p"),jmr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Dmr=l(),Ja=a("p"),Gmr=o("The model class to instantiate is selected based on the "),n1e=a("code"),Omr=o("model_type"),Vmr=o(` property of the config object (either
passed as an argument or loaded from `),s1e=a("code"),Xmr=o("pretrained_model_name_or_path"),zmr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l1e=a("code"),Qmr=o("pretrained_model_name_or_path"),Wmr=o(":"),Hmr=l(),Q8=a("ul"),cE=a("li"),i1e=a("strong"),Umr=o("speech-encoder-decoder"),Jmr=o(" \u2014 "),OW=a("a"),Ymr=o("SpeechEncoderDecoderModel"),Kmr=o(" (Speech Encoder decoder model)"),Zmr=l(),mE=a("li"),d1e=a("strong"),efr=o("speech_to_text"),ofr=o(" \u2014 "),VW=a("a"),rfr=o("Speech2TextForConditionalGeneration"),tfr=o(" (Speech2Text model)"),afr=l(),fE=a("p"),nfr=o("The model is set in evaluation mode by default using "),c1e=a("code"),sfr=o("model.eval()"),lfr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),m1e=a("code"),ifr=o("model.train()"),dfr=l(),F(gE.$$.fragment),bVe=l(),Nd=a("h2"),hE=a("a"),f1e=a("span"),F(W8.$$.fragment),cfr=l(),g1e=a("span"),mfr=o("AutoModelForAudioXVector"),vVe=l(),Ho=a("div"),F(H8.$$.fragment),ffr=l(),qd=a("p"),gfr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),XW=a("a"),hfr=o("from_pretrained()"),ufr=o(" class method or the "),zW=a("a"),pfr=o("from_config()"),_fr=o(` class
method.`),bfr=l(),U8=a("p"),vfr=o("This class cannot be instantiated directly using "),h1e=a("code"),Ffr=o("__init__()"),Tfr=o(" (throws an error)."),Mfr=l(),Ct=a("div"),F(J8.$$.fragment),Efr=l(),u1e=a("p"),Cfr=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),wfr=l(),jd=a("p"),Afr=o(`Note:
Loading a model from its configuration file does `),p1e=a("strong"),Lfr=o("not"),yfr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QW=a("a"),xfr=o("from_pretrained()"),$fr=o(" to load the model weights."),kfr=l(),F(uE.$$.fragment),Sfr=l(),uo=a("div"),F(Y8.$$.fragment),Rfr=l(),_1e=a("p"),Pfr=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Bfr=l(),Ya=a("p"),Ifr=o("The model class to instantiate is selected based on the "),b1e=a("code"),Nfr=o("model_type"),qfr=o(` property of the config object (either
passed as an argument or loaded from `),v1e=a("code"),jfr=o("pretrained_model_name_or_path"),Dfr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F1e=a("code"),Gfr=o("pretrained_model_name_or_path"),Ofr=o(":"),Vfr=l(),ot=a("ul"),pE=a("li"),T1e=a("strong"),Xfr=o("data2vec-audio"),zfr=o(" \u2014 "),WW=a("a"),Qfr=o("Data2VecAudioForXVector"),Wfr=o(" (Data2VecAudio model)"),Hfr=l(),_E=a("li"),M1e=a("strong"),Ufr=o("unispeech-sat"),Jfr=o(" \u2014 "),HW=a("a"),Yfr=o("UniSpeechSatForXVector"),Kfr=o(" (UniSpeechSat model)"),Zfr=l(),bE=a("li"),E1e=a("strong"),egr=o("wav2vec2"),ogr=o(" \u2014 "),UW=a("a"),rgr=o("Wav2Vec2ForXVector"),tgr=o(" (Wav2Vec2 model)"),agr=l(),vE=a("li"),C1e=a("strong"),ngr=o("wav2vec2-conformer"),sgr=o(" \u2014 "),JW=a("a"),lgr=o("Wav2Vec2ConformerForXVector"),igr=o(" (Wav2Vec2-Conformer model)"),dgr=l(),FE=a("li"),w1e=a("strong"),cgr=o("wavlm"),mgr=o(" \u2014 "),YW=a("a"),fgr=o("WavLMForXVector"),ggr=o(" (WavLM model)"),hgr=l(),TE=a("p"),ugr=o("The model is set in evaluation mode by default using "),A1e=a("code"),pgr=o("model.eval()"),_gr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),L1e=a("code"),bgr=o("model.train()"),vgr=l(),F(ME.$$.fragment),FVe=l(),Dd=a("h2"),EE=a("a"),y1e=a("span"),F(K8.$$.fragment),Fgr=l(),x1e=a("span"),Tgr=o("AutoModelForMaskedImageModeling"),TVe=l(),Uo=a("div"),F(Z8.$$.fragment),Mgr=l(),Gd=a("p"),Egr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),KW=a("a"),Cgr=o("from_pretrained()"),wgr=o(" class method or the "),ZW=a("a"),Agr=o("from_config()"),Lgr=o(` class
method.`),ygr=l(),e9=a("p"),xgr=o("This class cannot be instantiated directly using "),$1e=a("code"),$gr=o("__init__()"),kgr=o(" (throws an error)."),Sgr=l(),wt=a("div"),F(o9.$$.fragment),Rgr=l(),k1e=a("p"),Pgr=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Bgr=l(),Od=a("p"),Igr=o(`Note:
Loading a model from its configuration file does `),S1e=a("strong"),Ngr=o("not"),qgr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eH=a("a"),jgr=o("from_pretrained()"),Dgr=o(" to load the model weights."),Ggr=l(),F(CE.$$.fragment),Ogr=l(),po=a("div"),F(r9.$$.fragment),Vgr=l(),R1e=a("p"),Xgr=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),zgr=l(),Ka=a("p"),Qgr=o("The model class to instantiate is selected based on the "),P1e=a("code"),Wgr=o("model_type"),Hgr=o(` property of the config object (either
passed as an argument or loaded from `),B1e=a("code"),Ugr=o("pretrained_model_name_or_path"),Jgr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I1e=a("code"),Ygr=o("pretrained_model_name_or_path"),Kgr=o(":"),Zgr=l(),Vd=a("ul"),wE=a("li"),N1e=a("strong"),ehr=o("deit"),ohr=o(" \u2014 "),oH=a("a"),rhr=o("DeiTForMaskedImageModeling"),thr=o(" (DeiT model)"),ahr=l(),AE=a("li"),q1e=a("strong"),nhr=o("swin"),shr=o(" \u2014 "),rH=a("a"),lhr=o("SwinForMaskedImageModeling"),ihr=o(" (Swin Transformer model)"),dhr=l(),LE=a("li"),j1e=a("strong"),chr=o("vit"),mhr=o(" \u2014 "),tH=a("a"),fhr=o("ViTForMaskedImageModeling"),ghr=o(" (ViT model)"),hhr=l(),yE=a("p"),uhr=o("The model is set in evaluation mode by default using "),D1e=a("code"),phr=o("model.eval()"),_hr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),G1e=a("code"),bhr=o("model.train()"),vhr=l(),F(xE.$$.fragment),MVe=l(),Xd=a("h2"),$E=a("a"),O1e=a("span"),F(t9.$$.fragment),Fhr=l(),V1e=a("span"),Thr=o("AutoModelForObjectDetection"),EVe=l(),Jo=a("div"),F(a9.$$.fragment),Mhr=l(),zd=a("p"),Ehr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),aH=a("a"),Chr=o("from_pretrained()"),whr=o(" class method or the "),nH=a("a"),Ahr=o("from_config()"),Lhr=o(` class
method.`),yhr=l(),n9=a("p"),xhr=o("This class cannot be instantiated directly using "),X1e=a("code"),$hr=o("__init__()"),khr=o(" (throws an error)."),Shr=l(),At=a("div"),F(s9.$$.fragment),Rhr=l(),z1e=a("p"),Phr=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Bhr=l(),Qd=a("p"),Ihr=o(`Note:
Loading a model from its configuration file does `),Q1e=a("strong"),Nhr=o("not"),qhr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sH=a("a"),jhr=o("from_pretrained()"),Dhr=o(" to load the model weights."),Ghr=l(),F(kE.$$.fragment),Ohr=l(),_o=a("div"),F(l9.$$.fragment),Vhr=l(),W1e=a("p"),Xhr=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),zhr=l(),Za=a("p"),Qhr=o("The model class to instantiate is selected based on the "),H1e=a("code"),Whr=o("model_type"),Hhr=o(` property of the config object (either
passed as an argument or loaded from `),U1e=a("code"),Uhr=o("pretrained_model_name_or_path"),Jhr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J1e=a("code"),Yhr=o("pretrained_model_name_or_path"),Khr=o(":"),Zhr=l(),i9=a("ul"),SE=a("li"),Y1e=a("strong"),eur=o("detr"),our=o(" \u2014 "),lH=a("a"),rur=o("DetrForObjectDetection"),tur=o(" (DETR model)"),aur=l(),RE=a("li"),K1e=a("strong"),nur=o("yolos"),sur=o(" \u2014 "),iH=a("a"),lur=o("YolosForObjectDetection"),iur=o(" (YOLOS model)"),dur=l(),PE=a("p"),cur=o("The model is set in evaluation mode by default using "),Z1e=a("code"),mur=o("model.eval()"),fur=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),eFe=a("code"),gur=o("model.train()"),hur=l(),F(BE.$$.fragment),CVe=l(),Wd=a("h2"),IE=a("a"),oFe=a("span"),F(d9.$$.fragment),uur=l(),rFe=a("span"),pur=o("AutoModelForImageSegmentation"),wVe=l(),Yo=a("div"),F(c9.$$.fragment),_ur=l(),Hd=a("p"),bur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),dH=a("a"),vur=o("from_pretrained()"),Fur=o(" class method or the "),cH=a("a"),Tur=o("from_config()"),Mur=o(` class
method.`),Eur=l(),m9=a("p"),Cur=o("This class cannot be instantiated directly using "),tFe=a("code"),wur=o("__init__()"),Aur=o(" (throws an error)."),Lur=l(),Lt=a("div"),F(f9.$$.fragment),yur=l(),aFe=a("p"),xur=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),$ur=l(),Ud=a("p"),kur=o(`Note:
Loading a model from its configuration file does `),nFe=a("strong"),Sur=o("not"),Rur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mH=a("a"),Pur=o("from_pretrained()"),Bur=o(" to load the model weights."),Iur=l(),F(NE.$$.fragment),Nur=l(),bo=a("div"),F(g9.$$.fragment),qur=l(),sFe=a("p"),jur=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Dur=l(),en=a("p"),Gur=o("The model class to instantiate is selected based on the "),lFe=a("code"),Our=o("model_type"),Vur=o(` property of the config object (either
passed as an argument or loaded from `),iFe=a("code"),Xur=o("pretrained_model_name_or_path"),zur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dFe=a("code"),Qur=o("pretrained_model_name_or_path"),Wur=o(":"),Hur=l(),cFe=a("ul"),qE=a("li"),mFe=a("strong"),Uur=o("detr"),Jur=o(" \u2014 "),fH=a("a"),Yur=o("DetrForSegmentation"),Kur=o(" (DETR model)"),Zur=l(),jE=a("p"),epr=o("The model is set in evaluation mode by default using "),fFe=a("code"),opr=o("model.eval()"),rpr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gFe=a("code"),tpr=o("model.train()"),apr=l(),F(DE.$$.fragment),AVe=l(),Jd=a("h2"),GE=a("a"),hFe=a("span"),F(h9.$$.fragment),npr=l(),uFe=a("span"),spr=o("AutoModelForSemanticSegmentation"),LVe=l(),Ko=a("div"),F(u9.$$.fragment),lpr=l(),Yd=a("p"),ipr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),gH=a("a"),dpr=o("from_pretrained()"),cpr=o(" class method or the "),hH=a("a"),mpr=o("from_config()"),fpr=o(` class
method.`),gpr=l(),p9=a("p"),hpr=o("This class cannot be instantiated directly using "),pFe=a("code"),upr=o("__init__()"),ppr=o(" (throws an error)."),_pr=l(),yt=a("div"),F(_9.$$.fragment),bpr=l(),_Fe=a("p"),vpr=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Fpr=l(),Kd=a("p"),Tpr=o(`Note:
Loading a model from its configuration file does `),bFe=a("strong"),Mpr=o("not"),Epr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uH=a("a"),Cpr=o("from_pretrained()"),wpr=o(" to load the model weights."),Apr=l(),F(OE.$$.fragment),Lpr=l(),vo=a("div"),F(b9.$$.fragment),ypr=l(),vFe=a("p"),xpr=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),$pr=l(),on=a("p"),kpr=o("The model class to instantiate is selected based on the "),FFe=a("code"),Spr=o("model_type"),Rpr=o(` property of the config object (either
passed as an argument or loaded from `),TFe=a("code"),Ppr=o("pretrained_model_name_or_path"),Bpr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),MFe=a("code"),Ipr=o("pretrained_model_name_or_path"),Npr=o(":"),qpr=l(),rn=a("ul"),VE=a("li"),EFe=a("strong"),jpr=o("beit"),Dpr=o(" \u2014 "),pH=a("a"),Gpr=o("BeitForSemanticSegmentation"),Opr=o(" (BEiT model)"),Vpr=l(),XE=a("li"),CFe=a("strong"),Xpr=o("data2vec-vision"),zpr=o(" \u2014 "),_H=a("a"),Qpr=o("Data2VecVisionForSemanticSegmentation"),Wpr=o(" (Data2VecVision model)"),Hpr=l(),zE=a("li"),wFe=a("strong"),Upr=o("dpt"),Jpr=o(" \u2014 "),bH=a("a"),Ypr=o("DPTForSemanticSegmentation"),Kpr=o(" (DPT model)"),Zpr=l(),QE=a("li"),AFe=a("strong"),e_r=o("segformer"),o_r=o(" \u2014 "),vH=a("a"),r_r=o("SegformerForSemanticSegmentation"),t_r=o(" (SegFormer model)"),a_r=l(),WE=a("p"),n_r=o("The model is set in evaluation mode by default using "),LFe=a("code"),s_r=o("model.eval()"),l_r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yFe=a("code"),i_r=o("model.train()"),d_r=l(),F(HE.$$.fragment),yVe=l(),Zd=a("h2"),UE=a("a"),xFe=a("span"),F(v9.$$.fragment),c_r=l(),$Fe=a("span"),m_r=o("AutoModelForInstanceSegmentation"),xVe=l(),Zo=a("div"),F(F9.$$.fragment),f_r=l(),ec=a("p"),g_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),FH=a("a"),h_r=o("from_pretrained()"),u_r=o(" class method or the "),TH=a("a"),p_r=o("from_config()"),__r=o(` class
method.`),b_r=l(),T9=a("p"),v_r=o("This class cannot be instantiated directly using "),kFe=a("code"),F_r=o("__init__()"),T_r=o(" (throws an error)."),M_r=l(),xt=a("div"),F(M9.$$.fragment),E_r=l(),SFe=a("p"),C_r=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),w_r=l(),oc=a("p"),A_r=o(`Note:
Loading a model from its configuration file does `),RFe=a("strong"),L_r=o("not"),y_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MH=a("a"),x_r=o("from_pretrained()"),$_r=o(" to load the model weights."),k_r=l(),F(JE.$$.fragment),S_r=l(),Fo=a("div"),F(E9.$$.fragment),R_r=l(),PFe=a("p"),P_r=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),B_r=l(),tn=a("p"),I_r=o("The model class to instantiate is selected based on the "),BFe=a("code"),N_r=o("model_type"),q_r=o(` property of the config object (either
passed as an argument or loaded from `),IFe=a("code"),j_r=o("pretrained_model_name_or_path"),D_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),NFe=a("code"),G_r=o("pretrained_model_name_or_path"),O_r=o(":"),V_r=l(),qFe=a("ul"),YE=a("li"),jFe=a("strong"),X_r=o("maskformer"),z_r=o(" \u2014 "),EH=a("a"),Q_r=o("MaskFormerForInstanceSegmentation"),W_r=o(" (MaskFormer model)"),H_r=l(),KE=a("p"),U_r=o("The model is set in evaluation mode by default using "),DFe=a("code"),J_r=o("model.eval()"),Y_r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),GFe=a("code"),K_r=o("model.train()"),Z_r=l(),F(ZE.$$.fragment),$Ve=l(),rc=a("h2"),e4=a("a"),OFe=a("span"),F(C9.$$.fragment),e2r=l(),VFe=a("span"),o2r=o("TFAutoModel"),kVe=l(),er=a("div"),F(w9.$$.fragment),r2r=l(),tc=a("p"),t2r=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),CH=a("a"),a2r=o("from_pretrained()"),n2r=o(" class method or the "),wH=a("a"),s2r=o("from_config()"),l2r=o(` class
method.`),i2r=l(),A9=a("p"),d2r=o("This class cannot be instantiated directly using "),XFe=a("code"),c2r=o("__init__()"),m2r=o(" (throws an error)."),f2r=l(),$t=a("div"),F(L9.$$.fragment),g2r=l(),zFe=a("p"),h2r=o("Instantiates one of the base model classes of the library from a configuration."),u2r=l(),ac=a("p"),p2r=o(`Note:
Loading a model from its configuration file does `),QFe=a("strong"),_2r=o("not"),b2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),AH=a("a"),v2r=o("from_pretrained()"),F2r=o(" to load the model weights."),T2r=l(),F(o4.$$.fragment),M2r=l(),yr=a("div"),F(y9.$$.fragment),E2r=l(),WFe=a("p"),C2r=o("Instantiate one of the base model classes of the library from a pretrained model."),w2r=l(),an=a("p"),A2r=o("The model class to instantiate is selected based on the "),HFe=a("code"),L2r=o("model_type"),y2r=o(` property of the config object (either
passed as an argument or loaded from `),UFe=a("code"),x2r=o("pretrained_model_name_or_path"),$2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),JFe=a("code"),k2r=o("pretrained_model_name_or_path"),S2r=o(":"),R2r=l(),j=a("ul"),r4=a("li"),YFe=a("strong"),P2r=o("albert"),B2r=o(" \u2014 "),LH=a("a"),I2r=o("TFAlbertModel"),N2r=o(" (ALBERT model)"),q2r=l(),t4=a("li"),KFe=a("strong"),j2r=o("bart"),D2r=o(" \u2014 "),yH=a("a"),G2r=o("TFBartModel"),O2r=o(" (BART model)"),V2r=l(),a4=a("li"),ZFe=a("strong"),X2r=o("bert"),z2r=o(" \u2014 "),xH=a("a"),Q2r=o("TFBertModel"),W2r=o(" (BERT model)"),H2r=l(),n4=a("li"),eTe=a("strong"),U2r=o("blenderbot"),J2r=o(" \u2014 "),$H=a("a"),Y2r=o("TFBlenderbotModel"),K2r=o(" (Blenderbot model)"),Z2r=l(),s4=a("li"),oTe=a("strong"),ebr=o("blenderbot-small"),obr=o(" \u2014 "),kH=a("a"),rbr=o("TFBlenderbotSmallModel"),tbr=o(" (BlenderbotSmall model)"),abr=l(),l4=a("li"),rTe=a("strong"),nbr=o("camembert"),sbr=o(" \u2014 "),SH=a("a"),lbr=o("TFCamembertModel"),ibr=o(" (CamemBERT model)"),dbr=l(),i4=a("li"),tTe=a("strong"),cbr=o("clip"),mbr=o(" \u2014 "),RH=a("a"),fbr=o("TFCLIPModel"),gbr=o(" (CLIP model)"),hbr=l(),d4=a("li"),aTe=a("strong"),ubr=o("convbert"),pbr=o(" \u2014 "),PH=a("a"),_br=o("TFConvBertModel"),bbr=o(" (ConvBERT model)"),vbr=l(),c4=a("li"),nTe=a("strong"),Fbr=o("convnext"),Tbr=o(" \u2014 "),BH=a("a"),Mbr=o("TFConvNextModel"),Ebr=o(" (ConvNeXT model)"),Cbr=l(),m4=a("li"),sTe=a("strong"),wbr=o("ctrl"),Abr=o(" \u2014 "),IH=a("a"),Lbr=o("TFCTRLModel"),ybr=o(" (CTRL model)"),xbr=l(),f4=a("li"),lTe=a("strong"),$br=o("data2vec-vision"),kbr=o(" \u2014 "),NH=a("a"),Sbr=o("TFData2VecVisionModel"),Rbr=o(" (Data2VecVision model)"),Pbr=l(),g4=a("li"),iTe=a("strong"),Bbr=o("deberta"),Ibr=o(" \u2014 "),qH=a("a"),Nbr=o("TFDebertaModel"),qbr=o(" (DeBERTa model)"),jbr=l(),h4=a("li"),dTe=a("strong"),Dbr=o("deberta-v2"),Gbr=o(" \u2014 "),jH=a("a"),Obr=o("TFDebertaV2Model"),Vbr=o(" (DeBERTa-v2 model)"),Xbr=l(),u4=a("li"),cTe=a("strong"),zbr=o("distilbert"),Qbr=o(" \u2014 "),DH=a("a"),Wbr=o("TFDistilBertModel"),Hbr=o(" (DistilBERT model)"),Ubr=l(),p4=a("li"),mTe=a("strong"),Jbr=o("dpr"),Ybr=o(" \u2014 "),GH=a("a"),Kbr=o("TFDPRQuestionEncoder"),Zbr=o(" (DPR model)"),evr=l(),_4=a("li"),fTe=a("strong"),ovr=o("electra"),rvr=o(" \u2014 "),OH=a("a"),tvr=o("TFElectraModel"),avr=o(" (ELECTRA model)"),nvr=l(),b4=a("li"),gTe=a("strong"),svr=o("flaubert"),lvr=o(" \u2014 "),VH=a("a"),ivr=o("TFFlaubertModel"),dvr=o(" (FlauBERT model)"),cvr=l(),Hs=a("li"),hTe=a("strong"),mvr=o("funnel"),fvr=o(" \u2014 "),XH=a("a"),gvr=o("TFFunnelModel"),hvr=o(" or "),zH=a("a"),uvr=o("TFFunnelBaseModel"),pvr=o(" (Funnel Transformer model)"),_vr=l(),v4=a("li"),uTe=a("strong"),bvr=o("gpt2"),vvr=o(" \u2014 "),QH=a("a"),Fvr=o("TFGPT2Model"),Tvr=o(" (OpenAI GPT-2 model)"),Mvr=l(),F4=a("li"),pTe=a("strong"),Evr=o("gptj"),Cvr=o(" \u2014 "),WH=a("a"),wvr=o("TFGPTJModel"),Avr=o(" (GPT-J model)"),Lvr=l(),T4=a("li"),_Te=a("strong"),yvr=o("hubert"),xvr=o(" \u2014 "),HH=a("a"),$vr=o("TFHubertModel"),kvr=o(" (Hubert model)"),Svr=l(),M4=a("li"),bTe=a("strong"),Rvr=o("layoutlm"),Pvr=o(" \u2014 "),UH=a("a"),Bvr=o("TFLayoutLMModel"),Ivr=o(" (LayoutLM model)"),Nvr=l(),E4=a("li"),vTe=a("strong"),qvr=o("led"),jvr=o(" \u2014 "),JH=a("a"),Dvr=o("TFLEDModel"),Gvr=o(" (LED model)"),Ovr=l(),C4=a("li"),FTe=a("strong"),Vvr=o("longformer"),Xvr=o(" \u2014 "),YH=a("a"),zvr=o("TFLongformerModel"),Qvr=o(" (Longformer model)"),Wvr=l(),w4=a("li"),TTe=a("strong"),Hvr=o("lxmert"),Uvr=o(" \u2014 "),KH=a("a"),Jvr=o("TFLxmertModel"),Yvr=o(" (LXMERT model)"),Kvr=l(),A4=a("li"),MTe=a("strong"),Zvr=o("marian"),e1r=o(" \u2014 "),ZH=a("a"),o1r=o("TFMarianModel"),r1r=o(" (Marian model)"),t1r=l(),L4=a("li"),ETe=a("strong"),a1r=o("mbart"),n1r=o(" \u2014 "),eU=a("a"),s1r=o("TFMBartModel"),l1r=o(" (mBART model)"),i1r=l(),y4=a("li"),CTe=a("strong"),d1r=o("mobilebert"),c1r=o(" \u2014 "),oU=a("a"),m1r=o("TFMobileBertModel"),f1r=o(" (MobileBERT model)"),g1r=l(),x4=a("li"),wTe=a("strong"),h1r=o("mpnet"),u1r=o(" \u2014 "),rU=a("a"),p1r=o("TFMPNetModel"),_1r=o(" (MPNet model)"),b1r=l(),$4=a("li"),ATe=a("strong"),v1r=o("mt5"),F1r=o(" \u2014 "),tU=a("a"),T1r=o("TFMT5Model"),M1r=o(" (MT5 model)"),E1r=l(),k4=a("li"),LTe=a("strong"),C1r=o("openai-gpt"),w1r=o(" \u2014 "),aU=a("a"),A1r=o("TFOpenAIGPTModel"),L1r=o(" (OpenAI GPT model)"),y1r=l(),S4=a("li"),yTe=a("strong"),x1r=o("opt"),$1r=o(" \u2014 "),nU=a("a"),k1r=o("TFOPTModel"),S1r=o(" (OPT model)"),R1r=l(),R4=a("li"),xTe=a("strong"),P1r=o("pegasus"),B1r=o(" \u2014 "),sU=a("a"),I1r=o("TFPegasusModel"),N1r=o(" (Pegasus model)"),q1r=l(),P4=a("li"),$Te=a("strong"),j1r=o("rembert"),D1r=o(" \u2014 "),lU=a("a"),G1r=o("TFRemBertModel"),O1r=o(" (RemBERT model)"),V1r=l(),B4=a("li"),kTe=a("strong"),X1r=o("roberta"),z1r=o(" \u2014 "),iU=a("a"),Q1r=o("TFRobertaModel"),W1r=o(" (RoBERTa model)"),H1r=l(),I4=a("li"),STe=a("strong"),U1r=o("roformer"),J1r=o(" \u2014 "),dU=a("a"),Y1r=o("TFRoFormerModel"),K1r=o(" (RoFormer model)"),Z1r=l(),N4=a("li"),RTe=a("strong"),eFr=o("speech_to_text"),oFr=o(" \u2014 "),cU=a("a"),rFr=o("TFSpeech2TextModel"),tFr=o(" (Speech2Text model)"),aFr=l(),q4=a("li"),PTe=a("strong"),nFr=o("swin"),sFr=o(" \u2014 "),mU=a("a"),lFr=o("TFSwinModel"),iFr=o(" (Swin Transformer model)"),dFr=l(),j4=a("li"),BTe=a("strong"),cFr=o("t5"),mFr=o(" \u2014 "),fU=a("a"),fFr=o("TFT5Model"),gFr=o(" (T5 model)"),hFr=l(),D4=a("li"),ITe=a("strong"),uFr=o("tapas"),pFr=o(" \u2014 "),gU=a("a"),_Fr=o("TFTapasModel"),bFr=o(" (TAPAS model)"),vFr=l(),G4=a("li"),NTe=a("strong"),FFr=o("transfo-xl"),TFr=o(" \u2014 "),hU=a("a"),MFr=o("TFTransfoXLModel"),EFr=o(" (Transformer-XL model)"),CFr=l(),O4=a("li"),qTe=a("strong"),wFr=o("vit"),AFr=o(" \u2014 "),uU=a("a"),LFr=o("TFViTModel"),yFr=o(" (ViT model)"),xFr=l(),V4=a("li"),jTe=a("strong"),$Fr=o("vit_mae"),kFr=o(" \u2014 "),pU=a("a"),SFr=o("TFViTMAEModel"),RFr=o(" (ViTMAE model)"),PFr=l(),X4=a("li"),DTe=a("strong"),BFr=o("wav2vec2"),IFr=o(" \u2014 "),_U=a("a"),NFr=o("TFWav2Vec2Model"),qFr=o(" (Wav2Vec2 model)"),jFr=l(),z4=a("li"),GTe=a("strong"),DFr=o("xlm"),GFr=o(" \u2014 "),bU=a("a"),OFr=o("TFXLMModel"),VFr=o(" (XLM model)"),XFr=l(),Q4=a("li"),OTe=a("strong"),zFr=o("xlm-roberta"),QFr=o(" \u2014 "),vU=a("a"),WFr=o("TFXLMRobertaModel"),HFr=o(" (XLM-RoBERTa model)"),UFr=l(),W4=a("li"),VTe=a("strong"),JFr=o("xlnet"),YFr=o(" \u2014 "),FU=a("a"),KFr=o("TFXLNetModel"),ZFr=o(" (XLNet model)"),eTr=l(),F(H4.$$.fragment),SVe=l(),nc=a("h2"),U4=a("a"),XTe=a("span"),F(x9.$$.fragment),oTr=l(),zTe=a("span"),rTr=o("TFAutoModelForPreTraining"),RVe=l(),or=a("div"),F($9.$$.fragment),tTr=l(),sc=a("p"),aTr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),TU=a("a"),nTr=o("from_pretrained()"),sTr=o(" class method or the "),MU=a("a"),lTr=o("from_config()"),iTr=o(` class
method.`),dTr=l(),k9=a("p"),cTr=o("This class cannot be instantiated directly using "),QTe=a("code"),mTr=o("__init__()"),fTr=o(" (throws an error)."),gTr=l(),kt=a("div"),F(S9.$$.fragment),hTr=l(),WTe=a("p"),uTr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),pTr=l(),lc=a("p"),_Tr=o(`Note:
Loading a model from its configuration file does `),HTe=a("strong"),bTr=o("not"),vTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EU=a("a"),FTr=o("from_pretrained()"),TTr=o(" to load the model weights."),MTr=l(),F(J4.$$.fragment),ETr=l(),xr=a("div"),F(R9.$$.fragment),CTr=l(),UTe=a("p"),wTr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),ATr=l(),nn=a("p"),LTr=o("The model class to instantiate is selected based on the "),JTe=a("code"),yTr=o("model_type"),xTr=o(` property of the config object (either
passed as an argument or loaded from `),YTe=a("code"),$Tr=o("pretrained_model_name_or_path"),kTr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),KTe=a("code"),STr=o("pretrained_model_name_or_path"),RTr=o(":"),PTr=l(),se=a("ul"),Y4=a("li"),ZTe=a("strong"),BTr=o("albert"),ITr=o(" \u2014 "),CU=a("a"),NTr=o("TFAlbertForPreTraining"),qTr=o(" (ALBERT model)"),jTr=l(),K4=a("li"),eMe=a("strong"),DTr=o("bart"),GTr=o(" \u2014 "),wU=a("a"),OTr=o("TFBartForConditionalGeneration"),VTr=o(" (BART model)"),XTr=l(),Z4=a("li"),oMe=a("strong"),zTr=o("bert"),QTr=o(" \u2014 "),AU=a("a"),WTr=o("TFBertForPreTraining"),HTr=o(" (BERT model)"),UTr=l(),eC=a("li"),rMe=a("strong"),JTr=o("camembert"),YTr=o(" \u2014 "),LU=a("a"),KTr=o("TFCamembertForMaskedLM"),ZTr=o(" (CamemBERT model)"),eMr=l(),oC=a("li"),tMe=a("strong"),oMr=o("ctrl"),rMr=o(" \u2014 "),yU=a("a"),tMr=o("TFCTRLLMHeadModel"),aMr=o(" (CTRL model)"),nMr=l(),rC=a("li"),aMe=a("strong"),sMr=o("distilbert"),lMr=o(" \u2014 "),xU=a("a"),iMr=o("TFDistilBertForMaskedLM"),dMr=o(" (DistilBERT model)"),cMr=l(),tC=a("li"),nMe=a("strong"),mMr=o("electra"),fMr=o(" \u2014 "),$U=a("a"),gMr=o("TFElectraForPreTraining"),hMr=o(" (ELECTRA model)"),uMr=l(),aC=a("li"),sMe=a("strong"),pMr=o("flaubert"),_Mr=o(" \u2014 "),kU=a("a"),bMr=o("TFFlaubertWithLMHeadModel"),vMr=o(" (FlauBERT model)"),FMr=l(),nC=a("li"),lMe=a("strong"),TMr=o("funnel"),MMr=o(" \u2014 "),SU=a("a"),EMr=o("TFFunnelForPreTraining"),CMr=o(" (Funnel Transformer model)"),wMr=l(),sC=a("li"),iMe=a("strong"),AMr=o("gpt2"),LMr=o(" \u2014 "),RU=a("a"),yMr=o("TFGPT2LMHeadModel"),xMr=o(" (OpenAI GPT-2 model)"),$Mr=l(),lC=a("li"),dMe=a("strong"),kMr=o("layoutlm"),SMr=o(" \u2014 "),PU=a("a"),RMr=o("TFLayoutLMForMaskedLM"),PMr=o(" (LayoutLM model)"),BMr=l(),iC=a("li"),cMe=a("strong"),IMr=o("lxmert"),NMr=o(" \u2014 "),BU=a("a"),qMr=o("TFLxmertForPreTraining"),jMr=o(" (LXMERT model)"),DMr=l(),dC=a("li"),mMe=a("strong"),GMr=o("mobilebert"),OMr=o(" \u2014 "),IU=a("a"),VMr=o("TFMobileBertForPreTraining"),XMr=o(" (MobileBERT model)"),zMr=l(),cC=a("li"),fMe=a("strong"),QMr=o("mpnet"),WMr=o(" \u2014 "),NU=a("a"),HMr=o("TFMPNetForMaskedLM"),UMr=o(" (MPNet model)"),JMr=l(),mC=a("li"),gMe=a("strong"),YMr=o("openai-gpt"),KMr=o(" \u2014 "),qU=a("a"),ZMr=o("TFOpenAIGPTLMHeadModel"),eEr=o(" (OpenAI GPT model)"),oEr=l(),fC=a("li"),hMe=a("strong"),rEr=o("roberta"),tEr=o(" \u2014 "),jU=a("a"),aEr=o("TFRobertaForMaskedLM"),nEr=o(" (RoBERTa model)"),sEr=l(),gC=a("li"),uMe=a("strong"),lEr=o("t5"),iEr=o(" \u2014 "),DU=a("a"),dEr=o("TFT5ForConditionalGeneration"),cEr=o(" (T5 model)"),mEr=l(),hC=a("li"),pMe=a("strong"),fEr=o("tapas"),gEr=o(" \u2014 "),GU=a("a"),hEr=o("TFTapasForMaskedLM"),uEr=o(" (TAPAS model)"),pEr=l(),uC=a("li"),_Me=a("strong"),_Er=o("transfo-xl"),bEr=o(" \u2014 "),OU=a("a"),vEr=o("TFTransfoXLLMHeadModel"),FEr=o(" (Transformer-XL model)"),TEr=l(),pC=a("li"),bMe=a("strong"),MEr=o("vit_mae"),EEr=o(" \u2014 "),VU=a("a"),CEr=o("TFViTMAEForPreTraining"),wEr=o(" (ViTMAE model)"),AEr=l(),_C=a("li"),vMe=a("strong"),LEr=o("xlm"),yEr=o(" \u2014 "),XU=a("a"),xEr=o("TFXLMWithLMHeadModel"),$Er=o(" (XLM model)"),kEr=l(),bC=a("li"),FMe=a("strong"),SEr=o("xlm-roberta"),REr=o(" \u2014 "),zU=a("a"),PEr=o("TFXLMRobertaForMaskedLM"),BEr=o(" (XLM-RoBERTa model)"),IEr=l(),vC=a("li"),TMe=a("strong"),NEr=o("xlnet"),qEr=o(" \u2014 "),QU=a("a"),jEr=o("TFXLNetLMHeadModel"),DEr=o(" (XLNet model)"),GEr=l(),F(FC.$$.fragment),PVe=l(),ic=a("h2"),TC=a("a"),MMe=a("span"),F(P9.$$.fragment),OEr=l(),EMe=a("span"),VEr=o("TFAutoModelForCausalLM"),BVe=l(),rr=a("div"),F(B9.$$.fragment),XEr=l(),dc=a("p"),zEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),WU=a("a"),QEr=o("from_pretrained()"),WEr=o(" class method or the "),HU=a("a"),HEr=o("from_config()"),UEr=o(` class
method.`),JEr=l(),I9=a("p"),YEr=o("This class cannot be instantiated directly using "),CMe=a("code"),KEr=o("__init__()"),ZEr=o(" (throws an error)."),e4r=l(),St=a("div"),F(N9.$$.fragment),o4r=l(),wMe=a("p"),r4r=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),t4r=l(),cc=a("p"),a4r=o(`Note:
Loading a model from its configuration file does `),AMe=a("strong"),n4r=o("not"),s4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UU=a("a"),l4r=o("from_pretrained()"),i4r=o(" to load the model weights."),d4r=l(),F(MC.$$.fragment),c4r=l(),$r=a("div"),F(q9.$$.fragment),m4r=l(),LMe=a("p"),f4r=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),g4r=l(),sn=a("p"),h4r=o("The model class to instantiate is selected based on the "),yMe=a("code"),u4r=o("model_type"),p4r=o(` property of the config object (either
passed as an argument or loaded from `),xMe=a("code"),_4r=o("pretrained_model_name_or_path"),b4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$Me=a("code"),v4r=o("pretrained_model_name_or_path"),F4r=o(":"),T4r=l(),Me=a("ul"),EC=a("li"),kMe=a("strong"),M4r=o("bert"),E4r=o(" \u2014 "),JU=a("a"),C4r=o("TFBertLMHeadModel"),w4r=o(" (BERT model)"),A4r=l(),CC=a("li"),SMe=a("strong"),L4r=o("camembert"),y4r=o(" \u2014 "),YU=a("a"),x4r=o("TFCamembertForCausalLM"),$4r=o(" (CamemBERT model)"),k4r=l(),wC=a("li"),RMe=a("strong"),S4r=o("ctrl"),R4r=o(" \u2014 "),KU=a("a"),P4r=o("TFCTRLLMHeadModel"),B4r=o(" (CTRL model)"),I4r=l(),AC=a("li"),PMe=a("strong"),N4r=o("gpt2"),q4r=o(" \u2014 "),ZU=a("a"),j4r=o("TFGPT2LMHeadModel"),D4r=o(" (OpenAI GPT-2 model)"),G4r=l(),LC=a("li"),BMe=a("strong"),O4r=o("gptj"),V4r=o(" \u2014 "),eJ=a("a"),X4r=o("TFGPTJForCausalLM"),z4r=o(" (GPT-J model)"),Q4r=l(),yC=a("li"),IMe=a("strong"),W4r=o("openai-gpt"),H4r=o(" \u2014 "),oJ=a("a"),U4r=o("TFOpenAIGPTLMHeadModel"),J4r=o(" (OpenAI GPT model)"),Y4r=l(),xC=a("li"),NMe=a("strong"),K4r=o("opt"),Z4r=o(" \u2014 "),rJ=a("a"),eCr=o("TFOPTForCausalLM"),oCr=o(" (OPT model)"),rCr=l(),$C=a("li"),qMe=a("strong"),tCr=o("rembert"),aCr=o(" \u2014 "),tJ=a("a"),nCr=o("TFRemBertForCausalLM"),sCr=o(" (RemBERT model)"),lCr=l(),kC=a("li"),jMe=a("strong"),iCr=o("roberta"),dCr=o(" \u2014 "),aJ=a("a"),cCr=o("TFRobertaForCausalLM"),mCr=o(" (RoBERTa model)"),fCr=l(),SC=a("li"),DMe=a("strong"),gCr=o("roformer"),hCr=o(" \u2014 "),nJ=a("a"),uCr=o("TFRoFormerForCausalLM"),pCr=o(" (RoFormer model)"),_Cr=l(),RC=a("li"),GMe=a("strong"),bCr=o("transfo-xl"),vCr=o(" \u2014 "),sJ=a("a"),FCr=o("TFTransfoXLLMHeadModel"),TCr=o(" (Transformer-XL model)"),MCr=l(),PC=a("li"),OMe=a("strong"),ECr=o("xlm"),CCr=o(" \u2014 "),lJ=a("a"),wCr=o("TFXLMWithLMHeadModel"),ACr=o(" (XLM model)"),LCr=l(),BC=a("li"),VMe=a("strong"),yCr=o("xlnet"),xCr=o(" \u2014 "),iJ=a("a"),$Cr=o("TFXLNetLMHeadModel"),kCr=o(" (XLNet model)"),SCr=l(),F(IC.$$.fragment),IVe=l(),mc=a("h2"),NC=a("a"),XMe=a("span"),F(j9.$$.fragment),RCr=l(),zMe=a("span"),PCr=o("TFAutoModelForImageClassification"),NVe=l(),tr=a("div"),F(D9.$$.fragment),BCr=l(),fc=a("p"),ICr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),dJ=a("a"),NCr=o("from_pretrained()"),qCr=o(" class method or the "),cJ=a("a"),jCr=o("from_config()"),DCr=o(` class
method.`),GCr=l(),G9=a("p"),OCr=o("This class cannot be instantiated directly using "),QMe=a("code"),VCr=o("__init__()"),XCr=o(" (throws an error)."),zCr=l(),Rt=a("div"),F(O9.$$.fragment),QCr=l(),WMe=a("p"),WCr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),HCr=l(),gc=a("p"),UCr=o(`Note:
Loading a model from its configuration file does `),HMe=a("strong"),JCr=o("not"),YCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mJ=a("a"),KCr=o("from_pretrained()"),ZCr=o(" to load the model weights."),e5r=l(),F(qC.$$.fragment),o5r=l(),kr=a("div"),F(V9.$$.fragment),r5r=l(),UMe=a("p"),t5r=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),a5r=l(),ln=a("p"),n5r=o("The model class to instantiate is selected based on the "),JMe=a("code"),s5r=o("model_type"),l5r=o(` property of the config object (either
passed as an argument or loaded from `),YMe=a("code"),i5r=o("pretrained_model_name_or_path"),d5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),KMe=a("code"),c5r=o("pretrained_model_name_or_path"),m5r=o(":"),f5r=l(),dn=a("ul"),jC=a("li"),ZMe=a("strong"),g5r=o("convnext"),h5r=o(" \u2014 "),fJ=a("a"),u5r=o("TFConvNextForImageClassification"),p5r=o(" (ConvNeXT model)"),_5r=l(),DC=a("li"),eEe=a("strong"),b5r=o("data2vec-vision"),v5r=o(" \u2014 "),gJ=a("a"),F5r=o("TFData2VecVisionForImageClassification"),T5r=o(" (Data2VecVision model)"),M5r=l(),GC=a("li"),oEe=a("strong"),E5r=o("swin"),C5r=o(" \u2014 "),hJ=a("a"),w5r=o("TFSwinForImageClassification"),A5r=o(" (Swin Transformer model)"),L5r=l(),OC=a("li"),rEe=a("strong"),y5r=o("vit"),x5r=o(" \u2014 "),uJ=a("a"),$5r=o("TFViTForImageClassification"),k5r=o(" (ViT model)"),S5r=l(),F(VC.$$.fragment),qVe=l(),hc=a("h2"),XC=a("a"),tEe=a("span"),F(X9.$$.fragment),R5r=l(),aEe=a("span"),P5r=o("TFAutoModelForMaskedLM"),jVe=l(),ar=a("div"),F(z9.$$.fragment),B5r=l(),uc=a("p"),I5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),pJ=a("a"),N5r=o("from_pretrained()"),q5r=o(" class method or the "),_J=a("a"),j5r=o("from_config()"),D5r=o(` class
method.`),G5r=l(),Q9=a("p"),O5r=o("This class cannot be instantiated directly using "),nEe=a("code"),V5r=o("__init__()"),X5r=o(" (throws an error)."),z5r=l(),Pt=a("div"),F(W9.$$.fragment),Q5r=l(),sEe=a("p"),W5r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),H5r=l(),pc=a("p"),U5r=o(`Note:
Loading a model from its configuration file does `),lEe=a("strong"),J5r=o("not"),Y5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bJ=a("a"),K5r=o("from_pretrained()"),Z5r=o(" to load the model weights."),e3r=l(),F(zC.$$.fragment),o3r=l(),Sr=a("div"),F(H9.$$.fragment),r3r=l(),iEe=a("p"),t3r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),a3r=l(),cn=a("p"),n3r=o("The model class to instantiate is selected based on the "),dEe=a("code"),s3r=o("model_type"),l3r=o(` property of the config object (either
passed as an argument or loaded from `),cEe=a("code"),i3r=o("pretrained_model_name_or_path"),d3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mEe=a("code"),c3r=o("pretrained_model_name_or_path"),m3r=o(":"),f3r=l(),ie=a("ul"),QC=a("li"),fEe=a("strong"),g3r=o("albert"),h3r=o(" \u2014 "),vJ=a("a"),u3r=o("TFAlbertForMaskedLM"),p3r=o(" (ALBERT model)"),_3r=l(),WC=a("li"),gEe=a("strong"),b3r=o("bert"),v3r=o(" \u2014 "),FJ=a("a"),F3r=o("TFBertForMaskedLM"),T3r=o(" (BERT model)"),M3r=l(),HC=a("li"),hEe=a("strong"),E3r=o("camembert"),C3r=o(" \u2014 "),TJ=a("a"),w3r=o("TFCamembertForMaskedLM"),A3r=o(" (CamemBERT model)"),L3r=l(),UC=a("li"),uEe=a("strong"),y3r=o("convbert"),x3r=o(" \u2014 "),MJ=a("a"),$3r=o("TFConvBertForMaskedLM"),k3r=o(" (ConvBERT model)"),S3r=l(),JC=a("li"),pEe=a("strong"),R3r=o("deberta"),P3r=o(" \u2014 "),EJ=a("a"),B3r=o("TFDebertaForMaskedLM"),I3r=o(" (DeBERTa model)"),N3r=l(),YC=a("li"),_Ee=a("strong"),q3r=o("deberta-v2"),j3r=o(" \u2014 "),CJ=a("a"),D3r=o("TFDebertaV2ForMaskedLM"),G3r=o(" (DeBERTa-v2 model)"),O3r=l(),KC=a("li"),bEe=a("strong"),V3r=o("distilbert"),X3r=o(" \u2014 "),wJ=a("a"),z3r=o("TFDistilBertForMaskedLM"),Q3r=o(" (DistilBERT model)"),W3r=l(),ZC=a("li"),vEe=a("strong"),H3r=o("electra"),U3r=o(" \u2014 "),AJ=a("a"),J3r=o("TFElectraForMaskedLM"),Y3r=o(" (ELECTRA model)"),K3r=l(),e5=a("li"),FEe=a("strong"),Z3r=o("flaubert"),e0r=o(" \u2014 "),LJ=a("a"),o0r=o("TFFlaubertWithLMHeadModel"),r0r=o(" (FlauBERT model)"),t0r=l(),o5=a("li"),TEe=a("strong"),a0r=o("funnel"),n0r=o(" \u2014 "),yJ=a("a"),s0r=o("TFFunnelForMaskedLM"),l0r=o(" (Funnel Transformer model)"),i0r=l(),r5=a("li"),MEe=a("strong"),d0r=o("layoutlm"),c0r=o(" \u2014 "),xJ=a("a"),m0r=o("TFLayoutLMForMaskedLM"),f0r=o(" (LayoutLM model)"),g0r=l(),t5=a("li"),EEe=a("strong"),h0r=o("longformer"),u0r=o(" \u2014 "),$J=a("a"),p0r=o("TFLongformerForMaskedLM"),_0r=o(" (Longformer model)"),b0r=l(),a5=a("li"),CEe=a("strong"),v0r=o("mobilebert"),F0r=o(" \u2014 "),kJ=a("a"),T0r=o("TFMobileBertForMaskedLM"),M0r=o(" (MobileBERT model)"),E0r=l(),n5=a("li"),wEe=a("strong"),C0r=o("mpnet"),w0r=o(" \u2014 "),SJ=a("a"),A0r=o("TFMPNetForMaskedLM"),L0r=o(" (MPNet model)"),y0r=l(),s5=a("li"),AEe=a("strong"),x0r=o("rembert"),$0r=o(" \u2014 "),RJ=a("a"),k0r=o("TFRemBertForMaskedLM"),S0r=o(" (RemBERT model)"),R0r=l(),l5=a("li"),LEe=a("strong"),P0r=o("roberta"),B0r=o(" \u2014 "),PJ=a("a"),I0r=o("TFRobertaForMaskedLM"),N0r=o(" (RoBERTa model)"),q0r=l(),i5=a("li"),yEe=a("strong"),j0r=o("roformer"),D0r=o(" \u2014 "),BJ=a("a"),G0r=o("TFRoFormerForMaskedLM"),O0r=o(" (RoFormer model)"),V0r=l(),d5=a("li"),xEe=a("strong"),X0r=o("tapas"),z0r=o(" \u2014 "),IJ=a("a"),Q0r=o("TFTapasForMaskedLM"),W0r=o(" (TAPAS model)"),H0r=l(),c5=a("li"),$Ee=a("strong"),U0r=o("xlm"),J0r=o(" \u2014 "),NJ=a("a"),Y0r=o("TFXLMWithLMHeadModel"),K0r=o(" (XLM model)"),Z0r=l(),m5=a("li"),kEe=a("strong"),ewr=o("xlm-roberta"),owr=o(" \u2014 "),qJ=a("a"),rwr=o("TFXLMRobertaForMaskedLM"),twr=o(" (XLM-RoBERTa model)"),awr=l(),F(f5.$$.fragment),DVe=l(),_c=a("h2"),g5=a("a"),SEe=a("span"),F(U9.$$.fragment),nwr=l(),REe=a("span"),swr=o("TFAutoModelForSeq2SeqLM"),GVe=l(),nr=a("div"),F(J9.$$.fragment),lwr=l(),bc=a("p"),iwr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),jJ=a("a"),dwr=o("from_pretrained()"),cwr=o(" class method or the "),DJ=a("a"),mwr=o("from_config()"),fwr=o(` class
method.`),gwr=l(),Y9=a("p"),hwr=o("This class cannot be instantiated directly using "),PEe=a("code"),uwr=o("__init__()"),pwr=o(" (throws an error)."),_wr=l(),Bt=a("div"),F(K9.$$.fragment),bwr=l(),BEe=a("p"),vwr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Fwr=l(),vc=a("p"),Twr=o(`Note:
Loading a model from its configuration file does `),IEe=a("strong"),Mwr=o("not"),Ewr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GJ=a("a"),Cwr=o("from_pretrained()"),wwr=o(" to load the model weights."),Awr=l(),F(h5.$$.fragment),Lwr=l(),Rr=a("div"),F(Z9.$$.fragment),ywr=l(),NEe=a("p"),xwr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),$wr=l(),mn=a("p"),kwr=o("The model class to instantiate is selected based on the "),qEe=a("code"),Swr=o("model_type"),Rwr=o(` property of the config object (either
passed as an argument or loaded from `),jEe=a("code"),Pwr=o("pretrained_model_name_or_path"),Bwr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),DEe=a("code"),Iwr=o("pretrained_model_name_or_path"),Nwr=o(":"),qwr=l(),ye=a("ul"),u5=a("li"),GEe=a("strong"),jwr=o("bart"),Dwr=o(" \u2014 "),OJ=a("a"),Gwr=o("TFBartForConditionalGeneration"),Owr=o(" (BART model)"),Vwr=l(),p5=a("li"),OEe=a("strong"),Xwr=o("blenderbot"),zwr=o(" \u2014 "),VJ=a("a"),Qwr=o("TFBlenderbotForConditionalGeneration"),Wwr=o(" (Blenderbot model)"),Hwr=l(),_5=a("li"),VEe=a("strong"),Uwr=o("blenderbot-small"),Jwr=o(" \u2014 "),XJ=a("a"),Ywr=o("TFBlenderbotSmallForConditionalGeneration"),Kwr=o(" (BlenderbotSmall model)"),Zwr=l(),b5=a("li"),XEe=a("strong"),eAr=o("encoder-decoder"),oAr=o(" \u2014 "),zJ=a("a"),rAr=o("TFEncoderDecoderModel"),tAr=o(" (Encoder decoder model)"),aAr=l(),v5=a("li"),zEe=a("strong"),nAr=o("led"),sAr=o(" \u2014 "),QJ=a("a"),lAr=o("TFLEDForConditionalGeneration"),iAr=o(" (LED model)"),dAr=l(),F5=a("li"),QEe=a("strong"),cAr=o("marian"),mAr=o(" \u2014 "),WJ=a("a"),fAr=o("TFMarianMTModel"),gAr=o(" (Marian model)"),hAr=l(),T5=a("li"),WEe=a("strong"),uAr=o("mbart"),pAr=o(" \u2014 "),HJ=a("a"),_Ar=o("TFMBartForConditionalGeneration"),bAr=o(" (mBART model)"),vAr=l(),M5=a("li"),HEe=a("strong"),FAr=o("mt5"),TAr=o(" \u2014 "),UJ=a("a"),MAr=o("TFMT5ForConditionalGeneration"),EAr=o(" (MT5 model)"),CAr=l(),E5=a("li"),UEe=a("strong"),wAr=o("pegasus"),AAr=o(" \u2014 "),JJ=a("a"),LAr=o("TFPegasusForConditionalGeneration"),yAr=o(" (Pegasus model)"),xAr=l(),C5=a("li"),JEe=a("strong"),$Ar=o("t5"),kAr=o(" \u2014 "),YJ=a("a"),SAr=o("TFT5ForConditionalGeneration"),RAr=o(" (T5 model)"),PAr=l(),F(w5.$$.fragment),OVe=l(),Fc=a("h2"),A5=a("a"),YEe=a("span"),F(ex.$$.fragment),BAr=l(),KEe=a("span"),IAr=o("TFAutoModelForSequenceClassification"),VVe=l(),sr=a("div"),F(ox.$$.fragment),NAr=l(),Tc=a("p"),qAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),KJ=a("a"),jAr=o("from_pretrained()"),DAr=o(" class method or the "),ZJ=a("a"),GAr=o("from_config()"),OAr=o(` class
method.`),VAr=l(),rx=a("p"),XAr=o("This class cannot be instantiated directly using "),ZEe=a("code"),zAr=o("__init__()"),QAr=o(" (throws an error)."),WAr=l(),It=a("div"),F(tx.$$.fragment),HAr=l(),e4e=a("p"),UAr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),JAr=l(),Mc=a("p"),YAr=o(`Note:
Loading a model from its configuration file does `),o4e=a("strong"),KAr=o("not"),ZAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eY=a("a"),e6r=o("from_pretrained()"),o6r=o(" to load the model weights."),r6r=l(),F(L5.$$.fragment),t6r=l(),Pr=a("div"),F(ax.$$.fragment),a6r=l(),r4e=a("p"),n6r=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),s6r=l(),fn=a("p"),l6r=o("The model class to instantiate is selected based on the "),t4e=a("code"),i6r=o("model_type"),d6r=o(` property of the config object (either
passed as an argument or loaded from `),a4e=a("code"),c6r=o("pretrained_model_name_or_path"),m6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n4e=a("code"),f6r=o("pretrained_model_name_or_path"),g6r=o(":"),h6r=l(),te=a("ul"),y5=a("li"),s4e=a("strong"),u6r=o("albert"),p6r=o(" \u2014 "),oY=a("a"),_6r=o("TFAlbertForSequenceClassification"),b6r=o(" (ALBERT model)"),v6r=l(),x5=a("li"),l4e=a("strong"),F6r=o("bert"),T6r=o(" \u2014 "),rY=a("a"),M6r=o("TFBertForSequenceClassification"),E6r=o(" (BERT model)"),C6r=l(),$5=a("li"),i4e=a("strong"),w6r=o("camembert"),A6r=o(" \u2014 "),tY=a("a"),L6r=o("TFCamembertForSequenceClassification"),y6r=o(" (CamemBERT model)"),x6r=l(),k5=a("li"),d4e=a("strong"),$6r=o("convbert"),k6r=o(" \u2014 "),aY=a("a"),S6r=o("TFConvBertForSequenceClassification"),R6r=o(" (ConvBERT model)"),P6r=l(),S5=a("li"),c4e=a("strong"),B6r=o("ctrl"),I6r=o(" \u2014 "),nY=a("a"),N6r=o("TFCTRLForSequenceClassification"),q6r=o(" (CTRL model)"),j6r=l(),R5=a("li"),m4e=a("strong"),D6r=o("deberta"),G6r=o(" \u2014 "),sY=a("a"),O6r=o("TFDebertaForSequenceClassification"),V6r=o(" (DeBERTa model)"),X6r=l(),P5=a("li"),f4e=a("strong"),z6r=o("deberta-v2"),Q6r=o(" \u2014 "),lY=a("a"),W6r=o("TFDebertaV2ForSequenceClassification"),H6r=o(" (DeBERTa-v2 model)"),U6r=l(),B5=a("li"),g4e=a("strong"),J6r=o("distilbert"),Y6r=o(" \u2014 "),iY=a("a"),K6r=o("TFDistilBertForSequenceClassification"),Z6r=o(" (DistilBERT model)"),eLr=l(),I5=a("li"),h4e=a("strong"),oLr=o("electra"),rLr=o(" \u2014 "),dY=a("a"),tLr=o("TFElectraForSequenceClassification"),aLr=o(" (ELECTRA model)"),nLr=l(),N5=a("li"),u4e=a("strong"),sLr=o("flaubert"),lLr=o(" \u2014 "),cY=a("a"),iLr=o("TFFlaubertForSequenceClassification"),dLr=o(" (FlauBERT model)"),cLr=l(),q5=a("li"),p4e=a("strong"),mLr=o("funnel"),fLr=o(" \u2014 "),mY=a("a"),gLr=o("TFFunnelForSequenceClassification"),hLr=o(" (Funnel Transformer model)"),uLr=l(),j5=a("li"),_4e=a("strong"),pLr=o("gpt2"),_Lr=o(" \u2014 "),fY=a("a"),bLr=o("TFGPT2ForSequenceClassification"),vLr=o(" (OpenAI GPT-2 model)"),FLr=l(),D5=a("li"),b4e=a("strong"),TLr=o("gptj"),MLr=o(" \u2014 "),gY=a("a"),ELr=o("TFGPTJForSequenceClassification"),CLr=o(" (GPT-J model)"),wLr=l(),G5=a("li"),v4e=a("strong"),ALr=o("layoutlm"),LLr=o(" \u2014 "),hY=a("a"),yLr=o("TFLayoutLMForSequenceClassification"),xLr=o(" (LayoutLM model)"),$Lr=l(),O5=a("li"),F4e=a("strong"),kLr=o("longformer"),SLr=o(" \u2014 "),uY=a("a"),RLr=o("TFLongformerForSequenceClassification"),PLr=o(" (Longformer model)"),BLr=l(),V5=a("li"),T4e=a("strong"),ILr=o("mobilebert"),NLr=o(" \u2014 "),pY=a("a"),qLr=o("TFMobileBertForSequenceClassification"),jLr=o(" (MobileBERT model)"),DLr=l(),X5=a("li"),M4e=a("strong"),GLr=o("mpnet"),OLr=o(" \u2014 "),_Y=a("a"),VLr=o("TFMPNetForSequenceClassification"),XLr=o(" (MPNet model)"),zLr=l(),z5=a("li"),E4e=a("strong"),QLr=o("openai-gpt"),WLr=o(" \u2014 "),bY=a("a"),HLr=o("TFOpenAIGPTForSequenceClassification"),ULr=o(" (OpenAI GPT model)"),JLr=l(),Q5=a("li"),C4e=a("strong"),YLr=o("rembert"),KLr=o(" \u2014 "),vY=a("a"),ZLr=o("TFRemBertForSequenceClassification"),e7r=o(" (RemBERT model)"),o7r=l(),W5=a("li"),w4e=a("strong"),r7r=o("roberta"),t7r=o(" \u2014 "),FY=a("a"),a7r=o("TFRobertaForSequenceClassification"),n7r=o(" (RoBERTa model)"),s7r=l(),H5=a("li"),A4e=a("strong"),l7r=o("roformer"),i7r=o(" \u2014 "),TY=a("a"),d7r=o("TFRoFormerForSequenceClassification"),c7r=o(" (RoFormer model)"),m7r=l(),U5=a("li"),L4e=a("strong"),f7r=o("tapas"),g7r=o(" \u2014 "),MY=a("a"),h7r=o("TFTapasForSequenceClassification"),u7r=o(" (TAPAS model)"),p7r=l(),J5=a("li"),y4e=a("strong"),_7r=o("transfo-xl"),b7r=o(" \u2014 "),EY=a("a"),v7r=o("TFTransfoXLForSequenceClassification"),F7r=o(" (Transformer-XL model)"),T7r=l(),Y5=a("li"),x4e=a("strong"),M7r=o("xlm"),E7r=o(" \u2014 "),CY=a("a"),C7r=o("TFXLMForSequenceClassification"),w7r=o(" (XLM model)"),A7r=l(),K5=a("li"),$4e=a("strong"),L7r=o("xlm-roberta"),y7r=o(" \u2014 "),wY=a("a"),x7r=o("TFXLMRobertaForSequenceClassification"),$7r=o(" (XLM-RoBERTa model)"),k7r=l(),Z5=a("li"),k4e=a("strong"),S7r=o("xlnet"),R7r=o(" \u2014 "),AY=a("a"),P7r=o("TFXLNetForSequenceClassification"),B7r=o(" (XLNet model)"),I7r=l(),F(e3.$$.fragment),XVe=l(),Ec=a("h2"),o3=a("a"),S4e=a("span"),F(nx.$$.fragment),N7r=l(),R4e=a("span"),q7r=o("TFAutoModelForMultipleChoice"),zVe=l(),lr=a("div"),F(sx.$$.fragment),j7r=l(),Cc=a("p"),D7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),LY=a("a"),G7r=o("from_pretrained()"),O7r=o(" class method or the "),yY=a("a"),V7r=o("from_config()"),X7r=o(` class
method.`),z7r=l(),lx=a("p"),Q7r=o("This class cannot be instantiated directly using "),P4e=a("code"),W7r=o("__init__()"),H7r=o(" (throws an error)."),U7r=l(),Nt=a("div"),F(ix.$$.fragment),J7r=l(),B4e=a("p"),Y7r=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),K7r=l(),wc=a("p"),Z7r=o(`Note:
Loading a model from its configuration file does `),I4e=a("strong"),eyr=o("not"),oyr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xY=a("a"),ryr=o("from_pretrained()"),tyr=o(" to load the model weights."),ayr=l(),F(r3.$$.fragment),nyr=l(),Br=a("div"),F(dx.$$.fragment),syr=l(),N4e=a("p"),lyr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),iyr=l(),gn=a("p"),dyr=o("The model class to instantiate is selected based on the "),q4e=a("code"),cyr=o("model_type"),myr=o(` property of the config object (either
passed as an argument or loaded from `),j4e=a("code"),fyr=o("pretrained_model_name_or_path"),gyr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D4e=a("code"),hyr=o("pretrained_model_name_or_path"),uyr=o(":"),pyr=l(),pe=a("ul"),t3=a("li"),G4e=a("strong"),_yr=o("albert"),byr=o(" \u2014 "),$Y=a("a"),vyr=o("TFAlbertForMultipleChoice"),Fyr=o(" (ALBERT model)"),Tyr=l(),a3=a("li"),O4e=a("strong"),Myr=o("bert"),Eyr=o(" \u2014 "),kY=a("a"),Cyr=o("TFBertForMultipleChoice"),wyr=o(" (BERT model)"),Ayr=l(),n3=a("li"),V4e=a("strong"),Lyr=o("camembert"),yyr=o(" \u2014 "),SY=a("a"),xyr=o("TFCamembertForMultipleChoice"),$yr=o(" (CamemBERT model)"),kyr=l(),s3=a("li"),X4e=a("strong"),Syr=o("convbert"),Ryr=o(" \u2014 "),RY=a("a"),Pyr=o("TFConvBertForMultipleChoice"),Byr=o(" (ConvBERT model)"),Iyr=l(),l3=a("li"),z4e=a("strong"),Nyr=o("distilbert"),qyr=o(" \u2014 "),PY=a("a"),jyr=o("TFDistilBertForMultipleChoice"),Dyr=o(" (DistilBERT model)"),Gyr=l(),i3=a("li"),Q4e=a("strong"),Oyr=o("electra"),Vyr=o(" \u2014 "),BY=a("a"),Xyr=o("TFElectraForMultipleChoice"),zyr=o(" (ELECTRA model)"),Qyr=l(),d3=a("li"),W4e=a("strong"),Wyr=o("flaubert"),Hyr=o(" \u2014 "),IY=a("a"),Uyr=o("TFFlaubertForMultipleChoice"),Jyr=o(" (FlauBERT model)"),Yyr=l(),c3=a("li"),H4e=a("strong"),Kyr=o("funnel"),Zyr=o(" \u2014 "),NY=a("a"),e8r=o("TFFunnelForMultipleChoice"),o8r=o(" (Funnel Transformer model)"),r8r=l(),m3=a("li"),U4e=a("strong"),t8r=o("longformer"),a8r=o(" \u2014 "),qY=a("a"),n8r=o("TFLongformerForMultipleChoice"),s8r=o(" (Longformer model)"),l8r=l(),f3=a("li"),J4e=a("strong"),i8r=o("mobilebert"),d8r=o(" \u2014 "),jY=a("a"),c8r=o("TFMobileBertForMultipleChoice"),m8r=o(" (MobileBERT model)"),f8r=l(),g3=a("li"),Y4e=a("strong"),g8r=o("mpnet"),h8r=o(" \u2014 "),DY=a("a"),u8r=o("TFMPNetForMultipleChoice"),p8r=o(" (MPNet model)"),_8r=l(),h3=a("li"),K4e=a("strong"),b8r=o("rembert"),v8r=o(" \u2014 "),GY=a("a"),F8r=o("TFRemBertForMultipleChoice"),T8r=o(" (RemBERT model)"),M8r=l(),u3=a("li"),Z4e=a("strong"),E8r=o("roberta"),C8r=o(" \u2014 "),OY=a("a"),w8r=o("TFRobertaForMultipleChoice"),A8r=o(" (RoBERTa model)"),L8r=l(),p3=a("li"),eCe=a("strong"),y8r=o("roformer"),x8r=o(" \u2014 "),VY=a("a"),$8r=o("TFRoFormerForMultipleChoice"),k8r=o(" (RoFormer model)"),S8r=l(),_3=a("li"),oCe=a("strong"),R8r=o("xlm"),P8r=o(" \u2014 "),XY=a("a"),B8r=o("TFXLMForMultipleChoice"),I8r=o(" (XLM model)"),N8r=l(),b3=a("li"),rCe=a("strong"),q8r=o("xlm-roberta"),j8r=o(" \u2014 "),zY=a("a"),D8r=o("TFXLMRobertaForMultipleChoice"),G8r=o(" (XLM-RoBERTa model)"),O8r=l(),v3=a("li"),tCe=a("strong"),V8r=o("xlnet"),X8r=o(" \u2014 "),QY=a("a"),z8r=o("TFXLNetForMultipleChoice"),Q8r=o(" (XLNet model)"),W8r=l(),F(F3.$$.fragment),QVe=l(),Ac=a("h2"),T3=a("a"),aCe=a("span"),F(cx.$$.fragment),H8r=l(),nCe=a("span"),U8r=o("TFAutoModelForNextSentencePrediction"),WVe=l(),ir=a("div"),F(mx.$$.fragment),J8r=l(),Lc=a("p"),Y8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),WY=a("a"),K8r=o("from_pretrained()"),Z8r=o(" class method or the "),HY=a("a"),e9r=o("from_config()"),o9r=o(` class
method.`),r9r=l(),fx=a("p"),t9r=o("This class cannot be instantiated directly using "),sCe=a("code"),a9r=o("__init__()"),n9r=o(" (throws an error)."),s9r=l(),qt=a("div"),F(gx.$$.fragment),l9r=l(),lCe=a("p"),i9r=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),d9r=l(),yc=a("p"),c9r=o(`Note:
Loading a model from its configuration file does `),iCe=a("strong"),m9r=o("not"),f9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UY=a("a"),g9r=o("from_pretrained()"),h9r=o(" to load the model weights."),u9r=l(),F(M3.$$.fragment),p9r=l(),Ir=a("div"),F(hx.$$.fragment),_9r=l(),dCe=a("p"),b9r=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),v9r=l(),hn=a("p"),F9r=o("The model class to instantiate is selected based on the "),cCe=a("code"),T9r=o("model_type"),M9r=o(` property of the config object (either
passed as an argument or loaded from `),mCe=a("code"),E9r=o("pretrained_model_name_or_path"),C9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fCe=a("code"),w9r=o("pretrained_model_name_or_path"),A9r=o(":"),L9r=l(),ux=a("ul"),E3=a("li"),gCe=a("strong"),y9r=o("bert"),x9r=o(" \u2014 "),JY=a("a"),$9r=o("TFBertForNextSentencePrediction"),k9r=o(" (BERT model)"),S9r=l(),C3=a("li"),hCe=a("strong"),R9r=o("mobilebert"),P9r=o(" \u2014 "),YY=a("a"),B9r=o("TFMobileBertForNextSentencePrediction"),I9r=o(" (MobileBERT model)"),N9r=l(),F(w3.$$.fragment),HVe=l(),xc=a("h2"),A3=a("a"),uCe=a("span"),F(px.$$.fragment),q9r=l(),pCe=a("span"),j9r=o("TFAutoModelForTableQuestionAnswering"),UVe=l(),dr=a("div"),F(_x.$$.fragment),D9r=l(),$c=a("p"),G9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),KY=a("a"),O9r=o("from_pretrained()"),V9r=o(" class method or the "),ZY=a("a"),X9r=o("from_config()"),z9r=o(` class
method.`),Q9r=l(),bx=a("p"),W9r=o("This class cannot be instantiated directly using "),_Ce=a("code"),H9r=o("__init__()"),U9r=o(" (throws an error)."),J9r=l(),jt=a("div"),F(vx.$$.fragment),Y9r=l(),bCe=a("p"),K9r=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Z9r=l(),kc=a("p"),exr=o(`Note:
Loading a model from its configuration file does `),vCe=a("strong"),oxr=o("not"),rxr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eK=a("a"),txr=o("from_pretrained()"),axr=o(" to load the model weights."),nxr=l(),F(L3.$$.fragment),sxr=l(),Nr=a("div"),F(Fx.$$.fragment),lxr=l(),FCe=a("p"),ixr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),dxr=l(),un=a("p"),cxr=o("The model class to instantiate is selected based on the "),TCe=a("code"),mxr=o("model_type"),fxr=o(` property of the config object (either
passed as an argument or loaded from `),MCe=a("code"),gxr=o("pretrained_model_name_or_path"),hxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ECe=a("code"),uxr=o("pretrained_model_name_or_path"),pxr=o(":"),_xr=l(),CCe=a("ul"),y3=a("li"),wCe=a("strong"),bxr=o("tapas"),vxr=o(" \u2014 "),oK=a("a"),Fxr=o("TFTapasForQuestionAnswering"),Txr=o(" (TAPAS model)"),Mxr=l(),F(x3.$$.fragment),JVe=l(),Sc=a("h2"),$3=a("a"),ACe=a("span"),F(Tx.$$.fragment),Exr=l(),LCe=a("span"),Cxr=o("TFAutoModelForTokenClassification"),YVe=l(),cr=a("div"),F(Mx.$$.fragment),wxr=l(),Rc=a("p"),Axr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),rK=a("a"),Lxr=o("from_pretrained()"),yxr=o(" class method or the "),tK=a("a"),xxr=o("from_config()"),$xr=o(` class
method.`),kxr=l(),Ex=a("p"),Sxr=o("This class cannot be instantiated directly using "),yCe=a("code"),Rxr=o("__init__()"),Pxr=o(" (throws an error)."),Bxr=l(),Dt=a("div"),F(Cx.$$.fragment),Ixr=l(),xCe=a("p"),Nxr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),qxr=l(),Pc=a("p"),jxr=o(`Note:
Loading a model from its configuration file does `),$Ce=a("strong"),Dxr=o("not"),Gxr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aK=a("a"),Oxr=o("from_pretrained()"),Vxr=o(" to load the model weights."),Xxr=l(),F(k3.$$.fragment),zxr=l(),qr=a("div"),F(wx.$$.fragment),Qxr=l(),kCe=a("p"),Wxr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Hxr=l(),pn=a("p"),Uxr=o("The model class to instantiate is selected based on the "),SCe=a("code"),Jxr=o("model_type"),Yxr=o(` property of the config object (either
passed as an argument or loaded from `),RCe=a("code"),Kxr=o("pretrained_model_name_or_path"),Zxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PCe=a("code"),e$r=o("pretrained_model_name_or_path"),o$r=o(":"),r$r=l(),de=a("ul"),S3=a("li"),BCe=a("strong"),t$r=o("albert"),a$r=o(" \u2014 "),nK=a("a"),n$r=o("TFAlbertForTokenClassification"),s$r=o(" (ALBERT model)"),l$r=l(),R3=a("li"),ICe=a("strong"),i$r=o("bert"),d$r=o(" \u2014 "),sK=a("a"),c$r=o("TFBertForTokenClassification"),m$r=o(" (BERT model)"),f$r=l(),P3=a("li"),NCe=a("strong"),g$r=o("camembert"),h$r=o(" \u2014 "),lK=a("a"),u$r=o("TFCamembertForTokenClassification"),p$r=o(" (CamemBERT model)"),_$r=l(),B3=a("li"),qCe=a("strong"),b$r=o("convbert"),v$r=o(" \u2014 "),iK=a("a"),F$r=o("TFConvBertForTokenClassification"),T$r=o(" (ConvBERT model)"),M$r=l(),I3=a("li"),jCe=a("strong"),E$r=o("deberta"),C$r=o(" \u2014 "),dK=a("a"),w$r=o("TFDebertaForTokenClassification"),A$r=o(" (DeBERTa model)"),L$r=l(),N3=a("li"),DCe=a("strong"),y$r=o("deberta-v2"),x$r=o(" \u2014 "),cK=a("a"),$$r=o("TFDebertaV2ForTokenClassification"),k$r=o(" (DeBERTa-v2 model)"),S$r=l(),q3=a("li"),GCe=a("strong"),R$r=o("distilbert"),P$r=o(" \u2014 "),mK=a("a"),B$r=o("TFDistilBertForTokenClassification"),I$r=o(" (DistilBERT model)"),N$r=l(),j3=a("li"),OCe=a("strong"),q$r=o("electra"),j$r=o(" \u2014 "),fK=a("a"),D$r=o("TFElectraForTokenClassification"),G$r=o(" (ELECTRA model)"),O$r=l(),D3=a("li"),VCe=a("strong"),V$r=o("flaubert"),X$r=o(" \u2014 "),gK=a("a"),z$r=o("TFFlaubertForTokenClassification"),Q$r=o(" (FlauBERT model)"),W$r=l(),G3=a("li"),XCe=a("strong"),H$r=o("funnel"),U$r=o(" \u2014 "),hK=a("a"),J$r=o("TFFunnelForTokenClassification"),Y$r=o(" (Funnel Transformer model)"),K$r=l(),O3=a("li"),zCe=a("strong"),Z$r=o("layoutlm"),ekr=o(" \u2014 "),uK=a("a"),okr=o("TFLayoutLMForTokenClassification"),rkr=o(" (LayoutLM model)"),tkr=l(),V3=a("li"),QCe=a("strong"),akr=o("longformer"),nkr=o(" \u2014 "),pK=a("a"),skr=o("TFLongformerForTokenClassification"),lkr=o(" (Longformer model)"),ikr=l(),X3=a("li"),WCe=a("strong"),dkr=o("mobilebert"),ckr=o(" \u2014 "),_K=a("a"),mkr=o("TFMobileBertForTokenClassification"),fkr=o(" (MobileBERT model)"),gkr=l(),z3=a("li"),HCe=a("strong"),hkr=o("mpnet"),ukr=o(" \u2014 "),bK=a("a"),pkr=o("TFMPNetForTokenClassification"),_kr=o(" (MPNet model)"),bkr=l(),Q3=a("li"),UCe=a("strong"),vkr=o("rembert"),Fkr=o(" \u2014 "),vK=a("a"),Tkr=o("TFRemBertForTokenClassification"),Mkr=o(" (RemBERT model)"),Ekr=l(),W3=a("li"),JCe=a("strong"),Ckr=o("roberta"),wkr=o(" \u2014 "),FK=a("a"),Akr=o("TFRobertaForTokenClassification"),Lkr=o(" (RoBERTa model)"),ykr=l(),H3=a("li"),YCe=a("strong"),xkr=o("roformer"),$kr=o(" \u2014 "),TK=a("a"),kkr=o("TFRoFormerForTokenClassification"),Skr=o(" (RoFormer model)"),Rkr=l(),U3=a("li"),KCe=a("strong"),Pkr=o("xlm"),Bkr=o(" \u2014 "),MK=a("a"),Ikr=o("TFXLMForTokenClassification"),Nkr=o(" (XLM model)"),qkr=l(),J3=a("li"),ZCe=a("strong"),jkr=o("xlm-roberta"),Dkr=o(" \u2014 "),EK=a("a"),Gkr=o("TFXLMRobertaForTokenClassification"),Okr=o(" (XLM-RoBERTa model)"),Vkr=l(),Y3=a("li"),e5e=a("strong"),Xkr=o("xlnet"),zkr=o(" \u2014 "),CK=a("a"),Qkr=o("TFXLNetForTokenClassification"),Wkr=o(" (XLNet model)"),Hkr=l(),F(K3.$$.fragment),KVe=l(),Bc=a("h2"),Z3=a("a"),o5e=a("span"),F(Ax.$$.fragment),Ukr=l(),r5e=a("span"),Jkr=o("TFAutoModelForQuestionAnswering"),ZVe=l(),mr=a("div"),F(Lx.$$.fragment),Ykr=l(),Ic=a("p"),Kkr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),wK=a("a"),Zkr=o("from_pretrained()"),eSr=o(" class method or the "),AK=a("a"),oSr=o("from_config()"),rSr=o(` class
method.`),tSr=l(),yx=a("p"),aSr=o("This class cannot be instantiated directly using "),t5e=a("code"),nSr=o("__init__()"),sSr=o(" (throws an error)."),lSr=l(),Gt=a("div"),F(xx.$$.fragment),iSr=l(),a5e=a("p"),dSr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),cSr=l(),Nc=a("p"),mSr=o(`Note:
Loading a model from its configuration file does `),n5e=a("strong"),fSr=o("not"),gSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LK=a("a"),hSr=o("from_pretrained()"),uSr=o(" to load the model weights."),pSr=l(),F(e0.$$.fragment),_Sr=l(),jr=a("div"),F($x.$$.fragment),bSr=l(),s5e=a("p"),vSr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),FSr=l(),_n=a("p"),TSr=o("The model class to instantiate is selected based on the "),l5e=a("code"),MSr=o("model_type"),ESr=o(` property of the config object (either
passed as an argument or loaded from `),i5e=a("code"),CSr=o("pretrained_model_name_or_path"),wSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d5e=a("code"),ASr=o("pretrained_model_name_or_path"),LSr=o(":"),ySr=l(),ce=a("ul"),o0=a("li"),c5e=a("strong"),xSr=o("albert"),$Sr=o(" \u2014 "),yK=a("a"),kSr=o("TFAlbertForQuestionAnswering"),SSr=o(" (ALBERT model)"),RSr=l(),r0=a("li"),m5e=a("strong"),PSr=o("bert"),BSr=o(" \u2014 "),xK=a("a"),ISr=o("TFBertForQuestionAnswering"),NSr=o(" (BERT model)"),qSr=l(),t0=a("li"),f5e=a("strong"),jSr=o("camembert"),DSr=o(" \u2014 "),$K=a("a"),GSr=o("TFCamembertForQuestionAnswering"),OSr=o(" (CamemBERT model)"),VSr=l(),a0=a("li"),g5e=a("strong"),XSr=o("convbert"),zSr=o(" \u2014 "),kK=a("a"),QSr=o("TFConvBertForQuestionAnswering"),WSr=o(" (ConvBERT model)"),HSr=l(),n0=a("li"),h5e=a("strong"),USr=o("deberta"),JSr=o(" \u2014 "),SK=a("a"),YSr=o("TFDebertaForQuestionAnswering"),KSr=o(" (DeBERTa model)"),ZSr=l(),s0=a("li"),u5e=a("strong"),eRr=o("deberta-v2"),oRr=o(" \u2014 "),RK=a("a"),rRr=o("TFDebertaV2ForQuestionAnswering"),tRr=o(" (DeBERTa-v2 model)"),aRr=l(),l0=a("li"),p5e=a("strong"),nRr=o("distilbert"),sRr=o(" \u2014 "),PK=a("a"),lRr=o("TFDistilBertForQuestionAnswering"),iRr=o(" (DistilBERT model)"),dRr=l(),i0=a("li"),_5e=a("strong"),cRr=o("electra"),mRr=o(" \u2014 "),BK=a("a"),fRr=o("TFElectraForQuestionAnswering"),gRr=o(" (ELECTRA model)"),hRr=l(),d0=a("li"),b5e=a("strong"),uRr=o("flaubert"),pRr=o(" \u2014 "),IK=a("a"),_Rr=o("TFFlaubertForQuestionAnsweringSimple"),bRr=o(" (FlauBERT model)"),vRr=l(),c0=a("li"),v5e=a("strong"),FRr=o("funnel"),TRr=o(" \u2014 "),NK=a("a"),MRr=o("TFFunnelForQuestionAnswering"),ERr=o(" (Funnel Transformer model)"),CRr=l(),m0=a("li"),F5e=a("strong"),wRr=o("gptj"),ARr=o(" \u2014 "),qK=a("a"),LRr=o("TFGPTJForQuestionAnswering"),yRr=o(" (GPT-J model)"),xRr=l(),f0=a("li"),T5e=a("strong"),$Rr=o("longformer"),kRr=o(" \u2014 "),jK=a("a"),SRr=o("TFLongformerForQuestionAnswering"),RRr=o(" (Longformer model)"),PRr=l(),g0=a("li"),M5e=a("strong"),BRr=o("mobilebert"),IRr=o(" \u2014 "),DK=a("a"),NRr=o("TFMobileBertForQuestionAnswering"),qRr=o(" (MobileBERT model)"),jRr=l(),h0=a("li"),E5e=a("strong"),DRr=o("mpnet"),GRr=o(" \u2014 "),GK=a("a"),ORr=o("TFMPNetForQuestionAnswering"),VRr=o(" (MPNet model)"),XRr=l(),u0=a("li"),C5e=a("strong"),zRr=o("rembert"),QRr=o(" \u2014 "),OK=a("a"),WRr=o("TFRemBertForQuestionAnswering"),HRr=o(" (RemBERT model)"),URr=l(),p0=a("li"),w5e=a("strong"),JRr=o("roberta"),YRr=o(" \u2014 "),VK=a("a"),KRr=o("TFRobertaForQuestionAnswering"),ZRr=o(" (RoBERTa model)"),ePr=l(),_0=a("li"),A5e=a("strong"),oPr=o("roformer"),rPr=o(" \u2014 "),XK=a("a"),tPr=o("TFRoFormerForQuestionAnswering"),aPr=o(" (RoFormer model)"),nPr=l(),b0=a("li"),L5e=a("strong"),sPr=o("xlm"),lPr=o(" \u2014 "),zK=a("a"),iPr=o("TFXLMForQuestionAnsweringSimple"),dPr=o(" (XLM model)"),cPr=l(),v0=a("li"),y5e=a("strong"),mPr=o("xlm-roberta"),fPr=o(" \u2014 "),QK=a("a"),gPr=o("TFXLMRobertaForQuestionAnswering"),hPr=o(" (XLM-RoBERTa model)"),uPr=l(),F0=a("li"),x5e=a("strong"),pPr=o("xlnet"),_Pr=o(" \u2014 "),WK=a("a"),bPr=o("TFXLNetForQuestionAnsweringSimple"),vPr=o(" (XLNet model)"),FPr=l(),F(T0.$$.fragment),eXe=l(),qc=a("h2"),M0=a("a"),$5e=a("span"),F(kx.$$.fragment),TPr=l(),k5e=a("span"),MPr=o("TFAutoModelForVision2Seq"),oXe=l(),fr=a("div"),F(Sx.$$.fragment),EPr=l(),jc=a("p"),CPr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),HK=a("a"),wPr=o("from_pretrained()"),APr=o(" class method or the "),UK=a("a"),LPr=o("from_config()"),yPr=o(` class
method.`),xPr=l(),Rx=a("p"),$Pr=o("This class cannot be instantiated directly using "),S5e=a("code"),kPr=o("__init__()"),SPr=o(" (throws an error)."),RPr=l(),Ot=a("div"),F(Px.$$.fragment),PPr=l(),R5e=a("p"),BPr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),IPr=l(),Dc=a("p"),NPr=o(`Note:
Loading a model from its configuration file does `),P5e=a("strong"),qPr=o("not"),jPr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JK=a("a"),DPr=o("from_pretrained()"),GPr=o(" to load the model weights."),OPr=l(),F(E0.$$.fragment),VPr=l(),Dr=a("div"),F(Bx.$$.fragment),XPr=l(),B5e=a("p"),zPr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),QPr=l(),bn=a("p"),WPr=o("The model class to instantiate is selected based on the "),I5e=a("code"),HPr=o("model_type"),UPr=o(` property of the config object (either
passed as an argument or loaded from `),N5e=a("code"),JPr=o("pretrained_model_name_or_path"),YPr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q5e=a("code"),KPr=o("pretrained_model_name_or_path"),ZPr=o(":"),eBr=l(),j5e=a("ul"),C0=a("li"),D5e=a("strong"),oBr=o("vision-encoder-decoder"),rBr=o(" \u2014 "),YK=a("a"),tBr=o("TFVisionEncoderDecoderModel"),aBr=o(" (Vision Encoder decoder model)"),nBr=l(),F(w0.$$.fragment),rXe=l(),Gc=a("h2"),A0=a("a"),G5e=a("span"),F(Ix.$$.fragment),sBr=l(),O5e=a("span"),lBr=o("TFAutoModelForSpeechSeq2Seq"),tXe=l(),gr=a("div"),F(Nx.$$.fragment),iBr=l(),Oc=a("p"),dBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),KK=a("a"),cBr=o("from_pretrained()"),mBr=o(" class method or the "),ZK=a("a"),fBr=o("from_config()"),gBr=o(` class
method.`),hBr=l(),qx=a("p"),uBr=o("This class cannot be instantiated directly using "),V5e=a("code"),pBr=o("__init__()"),_Br=o(" (throws an error)."),bBr=l(),Vt=a("div"),F(jx.$$.fragment),vBr=l(),X5e=a("p"),FBr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),TBr=l(),Vc=a("p"),MBr=o(`Note:
Loading a model from its configuration file does `),z5e=a("strong"),EBr=o("not"),CBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eZ=a("a"),wBr=o("from_pretrained()"),ABr=o(" to load the model weights."),LBr=l(),F(L0.$$.fragment),yBr=l(),Gr=a("div"),F(Dx.$$.fragment),xBr=l(),Q5e=a("p"),$Br=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),kBr=l(),vn=a("p"),SBr=o("The model class to instantiate is selected based on the "),W5e=a("code"),RBr=o("model_type"),PBr=o(` property of the config object (either
passed as an argument or loaded from `),H5e=a("code"),BBr=o("pretrained_model_name_or_path"),IBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U5e=a("code"),NBr=o("pretrained_model_name_or_path"),qBr=o(":"),jBr=l(),J5e=a("ul"),y0=a("li"),Y5e=a("strong"),DBr=o("speech_to_text"),GBr=o(" \u2014 "),oZ=a("a"),OBr=o("TFSpeech2TextForConditionalGeneration"),VBr=o(" (Speech2Text model)"),XBr=l(),F(x0.$$.fragment),aXe=l(),Xc=a("h2"),$0=a("a"),K5e=a("span"),F(Gx.$$.fragment),zBr=l(),Z5e=a("span"),QBr=o("FlaxAutoModel"),nXe=l(),hr=a("div"),F(Ox.$$.fragment),WBr=l(),zc=a("p"),HBr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),rZ=a("a"),UBr=o("from_pretrained()"),JBr=o(" class method or the "),tZ=a("a"),YBr=o("from_config()"),KBr=o(` class
method.`),ZBr=l(),Vx=a("p"),eIr=o("This class cannot be instantiated directly using "),e3e=a("code"),oIr=o("__init__()"),rIr=o(" (throws an error)."),tIr=l(),Xt=a("div"),F(Xx.$$.fragment),aIr=l(),o3e=a("p"),nIr=o("Instantiates one of the base model classes of the library from a configuration."),sIr=l(),Qc=a("p"),lIr=o(`Note:
Loading a model from its configuration file does `),r3e=a("strong"),iIr=o("not"),dIr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aZ=a("a"),cIr=o("from_pretrained()"),mIr=o(" to load the model weights."),fIr=l(),F(k0.$$.fragment),gIr=l(),Or=a("div"),F(zx.$$.fragment),hIr=l(),t3e=a("p"),uIr=o("Instantiate one of the base model classes of the library from a pretrained model."),pIr=l(),Fn=a("p"),_Ir=o("The model class to instantiate is selected based on the "),a3e=a("code"),bIr=o("model_type"),vIr=o(` property of the config object (either
passed as an argument or loaded from `),n3e=a("code"),FIr=o("pretrained_model_name_or_path"),TIr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s3e=a("code"),MIr=o("pretrained_model_name_or_path"),EIr=o(":"),CIr=l(),oe=a("ul"),S0=a("li"),l3e=a("strong"),wIr=o("albert"),AIr=o(" \u2014 "),nZ=a("a"),LIr=o("FlaxAlbertModel"),yIr=o(" (ALBERT model)"),xIr=l(),R0=a("li"),i3e=a("strong"),$Ir=o("bart"),kIr=o(" \u2014 "),sZ=a("a"),SIr=o("FlaxBartModel"),RIr=o(" (BART model)"),PIr=l(),P0=a("li"),d3e=a("strong"),BIr=o("beit"),IIr=o(" \u2014 "),lZ=a("a"),NIr=o("FlaxBeitModel"),qIr=o(" (BEiT model)"),jIr=l(),B0=a("li"),c3e=a("strong"),DIr=o("bert"),GIr=o(" \u2014 "),iZ=a("a"),OIr=o("FlaxBertModel"),VIr=o(" (BERT model)"),XIr=l(),I0=a("li"),m3e=a("strong"),zIr=o("big_bird"),QIr=o(" \u2014 "),dZ=a("a"),WIr=o("FlaxBigBirdModel"),HIr=o(" (BigBird model)"),UIr=l(),N0=a("li"),f3e=a("strong"),JIr=o("blenderbot"),YIr=o(" \u2014 "),cZ=a("a"),KIr=o("FlaxBlenderbotModel"),ZIr=o(" (Blenderbot model)"),eNr=l(),q0=a("li"),g3e=a("strong"),oNr=o("blenderbot-small"),rNr=o(" \u2014 "),mZ=a("a"),tNr=o("FlaxBlenderbotSmallModel"),aNr=o(" (BlenderbotSmall model)"),nNr=l(),j0=a("li"),h3e=a("strong"),sNr=o("clip"),lNr=o(" \u2014 "),fZ=a("a"),iNr=o("FlaxCLIPModel"),dNr=o(" (CLIP model)"),cNr=l(),D0=a("li"),u3e=a("strong"),mNr=o("distilbert"),fNr=o(" \u2014 "),gZ=a("a"),gNr=o("FlaxDistilBertModel"),hNr=o(" (DistilBERT model)"),uNr=l(),G0=a("li"),p3e=a("strong"),pNr=o("electra"),_Nr=o(" \u2014 "),hZ=a("a"),bNr=o("FlaxElectraModel"),vNr=o(" (ELECTRA model)"),FNr=l(),O0=a("li"),_3e=a("strong"),TNr=o("gpt2"),MNr=o(" \u2014 "),uZ=a("a"),ENr=o("FlaxGPT2Model"),CNr=o(" (OpenAI GPT-2 model)"),wNr=l(),V0=a("li"),b3e=a("strong"),ANr=o("gpt_neo"),LNr=o(" \u2014 "),pZ=a("a"),yNr=o("FlaxGPTNeoModel"),xNr=o(" (GPT Neo model)"),$Nr=l(),X0=a("li"),v3e=a("strong"),kNr=o("gptj"),SNr=o(" \u2014 "),_Z=a("a"),RNr=o("FlaxGPTJModel"),PNr=o(" (GPT-J model)"),BNr=l(),z0=a("li"),F3e=a("strong"),INr=o("longt5"),NNr=o(" \u2014 "),bZ=a("a"),qNr=o("FlaxLongT5Model"),jNr=o(" (LongT5 model)"),DNr=l(),Q0=a("li"),T3e=a("strong"),GNr=o("marian"),ONr=o(" \u2014 "),vZ=a("a"),VNr=o("FlaxMarianModel"),XNr=o(" (Marian model)"),zNr=l(),W0=a("li"),M3e=a("strong"),QNr=o("mbart"),WNr=o(" \u2014 "),FZ=a("a"),HNr=o("FlaxMBartModel"),UNr=o(" (mBART model)"),JNr=l(),H0=a("li"),E3e=a("strong"),YNr=o("mt5"),KNr=o(" \u2014 "),TZ=a("a"),ZNr=o("FlaxMT5Model"),eqr=o(" (MT5 model)"),oqr=l(),U0=a("li"),C3e=a("strong"),rqr=o("opt"),tqr=o(" \u2014 "),MZ=a("a"),aqr=o("FlaxOPTModel"),nqr=o(" (OPT model)"),sqr=l(),J0=a("li"),w3e=a("strong"),lqr=o("pegasus"),iqr=o(" \u2014 "),EZ=a("a"),dqr=o("FlaxPegasusModel"),cqr=o(" (Pegasus model)"),mqr=l(),Y0=a("li"),A3e=a("strong"),fqr=o("roberta"),gqr=o(" \u2014 "),CZ=a("a"),hqr=o("FlaxRobertaModel"),uqr=o(" (RoBERTa model)"),pqr=l(),K0=a("li"),L3e=a("strong"),_qr=o("roformer"),bqr=o(" \u2014 "),wZ=a("a"),vqr=o("FlaxRoFormerModel"),Fqr=o(" (RoFormer model)"),Tqr=l(),Z0=a("li"),y3e=a("strong"),Mqr=o("t5"),Eqr=o(" \u2014 "),AZ=a("a"),Cqr=o("FlaxT5Model"),wqr=o(" (T5 model)"),Aqr=l(),ew=a("li"),x3e=a("strong"),Lqr=o("vision-text-dual-encoder"),yqr=o(" \u2014 "),LZ=a("a"),xqr=o("FlaxVisionTextDualEncoderModel"),$qr=o(" (VisionTextDualEncoder model)"),kqr=l(),ow=a("li"),$3e=a("strong"),Sqr=o("vit"),Rqr=o(" \u2014 "),yZ=a("a"),Pqr=o("FlaxViTModel"),Bqr=o(" (ViT model)"),Iqr=l(),rw=a("li"),k3e=a("strong"),Nqr=o("wav2vec2"),qqr=o(" \u2014 "),xZ=a("a"),jqr=o("FlaxWav2Vec2Model"),Dqr=o(" (Wav2Vec2 model)"),Gqr=l(),tw=a("li"),S3e=a("strong"),Oqr=o("xglm"),Vqr=o(" \u2014 "),$Z=a("a"),Xqr=o("FlaxXGLMModel"),zqr=o(" (XGLM model)"),Qqr=l(),aw=a("li"),R3e=a("strong"),Wqr=o("xlm-roberta"),Hqr=o(" \u2014 "),kZ=a("a"),Uqr=o("FlaxXLMRobertaModel"),Jqr=o(" (XLM-RoBERTa model)"),Yqr=l(),F(nw.$$.fragment),sXe=l(),Wc=a("h2"),sw=a("a"),P3e=a("span"),F(Qx.$$.fragment),Kqr=l(),B3e=a("span"),Zqr=o("FlaxAutoModelForCausalLM"),lXe=l(),ur=a("div"),F(Wx.$$.fragment),ejr=l(),Hc=a("p"),ojr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),SZ=a("a"),rjr=o("from_pretrained()"),tjr=o(" class method or the "),RZ=a("a"),ajr=o("from_config()"),njr=o(` class
method.`),sjr=l(),Hx=a("p"),ljr=o("This class cannot be instantiated directly using "),I3e=a("code"),ijr=o("__init__()"),djr=o(" (throws an error)."),cjr=l(),zt=a("div"),F(Ux.$$.fragment),mjr=l(),N3e=a("p"),fjr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),gjr=l(),Uc=a("p"),hjr=o(`Note:
Loading a model from its configuration file does `),q3e=a("strong"),ujr=o("not"),pjr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PZ=a("a"),_jr=o("from_pretrained()"),bjr=o(" to load the model weights."),vjr=l(),F(lw.$$.fragment),Fjr=l(),Vr=a("div"),F(Jx.$$.fragment),Tjr=l(),j3e=a("p"),Mjr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Ejr=l(),Tn=a("p"),Cjr=o("The model class to instantiate is selected based on the "),D3e=a("code"),wjr=o("model_type"),Ajr=o(` property of the config object (either
passed as an argument or loaded from `),G3e=a("code"),Ljr=o("pretrained_model_name_or_path"),yjr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O3e=a("code"),xjr=o("pretrained_model_name_or_path"),$jr=o(":"),kjr=l(),xe=a("ul"),iw=a("li"),V3e=a("strong"),Sjr=o("bart"),Rjr=o(" \u2014 "),BZ=a("a"),Pjr=o("FlaxBartForCausalLM"),Bjr=o(" (BART model)"),Ijr=l(),dw=a("li"),X3e=a("strong"),Njr=o("bert"),qjr=o(" \u2014 "),IZ=a("a"),jjr=o("FlaxBertForCausalLM"),Djr=o(" (BERT model)"),Gjr=l(),cw=a("li"),z3e=a("strong"),Ojr=o("big_bird"),Vjr=o(" \u2014 "),NZ=a("a"),Xjr=o("FlaxBigBirdForCausalLM"),zjr=o(" (BigBird model)"),Qjr=l(),mw=a("li"),Q3e=a("strong"),Wjr=o("electra"),Hjr=o(" \u2014 "),qZ=a("a"),Ujr=o("FlaxElectraForCausalLM"),Jjr=o(" (ELECTRA model)"),Yjr=l(),fw=a("li"),W3e=a("strong"),Kjr=o("gpt2"),Zjr=o(" \u2014 "),jZ=a("a"),eDr=o("FlaxGPT2LMHeadModel"),oDr=o(" (OpenAI GPT-2 model)"),rDr=l(),gw=a("li"),H3e=a("strong"),tDr=o("gpt_neo"),aDr=o(" \u2014 "),DZ=a("a"),nDr=o("FlaxGPTNeoForCausalLM"),sDr=o(" (GPT Neo model)"),lDr=l(),hw=a("li"),U3e=a("strong"),iDr=o("gptj"),dDr=o(" \u2014 "),GZ=a("a"),cDr=o("FlaxGPTJForCausalLM"),mDr=o(" (GPT-J model)"),fDr=l(),uw=a("li"),J3e=a("strong"),gDr=o("opt"),hDr=o(" \u2014 "),OZ=a("a"),uDr=o("FlaxOPTForCausalLM"),pDr=o(" (OPT model)"),_Dr=l(),pw=a("li"),Y3e=a("strong"),bDr=o("roberta"),vDr=o(" \u2014 "),VZ=a("a"),FDr=o("FlaxRobertaForCausalLM"),TDr=o(" (RoBERTa model)"),MDr=l(),_w=a("li"),K3e=a("strong"),EDr=o("xglm"),CDr=o(" \u2014 "),XZ=a("a"),wDr=o("FlaxXGLMForCausalLM"),ADr=o(" (XGLM model)"),LDr=l(),F(bw.$$.fragment),iXe=l(),Jc=a("h2"),vw=a("a"),Z3e=a("span"),F(Yx.$$.fragment),yDr=l(),e0e=a("span"),xDr=o("FlaxAutoModelForPreTraining"),dXe=l(),pr=a("div"),F(Kx.$$.fragment),$Dr=l(),Yc=a("p"),kDr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),zZ=a("a"),SDr=o("from_pretrained()"),RDr=o(" class method or the "),QZ=a("a"),PDr=o("from_config()"),BDr=o(` class
method.`),IDr=l(),Zx=a("p"),NDr=o("This class cannot be instantiated directly using "),o0e=a("code"),qDr=o("__init__()"),jDr=o(" (throws an error)."),DDr=l(),Qt=a("div"),F(e$.$$.fragment),GDr=l(),r0e=a("p"),ODr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),VDr=l(),Kc=a("p"),XDr=o(`Note:
Loading a model from its configuration file does `),t0e=a("strong"),zDr=o("not"),QDr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WZ=a("a"),WDr=o("from_pretrained()"),HDr=o(" to load the model weights."),UDr=l(),F(Fw.$$.fragment),JDr=l(),Xr=a("div"),F(o$.$$.fragment),YDr=l(),a0e=a("p"),KDr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),ZDr=l(),Mn=a("p"),eGr=o("The model class to instantiate is selected based on the "),n0e=a("code"),oGr=o("model_type"),rGr=o(` property of the config object (either
passed as an argument or loaded from `),s0e=a("code"),tGr=o("pretrained_model_name_or_path"),aGr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l0e=a("code"),nGr=o("pretrained_model_name_or_path"),sGr=o(":"),lGr=l(),Ee=a("ul"),Tw=a("li"),i0e=a("strong"),iGr=o("albert"),dGr=o(" \u2014 "),HZ=a("a"),cGr=o("FlaxAlbertForPreTraining"),mGr=o(" (ALBERT model)"),fGr=l(),Mw=a("li"),d0e=a("strong"),gGr=o("bart"),hGr=o(" \u2014 "),UZ=a("a"),uGr=o("FlaxBartForConditionalGeneration"),pGr=o(" (BART model)"),_Gr=l(),Ew=a("li"),c0e=a("strong"),bGr=o("bert"),vGr=o(" \u2014 "),JZ=a("a"),FGr=o("FlaxBertForPreTraining"),TGr=o(" (BERT model)"),MGr=l(),Cw=a("li"),m0e=a("strong"),EGr=o("big_bird"),CGr=o(" \u2014 "),YZ=a("a"),wGr=o("FlaxBigBirdForPreTraining"),AGr=o(" (BigBird model)"),LGr=l(),ww=a("li"),f0e=a("strong"),yGr=o("electra"),xGr=o(" \u2014 "),KZ=a("a"),$Gr=o("FlaxElectraForPreTraining"),kGr=o(" (ELECTRA model)"),SGr=l(),Aw=a("li"),g0e=a("strong"),RGr=o("longt5"),PGr=o(" \u2014 "),ZZ=a("a"),BGr=o("FlaxLongT5ForConditionalGeneration"),IGr=o(" (LongT5 model)"),NGr=l(),Lw=a("li"),h0e=a("strong"),qGr=o("mbart"),jGr=o(" \u2014 "),eee=a("a"),DGr=o("FlaxMBartForConditionalGeneration"),GGr=o(" (mBART model)"),OGr=l(),yw=a("li"),u0e=a("strong"),VGr=o("mt5"),XGr=o(" \u2014 "),oee=a("a"),zGr=o("FlaxMT5ForConditionalGeneration"),QGr=o(" (MT5 model)"),WGr=l(),xw=a("li"),p0e=a("strong"),HGr=o("roberta"),UGr=o(" \u2014 "),ree=a("a"),JGr=o("FlaxRobertaForMaskedLM"),YGr=o(" (RoBERTa model)"),KGr=l(),$w=a("li"),_0e=a("strong"),ZGr=o("roformer"),eOr=o(" \u2014 "),tee=a("a"),oOr=o("FlaxRoFormerForMaskedLM"),rOr=o(" (RoFormer model)"),tOr=l(),kw=a("li"),b0e=a("strong"),aOr=o("t5"),nOr=o(" \u2014 "),aee=a("a"),sOr=o("FlaxT5ForConditionalGeneration"),lOr=o(" (T5 model)"),iOr=l(),Sw=a("li"),v0e=a("strong"),dOr=o("wav2vec2"),cOr=o(" \u2014 "),nee=a("a"),mOr=o("FlaxWav2Vec2ForPreTraining"),fOr=o(" (Wav2Vec2 model)"),gOr=l(),Rw=a("li"),F0e=a("strong"),hOr=o("xlm-roberta"),uOr=o(" \u2014 "),see=a("a"),pOr=o("FlaxXLMRobertaForMaskedLM"),_Or=o(" (XLM-RoBERTa model)"),bOr=l(),F(Pw.$$.fragment),cXe=l(),Zc=a("h2"),Bw=a("a"),T0e=a("span"),F(r$.$$.fragment),vOr=l(),M0e=a("span"),FOr=o("FlaxAutoModelForMaskedLM"),mXe=l(),_r=a("div"),F(t$.$$.fragment),TOr=l(),em=a("p"),MOr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),lee=a("a"),EOr=o("from_pretrained()"),COr=o(" class method or the "),iee=a("a"),wOr=o("from_config()"),AOr=o(` class
method.`),LOr=l(),a$=a("p"),yOr=o("This class cannot be instantiated directly using "),E0e=a("code"),xOr=o("__init__()"),$Or=o(" (throws an error)."),kOr=l(),Wt=a("div"),F(n$.$$.fragment),SOr=l(),C0e=a("p"),ROr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),POr=l(),om=a("p"),BOr=o(`Note:
Loading a model from its configuration file does `),w0e=a("strong"),IOr=o("not"),NOr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dee=a("a"),qOr=o("from_pretrained()"),jOr=o(" to load the model weights."),DOr=l(),F(Iw.$$.fragment),GOr=l(),zr=a("div"),F(s$.$$.fragment),OOr=l(),A0e=a("p"),VOr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),XOr=l(),En=a("p"),zOr=o("The model class to instantiate is selected based on the "),L0e=a("code"),QOr=o("model_type"),WOr=o(` property of the config object (either
passed as an argument or loaded from `),y0e=a("code"),HOr=o("pretrained_model_name_or_path"),UOr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x0e=a("code"),JOr=o("pretrained_model_name_or_path"),YOr=o(":"),KOr=l(),$e=a("ul"),Nw=a("li"),$0e=a("strong"),ZOr=o("albert"),eVr=o(" \u2014 "),cee=a("a"),oVr=o("FlaxAlbertForMaskedLM"),rVr=o(" (ALBERT model)"),tVr=l(),qw=a("li"),k0e=a("strong"),aVr=o("bart"),nVr=o(" \u2014 "),mee=a("a"),sVr=o("FlaxBartForConditionalGeneration"),lVr=o(" (BART model)"),iVr=l(),jw=a("li"),S0e=a("strong"),dVr=o("bert"),cVr=o(" \u2014 "),fee=a("a"),mVr=o("FlaxBertForMaskedLM"),fVr=o(" (BERT model)"),gVr=l(),Dw=a("li"),R0e=a("strong"),hVr=o("big_bird"),uVr=o(" \u2014 "),gee=a("a"),pVr=o("FlaxBigBirdForMaskedLM"),_Vr=o(" (BigBird model)"),bVr=l(),Gw=a("li"),P0e=a("strong"),vVr=o("distilbert"),FVr=o(" \u2014 "),hee=a("a"),TVr=o("FlaxDistilBertForMaskedLM"),MVr=o(" (DistilBERT model)"),EVr=l(),Ow=a("li"),B0e=a("strong"),CVr=o("electra"),wVr=o(" \u2014 "),uee=a("a"),AVr=o("FlaxElectraForMaskedLM"),LVr=o(" (ELECTRA model)"),yVr=l(),Vw=a("li"),I0e=a("strong"),xVr=o("mbart"),$Vr=o(" \u2014 "),pee=a("a"),kVr=o("FlaxMBartForConditionalGeneration"),SVr=o(" (mBART model)"),RVr=l(),Xw=a("li"),N0e=a("strong"),PVr=o("roberta"),BVr=o(" \u2014 "),_ee=a("a"),IVr=o("FlaxRobertaForMaskedLM"),NVr=o(" (RoBERTa model)"),qVr=l(),zw=a("li"),q0e=a("strong"),jVr=o("roformer"),DVr=o(" \u2014 "),bee=a("a"),GVr=o("FlaxRoFormerForMaskedLM"),OVr=o(" (RoFormer model)"),VVr=l(),Qw=a("li"),j0e=a("strong"),XVr=o("xlm-roberta"),zVr=o(" \u2014 "),vee=a("a"),QVr=o("FlaxXLMRobertaForMaskedLM"),WVr=o(" (XLM-RoBERTa model)"),HVr=l(),F(Ww.$$.fragment),fXe=l(),rm=a("h2"),Hw=a("a"),D0e=a("span"),F(l$.$$.fragment),UVr=l(),G0e=a("span"),JVr=o("FlaxAutoModelForSeq2SeqLM"),gXe=l(),br=a("div"),F(i$.$$.fragment),YVr=l(),tm=a("p"),KVr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Fee=a("a"),ZVr=o("from_pretrained()"),eXr=o(" class method or the "),Tee=a("a"),oXr=o("from_config()"),rXr=o(` class
method.`),tXr=l(),d$=a("p"),aXr=o("This class cannot be instantiated directly using "),O0e=a("code"),nXr=o("__init__()"),sXr=o(" (throws an error)."),lXr=l(),Ht=a("div"),F(c$.$$.fragment),iXr=l(),V0e=a("p"),dXr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),cXr=l(),am=a("p"),mXr=o(`Note:
Loading a model from its configuration file does `),X0e=a("strong"),fXr=o("not"),gXr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Mee=a("a"),hXr=o("from_pretrained()"),uXr=o(" to load the model weights."),pXr=l(),F(Uw.$$.fragment),_Xr=l(),Qr=a("div"),F(m$.$$.fragment),bXr=l(),z0e=a("p"),vXr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),FXr=l(),Cn=a("p"),TXr=o("The model class to instantiate is selected based on the "),Q0e=a("code"),MXr=o("model_type"),EXr=o(` property of the config object (either
passed as an argument or loaded from `),W0e=a("code"),CXr=o("pretrained_model_name_or_path"),wXr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H0e=a("code"),AXr=o("pretrained_model_name_or_path"),LXr=o(":"),yXr=l(),ke=a("ul"),Jw=a("li"),U0e=a("strong"),xXr=o("bart"),$Xr=o(" \u2014 "),Eee=a("a"),kXr=o("FlaxBartForConditionalGeneration"),SXr=o(" (BART model)"),RXr=l(),Yw=a("li"),J0e=a("strong"),PXr=o("blenderbot"),BXr=o(" \u2014 "),Cee=a("a"),IXr=o("FlaxBlenderbotForConditionalGeneration"),NXr=o(" (Blenderbot model)"),qXr=l(),Kw=a("li"),Y0e=a("strong"),jXr=o("blenderbot-small"),DXr=o(" \u2014 "),wee=a("a"),GXr=o("FlaxBlenderbotSmallForConditionalGeneration"),OXr=o(" (BlenderbotSmall model)"),VXr=l(),Zw=a("li"),K0e=a("strong"),XXr=o("encoder-decoder"),zXr=o(" \u2014 "),Aee=a("a"),QXr=o("FlaxEncoderDecoderModel"),WXr=o(" (Encoder decoder model)"),HXr=l(),eA=a("li"),Z0e=a("strong"),UXr=o("longt5"),JXr=o(" \u2014 "),Lee=a("a"),YXr=o("FlaxLongT5ForConditionalGeneration"),KXr=o(" (LongT5 model)"),ZXr=l(),oA=a("li"),ewe=a("strong"),ezr=o("marian"),ozr=o(" \u2014 "),yee=a("a"),rzr=o("FlaxMarianMTModel"),tzr=o(" (Marian model)"),azr=l(),rA=a("li"),owe=a("strong"),nzr=o("mbart"),szr=o(" \u2014 "),xee=a("a"),lzr=o("FlaxMBartForConditionalGeneration"),izr=o(" (mBART model)"),dzr=l(),tA=a("li"),rwe=a("strong"),czr=o("mt5"),mzr=o(" \u2014 "),$ee=a("a"),fzr=o("FlaxMT5ForConditionalGeneration"),gzr=o(" (MT5 model)"),hzr=l(),aA=a("li"),twe=a("strong"),uzr=o("pegasus"),pzr=o(" \u2014 "),kee=a("a"),_zr=o("FlaxPegasusForConditionalGeneration"),bzr=o(" (Pegasus model)"),vzr=l(),nA=a("li"),awe=a("strong"),Fzr=o("t5"),Tzr=o(" \u2014 "),See=a("a"),Mzr=o("FlaxT5ForConditionalGeneration"),Ezr=o(" (T5 model)"),Czr=l(),F(sA.$$.fragment),hXe=l(),nm=a("h2"),lA=a("a"),nwe=a("span"),F(f$.$$.fragment),wzr=l(),swe=a("span"),Azr=o("FlaxAutoModelForSequenceClassification"),uXe=l(),vr=a("div"),F(g$.$$.fragment),Lzr=l(),sm=a("p"),yzr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Ree=a("a"),xzr=o("from_pretrained()"),$zr=o(" class method or the "),Pee=a("a"),kzr=o("from_config()"),Szr=o(` class
method.`),Rzr=l(),h$=a("p"),Pzr=o("This class cannot be instantiated directly using "),lwe=a("code"),Bzr=o("__init__()"),Izr=o(" (throws an error)."),Nzr=l(),Ut=a("div"),F(u$.$$.fragment),qzr=l(),iwe=a("p"),jzr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Dzr=l(),lm=a("p"),Gzr=o(`Note:
Loading a model from its configuration file does `),dwe=a("strong"),Ozr=o("not"),Vzr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Bee=a("a"),Xzr=o("from_pretrained()"),zzr=o(" to load the model weights."),Qzr=l(),F(iA.$$.fragment),Wzr=l(),Wr=a("div"),F(p$.$$.fragment),Hzr=l(),cwe=a("p"),Uzr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Jzr=l(),wn=a("p"),Yzr=o("The model class to instantiate is selected based on the "),mwe=a("code"),Kzr=o("model_type"),Zzr=o(` property of the config object (either
passed as an argument or loaded from `),fwe=a("code"),eQr=o("pretrained_model_name_or_path"),oQr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gwe=a("code"),rQr=o("pretrained_model_name_or_path"),tQr=o(":"),aQr=l(),Se=a("ul"),dA=a("li"),hwe=a("strong"),nQr=o("albert"),sQr=o(" \u2014 "),Iee=a("a"),lQr=o("FlaxAlbertForSequenceClassification"),iQr=o(" (ALBERT model)"),dQr=l(),cA=a("li"),uwe=a("strong"),cQr=o("bart"),mQr=o(" \u2014 "),Nee=a("a"),fQr=o("FlaxBartForSequenceClassification"),gQr=o(" (BART model)"),hQr=l(),mA=a("li"),pwe=a("strong"),uQr=o("bert"),pQr=o(" \u2014 "),qee=a("a"),_Qr=o("FlaxBertForSequenceClassification"),bQr=o(" (BERT model)"),vQr=l(),fA=a("li"),_we=a("strong"),FQr=o("big_bird"),TQr=o(" \u2014 "),jee=a("a"),MQr=o("FlaxBigBirdForSequenceClassification"),EQr=o(" (BigBird model)"),CQr=l(),gA=a("li"),bwe=a("strong"),wQr=o("distilbert"),AQr=o(" \u2014 "),Dee=a("a"),LQr=o("FlaxDistilBertForSequenceClassification"),yQr=o(" (DistilBERT model)"),xQr=l(),hA=a("li"),vwe=a("strong"),$Qr=o("electra"),kQr=o(" \u2014 "),Gee=a("a"),SQr=o("FlaxElectraForSequenceClassification"),RQr=o(" (ELECTRA model)"),PQr=l(),uA=a("li"),Fwe=a("strong"),BQr=o("mbart"),IQr=o(" \u2014 "),Oee=a("a"),NQr=o("FlaxMBartForSequenceClassification"),qQr=o(" (mBART model)"),jQr=l(),pA=a("li"),Twe=a("strong"),DQr=o("roberta"),GQr=o(" \u2014 "),Vee=a("a"),OQr=o("FlaxRobertaForSequenceClassification"),VQr=o(" (RoBERTa model)"),XQr=l(),_A=a("li"),Mwe=a("strong"),zQr=o("roformer"),QQr=o(" \u2014 "),Xee=a("a"),WQr=o("FlaxRoFormerForSequenceClassification"),HQr=o(" (RoFormer model)"),UQr=l(),bA=a("li"),Ewe=a("strong"),JQr=o("xlm-roberta"),YQr=o(" \u2014 "),zee=a("a"),KQr=o("FlaxXLMRobertaForSequenceClassification"),ZQr=o(" (XLM-RoBERTa model)"),eWr=l(),F(vA.$$.fragment),pXe=l(),im=a("h2"),FA=a("a"),Cwe=a("span"),F(_$.$$.fragment),oWr=l(),wwe=a("span"),rWr=o("FlaxAutoModelForQuestionAnswering"),_Xe=l(),Fr=a("div"),F(b$.$$.fragment),tWr=l(),dm=a("p"),aWr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Qee=a("a"),nWr=o("from_pretrained()"),sWr=o(" class method or the "),Wee=a("a"),lWr=o("from_config()"),iWr=o(` class
method.`),dWr=l(),v$=a("p"),cWr=o("This class cannot be instantiated directly using "),Awe=a("code"),mWr=o("__init__()"),fWr=o(" (throws an error)."),gWr=l(),Jt=a("div"),F(F$.$$.fragment),hWr=l(),Lwe=a("p"),uWr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),pWr=l(),cm=a("p"),_Wr=o(`Note:
Loading a model from its configuration file does `),ywe=a("strong"),bWr=o("not"),vWr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Hee=a("a"),FWr=o("from_pretrained()"),TWr=o(" to load the model weights."),MWr=l(),F(TA.$$.fragment),EWr=l(),Hr=a("div"),F(T$.$$.fragment),CWr=l(),xwe=a("p"),wWr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),AWr=l(),An=a("p"),LWr=o("The model class to instantiate is selected based on the "),$we=a("code"),yWr=o("model_type"),xWr=o(` property of the config object (either
passed as an argument or loaded from `),kwe=a("code"),$Wr=o("pretrained_model_name_or_path"),kWr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Swe=a("code"),SWr=o("pretrained_model_name_or_path"),RWr=o(":"),PWr=l(),Re=a("ul"),MA=a("li"),Rwe=a("strong"),BWr=o("albert"),IWr=o(" \u2014 "),Uee=a("a"),NWr=o("FlaxAlbertForQuestionAnswering"),qWr=o(" (ALBERT model)"),jWr=l(),EA=a("li"),Pwe=a("strong"),DWr=o("bart"),GWr=o(" \u2014 "),Jee=a("a"),OWr=o("FlaxBartForQuestionAnswering"),VWr=o(" (BART model)"),XWr=l(),CA=a("li"),Bwe=a("strong"),zWr=o("bert"),QWr=o(" \u2014 "),Yee=a("a"),WWr=o("FlaxBertForQuestionAnswering"),HWr=o(" (BERT model)"),UWr=l(),wA=a("li"),Iwe=a("strong"),JWr=o("big_bird"),YWr=o(" \u2014 "),Kee=a("a"),KWr=o("FlaxBigBirdForQuestionAnswering"),ZWr=o(" (BigBird model)"),eHr=l(),AA=a("li"),Nwe=a("strong"),oHr=o("distilbert"),rHr=o(" \u2014 "),Zee=a("a"),tHr=o("FlaxDistilBertForQuestionAnswering"),aHr=o(" (DistilBERT model)"),nHr=l(),LA=a("li"),qwe=a("strong"),sHr=o("electra"),lHr=o(" \u2014 "),eoe=a("a"),iHr=o("FlaxElectraForQuestionAnswering"),dHr=o(" (ELECTRA model)"),cHr=l(),yA=a("li"),jwe=a("strong"),mHr=o("mbart"),fHr=o(" \u2014 "),ooe=a("a"),gHr=o("FlaxMBartForQuestionAnswering"),hHr=o(" (mBART model)"),uHr=l(),xA=a("li"),Dwe=a("strong"),pHr=o("roberta"),_Hr=o(" \u2014 "),roe=a("a"),bHr=o("FlaxRobertaForQuestionAnswering"),vHr=o(" (RoBERTa model)"),FHr=l(),$A=a("li"),Gwe=a("strong"),THr=o("roformer"),MHr=o(" \u2014 "),toe=a("a"),EHr=o("FlaxRoFormerForQuestionAnswering"),CHr=o(" (RoFormer model)"),wHr=l(),kA=a("li"),Owe=a("strong"),AHr=o("xlm-roberta"),LHr=o(" \u2014 "),aoe=a("a"),yHr=o("FlaxXLMRobertaForQuestionAnswering"),xHr=o(" (XLM-RoBERTa model)"),$Hr=l(),F(SA.$$.fragment),bXe=l(),mm=a("h2"),RA=a("a"),Vwe=a("span"),F(M$.$$.fragment),kHr=l(),Xwe=a("span"),SHr=o("FlaxAutoModelForTokenClassification"),vXe=l(),Tr=a("div"),F(E$.$$.fragment),RHr=l(),fm=a("p"),PHr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),noe=a("a"),BHr=o("from_pretrained()"),IHr=o(" class method or the "),soe=a("a"),NHr=o("from_config()"),qHr=o(` class
method.`),jHr=l(),C$=a("p"),DHr=o("This class cannot be instantiated directly using "),zwe=a("code"),GHr=o("__init__()"),OHr=o(" (throws an error)."),VHr=l(),Yt=a("div"),F(w$.$$.fragment),XHr=l(),Qwe=a("p"),zHr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),QHr=l(),gm=a("p"),WHr=o(`Note:
Loading a model from its configuration file does `),Wwe=a("strong"),HHr=o("not"),UHr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),loe=a("a"),JHr=o("from_pretrained()"),YHr=o(" to load the model weights."),KHr=l(),F(PA.$$.fragment),ZHr=l(),Ur=a("div"),F(A$.$$.fragment),eUr=l(),Hwe=a("p"),oUr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),rUr=l(),Ln=a("p"),tUr=o("The model class to instantiate is selected based on the "),Uwe=a("code"),aUr=o("model_type"),nUr=o(` property of the config object (either
passed as an argument or loaded from `),Jwe=a("code"),sUr=o("pretrained_model_name_or_path"),lUr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ywe=a("code"),iUr=o("pretrained_model_name_or_path"),dUr=o(":"),cUr=l(),Ve=a("ul"),BA=a("li"),Kwe=a("strong"),mUr=o("albert"),fUr=o(" \u2014 "),ioe=a("a"),gUr=o("FlaxAlbertForTokenClassification"),hUr=o(" (ALBERT model)"),uUr=l(),IA=a("li"),Zwe=a("strong"),pUr=o("bert"),_Ur=o(" \u2014 "),doe=a("a"),bUr=o("FlaxBertForTokenClassification"),vUr=o(" (BERT model)"),FUr=l(),NA=a("li"),eAe=a("strong"),TUr=o("big_bird"),MUr=o(" \u2014 "),coe=a("a"),EUr=o("FlaxBigBirdForTokenClassification"),CUr=o(" (BigBird model)"),wUr=l(),qA=a("li"),oAe=a("strong"),AUr=o("distilbert"),LUr=o(" \u2014 "),moe=a("a"),yUr=o("FlaxDistilBertForTokenClassification"),xUr=o(" (DistilBERT model)"),$Ur=l(),jA=a("li"),rAe=a("strong"),kUr=o("electra"),SUr=o(" \u2014 "),foe=a("a"),RUr=o("FlaxElectraForTokenClassification"),PUr=o(" (ELECTRA model)"),BUr=l(),DA=a("li"),tAe=a("strong"),IUr=o("roberta"),NUr=o(" \u2014 "),goe=a("a"),qUr=o("FlaxRobertaForTokenClassification"),jUr=o(" (RoBERTa model)"),DUr=l(),GA=a("li"),aAe=a("strong"),GUr=o("roformer"),OUr=o(" \u2014 "),hoe=a("a"),VUr=o("FlaxRoFormerForTokenClassification"),XUr=o(" (RoFormer model)"),zUr=l(),OA=a("li"),nAe=a("strong"),QUr=o("xlm-roberta"),WUr=o(" \u2014 "),uoe=a("a"),HUr=o("FlaxXLMRobertaForTokenClassification"),UUr=o(" (XLM-RoBERTa model)"),JUr=l(),F(VA.$$.fragment),FXe=l(),hm=a("h2"),XA=a("a"),sAe=a("span"),F(L$.$$.fragment),YUr=l(),lAe=a("span"),KUr=o("FlaxAutoModelForMultipleChoice"),TXe=l(),Mr=a("div"),F(y$.$$.fragment),ZUr=l(),um=a("p"),eJr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),poe=a("a"),oJr=o("from_pretrained()"),rJr=o(" class method or the "),_oe=a("a"),tJr=o("from_config()"),aJr=o(` class
method.`),nJr=l(),x$=a("p"),sJr=o("This class cannot be instantiated directly using "),iAe=a("code"),lJr=o("__init__()"),iJr=o(" (throws an error)."),dJr=l(),Kt=a("div"),F($$.$$.fragment),cJr=l(),dAe=a("p"),mJr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),fJr=l(),pm=a("p"),gJr=o(`Note:
Loading a model from its configuration file does `),cAe=a("strong"),hJr=o("not"),uJr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),boe=a("a"),pJr=o("from_pretrained()"),_Jr=o(" to load the model weights."),bJr=l(),F(zA.$$.fragment),vJr=l(),Jr=a("div"),F(k$.$$.fragment),FJr=l(),mAe=a("p"),TJr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),MJr=l(),yn=a("p"),EJr=o("The model class to instantiate is selected based on the "),fAe=a("code"),CJr=o("model_type"),wJr=o(` property of the config object (either
passed as an argument or loaded from `),gAe=a("code"),AJr=o("pretrained_model_name_or_path"),LJr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hAe=a("code"),yJr=o("pretrained_model_name_or_path"),xJr=o(":"),$Jr=l(),Xe=a("ul"),QA=a("li"),uAe=a("strong"),kJr=o("albert"),SJr=o(" \u2014 "),voe=a("a"),RJr=o("FlaxAlbertForMultipleChoice"),PJr=o(" (ALBERT model)"),BJr=l(),WA=a("li"),pAe=a("strong"),IJr=o("bert"),NJr=o(" \u2014 "),Foe=a("a"),qJr=o("FlaxBertForMultipleChoice"),jJr=o(" (BERT model)"),DJr=l(),HA=a("li"),_Ae=a("strong"),GJr=o("big_bird"),OJr=o(" \u2014 "),Toe=a("a"),VJr=o("FlaxBigBirdForMultipleChoice"),XJr=o(" (BigBird model)"),zJr=l(),UA=a("li"),bAe=a("strong"),QJr=o("distilbert"),WJr=o(" \u2014 "),Moe=a("a"),HJr=o("FlaxDistilBertForMultipleChoice"),UJr=o(" (DistilBERT model)"),JJr=l(),JA=a("li"),vAe=a("strong"),YJr=o("electra"),KJr=o(" \u2014 "),Eoe=a("a"),ZJr=o("FlaxElectraForMultipleChoice"),eYr=o(" (ELECTRA model)"),oYr=l(),YA=a("li"),FAe=a("strong"),rYr=o("roberta"),tYr=o(" \u2014 "),Coe=a("a"),aYr=o("FlaxRobertaForMultipleChoice"),nYr=o(" (RoBERTa model)"),sYr=l(),KA=a("li"),TAe=a("strong"),lYr=o("roformer"),iYr=o(" \u2014 "),woe=a("a"),dYr=o("FlaxRoFormerForMultipleChoice"),cYr=o(" (RoFormer model)"),mYr=l(),ZA=a("li"),MAe=a("strong"),fYr=o("xlm-roberta"),gYr=o(" \u2014 "),Aoe=a("a"),hYr=o("FlaxXLMRobertaForMultipleChoice"),uYr=o(" (XLM-RoBERTa model)"),pYr=l(),F(e6.$$.fragment),MXe=l(),_m=a("h2"),o6=a("a"),EAe=a("span"),F(S$.$$.fragment),_Yr=l(),CAe=a("span"),bYr=o("FlaxAutoModelForNextSentencePrediction"),EXe=l(),Er=a("div"),F(R$.$$.fragment),vYr=l(),bm=a("p"),FYr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Loe=a("a"),TYr=o("from_pretrained()"),MYr=o(" class method or the "),yoe=a("a"),EYr=o("from_config()"),CYr=o(` class
method.`),wYr=l(),P$=a("p"),AYr=o("This class cannot be instantiated directly using "),wAe=a("code"),LYr=o("__init__()"),yYr=o(" (throws an error)."),xYr=l(),Zt=a("div"),F(B$.$$.fragment),$Yr=l(),AAe=a("p"),kYr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),SYr=l(),vm=a("p"),RYr=o(`Note:
Loading a model from its configuration file does `),LAe=a("strong"),PYr=o("not"),BYr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xoe=a("a"),IYr=o("from_pretrained()"),NYr=o(" to load the model weights."),qYr=l(),F(r6.$$.fragment),jYr=l(),Yr=a("div"),F(I$.$$.fragment),DYr=l(),yAe=a("p"),GYr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),OYr=l(),xn=a("p"),VYr=o("The model class to instantiate is selected based on the "),xAe=a("code"),XYr=o("model_type"),zYr=o(` property of the config object (either
passed as an argument or loaded from `),$Ae=a("code"),QYr=o("pretrained_model_name_or_path"),WYr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kAe=a("code"),HYr=o("pretrained_model_name_or_path"),UYr=o(":"),JYr=l(),SAe=a("ul"),t6=a("li"),RAe=a("strong"),YYr=o("bert"),KYr=o(" \u2014 "),$oe=a("a"),ZYr=o("FlaxBertForNextSentencePrediction"),eKr=o(" (BERT model)"),oKr=l(),F(a6.$$.fragment),CXe=l(),Fm=a("h2"),n6=a("a"),PAe=a("span"),F(N$.$$.fragment),rKr=l(),BAe=a("span"),tKr=o("FlaxAutoModelForImageClassification"),wXe=l(),Cr=a("div"),F(q$.$$.fragment),aKr=l(),Tm=a("p"),nKr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),koe=a("a"),sKr=o("from_pretrained()"),lKr=o(" class method or the "),Soe=a("a"),iKr=o("from_config()"),dKr=o(` class
method.`),cKr=l(),j$=a("p"),mKr=o("This class cannot be instantiated directly using "),IAe=a("code"),fKr=o("__init__()"),gKr=o(" (throws an error)."),hKr=l(),ea=a("div"),F(D$.$$.fragment),uKr=l(),NAe=a("p"),pKr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),_Kr=l(),Mm=a("p"),bKr=o(`Note:
Loading a model from its configuration file does `),qAe=a("strong"),vKr=o("not"),FKr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Roe=a("a"),TKr=o("from_pretrained()"),MKr=o(" to load the model weights."),EKr=l(),F(s6.$$.fragment),CKr=l(),Kr=a("div"),F(G$.$$.fragment),wKr=l(),jAe=a("p"),AKr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),LKr=l(),$n=a("p"),yKr=o("The model class to instantiate is selected based on the "),DAe=a("code"),xKr=o("model_type"),$Kr=o(` property of the config object (either
passed as an argument or loaded from `),GAe=a("code"),kKr=o("pretrained_model_name_or_path"),SKr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),OAe=a("code"),RKr=o("pretrained_model_name_or_path"),PKr=o(":"),BKr=l(),O$=a("ul"),l6=a("li"),VAe=a("strong"),IKr=o("beit"),NKr=o(" \u2014 "),Poe=a("a"),qKr=o("FlaxBeitForImageClassification"),jKr=o(" (BEiT model)"),DKr=l(),i6=a("li"),XAe=a("strong"),GKr=o("vit"),OKr=o(" \u2014 "),Boe=a("a"),VKr=o("FlaxViTForImageClassification"),XKr=o(" (ViT model)"),zKr=l(),F(d6.$$.fragment),AXe=l(),Em=a("h2"),c6=a("a"),zAe=a("span"),F(V$.$$.fragment),QKr=l(),QAe=a("span"),WKr=o("FlaxAutoModelForVision2Seq"),LXe=l(),wr=a("div"),F(X$.$$.fragment),HKr=l(),Cm=a("p"),UKr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Ioe=a("a"),JKr=o("from_pretrained()"),YKr=o(" class method or the "),Noe=a("a"),KKr=o("from_config()"),ZKr=o(` class
method.`),eZr=l(),z$=a("p"),oZr=o("This class cannot be instantiated directly using "),WAe=a("code"),rZr=o("__init__()"),tZr=o(" (throws an error)."),aZr=l(),oa=a("div"),F(Q$.$$.fragment),nZr=l(),HAe=a("p"),sZr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),lZr=l(),wm=a("p"),iZr=o(`Note:
Loading a model from its configuration file does `),UAe=a("strong"),dZr=o("not"),cZr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qoe=a("a"),mZr=o("from_pretrained()"),fZr=o(" to load the model weights."),gZr=l(),F(m6.$$.fragment),hZr=l(),Zr=a("div"),F(W$.$$.fragment),uZr=l(),JAe=a("p"),pZr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),_Zr=l(),kn=a("p"),bZr=o("The model class to instantiate is selected based on the "),YAe=a("code"),vZr=o("model_type"),FZr=o(` property of the config object (either
passed as an argument or loaded from `),KAe=a("code"),TZr=o("pretrained_model_name_or_path"),MZr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ZAe=a("code"),EZr=o("pretrained_model_name_or_path"),CZr=o(":"),wZr=l(),e6e=a("ul"),f6=a("li"),o6e=a("strong"),AZr=o("vision-encoder-decoder"),LZr=o(" \u2014 "),joe=a("a"),yZr=o("FlaxVisionEncoderDecoderModel"),xZr=o(" (Vision Encoder decoder model)"),$Zr=l(),F(g6.$$.fragment),this.h()},l(m){const _=TOt('[data-svelte="svelte-1phssyn"]',document.head);g=n(_,"META",{name:!0,content:!0}),_.forEach(t),v=i(m),u=n(m,"H1",{class:!0});var H$=s(u);f=n(H$,"A",{id:!0,class:!0,href:!0});var r6e=s(f);p=n(r6e,"SPAN",{});var t6e=s(p);T(d.$$.fragment,t6e),t6e.forEach(t),r6e.forEach(t),h=i(H$),Eo=n(H$,"SPAN",{});var a6e=s(Eo);Ei=r(a6e,"Auto Classes"),a6e.forEach(t),H$.forEach(t),xm=i(m),at=n(m,"P",{});var U$=s(at);Ci=r(U$,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),wi=n(U$,"CODE",{});var n6e=s(wi);P7=r(n6e,"from_pretrained()"),n6e.forEach(t),$m=r(U$,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),U$.forEach(t),Oe=i(m),Qe=n(m,"P",{});var Sn=s(Qe);Ai=r(Sn,"Instantiating one of "),Rn=n(Sn,"A",{href:!0});var s6e=s(Rn);B7=r(s6e,"AutoConfig"),s6e.forEach(t),Pn=r(Sn,", "),Bn=n(Sn,"A",{href:!0});var l6e=s(Bn);I7=r(l6e,"AutoModel"),l6e.forEach(t),Li=r(Sn,`, and
`),In=n(Sn,"A",{href:!0});var i6e=s(In);N7=r(i6e,"AutoTokenizer"),i6e.forEach(t),yi=r(Sn," will directly create a class of the relevant architecture. For instance"),Sn.forEach(t),km=i(m),T(xa.$$.fragment,m),We=i(m),Ae=n(m,"P",{});var J$=s(Ae);gS=r(J$,"will create a model that is an instance of "),xi=n(J$,"A",{href:!0});var d6e=s(xi);hS=r(d6e,"BertModel"),d6e.forEach(t),uS=r(J$,"."),J$.forEach(t),Co=i(m),$a=n(m,"P",{});var Y$=s($a);pS=r(Y$,"There is one class of "),Sm=n(Y$,"CODE",{});var c6e=s(Sm);_S=r(c6e,"AutoModel"),c6e.forEach(t),qQe=r(Y$," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),Y$.forEach(t),EOe=i(m),$i=n(m,"H2",{class:!0});var K$=s($i);Rm=n(K$,"A",{id:!0,class:!0,href:!0});var m6e=s(Rm);Pte=n(m6e,"SPAN",{});var f6e=s(Pte);T(q7.$$.fragment,f6e),f6e.forEach(t),m6e.forEach(t),jQe=i(K$),Bte=n(K$,"SPAN",{});var g6e=s(Bte);DQe=r(g6e,"Extending the Auto Classes"),g6e.forEach(t),K$.forEach(t),COe=i(m),Nn=n(m,"P",{});var Am=s(Nn);GQe=r(Am,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Ite=n(Am,"CODE",{});var h6e=s(Ite);OQe=r(h6e,"NewModel"),h6e.forEach(t),VQe=r(Am,", make sure you have a "),Nte=n(Am,"CODE",{});var u6e=s(Nte);XQe=r(u6e,"NewModelConfig"),u6e.forEach(t),zQe=r(Am,` then you can add those to the auto
classes like this:`),Am.forEach(t),wOe=i(m),T(j7.$$.fragment,m),AOe=i(m),bS=n(m,"P",{});var p6e=s(bS);QQe=r(p6e,"You will then be able to use the auto classes like you would usually do!"),p6e.forEach(t),LOe=i(m),T(Pm.$$.fragment,m),yOe=i(m),ki=n(m,"H2",{class:!0});var Z$=s(ki);Bm=n(Z$,"A",{id:!0,class:!0,href:!0});var _6e=s(Bm);qte=n(_6e,"SPAN",{});var b6e=s(qte);T(D7.$$.fragment,b6e),b6e.forEach(t),_6e.forEach(t),WQe=i(Z$),jte=n(Z$,"SPAN",{});var v6e=s(jte);HQe=r(v6e,"AutoConfig"),v6e.forEach(t),Z$.forEach(t),xOe=i(m),wo=n(m,"DIV",{class:!0});var rt=s(wo);T(G7.$$.fragment,rt),UQe=i(rt),O7=n(rt,"P",{});var ek=s(O7);JQe=r(ek,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),vS=n(ek,"A",{href:!0});var F6e=s(vS);YQe=r(F6e,"from_pretrained()"),F6e.forEach(t),KQe=r(ek," class method."),ek.forEach(t),ZQe=i(rt),V7=n(rt,"P",{});var ok=s(V7);eWe=r(ok,"This class cannot be instantiated directly using "),Dte=n(ok,"CODE",{});var T6e=s(Dte);oWe=r(T6e,"__init__()"),T6e.forEach(t),rWe=r(ok," (throws an error)."),ok.forEach(t),tWe=i(rt),Ar=n(rt,"DIV",{class:!0});var tt=s(Ar);T(X7.$$.fragment,tt),aWe=i(tt),Gte=n(tt,"P",{});var M6e=s(Gte);nWe=r(M6e,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),M6e.forEach(t),sWe=i(tt),Si=n(tt,"P",{});var Lm=s(Si);lWe=r(Lm,"The configuration class to instantiate is selected based on the "),Ote=n(Lm,"CODE",{});var E6e=s(Ote);iWe=r(E6e,"model_type"),E6e.forEach(t),dWe=r(Lm,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Vte=n(Lm,"CODE",{});var C6e=s(Vte);cWe=r(C6e,"pretrained_model_name_or_path"),C6e.forEach(t),mWe=r(Lm,":"),Lm.forEach(t),fWe=i(tt),A=n(tt,"UL",{});var L=s(A);Im=n(L,"LI",{});var h6=s(Im);Xte=n(h6,"STRONG",{});var w6e=s(Xte);gWe=r(w6e,"albert"),w6e.forEach(t),hWe=r(h6," \u2014 "),FS=n(h6,"A",{href:!0});var A6e=s(FS);uWe=r(A6e,"AlbertConfig"),A6e.forEach(t),pWe=r(h6," (ALBERT model)"),h6.forEach(t),_We=i(L),Nm=n(L,"LI",{});var u6=s(Nm);zte=n(u6,"STRONG",{});var L6e=s(zte);bWe=r(L6e,"bart"),L6e.forEach(t),vWe=r(u6," \u2014 "),TS=n(u6,"A",{href:!0});var y6e=s(TS);FWe=r(y6e,"BartConfig"),y6e.forEach(t),TWe=r(u6," (BART model)"),u6.forEach(t),MWe=i(L),qm=n(L,"LI",{});var p6=s(qm);Qte=n(p6,"STRONG",{});var x6e=s(Qte);EWe=r(x6e,"beit"),x6e.forEach(t),CWe=r(p6," \u2014 "),MS=n(p6,"A",{href:!0});var $6e=s(MS);wWe=r($6e,"BeitConfig"),$6e.forEach(t),AWe=r(p6," (BEiT model)"),p6.forEach(t),LWe=i(L),jm=n(L,"LI",{});var _6=s(jm);Wte=n(_6,"STRONG",{});var k6e=s(Wte);yWe=r(k6e,"bert"),k6e.forEach(t),xWe=r(_6," \u2014 "),ES=n(_6,"A",{href:!0});var S6e=s(ES);$We=r(S6e,"BertConfig"),S6e.forEach(t),kWe=r(_6," (BERT model)"),_6.forEach(t),SWe=i(L),Dm=n(L,"LI",{});var b6=s(Dm);Hte=n(b6,"STRONG",{});var R6e=s(Hte);RWe=r(R6e,"bert-generation"),R6e.forEach(t),PWe=r(b6," \u2014 "),CS=n(b6,"A",{href:!0});var P6e=s(CS);BWe=r(P6e,"BertGenerationConfig"),P6e.forEach(t),IWe=r(b6," (Bert Generation model)"),b6.forEach(t),NWe=i(L),Gm=n(L,"LI",{});var v6=s(Gm);Ute=n(v6,"STRONG",{});var B6e=s(Ute);qWe=r(B6e,"big_bird"),B6e.forEach(t),jWe=r(v6," \u2014 "),wS=n(v6,"A",{href:!0});var I6e=s(wS);DWe=r(I6e,"BigBirdConfig"),I6e.forEach(t),GWe=r(v6," (BigBird model)"),v6.forEach(t),OWe=i(L),Om=n(L,"LI",{});var F6=s(Om);Jte=n(F6,"STRONG",{});var N6e=s(Jte);VWe=r(N6e,"bigbird_pegasus"),N6e.forEach(t),XWe=r(F6," \u2014 "),AS=n(F6,"A",{href:!0});var q6e=s(AS);zWe=r(q6e,"BigBirdPegasusConfig"),q6e.forEach(t),QWe=r(F6," (BigBird-Pegasus model)"),F6.forEach(t),WWe=i(L),Vm=n(L,"LI",{});var T6=s(Vm);Yte=n(T6,"STRONG",{});var j6e=s(Yte);HWe=r(j6e,"blenderbot"),j6e.forEach(t),UWe=r(T6," \u2014 "),LS=n(T6,"A",{href:!0});var D6e=s(LS);JWe=r(D6e,"BlenderbotConfig"),D6e.forEach(t),YWe=r(T6," (Blenderbot model)"),T6.forEach(t),KWe=i(L),Xm=n(L,"LI",{});var M6=s(Xm);Kte=n(M6,"STRONG",{});var G6e=s(Kte);ZWe=r(G6e,"blenderbot-small"),G6e.forEach(t),eHe=r(M6," \u2014 "),yS=n(M6,"A",{href:!0});var O6e=s(yS);oHe=r(O6e,"BlenderbotSmallConfig"),O6e.forEach(t),rHe=r(M6," (BlenderbotSmall model)"),M6.forEach(t),tHe=i(L),zm=n(L,"LI",{});var E6=s(zm);Zte=n(E6,"STRONG",{});var V6e=s(Zte);aHe=r(V6e,"bloom"),V6e.forEach(t),nHe=r(E6," \u2014 "),xS=n(E6,"A",{href:!0});var X6e=s(xS);sHe=r(X6e,"BloomConfig"),X6e.forEach(t),lHe=r(E6," (BLOOM model)"),E6.forEach(t),iHe=i(L),Qm=n(L,"LI",{});var C6=s(Qm);eae=n(C6,"STRONG",{});var z6e=s(eae);dHe=r(z6e,"camembert"),z6e.forEach(t),cHe=r(C6," \u2014 "),$S=n(C6,"A",{href:!0});var Q6e=s($S);mHe=r(Q6e,"CamembertConfig"),Q6e.forEach(t),fHe=r(C6," (CamemBERT model)"),C6.forEach(t),gHe=i(L),Wm=n(L,"LI",{});var w6=s(Wm);oae=n(w6,"STRONG",{});var W6e=s(oae);hHe=r(W6e,"canine"),W6e.forEach(t),uHe=r(w6," \u2014 "),kS=n(w6,"A",{href:!0});var H6e=s(kS);pHe=r(H6e,"CanineConfig"),H6e.forEach(t),_He=r(w6," (CANINE model)"),w6.forEach(t),bHe=i(L),Hm=n(L,"LI",{});var A6=s(Hm);rae=n(A6,"STRONG",{});var U6e=s(rae);vHe=r(U6e,"clip"),U6e.forEach(t),FHe=r(A6," \u2014 "),SS=n(A6,"A",{href:!0});var J6e=s(SS);THe=r(J6e,"CLIPConfig"),J6e.forEach(t),MHe=r(A6," (CLIP model)"),A6.forEach(t),EHe=i(L),Um=n(L,"LI",{});var L6=s(Um);tae=n(L6,"STRONG",{});var Y6e=s(tae);CHe=r(Y6e,"codegen"),Y6e.forEach(t),wHe=r(L6," \u2014 "),RS=n(L6,"A",{href:!0});var K6e=s(RS);AHe=r(K6e,"CodeGenConfig"),K6e.forEach(t),LHe=r(L6," (CodeGen model)"),L6.forEach(t),yHe=i(L),Jm=n(L,"LI",{});var y6=s(Jm);aae=n(y6,"STRONG",{});var Z6e=s(aae);xHe=r(Z6e,"convbert"),Z6e.forEach(t),$He=r(y6," \u2014 "),PS=n(y6,"A",{href:!0});var eLe=s(PS);kHe=r(eLe,"ConvBertConfig"),eLe.forEach(t),SHe=r(y6," (ConvBERT model)"),y6.forEach(t),RHe=i(L),Ym=n(L,"LI",{});var x6=s(Ym);nae=n(x6,"STRONG",{});var oLe=s(nae);PHe=r(oLe,"convnext"),oLe.forEach(t),BHe=r(x6," \u2014 "),BS=n(x6,"A",{href:!0});var rLe=s(BS);IHe=r(rLe,"ConvNextConfig"),rLe.forEach(t),NHe=r(x6," (ConvNeXT model)"),x6.forEach(t),qHe=i(L),Km=n(L,"LI",{});var $6=s(Km);sae=n($6,"STRONG",{});var tLe=s(sae);jHe=r(tLe,"ctrl"),tLe.forEach(t),DHe=r($6," \u2014 "),IS=n($6,"A",{href:!0});var aLe=s(IS);GHe=r(aLe,"CTRLConfig"),aLe.forEach(t),OHe=r($6," (CTRL model)"),$6.forEach(t),VHe=i(L),Zm=n(L,"LI",{});var k6=s(Zm);lae=n(k6,"STRONG",{});var nLe=s(lae);XHe=r(nLe,"cvt"),nLe.forEach(t),zHe=r(k6," \u2014 "),NS=n(k6,"A",{href:!0});var sLe=s(NS);QHe=r(sLe,"CvtConfig"),sLe.forEach(t),WHe=r(k6," (CvT model)"),k6.forEach(t),HHe=i(L),ef=n(L,"LI",{});var S6=s(ef);iae=n(S6,"STRONG",{});var lLe=s(iae);UHe=r(lLe,"data2vec-audio"),lLe.forEach(t),JHe=r(S6," \u2014 "),qS=n(S6,"A",{href:!0});var iLe=s(qS);YHe=r(iLe,"Data2VecAudioConfig"),iLe.forEach(t),KHe=r(S6," (Data2VecAudio model)"),S6.forEach(t),ZHe=i(L),of=n(L,"LI",{});var R6=s(of);dae=n(R6,"STRONG",{});var dLe=s(dae);eUe=r(dLe,"data2vec-text"),dLe.forEach(t),oUe=r(R6," \u2014 "),jS=n(R6,"A",{href:!0});var cLe=s(jS);rUe=r(cLe,"Data2VecTextConfig"),cLe.forEach(t),tUe=r(R6," (Data2VecText model)"),R6.forEach(t),aUe=i(L),rf=n(L,"LI",{});var P6=s(rf);cae=n(P6,"STRONG",{});var mLe=s(cae);nUe=r(mLe,"data2vec-vision"),mLe.forEach(t),sUe=r(P6," \u2014 "),DS=n(P6,"A",{href:!0});var fLe=s(DS);lUe=r(fLe,"Data2VecVisionConfig"),fLe.forEach(t),iUe=r(P6," (Data2VecVision model)"),P6.forEach(t),dUe=i(L),tf=n(L,"LI",{});var B6=s(tf);mae=n(B6,"STRONG",{});var gLe=s(mae);cUe=r(gLe,"deberta"),gLe.forEach(t),mUe=r(B6," \u2014 "),GS=n(B6,"A",{href:!0});var hLe=s(GS);fUe=r(hLe,"DebertaConfig"),hLe.forEach(t),gUe=r(B6," (DeBERTa model)"),B6.forEach(t),hUe=i(L),af=n(L,"LI",{});var I6=s(af);fae=n(I6,"STRONG",{});var uLe=s(fae);uUe=r(uLe,"deberta-v2"),uLe.forEach(t),pUe=r(I6," \u2014 "),OS=n(I6,"A",{href:!0});var pLe=s(OS);_Ue=r(pLe,"DebertaV2Config"),pLe.forEach(t),bUe=r(I6," (DeBERTa-v2 model)"),I6.forEach(t),vUe=i(L),nf=n(L,"LI",{});var N6=s(nf);gae=n(N6,"STRONG",{});var SZr=s(gae);FUe=r(SZr,"decision_transformer"),SZr.forEach(t),TUe=r(N6," \u2014 "),VS=n(N6,"A",{href:!0});var RZr=s(VS);MUe=r(RZr,"DecisionTransformerConfig"),RZr.forEach(t),EUe=r(N6," (Decision Transformer model)"),N6.forEach(t),CUe=i(L),sf=n(L,"LI",{});var _Le=s(sf);hae=n(_Le,"STRONG",{});var PZr=s(hae);wUe=r(PZr,"deit"),PZr.forEach(t),AUe=r(_Le," \u2014 "),XS=n(_Le,"A",{href:!0});var BZr=s(XS);LUe=r(BZr,"DeiTConfig"),BZr.forEach(t),yUe=r(_Le," (DeiT model)"),_Le.forEach(t),xUe=i(L),lf=n(L,"LI",{});var bLe=s(lf);uae=n(bLe,"STRONG",{});var IZr=s(uae);$Ue=r(IZr,"detr"),IZr.forEach(t),kUe=r(bLe," \u2014 "),zS=n(bLe,"A",{href:!0});var NZr=s(zS);SUe=r(NZr,"DetrConfig"),NZr.forEach(t),RUe=r(bLe," (DETR model)"),bLe.forEach(t),PUe=i(L),df=n(L,"LI",{});var vLe=s(df);pae=n(vLe,"STRONG",{});var qZr=s(pae);BUe=r(qZr,"distilbert"),qZr.forEach(t),IUe=r(vLe," \u2014 "),QS=n(vLe,"A",{href:!0});var jZr=s(QS);NUe=r(jZr,"DistilBertConfig"),jZr.forEach(t),qUe=r(vLe," (DistilBERT model)"),vLe.forEach(t),jUe=i(L),cf=n(L,"LI",{});var FLe=s(cf);_ae=n(FLe,"STRONG",{});var DZr=s(_ae);DUe=r(DZr,"dpr"),DZr.forEach(t),GUe=r(FLe," \u2014 "),WS=n(FLe,"A",{href:!0});var GZr=s(WS);OUe=r(GZr,"DPRConfig"),GZr.forEach(t),VUe=r(FLe," (DPR model)"),FLe.forEach(t),XUe=i(L),mf=n(L,"LI",{});var TLe=s(mf);bae=n(TLe,"STRONG",{});var OZr=s(bae);zUe=r(OZr,"dpt"),OZr.forEach(t),QUe=r(TLe," \u2014 "),HS=n(TLe,"A",{href:!0});var VZr=s(HS);WUe=r(VZr,"DPTConfig"),VZr.forEach(t),HUe=r(TLe," (DPT model)"),TLe.forEach(t),UUe=i(L),ff=n(L,"LI",{});var MLe=s(ff);vae=n(MLe,"STRONG",{});var XZr=s(vae);JUe=r(XZr,"electra"),XZr.forEach(t),YUe=r(MLe," \u2014 "),US=n(MLe,"A",{href:!0});var zZr=s(US);KUe=r(zZr,"ElectraConfig"),zZr.forEach(t),ZUe=r(MLe," (ELECTRA model)"),MLe.forEach(t),eJe=i(L),gf=n(L,"LI",{});var ELe=s(gf);Fae=n(ELe,"STRONG",{});var QZr=s(Fae);oJe=r(QZr,"encoder-decoder"),QZr.forEach(t),rJe=r(ELe," \u2014 "),JS=n(ELe,"A",{href:!0});var WZr=s(JS);tJe=r(WZr,"EncoderDecoderConfig"),WZr.forEach(t),aJe=r(ELe," (Encoder decoder model)"),ELe.forEach(t),nJe=i(L),hf=n(L,"LI",{});var CLe=s(hf);Tae=n(CLe,"STRONG",{});var HZr=s(Tae);sJe=r(HZr,"flaubert"),HZr.forEach(t),lJe=r(CLe," \u2014 "),YS=n(CLe,"A",{href:!0});var UZr=s(YS);iJe=r(UZr,"FlaubertConfig"),UZr.forEach(t),dJe=r(CLe," (FlauBERT model)"),CLe.forEach(t),cJe=i(L),uf=n(L,"LI",{});var wLe=s(uf);Mae=n(wLe,"STRONG",{});var JZr=s(Mae);mJe=r(JZr,"flava"),JZr.forEach(t),fJe=r(wLe," \u2014 "),KS=n(wLe,"A",{href:!0});var YZr=s(KS);gJe=r(YZr,"FlavaConfig"),YZr.forEach(t),hJe=r(wLe," (FLAVA model)"),wLe.forEach(t),uJe=i(L),pf=n(L,"LI",{});var ALe=s(pf);Eae=n(ALe,"STRONG",{});var KZr=s(Eae);pJe=r(KZr,"fnet"),KZr.forEach(t),_Je=r(ALe," \u2014 "),ZS=n(ALe,"A",{href:!0});var ZZr=s(ZS);bJe=r(ZZr,"FNetConfig"),ZZr.forEach(t),vJe=r(ALe," (FNet model)"),ALe.forEach(t),FJe=i(L),_f=n(L,"LI",{});var LLe=s(_f);Cae=n(LLe,"STRONG",{});var eet=s(Cae);TJe=r(eet,"fsmt"),eet.forEach(t),MJe=r(LLe," \u2014 "),eR=n(LLe,"A",{href:!0});var oet=s(eR);EJe=r(oet,"FSMTConfig"),oet.forEach(t),CJe=r(LLe," (FairSeq Machine-Translation model)"),LLe.forEach(t),wJe=i(L),bf=n(L,"LI",{});var yLe=s(bf);wae=n(yLe,"STRONG",{});var ret=s(wae);AJe=r(ret,"funnel"),ret.forEach(t),LJe=r(yLe," \u2014 "),oR=n(yLe,"A",{href:!0});var tet=s(oR);yJe=r(tet,"FunnelConfig"),tet.forEach(t),xJe=r(yLe," (Funnel Transformer model)"),yLe.forEach(t),$Je=i(L),vf=n(L,"LI",{});var xLe=s(vf);Aae=n(xLe,"STRONG",{});var aet=s(Aae);kJe=r(aet,"glpn"),aet.forEach(t),SJe=r(xLe," \u2014 "),rR=n(xLe,"A",{href:!0});var net=s(rR);RJe=r(net,"GLPNConfig"),net.forEach(t),PJe=r(xLe," (GLPN model)"),xLe.forEach(t),BJe=i(L),Ff=n(L,"LI",{});var $Le=s(Ff);Lae=n($Le,"STRONG",{});var set=s(Lae);IJe=r(set,"gpt2"),set.forEach(t),NJe=r($Le," \u2014 "),tR=n($Le,"A",{href:!0});var iet=s(tR);qJe=r(iet,"GPT2Config"),iet.forEach(t),jJe=r($Le," (OpenAI GPT-2 model)"),$Le.forEach(t),DJe=i(L),Tf=n(L,"LI",{});var kLe=s(Tf);yae=n(kLe,"STRONG",{});var det=s(yae);GJe=r(det,"gpt_neo"),det.forEach(t),OJe=r(kLe," \u2014 "),aR=n(kLe,"A",{href:!0});var cet=s(aR);VJe=r(cet,"GPTNeoConfig"),cet.forEach(t),XJe=r(kLe," (GPT Neo model)"),kLe.forEach(t),zJe=i(L),Mf=n(L,"LI",{});var SLe=s(Mf);xae=n(SLe,"STRONG",{});var met=s(xae);QJe=r(met,"gpt_neox"),met.forEach(t),WJe=r(SLe," \u2014 "),nR=n(SLe,"A",{href:!0});var fet=s(nR);HJe=r(fet,"GPTNeoXConfig"),fet.forEach(t),UJe=r(SLe," (GPT NeoX model)"),SLe.forEach(t),JJe=i(L),Ef=n(L,"LI",{});var RLe=s(Ef);$ae=n(RLe,"STRONG",{});var get=s($ae);YJe=r(get,"gptj"),get.forEach(t),KJe=r(RLe," \u2014 "),sR=n(RLe,"A",{href:!0});var het=s(sR);ZJe=r(het,"GPTJConfig"),het.forEach(t),eYe=r(RLe," (GPT-J model)"),RLe.forEach(t),oYe=i(L),Cf=n(L,"LI",{});var PLe=s(Cf);kae=n(PLe,"STRONG",{});var uet=s(kae);rYe=r(uet,"groupvit"),uet.forEach(t),tYe=r(PLe," \u2014 "),lR=n(PLe,"A",{href:!0});var pet=s(lR);aYe=r(pet,"GroupViTConfig"),pet.forEach(t),nYe=r(PLe," (GroupViT model)"),PLe.forEach(t),sYe=i(L),wf=n(L,"LI",{});var BLe=s(wf);Sae=n(BLe,"STRONG",{});var _et=s(Sae);lYe=r(_et,"hubert"),_et.forEach(t),iYe=r(BLe," \u2014 "),iR=n(BLe,"A",{href:!0});var bet=s(iR);dYe=r(bet,"HubertConfig"),bet.forEach(t),cYe=r(BLe," (Hubert model)"),BLe.forEach(t),mYe=i(L),Af=n(L,"LI",{});var ILe=s(Af);Rae=n(ILe,"STRONG",{});var vet=s(Rae);fYe=r(vet,"ibert"),vet.forEach(t),gYe=r(ILe," \u2014 "),dR=n(ILe,"A",{href:!0});var Fet=s(dR);hYe=r(Fet,"IBertConfig"),Fet.forEach(t),uYe=r(ILe," (I-BERT model)"),ILe.forEach(t),pYe=i(L),Lf=n(L,"LI",{});var NLe=s(Lf);Pae=n(NLe,"STRONG",{});var Tet=s(Pae);_Ye=r(Tet,"imagegpt"),Tet.forEach(t),bYe=r(NLe," \u2014 "),cR=n(NLe,"A",{href:!0});var Met=s(cR);vYe=r(Met,"ImageGPTConfig"),Met.forEach(t),FYe=r(NLe," (ImageGPT model)"),NLe.forEach(t),TYe=i(L),yf=n(L,"LI",{});var qLe=s(yf);Bae=n(qLe,"STRONG",{});var Eet=s(Bae);MYe=r(Eet,"layoutlm"),Eet.forEach(t),EYe=r(qLe," \u2014 "),mR=n(qLe,"A",{href:!0});var Cet=s(mR);CYe=r(Cet,"LayoutLMConfig"),Cet.forEach(t),wYe=r(qLe," (LayoutLM model)"),qLe.forEach(t),AYe=i(L),xf=n(L,"LI",{});var jLe=s(xf);Iae=n(jLe,"STRONG",{});var wet=s(Iae);LYe=r(wet,"layoutlmv2"),wet.forEach(t),yYe=r(jLe," \u2014 "),fR=n(jLe,"A",{href:!0});var Aet=s(fR);xYe=r(Aet,"LayoutLMv2Config"),Aet.forEach(t),$Ye=r(jLe," (LayoutLMv2 model)"),jLe.forEach(t),kYe=i(L),$f=n(L,"LI",{});var DLe=s($f);Nae=n(DLe,"STRONG",{});var Let=s(Nae);SYe=r(Let,"layoutlmv3"),Let.forEach(t),RYe=r(DLe," \u2014 "),gR=n(DLe,"A",{href:!0});var yet=s(gR);PYe=r(yet,"LayoutLMv3Config"),yet.forEach(t),BYe=r(DLe," (LayoutLMv3 model)"),DLe.forEach(t),IYe=i(L),kf=n(L,"LI",{});var GLe=s(kf);qae=n(GLe,"STRONG",{});var xet=s(qae);NYe=r(xet,"led"),xet.forEach(t),qYe=r(GLe," \u2014 "),hR=n(GLe,"A",{href:!0});var $et=s(hR);jYe=r($et,"LEDConfig"),$et.forEach(t),DYe=r(GLe," (LED model)"),GLe.forEach(t),GYe=i(L),Sf=n(L,"LI",{});var OLe=s(Sf);jae=n(OLe,"STRONG",{});var ket=s(jae);OYe=r(ket,"levit"),ket.forEach(t),VYe=r(OLe," \u2014 "),uR=n(OLe,"A",{href:!0});var Set=s(uR);XYe=r(Set,"LevitConfig"),Set.forEach(t),zYe=r(OLe," (LeViT model)"),OLe.forEach(t),QYe=i(L),Rf=n(L,"LI",{});var VLe=s(Rf);Dae=n(VLe,"STRONG",{});var Ret=s(Dae);WYe=r(Ret,"longformer"),Ret.forEach(t),HYe=r(VLe," \u2014 "),pR=n(VLe,"A",{href:!0});var Pet=s(pR);UYe=r(Pet,"LongformerConfig"),Pet.forEach(t),JYe=r(VLe," (Longformer model)"),VLe.forEach(t),YYe=i(L),Pf=n(L,"LI",{});var XLe=s(Pf);Gae=n(XLe,"STRONG",{});var Bet=s(Gae);KYe=r(Bet,"longt5"),Bet.forEach(t),ZYe=r(XLe," \u2014 "),_R=n(XLe,"A",{href:!0});var Iet=s(_R);eKe=r(Iet,"LongT5Config"),Iet.forEach(t),oKe=r(XLe," (LongT5 model)"),XLe.forEach(t),rKe=i(L),Bf=n(L,"LI",{});var zLe=s(Bf);Oae=n(zLe,"STRONG",{});var Net=s(Oae);tKe=r(Net,"luke"),Net.forEach(t),aKe=r(zLe," \u2014 "),bR=n(zLe,"A",{href:!0});var qet=s(bR);nKe=r(qet,"LukeConfig"),qet.forEach(t),sKe=r(zLe," (LUKE model)"),zLe.forEach(t),lKe=i(L),If=n(L,"LI",{});var QLe=s(If);Vae=n(QLe,"STRONG",{});var jet=s(Vae);iKe=r(jet,"lxmert"),jet.forEach(t),dKe=r(QLe," \u2014 "),vR=n(QLe,"A",{href:!0});var Det=s(vR);cKe=r(Det,"LxmertConfig"),Det.forEach(t),mKe=r(QLe," (LXMERT model)"),QLe.forEach(t),fKe=i(L),Nf=n(L,"LI",{});var WLe=s(Nf);Xae=n(WLe,"STRONG",{});var Get=s(Xae);gKe=r(Get,"m2m_100"),Get.forEach(t),hKe=r(WLe," \u2014 "),FR=n(WLe,"A",{href:!0});var Oet=s(FR);uKe=r(Oet,"M2M100Config"),Oet.forEach(t),pKe=r(WLe," (M2M100 model)"),WLe.forEach(t),_Ke=i(L),qf=n(L,"LI",{});var HLe=s(qf);zae=n(HLe,"STRONG",{});var Vet=s(zae);bKe=r(Vet,"marian"),Vet.forEach(t),vKe=r(HLe," \u2014 "),TR=n(HLe,"A",{href:!0});var Xet=s(TR);FKe=r(Xet,"MarianConfig"),Xet.forEach(t),TKe=r(HLe," (Marian model)"),HLe.forEach(t),MKe=i(L),jf=n(L,"LI",{});var ULe=s(jf);Qae=n(ULe,"STRONG",{});var zet=s(Qae);EKe=r(zet,"maskformer"),zet.forEach(t),CKe=r(ULe," \u2014 "),MR=n(ULe,"A",{href:!0});var Qet=s(MR);wKe=r(Qet,"MaskFormerConfig"),Qet.forEach(t),AKe=r(ULe," (MaskFormer model)"),ULe.forEach(t),LKe=i(L),Df=n(L,"LI",{});var JLe=s(Df);Wae=n(JLe,"STRONG",{});var Wet=s(Wae);yKe=r(Wet,"mbart"),Wet.forEach(t),xKe=r(JLe," \u2014 "),ER=n(JLe,"A",{href:!0});var Het=s(ER);$Ke=r(Het,"MBartConfig"),Het.forEach(t),kKe=r(JLe," (mBART model)"),JLe.forEach(t),SKe=i(L),Gf=n(L,"LI",{});var YLe=s(Gf);Hae=n(YLe,"STRONG",{});var Uet=s(Hae);RKe=r(Uet,"mctct"),Uet.forEach(t),PKe=r(YLe," \u2014 "),CR=n(YLe,"A",{href:!0});var Jet=s(CR);BKe=r(Jet,"MCTCTConfig"),Jet.forEach(t),IKe=r(YLe," (M-CTC-T model)"),YLe.forEach(t),NKe=i(L),Of=n(L,"LI",{});var KLe=s(Of);Uae=n(KLe,"STRONG",{});var Yet=s(Uae);qKe=r(Yet,"megatron-bert"),Yet.forEach(t),jKe=r(KLe," \u2014 "),wR=n(KLe,"A",{href:!0});var Ket=s(wR);DKe=r(Ket,"MegatronBertConfig"),Ket.forEach(t),GKe=r(KLe," (Megatron-BERT model)"),KLe.forEach(t),OKe=i(L),Vf=n(L,"LI",{});var ZLe=s(Vf);Jae=n(ZLe,"STRONG",{});var Zet=s(Jae);VKe=r(Zet,"mobilebert"),Zet.forEach(t),XKe=r(ZLe," \u2014 "),AR=n(ZLe,"A",{href:!0});var eot=s(AR);zKe=r(eot,"MobileBertConfig"),eot.forEach(t),QKe=r(ZLe," (MobileBERT model)"),ZLe.forEach(t),WKe=i(L),Xf=n(L,"LI",{});var e7e=s(Xf);Yae=n(e7e,"STRONG",{});var oot=s(Yae);HKe=r(oot,"mpnet"),oot.forEach(t),UKe=r(e7e," \u2014 "),LR=n(e7e,"A",{href:!0});var rot=s(LR);JKe=r(rot,"MPNetConfig"),rot.forEach(t),YKe=r(e7e," (MPNet model)"),e7e.forEach(t),KKe=i(L),zf=n(L,"LI",{});var o7e=s(zf);Kae=n(o7e,"STRONG",{});var tot=s(Kae);ZKe=r(tot,"mt5"),tot.forEach(t),eZe=r(o7e," \u2014 "),yR=n(o7e,"A",{href:!0});var aot=s(yR);oZe=r(aot,"MT5Config"),aot.forEach(t),rZe=r(o7e," (MT5 model)"),o7e.forEach(t),tZe=i(L),Qf=n(L,"LI",{});var r7e=s(Qf);Zae=n(r7e,"STRONG",{});var not=s(Zae);aZe=r(not,"nezha"),not.forEach(t),nZe=r(r7e," \u2014 "),xR=n(r7e,"A",{href:!0});var sot=s(xR);sZe=r(sot,"NezhaConfig"),sot.forEach(t),lZe=r(r7e," (Nezha model)"),r7e.forEach(t),iZe=i(L),Wf=n(L,"LI",{});var t7e=s(Wf);ene=n(t7e,"STRONG",{});var lot=s(ene);dZe=r(lot,"nystromformer"),lot.forEach(t),cZe=r(t7e," \u2014 "),$R=n(t7e,"A",{href:!0});var iot=s($R);mZe=r(iot,"NystromformerConfig"),iot.forEach(t),fZe=r(t7e," (Nystr\xF6mformer model)"),t7e.forEach(t),gZe=i(L),Hf=n(L,"LI",{});var a7e=s(Hf);one=n(a7e,"STRONG",{});var dot=s(one);hZe=r(dot,"openai-gpt"),dot.forEach(t),uZe=r(a7e," \u2014 "),kR=n(a7e,"A",{href:!0});var cot=s(kR);pZe=r(cot,"OpenAIGPTConfig"),cot.forEach(t),_Ze=r(a7e," (OpenAI GPT model)"),a7e.forEach(t),bZe=i(L),Uf=n(L,"LI",{});var n7e=s(Uf);rne=n(n7e,"STRONG",{});var mot=s(rne);vZe=r(mot,"opt"),mot.forEach(t),FZe=r(n7e," \u2014 "),SR=n(n7e,"A",{href:!0});var fot=s(SR);TZe=r(fot,"OPTConfig"),fot.forEach(t),MZe=r(n7e," (OPT model)"),n7e.forEach(t),EZe=i(L),Jf=n(L,"LI",{});var s7e=s(Jf);tne=n(s7e,"STRONG",{});var got=s(tne);CZe=r(got,"pegasus"),got.forEach(t),wZe=r(s7e," \u2014 "),RR=n(s7e,"A",{href:!0});var hot=s(RR);AZe=r(hot,"PegasusConfig"),hot.forEach(t),LZe=r(s7e," (Pegasus model)"),s7e.forEach(t),yZe=i(L),Yf=n(L,"LI",{});var l7e=s(Yf);ane=n(l7e,"STRONG",{});var uot=s(ane);xZe=r(uot,"perceiver"),uot.forEach(t),$Ze=r(l7e," \u2014 "),PR=n(l7e,"A",{href:!0});var pot=s(PR);kZe=r(pot,"PerceiverConfig"),pot.forEach(t),SZe=r(l7e," (Perceiver model)"),l7e.forEach(t),RZe=i(L),Kf=n(L,"LI",{});var i7e=s(Kf);nne=n(i7e,"STRONG",{});var _ot=s(nne);PZe=r(_ot,"plbart"),_ot.forEach(t),BZe=r(i7e," \u2014 "),BR=n(i7e,"A",{href:!0});var bot=s(BR);IZe=r(bot,"PLBartConfig"),bot.forEach(t),NZe=r(i7e," (PLBart model)"),i7e.forEach(t),qZe=i(L),Zf=n(L,"LI",{});var d7e=s(Zf);sne=n(d7e,"STRONG",{});var vot=s(sne);jZe=r(vot,"poolformer"),vot.forEach(t),DZe=r(d7e," \u2014 "),IR=n(d7e,"A",{href:!0});var Fot=s(IR);GZe=r(Fot,"PoolFormerConfig"),Fot.forEach(t),OZe=r(d7e," (PoolFormer model)"),d7e.forEach(t),VZe=i(L),eg=n(L,"LI",{});var c7e=s(eg);lne=n(c7e,"STRONG",{});var Tot=s(lne);XZe=r(Tot,"prophetnet"),Tot.forEach(t),zZe=r(c7e," \u2014 "),NR=n(c7e,"A",{href:!0});var Mot=s(NR);QZe=r(Mot,"ProphetNetConfig"),Mot.forEach(t),WZe=r(c7e," (ProphetNet model)"),c7e.forEach(t),HZe=i(L),og=n(L,"LI",{});var m7e=s(og);ine=n(m7e,"STRONG",{});var Eot=s(ine);UZe=r(Eot,"qdqbert"),Eot.forEach(t),JZe=r(m7e," \u2014 "),qR=n(m7e,"A",{href:!0});var Cot=s(qR);YZe=r(Cot,"QDQBertConfig"),Cot.forEach(t),KZe=r(m7e," (QDQBert model)"),m7e.forEach(t),ZZe=i(L),rg=n(L,"LI",{});var f7e=s(rg);dne=n(f7e,"STRONG",{});var wot=s(dne);eeo=r(wot,"rag"),wot.forEach(t),oeo=r(f7e," \u2014 "),jR=n(f7e,"A",{href:!0});var Aot=s(jR);reo=r(Aot,"RagConfig"),Aot.forEach(t),teo=r(f7e," (RAG model)"),f7e.forEach(t),aeo=i(L),tg=n(L,"LI",{});var g7e=s(tg);cne=n(g7e,"STRONG",{});var Lot=s(cne);neo=r(Lot,"realm"),Lot.forEach(t),seo=r(g7e," \u2014 "),DR=n(g7e,"A",{href:!0});var yot=s(DR);leo=r(yot,"RealmConfig"),yot.forEach(t),ieo=r(g7e," (REALM model)"),g7e.forEach(t),deo=i(L),ag=n(L,"LI",{});var h7e=s(ag);mne=n(h7e,"STRONG",{});var xot=s(mne);ceo=r(xot,"reformer"),xot.forEach(t),meo=r(h7e," \u2014 "),GR=n(h7e,"A",{href:!0});var $ot=s(GR);feo=r($ot,"ReformerConfig"),$ot.forEach(t),geo=r(h7e," (Reformer model)"),h7e.forEach(t),heo=i(L),ng=n(L,"LI",{});var u7e=s(ng);fne=n(u7e,"STRONG",{});var kot=s(fne);ueo=r(kot,"regnet"),kot.forEach(t),peo=r(u7e," \u2014 "),OR=n(u7e,"A",{href:!0});var Sot=s(OR);_eo=r(Sot,"RegNetConfig"),Sot.forEach(t),beo=r(u7e," (RegNet model)"),u7e.forEach(t),veo=i(L),sg=n(L,"LI",{});var p7e=s(sg);gne=n(p7e,"STRONG",{});var Rot=s(gne);Feo=r(Rot,"rembert"),Rot.forEach(t),Teo=r(p7e," \u2014 "),VR=n(p7e,"A",{href:!0});var Pot=s(VR);Meo=r(Pot,"RemBertConfig"),Pot.forEach(t),Eeo=r(p7e," (RemBERT model)"),p7e.forEach(t),Ceo=i(L),lg=n(L,"LI",{});var _7e=s(lg);hne=n(_7e,"STRONG",{});var Bot=s(hne);weo=r(Bot,"resnet"),Bot.forEach(t),Aeo=r(_7e," \u2014 "),XR=n(_7e,"A",{href:!0});var Iot=s(XR);Leo=r(Iot,"ResNetConfig"),Iot.forEach(t),yeo=r(_7e," (ResNet model)"),_7e.forEach(t),xeo=i(L),ig=n(L,"LI",{});var b7e=s(ig);une=n(b7e,"STRONG",{});var Not=s(une);$eo=r(Not,"retribert"),Not.forEach(t),keo=r(b7e," \u2014 "),zR=n(b7e,"A",{href:!0});var qot=s(zR);Seo=r(qot,"RetriBertConfig"),qot.forEach(t),Reo=r(b7e," (RetriBERT model)"),b7e.forEach(t),Peo=i(L),dg=n(L,"LI",{});var v7e=s(dg);pne=n(v7e,"STRONG",{});var jot=s(pne);Beo=r(jot,"roberta"),jot.forEach(t),Ieo=r(v7e," \u2014 "),QR=n(v7e,"A",{href:!0});var Dot=s(QR);Neo=r(Dot,"RobertaConfig"),Dot.forEach(t),qeo=r(v7e," (RoBERTa model)"),v7e.forEach(t),jeo=i(L),cg=n(L,"LI",{});var F7e=s(cg);_ne=n(F7e,"STRONG",{});var Got=s(_ne);Deo=r(Got,"roformer"),Got.forEach(t),Geo=r(F7e," \u2014 "),WR=n(F7e,"A",{href:!0});var Oot=s(WR);Oeo=r(Oot,"RoFormerConfig"),Oot.forEach(t),Veo=r(F7e," (RoFormer model)"),F7e.forEach(t),Xeo=i(L),mg=n(L,"LI",{});var T7e=s(mg);bne=n(T7e,"STRONG",{});var Vot=s(bne);zeo=r(Vot,"segformer"),Vot.forEach(t),Qeo=r(T7e," \u2014 "),HR=n(T7e,"A",{href:!0});var Xot=s(HR);Weo=r(Xot,"SegformerConfig"),Xot.forEach(t),Heo=r(T7e," (SegFormer model)"),T7e.forEach(t),Ueo=i(L),fg=n(L,"LI",{});var M7e=s(fg);vne=n(M7e,"STRONG",{});var zot=s(vne);Jeo=r(zot,"sew"),zot.forEach(t),Yeo=r(M7e," \u2014 "),UR=n(M7e,"A",{href:!0});var Qot=s(UR);Keo=r(Qot,"SEWConfig"),Qot.forEach(t),Zeo=r(M7e," (SEW model)"),M7e.forEach(t),eoo=i(L),gg=n(L,"LI",{});var E7e=s(gg);Fne=n(E7e,"STRONG",{});var Wot=s(Fne);ooo=r(Wot,"sew-d"),Wot.forEach(t),roo=r(E7e," \u2014 "),JR=n(E7e,"A",{href:!0});var Hot=s(JR);too=r(Hot,"SEWDConfig"),Hot.forEach(t),aoo=r(E7e," (SEW-D model)"),E7e.forEach(t),noo=i(L),hg=n(L,"LI",{});var C7e=s(hg);Tne=n(C7e,"STRONG",{});var Uot=s(Tne);soo=r(Uot,"speech-encoder-decoder"),Uot.forEach(t),loo=r(C7e," \u2014 "),YR=n(C7e,"A",{href:!0});var Jot=s(YR);ioo=r(Jot,"SpeechEncoderDecoderConfig"),Jot.forEach(t),doo=r(C7e," (Speech Encoder decoder model)"),C7e.forEach(t),coo=i(L),ug=n(L,"LI",{});var w7e=s(ug);Mne=n(w7e,"STRONG",{});var Yot=s(Mne);moo=r(Yot,"speech_to_text"),Yot.forEach(t),foo=r(w7e," \u2014 "),KR=n(w7e,"A",{href:!0});var Kot=s(KR);goo=r(Kot,"Speech2TextConfig"),Kot.forEach(t),hoo=r(w7e," (Speech2Text model)"),w7e.forEach(t),uoo=i(L),pg=n(L,"LI",{});var A7e=s(pg);Ene=n(A7e,"STRONG",{});var Zot=s(Ene);poo=r(Zot,"speech_to_text_2"),Zot.forEach(t),_oo=r(A7e," \u2014 "),ZR=n(A7e,"A",{href:!0});var ert=s(ZR);boo=r(ert,"Speech2Text2Config"),ert.forEach(t),voo=r(A7e," (Speech2Text2 model)"),A7e.forEach(t),Foo=i(L),_g=n(L,"LI",{});var L7e=s(_g);Cne=n(L7e,"STRONG",{});var ort=s(Cne);Too=r(ort,"splinter"),ort.forEach(t),Moo=r(L7e," \u2014 "),eP=n(L7e,"A",{href:!0});var rrt=s(eP);Eoo=r(rrt,"SplinterConfig"),rrt.forEach(t),Coo=r(L7e," (Splinter model)"),L7e.forEach(t),woo=i(L),bg=n(L,"LI",{});var y7e=s(bg);wne=n(y7e,"STRONG",{});var trt=s(wne);Aoo=r(trt,"squeezebert"),trt.forEach(t),Loo=r(y7e," \u2014 "),oP=n(y7e,"A",{href:!0});var art=s(oP);yoo=r(art,"SqueezeBertConfig"),art.forEach(t),xoo=r(y7e," (SqueezeBERT model)"),y7e.forEach(t),$oo=i(L),vg=n(L,"LI",{});var x7e=s(vg);Ane=n(x7e,"STRONG",{});var nrt=s(Ane);koo=r(nrt,"swin"),nrt.forEach(t),Soo=r(x7e," \u2014 "),rP=n(x7e,"A",{href:!0});var srt=s(rP);Roo=r(srt,"SwinConfig"),srt.forEach(t),Poo=r(x7e," (Swin Transformer model)"),x7e.forEach(t),Boo=i(L),Fg=n(L,"LI",{});var $7e=s(Fg);Lne=n($7e,"STRONG",{});var lrt=s(Lne);Ioo=r(lrt,"t5"),lrt.forEach(t),Noo=r($7e," \u2014 "),tP=n($7e,"A",{href:!0});var irt=s(tP);qoo=r(irt,"T5Config"),irt.forEach(t),joo=r($7e," (T5 model)"),$7e.forEach(t),Doo=i(L),Tg=n(L,"LI",{});var k7e=s(Tg);yne=n(k7e,"STRONG",{});var drt=s(yne);Goo=r(drt,"tapas"),drt.forEach(t),Ooo=r(k7e," \u2014 "),aP=n(k7e,"A",{href:!0});var crt=s(aP);Voo=r(crt,"TapasConfig"),crt.forEach(t),Xoo=r(k7e," (TAPAS model)"),k7e.forEach(t),zoo=i(L),Mg=n(L,"LI",{});var S7e=s(Mg);xne=n(S7e,"STRONG",{});var mrt=s(xne);Qoo=r(mrt,"trajectory_transformer"),mrt.forEach(t),Woo=r(S7e," \u2014 "),nP=n(S7e,"A",{href:!0});var frt=s(nP);Hoo=r(frt,"TrajectoryTransformerConfig"),frt.forEach(t),Uoo=r(S7e," (Trajectory Transformer model)"),S7e.forEach(t),Joo=i(L),Eg=n(L,"LI",{});var R7e=s(Eg);$ne=n(R7e,"STRONG",{});var grt=s($ne);Yoo=r(grt,"transfo-xl"),grt.forEach(t),Koo=r(R7e," \u2014 "),sP=n(R7e,"A",{href:!0});var hrt=s(sP);Zoo=r(hrt,"TransfoXLConfig"),hrt.forEach(t),ero=r(R7e," (Transformer-XL model)"),R7e.forEach(t),oro=i(L),Cg=n(L,"LI",{});var P7e=s(Cg);kne=n(P7e,"STRONG",{});var urt=s(kne);rro=r(urt,"trocr"),urt.forEach(t),tro=r(P7e," \u2014 "),lP=n(P7e,"A",{href:!0});var prt=s(lP);aro=r(prt,"TrOCRConfig"),prt.forEach(t),nro=r(P7e," (TrOCR model)"),P7e.forEach(t),sro=i(L),wg=n(L,"LI",{});var B7e=s(wg);Sne=n(B7e,"STRONG",{});var _rt=s(Sne);lro=r(_rt,"unispeech"),_rt.forEach(t),iro=r(B7e," \u2014 "),iP=n(B7e,"A",{href:!0});var brt=s(iP);dro=r(brt,"UniSpeechConfig"),brt.forEach(t),cro=r(B7e," (UniSpeech model)"),B7e.forEach(t),mro=i(L),Ag=n(L,"LI",{});var I7e=s(Ag);Rne=n(I7e,"STRONG",{});var vrt=s(Rne);fro=r(vrt,"unispeech-sat"),vrt.forEach(t),gro=r(I7e," \u2014 "),dP=n(I7e,"A",{href:!0});var Frt=s(dP);hro=r(Frt,"UniSpeechSatConfig"),Frt.forEach(t),uro=r(I7e," (UniSpeechSat model)"),I7e.forEach(t),pro=i(L),Lg=n(L,"LI",{});var N7e=s(Lg);Pne=n(N7e,"STRONG",{});var Trt=s(Pne);_ro=r(Trt,"van"),Trt.forEach(t),bro=r(N7e," \u2014 "),cP=n(N7e,"A",{href:!0});var Mrt=s(cP);vro=r(Mrt,"VanConfig"),Mrt.forEach(t),Fro=r(N7e," (VAN model)"),N7e.forEach(t),Tro=i(L),yg=n(L,"LI",{});var q7e=s(yg);Bne=n(q7e,"STRONG",{});var Ert=s(Bne);Mro=r(Ert,"vilt"),Ert.forEach(t),Ero=r(q7e," \u2014 "),mP=n(q7e,"A",{href:!0});var Crt=s(mP);Cro=r(Crt,"ViltConfig"),Crt.forEach(t),wro=r(q7e," (ViLT model)"),q7e.forEach(t),Aro=i(L),xg=n(L,"LI",{});var j7e=s(xg);Ine=n(j7e,"STRONG",{});var wrt=s(Ine);Lro=r(wrt,"vision-encoder-decoder"),wrt.forEach(t),yro=r(j7e," \u2014 "),fP=n(j7e,"A",{href:!0});var Art=s(fP);xro=r(Art,"VisionEncoderDecoderConfig"),Art.forEach(t),$ro=r(j7e," (Vision Encoder decoder model)"),j7e.forEach(t),kro=i(L),$g=n(L,"LI",{});var D7e=s($g);Nne=n(D7e,"STRONG",{});var Lrt=s(Nne);Sro=r(Lrt,"vision-text-dual-encoder"),Lrt.forEach(t),Rro=r(D7e," \u2014 "),gP=n(D7e,"A",{href:!0});var yrt=s(gP);Pro=r(yrt,"VisionTextDualEncoderConfig"),yrt.forEach(t),Bro=r(D7e," (VisionTextDualEncoder model)"),D7e.forEach(t),Iro=i(L),kg=n(L,"LI",{});var G7e=s(kg);qne=n(G7e,"STRONG",{});var xrt=s(qne);Nro=r(xrt,"visual_bert"),xrt.forEach(t),qro=r(G7e," \u2014 "),hP=n(G7e,"A",{href:!0});var $rt=s(hP);jro=r($rt,"VisualBertConfig"),$rt.forEach(t),Dro=r(G7e," (VisualBERT model)"),G7e.forEach(t),Gro=i(L),Sg=n(L,"LI",{});var O7e=s(Sg);jne=n(O7e,"STRONG",{});var krt=s(jne);Oro=r(krt,"vit"),krt.forEach(t),Vro=r(O7e," \u2014 "),uP=n(O7e,"A",{href:!0});var Srt=s(uP);Xro=r(Srt,"ViTConfig"),Srt.forEach(t),zro=r(O7e," (ViT model)"),O7e.forEach(t),Qro=i(L),Rg=n(L,"LI",{});var V7e=s(Rg);Dne=n(V7e,"STRONG",{});var Rrt=s(Dne);Wro=r(Rrt,"vit_mae"),Rrt.forEach(t),Hro=r(V7e," \u2014 "),pP=n(V7e,"A",{href:!0});var Prt=s(pP);Uro=r(Prt,"ViTMAEConfig"),Prt.forEach(t),Jro=r(V7e," (ViTMAE model)"),V7e.forEach(t),Yro=i(L),Pg=n(L,"LI",{});var X7e=s(Pg);Gne=n(X7e,"STRONG",{});var Brt=s(Gne);Kro=r(Brt,"wav2vec2"),Brt.forEach(t),Zro=r(X7e," \u2014 "),_P=n(X7e,"A",{href:!0});var Irt=s(_P);eto=r(Irt,"Wav2Vec2Config"),Irt.forEach(t),oto=r(X7e," (Wav2Vec2 model)"),X7e.forEach(t),rto=i(L),Bg=n(L,"LI",{});var z7e=s(Bg);One=n(z7e,"STRONG",{});var Nrt=s(One);tto=r(Nrt,"wav2vec2-conformer"),Nrt.forEach(t),ato=r(z7e," \u2014 "),bP=n(z7e,"A",{href:!0});var qrt=s(bP);nto=r(qrt,"Wav2Vec2ConformerConfig"),qrt.forEach(t),sto=r(z7e," (Wav2Vec2-Conformer model)"),z7e.forEach(t),lto=i(L),Ig=n(L,"LI",{});var Q7e=s(Ig);Vne=n(Q7e,"STRONG",{});var jrt=s(Vne);ito=r(jrt,"wavlm"),jrt.forEach(t),dto=r(Q7e," \u2014 "),vP=n(Q7e,"A",{href:!0});var Drt=s(vP);cto=r(Drt,"WavLMConfig"),Drt.forEach(t),mto=r(Q7e," (WavLM model)"),Q7e.forEach(t),fto=i(L),Ng=n(L,"LI",{});var W7e=s(Ng);Xne=n(W7e,"STRONG",{});var Grt=s(Xne);gto=r(Grt,"xglm"),Grt.forEach(t),hto=r(W7e," \u2014 "),FP=n(W7e,"A",{href:!0});var Ort=s(FP);uto=r(Ort,"XGLMConfig"),Ort.forEach(t),pto=r(W7e," (XGLM model)"),W7e.forEach(t),_to=i(L),qg=n(L,"LI",{});var H7e=s(qg);zne=n(H7e,"STRONG",{});var Vrt=s(zne);bto=r(Vrt,"xlm"),Vrt.forEach(t),vto=r(H7e," \u2014 "),TP=n(H7e,"A",{href:!0});var Xrt=s(TP);Fto=r(Xrt,"XLMConfig"),Xrt.forEach(t),Tto=r(H7e," (XLM model)"),H7e.forEach(t),Mto=i(L),jg=n(L,"LI",{});var U7e=s(jg);Qne=n(U7e,"STRONG",{});var zrt=s(Qne);Eto=r(zrt,"xlm-prophetnet"),zrt.forEach(t),Cto=r(U7e," \u2014 "),MP=n(U7e,"A",{href:!0});var Qrt=s(MP);wto=r(Qrt,"XLMProphetNetConfig"),Qrt.forEach(t),Ato=r(U7e," (XLM-ProphetNet model)"),U7e.forEach(t),Lto=i(L),Dg=n(L,"LI",{});var J7e=s(Dg);Wne=n(J7e,"STRONG",{});var Wrt=s(Wne);yto=r(Wrt,"xlm-roberta"),Wrt.forEach(t),xto=r(J7e," \u2014 "),EP=n(J7e,"A",{href:!0});var Hrt=s(EP);$to=r(Hrt,"XLMRobertaConfig"),Hrt.forEach(t),kto=r(J7e," (XLM-RoBERTa model)"),J7e.forEach(t),Sto=i(L),Gg=n(L,"LI",{});var Y7e=s(Gg);Hne=n(Y7e,"STRONG",{});var Urt=s(Hne);Rto=r(Urt,"xlm-roberta-xl"),Urt.forEach(t),Pto=r(Y7e," \u2014 "),CP=n(Y7e,"A",{href:!0});var Jrt=s(CP);Bto=r(Jrt,"XLMRobertaXLConfig"),Jrt.forEach(t),Ito=r(Y7e," (XLM-RoBERTa-XL model)"),Y7e.forEach(t),Nto=i(L),Og=n(L,"LI",{});var K7e=s(Og);Une=n(K7e,"STRONG",{});var Yrt=s(Une);qto=r(Yrt,"xlnet"),Yrt.forEach(t),jto=r(K7e," \u2014 "),wP=n(K7e,"A",{href:!0});var Krt=s(wP);Dto=r(Krt,"XLNetConfig"),Krt.forEach(t),Gto=r(K7e," (XLNet model)"),K7e.forEach(t),Oto=i(L),Vg=n(L,"LI",{});var Z7e=s(Vg);Jne=n(Z7e,"STRONG",{});var Zrt=s(Jne);Vto=r(Zrt,"yolos"),Zrt.forEach(t),Xto=r(Z7e," \u2014 "),AP=n(Z7e,"A",{href:!0});var ett=s(AP);zto=r(ett,"YolosConfig"),ett.forEach(t),Qto=r(Z7e," (YOLOS model)"),Z7e.forEach(t),Wto=i(L),Xg=n(L,"LI",{});var eye=s(Xg);Yne=n(eye,"STRONG",{});var ott=s(Yne);Hto=r(ott,"yoso"),ott.forEach(t),Uto=r(eye," \u2014 "),LP=n(eye,"A",{href:!0});var rtt=s(LP);Jto=r(rtt,"YosoConfig"),rtt.forEach(t),Yto=r(eye," (YOSO model)"),eye.forEach(t),L.forEach(t),Kto=i(tt),T(zg.$$.fragment,tt),tt.forEach(t),Zto=i(rt),Qg=n(rt,"DIV",{class:!0});var xXe=s(Qg);T(z7.$$.fragment,xXe),eao=i(xXe),Kne=n(xXe,"P",{});var ttt=s(Kne);oao=r(ttt,"Register a new configuration for this class."),ttt.forEach(t),xXe.forEach(t),rt.forEach(t),$Oe=i(m),Ri=n(m,"H2",{class:!0});var $Xe=s(Ri);Wg=n($Xe,"A",{id:!0,class:!0,href:!0});var att=s(Wg);Zne=n(att,"SPAN",{});var ntt=s(Zne);T(Q7.$$.fragment,ntt),ntt.forEach(t),att.forEach(t),rao=i($Xe),ese=n($Xe,"SPAN",{});var stt=s(ese);tao=r(stt,"AutoTokenizer"),stt.forEach(t),$Xe.forEach(t),kOe=i(m),Ao=n(m,"DIV",{class:!0});var Us=s(Ao);T(W7.$$.fragment,Us),aao=i(Us),H7=n(Us,"P",{});var kXe=s(H7);nao=r(kXe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),yP=n(kXe,"A",{href:!0});var ltt=s(yP);sao=r(ltt,"AutoTokenizer.from_pretrained()"),ltt.forEach(t),lao=r(kXe," class method."),kXe.forEach(t),iao=i(Us),U7=n(Us,"P",{});var SXe=s(U7);dao=r(SXe,"This class cannot be instantiated directly using "),ose=n(SXe,"CODE",{});var itt=s(ose);cao=r(itt,"__init__()"),itt.forEach(t),mao=r(SXe," (throws an error)."),SXe.forEach(t),fao=i(Us),Lr=n(Us,"DIV",{class:!0});var Js=s(Lr);T(J7.$$.fragment,Js),gao=i(Js),rse=n(Js,"P",{});var dtt=s(rse);hao=r(dtt,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),dtt.forEach(t),uao=i(Js),ka=n(Js,"P",{});var q6=s(ka);pao=r(q6,"The tokenizer class to instantiate is selected based on the "),tse=n(q6,"CODE",{});var ctt=s(tse);_ao=r(ctt,"model_type"),ctt.forEach(t),bao=r(q6,` property of the config object (either
passed as an argument or loaded from `),ase=n(q6,"CODE",{});var mtt=s(ase);vao=r(mtt,"pretrained_model_name_or_path"),mtt.forEach(t),Fao=r(q6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nse=n(q6,"CODE",{});var ftt=s(nse);Tao=r(ftt,"pretrained_model_name_or_path"),ftt.forEach(t),Mao=r(q6,":"),q6.forEach(t),Eao=i(Js),k=n(Js,"UL",{});var S=s(k);qn=n(S,"LI",{});var rk=s(qn);sse=n(rk,"STRONG",{});var gtt=s(sse);Cao=r(gtt,"albert"),gtt.forEach(t),wao=r(rk," \u2014 "),xP=n(rk,"A",{href:!0});var htt=s(xP);Aao=r(htt,"AlbertTokenizer"),htt.forEach(t),Lao=r(rk," or "),$P=n(rk,"A",{href:!0});var utt=s($P);yao=r(utt,"AlbertTokenizerFast"),utt.forEach(t),xao=r(rk," (ALBERT model)"),rk.forEach(t),$ao=i(S),jn=n(S,"LI",{});var tk=s(jn);lse=n(tk,"STRONG",{});var ptt=s(lse);kao=r(ptt,"bart"),ptt.forEach(t),Sao=r(tk," \u2014 "),kP=n(tk,"A",{href:!0});var _tt=s(kP);Rao=r(_tt,"BartTokenizer"),_tt.forEach(t),Pao=r(tk," or "),SP=n(tk,"A",{href:!0});var btt=s(SP);Bao=r(btt,"BartTokenizerFast"),btt.forEach(t),Iao=r(tk," (BART model)"),tk.forEach(t),Nao=i(S),Dn=n(S,"LI",{});var ak=s(Dn);ise=n(ak,"STRONG",{});var vtt=s(ise);qao=r(vtt,"barthez"),vtt.forEach(t),jao=r(ak," \u2014 "),RP=n(ak,"A",{href:!0});var Ftt=s(RP);Dao=r(Ftt,"BarthezTokenizer"),Ftt.forEach(t),Gao=r(ak," or "),PP=n(ak,"A",{href:!0});var Ttt=s(PP);Oao=r(Ttt,"BarthezTokenizerFast"),Ttt.forEach(t),Vao=r(ak," (BARThez model)"),ak.forEach(t),Xao=i(S),Hg=n(S,"LI",{});var oye=s(Hg);dse=n(oye,"STRONG",{});var Mtt=s(dse);zao=r(Mtt,"bartpho"),Mtt.forEach(t),Qao=r(oye," \u2014 "),BP=n(oye,"A",{href:!0});var Ett=s(BP);Wao=r(Ett,"BartphoTokenizer"),Ett.forEach(t),Hao=r(oye," (BARTpho model)"),oye.forEach(t),Uao=i(S),Gn=n(S,"LI",{});var nk=s(Gn);cse=n(nk,"STRONG",{});var Ctt=s(cse);Jao=r(Ctt,"bert"),Ctt.forEach(t),Yao=r(nk," \u2014 "),IP=n(nk,"A",{href:!0});var wtt=s(IP);Kao=r(wtt,"BertTokenizer"),wtt.forEach(t),Zao=r(nk," or "),NP=n(nk,"A",{href:!0});var Att=s(NP);eno=r(Att,"BertTokenizerFast"),Att.forEach(t),ono=r(nk," (BERT model)"),nk.forEach(t),rno=i(S),Ug=n(S,"LI",{});var rye=s(Ug);mse=n(rye,"STRONG",{});var Ltt=s(mse);tno=r(Ltt,"bert-generation"),Ltt.forEach(t),ano=r(rye," \u2014 "),qP=n(rye,"A",{href:!0});var ytt=s(qP);nno=r(ytt,"BertGenerationTokenizer"),ytt.forEach(t),sno=r(rye," (Bert Generation model)"),rye.forEach(t),lno=i(S),Jg=n(S,"LI",{});var tye=s(Jg);fse=n(tye,"STRONG",{});var xtt=s(fse);ino=r(xtt,"bert-japanese"),xtt.forEach(t),dno=r(tye," \u2014 "),jP=n(tye,"A",{href:!0});var $tt=s(jP);cno=r($tt,"BertJapaneseTokenizer"),$tt.forEach(t),mno=r(tye," (BertJapanese model)"),tye.forEach(t),fno=i(S),Yg=n(S,"LI",{});var aye=s(Yg);gse=n(aye,"STRONG",{});var ktt=s(gse);gno=r(ktt,"bertweet"),ktt.forEach(t),hno=r(aye," \u2014 "),DP=n(aye,"A",{href:!0});var Stt=s(DP);uno=r(Stt,"BertweetTokenizer"),Stt.forEach(t),pno=r(aye," (BERTweet model)"),aye.forEach(t),_no=i(S),On=n(S,"LI",{});var sk=s(On);hse=n(sk,"STRONG",{});var Rtt=s(hse);bno=r(Rtt,"big_bird"),Rtt.forEach(t),vno=r(sk," \u2014 "),GP=n(sk,"A",{href:!0});var Ptt=s(GP);Fno=r(Ptt,"BigBirdTokenizer"),Ptt.forEach(t),Tno=r(sk," or "),OP=n(sk,"A",{href:!0});var Btt=s(OP);Mno=r(Btt,"BigBirdTokenizerFast"),Btt.forEach(t),Eno=r(sk," (BigBird model)"),sk.forEach(t),Cno=i(S),Vn=n(S,"LI",{});var lk=s(Vn);use=n(lk,"STRONG",{});var Itt=s(use);wno=r(Itt,"bigbird_pegasus"),Itt.forEach(t),Ano=r(lk," \u2014 "),VP=n(lk,"A",{href:!0});var Ntt=s(VP);Lno=r(Ntt,"PegasusTokenizer"),Ntt.forEach(t),yno=r(lk," or "),XP=n(lk,"A",{href:!0});var qtt=s(XP);xno=r(qtt,"PegasusTokenizerFast"),qtt.forEach(t),$no=r(lk," (BigBird-Pegasus model)"),lk.forEach(t),kno=i(S),Xn=n(S,"LI",{});var ik=s(Xn);pse=n(ik,"STRONG",{});var jtt=s(pse);Sno=r(jtt,"blenderbot"),jtt.forEach(t),Rno=r(ik," \u2014 "),zP=n(ik,"A",{href:!0});var Dtt=s(zP);Pno=r(Dtt,"BlenderbotTokenizer"),Dtt.forEach(t),Bno=r(ik," or "),QP=n(ik,"A",{href:!0});var Gtt=s(QP);Ino=r(Gtt,"BlenderbotTokenizerFast"),Gtt.forEach(t),Nno=r(ik," (Blenderbot model)"),ik.forEach(t),qno=i(S),Kg=n(S,"LI",{});var nye=s(Kg);_se=n(nye,"STRONG",{});var Ott=s(_se);jno=r(Ott,"blenderbot-small"),Ott.forEach(t),Dno=r(nye," \u2014 "),WP=n(nye,"A",{href:!0});var Vtt=s(WP);Gno=r(Vtt,"BlenderbotSmallTokenizer"),Vtt.forEach(t),Ono=r(nye," (BlenderbotSmall model)"),nye.forEach(t),Vno=i(S),Zg=n(S,"LI",{});var sye=s(Zg);bse=n(sye,"STRONG",{});var Xtt=s(bse);Xno=r(Xtt,"bloom"),Xtt.forEach(t),zno=r(sye," \u2014 "),HP=n(sye,"A",{href:!0});var ztt=s(HP);Qno=r(ztt,"BloomTokenizerFast"),ztt.forEach(t),Wno=r(sye," (BLOOM model)"),sye.forEach(t),Hno=i(S),eh=n(S,"LI",{});var lye=s(eh);vse=n(lye,"STRONG",{});var Qtt=s(vse);Uno=r(Qtt,"byt5"),Qtt.forEach(t),Jno=r(lye," \u2014 "),UP=n(lye,"A",{href:!0});var Wtt=s(UP);Yno=r(Wtt,"ByT5Tokenizer"),Wtt.forEach(t),Kno=r(lye," (ByT5 model)"),lye.forEach(t),Zno=i(S),zn=n(S,"LI",{});var dk=s(zn);Fse=n(dk,"STRONG",{});var Htt=s(Fse);eso=r(Htt,"camembert"),Htt.forEach(t),oso=r(dk," \u2014 "),JP=n(dk,"A",{href:!0});var Utt=s(JP);rso=r(Utt,"CamembertTokenizer"),Utt.forEach(t),tso=r(dk," or "),YP=n(dk,"A",{href:!0});var Jtt=s(YP);aso=r(Jtt,"CamembertTokenizerFast"),Jtt.forEach(t),nso=r(dk," (CamemBERT model)"),dk.forEach(t),sso=i(S),oh=n(S,"LI",{});var iye=s(oh);Tse=n(iye,"STRONG",{});var Ytt=s(Tse);lso=r(Ytt,"canine"),Ytt.forEach(t),iso=r(iye," \u2014 "),KP=n(iye,"A",{href:!0});var Ktt=s(KP);dso=r(Ktt,"CanineTokenizer"),Ktt.forEach(t),cso=r(iye," (CANINE model)"),iye.forEach(t),mso=i(S),Qn=n(S,"LI",{});var ck=s(Qn);Mse=n(ck,"STRONG",{});var Ztt=s(Mse);fso=r(Ztt,"clip"),Ztt.forEach(t),gso=r(ck," \u2014 "),ZP=n(ck,"A",{href:!0});var eat=s(ZP);hso=r(eat,"CLIPTokenizer"),eat.forEach(t),uso=r(ck," or "),eB=n(ck,"A",{href:!0});var oat=s(eB);pso=r(oat,"CLIPTokenizerFast"),oat.forEach(t),_so=r(ck," (CLIP model)"),ck.forEach(t),bso=i(S),Wn=n(S,"LI",{});var mk=s(Wn);Ese=n(mk,"STRONG",{});var rat=s(Ese);vso=r(rat,"codegen"),rat.forEach(t),Fso=r(mk," \u2014 "),oB=n(mk,"A",{href:!0});var tat=s(oB);Tso=r(tat,"CodeGenTokenizer"),tat.forEach(t),Mso=r(mk," or "),rB=n(mk,"A",{href:!0});var aat=s(rB);Eso=r(aat,"CodeGenTokenizerFast"),aat.forEach(t),Cso=r(mk," (CodeGen model)"),mk.forEach(t),wso=i(S),Hn=n(S,"LI",{});var fk=s(Hn);Cse=n(fk,"STRONG",{});var nat=s(Cse);Aso=r(nat,"convbert"),nat.forEach(t),Lso=r(fk," \u2014 "),tB=n(fk,"A",{href:!0});var sat=s(tB);yso=r(sat,"ConvBertTokenizer"),sat.forEach(t),xso=r(fk," or "),aB=n(fk,"A",{href:!0});var lat=s(aB);$so=r(lat,"ConvBertTokenizerFast"),lat.forEach(t),kso=r(fk," (ConvBERT model)"),fk.forEach(t),Sso=i(S),Un=n(S,"LI",{});var gk=s(Un);wse=n(gk,"STRONG",{});var iat=s(wse);Rso=r(iat,"cpm"),iat.forEach(t),Pso=r(gk," \u2014 "),nB=n(gk,"A",{href:!0});var dat=s(nB);Bso=r(dat,"CpmTokenizer"),dat.forEach(t),Iso=r(gk," or "),sB=n(gk,"A",{href:!0});var cat=s(sB);Nso=r(cat,"CpmTokenizerFast"),cat.forEach(t),qso=r(gk," (CPM model)"),gk.forEach(t),jso=i(S),rh=n(S,"LI",{});var dye=s(rh);Ase=n(dye,"STRONG",{});var mat=s(Ase);Dso=r(mat,"ctrl"),mat.forEach(t),Gso=r(dye," \u2014 "),lB=n(dye,"A",{href:!0});var fat=s(lB);Oso=r(fat,"CTRLTokenizer"),fat.forEach(t),Vso=r(dye," (CTRL model)"),dye.forEach(t),Xso=i(S),Jn=n(S,"LI",{});var hk=s(Jn);Lse=n(hk,"STRONG",{});var gat=s(Lse);zso=r(gat,"data2vec-text"),gat.forEach(t),Qso=r(hk," \u2014 "),iB=n(hk,"A",{href:!0});var hat=s(iB);Wso=r(hat,"RobertaTokenizer"),hat.forEach(t),Hso=r(hk," or "),dB=n(hk,"A",{href:!0});var uat=s(dB);Uso=r(uat,"RobertaTokenizerFast"),uat.forEach(t),Jso=r(hk," (Data2VecText model)"),hk.forEach(t),Yso=i(S),Yn=n(S,"LI",{});var uk=s(Yn);yse=n(uk,"STRONG",{});var pat=s(yse);Kso=r(pat,"deberta"),pat.forEach(t),Zso=r(uk," \u2014 "),cB=n(uk,"A",{href:!0});var _at=s(cB);elo=r(_at,"DebertaTokenizer"),_at.forEach(t),olo=r(uk," or "),mB=n(uk,"A",{href:!0});var bat=s(mB);rlo=r(bat,"DebertaTokenizerFast"),bat.forEach(t),tlo=r(uk," (DeBERTa model)"),uk.forEach(t),alo=i(S),Kn=n(S,"LI",{});var pk=s(Kn);xse=n(pk,"STRONG",{});var vat=s(xse);nlo=r(vat,"deberta-v2"),vat.forEach(t),slo=r(pk," \u2014 "),fB=n(pk,"A",{href:!0});var Fat=s(fB);llo=r(Fat,"DebertaV2Tokenizer"),Fat.forEach(t),ilo=r(pk," or "),gB=n(pk,"A",{href:!0});var Tat=s(gB);dlo=r(Tat,"DebertaV2TokenizerFast"),Tat.forEach(t),clo=r(pk," (DeBERTa-v2 model)"),pk.forEach(t),mlo=i(S),Zn=n(S,"LI",{});var _k=s(Zn);$se=n(_k,"STRONG",{});var Mat=s($se);flo=r(Mat,"distilbert"),Mat.forEach(t),glo=r(_k," \u2014 "),hB=n(_k,"A",{href:!0});var Eat=s(hB);hlo=r(Eat,"DistilBertTokenizer"),Eat.forEach(t),ulo=r(_k," or "),uB=n(_k,"A",{href:!0});var Cat=s(uB);plo=r(Cat,"DistilBertTokenizerFast"),Cat.forEach(t),_lo=r(_k," (DistilBERT model)"),_k.forEach(t),blo=i(S),es=n(S,"LI",{});var bk=s(es);kse=n(bk,"STRONG",{});var wat=s(kse);vlo=r(wat,"dpr"),wat.forEach(t),Flo=r(bk," \u2014 "),pB=n(bk,"A",{href:!0});var Aat=s(pB);Tlo=r(Aat,"DPRQuestionEncoderTokenizer"),Aat.forEach(t),Mlo=r(bk," or "),_B=n(bk,"A",{href:!0});var Lat=s(_B);Elo=r(Lat,"DPRQuestionEncoderTokenizerFast"),Lat.forEach(t),Clo=r(bk," (DPR model)"),bk.forEach(t),wlo=i(S),os=n(S,"LI",{});var vk=s(os);Sse=n(vk,"STRONG",{});var yat=s(Sse);Alo=r(yat,"electra"),yat.forEach(t),Llo=r(vk," \u2014 "),bB=n(vk,"A",{href:!0});var xat=s(bB);ylo=r(xat,"ElectraTokenizer"),xat.forEach(t),xlo=r(vk," or "),vB=n(vk,"A",{href:!0});var $at=s(vB);$lo=r($at,"ElectraTokenizerFast"),$at.forEach(t),klo=r(vk," (ELECTRA model)"),vk.forEach(t),Slo=i(S),th=n(S,"LI",{});var cye=s(th);Rse=n(cye,"STRONG",{});var kat=s(Rse);Rlo=r(kat,"flaubert"),kat.forEach(t),Plo=r(cye," \u2014 "),FB=n(cye,"A",{href:!0});var Sat=s(FB);Blo=r(Sat,"FlaubertTokenizer"),Sat.forEach(t),Ilo=r(cye," (FlauBERT model)"),cye.forEach(t),Nlo=i(S),rs=n(S,"LI",{});var Fk=s(rs);Pse=n(Fk,"STRONG",{});var Rat=s(Pse);qlo=r(Rat,"fnet"),Rat.forEach(t),jlo=r(Fk," \u2014 "),TB=n(Fk,"A",{href:!0});var Pat=s(TB);Dlo=r(Pat,"FNetTokenizer"),Pat.forEach(t),Glo=r(Fk," or "),MB=n(Fk,"A",{href:!0});var Bat=s(MB);Olo=r(Bat,"FNetTokenizerFast"),Bat.forEach(t),Vlo=r(Fk," (FNet model)"),Fk.forEach(t),Xlo=i(S),ah=n(S,"LI",{});var mye=s(ah);Bse=n(mye,"STRONG",{});var Iat=s(Bse);zlo=r(Iat,"fsmt"),Iat.forEach(t),Qlo=r(mye," \u2014 "),EB=n(mye,"A",{href:!0});var Nat=s(EB);Wlo=r(Nat,"FSMTTokenizer"),Nat.forEach(t),Hlo=r(mye," (FairSeq Machine-Translation model)"),mye.forEach(t),Ulo=i(S),ts=n(S,"LI",{});var Tk=s(ts);Ise=n(Tk,"STRONG",{});var qat=s(Ise);Jlo=r(qat,"funnel"),qat.forEach(t),Ylo=r(Tk," \u2014 "),CB=n(Tk,"A",{href:!0});var jat=s(CB);Klo=r(jat,"FunnelTokenizer"),jat.forEach(t),Zlo=r(Tk," or "),wB=n(Tk,"A",{href:!0});var Dat=s(wB);eio=r(Dat,"FunnelTokenizerFast"),Dat.forEach(t),oio=r(Tk," (Funnel Transformer model)"),Tk.forEach(t),rio=i(S),as=n(S,"LI",{});var Mk=s(as);Nse=n(Mk,"STRONG",{});var Gat=s(Nse);tio=r(Gat,"gpt2"),Gat.forEach(t),aio=r(Mk," \u2014 "),AB=n(Mk,"A",{href:!0});var Oat=s(AB);nio=r(Oat,"GPT2Tokenizer"),Oat.forEach(t),sio=r(Mk," or "),LB=n(Mk,"A",{href:!0});var Vat=s(LB);lio=r(Vat,"GPT2TokenizerFast"),Vat.forEach(t),iio=r(Mk," (OpenAI GPT-2 model)"),Mk.forEach(t),dio=i(S),ns=n(S,"LI",{});var Ek=s(ns);qse=n(Ek,"STRONG",{});var Xat=s(qse);cio=r(Xat,"gpt_neo"),Xat.forEach(t),mio=r(Ek," \u2014 "),yB=n(Ek,"A",{href:!0});var zat=s(yB);fio=r(zat,"GPT2Tokenizer"),zat.forEach(t),gio=r(Ek," or "),xB=n(Ek,"A",{href:!0});var Qat=s(xB);hio=r(Qat,"GPT2TokenizerFast"),Qat.forEach(t),uio=r(Ek," (GPT Neo model)"),Ek.forEach(t),pio=i(S),nh=n(S,"LI",{});var fye=s(nh);jse=n(fye,"STRONG",{});var Wat=s(jse);_io=r(Wat,"gpt_neox"),Wat.forEach(t),bio=r(fye," \u2014 "),$B=n(fye,"A",{href:!0});var Hat=s($B);vio=r(Hat,"GPTNeoXTokenizerFast"),Hat.forEach(t),Fio=r(fye," (GPT NeoX model)"),fye.forEach(t),Tio=i(S),ss=n(S,"LI",{});var Ck=s(ss);Dse=n(Ck,"STRONG",{});var Uat=s(Dse);Mio=r(Uat,"gptj"),Uat.forEach(t),Eio=r(Ck," \u2014 "),kB=n(Ck,"A",{href:!0});var Jat=s(kB);Cio=r(Jat,"GPT2Tokenizer"),Jat.forEach(t),wio=r(Ck," or "),SB=n(Ck,"A",{href:!0});var Yat=s(SB);Aio=r(Yat,"GPT2TokenizerFast"),Yat.forEach(t),Lio=r(Ck," (GPT-J model)"),Ck.forEach(t),yio=i(S),ls=n(S,"LI",{});var wk=s(ls);Gse=n(wk,"STRONG",{});var Kat=s(Gse);xio=r(Kat,"groupvit"),Kat.forEach(t),$io=r(wk," \u2014 "),RB=n(wk,"A",{href:!0});var Zat=s(RB);kio=r(Zat,"CLIPTokenizer"),Zat.forEach(t),Sio=r(wk," or "),PB=n(wk,"A",{href:!0});var ent=s(PB);Rio=r(ent,"CLIPTokenizerFast"),ent.forEach(t),Pio=r(wk," (GroupViT model)"),wk.forEach(t),Bio=i(S),is=n(S,"LI",{});var Ak=s(is);Ose=n(Ak,"STRONG",{});var ont=s(Ose);Iio=r(ont,"herbert"),ont.forEach(t),Nio=r(Ak," \u2014 "),BB=n(Ak,"A",{href:!0});var rnt=s(BB);qio=r(rnt,"HerbertTokenizer"),rnt.forEach(t),jio=r(Ak," or "),IB=n(Ak,"A",{href:!0});var tnt=s(IB);Dio=r(tnt,"HerbertTokenizerFast"),tnt.forEach(t),Gio=r(Ak," (HerBERT model)"),Ak.forEach(t),Oio=i(S),sh=n(S,"LI",{});var gye=s(sh);Vse=n(gye,"STRONG",{});var ant=s(Vse);Vio=r(ant,"hubert"),ant.forEach(t),Xio=r(gye," \u2014 "),NB=n(gye,"A",{href:!0});var nnt=s(NB);zio=r(nnt,"Wav2Vec2CTCTokenizer"),nnt.forEach(t),Qio=r(gye," (Hubert model)"),gye.forEach(t),Wio=i(S),ds=n(S,"LI",{});var Lk=s(ds);Xse=n(Lk,"STRONG",{});var snt=s(Xse);Hio=r(snt,"ibert"),snt.forEach(t),Uio=r(Lk," \u2014 "),qB=n(Lk,"A",{href:!0});var lnt=s(qB);Jio=r(lnt,"RobertaTokenizer"),lnt.forEach(t),Yio=r(Lk," or "),jB=n(Lk,"A",{href:!0});var int=s(jB);Kio=r(int,"RobertaTokenizerFast"),int.forEach(t),Zio=r(Lk," (I-BERT model)"),Lk.forEach(t),edo=i(S),cs=n(S,"LI",{});var yk=s(cs);zse=n(yk,"STRONG",{});var dnt=s(zse);odo=r(dnt,"layoutlm"),dnt.forEach(t),rdo=r(yk," \u2014 "),DB=n(yk,"A",{href:!0});var cnt=s(DB);tdo=r(cnt,"LayoutLMTokenizer"),cnt.forEach(t),ado=r(yk," or "),GB=n(yk,"A",{href:!0});var mnt=s(GB);ndo=r(mnt,"LayoutLMTokenizerFast"),mnt.forEach(t),sdo=r(yk," (LayoutLM model)"),yk.forEach(t),ldo=i(S),ms=n(S,"LI",{});var xk=s(ms);Qse=n(xk,"STRONG",{});var fnt=s(Qse);ido=r(fnt,"layoutlmv2"),fnt.forEach(t),ddo=r(xk," \u2014 "),OB=n(xk,"A",{href:!0});var gnt=s(OB);cdo=r(gnt,"LayoutLMv2Tokenizer"),gnt.forEach(t),mdo=r(xk," or "),VB=n(xk,"A",{href:!0});var hnt=s(VB);fdo=r(hnt,"LayoutLMv2TokenizerFast"),hnt.forEach(t),gdo=r(xk," (LayoutLMv2 model)"),xk.forEach(t),hdo=i(S),fs=n(S,"LI",{});var $k=s(fs);Wse=n($k,"STRONG",{});var unt=s(Wse);udo=r(unt,"layoutlmv3"),unt.forEach(t),pdo=r($k," \u2014 "),XB=n($k,"A",{href:!0});var pnt=s(XB);_do=r(pnt,"LayoutLMv3Tokenizer"),pnt.forEach(t),bdo=r($k," or "),zB=n($k,"A",{href:!0});var _nt=s(zB);vdo=r(_nt,"LayoutLMv3TokenizerFast"),_nt.forEach(t),Fdo=r($k," (LayoutLMv3 model)"),$k.forEach(t),Tdo=i(S),gs=n(S,"LI",{});var kk=s(gs);Hse=n(kk,"STRONG",{});var bnt=s(Hse);Mdo=r(bnt,"layoutxlm"),bnt.forEach(t),Edo=r(kk," \u2014 "),QB=n(kk,"A",{href:!0});var vnt=s(QB);Cdo=r(vnt,"LayoutXLMTokenizer"),vnt.forEach(t),wdo=r(kk," or "),WB=n(kk,"A",{href:!0});var Fnt=s(WB);Ado=r(Fnt,"LayoutXLMTokenizerFast"),Fnt.forEach(t),Ldo=r(kk," (LayoutXLM model)"),kk.forEach(t),ydo=i(S),hs=n(S,"LI",{});var Sk=s(hs);Use=n(Sk,"STRONG",{});var Tnt=s(Use);xdo=r(Tnt,"led"),Tnt.forEach(t),$do=r(Sk," \u2014 "),HB=n(Sk,"A",{href:!0});var Mnt=s(HB);kdo=r(Mnt,"LEDTokenizer"),Mnt.forEach(t),Sdo=r(Sk," or "),UB=n(Sk,"A",{href:!0});var Ent=s(UB);Rdo=r(Ent,"LEDTokenizerFast"),Ent.forEach(t),Pdo=r(Sk," (LED model)"),Sk.forEach(t),Bdo=i(S),us=n(S,"LI",{});var Rk=s(us);Jse=n(Rk,"STRONG",{});var Cnt=s(Jse);Ido=r(Cnt,"longformer"),Cnt.forEach(t),Ndo=r(Rk," \u2014 "),JB=n(Rk,"A",{href:!0});var wnt=s(JB);qdo=r(wnt,"LongformerTokenizer"),wnt.forEach(t),jdo=r(Rk," or "),YB=n(Rk,"A",{href:!0});var Ant=s(YB);Ddo=r(Ant,"LongformerTokenizerFast"),Ant.forEach(t),Gdo=r(Rk," (Longformer model)"),Rk.forEach(t),Odo=i(S),ps=n(S,"LI",{});var Pk=s(ps);Yse=n(Pk,"STRONG",{});var Lnt=s(Yse);Vdo=r(Lnt,"longt5"),Lnt.forEach(t),Xdo=r(Pk," \u2014 "),KB=n(Pk,"A",{href:!0});var ynt=s(KB);zdo=r(ynt,"T5Tokenizer"),ynt.forEach(t),Qdo=r(Pk," or "),ZB=n(Pk,"A",{href:!0});var xnt=s(ZB);Wdo=r(xnt,"T5TokenizerFast"),xnt.forEach(t),Hdo=r(Pk," (LongT5 model)"),Pk.forEach(t),Udo=i(S),lh=n(S,"LI",{});var hye=s(lh);Kse=n(hye,"STRONG",{});var $nt=s(Kse);Jdo=r($nt,"luke"),$nt.forEach(t),Ydo=r(hye," \u2014 "),eI=n(hye,"A",{href:!0});var knt=s(eI);Kdo=r(knt,"LukeTokenizer"),knt.forEach(t),Zdo=r(hye," (LUKE model)"),hye.forEach(t),eco=i(S),_s=n(S,"LI",{});var Bk=s(_s);Zse=n(Bk,"STRONG",{});var Snt=s(Zse);oco=r(Snt,"lxmert"),Snt.forEach(t),rco=r(Bk," \u2014 "),oI=n(Bk,"A",{href:!0});var Rnt=s(oI);tco=r(Rnt,"LxmertTokenizer"),Rnt.forEach(t),aco=r(Bk," or "),rI=n(Bk,"A",{href:!0});var Pnt=s(rI);nco=r(Pnt,"LxmertTokenizerFast"),Pnt.forEach(t),sco=r(Bk," (LXMERT model)"),Bk.forEach(t),lco=i(S),ih=n(S,"LI",{});var uye=s(ih);ele=n(uye,"STRONG",{});var Bnt=s(ele);ico=r(Bnt,"m2m_100"),Bnt.forEach(t),dco=r(uye," \u2014 "),tI=n(uye,"A",{href:!0});var Int=s(tI);cco=r(Int,"M2M100Tokenizer"),Int.forEach(t),mco=r(uye," (M2M100 model)"),uye.forEach(t),fco=i(S),dh=n(S,"LI",{});var pye=s(dh);ole=n(pye,"STRONG",{});var Nnt=s(ole);gco=r(Nnt,"marian"),Nnt.forEach(t),hco=r(pye," \u2014 "),aI=n(pye,"A",{href:!0});var qnt=s(aI);uco=r(qnt,"MarianTokenizer"),qnt.forEach(t),pco=r(pye," (Marian model)"),pye.forEach(t),_co=i(S),bs=n(S,"LI",{});var Ik=s(bs);rle=n(Ik,"STRONG",{});var jnt=s(rle);bco=r(jnt,"mbart"),jnt.forEach(t),vco=r(Ik," \u2014 "),nI=n(Ik,"A",{href:!0});var Dnt=s(nI);Fco=r(Dnt,"MBartTokenizer"),Dnt.forEach(t),Tco=r(Ik," or "),sI=n(Ik,"A",{href:!0});var Gnt=s(sI);Mco=r(Gnt,"MBartTokenizerFast"),Gnt.forEach(t),Eco=r(Ik," (mBART model)"),Ik.forEach(t),Cco=i(S),vs=n(S,"LI",{});var Nk=s(vs);tle=n(Nk,"STRONG",{});var Ont=s(tle);wco=r(Ont,"mbart50"),Ont.forEach(t),Aco=r(Nk," \u2014 "),lI=n(Nk,"A",{href:!0});var Vnt=s(lI);Lco=r(Vnt,"MBart50Tokenizer"),Vnt.forEach(t),yco=r(Nk," or "),iI=n(Nk,"A",{href:!0});var Xnt=s(iI);xco=r(Xnt,"MBart50TokenizerFast"),Xnt.forEach(t),$co=r(Nk," (mBART-50 model)"),Nk.forEach(t),kco=i(S),Fs=n(S,"LI",{});var qk=s(Fs);ale=n(qk,"STRONG",{});var znt=s(ale);Sco=r(znt,"megatron-bert"),znt.forEach(t),Rco=r(qk," \u2014 "),dI=n(qk,"A",{href:!0});var Qnt=s(dI);Pco=r(Qnt,"BertTokenizer"),Qnt.forEach(t),Bco=r(qk," or "),cI=n(qk,"A",{href:!0});var Wnt=s(cI);Ico=r(Wnt,"BertTokenizerFast"),Wnt.forEach(t),Nco=r(qk," (Megatron-BERT model)"),qk.forEach(t),qco=i(S),ch=n(S,"LI",{});var _ye=s(ch);nle=n(_ye,"STRONG",{});var Hnt=s(nle);jco=r(Hnt,"mluke"),Hnt.forEach(t),Dco=r(_ye," \u2014 "),mI=n(_ye,"A",{href:!0});var Unt=s(mI);Gco=r(Unt,"MLukeTokenizer"),Unt.forEach(t),Oco=r(_ye," (mLUKE model)"),_ye.forEach(t),Vco=i(S),Ts=n(S,"LI",{});var jk=s(Ts);sle=n(jk,"STRONG",{});var Jnt=s(sle);Xco=r(Jnt,"mobilebert"),Jnt.forEach(t),zco=r(jk," \u2014 "),fI=n(jk,"A",{href:!0});var Ynt=s(fI);Qco=r(Ynt,"MobileBertTokenizer"),Ynt.forEach(t),Wco=r(jk," or "),gI=n(jk,"A",{href:!0});var Knt=s(gI);Hco=r(Knt,"MobileBertTokenizerFast"),Knt.forEach(t),Uco=r(jk," (MobileBERT model)"),jk.forEach(t),Jco=i(S),Ms=n(S,"LI",{});var Dk=s(Ms);lle=n(Dk,"STRONG",{});var Znt=s(lle);Yco=r(Znt,"mpnet"),Znt.forEach(t),Kco=r(Dk," \u2014 "),hI=n(Dk,"A",{href:!0});var est=s(hI);Zco=r(est,"MPNetTokenizer"),est.forEach(t),emo=r(Dk," or "),uI=n(Dk,"A",{href:!0});var ost=s(uI);omo=r(ost,"MPNetTokenizerFast"),ost.forEach(t),rmo=r(Dk," (MPNet model)"),Dk.forEach(t),tmo=i(S),Es=n(S,"LI",{});var Gk=s(Es);ile=n(Gk,"STRONG",{});var rst=s(ile);amo=r(rst,"mt5"),rst.forEach(t),nmo=r(Gk," \u2014 "),pI=n(Gk,"A",{href:!0});var tst=s(pI);smo=r(tst,"MT5Tokenizer"),tst.forEach(t),lmo=r(Gk," or "),_I=n(Gk,"A",{href:!0});var ast=s(_I);imo=r(ast,"MT5TokenizerFast"),ast.forEach(t),dmo=r(Gk," (MT5 model)"),Gk.forEach(t),cmo=i(S),Cs=n(S,"LI",{});var Ok=s(Cs);dle=n(Ok,"STRONG",{});var nst=s(dle);mmo=r(nst,"nezha"),nst.forEach(t),fmo=r(Ok," \u2014 "),bI=n(Ok,"A",{href:!0});var sst=s(bI);gmo=r(sst,"BertTokenizer"),sst.forEach(t),hmo=r(Ok," or "),vI=n(Ok,"A",{href:!0});var lst=s(vI);umo=r(lst,"BertTokenizerFast"),lst.forEach(t),pmo=r(Ok," (Nezha model)"),Ok.forEach(t),_mo=i(S),ws=n(S,"LI",{});var Vk=s(ws);cle=n(Vk,"STRONG",{});var ist=s(cle);bmo=r(ist,"nystromformer"),ist.forEach(t),vmo=r(Vk," \u2014 "),FI=n(Vk,"A",{href:!0});var dst=s(FI);Fmo=r(dst,"AlbertTokenizer"),dst.forEach(t),Tmo=r(Vk," or "),TI=n(Vk,"A",{href:!0});var cst=s(TI);Mmo=r(cst,"AlbertTokenizerFast"),cst.forEach(t),Emo=r(Vk," (Nystr\xF6mformer model)"),Vk.forEach(t),Cmo=i(S),As=n(S,"LI",{});var Xk=s(As);mle=n(Xk,"STRONG",{});var mst=s(mle);wmo=r(mst,"openai-gpt"),mst.forEach(t),Amo=r(Xk," \u2014 "),MI=n(Xk,"A",{href:!0});var fst=s(MI);Lmo=r(fst,"OpenAIGPTTokenizer"),fst.forEach(t),ymo=r(Xk," or "),EI=n(Xk,"A",{href:!0});var gst=s(EI);xmo=r(gst,"OpenAIGPTTokenizerFast"),gst.forEach(t),$mo=r(Xk," (OpenAI GPT model)"),Xk.forEach(t),kmo=i(S),mh=n(S,"LI",{});var bye=s(mh);fle=n(bye,"STRONG",{});var hst=s(fle);Smo=r(hst,"opt"),hst.forEach(t),Rmo=r(bye," \u2014 "),CI=n(bye,"A",{href:!0});var ust=s(CI);Pmo=r(ust,"GPT2Tokenizer"),ust.forEach(t),Bmo=r(bye," (OPT model)"),bye.forEach(t),Imo=i(S),Ls=n(S,"LI",{});var zk=s(Ls);gle=n(zk,"STRONG",{});var pst=s(gle);Nmo=r(pst,"pegasus"),pst.forEach(t),qmo=r(zk," \u2014 "),wI=n(zk,"A",{href:!0});var _st=s(wI);jmo=r(_st,"PegasusTokenizer"),_st.forEach(t),Dmo=r(zk," or "),AI=n(zk,"A",{href:!0});var bst=s(AI);Gmo=r(bst,"PegasusTokenizerFast"),bst.forEach(t),Omo=r(zk," (Pegasus model)"),zk.forEach(t),Vmo=i(S),fh=n(S,"LI",{});var vye=s(fh);hle=n(vye,"STRONG",{});var vst=s(hle);Xmo=r(vst,"perceiver"),vst.forEach(t),zmo=r(vye," \u2014 "),LI=n(vye,"A",{href:!0});var Fst=s(LI);Qmo=r(Fst,"PerceiverTokenizer"),Fst.forEach(t),Wmo=r(vye," (Perceiver model)"),vye.forEach(t),Hmo=i(S),gh=n(S,"LI",{});var Fye=s(gh);ule=n(Fye,"STRONG",{});var Tst=s(ule);Umo=r(Tst,"phobert"),Tst.forEach(t),Jmo=r(Fye," \u2014 "),yI=n(Fye,"A",{href:!0});var Mst=s(yI);Ymo=r(Mst,"PhobertTokenizer"),Mst.forEach(t),Kmo=r(Fye," (PhoBERT model)"),Fye.forEach(t),Zmo=i(S),hh=n(S,"LI",{});var Tye=s(hh);ple=n(Tye,"STRONG",{});var Est=s(ple);efo=r(Est,"plbart"),Est.forEach(t),ofo=r(Tye," \u2014 "),xI=n(Tye,"A",{href:!0});var Cst=s(xI);rfo=r(Cst,"PLBartTokenizer"),Cst.forEach(t),tfo=r(Tye," (PLBart model)"),Tye.forEach(t),afo=i(S),uh=n(S,"LI",{});var Mye=s(uh);_le=n(Mye,"STRONG",{});var wst=s(_le);nfo=r(wst,"prophetnet"),wst.forEach(t),sfo=r(Mye," \u2014 "),$I=n(Mye,"A",{href:!0});var Ast=s($I);lfo=r(Ast,"ProphetNetTokenizer"),Ast.forEach(t),ifo=r(Mye," (ProphetNet model)"),Mye.forEach(t),dfo=i(S),ys=n(S,"LI",{});var Qk=s(ys);ble=n(Qk,"STRONG",{});var Lst=s(ble);cfo=r(Lst,"qdqbert"),Lst.forEach(t),mfo=r(Qk," \u2014 "),kI=n(Qk,"A",{href:!0});var yst=s(kI);ffo=r(yst,"BertTokenizer"),yst.forEach(t),gfo=r(Qk," or "),SI=n(Qk,"A",{href:!0});var xst=s(SI);hfo=r(xst,"BertTokenizerFast"),xst.forEach(t),ufo=r(Qk," (QDQBert model)"),Qk.forEach(t),pfo=i(S),ph=n(S,"LI",{});var Eye=s(ph);vle=n(Eye,"STRONG",{});var $st=s(vle);_fo=r($st,"rag"),$st.forEach(t),bfo=r(Eye," \u2014 "),RI=n(Eye,"A",{href:!0});var kst=s(RI);vfo=r(kst,"RagTokenizer"),kst.forEach(t),Ffo=r(Eye," (RAG model)"),Eye.forEach(t),Tfo=i(S),xs=n(S,"LI",{});var Wk=s(xs);Fle=n(Wk,"STRONG",{});var Sst=s(Fle);Mfo=r(Sst,"realm"),Sst.forEach(t),Efo=r(Wk," \u2014 "),PI=n(Wk,"A",{href:!0});var Rst=s(PI);Cfo=r(Rst,"RealmTokenizer"),Rst.forEach(t),wfo=r(Wk," or "),BI=n(Wk,"A",{href:!0});var Pst=s(BI);Afo=r(Pst,"RealmTokenizerFast"),Pst.forEach(t),Lfo=r(Wk," (REALM model)"),Wk.forEach(t),yfo=i(S),$s=n(S,"LI",{});var Hk=s($s);Tle=n(Hk,"STRONG",{});var Bst=s(Tle);xfo=r(Bst,"reformer"),Bst.forEach(t),$fo=r(Hk," \u2014 "),II=n(Hk,"A",{href:!0});var Ist=s(II);kfo=r(Ist,"ReformerTokenizer"),Ist.forEach(t),Sfo=r(Hk," or "),NI=n(Hk,"A",{href:!0});var Nst=s(NI);Rfo=r(Nst,"ReformerTokenizerFast"),Nst.forEach(t),Pfo=r(Hk," (Reformer model)"),Hk.forEach(t),Bfo=i(S),ks=n(S,"LI",{});var Uk=s(ks);Mle=n(Uk,"STRONG",{});var qst=s(Mle);Ifo=r(qst,"rembert"),qst.forEach(t),Nfo=r(Uk," \u2014 "),qI=n(Uk,"A",{href:!0});var jst=s(qI);qfo=r(jst,"RemBertTokenizer"),jst.forEach(t),jfo=r(Uk," or "),jI=n(Uk,"A",{href:!0});var Dst=s(jI);Dfo=r(Dst,"RemBertTokenizerFast"),Dst.forEach(t),Gfo=r(Uk," (RemBERT model)"),Uk.forEach(t),Ofo=i(S),Ss=n(S,"LI",{});var Jk=s(Ss);Ele=n(Jk,"STRONG",{});var Gst=s(Ele);Vfo=r(Gst,"retribert"),Gst.forEach(t),Xfo=r(Jk," \u2014 "),DI=n(Jk,"A",{href:!0});var Ost=s(DI);zfo=r(Ost,"RetriBertTokenizer"),Ost.forEach(t),Qfo=r(Jk," or "),GI=n(Jk,"A",{href:!0});var Vst=s(GI);Wfo=r(Vst,"RetriBertTokenizerFast"),Vst.forEach(t),Hfo=r(Jk," (RetriBERT model)"),Jk.forEach(t),Ufo=i(S),Rs=n(S,"LI",{});var Yk=s(Rs);Cle=n(Yk,"STRONG",{});var Xst=s(Cle);Jfo=r(Xst,"roberta"),Xst.forEach(t),Yfo=r(Yk," \u2014 "),OI=n(Yk,"A",{href:!0});var zst=s(OI);Kfo=r(zst,"RobertaTokenizer"),zst.forEach(t),Zfo=r(Yk," or "),VI=n(Yk,"A",{href:!0});var Qst=s(VI);ego=r(Qst,"RobertaTokenizerFast"),Qst.forEach(t),ogo=r(Yk," (RoBERTa model)"),Yk.forEach(t),rgo=i(S),Ps=n(S,"LI",{});var Kk=s(Ps);wle=n(Kk,"STRONG",{});var Wst=s(wle);tgo=r(Wst,"roformer"),Wst.forEach(t),ago=r(Kk," \u2014 "),XI=n(Kk,"A",{href:!0});var Hst=s(XI);ngo=r(Hst,"RoFormerTokenizer"),Hst.forEach(t),sgo=r(Kk," or "),zI=n(Kk,"A",{href:!0});var Ust=s(zI);lgo=r(Ust,"RoFormerTokenizerFast"),Ust.forEach(t),igo=r(Kk," (RoFormer model)"),Kk.forEach(t),dgo=i(S),_h=n(S,"LI",{});var Cye=s(_h);Ale=n(Cye,"STRONG",{});var Jst=s(Ale);cgo=r(Jst,"speech_to_text"),Jst.forEach(t),mgo=r(Cye," \u2014 "),QI=n(Cye,"A",{href:!0});var Yst=s(QI);fgo=r(Yst,"Speech2TextTokenizer"),Yst.forEach(t),ggo=r(Cye," (Speech2Text model)"),Cye.forEach(t),hgo=i(S),bh=n(S,"LI",{});var wye=s(bh);Lle=n(wye,"STRONG",{});var Kst=s(Lle);ugo=r(Kst,"speech_to_text_2"),Kst.forEach(t),pgo=r(wye," \u2014 "),WI=n(wye,"A",{href:!0});var Zst=s(WI);_go=r(Zst,"Speech2Text2Tokenizer"),Zst.forEach(t),bgo=r(wye," (Speech2Text2 model)"),wye.forEach(t),vgo=i(S),Bs=n(S,"LI",{});var Zk=s(Bs);yle=n(Zk,"STRONG",{});var elt=s(yle);Fgo=r(elt,"splinter"),elt.forEach(t),Tgo=r(Zk," \u2014 "),HI=n(Zk,"A",{href:!0});var olt=s(HI);Mgo=r(olt,"SplinterTokenizer"),olt.forEach(t),Ego=r(Zk," or "),UI=n(Zk,"A",{href:!0});var rlt=s(UI);Cgo=r(rlt,"SplinterTokenizerFast"),rlt.forEach(t),wgo=r(Zk," (Splinter model)"),Zk.forEach(t),Ago=i(S),Is=n(S,"LI",{});var eS=s(Is);xle=n(eS,"STRONG",{});var tlt=s(xle);Lgo=r(tlt,"squeezebert"),tlt.forEach(t),ygo=r(eS," \u2014 "),JI=n(eS,"A",{href:!0});var alt=s(JI);xgo=r(alt,"SqueezeBertTokenizer"),alt.forEach(t),$go=r(eS," or "),YI=n(eS,"A",{href:!0});var nlt=s(YI);kgo=r(nlt,"SqueezeBertTokenizerFast"),nlt.forEach(t),Sgo=r(eS," (SqueezeBERT model)"),eS.forEach(t),Rgo=i(S),Ns=n(S,"LI",{});var oS=s(Ns);$le=n(oS,"STRONG",{});var slt=s($le);Pgo=r(slt,"t5"),slt.forEach(t),Bgo=r(oS," \u2014 "),KI=n(oS,"A",{href:!0});var llt=s(KI);Igo=r(llt,"T5Tokenizer"),llt.forEach(t),Ngo=r(oS," or "),ZI=n(oS,"A",{href:!0});var ilt=s(ZI);qgo=r(ilt,"T5TokenizerFast"),ilt.forEach(t),jgo=r(oS," (T5 model)"),oS.forEach(t),Dgo=i(S),vh=n(S,"LI",{});var Aye=s(vh);kle=n(Aye,"STRONG",{});var dlt=s(kle);Ggo=r(dlt,"tapas"),dlt.forEach(t),Ogo=r(Aye," \u2014 "),eN=n(Aye,"A",{href:!0});var clt=s(eN);Vgo=r(clt,"TapasTokenizer"),clt.forEach(t),Xgo=r(Aye," (TAPAS model)"),Aye.forEach(t),zgo=i(S),Fh=n(S,"LI",{});var Lye=s(Fh);Sle=n(Lye,"STRONG",{});var mlt=s(Sle);Qgo=r(mlt,"tapex"),mlt.forEach(t),Wgo=r(Lye," \u2014 "),oN=n(Lye,"A",{href:!0});var flt=s(oN);Hgo=r(flt,"TapexTokenizer"),flt.forEach(t),Ugo=r(Lye," (TAPEX model)"),Lye.forEach(t),Jgo=i(S),Th=n(S,"LI",{});var yye=s(Th);Rle=n(yye,"STRONG",{});var glt=s(Rle);Ygo=r(glt,"transfo-xl"),glt.forEach(t),Kgo=r(yye," \u2014 "),rN=n(yye,"A",{href:!0});var hlt=s(rN);Zgo=r(hlt,"TransfoXLTokenizer"),hlt.forEach(t),eho=r(yye," (Transformer-XL model)"),yye.forEach(t),oho=i(S),qs=n(S,"LI",{});var rS=s(qs);Ple=n(rS,"STRONG",{});var ult=s(Ple);rho=r(ult,"vilt"),ult.forEach(t),tho=r(rS," \u2014 "),tN=n(rS,"A",{href:!0});var plt=s(tN);aho=r(plt,"BertTokenizer"),plt.forEach(t),nho=r(rS," or "),aN=n(rS,"A",{href:!0});var _lt=s(aN);sho=r(_lt,"BertTokenizerFast"),_lt.forEach(t),lho=r(rS," (ViLT model)"),rS.forEach(t),iho=i(S),js=n(S,"LI",{});var tS=s(js);Ble=n(tS,"STRONG",{});var blt=s(Ble);dho=r(blt,"visual_bert"),blt.forEach(t),cho=r(tS," \u2014 "),nN=n(tS,"A",{href:!0});var vlt=s(nN);mho=r(vlt,"BertTokenizer"),vlt.forEach(t),fho=r(tS," or "),sN=n(tS,"A",{href:!0});var Flt=s(sN);gho=r(Flt,"BertTokenizerFast"),Flt.forEach(t),hho=r(tS," (VisualBERT model)"),tS.forEach(t),uho=i(S),Mh=n(S,"LI",{});var xye=s(Mh);Ile=n(xye,"STRONG",{});var Tlt=s(Ile);pho=r(Tlt,"wav2vec2"),Tlt.forEach(t),_ho=r(xye," \u2014 "),lN=n(xye,"A",{href:!0});var Mlt=s(lN);bho=r(Mlt,"Wav2Vec2CTCTokenizer"),Mlt.forEach(t),vho=r(xye," (Wav2Vec2 model)"),xye.forEach(t),Fho=i(S),Eh=n(S,"LI",{});var $ye=s(Eh);Nle=n($ye,"STRONG",{});var Elt=s(Nle);Tho=r(Elt,"wav2vec2-conformer"),Elt.forEach(t),Mho=r($ye," \u2014 "),iN=n($ye,"A",{href:!0});var Clt=s(iN);Eho=r(Clt,"Wav2Vec2CTCTokenizer"),Clt.forEach(t),Cho=r($ye," (Wav2Vec2-Conformer model)"),$ye.forEach(t),who=i(S),Ch=n(S,"LI",{});var kye=s(Ch);qle=n(kye,"STRONG",{});var wlt=s(qle);Aho=r(wlt,"wav2vec2_phoneme"),wlt.forEach(t),Lho=r(kye," \u2014 "),dN=n(kye,"A",{href:!0});var Alt=s(dN);yho=r(Alt,"Wav2Vec2PhonemeCTCTokenizer"),Alt.forEach(t),xho=r(kye," (Wav2Vec2Phoneme model)"),kye.forEach(t),$ho=i(S),Ds=n(S,"LI",{});var aS=s(Ds);jle=n(aS,"STRONG",{});var Llt=s(jle);kho=r(Llt,"xglm"),Llt.forEach(t),Sho=r(aS," \u2014 "),cN=n(aS,"A",{href:!0});var ylt=s(cN);Rho=r(ylt,"XGLMTokenizer"),ylt.forEach(t),Pho=r(aS," or "),mN=n(aS,"A",{href:!0});var xlt=s(mN);Bho=r(xlt,"XGLMTokenizerFast"),xlt.forEach(t),Iho=r(aS," (XGLM model)"),aS.forEach(t),Nho=i(S),wh=n(S,"LI",{});var Sye=s(wh);Dle=n(Sye,"STRONG",{});var $lt=s(Dle);qho=r($lt,"xlm"),$lt.forEach(t),jho=r(Sye," \u2014 "),fN=n(Sye,"A",{href:!0});var klt=s(fN);Dho=r(klt,"XLMTokenizer"),klt.forEach(t),Gho=r(Sye," (XLM model)"),Sye.forEach(t),Oho=i(S),Ah=n(S,"LI",{});var Rye=s(Ah);Gle=n(Rye,"STRONG",{});var Slt=s(Gle);Vho=r(Slt,"xlm-prophetnet"),Slt.forEach(t),Xho=r(Rye," \u2014 "),gN=n(Rye,"A",{href:!0});var Rlt=s(gN);zho=r(Rlt,"XLMProphetNetTokenizer"),Rlt.forEach(t),Qho=r(Rye," (XLM-ProphetNet model)"),Rye.forEach(t),Who=i(S),Gs=n(S,"LI",{});var nS=s(Gs);Ole=n(nS,"STRONG",{});var Plt=s(Ole);Hho=r(Plt,"xlm-roberta"),Plt.forEach(t),Uho=r(nS," \u2014 "),hN=n(nS,"A",{href:!0});var Blt=s(hN);Jho=r(Blt,"XLMRobertaTokenizer"),Blt.forEach(t),Yho=r(nS," or "),uN=n(nS,"A",{href:!0});var Ilt=s(uN);Kho=r(Ilt,"XLMRobertaTokenizerFast"),Ilt.forEach(t),Zho=r(nS," (XLM-RoBERTa model)"),nS.forEach(t),euo=i(S),Os=n(S,"LI",{});var sS=s(Os);Vle=n(sS,"STRONG",{});var Nlt=s(Vle);ouo=r(Nlt,"xlm-roberta-xl"),Nlt.forEach(t),ruo=r(sS," \u2014 "),pN=n(sS,"A",{href:!0});var qlt=s(pN);tuo=r(qlt,"RobertaTokenizer"),qlt.forEach(t),auo=r(sS," or "),_N=n(sS,"A",{href:!0});var jlt=s(_N);nuo=r(jlt,"RobertaTokenizerFast"),jlt.forEach(t),suo=r(sS," (XLM-RoBERTa-XL model)"),sS.forEach(t),luo=i(S),Vs=n(S,"LI",{});var lS=s(Vs);Xle=n(lS,"STRONG",{});var Dlt=s(Xle);iuo=r(Dlt,"xlnet"),Dlt.forEach(t),duo=r(lS," \u2014 "),bN=n(lS,"A",{href:!0});var Glt=s(bN);cuo=r(Glt,"XLNetTokenizer"),Glt.forEach(t),muo=r(lS," or "),vN=n(lS,"A",{href:!0});var Olt=s(vN);fuo=r(Olt,"XLNetTokenizerFast"),Olt.forEach(t),guo=r(lS," (XLNet model)"),lS.forEach(t),huo=i(S),Xs=n(S,"LI",{});var iS=s(Xs);zle=n(iS,"STRONG",{});var Vlt=s(zle);uuo=r(Vlt,"yoso"),Vlt.forEach(t),puo=r(iS," \u2014 "),FN=n(iS,"A",{href:!0});var Xlt=s(FN);_uo=r(Xlt,"AlbertTokenizer"),Xlt.forEach(t),buo=r(iS," or "),TN=n(iS,"A",{href:!0});var zlt=s(TN);vuo=r(zlt,"AlbertTokenizerFast"),zlt.forEach(t),Fuo=r(iS," (YOSO model)"),iS.forEach(t),S.forEach(t),Tuo=i(Js),T(Lh.$$.fragment,Js),Js.forEach(t),Muo=i(Us),yh=n(Us,"DIV",{class:!0});var RXe=s(yh);T(Y7.$$.fragment,RXe),Euo=i(RXe),Qle=n(RXe,"P",{});var Qlt=s(Qle);Cuo=r(Qlt,"Register a new tokenizer in this mapping."),Qlt.forEach(t),RXe.forEach(t),Us.forEach(t),SOe=i(m),Pi=n(m,"H2",{class:!0});var PXe=s(Pi);xh=n(PXe,"A",{id:!0,class:!0,href:!0});var Wlt=s(xh);Wle=n(Wlt,"SPAN",{});var Hlt=s(Wle);T(K7.$$.fragment,Hlt),Hlt.forEach(t),Wlt.forEach(t),wuo=i(PXe),Hle=n(PXe,"SPAN",{});var Ult=s(Hle);Auo=r(Ult,"AutoFeatureExtractor"),Ult.forEach(t),PXe.forEach(t),ROe=i(m),Lo=n(m,"DIV",{class:!0});var Ys=s(Lo);T(Z7.$$.fragment,Ys),Luo=i(Ys),ey=n(Ys,"P",{});var BXe=s(ey);yuo=r(BXe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),MN=n(BXe,"A",{href:!0});var Jlt=s(MN);xuo=r(Jlt,"AutoFeatureExtractor.from_pretrained()"),Jlt.forEach(t),$uo=r(BXe," class method."),BXe.forEach(t),kuo=i(Ys),oy=n(Ys,"P",{});var IXe=s(oy);Suo=r(IXe,"This class cannot be instantiated directly using "),Ule=n(IXe,"CODE",{});var Ylt=s(Ule);Ruo=r(Ylt,"__init__()"),Ylt.forEach(t),Puo=r(IXe," (throws an error)."),IXe.forEach(t),Buo=i(Ys),He=n(Ys,"DIV",{class:!0});var ra=s(He);T(ry.$$.fragment,ra),Iuo=i(ra),Jle=n(ra,"P",{});var Klt=s(Jle);Nuo=r(Klt,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Klt.forEach(t),quo=i(ra),Sa=n(ra,"P",{});var j6=s(Sa);juo=r(j6,"The feature extractor class to instantiate is selected based on the "),Yle=n(j6,"CODE",{});var Zlt=s(Yle);Duo=r(Zlt,"model_type"),Zlt.forEach(t),Guo=r(j6,` property of the config object
(either passed as an argument or loaded from `),Kle=n(j6,"CODE",{});var eit=s(Kle);Ouo=r(eit,"pretrained_model_name_or_path"),eit.forEach(t),Vuo=r(j6,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Zle=n(j6,"CODE",{});var oit=s(Zle);Xuo=r(oit,"pretrained_model_name_or_path"),oit.forEach(t),zuo=r(j6,":"),j6.forEach(t),Quo=i(ra),Y=n(ra,"UL",{});var K=s(Y);$h=n(K,"LI",{});var Pye=s($h);eie=n(Pye,"STRONG",{});var rit=s(eie);Wuo=r(rit,"beit"),rit.forEach(t),Huo=r(Pye," \u2014 "),EN=n(Pye,"A",{href:!0});var tit=s(EN);Uuo=r(tit,"BeitFeatureExtractor"),tit.forEach(t),Juo=r(Pye," (BEiT model)"),Pye.forEach(t),Yuo=i(K),kh=n(K,"LI",{});var Bye=s(kh);oie=n(Bye,"STRONG",{});var ait=s(oie);Kuo=r(ait,"clip"),ait.forEach(t),Zuo=r(Bye," \u2014 "),CN=n(Bye,"A",{href:!0});var nit=s(CN);epo=r(nit,"CLIPFeatureExtractor"),nit.forEach(t),opo=r(Bye," (CLIP model)"),Bye.forEach(t),rpo=i(K),Sh=n(K,"LI",{});var Iye=s(Sh);rie=n(Iye,"STRONG",{});var sit=s(rie);tpo=r(sit,"convnext"),sit.forEach(t),apo=r(Iye," \u2014 "),wN=n(Iye,"A",{href:!0});var lit=s(wN);npo=r(lit,"ConvNextFeatureExtractor"),lit.forEach(t),spo=r(Iye," (ConvNeXT model)"),Iye.forEach(t),lpo=i(K),Rh=n(K,"LI",{});var Nye=s(Rh);tie=n(Nye,"STRONG",{});var iit=s(tie);ipo=r(iit,"cvt"),iit.forEach(t),dpo=r(Nye," \u2014 "),AN=n(Nye,"A",{href:!0});var dit=s(AN);cpo=r(dit,"ConvNextFeatureExtractor"),dit.forEach(t),mpo=r(Nye," (CvT model)"),Nye.forEach(t),fpo=i(K),Ph=n(K,"LI",{});var qye=s(Ph);aie=n(qye,"STRONG",{});var cit=s(aie);gpo=r(cit,"data2vec-audio"),cit.forEach(t),hpo=r(qye," \u2014 "),LN=n(qye,"A",{href:!0});var mit=s(LN);upo=r(mit,"Wav2Vec2FeatureExtractor"),mit.forEach(t),ppo=r(qye," (Data2VecAudio model)"),qye.forEach(t),_po=i(K),Bh=n(K,"LI",{});var jye=s(Bh);nie=n(jye,"STRONG",{});var fit=s(nie);bpo=r(fit,"data2vec-vision"),fit.forEach(t),vpo=r(jye," \u2014 "),yN=n(jye,"A",{href:!0});var git=s(yN);Fpo=r(git,"BeitFeatureExtractor"),git.forEach(t),Tpo=r(jye," (Data2VecVision model)"),jye.forEach(t),Mpo=i(K),Ih=n(K,"LI",{});var Dye=s(Ih);sie=n(Dye,"STRONG",{});var hit=s(sie);Epo=r(hit,"deit"),hit.forEach(t),Cpo=r(Dye," \u2014 "),xN=n(Dye,"A",{href:!0});var uit=s(xN);wpo=r(uit,"DeiTFeatureExtractor"),uit.forEach(t),Apo=r(Dye," (DeiT model)"),Dye.forEach(t),Lpo=i(K),Nh=n(K,"LI",{});var Gye=s(Nh);lie=n(Gye,"STRONG",{});var pit=s(lie);ypo=r(pit,"detr"),pit.forEach(t),xpo=r(Gye," \u2014 "),$N=n(Gye,"A",{href:!0});var _it=s($N);$po=r(_it,"DetrFeatureExtractor"),_it.forEach(t),kpo=r(Gye," (DETR model)"),Gye.forEach(t),Spo=i(K),qh=n(K,"LI",{});var Oye=s(qh);iie=n(Oye,"STRONG",{});var bit=s(iie);Rpo=r(bit,"dpt"),bit.forEach(t),Ppo=r(Oye," \u2014 "),kN=n(Oye,"A",{href:!0});var vit=s(kN);Bpo=r(vit,"DPTFeatureExtractor"),vit.forEach(t),Ipo=r(Oye," (DPT model)"),Oye.forEach(t),Npo=i(K),jh=n(K,"LI",{});var Vye=s(jh);die=n(Vye,"STRONG",{});var Fit=s(die);qpo=r(Fit,"flava"),Fit.forEach(t),jpo=r(Vye," \u2014 "),SN=n(Vye,"A",{href:!0});var Tit=s(SN);Dpo=r(Tit,"FlavaFeatureExtractor"),Tit.forEach(t),Gpo=r(Vye," (FLAVA model)"),Vye.forEach(t),Opo=i(K),Dh=n(K,"LI",{});var Xye=s(Dh);cie=n(Xye,"STRONG",{});var Mit=s(cie);Vpo=r(Mit,"glpn"),Mit.forEach(t),Xpo=r(Xye," \u2014 "),RN=n(Xye,"A",{href:!0});var Eit=s(RN);zpo=r(Eit,"GLPNFeatureExtractor"),Eit.forEach(t),Qpo=r(Xye," (GLPN model)"),Xye.forEach(t),Wpo=i(K),Gh=n(K,"LI",{});var zye=s(Gh);mie=n(zye,"STRONG",{});var Cit=s(mie);Hpo=r(Cit,"groupvit"),Cit.forEach(t),Upo=r(zye," \u2014 "),PN=n(zye,"A",{href:!0});var wit=s(PN);Jpo=r(wit,"CLIPFeatureExtractor"),wit.forEach(t),Ypo=r(zye," (GroupViT model)"),zye.forEach(t),Kpo=i(K),Oh=n(K,"LI",{});var Qye=s(Oh);fie=n(Qye,"STRONG",{});var Ait=s(fie);Zpo=r(Ait,"hubert"),Ait.forEach(t),e_o=r(Qye," \u2014 "),BN=n(Qye,"A",{href:!0});var Lit=s(BN);o_o=r(Lit,"Wav2Vec2FeatureExtractor"),Lit.forEach(t),r_o=r(Qye," (Hubert model)"),Qye.forEach(t),t_o=i(K),Vh=n(K,"LI",{});var Wye=s(Vh);gie=n(Wye,"STRONG",{});var yit=s(gie);a_o=r(yit,"imagegpt"),yit.forEach(t),n_o=r(Wye," \u2014 "),IN=n(Wye,"A",{href:!0});var xit=s(IN);s_o=r(xit,"ImageGPTFeatureExtractor"),xit.forEach(t),l_o=r(Wye," (ImageGPT model)"),Wye.forEach(t),i_o=i(K),Xh=n(K,"LI",{});var Hye=s(Xh);hie=n(Hye,"STRONG",{});var $it=s(hie);d_o=r($it,"layoutlmv2"),$it.forEach(t),c_o=r(Hye," \u2014 "),NN=n(Hye,"A",{href:!0});var kit=s(NN);m_o=r(kit,"LayoutLMv2FeatureExtractor"),kit.forEach(t),f_o=r(Hye," (LayoutLMv2 model)"),Hye.forEach(t),g_o=i(K),zh=n(K,"LI",{});var Uye=s(zh);uie=n(Uye,"STRONG",{});var Sit=s(uie);h_o=r(Sit,"layoutlmv3"),Sit.forEach(t),u_o=r(Uye," \u2014 "),qN=n(Uye,"A",{href:!0});var Rit=s(qN);p_o=r(Rit,"LayoutLMv3FeatureExtractor"),Rit.forEach(t),__o=r(Uye," (LayoutLMv3 model)"),Uye.forEach(t),b_o=i(K),Qh=n(K,"LI",{});var Jye=s(Qh);pie=n(Jye,"STRONG",{});var Pit=s(pie);v_o=r(Pit,"levit"),Pit.forEach(t),F_o=r(Jye," \u2014 "),jN=n(Jye,"A",{href:!0});var Bit=s(jN);T_o=r(Bit,"LevitFeatureExtractor"),Bit.forEach(t),M_o=r(Jye," (LeViT model)"),Jye.forEach(t),E_o=i(K),Wh=n(K,"LI",{});var Yye=s(Wh);_ie=n(Yye,"STRONG",{});var Iit=s(_ie);C_o=r(Iit,"maskformer"),Iit.forEach(t),w_o=r(Yye," \u2014 "),DN=n(Yye,"A",{href:!0});var Nit=s(DN);A_o=r(Nit,"MaskFormerFeatureExtractor"),Nit.forEach(t),L_o=r(Yye," (MaskFormer model)"),Yye.forEach(t),y_o=i(K),Hh=n(K,"LI",{});var Kye=s(Hh);bie=n(Kye,"STRONG",{});var qit=s(bie);x_o=r(qit,"mctct"),qit.forEach(t),$_o=r(Kye," \u2014 "),GN=n(Kye,"A",{href:!0});var jit=s(GN);k_o=r(jit,"MCTCTFeatureExtractor"),jit.forEach(t),S_o=r(Kye," (M-CTC-T model)"),Kye.forEach(t),R_o=i(K),Uh=n(K,"LI",{});var Zye=s(Uh);vie=n(Zye,"STRONG",{});var Dit=s(vie);P_o=r(Dit,"perceiver"),Dit.forEach(t),B_o=r(Zye," \u2014 "),ON=n(Zye,"A",{href:!0});var Git=s(ON);I_o=r(Git,"PerceiverFeatureExtractor"),Git.forEach(t),N_o=r(Zye," (Perceiver model)"),Zye.forEach(t),q_o=i(K),Jh=n(K,"LI",{});var e8e=s(Jh);Fie=n(e8e,"STRONG",{});var Oit=s(Fie);j_o=r(Oit,"poolformer"),Oit.forEach(t),D_o=r(e8e," \u2014 "),VN=n(e8e,"A",{href:!0});var Vit=s(VN);G_o=r(Vit,"PoolFormerFeatureExtractor"),Vit.forEach(t),O_o=r(e8e," (PoolFormer model)"),e8e.forEach(t),V_o=i(K),Yh=n(K,"LI",{});var o8e=s(Yh);Tie=n(o8e,"STRONG",{});var Xit=s(Tie);X_o=r(Xit,"regnet"),Xit.forEach(t),z_o=r(o8e," \u2014 "),XN=n(o8e,"A",{href:!0});var zit=s(XN);Q_o=r(zit,"ConvNextFeatureExtractor"),zit.forEach(t),W_o=r(o8e," (RegNet model)"),o8e.forEach(t),H_o=i(K),Kh=n(K,"LI",{});var r8e=s(Kh);Mie=n(r8e,"STRONG",{});var Qit=s(Mie);U_o=r(Qit,"resnet"),Qit.forEach(t),J_o=r(r8e," \u2014 "),zN=n(r8e,"A",{href:!0});var Wit=s(zN);Y_o=r(Wit,"ConvNextFeatureExtractor"),Wit.forEach(t),K_o=r(r8e," (ResNet model)"),r8e.forEach(t),Z_o=i(K),Zh=n(K,"LI",{});var t8e=s(Zh);Eie=n(t8e,"STRONG",{});var Hit=s(Eie);e2o=r(Hit,"segformer"),Hit.forEach(t),o2o=r(t8e," \u2014 "),QN=n(t8e,"A",{href:!0});var Uit=s(QN);r2o=r(Uit,"SegformerFeatureExtractor"),Uit.forEach(t),t2o=r(t8e," (SegFormer model)"),t8e.forEach(t),a2o=i(K),eu=n(K,"LI",{});var a8e=s(eu);Cie=n(a8e,"STRONG",{});var Jit=s(Cie);n2o=r(Jit,"speech_to_text"),Jit.forEach(t),s2o=r(a8e," \u2014 "),WN=n(a8e,"A",{href:!0});var Yit=s(WN);l2o=r(Yit,"Speech2TextFeatureExtractor"),Yit.forEach(t),i2o=r(a8e," (Speech2Text model)"),a8e.forEach(t),d2o=i(K),ou=n(K,"LI",{});var n8e=s(ou);wie=n(n8e,"STRONG",{});var Kit=s(wie);c2o=r(Kit,"swin"),Kit.forEach(t),m2o=r(n8e," \u2014 "),HN=n(n8e,"A",{href:!0});var Zit=s(HN);f2o=r(Zit,"ViTFeatureExtractor"),Zit.forEach(t),g2o=r(n8e," (Swin Transformer model)"),n8e.forEach(t),h2o=i(K),ru=n(K,"LI",{});var s8e=s(ru);Aie=n(s8e,"STRONG",{});var edt=s(Aie);u2o=r(edt,"van"),edt.forEach(t),p2o=r(s8e," \u2014 "),UN=n(s8e,"A",{href:!0});var odt=s(UN);_2o=r(odt,"ConvNextFeatureExtractor"),odt.forEach(t),b2o=r(s8e," (VAN model)"),s8e.forEach(t),v2o=i(K),tu=n(K,"LI",{});var l8e=s(tu);Lie=n(l8e,"STRONG",{});var rdt=s(Lie);F2o=r(rdt,"vilt"),rdt.forEach(t),T2o=r(l8e," \u2014 "),JN=n(l8e,"A",{href:!0});var tdt=s(JN);M2o=r(tdt,"ViltFeatureExtractor"),tdt.forEach(t),E2o=r(l8e," (ViLT model)"),l8e.forEach(t),C2o=i(K),au=n(K,"LI",{});var i8e=s(au);yie=n(i8e,"STRONG",{});var adt=s(yie);w2o=r(adt,"vit"),adt.forEach(t),A2o=r(i8e," \u2014 "),YN=n(i8e,"A",{href:!0});var ndt=s(YN);L2o=r(ndt,"ViTFeatureExtractor"),ndt.forEach(t),y2o=r(i8e," (ViT model)"),i8e.forEach(t),x2o=i(K),nu=n(K,"LI",{});var d8e=s(nu);xie=n(d8e,"STRONG",{});var sdt=s(xie);$2o=r(sdt,"vit_mae"),sdt.forEach(t),k2o=r(d8e," \u2014 "),KN=n(d8e,"A",{href:!0});var ldt=s(KN);S2o=r(ldt,"ViTFeatureExtractor"),ldt.forEach(t),R2o=r(d8e," (ViTMAE model)"),d8e.forEach(t),P2o=i(K),su=n(K,"LI",{});var c8e=s(su);$ie=n(c8e,"STRONG",{});var idt=s($ie);B2o=r(idt,"wav2vec2"),idt.forEach(t),I2o=r(c8e," \u2014 "),ZN=n(c8e,"A",{href:!0});var ddt=s(ZN);N2o=r(ddt,"Wav2Vec2FeatureExtractor"),ddt.forEach(t),q2o=r(c8e," (Wav2Vec2 model)"),c8e.forEach(t),j2o=i(K),lu=n(K,"LI",{});var m8e=s(lu);kie=n(m8e,"STRONG",{});var cdt=s(kie);D2o=r(cdt,"wav2vec2-conformer"),cdt.forEach(t),G2o=r(m8e," \u2014 "),eq=n(m8e,"A",{href:!0});var mdt=s(eq);O2o=r(mdt,"Wav2Vec2FeatureExtractor"),mdt.forEach(t),V2o=r(m8e," (Wav2Vec2-Conformer model)"),m8e.forEach(t),X2o=i(K),iu=n(K,"LI",{});var f8e=s(iu);Sie=n(f8e,"STRONG",{});var fdt=s(Sie);z2o=r(fdt,"yolos"),fdt.forEach(t),Q2o=r(f8e," \u2014 "),oq=n(f8e,"A",{href:!0});var gdt=s(oq);W2o=r(gdt,"YolosFeatureExtractor"),gdt.forEach(t),H2o=r(f8e," (YOLOS model)"),f8e.forEach(t),K.forEach(t),U2o=i(ra),T(du.$$.fragment,ra),J2o=i(ra),T(cu.$$.fragment,ra),ra.forEach(t),Y2o=i(Ys),mu=n(Ys,"DIV",{class:!0});var NXe=s(mu);T(ty.$$.fragment,NXe),K2o=i(NXe),Rie=n(NXe,"P",{});var hdt=s(Rie);Z2o=r(hdt,"Register a new feature extractor for this class."),hdt.forEach(t),NXe.forEach(t),Ys.forEach(t),POe=i(m),Bi=n(m,"H2",{class:!0});var qXe=s(Bi);fu=n(qXe,"A",{id:!0,class:!0,href:!0});var udt=s(fu);Pie=n(udt,"SPAN",{});var pdt=s(Pie);T(ay.$$.fragment,pdt),pdt.forEach(t),udt.forEach(t),ebo=i(qXe),Bie=n(qXe,"SPAN",{});var _dt=s(Bie);obo=r(_dt,"AutoProcessor"),_dt.forEach(t),qXe.forEach(t),BOe=i(m),yo=n(m,"DIV",{class:!0});var Ks=s(yo);T(ny.$$.fragment,Ks),rbo=i(Ks),sy=n(Ks,"P",{});var jXe=s(sy);tbo=r(jXe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),rq=n(jXe,"A",{href:!0});var bdt=s(rq);abo=r(bdt,"AutoProcessor.from_pretrained()"),bdt.forEach(t),nbo=r(jXe," class method."),jXe.forEach(t),sbo=i(Ks),ly=n(Ks,"P",{});var DXe=s(ly);lbo=r(DXe,"This class cannot be instantiated directly using "),Iie=n(DXe,"CODE",{});var vdt=s(Iie);ibo=r(vdt,"__init__()"),vdt.forEach(t),dbo=r(DXe," (throws an error)."),DXe.forEach(t),cbo=i(Ks),Ue=n(Ks,"DIV",{class:!0});var ta=s(Ue);T(iy.$$.fragment,ta),mbo=i(ta),Nie=n(ta,"P",{});var Fdt=s(Nie);fbo=r(Fdt,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Fdt.forEach(t),gbo=i(ta),Ii=n(ta,"P",{});var Doe=s(Ii);hbo=r(Doe,"The processor class to instantiate is selected based on the "),qie=n(Doe,"CODE",{});var Tdt=s(qie);ubo=r(Tdt,"model_type"),Tdt.forEach(t),pbo=r(Doe,` property of the config object (either
passed as an argument or loaded from `),jie=n(Doe,"CODE",{});var Mdt=s(jie);_bo=r(Mdt,"pretrained_model_name_or_path"),Mdt.forEach(t),bbo=r(Doe," if possible):"),Doe.forEach(t),vbo=i(ta),he=n(ta,"UL",{});var _e=s(he);gu=n(_e,"LI",{});var g8e=s(gu);Die=n(g8e,"STRONG",{});var Edt=s(Die);Fbo=r(Edt,"clip"),Edt.forEach(t),Tbo=r(g8e," \u2014 "),tq=n(g8e,"A",{href:!0});var Cdt=s(tq);Mbo=r(Cdt,"CLIPProcessor"),Cdt.forEach(t),Ebo=r(g8e," (CLIP model)"),g8e.forEach(t),Cbo=i(_e),hu=n(_e,"LI",{});var h8e=s(hu);Gie=n(h8e,"STRONG",{});var wdt=s(Gie);wbo=r(wdt,"flava"),wdt.forEach(t),Abo=r(h8e," \u2014 "),Oie=n(h8e,"CODE",{});var Adt=s(Oie);Lbo=r(Adt,"FLAVAProcessor"),Adt.forEach(t),ybo=r(h8e," (FLAVA model)"),h8e.forEach(t),xbo=i(_e),uu=n(_e,"LI",{});var u8e=s(uu);Vie=n(u8e,"STRONG",{});var Ldt=s(Vie);$bo=r(Ldt,"groupvit"),Ldt.forEach(t),kbo=r(u8e," \u2014 "),aq=n(u8e,"A",{href:!0});var ydt=s(aq);Sbo=r(ydt,"CLIPProcessor"),ydt.forEach(t),Rbo=r(u8e," (GroupViT model)"),u8e.forEach(t),Pbo=i(_e),pu=n(_e,"LI",{});var p8e=s(pu);Xie=n(p8e,"STRONG",{});var xdt=s(Xie);Bbo=r(xdt,"layoutlmv2"),xdt.forEach(t),Ibo=r(p8e," \u2014 "),nq=n(p8e,"A",{href:!0});var $dt=s(nq);Nbo=r($dt,"LayoutLMv2Processor"),$dt.forEach(t),qbo=r(p8e," (LayoutLMv2 model)"),p8e.forEach(t),jbo=i(_e),_u=n(_e,"LI",{});var _8e=s(_u);zie=n(_8e,"STRONG",{});var kdt=s(zie);Dbo=r(kdt,"layoutlmv3"),kdt.forEach(t),Gbo=r(_8e," \u2014 "),sq=n(_8e,"A",{href:!0});var Sdt=s(sq);Obo=r(Sdt,"LayoutLMv3Processor"),Sdt.forEach(t),Vbo=r(_8e," (LayoutLMv3 model)"),_8e.forEach(t),Xbo=i(_e),bu=n(_e,"LI",{});var b8e=s(bu);Qie=n(b8e,"STRONG",{});var Rdt=s(Qie);zbo=r(Rdt,"layoutxlm"),Rdt.forEach(t),Qbo=r(b8e," \u2014 "),lq=n(b8e,"A",{href:!0});var Pdt=s(lq);Wbo=r(Pdt,"LayoutXLMProcessor"),Pdt.forEach(t),Hbo=r(b8e," (LayoutXLM model)"),b8e.forEach(t),Ubo=i(_e),vu=n(_e,"LI",{});var v8e=s(vu);Wie=n(v8e,"STRONG",{});var Bdt=s(Wie);Jbo=r(Bdt,"sew"),Bdt.forEach(t),Ybo=r(v8e," \u2014 "),iq=n(v8e,"A",{href:!0});var Idt=s(iq);Kbo=r(Idt,"Wav2Vec2Processor"),Idt.forEach(t),Zbo=r(v8e," (SEW model)"),v8e.forEach(t),evo=i(_e),Fu=n(_e,"LI",{});var F8e=s(Fu);Hie=n(F8e,"STRONG",{});var Ndt=s(Hie);ovo=r(Ndt,"sew-d"),Ndt.forEach(t),rvo=r(F8e," \u2014 "),dq=n(F8e,"A",{href:!0});var qdt=s(dq);tvo=r(qdt,"Wav2Vec2Processor"),qdt.forEach(t),avo=r(F8e," (SEW-D model)"),F8e.forEach(t),nvo=i(_e),Tu=n(_e,"LI",{});var T8e=s(Tu);Uie=n(T8e,"STRONG",{});var jdt=s(Uie);svo=r(jdt,"speech_to_text"),jdt.forEach(t),lvo=r(T8e," \u2014 "),cq=n(T8e,"A",{href:!0});var Ddt=s(cq);ivo=r(Ddt,"Speech2TextProcessor"),Ddt.forEach(t),dvo=r(T8e," (Speech2Text model)"),T8e.forEach(t),cvo=i(_e),Mu=n(_e,"LI",{});var M8e=s(Mu);Jie=n(M8e,"STRONG",{});var Gdt=s(Jie);mvo=r(Gdt,"speech_to_text_2"),Gdt.forEach(t),fvo=r(M8e," \u2014 "),mq=n(M8e,"A",{href:!0});var Odt=s(mq);gvo=r(Odt,"Speech2Text2Processor"),Odt.forEach(t),hvo=r(M8e," (Speech2Text2 model)"),M8e.forEach(t),uvo=i(_e),Eu=n(_e,"LI",{});var E8e=s(Eu);Yie=n(E8e,"STRONG",{});var Vdt=s(Yie);pvo=r(Vdt,"trocr"),Vdt.forEach(t),_vo=r(E8e," \u2014 "),fq=n(E8e,"A",{href:!0});var Xdt=s(fq);bvo=r(Xdt,"TrOCRProcessor"),Xdt.forEach(t),vvo=r(E8e," (TrOCR model)"),E8e.forEach(t),Fvo=i(_e),Cu=n(_e,"LI",{});var C8e=s(Cu);Kie=n(C8e,"STRONG",{});var zdt=s(Kie);Tvo=r(zdt,"unispeech"),zdt.forEach(t),Mvo=r(C8e," \u2014 "),gq=n(C8e,"A",{href:!0});var Qdt=s(gq);Evo=r(Qdt,"Wav2Vec2Processor"),Qdt.forEach(t),Cvo=r(C8e," (UniSpeech model)"),C8e.forEach(t),wvo=i(_e),wu=n(_e,"LI",{});var w8e=s(wu);Zie=n(w8e,"STRONG",{});var Wdt=s(Zie);Avo=r(Wdt,"unispeech-sat"),Wdt.forEach(t),Lvo=r(w8e," \u2014 "),hq=n(w8e,"A",{href:!0});var Hdt=s(hq);yvo=r(Hdt,"Wav2Vec2Processor"),Hdt.forEach(t),xvo=r(w8e," (UniSpeechSat model)"),w8e.forEach(t),$vo=i(_e),Au=n(_e,"LI",{});var A8e=s(Au);ede=n(A8e,"STRONG",{});var Udt=s(ede);kvo=r(Udt,"vilt"),Udt.forEach(t),Svo=r(A8e," \u2014 "),uq=n(A8e,"A",{href:!0});var Jdt=s(uq);Rvo=r(Jdt,"ViltProcessor"),Jdt.forEach(t),Pvo=r(A8e," (ViLT model)"),A8e.forEach(t),Bvo=i(_e),Lu=n(_e,"LI",{});var L8e=s(Lu);ode=n(L8e,"STRONG",{});var Ydt=s(ode);Ivo=r(Ydt,"vision-text-dual-encoder"),Ydt.forEach(t),Nvo=r(L8e," \u2014 "),pq=n(L8e,"A",{href:!0});var Kdt=s(pq);qvo=r(Kdt,"VisionTextDualEncoderProcessor"),Kdt.forEach(t),jvo=r(L8e," (VisionTextDualEncoder model)"),L8e.forEach(t),Dvo=i(_e),yu=n(_e,"LI",{});var y8e=s(yu);rde=n(y8e,"STRONG",{});var Zdt=s(rde);Gvo=r(Zdt,"wav2vec2"),Zdt.forEach(t),Ovo=r(y8e," \u2014 "),_q=n(y8e,"A",{href:!0});var ect=s(_q);Vvo=r(ect,"Wav2Vec2Processor"),ect.forEach(t),Xvo=r(y8e," (Wav2Vec2 model)"),y8e.forEach(t),zvo=i(_e),xu=n(_e,"LI",{});var x8e=s(xu);tde=n(x8e,"STRONG",{});var oct=s(tde);Qvo=r(oct,"wav2vec2-conformer"),oct.forEach(t),Wvo=r(x8e," \u2014 "),bq=n(x8e,"A",{href:!0});var rct=s(bq);Hvo=r(rct,"Wav2Vec2Processor"),rct.forEach(t),Uvo=r(x8e," (Wav2Vec2-Conformer model)"),x8e.forEach(t),Jvo=i(_e),$u=n(_e,"LI",{});var $8e=s($u);ade=n($8e,"STRONG",{});var tct=s(ade);Yvo=r(tct,"wavlm"),tct.forEach(t),Kvo=r($8e," \u2014 "),vq=n($8e,"A",{href:!0});var act=s(vq);Zvo=r(act,"Wav2Vec2Processor"),act.forEach(t),e1o=r($8e," (WavLM model)"),$8e.forEach(t),_e.forEach(t),o1o=i(ta),T(ku.$$.fragment,ta),r1o=i(ta),T(Su.$$.fragment,ta),ta.forEach(t),t1o=i(Ks),Ru=n(Ks,"DIV",{class:!0});var GXe=s(Ru);T(dy.$$.fragment,GXe),a1o=i(GXe),nde=n(GXe,"P",{});var nct=s(nde);n1o=r(nct,"Register a new processor for this class."),nct.forEach(t),GXe.forEach(t),Ks.forEach(t),IOe=i(m),Ni=n(m,"H2",{class:!0});var OXe=s(Ni);Pu=n(OXe,"A",{id:!0,class:!0,href:!0});var sct=s(Pu);sde=n(sct,"SPAN",{});var lct=s(sde);T(cy.$$.fragment,lct),lct.forEach(t),sct.forEach(t),s1o=i(OXe),lde=n(OXe,"SPAN",{});var ict=s(lde);l1o=r(ict,"AutoModel"),ict.forEach(t),OXe.forEach(t),NOe=i(m),xo=n(m,"DIV",{class:!0});var Zs=s(xo);T(my.$$.fragment,Zs),i1o=i(Zs),qi=n(Zs,"P",{});var Goe=s(qi);d1o=r(Goe,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),Fq=n(Goe,"A",{href:!0});var dct=s(Fq);c1o=r(dct,"from_pretrained()"),dct.forEach(t),m1o=r(Goe," class method or the "),Tq=n(Goe,"A",{href:!0});var cct=s(Tq);f1o=r(cct,"from_config()"),cct.forEach(t),g1o=r(Goe,` class
method.`),Goe.forEach(t),h1o=i(Zs),fy=n(Zs,"P",{});var VXe=s(fy);u1o=r(VXe,"This class cannot be instantiated directly using "),ide=n(VXe,"CODE",{});var mct=s(ide);p1o=r(mct,"__init__()"),mct.forEach(t),_1o=r(VXe," (throws an error)."),VXe.forEach(t),b1o=i(Zs),nt=n(Zs,"DIV",{class:!0});var D6=s(nt);T(gy.$$.fragment,D6),v1o=i(D6),dde=n(D6,"P",{});var fct=s(dde);F1o=r(fct,"Instantiates one of the base model classes of the library from a configuration."),fct.forEach(t),T1o=i(D6),ji=n(D6,"P",{});var Ooe=s(ji);M1o=r(Ooe,`Note:
Loading a model from its configuration file does `),cde=n(Ooe,"STRONG",{});var gct=s(cde);E1o=r(gct,"not"),gct.forEach(t),C1o=r(Ooe,` load the model weights. It only affects the
model\u2019s configuration. Use `),Mq=n(Ooe,"A",{href:!0});var hct=s(Mq);w1o=r(hct,"from_pretrained()"),hct.forEach(t),A1o=r(Ooe," to load the model weights."),Ooe.forEach(t),L1o=i(D6),T(Bu.$$.fragment,D6),D6.forEach(t),y1o=i(Zs),Je=n(Zs,"DIV",{class:!0});var aa=s(Je);T(hy.$$.fragment,aa),x1o=i(aa),mde=n(aa,"P",{});var uct=s(mde);$1o=r(uct,"Instantiate one of the base model classes of the library from a pretrained model."),uct.forEach(t),k1o=i(aa),Ra=n(aa,"P",{});var G6=s(Ra);S1o=r(G6,"The model class to instantiate is selected based on the "),fde=n(G6,"CODE",{});var pct=s(fde);R1o=r(pct,"model_type"),pct.forEach(t),P1o=r(G6,` property of the config object (either
passed as an argument or loaded from `),gde=n(G6,"CODE",{});var _ct=s(gde);B1o=r(_ct,"pretrained_model_name_or_path"),_ct.forEach(t),I1o=r(G6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hde=n(G6,"CODE",{});var bct=s(hde);N1o=r(bct,"pretrained_model_name_or_path"),bct.forEach(t),q1o=r(G6,":"),G6.forEach(t),j1o=i(aa),y=n(aa,"UL",{});var x=s(y);Iu=n(x,"LI",{});var k8e=s(Iu);ude=n(k8e,"STRONG",{});var vct=s(ude);D1o=r(vct,"albert"),vct.forEach(t),G1o=r(k8e," \u2014 "),Eq=n(k8e,"A",{href:!0});var Fct=s(Eq);O1o=r(Fct,"AlbertModel"),Fct.forEach(t),V1o=r(k8e," (ALBERT model)"),k8e.forEach(t),X1o=i(x),Nu=n(x,"LI",{});var S8e=s(Nu);pde=n(S8e,"STRONG",{});var Tct=s(pde);z1o=r(Tct,"bart"),Tct.forEach(t),Q1o=r(S8e," \u2014 "),Cq=n(S8e,"A",{href:!0});var Mct=s(Cq);W1o=r(Mct,"BartModel"),Mct.forEach(t),H1o=r(S8e," (BART model)"),S8e.forEach(t),U1o=i(x),qu=n(x,"LI",{});var R8e=s(qu);_de=n(R8e,"STRONG",{});var Ect=s(_de);J1o=r(Ect,"beit"),Ect.forEach(t),Y1o=r(R8e," \u2014 "),wq=n(R8e,"A",{href:!0});var Cct=s(wq);K1o=r(Cct,"BeitModel"),Cct.forEach(t),Z1o=r(R8e," (BEiT model)"),R8e.forEach(t),eFo=i(x),ju=n(x,"LI",{});var P8e=s(ju);bde=n(P8e,"STRONG",{});var wct=s(bde);oFo=r(wct,"bert"),wct.forEach(t),rFo=r(P8e," \u2014 "),Aq=n(P8e,"A",{href:!0});var Act=s(Aq);tFo=r(Act,"BertModel"),Act.forEach(t),aFo=r(P8e," (BERT model)"),P8e.forEach(t),nFo=i(x),Du=n(x,"LI",{});var B8e=s(Du);vde=n(B8e,"STRONG",{});var Lct=s(vde);sFo=r(Lct,"bert-generation"),Lct.forEach(t),lFo=r(B8e," \u2014 "),Lq=n(B8e,"A",{href:!0});var yct=s(Lq);iFo=r(yct,"BertGenerationEncoder"),yct.forEach(t),dFo=r(B8e," (Bert Generation model)"),B8e.forEach(t),cFo=i(x),Gu=n(x,"LI",{});var I8e=s(Gu);Fde=n(I8e,"STRONG",{});var xct=s(Fde);mFo=r(xct,"big_bird"),xct.forEach(t),fFo=r(I8e," \u2014 "),yq=n(I8e,"A",{href:!0});var $ct=s(yq);gFo=r($ct,"BigBirdModel"),$ct.forEach(t),hFo=r(I8e," (BigBird model)"),I8e.forEach(t),uFo=i(x),Ou=n(x,"LI",{});var N8e=s(Ou);Tde=n(N8e,"STRONG",{});var kct=s(Tde);pFo=r(kct,"bigbird_pegasus"),kct.forEach(t),_Fo=r(N8e," \u2014 "),xq=n(N8e,"A",{href:!0});var Sct=s(xq);bFo=r(Sct,"BigBirdPegasusModel"),Sct.forEach(t),vFo=r(N8e," (BigBird-Pegasus model)"),N8e.forEach(t),FFo=i(x),Vu=n(x,"LI",{});var q8e=s(Vu);Mde=n(q8e,"STRONG",{});var Rct=s(Mde);TFo=r(Rct,"blenderbot"),Rct.forEach(t),MFo=r(q8e," \u2014 "),$q=n(q8e,"A",{href:!0});var Pct=s($q);EFo=r(Pct,"BlenderbotModel"),Pct.forEach(t),CFo=r(q8e," (Blenderbot model)"),q8e.forEach(t),wFo=i(x),Xu=n(x,"LI",{});var j8e=s(Xu);Ede=n(j8e,"STRONG",{});var Bct=s(Ede);AFo=r(Bct,"blenderbot-small"),Bct.forEach(t),LFo=r(j8e," \u2014 "),kq=n(j8e,"A",{href:!0});var Ict=s(kq);yFo=r(Ict,"BlenderbotSmallModel"),Ict.forEach(t),xFo=r(j8e," (BlenderbotSmall model)"),j8e.forEach(t),$Fo=i(x),zu=n(x,"LI",{});var D8e=s(zu);Cde=n(D8e,"STRONG",{});var Nct=s(Cde);kFo=r(Nct,"bloom"),Nct.forEach(t),SFo=r(D8e," \u2014 "),Sq=n(D8e,"A",{href:!0});var qct=s(Sq);RFo=r(qct,"BloomModel"),qct.forEach(t),PFo=r(D8e," (BLOOM model)"),D8e.forEach(t),BFo=i(x),Qu=n(x,"LI",{});var G8e=s(Qu);wde=n(G8e,"STRONG",{});var jct=s(wde);IFo=r(jct,"camembert"),jct.forEach(t),NFo=r(G8e," \u2014 "),Rq=n(G8e,"A",{href:!0});var Dct=s(Rq);qFo=r(Dct,"CamembertModel"),Dct.forEach(t),jFo=r(G8e," (CamemBERT model)"),G8e.forEach(t),DFo=i(x),Wu=n(x,"LI",{});var O8e=s(Wu);Ade=n(O8e,"STRONG",{});var Gct=s(Ade);GFo=r(Gct,"canine"),Gct.forEach(t),OFo=r(O8e," \u2014 "),Pq=n(O8e,"A",{href:!0});var Oct=s(Pq);VFo=r(Oct,"CanineModel"),Oct.forEach(t),XFo=r(O8e," (CANINE model)"),O8e.forEach(t),zFo=i(x),Hu=n(x,"LI",{});var V8e=s(Hu);Lde=n(V8e,"STRONG",{});var Vct=s(Lde);QFo=r(Vct,"clip"),Vct.forEach(t),WFo=r(V8e," \u2014 "),Bq=n(V8e,"A",{href:!0});var Xct=s(Bq);HFo=r(Xct,"CLIPModel"),Xct.forEach(t),UFo=r(V8e," (CLIP model)"),V8e.forEach(t),JFo=i(x),Uu=n(x,"LI",{});var X8e=s(Uu);yde=n(X8e,"STRONG",{});var zct=s(yde);YFo=r(zct,"codegen"),zct.forEach(t),KFo=r(X8e," \u2014 "),Iq=n(X8e,"A",{href:!0});var Qct=s(Iq);ZFo=r(Qct,"CodeGenModel"),Qct.forEach(t),eTo=r(X8e," (CodeGen model)"),X8e.forEach(t),oTo=i(x),Ju=n(x,"LI",{});var z8e=s(Ju);xde=n(z8e,"STRONG",{});var Wct=s(xde);rTo=r(Wct,"convbert"),Wct.forEach(t),tTo=r(z8e," \u2014 "),Nq=n(z8e,"A",{href:!0});var Hct=s(Nq);aTo=r(Hct,"ConvBertModel"),Hct.forEach(t),nTo=r(z8e," (ConvBERT model)"),z8e.forEach(t),sTo=i(x),Yu=n(x,"LI",{});var Q8e=s(Yu);$de=n(Q8e,"STRONG",{});var Uct=s($de);lTo=r(Uct,"convnext"),Uct.forEach(t),iTo=r(Q8e," \u2014 "),qq=n(Q8e,"A",{href:!0});var Jct=s(qq);dTo=r(Jct,"ConvNextModel"),Jct.forEach(t),cTo=r(Q8e," (ConvNeXT model)"),Q8e.forEach(t),mTo=i(x),Ku=n(x,"LI",{});var W8e=s(Ku);kde=n(W8e,"STRONG",{});var Yct=s(kde);fTo=r(Yct,"ctrl"),Yct.forEach(t),gTo=r(W8e," \u2014 "),jq=n(W8e,"A",{href:!0});var Kct=s(jq);hTo=r(Kct,"CTRLModel"),Kct.forEach(t),uTo=r(W8e," (CTRL model)"),W8e.forEach(t),pTo=i(x),Zu=n(x,"LI",{});var H8e=s(Zu);Sde=n(H8e,"STRONG",{});var Zct=s(Sde);_To=r(Zct,"cvt"),Zct.forEach(t),bTo=r(H8e," \u2014 "),Dq=n(H8e,"A",{href:!0});var emt=s(Dq);vTo=r(emt,"CvtModel"),emt.forEach(t),FTo=r(H8e," (CvT model)"),H8e.forEach(t),TTo=i(x),ep=n(x,"LI",{});var U8e=s(ep);Rde=n(U8e,"STRONG",{});var omt=s(Rde);MTo=r(omt,"data2vec-audio"),omt.forEach(t),ETo=r(U8e," \u2014 "),Gq=n(U8e,"A",{href:!0});var rmt=s(Gq);CTo=r(rmt,"Data2VecAudioModel"),rmt.forEach(t),wTo=r(U8e," (Data2VecAudio model)"),U8e.forEach(t),ATo=i(x),op=n(x,"LI",{});var J8e=s(op);Pde=n(J8e,"STRONG",{});var tmt=s(Pde);LTo=r(tmt,"data2vec-text"),tmt.forEach(t),yTo=r(J8e," \u2014 "),Oq=n(J8e,"A",{href:!0});var amt=s(Oq);xTo=r(amt,"Data2VecTextModel"),amt.forEach(t),$To=r(J8e," (Data2VecText model)"),J8e.forEach(t),kTo=i(x),rp=n(x,"LI",{});var Y8e=s(rp);Bde=n(Y8e,"STRONG",{});var nmt=s(Bde);STo=r(nmt,"data2vec-vision"),nmt.forEach(t),RTo=r(Y8e," \u2014 "),Vq=n(Y8e,"A",{href:!0});var smt=s(Vq);PTo=r(smt,"Data2VecVisionModel"),smt.forEach(t),BTo=r(Y8e," (Data2VecVision model)"),Y8e.forEach(t),ITo=i(x),tp=n(x,"LI",{});var K8e=s(tp);Ide=n(K8e,"STRONG",{});var lmt=s(Ide);NTo=r(lmt,"deberta"),lmt.forEach(t),qTo=r(K8e," \u2014 "),Xq=n(K8e,"A",{href:!0});var imt=s(Xq);jTo=r(imt,"DebertaModel"),imt.forEach(t),DTo=r(K8e," (DeBERTa model)"),K8e.forEach(t),GTo=i(x),ap=n(x,"LI",{});var Z8e=s(ap);Nde=n(Z8e,"STRONG",{});var dmt=s(Nde);OTo=r(dmt,"deberta-v2"),dmt.forEach(t),VTo=r(Z8e," \u2014 "),zq=n(Z8e,"A",{href:!0});var cmt=s(zq);XTo=r(cmt,"DebertaV2Model"),cmt.forEach(t),zTo=r(Z8e," (DeBERTa-v2 model)"),Z8e.forEach(t),QTo=i(x),np=n(x,"LI",{});var e9e=s(np);qde=n(e9e,"STRONG",{});var mmt=s(qde);WTo=r(mmt,"decision_transformer"),mmt.forEach(t),HTo=r(e9e," \u2014 "),Qq=n(e9e,"A",{href:!0});var fmt=s(Qq);UTo=r(fmt,"DecisionTransformerModel"),fmt.forEach(t),JTo=r(e9e," (Decision Transformer model)"),e9e.forEach(t),YTo=i(x),sp=n(x,"LI",{});var o9e=s(sp);jde=n(o9e,"STRONG",{});var gmt=s(jde);KTo=r(gmt,"deit"),gmt.forEach(t),ZTo=r(o9e," \u2014 "),Wq=n(o9e,"A",{href:!0});var hmt=s(Wq);eMo=r(hmt,"DeiTModel"),hmt.forEach(t),oMo=r(o9e," (DeiT model)"),o9e.forEach(t),rMo=i(x),lp=n(x,"LI",{});var r9e=s(lp);Dde=n(r9e,"STRONG",{});var umt=s(Dde);tMo=r(umt,"detr"),umt.forEach(t),aMo=r(r9e," \u2014 "),Hq=n(r9e,"A",{href:!0});var pmt=s(Hq);nMo=r(pmt,"DetrModel"),pmt.forEach(t),sMo=r(r9e," (DETR model)"),r9e.forEach(t),lMo=i(x),ip=n(x,"LI",{});var t9e=s(ip);Gde=n(t9e,"STRONG",{});var _mt=s(Gde);iMo=r(_mt,"distilbert"),_mt.forEach(t),dMo=r(t9e," \u2014 "),Uq=n(t9e,"A",{href:!0});var bmt=s(Uq);cMo=r(bmt,"DistilBertModel"),bmt.forEach(t),mMo=r(t9e," (DistilBERT model)"),t9e.forEach(t),fMo=i(x),dp=n(x,"LI",{});var a9e=s(dp);Ode=n(a9e,"STRONG",{});var vmt=s(Ode);gMo=r(vmt,"dpr"),vmt.forEach(t),hMo=r(a9e," \u2014 "),Jq=n(a9e,"A",{href:!0});var Fmt=s(Jq);uMo=r(Fmt,"DPRQuestionEncoder"),Fmt.forEach(t),pMo=r(a9e," (DPR model)"),a9e.forEach(t),_Mo=i(x),cp=n(x,"LI",{});var n9e=s(cp);Vde=n(n9e,"STRONG",{});var Tmt=s(Vde);bMo=r(Tmt,"dpt"),Tmt.forEach(t),vMo=r(n9e," \u2014 "),Yq=n(n9e,"A",{href:!0});var Mmt=s(Yq);FMo=r(Mmt,"DPTModel"),Mmt.forEach(t),TMo=r(n9e," (DPT model)"),n9e.forEach(t),MMo=i(x),mp=n(x,"LI",{});var s9e=s(mp);Xde=n(s9e,"STRONG",{});var Emt=s(Xde);EMo=r(Emt,"electra"),Emt.forEach(t),CMo=r(s9e," \u2014 "),Kq=n(s9e,"A",{href:!0});var Cmt=s(Kq);wMo=r(Cmt,"ElectraModel"),Cmt.forEach(t),AMo=r(s9e," (ELECTRA model)"),s9e.forEach(t),LMo=i(x),fp=n(x,"LI",{});var l9e=s(fp);zde=n(l9e,"STRONG",{});var wmt=s(zde);yMo=r(wmt,"flaubert"),wmt.forEach(t),xMo=r(l9e," \u2014 "),Zq=n(l9e,"A",{href:!0});var Amt=s(Zq);$Mo=r(Amt,"FlaubertModel"),Amt.forEach(t),kMo=r(l9e," (FlauBERT model)"),l9e.forEach(t),SMo=i(x),gp=n(x,"LI",{});var i9e=s(gp);Qde=n(i9e,"STRONG",{});var Lmt=s(Qde);RMo=r(Lmt,"flava"),Lmt.forEach(t),PMo=r(i9e," \u2014 "),ej=n(i9e,"A",{href:!0});var ymt=s(ej);BMo=r(ymt,"FlavaModel"),ymt.forEach(t),IMo=r(i9e," (FLAVA model)"),i9e.forEach(t),NMo=i(x),hp=n(x,"LI",{});var d9e=s(hp);Wde=n(d9e,"STRONG",{});var xmt=s(Wde);qMo=r(xmt,"fnet"),xmt.forEach(t),jMo=r(d9e," \u2014 "),oj=n(d9e,"A",{href:!0});var $mt=s(oj);DMo=r($mt,"FNetModel"),$mt.forEach(t),GMo=r(d9e," (FNet model)"),d9e.forEach(t),OMo=i(x),up=n(x,"LI",{});var c9e=s(up);Hde=n(c9e,"STRONG",{});var kmt=s(Hde);VMo=r(kmt,"fsmt"),kmt.forEach(t),XMo=r(c9e," \u2014 "),rj=n(c9e,"A",{href:!0});var Smt=s(rj);zMo=r(Smt,"FSMTModel"),Smt.forEach(t),QMo=r(c9e," (FairSeq Machine-Translation model)"),c9e.forEach(t),WMo=i(x),zs=n(x,"LI",{});var dS=s(zs);Ude=n(dS,"STRONG",{});var Rmt=s(Ude);HMo=r(Rmt,"funnel"),Rmt.forEach(t),UMo=r(dS," \u2014 "),tj=n(dS,"A",{href:!0});var Pmt=s(tj);JMo=r(Pmt,"FunnelModel"),Pmt.forEach(t),YMo=r(dS," or "),aj=n(dS,"A",{href:!0});var Bmt=s(aj);KMo=r(Bmt,"FunnelBaseModel"),Bmt.forEach(t),ZMo=r(dS," (Funnel Transformer model)"),dS.forEach(t),eEo=i(x),pp=n(x,"LI",{});var m9e=s(pp);Jde=n(m9e,"STRONG",{});var Imt=s(Jde);oEo=r(Imt,"glpn"),Imt.forEach(t),rEo=r(m9e," \u2014 "),nj=n(m9e,"A",{href:!0});var Nmt=s(nj);tEo=r(Nmt,"GLPNModel"),Nmt.forEach(t),aEo=r(m9e," (GLPN model)"),m9e.forEach(t),nEo=i(x),_p=n(x,"LI",{});var f9e=s(_p);Yde=n(f9e,"STRONG",{});var qmt=s(Yde);sEo=r(qmt,"gpt2"),qmt.forEach(t),lEo=r(f9e," \u2014 "),sj=n(f9e,"A",{href:!0});var jmt=s(sj);iEo=r(jmt,"GPT2Model"),jmt.forEach(t),dEo=r(f9e," (OpenAI GPT-2 model)"),f9e.forEach(t),cEo=i(x),bp=n(x,"LI",{});var g9e=s(bp);Kde=n(g9e,"STRONG",{});var Dmt=s(Kde);mEo=r(Dmt,"gpt_neo"),Dmt.forEach(t),fEo=r(g9e," \u2014 "),lj=n(g9e,"A",{href:!0});var Gmt=s(lj);gEo=r(Gmt,"GPTNeoModel"),Gmt.forEach(t),hEo=r(g9e," (GPT Neo model)"),g9e.forEach(t),uEo=i(x),vp=n(x,"LI",{});var h9e=s(vp);Zde=n(h9e,"STRONG",{});var Omt=s(Zde);pEo=r(Omt,"gpt_neox"),Omt.forEach(t),_Eo=r(h9e," \u2014 "),ij=n(h9e,"A",{href:!0});var Vmt=s(ij);bEo=r(Vmt,"GPTNeoXModel"),Vmt.forEach(t),vEo=r(h9e," (GPT NeoX model)"),h9e.forEach(t),FEo=i(x),Fp=n(x,"LI",{});var u9e=s(Fp);ece=n(u9e,"STRONG",{});var Xmt=s(ece);TEo=r(Xmt,"gptj"),Xmt.forEach(t),MEo=r(u9e," \u2014 "),dj=n(u9e,"A",{href:!0});var zmt=s(dj);EEo=r(zmt,"GPTJModel"),zmt.forEach(t),CEo=r(u9e," (GPT-J model)"),u9e.forEach(t),wEo=i(x),Tp=n(x,"LI",{});var p9e=s(Tp);oce=n(p9e,"STRONG",{});var Qmt=s(oce);AEo=r(Qmt,"groupvit"),Qmt.forEach(t),LEo=r(p9e," \u2014 "),cj=n(p9e,"A",{href:!0});var Wmt=s(cj);yEo=r(Wmt,"GroupViTModel"),Wmt.forEach(t),xEo=r(p9e," (GroupViT model)"),p9e.forEach(t),$Eo=i(x),Mp=n(x,"LI",{});var _9e=s(Mp);rce=n(_9e,"STRONG",{});var Hmt=s(rce);kEo=r(Hmt,"hubert"),Hmt.forEach(t),SEo=r(_9e," \u2014 "),mj=n(_9e,"A",{href:!0});var Umt=s(mj);REo=r(Umt,"HubertModel"),Umt.forEach(t),PEo=r(_9e," (Hubert model)"),_9e.forEach(t),BEo=i(x),Ep=n(x,"LI",{});var b9e=s(Ep);tce=n(b9e,"STRONG",{});var Jmt=s(tce);IEo=r(Jmt,"ibert"),Jmt.forEach(t),NEo=r(b9e," \u2014 "),fj=n(b9e,"A",{href:!0});var Ymt=s(fj);qEo=r(Ymt,"IBertModel"),Ymt.forEach(t),jEo=r(b9e," (I-BERT model)"),b9e.forEach(t),DEo=i(x),Cp=n(x,"LI",{});var v9e=s(Cp);ace=n(v9e,"STRONG",{});var Kmt=s(ace);GEo=r(Kmt,"imagegpt"),Kmt.forEach(t),OEo=r(v9e," \u2014 "),gj=n(v9e,"A",{href:!0});var Zmt=s(gj);VEo=r(Zmt,"ImageGPTModel"),Zmt.forEach(t),XEo=r(v9e," (ImageGPT model)"),v9e.forEach(t),zEo=i(x),wp=n(x,"LI",{});var F9e=s(wp);nce=n(F9e,"STRONG",{});var eft=s(nce);QEo=r(eft,"layoutlm"),eft.forEach(t),WEo=r(F9e," \u2014 "),hj=n(F9e,"A",{href:!0});var oft=s(hj);HEo=r(oft,"LayoutLMModel"),oft.forEach(t),UEo=r(F9e," (LayoutLM model)"),F9e.forEach(t),JEo=i(x),Ap=n(x,"LI",{});var T9e=s(Ap);sce=n(T9e,"STRONG",{});var rft=s(sce);YEo=r(rft,"layoutlmv2"),rft.forEach(t),KEo=r(T9e," \u2014 "),uj=n(T9e,"A",{href:!0});var tft=s(uj);ZEo=r(tft,"LayoutLMv2Model"),tft.forEach(t),e4o=r(T9e," (LayoutLMv2 model)"),T9e.forEach(t),o4o=i(x),Lp=n(x,"LI",{});var M9e=s(Lp);lce=n(M9e,"STRONG",{});var aft=s(lce);r4o=r(aft,"layoutlmv3"),aft.forEach(t),t4o=r(M9e," \u2014 "),pj=n(M9e,"A",{href:!0});var nft=s(pj);a4o=r(nft,"LayoutLMv3Model"),nft.forEach(t),n4o=r(M9e," (LayoutLMv3 model)"),M9e.forEach(t),s4o=i(x),yp=n(x,"LI",{});var E9e=s(yp);ice=n(E9e,"STRONG",{});var sft=s(ice);l4o=r(sft,"led"),sft.forEach(t),i4o=r(E9e," \u2014 "),_j=n(E9e,"A",{href:!0});var lft=s(_j);d4o=r(lft,"LEDModel"),lft.forEach(t),c4o=r(E9e," (LED model)"),E9e.forEach(t),m4o=i(x),xp=n(x,"LI",{});var C9e=s(xp);dce=n(C9e,"STRONG",{});var ift=s(dce);f4o=r(ift,"levit"),ift.forEach(t),g4o=r(C9e," \u2014 "),bj=n(C9e,"A",{href:!0});var dft=s(bj);h4o=r(dft,"LevitModel"),dft.forEach(t),u4o=r(C9e," (LeViT model)"),C9e.forEach(t),p4o=i(x),$p=n(x,"LI",{});var w9e=s($p);cce=n(w9e,"STRONG",{});var cft=s(cce);_4o=r(cft,"longformer"),cft.forEach(t),b4o=r(w9e," \u2014 "),vj=n(w9e,"A",{href:!0});var mft=s(vj);v4o=r(mft,"LongformerModel"),mft.forEach(t),F4o=r(w9e," (Longformer model)"),w9e.forEach(t),T4o=i(x),kp=n(x,"LI",{});var A9e=s(kp);mce=n(A9e,"STRONG",{});var fft=s(mce);M4o=r(fft,"longt5"),fft.forEach(t),E4o=r(A9e," \u2014 "),Fj=n(A9e,"A",{href:!0});var gft=s(Fj);C4o=r(gft,"LongT5Model"),gft.forEach(t),w4o=r(A9e," (LongT5 model)"),A9e.forEach(t),A4o=i(x),Sp=n(x,"LI",{});var L9e=s(Sp);fce=n(L9e,"STRONG",{});var hft=s(fce);L4o=r(hft,"luke"),hft.forEach(t),y4o=r(L9e," \u2014 "),Tj=n(L9e,"A",{href:!0});var uft=s(Tj);x4o=r(uft,"LukeModel"),uft.forEach(t),$4o=r(L9e," (LUKE model)"),L9e.forEach(t),k4o=i(x),Rp=n(x,"LI",{});var y9e=s(Rp);gce=n(y9e,"STRONG",{});var pft=s(gce);S4o=r(pft,"lxmert"),pft.forEach(t),R4o=r(y9e," \u2014 "),Mj=n(y9e,"A",{href:!0});var _ft=s(Mj);P4o=r(_ft,"LxmertModel"),_ft.forEach(t),B4o=r(y9e," (LXMERT model)"),y9e.forEach(t),I4o=i(x),Pp=n(x,"LI",{});var x9e=s(Pp);hce=n(x9e,"STRONG",{});var bft=s(hce);N4o=r(bft,"m2m_100"),bft.forEach(t),q4o=r(x9e," \u2014 "),Ej=n(x9e,"A",{href:!0});var vft=s(Ej);j4o=r(vft,"M2M100Model"),vft.forEach(t),D4o=r(x9e," (M2M100 model)"),x9e.forEach(t),G4o=i(x),Bp=n(x,"LI",{});var $9e=s(Bp);uce=n($9e,"STRONG",{});var Fft=s(uce);O4o=r(Fft,"marian"),Fft.forEach(t),V4o=r($9e," \u2014 "),Cj=n($9e,"A",{href:!0});var Tft=s(Cj);X4o=r(Tft,"MarianModel"),Tft.forEach(t),z4o=r($9e," (Marian model)"),$9e.forEach(t),Q4o=i(x),Ip=n(x,"LI",{});var k9e=s(Ip);pce=n(k9e,"STRONG",{});var Mft=s(pce);W4o=r(Mft,"maskformer"),Mft.forEach(t),H4o=r(k9e," \u2014 "),wj=n(k9e,"A",{href:!0});var Eft=s(wj);U4o=r(Eft,"MaskFormerModel"),Eft.forEach(t),J4o=r(k9e," (MaskFormer model)"),k9e.forEach(t),Y4o=i(x),Np=n(x,"LI",{});var S9e=s(Np);_ce=n(S9e,"STRONG",{});var Cft=s(_ce);K4o=r(Cft,"mbart"),Cft.forEach(t),Z4o=r(S9e," \u2014 "),Aj=n(S9e,"A",{href:!0});var wft=s(Aj);eCo=r(wft,"MBartModel"),wft.forEach(t),oCo=r(S9e," (mBART model)"),S9e.forEach(t),rCo=i(x),qp=n(x,"LI",{});var R9e=s(qp);bce=n(R9e,"STRONG",{});var Aft=s(bce);tCo=r(Aft,"mctct"),Aft.forEach(t),aCo=r(R9e," \u2014 "),Lj=n(R9e,"A",{href:!0});var Lft=s(Lj);nCo=r(Lft,"MCTCTModel"),Lft.forEach(t),sCo=r(R9e," (M-CTC-T model)"),R9e.forEach(t),lCo=i(x),jp=n(x,"LI",{});var P9e=s(jp);vce=n(P9e,"STRONG",{});var yft=s(vce);iCo=r(yft,"megatron-bert"),yft.forEach(t),dCo=r(P9e," \u2014 "),yj=n(P9e,"A",{href:!0});var xft=s(yj);cCo=r(xft,"MegatronBertModel"),xft.forEach(t),mCo=r(P9e," (Megatron-BERT model)"),P9e.forEach(t),fCo=i(x),Dp=n(x,"LI",{});var B9e=s(Dp);Fce=n(B9e,"STRONG",{});var $ft=s(Fce);gCo=r($ft,"mobilebert"),$ft.forEach(t),hCo=r(B9e," \u2014 "),xj=n(B9e,"A",{href:!0});var kft=s(xj);uCo=r(kft,"MobileBertModel"),kft.forEach(t),pCo=r(B9e," (MobileBERT model)"),B9e.forEach(t),_Co=i(x),Gp=n(x,"LI",{});var I9e=s(Gp);Tce=n(I9e,"STRONG",{});var Sft=s(Tce);bCo=r(Sft,"mpnet"),Sft.forEach(t),vCo=r(I9e," \u2014 "),$j=n(I9e,"A",{href:!0});var Rft=s($j);FCo=r(Rft,"MPNetModel"),Rft.forEach(t),TCo=r(I9e," (MPNet model)"),I9e.forEach(t),MCo=i(x),Op=n(x,"LI",{});var N9e=s(Op);Mce=n(N9e,"STRONG",{});var Pft=s(Mce);ECo=r(Pft,"mt5"),Pft.forEach(t),CCo=r(N9e," \u2014 "),kj=n(N9e,"A",{href:!0});var Bft=s(kj);wCo=r(Bft,"MT5Model"),Bft.forEach(t),ACo=r(N9e," (MT5 model)"),N9e.forEach(t),LCo=i(x),Vp=n(x,"LI",{});var q9e=s(Vp);Ece=n(q9e,"STRONG",{});var Ift=s(Ece);yCo=r(Ift,"nezha"),Ift.forEach(t),xCo=r(q9e," \u2014 "),Sj=n(q9e,"A",{href:!0});var Nft=s(Sj);$Co=r(Nft,"NezhaModel"),Nft.forEach(t),kCo=r(q9e," (Nezha model)"),q9e.forEach(t),SCo=i(x),Xp=n(x,"LI",{});var j9e=s(Xp);Cce=n(j9e,"STRONG",{});var qft=s(Cce);RCo=r(qft,"nystromformer"),qft.forEach(t),PCo=r(j9e," \u2014 "),Rj=n(j9e,"A",{href:!0});var jft=s(Rj);BCo=r(jft,"NystromformerModel"),jft.forEach(t),ICo=r(j9e," (Nystr\xF6mformer model)"),j9e.forEach(t),NCo=i(x),zp=n(x,"LI",{});var D9e=s(zp);wce=n(D9e,"STRONG",{});var Dft=s(wce);qCo=r(Dft,"openai-gpt"),Dft.forEach(t),jCo=r(D9e," \u2014 "),Pj=n(D9e,"A",{href:!0});var Gft=s(Pj);DCo=r(Gft,"OpenAIGPTModel"),Gft.forEach(t),GCo=r(D9e," (OpenAI GPT model)"),D9e.forEach(t),OCo=i(x),Qp=n(x,"LI",{});var G9e=s(Qp);Ace=n(G9e,"STRONG",{});var Oft=s(Ace);VCo=r(Oft,"opt"),Oft.forEach(t),XCo=r(G9e," \u2014 "),Bj=n(G9e,"A",{href:!0});var Vft=s(Bj);zCo=r(Vft,"OPTModel"),Vft.forEach(t),QCo=r(G9e," (OPT model)"),G9e.forEach(t),WCo=i(x),Wp=n(x,"LI",{});var O9e=s(Wp);Lce=n(O9e,"STRONG",{});var Xft=s(Lce);HCo=r(Xft,"pegasus"),Xft.forEach(t),UCo=r(O9e," \u2014 "),Ij=n(O9e,"A",{href:!0});var zft=s(Ij);JCo=r(zft,"PegasusModel"),zft.forEach(t),YCo=r(O9e," (Pegasus model)"),O9e.forEach(t),KCo=i(x),Hp=n(x,"LI",{});var V9e=s(Hp);yce=n(V9e,"STRONG",{});var Qft=s(yce);ZCo=r(Qft,"perceiver"),Qft.forEach(t),e5o=r(V9e," \u2014 "),Nj=n(V9e,"A",{href:!0});var Wft=s(Nj);o5o=r(Wft,"PerceiverModel"),Wft.forEach(t),r5o=r(V9e," (Perceiver model)"),V9e.forEach(t),t5o=i(x),Up=n(x,"LI",{});var X9e=s(Up);xce=n(X9e,"STRONG",{});var Hft=s(xce);a5o=r(Hft,"plbart"),Hft.forEach(t),n5o=r(X9e," \u2014 "),qj=n(X9e,"A",{href:!0});var Uft=s(qj);s5o=r(Uft,"PLBartModel"),Uft.forEach(t),l5o=r(X9e," (PLBart model)"),X9e.forEach(t),i5o=i(x),Jp=n(x,"LI",{});var z9e=s(Jp);$ce=n(z9e,"STRONG",{});var Jft=s($ce);d5o=r(Jft,"poolformer"),Jft.forEach(t),c5o=r(z9e," \u2014 "),jj=n(z9e,"A",{href:!0});var Yft=s(jj);m5o=r(Yft,"PoolFormerModel"),Yft.forEach(t),f5o=r(z9e," (PoolFormer model)"),z9e.forEach(t),g5o=i(x),Yp=n(x,"LI",{});var Q9e=s(Yp);kce=n(Q9e,"STRONG",{});var Kft=s(kce);h5o=r(Kft,"prophetnet"),Kft.forEach(t),u5o=r(Q9e," \u2014 "),Dj=n(Q9e,"A",{href:!0});var Zft=s(Dj);p5o=r(Zft,"ProphetNetModel"),Zft.forEach(t),_5o=r(Q9e," (ProphetNet model)"),Q9e.forEach(t),b5o=i(x),Kp=n(x,"LI",{});var W9e=s(Kp);Sce=n(W9e,"STRONG",{});var egt=s(Sce);v5o=r(egt,"qdqbert"),egt.forEach(t),F5o=r(W9e," \u2014 "),Gj=n(W9e,"A",{href:!0});var ogt=s(Gj);T5o=r(ogt,"QDQBertModel"),ogt.forEach(t),M5o=r(W9e," (QDQBert model)"),W9e.forEach(t),E5o=i(x),Zp=n(x,"LI",{});var H9e=s(Zp);Rce=n(H9e,"STRONG",{});var rgt=s(Rce);C5o=r(rgt,"reformer"),rgt.forEach(t),w5o=r(H9e," \u2014 "),Oj=n(H9e,"A",{href:!0});var tgt=s(Oj);A5o=r(tgt,"ReformerModel"),tgt.forEach(t),L5o=r(H9e," (Reformer model)"),H9e.forEach(t),y5o=i(x),e_=n(x,"LI",{});var U9e=s(e_);Pce=n(U9e,"STRONG",{});var agt=s(Pce);x5o=r(agt,"regnet"),agt.forEach(t),$5o=r(U9e," \u2014 "),Vj=n(U9e,"A",{href:!0});var ngt=s(Vj);k5o=r(ngt,"RegNetModel"),ngt.forEach(t),S5o=r(U9e," (RegNet model)"),U9e.forEach(t),R5o=i(x),o_=n(x,"LI",{});var J9e=s(o_);Bce=n(J9e,"STRONG",{});var sgt=s(Bce);P5o=r(sgt,"rembert"),sgt.forEach(t),B5o=r(J9e," \u2014 "),Xj=n(J9e,"A",{href:!0});var lgt=s(Xj);I5o=r(lgt,"RemBertModel"),lgt.forEach(t),N5o=r(J9e," (RemBERT model)"),J9e.forEach(t),q5o=i(x),r_=n(x,"LI",{});var Y9e=s(r_);Ice=n(Y9e,"STRONG",{});var igt=s(Ice);j5o=r(igt,"resnet"),igt.forEach(t),D5o=r(Y9e," \u2014 "),zj=n(Y9e,"A",{href:!0});var dgt=s(zj);G5o=r(dgt,"ResNetModel"),dgt.forEach(t),O5o=r(Y9e," (ResNet model)"),Y9e.forEach(t),V5o=i(x),t_=n(x,"LI",{});var K9e=s(t_);Nce=n(K9e,"STRONG",{});var cgt=s(Nce);X5o=r(cgt,"retribert"),cgt.forEach(t),z5o=r(K9e," \u2014 "),Qj=n(K9e,"A",{href:!0});var mgt=s(Qj);Q5o=r(mgt,"RetriBertModel"),mgt.forEach(t),W5o=r(K9e," (RetriBERT model)"),K9e.forEach(t),H5o=i(x),a_=n(x,"LI",{});var Z9e=s(a_);qce=n(Z9e,"STRONG",{});var fgt=s(qce);U5o=r(fgt,"roberta"),fgt.forEach(t),J5o=r(Z9e," \u2014 "),Wj=n(Z9e,"A",{href:!0});var ggt=s(Wj);Y5o=r(ggt,"RobertaModel"),ggt.forEach(t),K5o=r(Z9e," (RoBERTa model)"),Z9e.forEach(t),Z5o=i(x),n_=n(x,"LI",{});var exe=s(n_);jce=n(exe,"STRONG",{});var hgt=s(jce);e3o=r(hgt,"roformer"),hgt.forEach(t),o3o=r(exe," \u2014 "),Hj=n(exe,"A",{href:!0});var ugt=s(Hj);r3o=r(ugt,"RoFormerModel"),ugt.forEach(t),t3o=r(exe," (RoFormer model)"),exe.forEach(t),a3o=i(x),s_=n(x,"LI",{});var oxe=s(s_);Dce=n(oxe,"STRONG",{});var pgt=s(Dce);n3o=r(pgt,"segformer"),pgt.forEach(t),s3o=r(oxe," \u2014 "),Uj=n(oxe,"A",{href:!0});var _gt=s(Uj);l3o=r(_gt,"SegformerModel"),_gt.forEach(t),i3o=r(oxe," (SegFormer model)"),oxe.forEach(t),d3o=i(x),l_=n(x,"LI",{});var rxe=s(l_);Gce=n(rxe,"STRONG",{});var bgt=s(Gce);c3o=r(bgt,"sew"),bgt.forEach(t),m3o=r(rxe," \u2014 "),Jj=n(rxe,"A",{href:!0});var vgt=s(Jj);f3o=r(vgt,"SEWModel"),vgt.forEach(t),g3o=r(rxe," (SEW model)"),rxe.forEach(t),h3o=i(x),i_=n(x,"LI",{});var txe=s(i_);Oce=n(txe,"STRONG",{});var Fgt=s(Oce);u3o=r(Fgt,"sew-d"),Fgt.forEach(t),p3o=r(txe," \u2014 "),Yj=n(txe,"A",{href:!0});var Tgt=s(Yj);_3o=r(Tgt,"SEWDModel"),Tgt.forEach(t),b3o=r(txe," (SEW-D model)"),txe.forEach(t),v3o=i(x),d_=n(x,"LI",{});var axe=s(d_);Vce=n(axe,"STRONG",{});var Mgt=s(Vce);F3o=r(Mgt,"speech_to_text"),Mgt.forEach(t),T3o=r(axe," \u2014 "),Kj=n(axe,"A",{href:!0});var Egt=s(Kj);M3o=r(Egt,"Speech2TextModel"),Egt.forEach(t),E3o=r(axe," (Speech2Text model)"),axe.forEach(t),C3o=i(x),c_=n(x,"LI",{});var nxe=s(c_);Xce=n(nxe,"STRONG",{});var Cgt=s(Xce);w3o=r(Cgt,"splinter"),Cgt.forEach(t),A3o=r(nxe," \u2014 "),Zj=n(nxe,"A",{href:!0});var wgt=s(Zj);L3o=r(wgt,"SplinterModel"),wgt.forEach(t),y3o=r(nxe," (Splinter model)"),nxe.forEach(t),x3o=i(x),m_=n(x,"LI",{});var sxe=s(m_);zce=n(sxe,"STRONG",{});var Agt=s(zce);$3o=r(Agt,"squeezebert"),Agt.forEach(t),k3o=r(sxe," \u2014 "),eD=n(sxe,"A",{href:!0});var Lgt=s(eD);S3o=r(Lgt,"SqueezeBertModel"),Lgt.forEach(t),R3o=r(sxe," (SqueezeBERT model)"),sxe.forEach(t),P3o=i(x),f_=n(x,"LI",{});var lxe=s(f_);Qce=n(lxe,"STRONG",{});var ygt=s(Qce);B3o=r(ygt,"swin"),ygt.forEach(t),I3o=r(lxe," \u2014 "),oD=n(lxe,"A",{href:!0});var xgt=s(oD);N3o=r(xgt,"SwinModel"),xgt.forEach(t),q3o=r(lxe," (Swin Transformer model)"),lxe.forEach(t),j3o=i(x),g_=n(x,"LI",{});var ixe=s(g_);Wce=n(ixe,"STRONG",{});var $gt=s(Wce);D3o=r($gt,"t5"),$gt.forEach(t),G3o=r(ixe," \u2014 "),rD=n(ixe,"A",{href:!0});var kgt=s(rD);O3o=r(kgt,"T5Model"),kgt.forEach(t),V3o=r(ixe," (T5 model)"),ixe.forEach(t),X3o=i(x),h_=n(x,"LI",{});var dxe=s(h_);Hce=n(dxe,"STRONG",{});var Sgt=s(Hce);z3o=r(Sgt,"tapas"),Sgt.forEach(t),Q3o=r(dxe," \u2014 "),tD=n(dxe,"A",{href:!0});var Rgt=s(tD);W3o=r(Rgt,"TapasModel"),Rgt.forEach(t),H3o=r(dxe," (TAPAS model)"),dxe.forEach(t),U3o=i(x),u_=n(x,"LI",{});var cxe=s(u_);Uce=n(cxe,"STRONG",{});var Pgt=s(Uce);J3o=r(Pgt,"trajectory_transformer"),Pgt.forEach(t),Y3o=r(cxe," \u2014 "),aD=n(cxe,"A",{href:!0});var Bgt=s(aD);K3o=r(Bgt,"TrajectoryTransformerModel"),Bgt.forEach(t),Z3o=r(cxe," (Trajectory Transformer model)"),cxe.forEach(t),e0o=i(x),p_=n(x,"LI",{});var mxe=s(p_);Jce=n(mxe,"STRONG",{});var Igt=s(Jce);o0o=r(Igt,"transfo-xl"),Igt.forEach(t),r0o=r(mxe," \u2014 "),nD=n(mxe,"A",{href:!0});var Ngt=s(nD);t0o=r(Ngt,"TransfoXLModel"),Ngt.forEach(t),a0o=r(mxe," (Transformer-XL model)"),mxe.forEach(t),n0o=i(x),__=n(x,"LI",{});var fxe=s(__);Yce=n(fxe,"STRONG",{});var qgt=s(Yce);s0o=r(qgt,"unispeech"),qgt.forEach(t),l0o=r(fxe," \u2014 "),sD=n(fxe,"A",{href:!0});var jgt=s(sD);i0o=r(jgt,"UniSpeechModel"),jgt.forEach(t),d0o=r(fxe," (UniSpeech model)"),fxe.forEach(t),c0o=i(x),b_=n(x,"LI",{});var gxe=s(b_);Kce=n(gxe,"STRONG",{});var Dgt=s(Kce);m0o=r(Dgt,"unispeech-sat"),Dgt.forEach(t),f0o=r(gxe," \u2014 "),lD=n(gxe,"A",{href:!0});var Ggt=s(lD);g0o=r(Ggt,"UniSpeechSatModel"),Ggt.forEach(t),h0o=r(gxe," (UniSpeechSat model)"),gxe.forEach(t),u0o=i(x),v_=n(x,"LI",{});var hxe=s(v_);Zce=n(hxe,"STRONG",{});var Ogt=s(Zce);p0o=r(Ogt,"van"),Ogt.forEach(t),_0o=r(hxe," \u2014 "),iD=n(hxe,"A",{href:!0});var Vgt=s(iD);b0o=r(Vgt,"VanModel"),Vgt.forEach(t),v0o=r(hxe," (VAN model)"),hxe.forEach(t),F0o=i(x),F_=n(x,"LI",{});var uxe=s(F_);eme=n(uxe,"STRONG",{});var Xgt=s(eme);T0o=r(Xgt,"vilt"),Xgt.forEach(t),M0o=r(uxe," \u2014 "),dD=n(uxe,"A",{href:!0});var zgt=s(dD);E0o=r(zgt,"ViltModel"),zgt.forEach(t),C0o=r(uxe," (ViLT model)"),uxe.forEach(t),w0o=i(x),T_=n(x,"LI",{});var pxe=s(T_);ome=n(pxe,"STRONG",{});var Qgt=s(ome);A0o=r(Qgt,"vision-text-dual-encoder"),Qgt.forEach(t),L0o=r(pxe," \u2014 "),cD=n(pxe,"A",{href:!0});var Wgt=s(cD);y0o=r(Wgt,"VisionTextDualEncoderModel"),Wgt.forEach(t),x0o=r(pxe," (VisionTextDualEncoder model)"),pxe.forEach(t),$0o=i(x),M_=n(x,"LI",{});var _xe=s(M_);rme=n(_xe,"STRONG",{});var Hgt=s(rme);k0o=r(Hgt,"visual_bert"),Hgt.forEach(t),S0o=r(_xe," \u2014 "),mD=n(_xe,"A",{href:!0});var Ugt=s(mD);R0o=r(Ugt,"VisualBertModel"),Ugt.forEach(t),P0o=r(_xe," (VisualBERT model)"),_xe.forEach(t),B0o=i(x),E_=n(x,"LI",{});var bxe=s(E_);tme=n(bxe,"STRONG",{});var Jgt=s(tme);I0o=r(Jgt,"vit"),Jgt.forEach(t),N0o=r(bxe," \u2014 "),fD=n(bxe,"A",{href:!0});var Ygt=s(fD);q0o=r(Ygt,"ViTModel"),Ygt.forEach(t),j0o=r(bxe," (ViT model)"),bxe.forEach(t),D0o=i(x),C_=n(x,"LI",{});var vxe=s(C_);ame=n(vxe,"STRONG",{});var Kgt=s(ame);G0o=r(Kgt,"vit_mae"),Kgt.forEach(t),O0o=r(vxe," \u2014 "),gD=n(vxe,"A",{href:!0});var Zgt=s(gD);V0o=r(Zgt,"ViTMAEModel"),Zgt.forEach(t),X0o=r(vxe," (ViTMAE model)"),vxe.forEach(t),z0o=i(x),w_=n(x,"LI",{});var Fxe=s(w_);nme=n(Fxe,"STRONG",{});var eht=s(nme);Q0o=r(eht,"wav2vec2"),eht.forEach(t),W0o=r(Fxe," \u2014 "),hD=n(Fxe,"A",{href:!0});var oht=s(hD);H0o=r(oht,"Wav2Vec2Model"),oht.forEach(t),U0o=r(Fxe," (Wav2Vec2 model)"),Fxe.forEach(t),J0o=i(x),A_=n(x,"LI",{});var Txe=s(A_);sme=n(Txe,"STRONG",{});var rht=s(sme);Y0o=r(rht,"wav2vec2-conformer"),rht.forEach(t),K0o=r(Txe," \u2014 "),uD=n(Txe,"A",{href:!0});var tht=s(uD);Z0o=r(tht,"Wav2Vec2ConformerModel"),tht.forEach(t),ewo=r(Txe," (Wav2Vec2-Conformer model)"),Txe.forEach(t),owo=i(x),L_=n(x,"LI",{});var Mxe=s(L_);lme=n(Mxe,"STRONG",{});var aht=s(lme);rwo=r(aht,"wavlm"),aht.forEach(t),two=r(Mxe," \u2014 "),pD=n(Mxe,"A",{href:!0});var nht=s(pD);awo=r(nht,"WavLMModel"),nht.forEach(t),nwo=r(Mxe," (WavLM model)"),Mxe.forEach(t),swo=i(x),y_=n(x,"LI",{});var Exe=s(y_);ime=n(Exe,"STRONG",{});var sht=s(ime);lwo=r(sht,"xglm"),sht.forEach(t),iwo=r(Exe," \u2014 "),_D=n(Exe,"A",{href:!0});var lht=s(_D);dwo=r(lht,"XGLMModel"),lht.forEach(t),cwo=r(Exe," (XGLM model)"),Exe.forEach(t),mwo=i(x),x_=n(x,"LI",{});var Cxe=s(x_);dme=n(Cxe,"STRONG",{});var iht=s(dme);fwo=r(iht,"xlm"),iht.forEach(t),gwo=r(Cxe," \u2014 "),bD=n(Cxe,"A",{href:!0});var dht=s(bD);hwo=r(dht,"XLMModel"),dht.forEach(t),uwo=r(Cxe," (XLM model)"),Cxe.forEach(t),pwo=i(x),$_=n(x,"LI",{});var wxe=s($_);cme=n(wxe,"STRONG",{});var cht=s(cme);_wo=r(cht,"xlm-prophetnet"),cht.forEach(t),bwo=r(wxe," \u2014 "),vD=n(wxe,"A",{href:!0});var mht=s(vD);vwo=r(mht,"XLMProphetNetModel"),mht.forEach(t),Fwo=r(wxe," (XLM-ProphetNet model)"),wxe.forEach(t),Two=i(x),k_=n(x,"LI",{});var Axe=s(k_);mme=n(Axe,"STRONG",{});var fht=s(mme);Mwo=r(fht,"xlm-roberta"),fht.forEach(t),Ewo=r(Axe," \u2014 "),FD=n(Axe,"A",{href:!0});var ght=s(FD);Cwo=r(ght,"XLMRobertaModel"),ght.forEach(t),wwo=r(Axe," (XLM-RoBERTa model)"),Axe.forEach(t),Awo=i(x),S_=n(x,"LI",{});var Lxe=s(S_);fme=n(Lxe,"STRONG",{});var hht=s(fme);Lwo=r(hht,"xlm-roberta-xl"),hht.forEach(t),ywo=r(Lxe," \u2014 "),TD=n(Lxe,"A",{href:!0});var uht=s(TD);xwo=r(uht,"XLMRobertaXLModel"),uht.forEach(t),$wo=r(Lxe," (XLM-RoBERTa-XL model)"),Lxe.forEach(t),kwo=i(x),R_=n(x,"LI",{});var yxe=s(R_);gme=n(yxe,"STRONG",{});var pht=s(gme);Swo=r(pht,"xlnet"),pht.forEach(t),Rwo=r(yxe," \u2014 "),MD=n(yxe,"A",{href:!0});var _ht=s(MD);Pwo=r(_ht,"XLNetModel"),_ht.forEach(t),Bwo=r(yxe," (XLNet model)"),yxe.forEach(t),Iwo=i(x),P_=n(x,"LI",{});var xxe=s(P_);hme=n(xxe,"STRONG",{});var bht=s(hme);Nwo=r(bht,"yolos"),bht.forEach(t),qwo=r(xxe," \u2014 "),ED=n(xxe,"A",{href:!0});var vht=s(ED);jwo=r(vht,"YolosModel"),vht.forEach(t),Dwo=r(xxe," (YOLOS model)"),xxe.forEach(t),Gwo=i(x),B_=n(x,"LI",{});var $xe=s(B_);ume=n($xe,"STRONG",{});var Fht=s(ume);Owo=r(Fht,"yoso"),Fht.forEach(t),Vwo=r($xe," \u2014 "),CD=n($xe,"A",{href:!0});var Tht=s(CD);Xwo=r(Tht,"YosoModel"),Tht.forEach(t),zwo=r($xe," (YOSO model)"),$xe.forEach(t),x.forEach(t),Qwo=i(aa),I_=n(aa,"P",{});var kxe=s(I_);Wwo=r(kxe,"The model is set in evaluation mode by default using "),pme=n(kxe,"CODE",{});var Mht=s(pme);Hwo=r(Mht,"model.eval()"),Mht.forEach(t),Uwo=r(kxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_me=n(kxe,"CODE",{});var Eht=s(_me);Jwo=r(Eht,"model.train()"),Eht.forEach(t),kxe.forEach(t),Ywo=i(aa),T(N_.$$.fragment,aa),aa.forEach(t),Zs.forEach(t),qOe=i(m),Di=n(m,"H2",{class:!0});var XXe=s(Di);q_=n(XXe,"A",{id:!0,class:!0,href:!0});var Cht=s(q_);bme=n(Cht,"SPAN",{});var wht=s(bme);T(uy.$$.fragment,wht),wht.forEach(t),Cht.forEach(t),Kwo=i(XXe),vme=n(XXe,"SPAN",{});var Aht=s(vme);Zwo=r(Aht,"AutoModelForPreTraining"),Aht.forEach(t),XXe.forEach(t),jOe=i(m),$o=n(m,"DIV",{class:!0});var el=s($o);T(py.$$.fragment,el),eAo=i(el),Gi=n(el,"P",{});var Voe=s(Gi);oAo=r(Voe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),wD=n(Voe,"A",{href:!0});var Lht=s(wD);rAo=r(Lht,"from_pretrained()"),Lht.forEach(t),tAo=r(Voe," class method or the "),AD=n(Voe,"A",{href:!0});var yht=s(AD);aAo=r(yht,"from_config()"),yht.forEach(t),nAo=r(Voe,` class
method.`),Voe.forEach(t),sAo=i(el),_y=n(el,"P",{});var zXe=s(_y);lAo=r(zXe,"This class cannot be instantiated directly using "),Fme=n(zXe,"CODE",{});var xht=s(Fme);iAo=r(xht,"__init__()"),xht.forEach(t),dAo=r(zXe," (throws an error)."),zXe.forEach(t),cAo=i(el),st=n(el,"DIV",{class:!0});var O6=s(st);T(by.$$.fragment,O6),mAo=i(O6),Tme=n(O6,"P",{});var $ht=s(Tme);fAo=r($ht,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),$ht.forEach(t),gAo=i(O6),Oi=n(O6,"P",{});var Xoe=s(Oi);hAo=r(Xoe,`Note:
Loading a model from its configuration file does `),Mme=n(Xoe,"STRONG",{});var kht=s(Mme);uAo=r(kht,"not"),kht.forEach(t),pAo=r(Xoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),LD=n(Xoe,"A",{href:!0});var Sht=s(LD);_Ao=r(Sht,"from_pretrained()"),Sht.forEach(t),bAo=r(Xoe," to load the model weights."),Xoe.forEach(t),vAo=i(O6),T(j_.$$.fragment,O6),O6.forEach(t),FAo=i(el),Ye=n(el,"DIV",{class:!0});var na=s(Ye);T(vy.$$.fragment,na),TAo=i(na),Eme=n(na,"P",{});var Rht=s(Eme);MAo=r(Rht,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Rht.forEach(t),EAo=i(na),Pa=n(na,"P",{});var V6=s(Pa);CAo=r(V6,"The model class to instantiate is selected based on the "),Cme=n(V6,"CODE",{});var Pht=s(Cme);wAo=r(Pht,"model_type"),Pht.forEach(t),AAo=r(V6,` property of the config object (either
passed as an argument or loaded from `),wme=n(V6,"CODE",{});var Bht=s(wme);LAo=r(Bht,"pretrained_model_name_or_path"),Bht.forEach(t),yAo=r(V6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ame=n(V6,"CODE",{});var Iht=s(Ame);xAo=r(Iht,"pretrained_model_name_or_path"),Iht.forEach(t),$Ao=r(V6,":"),V6.forEach(t),kAo=i(na),G=n(na,"UL",{});var O=s(G);D_=n(O,"LI",{});var Sxe=s(D_);Lme=n(Sxe,"STRONG",{});var Nht=s(Lme);SAo=r(Nht,"albert"),Nht.forEach(t),RAo=r(Sxe," \u2014 "),yD=n(Sxe,"A",{href:!0});var qht=s(yD);PAo=r(qht,"AlbertForPreTraining"),qht.forEach(t),BAo=r(Sxe," (ALBERT model)"),Sxe.forEach(t),IAo=i(O),G_=n(O,"LI",{});var Rxe=s(G_);yme=n(Rxe,"STRONG",{});var jht=s(yme);NAo=r(jht,"bart"),jht.forEach(t),qAo=r(Rxe," \u2014 "),xD=n(Rxe,"A",{href:!0});var Dht=s(xD);jAo=r(Dht,"BartForConditionalGeneration"),Dht.forEach(t),DAo=r(Rxe," (BART model)"),Rxe.forEach(t),GAo=i(O),O_=n(O,"LI",{});var Pxe=s(O_);xme=n(Pxe,"STRONG",{});var Ght=s(xme);OAo=r(Ght,"bert"),Ght.forEach(t),VAo=r(Pxe," \u2014 "),$D=n(Pxe,"A",{href:!0});var Oht=s($D);XAo=r(Oht,"BertForPreTraining"),Oht.forEach(t),zAo=r(Pxe," (BERT model)"),Pxe.forEach(t),QAo=i(O),V_=n(O,"LI",{});var Bxe=s(V_);$me=n(Bxe,"STRONG",{});var Vht=s($me);WAo=r(Vht,"big_bird"),Vht.forEach(t),HAo=r(Bxe," \u2014 "),kD=n(Bxe,"A",{href:!0});var Xht=s(kD);UAo=r(Xht,"BigBirdForPreTraining"),Xht.forEach(t),JAo=r(Bxe," (BigBird model)"),Bxe.forEach(t),YAo=i(O),X_=n(O,"LI",{});var Ixe=s(X_);kme=n(Ixe,"STRONG",{});var zht=s(kme);KAo=r(zht,"bloom"),zht.forEach(t),ZAo=r(Ixe," \u2014 "),SD=n(Ixe,"A",{href:!0});var Qht=s(SD);e6o=r(Qht,"BloomForCausalLM"),Qht.forEach(t),o6o=r(Ixe," (BLOOM model)"),Ixe.forEach(t),r6o=i(O),z_=n(O,"LI",{});var Nxe=s(z_);Sme=n(Nxe,"STRONG",{});var Wht=s(Sme);t6o=r(Wht,"camembert"),Wht.forEach(t),a6o=r(Nxe," \u2014 "),RD=n(Nxe,"A",{href:!0});var Hht=s(RD);n6o=r(Hht,"CamembertForMaskedLM"),Hht.forEach(t),s6o=r(Nxe," (CamemBERT model)"),Nxe.forEach(t),l6o=i(O),Q_=n(O,"LI",{});var qxe=s(Q_);Rme=n(qxe,"STRONG",{});var Uht=s(Rme);i6o=r(Uht,"ctrl"),Uht.forEach(t),d6o=r(qxe," \u2014 "),PD=n(qxe,"A",{href:!0});var Jht=s(PD);c6o=r(Jht,"CTRLLMHeadModel"),Jht.forEach(t),m6o=r(qxe," (CTRL model)"),qxe.forEach(t),f6o=i(O),W_=n(O,"LI",{});var jxe=s(W_);Pme=n(jxe,"STRONG",{});var Yht=s(Pme);g6o=r(Yht,"data2vec-text"),Yht.forEach(t),h6o=r(jxe," \u2014 "),BD=n(jxe,"A",{href:!0});var Kht=s(BD);u6o=r(Kht,"Data2VecTextForMaskedLM"),Kht.forEach(t),p6o=r(jxe," (Data2VecText model)"),jxe.forEach(t),_6o=i(O),H_=n(O,"LI",{});var Dxe=s(H_);Bme=n(Dxe,"STRONG",{});var Zht=s(Bme);b6o=r(Zht,"deberta"),Zht.forEach(t),v6o=r(Dxe," \u2014 "),ID=n(Dxe,"A",{href:!0});var eut=s(ID);F6o=r(eut,"DebertaForMaskedLM"),eut.forEach(t),T6o=r(Dxe," (DeBERTa model)"),Dxe.forEach(t),M6o=i(O),U_=n(O,"LI",{});var Gxe=s(U_);Ime=n(Gxe,"STRONG",{});var out=s(Ime);E6o=r(out,"deberta-v2"),out.forEach(t),C6o=r(Gxe," \u2014 "),ND=n(Gxe,"A",{href:!0});var rut=s(ND);w6o=r(rut,"DebertaV2ForMaskedLM"),rut.forEach(t),A6o=r(Gxe," (DeBERTa-v2 model)"),Gxe.forEach(t),L6o=i(O),J_=n(O,"LI",{});var Oxe=s(J_);Nme=n(Oxe,"STRONG",{});var tut=s(Nme);y6o=r(tut,"distilbert"),tut.forEach(t),x6o=r(Oxe," \u2014 "),qD=n(Oxe,"A",{href:!0});var aut=s(qD);$6o=r(aut,"DistilBertForMaskedLM"),aut.forEach(t),k6o=r(Oxe," (DistilBERT model)"),Oxe.forEach(t),S6o=i(O),Y_=n(O,"LI",{});var Vxe=s(Y_);qme=n(Vxe,"STRONG",{});var nut=s(qme);R6o=r(nut,"electra"),nut.forEach(t),P6o=r(Vxe," \u2014 "),jD=n(Vxe,"A",{href:!0});var sut=s(jD);B6o=r(sut,"ElectraForPreTraining"),sut.forEach(t),I6o=r(Vxe," (ELECTRA model)"),Vxe.forEach(t),N6o=i(O),K_=n(O,"LI",{});var Xxe=s(K_);jme=n(Xxe,"STRONG",{});var lut=s(jme);q6o=r(lut,"flaubert"),lut.forEach(t),j6o=r(Xxe," \u2014 "),DD=n(Xxe,"A",{href:!0});var iut=s(DD);D6o=r(iut,"FlaubertWithLMHeadModel"),iut.forEach(t),G6o=r(Xxe," (FlauBERT model)"),Xxe.forEach(t),O6o=i(O),Z_=n(O,"LI",{});var zxe=s(Z_);Dme=n(zxe,"STRONG",{});var dut=s(Dme);V6o=r(dut,"flava"),dut.forEach(t),X6o=r(zxe," \u2014 "),GD=n(zxe,"A",{href:!0});var cut=s(GD);z6o=r(cut,"FlavaForPreTraining"),cut.forEach(t),Q6o=r(zxe," (FLAVA model)"),zxe.forEach(t),W6o=i(O),e2=n(O,"LI",{});var Qxe=s(e2);Gme=n(Qxe,"STRONG",{});var mut=s(Gme);H6o=r(mut,"fnet"),mut.forEach(t),U6o=r(Qxe," \u2014 "),OD=n(Qxe,"A",{href:!0});var fut=s(OD);J6o=r(fut,"FNetForPreTraining"),fut.forEach(t),Y6o=r(Qxe," (FNet model)"),Qxe.forEach(t),K6o=i(O),o2=n(O,"LI",{});var Wxe=s(o2);Ome=n(Wxe,"STRONG",{});var gut=s(Ome);Z6o=r(gut,"fsmt"),gut.forEach(t),eLo=r(Wxe," \u2014 "),VD=n(Wxe,"A",{href:!0});var hut=s(VD);oLo=r(hut,"FSMTForConditionalGeneration"),hut.forEach(t),rLo=r(Wxe," (FairSeq Machine-Translation model)"),Wxe.forEach(t),tLo=i(O),r2=n(O,"LI",{});var Hxe=s(r2);Vme=n(Hxe,"STRONG",{});var uut=s(Vme);aLo=r(uut,"funnel"),uut.forEach(t),nLo=r(Hxe," \u2014 "),XD=n(Hxe,"A",{href:!0});var put=s(XD);sLo=r(put,"FunnelForPreTraining"),put.forEach(t),lLo=r(Hxe," (Funnel Transformer model)"),Hxe.forEach(t),iLo=i(O),t2=n(O,"LI",{});var Uxe=s(t2);Xme=n(Uxe,"STRONG",{});var _ut=s(Xme);dLo=r(_ut,"gpt2"),_ut.forEach(t),cLo=r(Uxe," \u2014 "),zD=n(Uxe,"A",{href:!0});var but=s(zD);mLo=r(but,"GPT2LMHeadModel"),but.forEach(t),fLo=r(Uxe," (OpenAI GPT-2 model)"),Uxe.forEach(t),gLo=i(O),a2=n(O,"LI",{});var Jxe=s(a2);zme=n(Jxe,"STRONG",{});var vut=s(zme);hLo=r(vut,"ibert"),vut.forEach(t),uLo=r(Jxe," \u2014 "),QD=n(Jxe,"A",{href:!0});var Fut=s(QD);pLo=r(Fut,"IBertForMaskedLM"),Fut.forEach(t),_Lo=r(Jxe," (I-BERT model)"),Jxe.forEach(t),bLo=i(O),n2=n(O,"LI",{});var Yxe=s(n2);Qme=n(Yxe,"STRONG",{});var Tut=s(Qme);vLo=r(Tut,"layoutlm"),Tut.forEach(t),FLo=r(Yxe," \u2014 "),WD=n(Yxe,"A",{href:!0});var Mut=s(WD);TLo=r(Mut,"LayoutLMForMaskedLM"),Mut.forEach(t),MLo=r(Yxe," (LayoutLM model)"),Yxe.forEach(t),ELo=i(O),s2=n(O,"LI",{});var Kxe=s(s2);Wme=n(Kxe,"STRONG",{});var Eut=s(Wme);CLo=r(Eut,"longformer"),Eut.forEach(t),wLo=r(Kxe," \u2014 "),HD=n(Kxe,"A",{href:!0});var Cut=s(HD);ALo=r(Cut,"LongformerForMaskedLM"),Cut.forEach(t),LLo=r(Kxe," (Longformer model)"),Kxe.forEach(t),yLo=i(O),l2=n(O,"LI",{});var Zxe=s(l2);Hme=n(Zxe,"STRONG",{});var wut=s(Hme);xLo=r(wut,"lxmert"),wut.forEach(t),$Lo=r(Zxe," \u2014 "),UD=n(Zxe,"A",{href:!0});var Aut=s(UD);kLo=r(Aut,"LxmertForPreTraining"),Aut.forEach(t),SLo=r(Zxe," (LXMERT model)"),Zxe.forEach(t),RLo=i(O),i2=n(O,"LI",{});var e$e=s(i2);Ume=n(e$e,"STRONG",{});var Lut=s(Ume);PLo=r(Lut,"megatron-bert"),Lut.forEach(t),BLo=r(e$e," \u2014 "),JD=n(e$e,"A",{href:!0});var yut=s(JD);ILo=r(yut,"MegatronBertForPreTraining"),yut.forEach(t),NLo=r(e$e," (Megatron-BERT model)"),e$e.forEach(t),qLo=i(O),d2=n(O,"LI",{});var o$e=s(d2);Jme=n(o$e,"STRONG",{});var xut=s(Jme);jLo=r(xut,"mobilebert"),xut.forEach(t),DLo=r(o$e," \u2014 "),YD=n(o$e,"A",{href:!0});var $ut=s(YD);GLo=r($ut,"MobileBertForPreTraining"),$ut.forEach(t),OLo=r(o$e," (MobileBERT model)"),o$e.forEach(t),VLo=i(O),c2=n(O,"LI",{});var r$e=s(c2);Yme=n(r$e,"STRONG",{});var kut=s(Yme);XLo=r(kut,"mpnet"),kut.forEach(t),zLo=r(r$e," \u2014 "),KD=n(r$e,"A",{href:!0});var Sut=s(KD);QLo=r(Sut,"MPNetForMaskedLM"),Sut.forEach(t),WLo=r(r$e," (MPNet model)"),r$e.forEach(t),HLo=i(O),m2=n(O,"LI",{});var t$e=s(m2);Kme=n(t$e,"STRONG",{});var Rut=s(Kme);ULo=r(Rut,"nezha"),Rut.forEach(t),JLo=r(t$e," \u2014 "),ZD=n(t$e,"A",{href:!0});var Put=s(ZD);YLo=r(Put,"NezhaForPreTraining"),Put.forEach(t),KLo=r(t$e," (Nezha model)"),t$e.forEach(t),ZLo=i(O),f2=n(O,"LI",{});var a$e=s(f2);Zme=n(a$e,"STRONG",{});var But=s(Zme);e7o=r(But,"openai-gpt"),But.forEach(t),o7o=r(a$e," \u2014 "),eG=n(a$e,"A",{href:!0});var Iut=s(eG);r7o=r(Iut,"OpenAIGPTLMHeadModel"),Iut.forEach(t),t7o=r(a$e," (OpenAI GPT model)"),a$e.forEach(t),a7o=i(O),g2=n(O,"LI",{});var n$e=s(g2);efe=n(n$e,"STRONG",{});var Nut=s(efe);n7o=r(Nut,"retribert"),Nut.forEach(t),s7o=r(n$e," \u2014 "),oG=n(n$e,"A",{href:!0});var qut=s(oG);l7o=r(qut,"RetriBertModel"),qut.forEach(t),i7o=r(n$e," (RetriBERT model)"),n$e.forEach(t),d7o=i(O),h2=n(O,"LI",{});var s$e=s(h2);ofe=n(s$e,"STRONG",{});var jut=s(ofe);c7o=r(jut,"roberta"),jut.forEach(t),m7o=r(s$e," \u2014 "),rG=n(s$e,"A",{href:!0});var Dut=s(rG);f7o=r(Dut,"RobertaForMaskedLM"),Dut.forEach(t),g7o=r(s$e," (RoBERTa model)"),s$e.forEach(t),h7o=i(O),u2=n(O,"LI",{});var l$e=s(u2);rfe=n(l$e,"STRONG",{});var Gut=s(rfe);u7o=r(Gut,"splinter"),Gut.forEach(t),p7o=r(l$e," \u2014 "),tG=n(l$e,"A",{href:!0});var Out=s(tG);_7o=r(Out,"SplinterForPreTraining"),Out.forEach(t),b7o=r(l$e," (Splinter model)"),l$e.forEach(t),v7o=i(O),p2=n(O,"LI",{});var i$e=s(p2);tfe=n(i$e,"STRONG",{});var Vut=s(tfe);F7o=r(Vut,"squeezebert"),Vut.forEach(t),T7o=r(i$e," \u2014 "),aG=n(i$e,"A",{href:!0});var Xut=s(aG);M7o=r(Xut,"SqueezeBertForMaskedLM"),Xut.forEach(t),E7o=r(i$e," (SqueezeBERT model)"),i$e.forEach(t),C7o=i(O),_2=n(O,"LI",{});var d$e=s(_2);afe=n(d$e,"STRONG",{});var zut=s(afe);w7o=r(zut,"t5"),zut.forEach(t),A7o=r(d$e," \u2014 "),nG=n(d$e,"A",{href:!0});var Qut=s(nG);L7o=r(Qut,"T5ForConditionalGeneration"),Qut.forEach(t),y7o=r(d$e," (T5 model)"),d$e.forEach(t),x7o=i(O),b2=n(O,"LI",{});var c$e=s(b2);nfe=n(c$e,"STRONG",{});var Wut=s(nfe);$7o=r(Wut,"tapas"),Wut.forEach(t),k7o=r(c$e," \u2014 "),sG=n(c$e,"A",{href:!0});var Hut=s(sG);S7o=r(Hut,"TapasForMaskedLM"),Hut.forEach(t),R7o=r(c$e," (TAPAS model)"),c$e.forEach(t),P7o=i(O),v2=n(O,"LI",{});var m$e=s(v2);sfe=n(m$e,"STRONG",{});var Uut=s(sfe);B7o=r(Uut,"transfo-xl"),Uut.forEach(t),I7o=r(m$e," \u2014 "),lG=n(m$e,"A",{href:!0});var Jut=s(lG);N7o=r(Jut,"TransfoXLLMHeadModel"),Jut.forEach(t),q7o=r(m$e," (Transformer-XL model)"),m$e.forEach(t),j7o=i(O),F2=n(O,"LI",{});var f$e=s(F2);lfe=n(f$e,"STRONG",{});var Yut=s(lfe);D7o=r(Yut,"unispeech"),Yut.forEach(t),G7o=r(f$e," \u2014 "),iG=n(f$e,"A",{href:!0});var Kut=s(iG);O7o=r(Kut,"UniSpeechForPreTraining"),Kut.forEach(t),V7o=r(f$e," (UniSpeech model)"),f$e.forEach(t),X7o=i(O),T2=n(O,"LI",{});var g$e=s(T2);ife=n(g$e,"STRONG",{});var Zut=s(ife);z7o=r(Zut,"unispeech-sat"),Zut.forEach(t),Q7o=r(g$e," \u2014 "),dG=n(g$e,"A",{href:!0});var ept=s(dG);W7o=r(ept,"UniSpeechSatForPreTraining"),ept.forEach(t),H7o=r(g$e," (UniSpeechSat model)"),g$e.forEach(t),U7o=i(O),M2=n(O,"LI",{});var h$e=s(M2);dfe=n(h$e,"STRONG",{});var opt=s(dfe);J7o=r(opt,"visual_bert"),opt.forEach(t),Y7o=r(h$e," \u2014 "),cG=n(h$e,"A",{href:!0});var rpt=s(cG);K7o=r(rpt,"VisualBertForPreTraining"),rpt.forEach(t),Z7o=r(h$e," (VisualBERT model)"),h$e.forEach(t),eyo=i(O),E2=n(O,"LI",{});var u$e=s(E2);cfe=n(u$e,"STRONG",{});var tpt=s(cfe);oyo=r(tpt,"vit_mae"),tpt.forEach(t),ryo=r(u$e," \u2014 "),mG=n(u$e,"A",{href:!0});var apt=s(mG);tyo=r(apt,"ViTMAEForPreTraining"),apt.forEach(t),ayo=r(u$e," (ViTMAE model)"),u$e.forEach(t),nyo=i(O),C2=n(O,"LI",{});var p$e=s(C2);mfe=n(p$e,"STRONG",{});var npt=s(mfe);syo=r(npt,"wav2vec2"),npt.forEach(t),lyo=r(p$e," \u2014 "),fG=n(p$e,"A",{href:!0});var spt=s(fG);iyo=r(spt,"Wav2Vec2ForPreTraining"),spt.forEach(t),dyo=r(p$e," (Wav2Vec2 model)"),p$e.forEach(t),cyo=i(O),w2=n(O,"LI",{});var _$e=s(w2);ffe=n(_$e,"STRONG",{});var lpt=s(ffe);myo=r(lpt,"wav2vec2-conformer"),lpt.forEach(t),fyo=r(_$e," \u2014 "),gG=n(_$e,"A",{href:!0});var ipt=s(gG);gyo=r(ipt,"Wav2Vec2ConformerForPreTraining"),ipt.forEach(t),hyo=r(_$e," (Wav2Vec2-Conformer model)"),_$e.forEach(t),uyo=i(O),A2=n(O,"LI",{});var b$e=s(A2);gfe=n(b$e,"STRONG",{});var dpt=s(gfe);pyo=r(dpt,"xlm"),dpt.forEach(t),_yo=r(b$e," \u2014 "),hG=n(b$e,"A",{href:!0});var cpt=s(hG);byo=r(cpt,"XLMWithLMHeadModel"),cpt.forEach(t),vyo=r(b$e," (XLM model)"),b$e.forEach(t),Fyo=i(O),L2=n(O,"LI",{});var v$e=s(L2);hfe=n(v$e,"STRONG",{});var mpt=s(hfe);Tyo=r(mpt,"xlm-roberta"),mpt.forEach(t),Myo=r(v$e," \u2014 "),uG=n(v$e,"A",{href:!0});var fpt=s(uG);Eyo=r(fpt,"XLMRobertaForMaskedLM"),fpt.forEach(t),Cyo=r(v$e," (XLM-RoBERTa model)"),v$e.forEach(t),wyo=i(O),y2=n(O,"LI",{});var F$e=s(y2);ufe=n(F$e,"STRONG",{});var gpt=s(ufe);Ayo=r(gpt,"xlm-roberta-xl"),gpt.forEach(t),Lyo=r(F$e," \u2014 "),pG=n(F$e,"A",{href:!0});var hpt=s(pG);yyo=r(hpt,"XLMRobertaXLForMaskedLM"),hpt.forEach(t),xyo=r(F$e," (XLM-RoBERTa-XL model)"),F$e.forEach(t),$yo=i(O),x2=n(O,"LI",{});var T$e=s(x2);pfe=n(T$e,"STRONG",{});var upt=s(pfe);kyo=r(upt,"xlnet"),upt.forEach(t),Syo=r(T$e," \u2014 "),_G=n(T$e,"A",{href:!0});var ppt=s(_G);Ryo=r(ppt,"XLNetLMHeadModel"),ppt.forEach(t),Pyo=r(T$e," (XLNet model)"),T$e.forEach(t),O.forEach(t),Byo=i(na),$2=n(na,"P",{});var M$e=s($2);Iyo=r(M$e,"The model is set in evaluation mode by default using "),_fe=n(M$e,"CODE",{});var _pt=s(_fe);Nyo=r(_pt,"model.eval()"),_pt.forEach(t),qyo=r(M$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bfe=n(M$e,"CODE",{});var bpt=s(bfe);jyo=r(bpt,"model.train()"),bpt.forEach(t),M$e.forEach(t),Dyo=i(na),T(k2.$$.fragment,na),na.forEach(t),el.forEach(t),DOe=i(m),Vi=n(m,"H2",{class:!0});var QXe=s(Vi);S2=n(QXe,"A",{id:!0,class:!0,href:!0});var vpt=s(S2);vfe=n(vpt,"SPAN",{});var Fpt=s(vfe);T(Fy.$$.fragment,Fpt),Fpt.forEach(t),vpt.forEach(t),Gyo=i(QXe),Ffe=n(QXe,"SPAN",{});var Tpt=s(Ffe);Oyo=r(Tpt,"AutoModelForCausalLM"),Tpt.forEach(t),QXe.forEach(t),GOe=i(m),ko=n(m,"DIV",{class:!0});var ol=s(ko);T(Ty.$$.fragment,ol),Vyo=i(ol),Xi=n(ol,"P",{});var zoe=s(Xi);Xyo=r(zoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),bG=n(zoe,"A",{href:!0});var Mpt=s(bG);zyo=r(Mpt,"from_pretrained()"),Mpt.forEach(t),Qyo=r(zoe," class method or the "),vG=n(zoe,"A",{href:!0});var Ept=s(vG);Wyo=r(Ept,"from_config()"),Ept.forEach(t),Hyo=r(zoe,` class
method.`),zoe.forEach(t),Uyo=i(ol),My=n(ol,"P",{});var WXe=s(My);Jyo=r(WXe,"This class cannot be instantiated directly using "),Tfe=n(WXe,"CODE",{});var Cpt=s(Tfe);Yyo=r(Cpt,"__init__()"),Cpt.forEach(t),Kyo=r(WXe," (throws an error)."),WXe.forEach(t),Zyo=i(ol),lt=n(ol,"DIV",{class:!0});var X6=s(lt);T(Ey.$$.fragment,X6),e8o=i(X6),Mfe=n(X6,"P",{});var wpt=s(Mfe);o8o=r(wpt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),wpt.forEach(t),r8o=i(X6),zi=n(X6,"P",{});var Qoe=s(zi);t8o=r(Qoe,`Note:
Loading a model from its configuration file does `),Efe=n(Qoe,"STRONG",{});var Apt=s(Efe);a8o=r(Apt,"not"),Apt.forEach(t),n8o=r(Qoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),FG=n(Qoe,"A",{href:!0});var Lpt=s(FG);s8o=r(Lpt,"from_pretrained()"),Lpt.forEach(t),l8o=r(Qoe," to load the model weights."),Qoe.forEach(t),i8o=i(X6),T(R2.$$.fragment,X6),X6.forEach(t),d8o=i(ol),Ke=n(ol,"DIV",{class:!0});var sa=s(Ke);T(Cy.$$.fragment,sa),c8o=i(sa),Cfe=n(sa,"P",{});var ypt=s(Cfe);m8o=r(ypt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),ypt.forEach(t),f8o=i(sa),Ba=n(sa,"P",{});var z6=s(Ba);g8o=r(z6,"The model class to instantiate is selected based on the "),wfe=n(z6,"CODE",{});var xpt=s(wfe);h8o=r(xpt,"model_type"),xpt.forEach(t),u8o=r(z6,` property of the config object (either
passed as an argument or loaded from `),Afe=n(z6,"CODE",{});var $pt=s(Afe);p8o=r($pt,"pretrained_model_name_or_path"),$pt.forEach(t),_8o=r(z6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lfe=n(z6,"CODE",{});var kpt=s(Lfe);b8o=r(kpt,"pretrained_model_name_or_path"),kpt.forEach(t),v8o=r(z6,":"),z6.forEach(t),F8o=i(sa),z=n(sa,"UL",{});var Q=s(z);P2=n(Q,"LI",{});var E$e=s(P2);yfe=n(E$e,"STRONG",{});var Spt=s(yfe);T8o=r(Spt,"bart"),Spt.forEach(t),M8o=r(E$e," \u2014 "),TG=n(E$e,"A",{href:!0});var Rpt=s(TG);E8o=r(Rpt,"BartForCausalLM"),Rpt.forEach(t),C8o=r(E$e," (BART model)"),E$e.forEach(t),w8o=i(Q),B2=n(Q,"LI",{});var C$e=s(B2);xfe=n(C$e,"STRONG",{});var Ppt=s(xfe);A8o=r(Ppt,"bert"),Ppt.forEach(t),L8o=r(C$e," \u2014 "),MG=n(C$e,"A",{href:!0});var Bpt=s(MG);y8o=r(Bpt,"BertLMHeadModel"),Bpt.forEach(t),x8o=r(C$e," (BERT model)"),C$e.forEach(t),$8o=i(Q),I2=n(Q,"LI",{});var w$e=s(I2);$fe=n(w$e,"STRONG",{});var Ipt=s($fe);k8o=r(Ipt,"bert-generation"),Ipt.forEach(t),S8o=r(w$e," \u2014 "),EG=n(w$e,"A",{href:!0});var Npt=s(EG);R8o=r(Npt,"BertGenerationDecoder"),Npt.forEach(t),P8o=r(w$e," (Bert Generation model)"),w$e.forEach(t),B8o=i(Q),N2=n(Q,"LI",{});var A$e=s(N2);kfe=n(A$e,"STRONG",{});var qpt=s(kfe);I8o=r(qpt,"big_bird"),qpt.forEach(t),N8o=r(A$e," \u2014 "),CG=n(A$e,"A",{href:!0});var jpt=s(CG);q8o=r(jpt,"BigBirdForCausalLM"),jpt.forEach(t),j8o=r(A$e," (BigBird model)"),A$e.forEach(t),D8o=i(Q),q2=n(Q,"LI",{});var L$e=s(q2);Sfe=n(L$e,"STRONG",{});var Dpt=s(Sfe);G8o=r(Dpt,"bigbird_pegasus"),Dpt.forEach(t),O8o=r(L$e," \u2014 "),wG=n(L$e,"A",{href:!0});var Gpt=s(wG);V8o=r(Gpt,"BigBirdPegasusForCausalLM"),Gpt.forEach(t),X8o=r(L$e," (BigBird-Pegasus model)"),L$e.forEach(t),z8o=i(Q),j2=n(Q,"LI",{});var y$e=s(j2);Rfe=n(y$e,"STRONG",{});var Opt=s(Rfe);Q8o=r(Opt,"blenderbot"),Opt.forEach(t),W8o=r(y$e," \u2014 "),AG=n(y$e,"A",{href:!0});var Vpt=s(AG);H8o=r(Vpt,"BlenderbotForCausalLM"),Vpt.forEach(t),U8o=r(y$e," (Blenderbot model)"),y$e.forEach(t),J8o=i(Q),D2=n(Q,"LI",{});var x$e=s(D2);Pfe=n(x$e,"STRONG",{});var Xpt=s(Pfe);Y8o=r(Xpt,"blenderbot-small"),Xpt.forEach(t),K8o=r(x$e," \u2014 "),LG=n(x$e,"A",{href:!0});var zpt=s(LG);Z8o=r(zpt,"BlenderbotSmallForCausalLM"),zpt.forEach(t),e9o=r(x$e," (BlenderbotSmall model)"),x$e.forEach(t),o9o=i(Q),G2=n(Q,"LI",{});var $$e=s(G2);Bfe=n($$e,"STRONG",{});var Qpt=s(Bfe);r9o=r(Qpt,"bloom"),Qpt.forEach(t),t9o=r($$e," \u2014 "),yG=n($$e,"A",{href:!0});var Wpt=s(yG);a9o=r(Wpt,"BloomForCausalLM"),Wpt.forEach(t),n9o=r($$e," (BLOOM model)"),$$e.forEach(t),s9o=i(Q),O2=n(Q,"LI",{});var k$e=s(O2);Ife=n(k$e,"STRONG",{});var Hpt=s(Ife);l9o=r(Hpt,"camembert"),Hpt.forEach(t),i9o=r(k$e," \u2014 "),xG=n(k$e,"A",{href:!0});var Upt=s(xG);d9o=r(Upt,"CamembertForCausalLM"),Upt.forEach(t),c9o=r(k$e," (CamemBERT model)"),k$e.forEach(t),m9o=i(Q),V2=n(Q,"LI",{});var S$e=s(V2);Nfe=n(S$e,"STRONG",{});var Jpt=s(Nfe);f9o=r(Jpt,"codegen"),Jpt.forEach(t),g9o=r(S$e," \u2014 "),$G=n(S$e,"A",{href:!0});var Ypt=s($G);h9o=r(Ypt,"CodeGenForCausalLM"),Ypt.forEach(t),u9o=r(S$e," (CodeGen model)"),S$e.forEach(t),p9o=i(Q),X2=n(Q,"LI",{});var R$e=s(X2);qfe=n(R$e,"STRONG",{});var Kpt=s(qfe);_9o=r(Kpt,"ctrl"),Kpt.forEach(t),b9o=r(R$e," \u2014 "),kG=n(R$e,"A",{href:!0});var Zpt=s(kG);v9o=r(Zpt,"CTRLLMHeadModel"),Zpt.forEach(t),F9o=r(R$e," (CTRL model)"),R$e.forEach(t),T9o=i(Q),z2=n(Q,"LI",{});var P$e=s(z2);jfe=n(P$e,"STRONG",{});var e_t=s(jfe);M9o=r(e_t,"data2vec-text"),e_t.forEach(t),E9o=r(P$e," \u2014 "),SG=n(P$e,"A",{href:!0});var o_t=s(SG);C9o=r(o_t,"Data2VecTextForCausalLM"),o_t.forEach(t),w9o=r(P$e," (Data2VecText model)"),P$e.forEach(t),A9o=i(Q),Q2=n(Q,"LI",{});var B$e=s(Q2);Dfe=n(B$e,"STRONG",{});var r_t=s(Dfe);L9o=r(r_t,"electra"),r_t.forEach(t),y9o=r(B$e," \u2014 "),RG=n(B$e,"A",{href:!0});var t_t=s(RG);x9o=r(t_t,"ElectraForCausalLM"),t_t.forEach(t),$9o=r(B$e," (ELECTRA model)"),B$e.forEach(t),k9o=i(Q),W2=n(Q,"LI",{});var I$e=s(W2);Gfe=n(I$e,"STRONG",{});var a_t=s(Gfe);S9o=r(a_t,"gpt2"),a_t.forEach(t),R9o=r(I$e," \u2014 "),PG=n(I$e,"A",{href:!0});var n_t=s(PG);P9o=r(n_t,"GPT2LMHeadModel"),n_t.forEach(t),B9o=r(I$e," (OpenAI GPT-2 model)"),I$e.forEach(t),I9o=i(Q),H2=n(Q,"LI",{});var N$e=s(H2);Ofe=n(N$e,"STRONG",{});var s_t=s(Ofe);N9o=r(s_t,"gpt_neo"),s_t.forEach(t),q9o=r(N$e," \u2014 "),BG=n(N$e,"A",{href:!0});var l_t=s(BG);j9o=r(l_t,"GPTNeoForCausalLM"),l_t.forEach(t),D9o=r(N$e," (GPT Neo model)"),N$e.forEach(t),G9o=i(Q),U2=n(Q,"LI",{});var q$e=s(U2);Vfe=n(q$e,"STRONG",{});var i_t=s(Vfe);O9o=r(i_t,"gpt_neox"),i_t.forEach(t),V9o=r(q$e," \u2014 "),IG=n(q$e,"A",{href:!0});var d_t=s(IG);X9o=r(d_t,"GPTNeoXForCausalLM"),d_t.forEach(t),z9o=r(q$e," (GPT NeoX model)"),q$e.forEach(t),Q9o=i(Q),J2=n(Q,"LI",{});var j$e=s(J2);Xfe=n(j$e,"STRONG",{});var c_t=s(Xfe);W9o=r(c_t,"gptj"),c_t.forEach(t),H9o=r(j$e," \u2014 "),NG=n(j$e,"A",{href:!0});var m_t=s(NG);U9o=r(m_t,"GPTJForCausalLM"),m_t.forEach(t),J9o=r(j$e," (GPT-J model)"),j$e.forEach(t),Y9o=i(Q),Y2=n(Q,"LI",{});var D$e=s(Y2);zfe=n(D$e,"STRONG",{});var f_t=s(zfe);K9o=r(f_t,"marian"),f_t.forEach(t),Z9o=r(D$e," \u2014 "),qG=n(D$e,"A",{href:!0});var g_t=s(qG);exo=r(g_t,"MarianForCausalLM"),g_t.forEach(t),oxo=r(D$e," (Marian model)"),D$e.forEach(t),rxo=i(Q),K2=n(Q,"LI",{});var G$e=s(K2);Qfe=n(G$e,"STRONG",{});var h_t=s(Qfe);txo=r(h_t,"mbart"),h_t.forEach(t),axo=r(G$e," \u2014 "),jG=n(G$e,"A",{href:!0});var u_t=s(jG);nxo=r(u_t,"MBartForCausalLM"),u_t.forEach(t),sxo=r(G$e," (mBART model)"),G$e.forEach(t),lxo=i(Q),Z2=n(Q,"LI",{});var O$e=s(Z2);Wfe=n(O$e,"STRONG",{});var p_t=s(Wfe);ixo=r(p_t,"megatron-bert"),p_t.forEach(t),dxo=r(O$e," \u2014 "),DG=n(O$e,"A",{href:!0});var __t=s(DG);cxo=r(__t,"MegatronBertForCausalLM"),__t.forEach(t),mxo=r(O$e," (Megatron-BERT model)"),O$e.forEach(t),fxo=i(Q),eb=n(Q,"LI",{});var V$e=s(eb);Hfe=n(V$e,"STRONG",{});var b_t=s(Hfe);gxo=r(b_t,"openai-gpt"),b_t.forEach(t),hxo=r(V$e," \u2014 "),GG=n(V$e,"A",{href:!0});var v_t=s(GG);uxo=r(v_t,"OpenAIGPTLMHeadModel"),v_t.forEach(t),pxo=r(V$e," (OpenAI GPT model)"),V$e.forEach(t),_xo=i(Q),ob=n(Q,"LI",{});var X$e=s(ob);Ufe=n(X$e,"STRONG",{});var F_t=s(Ufe);bxo=r(F_t,"opt"),F_t.forEach(t),vxo=r(X$e," \u2014 "),OG=n(X$e,"A",{href:!0});var T_t=s(OG);Fxo=r(T_t,"OPTForCausalLM"),T_t.forEach(t),Txo=r(X$e," (OPT model)"),X$e.forEach(t),Mxo=i(Q),rb=n(Q,"LI",{});var z$e=s(rb);Jfe=n(z$e,"STRONG",{});var M_t=s(Jfe);Exo=r(M_t,"pegasus"),M_t.forEach(t),Cxo=r(z$e," \u2014 "),VG=n(z$e,"A",{href:!0});var E_t=s(VG);wxo=r(E_t,"PegasusForCausalLM"),E_t.forEach(t),Axo=r(z$e," (Pegasus model)"),z$e.forEach(t),Lxo=i(Q),tb=n(Q,"LI",{});var Q$e=s(tb);Yfe=n(Q$e,"STRONG",{});var C_t=s(Yfe);yxo=r(C_t,"plbart"),C_t.forEach(t),xxo=r(Q$e," \u2014 "),XG=n(Q$e,"A",{href:!0});var w_t=s(XG);$xo=r(w_t,"PLBartForCausalLM"),w_t.forEach(t),kxo=r(Q$e," (PLBart model)"),Q$e.forEach(t),Sxo=i(Q),ab=n(Q,"LI",{});var W$e=s(ab);Kfe=n(W$e,"STRONG",{});var A_t=s(Kfe);Rxo=r(A_t,"prophetnet"),A_t.forEach(t),Pxo=r(W$e," \u2014 "),zG=n(W$e,"A",{href:!0});var L_t=s(zG);Bxo=r(L_t,"ProphetNetForCausalLM"),L_t.forEach(t),Ixo=r(W$e," (ProphetNet model)"),W$e.forEach(t),Nxo=i(Q),nb=n(Q,"LI",{});var H$e=s(nb);Zfe=n(H$e,"STRONG",{});var y_t=s(Zfe);qxo=r(y_t,"qdqbert"),y_t.forEach(t),jxo=r(H$e," \u2014 "),QG=n(H$e,"A",{href:!0});var x_t=s(QG);Dxo=r(x_t,"QDQBertLMHeadModel"),x_t.forEach(t),Gxo=r(H$e," (QDQBert model)"),H$e.forEach(t),Oxo=i(Q),sb=n(Q,"LI",{});var U$e=s(sb);ege=n(U$e,"STRONG",{});var $_t=s(ege);Vxo=r($_t,"reformer"),$_t.forEach(t),Xxo=r(U$e," \u2014 "),WG=n(U$e,"A",{href:!0});var k_t=s(WG);zxo=r(k_t,"ReformerModelWithLMHead"),k_t.forEach(t),Qxo=r(U$e," (Reformer model)"),U$e.forEach(t),Wxo=i(Q),lb=n(Q,"LI",{});var J$e=s(lb);oge=n(J$e,"STRONG",{});var S_t=s(oge);Hxo=r(S_t,"rembert"),S_t.forEach(t),Uxo=r(J$e," \u2014 "),HG=n(J$e,"A",{href:!0});var R_t=s(HG);Jxo=r(R_t,"RemBertForCausalLM"),R_t.forEach(t),Yxo=r(J$e," (RemBERT model)"),J$e.forEach(t),Kxo=i(Q),ib=n(Q,"LI",{});var Y$e=s(ib);rge=n(Y$e,"STRONG",{});var P_t=s(rge);Zxo=r(P_t,"roberta"),P_t.forEach(t),e$o=r(Y$e," \u2014 "),UG=n(Y$e,"A",{href:!0});var B_t=s(UG);o$o=r(B_t,"RobertaForCausalLM"),B_t.forEach(t),r$o=r(Y$e," (RoBERTa model)"),Y$e.forEach(t),t$o=i(Q),db=n(Q,"LI",{});var K$e=s(db);tge=n(K$e,"STRONG",{});var I_t=s(tge);a$o=r(I_t,"roformer"),I_t.forEach(t),n$o=r(K$e," \u2014 "),JG=n(K$e,"A",{href:!0});var N_t=s(JG);s$o=r(N_t,"RoFormerForCausalLM"),N_t.forEach(t),l$o=r(K$e," (RoFormer model)"),K$e.forEach(t),i$o=i(Q),cb=n(Q,"LI",{});var Z$e=s(cb);age=n(Z$e,"STRONG",{});var q_t=s(age);d$o=r(q_t,"speech_to_text_2"),q_t.forEach(t),c$o=r(Z$e," \u2014 "),YG=n(Z$e,"A",{href:!0});var j_t=s(YG);m$o=r(j_t,"Speech2Text2ForCausalLM"),j_t.forEach(t),f$o=r(Z$e," (Speech2Text2 model)"),Z$e.forEach(t),g$o=i(Q),mb=n(Q,"LI",{});var eke=s(mb);nge=n(eke,"STRONG",{});var D_t=s(nge);h$o=r(D_t,"transfo-xl"),D_t.forEach(t),u$o=r(eke," \u2014 "),KG=n(eke,"A",{href:!0});var G_t=s(KG);p$o=r(G_t,"TransfoXLLMHeadModel"),G_t.forEach(t),_$o=r(eke," (Transformer-XL model)"),eke.forEach(t),b$o=i(Q),fb=n(Q,"LI",{});var oke=s(fb);sge=n(oke,"STRONG",{});var O_t=s(sge);v$o=r(O_t,"trocr"),O_t.forEach(t),F$o=r(oke," \u2014 "),ZG=n(oke,"A",{href:!0});var V_t=s(ZG);T$o=r(V_t,"TrOCRForCausalLM"),V_t.forEach(t),M$o=r(oke," (TrOCR model)"),oke.forEach(t),E$o=i(Q),gb=n(Q,"LI",{});var rke=s(gb);lge=n(rke,"STRONG",{});var X_t=s(lge);C$o=r(X_t,"xglm"),X_t.forEach(t),w$o=r(rke," \u2014 "),eO=n(rke,"A",{href:!0});var z_t=s(eO);A$o=r(z_t,"XGLMForCausalLM"),z_t.forEach(t),L$o=r(rke," (XGLM model)"),rke.forEach(t),y$o=i(Q),hb=n(Q,"LI",{});var tke=s(hb);ige=n(tke,"STRONG",{});var Q_t=s(ige);x$o=r(Q_t,"xlm"),Q_t.forEach(t),$$o=r(tke," \u2014 "),oO=n(tke,"A",{href:!0});var W_t=s(oO);k$o=r(W_t,"XLMWithLMHeadModel"),W_t.forEach(t),S$o=r(tke," (XLM model)"),tke.forEach(t),R$o=i(Q),ub=n(Q,"LI",{});var ake=s(ub);dge=n(ake,"STRONG",{});var H_t=s(dge);P$o=r(H_t,"xlm-prophetnet"),H_t.forEach(t),B$o=r(ake," \u2014 "),rO=n(ake,"A",{href:!0});var U_t=s(rO);I$o=r(U_t,"XLMProphetNetForCausalLM"),U_t.forEach(t),N$o=r(ake," (XLM-ProphetNet model)"),ake.forEach(t),q$o=i(Q),pb=n(Q,"LI",{});var nke=s(pb);cge=n(nke,"STRONG",{});var J_t=s(cge);j$o=r(J_t,"xlm-roberta"),J_t.forEach(t),D$o=r(nke," \u2014 "),tO=n(nke,"A",{href:!0});var Y_t=s(tO);G$o=r(Y_t,"XLMRobertaForCausalLM"),Y_t.forEach(t),O$o=r(nke," (XLM-RoBERTa model)"),nke.forEach(t),V$o=i(Q),_b=n(Q,"LI",{});var ske=s(_b);mge=n(ske,"STRONG",{});var K_t=s(mge);X$o=r(K_t,"xlm-roberta-xl"),K_t.forEach(t),z$o=r(ske," \u2014 "),aO=n(ske,"A",{href:!0});var Z_t=s(aO);Q$o=r(Z_t,"XLMRobertaXLForCausalLM"),Z_t.forEach(t),W$o=r(ske," (XLM-RoBERTa-XL model)"),ske.forEach(t),H$o=i(Q),bb=n(Q,"LI",{});var lke=s(bb);fge=n(lke,"STRONG",{});var e2t=s(fge);U$o=r(e2t,"xlnet"),e2t.forEach(t),J$o=r(lke," \u2014 "),nO=n(lke,"A",{href:!0});var o2t=s(nO);Y$o=r(o2t,"XLNetLMHeadModel"),o2t.forEach(t),K$o=r(lke," (XLNet model)"),lke.forEach(t),Q.forEach(t),Z$o=i(sa),vb=n(sa,"P",{});var ike=s(vb);eko=r(ike,"The model is set in evaluation mode by default using "),gge=n(ike,"CODE",{});var r2t=s(gge);oko=r(r2t,"model.eval()"),r2t.forEach(t),rko=r(ike,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hge=n(ike,"CODE",{});var t2t=s(hge);tko=r(t2t,"model.train()"),t2t.forEach(t),ike.forEach(t),ako=i(sa),T(Fb.$$.fragment,sa),sa.forEach(t),ol.forEach(t),OOe=i(m),Qi=n(m,"H2",{class:!0});var HXe=s(Qi);Tb=n(HXe,"A",{id:!0,class:!0,href:!0});var a2t=s(Tb);uge=n(a2t,"SPAN",{});var n2t=s(uge);T(wy.$$.fragment,n2t),n2t.forEach(t),a2t.forEach(t),nko=i(HXe),pge=n(HXe,"SPAN",{});var s2t=s(pge);sko=r(s2t,"AutoModelForMaskedLM"),s2t.forEach(t),HXe.forEach(t),VOe=i(m),So=n(m,"DIV",{class:!0});var rl=s(So);T(Ay.$$.fragment,rl),lko=i(rl),Wi=n(rl,"P",{});var Woe=s(Wi);iko=r(Woe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),sO=n(Woe,"A",{href:!0});var l2t=s(sO);dko=r(l2t,"from_pretrained()"),l2t.forEach(t),cko=r(Woe," class method or the "),lO=n(Woe,"A",{href:!0});var i2t=s(lO);mko=r(i2t,"from_config()"),i2t.forEach(t),fko=r(Woe,` class
method.`),Woe.forEach(t),gko=i(rl),Ly=n(rl,"P",{});var UXe=s(Ly);hko=r(UXe,"This class cannot be instantiated directly using "),_ge=n(UXe,"CODE",{});var d2t=s(_ge);uko=r(d2t,"__init__()"),d2t.forEach(t),pko=r(UXe," (throws an error)."),UXe.forEach(t),_ko=i(rl),it=n(rl,"DIV",{class:!0});var Q6=s(it);T(yy.$$.fragment,Q6),bko=i(Q6),bge=n(Q6,"P",{});var c2t=s(bge);vko=r(c2t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),c2t.forEach(t),Fko=i(Q6),Hi=n(Q6,"P",{});var Hoe=s(Hi);Tko=r(Hoe,`Note:
Loading a model from its configuration file does `),vge=n(Hoe,"STRONG",{});var m2t=s(vge);Mko=r(m2t,"not"),m2t.forEach(t),Eko=r(Hoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),iO=n(Hoe,"A",{href:!0});var f2t=s(iO);Cko=r(f2t,"from_pretrained()"),f2t.forEach(t),wko=r(Hoe," to load the model weights."),Hoe.forEach(t),Ako=i(Q6),T(Mb.$$.fragment,Q6),Q6.forEach(t),Lko=i(rl),Ze=n(rl,"DIV",{class:!0});var la=s(Ze);T(xy.$$.fragment,la),yko=i(la),Fge=n(la,"P",{});var g2t=s(Fge);xko=r(g2t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),g2t.forEach(t),$ko=i(la),Ia=n(la,"P",{});var W6=s(Ia);kko=r(W6,"The model class to instantiate is selected based on the "),Tge=n(W6,"CODE",{});var h2t=s(Tge);Sko=r(h2t,"model_type"),h2t.forEach(t),Rko=r(W6,` property of the config object (either
passed as an argument or loaded from `),Mge=n(W6,"CODE",{});var u2t=s(Mge);Pko=r(u2t,"pretrained_model_name_or_path"),u2t.forEach(t),Bko=r(W6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ege=n(W6,"CODE",{});var p2t=s(Ege);Iko=r(p2t,"pretrained_model_name_or_path"),p2t.forEach(t),Nko=r(W6,":"),W6.forEach(t),qko=i(la),W=n(la,"UL",{});var U=s(W);Eb=n(U,"LI",{});var dke=s(Eb);Cge=n(dke,"STRONG",{});var _2t=s(Cge);jko=r(_2t,"albert"),_2t.forEach(t),Dko=r(dke," \u2014 "),dO=n(dke,"A",{href:!0});var b2t=s(dO);Gko=r(b2t,"AlbertForMaskedLM"),b2t.forEach(t),Oko=r(dke," (ALBERT model)"),dke.forEach(t),Vko=i(U),Cb=n(U,"LI",{});var cke=s(Cb);wge=n(cke,"STRONG",{});var v2t=s(wge);Xko=r(v2t,"bart"),v2t.forEach(t),zko=r(cke," \u2014 "),cO=n(cke,"A",{href:!0});var F2t=s(cO);Qko=r(F2t,"BartForConditionalGeneration"),F2t.forEach(t),Wko=r(cke," (BART model)"),cke.forEach(t),Hko=i(U),wb=n(U,"LI",{});var mke=s(wb);Age=n(mke,"STRONG",{});var T2t=s(Age);Uko=r(T2t,"bert"),T2t.forEach(t),Jko=r(mke," \u2014 "),mO=n(mke,"A",{href:!0});var M2t=s(mO);Yko=r(M2t,"BertForMaskedLM"),M2t.forEach(t),Kko=r(mke," (BERT model)"),mke.forEach(t),Zko=i(U),Ab=n(U,"LI",{});var fke=s(Ab);Lge=n(fke,"STRONG",{});var E2t=s(Lge);eSo=r(E2t,"big_bird"),E2t.forEach(t),oSo=r(fke," \u2014 "),fO=n(fke,"A",{href:!0});var C2t=s(fO);rSo=r(C2t,"BigBirdForMaskedLM"),C2t.forEach(t),tSo=r(fke," (BigBird model)"),fke.forEach(t),aSo=i(U),Lb=n(U,"LI",{});var gke=s(Lb);yge=n(gke,"STRONG",{});var w2t=s(yge);nSo=r(w2t,"camembert"),w2t.forEach(t),sSo=r(gke," \u2014 "),gO=n(gke,"A",{href:!0});var A2t=s(gO);lSo=r(A2t,"CamembertForMaskedLM"),A2t.forEach(t),iSo=r(gke," (CamemBERT model)"),gke.forEach(t),dSo=i(U),yb=n(U,"LI",{});var hke=s(yb);xge=n(hke,"STRONG",{});var L2t=s(xge);cSo=r(L2t,"convbert"),L2t.forEach(t),mSo=r(hke," \u2014 "),hO=n(hke,"A",{href:!0});var y2t=s(hO);fSo=r(y2t,"ConvBertForMaskedLM"),y2t.forEach(t),gSo=r(hke," (ConvBERT model)"),hke.forEach(t),hSo=i(U),xb=n(U,"LI",{});var uke=s(xb);$ge=n(uke,"STRONG",{});var x2t=s($ge);uSo=r(x2t,"data2vec-text"),x2t.forEach(t),pSo=r(uke," \u2014 "),uO=n(uke,"A",{href:!0});var $2t=s(uO);_So=r($2t,"Data2VecTextForMaskedLM"),$2t.forEach(t),bSo=r(uke," (Data2VecText model)"),uke.forEach(t),vSo=i(U),$b=n(U,"LI",{});var pke=s($b);kge=n(pke,"STRONG",{});var k2t=s(kge);FSo=r(k2t,"deberta"),k2t.forEach(t),TSo=r(pke," \u2014 "),pO=n(pke,"A",{href:!0});var S2t=s(pO);MSo=r(S2t,"DebertaForMaskedLM"),S2t.forEach(t),ESo=r(pke," (DeBERTa model)"),pke.forEach(t),CSo=i(U),kb=n(U,"LI",{});var _ke=s(kb);Sge=n(_ke,"STRONG",{});var R2t=s(Sge);wSo=r(R2t,"deberta-v2"),R2t.forEach(t),ASo=r(_ke," \u2014 "),_O=n(_ke,"A",{href:!0});var P2t=s(_O);LSo=r(P2t,"DebertaV2ForMaskedLM"),P2t.forEach(t),ySo=r(_ke," (DeBERTa-v2 model)"),_ke.forEach(t),xSo=i(U),Sb=n(U,"LI",{});var bke=s(Sb);Rge=n(bke,"STRONG",{});var B2t=s(Rge);$So=r(B2t,"distilbert"),B2t.forEach(t),kSo=r(bke," \u2014 "),bO=n(bke,"A",{href:!0});var I2t=s(bO);SSo=r(I2t,"DistilBertForMaskedLM"),I2t.forEach(t),RSo=r(bke," (DistilBERT model)"),bke.forEach(t),PSo=i(U),Rb=n(U,"LI",{});var vke=s(Rb);Pge=n(vke,"STRONG",{});var N2t=s(Pge);BSo=r(N2t,"electra"),N2t.forEach(t),ISo=r(vke," \u2014 "),vO=n(vke,"A",{href:!0});var q2t=s(vO);NSo=r(q2t,"ElectraForMaskedLM"),q2t.forEach(t),qSo=r(vke," (ELECTRA model)"),vke.forEach(t),jSo=i(U),Pb=n(U,"LI",{});var Fke=s(Pb);Bge=n(Fke,"STRONG",{});var j2t=s(Bge);DSo=r(j2t,"flaubert"),j2t.forEach(t),GSo=r(Fke," \u2014 "),FO=n(Fke,"A",{href:!0});var D2t=s(FO);OSo=r(D2t,"FlaubertWithLMHeadModel"),D2t.forEach(t),VSo=r(Fke," (FlauBERT model)"),Fke.forEach(t),XSo=i(U),Bb=n(U,"LI",{});var Tke=s(Bb);Ige=n(Tke,"STRONG",{});var G2t=s(Ige);zSo=r(G2t,"fnet"),G2t.forEach(t),QSo=r(Tke," \u2014 "),TO=n(Tke,"A",{href:!0});var O2t=s(TO);WSo=r(O2t,"FNetForMaskedLM"),O2t.forEach(t),HSo=r(Tke," (FNet model)"),Tke.forEach(t),USo=i(U),Ib=n(U,"LI",{});var Mke=s(Ib);Nge=n(Mke,"STRONG",{});var V2t=s(Nge);JSo=r(V2t,"funnel"),V2t.forEach(t),YSo=r(Mke," \u2014 "),MO=n(Mke,"A",{href:!0});var X2t=s(MO);KSo=r(X2t,"FunnelForMaskedLM"),X2t.forEach(t),ZSo=r(Mke," (Funnel Transformer model)"),Mke.forEach(t),eRo=i(U),Nb=n(U,"LI",{});var Eke=s(Nb);qge=n(Eke,"STRONG",{});var z2t=s(qge);oRo=r(z2t,"ibert"),z2t.forEach(t),rRo=r(Eke," \u2014 "),EO=n(Eke,"A",{href:!0});var Q2t=s(EO);tRo=r(Q2t,"IBertForMaskedLM"),Q2t.forEach(t),aRo=r(Eke," (I-BERT model)"),Eke.forEach(t),nRo=i(U),qb=n(U,"LI",{});var Cke=s(qb);jge=n(Cke,"STRONG",{});var W2t=s(jge);sRo=r(W2t,"layoutlm"),W2t.forEach(t),lRo=r(Cke," \u2014 "),CO=n(Cke,"A",{href:!0});var H2t=s(CO);iRo=r(H2t,"LayoutLMForMaskedLM"),H2t.forEach(t),dRo=r(Cke," (LayoutLM model)"),Cke.forEach(t),cRo=i(U),jb=n(U,"LI",{});var wke=s(jb);Dge=n(wke,"STRONG",{});var U2t=s(Dge);mRo=r(U2t,"longformer"),U2t.forEach(t),fRo=r(wke," \u2014 "),wO=n(wke,"A",{href:!0});var J2t=s(wO);gRo=r(J2t,"LongformerForMaskedLM"),J2t.forEach(t),hRo=r(wke," (Longformer model)"),wke.forEach(t),uRo=i(U),Db=n(U,"LI",{});var Ake=s(Db);Gge=n(Ake,"STRONG",{});var Y2t=s(Gge);pRo=r(Y2t,"luke"),Y2t.forEach(t),_Ro=r(Ake," \u2014 "),AO=n(Ake,"A",{href:!0});var K2t=s(AO);bRo=r(K2t,"LukeForMaskedLM"),K2t.forEach(t),vRo=r(Ake," (LUKE model)"),Ake.forEach(t),FRo=i(U),Gb=n(U,"LI",{});var Lke=s(Gb);Oge=n(Lke,"STRONG",{});var Z2t=s(Oge);TRo=r(Z2t,"mbart"),Z2t.forEach(t),MRo=r(Lke," \u2014 "),LO=n(Lke,"A",{href:!0});var ebt=s(LO);ERo=r(ebt,"MBartForConditionalGeneration"),ebt.forEach(t),CRo=r(Lke," (mBART model)"),Lke.forEach(t),wRo=i(U),Ob=n(U,"LI",{});var yke=s(Ob);Vge=n(yke,"STRONG",{});var obt=s(Vge);ARo=r(obt,"megatron-bert"),obt.forEach(t),LRo=r(yke," \u2014 "),yO=n(yke,"A",{href:!0});var rbt=s(yO);yRo=r(rbt,"MegatronBertForMaskedLM"),rbt.forEach(t),xRo=r(yke," (Megatron-BERT model)"),yke.forEach(t),$Ro=i(U),Vb=n(U,"LI",{});var xke=s(Vb);Xge=n(xke,"STRONG",{});var tbt=s(Xge);kRo=r(tbt,"mobilebert"),tbt.forEach(t),SRo=r(xke," \u2014 "),xO=n(xke,"A",{href:!0});var abt=s(xO);RRo=r(abt,"MobileBertForMaskedLM"),abt.forEach(t),PRo=r(xke," (MobileBERT model)"),xke.forEach(t),BRo=i(U),Xb=n(U,"LI",{});var $ke=s(Xb);zge=n($ke,"STRONG",{});var nbt=s(zge);IRo=r(nbt,"mpnet"),nbt.forEach(t),NRo=r($ke," \u2014 "),$O=n($ke,"A",{href:!0});var sbt=s($O);qRo=r(sbt,"MPNetForMaskedLM"),sbt.forEach(t),jRo=r($ke," (MPNet model)"),$ke.forEach(t),DRo=i(U),zb=n(U,"LI",{});var kke=s(zb);Qge=n(kke,"STRONG",{});var lbt=s(Qge);GRo=r(lbt,"nezha"),lbt.forEach(t),ORo=r(kke," \u2014 "),kO=n(kke,"A",{href:!0});var ibt=s(kO);VRo=r(ibt,"NezhaForMaskedLM"),ibt.forEach(t),XRo=r(kke," (Nezha model)"),kke.forEach(t),zRo=i(U),Qb=n(U,"LI",{});var Ske=s(Qb);Wge=n(Ske,"STRONG",{});var dbt=s(Wge);QRo=r(dbt,"nystromformer"),dbt.forEach(t),WRo=r(Ske," \u2014 "),SO=n(Ske,"A",{href:!0});var cbt=s(SO);HRo=r(cbt,"NystromformerForMaskedLM"),cbt.forEach(t),URo=r(Ske," (Nystr\xF6mformer model)"),Ske.forEach(t),JRo=i(U),Wb=n(U,"LI",{});var Rke=s(Wb);Hge=n(Rke,"STRONG",{});var mbt=s(Hge);YRo=r(mbt,"perceiver"),mbt.forEach(t),KRo=r(Rke," \u2014 "),RO=n(Rke,"A",{href:!0});var fbt=s(RO);ZRo=r(fbt,"PerceiverForMaskedLM"),fbt.forEach(t),ePo=r(Rke," (Perceiver model)"),Rke.forEach(t),oPo=i(U),Hb=n(U,"LI",{});var Pke=s(Hb);Uge=n(Pke,"STRONG",{});var gbt=s(Uge);rPo=r(gbt,"qdqbert"),gbt.forEach(t),tPo=r(Pke," \u2014 "),PO=n(Pke,"A",{href:!0});var hbt=s(PO);aPo=r(hbt,"QDQBertForMaskedLM"),hbt.forEach(t),nPo=r(Pke," (QDQBert model)"),Pke.forEach(t),sPo=i(U),Ub=n(U,"LI",{});var Bke=s(Ub);Jge=n(Bke,"STRONG",{});var ubt=s(Jge);lPo=r(ubt,"reformer"),ubt.forEach(t),iPo=r(Bke," \u2014 "),BO=n(Bke,"A",{href:!0});var pbt=s(BO);dPo=r(pbt,"ReformerForMaskedLM"),pbt.forEach(t),cPo=r(Bke," (Reformer model)"),Bke.forEach(t),mPo=i(U),Jb=n(U,"LI",{});var Ike=s(Jb);Yge=n(Ike,"STRONG",{});var _bt=s(Yge);fPo=r(_bt,"rembert"),_bt.forEach(t),gPo=r(Ike," \u2014 "),IO=n(Ike,"A",{href:!0});var bbt=s(IO);hPo=r(bbt,"RemBertForMaskedLM"),bbt.forEach(t),uPo=r(Ike," (RemBERT model)"),Ike.forEach(t),pPo=i(U),Yb=n(U,"LI",{});var Nke=s(Yb);Kge=n(Nke,"STRONG",{});var vbt=s(Kge);_Po=r(vbt,"roberta"),vbt.forEach(t),bPo=r(Nke," \u2014 "),NO=n(Nke,"A",{href:!0});var Fbt=s(NO);vPo=r(Fbt,"RobertaForMaskedLM"),Fbt.forEach(t),FPo=r(Nke," (RoBERTa model)"),Nke.forEach(t),TPo=i(U),Kb=n(U,"LI",{});var qke=s(Kb);Zge=n(qke,"STRONG",{});var Tbt=s(Zge);MPo=r(Tbt,"roformer"),Tbt.forEach(t),EPo=r(qke," \u2014 "),qO=n(qke,"A",{href:!0});var Mbt=s(qO);CPo=r(Mbt,"RoFormerForMaskedLM"),Mbt.forEach(t),wPo=r(qke," (RoFormer model)"),qke.forEach(t),APo=i(U),Zb=n(U,"LI",{});var jke=s(Zb);ehe=n(jke,"STRONG",{});var Ebt=s(ehe);LPo=r(Ebt,"squeezebert"),Ebt.forEach(t),yPo=r(jke," \u2014 "),jO=n(jke,"A",{href:!0});var Cbt=s(jO);xPo=r(Cbt,"SqueezeBertForMaskedLM"),Cbt.forEach(t),$Po=r(jke," (SqueezeBERT model)"),jke.forEach(t),kPo=i(U),ev=n(U,"LI",{});var Dke=s(ev);ohe=n(Dke,"STRONG",{});var wbt=s(ohe);SPo=r(wbt,"tapas"),wbt.forEach(t),RPo=r(Dke," \u2014 "),DO=n(Dke,"A",{href:!0});var Abt=s(DO);PPo=r(Abt,"TapasForMaskedLM"),Abt.forEach(t),BPo=r(Dke," (TAPAS model)"),Dke.forEach(t),IPo=i(U),ov=n(U,"LI",{});var Gke=s(ov);rhe=n(Gke,"STRONG",{});var Lbt=s(rhe);NPo=r(Lbt,"wav2vec2"),Lbt.forEach(t),qPo=r(Gke," \u2014 "),the=n(Gke,"CODE",{});var ybt=s(the);jPo=r(ybt,"Wav2Vec2ForMaskedLM"),ybt.forEach(t),DPo=r(Gke," (Wav2Vec2 model)"),Gke.forEach(t),GPo=i(U),rv=n(U,"LI",{});var Oke=s(rv);ahe=n(Oke,"STRONG",{});var xbt=s(ahe);OPo=r(xbt,"xlm"),xbt.forEach(t),VPo=r(Oke," \u2014 "),GO=n(Oke,"A",{href:!0});var $bt=s(GO);XPo=r($bt,"XLMWithLMHeadModel"),$bt.forEach(t),zPo=r(Oke," (XLM model)"),Oke.forEach(t),QPo=i(U),tv=n(U,"LI",{});var Vke=s(tv);nhe=n(Vke,"STRONG",{});var kbt=s(nhe);WPo=r(kbt,"xlm-roberta"),kbt.forEach(t),HPo=r(Vke," \u2014 "),OO=n(Vke,"A",{href:!0});var Sbt=s(OO);UPo=r(Sbt,"XLMRobertaForMaskedLM"),Sbt.forEach(t),JPo=r(Vke," (XLM-RoBERTa model)"),Vke.forEach(t),YPo=i(U),av=n(U,"LI",{});var Xke=s(av);she=n(Xke,"STRONG",{});var Rbt=s(she);KPo=r(Rbt,"xlm-roberta-xl"),Rbt.forEach(t),ZPo=r(Xke," \u2014 "),VO=n(Xke,"A",{href:!0});var Pbt=s(VO);eBo=r(Pbt,"XLMRobertaXLForMaskedLM"),Pbt.forEach(t),oBo=r(Xke," (XLM-RoBERTa-XL model)"),Xke.forEach(t),rBo=i(U),nv=n(U,"LI",{});var zke=s(nv);lhe=n(zke,"STRONG",{});var Bbt=s(lhe);tBo=r(Bbt,"yoso"),Bbt.forEach(t),aBo=r(zke," \u2014 "),XO=n(zke,"A",{href:!0});var Ibt=s(XO);nBo=r(Ibt,"YosoForMaskedLM"),Ibt.forEach(t),sBo=r(zke," (YOSO model)"),zke.forEach(t),U.forEach(t),lBo=i(la),sv=n(la,"P",{});var Qke=s(sv);iBo=r(Qke,"The model is set in evaluation mode by default using "),ihe=n(Qke,"CODE",{});var Nbt=s(ihe);dBo=r(Nbt,"model.eval()"),Nbt.forEach(t),cBo=r(Qke,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dhe=n(Qke,"CODE",{});var qbt=s(dhe);mBo=r(qbt,"model.train()"),qbt.forEach(t),Qke.forEach(t),fBo=i(la),T(lv.$$.fragment,la),la.forEach(t),rl.forEach(t),XOe=i(m),Ui=n(m,"H2",{class:!0});var JXe=s(Ui);iv=n(JXe,"A",{id:!0,class:!0,href:!0});var jbt=s(iv);che=n(jbt,"SPAN",{});var Dbt=s(che);T($y.$$.fragment,Dbt),Dbt.forEach(t),jbt.forEach(t),gBo=i(JXe),mhe=n(JXe,"SPAN",{});var Gbt=s(mhe);hBo=r(Gbt,"AutoModelForSeq2SeqLM"),Gbt.forEach(t),JXe.forEach(t),zOe=i(m),Ro=n(m,"DIV",{class:!0});var tl=s(Ro);T(ky.$$.fragment,tl),uBo=i(tl),Ji=n(tl,"P",{});var Uoe=s(Ji);pBo=r(Uoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),zO=n(Uoe,"A",{href:!0});var Obt=s(zO);_Bo=r(Obt,"from_pretrained()"),Obt.forEach(t),bBo=r(Uoe," class method or the "),QO=n(Uoe,"A",{href:!0});var Vbt=s(QO);vBo=r(Vbt,"from_config()"),Vbt.forEach(t),FBo=r(Uoe,` class
method.`),Uoe.forEach(t),TBo=i(tl),Sy=n(tl,"P",{});var YXe=s(Sy);MBo=r(YXe,"This class cannot be instantiated directly using "),fhe=n(YXe,"CODE",{});var Xbt=s(fhe);EBo=r(Xbt,"__init__()"),Xbt.forEach(t),CBo=r(YXe," (throws an error)."),YXe.forEach(t),wBo=i(tl),dt=n(tl,"DIV",{class:!0});var H6=s(dt);T(Ry.$$.fragment,H6),ABo=i(H6),ghe=n(H6,"P",{});var zbt=s(ghe);LBo=r(zbt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),zbt.forEach(t),yBo=i(H6),Yi=n(H6,"P",{});var Joe=s(Yi);xBo=r(Joe,`Note:
Loading a model from its configuration file does `),hhe=n(Joe,"STRONG",{});var Qbt=s(hhe);$Bo=r(Qbt,"not"),Qbt.forEach(t),kBo=r(Joe,` load the model weights. It only affects the
model\u2019s configuration. Use `),WO=n(Joe,"A",{href:!0});var Wbt=s(WO);SBo=r(Wbt,"from_pretrained()"),Wbt.forEach(t),RBo=r(Joe," to load the model weights."),Joe.forEach(t),PBo=i(H6),T(dv.$$.fragment,H6),H6.forEach(t),BBo=i(tl),eo=n(tl,"DIV",{class:!0});var ia=s(eo);T(Py.$$.fragment,ia),IBo=i(ia),uhe=n(ia,"P",{});var Hbt=s(uhe);NBo=r(Hbt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Hbt.forEach(t),qBo=i(ia),Na=n(ia,"P",{});var U6=s(Na);jBo=r(U6,"The model class to instantiate is selected based on the "),phe=n(U6,"CODE",{});var Ubt=s(phe);DBo=r(Ubt,"model_type"),Ubt.forEach(t),GBo=r(U6,` property of the config object (either
passed as an argument or loaded from `),_he=n(U6,"CODE",{});var Jbt=s(_he);OBo=r(Jbt,"pretrained_model_name_or_path"),Jbt.forEach(t),VBo=r(U6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bhe=n(U6,"CODE",{});var Ybt=s(bhe);XBo=r(Ybt,"pretrained_model_name_or_path"),Ybt.forEach(t),zBo=r(U6,":"),U6.forEach(t),QBo=i(ia),ue=n(ia,"UL",{});var be=s(ue);cv=n(be,"LI",{});var Wke=s(cv);vhe=n(Wke,"STRONG",{});var Kbt=s(vhe);WBo=r(Kbt,"bart"),Kbt.forEach(t),HBo=r(Wke," \u2014 "),HO=n(Wke,"A",{href:!0});var Zbt=s(HO);UBo=r(Zbt,"BartForConditionalGeneration"),Zbt.forEach(t),JBo=r(Wke," (BART model)"),Wke.forEach(t),YBo=i(be),mv=n(be,"LI",{});var Hke=s(mv);Fhe=n(Hke,"STRONG",{});var evt=s(Fhe);KBo=r(evt,"bigbird_pegasus"),evt.forEach(t),ZBo=r(Hke," \u2014 "),UO=n(Hke,"A",{href:!0});var ovt=s(UO);eIo=r(ovt,"BigBirdPegasusForConditionalGeneration"),ovt.forEach(t),oIo=r(Hke," (BigBird-Pegasus model)"),Hke.forEach(t),rIo=i(be),fv=n(be,"LI",{});var Uke=s(fv);The=n(Uke,"STRONG",{});var rvt=s(The);tIo=r(rvt,"blenderbot"),rvt.forEach(t),aIo=r(Uke," \u2014 "),JO=n(Uke,"A",{href:!0});var tvt=s(JO);nIo=r(tvt,"BlenderbotForConditionalGeneration"),tvt.forEach(t),sIo=r(Uke," (Blenderbot model)"),Uke.forEach(t),lIo=i(be),gv=n(be,"LI",{});var Jke=s(gv);Mhe=n(Jke,"STRONG",{});var avt=s(Mhe);iIo=r(avt,"blenderbot-small"),avt.forEach(t),dIo=r(Jke," \u2014 "),YO=n(Jke,"A",{href:!0});var nvt=s(YO);cIo=r(nvt,"BlenderbotSmallForConditionalGeneration"),nvt.forEach(t),mIo=r(Jke," (BlenderbotSmall model)"),Jke.forEach(t),fIo=i(be),hv=n(be,"LI",{});var Yke=s(hv);Ehe=n(Yke,"STRONG",{});var svt=s(Ehe);gIo=r(svt,"encoder-decoder"),svt.forEach(t),hIo=r(Yke," \u2014 "),KO=n(Yke,"A",{href:!0});var lvt=s(KO);uIo=r(lvt,"EncoderDecoderModel"),lvt.forEach(t),pIo=r(Yke," (Encoder decoder model)"),Yke.forEach(t),_Io=i(be),uv=n(be,"LI",{});var Kke=s(uv);Che=n(Kke,"STRONG",{});var ivt=s(Che);bIo=r(ivt,"fsmt"),ivt.forEach(t),vIo=r(Kke," \u2014 "),ZO=n(Kke,"A",{href:!0});var dvt=s(ZO);FIo=r(dvt,"FSMTForConditionalGeneration"),dvt.forEach(t),TIo=r(Kke," (FairSeq Machine-Translation model)"),Kke.forEach(t),MIo=i(be),pv=n(be,"LI",{});var Zke=s(pv);whe=n(Zke,"STRONG",{});var cvt=s(whe);EIo=r(cvt,"led"),cvt.forEach(t),CIo=r(Zke," \u2014 "),eV=n(Zke,"A",{href:!0});var mvt=s(eV);wIo=r(mvt,"LEDForConditionalGeneration"),mvt.forEach(t),AIo=r(Zke," (LED model)"),Zke.forEach(t),LIo=i(be),_v=n(be,"LI",{});var eSe=s(_v);Ahe=n(eSe,"STRONG",{});var fvt=s(Ahe);yIo=r(fvt,"longt5"),fvt.forEach(t),xIo=r(eSe," \u2014 "),oV=n(eSe,"A",{href:!0});var gvt=s(oV);$Io=r(gvt,"LongT5ForConditionalGeneration"),gvt.forEach(t),kIo=r(eSe," (LongT5 model)"),eSe.forEach(t),SIo=i(be),bv=n(be,"LI",{});var oSe=s(bv);Lhe=n(oSe,"STRONG",{});var hvt=s(Lhe);RIo=r(hvt,"m2m_100"),hvt.forEach(t),PIo=r(oSe," \u2014 "),rV=n(oSe,"A",{href:!0});var uvt=s(rV);BIo=r(uvt,"M2M100ForConditionalGeneration"),uvt.forEach(t),IIo=r(oSe," (M2M100 model)"),oSe.forEach(t),NIo=i(be),vv=n(be,"LI",{});var rSe=s(vv);yhe=n(rSe,"STRONG",{});var pvt=s(yhe);qIo=r(pvt,"marian"),pvt.forEach(t),jIo=r(rSe," \u2014 "),tV=n(rSe,"A",{href:!0});var _vt=s(tV);DIo=r(_vt,"MarianMTModel"),_vt.forEach(t),GIo=r(rSe," (Marian model)"),rSe.forEach(t),OIo=i(be),Fv=n(be,"LI",{});var tSe=s(Fv);xhe=n(tSe,"STRONG",{});var bvt=s(xhe);VIo=r(bvt,"mbart"),bvt.forEach(t),XIo=r(tSe," \u2014 "),aV=n(tSe,"A",{href:!0});var vvt=s(aV);zIo=r(vvt,"MBartForConditionalGeneration"),vvt.forEach(t),QIo=r(tSe," (mBART model)"),tSe.forEach(t),WIo=i(be),Tv=n(be,"LI",{});var aSe=s(Tv);$he=n(aSe,"STRONG",{});var Fvt=s($he);HIo=r(Fvt,"mt5"),Fvt.forEach(t),UIo=r(aSe," \u2014 "),nV=n(aSe,"A",{href:!0});var Tvt=s(nV);JIo=r(Tvt,"MT5ForConditionalGeneration"),Tvt.forEach(t),YIo=r(aSe," (MT5 model)"),aSe.forEach(t),KIo=i(be),Mv=n(be,"LI",{});var nSe=s(Mv);khe=n(nSe,"STRONG",{});var Mvt=s(khe);ZIo=r(Mvt,"pegasus"),Mvt.forEach(t),eNo=r(nSe," \u2014 "),sV=n(nSe,"A",{href:!0});var Evt=s(sV);oNo=r(Evt,"PegasusForConditionalGeneration"),Evt.forEach(t),rNo=r(nSe," (Pegasus model)"),nSe.forEach(t),tNo=i(be),Ev=n(be,"LI",{});var sSe=s(Ev);She=n(sSe,"STRONG",{});var Cvt=s(She);aNo=r(Cvt,"plbart"),Cvt.forEach(t),nNo=r(sSe," \u2014 "),lV=n(sSe,"A",{href:!0});var wvt=s(lV);sNo=r(wvt,"PLBartForConditionalGeneration"),wvt.forEach(t),lNo=r(sSe," (PLBart model)"),sSe.forEach(t),iNo=i(be),Cv=n(be,"LI",{});var lSe=s(Cv);Rhe=n(lSe,"STRONG",{});var Avt=s(Rhe);dNo=r(Avt,"prophetnet"),Avt.forEach(t),cNo=r(lSe," \u2014 "),iV=n(lSe,"A",{href:!0});var Lvt=s(iV);mNo=r(Lvt,"ProphetNetForConditionalGeneration"),Lvt.forEach(t),fNo=r(lSe," (ProphetNet model)"),lSe.forEach(t),gNo=i(be),wv=n(be,"LI",{});var iSe=s(wv);Phe=n(iSe,"STRONG",{});var yvt=s(Phe);hNo=r(yvt,"t5"),yvt.forEach(t),uNo=r(iSe," \u2014 "),dV=n(iSe,"A",{href:!0});var xvt=s(dV);pNo=r(xvt,"T5ForConditionalGeneration"),xvt.forEach(t),_No=r(iSe," (T5 model)"),iSe.forEach(t),bNo=i(be),Av=n(be,"LI",{});var dSe=s(Av);Bhe=n(dSe,"STRONG",{});var $vt=s(Bhe);vNo=r($vt,"xlm-prophetnet"),$vt.forEach(t),FNo=r(dSe," \u2014 "),cV=n(dSe,"A",{href:!0});var kvt=s(cV);TNo=r(kvt,"XLMProphetNetForConditionalGeneration"),kvt.forEach(t),MNo=r(dSe," (XLM-ProphetNet model)"),dSe.forEach(t),be.forEach(t),ENo=i(ia),Lv=n(ia,"P",{});var cSe=s(Lv);CNo=r(cSe,"The model is set in evaluation mode by default using "),Ihe=n(cSe,"CODE",{});var Svt=s(Ihe);wNo=r(Svt,"model.eval()"),Svt.forEach(t),ANo=r(cSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nhe=n(cSe,"CODE",{});var Rvt=s(Nhe);LNo=r(Rvt,"model.train()"),Rvt.forEach(t),cSe.forEach(t),yNo=i(ia),T(yv.$$.fragment,ia),ia.forEach(t),tl.forEach(t),QOe=i(m),Ki=n(m,"H2",{class:!0});var KXe=s(Ki);xv=n(KXe,"A",{id:!0,class:!0,href:!0});var Pvt=s(xv);qhe=n(Pvt,"SPAN",{});var Bvt=s(qhe);T(By.$$.fragment,Bvt),Bvt.forEach(t),Pvt.forEach(t),xNo=i(KXe),jhe=n(KXe,"SPAN",{});var Ivt=s(jhe);$No=r(Ivt,"AutoModelForSequenceClassification"),Ivt.forEach(t),KXe.forEach(t),WOe=i(m),Po=n(m,"DIV",{class:!0});var al=s(Po);T(Iy.$$.fragment,al),kNo=i(al),Zi=n(al,"P",{});var Yoe=s(Zi);SNo=r(Yoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),mV=n(Yoe,"A",{href:!0});var Nvt=s(mV);RNo=r(Nvt,"from_pretrained()"),Nvt.forEach(t),PNo=r(Yoe," class method or the "),fV=n(Yoe,"A",{href:!0});var qvt=s(fV);BNo=r(qvt,"from_config()"),qvt.forEach(t),INo=r(Yoe,` class
method.`),Yoe.forEach(t),NNo=i(al),Ny=n(al,"P",{});var ZXe=s(Ny);qNo=r(ZXe,"This class cannot be instantiated directly using "),Dhe=n(ZXe,"CODE",{});var jvt=s(Dhe);jNo=r(jvt,"__init__()"),jvt.forEach(t),DNo=r(ZXe," (throws an error)."),ZXe.forEach(t),GNo=i(al),ct=n(al,"DIV",{class:!0});var J6=s(ct);T(qy.$$.fragment,J6),ONo=i(J6),Ghe=n(J6,"P",{});var Dvt=s(Ghe);VNo=r(Dvt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Dvt.forEach(t),XNo=i(J6),ed=n(J6,"P",{});var Koe=s(ed);zNo=r(Koe,`Note:
Loading a model from its configuration file does `),Ohe=n(Koe,"STRONG",{});var Gvt=s(Ohe);QNo=r(Gvt,"not"),Gvt.forEach(t),WNo=r(Koe,` load the model weights. It only affects the
model\u2019s configuration. Use `),gV=n(Koe,"A",{href:!0});var Ovt=s(gV);HNo=r(Ovt,"from_pretrained()"),Ovt.forEach(t),UNo=r(Koe," to load the model weights."),Koe.forEach(t),JNo=i(J6),T($v.$$.fragment,J6),J6.forEach(t),YNo=i(al),oo=n(al,"DIV",{class:!0});var da=s(oo);T(jy.$$.fragment,da),KNo=i(da),Vhe=n(da,"P",{});var Vvt=s(Vhe);ZNo=r(Vvt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Vvt.forEach(t),eqo=i(da),qa=n(da,"P",{});var Y6=s(qa);oqo=r(Y6,"The model class to instantiate is selected based on the "),Xhe=n(Y6,"CODE",{});var Xvt=s(Xhe);rqo=r(Xvt,"model_type"),Xvt.forEach(t),tqo=r(Y6,` property of the config object (either
passed as an argument or loaded from `),zhe=n(Y6,"CODE",{});var zvt=s(zhe);aqo=r(zvt,"pretrained_model_name_or_path"),zvt.forEach(t),nqo=r(Y6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qhe=n(Y6,"CODE",{});var Qvt=s(Qhe);sqo=r(Qvt,"pretrained_model_name_or_path"),Qvt.forEach(t),lqo=r(Y6,":"),Y6.forEach(t),iqo=i(da),N=n(da,"UL",{});var q=s(N);kv=n(q,"LI",{});var mSe=s(kv);Whe=n(mSe,"STRONG",{});var Wvt=s(Whe);dqo=r(Wvt,"albert"),Wvt.forEach(t),cqo=r(mSe," \u2014 "),hV=n(mSe,"A",{href:!0});var Hvt=s(hV);mqo=r(Hvt,"AlbertForSequenceClassification"),Hvt.forEach(t),fqo=r(mSe," (ALBERT model)"),mSe.forEach(t),gqo=i(q),Sv=n(q,"LI",{});var fSe=s(Sv);Hhe=n(fSe,"STRONG",{});var Uvt=s(Hhe);hqo=r(Uvt,"bart"),Uvt.forEach(t),uqo=r(fSe," \u2014 "),uV=n(fSe,"A",{href:!0});var Jvt=s(uV);pqo=r(Jvt,"BartForSequenceClassification"),Jvt.forEach(t),_qo=r(fSe," (BART model)"),fSe.forEach(t),bqo=i(q),Rv=n(q,"LI",{});var gSe=s(Rv);Uhe=n(gSe,"STRONG",{});var Yvt=s(Uhe);vqo=r(Yvt,"bert"),Yvt.forEach(t),Fqo=r(gSe," \u2014 "),pV=n(gSe,"A",{href:!0});var Kvt=s(pV);Tqo=r(Kvt,"BertForSequenceClassification"),Kvt.forEach(t),Mqo=r(gSe," (BERT model)"),gSe.forEach(t),Eqo=i(q),Pv=n(q,"LI",{});var hSe=s(Pv);Jhe=n(hSe,"STRONG",{});var Zvt=s(Jhe);Cqo=r(Zvt,"big_bird"),Zvt.forEach(t),wqo=r(hSe," \u2014 "),_V=n(hSe,"A",{href:!0});var e1t=s(_V);Aqo=r(e1t,"BigBirdForSequenceClassification"),e1t.forEach(t),Lqo=r(hSe," (BigBird model)"),hSe.forEach(t),yqo=i(q),Bv=n(q,"LI",{});var uSe=s(Bv);Yhe=n(uSe,"STRONG",{});var o1t=s(Yhe);xqo=r(o1t,"bigbird_pegasus"),o1t.forEach(t),$qo=r(uSe," \u2014 "),bV=n(uSe,"A",{href:!0});var r1t=s(bV);kqo=r(r1t,"BigBirdPegasusForSequenceClassification"),r1t.forEach(t),Sqo=r(uSe," (BigBird-Pegasus model)"),uSe.forEach(t),Rqo=i(q),Iv=n(q,"LI",{});var pSe=s(Iv);Khe=n(pSe,"STRONG",{});var t1t=s(Khe);Pqo=r(t1t,"bloom"),t1t.forEach(t),Bqo=r(pSe," \u2014 "),vV=n(pSe,"A",{href:!0});var a1t=s(vV);Iqo=r(a1t,"BloomForSequenceClassification"),a1t.forEach(t),Nqo=r(pSe," (BLOOM model)"),pSe.forEach(t),qqo=i(q),Nv=n(q,"LI",{});var _Se=s(Nv);Zhe=n(_Se,"STRONG",{});var n1t=s(Zhe);jqo=r(n1t,"camembert"),n1t.forEach(t),Dqo=r(_Se," \u2014 "),FV=n(_Se,"A",{href:!0});var s1t=s(FV);Gqo=r(s1t,"CamembertForSequenceClassification"),s1t.forEach(t),Oqo=r(_Se," (CamemBERT model)"),_Se.forEach(t),Vqo=i(q),qv=n(q,"LI",{});var bSe=s(qv);eue=n(bSe,"STRONG",{});var l1t=s(eue);Xqo=r(l1t,"canine"),l1t.forEach(t),zqo=r(bSe," \u2014 "),TV=n(bSe,"A",{href:!0});var i1t=s(TV);Qqo=r(i1t,"CanineForSequenceClassification"),i1t.forEach(t),Wqo=r(bSe," (CANINE model)"),bSe.forEach(t),Hqo=i(q),jv=n(q,"LI",{});var vSe=s(jv);oue=n(vSe,"STRONG",{});var d1t=s(oue);Uqo=r(d1t,"convbert"),d1t.forEach(t),Jqo=r(vSe," \u2014 "),MV=n(vSe,"A",{href:!0});var c1t=s(MV);Yqo=r(c1t,"ConvBertForSequenceClassification"),c1t.forEach(t),Kqo=r(vSe," (ConvBERT model)"),vSe.forEach(t),Zqo=i(q),Dv=n(q,"LI",{});var FSe=s(Dv);rue=n(FSe,"STRONG",{});var m1t=s(rue);ejo=r(m1t,"ctrl"),m1t.forEach(t),ojo=r(FSe," \u2014 "),EV=n(FSe,"A",{href:!0});var f1t=s(EV);rjo=r(f1t,"CTRLForSequenceClassification"),f1t.forEach(t),tjo=r(FSe," (CTRL model)"),FSe.forEach(t),ajo=i(q),Gv=n(q,"LI",{});var TSe=s(Gv);tue=n(TSe,"STRONG",{});var g1t=s(tue);njo=r(g1t,"data2vec-text"),g1t.forEach(t),sjo=r(TSe," \u2014 "),CV=n(TSe,"A",{href:!0});var h1t=s(CV);ljo=r(h1t,"Data2VecTextForSequenceClassification"),h1t.forEach(t),ijo=r(TSe," (Data2VecText model)"),TSe.forEach(t),djo=i(q),Ov=n(q,"LI",{});var MSe=s(Ov);aue=n(MSe,"STRONG",{});var u1t=s(aue);cjo=r(u1t,"deberta"),u1t.forEach(t),mjo=r(MSe," \u2014 "),wV=n(MSe,"A",{href:!0});var p1t=s(wV);fjo=r(p1t,"DebertaForSequenceClassification"),p1t.forEach(t),gjo=r(MSe," (DeBERTa model)"),MSe.forEach(t),hjo=i(q),Vv=n(q,"LI",{});var ESe=s(Vv);nue=n(ESe,"STRONG",{});var _1t=s(nue);ujo=r(_1t,"deberta-v2"),_1t.forEach(t),pjo=r(ESe," \u2014 "),AV=n(ESe,"A",{href:!0});var b1t=s(AV);_jo=r(b1t,"DebertaV2ForSequenceClassification"),b1t.forEach(t),bjo=r(ESe," (DeBERTa-v2 model)"),ESe.forEach(t),vjo=i(q),Xv=n(q,"LI",{});var CSe=s(Xv);sue=n(CSe,"STRONG",{});var v1t=s(sue);Fjo=r(v1t,"distilbert"),v1t.forEach(t),Tjo=r(CSe," \u2014 "),LV=n(CSe,"A",{href:!0});var F1t=s(LV);Mjo=r(F1t,"DistilBertForSequenceClassification"),F1t.forEach(t),Ejo=r(CSe," (DistilBERT model)"),CSe.forEach(t),Cjo=i(q),zv=n(q,"LI",{});var wSe=s(zv);lue=n(wSe,"STRONG",{});var T1t=s(lue);wjo=r(T1t,"electra"),T1t.forEach(t),Ajo=r(wSe," \u2014 "),yV=n(wSe,"A",{href:!0});var M1t=s(yV);Ljo=r(M1t,"ElectraForSequenceClassification"),M1t.forEach(t),yjo=r(wSe," (ELECTRA model)"),wSe.forEach(t),xjo=i(q),Qv=n(q,"LI",{});var ASe=s(Qv);iue=n(ASe,"STRONG",{});var E1t=s(iue);$jo=r(E1t,"flaubert"),E1t.forEach(t),kjo=r(ASe," \u2014 "),xV=n(ASe,"A",{href:!0});var C1t=s(xV);Sjo=r(C1t,"FlaubertForSequenceClassification"),C1t.forEach(t),Rjo=r(ASe," (FlauBERT model)"),ASe.forEach(t),Pjo=i(q),Wv=n(q,"LI",{});var LSe=s(Wv);due=n(LSe,"STRONG",{});var w1t=s(due);Bjo=r(w1t,"fnet"),w1t.forEach(t),Ijo=r(LSe," \u2014 "),$V=n(LSe,"A",{href:!0});var A1t=s($V);Njo=r(A1t,"FNetForSequenceClassification"),A1t.forEach(t),qjo=r(LSe," (FNet model)"),LSe.forEach(t),jjo=i(q),Hv=n(q,"LI",{});var ySe=s(Hv);cue=n(ySe,"STRONG",{});var L1t=s(cue);Djo=r(L1t,"funnel"),L1t.forEach(t),Gjo=r(ySe," \u2014 "),kV=n(ySe,"A",{href:!0});var y1t=s(kV);Ojo=r(y1t,"FunnelForSequenceClassification"),y1t.forEach(t),Vjo=r(ySe," (Funnel Transformer model)"),ySe.forEach(t),Xjo=i(q),Uv=n(q,"LI",{});var xSe=s(Uv);mue=n(xSe,"STRONG",{});var x1t=s(mue);zjo=r(x1t,"gpt2"),x1t.forEach(t),Qjo=r(xSe," \u2014 "),SV=n(xSe,"A",{href:!0});var $1t=s(SV);Wjo=r($1t,"GPT2ForSequenceClassification"),$1t.forEach(t),Hjo=r(xSe," (OpenAI GPT-2 model)"),xSe.forEach(t),Ujo=i(q),Jv=n(q,"LI",{});var $Se=s(Jv);fue=n($Se,"STRONG",{});var k1t=s(fue);Jjo=r(k1t,"gpt_neo"),k1t.forEach(t),Yjo=r($Se," \u2014 "),RV=n($Se,"A",{href:!0});var S1t=s(RV);Kjo=r(S1t,"GPTNeoForSequenceClassification"),S1t.forEach(t),Zjo=r($Se," (GPT Neo model)"),$Se.forEach(t),eDo=i(q),Yv=n(q,"LI",{});var kSe=s(Yv);gue=n(kSe,"STRONG",{});var R1t=s(gue);oDo=r(R1t,"gptj"),R1t.forEach(t),rDo=r(kSe," \u2014 "),PV=n(kSe,"A",{href:!0});var P1t=s(PV);tDo=r(P1t,"GPTJForSequenceClassification"),P1t.forEach(t),aDo=r(kSe," (GPT-J model)"),kSe.forEach(t),nDo=i(q),Kv=n(q,"LI",{});var SSe=s(Kv);hue=n(SSe,"STRONG",{});var B1t=s(hue);sDo=r(B1t,"ibert"),B1t.forEach(t),lDo=r(SSe," \u2014 "),BV=n(SSe,"A",{href:!0});var I1t=s(BV);iDo=r(I1t,"IBertForSequenceClassification"),I1t.forEach(t),dDo=r(SSe," (I-BERT model)"),SSe.forEach(t),cDo=i(q),Zv=n(q,"LI",{});var RSe=s(Zv);uue=n(RSe,"STRONG",{});var N1t=s(uue);mDo=r(N1t,"layoutlm"),N1t.forEach(t),fDo=r(RSe," \u2014 "),IV=n(RSe,"A",{href:!0});var q1t=s(IV);gDo=r(q1t,"LayoutLMForSequenceClassification"),q1t.forEach(t),hDo=r(RSe," (LayoutLM model)"),RSe.forEach(t),uDo=i(q),e1=n(q,"LI",{});var PSe=s(e1);pue=n(PSe,"STRONG",{});var j1t=s(pue);pDo=r(j1t,"layoutlmv2"),j1t.forEach(t),_Do=r(PSe," \u2014 "),NV=n(PSe,"A",{href:!0});var D1t=s(NV);bDo=r(D1t,"LayoutLMv2ForSequenceClassification"),D1t.forEach(t),vDo=r(PSe," (LayoutLMv2 model)"),PSe.forEach(t),FDo=i(q),o1=n(q,"LI",{});var BSe=s(o1);_ue=n(BSe,"STRONG",{});var G1t=s(_ue);TDo=r(G1t,"layoutlmv3"),G1t.forEach(t),MDo=r(BSe," \u2014 "),qV=n(BSe,"A",{href:!0});var O1t=s(qV);EDo=r(O1t,"LayoutLMv3ForSequenceClassification"),O1t.forEach(t),CDo=r(BSe," (LayoutLMv3 model)"),BSe.forEach(t),wDo=i(q),r1=n(q,"LI",{});var ISe=s(r1);bue=n(ISe,"STRONG",{});var V1t=s(bue);ADo=r(V1t,"led"),V1t.forEach(t),LDo=r(ISe," \u2014 "),jV=n(ISe,"A",{href:!0});var X1t=s(jV);yDo=r(X1t,"LEDForSequenceClassification"),X1t.forEach(t),xDo=r(ISe," (LED model)"),ISe.forEach(t),$Do=i(q),t1=n(q,"LI",{});var NSe=s(t1);vue=n(NSe,"STRONG",{});var z1t=s(vue);kDo=r(z1t,"longformer"),z1t.forEach(t),SDo=r(NSe," \u2014 "),DV=n(NSe,"A",{href:!0});var Q1t=s(DV);RDo=r(Q1t,"LongformerForSequenceClassification"),Q1t.forEach(t),PDo=r(NSe," (Longformer model)"),NSe.forEach(t),BDo=i(q),a1=n(q,"LI",{});var qSe=s(a1);Fue=n(qSe,"STRONG",{});var W1t=s(Fue);IDo=r(W1t,"mbart"),W1t.forEach(t),NDo=r(qSe," \u2014 "),GV=n(qSe,"A",{href:!0});var H1t=s(GV);qDo=r(H1t,"MBartForSequenceClassification"),H1t.forEach(t),jDo=r(qSe," (mBART model)"),qSe.forEach(t),DDo=i(q),n1=n(q,"LI",{});var jSe=s(n1);Tue=n(jSe,"STRONG",{});var U1t=s(Tue);GDo=r(U1t,"megatron-bert"),U1t.forEach(t),ODo=r(jSe," \u2014 "),OV=n(jSe,"A",{href:!0});var J1t=s(OV);VDo=r(J1t,"MegatronBertForSequenceClassification"),J1t.forEach(t),XDo=r(jSe," (Megatron-BERT model)"),jSe.forEach(t),zDo=i(q),s1=n(q,"LI",{});var DSe=s(s1);Mue=n(DSe,"STRONG",{});var Y1t=s(Mue);QDo=r(Y1t,"mobilebert"),Y1t.forEach(t),WDo=r(DSe," \u2014 "),VV=n(DSe,"A",{href:!0});var K1t=s(VV);HDo=r(K1t,"MobileBertForSequenceClassification"),K1t.forEach(t),UDo=r(DSe," (MobileBERT model)"),DSe.forEach(t),JDo=i(q),l1=n(q,"LI",{});var GSe=s(l1);Eue=n(GSe,"STRONG",{});var Z1t=s(Eue);YDo=r(Z1t,"mpnet"),Z1t.forEach(t),KDo=r(GSe," \u2014 "),XV=n(GSe,"A",{href:!0});var eFt=s(XV);ZDo=r(eFt,"MPNetForSequenceClassification"),eFt.forEach(t),eGo=r(GSe," (MPNet model)"),GSe.forEach(t),oGo=i(q),i1=n(q,"LI",{});var OSe=s(i1);Cue=n(OSe,"STRONG",{});var oFt=s(Cue);rGo=r(oFt,"nezha"),oFt.forEach(t),tGo=r(OSe," \u2014 "),zV=n(OSe,"A",{href:!0});var rFt=s(zV);aGo=r(rFt,"NezhaForSequenceClassification"),rFt.forEach(t),nGo=r(OSe," (Nezha model)"),OSe.forEach(t),sGo=i(q),d1=n(q,"LI",{});var VSe=s(d1);wue=n(VSe,"STRONG",{});var tFt=s(wue);lGo=r(tFt,"nystromformer"),tFt.forEach(t),iGo=r(VSe," \u2014 "),QV=n(VSe,"A",{href:!0});var aFt=s(QV);dGo=r(aFt,"NystromformerForSequenceClassification"),aFt.forEach(t),cGo=r(VSe," (Nystr\xF6mformer model)"),VSe.forEach(t),mGo=i(q),c1=n(q,"LI",{});var XSe=s(c1);Aue=n(XSe,"STRONG",{});var nFt=s(Aue);fGo=r(nFt,"openai-gpt"),nFt.forEach(t),gGo=r(XSe," \u2014 "),WV=n(XSe,"A",{href:!0});var sFt=s(WV);hGo=r(sFt,"OpenAIGPTForSequenceClassification"),sFt.forEach(t),uGo=r(XSe," (OpenAI GPT model)"),XSe.forEach(t),pGo=i(q),m1=n(q,"LI",{});var zSe=s(m1);Lue=n(zSe,"STRONG",{});var lFt=s(Lue);_Go=r(lFt,"perceiver"),lFt.forEach(t),bGo=r(zSe," \u2014 "),HV=n(zSe,"A",{href:!0});var iFt=s(HV);vGo=r(iFt,"PerceiverForSequenceClassification"),iFt.forEach(t),FGo=r(zSe," (Perceiver model)"),zSe.forEach(t),TGo=i(q),f1=n(q,"LI",{});var QSe=s(f1);yue=n(QSe,"STRONG",{});var dFt=s(yue);MGo=r(dFt,"plbart"),dFt.forEach(t),EGo=r(QSe," \u2014 "),UV=n(QSe,"A",{href:!0});var cFt=s(UV);CGo=r(cFt,"PLBartForSequenceClassification"),cFt.forEach(t),wGo=r(QSe," (PLBart model)"),QSe.forEach(t),AGo=i(q),g1=n(q,"LI",{});var WSe=s(g1);xue=n(WSe,"STRONG",{});var mFt=s(xue);LGo=r(mFt,"qdqbert"),mFt.forEach(t),yGo=r(WSe," \u2014 "),JV=n(WSe,"A",{href:!0});var fFt=s(JV);xGo=r(fFt,"QDQBertForSequenceClassification"),fFt.forEach(t),$Go=r(WSe," (QDQBert model)"),WSe.forEach(t),kGo=i(q),h1=n(q,"LI",{});var HSe=s(h1);$ue=n(HSe,"STRONG",{});var gFt=s($ue);SGo=r(gFt,"reformer"),gFt.forEach(t),RGo=r(HSe," \u2014 "),YV=n(HSe,"A",{href:!0});var hFt=s(YV);PGo=r(hFt,"ReformerForSequenceClassification"),hFt.forEach(t),BGo=r(HSe," (Reformer model)"),HSe.forEach(t),IGo=i(q),u1=n(q,"LI",{});var USe=s(u1);kue=n(USe,"STRONG",{});var uFt=s(kue);NGo=r(uFt,"rembert"),uFt.forEach(t),qGo=r(USe," \u2014 "),KV=n(USe,"A",{href:!0});var pFt=s(KV);jGo=r(pFt,"RemBertForSequenceClassification"),pFt.forEach(t),DGo=r(USe," (RemBERT model)"),USe.forEach(t),GGo=i(q),p1=n(q,"LI",{});var JSe=s(p1);Sue=n(JSe,"STRONG",{});var _Ft=s(Sue);OGo=r(_Ft,"roberta"),_Ft.forEach(t),VGo=r(JSe," \u2014 "),ZV=n(JSe,"A",{href:!0});var bFt=s(ZV);XGo=r(bFt,"RobertaForSequenceClassification"),bFt.forEach(t),zGo=r(JSe," (RoBERTa model)"),JSe.forEach(t),QGo=i(q),_1=n(q,"LI",{});var YSe=s(_1);Rue=n(YSe,"STRONG",{});var vFt=s(Rue);WGo=r(vFt,"roformer"),vFt.forEach(t),HGo=r(YSe," \u2014 "),eX=n(YSe,"A",{href:!0});var FFt=s(eX);UGo=r(FFt,"RoFormerForSequenceClassification"),FFt.forEach(t),JGo=r(YSe," (RoFormer model)"),YSe.forEach(t),YGo=i(q),b1=n(q,"LI",{});var KSe=s(b1);Pue=n(KSe,"STRONG",{});var TFt=s(Pue);KGo=r(TFt,"squeezebert"),TFt.forEach(t),ZGo=r(KSe," \u2014 "),oX=n(KSe,"A",{href:!0});var MFt=s(oX);eOo=r(MFt,"SqueezeBertForSequenceClassification"),MFt.forEach(t),oOo=r(KSe," (SqueezeBERT model)"),KSe.forEach(t),rOo=i(q),v1=n(q,"LI",{});var ZSe=s(v1);Bue=n(ZSe,"STRONG",{});var EFt=s(Bue);tOo=r(EFt,"tapas"),EFt.forEach(t),aOo=r(ZSe," \u2014 "),rX=n(ZSe,"A",{href:!0});var CFt=s(rX);nOo=r(CFt,"TapasForSequenceClassification"),CFt.forEach(t),sOo=r(ZSe," (TAPAS model)"),ZSe.forEach(t),lOo=i(q),F1=n(q,"LI",{});var eRe=s(F1);Iue=n(eRe,"STRONG",{});var wFt=s(Iue);iOo=r(wFt,"transfo-xl"),wFt.forEach(t),dOo=r(eRe," \u2014 "),tX=n(eRe,"A",{href:!0});var AFt=s(tX);cOo=r(AFt,"TransfoXLForSequenceClassification"),AFt.forEach(t),mOo=r(eRe," (Transformer-XL model)"),eRe.forEach(t),fOo=i(q),T1=n(q,"LI",{});var oRe=s(T1);Nue=n(oRe,"STRONG",{});var LFt=s(Nue);gOo=r(LFt,"xlm"),LFt.forEach(t),hOo=r(oRe," \u2014 "),aX=n(oRe,"A",{href:!0});var yFt=s(aX);uOo=r(yFt,"XLMForSequenceClassification"),yFt.forEach(t),pOo=r(oRe," (XLM model)"),oRe.forEach(t),_Oo=i(q),M1=n(q,"LI",{});var rRe=s(M1);que=n(rRe,"STRONG",{});var xFt=s(que);bOo=r(xFt,"xlm-roberta"),xFt.forEach(t),vOo=r(rRe," \u2014 "),nX=n(rRe,"A",{href:!0});var $Ft=s(nX);FOo=r($Ft,"XLMRobertaForSequenceClassification"),$Ft.forEach(t),TOo=r(rRe," (XLM-RoBERTa model)"),rRe.forEach(t),MOo=i(q),E1=n(q,"LI",{});var tRe=s(E1);jue=n(tRe,"STRONG",{});var kFt=s(jue);EOo=r(kFt,"xlm-roberta-xl"),kFt.forEach(t),COo=r(tRe," \u2014 "),sX=n(tRe,"A",{href:!0});var SFt=s(sX);wOo=r(SFt,"XLMRobertaXLForSequenceClassification"),SFt.forEach(t),AOo=r(tRe," (XLM-RoBERTa-XL model)"),tRe.forEach(t),LOo=i(q),C1=n(q,"LI",{});var aRe=s(C1);Due=n(aRe,"STRONG",{});var RFt=s(Due);yOo=r(RFt,"xlnet"),RFt.forEach(t),xOo=r(aRe," \u2014 "),lX=n(aRe,"A",{href:!0});var PFt=s(lX);$Oo=r(PFt,"XLNetForSequenceClassification"),PFt.forEach(t),kOo=r(aRe," (XLNet model)"),aRe.forEach(t),SOo=i(q),w1=n(q,"LI",{});var nRe=s(w1);Gue=n(nRe,"STRONG",{});var BFt=s(Gue);ROo=r(BFt,"yoso"),BFt.forEach(t),POo=r(nRe," \u2014 "),iX=n(nRe,"A",{href:!0});var IFt=s(iX);BOo=r(IFt,"YosoForSequenceClassification"),IFt.forEach(t),IOo=r(nRe," (YOSO model)"),nRe.forEach(t),q.forEach(t),NOo=i(da),A1=n(da,"P",{});var sRe=s(A1);qOo=r(sRe,"The model is set in evaluation mode by default using "),Oue=n(sRe,"CODE",{});var NFt=s(Oue);jOo=r(NFt,"model.eval()"),NFt.forEach(t),DOo=r(sRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vue=n(sRe,"CODE",{});var qFt=s(Vue);GOo=r(qFt,"model.train()"),qFt.forEach(t),sRe.forEach(t),OOo=i(da),T(L1.$$.fragment,da),da.forEach(t),al.forEach(t),HOe=i(m),od=n(m,"H2",{class:!0});var eze=s(od);y1=n(eze,"A",{id:!0,class:!0,href:!0});var jFt=s(y1);Xue=n(jFt,"SPAN",{});var DFt=s(Xue);T(Dy.$$.fragment,DFt),DFt.forEach(t),jFt.forEach(t),VOo=i(eze),zue=n(eze,"SPAN",{});var GFt=s(zue);XOo=r(GFt,"AutoModelForMultipleChoice"),GFt.forEach(t),eze.forEach(t),UOe=i(m),Bo=n(m,"DIV",{class:!0});var nl=s(Bo);T(Gy.$$.fragment,nl),zOo=i(nl),rd=n(nl,"P",{});var Zoe=s(rd);QOo=r(Zoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),dX=n(Zoe,"A",{href:!0});var OFt=s(dX);WOo=r(OFt,"from_pretrained()"),OFt.forEach(t),HOo=r(Zoe," class method or the "),cX=n(Zoe,"A",{href:!0});var VFt=s(cX);UOo=r(VFt,"from_config()"),VFt.forEach(t),JOo=r(Zoe,` class
method.`),Zoe.forEach(t),YOo=i(nl),Oy=n(nl,"P",{});var oze=s(Oy);KOo=r(oze,"This class cannot be instantiated directly using "),Que=n(oze,"CODE",{});var XFt=s(Que);ZOo=r(XFt,"__init__()"),XFt.forEach(t),eVo=r(oze," (throws an error)."),oze.forEach(t),oVo=i(nl),mt=n(nl,"DIV",{class:!0});var K6=s(mt);T(Vy.$$.fragment,K6),rVo=i(K6),Wue=n(K6,"P",{});var zFt=s(Wue);tVo=r(zFt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),zFt.forEach(t),aVo=i(K6),td=n(K6,"P",{});var ere=s(td);nVo=r(ere,`Note:
Loading a model from its configuration file does `),Hue=n(ere,"STRONG",{});var QFt=s(Hue);sVo=r(QFt,"not"),QFt.forEach(t),lVo=r(ere,` load the model weights. It only affects the
model\u2019s configuration. Use `),mX=n(ere,"A",{href:!0});var WFt=s(mX);iVo=r(WFt,"from_pretrained()"),WFt.forEach(t),dVo=r(ere," to load the model weights."),ere.forEach(t),cVo=i(K6),T(x1.$$.fragment,K6),K6.forEach(t),mVo=i(nl),ro=n(nl,"DIV",{class:!0});var ca=s(ro);T(Xy.$$.fragment,ca),fVo=i(ca),Uue=n(ca,"P",{});var HFt=s(Uue);gVo=r(HFt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),HFt.forEach(t),hVo=i(ca),ja=n(ca,"P",{});var Z6=s(ja);uVo=r(Z6,"The model class to instantiate is selected based on the "),Jue=n(Z6,"CODE",{});var UFt=s(Jue);pVo=r(UFt,"model_type"),UFt.forEach(t),_Vo=r(Z6,` property of the config object (either
passed as an argument or loaded from `),Yue=n(Z6,"CODE",{});var JFt=s(Yue);bVo=r(JFt,"pretrained_model_name_or_path"),JFt.forEach(t),vVo=r(Z6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kue=n(Z6,"CODE",{});var YFt=s(Kue);FVo=r(YFt,"pretrained_model_name_or_path"),YFt.forEach(t),TVo=r(Z6,":"),Z6.forEach(t),MVo=i(ca),Z=n(ca,"UL",{});var ee=s(Z);$1=n(ee,"LI",{});var lRe=s($1);Zue=n(lRe,"STRONG",{});var KFt=s(Zue);EVo=r(KFt,"albert"),KFt.forEach(t),CVo=r(lRe," \u2014 "),fX=n(lRe,"A",{href:!0});var ZFt=s(fX);wVo=r(ZFt,"AlbertForMultipleChoice"),ZFt.forEach(t),AVo=r(lRe," (ALBERT model)"),lRe.forEach(t),LVo=i(ee),k1=n(ee,"LI",{});var iRe=s(k1);epe=n(iRe,"STRONG",{});var eTt=s(epe);yVo=r(eTt,"bert"),eTt.forEach(t),xVo=r(iRe," \u2014 "),gX=n(iRe,"A",{href:!0});var oTt=s(gX);$Vo=r(oTt,"BertForMultipleChoice"),oTt.forEach(t),kVo=r(iRe," (BERT model)"),iRe.forEach(t),SVo=i(ee),S1=n(ee,"LI",{});var dRe=s(S1);ope=n(dRe,"STRONG",{});var rTt=s(ope);RVo=r(rTt,"big_bird"),rTt.forEach(t),PVo=r(dRe," \u2014 "),hX=n(dRe,"A",{href:!0});var tTt=s(hX);BVo=r(tTt,"BigBirdForMultipleChoice"),tTt.forEach(t),IVo=r(dRe," (BigBird model)"),dRe.forEach(t),NVo=i(ee),R1=n(ee,"LI",{});var cRe=s(R1);rpe=n(cRe,"STRONG",{});var aTt=s(rpe);qVo=r(aTt,"camembert"),aTt.forEach(t),jVo=r(cRe," \u2014 "),uX=n(cRe,"A",{href:!0});var nTt=s(uX);DVo=r(nTt,"CamembertForMultipleChoice"),nTt.forEach(t),GVo=r(cRe," (CamemBERT model)"),cRe.forEach(t),OVo=i(ee),P1=n(ee,"LI",{});var mRe=s(P1);tpe=n(mRe,"STRONG",{});var sTt=s(tpe);VVo=r(sTt,"canine"),sTt.forEach(t),XVo=r(mRe," \u2014 "),pX=n(mRe,"A",{href:!0});var lTt=s(pX);zVo=r(lTt,"CanineForMultipleChoice"),lTt.forEach(t),QVo=r(mRe," (CANINE model)"),mRe.forEach(t),WVo=i(ee),B1=n(ee,"LI",{});var fRe=s(B1);ape=n(fRe,"STRONG",{});var iTt=s(ape);HVo=r(iTt,"convbert"),iTt.forEach(t),UVo=r(fRe," \u2014 "),_X=n(fRe,"A",{href:!0});var dTt=s(_X);JVo=r(dTt,"ConvBertForMultipleChoice"),dTt.forEach(t),YVo=r(fRe," (ConvBERT model)"),fRe.forEach(t),KVo=i(ee),I1=n(ee,"LI",{});var gRe=s(I1);npe=n(gRe,"STRONG",{});var cTt=s(npe);ZVo=r(cTt,"data2vec-text"),cTt.forEach(t),eXo=r(gRe," \u2014 "),bX=n(gRe,"A",{href:!0});var mTt=s(bX);oXo=r(mTt,"Data2VecTextForMultipleChoice"),mTt.forEach(t),rXo=r(gRe," (Data2VecText model)"),gRe.forEach(t),tXo=i(ee),N1=n(ee,"LI",{});var hRe=s(N1);spe=n(hRe,"STRONG",{});var fTt=s(spe);aXo=r(fTt,"deberta-v2"),fTt.forEach(t),nXo=r(hRe," \u2014 "),vX=n(hRe,"A",{href:!0});var gTt=s(vX);sXo=r(gTt,"DebertaV2ForMultipleChoice"),gTt.forEach(t),lXo=r(hRe," (DeBERTa-v2 model)"),hRe.forEach(t),iXo=i(ee),q1=n(ee,"LI",{});var uRe=s(q1);lpe=n(uRe,"STRONG",{});var hTt=s(lpe);dXo=r(hTt,"distilbert"),hTt.forEach(t),cXo=r(uRe," \u2014 "),FX=n(uRe,"A",{href:!0});var uTt=s(FX);mXo=r(uTt,"DistilBertForMultipleChoice"),uTt.forEach(t),fXo=r(uRe," (DistilBERT model)"),uRe.forEach(t),gXo=i(ee),j1=n(ee,"LI",{});var pRe=s(j1);ipe=n(pRe,"STRONG",{});var pTt=s(ipe);hXo=r(pTt,"electra"),pTt.forEach(t),uXo=r(pRe," \u2014 "),TX=n(pRe,"A",{href:!0});var _Tt=s(TX);pXo=r(_Tt,"ElectraForMultipleChoice"),_Tt.forEach(t),_Xo=r(pRe," (ELECTRA model)"),pRe.forEach(t),bXo=i(ee),D1=n(ee,"LI",{});var _Re=s(D1);dpe=n(_Re,"STRONG",{});var bTt=s(dpe);vXo=r(bTt,"flaubert"),bTt.forEach(t),FXo=r(_Re," \u2014 "),MX=n(_Re,"A",{href:!0});var vTt=s(MX);TXo=r(vTt,"FlaubertForMultipleChoice"),vTt.forEach(t),MXo=r(_Re," (FlauBERT model)"),_Re.forEach(t),EXo=i(ee),G1=n(ee,"LI",{});var bRe=s(G1);cpe=n(bRe,"STRONG",{});var FTt=s(cpe);CXo=r(FTt,"fnet"),FTt.forEach(t),wXo=r(bRe," \u2014 "),EX=n(bRe,"A",{href:!0});var TTt=s(EX);AXo=r(TTt,"FNetForMultipleChoice"),TTt.forEach(t),LXo=r(bRe," (FNet model)"),bRe.forEach(t),yXo=i(ee),O1=n(ee,"LI",{});var vRe=s(O1);mpe=n(vRe,"STRONG",{});var MTt=s(mpe);xXo=r(MTt,"funnel"),MTt.forEach(t),$Xo=r(vRe," \u2014 "),CX=n(vRe,"A",{href:!0});var ETt=s(CX);kXo=r(ETt,"FunnelForMultipleChoice"),ETt.forEach(t),SXo=r(vRe," (Funnel Transformer model)"),vRe.forEach(t),RXo=i(ee),V1=n(ee,"LI",{});var FRe=s(V1);fpe=n(FRe,"STRONG",{});var CTt=s(fpe);PXo=r(CTt,"ibert"),CTt.forEach(t),BXo=r(FRe," \u2014 "),wX=n(FRe,"A",{href:!0});var wTt=s(wX);IXo=r(wTt,"IBertForMultipleChoice"),wTt.forEach(t),NXo=r(FRe," (I-BERT model)"),FRe.forEach(t),qXo=i(ee),X1=n(ee,"LI",{});var TRe=s(X1);gpe=n(TRe,"STRONG",{});var ATt=s(gpe);jXo=r(ATt,"longformer"),ATt.forEach(t),DXo=r(TRe," \u2014 "),AX=n(TRe,"A",{href:!0});var LTt=s(AX);GXo=r(LTt,"LongformerForMultipleChoice"),LTt.forEach(t),OXo=r(TRe," (Longformer model)"),TRe.forEach(t),VXo=i(ee),z1=n(ee,"LI",{});var MRe=s(z1);hpe=n(MRe,"STRONG",{});var yTt=s(hpe);XXo=r(yTt,"megatron-bert"),yTt.forEach(t),zXo=r(MRe," \u2014 "),LX=n(MRe,"A",{href:!0});var xTt=s(LX);QXo=r(xTt,"MegatronBertForMultipleChoice"),xTt.forEach(t),WXo=r(MRe," (Megatron-BERT model)"),MRe.forEach(t),HXo=i(ee),Q1=n(ee,"LI",{});var ERe=s(Q1);upe=n(ERe,"STRONG",{});var $Tt=s(upe);UXo=r($Tt,"mobilebert"),$Tt.forEach(t),JXo=r(ERe," \u2014 "),yX=n(ERe,"A",{href:!0});var kTt=s(yX);YXo=r(kTt,"MobileBertForMultipleChoice"),kTt.forEach(t),KXo=r(ERe," (MobileBERT model)"),ERe.forEach(t),ZXo=i(ee),W1=n(ee,"LI",{});var CRe=s(W1);ppe=n(CRe,"STRONG",{});var STt=s(ppe);ezo=r(STt,"mpnet"),STt.forEach(t),ozo=r(CRe," \u2014 "),xX=n(CRe,"A",{href:!0});var RTt=s(xX);rzo=r(RTt,"MPNetForMultipleChoice"),RTt.forEach(t),tzo=r(CRe," (MPNet model)"),CRe.forEach(t),azo=i(ee),H1=n(ee,"LI",{});var wRe=s(H1);_pe=n(wRe,"STRONG",{});var PTt=s(_pe);nzo=r(PTt,"nezha"),PTt.forEach(t),szo=r(wRe," \u2014 "),$X=n(wRe,"A",{href:!0});var BTt=s($X);lzo=r(BTt,"NezhaForMultipleChoice"),BTt.forEach(t),izo=r(wRe," (Nezha model)"),wRe.forEach(t),dzo=i(ee),U1=n(ee,"LI",{});var ARe=s(U1);bpe=n(ARe,"STRONG",{});var ITt=s(bpe);czo=r(ITt,"nystromformer"),ITt.forEach(t),mzo=r(ARe," \u2014 "),kX=n(ARe,"A",{href:!0});var NTt=s(kX);fzo=r(NTt,"NystromformerForMultipleChoice"),NTt.forEach(t),gzo=r(ARe," (Nystr\xF6mformer model)"),ARe.forEach(t),hzo=i(ee),J1=n(ee,"LI",{});var LRe=s(J1);vpe=n(LRe,"STRONG",{});var qTt=s(vpe);uzo=r(qTt,"qdqbert"),qTt.forEach(t),pzo=r(LRe," \u2014 "),SX=n(LRe,"A",{href:!0});var jTt=s(SX);_zo=r(jTt,"QDQBertForMultipleChoice"),jTt.forEach(t),bzo=r(LRe," (QDQBert model)"),LRe.forEach(t),vzo=i(ee),Y1=n(ee,"LI",{});var yRe=s(Y1);Fpe=n(yRe,"STRONG",{});var DTt=s(Fpe);Fzo=r(DTt,"rembert"),DTt.forEach(t),Tzo=r(yRe," \u2014 "),RX=n(yRe,"A",{href:!0});var GTt=s(RX);Mzo=r(GTt,"RemBertForMultipleChoice"),GTt.forEach(t),Ezo=r(yRe," (RemBERT model)"),yRe.forEach(t),Czo=i(ee),K1=n(ee,"LI",{});var xRe=s(K1);Tpe=n(xRe,"STRONG",{});var OTt=s(Tpe);wzo=r(OTt,"roberta"),OTt.forEach(t),Azo=r(xRe," \u2014 "),PX=n(xRe,"A",{href:!0});var VTt=s(PX);Lzo=r(VTt,"RobertaForMultipleChoice"),VTt.forEach(t),yzo=r(xRe," (RoBERTa model)"),xRe.forEach(t),xzo=i(ee),Z1=n(ee,"LI",{});var $Re=s(Z1);Mpe=n($Re,"STRONG",{});var XTt=s(Mpe);$zo=r(XTt,"roformer"),XTt.forEach(t),kzo=r($Re," \u2014 "),BX=n($Re,"A",{href:!0});var zTt=s(BX);Szo=r(zTt,"RoFormerForMultipleChoice"),zTt.forEach(t),Rzo=r($Re," (RoFormer model)"),$Re.forEach(t),Pzo=i(ee),eF=n(ee,"LI",{});var kRe=s(eF);Epe=n(kRe,"STRONG",{});var QTt=s(Epe);Bzo=r(QTt,"squeezebert"),QTt.forEach(t),Izo=r(kRe," \u2014 "),IX=n(kRe,"A",{href:!0});var WTt=s(IX);Nzo=r(WTt,"SqueezeBertForMultipleChoice"),WTt.forEach(t),qzo=r(kRe," (SqueezeBERT model)"),kRe.forEach(t),jzo=i(ee),oF=n(ee,"LI",{});var SRe=s(oF);Cpe=n(SRe,"STRONG",{});var HTt=s(Cpe);Dzo=r(HTt,"xlm"),HTt.forEach(t),Gzo=r(SRe," \u2014 "),NX=n(SRe,"A",{href:!0});var UTt=s(NX);Ozo=r(UTt,"XLMForMultipleChoice"),UTt.forEach(t),Vzo=r(SRe," (XLM model)"),SRe.forEach(t),Xzo=i(ee),rF=n(ee,"LI",{});var RRe=s(rF);wpe=n(RRe,"STRONG",{});var JTt=s(wpe);zzo=r(JTt,"xlm-roberta"),JTt.forEach(t),Qzo=r(RRe," \u2014 "),qX=n(RRe,"A",{href:!0});var YTt=s(qX);Wzo=r(YTt,"XLMRobertaForMultipleChoice"),YTt.forEach(t),Hzo=r(RRe," (XLM-RoBERTa model)"),RRe.forEach(t),Uzo=i(ee),tF=n(ee,"LI",{});var PRe=s(tF);Ape=n(PRe,"STRONG",{});var KTt=s(Ape);Jzo=r(KTt,"xlm-roberta-xl"),KTt.forEach(t),Yzo=r(PRe," \u2014 "),jX=n(PRe,"A",{href:!0});var ZTt=s(jX);Kzo=r(ZTt,"XLMRobertaXLForMultipleChoice"),ZTt.forEach(t),Zzo=r(PRe," (XLM-RoBERTa-XL model)"),PRe.forEach(t),eQo=i(ee),aF=n(ee,"LI",{});var BRe=s(aF);Lpe=n(BRe,"STRONG",{});var eMt=s(Lpe);oQo=r(eMt,"xlnet"),eMt.forEach(t),rQo=r(BRe," \u2014 "),DX=n(BRe,"A",{href:!0});var oMt=s(DX);tQo=r(oMt,"XLNetForMultipleChoice"),oMt.forEach(t),aQo=r(BRe," (XLNet model)"),BRe.forEach(t),nQo=i(ee),nF=n(ee,"LI",{});var IRe=s(nF);ype=n(IRe,"STRONG",{});var rMt=s(ype);sQo=r(rMt,"yoso"),rMt.forEach(t),lQo=r(IRe," \u2014 "),GX=n(IRe,"A",{href:!0});var tMt=s(GX);iQo=r(tMt,"YosoForMultipleChoice"),tMt.forEach(t),dQo=r(IRe," (YOSO model)"),IRe.forEach(t),ee.forEach(t),cQo=i(ca),sF=n(ca,"P",{});var NRe=s(sF);mQo=r(NRe,"The model is set in evaluation mode by default using "),xpe=n(NRe,"CODE",{});var aMt=s(xpe);fQo=r(aMt,"model.eval()"),aMt.forEach(t),gQo=r(NRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$pe=n(NRe,"CODE",{});var nMt=s($pe);hQo=r(nMt,"model.train()"),nMt.forEach(t),NRe.forEach(t),uQo=i(ca),T(lF.$$.fragment,ca),ca.forEach(t),nl.forEach(t),JOe=i(m),ad=n(m,"H2",{class:!0});var rze=s(ad);iF=n(rze,"A",{id:!0,class:!0,href:!0});var sMt=s(iF);kpe=n(sMt,"SPAN",{});var lMt=s(kpe);T(zy.$$.fragment,lMt),lMt.forEach(t),sMt.forEach(t),pQo=i(rze),Spe=n(rze,"SPAN",{});var iMt=s(Spe);_Qo=r(iMt,"AutoModelForNextSentencePrediction"),iMt.forEach(t),rze.forEach(t),YOe=i(m),Io=n(m,"DIV",{class:!0});var sl=s(Io);T(Qy.$$.fragment,sl),bQo=i(sl),nd=n(sl,"P",{});var ore=s(nd);vQo=r(ore,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),OX=n(ore,"A",{href:!0});var dMt=s(OX);FQo=r(dMt,"from_pretrained()"),dMt.forEach(t),TQo=r(ore," class method or the "),VX=n(ore,"A",{href:!0});var cMt=s(VX);MQo=r(cMt,"from_config()"),cMt.forEach(t),EQo=r(ore,` class
method.`),ore.forEach(t),CQo=i(sl),Wy=n(sl,"P",{});var tze=s(Wy);wQo=r(tze,"This class cannot be instantiated directly using "),Rpe=n(tze,"CODE",{});var mMt=s(Rpe);AQo=r(mMt,"__init__()"),mMt.forEach(t),LQo=r(tze," (throws an error)."),tze.forEach(t),yQo=i(sl),ft=n(sl,"DIV",{class:!0});var eL=s(ft);T(Hy.$$.fragment,eL),xQo=i(eL),Ppe=n(eL,"P",{});var fMt=s(Ppe);$Qo=r(fMt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),fMt.forEach(t),kQo=i(eL),sd=n(eL,"P",{});var rre=s(sd);SQo=r(rre,`Note:
Loading a model from its configuration file does `),Bpe=n(rre,"STRONG",{});var gMt=s(Bpe);RQo=r(gMt,"not"),gMt.forEach(t),PQo=r(rre,` load the model weights. It only affects the
model\u2019s configuration. Use `),XX=n(rre,"A",{href:!0});var hMt=s(XX);BQo=r(hMt,"from_pretrained()"),hMt.forEach(t),IQo=r(rre," to load the model weights."),rre.forEach(t),NQo=i(eL),T(dF.$$.fragment,eL),eL.forEach(t),qQo=i(sl),to=n(sl,"DIV",{class:!0});var ma=s(to);T(Uy.$$.fragment,ma),jQo=i(ma),Ipe=n(ma,"P",{});var uMt=s(Ipe);DQo=r(uMt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),uMt.forEach(t),GQo=i(ma),Da=n(ma,"P",{});var oL=s(Da);OQo=r(oL,"The model class to instantiate is selected based on the "),Npe=n(oL,"CODE",{});var pMt=s(Npe);VQo=r(pMt,"model_type"),pMt.forEach(t),XQo=r(oL,` property of the config object (either
passed as an argument or loaded from `),qpe=n(oL,"CODE",{});var _Mt=s(qpe);zQo=r(_Mt,"pretrained_model_name_or_path"),_Mt.forEach(t),QQo=r(oL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jpe=n(oL,"CODE",{});var bMt=s(jpe);WQo=r(bMt,"pretrained_model_name_or_path"),bMt.forEach(t),HQo=r(oL,":"),oL.forEach(t),UQo=i(ma),No=n(ma,"UL",{});var fa=s(No);cF=n(fa,"LI",{});var qRe=s(cF);Dpe=n(qRe,"STRONG",{});var vMt=s(Dpe);JQo=r(vMt,"bert"),vMt.forEach(t),YQo=r(qRe," \u2014 "),zX=n(qRe,"A",{href:!0});var FMt=s(zX);KQo=r(FMt,"BertForNextSentencePrediction"),FMt.forEach(t),ZQo=r(qRe," (BERT model)"),qRe.forEach(t),eWo=i(fa),mF=n(fa,"LI",{});var jRe=s(mF);Gpe=n(jRe,"STRONG",{});var TMt=s(Gpe);oWo=r(TMt,"fnet"),TMt.forEach(t),rWo=r(jRe," \u2014 "),QX=n(jRe,"A",{href:!0});var MMt=s(QX);tWo=r(MMt,"FNetForNextSentencePrediction"),MMt.forEach(t),aWo=r(jRe," (FNet model)"),jRe.forEach(t),nWo=i(fa),fF=n(fa,"LI",{});var DRe=s(fF);Ope=n(DRe,"STRONG",{});var EMt=s(Ope);sWo=r(EMt,"megatron-bert"),EMt.forEach(t),lWo=r(DRe," \u2014 "),WX=n(DRe,"A",{href:!0});var CMt=s(WX);iWo=r(CMt,"MegatronBertForNextSentencePrediction"),CMt.forEach(t),dWo=r(DRe," (Megatron-BERT model)"),DRe.forEach(t),cWo=i(fa),gF=n(fa,"LI",{});var GRe=s(gF);Vpe=n(GRe,"STRONG",{});var wMt=s(Vpe);mWo=r(wMt,"mobilebert"),wMt.forEach(t),fWo=r(GRe," \u2014 "),HX=n(GRe,"A",{href:!0});var AMt=s(HX);gWo=r(AMt,"MobileBertForNextSentencePrediction"),AMt.forEach(t),hWo=r(GRe," (MobileBERT model)"),GRe.forEach(t),uWo=i(fa),hF=n(fa,"LI",{});var ORe=s(hF);Xpe=n(ORe,"STRONG",{});var LMt=s(Xpe);pWo=r(LMt,"nezha"),LMt.forEach(t),_Wo=r(ORe," \u2014 "),UX=n(ORe,"A",{href:!0});var yMt=s(UX);bWo=r(yMt,"NezhaForNextSentencePrediction"),yMt.forEach(t),vWo=r(ORe," (Nezha model)"),ORe.forEach(t),FWo=i(fa),uF=n(fa,"LI",{});var VRe=s(uF);zpe=n(VRe,"STRONG",{});var xMt=s(zpe);TWo=r(xMt,"qdqbert"),xMt.forEach(t),MWo=r(VRe," \u2014 "),JX=n(VRe,"A",{href:!0});var $Mt=s(JX);EWo=r($Mt,"QDQBertForNextSentencePrediction"),$Mt.forEach(t),CWo=r(VRe," (QDQBert model)"),VRe.forEach(t),fa.forEach(t),wWo=i(ma),pF=n(ma,"P",{});var XRe=s(pF);AWo=r(XRe,"The model is set in evaluation mode by default using "),Qpe=n(XRe,"CODE",{});var kMt=s(Qpe);LWo=r(kMt,"model.eval()"),kMt.forEach(t),yWo=r(XRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wpe=n(XRe,"CODE",{});var SMt=s(Wpe);xWo=r(SMt,"model.train()"),SMt.forEach(t),XRe.forEach(t),$Wo=i(ma),T(_F.$$.fragment,ma),ma.forEach(t),sl.forEach(t),KOe=i(m),ld=n(m,"H2",{class:!0});var aze=s(ld);bF=n(aze,"A",{id:!0,class:!0,href:!0});var RMt=s(bF);Hpe=n(RMt,"SPAN",{});var PMt=s(Hpe);T(Jy.$$.fragment,PMt),PMt.forEach(t),RMt.forEach(t),kWo=i(aze),Upe=n(aze,"SPAN",{});var BMt=s(Upe);SWo=r(BMt,"AutoModelForTokenClassification"),BMt.forEach(t),aze.forEach(t),ZOe=i(m),qo=n(m,"DIV",{class:!0});var ll=s(qo);T(Yy.$$.fragment,ll),RWo=i(ll),id=n(ll,"P",{});var tre=s(id);PWo=r(tre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),YX=n(tre,"A",{href:!0});var IMt=s(YX);BWo=r(IMt,"from_pretrained()"),IMt.forEach(t),IWo=r(tre," class method or the "),KX=n(tre,"A",{href:!0});var NMt=s(KX);NWo=r(NMt,"from_config()"),NMt.forEach(t),qWo=r(tre,` class
method.`),tre.forEach(t),jWo=i(ll),Ky=n(ll,"P",{});var nze=s(Ky);DWo=r(nze,"This class cannot be instantiated directly using "),Jpe=n(nze,"CODE",{});var qMt=s(Jpe);GWo=r(qMt,"__init__()"),qMt.forEach(t),OWo=r(nze," (throws an error)."),nze.forEach(t),VWo=i(ll),gt=n(ll,"DIV",{class:!0});var rL=s(gt);T(Zy.$$.fragment,rL),XWo=i(rL),Ype=n(rL,"P",{});var jMt=s(Ype);zWo=r(jMt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),jMt.forEach(t),QWo=i(rL),dd=n(rL,"P",{});var are=s(dd);WWo=r(are,`Note:
Loading a model from its configuration file does `),Kpe=n(are,"STRONG",{});var DMt=s(Kpe);HWo=r(DMt,"not"),DMt.forEach(t),UWo=r(are,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZX=n(are,"A",{href:!0});var GMt=s(ZX);JWo=r(GMt,"from_pretrained()"),GMt.forEach(t),YWo=r(are," to load the model weights."),are.forEach(t),KWo=i(rL),T(vF.$$.fragment,rL),rL.forEach(t),ZWo=i(ll),ao=n(ll,"DIV",{class:!0});var ga=s(ao);T(e8.$$.fragment,ga),eHo=i(ga),Zpe=n(ga,"P",{});var OMt=s(Zpe);oHo=r(OMt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),OMt.forEach(t),rHo=i(ga),Ga=n(ga,"P",{});var tL=s(Ga);tHo=r(tL,"The model class to instantiate is selected based on the "),e_e=n(tL,"CODE",{});var VMt=s(e_e);aHo=r(VMt,"model_type"),VMt.forEach(t),nHo=r(tL,` property of the config object (either
passed as an argument or loaded from `),o_e=n(tL,"CODE",{});var XMt=s(o_e);sHo=r(XMt,"pretrained_model_name_or_path"),XMt.forEach(t),lHo=r(tL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r_e=n(tL,"CODE",{});var zMt=s(r_e);iHo=r(zMt,"pretrained_model_name_or_path"),zMt.forEach(t),dHo=r(tL,":"),tL.forEach(t),cHo=i(ga),H=n(ga,"UL",{});var J=s(H);FF=n(J,"LI",{});var zRe=s(FF);t_e=n(zRe,"STRONG",{});var QMt=s(t_e);mHo=r(QMt,"albert"),QMt.forEach(t),fHo=r(zRe," \u2014 "),ez=n(zRe,"A",{href:!0});var WMt=s(ez);gHo=r(WMt,"AlbertForTokenClassification"),WMt.forEach(t),hHo=r(zRe," (ALBERT model)"),zRe.forEach(t),uHo=i(J),TF=n(J,"LI",{});var QRe=s(TF);a_e=n(QRe,"STRONG",{});var HMt=s(a_e);pHo=r(HMt,"bert"),HMt.forEach(t),_Ho=r(QRe," \u2014 "),oz=n(QRe,"A",{href:!0});var UMt=s(oz);bHo=r(UMt,"BertForTokenClassification"),UMt.forEach(t),vHo=r(QRe," (BERT model)"),QRe.forEach(t),FHo=i(J),MF=n(J,"LI",{});var WRe=s(MF);n_e=n(WRe,"STRONG",{});var JMt=s(n_e);THo=r(JMt,"big_bird"),JMt.forEach(t),MHo=r(WRe," \u2014 "),rz=n(WRe,"A",{href:!0});var YMt=s(rz);EHo=r(YMt,"BigBirdForTokenClassification"),YMt.forEach(t),CHo=r(WRe," (BigBird model)"),WRe.forEach(t),wHo=i(J),EF=n(J,"LI",{});var HRe=s(EF);s_e=n(HRe,"STRONG",{});var KMt=s(s_e);AHo=r(KMt,"bloom"),KMt.forEach(t),LHo=r(HRe," \u2014 "),tz=n(HRe,"A",{href:!0});var ZMt=s(tz);yHo=r(ZMt,"BloomForTokenClassification"),ZMt.forEach(t),xHo=r(HRe," (BLOOM model)"),HRe.forEach(t),$Ho=i(J),CF=n(J,"LI",{});var URe=s(CF);l_e=n(URe,"STRONG",{});var eEt=s(l_e);kHo=r(eEt,"camembert"),eEt.forEach(t),SHo=r(URe," \u2014 "),az=n(URe,"A",{href:!0});var oEt=s(az);RHo=r(oEt,"CamembertForTokenClassification"),oEt.forEach(t),PHo=r(URe," (CamemBERT model)"),URe.forEach(t),BHo=i(J),wF=n(J,"LI",{});var JRe=s(wF);i_e=n(JRe,"STRONG",{});var rEt=s(i_e);IHo=r(rEt,"canine"),rEt.forEach(t),NHo=r(JRe," \u2014 "),nz=n(JRe,"A",{href:!0});var tEt=s(nz);qHo=r(tEt,"CanineForTokenClassification"),tEt.forEach(t),jHo=r(JRe," (CANINE model)"),JRe.forEach(t),DHo=i(J),AF=n(J,"LI",{});var YRe=s(AF);d_e=n(YRe,"STRONG",{});var aEt=s(d_e);GHo=r(aEt,"convbert"),aEt.forEach(t),OHo=r(YRe," \u2014 "),sz=n(YRe,"A",{href:!0});var nEt=s(sz);VHo=r(nEt,"ConvBertForTokenClassification"),nEt.forEach(t),XHo=r(YRe," (ConvBERT model)"),YRe.forEach(t),zHo=i(J),LF=n(J,"LI",{});var KRe=s(LF);c_e=n(KRe,"STRONG",{});var sEt=s(c_e);QHo=r(sEt,"data2vec-text"),sEt.forEach(t),WHo=r(KRe," \u2014 "),lz=n(KRe,"A",{href:!0});var lEt=s(lz);HHo=r(lEt,"Data2VecTextForTokenClassification"),lEt.forEach(t),UHo=r(KRe," (Data2VecText model)"),KRe.forEach(t),JHo=i(J),yF=n(J,"LI",{});var ZRe=s(yF);m_e=n(ZRe,"STRONG",{});var iEt=s(m_e);YHo=r(iEt,"deberta"),iEt.forEach(t),KHo=r(ZRe," \u2014 "),iz=n(ZRe,"A",{href:!0});var dEt=s(iz);ZHo=r(dEt,"DebertaForTokenClassification"),dEt.forEach(t),eUo=r(ZRe," (DeBERTa model)"),ZRe.forEach(t),oUo=i(J),xF=n(J,"LI",{});var ePe=s(xF);f_e=n(ePe,"STRONG",{});var cEt=s(f_e);rUo=r(cEt,"deberta-v2"),cEt.forEach(t),tUo=r(ePe," \u2014 "),dz=n(ePe,"A",{href:!0});var mEt=s(dz);aUo=r(mEt,"DebertaV2ForTokenClassification"),mEt.forEach(t),nUo=r(ePe," (DeBERTa-v2 model)"),ePe.forEach(t),sUo=i(J),$F=n(J,"LI",{});var oPe=s($F);g_e=n(oPe,"STRONG",{});var fEt=s(g_e);lUo=r(fEt,"distilbert"),fEt.forEach(t),iUo=r(oPe," \u2014 "),cz=n(oPe,"A",{href:!0});var gEt=s(cz);dUo=r(gEt,"DistilBertForTokenClassification"),gEt.forEach(t),cUo=r(oPe," (DistilBERT model)"),oPe.forEach(t),mUo=i(J),kF=n(J,"LI",{});var rPe=s(kF);h_e=n(rPe,"STRONG",{});var hEt=s(h_e);fUo=r(hEt,"electra"),hEt.forEach(t),gUo=r(rPe," \u2014 "),mz=n(rPe,"A",{href:!0});var uEt=s(mz);hUo=r(uEt,"ElectraForTokenClassification"),uEt.forEach(t),uUo=r(rPe," (ELECTRA model)"),rPe.forEach(t),pUo=i(J),SF=n(J,"LI",{});var tPe=s(SF);u_e=n(tPe,"STRONG",{});var pEt=s(u_e);_Uo=r(pEt,"flaubert"),pEt.forEach(t),bUo=r(tPe," \u2014 "),fz=n(tPe,"A",{href:!0});var _Et=s(fz);vUo=r(_Et,"FlaubertForTokenClassification"),_Et.forEach(t),FUo=r(tPe," (FlauBERT model)"),tPe.forEach(t),TUo=i(J),RF=n(J,"LI",{});var aPe=s(RF);p_e=n(aPe,"STRONG",{});var bEt=s(p_e);MUo=r(bEt,"fnet"),bEt.forEach(t),EUo=r(aPe," \u2014 "),gz=n(aPe,"A",{href:!0});var vEt=s(gz);CUo=r(vEt,"FNetForTokenClassification"),vEt.forEach(t),wUo=r(aPe," (FNet model)"),aPe.forEach(t),AUo=i(J),PF=n(J,"LI",{});var nPe=s(PF);__e=n(nPe,"STRONG",{});var FEt=s(__e);LUo=r(FEt,"funnel"),FEt.forEach(t),yUo=r(nPe," \u2014 "),hz=n(nPe,"A",{href:!0});var TEt=s(hz);xUo=r(TEt,"FunnelForTokenClassification"),TEt.forEach(t),$Uo=r(nPe," (Funnel Transformer model)"),nPe.forEach(t),kUo=i(J),BF=n(J,"LI",{});var sPe=s(BF);b_e=n(sPe,"STRONG",{});var MEt=s(b_e);SUo=r(MEt,"gpt2"),MEt.forEach(t),RUo=r(sPe," \u2014 "),uz=n(sPe,"A",{href:!0});var EEt=s(uz);PUo=r(EEt,"GPT2ForTokenClassification"),EEt.forEach(t),BUo=r(sPe," (OpenAI GPT-2 model)"),sPe.forEach(t),IUo=i(J),IF=n(J,"LI",{});var lPe=s(IF);v_e=n(lPe,"STRONG",{});var CEt=s(v_e);NUo=r(CEt,"ibert"),CEt.forEach(t),qUo=r(lPe," \u2014 "),pz=n(lPe,"A",{href:!0});var wEt=s(pz);jUo=r(wEt,"IBertForTokenClassification"),wEt.forEach(t),DUo=r(lPe," (I-BERT model)"),lPe.forEach(t),GUo=i(J),NF=n(J,"LI",{});var iPe=s(NF);F_e=n(iPe,"STRONG",{});var AEt=s(F_e);OUo=r(AEt,"layoutlm"),AEt.forEach(t),VUo=r(iPe," \u2014 "),_z=n(iPe,"A",{href:!0});var LEt=s(_z);XUo=r(LEt,"LayoutLMForTokenClassification"),LEt.forEach(t),zUo=r(iPe," (LayoutLM model)"),iPe.forEach(t),QUo=i(J),qF=n(J,"LI",{});var dPe=s(qF);T_e=n(dPe,"STRONG",{});var yEt=s(T_e);WUo=r(yEt,"layoutlmv2"),yEt.forEach(t),HUo=r(dPe," \u2014 "),bz=n(dPe,"A",{href:!0});var xEt=s(bz);UUo=r(xEt,"LayoutLMv2ForTokenClassification"),xEt.forEach(t),JUo=r(dPe," (LayoutLMv2 model)"),dPe.forEach(t),YUo=i(J),jF=n(J,"LI",{});var cPe=s(jF);M_e=n(cPe,"STRONG",{});var $Et=s(M_e);KUo=r($Et,"layoutlmv3"),$Et.forEach(t),ZUo=r(cPe," \u2014 "),vz=n(cPe,"A",{href:!0});var kEt=s(vz);eJo=r(kEt,"LayoutLMv3ForTokenClassification"),kEt.forEach(t),oJo=r(cPe," (LayoutLMv3 model)"),cPe.forEach(t),rJo=i(J),DF=n(J,"LI",{});var mPe=s(DF);E_e=n(mPe,"STRONG",{});var SEt=s(E_e);tJo=r(SEt,"longformer"),SEt.forEach(t),aJo=r(mPe," \u2014 "),Fz=n(mPe,"A",{href:!0});var REt=s(Fz);nJo=r(REt,"LongformerForTokenClassification"),REt.forEach(t),sJo=r(mPe," (Longformer model)"),mPe.forEach(t),lJo=i(J),GF=n(J,"LI",{});var fPe=s(GF);C_e=n(fPe,"STRONG",{});var PEt=s(C_e);iJo=r(PEt,"megatron-bert"),PEt.forEach(t),dJo=r(fPe," \u2014 "),Tz=n(fPe,"A",{href:!0});var BEt=s(Tz);cJo=r(BEt,"MegatronBertForTokenClassification"),BEt.forEach(t),mJo=r(fPe," (Megatron-BERT model)"),fPe.forEach(t),fJo=i(J),OF=n(J,"LI",{});var gPe=s(OF);w_e=n(gPe,"STRONG",{});var IEt=s(w_e);gJo=r(IEt,"mobilebert"),IEt.forEach(t),hJo=r(gPe," \u2014 "),Mz=n(gPe,"A",{href:!0});var NEt=s(Mz);uJo=r(NEt,"MobileBertForTokenClassification"),NEt.forEach(t),pJo=r(gPe," (MobileBERT model)"),gPe.forEach(t),_Jo=i(J),VF=n(J,"LI",{});var hPe=s(VF);A_e=n(hPe,"STRONG",{});var qEt=s(A_e);bJo=r(qEt,"mpnet"),qEt.forEach(t),vJo=r(hPe," \u2014 "),Ez=n(hPe,"A",{href:!0});var jEt=s(Ez);FJo=r(jEt,"MPNetForTokenClassification"),jEt.forEach(t),TJo=r(hPe," (MPNet model)"),hPe.forEach(t),MJo=i(J),XF=n(J,"LI",{});var uPe=s(XF);L_e=n(uPe,"STRONG",{});var DEt=s(L_e);EJo=r(DEt,"nezha"),DEt.forEach(t),CJo=r(uPe," \u2014 "),Cz=n(uPe,"A",{href:!0});var GEt=s(Cz);wJo=r(GEt,"NezhaForTokenClassification"),GEt.forEach(t),AJo=r(uPe," (Nezha model)"),uPe.forEach(t),LJo=i(J),zF=n(J,"LI",{});var pPe=s(zF);y_e=n(pPe,"STRONG",{});var OEt=s(y_e);yJo=r(OEt,"nystromformer"),OEt.forEach(t),xJo=r(pPe," \u2014 "),wz=n(pPe,"A",{href:!0});var VEt=s(wz);$Jo=r(VEt,"NystromformerForTokenClassification"),VEt.forEach(t),kJo=r(pPe," (Nystr\xF6mformer model)"),pPe.forEach(t),SJo=i(J),QF=n(J,"LI",{});var _Pe=s(QF);x_e=n(_Pe,"STRONG",{});var XEt=s(x_e);RJo=r(XEt,"qdqbert"),XEt.forEach(t),PJo=r(_Pe," \u2014 "),Az=n(_Pe,"A",{href:!0});var zEt=s(Az);BJo=r(zEt,"QDQBertForTokenClassification"),zEt.forEach(t),IJo=r(_Pe," (QDQBert model)"),_Pe.forEach(t),NJo=i(J),WF=n(J,"LI",{});var bPe=s(WF);$_e=n(bPe,"STRONG",{});var QEt=s($_e);qJo=r(QEt,"rembert"),QEt.forEach(t),jJo=r(bPe," \u2014 "),Lz=n(bPe,"A",{href:!0});var WEt=s(Lz);DJo=r(WEt,"RemBertForTokenClassification"),WEt.forEach(t),GJo=r(bPe," (RemBERT model)"),bPe.forEach(t),OJo=i(J),HF=n(J,"LI",{});var vPe=s(HF);k_e=n(vPe,"STRONG",{});var HEt=s(k_e);VJo=r(HEt,"roberta"),HEt.forEach(t),XJo=r(vPe," \u2014 "),yz=n(vPe,"A",{href:!0});var UEt=s(yz);zJo=r(UEt,"RobertaForTokenClassification"),UEt.forEach(t),QJo=r(vPe," (RoBERTa model)"),vPe.forEach(t),WJo=i(J),UF=n(J,"LI",{});var FPe=s(UF);S_e=n(FPe,"STRONG",{});var JEt=s(S_e);HJo=r(JEt,"roformer"),JEt.forEach(t),UJo=r(FPe," \u2014 "),xz=n(FPe,"A",{href:!0});var YEt=s(xz);JJo=r(YEt,"RoFormerForTokenClassification"),YEt.forEach(t),YJo=r(FPe," (RoFormer model)"),FPe.forEach(t),KJo=i(J),JF=n(J,"LI",{});var TPe=s(JF);R_e=n(TPe,"STRONG",{});var KEt=s(R_e);ZJo=r(KEt,"squeezebert"),KEt.forEach(t),eYo=r(TPe," \u2014 "),$z=n(TPe,"A",{href:!0});var ZEt=s($z);oYo=r(ZEt,"SqueezeBertForTokenClassification"),ZEt.forEach(t),rYo=r(TPe," (SqueezeBERT model)"),TPe.forEach(t),tYo=i(J),YF=n(J,"LI",{});var MPe=s(YF);P_e=n(MPe,"STRONG",{});var e4t=s(P_e);aYo=r(e4t,"xlm"),e4t.forEach(t),nYo=r(MPe," \u2014 "),kz=n(MPe,"A",{href:!0});var o4t=s(kz);sYo=r(o4t,"XLMForTokenClassification"),o4t.forEach(t),lYo=r(MPe," (XLM model)"),MPe.forEach(t),iYo=i(J),KF=n(J,"LI",{});var EPe=s(KF);B_e=n(EPe,"STRONG",{});var r4t=s(B_e);dYo=r(r4t,"xlm-roberta"),r4t.forEach(t),cYo=r(EPe," \u2014 "),Sz=n(EPe,"A",{href:!0});var t4t=s(Sz);mYo=r(t4t,"XLMRobertaForTokenClassification"),t4t.forEach(t),fYo=r(EPe," (XLM-RoBERTa model)"),EPe.forEach(t),gYo=i(J),ZF=n(J,"LI",{});var CPe=s(ZF);I_e=n(CPe,"STRONG",{});var a4t=s(I_e);hYo=r(a4t,"xlm-roberta-xl"),a4t.forEach(t),uYo=r(CPe," \u2014 "),Rz=n(CPe,"A",{href:!0});var n4t=s(Rz);pYo=r(n4t,"XLMRobertaXLForTokenClassification"),n4t.forEach(t),_Yo=r(CPe," (XLM-RoBERTa-XL model)"),CPe.forEach(t),bYo=i(J),eT=n(J,"LI",{});var wPe=s(eT);N_e=n(wPe,"STRONG",{});var s4t=s(N_e);vYo=r(s4t,"xlnet"),s4t.forEach(t),FYo=r(wPe," \u2014 "),Pz=n(wPe,"A",{href:!0});var l4t=s(Pz);TYo=r(l4t,"XLNetForTokenClassification"),l4t.forEach(t),MYo=r(wPe," (XLNet model)"),wPe.forEach(t),EYo=i(J),oT=n(J,"LI",{});var APe=s(oT);q_e=n(APe,"STRONG",{});var i4t=s(q_e);CYo=r(i4t,"yoso"),i4t.forEach(t),wYo=r(APe," \u2014 "),Bz=n(APe,"A",{href:!0});var d4t=s(Bz);AYo=r(d4t,"YosoForTokenClassification"),d4t.forEach(t),LYo=r(APe," (YOSO model)"),APe.forEach(t),J.forEach(t),yYo=i(ga),rT=n(ga,"P",{});var LPe=s(rT);xYo=r(LPe,"The model is set in evaluation mode by default using "),j_e=n(LPe,"CODE",{});var c4t=s(j_e);$Yo=r(c4t,"model.eval()"),c4t.forEach(t),kYo=r(LPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),D_e=n(LPe,"CODE",{});var m4t=s(D_e);SYo=r(m4t,"model.train()"),m4t.forEach(t),LPe.forEach(t),RYo=i(ga),T(tT.$$.fragment,ga),ga.forEach(t),ll.forEach(t),eVe=i(m),cd=n(m,"H2",{class:!0});var sze=s(cd);aT=n(sze,"A",{id:!0,class:!0,href:!0});var f4t=s(aT);G_e=n(f4t,"SPAN",{});var g4t=s(G_e);T(o8.$$.fragment,g4t),g4t.forEach(t),f4t.forEach(t),PYo=i(sze),O_e=n(sze,"SPAN",{});var h4t=s(O_e);BYo=r(h4t,"AutoModelForQuestionAnswering"),h4t.forEach(t),sze.forEach(t),oVe=i(m),jo=n(m,"DIV",{class:!0});var il=s(jo);T(r8.$$.fragment,il),IYo=i(il),md=n(il,"P",{});var nre=s(md);NYo=r(nre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Iz=n(nre,"A",{href:!0});var u4t=s(Iz);qYo=r(u4t,"from_pretrained()"),u4t.forEach(t),jYo=r(nre," class method or the "),Nz=n(nre,"A",{href:!0});var p4t=s(Nz);DYo=r(p4t,"from_config()"),p4t.forEach(t),GYo=r(nre,` class
method.`),nre.forEach(t),OYo=i(il),t8=n(il,"P",{});var lze=s(t8);VYo=r(lze,"This class cannot be instantiated directly using "),V_e=n(lze,"CODE",{});var _4t=s(V_e);XYo=r(_4t,"__init__()"),_4t.forEach(t),zYo=r(lze," (throws an error)."),lze.forEach(t),QYo=i(il),ht=n(il,"DIV",{class:!0});var aL=s(ht);T(a8.$$.fragment,aL),WYo=i(aL),X_e=n(aL,"P",{});var b4t=s(X_e);HYo=r(b4t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),b4t.forEach(t),UYo=i(aL),fd=n(aL,"P",{});var sre=s(fd);JYo=r(sre,`Note:
Loading a model from its configuration file does `),z_e=n(sre,"STRONG",{});var v4t=s(z_e);YYo=r(v4t,"not"),v4t.forEach(t),KYo=r(sre,` load the model weights. It only affects the
model\u2019s configuration. Use `),qz=n(sre,"A",{href:!0});var F4t=s(qz);ZYo=r(F4t,"from_pretrained()"),F4t.forEach(t),eKo=r(sre," to load the model weights."),sre.forEach(t),oKo=i(aL),T(nT.$$.fragment,aL),aL.forEach(t),rKo=i(il),no=n(il,"DIV",{class:!0});var ha=s(no);T(n8.$$.fragment,ha),tKo=i(ha),Q_e=n(ha,"P",{});var T4t=s(Q_e);aKo=r(T4t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),T4t.forEach(t),nKo=i(ha),Oa=n(ha,"P",{});var nL=s(Oa);sKo=r(nL,"The model class to instantiate is selected based on the "),W_e=n(nL,"CODE",{});var M4t=s(W_e);lKo=r(M4t,"model_type"),M4t.forEach(t),iKo=r(nL,` property of the config object (either
passed as an argument or loaded from `),H_e=n(nL,"CODE",{});var E4t=s(H_e);dKo=r(E4t,"pretrained_model_name_or_path"),E4t.forEach(t),cKo=r(nL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U_e=n(nL,"CODE",{});var C4t=s(U_e);mKo=r(C4t,"pretrained_model_name_or_path"),C4t.forEach(t),fKo=r(nL,":"),nL.forEach(t),gKo=i(ha),V=n(ha,"UL",{});var X=s(V);sT=n(X,"LI",{});var yPe=s(sT);J_e=n(yPe,"STRONG",{});var w4t=s(J_e);hKo=r(w4t,"albert"),w4t.forEach(t),uKo=r(yPe," \u2014 "),jz=n(yPe,"A",{href:!0});var A4t=s(jz);pKo=r(A4t,"AlbertForQuestionAnswering"),A4t.forEach(t),_Ko=r(yPe," (ALBERT model)"),yPe.forEach(t),bKo=i(X),lT=n(X,"LI",{});var xPe=s(lT);Y_e=n(xPe,"STRONG",{});var L4t=s(Y_e);vKo=r(L4t,"bart"),L4t.forEach(t),FKo=r(xPe," \u2014 "),Dz=n(xPe,"A",{href:!0});var y4t=s(Dz);TKo=r(y4t,"BartForQuestionAnswering"),y4t.forEach(t),MKo=r(xPe," (BART model)"),xPe.forEach(t),EKo=i(X),iT=n(X,"LI",{});var $Pe=s(iT);K_e=n($Pe,"STRONG",{});var x4t=s(K_e);CKo=r(x4t,"bert"),x4t.forEach(t),wKo=r($Pe," \u2014 "),Gz=n($Pe,"A",{href:!0});var $4t=s(Gz);AKo=r($4t,"BertForQuestionAnswering"),$4t.forEach(t),LKo=r($Pe," (BERT model)"),$Pe.forEach(t),yKo=i(X),dT=n(X,"LI",{});var kPe=s(dT);Z_e=n(kPe,"STRONG",{});var k4t=s(Z_e);xKo=r(k4t,"big_bird"),k4t.forEach(t),$Ko=r(kPe," \u2014 "),Oz=n(kPe,"A",{href:!0});var S4t=s(Oz);kKo=r(S4t,"BigBirdForQuestionAnswering"),S4t.forEach(t),SKo=r(kPe," (BigBird model)"),kPe.forEach(t),RKo=i(X),cT=n(X,"LI",{});var SPe=s(cT);e2e=n(SPe,"STRONG",{});var R4t=s(e2e);PKo=r(R4t,"bigbird_pegasus"),R4t.forEach(t),BKo=r(SPe," \u2014 "),Vz=n(SPe,"A",{href:!0});var P4t=s(Vz);IKo=r(P4t,"BigBirdPegasusForQuestionAnswering"),P4t.forEach(t),NKo=r(SPe," (BigBird-Pegasus model)"),SPe.forEach(t),qKo=i(X),mT=n(X,"LI",{});var RPe=s(mT);o2e=n(RPe,"STRONG",{});var B4t=s(o2e);jKo=r(B4t,"camembert"),B4t.forEach(t),DKo=r(RPe," \u2014 "),Xz=n(RPe,"A",{href:!0});var I4t=s(Xz);GKo=r(I4t,"CamembertForQuestionAnswering"),I4t.forEach(t),OKo=r(RPe," (CamemBERT model)"),RPe.forEach(t),VKo=i(X),fT=n(X,"LI",{});var PPe=s(fT);r2e=n(PPe,"STRONG",{});var N4t=s(r2e);XKo=r(N4t,"canine"),N4t.forEach(t),zKo=r(PPe," \u2014 "),zz=n(PPe,"A",{href:!0});var q4t=s(zz);QKo=r(q4t,"CanineForQuestionAnswering"),q4t.forEach(t),WKo=r(PPe," (CANINE model)"),PPe.forEach(t),HKo=i(X),gT=n(X,"LI",{});var BPe=s(gT);t2e=n(BPe,"STRONG",{});var j4t=s(t2e);UKo=r(j4t,"convbert"),j4t.forEach(t),JKo=r(BPe," \u2014 "),Qz=n(BPe,"A",{href:!0});var D4t=s(Qz);YKo=r(D4t,"ConvBertForQuestionAnswering"),D4t.forEach(t),KKo=r(BPe," (ConvBERT model)"),BPe.forEach(t),ZKo=i(X),hT=n(X,"LI",{});var IPe=s(hT);a2e=n(IPe,"STRONG",{});var G4t=s(a2e);eZo=r(G4t,"data2vec-text"),G4t.forEach(t),oZo=r(IPe," \u2014 "),Wz=n(IPe,"A",{href:!0});var O4t=s(Wz);rZo=r(O4t,"Data2VecTextForQuestionAnswering"),O4t.forEach(t),tZo=r(IPe," (Data2VecText model)"),IPe.forEach(t),aZo=i(X),uT=n(X,"LI",{});var NPe=s(uT);n2e=n(NPe,"STRONG",{});var V4t=s(n2e);nZo=r(V4t,"deberta"),V4t.forEach(t),sZo=r(NPe," \u2014 "),Hz=n(NPe,"A",{href:!0});var X4t=s(Hz);lZo=r(X4t,"DebertaForQuestionAnswering"),X4t.forEach(t),iZo=r(NPe," (DeBERTa model)"),NPe.forEach(t),dZo=i(X),pT=n(X,"LI",{});var qPe=s(pT);s2e=n(qPe,"STRONG",{});var z4t=s(s2e);cZo=r(z4t,"deberta-v2"),z4t.forEach(t),mZo=r(qPe," \u2014 "),Uz=n(qPe,"A",{href:!0});var Q4t=s(Uz);fZo=r(Q4t,"DebertaV2ForQuestionAnswering"),Q4t.forEach(t),gZo=r(qPe," (DeBERTa-v2 model)"),qPe.forEach(t),hZo=i(X),_T=n(X,"LI",{});var jPe=s(_T);l2e=n(jPe,"STRONG",{});var W4t=s(l2e);uZo=r(W4t,"distilbert"),W4t.forEach(t),pZo=r(jPe," \u2014 "),Jz=n(jPe,"A",{href:!0});var H4t=s(Jz);_Zo=r(H4t,"DistilBertForQuestionAnswering"),H4t.forEach(t),bZo=r(jPe," (DistilBERT model)"),jPe.forEach(t),vZo=i(X),bT=n(X,"LI",{});var DPe=s(bT);i2e=n(DPe,"STRONG",{});var U4t=s(i2e);FZo=r(U4t,"electra"),U4t.forEach(t),TZo=r(DPe," \u2014 "),Yz=n(DPe,"A",{href:!0});var J4t=s(Yz);MZo=r(J4t,"ElectraForQuestionAnswering"),J4t.forEach(t),EZo=r(DPe," (ELECTRA model)"),DPe.forEach(t),CZo=i(X),vT=n(X,"LI",{});var GPe=s(vT);d2e=n(GPe,"STRONG",{});var Y4t=s(d2e);wZo=r(Y4t,"flaubert"),Y4t.forEach(t),AZo=r(GPe," \u2014 "),Kz=n(GPe,"A",{href:!0});var K4t=s(Kz);LZo=r(K4t,"FlaubertForQuestionAnsweringSimple"),K4t.forEach(t),yZo=r(GPe," (FlauBERT model)"),GPe.forEach(t),xZo=i(X),FT=n(X,"LI",{});var OPe=s(FT);c2e=n(OPe,"STRONG",{});var Z4t=s(c2e);$Zo=r(Z4t,"fnet"),Z4t.forEach(t),kZo=r(OPe," \u2014 "),Zz=n(OPe,"A",{href:!0});var eCt=s(Zz);SZo=r(eCt,"FNetForQuestionAnswering"),eCt.forEach(t),RZo=r(OPe," (FNet model)"),OPe.forEach(t),PZo=i(X),TT=n(X,"LI",{});var VPe=s(TT);m2e=n(VPe,"STRONG",{});var oCt=s(m2e);BZo=r(oCt,"funnel"),oCt.forEach(t),IZo=r(VPe," \u2014 "),eQ=n(VPe,"A",{href:!0});var rCt=s(eQ);NZo=r(rCt,"FunnelForQuestionAnswering"),rCt.forEach(t),qZo=r(VPe," (Funnel Transformer model)"),VPe.forEach(t),jZo=i(X),MT=n(X,"LI",{});var XPe=s(MT);f2e=n(XPe,"STRONG",{});var tCt=s(f2e);DZo=r(tCt,"gptj"),tCt.forEach(t),GZo=r(XPe," \u2014 "),oQ=n(XPe,"A",{href:!0});var aCt=s(oQ);OZo=r(aCt,"GPTJForQuestionAnswering"),aCt.forEach(t),VZo=r(XPe," (GPT-J model)"),XPe.forEach(t),XZo=i(X),ET=n(X,"LI",{});var zPe=s(ET);g2e=n(zPe,"STRONG",{});var nCt=s(g2e);zZo=r(nCt,"ibert"),nCt.forEach(t),QZo=r(zPe," \u2014 "),rQ=n(zPe,"A",{href:!0});var sCt=s(rQ);WZo=r(sCt,"IBertForQuestionAnswering"),sCt.forEach(t),HZo=r(zPe," (I-BERT model)"),zPe.forEach(t),UZo=i(X),CT=n(X,"LI",{});var QPe=s(CT);h2e=n(QPe,"STRONG",{});var lCt=s(h2e);JZo=r(lCt,"layoutlmv2"),lCt.forEach(t),YZo=r(QPe," \u2014 "),tQ=n(QPe,"A",{href:!0});var iCt=s(tQ);KZo=r(iCt,"LayoutLMv2ForQuestionAnswering"),iCt.forEach(t),ZZo=r(QPe," (LayoutLMv2 model)"),QPe.forEach(t),eer=i(X),wT=n(X,"LI",{});var WPe=s(wT);u2e=n(WPe,"STRONG",{});var dCt=s(u2e);oer=r(dCt,"layoutlmv3"),dCt.forEach(t),rer=r(WPe," \u2014 "),aQ=n(WPe,"A",{href:!0});var cCt=s(aQ);ter=r(cCt,"LayoutLMv3ForQuestionAnswering"),cCt.forEach(t),aer=r(WPe," (LayoutLMv3 model)"),WPe.forEach(t),ner=i(X),AT=n(X,"LI",{});var HPe=s(AT);p2e=n(HPe,"STRONG",{});var mCt=s(p2e);ser=r(mCt,"led"),mCt.forEach(t),ler=r(HPe," \u2014 "),nQ=n(HPe,"A",{href:!0});var fCt=s(nQ);ier=r(fCt,"LEDForQuestionAnswering"),fCt.forEach(t),der=r(HPe," (LED model)"),HPe.forEach(t),cer=i(X),LT=n(X,"LI",{});var UPe=s(LT);_2e=n(UPe,"STRONG",{});var gCt=s(_2e);mer=r(gCt,"longformer"),gCt.forEach(t),fer=r(UPe," \u2014 "),sQ=n(UPe,"A",{href:!0});var hCt=s(sQ);ger=r(hCt,"LongformerForQuestionAnswering"),hCt.forEach(t),her=r(UPe," (Longformer model)"),UPe.forEach(t),uer=i(X),yT=n(X,"LI",{});var JPe=s(yT);b2e=n(JPe,"STRONG",{});var uCt=s(b2e);per=r(uCt,"lxmert"),uCt.forEach(t),_er=r(JPe," \u2014 "),lQ=n(JPe,"A",{href:!0});var pCt=s(lQ);ber=r(pCt,"LxmertForQuestionAnswering"),pCt.forEach(t),ver=r(JPe," (LXMERT model)"),JPe.forEach(t),Fer=i(X),xT=n(X,"LI",{});var YPe=s(xT);v2e=n(YPe,"STRONG",{});var _Ct=s(v2e);Ter=r(_Ct,"mbart"),_Ct.forEach(t),Mer=r(YPe," \u2014 "),iQ=n(YPe,"A",{href:!0});var bCt=s(iQ);Eer=r(bCt,"MBartForQuestionAnswering"),bCt.forEach(t),Cer=r(YPe," (mBART model)"),YPe.forEach(t),wer=i(X),$T=n(X,"LI",{});var KPe=s($T);F2e=n(KPe,"STRONG",{});var vCt=s(F2e);Aer=r(vCt,"megatron-bert"),vCt.forEach(t),Ler=r(KPe," \u2014 "),dQ=n(KPe,"A",{href:!0});var FCt=s(dQ);yer=r(FCt,"MegatronBertForQuestionAnswering"),FCt.forEach(t),xer=r(KPe," (Megatron-BERT model)"),KPe.forEach(t),$er=i(X),kT=n(X,"LI",{});var ZPe=s(kT);T2e=n(ZPe,"STRONG",{});var TCt=s(T2e);ker=r(TCt,"mobilebert"),TCt.forEach(t),Ser=r(ZPe," \u2014 "),cQ=n(ZPe,"A",{href:!0});var MCt=s(cQ);Rer=r(MCt,"MobileBertForQuestionAnswering"),MCt.forEach(t),Per=r(ZPe," (MobileBERT model)"),ZPe.forEach(t),Ber=i(X),ST=n(X,"LI",{});var eBe=s(ST);M2e=n(eBe,"STRONG",{});var ECt=s(M2e);Ier=r(ECt,"mpnet"),ECt.forEach(t),Ner=r(eBe," \u2014 "),mQ=n(eBe,"A",{href:!0});var CCt=s(mQ);qer=r(CCt,"MPNetForQuestionAnswering"),CCt.forEach(t),jer=r(eBe," (MPNet model)"),eBe.forEach(t),Der=i(X),RT=n(X,"LI",{});var oBe=s(RT);E2e=n(oBe,"STRONG",{});var wCt=s(E2e);Ger=r(wCt,"nezha"),wCt.forEach(t),Oer=r(oBe," \u2014 "),fQ=n(oBe,"A",{href:!0});var ACt=s(fQ);Ver=r(ACt,"NezhaForQuestionAnswering"),ACt.forEach(t),Xer=r(oBe," (Nezha model)"),oBe.forEach(t),zer=i(X),PT=n(X,"LI",{});var rBe=s(PT);C2e=n(rBe,"STRONG",{});var LCt=s(C2e);Qer=r(LCt,"nystromformer"),LCt.forEach(t),Wer=r(rBe," \u2014 "),gQ=n(rBe,"A",{href:!0});var yCt=s(gQ);Her=r(yCt,"NystromformerForQuestionAnswering"),yCt.forEach(t),Uer=r(rBe," (Nystr\xF6mformer model)"),rBe.forEach(t),Jer=i(X),BT=n(X,"LI",{});var tBe=s(BT);w2e=n(tBe,"STRONG",{});var xCt=s(w2e);Yer=r(xCt,"qdqbert"),xCt.forEach(t),Ker=r(tBe," \u2014 "),hQ=n(tBe,"A",{href:!0});var $Ct=s(hQ);Zer=r($Ct,"QDQBertForQuestionAnswering"),$Ct.forEach(t),eor=r(tBe," (QDQBert model)"),tBe.forEach(t),oor=i(X),IT=n(X,"LI",{});var aBe=s(IT);A2e=n(aBe,"STRONG",{});var kCt=s(A2e);ror=r(kCt,"reformer"),kCt.forEach(t),tor=r(aBe," \u2014 "),uQ=n(aBe,"A",{href:!0});var SCt=s(uQ);aor=r(SCt,"ReformerForQuestionAnswering"),SCt.forEach(t),nor=r(aBe," (Reformer model)"),aBe.forEach(t),sor=i(X),NT=n(X,"LI",{});var nBe=s(NT);L2e=n(nBe,"STRONG",{});var RCt=s(L2e);lor=r(RCt,"rembert"),RCt.forEach(t),ior=r(nBe," \u2014 "),pQ=n(nBe,"A",{href:!0});var PCt=s(pQ);dor=r(PCt,"RemBertForQuestionAnswering"),PCt.forEach(t),cor=r(nBe," (RemBERT model)"),nBe.forEach(t),mor=i(X),qT=n(X,"LI",{});var sBe=s(qT);y2e=n(sBe,"STRONG",{});var BCt=s(y2e);gor=r(BCt,"roberta"),BCt.forEach(t),hor=r(sBe," \u2014 "),_Q=n(sBe,"A",{href:!0});var ICt=s(_Q);uor=r(ICt,"RobertaForQuestionAnswering"),ICt.forEach(t),por=r(sBe," (RoBERTa model)"),sBe.forEach(t),_or=i(X),jT=n(X,"LI",{});var lBe=s(jT);x2e=n(lBe,"STRONG",{});var NCt=s(x2e);bor=r(NCt,"roformer"),NCt.forEach(t),vor=r(lBe," \u2014 "),bQ=n(lBe,"A",{href:!0});var qCt=s(bQ);For=r(qCt,"RoFormerForQuestionAnswering"),qCt.forEach(t),Tor=r(lBe," (RoFormer model)"),lBe.forEach(t),Mor=i(X),DT=n(X,"LI",{});var iBe=s(DT);$2e=n(iBe,"STRONG",{});var jCt=s($2e);Eor=r(jCt,"splinter"),jCt.forEach(t),Cor=r(iBe," \u2014 "),vQ=n(iBe,"A",{href:!0});var DCt=s(vQ);wor=r(DCt,"SplinterForQuestionAnswering"),DCt.forEach(t),Aor=r(iBe," (Splinter model)"),iBe.forEach(t),Lor=i(X),GT=n(X,"LI",{});var dBe=s(GT);k2e=n(dBe,"STRONG",{});var GCt=s(k2e);yor=r(GCt,"squeezebert"),GCt.forEach(t),xor=r(dBe," \u2014 "),FQ=n(dBe,"A",{href:!0});var OCt=s(FQ);$or=r(OCt,"SqueezeBertForQuestionAnswering"),OCt.forEach(t),kor=r(dBe," (SqueezeBERT model)"),dBe.forEach(t),Sor=i(X),OT=n(X,"LI",{});var cBe=s(OT);S2e=n(cBe,"STRONG",{});var VCt=s(S2e);Ror=r(VCt,"xlm"),VCt.forEach(t),Por=r(cBe," \u2014 "),TQ=n(cBe,"A",{href:!0});var XCt=s(TQ);Bor=r(XCt,"XLMForQuestionAnsweringSimple"),XCt.forEach(t),Ior=r(cBe," (XLM model)"),cBe.forEach(t),Nor=i(X),VT=n(X,"LI",{});var mBe=s(VT);R2e=n(mBe,"STRONG",{});var zCt=s(R2e);qor=r(zCt,"xlm-roberta"),zCt.forEach(t),jor=r(mBe," \u2014 "),MQ=n(mBe,"A",{href:!0});var QCt=s(MQ);Dor=r(QCt,"XLMRobertaForQuestionAnswering"),QCt.forEach(t),Gor=r(mBe," (XLM-RoBERTa model)"),mBe.forEach(t),Oor=i(X),XT=n(X,"LI",{});var fBe=s(XT);P2e=n(fBe,"STRONG",{});var WCt=s(P2e);Vor=r(WCt,"xlm-roberta-xl"),WCt.forEach(t),Xor=r(fBe," \u2014 "),EQ=n(fBe,"A",{href:!0});var HCt=s(EQ);zor=r(HCt,"XLMRobertaXLForQuestionAnswering"),HCt.forEach(t),Qor=r(fBe," (XLM-RoBERTa-XL model)"),fBe.forEach(t),Wor=i(X),zT=n(X,"LI",{});var gBe=s(zT);B2e=n(gBe,"STRONG",{});var UCt=s(B2e);Hor=r(UCt,"xlnet"),UCt.forEach(t),Uor=r(gBe," \u2014 "),CQ=n(gBe,"A",{href:!0});var JCt=s(CQ);Jor=r(JCt,"XLNetForQuestionAnsweringSimple"),JCt.forEach(t),Yor=r(gBe," (XLNet model)"),gBe.forEach(t),Kor=i(X),QT=n(X,"LI",{});var hBe=s(QT);I2e=n(hBe,"STRONG",{});var YCt=s(I2e);Zor=r(YCt,"yoso"),YCt.forEach(t),err=r(hBe," \u2014 "),wQ=n(hBe,"A",{href:!0});var KCt=s(wQ);orr=r(KCt,"YosoForQuestionAnswering"),KCt.forEach(t),rrr=r(hBe," (YOSO model)"),hBe.forEach(t),X.forEach(t),trr=i(ha),WT=n(ha,"P",{});var uBe=s(WT);arr=r(uBe,"The model is set in evaluation mode by default using "),N2e=n(uBe,"CODE",{});var ZCt=s(N2e);nrr=r(ZCt,"model.eval()"),ZCt.forEach(t),srr=r(uBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),q2e=n(uBe,"CODE",{});var e5t=s(q2e);lrr=r(e5t,"model.train()"),e5t.forEach(t),uBe.forEach(t),irr=i(ha),T(HT.$$.fragment,ha),ha.forEach(t),il.forEach(t),rVe=i(m),gd=n(m,"H2",{class:!0});var ize=s(gd);UT=n(ize,"A",{id:!0,class:!0,href:!0});var o5t=s(UT);j2e=n(o5t,"SPAN",{});var r5t=s(j2e);T(s8.$$.fragment,r5t),r5t.forEach(t),o5t.forEach(t),drr=i(ize),D2e=n(ize,"SPAN",{});var t5t=s(D2e);crr=r(t5t,"AutoModelForTableQuestionAnswering"),t5t.forEach(t),ize.forEach(t),tVe=i(m),Do=n(m,"DIV",{class:!0});var dl=s(Do);T(l8.$$.fragment,dl),mrr=i(dl),hd=n(dl,"P",{});var lre=s(hd);frr=r(lre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),AQ=n(lre,"A",{href:!0});var a5t=s(AQ);grr=r(a5t,"from_pretrained()"),a5t.forEach(t),hrr=r(lre," class method or the "),LQ=n(lre,"A",{href:!0});var n5t=s(LQ);urr=r(n5t,"from_config()"),n5t.forEach(t),prr=r(lre,` class
method.`),lre.forEach(t),_rr=i(dl),i8=n(dl,"P",{});var dze=s(i8);brr=r(dze,"This class cannot be instantiated directly using "),G2e=n(dze,"CODE",{});var s5t=s(G2e);vrr=r(s5t,"__init__()"),s5t.forEach(t),Frr=r(dze," (throws an error)."),dze.forEach(t),Trr=i(dl),ut=n(dl,"DIV",{class:!0});var sL=s(ut);T(d8.$$.fragment,sL),Mrr=i(sL),O2e=n(sL,"P",{});var l5t=s(O2e);Err=r(l5t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),l5t.forEach(t),Crr=i(sL),ud=n(sL,"P",{});var ire=s(ud);wrr=r(ire,`Note:
Loading a model from its configuration file does `),V2e=n(ire,"STRONG",{});var i5t=s(V2e);Arr=r(i5t,"not"),i5t.forEach(t),Lrr=r(ire,` load the model weights. It only affects the
model\u2019s configuration. Use `),yQ=n(ire,"A",{href:!0});var d5t=s(yQ);yrr=r(d5t,"from_pretrained()"),d5t.forEach(t),xrr=r(ire," to load the model weights."),ire.forEach(t),$rr=i(sL),T(JT.$$.fragment,sL),sL.forEach(t),krr=i(dl),so=n(dl,"DIV",{class:!0});var ua=s(so);T(c8.$$.fragment,ua),Srr=i(ua),X2e=n(ua,"P",{});var c5t=s(X2e);Rrr=r(c5t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),c5t.forEach(t),Prr=i(ua),Va=n(ua,"P",{});var lL=s(Va);Brr=r(lL,"The model class to instantiate is selected based on the "),z2e=n(lL,"CODE",{});var m5t=s(z2e);Irr=r(m5t,"model_type"),m5t.forEach(t),Nrr=r(lL,` property of the config object (either
passed as an argument or loaded from `),Q2e=n(lL,"CODE",{});var f5t=s(Q2e);qrr=r(f5t,"pretrained_model_name_or_path"),f5t.forEach(t),jrr=r(lL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W2e=n(lL,"CODE",{});var g5t=s(W2e);Drr=r(g5t,"pretrained_model_name_or_path"),g5t.forEach(t),Grr=r(lL,":"),lL.forEach(t),Orr=i(ua),H2e=n(ua,"UL",{});var h5t=s(H2e);YT=n(h5t,"LI",{});var pBe=s(YT);U2e=n(pBe,"STRONG",{});var u5t=s(U2e);Vrr=r(u5t,"tapas"),u5t.forEach(t),Xrr=r(pBe," \u2014 "),xQ=n(pBe,"A",{href:!0});var p5t=s(xQ);zrr=r(p5t,"TapasForQuestionAnswering"),p5t.forEach(t),Qrr=r(pBe," (TAPAS model)"),pBe.forEach(t),h5t.forEach(t),Wrr=i(ua),KT=n(ua,"P",{});var _Be=s(KT);Hrr=r(_Be,"The model is set in evaluation mode by default using "),J2e=n(_Be,"CODE",{});var _5t=s(J2e);Urr=r(_5t,"model.eval()"),_5t.forEach(t),Jrr=r(_Be,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Y2e=n(_Be,"CODE",{});var b5t=s(Y2e);Yrr=r(b5t,"model.train()"),b5t.forEach(t),_Be.forEach(t),Krr=i(ua),T(ZT.$$.fragment,ua),ua.forEach(t),dl.forEach(t),aVe=i(m),pd=n(m,"H2",{class:!0});var cze=s(pd);eM=n(cze,"A",{id:!0,class:!0,href:!0});var v5t=s(eM);K2e=n(v5t,"SPAN",{});var F5t=s(K2e);T(m8.$$.fragment,F5t),F5t.forEach(t),v5t.forEach(t),Zrr=i(cze),Z2e=n(cze,"SPAN",{});var T5t=s(Z2e);etr=r(T5t,"AutoModelForImageClassification"),T5t.forEach(t),cze.forEach(t),nVe=i(m),Go=n(m,"DIV",{class:!0});var cl=s(Go);T(f8.$$.fragment,cl),otr=i(cl),_d=n(cl,"P",{});var dre=s(_d);rtr=r(dre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),$Q=n(dre,"A",{href:!0});var M5t=s($Q);ttr=r(M5t,"from_pretrained()"),M5t.forEach(t),atr=r(dre," class method or the "),kQ=n(dre,"A",{href:!0});var E5t=s(kQ);ntr=r(E5t,"from_config()"),E5t.forEach(t),str=r(dre,` class
method.`),dre.forEach(t),ltr=i(cl),g8=n(cl,"P",{});var mze=s(g8);itr=r(mze,"This class cannot be instantiated directly using "),ebe=n(mze,"CODE",{});var C5t=s(ebe);dtr=r(C5t,"__init__()"),C5t.forEach(t),ctr=r(mze," (throws an error)."),mze.forEach(t),mtr=i(cl),pt=n(cl,"DIV",{class:!0});var iL=s(pt);T(h8.$$.fragment,iL),ftr=i(iL),obe=n(iL,"P",{});var w5t=s(obe);gtr=r(w5t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),w5t.forEach(t),htr=i(iL),bd=n(iL,"P",{});var cre=s(bd);utr=r(cre,`Note:
Loading a model from its configuration file does `),rbe=n(cre,"STRONG",{});var A5t=s(rbe);ptr=r(A5t,"not"),A5t.forEach(t),_tr=r(cre,` load the model weights. It only affects the
model\u2019s configuration. Use `),SQ=n(cre,"A",{href:!0});var L5t=s(SQ);btr=r(L5t,"from_pretrained()"),L5t.forEach(t),vtr=r(cre," to load the model weights."),cre.forEach(t),Ftr=i(iL),T(oM.$$.fragment,iL),iL.forEach(t),Ttr=i(cl),lo=n(cl,"DIV",{class:!0});var pa=s(lo);T(u8.$$.fragment,pa),Mtr=i(pa),tbe=n(pa,"P",{});var y5t=s(tbe);Etr=r(y5t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),y5t.forEach(t),Ctr=i(pa),Xa=n(pa,"P",{});var dL=s(Xa);wtr=r(dL,"The model class to instantiate is selected based on the "),abe=n(dL,"CODE",{});var x5t=s(abe);Atr=r(x5t,"model_type"),x5t.forEach(t),Ltr=r(dL,` property of the config object (either
passed as an argument or loaded from `),nbe=n(dL,"CODE",{});var $5t=s(nbe);ytr=r($5t,"pretrained_model_name_or_path"),$5t.forEach(t),xtr=r(dL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sbe=n(dL,"CODE",{});var k5t=s(sbe);$tr=r(k5t,"pretrained_model_name_or_path"),k5t.forEach(t),ktr=r(dL,":"),dL.forEach(t),Str=i(pa),Fe=n(pa,"UL",{});var Te=s(Fe);rM=n(Te,"LI",{});var bBe=s(rM);lbe=n(bBe,"STRONG",{});var S5t=s(lbe);Rtr=r(S5t,"beit"),S5t.forEach(t),Ptr=r(bBe," \u2014 "),RQ=n(bBe,"A",{href:!0});var R5t=s(RQ);Btr=r(R5t,"BeitForImageClassification"),R5t.forEach(t),Itr=r(bBe," (BEiT model)"),bBe.forEach(t),Ntr=i(Te),tM=n(Te,"LI",{});var vBe=s(tM);ibe=n(vBe,"STRONG",{});var P5t=s(ibe);qtr=r(P5t,"convnext"),P5t.forEach(t),jtr=r(vBe," \u2014 "),PQ=n(vBe,"A",{href:!0});var B5t=s(PQ);Dtr=r(B5t,"ConvNextForImageClassification"),B5t.forEach(t),Gtr=r(vBe," (ConvNeXT model)"),vBe.forEach(t),Otr=i(Te),aM=n(Te,"LI",{});var FBe=s(aM);dbe=n(FBe,"STRONG",{});var I5t=s(dbe);Vtr=r(I5t,"cvt"),I5t.forEach(t),Xtr=r(FBe," \u2014 "),BQ=n(FBe,"A",{href:!0});var N5t=s(BQ);ztr=r(N5t,"CvtForImageClassification"),N5t.forEach(t),Qtr=r(FBe," (CvT model)"),FBe.forEach(t),Wtr=i(Te),nM=n(Te,"LI",{});var TBe=s(nM);cbe=n(TBe,"STRONG",{});var q5t=s(cbe);Htr=r(q5t,"data2vec-vision"),q5t.forEach(t),Utr=r(TBe," \u2014 "),IQ=n(TBe,"A",{href:!0});var j5t=s(IQ);Jtr=r(j5t,"Data2VecVisionForImageClassification"),j5t.forEach(t),Ytr=r(TBe," (Data2VecVision model)"),TBe.forEach(t),Ktr=i(Te),Qs=n(Te,"LI",{});var cS=s(Qs);mbe=n(cS,"STRONG",{});var D5t=s(mbe);Ztr=r(D5t,"deit"),D5t.forEach(t),ear=r(cS," \u2014 "),NQ=n(cS,"A",{href:!0});var G5t=s(NQ);oar=r(G5t,"DeiTForImageClassification"),G5t.forEach(t),rar=r(cS," or "),qQ=n(cS,"A",{href:!0});var O5t=s(qQ);tar=r(O5t,"DeiTForImageClassificationWithTeacher"),O5t.forEach(t),aar=r(cS," (DeiT model)"),cS.forEach(t),nar=i(Te),sM=n(Te,"LI",{});var MBe=s(sM);fbe=n(MBe,"STRONG",{});var V5t=s(fbe);sar=r(V5t,"imagegpt"),V5t.forEach(t),lar=r(MBe," \u2014 "),jQ=n(MBe,"A",{href:!0});var X5t=s(jQ);iar=r(X5t,"ImageGPTForImageClassification"),X5t.forEach(t),dar=r(MBe," (ImageGPT model)"),MBe.forEach(t),car=i(Te),Ws=n(Te,"LI",{});var mS=s(Ws);gbe=n(mS,"STRONG",{});var z5t=s(gbe);mar=r(z5t,"levit"),z5t.forEach(t),far=r(mS," \u2014 "),DQ=n(mS,"A",{href:!0});var Q5t=s(DQ);gar=r(Q5t,"LevitForImageClassification"),Q5t.forEach(t),har=r(mS," or "),GQ=n(mS,"A",{href:!0});var W5t=s(GQ);uar=r(W5t,"LevitForImageClassificationWithTeacher"),W5t.forEach(t),par=r(mS," (LeViT model)"),mS.forEach(t),_ar=i(Te),_t=n(Te,"LI",{});var ym=s(_t);hbe=n(ym,"STRONG",{});var H5t=s(hbe);bar=r(H5t,"perceiver"),H5t.forEach(t),Far=r(ym," \u2014 "),OQ=n(ym,"A",{href:!0});var U5t=s(OQ);Tar=r(U5t,"PerceiverForImageClassificationLearned"),U5t.forEach(t),Mar=r(ym," or "),VQ=n(ym,"A",{href:!0});var J5t=s(VQ);Ear=r(J5t,"PerceiverForImageClassificationFourier"),J5t.forEach(t),Car=r(ym," or "),XQ=n(ym,"A",{href:!0});var Y5t=s(XQ);war=r(Y5t,"PerceiverForImageClassificationConvProcessing"),Y5t.forEach(t),Aar=r(ym," (Perceiver model)"),ym.forEach(t),Lar=i(Te),lM=n(Te,"LI",{});var EBe=s(lM);ube=n(EBe,"STRONG",{});var K5t=s(ube);yar=r(K5t,"poolformer"),K5t.forEach(t),xar=r(EBe," \u2014 "),zQ=n(EBe,"A",{href:!0});var Z5t=s(zQ);$ar=r(Z5t,"PoolFormerForImageClassification"),Z5t.forEach(t),kar=r(EBe," (PoolFormer model)"),EBe.forEach(t),Sar=i(Te),iM=n(Te,"LI",{});var CBe=s(iM);pbe=n(CBe,"STRONG",{});var e3t=s(pbe);Rar=r(e3t,"regnet"),e3t.forEach(t),Par=r(CBe," \u2014 "),QQ=n(CBe,"A",{href:!0});var o3t=s(QQ);Bar=r(o3t,"RegNetForImageClassification"),o3t.forEach(t),Iar=r(CBe," (RegNet model)"),CBe.forEach(t),Nar=i(Te),dM=n(Te,"LI",{});var wBe=s(dM);_be=n(wBe,"STRONG",{});var r3t=s(_be);qar=r(r3t,"resnet"),r3t.forEach(t),jar=r(wBe," \u2014 "),WQ=n(wBe,"A",{href:!0});var t3t=s(WQ);Dar=r(t3t,"ResNetForImageClassification"),t3t.forEach(t),Gar=r(wBe," (ResNet model)"),wBe.forEach(t),Oar=i(Te),cM=n(Te,"LI",{});var ABe=s(cM);bbe=n(ABe,"STRONG",{});var a3t=s(bbe);Var=r(a3t,"segformer"),a3t.forEach(t),Xar=r(ABe," \u2014 "),HQ=n(ABe,"A",{href:!0});var n3t=s(HQ);zar=r(n3t,"SegformerForImageClassification"),n3t.forEach(t),Qar=r(ABe," (SegFormer model)"),ABe.forEach(t),War=i(Te),mM=n(Te,"LI",{});var LBe=s(mM);vbe=n(LBe,"STRONG",{});var s3t=s(vbe);Har=r(s3t,"swin"),s3t.forEach(t),Uar=r(LBe," \u2014 "),UQ=n(LBe,"A",{href:!0});var l3t=s(UQ);Jar=r(l3t,"SwinForImageClassification"),l3t.forEach(t),Yar=r(LBe," (Swin Transformer model)"),LBe.forEach(t),Kar=i(Te),fM=n(Te,"LI",{});var yBe=s(fM);Fbe=n(yBe,"STRONG",{});var i3t=s(Fbe);Zar=r(i3t,"van"),i3t.forEach(t),enr=r(yBe," \u2014 "),JQ=n(yBe,"A",{href:!0});var d3t=s(JQ);onr=r(d3t,"VanForImageClassification"),d3t.forEach(t),rnr=r(yBe," (VAN model)"),yBe.forEach(t),tnr=i(Te),gM=n(Te,"LI",{});var xBe=s(gM);Tbe=n(xBe,"STRONG",{});var c3t=s(Tbe);anr=r(c3t,"vit"),c3t.forEach(t),nnr=r(xBe," \u2014 "),YQ=n(xBe,"A",{href:!0});var m3t=s(YQ);snr=r(m3t,"ViTForImageClassification"),m3t.forEach(t),lnr=r(xBe," (ViT model)"),xBe.forEach(t),Te.forEach(t),inr=i(pa),hM=n(pa,"P",{});var $Be=s(hM);dnr=r($Be,"The model is set in evaluation mode by default using "),Mbe=n($Be,"CODE",{});var f3t=s(Mbe);cnr=r(f3t,"model.eval()"),f3t.forEach(t),mnr=r($Be,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ebe=n($Be,"CODE",{});var g3t=s(Ebe);fnr=r(g3t,"model.train()"),g3t.forEach(t),$Be.forEach(t),gnr=i(pa),T(uM.$$.fragment,pa),pa.forEach(t),cl.forEach(t),sVe=i(m),vd=n(m,"H2",{class:!0});var fze=s(vd);pM=n(fze,"A",{id:!0,class:!0,href:!0});var h3t=s(pM);Cbe=n(h3t,"SPAN",{});var u3t=s(Cbe);T(p8.$$.fragment,u3t),u3t.forEach(t),h3t.forEach(t),hnr=i(fze),wbe=n(fze,"SPAN",{});var p3t=s(wbe);unr=r(p3t,"AutoModelForVision2Seq"),p3t.forEach(t),fze.forEach(t),lVe=i(m),Oo=n(m,"DIV",{class:!0});var ml=s(Oo);T(_8.$$.fragment,ml),pnr=i(ml),Fd=n(ml,"P",{});var mre=s(Fd);_nr=r(mre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),KQ=n(mre,"A",{href:!0});var _3t=s(KQ);bnr=r(_3t,"from_pretrained()"),_3t.forEach(t),vnr=r(mre," class method or the "),ZQ=n(mre,"A",{href:!0});var b3t=s(ZQ);Fnr=r(b3t,"from_config()"),b3t.forEach(t),Tnr=r(mre,` class
method.`),mre.forEach(t),Mnr=i(ml),b8=n(ml,"P",{});var gze=s(b8);Enr=r(gze,"This class cannot be instantiated directly using "),Abe=n(gze,"CODE",{});var v3t=s(Abe);Cnr=r(v3t,"__init__()"),v3t.forEach(t),wnr=r(gze," (throws an error)."),gze.forEach(t),Anr=i(ml),bt=n(ml,"DIV",{class:!0});var cL=s(bt);T(v8.$$.fragment,cL),Lnr=i(cL),Lbe=n(cL,"P",{});var F3t=s(Lbe);ynr=r(F3t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),F3t.forEach(t),xnr=i(cL),Td=n(cL,"P",{});var fre=s(Td);$nr=r(fre,`Note:
Loading a model from its configuration file does `),ybe=n(fre,"STRONG",{});var T3t=s(ybe);knr=r(T3t,"not"),T3t.forEach(t),Snr=r(fre,` load the model weights. It only affects the
model\u2019s configuration. Use `),eW=n(fre,"A",{href:!0});var M3t=s(eW);Rnr=r(M3t,"from_pretrained()"),M3t.forEach(t),Pnr=r(fre," to load the model weights."),fre.forEach(t),Bnr=i(cL),T(_M.$$.fragment,cL),cL.forEach(t),Inr=i(ml),io=n(ml,"DIV",{class:!0});var _a=s(io);T(F8.$$.fragment,_a),Nnr=i(_a),xbe=n(_a,"P",{});var E3t=s(xbe);qnr=r(E3t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),E3t.forEach(t),jnr=i(_a),za=n(_a,"P",{});var mL=s(za);Dnr=r(mL,"The model class to instantiate is selected based on the "),$be=n(mL,"CODE",{});var C3t=s($be);Gnr=r(C3t,"model_type"),C3t.forEach(t),Onr=r(mL,` property of the config object (either
passed as an argument or loaded from `),kbe=n(mL,"CODE",{});var w3t=s(kbe);Vnr=r(w3t,"pretrained_model_name_or_path"),w3t.forEach(t),Xnr=r(mL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sbe=n(mL,"CODE",{});var A3t=s(Sbe);znr=r(A3t,"pretrained_model_name_or_path"),A3t.forEach(t),Qnr=r(mL,":"),mL.forEach(t),Wnr=i(_a),Rbe=n(_a,"UL",{});var L3t=s(Rbe);bM=n(L3t,"LI",{});var kBe=s(bM);Pbe=n(kBe,"STRONG",{});var y3t=s(Pbe);Hnr=r(y3t,"vision-encoder-decoder"),y3t.forEach(t),Unr=r(kBe," \u2014 "),oW=n(kBe,"A",{href:!0});var x3t=s(oW);Jnr=r(x3t,"VisionEncoderDecoderModel"),x3t.forEach(t),Ynr=r(kBe," (Vision Encoder decoder model)"),kBe.forEach(t),L3t.forEach(t),Knr=i(_a),vM=n(_a,"P",{});var SBe=s(vM);Znr=r(SBe,"The model is set in evaluation mode by default using "),Bbe=n(SBe,"CODE",{});var $3t=s(Bbe);esr=r($3t,"model.eval()"),$3t.forEach(t),osr=r(SBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ibe=n(SBe,"CODE",{});var k3t=s(Ibe);rsr=r(k3t,"model.train()"),k3t.forEach(t),SBe.forEach(t),tsr=i(_a),T(FM.$$.fragment,_a),_a.forEach(t),ml.forEach(t),iVe=i(m),Md=n(m,"H2",{class:!0});var hze=s(Md);TM=n(hze,"A",{id:!0,class:!0,href:!0});var S3t=s(TM);Nbe=n(S3t,"SPAN",{});var R3t=s(Nbe);T(T8.$$.fragment,R3t),R3t.forEach(t),S3t.forEach(t),asr=i(hze),qbe=n(hze,"SPAN",{});var P3t=s(qbe);nsr=r(P3t,"AutoModelForVisualQuestionAnswering"),P3t.forEach(t),hze.forEach(t),dVe=i(m),Vo=n(m,"DIV",{class:!0});var fl=s(Vo);T(M8.$$.fragment,fl),ssr=i(fl),Ed=n(fl,"P",{});var gre=s(Ed);lsr=r(gre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),rW=n(gre,"A",{href:!0});var B3t=s(rW);isr=r(B3t,"from_pretrained()"),B3t.forEach(t),dsr=r(gre," class method or the "),tW=n(gre,"A",{href:!0});var I3t=s(tW);csr=r(I3t,"from_config()"),I3t.forEach(t),msr=r(gre,` class
method.`),gre.forEach(t),fsr=i(fl),E8=n(fl,"P",{});var uze=s(E8);gsr=r(uze,"This class cannot be instantiated directly using "),jbe=n(uze,"CODE",{});var N3t=s(jbe);hsr=r(N3t,"__init__()"),N3t.forEach(t),usr=r(uze," (throws an error)."),uze.forEach(t),psr=i(fl),vt=n(fl,"DIV",{class:!0});var fL=s(vt);T(C8.$$.fragment,fL),_sr=i(fL),Dbe=n(fL,"P",{});var q3t=s(Dbe);bsr=r(q3t,"Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),q3t.forEach(t),vsr=i(fL),Cd=n(fL,"P",{});var hre=s(Cd);Fsr=r(hre,`Note:
Loading a model from its configuration file does `),Gbe=n(hre,"STRONG",{});var j3t=s(Gbe);Tsr=r(j3t,"not"),j3t.forEach(t),Msr=r(hre,` load the model weights. It only affects the
model\u2019s configuration. Use `),aW=n(hre,"A",{href:!0});var D3t=s(aW);Esr=r(D3t,"from_pretrained()"),D3t.forEach(t),Csr=r(hre," to load the model weights."),hre.forEach(t),wsr=i(fL),T(MM.$$.fragment,fL),fL.forEach(t),Asr=i(fl),co=n(fl,"DIV",{class:!0});var ba=s(co);T(w8.$$.fragment,ba),Lsr=i(ba),Obe=n(ba,"P",{});var G3t=s(Obe);ysr=r(G3t,"Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),G3t.forEach(t),xsr=i(ba),Qa=n(ba,"P",{});var gL=s(Qa);$sr=r(gL,"The model class to instantiate is selected based on the "),Vbe=n(gL,"CODE",{});var O3t=s(Vbe);ksr=r(O3t,"model_type"),O3t.forEach(t),Ssr=r(gL,` property of the config object (either
passed as an argument or loaded from `),Xbe=n(gL,"CODE",{});var V3t=s(Xbe);Rsr=r(V3t,"pretrained_model_name_or_path"),V3t.forEach(t),Psr=r(gL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zbe=n(gL,"CODE",{});var X3t=s(zbe);Bsr=r(X3t,"pretrained_model_name_or_path"),X3t.forEach(t),Isr=r(gL,":"),gL.forEach(t),Nsr=i(ba),Qbe=n(ba,"UL",{});var z3t=s(Qbe);EM=n(z3t,"LI",{});var RBe=s(EM);Wbe=n(RBe,"STRONG",{});var Q3t=s(Wbe);qsr=r(Q3t,"vilt"),Q3t.forEach(t),jsr=r(RBe," \u2014 "),nW=n(RBe,"A",{href:!0});var W3t=s(nW);Dsr=r(W3t,"ViltForQuestionAnswering"),W3t.forEach(t),Gsr=r(RBe," (ViLT model)"),RBe.forEach(t),z3t.forEach(t),Osr=i(ba),CM=n(ba,"P",{});var PBe=s(CM);Vsr=r(PBe,"The model is set in evaluation mode by default using "),Hbe=n(PBe,"CODE",{});var H3t=s(Hbe);Xsr=r(H3t,"model.eval()"),H3t.forEach(t),zsr=r(PBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ube=n(PBe,"CODE",{});var U3t=s(Ube);Qsr=r(U3t,"model.train()"),U3t.forEach(t),PBe.forEach(t),Wsr=i(ba),T(wM.$$.fragment,ba),ba.forEach(t),fl.forEach(t),cVe=i(m),wd=n(m,"H2",{class:!0});var pze=s(wd);AM=n(pze,"A",{id:!0,class:!0,href:!0});var J3t=s(AM);Jbe=n(J3t,"SPAN",{});var Y3t=s(Jbe);T(A8.$$.fragment,Y3t),Y3t.forEach(t),J3t.forEach(t),Hsr=i(pze),Ybe=n(pze,"SPAN",{});var K3t=s(Ybe);Usr=r(K3t,"AutoModelForAudioClassification"),K3t.forEach(t),pze.forEach(t),mVe=i(m),Xo=n(m,"DIV",{class:!0});var gl=s(Xo);T(L8.$$.fragment,gl),Jsr=i(gl),Ad=n(gl,"P",{});var ure=s(Ad);Ysr=r(ure,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),sW=n(ure,"A",{href:!0});var Z3t=s(sW);Ksr=r(Z3t,"from_pretrained()"),Z3t.forEach(t),Zsr=r(ure," class method or the "),lW=n(ure,"A",{href:!0});var e0t=s(lW);elr=r(e0t,"from_config()"),e0t.forEach(t),olr=r(ure,` class
method.`),ure.forEach(t),rlr=i(gl),y8=n(gl,"P",{});var _ze=s(y8);tlr=r(_ze,"This class cannot be instantiated directly using "),Kbe=n(_ze,"CODE",{});var o0t=s(Kbe);alr=r(o0t,"__init__()"),o0t.forEach(t),nlr=r(_ze," (throws an error)."),_ze.forEach(t),slr=i(gl),Ft=n(gl,"DIV",{class:!0});var hL=s(Ft);T(x8.$$.fragment,hL),llr=i(hL),Zbe=n(hL,"P",{});var r0t=s(Zbe);ilr=r(r0t,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),r0t.forEach(t),dlr=i(hL),Ld=n(hL,"P",{});var pre=s(Ld);clr=r(pre,`Note:
Loading a model from its configuration file does `),eve=n(pre,"STRONG",{});var t0t=s(eve);mlr=r(t0t,"not"),t0t.forEach(t),flr=r(pre,` load the model weights. It only affects the
model\u2019s configuration. Use `),iW=n(pre,"A",{href:!0});var a0t=s(iW);glr=r(a0t,"from_pretrained()"),a0t.forEach(t),hlr=r(pre," to load the model weights."),pre.forEach(t),ulr=i(hL),T(LM.$$.fragment,hL),hL.forEach(t),plr=i(gl),mo=n(gl,"DIV",{class:!0});var va=s(mo);T($8.$$.fragment,va),_lr=i(va),ove=n(va,"P",{});var n0t=s(ove);blr=r(n0t,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),n0t.forEach(t),vlr=i(va),Wa=n(va,"P",{});var uL=s(Wa);Flr=r(uL,"The model class to instantiate is selected based on the "),rve=n(uL,"CODE",{});var s0t=s(rve);Tlr=r(s0t,"model_type"),s0t.forEach(t),Mlr=r(uL,` property of the config object (either
passed as an argument or loaded from `),tve=n(uL,"CODE",{});var l0t=s(tve);Elr=r(l0t,"pretrained_model_name_or_path"),l0t.forEach(t),Clr=r(uL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ave=n(uL,"CODE",{});var i0t=s(ave);wlr=r(i0t,"pretrained_model_name_or_path"),i0t.forEach(t),Alr=r(uL,":"),uL.forEach(t),Llr=i(va),Pe=n(va,"UL",{});var ze=s(Pe);yM=n(ze,"LI",{});var BBe=s(yM);nve=n(BBe,"STRONG",{});var d0t=s(nve);ylr=r(d0t,"data2vec-audio"),d0t.forEach(t),xlr=r(BBe," \u2014 "),dW=n(BBe,"A",{href:!0});var c0t=s(dW);$lr=r(c0t,"Data2VecAudioForSequenceClassification"),c0t.forEach(t),klr=r(BBe," (Data2VecAudio model)"),BBe.forEach(t),Slr=i(ze),xM=n(ze,"LI",{});var IBe=s(xM);sve=n(IBe,"STRONG",{});var m0t=s(sve);Rlr=r(m0t,"hubert"),m0t.forEach(t),Plr=r(IBe," \u2014 "),cW=n(IBe,"A",{href:!0});var f0t=s(cW);Blr=r(f0t,"HubertForSequenceClassification"),f0t.forEach(t),Ilr=r(IBe," (Hubert model)"),IBe.forEach(t),Nlr=i(ze),$M=n(ze,"LI",{});var NBe=s($M);lve=n(NBe,"STRONG",{});var g0t=s(lve);qlr=r(g0t,"sew"),g0t.forEach(t),jlr=r(NBe," \u2014 "),mW=n(NBe,"A",{href:!0});var h0t=s(mW);Dlr=r(h0t,"SEWForSequenceClassification"),h0t.forEach(t),Glr=r(NBe," (SEW model)"),NBe.forEach(t),Olr=i(ze),kM=n(ze,"LI",{});var qBe=s(kM);ive=n(qBe,"STRONG",{});var u0t=s(ive);Vlr=r(u0t,"sew-d"),u0t.forEach(t),Xlr=r(qBe," \u2014 "),fW=n(qBe,"A",{href:!0});var p0t=s(fW);zlr=r(p0t,"SEWDForSequenceClassification"),p0t.forEach(t),Qlr=r(qBe," (SEW-D model)"),qBe.forEach(t),Wlr=i(ze),SM=n(ze,"LI",{});var jBe=s(SM);dve=n(jBe,"STRONG",{});var _0t=s(dve);Hlr=r(_0t,"unispeech"),_0t.forEach(t),Ulr=r(jBe," \u2014 "),gW=n(jBe,"A",{href:!0});var b0t=s(gW);Jlr=r(b0t,"UniSpeechForSequenceClassification"),b0t.forEach(t),Ylr=r(jBe," (UniSpeech model)"),jBe.forEach(t),Klr=i(ze),RM=n(ze,"LI",{});var DBe=s(RM);cve=n(DBe,"STRONG",{});var v0t=s(cve);Zlr=r(v0t,"unispeech-sat"),v0t.forEach(t),eir=r(DBe," \u2014 "),hW=n(DBe,"A",{href:!0});var F0t=s(hW);oir=r(F0t,"UniSpeechSatForSequenceClassification"),F0t.forEach(t),rir=r(DBe," (UniSpeechSat model)"),DBe.forEach(t),tir=i(ze),PM=n(ze,"LI",{});var GBe=s(PM);mve=n(GBe,"STRONG",{});var T0t=s(mve);air=r(T0t,"wav2vec2"),T0t.forEach(t),nir=r(GBe," \u2014 "),uW=n(GBe,"A",{href:!0});var M0t=s(uW);sir=r(M0t,"Wav2Vec2ForSequenceClassification"),M0t.forEach(t),lir=r(GBe," (Wav2Vec2 model)"),GBe.forEach(t),iir=i(ze),BM=n(ze,"LI",{});var OBe=s(BM);fve=n(OBe,"STRONG",{});var E0t=s(fve);dir=r(E0t,"wav2vec2-conformer"),E0t.forEach(t),cir=r(OBe," \u2014 "),pW=n(OBe,"A",{href:!0});var C0t=s(pW);mir=r(C0t,"Wav2Vec2ConformerForSequenceClassification"),C0t.forEach(t),fir=r(OBe," (Wav2Vec2-Conformer model)"),OBe.forEach(t),gir=i(ze),IM=n(ze,"LI",{});var VBe=s(IM);gve=n(VBe,"STRONG",{});var w0t=s(gve);hir=r(w0t,"wavlm"),w0t.forEach(t),uir=r(VBe," \u2014 "),_W=n(VBe,"A",{href:!0});var A0t=s(_W);pir=r(A0t,"WavLMForSequenceClassification"),A0t.forEach(t),_ir=r(VBe," (WavLM model)"),VBe.forEach(t),ze.forEach(t),bir=i(va),NM=n(va,"P",{});var XBe=s(NM);vir=r(XBe,"The model is set in evaluation mode by default using "),hve=n(XBe,"CODE",{});var L0t=s(hve);Fir=r(L0t,"model.eval()"),L0t.forEach(t),Tir=r(XBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),uve=n(XBe,"CODE",{});var y0t=s(uve);Mir=r(y0t,"model.train()"),y0t.forEach(t),XBe.forEach(t),Eir=i(va),T(qM.$$.fragment,va),va.forEach(t),gl.forEach(t),fVe=i(m),yd=n(m,"H2",{class:!0});var bze=s(yd);jM=n(bze,"A",{id:!0,class:!0,href:!0});var x0t=s(jM);pve=n(x0t,"SPAN",{});var $0t=s(pve);T(k8.$$.fragment,$0t),$0t.forEach(t),x0t.forEach(t),Cir=i(bze),_ve=n(bze,"SPAN",{});var k0t=s(_ve);wir=r(k0t,"AutoModelForAudioFrameClassification"),k0t.forEach(t),bze.forEach(t),gVe=i(m),zo=n(m,"DIV",{class:!0});var hl=s(zo);T(S8.$$.fragment,hl),Air=i(hl),xd=n(hl,"P",{});var _re=s(xd);Lir=r(_re,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),bW=n(_re,"A",{href:!0});var S0t=s(bW);yir=r(S0t,"from_pretrained()"),S0t.forEach(t),xir=r(_re," class method or the "),vW=n(_re,"A",{href:!0});var R0t=s(vW);$ir=r(R0t,"from_config()"),R0t.forEach(t),kir=r(_re,` class
method.`),_re.forEach(t),Sir=i(hl),R8=n(hl,"P",{});var vze=s(R8);Rir=r(vze,"This class cannot be instantiated directly using "),bve=n(vze,"CODE",{});var P0t=s(bve);Pir=r(P0t,"__init__()"),P0t.forEach(t),Bir=r(vze," (throws an error)."),vze.forEach(t),Iir=i(hl),Tt=n(hl,"DIV",{class:!0});var pL=s(Tt);T(P8.$$.fragment,pL),Nir=i(pL),vve=n(pL,"P",{});var B0t=s(vve);qir=r(B0t,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),B0t.forEach(t),jir=i(pL),$d=n(pL,"P",{});var bre=s($d);Dir=r(bre,`Note:
Loading a model from its configuration file does `),Fve=n(bre,"STRONG",{});var I0t=s(Fve);Gir=r(I0t,"not"),I0t.forEach(t),Oir=r(bre,` load the model weights. It only affects the
model\u2019s configuration. Use `),FW=n(bre,"A",{href:!0});var N0t=s(FW);Vir=r(N0t,"from_pretrained()"),N0t.forEach(t),Xir=r(bre," to load the model weights."),bre.forEach(t),zir=i(pL),T(DM.$$.fragment,pL),pL.forEach(t),Qir=i(hl),fo=n(hl,"DIV",{class:!0});var Fa=s(fo);T(B8.$$.fragment,Fa),Wir=i(Fa),Tve=n(Fa,"P",{});var q0t=s(Tve);Hir=r(q0t,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),q0t.forEach(t),Uir=i(Fa),Ha=n(Fa,"P",{});var _L=s(Ha);Jir=r(_L,"The model class to instantiate is selected based on the "),Mve=n(_L,"CODE",{});var j0t=s(Mve);Yir=r(j0t,"model_type"),j0t.forEach(t),Kir=r(_L,` property of the config object (either
passed as an argument or loaded from `),Eve=n(_L,"CODE",{});var D0t=s(Eve);Zir=r(D0t,"pretrained_model_name_or_path"),D0t.forEach(t),edr=r(_L,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cve=n(_L,"CODE",{});var G0t=s(Cve);odr=r(G0t,"pretrained_model_name_or_path"),G0t.forEach(t),rdr=r(_L,":"),_L.forEach(t),tdr=i(Fa),et=n(Fa,"UL",{});var ul=s(et);GM=n(ul,"LI",{});var zBe=s(GM);wve=n(zBe,"STRONG",{});var O0t=s(wve);adr=r(O0t,"data2vec-audio"),O0t.forEach(t),ndr=r(zBe," \u2014 "),TW=n(zBe,"A",{href:!0});var V0t=s(TW);sdr=r(V0t,"Data2VecAudioForAudioFrameClassification"),V0t.forEach(t),ldr=r(zBe," (Data2VecAudio model)"),zBe.forEach(t),idr=i(ul),OM=n(ul,"LI",{});var QBe=s(OM);Ave=n(QBe,"STRONG",{});var X0t=s(Ave);ddr=r(X0t,"unispeech-sat"),X0t.forEach(t),cdr=r(QBe," \u2014 "),MW=n(QBe,"A",{href:!0});var z0t=s(MW);mdr=r(z0t,"UniSpeechSatForAudioFrameClassification"),z0t.forEach(t),fdr=r(QBe," (UniSpeechSat model)"),QBe.forEach(t),gdr=i(ul),VM=n(ul,"LI",{});var WBe=s(VM);Lve=n(WBe,"STRONG",{});var Q0t=s(Lve);hdr=r(Q0t,"wav2vec2"),Q0t.forEach(t),udr=r(WBe," \u2014 "),EW=n(WBe,"A",{href:!0});var W0t=s(EW);pdr=r(W0t,"Wav2Vec2ForAudioFrameClassification"),W0t.forEach(t),_dr=r(WBe," (Wav2Vec2 model)"),WBe.forEach(t),bdr=i(ul),XM=n(ul,"LI",{});var HBe=s(XM);yve=n(HBe,"STRONG",{});var H0t=s(yve);vdr=r(H0t,"wav2vec2-conformer"),H0t.forEach(t),Fdr=r(HBe," \u2014 "),CW=n(HBe,"A",{href:!0});var U0t=s(CW);Tdr=r(U0t,"Wav2Vec2ConformerForAudioFrameClassification"),U0t.forEach(t),Mdr=r(HBe," (Wav2Vec2-Conformer model)"),HBe.forEach(t),Edr=i(ul),zM=n(ul,"LI",{});var UBe=s(zM);xve=n(UBe,"STRONG",{});var J0t=s(xve);Cdr=r(J0t,"wavlm"),J0t.forEach(t),wdr=r(UBe," \u2014 "),wW=n(UBe,"A",{href:!0});var Y0t=s(wW);Adr=r(Y0t,"WavLMForAudioFrameClassification"),Y0t.forEach(t),Ldr=r(UBe," (WavLM model)"),UBe.forEach(t),ul.forEach(t),ydr=i(Fa),QM=n(Fa,"P",{});var JBe=s(QM);xdr=r(JBe,"The model is set in evaluation mode by default using "),$ve=n(JBe,"CODE",{});var K0t=s($ve);$dr=r(K0t,"model.eval()"),K0t.forEach(t),kdr=r(JBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kve=n(JBe,"CODE",{});var Z0t=s(kve);Sdr=r(Z0t,"model.train()"),Z0t.forEach(t),JBe.forEach(t),Rdr=i(Fa),T(WM.$$.fragment,Fa),Fa.forEach(t),hl.forEach(t),hVe=i(m),kd=n(m,"H2",{class:!0});var Fze=s(kd);HM=n(Fze,"A",{id:!0,class:!0,href:!0});var ewt=s(HM);Sve=n(ewt,"SPAN",{});var owt=s(Sve);T(I8.$$.fragment,owt),owt.forEach(t),ewt.forEach(t),Pdr=i(Fze),Rve=n(Fze,"SPAN",{});var rwt=s(Rve);Bdr=r(rwt,"AutoModelForCTC"),rwt.forEach(t),Fze.forEach(t),uVe=i(m),Qo=n(m,"DIV",{class:!0});var pl=s(Qo);T(N8.$$.fragment,pl),Idr=i(pl),Sd=n(pl,"P",{});var vre=s(Sd);Ndr=r(vre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),AW=n(vre,"A",{href:!0});var twt=s(AW);qdr=r(twt,"from_pretrained()"),twt.forEach(t),jdr=r(vre," class method or the "),LW=n(vre,"A",{href:!0});var awt=s(LW);Ddr=r(awt,"from_config()"),awt.forEach(t),Gdr=r(vre,` class
method.`),vre.forEach(t),Odr=i(pl),q8=n(pl,"P",{});var Tze=s(q8);Vdr=r(Tze,"This class cannot be instantiated directly using "),Pve=n(Tze,"CODE",{});var nwt=s(Pve);Xdr=r(nwt,"__init__()"),nwt.forEach(t),zdr=r(Tze," (throws an error)."),Tze.forEach(t),Qdr=i(pl),Mt=n(pl,"DIV",{class:!0});var bL=s(Mt);T(j8.$$.fragment,bL),Wdr=i(bL),Bve=n(bL,"P",{});var swt=s(Bve);Hdr=r(swt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),swt.forEach(t),Udr=i(bL),Rd=n(bL,"P",{});var Fre=s(Rd);Jdr=r(Fre,`Note:
Loading a model from its configuration file does `),Ive=n(Fre,"STRONG",{});var lwt=s(Ive);Ydr=r(lwt,"not"),lwt.forEach(t),Kdr=r(Fre,` load the model weights. It only affects the
model\u2019s configuration. Use `),yW=n(Fre,"A",{href:!0});var iwt=s(yW);Zdr=r(iwt,"from_pretrained()"),iwt.forEach(t),ecr=r(Fre," to load the model weights."),Fre.forEach(t),ocr=i(bL),T(UM.$$.fragment,bL),bL.forEach(t),rcr=i(pl),go=n(pl,"DIV",{class:!0});var Ta=s(go);T(D8.$$.fragment,Ta),tcr=i(Ta),Nve=n(Ta,"P",{});var dwt=s(Nve);acr=r(dwt,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),dwt.forEach(t),ncr=i(Ta),Ua=n(Ta,"P",{});var vL=s(Ua);scr=r(vL,"The model class to instantiate is selected based on the "),qve=n(vL,"CODE",{});var cwt=s(qve);lcr=r(cwt,"model_type"),cwt.forEach(t),icr=r(vL,` property of the config object (either
passed as an argument or loaded from `),jve=n(vL,"CODE",{});var mwt=s(jve);dcr=r(mwt,"pretrained_model_name_or_path"),mwt.forEach(t),ccr=r(vL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Dve=n(vL,"CODE",{});var fwt=s(Dve);mcr=r(fwt,"pretrained_model_name_or_path"),fwt.forEach(t),fcr=r(vL,":"),vL.forEach(t),gcr=i(Ta),Le=n(Ta,"UL",{});var Be=s(Le);JM=n(Be,"LI",{});var YBe=s(JM);Gve=n(YBe,"STRONG",{});var gwt=s(Gve);hcr=r(gwt,"data2vec-audio"),gwt.forEach(t),ucr=r(YBe," \u2014 "),xW=n(YBe,"A",{href:!0});var hwt=s(xW);pcr=r(hwt,"Data2VecAudioForCTC"),hwt.forEach(t),_cr=r(YBe," (Data2VecAudio model)"),YBe.forEach(t),bcr=i(Be),YM=n(Be,"LI",{});var KBe=s(YM);Ove=n(KBe,"STRONG",{});var uwt=s(Ove);vcr=r(uwt,"hubert"),uwt.forEach(t),Fcr=r(KBe," \u2014 "),$W=n(KBe,"A",{href:!0});var pwt=s($W);Tcr=r(pwt,"HubertForCTC"),pwt.forEach(t),Mcr=r(KBe," (Hubert model)"),KBe.forEach(t),Ecr=i(Be),KM=n(Be,"LI",{});var ZBe=s(KM);Vve=n(ZBe,"STRONG",{});var _wt=s(Vve);Ccr=r(_wt,"mctct"),_wt.forEach(t),wcr=r(ZBe," \u2014 "),kW=n(ZBe,"A",{href:!0});var bwt=s(kW);Acr=r(bwt,"MCTCTForCTC"),bwt.forEach(t),Lcr=r(ZBe," (M-CTC-T model)"),ZBe.forEach(t),ycr=i(Be),ZM=n(Be,"LI",{});var eIe=s(ZM);Xve=n(eIe,"STRONG",{});var vwt=s(Xve);xcr=r(vwt,"sew"),vwt.forEach(t),$cr=r(eIe," \u2014 "),SW=n(eIe,"A",{href:!0});var Fwt=s(SW);kcr=r(Fwt,"SEWForCTC"),Fwt.forEach(t),Scr=r(eIe," (SEW model)"),eIe.forEach(t),Rcr=i(Be),eE=n(Be,"LI",{});var oIe=s(eE);zve=n(oIe,"STRONG",{});var Twt=s(zve);Pcr=r(Twt,"sew-d"),Twt.forEach(t),Bcr=r(oIe," \u2014 "),RW=n(oIe,"A",{href:!0});var Mwt=s(RW);Icr=r(Mwt,"SEWDForCTC"),Mwt.forEach(t),Ncr=r(oIe," (SEW-D model)"),oIe.forEach(t),qcr=i(Be),oE=n(Be,"LI",{});var rIe=s(oE);Qve=n(rIe,"STRONG",{});var Ewt=s(Qve);jcr=r(Ewt,"unispeech"),Ewt.forEach(t),Dcr=r(rIe," \u2014 "),PW=n(rIe,"A",{href:!0});var Cwt=s(PW);Gcr=r(Cwt,"UniSpeechForCTC"),Cwt.forEach(t),Ocr=r(rIe," (UniSpeech model)"),rIe.forEach(t),Vcr=i(Be),rE=n(Be,"LI",{});var tIe=s(rE);Wve=n(tIe,"STRONG",{});var wwt=s(Wve);Xcr=r(wwt,"unispeech-sat"),wwt.forEach(t),zcr=r(tIe," \u2014 "),BW=n(tIe,"A",{href:!0});var Awt=s(BW);Qcr=r(Awt,"UniSpeechSatForCTC"),Awt.forEach(t),Wcr=r(tIe," (UniSpeechSat model)"),tIe.forEach(t),Hcr=i(Be),tE=n(Be,"LI",{});var aIe=s(tE);Hve=n(aIe,"STRONG",{});var Lwt=s(Hve);Ucr=r(Lwt,"wav2vec2"),Lwt.forEach(t),Jcr=r(aIe," \u2014 "),IW=n(aIe,"A",{href:!0});var ywt=s(IW);Ycr=r(ywt,"Wav2Vec2ForCTC"),ywt.forEach(t),Kcr=r(aIe," (Wav2Vec2 model)"),aIe.forEach(t),Zcr=i(Be),aE=n(Be,"LI",{});var nIe=s(aE);Uve=n(nIe,"STRONG",{});var xwt=s(Uve);emr=r(xwt,"wav2vec2-conformer"),xwt.forEach(t),omr=r(nIe," \u2014 "),NW=n(nIe,"A",{href:!0});var $wt=s(NW);rmr=r($wt,"Wav2Vec2ConformerForCTC"),$wt.forEach(t),tmr=r(nIe," (Wav2Vec2-Conformer model)"),nIe.forEach(t),amr=i(Be),nE=n(Be,"LI",{});var sIe=s(nE);Jve=n(sIe,"STRONG",{});var kwt=s(Jve);nmr=r(kwt,"wavlm"),kwt.forEach(t),smr=r(sIe," \u2014 "),qW=n(sIe,"A",{href:!0});var Swt=s(qW);lmr=r(Swt,"WavLMForCTC"),Swt.forEach(t),imr=r(sIe," (WavLM model)"),sIe.forEach(t),Be.forEach(t),dmr=i(Ta),sE=n(Ta,"P",{});var lIe=s(sE);cmr=r(lIe,"The model is set in evaluation mode by default using "),Yve=n(lIe,"CODE",{});var Rwt=s(Yve);mmr=r(Rwt,"model.eval()"),Rwt.forEach(t),fmr=r(lIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Kve=n(lIe,"CODE",{});var Pwt=s(Kve);gmr=r(Pwt,"model.train()"),Pwt.forEach(t),lIe.forEach(t),hmr=i(Ta),T(lE.$$.fragment,Ta),Ta.forEach(t),pl.forEach(t),pVe=i(m),Pd=n(m,"H2",{class:!0});var Mze=s(Pd);iE=n(Mze,"A",{id:!0,class:!0,href:!0});var Bwt=s(iE);Zve=n(Bwt,"SPAN",{});var Iwt=s(Zve);T(G8.$$.fragment,Iwt),Iwt.forEach(t),Bwt.forEach(t),umr=i(Mze),e1e=n(Mze,"SPAN",{});var Nwt=s(e1e);pmr=r(Nwt,"AutoModelForSpeechSeq2Seq"),Nwt.forEach(t),Mze.forEach(t),_Ve=i(m),Wo=n(m,"DIV",{class:!0});var _l=s(Wo);T(O8.$$.fragment,_l),_mr=i(_l),Bd=n(_l,"P",{});var Tre=s(Bd);bmr=r(Tre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),jW=n(Tre,"A",{href:!0});var qwt=s(jW);vmr=r(qwt,"from_pretrained()"),qwt.forEach(t),Fmr=r(Tre," class method or the "),DW=n(Tre,"A",{href:!0});var jwt=s(DW);Tmr=r(jwt,"from_config()"),jwt.forEach(t),Mmr=r(Tre,` class
method.`),Tre.forEach(t),Emr=i(_l),V8=n(_l,"P",{});var Eze=s(V8);Cmr=r(Eze,"This class cannot be instantiated directly using "),o1e=n(Eze,"CODE",{});var Dwt=s(o1e);wmr=r(Dwt,"__init__()"),Dwt.forEach(t),Amr=r(Eze," (throws an error)."),Eze.forEach(t),Lmr=i(_l),Et=n(_l,"DIV",{class:!0});var FL=s(Et);T(X8.$$.fragment,FL),ymr=i(FL),r1e=n(FL,"P",{});var Gwt=s(r1e);xmr=r(Gwt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Gwt.forEach(t),$mr=i(FL),Id=n(FL,"P",{});var Mre=s(Id);kmr=r(Mre,`Note:
Loading a model from its configuration file does `),t1e=n(Mre,"STRONG",{});var Owt=s(t1e);Smr=r(Owt,"not"),Owt.forEach(t),Rmr=r(Mre,` load the model weights. It only affects the
model\u2019s configuration. Use `),GW=n(Mre,"A",{href:!0});var Vwt=s(GW);Pmr=r(Vwt,"from_pretrained()"),Vwt.forEach(t),Bmr=r(Mre," to load the model weights."),Mre.forEach(t),Imr=i(FL),T(dE.$$.fragment,FL),FL.forEach(t),Nmr=i(_l),ho=n(_l,"DIV",{class:!0});var Ma=s(ho);T(z8.$$.fragment,Ma),qmr=i(Ma),a1e=n(Ma,"P",{});var Xwt=s(a1e);jmr=r(Xwt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Xwt.forEach(t),Dmr=i(Ma),Ja=n(Ma,"P",{});var TL=s(Ja);Gmr=r(TL,"The model class to instantiate is selected based on the "),n1e=n(TL,"CODE",{});var zwt=s(n1e);Omr=r(zwt,"model_type"),zwt.forEach(t),Vmr=r(TL,` property of the config object (either
passed as an argument or loaded from `),s1e=n(TL,"CODE",{});var Qwt=s(s1e);Xmr=r(Qwt,"pretrained_model_name_or_path"),Qwt.forEach(t),zmr=r(TL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l1e=n(TL,"CODE",{});var Wwt=s(l1e);Qmr=r(Wwt,"pretrained_model_name_or_path"),Wwt.forEach(t),Wmr=r(TL,":"),TL.forEach(t),Hmr=i(Ma),Q8=n(Ma,"UL",{});var Cze=s(Q8);cE=n(Cze,"LI",{});var iIe=s(cE);i1e=n(iIe,"STRONG",{});var Hwt=s(i1e);Umr=r(Hwt,"speech-encoder-decoder"),Hwt.forEach(t),Jmr=r(iIe," \u2014 "),OW=n(iIe,"A",{href:!0});var Uwt=s(OW);Ymr=r(Uwt,"SpeechEncoderDecoderModel"),Uwt.forEach(t),Kmr=r(iIe," (Speech Encoder decoder model)"),iIe.forEach(t),Zmr=i(Cze),mE=n(Cze,"LI",{});var dIe=s(mE);d1e=n(dIe,"STRONG",{});var Jwt=s(d1e);efr=r(Jwt,"speech_to_text"),Jwt.forEach(t),ofr=r(dIe," \u2014 "),VW=n(dIe,"A",{href:!0});var Ywt=s(VW);rfr=r(Ywt,"Speech2TextForConditionalGeneration"),Ywt.forEach(t),tfr=r(dIe," (Speech2Text model)"),dIe.forEach(t),Cze.forEach(t),afr=i(Ma),fE=n(Ma,"P",{});var cIe=s(fE);nfr=r(cIe,"The model is set in evaluation mode by default using "),c1e=n(cIe,"CODE",{});var Kwt=s(c1e);sfr=r(Kwt,"model.eval()"),Kwt.forEach(t),lfr=r(cIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),m1e=n(cIe,"CODE",{});var Zwt=s(m1e);ifr=r(Zwt,"model.train()"),Zwt.forEach(t),cIe.forEach(t),dfr=i(Ma),T(gE.$$.fragment,Ma),Ma.forEach(t),_l.forEach(t),bVe=i(m),Nd=n(m,"H2",{class:!0});var wze=s(Nd);hE=n(wze,"A",{id:!0,class:!0,href:!0});var eAt=s(hE);f1e=n(eAt,"SPAN",{});var oAt=s(f1e);T(W8.$$.fragment,oAt),oAt.forEach(t),eAt.forEach(t),cfr=i(wze),g1e=n(wze,"SPAN",{});var rAt=s(g1e);mfr=r(rAt,"AutoModelForAudioXVector"),rAt.forEach(t),wze.forEach(t),vVe=i(m),Ho=n(m,"DIV",{class:!0});var bl=s(Ho);T(H8.$$.fragment,bl),ffr=i(bl),qd=n(bl,"P",{});var Ere=s(qd);gfr=r(Ere,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),XW=n(Ere,"A",{href:!0});var tAt=s(XW);hfr=r(tAt,"from_pretrained()"),tAt.forEach(t),ufr=r(Ere," class method or the "),zW=n(Ere,"A",{href:!0});var aAt=s(zW);pfr=r(aAt,"from_config()"),aAt.forEach(t),_fr=r(Ere,` class
method.`),Ere.forEach(t),bfr=i(bl),U8=n(bl,"P",{});var Aze=s(U8);vfr=r(Aze,"This class cannot be instantiated directly using "),h1e=n(Aze,"CODE",{});var nAt=s(h1e);Ffr=r(nAt,"__init__()"),nAt.forEach(t),Tfr=r(Aze," (throws an error)."),Aze.forEach(t),Mfr=i(bl),Ct=n(bl,"DIV",{class:!0});var ML=s(Ct);T(J8.$$.fragment,ML),Efr=i(ML),u1e=n(ML,"P",{});var sAt=s(u1e);Cfr=r(sAt,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),sAt.forEach(t),wfr=i(ML),jd=n(ML,"P",{});var Cre=s(jd);Afr=r(Cre,`Note:
Loading a model from its configuration file does `),p1e=n(Cre,"STRONG",{});var lAt=s(p1e);Lfr=r(lAt,"not"),lAt.forEach(t),yfr=r(Cre,` load the model weights. It only affects the
model\u2019s configuration. Use `),QW=n(Cre,"A",{href:!0});var iAt=s(QW);xfr=r(iAt,"from_pretrained()"),iAt.forEach(t),$fr=r(Cre," to load the model weights."),Cre.forEach(t),kfr=i(ML),T(uE.$$.fragment,ML),ML.forEach(t),Sfr=i(bl),uo=n(bl,"DIV",{class:!0});var Ea=s(uo);T(Y8.$$.fragment,Ea),Rfr=i(Ea),_1e=n(Ea,"P",{});var dAt=s(_1e);Pfr=r(dAt,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),dAt.forEach(t),Bfr=i(Ea),Ya=n(Ea,"P",{});var EL=s(Ya);Ifr=r(EL,"The model class to instantiate is selected based on the "),b1e=n(EL,"CODE",{});var cAt=s(b1e);Nfr=r(cAt,"model_type"),cAt.forEach(t),qfr=r(EL,` property of the config object (either
passed as an argument or loaded from `),v1e=n(EL,"CODE",{});var mAt=s(v1e);jfr=r(mAt,"pretrained_model_name_or_path"),mAt.forEach(t),Dfr=r(EL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F1e=n(EL,"CODE",{});var fAt=s(F1e);Gfr=r(fAt,"pretrained_model_name_or_path"),fAt.forEach(t),Ofr=r(EL,":"),EL.forEach(t),Vfr=i(Ea),ot=n(Ea,"UL",{});var vl=s(ot);pE=n(vl,"LI",{});var mIe=s(pE);T1e=n(mIe,"STRONG",{});var gAt=s(T1e);Xfr=r(gAt,"data2vec-audio"),gAt.forEach(t),zfr=r(mIe," \u2014 "),WW=n(mIe,"A",{href:!0});var hAt=s(WW);Qfr=r(hAt,"Data2VecAudioForXVector"),hAt.forEach(t),Wfr=r(mIe," (Data2VecAudio model)"),mIe.forEach(t),Hfr=i(vl),_E=n(vl,"LI",{});var fIe=s(_E);M1e=n(fIe,"STRONG",{});var uAt=s(M1e);Ufr=r(uAt,"unispeech-sat"),uAt.forEach(t),Jfr=r(fIe," \u2014 "),HW=n(fIe,"A",{href:!0});var pAt=s(HW);Yfr=r(pAt,"UniSpeechSatForXVector"),pAt.forEach(t),Kfr=r(fIe," (UniSpeechSat model)"),fIe.forEach(t),Zfr=i(vl),bE=n(vl,"LI",{});var gIe=s(bE);E1e=n(gIe,"STRONG",{});var _At=s(E1e);egr=r(_At,"wav2vec2"),_At.forEach(t),ogr=r(gIe," \u2014 "),UW=n(gIe,"A",{href:!0});var bAt=s(UW);rgr=r(bAt,"Wav2Vec2ForXVector"),bAt.forEach(t),tgr=r(gIe," (Wav2Vec2 model)"),gIe.forEach(t),agr=i(vl),vE=n(vl,"LI",{});var hIe=s(vE);C1e=n(hIe,"STRONG",{});var vAt=s(C1e);ngr=r(vAt,"wav2vec2-conformer"),vAt.forEach(t),sgr=r(hIe," \u2014 "),JW=n(hIe,"A",{href:!0});var FAt=s(JW);lgr=r(FAt,"Wav2Vec2ConformerForXVector"),FAt.forEach(t),igr=r(hIe," (Wav2Vec2-Conformer model)"),hIe.forEach(t),dgr=i(vl),FE=n(vl,"LI",{});var uIe=s(FE);w1e=n(uIe,"STRONG",{});var TAt=s(w1e);cgr=r(TAt,"wavlm"),TAt.forEach(t),mgr=r(uIe," \u2014 "),YW=n(uIe,"A",{href:!0});var MAt=s(YW);fgr=r(MAt,"WavLMForXVector"),MAt.forEach(t),ggr=r(uIe," (WavLM model)"),uIe.forEach(t),vl.forEach(t),hgr=i(Ea),TE=n(Ea,"P",{});var pIe=s(TE);ugr=r(pIe,"The model is set in evaluation mode by default using "),A1e=n(pIe,"CODE",{});var EAt=s(A1e);pgr=r(EAt,"model.eval()"),EAt.forEach(t),_gr=r(pIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),L1e=n(pIe,"CODE",{});var CAt=s(L1e);bgr=r(CAt,"model.train()"),CAt.forEach(t),pIe.forEach(t),vgr=i(Ea),T(ME.$$.fragment,Ea),Ea.forEach(t),bl.forEach(t),FVe=i(m),Dd=n(m,"H2",{class:!0});var Lze=s(Dd);EE=n(Lze,"A",{id:!0,class:!0,href:!0});var wAt=s(EE);y1e=n(wAt,"SPAN",{});var AAt=s(y1e);T(K8.$$.fragment,AAt),AAt.forEach(t),wAt.forEach(t),Fgr=i(Lze),x1e=n(Lze,"SPAN",{});var LAt=s(x1e);Tgr=r(LAt,"AutoModelForMaskedImageModeling"),LAt.forEach(t),Lze.forEach(t),TVe=i(m),Uo=n(m,"DIV",{class:!0});var Fl=s(Uo);T(Z8.$$.fragment,Fl),Mgr=i(Fl),Gd=n(Fl,"P",{});var wre=s(Gd);Egr=r(wre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),KW=n(wre,"A",{href:!0});var yAt=s(KW);Cgr=r(yAt,"from_pretrained()"),yAt.forEach(t),wgr=r(wre," class method or the "),ZW=n(wre,"A",{href:!0});var xAt=s(ZW);Agr=r(xAt,"from_config()"),xAt.forEach(t),Lgr=r(wre,` class
method.`),wre.forEach(t),ygr=i(Fl),e9=n(Fl,"P",{});var yze=s(e9);xgr=r(yze,"This class cannot be instantiated directly using "),$1e=n(yze,"CODE",{});var $At=s($1e);$gr=r($At,"__init__()"),$At.forEach(t),kgr=r(yze," (throws an error)."),yze.forEach(t),Sgr=i(Fl),wt=n(Fl,"DIV",{class:!0});var CL=s(wt);T(o9.$$.fragment,CL),Rgr=i(CL),k1e=n(CL,"P",{});var kAt=s(k1e);Pgr=r(kAt,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),kAt.forEach(t),Bgr=i(CL),Od=n(CL,"P",{});var Are=s(Od);Igr=r(Are,`Note:
Loading a model from its configuration file does `),S1e=n(Are,"STRONG",{});var SAt=s(S1e);Ngr=r(SAt,"not"),SAt.forEach(t),qgr=r(Are,` load the model weights. It only affects the
model\u2019s configuration. Use `),eH=n(Are,"A",{href:!0});var RAt=s(eH);jgr=r(RAt,"from_pretrained()"),RAt.forEach(t),Dgr=r(Are," to load the model weights."),Are.forEach(t),Ggr=i(CL),T(CE.$$.fragment,CL),CL.forEach(t),Ogr=i(Fl),po=n(Fl,"DIV",{class:!0});var Ca=s(po);T(r9.$$.fragment,Ca),Vgr=i(Ca),R1e=n(Ca,"P",{});var PAt=s(R1e);Xgr=r(PAt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),PAt.forEach(t),zgr=i(Ca),Ka=n(Ca,"P",{});var wL=s(Ka);Qgr=r(wL,"The model class to instantiate is selected based on the "),P1e=n(wL,"CODE",{});var BAt=s(P1e);Wgr=r(BAt,"model_type"),BAt.forEach(t),Hgr=r(wL,` property of the config object (either
passed as an argument or loaded from `),B1e=n(wL,"CODE",{});var IAt=s(B1e);Ugr=r(IAt,"pretrained_model_name_or_path"),IAt.forEach(t),Jgr=r(wL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I1e=n(wL,"CODE",{});var NAt=s(I1e);Ygr=r(NAt,"pretrained_model_name_or_path"),NAt.forEach(t),Kgr=r(wL,":"),wL.forEach(t),Zgr=i(Ca),Vd=n(Ca,"UL",{});var Lre=s(Vd);wE=n(Lre,"LI",{});var _Ie=s(wE);N1e=n(_Ie,"STRONG",{});var qAt=s(N1e);ehr=r(qAt,"deit"),qAt.forEach(t),ohr=r(_Ie," \u2014 "),oH=n(_Ie,"A",{href:!0});var jAt=s(oH);rhr=r(jAt,"DeiTForMaskedImageModeling"),jAt.forEach(t),thr=r(_Ie," (DeiT model)"),_Ie.forEach(t),ahr=i(Lre),AE=n(Lre,"LI",{});var bIe=s(AE);q1e=n(bIe,"STRONG",{});var DAt=s(q1e);nhr=r(DAt,"swin"),DAt.forEach(t),shr=r(bIe," \u2014 "),rH=n(bIe,"A",{href:!0});var GAt=s(rH);lhr=r(GAt,"SwinForMaskedImageModeling"),GAt.forEach(t),ihr=r(bIe," (Swin Transformer model)"),bIe.forEach(t),dhr=i(Lre),LE=n(Lre,"LI",{});var vIe=s(LE);j1e=n(vIe,"STRONG",{});var OAt=s(j1e);chr=r(OAt,"vit"),OAt.forEach(t),mhr=r(vIe," \u2014 "),tH=n(vIe,"A",{href:!0});var VAt=s(tH);fhr=r(VAt,"ViTForMaskedImageModeling"),VAt.forEach(t),ghr=r(vIe," (ViT model)"),vIe.forEach(t),Lre.forEach(t),hhr=i(Ca),yE=n(Ca,"P",{});var FIe=s(yE);uhr=r(FIe,"The model is set in evaluation mode by default using "),D1e=n(FIe,"CODE",{});var XAt=s(D1e);phr=r(XAt,"model.eval()"),XAt.forEach(t),_hr=r(FIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),G1e=n(FIe,"CODE",{});var zAt=s(G1e);bhr=r(zAt,"model.train()"),zAt.forEach(t),FIe.forEach(t),vhr=i(Ca),T(xE.$$.fragment,Ca),Ca.forEach(t),Fl.forEach(t),MVe=i(m),Xd=n(m,"H2",{class:!0});var xze=s(Xd);$E=n(xze,"A",{id:!0,class:!0,href:!0});var QAt=s($E);O1e=n(QAt,"SPAN",{});var WAt=s(O1e);T(t9.$$.fragment,WAt),WAt.forEach(t),QAt.forEach(t),Fhr=i(xze),V1e=n(xze,"SPAN",{});var HAt=s(V1e);Thr=r(HAt,"AutoModelForObjectDetection"),HAt.forEach(t),xze.forEach(t),EVe=i(m),Jo=n(m,"DIV",{class:!0});var Tl=s(Jo);T(a9.$$.fragment,Tl),Mhr=i(Tl),zd=n(Tl,"P",{});var yre=s(zd);Ehr=r(yre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),aH=n(yre,"A",{href:!0});var UAt=s(aH);Chr=r(UAt,"from_pretrained()"),UAt.forEach(t),whr=r(yre," class method or the "),nH=n(yre,"A",{href:!0});var JAt=s(nH);Ahr=r(JAt,"from_config()"),JAt.forEach(t),Lhr=r(yre,` class
method.`),yre.forEach(t),yhr=i(Tl),n9=n(Tl,"P",{});var $ze=s(n9);xhr=r($ze,"This class cannot be instantiated directly using "),X1e=n($ze,"CODE",{});var YAt=s(X1e);$hr=r(YAt,"__init__()"),YAt.forEach(t),khr=r($ze," (throws an error)."),$ze.forEach(t),Shr=i(Tl),At=n(Tl,"DIV",{class:!0});var AL=s(At);T(s9.$$.fragment,AL),Rhr=i(AL),z1e=n(AL,"P",{});var KAt=s(z1e);Phr=r(KAt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),KAt.forEach(t),Bhr=i(AL),Qd=n(AL,"P",{});var xre=s(Qd);Ihr=r(xre,`Note:
Loading a model from its configuration file does `),Q1e=n(xre,"STRONG",{});var ZAt=s(Q1e);Nhr=r(ZAt,"not"),ZAt.forEach(t),qhr=r(xre,` load the model weights. It only affects the
model\u2019s configuration. Use `),sH=n(xre,"A",{href:!0});var e6t=s(sH);jhr=r(e6t,"from_pretrained()"),e6t.forEach(t),Dhr=r(xre," to load the model weights."),xre.forEach(t),Ghr=i(AL),T(kE.$$.fragment,AL),AL.forEach(t),Ohr=i(Tl),_o=n(Tl,"DIV",{class:!0});var wa=s(_o);T(l9.$$.fragment,wa),Vhr=i(wa),W1e=n(wa,"P",{});var o6t=s(W1e);Xhr=r(o6t,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),o6t.forEach(t),zhr=i(wa),Za=n(wa,"P",{});var LL=s(Za);Qhr=r(LL,"The model class to instantiate is selected based on the "),H1e=n(LL,"CODE",{});var r6t=s(H1e);Whr=r(r6t,"model_type"),r6t.forEach(t),Hhr=r(LL,` property of the config object (either
passed as an argument or loaded from `),U1e=n(LL,"CODE",{});var t6t=s(U1e);Uhr=r(t6t,"pretrained_model_name_or_path"),t6t.forEach(t),Jhr=r(LL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J1e=n(LL,"CODE",{});var a6t=s(J1e);Yhr=r(a6t,"pretrained_model_name_or_path"),a6t.forEach(t),Khr=r(LL,":"),LL.forEach(t),Zhr=i(wa),i9=n(wa,"UL",{});var kze=s(i9);SE=n(kze,"LI",{});var TIe=s(SE);Y1e=n(TIe,"STRONG",{});var n6t=s(Y1e);eur=r(n6t,"detr"),n6t.forEach(t),our=r(TIe," \u2014 "),lH=n(TIe,"A",{href:!0});var s6t=s(lH);rur=r(s6t,"DetrForObjectDetection"),s6t.forEach(t),tur=r(TIe," (DETR model)"),TIe.forEach(t),aur=i(kze),RE=n(kze,"LI",{});var MIe=s(RE);K1e=n(MIe,"STRONG",{});var l6t=s(K1e);nur=r(l6t,"yolos"),l6t.forEach(t),sur=r(MIe," \u2014 "),iH=n(MIe,"A",{href:!0});var i6t=s(iH);lur=r(i6t,"YolosForObjectDetection"),i6t.forEach(t),iur=r(MIe," (YOLOS model)"),MIe.forEach(t),kze.forEach(t),dur=i(wa),PE=n(wa,"P",{});var EIe=s(PE);cur=r(EIe,"The model is set in evaluation mode by default using "),Z1e=n(EIe,"CODE",{});var d6t=s(Z1e);mur=r(d6t,"model.eval()"),d6t.forEach(t),fur=r(EIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),eFe=n(EIe,"CODE",{});var c6t=s(eFe);gur=r(c6t,"model.train()"),c6t.forEach(t),EIe.forEach(t),hur=i(wa),T(BE.$$.fragment,wa),wa.forEach(t),Tl.forEach(t),CVe=i(m),Wd=n(m,"H2",{class:!0});var Sze=s(Wd);IE=n(Sze,"A",{id:!0,class:!0,href:!0});var m6t=s(IE);oFe=n(m6t,"SPAN",{});var f6t=s(oFe);T(d9.$$.fragment,f6t),f6t.forEach(t),m6t.forEach(t),uur=i(Sze),rFe=n(Sze,"SPAN",{});var g6t=s(rFe);pur=r(g6t,"AutoModelForImageSegmentation"),g6t.forEach(t),Sze.forEach(t),wVe=i(m),Yo=n(m,"DIV",{class:!0});var Ml=s(Yo);T(c9.$$.fragment,Ml),_ur=i(Ml),Hd=n(Ml,"P",{});var $re=s(Hd);bur=r($re,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),dH=n($re,"A",{href:!0});var h6t=s(dH);vur=r(h6t,"from_pretrained()"),h6t.forEach(t),Fur=r($re," class method or the "),cH=n($re,"A",{href:!0});var u6t=s(cH);Tur=r(u6t,"from_config()"),u6t.forEach(t),Mur=r($re,` class
method.`),$re.forEach(t),Eur=i(Ml),m9=n(Ml,"P",{});var Rze=s(m9);Cur=r(Rze,"This class cannot be instantiated directly using "),tFe=n(Rze,"CODE",{});var p6t=s(tFe);wur=r(p6t,"__init__()"),p6t.forEach(t),Aur=r(Rze," (throws an error)."),Rze.forEach(t),Lur=i(Ml),Lt=n(Ml,"DIV",{class:!0});var yL=s(Lt);T(f9.$$.fragment,yL),yur=i(yL),aFe=n(yL,"P",{});var _6t=s(aFe);xur=r(_6t,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),_6t.forEach(t),$ur=i(yL),Ud=n(yL,"P",{});var kre=s(Ud);kur=r(kre,`Note:
Loading a model from its configuration file does `),nFe=n(kre,"STRONG",{});var b6t=s(nFe);Sur=r(b6t,"not"),b6t.forEach(t),Rur=r(kre,` load the model weights. It only affects the
model\u2019s configuration. Use `),mH=n(kre,"A",{href:!0});var v6t=s(mH);Pur=r(v6t,"from_pretrained()"),v6t.forEach(t),Bur=r(kre," to load the model weights."),kre.forEach(t),Iur=i(yL),T(NE.$$.fragment,yL),yL.forEach(t),Nur=i(Ml),bo=n(Ml,"DIV",{class:!0});var Aa=s(bo);T(g9.$$.fragment,Aa),qur=i(Aa),sFe=n(Aa,"P",{});var F6t=s(sFe);jur=r(F6t,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),F6t.forEach(t),Dur=i(Aa),en=n(Aa,"P",{});var xL=s(en);Gur=r(xL,"The model class to instantiate is selected based on the "),lFe=n(xL,"CODE",{});var T6t=s(lFe);Our=r(T6t,"model_type"),T6t.forEach(t),Vur=r(xL,` property of the config object (either
passed as an argument or loaded from `),iFe=n(xL,"CODE",{});var M6t=s(iFe);Xur=r(M6t,"pretrained_model_name_or_path"),M6t.forEach(t),zur=r(xL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dFe=n(xL,"CODE",{});var E6t=s(dFe);Qur=r(E6t,"pretrained_model_name_or_path"),E6t.forEach(t),Wur=r(xL,":"),xL.forEach(t),Hur=i(Aa),cFe=n(Aa,"UL",{});var C6t=s(cFe);qE=n(C6t,"LI",{});var CIe=s(qE);mFe=n(CIe,"STRONG",{});var w6t=s(mFe);Uur=r(w6t,"detr"),w6t.forEach(t),Jur=r(CIe," \u2014 "),fH=n(CIe,"A",{href:!0});var A6t=s(fH);Yur=r(A6t,"DetrForSegmentation"),A6t.forEach(t),Kur=r(CIe," (DETR model)"),CIe.forEach(t),C6t.forEach(t),Zur=i(Aa),jE=n(Aa,"P",{});var wIe=s(jE);epr=r(wIe,"The model is set in evaluation mode by default using "),fFe=n(wIe,"CODE",{});var L6t=s(fFe);opr=r(L6t,"model.eval()"),L6t.forEach(t),rpr=r(wIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gFe=n(wIe,"CODE",{});var y6t=s(gFe);tpr=r(y6t,"model.train()"),y6t.forEach(t),wIe.forEach(t),apr=i(Aa),T(DE.$$.fragment,Aa),Aa.forEach(t),Ml.forEach(t),AVe=i(m),Jd=n(m,"H2",{class:!0});var Pze=s(Jd);GE=n(Pze,"A",{id:!0,class:!0,href:!0});var x6t=s(GE);hFe=n(x6t,"SPAN",{});var $6t=s(hFe);T(h9.$$.fragment,$6t),$6t.forEach(t),x6t.forEach(t),npr=i(Pze),uFe=n(Pze,"SPAN",{});var k6t=s(uFe);spr=r(k6t,"AutoModelForSemanticSegmentation"),k6t.forEach(t),Pze.forEach(t),LVe=i(m),Ko=n(m,"DIV",{class:!0});var El=s(Ko);T(u9.$$.fragment,El),lpr=i(El),Yd=n(El,"P",{});var Sre=s(Yd);ipr=r(Sre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),gH=n(Sre,"A",{href:!0});var S6t=s(gH);dpr=r(S6t,"from_pretrained()"),S6t.forEach(t),cpr=r(Sre," class method or the "),hH=n(Sre,"A",{href:!0});var R6t=s(hH);mpr=r(R6t,"from_config()"),R6t.forEach(t),fpr=r(Sre,` class
method.`),Sre.forEach(t),gpr=i(El),p9=n(El,"P",{});var Bze=s(p9);hpr=r(Bze,"This class cannot be instantiated directly using "),pFe=n(Bze,"CODE",{});var P6t=s(pFe);upr=r(P6t,"__init__()"),P6t.forEach(t),ppr=r(Bze," (throws an error)."),Bze.forEach(t),_pr=i(El),yt=n(El,"DIV",{class:!0});var $L=s(yt);T(_9.$$.fragment,$L),bpr=i($L),_Fe=n($L,"P",{});var B6t=s(_Fe);vpr=r(B6t,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),B6t.forEach(t),Fpr=i($L),Kd=n($L,"P",{});var Rre=s(Kd);Tpr=r(Rre,`Note:
Loading a model from its configuration file does `),bFe=n(Rre,"STRONG",{});var I6t=s(bFe);Mpr=r(I6t,"not"),I6t.forEach(t),Epr=r(Rre,` load the model weights. It only affects the
model\u2019s configuration. Use `),uH=n(Rre,"A",{href:!0});var N6t=s(uH);Cpr=r(N6t,"from_pretrained()"),N6t.forEach(t),wpr=r(Rre," to load the model weights."),Rre.forEach(t),Apr=i($L),T(OE.$$.fragment,$L),$L.forEach(t),Lpr=i(El),vo=n(El,"DIV",{class:!0});var La=s(vo);T(b9.$$.fragment,La),ypr=i(La),vFe=n(La,"P",{});var q6t=s(vFe);xpr=r(q6t,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),q6t.forEach(t),$pr=i(La),on=n(La,"P",{});var kL=s(on);kpr=r(kL,"The model class to instantiate is selected based on the "),FFe=n(kL,"CODE",{});var j6t=s(FFe);Spr=r(j6t,"model_type"),j6t.forEach(t),Rpr=r(kL,` property of the config object (either
passed as an argument or loaded from `),TFe=n(kL,"CODE",{});var D6t=s(TFe);Ppr=r(D6t,"pretrained_model_name_or_path"),D6t.forEach(t),Bpr=r(kL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),MFe=n(kL,"CODE",{});var G6t=s(MFe);Ipr=r(G6t,"pretrained_model_name_or_path"),G6t.forEach(t),Npr=r(kL,":"),kL.forEach(t),qpr=i(La),rn=n(La,"UL",{});var SL=s(rn);VE=n(SL,"LI",{});var AIe=s(VE);EFe=n(AIe,"STRONG",{});var O6t=s(EFe);jpr=r(O6t,"beit"),O6t.forEach(t),Dpr=r(AIe," \u2014 "),pH=n(AIe,"A",{href:!0});var V6t=s(pH);Gpr=r(V6t,"BeitForSemanticSegmentation"),V6t.forEach(t),Opr=r(AIe," (BEiT model)"),AIe.forEach(t),Vpr=i(SL),XE=n(SL,"LI",{});var LIe=s(XE);CFe=n(LIe,"STRONG",{});var X6t=s(CFe);Xpr=r(X6t,"data2vec-vision"),X6t.forEach(t),zpr=r(LIe," \u2014 "),_H=n(LIe,"A",{href:!0});var z6t=s(_H);Qpr=r(z6t,"Data2VecVisionForSemanticSegmentation"),z6t.forEach(t),Wpr=r(LIe," (Data2VecVision model)"),LIe.forEach(t),Hpr=i(SL),zE=n(SL,"LI",{});var yIe=s(zE);wFe=n(yIe,"STRONG",{});var Q6t=s(wFe);Upr=r(Q6t,"dpt"),Q6t.forEach(t),Jpr=r(yIe," \u2014 "),bH=n(yIe,"A",{href:!0});var W6t=s(bH);Ypr=r(W6t,"DPTForSemanticSegmentation"),W6t.forEach(t),Kpr=r(yIe," (DPT model)"),yIe.forEach(t),Zpr=i(SL),QE=n(SL,"LI",{});var xIe=s(QE);AFe=n(xIe,"STRONG",{});var H6t=s(AFe);e_r=r(H6t,"segformer"),H6t.forEach(t),o_r=r(xIe," \u2014 "),vH=n(xIe,"A",{href:!0});var U6t=s(vH);r_r=r(U6t,"SegformerForSemanticSegmentation"),U6t.forEach(t),t_r=r(xIe," (SegFormer model)"),xIe.forEach(t),SL.forEach(t),a_r=i(La),WE=n(La,"P",{});var $Ie=s(WE);n_r=r($Ie,"The model is set in evaluation mode by default using "),LFe=n($Ie,"CODE",{});var J6t=s(LFe);s_r=r(J6t,"model.eval()"),J6t.forEach(t),l_r=r($Ie,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yFe=n($Ie,"CODE",{});var Y6t=s(yFe);i_r=r(Y6t,"model.train()"),Y6t.forEach(t),$Ie.forEach(t),d_r=i(La),T(HE.$$.fragment,La),La.forEach(t),El.forEach(t),yVe=i(m),Zd=n(m,"H2",{class:!0});var Ize=s(Zd);UE=n(Ize,"A",{id:!0,class:!0,href:!0});var K6t=s(UE);xFe=n(K6t,"SPAN",{});var Z6t=s(xFe);T(v9.$$.fragment,Z6t),Z6t.forEach(t),K6t.forEach(t),c_r=i(Ize),$Fe=n(Ize,"SPAN",{});var eLt=s($Fe);m_r=r(eLt,"AutoModelForInstanceSegmentation"),eLt.forEach(t),Ize.forEach(t),xVe=i(m),Zo=n(m,"DIV",{class:!0});var Cl=s(Zo);T(F9.$$.fragment,Cl),f_r=i(Cl),ec=n(Cl,"P",{});var Pre=s(ec);g_r=r(Pre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),FH=n(Pre,"A",{href:!0});var oLt=s(FH);h_r=r(oLt,"from_pretrained()"),oLt.forEach(t),u_r=r(Pre," class method or the "),TH=n(Pre,"A",{href:!0});var rLt=s(TH);p_r=r(rLt,"from_config()"),rLt.forEach(t),__r=r(Pre,` class
method.`),Pre.forEach(t),b_r=i(Cl),T9=n(Cl,"P",{});var Nze=s(T9);v_r=r(Nze,"This class cannot be instantiated directly using "),kFe=n(Nze,"CODE",{});var tLt=s(kFe);F_r=r(tLt,"__init__()"),tLt.forEach(t),T_r=r(Nze," (throws an error)."),Nze.forEach(t),M_r=i(Cl),xt=n(Cl,"DIV",{class:!0});var RL=s(xt);T(M9.$$.fragment,RL),E_r=i(RL),SFe=n(RL,"P",{});var aLt=s(SFe);C_r=r(aLt,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),aLt.forEach(t),w_r=i(RL),oc=n(RL,"P",{});var Bre=s(oc);A_r=r(Bre,`Note:
Loading a model from its configuration file does `),RFe=n(Bre,"STRONG",{});var nLt=s(RFe);L_r=r(nLt,"not"),nLt.forEach(t),y_r=r(Bre,` load the model weights. It only affects the
model\u2019s configuration. Use `),MH=n(Bre,"A",{href:!0});var sLt=s(MH);x_r=r(sLt,"from_pretrained()"),sLt.forEach(t),$_r=r(Bre," to load the model weights."),Bre.forEach(t),k_r=i(RL),T(JE.$$.fragment,RL),RL.forEach(t),S_r=i(Cl),Fo=n(Cl,"DIV",{class:!0});var ya=s(Fo);T(E9.$$.fragment,ya),R_r=i(ya),PFe=n(ya,"P",{});var lLt=s(PFe);P_r=r(lLt,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),lLt.forEach(t),B_r=i(ya),tn=n(ya,"P",{});var PL=s(tn);I_r=r(PL,"The model class to instantiate is selected based on the "),BFe=n(PL,"CODE",{});var iLt=s(BFe);N_r=r(iLt,"model_type"),iLt.forEach(t),q_r=r(PL,` property of the config object (either
passed as an argument or loaded from `),IFe=n(PL,"CODE",{});var dLt=s(IFe);j_r=r(dLt,"pretrained_model_name_or_path"),dLt.forEach(t),D_r=r(PL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),NFe=n(PL,"CODE",{});var cLt=s(NFe);G_r=r(cLt,"pretrained_model_name_or_path"),cLt.forEach(t),O_r=r(PL,":"),PL.forEach(t),V_r=i(ya),qFe=n(ya,"UL",{});var mLt=s(qFe);YE=n(mLt,"LI",{});var kIe=s(YE);jFe=n(kIe,"STRONG",{});var fLt=s(jFe);X_r=r(fLt,"maskformer"),fLt.forEach(t),z_r=r(kIe," \u2014 "),EH=n(kIe,"A",{href:!0});var gLt=s(EH);Q_r=r(gLt,"MaskFormerForInstanceSegmentation"),gLt.forEach(t),W_r=r(kIe," (MaskFormer model)"),kIe.forEach(t),mLt.forEach(t),H_r=i(ya),KE=n(ya,"P",{});var SIe=s(KE);U_r=r(SIe,"The model is set in evaluation mode by default using "),DFe=n(SIe,"CODE",{});var hLt=s(DFe);J_r=r(hLt,"model.eval()"),hLt.forEach(t),Y_r=r(SIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),GFe=n(SIe,"CODE",{});var uLt=s(GFe);K_r=r(uLt,"model.train()"),uLt.forEach(t),SIe.forEach(t),Z_r=i(ya),T(ZE.$$.fragment,ya),ya.forEach(t),Cl.forEach(t),$Ve=i(m),rc=n(m,"H2",{class:!0});var qze=s(rc);e4=n(qze,"A",{id:!0,class:!0,href:!0});var pLt=s(e4);OFe=n(pLt,"SPAN",{});var _Lt=s(OFe);T(C9.$$.fragment,_Lt),_Lt.forEach(t),pLt.forEach(t),e2r=i(qze),VFe=n(qze,"SPAN",{});var bLt=s(VFe);o2r=r(bLt,"TFAutoModel"),bLt.forEach(t),qze.forEach(t),kVe=i(m),er=n(m,"DIV",{class:!0});var wl=s(er);T(w9.$$.fragment,wl),r2r=i(wl),tc=n(wl,"P",{});var Ire=s(tc);t2r=r(Ire,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),CH=n(Ire,"A",{href:!0});var vLt=s(CH);a2r=r(vLt,"from_pretrained()"),vLt.forEach(t),n2r=r(Ire," class method or the "),wH=n(Ire,"A",{href:!0});var FLt=s(wH);s2r=r(FLt,"from_config()"),FLt.forEach(t),l2r=r(Ire,` class
method.`),Ire.forEach(t),i2r=i(wl),A9=n(wl,"P",{});var jze=s(A9);d2r=r(jze,"This class cannot be instantiated directly using "),XFe=n(jze,"CODE",{});var TLt=s(XFe);c2r=r(TLt,"__init__()"),TLt.forEach(t),m2r=r(jze," (throws an error)."),jze.forEach(t),f2r=i(wl),$t=n(wl,"DIV",{class:!0});var BL=s($t);T(L9.$$.fragment,BL),g2r=i(BL),zFe=n(BL,"P",{});var MLt=s(zFe);h2r=r(MLt,"Instantiates one of the base model classes of the library from a configuration."),MLt.forEach(t),u2r=i(BL),ac=n(BL,"P",{});var Nre=s(ac);p2r=r(Nre,`Note:
Loading a model from its configuration file does `),QFe=n(Nre,"STRONG",{});var ELt=s(QFe);_2r=r(ELt,"not"),ELt.forEach(t),b2r=r(Nre,` load the model weights. It only affects the
model\u2019s configuration. Use `),AH=n(Nre,"A",{href:!0});var CLt=s(AH);v2r=r(CLt,"from_pretrained()"),CLt.forEach(t),F2r=r(Nre," to load the model weights."),Nre.forEach(t),T2r=i(BL),T(o4.$$.fragment,BL),BL.forEach(t),M2r=i(wl),yr=n(wl,"DIV",{class:!0});var Al=s(yr);T(y9.$$.fragment,Al),E2r=i(Al),WFe=n(Al,"P",{});var wLt=s(WFe);C2r=r(wLt,"Instantiate one of the base model classes of the library from a pretrained model."),wLt.forEach(t),w2r=i(Al),an=n(Al,"P",{});var IL=s(an);A2r=r(IL,"The model class to instantiate is selected based on the "),HFe=n(IL,"CODE",{});var ALt=s(HFe);L2r=r(ALt,"model_type"),ALt.forEach(t),y2r=r(IL,` property of the config object (either
passed as an argument or loaded from `),UFe=n(IL,"CODE",{});var LLt=s(UFe);x2r=r(LLt,"pretrained_model_name_or_path"),LLt.forEach(t),$2r=r(IL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),JFe=n(IL,"CODE",{});var yLt=s(JFe);k2r=r(yLt,"pretrained_model_name_or_path"),yLt.forEach(t),S2r=r(IL,":"),IL.forEach(t),R2r=i(Al),j=n(Al,"UL",{});var D=s(j);r4=n(D,"LI",{});var RIe=s(r4);YFe=n(RIe,"STRONG",{});var xLt=s(YFe);P2r=r(xLt,"albert"),xLt.forEach(t),B2r=r(RIe," \u2014 "),LH=n(RIe,"A",{href:!0});var $Lt=s(LH);I2r=r($Lt,"TFAlbertModel"),$Lt.forEach(t),N2r=r(RIe," (ALBERT model)"),RIe.forEach(t),q2r=i(D),t4=n(D,"LI",{});var PIe=s(t4);KFe=n(PIe,"STRONG",{});var kLt=s(KFe);j2r=r(kLt,"bart"),kLt.forEach(t),D2r=r(PIe," \u2014 "),yH=n(PIe,"A",{href:!0});var SLt=s(yH);G2r=r(SLt,"TFBartModel"),SLt.forEach(t),O2r=r(PIe," (BART model)"),PIe.forEach(t),V2r=i(D),a4=n(D,"LI",{});var BIe=s(a4);ZFe=n(BIe,"STRONG",{});var RLt=s(ZFe);X2r=r(RLt,"bert"),RLt.forEach(t),z2r=r(BIe," \u2014 "),xH=n(BIe,"A",{href:!0});var PLt=s(xH);Q2r=r(PLt,"TFBertModel"),PLt.forEach(t),W2r=r(BIe," (BERT model)"),BIe.forEach(t),H2r=i(D),n4=n(D,"LI",{});var IIe=s(n4);eTe=n(IIe,"STRONG",{});var BLt=s(eTe);U2r=r(BLt,"blenderbot"),BLt.forEach(t),J2r=r(IIe," \u2014 "),$H=n(IIe,"A",{href:!0});var ILt=s($H);Y2r=r(ILt,"TFBlenderbotModel"),ILt.forEach(t),K2r=r(IIe," (Blenderbot model)"),IIe.forEach(t),Z2r=i(D),s4=n(D,"LI",{});var NIe=s(s4);oTe=n(NIe,"STRONG",{});var NLt=s(oTe);ebr=r(NLt,"blenderbot-small"),NLt.forEach(t),obr=r(NIe," \u2014 "),kH=n(NIe,"A",{href:!0});var qLt=s(kH);rbr=r(qLt,"TFBlenderbotSmallModel"),qLt.forEach(t),tbr=r(NIe," (BlenderbotSmall model)"),NIe.forEach(t),abr=i(D),l4=n(D,"LI",{});var qIe=s(l4);rTe=n(qIe,"STRONG",{});var jLt=s(rTe);nbr=r(jLt,"camembert"),jLt.forEach(t),sbr=r(qIe," \u2014 "),SH=n(qIe,"A",{href:!0});var DLt=s(SH);lbr=r(DLt,"TFCamembertModel"),DLt.forEach(t),ibr=r(qIe," (CamemBERT model)"),qIe.forEach(t),dbr=i(D),i4=n(D,"LI",{});var jIe=s(i4);tTe=n(jIe,"STRONG",{});var GLt=s(tTe);cbr=r(GLt,"clip"),GLt.forEach(t),mbr=r(jIe," \u2014 "),RH=n(jIe,"A",{href:!0});var OLt=s(RH);fbr=r(OLt,"TFCLIPModel"),OLt.forEach(t),gbr=r(jIe," (CLIP model)"),jIe.forEach(t),hbr=i(D),d4=n(D,"LI",{});var DIe=s(d4);aTe=n(DIe,"STRONG",{});var VLt=s(aTe);ubr=r(VLt,"convbert"),VLt.forEach(t),pbr=r(DIe," \u2014 "),PH=n(DIe,"A",{href:!0});var XLt=s(PH);_br=r(XLt,"TFConvBertModel"),XLt.forEach(t),bbr=r(DIe," (ConvBERT model)"),DIe.forEach(t),vbr=i(D),c4=n(D,"LI",{});var GIe=s(c4);nTe=n(GIe,"STRONG",{});var zLt=s(nTe);Fbr=r(zLt,"convnext"),zLt.forEach(t),Tbr=r(GIe," \u2014 "),BH=n(GIe,"A",{href:!0});var QLt=s(BH);Mbr=r(QLt,"TFConvNextModel"),QLt.forEach(t),Ebr=r(GIe," (ConvNeXT model)"),GIe.forEach(t),Cbr=i(D),m4=n(D,"LI",{});var OIe=s(m4);sTe=n(OIe,"STRONG",{});var WLt=s(sTe);wbr=r(WLt,"ctrl"),WLt.forEach(t),Abr=r(OIe," \u2014 "),IH=n(OIe,"A",{href:!0});var HLt=s(IH);Lbr=r(HLt,"TFCTRLModel"),HLt.forEach(t),ybr=r(OIe," (CTRL model)"),OIe.forEach(t),xbr=i(D),f4=n(D,"LI",{});var VIe=s(f4);lTe=n(VIe,"STRONG",{});var ULt=s(lTe);$br=r(ULt,"data2vec-vision"),ULt.forEach(t),kbr=r(VIe," \u2014 "),NH=n(VIe,"A",{href:!0});var JLt=s(NH);Sbr=r(JLt,"TFData2VecVisionModel"),JLt.forEach(t),Rbr=r(VIe," (Data2VecVision model)"),VIe.forEach(t),Pbr=i(D),g4=n(D,"LI",{});var XIe=s(g4);iTe=n(XIe,"STRONG",{});var YLt=s(iTe);Bbr=r(YLt,"deberta"),YLt.forEach(t),Ibr=r(XIe," \u2014 "),qH=n(XIe,"A",{href:!0});var KLt=s(qH);Nbr=r(KLt,"TFDebertaModel"),KLt.forEach(t),qbr=r(XIe," (DeBERTa model)"),XIe.forEach(t),jbr=i(D),h4=n(D,"LI",{});var zIe=s(h4);dTe=n(zIe,"STRONG",{});var ZLt=s(dTe);Dbr=r(ZLt,"deberta-v2"),ZLt.forEach(t),Gbr=r(zIe," \u2014 "),jH=n(zIe,"A",{href:!0});var e7t=s(jH);Obr=r(e7t,"TFDebertaV2Model"),e7t.forEach(t),Vbr=r(zIe," (DeBERTa-v2 model)"),zIe.forEach(t),Xbr=i(D),u4=n(D,"LI",{});var QIe=s(u4);cTe=n(QIe,"STRONG",{});var o7t=s(cTe);zbr=r(o7t,"distilbert"),o7t.forEach(t),Qbr=r(QIe," \u2014 "),DH=n(QIe,"A",{href:!0});var r7t=s(DH);Wbr=r(r7t,"TFDistilBertModel"),r7t.forEach(t),Hbr=r(QIe," (DistilBERT model)"),QIe.forEach(t),Ubr=i(D),p4=n(D,"LI",{});var WIe=s(p4);mTe=n(WIe,"STRONG",{});var t7t=s(mTe);Jbr=r(t7t,"dpr"),t7t.forEach(t),Ybr=r(WIe," \u2014 "),GH=n(WIe,"A",{href:!0});var a7t=s(GH);Kbr=r(a7t,"TFDPRQuestionEncoder"),a7t.forEach(t),Zbr=r(WIe," (DPR model)"),WIe.forEach(t),evr=i(D),_4=n(D,"LI",{});var HIe=s(_4);fTe=n(HIe,"STRONG",{});var n7t=s(fTe);ovr=r(n7t,"electra"),n7t.forEach(t),rvr=r(HIe," \u2014 "),OH=n(HIe,"A",{href:!0});var s7t=s(OH);tvr=r(s7t,"TFElectraModel"),s7t.forEach(t),avr=r(HIe," (ELECTRA model)"),HIe.forEach(t),nvr=i(D),b4=n(D,"LI",{});var UIe=s(b4);gTe=n(UIe,"STRONG",{});var l7t=s(gTe);svr=r(l7t,"flaubert"),l7t.forEach(t),lvr=r(UIe," \u2014 "),VH=n(UIe,"A",{href:!0});var i7t=s(VH);ivr=r(i7t,"TFFlaubertModel"),i7t.forEach(t),dvr=r(UIe," (FlauBERT model)"),UIe.forEach(t),cvr=i(D),Hs=n(D,"LI",{});var fS=s(Hs);hTe=n(fS,"STRONG",{});var d7t=s(hTe);mvr=r(d7t,"funnel"),d7t.forEach(t),fvr=r(fS," \u2014 "),XH=n(fS,"A",{href:!0});var c7t=s(XH);gvr=r(c7t,"TFFunnelModel"),c7t.forEach(t),hvr=r(fS," or "),zH=n(fS,"A",{href:!0});var m7t=s(zH);uvr=r(m7t,"TFFunnelBaseModel"),m7t.forEach(t),pvr=r(fS," (Funnel Transformer model)"),fS.forEach(t),_vr=i(D),v4=n(D,"LI",{});var JIe=s(v4);uTe=n(JIe,"STRONG",{});var f7t=s(uTe);bvr=r(f7t,"gpt2"),f7t.forEach(t),vvr=r(JIe," \u2014 "),QH=n(JIe,"A",{href:!0});var g7t=s(QH);Fvr=r(g7t,"TFGPT2Model"),g7t.forEach(t),Tvr=r(JIe," (OpenAI GPT-2 model)"),JIe.forEach(t),Mvr=i(D),F4=n(D,"LI",{});var YIe=s(F4);pTe=n(YIe,"STRONG",{});var h7t=s(pTe);Evr=r(h7t,"gptj"),h7t.forEach(t),Cvr=r(YIe," \u2014 "),WH=n(YIe,"A",{href:!0});var u7t=s(WH);wvr=r(u7t,"TFGPTJModel"),u7t.forEach(t),Avr=r(YIe," (GPT-J model)"),YIe.forEach(t),Lvr=i(D),T4=n(D,"LI",{});var KIe=s(T4);_Te=n(KIe,"STRONG",{});var p7t=s(_Te);yvr=r(p7t,"hubert"),p7t.forEach(t),xvr=r(KIe," \u2014 "),HH=n(KIe,"A",{href:!0});var _7t=s(HH);$vr=r(_7t,"TFHubertModel"),_7t.forEach(t),kvr=r(KIe," (Hubert model)"),KIe.forEach(t),Svr=i(D),M4=n(D,"LI",{});var ZIe=s(M4);bTe=n(ZIe,"STRONG",{});var b7t=s(bTe);Rvr=r(b7t,"layoutlm"),b7t.forEach(t),Pvr=r(ZIe," \u2014 "),UH=n(ZIe,"A",{href:!0});var v7t=s(UH);Bvr=r(v7t,"TFLayoutLMModel"),v7t.forEach(t),Ivr=r(ZIe," (LayoutLM model)"),ZIe.forEach(t),Nvr=i(D),E4=n(D,"LI",{});var eNe=s(E4);vTe=n(eNe,"STRONG",{});var F7t=s(vTe);qvr=r(F7t,"led"),F7t.forEach(t),jvr=r(eNe," \u2014 "),JH=n(eNe,"A",{href:!0});var T7t=s(JH);Dvr=r(T7t,"TFLEDModel"),T7t.forEach(t),Gvr=r(eNe," (LED model)"),eNe.forEach(t),Ovr=i(D),C4=n(D,"LI",{});var oNe=s(C4);FTe=n(oNe,"STRONG",{});var M7t=s(FTe);Vvr=r(M7t,"longformer"),M7t.forEach(t),Xvr=r(oNe," \u2014 "),YH=n(oNe,"A",{href:!0});var E7t=s(YH);zvr=r(E7t,"TFLongformerModel"),E7t.forEach(t),Qvr=r(oNe," (Longformer model)"),oNe.forEach(t),Wvr=i(D),w4=n(D,"LI",{});var rNe=s(w4);TTe=n(rNe,"STRONG",{});var C7t=s(TTe);Hvr=r(C7t,"lxmert"),C7t.forEach(t),Uvr=r(rNe," \u2014 "),KH=n(rNe,"A",{href:!0});var w7t=s(KH);Jvr=r(w7t,"TFLxmertModel"),w7t.forEach(t),Yvr=r(rNe," (LXMERT model)"),rNe.forEach(t),Kvr=i(D),A4=n(D,"LI",{});var tNe=s(A4);MTe=n(tNe,"STRONG",{});var A7t=s(MTe);Zvr=r(A7t,"marian"),A7t.forEach(t),e1r=r(tNe," \u2014 "),ZH=n(tNe,"A",{href:!0});var L7t=s(ZH);o1r=r(L7t,"TFMarianModel"),L7t.forEach(t),r1r=r(tNe," (Marian model)"),tNe.forEach(t),t1r=i(D),L4=n(D,"LI",{});var aNe=s(L4);ETe=n(aNe,"STRONG",{});var y7t=s(ETe);a1r=r(y7t,"mbart"),y7t.forEach(t),n1r=r(aNe," \u2014 "),eU=n(aNe,"A",{href:!0});var x7t=s(eU);s1r=r(x7t,"TFMBartModel"),x7t.forEach(t),l1r=r(aNe," (mBART model)"),aNe.forEach(t),i1r=i(D),y4=n(D,"LI",{});var nNe=s(y4);CTe=n(nNe,"STRONG",{});var $7t=s(CTe);d1r=r($7t,"mobilebert"),$7t.forEach(t),c1r=r(nNe," \u2014 "),oU=n(nNe,"A",{href:!0});var k7t=s(oU);m1r=r(k7t,"TFMobileBertModel"),k7t.forEach(t),f1r=r(nNe," (MobileBERT model)"),nNe.forEach(t),g1r=i(D),x4=n(D,"LI",{});var sNe=s(x4);wTe=n(sNe,"STRONG",{});var S7t=s(wTe);h1r=r(S7t,"mpnet"),S7t.forEach(t),u1r=r(sNe," \u2014 "),rU=n(sNe,"A",{href:!0});var R7t=s(rU);p1r=r(R7t,"TFMPNetModel"),R7t.forEach(t),_1r=r(sNe," (MPNet model)"),sNe.forEach(t),b1r=i(D),$4=n(D,"LI",{});var lNe=s($4);ATe=n(lNe,"STRONG",{});var P7t=s(ATe);v1r=r(P7t,"mt5"),P7t.forEach(t),F1r=r(lNe," \u2014 "),tU=n(lNe,"A",{href:!0});var B7t=s(tU);T1r=r(B7t,"TFMT5Model"),B7t.forEach(t),M1r=r(lNe," (MT5 model)"),lNe.forEach(t),E1r=i(D),k4=n(D,"LI",{});var iNe=s(k4);LTe=n(iNe,"STRONG",{});var I7t=s(LTe);C1r=r(I7t,"openai-gpt"),I7t.forEach(t),w1r=r(iNe," \u2014 "),aU=n(iNe,"A",{href:!0});var N7t=s(aU);A1r=r(N7t,"TFOpenAIGPTModel"),N7t.forEach(t),L1r=r(iNe," (OpenAI GPT model)"),iNe.forEach(t),y1r=i(D),S4=n(D,"LI",{});var dNe=s(S4);yTe=n(dNe,"STRONG",{});var q7t=s(yTe);x1r=r(q7t,"opt"),q7t.forEach(t),$1r=r(dNe," \u2014 "),nU=n(dNe,"A",{href:!0});var j7t=s(nU);k1r=r(j7t,"TFOPTModel"),j7t.forEach(t),S1r=r(dNe," (OPT model)"),dNe.forEach(t),R1r=i(D),R4=n(D,"LI",{});var cNe=s(R4);xTe=n(cNe,"STRONG",{});var D7t=s(xTe);P1r=r(D7t,"pegasus"),D7t.forEach(t),B1r=r(cNe," \u2014 "),sU=n(cNe,"A",{href:!0});var G7t=s(sU);I1r=r(G7t,"TFPegasusModel"),G7t.forEach(t),N1r=r(cNe," (Pegasus model)"),cNe.forEach(t),q1r=i(D),P4=n(D,"LI",{});var mNe=s(P4);$Te=n(mNe,"STRONG",{});var O7t=s($Te);j1r=r(O7t,"rembert"),O7t.forEach(t),D1r=r(mNe," \u2014 "),lU=n(mNe,"A",{href:!0});var V7t=s(lU);G1r=r(V7t,"TFRemBertModel"),V7t.forEach(t),O1r=r(mNe," (RemBERT model)"),mNe.forEach(t),V1r=i(D),B4=n(D,"LI",{});var fNe=s(B4);kTe=n(fNe,"STRONG",{});var X7t=s(kTe);X1r=r(X7t,"roberta"),X7t.forEach(t),z1r=r(fNe," \u2014 "),iU=n(fNe,"A",{href:!0});var z7t=s(iU);Q1r=r(z7t,"TFRobertaModel"),z7t.forEach(t),W1r=r(fNe," (RoBERTa model)"),fNe.forEach(t),H1r=i(D),I4=n(D,"LI",{});var gNe=s(I4);STe=n(gNe,"STRONG",{});var Q7t=s(STe);U1r=r(Q7t,"roformer"),Q7t.forEach(t),J1r=r(gNe," \u2014 "),dU=n(gNe,"A",{href:!0});var W7t=s(dU);Y1r=r(W7t,"TFRoFormerModel"),W7t.forEach(t),K1r=r(gNe," (RoFormer model)"),gNe.forEach(t),Z1r=i(D),N4=n(D,"LI",{});var hNe=s(N4);RTe=n(hNe,"STRONG",{});var H7t=s(RTe);eFr=r(H7t,"speech_to_text"),H7t.forEach(t),oFr=r(hNe," \u2014 "),cU=n(hNe,"A",{href:!0});var U7t=s(cU);rFr=r(U7t,"TFSpeech2TextModel"),U7t.forEach(t),tFr=r(hNe," (Speech2Text model)"),hNe.forEach(t),aFr=i(D),q4=n(D,"LI",{});var uNe=s(q4);PTe=n(uNe,"STRONG",{});var J7t=s(PTe);nFr=r(J7t,"swin"),J7t.forEach(t),sFr=r(uNe," \u2014 "),mU=n(uNe,"A",{href:!0});var Y7t=s(mU);lFr=r(Y7t,"TFSwinModel"),Y7t.forEach(t),iFr=r(uNe," (Swin Transformer model)"),uNe.forEach(t),dFr=i(D),j4=n(D,"LI",{});var pNe=s(j4);BTe=n(pNe,"STRONG",{});var K7t=s(BTe);cFr=r(K7t,"t5"),K7t.forEach(t),mFr=r(pNe," \u2014 "),fU=n(pNe,"A",{href:!0});var Z7t=s(fU);fFr=r(Z7t,"TFT5Model"),Z7t.forEach(t),gFr=r(pNe," (T5 model)"),pNe.forEach(t),hFr=i(D),D4=n(D,"LI",{});var _Ne=s(D4);ITe=n(_Ne,"STRONG",{});var eyt=s(ITe);uFr=r(eyt,"tapas"),eyt.forEach(t),pFr=r(_Ne," \u2014 "),gU=n(_Ne,"A",{href:!0});var oyt=s(gU);_Fr=r(oyt,"TFTapasModel"),oyt.forEach(t),bFr=r(_Ne," (TAPAS model)"),_Ne.forEach(t),vFr=i(D),G4=n(D,"LI",{});var bNe=s(G4);NTe=n(bNe,"STRONG",{});var ryt=s(NTe);FFr=r(ryt,"transfo-xl"),ryt.forEach(t),TFr=r(bNe," \u2014 "),hU=n(bNe,"A",{href:!0});var tyt=s(hU);MFr=r(tyt,"TFTransfoXLModel"),tyt.forEach(t),EFr=r(bNe," (Transformer-XL model)"),bNe.forEach(t),CFr=i(D),O4=n(D,"LI",{});var vNe=s(O4);qTe=n(vNe,"STRONG",{});var ayt=s(qTe);wFr=r(ayt,"vit"),ayt.forEach(t),AFr=r(vNe," \u2014 "),uU=n(vNe,"A",{href:!0});var nyt=s(uU);LFr=r(nyt,"TFViTModel"),nyt.forEach(t),yFr=r(vNe," (ViT model)"),vNe.forEach(t),xFr=i(D),V4=n(D,"LI",{});var FNe=s(V4);jTe=n(FNe,"STRONG",{});var syt=s(jTe);$Fr=r(syt,"vit_mae"),syt.forEach(t),kFr=r(FNe," \u2014 "),pU=n(FNe,"A",{href:!0});var lyt=s(pU);SFr=r(lyt,"TFViTMAEModel"),lyt.forEach(t),RFr=r(FNe," (ViTMAE model)"),FNe.forEach(t),PFr=i(D),X4=n(D,"LI",{});var TNe=s(X4);DTe=n(TNe,"STRONG",{});var iyt=s(DTe);BFr=r(iyt,"wav2vec2"),iyt.forEach(t),IFr=r(TNe," \u2014 "),_U=n(TNe,"A",{href:!0});var dyt=s(_U);NFr=r(dyt,"TFWav2Vec2Model"),dyt.forEach(t),qFr=r(TNe," (Wav2Vec2 model)"),TNe.forEach(t),jFr=i(D),z4=n(D,"LI",{});var MNe=s(z4);GTe=n(MNe,"STRONG",{});var cyt=s(GTe);DFr=r(cyt,"xlm"),cyt.forEach(t),GFr=r(MNe," \u2014 "),bU=n(MNe,"A",{href:!0});var myt=s(bU);OFr=r(myt,"TFXLMModel"),myt.forEach(t),VFr=r(MNe," (XLM model)"),MNe.forEach(t),XFr=i(D),Q4=n(D,"LI",{});var ENe=s(Q4);OTe=n(ENe,"STRONG",{});var fyt=s(OTe);zFr=r(fyt,"xlm-roberta"),fyt.forEach(t),QFr=r(ENe," \u2014 "),vU=n(ENe,"A",{href:!0});var gyt=s(vU);WFr=r(gyt,"TFXLMRobertaModel"),gyt.forEach(t),HFr=r(ENe," (XLM-RoBERTa model)"),ENe.forEach(t),UFr=i(D),W4=n(D,"LI",{});var CNe=s(W4);VTe=n(CNe,"STRONG",{});var hyt=s(VTe);JFr=r(hyt,"xlnet"),hyt.forEach(t),YFr=r(CNe," \u2014 "),FU=n(CNe,"A",{href:!0});var uyt=s(FU);KFr=r(uyt,"TFXLNetModel"),uyt.forEach(t),ZFr=r(CNe," (XLNet model)"),CNe.forEach(t),D.forEach(t),eTr=i(Al),T(H4.$$.fragment,Al),Al.forEach(t),wl.forEach(t),SVe=i(m),nc=n(m,"H2",{class:!0});var Dze=s(nc);U4=n(Dze,"A",{id:!0,class:!0,href:!0});var pyt=s(U4);XTe=n(pyt,"SPAN",{});var _yt=s(XTe);T(x9.$$.fragment,_yt),_yt.forEach(t),pyt.forEach(t),oTr=i(Dze),zTe=n(Dze,"SPAN",{});var byt=s(zTe);rTr=r(byt,"TFAutoModelForPreTraining"),byt.forEach(t),Dze.forEach(t),RVe=i(m),or=n(m,"DIV",{class:!0});var Ll=s(or);T($9.$$.fragment,Ll),tTr=i(Ll),sc=n(Ll,"P",{});var qre=s(sc);aTr=r(qre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),TU=n(qre,"A",{href:!0});var vyt=s(TU);nTr=r(vyt,"from_pretrained()"),vyt.forEach(t),sTr=r(qre," class method or the "),MU=n(qre,"A",{href:!0});var Fyt=s(MU);lTr=r(Fyt,"from_config()"),Fyt.forEach(t),iTr=r(qre,` class
method.`),qre.forEach(t),dTr=i(Ll),k9=n(Ll,"P",{});var Gze=s(k9);cTr=r(Gze,"This class cannot be instantiated directly using "),QTe=n(Gze,"CODE",{});var Tyt=s(QTe);mTr=r(Tyt,"__init__()"),Tyt.forEach(t),fTr=r(Gze," (throws an error)."),Gze.forEach(t),gTr=i(Ll),kt=n(Ll,"DIV",{class:!0});var NL=s(kt);T(S9.$$.fragment,NL),hTr=i(NL),WTe=n(NL,"P",{});var Myt=s(WTe);uTr=r(Myt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Myt.forEach(t),pTr=i(NL),lc=n(NL,"P",{});var jre=s(lc);_Tr=r(jre,`Note:
Loading a model from its configuration file does `),HTe=n(jre,"STRONG",{});var Eyt=s(HTe);bTr=r(Eyt,"not"),Eyt.forEach(t),vTr=r(jre,` load the model weights. It only affects the
model\u2019s configuration. Use `),EU=n(jre,"A",{href:!0});var Cyt=s(EU);FTr=r(Cyt,"from_pretrained()"),Cyt.forEach(t),TTr=r(jre," to load the model weights."),jre.forEach(t),MTr=i(NL),T(J4.$$.fragment,NL),NL.forEach(t),ETr=i(Ll),xr=n(Ll,"DIV",{class:!0});var yl=s(xr);T(R9.$$.fragment,yl),CTr=i(yl),UTe=n(yl,"P",{});var wyt=s(UTe);wTr=r(wyt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),wyt.forEach(t),ATr=i(yl),nn=n(yl,"P",{});var qL=s(nn);LTr=r(qL,"The model class to instantiate is selected based on the "),JTe=n(qL,"CODE",{});var Ayt=s(JTe);yTr=r(Ayt,"model_type"),Ayt.forEach(t),xTr=r(qL,` property of the config object (either
passed as an argument or loaded from `),YTe=n(qL,"CODE",{});var Lyt=s(YTe);$Tr=r(Lyt,"pretrained_model_name_or_path"),Lyt.forEach(t),kTr=r(qL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),KTe=n(qL,"CODE",{});var yyt=s(KTe);STr=r(yyt,"pretrained_model_name_or_path"),yyt.forEach(t),RTr=r(qL,":"),qL.forEach(t),PTr=i(yl),se=n(yl,"UL",{});var le=s(se);Y4=n(le,"LI",{});var wNe=s(Y4);ZTe=n(wNe,"STRONG",{});var xyt=s(ZTe);BTr=r(xyt,"albert"),xyt.forEach(t),ITr=r(wNe," \u2014 "),CU=n(wNe,"A",{href:!0});var $yt=s(CU);NTr=r($yt,"TFAlbertForPreTraining"),$yt.forEach(t),qTr=r(wNe," (ALBERT model)"),wNe.forEach(t),jTr=i(le),K4=n(le,"LI",{});var ANe=s(K4);eMe=n(ANe,"STRONG",{});var kyt=s(eMe);DTr=r(kyt,"bart"),kyt.forEach(t),GTr=r(ANe," \u2014 "),wU=n(ANe,"A",{href:!0});var Syt=s(wU);OTr=r(Syt,"TFBartForConditionalGeneration"),Syt.forEach(t),VTr=r(ANe," (BART model)"),ANe.forEach(t),XTr=i(le),Z4=n(le,"LI",{});var LNe=s(Z4);oMe=n(LNe,"STRONG",{});var Ryt=s(oMe);zTr=r(Ryt,"bert"),Ryt.forEach(t),QTr=r(LNe," \u2014 "),AU=n(LNe,"A",{href:!0});var Pyt=s(AU);WTr=r(Pyt,"TFBertForPreTraining"),Pyt.forEach(t),HTr=r(LNe," (BERT model)"),LNe.forEach(t),UTr=i(le),eC=n(le,"LI",{});var yNe=s(eC);rMe=n(yNe,"STRONG",{});var Byt=s(rMe);JTr=r(Byt,"camembert"),Byt.forEach(t),YTr=r(yNe," \u2014 "),LU=n(yNe,"A",{href:!0});var Iyt=s(LU);KTr=r(Iyt,"TFCamembertForMaskedLM"),Iyt.forEach(t),ZTr=r(yNe," (CamemBERT model)"),yNe.forEach(t),eMr=i(le),oC=n(le,"LI",{});var xNe=s(oC);tMe=n(xNe,"STRONG",{});var Nyt=s(tMe);oMr=r(Nyt,"ctrl"),Nyt.forEach(t),rMr=r(xNe," \u2014 "),yU=n(xNe,"A",{href:!0});var qyt=s(yU);tMr=r(qyt,"TFCTRLLMHeadModel"),qyt.forEach(t),aMr=r(xNe," (CTRL model)"),xNe.forEach(t),nMr=i(le),rC=n(le,"LI",{});var $Ne=s(rC);aMe=n($Ne,"STRONG",{});var jyt=s(aMe);sMr=r(jyt,"distilbert"),jyt.forEach(t),lMr=r($Ne," \u2014 "),xU=n($Ne,"A",{href:!0});var Dyt=s(xU);iMr=r(Dyt,"TFDistilBertForMaskedLM"),Dyt.forEach(t),dMr=r($Ne," (DistilBERT model)"),$Ne.forEach(t),cMr=i(le),tC=n(le,"LI",{});var kNe=s(tC);nMe=n(kNe,"STRONG",{});var Gyt=s(nMe);mMr=r(Gyt,"electra"),Gyt.forEach(t),fMr=r(kNe," \u2014 "),$U=n(kNe,"A",{href:!0});var Oyt=s($U);gMr=r(Oyt,"TFElectraForPreTraining"),Oyt.forEach(t),hMr=r(kNe," (ELECTRA model)"),kNe.forEach(t),uMr=i(le),aC=n(le,"LI",{});var SNe=s(aC);sMe=n(SNe,"STRONG",{});var Vyt=s(sMe);pMr=r(Vyt,"flaubert"),Vyt.forEach(t),_Mr=r(SNe," \u2014 "),kU=n(SNe,"A",{href:!0});var Xyt=s(kU);bMr=r(Xyt,"TFFlaubertWithLMHeadModel"),Xyt.forEach(t),vMr=r(SNe," (FlauBERT model)"),SNe.forEach(t),FMr=i(le),nC=n(le,"LI",{});var RNe=s(nC);lMe=n(RNe,"STRONG",{});var zyt=s(lMe);TMr=r(zyt,"funnel"),zyt.forEach(t),MMr=r(RNe," \u2014 "),SU=n(RNe,"A",{href:!0});var Qyt=s(SU);EMr=r(Qyt,"TFFunnelForPreTraining"),Qyt.forEach(t),CMr=r(RNe," (Funnel Transformer model)"),RNe.forEach(t),wMr=i(le),sC=n(le,"LI",{});var PNe=s(sC);iMe=n(PNe,"STRONG",{});var Wyt=s(iMe);AMr=r(Wyt,"gpt2"),Wyt.forEach(t),LMr=r(PNe," \u2014 "),RU=n(PNe,"A",{href:!0});var Hyt=s(RU);yMr=r(Hyt,"TFGPT2LMHeadModel"),Hyt.forEach(t),xMr=r(PNe," (OpenAI GPT-2 model)"),PNe.forEach(t),$Mr=i(le),lC=n(le,"LI",{});var BNe=s(lC);dMe=n(BNe,"STRONG",{});var Uyt=s(dMe);kMr=r(Uyt,"layoutlm"),Uyt.forEach(t),SMr=r(BNe," \u2014 "),PU=n(BNe,"A",{href:!0});var Jyt=s(PU);RMr=r(Jyt,"TFLayoutLMForMaskedLM"),Jyt.forEach(t),PMr=r(BNe," (LayoutLM model)"),BNe.forEach(t),BMr=i(le),iC=n(le,"LI",{});var INe=s(iC);cMe=n(INe,"STRONG",{});var Yyt=s(cMe);IMr=r(Yyt,"lxmert"),Yyt.forEach(t),NMr=r(INe," \u2014 "),BU=n(INe,"A",{href:!0});var Kyt=s(BU);qMr=r(Kyt,"TFLxmertForPreTraining"),Kyt.forEach(t),jMr=r(INe," (LXMERT model)"),INe.forEach(t),DMr=i(le),dC=n(le,"LI",{});var NNe=s(dC);mMe=n(NNe,"STRONG",{});var Zyt=s(mMe);GMr=r(Zyt,"mobilebert"),Zyt.forEach(t),OMr=r(NNe," \u2014 "),IU=n(NNe,"A",{href:!0});var e8t=s(IU);VMr=r(e8t,"TFMobileBertForPreTraining"),e8t.forEach(t),XMr=r(NNe," (MobileBERT model)"),NNe.forEach(t),zMr=i(le),cC=n(le,"LI",{});var qNe=s(cC);fMe=n(qNe,"STRONG",{});var o8t=s(fMe);QMr=r(o8t,"mpnet"),o8t.forEach(t),WMr=r(qNe," \u2014 "),NU=n(qNe,"A",{href:!0});var r8t=s(NU);HMr=r(r8t,"TFMPNetForMaskedLM"),r8t.forEach(t),UMr=r(qNe," (MPNet model)"),qNe.forEach(t),JMr=i(le),mC=n(le,"LI",{});var jNe=s(mC);gMe=n(jNe,"STRONG",{});var t8t=s(gMe);YMr=r(t8t,"openai-gpt"),t8t.forEach(t),KMr=r(jNe," \u2014 "),qU=n(jNe,"A",{href:!0});var a8t=s(qU);ZMr=r(a8t,"TFOpenAIGPTLMHeadModel"),a8t.forEach(t),eEr=r(jNe," (OpenAI GPT model)"),jNe.forEach(t),oEr=i(le),fC=n(le,"LI",{});var DNe=s(fC);hMe=n(DNe,"STRONG",{});var n8t=s(hMe);rEr=r(n8t,"roberta"),n8t.forEach(t),tEr=r(DNe," \u2014 "),jU=n(DNe,"A",{href:!0});var s8t=s(jU);aEr=r(s8t,"TFRobertaForMaskedLM"),s8t.forEach(t),nEr=r(DNe," (RoBERTa model)"),DNe.forEach(t),sEr=i(le),gC=n(le,"LI",{});var GNe=s(gC);uMe=n(GNe,"STRONG",{});var l8t=s(uMe);lEr=r(l8t,"t5"),l8t.forEach(t),iEr=r(GNe," \u2014 "),DU=n(GNe,"A",{href:!0});var i8t=s(DU);dEr=r(i8t,"TFT5ForConditionalGeneration"),i8t.forEach(t),cEr=r(GNe," (T5 model)"),GNe.forEach(t),mEr=i(le),hC=n(le,"LI",{});var ONe=s(hC);pMe=n(ONe,"STRONG",{});var d8t=s(pMe);fEr=r(d8t,"tapas"),d8t.forEach(t),gEr=r(ONe," \u2014 "),GU=n(ONe,"A",{href:!0});var c8t=s(GU);hEr=r(c8t,"TFTapasForMaskedLM"),c8t.forEach(t),uEr=r(ONe," (TAPAS model)"),ONe.forEach(t),pEr=i(le),uC=n(le,"LI",{});var VNe=s(uC);_Me=n(VNe,"STRONG",{});var m8t=s(_Me);_Er=r(m8t,"transfo-xl"),m8t.forEach(t),bEr=r(VNe," \u2014 "),OU=n(VNe,"A",{href:!0});var f8t=s(OU);vEr=r(f8t,"TFTransfoXLLMHeadModel"),f8t.forEach(t),FEr=r(VNe," (Transformer-XL model)"),VNe.forEach(t),TEr=i(le),pC=n(le,"LI",{});var XNe=s(pC);bMe=n(XNe,"STRONG",{});var g8t=s(bMe);MEr=r(g8t,"vit_mae"),g8t.forEach(t),EEr=r(XNe," \u2014 "),VU=n(XNe,"A",{href:!0});var h8t=s(VU);CEr=r(h8t,"TFViTMAEForPreTraining"),h8t.forEach(t),wEr=r(XNe," (ViTMAE model)"),XNe.forEach(t),AEr=i(le),_C=n(le,"LI",{});var zNe=s(_C);vMe=n(zNe,"STRONG",{});var u8t=s(vMe);LEr=r(u8t,"xlm"),u8t.forEach(t),yEr=r(zNe," \u2014 "),XU=n(zNe,"A",{href:!0});var p8t=s(XU);xEr=r(p8t,"TFXLMWithLMHeadModel"),p8t.forEach(t),$Er=r(zNe," (XLM model)"),zNe.forEach(t),kEr=i(le),bC=n(le,"LI",{});var QNe=s(bC);FMe=n(QNe,"STRONG",{});var _8t=s(FMe);SEr=r(_8t,"xlm-roberta"),_8t.forEach(t),REr=r(QNe," \u2014 "),zU=n(QNe,"A",{href:!0});var b8t=s(zU);PEr=r(b8t,"TFXLMRobertaForMaskedLM"),b8t.forEach(t),BEr=r(QNe," (XLM-RoBERTa model)"),QNe.forEach(t),IEr=i(le),vC=n(le,"LI",{});var WNe=s(vC);TMe=n(WNe,"STRONG",{});var v8t=s(TMe);NEr=r(v8t,"xlnet"),v8t.forEach(t),qEr=r(WNe," \u2014 "),QU=n(WNe,"A",{href:!0});var F8t=s(QU);jEr=r(F8t,"TFXLNetLMHeadModel"),F8t.forEach(t),DEr=r(WNe," (XLNet model)"),WNe.forEach(t),le.forEach(t),GEr=i(yl),T(FC.$$.fragment,yl),yl.forEach(t),Ll.forEach(t),PVe=i(m),ic=n(m,"H2",{class:!0});var Oze=s(ic);TC=n(Oze,"A",{id:!0,class:!0,href:!0});var T8t=s(TC);MMe=n(T8t,"SPAN",{});var M8t=s(MMe);T(P9.$$.fragment,M8t),M8t.forEach(t),T8t.forEach(t),OEr=i(Oze),EMe=n(Oze,"SPAN",{});var E8t=s(EMe);VEr=r(E8t,"TFAutoModelForCausalLM"),E8t.forEach(t),Oze.forEach(t),BVe=i(m),rr=n(m,"DIV",{class:!0});var xl=s(rr);T(B9.$$.fragment,xl),XEr=i(xl),dc=n(xl,"P",{});var Dre=s(dc);zEr=r(Dre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),WU=n(Dre,"A",{href:!0});var C8t=s(WU);QEr=r(C8t,"from_pretrained()"),C8t.forEach(t),WEr=r(Dre," class method or the "),HU=n(Dre,"A",{href:!0});var w8t=s(HU);HEr=r(w8t,"from_config()"),w8t.forEach(t),UEr=r(Dre,` class
method.`),Dre.forEach(t),JEr=i(xl),I9=n(xl,"P",{});var Vze=s(I9);YEr=r(Vze,"This class cannot be instantiated directly using "),CMe=n(Vze,"CODE",{});var A8t=s(CMe);KEr=r(A8t,"__init__()"),A8t.forEach(t),ZEr=r(Vze," (throws an error)."),Vze.forEach(t),e4r=i(xl),St=n(xl,"DIV",{class:!0});var jL=s(St);T(N9.$$.fragment,jL),o4r=i(jL),wMe=n(jL,"P",{});var L8t=s(wMe);r4r=r(L8t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),L8t.forEach(t),t4r=i(jL),cc=n(jL,"P",{});var Gre=s(cc);a4r=r(Gre,`Note:
Loading a model from its configuration file does `),AMe=n(Gre,"STRONG",{});var y8t=s(AMe);n4r=r(y8t,"not"),y8t.forEach(t),s4r=r(Gre,` load the model weights. It only affects the
model\u2019s configuration. Use `),UU=n(Gre,"A",{href:!0});var x8t=s(UU);l4r=r(x8t,"from_pretrained()"),x8t.forEach(t),i4r=r(Gre," to load the model weights."),Gre.forEach(t),d4r=i(jL),T(MC.$$.fragment,jL),jL.forEach(t),c4r=i(xl),$r=n(xl,"DIV",{class:!0});var $l=s($r);T(q9.$$.fragment,$l),m4r=i($l),LMe=n($l,"P",{});var $8t=s(LMe);f4r=r($8t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),$8t.forEach(t),g4r=i($l),sn=n($l,"P",{});var DL=s(sn);h4r=r(DL,"The model class to instantiate is selected based on the "),yMe=n(DL,"CODE",{});var k8t=s(yMe);u4r=r(k8t,"model_type"),k8t.forEach(t),p4r=r(DL,` property of the config object (either
passed as an argument or loaded from `),xMe=n(DL,"CODE",{});var S8t=s(xMe);_4r=r(S8t,"pretrained_model_name_or_path"),S8t.forEach(t),b4r=r(DL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$Me=n(DL,"CODE",{});var R8t=s($Me);v4r=r(R8t,"pretrained_model_name_or_path"),R8t.forEach(t),F4r=r(DL,":"),DL.forEach(t),T4r=i($l),Me=n($l,"UL",{});var Ce=s(Me);EC=n(Ce,"LI",{});var HNe=s(EC);kMe=n(HNe,"STRONG",{});var P8t=s(kMe);M4r=r(P8t,"bert"),P8t.forEach(t),E4r=r(HNe," \u2014 "),JU=n(HNe,"A",{href:!0});var B8t=s(JU);C4r=r(B8t,"TFBertLMHeadModel"),B8t.forEach(t),w4r=r(HNe," (BERT model)"),HNe.forEach(t),A4r=i(Ce),CC=n(Ce,"LI",{});var UNe=s(CC);SMe=n(UNe,"STRONG",{});var I8t=s(SMe);L4r=r(I8t,"camembert"),I8t.forEach(t),y4r=r(UNe," \u2014 "),YU=n(UNe,"A",{href:!0});var N8t=s(YU);x4r=r(N8t,"TFCamembertForCausalLM"),N8t.forEach(t),$4r=r(UNe," (CamemBERT model)"),UNe.forEach(t),k4r=i(Ce),wC=n(Ce,"LI",{});var JNe=s(wC);RMe=n(JNe,"STRONG",{});var q8t=s(RMe);S4r=r(q8t,"ctrl"),q8t.forEach(t),R4r=r(JNe," \u2014 "),KU=n(JNe,"A",{href:!0});var j8t=s(KU);P4r=r(j8t,"TFCTRLLMHeadModel"),j8t.forEach(t),B4r=r(JNe," (CTRL model)"),JNe.forEach(t),I4r=i(Ce),AC=n(Ce,"LI",{});var YNe=s(AC);PMe=n(YNe,"STRONG",{});var D8t=s(PMe);N4r=r(D8t,"gpt2"),D8t.forEach(t),q4r=r(YNe," \u2014 "),ZU=n(YNe,"A",{href:!0});var G8t=s(ZU);j4r=r(G8t,"TFGPT2LMHeadModel"),G8t.forEach(t),D4r=r(YNe," (OpenAI GPT-2 model)"),YNe.forEach(t),G4r=i(Ce),LC=n(Ce,"LI",{});var KNe=s(LC);BMe=n(KNe,"STRONG",{});var O8t=s(BMe);O4r=r(O8t,"gptj"),O8t.forEach(t),V4r=r(KNe," \u2014 "),eJ=n(KNe,"A",{href:!0});var V8t=s(eJ);X4r=r(V8t,"TFGPTJForCausalLM"),V8t.forEach(t),z4r=r(KNe," (GPT-J model)"),KNe.forEach(t),Q4r=i(Ce),yC=n(Ce,"LI",{});var ZNe=s(yC);IMe=n(ZNe,"STRONG",{});var X8t=s(IMe);W4r=r(X8t,"openai-gpt"),X8t.forEach(t),H4r=r(ZNe," \u2014 "),oJ=n(ZNe,"A",{href:!0});var z8t=s(oJ);U4r=r(z8t,"TFOpenAIGPTLMHeadModel"),z8t.forEach(t),J4r=r(ZNe," (OpenAI GPT model)"),ZNe.forEach(t),Y4r=i(Ce),xC=n(Ce,"LI",{});var eqe=s(xC);NMe=n(eqe,"STRONG",{});var Q8t=s(NMe);K4r=r(Q8t,"opt"),Q8t.forEach(t),Z4r=r(eqe," \u2014 "),rJ=n(eqe,"A",{href:!0});var W8t=s(rJ);eCr=r(W8t,"TFOPTForCausalLM"),W8t.forEach(t),oCr=r(eqe," (OPT model)"),eqe.forEach(t),rCr=i(Ce),$C=n(Ce,"LI",{});var oqe=s($C);qMe=n(oqe,"STRONG",{});var H8t=s(qMe);tCr=r(H8t,"rembert"),H8t.forEach(t),aCr=r(oqe," \u2014 "),tJ=n(oqe,"A",{href:!0});var U8t=s(tJ);nCr=r(U8t,"TFRemBertForCausalLM"),U8t.forEach(t),sCr=r(oqe," (RemBERT model)"),oqe.forEach(t),lCr=i(Ce),kC=n(Ce,"LI",{});var rqe=s(kC);jMe=n(rqe,"STRONG",{});var J8t=s(jMe);iCr=r(J8t,"roberta"),J8t.forEach(t),dCr=r(rqe," \u2014 "),aJ=n(rqe,"A",{href:!0});var Y8t=s(aJ);cCr=r(Y8t,"TFRobertaForCausalLM"),Y8t.forEach(t),mCr=r(rqe," (RoBERTa model)"),rqe.forEach(t),fCr=i(Ce),SC=n(Ce,"LI",{});var tqe=s(SC);DMe=n(tqe,"STRONG",{});var K8t=s(DMe);gCr=r(K8t,"roformer"),K8t.forEach(t),hCr=r(tqe," \u2014 "),nJ=n(tqe,"A",{href:!0});var Z8t=s(nJ);uCr=r(Z8t,"TFRoFormerForCausalLM"),Z8t.forEach(t),pCr=r(tqe," (RoFormer model)"),tqe.forEach(t),_Cr=i(Ce),RC=n(Ce,"LI",{});var aqe=s(RC);GMe=n(aqe,"STRONG",{});var e9t=s(GMe);bCr=r(e9t,"transfo-xl"),e9t.forEach(t),vCr=r(aqe," \u2014 "),sJ=n(aqe,"A",{href:!0});var o9t=s(sJ);FCr=r(o9t,"TFTransfoXLLMHeadModel"),o9t.forEach(t),TCr=r(aqe," (Transformer-XL model)"),aqe.forEach(t),MCr=i(Ce),PC=n(Ce,"LI",{});var nqe=s(PC);OMe=n(nqe,"STRONG",{});var r9t=s(OMe);ECr=r(r9t,"xlm"),r9t.forEach(t),CCr=r(nqe," \u2014 "),lJ=n(nqe,"A",{href:!0});var t9t=s(lJ);wCr=r(t9t,"TFXLMWithLMHeadModel"),t9t.forEach(t),ACr=r(nqe," (XLM model)"),nqe.forEach(t),LCr=i(Ce),BC=n(Ce,"LI",{});var sqe=s(BC);VMe=n(sqe,"STRONG",{});var a9t=s(VMe);yCr=r(a9t,"xlnet"),a9t.forEach(t),xCr=r(sqe," \u2014 "),iJ=n(sqe,"A",{href:!0});var n9t=s(iJ);$Cr=r(n9t,"TFXLNetLMHeadModel"),n9t.forEach(t),kCr=r(sqe," (XLNet model)"),sqe.forEach(t),Ce.forEach(t),SCr=i($l),T(IC.$$.fragment,$l),$l.forEach(t),xl.forEach(t),IVe=i(m),mc=n(m,"H2",{class:!0});var Xze=s(mc);NC=n(Xze,"A",{id:!0,class:!0,href:!0});var s9t=s(NC);XMe=n(s9t,"SPAN",{});var l9t=s(XMe);T(j9.$$.fragment,l9t),l9t.forEach(t),s9t.forEach(t),RCr=i(Xze),zMe=n(Xze,"SPAN",{});var i9t=s(zMe);PCr=r(i9t,"TFAutoModelForImageClassification"),i9t.forEach(t),Xze.forEach(t),NVe=i(m),tr=n(m,"DIV",{class:!0});var kl=s(tr);T(D9.$$.fragment,kl),BCr=i(kl),fc=n(kl,"P",{});var Ore=s(fc);ICr=r(Ore,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),dJ=n(Ore,"A",{href:!0});var d9t=s(dJ);NCr=r(d9t,"from_pretrained()"),d9t.forEach(t),qCr=r(Ore," class method or the "),cJ=n(Ore,"A",{href:!0});var c9t=s(cJ);jCr=r(c9t,"from_config()"),c9t.forEach(t),DCr=r(Ore,` class
method.`),Ore.forEach(t),GCr=i(kl),G9=n(kl,"P",{});var zze=s(G9);OCr=r(zze,"This class cannot be instantiated directly using "),QMe=n(zze,"CODE",{});var m9t=s(QMe);VCr=r(m9t,"__init__()"),m9t.forEach(t),XCr=r(zze," (throws an error)."),zze.forEach(t),zCr=i(kl),Rt=n(kl,"DIV",{class:!0});var GL=s(Rt);T(O9.$$.fragment,GL),QCr=i(GL),WMe=n(GL,"P",{});var f9t=s(WMe);WCr=r(f9t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),f9t.forEach(t),HCr=i(GL),gc=n(GL,"P",{});var Vre=s(gc);UCr=r(Vre,`Note:
Loading a model from its configuration file does `),HMe=n(Vre,"STRONG",{});var g9t=s(HMe);JCr=r(g9t,"not"),g9t.forEach(t),YCr=r(Vre,` load the model weights. It only affects the
model\u2019s configuration. Use `),mJ=n(Vre,"A",{href:!0});var h9t=s(mJ);KCr=r(h9t,"from_pretrained()"),h9t.forEach(t),ZCr=r(Vre," to load the model weights."),Vre.forEach(t),e5r=i(GL),T(qC.$$.fragment,GL),GL.forEach(t),o5r=i(kl),kr=n(kl,"DIV",{class:!0});var Sl=s(kr);T(V9.$$.fragment,Sl),r5r=i(Sl),UMe=n(Sl,"P",{});var u9t=s(UMe);t5r=r(u9t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),u9t.forEach(t),a5r=i(Sl),ln=n(Sl,"P",{});var OL=s(ln);n5r=r(OL,"The model class to instantiate is selected based on the "),JMe=n(OL,"CODE",{});var p9t=s(JMe);s5r=r(p9t,"model_type"),p9t.forEach(t),l5r=r(OL,` property of the config object (either
passed as an argument or loaded from `),YMe=n(OL,"CODE",{});var _9t=s(YMe);i5r=r(_9t,"pretrained_model_name_or_path"),_9t.forEach(t),d5r=r(OL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),KMe=n(OL,"CODE",{});var b9t=s(KMe);c5r=r(b9t,"pretrained_model_name_or_path"),b9t.forEach(t),m5r=r(OL,":"),OL.forEach(t),f5r=i(Sl),dn=n(Sl,"UL",{});var VL=s(dn);jC=n(VL,"LI",{});var lqe=s(jC);ZMe=n(lqe,"STRONG",{});var v9t=s(ZMe);g5r=r(v9t,"convnext"),v9t.forEach(t),h5r=r(lqe," \u2014 "),fJ=n(lqe,"A",{href:!0});var F9t=s(fJ);u5r=r(F9t,"TFConvNextForImageClassification"),F9t.forEach(t),p5r=r(lqe," (ConvNeXT model)"),lqe.forEach(t),_5r=i(VL),DC=n(VL,"LI",{});var iqe=s(DC);eEe=n(iqe,"STRONG",{});var T9t=s(eEe);b5r=r(T9t,"data2vec-vision"),T9t.forEach(t),v5r=r(iqe," \u2014 "),gJ=n(iqe,"A",{href:!0});var M9t=s(gJ);F5r=r(M9t,"TFData2VecVisionForImageClassification"),M9t.forEach(t),T5r=r(iqe," (Data2VecVision model)"),iqe.forEach(t),M5r=i(VL),GC=n(VL,"LI",{});var dqe=s(GC);oEe=n(dqe,"STRONG",{});var E9t=s(oEe);E5r=r(E9t,"swin"),E9t.forEach(t),C5r=r(dqe," \u2014 "),hJ=n(dqe,"A",{href:!0});var C9t=s(hJ);w5r=r(C9t,"TFSwinForImageClassification"),C9t.forEach(t),A5r=r(dqe," (Swin Transformer model)"),dqe.forEach(t),L5r=i(VL),OC=n(VL,"LI",{});var cqe=s(OC);rEe=n(cqe,"STRONG",{});var w9t=s(rEe);y5r=r(w9t,"vit"),w9t.forEach(t),x5r=r(cqe," \u2014 "),uJ=n(cqe,"A",{href:!0});var A9t=s(uJ);$5r=r(A9t,"TFViTForImageClassification"),A9t.forEach(t),k5r=r(cqe," (ViT model)"),cqe.forEach(t),VL.forEach(t),S5r=i(Sl),T(VC.$$.fragment,Sl),Sl.forEach(t),kl.forEach(t),qVe=i(m),hc=n(m,"H2",{class:!0});var Qze=s(hc);XC=n(Qze,"A",{id:!0,class:!0,href:!0});var L9t=s(XC);tEe=n(L9t,"SPAN",{});var y9t=s(tEe);T(X9.$$.fragment,y9t),y9t.forEach(t),L9t.forEach(t),R5r=i(Qze),aEe=n(Qze,"SPAN",{});var x9t=s(aEe);P5r=r(x9t,"TFAutoModelForMaskedLM"),x9t.forEach(t),Qze.forEach(t),jVe=i(m),ar=n(m,"DIV",{class:!0});var Rl=s(ar);T(z9.$$.fragment,Rl),B5r=i(Rl),uc=n(Rl,"P",{});var Xre=s(uc);I5r=r(Xre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),pJ=n(Xre,"A",{href:!0});var $9t=s(pJ);N5r=r($9t,"from_pretrained()"),$9t.forEach(t),q5r=r(Xre," class method or the "),_J=n(Xre,"A",{href:!0});var k9t=s(_J);j5r=r(k9t,"from_config()"),k9t.forEach(t),D5r=r(Xre,` class
method.`),Xre.forEach(t),G5r=i(Rl),Q9=n(Rl,"P",{});var Wze=s(Q9);O5r=r(Wze,"This class cannot be instantiated directly using "),nEe=n(Wze,"CODE",{});var S9t=s(nEe);V5r=r(S9t,"__init__()"),S9t.forEach(t),X5r=r(Wze," (throws an error)."),Wze.forEach(t),z5r=i(Rl),Pt=n(Rl,"DIV",{class:!0});var XL=s(Pt);T(W9.$$.fragment,XL),Q5r=i(XL),sEe=n(XL,"P",{});var R9t=s(sEe);W5r=r(R9t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),R9t.forEach(t),H5r=i(XL),pc=n(XL,"P",{});var zre=s(pc);U5r=r(zre,`Note:
Loading a model from its configuration file does `),lEe=n(zre,"STRONG",{});var P9t=s(lEe);J5r=r(P9t,"not"),P9t.forEach(t),Y5r=r(zre,` load the model weights. It only affects the
model\u2019s configuration. Use `),bJ=n(zre,"A",{href:!0});var B9t=s(bJ);K5r=r(B9t,"from_pretrained()"),B9t.forEach(t),Z5r=r(zre," to load the model weights."),zre.forEach(t),e3r=i(XL),T(zC.$$.fragment,XL),XL.forEach(t),o3r=i(Rl),Sr=n(Rl,"DIV",{class:!0});var Pl=s(Sr);T(H9.$$.fragment,Pl),r3r=i(Pl),iEe=n(Pl,"P",{});var I9t=s(iEe);t3r=r(I9t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),I9t.forEach(t),a3r=i(Pl),cn=n(Pl,"P",{});var zL=s(cn);n3r=r(zL,"The model class to instantiate is selected based on the "),dEe=n(zL,"CODE",{});var N9t=s(dEe);s3r=r(N9t,"model_type"),N9t.forEach(t),l3r=r(zL,` property of the config object (either
passed as an argument or loaded from `),cEe=n(zL,"CODE",{});var q9t=s(cEe);i3r=r(q9t,"pretrained_model_name_or_path"),q9t.forEach(t),d3r=r(zL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mEe=n(zL,"CODE",{});var j9t=s(mEe);c3r=r(j9t,"pretrained_model_name_or_path"),j9t.forEach(t),m3r=r(zL,":"),zL.forEach(t),f3r=i(Pl),ie=n(Pl,"UL",{});var me=s(ie);QC=n(me,"LI",{});var mqe=s(QC);fEe=n(mqe,"STRONG",{});var D9t=s(fEe);g3r=r(D9t,"albert"),D9t.forEach(t),h3r=r(mqe," \u2014 "),vJ=n(mqe,"A",{href:!0});var G9t=s(vJ);u3r=r(G9t,"TFAlbertForMaskedLM"),G9t.forEach(t),p3r=r(mqe," (ALBERT model)"),mqe.forEach(t),_3r=i(me),WC=n(me,"LI",{});var fqe=s(WC);gEe=n(fqe,"STRONG",{});var O9t=s(gEe);b3r=r(O9t,"bert"),O9t.forEach(t),v3r=r(fqe," \u2014 "),FJ=n(fqe,"A",{href:!0});var V9t=s(FJ);F3r=r(V9t,"TFBertForMaskedLM"),V9t.forEach(t),T3r=r(fqe," (BERT model)"),fqe.forEach(t),M3r=i(me),HC=n(me,"LI",{});var gqe=s(HC);hEe=n(gqe,"STRONG",{});var X9t=s(hEe);E3r=r(X9t,"camembert"),X9t.forEach(t),C3r=r(gqe," \u2014 "),TJ=n(gqe,"A",{href:!0});var z9t=s(TJ);w3r=r(z9t,"TFCamembertForMaskedLM"),z9t.forEach(t),A3r=r(gqe," (CamemBERT model)"),gqe.forEach(t),L3r=i(me),UC=n(me,"LI",{});var hqe=s(UC);uEe=n(hqe,"STRONG",{});var Q9t=s(uEe);y3r=r(Q9t,"convbert"),Q9t.forEach(t),x3r=r(hqe," \u2014 "),MJ=n(hqe,"A",{href:!0});var W9t=s(MJ);$3r=r(W9t,"TFConvBertForMaskedLM"),W9t.forEach(t),k3r=r(hqe," (ConvBERT model)"),hqe.forEach(t),S3r=i(me),JC=n(me,"LI",{});var uqe=s(JC);pEe=n(uqe,"STRONG",{});var H9t=s(pEe);R3r=r(H9t,"deberta"),H9t.forEach(t),P3r=r(uqe," \u2014 "),EJ=n(uqe,"A",{href:!0});var U9t=s(EJ);B3r=r(U9t,"TFDebertaForMaskedLM"),U9t.forEach(t),I3r=r(uqe," (DeBERTa model)"),uqe.forEach(t),N3r=i(me),YC=n(me,"LI",{});var pqe=s(YC);_Ee=n(pqe,"STRONG",{});var J9t=s(_Ee);q3r=r(J9t,"deberta-v2"),J9t.forEach(t),j3r=r(pqe," \u2014 "),CJ=n(pqe,"A",{href:!0});var Y9t=s(CJ);D3r=r(Y9t,"TFDebertaV2ForMaskedLM"),Y9t.forEach(t),G3r=r(pqe," (DeBERTa-v2 model)"),pqe.forEach(t),O3r=i(me),KC=n(me,"LI",{});var _qe=s(KC);bEe=n(_qe,"STRONG",{});var K9t=s(bEe);V3r=r(K9t,"distilbert"),K9t.forEach(t),X3r=r(_qe," \u2014 "),wJ=n(_qe,"A",{href:!0});var Z9t=s(wJ);z3r=r(Z9t,"TFDistilBertForMaskedLM"),Z9t.forEach(t),Q3r=r(_qe," (DistilBERT model)"),_qe.forEach(t),W3r=i(me),ZC=n(me,"LI",{});var bqe=s(ZC);vEe=n(bqe,"STRONG",{});var ext=s(vEe);H3r=r(ext,"electra"),ext.forEach(t),U3r=r(bqe," \u2014 "),AJ=n(bqe,"A",{href:!0});var oxt=s(AJ);J3r=r(oxt,"TFElectraForMaskedLM"),oxt.forEach(t),Y3r=r(bqe," (ELECTRA model)"),bqe.forEach(t),K3r=i(me),e5=n(me,"LI",{});var vqe=s(e5);FEe=n(vqe,"STRONG",{});var rxt=s(FEe);Z3r=r(rxt,"flaubert"),rxt.forEach(t),e0r=r(vqe," \u2014 "),LJ=n(vqe,"A",{href:!0});var txt=s(LJ);o0r=r(txt,"TFFlaubertWithLMHeadModel"),txt.forEach(t),r0r=r(vqe," (FlauBERT model)"),vqe.forEach(t),t0r=i(me),o5=n(me,"LI",{});var Fqe=s(o5);TEe=n(Fqe,"STRONG",{});var axt=s(TEe);a0r=r(axt,"funnel"),axt.forEach(t),n0r=r(Fqe," \u2014 "),yJ=n(Fqe,"A",{href:!0});var nxt=s(yJ);s0r=r(nxt,"TFFunnelForMaskedLM"),nxt.forEach(t),l0r=r(Fqe," (Funnel Transformer model)"),Fqe.forEach(t),i0r=i(me),r5=n(me,"LI",{});var Tqe=s(r5);MEe=n(Tqe,"STRONG",{});var sxt=s(MEe);d0r=r(sxt,"layoutlm"),sxt.forEach(t),c0r=r(Tqe," \u2014 "),xJ=n(Tqe,"A",{href:!0});var lxt=s(xJ);m0r=r(lxt,"TFLayoutLMForMaskedLM"),lxt.forEach(t),f0r=r(Tqe," (LayoutLM model)"),Tqe.forEach(t),g0r=i(me),t5=n(me,"LI",{});var Mqe=s(t5);EEe=n(Mqe,"STRONG",{});var ixt=s(EEe);h0r=r(ixt,"longformer"),ixt.forEach(t),u0r=r(Mqe," \u2014 "),$J=n(Mqe,"A",{href:!0});var dxt=s($J);p0r=r(dxt,"TFLongformerForMaskedLM"),dxt.forEach(t),_0r=r(Mqe," (Longformer model)"),Mqe.forEach(t),b0r=i(me),a5=n(me,"LI",{});var Eqe=s(a5);CEe=n(Eqe,"STRONG",{});var cxt=s(CEe);v0r=r(cxt,"mobilebert"),cxt.forEach(t),F0r=r(Eqe," \u2014 "),kJ=n(Eqe,"A",{href:!0});var mxt=s(kJ);T0r=r(mxt,"TFMobileBertForMaskedLM"),mxt.forEach(t),M0r=r(Eqe," (MobileBERT model)"),Eqe.forEach(t),E0r=i(me),n5=n(me,"LI",{});var Cqe=s(n5);wEe=n(Cqe,"STRONG",{});var fxt=s(wEe);C0r=r(fxt,"mpnet"),fxt.forEach(t),w0r=r(Cqe," \u2014 "),SJ=n(Cqe,"A",{href:!0});var gxt=s(SJ);A0r=r(gxt,"TFMPNetForMaskedLM"),gxt.forEach(t),L0r=r(Cqe," (MPNet model)"),Cqe.forEach(t),y0r=i(me),s5=n(me,"LI",{});var wqe=s(s5);AEe=n(wqe,"STRONG",{});var hxt=s(AEe);x0r=r(hxt,"rembert"),hxt.forEach(t),$0r=r(wqe," \u2014 "),RJ=n(wqe,"A",{href:!0});var uxt=s(RJ);k0r=r(uxt,"TFRemBertForMaskedLM"),uxt.forEach(t),S0r=r(wqe," (RemBERT model)"),wqe.forEach(t),R0r=i(me),l5=n(me,"LI",{});var Aqe=s(l5);LEe=n(Aqe,"STRONG",{});var pxt=s(LEe);P0r=r(pxt,"roberta"),pxt.forEach(t),B0r=r(Aqe," \u2014 "),PJ=n(Aqe,"A",{href:!0});var _xt=s(PJ);I0r=r(_xt,"TFRobertaForMaskedLM"),_xt.forEach(t),N0r=r(Aqe," (RoBERTa model)"),Aqe.forEach(t),q0r=i(me),i5=n(me,"LI",{});var Lqe=s(i5);yEe=n(Lqe,"STRONG",{});var bxt=s(yEe);j0r=r(bxt,"roformer"),bxt.forEach(t),D0r=r(Lqe," \u2014 "),BJ=n(Lqe,"A",{href:!0});var vxt=s(BJ);G0r=r(vxt,"TFRoFormerForMaskedLM"),vxt.forEach(t),O0r=r(Lqe," (RoFormer model)"),Lqe.forEach(t),V0r=i(me),d5=n(me,"LI",{});var yqe=s(d5);xEe=n(yqe,"STRONG",{});var Fxt=s(xEe);X0r=r(Fxt,"tapas"),Fxt.forEach(t),z0r=r(yqe," \u2014 "),IJ=n(yqe,"A",{href:!0});var Txt=s(IJ);Q0r=r(Txt,"TFTapasForMaskedLM"),Txt.forEach(t),W0r=r(yqe," (TAPAS model)"),yqe.forEach(t),H0r=i(me),c5=n(me,"LI",{});var xqe=s(c5);$Ee=n(xqe,"STRONG",{});var Mxt=s($Ee);U0r=r(Mxt,"xlm"),Mxt.forEach(t),J0r=r(xqe," \u2014 "),NJ=n(xqe,"A",{href:!0});var Ext=s(NJ);Y0r=r(Ext,"TFXLMWithLMHeadModel"),Ext.forEach(t),K0r=r(xqe," (XLM model)"),xqe.forEach(t),Z0r=i(me),m5=n(me,"LI",{});var $qe=s(m5);kEe=n($qe,"STRONG",{});var Cxt=s(kEe);ewr=r(Cxt,"xlm-roberta"),Cxt.forEach(t),owr=r($qe," \u2014 "),qJ=n($qe,"A",{href:!0});var wxt=s(qJ);rwr=r(wxt,"TFXLMRobertaForMaskedLM"),wxt.forEach(t),twr=r($qe," (XLM-RoBERTa model)"),$qe.forEach(t),me.forEach(t),awr=i(Pl),T(f5.$$.fragment,Pl),Pl.forEach(t),Rl.forEach(t),DVe=i(m),_c=n(m,"H2",{class:!0});var Hze=s(_c);g5=n(Hze,"A",{id:!0,class:!0,href:!0});var Axt=s(g5);SEe=n(Axt,"SPAN",{});var Lxt=s(SEe);T(U9.$$.fragment,Lxt),Lxt.forEach(t),Axt.forEach(t),nwr=i(Hze),REe=n(Hze,"SPAN",{});var yxt=s(REe);swr=r(yxt,"TFAutoModelForSeq2SeqLM"),yxt.forEach(t),Hze.forEach(t),GVe=i(m),nr=n(m,"DIV",{class:!0});var Bl=s(nr);T(J9.$$.fragment,Bl),lwr=i(Bl),bc=n(Bl,"P",{});var Qre=s(bc);iwr=r(Qre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),jJ=n(Qre,"A",{href:!0});var xxt=s(jJ);dwr=r(xxt,"from_pretrained()"),xxt.forEach(t),cwr=r(Qre," class method or the "),DJ=n(Qre,"A",{href:!0});var $xt=s(DJ);mwr=r($xt,"from_config()"),$xt.forEach(t),fwr=r(Qre,` class
method.`),Qre.forEach(t),gwr=i(Bl),Y9=n(Bl,"P",{});var Uze=s(Y9);hwr=r(Uze,"This class cannot be instantiated directly using "),PEe=n(Uze,"CODE",{});var kxt=s(PEe);uwr=r(kxt,"__init__()"),kxt.forEach(t),pwr=r(Uze," (throws an error)."),Uze.forEach(t),_wr=i(Bl),Bt=n(Bl,"DIV",{class:!0});var QL=s(Bt);T(K9.$$.fragment,QL),bwr=i(QL),BEe=n(QL,"P",{});var Sxt=s(BEe);vwr=r(Sxt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Sxt.forEach(t),Fwr=i(QL),vc=n(QL,"P",{});var Wre=s(vc);Twr=r(Wre,`Note:
Loading a model from its configuration file does `),IEe=n(Wre,"STRONG",{});var Rxt=s(IEe);Mwr=r(Rxt,"not"),Rxt.forEach(t),Ewr=r(Wre,` load the model weights. It only affects the
model\u2019s configuration. Use `),GJ=n(Wre,"A",{href:!0});var Pxt=s(GJ);Cwr=r(Pxt,"from_pretrained()"),Pxt.forEach(t),wwr=r(Wre," to load the model weights."),Wre.forEach(t),Awr=i(QL),T(h5.$$.fragment,QL),QL.forEach(t),Lwr=i(Bl),Rr=n(Bl,"DIV",{class:!0});var Il=s(Rr);T(Z9.$$.fragment,Il),ywr=i(Il),NEe=n(Il,"P",{});var Bxt=s(NEe);xwr=r(Bxt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Bxt.forEach(t),$wr=i(Il),mn=n(Il,"P",{});var WL=s(mn);kwr=r(WL,"The model class to instantiate is selected based on the "),qEe=n(WL,"CODE",{});var Ixt=s(qEe);Swr=r(Ixt,"model_type"),Ixt.forEach(t),Rwr=r(WL,` property of the config object (either
passed as an argument or loaded from `),jEe=n(WL,"CODE",{});var Nxt=s(jEe);Pwr=r(Nxt,"pretrained_model_name_or_path"),Nxt.forEach(t),Bwr=r(WL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),DEe=n(WL,"CODE",{});var qxt=s(DEe);Iwr=r(qxt,"pretrained_model_name_or_path"),qxt.forEach(t),Nwr=r(WL,":"),WL.forEach(t),qwr=i(Il),ye=n(Il,"UL",{});var Ie=s(ye);u5=n(Ie,"LI",{});var kqe=s(u5);GEe=n(kqe,"STRONG",{});var jxt=s(GEe);jwr=r(jxt,"bart"),jxt.forEach(t),Dwr=r(kqe," \u2014 "),OJ=n(kqe,"A",{href:!0});var Dxt=s(OJ);Gwr=r(Dxt,"TFBartForConditionalGeneration"),Dxt.forEach(t),Owr=r(kqe," (BART model)"),kqe.forEach(t),Vwr=i(Ie),p5=n(Ie,"LI",{});var Sqe=s(p5);OEe=n(Sqe,"STRONG",{});var Gxt=s(OEe);Xwr=r(Gxt,"blenderbot"),Gxt.forEach(t),zwr=r(Sqe," \u2014 "),VJ=n(Sqe,"A",{href:!0});var Oxt=s(VJ);Qwr=r(Oxt,"TFBlenderbotForConditionalGeneration"),Oxt.forEach(t),Wwr=r(Sqe," (Blenderbot model)"),Sqe.forEach(t),Hwr=i(Ie),_5=n(Ie,"LI",{});var Rqe=s(_5);VEe=n(Rqe,"STRONG",{});var Vxt=s(VEe);Uwr=r(Vxt,"blenderbot-small"),Vxt.forEach(t),Jwr=r(Rqe," \u2014 "),XJ=n(Rqe,"A",{href:!0});var Xxt=s(XJ);Ywr=r(Xxt,"TFBlenderbotSmallForConditionalGeneration"),Xxt.forEach(t),Kwr=r(Rqe," (BlenderbotSmall model)"),Rqe.forEach(t),Zwr=i(Ie),b5=n(Ie,"LI",{});var Pqe=s(b5);XEe=n(Pqe,"STRONG",{});var zxt=s(XEe);eAr=r(zxt,"encoder-decoder"),zxt.forEach(t),oAr=r(Pqe," \u2014 "),zJ=n(Pqe,"A",{href:!0});var Qxt=s(zJ);rAr=r(Qxt,"TFEncoderDecoderModel"),Qxt.forEach(t),tAr=r(Pqe," (Encoder decoder model)"),Pqe.forEach(t),aAr=i(Ie),v5=n(Ie,"LI",{});var Bqe=s(v5);zEe=n(Bqe,"STRONG",{});var Wxt=s(zEe);nAr=r(Wxt,"led"),Wxt.forEach(t),sAr=r(Bqe," \u2014 "),QJ=n(Bqe,"A",{href:!0});var Hxt=s(QJ);lAr=r(Hxt,"TFLEDForConditionalGeneration"),Hxt.forEach(t),iAr=r(Bqe," (LED model)"),Bqe.forEach(t),dAr=i(Ie),F5=n(Ie,"LI",{});var Iqe=s(F5);QEe=n(Iqe,"STRONG",{});var Uxt=s(QEe);cAr=r(Uxt,"marian"),Uxt.forEach(t),mAr=r(Iqe," \u2014 "),WJ=n(Iqe,"A",{href:!0});var Jxt=s(WJ);fAr=r(Jxt,"TFMarianMTModel"),Jxt.forEach(t),gAr=r(Iqe," (Marian model)"),Iqe.forEach(t),hAr=i(Ie),T5=n(Ie,"LI",{});var Nqe=s(T5);WEe=n(Nqe,"STRONG",{});var Yxt=s(WEe);uAr=r(Yxt,"mbart"),Yxt.forEach(t),pAr=r(Nqe," \u2014 "),HJ=n(Nqe,"A",{href:!0});var Kxt=s(HJ);_Ar=r(Kxt,"TFMBartForConditionalGeneration"),Kxt.forEach(t),bAr=r(Nqe," (mBART model)"),Nqe.forEach(t),vAr=i(Ie),M5=n(Ie,"LI",{});var qqe=s(M5);HEe=n(qqe,"STRONG",{});var Zxt=s(HEe);FAr=r(Zxt,"mt5"),Zxt.forEach(t),TAr=r(qqe," \u2014 "),UJ=n(qqe,"A",{href:!0});var e$t=s(UJ);MAr=r(e$t,"TFMT5ForConditionalGeneration"),e$t.forEach(t),EAr=r(qqe," (MT5 model)"),qqe.forEach(t),CAr=i(Ie),E5=n(Ie,"LI",{});var jqe=s(E5);UEe=n(jqe,"STRONG",{});var o$t=s(UEe);wAr=r(o$t,"pegasus"),o$t.forEach(t),AAr=r(jqe," \u2014 "),JJ=n(jqe,"A",{href:!0});var r$t=s(JJ);LAr=r(r$t,"TFPegasusForConditionalGeneration"),r$t.forEach(t),yAr=r(jqe," (Pegasus model)"),jqe.forEach(t),xAr=i(Ie),C5=n(Ie,"LI",{});var Dqe=s(C5);JEe=n(Dqe,"STRONG",{});var t$t=s(JEe);$Ar=r(t$t,"t5"),t$t.forEach(t),kAr=r(Dqe," \u2014 "),YJ=n(Dqe,"A",{href:!0});var a$t=s(YJ);SAr=r(a$t,"TFT5ForConditionalGeneration"),a$t.forEach(t),RAr=r(Dqe," (T5 model)"),Dqe.forEach(t),Ie.forEach(t),PAr=i(Il),T(w5.$$.fragment,Il),Il.forEach(t),Bl.forEach(t),OVe=i(m),Fc=n(m,"H2",{class:!0});var Jze=s(Fc);A5=n(Jze,"A",{id:!0,class:!0,href:!0});var n$t=s(A5);YEe=n(n$t,"SPAN",{});var s$t=s(YEe);T(ex.$$.fragment,s$t),s$t.forEach(t),n$t.forEach(t),BAr=i(Jze),KEe=n(Jze,"SPAN",{});var l$t=s(KEe);IAr=r(l$t,"TFAutoModelForSequenceClassification"),l$t.forEach(t),Jze.forEach(t),VVe=i(m),sr=n(m,"DIV",{class:!0});var Nl=s(sr);T(ox.$$.fragment,Nl),NAr=i(Nl),Tc=n(Nl,"P",{});var Hre=s(Tc);qAr=r(Hre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),KJ=n(Hre,"A",{href:!0});var i$t=s(KJ);jAr=r(i$t,"from_pretrained()"),i$t.forEach(t),DAr=r(Hre," class method or the "),ZJ=n(Hre,"A",{href:!0});var d$t=s(ZJ);GAr=r(d$t,"from_config()"),d$t.forEach(t),OAr=r(Hre,` class
method.`),Hre.forEach(t),VAr=i(Nl),rx=n(Nl,"P",{});var Yze=s(rx);XAr=r(Yze,"This class cannot be instantiated directly using "),ZEe=n(Yze,"CODE",{});var c$t=s(ZEe);zAr=r(c$t,"__init__()"),c$t.forEach(t),QAr=r(Yze," (throws an error)."),Yze.forEach(t),WAr=i(Nl),It=n(Nl,"DIV",{class:!0});var HL=s(It);T(tx.$$.fragment,HL),HAr=i(HL),e4e=n(HL,"P",{});var m$t=s(e4e);UAr=r(m$t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),m$t.forEach(t),JAr=i(HL),Mc=n(HL,"P",{});var Ure=s(Mc);YAr=r(Ure,`Note:
Loading a model from its configuration file does `),o4e=n(Ure,"STRONG",{});var f$t=s(o4e);KAr=r(f$t,"not"),f$t.forEach(t),ZAr=r(Ure,` load the model weights. It only affects the
model\u2019s configuration. Use `),eY=n(Ure,"A",{href:!0});var g$t=s(eY);e6r=r(g$t,"from_pretrained()"),g$t.forEach(t),o6r=r(Ure," to load the model weights."),Ure.forEach(t),r6r=i(HL),T(L5.$$.fragment,HL),HL.forEach(t),t6r=i(Nl),Pr=n(Nl,"DIV",{class:!0});var ql=s(Pr);T(ax.$$.fragment,ql),a6r=i(ql),r4e=n(ql,"P",{});var h$t=s(r4e);n6r=r(h$t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),h$t.forEach(t),s6r=i(ql),fn=n(ql,"P",{});var UL=s(fn);l6r=r(UL,"The model class to instantiate is selected based on the "),t4e=n(UL,"CODE",{});var u$t=s(t4e);i6r=r(u$t,"model_type"),u$t.forEach(t),d6r=r(UL,` property of the config object (either
passed as an argument or loaded from `),a4e=n(UL,"CODE",{});var p$t=s(a4e);c6r=r(p$t,"pretrained_model_name_or_path"),p$t.forEach(t),m6r=r(UL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n4e=n(UL,"CODE",{});var _$t=s(n4e);f6r=r(_$t,"pretrained_model_name_or_path"),_$t.forEach(t),g6r=r(UL,":"),UL.forEach(t),h6r=i(ql),te=n(ql,"UL",{});var ne=s(te);y5=n(ne,"LI",{});var Gqe=s(y5);s4e=n(Gqe,"STRONG",{});var b$t=s(s4e);u6r=r(b$t,"albert"),b$t.forEach(t),p6r=r(Gqe," \u2014 "),oY=n(Gqe,"A",{href:!0});var v$t=s(oY);_6r=r(v$t,"TFAlbertForSequenceClassification"),v$t.forEach(t),b6r=r(Gqe," (ALBERT model)"),Gqe.forEach(t),v6r=i(ne),x5=n(ne,"LI",{});var Oqe=s(x5);l4e=n(Oqe,"STRONG",{});var F$t=s(l4e);F6r=r(F$t,"bert"),F$t.forEach(t),T6r=r(Oqe," \u2014 "),rY=n(Oqe,"A",{href:!0});var T$t=s(rY);M6r=r(T$t,"TFBertForSequenceClassification"),T$t.forEach(t),E6r=r(Oqe," (BERT model)"),Oqe.forEach(t),C6r=i(ne),$5=n(ne,"LI",{});var Vqe=s($5);i4e=n(Vqe,"STRONG",{});var M$t=s(i4e);w6r=r(M$t,"camembert"),M$t.forEach(t),A6r=r(Vqe," \u2014 "),tY=n(Vqe,"A",{href:!0});var E$t=s(tY);L6r=r(E$t,"TFCamembertForSequenceClassification"),E$t.forEach(t),y6r=r(Vqe," (CamemBERT model)"),Vqe.forEach(t),x6r=i(ne),k5=n(ne,"LI",{});var Xqe=s(k5);d4e=n(Xqe,"STRONG",{});var C$t=s(d4e);$6r=r(C$t,"convbert"),C$t.forEach(t),k6r=r(Xqe," \u2014 "),aY=n(Xqe,"A",{href:!0});var w$t=s(aY);S6r=r(w$t,"TFConvBertForSequenceClassification"),w$t.forEach(t),R6r=r(Xqe," (ConvBERT model)"),Xqe.forEach(t),P6r=i(ne),S5=n(ne,"LI",{});var zqe=s(S5);c4e=n(zqe,"STRONG",{});var A$t=s(c4e);B6r=r(A$t,"ctrl"),A$t.forEach(t),I6r=r(zqe," \u2014 "),nY=n(zqe,"A",{href:!0});var L$t=s(nY);N6r=r(L$t,"TFCTRLForSequenceClassification"),L$t.forEach(t),q6r=r(zqe," (CTRL model)"),zqe.forEach(t),j6r=i(ne),R5=n(ne,"LI",{});var Qqe=s(R5);m4e=n(Qqe,"STRONG",{});var y$t=s(m4e);D6r=r(y$t,"deberta"),y$t.forEach(t),G6r=r(Qqe," \u2014 "),sY=n(Qqe,"A",{href:!0});var x$t=s(sY);O6r=r(x$t,"TFDebertaForSequenceClassification"),x$t.forEach(t),V6r=r(Qqe," (DeBERTa model)"),Qqe.forEach(t),X6r=i(ne),P5=n(ne,"LI",{});var Wqe=s(P5);f4e=n(Wqe,"STRONG",{});var $$t=s(f4e);z6r=r($$t,"deberta-v2"),$$t.forEach(t),Q6r=r(Wqe," \u2014 "),lY=n(Wqe,"A",{href:!0});var k$t=s(lY);W6r=r(k$t,"TFDebertaV2ForSequenceClassification"),k$t.forEach(t),H6r=r(Wqe," (DeBERTa-v2 model)"),Wqe.forEach(t),U6r=i(ne),B5=n(ne,"LI",{});var Hqe=s(B5);g4e=n(Hqe,"STRONG",{});var S$t=s(g4e);J6r=r(S$t,"distilbert"),S$t.forEach(t),Y6r=r(Hqe," \u2014 "),iY=n(Hqe,"A",{href:!0});var R$t=s(iY);K6r=r(R$t,"TFDistilBertForSequenceClassification"),R$t.forEach(t),Z6r=r(Hqe," (DistilBERT model)"),Hqe.forEach(t),eLr=i(ne),I5=n(ne,"LI",{});var Uqe=s(I5);h4e=n(Uqe,"STRONG",{});var P$t=s(h4e);oLr=r(P$t,"electra"),P$t.forEach(t),rLr=r(Uqe," \u2014 "),dY=n(Uqe,"A",{href:!0});var B$t=s(dY);tLr=r(B$t,"TFElectraForSequenceClassification"),B$t.forEach(t),aLr=r(Uqe," (ELECTRA model)"),Uqe.forEach(t),nLr=i(ne),N5=n(ne,"LI",{});var Jqe=s(N5);u4e=n(Jqe,"STRONG",{});var I$t=s(u4e);sLr=r(I$t,"flaubert"),I$t.forEach(t),lLr=r(Jqe," \u2014 "),cY=n(Jqe,"A",{href:!0});var N$t=s(cY);iLr=r(N$t,"TFFlaubertForSequenceClassification"),N$t.forEach(t),dLr=r(Jqe," (FlauBERT model)"),Jqe.forEach(t),cLr=i(ne),q5=n(ne,"LI",{});var Yqe=s(q5);p4e=n(Yqe,"STRONG",{});var q$t=s(p4e);mLr=r(q$t,"funnel"),q$t.forEach(t),fLr=r(Yqe," \u2014 "),mY=n(Yqe,"A",{href:!0});var j$t=s(mY);gLr=r(j$t,"TFFunnelForSequenceClassification"),j$t.forEach(t),hLr=r(Yqe," (Funnel Transformer model)"),Yqe.forEach(t),uLr=i(ne),j5=n(ne,"LI",{});var Kqe=s(j5);_4e=n(Kqe,"STRONG",{});var D$t=s(_4e);pLr=r(D$t,"gpt2"),D$t.forEach(t),_Lr=r(Kqe," \u2014 "),fY=n(Kqe,"A",{href:!0});var G$t=s(fY);bLr=r(G$t,"TFGPT2ForSequenceClassification"),G$t.forEach(t),vLr=r(Kqe," (OpenAI GPT-2 model)"),Kqe.forEach(t),FLr=i(ne),D5=n(ne,"LI",{});var Zqe=s(D5);b4e=n(Zqe,"STRONG",{});var O$t=s(b4e);TLr=r(O$t,"gptj"),O$t.forEach(t),MLr=r(Zqe," \u2014 "),gY=n(Zqe,"A",{href:!0});var V$t=s(gY);ELr=r(V$t,"TFGPTJForSequenceClassification"),V$t.forEach(t),CLr=r(Zqe," (GPT-J model)"),Zqe.forEach(t),wLr=i(ne),G5=n(ne,"LI",{});var eje=s(G5);v4e=n(eje,"STRONG",{});var X$t=s(v4e);ALr=r(X$t,"layoutlm"),X$t.forEach(t),LLr=r(eje," \u2014 "),hY=n(eje,"A",{href:!0});var z$t=s(hY);yLr=r(z$t,"TFLayoutLMForSequenceClassification"),z$t.forEach(t),xLr=r(eje," (LayoutLM model)"),eje.forEach(t),$Lr=i(ne),O5=n(ne,"LI",{});var oje=s(O5);F4e=n(oje,"STRONG",{});var Q$t=s(F4e);kLr=r(Q$t,"longformer"),Q$t.forEach(t),SLr=r(oje," \u2014 "),uY=n(oje,"A",{href:!0});var W$t=s(uY);RLr=r(W$t,"TFLongformerForSequenceClassification"),W$t.forEach(t),PLr=r(oje," (Longformer model)"),oje.forEach(t),BLr=i(ne),V5=n(ne,"LI",{});var rje=s(V5);T4e=n(rje,"STRONG",{});var H$t=s(T4e);ILr=r(H$t,"mobilebert"),H$t.forEach(t),NLr=r(rje," \u2014 "),pY=n(rje,"A",{href:!0});var U$t=s(pY);qLr=r(U$t,"TFMobileBertForSequenceClassification"),U$t.forEach(t),jLr=r(rje," (MobileBERT model)"),rje.forEach(t),DLr=i(ne),X5=n(ne,"LI",{});var tje=s(X5);M4e=n(tje,"STRONG",{});var J$t=s(M4e);GLr=r(J$t,"mpnet"),J$t.forEach(t),OLr=r(tje," \u2014 "),_Y=n(tje,"A",{href:!0});var Y$t=s(_Y);VLr=r(Y$t,"TFMPNetForSequenceClassification"),Y$t.forEach(t),XLr=r(tje," (MPNet model)"),tje.forEach(t),zLr=i(ne),z5=n(ne,"LI",{});var aje=s(z5);E4e=n(aje,"STRONG",{});var K$t=s(E4e);QLr=r(K$t,"openai-gpt"),K$t.forEach(t),WLr=r(aje," \u2014 "),bY=n(aje,"A",{href:!0});var Z$t=s(bY);HLr=r(Z$t,"TFOpenAIGPTForSequenceClassification"),Z$t.forEach(t),ULr=r(aje," (OpenAI GPT model)"),aje.forEach(t),JLr=i(ne),Q5=n(ne,"LI",{});var nje=s(Q5);C4e=n(nje,"STRONG",{});var ekt=s(C4e);YLr=r(ekt,"rembert"),ekt.forEach(t),KLr=r(nje," \u2014 "),vY=n(nje,"A",{href:!0});var okt=s(vY);ZLr=r(okt,"TFRemBertForSequenceClassification"),okt.forEach(t),e7r=r(nje," (RemBERT model)"),nje.forEach(t),o7r=i(ne),W5=n(ne,"LI",{});var sje=s(W5);w4e=n(sje,"STRONG",{});var rkt=s(w4e);r7r=r(rkt,"roberta"),rkt.forEach(t),t7r=r(sje," \u2014 "),FY=n(sje,"A",{href:!0});var tkt=s(FY);a7r=r(tkt,"TFRobertaForSequenceClassification"),tkt.forEach(t),n7r=r(sje," (RoBERTa model)"),sje.forEach(t),s7r=i(ne),H5=n(ne,"LI",{});var lje=s(H5);A4e=n(lje,"STRONG",{});var akt=s(A4e);l7r=r(akt,"roformer"),akt.forEach(t),i7r=r(lje," \u2014 "),TY=n(lje,"A",{href:!0});var nkt=s(TY);d7r=r(nkt,"TFRoFormerForSequenceClassification"),nkt.forEach(t),c7r=r(lje," (RoFormer model)"),lje.forEach(t),m7r=i(ne),U5=n(ne,"LI",{});var ije=s(U5);L4e=n(ije,"STRONG",{});var skt=s(L4e);f7r=r(skt,"tapas"),skt.forEach(t),g7r=r(ije," \u2014 "),MY=n(ije,"A",{href:!0});var lkt=s(MY);h7r=r(lkt,"TFTapasForSequenceClassification"),lkt.forEach(t),u7r=r(ije," (TAPAS model)"),ije.forEach(t),p7r=i(ne),J5=n(ne,"LI",{});var dje=s(J5);y4e=n(dje,"STRONG",{});var ikt=s(y4e);_7r=r(ikt,"transfo-xl"),ikt.forEach(t),b7r=r(dje," \u2014 "),EY=n(dje,"A",{href:!0});var dkt=s(EY);v7r=r(dkt,"TFTransfoXLForSequenceClassification"),dkt.forEach(t),F7r=r(dje," (Transformer-XL model)"),dje.forEach(t),T7r=i(ne),Y5=n(ne,"LI",{});var cje=s(Y5);x4e=n(cje,"STRONG",{});var ckt=s(x4e);M7r=r(ckt,"xlm"),ckt.forEach(t),E7r=r(cje," \u2014 "),CY=n(cje,"A",{href:!0});var mkt=s(CY);C7r=r(mkt,"TFXLMForSequenceClassification"),mkt.forEach(t),w7r=r(cje," (XLM model)"),cje.forEach(t),A7r=i(ne),K5=n(ne,"LI",{});var mje=s(K5);$4e=n(mje,"STRONG",{});var fkt=s($4e);L7r=r(fkt,"xlm-roberta"),fkt.forEach(t),y7r=r(mje," \u2014 "),wY=n(mje,"A",{href:!0});var gkt=s(wY);x7r=r(gkt,"TFXLMRobertaForSequenceClassification"),gkt.forEach(t),$7r=r(mje," (XLM-RoBERTa model)"),mje.forEach(t),k7r=i(ne),Z5=n(ne,"LI",{});var fje=s(Z5);k4e=n(fje,"STRONG",{});var hkt=s(k4e);S7r=r(hkt,"xlnet"),hkt.forEach(t),R7r=r(fje," \u2014 "),AY=n(fje,"A",{href:!0});var ukt=s(AY);P7r=r(ukt,"TFXLNetForSequenceClassification"),ukt.forEach(t),B7r=r(fje," (XLNet model)"),fje.forEach(t),ne.forEach(t),I7r=i(ql),T(e3.$$.fragment,ql),ql.forEach(t),Nl.forEach(t),XVe=i(m),Ec=n(m,"H2",{class:!0});var Kze=s(Ec);o3=n(Kze,"A",{id:!0,class:!0,href:!0});var pkt=s(o3);S4e=n(pkt,"SPAN",{});var _kt=s(S4e);T(nx.$$.fragment,_kt),_kt.forEach(t),pkt.forEach(t),N7r=i(Kze),R4e=n(Kze,"SPAN",{});var bkt=s(R4e);q7r=r(bkt,"TFAutoModelForMultipleChoice"),bkt.forEach(t),Kze.forEach(t),zVe=i(m),lr=n(m,"DIV",{class:!0});var jl=s(lr);T(sx.$$.fragment,jl),j7r=i(jl),Cc=n(jl,"P",{});var Jre=s(Cc);D7r=r(Jre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),LY=n(Jre,"A",{href:!0});var vkt=s(LY);G7r=r(vkt,"from_pretrained()"),vkt.forEach(t),O7r=r(Jre," class method or the "),yY=n(Jre,"A",{href:!0});var Fkt=s(yY);V7r=r(Fkt,"from_config()"),Fkt.forEach(t),X7r=r(Jre,` class
method.`),Jre.forEach(t),z7r=i(jl),lx=n(jl,"P",{});var Zze=s(lx);Q7r=r(Zze,"This class cannot be instantiated directly using "),P4e=n(Zze,"CODE",{});var Tkt=s(P4e);W7r=r(Tkt,"__init__()"),Tkt.forEach(t),H7r=r(Zze," (throws an error)."),Zze.forEach(t),U7r=i(jl),Nt=n(jl,"DIV",{class:!0});var JL=s(Nt);T(ix.$$.fragment,JL),J7r=i(JL),B4e=n(JL,"P",{});var Mkt=s(B4e);Y7r=r(Mkt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Mkt.forEach(t),K7r=i(JL),wc=n(JL,"P",{});var Yre=s(wc);Z7r=r(Yre,`Note:
Loading a model from its configuration file does `),I4e=n(Yre,"STRONG",{});var Ekt=s(I4e);eyr=r(Ekt,"not"),Ekt.forEach(t),oyr=r(Yre,` load the model weights. It only affects the
model\u2019s configuration. Use `),xY=n(Yre,"A",{href:!0});var Ckt=s(xY);ryr=r(Ckt,"from_pretrained()"),Ckt.forEach(t),tyr=r(Yre," to load the model weights."),Yre.forEach(t),ayr=i(JL),T(r3.$$.fragment,JL),JL.forEach(t),nyr=i(jl),Br=n(jl,"DIV",{class:!0});var Dl=s(Br);T(dx.$$.fragment,Dl),syr=i(Dl),N4e=n(Dl,"P",{});var wkt=s(N4e);lyr=r(wkt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),wkt.forEach(t),iyr=i(Dl),gn=n(Dl,"P",{});var YL=s(gn);dyr=r(YL,"The model class to instantiate is selected based on the "),q4e=n(YL,"CODE",{});var Akt=s(q4e);cyr=r(Akt,"model_type"),Akt.forEach(t),myr=r(YL,` property of the config object (either
passed as an argument or loaded from `),j4e=n(YL,"CODE",{});var Lkt=s(j4e);fyr=r(Lkt,"pretrained_model_name_or_path"),Lkt.forEach(t),gyr=r(YL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D4e=n(YL,"CODE",{});var ykt=s(D4e);hyr=r(ykt,"pretrained_model_name_or_path"),ykt.forEach(t),uyr=r(YL,":"),YL.forEach(t),pyr=i(Dl),pe=n(Dl,"UL",{});var ve=s(pe);t3=n(ve,"LI",{});var gje=s(t3);G4e=n(gje,"STRONG",{});var xkt=s(G4e);_yr=r(xkt,"albert"),xkt.forEach(t),byr=r(gje," \u2014 "),$Y=n(gje,"A",{href:!0});var $kt=s($Y);vyr=r($kt,"TFAlbertForMultipleChoice"),$kt.forEach(t),Fyr=r(gje," (ALBERT model)"),gje.forEach(t),Tyr=i(ve),a3=n(ve,"LI",{});var hje=s(a3);O4e=n(hje,"STRONG",{});var kkt=s(O4e);Myr=r(kkt,"bert"),kkt.forEach(t),Eyr=r(hje," \u2014 "),kY=n(hje,"A",{href:!0});var Skt=s(kY);Cyr=r(Skt,"TFBertForMultipleChoice"),Skt.forEach(t),wyr=r(hje," (BERT model)"),hje.forEach(t),Ayr=i(ve),n3=n(ve,"LI",{});var uje=s(n3);V4e=n(uje,"STRONG",{});var Rkt=s(V4e);Lyr=r(Rkt,"camembert"),Rkt.forEach(t),yyr=r(uje," \u2014 "),SY=n(uje,"A",{href:!0});var Pkt=s(SY);xyr=r(Pkt,"TFCamembertForMultipleChoice"),Pkt.forEach(t),$yr=r(uje," (CamemBERT model)"),uje.forEach(t),kyr=i(ve),s3=n(ve,"LI",{});var pje=s(s3);X4e=n(pje,"STRONG",{});var Bkt=s(X4e);Syr=r(Bkt,"convbert"),Bkt.forEach(t),Ryr=r(pje," \u2014 "),RY=n(pje,"A",{href:!0});var Ikt=s(RY);Pyr=r(Ikt,"TFConvBertForMultipleChoice"),Ikt.forEach(t),Byr=r(pje," (ConvBERT model)"),pje.forEach(t),Iyr=i(ve),l3=n(ve,"LI",{});var _je=s(l3);z4e=n(_je,"STRONG",{});var Nkt=s(z4e);Nyr=r(Nkt,"distilbert"),Nkt.forEach(t),qyr=r(_je," \u2014 "),PY=n(_je,"A",{href:!0});var qkt=s(PY);jyr=r(qkt,"TFDistilBertForMultipleChoice"),qkt.forEach(t),Dyr=r(_je," (DistilBERT model)"),_je.forEach(t),Gyr=i(ve),i3=n(ve,"LI",{});var bje=s(i3);Q4e=n(bje,"STRONG",{});var jkt=s(Q4e);Oyr=r(jkt,"electra"),jkt.forEach(t),Vyr=r(bje," \u2014 "),BY=n(bje,"A",{href:!0});var Dkt=s(BY);Xyr=r(Dkt,"TFElectraForMultipleChoice"),Dkt.forEach(t),zyr=r(bje," (ELECTRA model)"),bje.forEach(t),Qyr=i(ve),d3=n(ve,"LI",{});var vje=s(d3);W4e=n(vje,"STRONG",{});var Gkt=s(W4e);Wyr=r(Gkt,"flaubert"),Gkt.forEach(t),Hyr=r(vje," \u2014 "),IY=n(vje,"A",{href:!0});var Okt=s(IY);Uyr=r(Okt,"TFFlaubertForMultipleChoice"),Okt.forEach(t),Jyr=r(vje," (FlauBERT model)"),vje.forEach(t),Yyr=i(ve),c3=n(ve,"LI",{});var Fje=s(c3);H4e=n(Fje,"STRONG",{});var Vkt=s(H4e);Kyr=r(Vkt,"funnel"),Vkt.forEach(t),Zyr=r(Fje," \u2014 "),NY=n(Fje,"A",{href:!0});var Xkt=s(NY);e8r=r(Xkt,"TFFunnelForMultipleChoice"),Xkt.forEach(t),o8r=r(Fje," (Funnel Transformer model)"),Fje.forEach(t),r8r=i(ve),m3=n(ve,"LI",{});var Tje=s(m3);U4e=n(Tje,"STRONG",{});var zkt=s(U4e);t8r=r(zkt,"longformer"),zkt.forEach(t),a8r=r(Tje," \u2014 "),qY=n(Tje,"A",{href:!0});var Qkt=s(qY);n8r=r(Qkt,"TFLongformerForMultipleChoice"),Qkt.forEach(t),s8r=r(Tje," (Longformer model)"),Tje.forEach(t),l8r=i(ve),f3=n(ve,"LI",{});var Mje=s(f3);J4e=n(Mje,"STRONG",{});var Wkt=s(J4e);i8r=r(Wkt,"mobilebert"),Wkt.forEach(t),d8r=r(Mje," \u2014 "),jY=n(Mje,"A",{href:!0});var Hkt=s(jY);c8r=r(Hkt,"TFMobileBertForMultipleChoice"),Hkt.forEach(t),m8r=r(Mje," (MobileBERT model)"),Mje.forEach(t),f8r=i(ve),g3=n(ve,"LI",{});var Eje=s(g3);Y4e=n(Eje,"STRONG",{});var Ukt=s(Y4e);g8r=r(Ukt,"mpnet"),Ukt.forEach(t),h8r=r(Eje," \u2014 "),DY=n(Eje,"A",{href:!0});var Jkt=s(DY);u8r=r(Jkt,"TFMPNetForMultipleChoice"),Jkt.forEach(t),p8r=r(Eje," (MPNet model)"),Eje.forEach(t),_8r=i(ve),h3=n(ve,"LI",{});var Cje=s(h3);K4e=n(Cje,"STRONG",{});var Ykt=s(K4e);b8r=r(Ykt,"rembert"),Ykt.forEach(t),v8r=r(Cje," \u2014 "),GY=n(Cje,"A",{href:!0});var Kkt=s(GY);F8r=r(Kkt,"TFRemBertForMultipleChoice"),Kkt.forEach(t),T8r=r(Cje," (RemBERT model)"),Cje.forEach(t),M8r=i(ve),u3=n(ve,"LI",{});var wje=s(u3);Z4e=n(wje,"STRONG",{});var Zkt=s(Z4e);E8r=r(Zkt,"roberta"),Zkt.forEach(t),C8r=r(wje," \u2014 "),OY=n(wje,"A",{href:!0});var eSt=s(OY);w8r=r(eSt,"TFRobertaForMultipleChoice"),eSt.forEach(t),A8r=r(wje," (RoBERTa model)"),wje.forEach(t),L8r=i(ve),p3=n(ve,"LI",{});var Aje=s(p3);eCe=n(Aje,"STRONG",{});var oSt=s(eCe);y8r=r(oSt,"roformer"),oSt.forEach(t),x8r=r(Aje," \u2014 "),VY=n(Aje,"A",{href:!0});var rSt=s(VY);$8r=r(rSt,"TFRoFormerForMultipleChoice"),rSt.forEach(t),k8r=r(Aje," (RoFormer model)"),Aje.forEach(t),S8r=i(ve),_3=n(ve,"LI",{});var Lje=s(_3);oCe=n(Lje,"STRONG",{});var tSt=s(oCe);R8r=r(tSt,"xlm"),tSt.forEach(t),P8r=r(Lje," \u2014 "),XY=n(Lje,"A",{href:!0});var aSt=s(XY);B8r=r(aSt,"TFXLMForMultipleChoice"),aSt.forEach(t),I8r=r(Lje," (XLM model)"),Lje.forEach(t),N8r=i(ve),b3=n(ve,"LI",{});var yje=s(b3);rCe=n(yje,"STRONG",{});var nSt=s(rCe);q8r=r(nSt,"xlm-roberta"),nSt.forEach(t),j8r=r(yje," \u2014 "),zY=n(yje,"A",{href:!0});var sSt=s(zY);D8r=r(sSt,"TFXLMRobertaForMultipleChoice"),sSt.forEach(t),G8r=r(yje," (XLM-RoBERTa model)"),yje.forEach(t),O8r=i(ve),v3=n(ve,"LI",{});var xje=s(v3);tCe=n(xje,"STRONG",{});var lSt=s(tCe);V8r=r(lSt,"xlnet"),lSt.forEach(t),X8r=r(xje," \u2014 "),QY=n(xje,"A",{href:!0});var iSt=s(QY);z8r=r(iSt,"TFXLNetForMultipleChoice"),iSt.forEach(t),Q8r=r(xje," (XLNet model)"),xje.forEach(t),ve.forEach(t),W8r=i(Dl),T(F3.$$.fragment,Dl),Dl.forEach(t),jl.forEach(t),QVe=i(m),Ac=n(m,"H2",{class:!0});var eQe=s(Ac);T3=n(eQe,"A",{id:!0,class:!0,href:!0});var dSt=s(T3);aCe=n(dSt,"SPAN",{});var cSt=s(aCe);T(cx.$$.fragment,cSt),cSt.forEach(t),dSt.forEach(t),H8r=i(eQe),nCe=n(eQe,"SPAN",{});var mSt=s(nCe);U8r=r(mSt,"TFAutoModelForNextSentencePrediction"),mSt.forEach(t),eQe.forEach(t),WVe=i(m),ir=n(m,"DIV",{class:!0});var Gl=s(ir);T(mx.$$.fragment,Gl),J8r=i(Gl),Lc=n(Gl,"P",{});var Kre=s(Lc);Y8r=r(Kre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),WY=n(Kre,"A",{href:!0});var fSt=s(WY);K8r=r(fSt,"from_pretrained()"),fSt.forEach(t),Z8r=r(Kre," class method or the "),HY=n(Kre,"A",{href:!0});var gSt=s(HY);e9r=r(gSt,"from_config()"),gSt.forEach(t),o9r=r(Kre,` class
method.`),Kre.forEach(t),r9r=i(Gl),fx=n(Gl,"P",{});var oQe=s(fx);t9r=r(oQe,"This class cannot be instantiated directly using "),sCe=n(oQe,"CODE",{});var hSt=s(sCe);a9r=r(hSt,"__init__()"),hSt.forEach(t),n9r=r(oQe," (throws an error)."),oQe.forEach(t),s9r=i(Gl),qt=n(Gl,"DIV",{class:!0});var KL=s(qt);T(gx.$$.fragment,KL),l9r=i(KL),lCe=n(KL,"P",{});var uSt=s(lCe);i9r=r(uSt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),uSt.forEach(t),d9r=i(KL),yc=n(KL,"P",{});var Zre=s(yc);c9r=r(Zre,`Note:
Loading a model from its configuration file does `),iCe=n(Zre,"STRONG",{});var pSt=s(iCe);m9r=r(pSt,"not"),pSt.forEach(t),f9r=r(Zre,` load the model weights. It only affects the
model\u2019s configuration. Use `),UY=n(Zre,"A",{href:!0});var _St=s(UY);g9r=r(_St,"from_pretrained()"),_St.forEach(t),h9r=r(Zre," to load the model weights."),Zre.forEach(t),u9r=i(KL),T(M3.$$.fragment,KL),KL.forEach(t),p9r=i(Gl),Ir=n(Gl,"DIV",{class:!0});var Ol=s(Ir);T(hx.$$.fragment,Ol),_9r=i(Ol),dCe=n(Ol,"P",{});var bSt=s(dCe);b9r=r(bSt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),bSt.forEach(t),v9r=i(Ol),hn=n(Ol,"P",{});var ZL=s(hn);F9r=r(ZL,"The model class to instantiate is selected based on the "),cCe=n(ZL,"CODE",{});var vSt=s(cCe);T9r=r(vSt,"model_type"),vSt.forEach(t),M9r=r(ZL,` property of the config object (either
passed as an argument or loaded from `),mCe=n(ZL,"CODE",{});var FSt=s(mCe);E9r=r(FSt,"pretrained_model_name_or_path"),FSt.forEach(t),C9r=r(ZL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fCe=n(ZL,"CODE",{});var TSt=s(fCe);w9r=r(TSt,"pretrained_model_name_or_path"),TSt.forEach(t),A9r=r(ZL,":"),ZL.forEach(t),L9r=i(Ol),ux=n(Ol,"UL",{});var rQe=s(ux);E3=n(rQe,"LI",{});var $je=s(E3);gCe=n($je,"STRONG",{});var MSt=s(gCe);y9r=r(MSt,"bert"),MSt.forEach(t),x9r=r($je," \u2014 "),JY=n($je,"A",{href:!0});var ESt=s(JY);$9r=r(ESt,"TFBertForNextSentencePrediction"),ESt.forEach(t),k9r=r($je," (BERT model)"),$je.forEach(t),S9r=i(rQe),C3=n(rQe,"LI",{});var kje=s(C3);hCe=n(kje,"STRONG",{});var CSt=s(hCe);R9r=r(CSt,"mobilebert"),CSt.forEach(t),P9r=r(kje," \u2014 "),YY=n(kje,"A",{href:!0});var wSt=s(YY);B9r=r(wSt,"TFMobileBertForNextSentencePrediction"),wSt.forEach(t),I9r=r(kje," (MobileBERT model)"),kje.forEach(t),rQe.forEach(t),N9r=i(Ol),T(w3.$$.fragment,Ol),Ol.forEach(t),Gl.forEach(t),HVe=i(m),xc=n(m,"H2",{class:!0});var tQe=s(xc);A3=n(tQe,"A",{id:!0,class:!0,href:!0});var ASt=s(A3);uCe=n(ASt,"SPAN",{});var LSt=s(uCe);T(px.$$.fragment,LSt),LSt.forEach(t),ASt.forEach(t),q9r=i(tQe),pCe=n(tQe,"SPAN",{});var ySt=s(pCe);j9r=r(ySt,"TFAutoModelForTableQuestionAnswering"),ySt.forEach(t),tQe.forEach(t),UVe=i(m),dr=n(m,"DIV",{class:!0});var Vl=s(dr);T(_x.$$.fragment,Vl),D9r=i(Vl),$c=n(Vl,"P",{});var ete=s($c);G9r=r(ete,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),KY=n(ete,"A",{href:!0});var xSt=s(KY);O9r=r(xSt,"from_pretrained()"),xSt.forEach(t),V9r=r(ete," class method or the "),ZY=n(ete,"A",{href:!0});var $St=s(ZY);X9r=r($St,"from_config()"),$St.forEach(t),z9r=r(ete,` class
method.`),ete.forEach(t),Q9r=i(Vl),bx=n(Vl,"P",{});var aQe=s(bx);W9r=r(aQe,"This class cannot be instantiated directly using "),_Ce=n(aQe,"CODE",{});var kSt=s(_Ce);H9r=r(kSt,"__init__()"),kSt.forEach(t),U9r=r(aQe," (throws an error)."),aQe.forEach(t),J9r=i(Vl),jt=n(Vl,"DIV",{class:!0});var e7=s(jt);T(vx.$$.fragment,e7),Y9r=i(e7),bCe=n(e7,"P",{});var SSt=s(bCe);K9r=r(SSt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),SSt.forEach(t),Z9r=i(e7),kc=n(e7,"P",{});var ote=s(kc);exr=r(ote,`Note:
Loading a model from its configuration file does `),vCe=n(ote,"STRONG",{});var RSt=s(vCe);oxr=r(RSt,"not"),RSt.forEach(t),rxr=r(ote,` load the model weights. It only affects the
model\u2019s configuration. Use `),eK=n(ote,"A",{href:!0});var PSt=s(eK);txr=r(PSt,"from_pretrained()"),PSt.forEach(t),axr=r(ote," to load the model weights."),ote.forEach(t),nxr=i(e7),T(L3.$$.fragment,e7),e7.forEach(t),sxr=i(Vl),Nr=n(Vl,"DIV",{class:!0});var Xl=s(Nr);T(Fx.$$.fragment,Xl),lxr=i(Xl),FCe=n(Xl,"P",{});var BSt=s(FCe);ixr=r(BSt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),BSt.forEach(t),dxr=i(Xl),un=n(Xl,"P",{});var o7=s(un);cxr=r(o7,"The model class to instantiate is selected based on the "),TCe=n(o7,"CODE",{});var ISt=s(TCe);mxr=r(ISt,"model_type"),ISt.forEach(t),fxr=r(o7,` property of the config object (either
passed as an argument or loaded from `),MCe=n(o7,"CODE",{});var NSt=s(MCe);gxr=r(NSt,"pretrained_model_name_or_path"),NSt.forEach(t),hxr=r(o7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ECe=n(o7,"CODE",{});var qSt=s(ECe);uxr=r(qSt,"pretrained_model_name_or_path"),qSt.forEach(t),pxr=r(o7,":"),o7.forEach(t),_xr=i(Xl),CCe=n(Xl,"UL",{});var jSt=s(CCe);y3=n(jSt,"LI",{});var Sje=s(y3);wCe=n(Sje,"STRONG",{});var DSt=s(wCe);bxr=r(DSt,"tapas"),DSt.forEach(t),vxr=r(Sje," \u2014 "),oK=n(Sje,"A",{href:!0});var GSt=s(oK);Fxr=r(GSt,"TFTapasForQuestionAnswering"),GSt.forEach(t),Txr=r(Sje," (TAPAS model)"),Sje.forEach(t),jSt.forEach(t),Mxr=i(Xl),T(x3.$$.fragment,Xl),Xl.forEach(t),Vl.forEach(t),JVe=i(m),Sc=n(m,"H2",{class:!0});var nQe=s(Sc);$3=n(nQe,"A",{id:!0,class:!0,href:!0});var OSt=s($3);ACe=n(OSt,"SPAN",{});var VSt=s(ACe);T(Tx.$$.fragment,VSt),VSt.forEach(t),OSt.forEach(t),Exr=i(nQe),LCe=n(nQe,"SPAN",{});var XSt=s(LCe);Cxr=r(XSt,"TFAutoModelForTokenClassification"),XSt.forEach(t),nQe.forEach(t),YVe=i(m),cr=n(m,"DIV",{class:!0});var zl=s(cr);T(Mx.$$.fragment,zl),wxr=i(zl),Rc=n(zl,"P",{});var rte=s(Rc);Axr=r(rte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),rK=n(rte,"A",{href:!0});var zSt=s(rK);Lxr=r(zSt,"from_pretrained()"),zSt.forEach(t),yxr=r(rte," class method or the "),tK=n(rte,"A",{href:!0});var QSt=s(tK);xxr=r(QSt,"from_config()"),QSt.forEach(t),$xr=r(rte,` class
method.`),rte.forEach(t),kxr=i(zl),Ex=n(zl,"P",{});var sQe=s(Ex);Sxr=r(sQe,"This class cannot be instantiated directly using "),yCe=n(sQe,"CODE",{});var WSt=s(yCe);Rxr=r(WSt,"__init__()"),WSt.forEach(t),Pxr=r(sQe," (throws an error)."),sQe.forEach(t),Bxr=i(zl),Dt=n(zl,"DIV",{class:!0});var r7=s(Dt);T(Cx.$$.fragment,r7),Ixr=i(r7),xCe=n(r7,"P",{});var HSt=s(xCe);Nxr=r(HSt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),HSt.forEach(t),qxr=i(r7),Pc=n(r7,"P",{});var tte=s(Pc);jxr=r(tte,`Note:
Loading a model from its configuration file does `),$Ce=n(tte,"STRONG",{});var USt=s($Ce);Dxr=r(USt,"not"),USt.forEach(t),Gxr=r(tte,` load the model weights. It only affects the
model\u2019s configuration. Use `),aK=n(tte,"A",{href:!0});var JSt=s(aK);Oxr=r(JSt,"from_pretrained()"),JSt.forEach(t),Vxr=r(tte," to load the model weights."),tte.forEach(t),Xxr=i(r7),T(k3.$$.fragment,r7),r7.forEach(t),zxr=i(zl),qr=n(zl,"DIV",{class:!0});var Ql=s(qr);T(wx.$$.fragment,Ql),Qxr=i(Ql),kCe=n(Ql,"P",{});var YSt=s(kCe);Wxr=r(YSt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),YSt.forEach(t),Hxr=i(Ql),pn=n(Ql,"P",{});var t7=s(pn);Uxr=r(t7,"The model class to instantiate is selected based on the "),SCe=n(t7,"CODE",{});var KSt=s(SCe);Jxr=r(KSt,"model_type"),KSt.forEach(t),Yxr=r(t7,` property of the config object (either
passed as an argument or loaded from `),RCe=n(t7,"CODE",{});var ZSt=s(RCe);Kxr=r(ZSt,"pretrained_model_name_or_path"),ZSt.forEach(t),Zxr=r(t7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PCe=n(t7,"CODE",{});var eRt=s(PCe);e$r=r(eRt,"pretrained_model_name_or_path"),eRt.forEach(t),o$r=r(t7,":"),t7.forEach(t),r$r=i(Ql),de=n(Ql,"UL",{});var fe=s(de);S3=n(fe,"LI",{});var Rje=s(S3);BCe=n(Rje,"STRONG",{});var oRt=s(BCe);t$r=r(oRt,"albert"),oRt.forEach(t),a$r=r(Rje," \u2014 "),nK=n(Rje,"A",{href:!0});var rRt=s(nK);n$r=r(rRt,"TFAlbertForTokenClassification"),rRt.forEach(t),s$r=r(Rje," (ALBERT model)"),Rje.forEach(t),l$r=i(fe),R3=n(fe,"LI",{});var Pje=s(R3);ICe=n(Pje,"STRONG",{});var tRt=s(ICe);i$r=r(tRt,"bert"),tRt.forEach(t),d$r=r(Pje," \u2014 "),sK=n(Pje,"A",{href:!0});var aRt=s(sK);c$r=r(aRt,"TFBertForTokenClassification"),aRt.forEach(t),m$r=r(Pje," (BERT model)"),Pje.forEach(t),f$r=i(fe),P3=n(fe,"LI",{});var Bje=s(P3);NCe=n(Bje,"STRONG",{});var nRt=s(NCe);g$r=r(nRt,"camembert"),nRt.forEach(t),h$r=r(Bje," \u2014 "),lK=n(Bje,"A",{href:!0});var sRt=s(lK);u$r=r(sRt,"TFCamembertForTokenClassification"),sRt.forEach(t),p$r=r(Bje," (CamemBERT model)"),Bje.forEach(t),_$r=i(fe),B3=n(fe,"LI",{});var Ije=s(B3);qCe=n(Ije,"STRONG",{});var lRt=s(qCe);b$r=r(lRt,"convbert"),lRt.forEach(t),v$r=r(Ije," \u2014 "),iK=n(Ije,"A",{href:!0});var iRt=s(iK);F$r=r(iRt,"TFConvBertForTokenClassification"),iRt.forEach(t),T$r=r(Ije," (ConvBERT model)"),Ije.forEach(t),M$r=i(fe),I3=n(fe,"LI",{});var Nje=s(I3);jCe=n(Nje,"STRONG",{});var dRt=s(jCe);E$r=r(dRt,"deberta"),dRt.forEach(t),C$r=r(Nje," \u2014 "),dK=n(Nje,"A",{href:!0});var cRt=s(dK);w$r=r(cRt,"TFDebertaForTokenClassification"),cRt.forEach(t),A$r=r(Nje," (DeBERTa model)"),Nje.forEach(t),L$r=i(fe),N3=n(fe,"LI",{});var qje=s(N3);DCe=n(qje,"STRONG",{});var mRt=s(DCe);y$r=r(mRt,"deberta-v2"),mRt.forEach(t),x$r=r(qje," \u2014 "),cK=n(qje,"A",{href:!0});var fRt=s(cK);$$r=r(fRt,"TFDebertaV2ForTokenClassification"),fRt.forEach(t),k$r=r(qje," (DeBERTa-v2 model)"),qje.forEach(t),S$r=i(fe),q3=n(fe,"LI",{});var jje=s(q3);GCe=n(jje,"STRONG",{});var gRt=s(GCe);R$r=r(gRt,"distilbert"),gRt.forEach(t),P$r=r(jje," \u2014 "),mK=n(jje,"A",{href:!0});var hRt=s(mK);B$r=r(hRt,"TFDistilBertForTokenClassification"),hRt.forEach(t),I$r=r(jje," (DistilBERT model)"),jje.forEach(t),N$r=i(fe),j3=n(fe,"LI",{});var Dje=s(j3);OCe=n(Dje,"STRONG",{});var uRt=s(OCe);q$r=r(uRt,"electra"),uRt.forEach(t),j$r=r(Dje," \u2014 "),fK=n(Dje,"A",{href:!0});var pRt=s(fK);D$r=r(pRt,"TFElectraForTokenClassification"),pRt.forEach(t),G$r=r(Dje," (ELECTRA model)"),Dje.forEach(t),O$r=i(fe),D3=n(fe,"LI",{});var Gje=s(D3);VCe=n(Gje,"STRONG",{});var _Rt=s(VCe);V$r=r(_Rt,"flaubert"),_Rt.forEach(t),X$r=r(Gje," \u2014 "),gK=n(Gje,"A",{href:!0});var bRt=s(gK);z$r=r(bRt,"TFFlaubertForTokenClassification"),bRt.forEach(t),Q$r=r(Gje," (FlauBERT model)"),Gje.forEach(t),W$r=i(fe),G3=n(fe,"LI",{});var Oje=s(G3);XCe=n(Oje,"STRONG",{});var vRt=s(XCe);H$r=r(vRt,"funnel"),vRt.forEach(t),U$r=r(Oje," \u2014 "),hK=n(Oje,"A",{href:!0});var FRt=s(hK);J$r=r(FRt,"TFFunnelForTokenClassification"),FRt.forEach(t),Y$r=r(Oje," (Funnel Transformer model)"),Oje.forEach(t),K$r=i(fe),O3=n(fe,"LI",{});var Vje=s(O3);zCe=n(Vje,"STRONG",{});var TRt=s(zCe);Z$r=r(TRt,"layoutlm"),TRt.forEach(t),ekr=r(Vje," \u2014 "),uK=n(Vje,"A",{href:!0});var MRt=s(uK);okr=r(MRt,"TFLayoutLMForTokenClassification"),MRt.forEach(t),rkr=r(Vje," (LayoutLM model)"),Vje.forEach(t),tkr=i(fe),V3=n(fe,"LI",{});var Xje=s(V3);QCe=n(Xje,"STRONG",{});var ERt=s(QCe);akr=r(ERt,"longformer"),ERt.forEach(t),nkr=r(Xje," \u2014 "),pK=n(Xje,"A",{href:!0});var CRt=s(pK);skr=r(CRt,"TFLongformerForTokenClassification"),CRt.forEach(t),lkr=r(Xje," (Longformer model)"),Xje.forEach(t),ikr=i(fe),X3=n(fe,"LI",{});var zje=s(X3);WCe=n(zje,"STRONG",{});var wRt=s(WCe);dkr=r(wRt,"mobilebert"),wRt.forEach(t),ckr=r(zje," \u2014 "),_K=n(zje,"A",{href:!0});var ARt=s(_K);mkr=r(ARt,"TFMobileBertForTokenClassification"),ARt.forEach(t),fkr=r(zje," (MobileBERT model)"),zje.forEach(t),gkr=i(fe),z3=n(fe,"LI",{});var Qje=s(z3);HCe=n(Qje,"STRONG",{});var LRt=s(HCe);hkr=r(LRt,"mpnet"),LRt.forEach(t),ukr=r(Qje," \u2014 "),bK=n(Qje,"A",{href:!0});var yRt=s(bK);pkr=r(yRt,"TFMPNetForTokenClassification"),yRt.forEach(t),_kr=r(Qje," (MPNet model)"),Qje.forEach(t),bkr=i(fe),Q3=n(fe,"LI",{});var Wje=s(Q3);UCe=n(Wje,"STRONG",{});var xRt=s(UCe);vkr=r(xRt,"rembert"),xRt.forEach(t),Fkr=r(Wje," \u2014 "),vK=n(Wje,"A",{href:!0});var $Rt=s(vK);Tkr=r($Rt,"TFRemBertForTokenClassification"),$Rt.forEach(t),Mkr=r(Wje," (RemBERT model)"),Wje.forEach(t),Ekr=i(fe),W3=n(fe,"LI",{});var Hje=s(W3);JCe=n(Hje,"STRONG",{});var kRt=s(JCe);Ckr=r(kRt,"roberta"),kRt.forEach(t),wkr=r(Hje," \u2014 "),FK=n(Hje,"A",{href:!0});var SRt=s(FK);Akr=r(SRt,"TFRobertaForTokenClassification"),SRt.forEach(t),Lkr=r(Hje," (RoBERTa model)"),Hje.forEach(t),ykr=i(fe),H3=n(fe,"LI",{});var Uje=s(H3);YCe=n(Uje,"STRONG",{});var RRt=s(YCe);xkr=r(RRt,"roformer"),RRt.forEach(t),$kr=r(Uje," \u2014 "),TK=n(Uje,"A",{href:!0});var PRt=s(TK);kkr=r(PRt,"TFRoFormerForTokenClassification"),PRt.forEach(t),Skr=r(Uje," (RoFormer model)"),Uje.forEach(t),Rkr=i(fe),U3=n(fe,"LI",{});var Jje=s(U3);KCe=n(Jje,"STRONG",{});var BRt=s(KCe);Pkr=r(BRt,"xlm"),BRt.forEach(t),Bkr=r(Jje," \u2014 "),MK=n(Jje,"A",{href:!0});var IRt=s(MK);Ikr=r(IRt,"TFXLMForTokenClassification"),IRt.forEach(t),Nkr=r(Jje," (XLM model)"),Jje.forEach(t),qkr=i(fe),J3=n(fe,"LI",{});var Yje=s(J3);ZCe=n(Yje,"STRONG",{});var NRt=s(ZCe);jkr=r(NRt,"xlm-roberta"),NRt.forEach(t),Dkr=r(Yje," \u2014 "),EK=n(Yje,"A",{href:!0});var qRt=s(EK);Gkr=r(qRt,"TFXLMRobertaForTokenClassification"),qRt.forEach(t),Okr=r(Yje," (XLM-RoBERTa model)"),Yje.forEach(t),Vkr=i(fe),Y3=n(fe,"LI",{});var Kje=s(Y3);e5e=n(Kje,"STRONG",{});var jRt=s(e5e);Xkr=r(jRt,"xlnet"),jRt.forEach(t),zkr=r(Kje," \u2014 "),CK=n(Kje,"A",{href:!0});var DRt=s(CK);Qkr=r(DRt,"TFXLNetForTokenClassification"),DRt.forEach(t),Wkr=r(Kje," (XLNet model)"),Kje.forEach(t),fe.forEach(t),Hkr=i(Ql),T(K3.$$.fragment,Ql),Ql.forEach(t),zl.forEach(t),KVe=i(m),Bc=n(m,"H2",{class:!0});var lQe=s(Bc);Z3=n(lQe,"A",{id:!0,class:!0,href:!0});var GRt=s(Z3);o5e=n(GRt,"SPAN",{});var ORt=s(o5e);T(Ax.$$.fragment,ORt),ORt.forEach(t),GRt.forEach(t),Ukr=i(lQe),r5e=n(lQe,"SPAN",{});var VRt=s(r5e);Jkr=r(VRt,"TFAutoModelForQuestionAnswering"),VRt.forEach(t),lQe.forEach(t),ZVe=i(m),mr=n(m,"DIV",{class:!0});var Wl=s(mr);T(Lx.$$.fragment,Wl),Ykr=i(Wl),Ic=n(Wl,"P",{});var ate=s(Ic);Kkr=r(ate,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),wK=n(ate,"A",{href:!0});var XRt=s(wK);Zkr=r(XRt,"from_pretrained()"),XRt.forEach(t),eSr=r(ate," class method or the "),AK=n(ate,"A",{href:!0});var zRt=s(AK);oSr=r(zRt,"from_config()"),zRt.forEach(t),rSr=r(ate,` class
method.`),ate.forEach(t),tSr=i(Wl),yx=n(Wl,"P",{});var iQe=s(yx);aSr=r(iQe,"This class cannot be instantiated directly using "),t5e=n(iQe,"CODE",{});var QRt=s(t5e);nSr=r(QRt,"__init__()"),QRt.forEach(t),sSr=r(iQe," (throws an error)."),iQe.forEach(t),lSr=i(Wl),Gt=n(Wl,"DIV",{class:!0});var a7=s(Gt);T(xx.$$.fragment,a7),iSr=i(a7),a5e=n(a7,"P",{});var WRt=s(a5e);dSr=r(WRt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),WRt.forEach(t),cSr=i(a7),Nc=n(a7,"P",{});var nte=s(Nc);mSr=r(nte,`Note:
Loading a model from its configuration file does `),n5e=n(nte,"STRONG",{});var HRt=s(n5e);fSr=r(HRt,"not"),HRt.forEach(t),gSr=r(nte,` load the model weights. It only affects the
model\u2019s configuration. Use `),LK=n(nte,"A",{href:!0});var URt=s(LK);hSr=r(URt,"from_pretrained()"),URt.forEach(t),uSr=r(nte," to load the model weights."),nte.forEach(t),pSr=i(a7),T(e0.$$.fragment,a7),a7.forEach(t),_Sr=i(Wl),jr=n(Wl,"DIV",{class:!0});var Hl=s(jr);T($x.$$.fragment,Hl),bSr=i(Hl),s5e=n(Hl,"P",{});var JRt=s(s5e);vSr=r(JRt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),JRt.forEach(t),FSr=i(Hl),_n=n(Hl,"P",{});var n7=s(_n);TSr=r(n7,"The model class to instantiate is selected based on the "),l5e=n(n7,"CODE",{});var YRt=s(l5e);MSr=r(YRt,"model_type"),YRt.forEach(t),ESr=r(n7,` property of the config object (either
passed as an argument or loaded from `),i5e=n(n7,"CODE",{});var KRt=s(i5e);CSr=r(KRt,"pretrained_model_name_or_path"),KRt.forEach(t),wSr=r(n7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d5e=n(n7,"CODE",{});var ZRt=s(d5e);ASr=r(ZRt,"pretrained_model_name_or_path"),ZRt.forEach(t),LSr=r(n7,":"),n7.forEach(t),ySr=i(Hl),ce=n(Hl,"UL",{});var ge=s(ce);o0=n(ge,"LI",{});var Zje=s(o0);c5e=n(Zje,"STRONG",{});var ePt=s(c5e);xSr=r(ePt,"albert"),ePt.forEach(t),$Sr=r(Zje," \u2014 "),yK=n(Zje,"A",{href:!0});var oPt=s(yK);kSr=r(oPt,"TFAlbertForQuestionAnswering"),oPt.forEach(t),SSr=r(Zje," (ALBERT model)"),Zje.forEach(t),RSr=i(ge),r0=n(ge,"LI",{});var eDe=s(r0);m5e=n(eDe,"STRONG",{});var rPt=s(m5e);PSr=r(rPt,"bert"),rPt.forEach(t),BSr=r(eDe," \u2014 "),xK=n(eDe,"A",{href:!0});var tPt=s(xK);ISr=r(tPt,"TFBertForQuestionAnswering"),tPt.forEach(t),NSr=r(eDe," (BERT model)"),eDe.forEach(t),qSr=i(ge),t0=n(ge,"LI",{});var oDe=s(t0);f5e=n(oDe,"STRONG",{});var aPt=s(f5e);jSr=r(aPt,"camembert"),aPt.forEach(t),DSr=r(oDe," \u2014 "),$K=n(oDe,"A",{href:!0});var nPt=s($K);GSr=r(nPt,"TFCamembertForQuestionAnswering"),nPt.forEach(t),OSr=r(oDe," (CamemBERT model)"),oDe.forEach(t),VSr=i(ge),a0=n(ge,"LI",{});var rDe=s(a0);g5e=n(rDe,"STRONG",{});var sPt=s(g5e);XSr=r(sPt,"convbert"),sPt.forEach(t),zSr=r(rDe," \u2014 "),kK=n(rDe,"A",{href:!0});var lPt=s(kK);QSr=r(lPt,"TFConvBertForQuestionAnswering"),lPt.forEach(t),WSr=r(rDe," (ConvBERT model)"),rDe.forEach(t),HSr=i(ge),n0=n(ge,"LI",{});var tDe=s(n0);h5e=n(tDe,"STRONG",{});var iPt=s(h5e);USr=r(iPt,"deberta"),iPt.forEach(t),JSr=r(tDe," \u2014 "),SK=n(tDe,"A",{href:!0});var dPt=s(SK);YSr=r(dPt,"TFDebertaForQuestionAnswering"),dPt.forEach(t),KSr=r(tDe," (DeBERTa model)"),tDe.forEach(t),ZSr=i(ge),s0=n(ge,"LI",{});var aDe=s(s0);u5e=n(aDe,"STRONG",{});var cPt=s(u5e);eRr=r(cPt,"deberta-v2"),cPt.forEach(t),oRr=r(aDe," \u2014 "),RK=n(aDe,"A",{href:!0});var mPt=s(RK);rRr=r(mPt,"TFDebertaV2ForQuestionAnswering"),mPt.forEach(t),tRr=r(aDe," (DeBERTa-v2 model)"),aDe.forEach(t),aRr=i(ge),l0=n(ge,"LI",{});var nDe=s(l0);p5e=n(nDe,"STRONG",{});var fPt=s(p5e);nRr=r(fPt,"distilbert"),fPt.forEach(t),sRr=r(nDe," \u2014 "),PK=n(nDe,"A",{href:!0});var gPt=s(PK);lRr=r(gPt,"TFDistilBertForQuestionAnswering"),gPt.forEach(t),iRr=r(nDe," (DistilBERT model)"),nDe.forEach(t),dRr=i(ge),i0=n(ge,"LI",{});var sDe=s(i0);_5e=n(sDe,"STRONG",{});var hPt=s(_5e);cRr=r(hPt,"electra"),hPt.forEach(t),mRr=r(sDe," \u2014 "),BK=n(sDe,"A",{href:!0});var uPt=s(BK);fRr=r(uPt,"TFElectraForQuestionAnswering"),uPt.forEach(t),gRr=r(sDe," (ELECTRA model)"),sDe.forEach(t),hRr=i(ge),d0=n(ge,"LI",{});var lDe=s(d0);b5e=n(lDe,"STRONG",{});var pPt=s(b5e);uRr=r(pPt,"flaubert"),pPt.forEach(t),pRr=r(lDe," \u2014 "),IK=n(lDe,"A",{href:!0});var _Pt=s(IK);_Rr=r(_Pt,"TFFlaubertForQuestionAnsweringSimple"),_Pt.forEach(t),bRr=r(lDe," (FlauBERT model)"),lDe.forEach(t),vRr=i(ge),c0=n(ge,"LI",{});var iDe=s(c0);v5e=n(iDe,"STRONG",{});var bPt=s(v5e);FRr=r(bPt,"funnel"),bPt.forEach(t),TRr=r(iDe," \u2014 "),NK=n(iDe,"A",{href:!0});var vPt=s(NK);MRr=r(vPt,"TFFunnelForQuestionAnswering"),vPt.forEach(t),ERr=r(iDe," (Funnel Transformer model)"),iDe.forEach(t),CRr=i(ge),m0=n(ge,"LI",{});var dDe=s(m0);F5e=n(dDe,"STRONG",{});var FPt=s(F5e);wRr=r(FPt,"gptj"),FPt.forEach(t),ARr=r(dDe," \u2014 "),qK=n(dDe,"A",{href:!0});var TPt=s(qK);LRr=r(TPt,"TFGPTJForQuestionAnswering"),TPt.forEach(t),yRr=r(dDe," (GPT-J model)"),dDe.forEach(t),xRr=i(ge),f0=n(ge,"LI",{});var cDe=s(f0);T5e=n(cDe,"STRONG",{});var MPt=s(T5e);$Rr=r(MPt,"longformer"),MPt.forEach(t),kRr=r(cDe," \u2014 "),jK=n(cDe,"A",{href:!0});var EPt=s(jK);SRr=r(EPt,"TFLongformerForQuestionAnswering"),EPt.forEach(t),RRr=r(cDe," (Longformer model)"),cDe.forEach(t),PRr=i(ge),g0=n(ge,"LI",{});var mDe=s(g0);M5e=n(mDe,"STRONG",{});var CPt=s(M5e);BRr=r(CPt,"mobilebert"),CPt.forEach(t),IRr=r(mDe," \u2014 "),DK=n(mDe,"A",{href:!0});var wPt=s(DK);NRr=r(wPt,"TFMobileBertForQuestionAnswering"),wPt.forEach(t),qRr=r(mDe," (MobileBERT model)"),mDe.forEach(t),jRr=i(ge),h0=n(ge,"LI",{});var fDe=s(h0);E5e=n(fDe,"STRONG",{});var APt=s(E5e);DRr=r(APt,"mpnet"),APt.forEach(t),GRr=r(fDe," \u2014 "),GK=n(fDe,"A",{href:!0});var LPt=s(GK);ORr=r(LPt,"TFMPNetForQuestionAnswering"),LPt.forEach(t),VRr=r(fDe," (MPNet model)"),fDe.forEach(t),XRr=i(ge),u0=n(ge,"LI",{});var gDe=s(u0);C5e=n(gDe,"STRONG",{});var yPt=s(C5e);zRr=r(yPt,"rembert"),yPt.forEach(t),QRr=r(gDe," \u2014 "),OK=n(gDe,"A",{href:!0});var xPt=s(OK);WRr=r(xPt,"TFRemBertForQuestionAnswering"),xPt.forEach(t),HRr=r(gDe," (RemBERT model)"),gDe.forEach(t),URr=i(ge),p0=n(ge,"LI",{});var hDe=s(p0);w5e=n(hDe,"STRONG",{});var $Pt=s(w5e);JRr=r($Pt,"roberta"),$Pt.forEach(t),YRr=r(hDe," \u2014 "),VK=n(hDe,"A",{href:!0});var kPt=s(VK);KRr=r(kPt,"TFRobertaForQuestionAnswering"),kPt.forEach(t),ZRr=r(hDe," (RoBERTa model)"),hDe.forEach(t),ePr=i(ge),_0=n(ge,"LI",{});var uDe=s(_0);A5e=n(uDe,"STRONG",{});var SPt=s(A5e);oPr=r(SPt,"roformer"),SPt.forEach(t),rPr=r(uDe," \u2014 "),XK=n(uDe,"A",{href:!0});var RPt=s(XK);tPr=r(RPt,"TFRoFormerForQuestionAnswering"),RPt.forEach(t),aPr=r(uDe," (RoFormer model)"),uDe.forEach(t),nPr=i(ge),b0=n(ge,"LI",{});var pDe=s(b0);L5e=n(pDe,"STRONG",{});var PPt=s(L5e);sPr=r(PPt,"xlm"),PPt.forEach(t),lPr=r(pDe," \u2014 "),zK=n(pDe,"A",{href:!0});var BPt=s(zK);iPr=r(BPt,"TFXLMForQuestionAnsweringSimple"),BPt.forEach(t),dPr=r(pDe," (XLM model)"),pDe.forEach(t),cPr=i(ge),v0=n(ge,"LI",{});var _De=s(v0);y5e=n(_De,"STRONG",{});var IPt=s(y5e);mPr=r(IPt,"xlm-roberta"),IPt.forEach(t),fPr=r(_De," \u2014 "),QK=n(_De,"A",{href:!0});var NPt=s(QK);gPr=r(NPt,"TFXLMRobertaForQuestionAnswering"),NPt.forEach(t),hPr=r(_De," (XLM-RoBERTa model)"),_De.forEach(t),uPr=i(ge),F0=n(ge,"LI",{});var bDe=s(F0);x5e=n(bDe,"STRONG",{});var qPt=s(x5e);pPr=r(qPt,"xlnet"),qPt.forEach(t),_Pr=r(bDe," \u2014 "),WK=n(bDe,"A",{href:!0});var jPt=s(WK);bPr=r(jPt,"TFXLNetForQuestionAnsweringSimple"),jPt.forEach(t),vPr=r(bDe," (XLNet model)"),bDe.forEach(t),ge.forEach(t),FPr=i(Hl),T(T0.$$.fragment,Hl),Hl.forEach(t),Wl.forEach(t),eXe=i(m),qc=n(m,"H2",{class:!0});var dQe=s(qc);M0=n(dQe,"A",{id:!0,class:!0,href:!0});var DPt=s(M0);$5e=n(DPt,"SPAN",{});var GPt=s($5e);T(kx.$$.fragment,GPt),GPt.forEach(t),DPt.forEach(t),TPr=i(dQe),k5e=n(dQe,"SPAN",{});var OPt=s(k5e);MPr=r(OPt,"TFAutoModelForVision2Seq"),OPt.forEach(t),dQe.forEach(t),oXe=i(m),fr=n(m,"DIV",{class:!0});var Ul=s(fr);T(Sx.$$.fragment,Ul),EPr=i(Ul),jc=n(Ul,"P",{});var ste=s(jc);CPr=r(ste,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),HK=n(ste,"A",{href:!0});var VPt=s(HK);wPr=r(VPt,"from_pretrained()"),VPt.forEach(t),APr=r(ste," class method or the "),UK=n(ste,"A",{href:!0});var XPt=s(UK);LPr=r(XPt,"from_config()"),XPt.forEach(t),yPr=r(ste,` class
method.`),ste.forEach(t),xPr=i(Ul),Rx=n(Ul,"P",{});var cQe=s(Rx);$Pr=r(cQe,"This class cannot be instantiated directly using "),S5e=n(cQe,"CODE",{});var zPt=s(S5e);kPr=r(zPt,"__init__()"),zPt.forEach(t),SPr=r(cQe," (throws an error)."),cQe.forEach(t),RPr=i(Ul),Ot=n(Ul,"DIV",{class:!0});var s7=s(Ot);T(Px.$$.fragment,s7),PPr=i(s7),R5e=n(s7,"P",{});var QPt=s(R5e);BPr=r(QPt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),QPt.forEach(t),IPr=i(s7),Dc=n(s7,"P",{});var lte=s(Dc);NPr=r(lte,`Note:
Loading a model from its configuration file does `),P5e=n(lte,"STRONG",{});var WPt=s(P5e);qPr=r(WPt,"not"),WPt.forEach(t),jPr=r(lte,` load the model weights. It only affects the
model\u2019s configuration. Use `),JK=n(lte,"A",{href:!0});var HPt=s(JK);DPr=r(HPt,"from_pretrained()"),HPt.forEach(t),GPr=r(lte," to load the model weights."),lte.forEach(t),OPr=i(s7),T(E0.$$.fragment,s7),s7.forEach(t),VPr=i(Ul),Dr=n(Ul,"DIV",{class:!0});var Jl=s(Dr);T(Bx.$$.fragment,Jl),XPr=i(Jl),B5e=n(Jl,"P",{});var UPt=s(B5e);zPr=r(UPt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),UPt.forEach(t),QPr=i(Jl),bn=n(Jl,"P",{});var l7=s(bn);WPr=r(l7,"The model class to instantiate is selected based on the "),I5e=n(l7,"CODE",{});var JPt=s(I5e);HPr=r(JPt,"model_type"),JPt.forEach(t),UPr=r(l7,` property of the config object (either
passed as an argument or loaded from `),N5e=n(l7,"CODE",{});var YPt=s(N5e);JPr=r(YPt,"pretrained_model_name_or_path"),YPt.forEach(t),YPr=r(l7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q5e=n(l7,"CODE",{});var KPt=s(q5e);KPr=r(KPt,"pretrained_model_name_or_path"),KPt.forEach(t),ZPr=r(l7,":"),l7.forEach(t),eBr=i(Jl),j5e=n(Jl,"UL",{});var ZPt=s(j5e);C0=n(ZPt,"LI",{});var vDe=s(C0);D5e=n(vDe,"STRONG",{});var eBt=s(D5e);oBr=r(eBt,"vision-encoder-decoder"),eBt.forEach(t),rBr=r(vDe," \u2014 "),YK=n(vDe,"A",{href:!0});var oBt=s(YK);tBr=r(oBt,"TFVisionEncoderDecoderModel"),oBt.forEach(t),aBr=r(vDe," (Vision Encoder decoder model)"),vDe.forEach(t),ZPt.forEach(t),nBr=i(Jl),T(w0.$$.fragment,Jl),Jl.forEach(t),Ul.forEach(t),rXe=i(m),Gc=n(m,"H2",{class:!0});var mQe=s(Gc);A0=n(mQe,"A",{id:!0,class:!0,href:!0});var rBt=s(A0);G5e=n(rBt,"SPAN",{});var tBt=s(G5e);T(Ix.$$.fragment,tBt),tBt.forEach(t),rBt.forEach(t),sBr=i(mQe),O5e=n(mQe,"SPAN",{});var aBt=s(O5e);lBr=r(aBt,"TFAutoModelForSpeechSeq2Seq"),aBt.forEach(t),mQe.forEach(t),tXe=i(m),gr=n(m,"DIV",{class:!0});var Yl=s(gr);T(Nx.$$.fragment,Yl),iBr=i(Yl),Oc=n(Yl,"P",{});var ite=s(Oc);dBr=r(ite,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),KK=n(ite,"A",{href:!0});var nBt=s(KK);cBr=r(nBt,"from_pretrained()"),nBt.forEach(t),mBr=r(ite," class method or the "),ZK=n(ite,"A",{href:!0});var sBt=s(ZK);fBr=r(sBt,"from_config()"),sBt.forEach(t),gBr=r(ite,` class
method.`),ite.forEach(t),hBr=i(Yl),qx=n(Yl,"P",{});var fQe=s(qx);uBr=r(fQe,"This class cannot be instantiated directly using "),V5e=n(fQe,"CODE",{});var lBt=s(V5e);pBr=r(lBt,"__init__()"),lBt.forEach(t),_Br=r(fQe," (throws an error)."),fQe.forEach(t),bBr=i(Yl),Vt=n(Yl,"DIV",{class:!0});var i7=s(Vt);T(jx.$$.fragment,i7),vBr=i(i7),X5e=n(i7,"P",{});var iBt=s(X5e);FBr=r(iBt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),iBt.forEach(t),TBr=i(i7),Vc=n(i7,"P",{});var dte=s(Vc);MBr=r(dte,`Note:
Loading a model from its configuration file does `),z5e=n(dte,"STRONG",{});var dBt=s(z5e);EBr=r(dBt,"not"),dBt.forEach(t),CBr=r(dte,` load the model weights. It only affects the
model\u2019s configuration. Use `),eZ=n(dte,"A",{href:!0});var cBt=s(eZ);wBr=r(cBt,"from_pretrained()"),cBt.forEach(t),ABr=r(dte," to load the model weights."),dte.forEach(t),LBr=i(i7),T(L0.$$.fragment,i7),i7.forEach(t),yBr=i(Yl),Gr=n(Yl,"DIV",{class:!0});var Kl=s(Gr);T(Dx.$$.fragment,Kl),xBr=i(Kl),Q5e=n(Kl,"P",{});var mBt=s(Q5e);$Br=r(mBt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),mBt.forEach(t),kBr=i(Kl),vn=n(Kl,"P",{});var d7=s(vn);SBr=r(d7,"The model class to instantiate is selected based on the "),W5e=n(d7,"CODE",{});var fBt=s(W5e);RBr=r(fBt,"model_type"),fBt.forEach(t),PBr=r(d7,` property of the config object (either
passed as an argument or loaded from `),H5e=n(d7,"CODE",{});var gBt=s(H5e);BBr=r(gBt,"pretrained_model_name_or_path"),gBt.forEach(t),IBr=r(d7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),U5e=n(d7,"CODE",{});var hBt=s(U5e);NBr=r(hBt,"pretrained_model_name_or_path"),hBt.forEach(t),qBr=r(d7,":"),d7.forEach(t),jBr=i(Kl),J5e=n(Kl,"UL",{});var uBt=s(J5e);y0=n(uBt,"LI",{});var FDe=s(y0);Y5e=n(FDe,"STRONG",{});var pBt=s(Y5e);DBr=r(pBt,"speech_to_text"),pBt.forEach(t),GBr=r(FDe," \u2014 "),oZ=n(FDe,"A",{href:!0});var _Bt=s(oZ);OBr=r(_Bt,"TFSpeech2TextForConditionalGeneration"),_Bt.forEach(t),VBr=r(FDe," (Speech2Text model)"),FDe.forEach(t),uBt.forEach(t),XBr=i(Kl),T(x0.$$.fragment,Kl),Kl.forEach(t),Yl.forEach(t),aXe=i(m),Xc=n(m,"H2",{class:!0});var gQe=s(Xc);$0=n(gQe,"A",{id:!0,class:!0,href:!0});var bBt=s($0);K5e=n(bBt,"SPAN",{});var vBt=s(K5e);T(Gx.$$.fragment,vBt),vBt.forEach(t),bBt.forEach(t),zBr=i(gQe),Z5e=n(gQe,"SPAN",{});var FBt=s(Z5e);QBr=r(FBt,"FlaxAutoModel"),FBt.forEach(t),gQe.forEach(t),nXe=i(m),hr=n(m,"DIV",{class:!0});var Zl=s(hr);T(Ox.$$.fragment,Zl),WBr=i(Zl),zc=n(Zl,"P",{});var cte=s(zc);HBr=r(cte,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),rZ=n(cte,"A",{href:!0});var TBt=s(rZ);UBr=r(TBt,"from_pretrained()"),TBt.forEach(t),JBr=r(cte," class method or the "),tZ=n(cte,"A",{href:!0});var MBt=s(tZ);YBr=r(MBt,"from_config()"),MBt.forEach(t),KBr=r(cte,` class
method.`),cte.forEach(t),ZBr=i(Zl),Vx=n(Zl,"P",{});var hQe=s(Vx);eIr=r(hQe,"This class cannot be instantiated directly using "),e3e=n(hQe,"CODE",{});var EBt=s(e3e);oIr=r(EBt,"__init__()"),EBt.forEach(t),rIr=r(hQe," (throws an error)."),hQe.forEach(t),tIr=i(Zl),Xt=n(Zl,"DIV",{class:!0});var c7=s(Xt);T(Xx.$$.fragment,c7),aIr=i(c7),o3e=n(c7,"P",{});var CBt=s(o3e);nIr=r(CBt,"Instantiates one of the base model classes of the library from a configuration."),CBt.forEach(t),sIr=i(c7),Qc=n(c7,"P",{});var mte=s(Qc);lIr=r(mte,`Note:
Loading a model from its configuration file does `),r3e=n(mte,"STRONG",{});var wBt=s(r3e);iIr=r(wBt,"not"),wBt.forEach(t),dIr=r(mte,` load the model weights. It only affects the
model\u2019s configuration. Use `),aZ=n(mte,"A",{href:!0});var ABt=s(aZ);cIr=r(ABt,"from_pretrained()"),ABt.forEach(t),mIr=r(mte," to load the model weights."),mte.forEach(t),fIr=i(c7),T(k0.$$.fragment,c7),c7.forEach(t),gIr=i(Zl),Or=n(Zl,"DIV",{class:!0});var ei=s(Or);T(zx.$$.fragment,ei),hIr=i(ei),t3e=n(ei,"P",{});var LBt=s(t3e);uIr=r(LBt,"Instantiate one of the base model classes of the library from a pretrained model."),LBt.forEach(t),pIr=i(ei),Fn=n(ei,"P",{});var m7=s(Fn);_Ir=r(m7,"The model class to instantiate is selected based on the "),a3e=n(m7,"CODE",{});var yBt=s(a3e);bIr=r(yBt,"model_type"),yBt.forEach(t),vIr=r(m7,` property of the config object (either
passed as an argument or loaded from `),n3e=n(m7,"CODE",{});var xBt=s(n3e);FIr=r(xBt,"pretrained_model_name_or_path"),xBt.forEach(t),TIr=r(m7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s3e=n(m7,"CODE",{});var $Bt=s(s3e);MIr=r($Bt,"pretrained_model_name_or_path"),$Bt.forEach(t),EIr=r(m7,":"),m7.forEach(t),CIr=i(ei),oe=n(ei,"UL",{});var ae=s(oe);S0=n(ae,"LI",{});var TDe=s(S0);l3e=n(TDe,"STRONG",{});var kBt=s(l3e);wIr=r(kBt,"albert"),kBt.forEach(t),AIr=r(TDe," \u2014 "),nZ=n(TDe,"A",{href:!0});var SBt=s(nZ);LIr=r(SBt,"FlaxAlbertModel"),SBt.forEach(t),yIr=r(TDe," (ALBERT model)"),TDe.forEach(t),xIr=i(ae),R0=n(ae,"LI",{});var MDe=s(R0);i3e=n(MDe,"STRONG",{});var RBt=s(i3e);$Ir=r(RBt,"bart"),RBt.forEach(t),kIr=r(MDe," \u2014 "),sZ=n(MDe,"A",{href:!0});var PBt=s(sZ);SIr=r(PBt,"FlaxBartModel"),PBt.forEach(t),RIr=r(MDe," (BART model)"),MDe.forEach(t),PIr=i(ae),P0=n(ae,"LI",{});var EDe=s(P0);d3e=n(EDe,"STRONG",{});var BBt=s(d3e);BIr=r(BBt,"beit"),BBt.forEach(t),IIr=r(EDe," \u2014 "),lZ=n(EDe,"A",{href:!0});var IBt=s(lZ);NIr=r(IBt,"FlaxBeitModel"),IBt.forEach(t),qIr=r(EDe," (BEiT model)"),EDe.forEach(t),jIr=i(ae),B0=n(ae,"LI",{});var CDe=s(B0);c3e=n(CDe,"STRONG",{});var NBt=s(c3e);DIr=r(NBt,"bert"),NBt.forEach(t),GIr=r(CDe," \u2014 "),iZ=n(CDe,"A",{href:!0});var qBt=s(iZ);OIr=r(qBt,"FlaxBertModel"),qBt.forEach(t),VIr=r(CDe," (BERT model)"),CDe.forEach(t),XIr=i(ae),I0=n(ae,"LI",{});var wDe=s(I0);m3e=n(wDe,"STRONG",{});var jBt=s(m3e);zIr=r(jBt,"big_bird"),jBt.forEach(t),QIr=r(wDe," \u2014 "),dZ=n(wDe,"A",{href:!0});var DBt=s(dZ);WIr=r(DBt,"FlaxBigBirdModel"),DBt.forEach(t),HIr=r(wDe," (BigBird model)"),wDe.forEach(t),UIr=i(ae),N0=n(ae,"LI",{});var ADe=s(N0);f3e=n(ADe,"STRONG",{});var GBt=s(f3e);JIr=r(GBt,"blenderbot"),GBt.forEach(t),YIr=r(ADe," \u2014 "),cZ=n(ADe,"A",{href:!0});var OBt=s(cZ);KIr=r(OBt,"FlaxBlenderbotModel"),OBt.forEach(t),ZIr=r(ADe," (Blenderbot model)"),ADe.forEach(t),eNr=i(ae),q0=n(ae,"LI",{});var LDe=s(q0);g3e=n(LDe,"STRONG",{});var VBt=s(g3e);oNr=r(VBt,"blenderbot-small"),VBt.forEach(t),rNr=r(LDe," \u2014 "),mZ=n(LDe,"A",{href:!0});var XBt=s(mZ);tNr=r(XBt,"FlaxBlenderbotSmallModel"),XBt.forEach(t),aNr=r(LDe," (BlenderbotSmall model)"),LDe.forEach(t),nNr=i(ae),j0=n(ae,"LI",{});var yDe=s(j0);h3e=n(yDe,"STRONG",{});var zBt=s(h3e);sNr=r(zBt,"clip"),zBt.forEach(t),lNr=r(yDe," \u2014 "),fZ=n(yDe,"A",{href:!0});var QBt=s(fZ);iNr=r(QBt,"FlaxCLIPModel"),QBt.forEach(t),dNr=r(yDe," (CLIP model)"),yDe.forEach(t),cNr=i(ae),D0=n(ae,"LI",{});var xDe=s(D0);u3e=n(xDe,"STRONG",{});var WBt=s(u3e);mNr=r(WBt,"distilbert"),WBt.forEach(t),fNr=r(xDe," \u2014 "),gZ=n(xDe,"A",{href:!0});var HBt=s(gZ);gNr=r(HBt,"FlaxDistilBertModel"),HBt.forEach(t),hNr=r(xDe," (DistilBERT model)"),xDe.forEach(t),uNr=i(ae),G0=n(ae,"LI",{});var $De=s(G0);p3e=n($De,"STRONG",{});var UBt=s(p3e);pNr=r(UBt,"electra"),UBt.forEach(t),_Nr=r($De," \u2014 "),hZ=n($De,"A",{href:!0});var JBt=s(hZ);bNr=r(JBt,"FlaxElectraModel"),JBt.forEach(t),vNr=r($De," (ELECTRA model)"),$De.forEach(t),FNr=i(ae),O0=n(ae,"LI",{});var kDe=s(O0);_3e=n(kDe,"STRONG",{});var YBt=s(_3e);TNr=r(YBt,"gpt2"),YBt.forEach(t),MNr=r(kDe," \u2014 "),uZ=n(kDe,"A",{href:!0});var KBt=s(uZ);ENr=r(KBt,"FlaxGPT2Model"),KBt.forEach(t),CNr=r(kDe," (OpenAI GPT-2 model)"),kDe.forEach(t),wNr=i(ae),V0=n(ae,"LI",{});var SDe=s(V0);b3e=n(SDe,"STRONG",{});var ZBt=s(b3e);ANr=r(ZBt,"gpt_neo"),ZBt.forEach(t),LNr=r(SDe," \u2014 "),pZ=n(SDe,"A",{href:!0});var eIt=s(pZ);yNr=r(eIt,"FlaxGPTNeoModel"),eIt.forEach(t),xNr=r(SDe," (GPT Neo model)"),SDe.forEach(t),$Nr=i(ae),X0=n(ae,"LI",{});var RDe=s(X0);v3e=n(RDe,"STRONG",{});var oIt=s(v3e);kNr=r(oIt,"gptj"),oIt.forEach(t),SNr=r(RDe," \u2014 "),_Z=n(RDe,"A",{href:!0});var rIt=s(_Z);RNr=r(rIt,"FlaxGPTJModel"),rIt.forEach(t),PNr=r(RDe," (GPT-J model)"),RDe.forEach(t),BNr=i(ae),z0=n(ae,"LI",{});var PDe=s(z0);F3e=n(PDe,"STRONG",{});var tIt=s(F3e);INr=r(tIt,"longt5"),tIt.forEach(t),NNr=r(PDe," \u2014 "),bZ=n(PDe,"A",{href:!0});var aIt=s(bZ);qNr=r(aIt,"FlaxLongT5Model"),aIt.forEach(t),jNr=r(PDe," (LongT5 model)"),PDe.forEach(t),DNr=i(ae),Q0=n(ae,"LI",{});var BDe=s(Q0);T3e=n(BDe,"STRONG",{});var nIt=s(T3e);GNr=r(nIt,"marian"),nIt.forEach(t),ONr=r(BDe," \u2014 "),vZ=n(BDe,"A",{href:!0});var sIt=s(vZ);VNr=r(sIt,"FlaxMarianModel"),sIt.forEach(t),XNr=r(BDe," (Marian model)"),BDe.forEach(t),zNr=i(ae),W0=n(ae,"LI",{});var IDe=s(W0);M3e=n(IDe,"STRONG",{});var lIt=s(M3e);QNr=r(lIt,"mbart"),lIt.forEach(t),WNr=r(IDe," \u2014 "),FZ=n(IDe,"A",{href:!0});var iIt=s(FZ);HNr=r(iIt,"FlaxMBartModel"),iIt.forEach(t),UNr=r(IDe," (mBART model)"),IDe.forEach(t),JNr=i(ae),H0=n(ae,"LI",{});var NDe=s(H0);E3e=n(NDe,"STRONG",{});var dIt=s(E3e);YNr=r(dIt,"mt5"),dIt.forEach(t),KNr=r(NDe," \u2014 "),TZ=n(NDe,"A",{href:!0});var cIt=s(TZ);ZNr=r(cIt,"FlaxMT5Model"),cIt.forEach(t),eqr=r(NDe," (MT5 model)"),NDe.forEach(t),oqr=i(ae),U0=n(ae,"LI",{});var qDe=s(U0);C3e=n(qDe,"STRONG",{});var mIt=s(C3e);rqr=r(mIt,"opt"),mIt.forEach(t),tqr=r(qDe," \u2014 "),MZ=n(qDe,"A",{href:!0});var fIt=s(MZ);aqr=r(fIt,"FlaxOPTModel"),fIt.forEach(t),nqr=r(qDe," (OPT model)"),qDe.forEach(t),sqr=i(ae),J0=n(ae,"LI",{});var jDe=s(J0);w3e=n(jDe,"STRONG",{});var gIt=s(w3e);lqr=r(gIt,"pegasus"),gIt.forEach(t),iqr=r(jDe," \u2014 "),EZ=n(jDe,"A",{href:!0});var hIt=s(EZ);dqr=r(hIt,"FlaxPegasusModel"),hIt.forEach(t),cqr=r(jDe," (Pegasus model)"),jDe.forEach(t),mqr=i(ae),Y0=n(ae,"LI",{});var DDe=s(Y0);A3e=n(DDe,"STRONG",{});var uIt=s(A3e);fqr=r(uIt,"roberta"),uIt.forEach(t),gqr=r(DDe," \u2014 "),CZ=n(DDe,"A",{href:!0});var pIt=s(CZ);hqr=r(pIt,"FlaxRobertaModel"),pIt.forEach(t),uqr=r(DDe," (RoBERTa model)"),DDe.forEach(t),pqr=i(ae),K0=n(ae,"LI",{});var GDe=s(K0);L3e=n(GDe,"STRONG",{});var _It=s(L3e);_qr=r(_It,"roformer"),_It.forEach(t),bqr=r(GDe," \u2014 "),wZ=n(GDe,"A",{href:!0});var bIt=s(wZ);vqr=r(bIt,"FlaxRoFormerModel"),bIt.forEach(t),Fqr=r(GDe," (RoFormer model)"),GDe.forEach(t),Tqr=i(ae),Z0=n(ae,"LI",{});var ODe=s(Z0);y3e=n(ODe,"STRONG",{});var vIt=s(y3e);Mqr=r(vIt,"t5"),vIt.forEach(t),Eqr=r(ODe," \u2014 "),AZ=n(ODe,"A",{href:!0});var FIt=s(AZ);Cqr=r(FIt,"FlaxT5Model"),FIt.forEach(t),wqr=r(ODe," (T5 model)"),ODe.forEach(t),Aqr=i(ae),ew=n(ae,"LI",{});var VDe=s(ew);x3e=n(VDe,"STRONG",{});var TIt=s(x3e);Lqr=r(TIt,"vision-text-dual-encoder"),TIt.forEach(t),yqr=r(VDe," \u2014 "),LZ=n(VDe,"A",{href:!0});var MIt=s(LZ);xqr=r(MIt,"FlaxVisionTextDualEncoderModel"),MIt.forEach(t),$qr=r(VDe," (VisionTextDualEncoder model)"),VDe.forEach(t),kqr=i(ae),ow=n(ae,"LI",{});var XDe=s(ow);$3e=n(XDe,"STRONG",{});var EIt=s($3e);Sqr=r(EIt,"vit"),EIt.forEach(t),Rqr=r(XDe," \u2014 "),yZ=n(XDe,"A",{href:!0});var CIt=s(yZ);Pqr=r(CIt,"FlaxViTModel"),CIt.forEach(t),Bqr=r(XDe," (ViT model)"),XDe.forEach(t),Iqr=i(ae),rw=n(ae,"LI",{});var zDe=s(rw);k3e=n(zDe,"STRONG",{});var wIt=s(k3e);Nqr=r(wIt,"wav2vec2"),wIt.forEach(t),qqr=r(zDe," \u2014 "),xZ=n(zDe,"A",{href:!0});var AIt=s(xZ);jqr=r(AIt,"FlaxWav2Vec2Model"),AIt.forEach(t),Dqr=r(zDe," (Wav2Vec2 model)"),zDe.forEach(t),Gqr=i(ae),tw=n(ae,"LI",{});var QDe=s(tw);S3e=n(QDe,"STRONG",{});var LIt=s(S3e);Oqr=r(LIt,"xglm"),LIt.forEach(t),Vqr=r(QDe," \u2014 "),$Z=n(QDe,"A",{href:!0});var yIt=s($Z);Xqr=r(yIt,"FlaxXGLMModel"),yIt.forEach(t),zqr=r(QDe," (XGLM model)"),QDe.forEach(t),Qqr=i(ae),aw=n(ae,"LI",{});var WDe=s(aw);R3e=n(WDe,"STRONG",{});var xIt=s(R3e);Wqr=r(xIt,"xlm-roberta"),xIt.forEach(t),Hqr=r(WDe," \u2014 "),kZ=n(WDe,"A",{href:!0});var $It=s(kZ);Uqr=r($It,"FlaxXLMRobertaModel"),$It.forEach(t),Jqr=r(WDe," (XLM-RoBERTa model)"),WDe.forEach(t),ae.forEach(t),Yqr=i(ei),T(nw.$$.fragment,ei),ei.forEach(t),Zl.forEach(t),sXe=i(m),Wc=n(m,"H2",{class:!0});var uQe=s(Wc);sw=n(uQe,"A",{id:!0,class:!0,href:!0});var kIt=s(sw);P3e=n(kIt,"SPAN",{});var SIt=s(P3e);T(Qx.$$.fragment,SIt),SIt.forEach(t),kIt.forEach(t),Kqr=i(uQe),B3e=n(uQe,"SPAN",{});var RIt=s(B3e);Zqr=r(RIt,"FlaxAutoModelForCausalLM"),RIt.forEach(t),uQe.forEach(t),lXe=i(m),ur=n(m,"DIV",{class:!0});var oi=s(ur);T(Wx.$$.fragment,oi),ejr=i(oi),Hc=n(oi,"P",{});var fte=s(Hc);ojr=r(fte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),SZ=n(fte,"A",{href:!0});var PIt=s(SZ);rjr=r(PIt,"from_pretrained()"),PIt.forEach(t),tjr=r(fte," class method or the "),RZ=n(fte,"A",{href:!0});var BIt=s(RZ);ajr=r(BIt,"from_config()"),BIt.forEach(t),njr=r(fte,` class
method.`),fte.forEach(t),sjr=i(oi),Hx=n(oi,"P",{});var pQe=s(Hx);ljr=r(pQe,"This class cannot be instantiated directly using "),I3e=n(pQe,"CODE",{});var IIt=s(I3e);ijr=r(IIt,"__init__()"),IIt.forEach(t),djr=r(pQe," (throws an error)."),pQe.forEach(t),cjr=i(oi),zt=n(oi,"DIV",{class:!0});var f7=s(zt);T(Ux.$$.fragment,f7),mjr=i(f7),N3e=n(f7,"P",{});var NIt=s(N3e);fjr=r(NIt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),NIt.forEach(t),gjr=i(f7),Uc=n(f7,"P",{});var gte=s(Uc);hjr=r(gte,`Note:
Loading a model from its configuration file does `),q3e=n(gte,"STRONG",{});var qIt=s(q3e);ujr=r(qIt,"not"),qIt.forEach(t),pjr=r(gte,` load the model weights. It only affects the
model\u2019s configuration. Use `),PZ=n(gte,"A",{href:!0});var jIt=s(PZ);_jr=r(jIt,"from_pretrained()"),jIt.forEach(t),bjr=r(gte," to load the model weights."),gte.forEach(t),vjr=i(f7),T(lw.$$.fragment,f7),f7.forEach(t),Fjr=i(oi),Vr=n(oi,"DIV",{class:!0});var ri=s(Vr);T(Jx.$$.fragment,ri),Tjr=i(ri),j3e=n(ri,"P",{});var DIt=s(j3e);Mjr=r(DIt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),DIt.forEach(t),Ejr=i(ri),Tn=n(ri,"P",{});var g7=s(Tn);Cjr=r(g7,"The model class to instantiate is selected based on the "),D3e=n(g7,"CODE",{});var GIt=s(D3e);wjr=r(GIt,"model_type"),GIt.forEach(t),Ajr=r(g7,` property of the config object (either
passed as an argument or loaded from `),G3e=n(g7,"CODE",{});var OIt=s(G3e);Ljr=r(OIt,"pretrained_model_name_or_path"),OIt.forEach(t),yjr=r(g7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O3e=n(g7,"CODE",{});var VIt=s(O3e);xjr=r(VIt,"pretrained_model_name_or_path"),VIt.forEach(t),$jr=r(g7,":"),g7.forEach(t),kjr=i(ri),xe=n(ri,"UL",{});var Ne=s(xe);iw=n(Ne,"LI",{});var HDe=s(iw);V3e=n(HDe,"STRONG",{});var XIt=s(V3e);Sjr=r(XIt,"bart"),XIt.forEach(t),Rjr=r(HDe," \u2014 "),BZ=n(HDe,"A",{href:!0});var zIt=s(BZ);Pjr=r(zIt,"FlaxBartForCausalLM"),zIt.forEach(t),Bjr=r(HDe," (BART model)"),HDe.forEach(t),Ijr=i(Ne),dw=n(Ne,"LI",{});var UDe=s(dw);X3e=n(UDe,"STRONG",{});var QIt=s(X3e);Njr=r(QIt,"bert"),QIt.forEach(t),qjr=r(UDe," \u2014 "),IZ=n(UDe,"A",{href:!0});var WIt=s(IZ);jjr=r(WIt,"FlaxBertForCausalLM"),WIt.forEach(t),Djr=r(UDe," (BERT model)"),UDe.forEach(t),Gjr=i(Ne),cw=n(Ne,"LI",{});var JDe=s(cw);z3e=n(JDe,"STRONG",{});var HIt=s(z3e);Ojr=r(HIt,"big_bird"),HIt.forEach(t),Vjr=r(JDe," \u2014 "),NZ=n(JDe,"A",{href:!0});var UIt=s(NZ);Xjr=r(UIt,"FlaxBigBirdForCausalLM"),UIt.forEach(t),zjr=r(JDe," (BigBird model)"),JDe.forEach(t),Qjr=i(Ne),mw=n(Ne,"LI",{});var YDe=s(mw);Q3e=n(YDe,"STRONG",{});var JIt=s(Q3e);Wjr=r(JIt,"electra"),JIt.forEach(t),Hjr=r(YDe," \u2014 "),qZ=n(YDe,"A",{href:!0});var YIt=s(qZ);Ujr=r(YIt,"FlaxElectraForCausalLM"),YIt.forEach(t),Jjr=r(YDe," (ELECTRA model)"),YDe.forEach(t),Yjr=i(Ne),fw=n(Ne,"LI",{});var KDe=s(fw);W3e=n(KDe,"STRONG",{});var KIt=s(W3e);Kjr=r(KIt,"gpt2"),KIt.forEach(t),Zjr=r(KDe," \u2014 "),jZ=n(KDe,"A",{href:!0});var ZIt=s(jZ);eDr=r(ZIt,"FlaxGPT2LMHeadModel"),ZIt.forEach(t),oDr=r(KDe," (OpenAI GPT-2 model)"),KDe.forEach(t),rDr=i(Ne),gw=n(Ne,"LI",{});var ZDe=s(gw);H3e=n(ZDe,"STRONG",{});var eNt=s(H3e);tDr=r(eNt,"gpt_neo"),eNt.forEach(t),aDr=r(ZDe," \u2014 "),DZ=n(ZDe,"A",{href:!0});var oNt=s(DZ);nDr=r(oNt,"FlaxGPTNeoForCausalLM"),oNt.forEach(t),sDr=r(ZDe," (GPT Neo model)"),ZDe.forEach(t),lDr=i(Ne),hw=n(Ne,"LI",{});var eGe=s(hw);U3e=n(eGe,"STRONG",{});var rNt=s(U3e);iDr=r(rNt,"gptj"),rNt.forEach(t),dDr=r(eGe," \u2014 "),GZ=n(eGe,"A",{href:!0});var tNt=s(GZ);cDr=r(tNt,"FlaxGPTJForCausalLM"),tNt.forEach(t),mDr=r(eGe," (GPT-J model)"),eGe.forEach(t),fDr=i(Ne),uw=n(Ne,"LI",{});var oGe=s(uw);J3e=n(oGe,"STRONG",{});var aNt=s(J3e);gDr=r(aNt,"opt"),aNt.forEach(t),hDr=r(oGe," \u2014 "),OZ=n(oGe,"A",{href:!0});var nNt=s(OZ);uDr=r(nNt,"FlaxOPTForCausalLM"),nNt.forEach(t),pDr=r(oGe," (OPT model)"),oGe.forEach(t),_Dr=i(Ne),pw=n(Ne,"LI",{});var rGe=s(pw);Y3e=n(rGe,"STRONG",{});var sNt=s(Y3e);bDr=r(sNt,"roberta"),sNt.forEach(t),vDr=r(rGe," \u2014 "),VZ=n(rGe,"A",{href:!0});var lNt=s(VZ);FDr=r(lNt,"FlaxRobertaForCausalLM"),lNt.forEach(t),TDr=r(rGe," (RoBERTa model)"),rGe.forEach(t),MDr=i(Ne),_w=n(Ne,"LI",{});var tGe=s(_w);K3e=n(tGe,"STRONG",{});var iNt=s(K3e);EDr=r(iNt,"xglm"),iNt.forEach(t),CDr=r(tGe," \u2014 "),XZ=n(tGe,"A",{href:!0});var dNt=s(XZ);wDr=r(dNt,"FlaxXGLMForCausalLM"),dNt.forEach(t),ADr=r(tGe," (XGLM model)"),tGe.forEach(t),Ne.forEach(t),LDr=i(ri),T(bw.$$.fragment,ri),ri.forEach(t),oi.forEach(t),iXe=i(m),Jc=n(m,"H2",{class:!0});var _Qe=s(Jc);vw=n(_Qe,"A",{id:!0,class:!0,href:!0});var cNt=s(vw);Z3e=n(cNt,"SPAN",{});var mNt=s(Z3e);T(Yx.$$.fragment,mNt),mNt.forEach(t),cNt.forEach(t),yDr=i(_Qe),e0e=n(_Qe,"SPAN",{});var fNt=s(e0e);xDr=r(fNt,"FlaxAutoModelForPreTraining"),fNt.forEach(t),_Qe.forEach(t),dXe=i(m),pr=n(m,"DIV",{class:!0});var ti=s(pr);T(Kx.$$.fragment,ti),$Dr=i(ti),Yc=n(ti,"P",{});var hte=s(Yc);kDr=r(hte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),zZ=n(hte,"A",{href:!0});var gNt=s(zZ);SDr=r(gNt,"from_pretrained()"),gNt.forEach(t),RDr=r(hte," class method or the "),QZ=n(hte,"A",{href:!0});var hNt=s(QZ);PDr=r(hNt,"from_config()"),hNt.forEach(t),BDr=r(hte,` class
method.`),hte.forEach(t),IDr=i(ti),Zx=n(ti,"P",{});var bQe=s(Zx);NDr=r(bQe,"This class cannot be instantiated directly using "),o0e=n(bQe,"CODE",{});var uNt=s(o0e);qDr=r(uNt,"__init__()"),uNt.forEach(t),jDr=r(bQe," (throws an error)."),bQe.forEach(t),DDr=i(ti),Qt=n(ti,"DIV",{class:!0});var h7=s(Qt);T(e$.$$.fragment,h7),GDr=i(h7),r0e=n(h7,"P",{});var pNt=s(r0e);ODr=r(pNt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),pNt.forEach(t),VDr=i(h7),Kc=n(h7,"P",{});var ute=s(Kc);XDr=r(ute,`Note:
Loading a model from its configuration file does `),t0e=n(ute,"STRONG",{});var _Nt=s(t0e);zDr=r(_Nt,"not"),_Nt.forEach(t),QDr=r(ute,` load the model weights. It only affects the
model\u2019s configuration. Use `),WZ=n(ute,"A",{href:!0});var bNt=s(WZ);WDr=r(bNt,"from_pretrained()"),bNt.forEach(t),HDr=r(ute," to load the model weights."),ute.forEach(t),UDr=i(h7),T(Fw.$$.fragment,h7),h7.forEach(t),JDr=i(ti),Xr=n(ti,"DIV",{class:!0});var ai=s(Xr);T(o$.$$.fragment,ai),YDr=i(ai),a0e=n(ai,"P",{});var vNt=s(a0e);KDr=r(vNt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),vNt.forEach(t),ZDr=i(ai),Mn=n(ai,"P",{});var u7=s(Mn);eGr=r(u7,"The model class to instantiate is selected based on the "),n0e=n(u7,"CODE",{});var FNt=s(n0e);oGr=r(FNt,"model_type"),FNt.forEach(t),rGr=r(u7,` property of the config object (either
passed as an argument or loaded from `),s0e=n(u7,"CODE",{});var TNt=s(s0e);tGr=r(TNt,"pretrained_model_name_or_path"),TNt.forEach(t),aGr=r(u7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l0e=n(u7,"CODE",{});var MNt=s(l0e);nGr=r(MNt,"pretrained_model_name_or_path"),MNt.forEach(t),sGr=r(u7,":"),u7.forEach(t),lGr=i(ai),Ee=n(ai,"UL",{});var we=s(Ee);Tw=n(we,"LI",{});var aGe=s(Tw);i0e=n(aGe,"STRONG",{});var ENt=s(i0e);iGr=r(ENt,"albert"),ENt.forEach(t),dGr=r(aGe," \u2014 "),HZ=n(aGe,"A",{href:!0});var CNt=s(HZ);cGr=r(CNt,"FlaxAlbertForPreTraining"),CNt.forEach(t),mGr=r(aGe," (ALBERT model)"),aGe.forEach(t),fGr=i(we),Mw=n(we,"LI",{});var nGe=s(Mw);d0e=n(nGe,"STRONG",{});var wNt=s(d0e);gGr=r(wNt,"bart"),wNt.forEach(t),hGr=r(nGe," \u2014 "),UZ=n(nGe,"A",{href:!0});var ANt=s(UZ);uGr=r(ANt,"FlaxBartForConditionalGeneration"),ANt.forEach(t),pGr=r(nGe," (BART model)"),nGe.forEach(t),_Gr=i(we),Ew=n(we,"LI",{});var sGe=s(Ew);c0e=n(sGe,"STRONG",{});var LNt=s(c0e);bGr=r(LNt,"bert"),LNt.forEach(t),vGr=r(sGe," \u2014 "),JZ=n(sGe,"A",{href:!0});var yNt=s(JZ);FGr=r(yNt,"FlaxBertForPreTraining"),yNt.forEach(t),TGr=r(sGe," (BERT model)"),sGe.forEach(t),MGr=i(we),Cw=n(we,"LI",{});var lGe=s(Cw);m0e=n(lGe,"STRONG",{});var xNt=s(m0e);EGr=r(xNt,"big_bird"),xNt.forEach(t),CGr=r(lGe," \u2014 "),YZ=n(lGe,"A",{href:!0});var $Nt=s(YZ);wGr=r($Nt,"FlaxBigBirdForPreTraining"),$Nt.forEach(t),AGr=r(lGe," (BigBird model)"),lGe.forEach(t),LGr=i(we),ww=n(we,"LI",{});var iGe=s(ww);f0e=n(iGe,"STRONG",{});var kNt=s(f0e);yGr=r(kNt,"electra"),kNt.forEach(t),xGr=r(iGe," \u2014 "),KZ=n(iGe,"A",{href:!0});var SNt=s(KZ);$Gr=r(SNt,"FlaxElectraForPreTraining"),SNt.forEach(t),kGr=r(iGe," (ELECTRA model)"),iGe.forEach(t),SGr=i(we),Aw=n(we,"LI",{});var dGe=s(Aw);g0e=n(dGe,"STRONG",{});var RNt=s(g0e);RGr=r(RNt,"longt5"),RNt.forEach(t),PGr=r(dGe," \u2014 "),ZZ=n(dGe,"A",{href:!0});var PNt=s(ZZ);BGr=r(PNt,"FlaxLongT5ForConditionalGeneration"),PNt.forEach(t),IGr=r(dGe," (LongT5 model)"),dGe.forEach(t),NGr=i(we),Lw=n(we,"LI",{});var cGe=s(Lw);h0e=n(cGe,"STRONG",{});var BNt=s(h0e);qGr=r(BNt,"mbart"),BNt.forEach(t),jGr=r(cGe," \u2014 "),eee=n(cGe,"A",{href:!0});var INt=s(eee);DGr=r(INt,"FlaxMBartForConditionalGeneration"),INt.forEach(t),GGr=r(cGe," (mBART model)"),cGe.forEach(t),OGr=i(we),yw=n(we,"LI",{});var mGe=s(yw);u0e=n(mGe,"STRONG",{});var NNt=s(u0e);VGr=r(NNt,"mt5"),NNt.forEach(t),XGr=r(mGe," \u2014 "),oee=n(mGe,"A",{href:!0});var qNt=s(oee);zGr=r(qNt,"FlaxMT5ForConditionalGeneration"),qNt.forEach(t),QGr=r(mGe," (MT5 model)"),mGe.forEach(t),WGr=i(we),xw=n(we,"LI",{});var fGe=s(xw);p0e=n(fGe,"STRONG",{});var jNt=s(p0e);HGr=r(jNt,"roberta"),jNt.forEach(t),UGr=r(fGe," \u2014 "),ree=n(fGe,"A",{href:!0});var DNt=s(ree);JGr=r(DNt,"FlaxRobertaForMaskedLM"),DNt.forEach(t),YGr=r(fGe," (RoBERTa model)"),fGe.forEach(t),KGr=i(we),$w=n(we,"LI",{});var gGe=s($w);_0e=n(gGe,"STRONG",{});var GNt=s(_0e);ZGr=r(GNt,"roformer"),GNt.forEach(t),eOr=r(gGe," \u2014 "),tee=n(gGe,"A",{href:!0});var ONt=s(tee);oOr=r(ONt,"FlaxRoFormerForMaskedLM"),ONt.forEach(t),rOr=r(gGe," (RoFormer model)"),gGe.forEach(t),tOr=i(we),kw=n(we,"LI",{});var hGe=s(kw);b0e=n(hGe,"STRONG",{});var VNt=s(b0e);aOr=r(VNt,"t5"),VNt.forEach(t),nOr=r(hGe," \u2014 "),aee=n(hGe,"A",{href:!0});var XNt=s(aee);sOr=r(XNt,"FlaxT5ForConditionalGeneration"),XNt.forEach(t),lOr=r(hGe," (T5 model)"),hGe.forEach(t),iOr=i(we),Sw=n(we,"LI",{});var uGe=s(Sw);v0e=n(uGe,"STRONG",{});var zNt=s(v0e);dOr=r(zNt,"wav2vec2"),zNt.forEach(t),cOr=r(uGe," \u2014 "),nee=n(uGe,"A",{href:!0});var QNt=s(nee);mOr=r(QNt,"FlaxWav2Vec2ForPreTraining"),QNt.forEach(t),fOr=r(uGe," (Wav2Vec2 model)"),uGe.forEach(t),gOr=i(we),Rw=n(we,"LI",{});var pGe=s(Rw);F0e=n(pGe,"STRONG",{});var WNt=s(F0e);hOr=r(WNt,"xlm-roberta"),WNt.forEach(t),uOr=r(pGe," \u2014 "),see=n(pGe,"A",{href:!0});var HNt=s(see);pOr=r(HNt,"FlaxXLMRobertaForMaskedLM"),HNt.forEach(t),_Or=r(pGe," (XLM-RoBERTa model)"),pGe.forEach(t),we.forEach(t),bOr=i(ai),T(Pw.$$.fragment,ai),ai.forEach(t),ti.forEach(t),cXe=i(m),Zc=n(m,"H2",{class:!0});var vQe=s(Zc);Bw=n(vQe,"A",{id:!0,class:!0,href:!0});var UNt=s(Bw);T0e=n(UNt,"SPAN",{});var JNt=s(T0e);T(r$.$$.fragment,JNt),JNt.forEach(t),UNt.forEach(t),vOr=i(vQe),M0e=n(vQe,"SPAN",{});var YNt=s(M0e);FOr=r(YNt,"FlaxAutoModelForMaskedLM"),YNt.forEach(t),vQe.forEach(t),mXe=i(m),_r=n(m,"DIV",{class:!0});var ni=s(_r);T(t$.$$.fragment,ni),TOr=i(ni),em=n(ni,"P",{});var pte=s(em);MOr=r(pte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),lee=n(pte,"A",{href:!0});var KNt=s(lee);EOr=r(KNt,"from_pretrained()"),KNt.forEach(t),COr=r(pte," class method or the "),iee=n(pte,"A",{href:!0});var ZNt=s(iee);wOr=r(ZNt,"from_config()"),ZNt.forEach(t),AOr=r(pte,` class
method.`),pte.forEach(t),LOr=i(ni),a$=n(ni,"P",{});var FQe=s(a$);yOr=r(FQe,"This class cannot be instantiated directly using "),E0e=n(FQe,"CODE",{});var eqt=s(E0e);xOr=r(eqt,"__init__()"),eqt.forEach(t),$Or=r(FQe," (throws an error)."),FQe.forEach(t),kOr=i(ni),Wt=n(ni,"DIV",{class:!0});var p7=s(Wt);T(n$.$$.fragment,p7),SOr=i(p7),C0e=n(p7,"P",{});var oqt=s(C0e);ROr=r(oqt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),oqt.forEach(t),POr=i(p7),om=n(p7,"P",{});var _te=s(om);BOr=r(_te,`Note:
Loading a model from its configuration file does `),w0e=n(_te,"STRONG",{});var rqt=s(w0e);IOr=r(rqt,"not"),rqt.forEach(t),NOr=r(_te,` load the model weights. It only affects the
model\u2019s configuration. Use `),dee=n(_te,"A",{href:!0});var tqt=s(dee);qOr=r(tqt,"from_pretrained()"),tqt.forEach(t),jOr=r(_te," to load the model weights."),_te.forEach(t),DOr=i(p7),T(Iw.$$.fragment,p7),p7.forEach(t),GOr=i(ni),zr=n(ni,"DIV",{class:!0});var si=s(zr);T(s$.$$.fragment,si),OOr=i(si),A0e=n(si,"P",{});var aqt=s(A0e);VOr=r(aqt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),aqt.forEach(t),XOr=i(si),En=n(si,"P",{});var _7=s(En);zOr=r(_7,"The model class to instantiate is selected based on the "),L0e=n(_7,"CODE",{});var nqt=s(L0e);QOr=r(nqt,"model_type"),nqt.forEach(t),WOr=r(_7,` property of the config object (either
passed as an argument or loaded from `),y0e=n(_7,"CODE",{});var sqt=s(y0e);HOr=r(sqt,"pretrained_model_name_or_path"),sqt.forEach(t),UOr=r(_7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x0e=n(_7,"CODE",{});var lqt=s(x0e);JOr=r(lqt,"pretrained_model_name_or_path"),lqt.forEach(t),YOr=r(_7,":"),_7.forEach(t),KOr=i(si),$e=n(si,"UL",{});var qe=s($e);Nw=n(qe,"LI",{});var _Ge=s(Nw);$0e=n(_Ge,"STRONG",{});var iqt=s($0e);ZOr=r(iqt,"albert"),iqt.forEach(t),eVr=r(_Ge," \u2014 "),cee=n(_Ge,"A",{href:!0});var dqt=s(cee);oVr=r(dqt,"FlaxAlbertForMaskedLM"),dqt.forEach(t),rVr=r(_Ge," (ALBERT model)"),_Ge.forEach(t),tVr=i(qe),qw=n(qe,"LI",{});var bGe=s(qw);k0e=n(bGe,"STRONG",{});var cqt=s(k0e);aVr=r(cqt,"bart"),cqt.forEach(t),nVr=r(bGe," \u2014 "),mee=n(bGe,"A",{href:!0});var mqt=s(mee);sVr=r(mqt,"FlaxBartForConditionalGeneration"),mqt.forEach(t),lVr=r(bGe," (BART model)"),bGe.forEach(t),iVr=i(qe),jw=n(qe,"LI",{});var vGe=s(jw);S0e=n(vGe,"STRONG",{});var fqt=s(S0e);dVr=r(fqt,"bert"),fqt.forEach(t),cVr=r(vGe," \u2014 "),fee=n(vGe,"A",{href:!0});var gqt=s(fee);mVr=r(gqt,"FlaxBertForMaskedLM"),gqt.forEach(t),fVr=r(vGe," (BERT model)"),vGe.forEach(t),gVr=i(qe),Dw=n(qe,"LI",{});var FGe=s(Dw);R0e=n(FGe,"STRONG",{});var hqt=s(R0e);hVr=r(hqt,"big_bird"),hqt.forEach(t),uVr=r(FGe," \u2014 "),gee=n(FGe,"A",{href:!0});var uqt=s(gee);pVr=r(uqt,"FlaxBigBirdForMaskedLM"),uqt.forEach(t),_Vr=r(FGe," (BigBird model)"),FGe.forEach(t),bVr=i(qe),Gw=n(qe,"LI",{});var TGe=s(Gw);P0e=n(TGe,"STRONG",{});var pqt=s(P0e);vVr=r(pqt,"distilbert"),pqt.forEach(t),FVr=r(TGe," \u2014 "),hee=n(TGe,"A",{href:!0});var _qt=s(hee);TVr=r(_qt,"FlaxDistilBertForMaskedLM"),_qt.forEach(t),MVr=r(TGe," (DistilBERT model)"),TGe.forEach(t),EVr=i(qe),Ow=n(qe,"LI",{});var MGe=s(Ow);B0e=n(MGe,"STRONG",{});var bqt=s(B0e);CVr=r(bqt,"electra"),bqt.forEach(t),wVr=r(MGe," \u2014 "),uee=n(MGe,"A",{href:!0});var vqt=s(uee);AVr=r(vqt,"FlaxElectraForMaskedLM"),vqt.forEach(t),LVr=r(MGe," (ELECTRA model)"),MGe.forEach(t),yVr=i(qe),Vw=n(qe,"LI",{});var EGe=s(Vw);I0e=n(EGe,"STRONG",{});var Fqt=s(I0e);xVr=r(Fqt,"mbart"),Fqt.forEach(t),$Vr=r(EGe," \u2014 "),pee=n(EGe,"A",{href:!0});var Tqt=s(pee);kVr=r(Tqt,"FlaxMBartForConditionalGeneration"),Tqt.forEach(t),SVr=r(EGe," (mBART model)"),EGe.forEach(t),RVr=i(qe),Xw=n(qe,"LI",{});var CGe=s(Xw);N0e=n(CGe,"STRONG",{});var Mqt=s(N0e);PVr=r(Mqt,"roberta"),Mqt.forEach(t),BVr=r(CGe," \u2014 "),_ee=n(CGe,"A",{href:!0});var Eqt=s(_ee);IVr=r(Eqt,"FlaxRobertaForMaskedLM"),Eqt.forEach(t),NVr=r(CGe," (RoBERTa model)"),CGe.forEach(t),qVr=i(qe),zw=n(qe,"LI",{});var wGe=s(zw);q0e=n(wGe,"STRONG",{});var Cqt=s(q0e);jVr=r(Cqt,"roformer"),Cqt.forEach(t),DVr=r(wGe," \u2014 "),bee=n(wGe,"A",{href:!0});var wqt=s(bee);GVr=r(wqt,"FlaxRoFormerForMaskedLM"),wqt.forEach(t),OVr=r(wGe," (RoFormer model)"),wGe.forEach(t),VVr=i(qe),Qw=n(qe,"LI",{});var AGe=s(Qw);j0e=n(AGe,"STRONG",{});var Aqt=s(j0e);XVr=r(Aqt,"xlm-roberta"),Aqt.forEach(t),zVr=r(AGe," \u2014 "),vee=n(AGe,"A",{href:!0});var Lqt=s(vee);QVr=r(Lqt,"FlaxXLMRobertaForMaskedLM"),Lqt.forEach(t),WVr=r(AGe," (XLM-RoBERTa model)"),AGe.forEach(t),qe.forEach(t),HVr=i(si),T(Ww.$$.fragment,si),si.forEach(t),ni.forEach(t),fXe=i(m),rm=n(m,"H2",{class:!0});var TQe=s(rm);Hw=n(TQe,"A",{id:!0,class:!0,href:!0});var yqt=s(Hw);D0e=n(yqt,"SPAN",{});var xqt=s(D0e);T(l$.$$.fragment,xqt),xqt.forEach(t),yqt.forEach(t),UVr=i(TQe),G0e=n(TQe,"SPAN",{});var $qt=s(G0e);JVr=r($qt,"FlaxAutoModelForSeq2SeqLM"),$qt.forEach(t),TQe.forEach(t),gXe=i(m),br=n(m,"DIV",{class:!0});var li=s(br);T(i$.$$.fragment,li),YVr=i(li),tm=n(li,"P",{});var bte=s(tm);KVr=r(bte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Fee=n(bte,"A",{href:!0});var kqt=s(Fee);ZVr=r(kqt,"from_pretrained()"),kqt.forEach(t),eXr=r(bte," class method or the "),Tee=n(bte,"A",{href:!0});var Sqt=s(Tee);oXr=r(Sqt,"from_config()"),Sqt.forEach(t),rXr=r(bte,` class
method.`),bte.forEach(t),tXr=i(li),d$=n(li,"P",{});var MQe=s(d$);aXr=r(MQe,"This class cannot be instantiated directly using "),O0e=n(MQe,"CODE",{});var Rqt=s(O0e);nXr=r(Rqt,"__init__()"),Rqt.forEach(t),sXr=r(MQe," (throws an error)."),MQe.forEach(t),lXr=i(li),Ht=n(li,"DIV",{class:!0});var b7=s(Ht);T(c$.$$.fragment,b7),iXr=i(b7),V0e=n(b7,"P",{});var Pqt=s(V0e);dXr=r(Pqt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Pqt.forEach(t),cXr=i(b7),am=n(b7,"P",{});var vte=s(am);mXr=r(vte,`Note:
Loading a model from its configuration file does `),X0e=n(vte,"STRONG",{});var Bqt=s(X0e);fXr=r(Bqt,"not"),Bqt.forEach(t),gXr=r(vte,` load the model weights. It only affects the
model\u2019s configuration. Use `),Mee=n(vte,"A",{href:!0});var Iqt=s(Mee);hXr=r(Iqt,"from_pretrained()"),Iqt.forEach(t),uXr=r(vte," to load the model weights."),vte.forEach(t),pXr=i(b7),T(Uw.$$.fragment,b7),b7.forEach(t),_Xr=i(li),Qr=n(li,"DIV",{class:!0});var ii=s(Qr);T(m$.$$.fragment,ii),bXr=i(ii),z0e=n(ii,"P",{});var Nqt=s(z0e);vXr=r(Nqt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Nqt.forEach(t),FXr=i(ii),Cn=n(ii,"P",{});var v7=s(Cn);TXr=r(v7,"The model class to instantiate is selected based on the "),Q0e=n(v7,"CODE",{});var qqt=s(Q0e);MXr=r(qqt,"model_type"),qqt.forEach(t),EXr=r(v7,` property of the config object (either
passed as an argument or loaded from `),W0e=n(v7,"CODE",{});var jqt=s(W0e);CXr=r(jqt,"pretrained_model_name_or_path"),jqt.forEach(t),wXr=r(v7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H0e=n(v7,"CODE",{});var Dqt=s(H0e);AXr=r(Dqt,"pretrained_model_name_or_path"),Dqt.forEach(t),LXr=r(v7,":"),v7.forEach(t),yXr=i(ii),ke=n(ii,"UL",{});var je=s(ke);Jw=n(je,"LI",{});var LGe=s(Jw);U0e=n(LGe,"STRONG",{});var Gqt=s(U0e);xXr=r(Gqt,"bart"),Gqt.forEach(t),$Xr=r(LGe," \u2014 "),Eee=n(LGe,"A",{href:!0});var Oqt=s(Eee);kXr=r(Oqt,"FlaxBartForConditionalGeneration"),Oqt.forEach(t),SXr=r(LGe," (BART model)"),LGe.forEach(t),RXr=i(je),Yw=n(je,"LI",{});var yGe=s(Yw);J0e=n(yGe,"STRONG",{});var Vqt=s(J0e);PXr=r(Vqt,"blenderbot"),Vqt.forEach(t),BXr=r(yGe," \u2014 "),Cee=n(yGe,"A",{href:!0});var Xqt=s(Cee);IXr=r(Xqt,"FlaxBlenderbotForConditionalGeneration"),Xqt.forEach(t),NXr=r(yGe," (Blenderbot model)"),yGe.forEach(t),qXr=i(je),Kw=n(je,"LI",{});var xGe=s(Kw);Y0e=n(xGe,"STRONG",{});var zqt=s(Y0e);jXr=r(zqt,"blenderbot-small"),zqt.forEach(t),DXr=r(xGe," \u2014 "),wee=n(xGe,"A",{href:!0});var Qqt=s(wee);GXr=r(Qqt,"FlaxBlenderbotSmallForConditionalGeneration"),Qqt.forEach(t),OXr=r(xGe," (BlenderbotSmall model)"),xGe.forEach(t),VXr=i(je),Zw=n(je,"LI",{});var $Ge=s(Zw);K0e=n($Ge,"STRONG",{});var Wqt=s(K0e);XXr=r(Wqt,"encoder-decoder"),Wqt.forEach(t),zXr=r($Ge," \u2014 "),Aee=n($Ge,"A",{href:!0});var Hqt=s(Aee);QXr=r(Hqt,"FlaxEncoderDecoderModel"),Hqt.forEach(t),WXr=r($Ge," (Encoder decoder model)"),$Ge.forEach(t),HXr=i(je),eA=n(je,"LI",{});var kGe=s(eA);Z0e=n(kGe,"STRONG",{});var Uqt=s(Z0e);UXr=r(Uqt,"longt5"),Uqt.forEach(t),JXr=r(kGe," \u2014 "),Lee=n(kGe,"A",{href:!0});var Jqt=s(Lee);YXr=r(Jqt,"FlaxLongT5ForConditionalGeneration"),Jqt.forEach(t),KXr=r(kGe," (LongT5 model)"),kGe.forEach(t),ZXr=i(je),oA=n(je,"LI",{});var SGe=s(oA);ewe=n(SGe,"STRONG",{});var Yqt=s(ewe);ezr=r(Yqt,"marian"),Yqt.forEach(t),ozr=r(SGe," \u2014 "),yee=n(SGe,"A",{href:!0});var Kqt=s(yee);rzr=r(Kqt,"FlaxMarianMTModel"),Kqt.forEach(t),tzr=r(SGe," (Marian model)"),SGe.forEach(t),azr=i(je),rA=n(je,"LI",{});var RGe=s(rA);owe=n(RGe,"STRONG",{});var Zqt=s(owe);nzr=r(Zqt,"mbart"),Zqt.forEach(t),szr=r(RGe," \u2014 "),xee=n(RGe,"A",{href:!0});var ejt=s(xee);lzr=r(ejt,"FlaxMBartForConditionalGeneration"),ejt.forEach(t),izr=r(RGe," (mBART model)"),RGe.forEach(t),dzr=i(je),tA=n(je,"LI",{});var PGe=s(tA);rwe=n(PGe,"STRONG",{});var ojt=s(rwe);czr=r(ojt,"mt5"),ojt.forEach(t),mzr=r(PGe," \u2014 "),$ee=n(PGe,"A",{href:!0});var rjt=s($ee);fzr=r(rjt,"FlaxMT5ForConditionalGeneration"),rjt.forEach(t),gzr=r(PGe," (MT5 model)"),PGe.forEach(t),hzr=i(je),aA=n(je,"LI",{});var BGe=s(aA);twe=n(BGe,"STRONG",{});var tjt=s(twe);uzr=r(tjt,"pegasus"),tjt.forEach(t),pzr=r(BGe," \u2014 "),kee=n(BGe,"A",{href:!0});var ajt=s(kee);_zr=r(ajt,"FlaxPegasusForConditionalGeneration"),ajt.forEach(t),bzr=r(BGe," (Pegasus model)"),BGe.forEach(t),vzr=i(je),nA=n(je,"LI",{});var IGe=s(nA);awe=n(IGe,"STRONG",{});var njt=s(awe);Fzr=r(njt,"t5"),njt.forEach(t),Tzr=r(IGe," \u2014 "),See=n(IGe,"A",{href:!0});var sjt=s(See);Mzr=r(sjt,"FlaxT5ForConditionalGeneration"),sjt.forEach(t),Ezr=r(IGe," (T5 model)"),IGe.forEach(t),je.forEach(t),Czr=i(ii),T(sA.$$.fragment,ii),ii.forEach(t),li.forEach(t),hXe=i(m),nm=n(m,"H2",{class:!0});var EQe=s(nm);lA=n(EQe,"A",{id:!0,class:!0,href:!0});var ljt=s(lA);nwe=n(ljt,"SPAN",{});var ijt=s(nwe);T(f$.$$.fragment,ijt),ijt.forEach(t),ljt.forEach(t),wzr=i(EQe),swe=n(EQe,"SPAN",{});var djt=s(swe);Azr=r(djt,"FlaxAutoModelForSequenceClassification"),djt.forEach(t),EQe.forEach(t),uXe=i(m),vr=n(m,"DIV",{class:!0});var di=s(vr);T(g$.$$.fragment,di),Lzr=i(di),sm=n(di,"P",{});var Fte=s(sm);yzr=r(Fte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Ree=n(Fte,"A",{href:!0});var cjt=s(Ree);xzr=r(cjt,"from_pretrained()"),cjt.forEach(t),$zr=r(Fte," class method or the "),Pee=n(Fte,"A",{href:!0});var mjt=s(Pee);kzr=r(mjt,"from_config()"),mjt.forEach(t),Szr=r(Fte,` class
method.`),Fte.forEach(t),Rzr=i(di),h$=n(di,"P",{});var CQe=s(h$);Pzr=r(CQe,"This class cannot be instantiated directly using "),lwe=n(CQe,"CODE",{});var fjt=s(lwe);Bzr=r(fjt,"__init__()"),fjt.forEach(t),Izr=r(CQe," (throws an error)."),CQe.forEach(t),Nzr=i(di),Ut=n(di,"DIV",{class:!0});var F7=s(Ut);T(u$.$$.fragment,F7),qzr=i(F7),iwe=n(F7,"P",{});var gjt=s(iwe);jzr=r(gjt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),gjt.forEach(t),Dzr=i(F7),lm=n(F7,"P",{});var Tte=s(lm);Gzr=r(Tte,`Note:
Loading a model from its configuration file does `),dwe=n(Tte,"STRONG",{});var hjt=s(dwe);Ozr=r(hjt,"not"),hjt.forEach(t),Vzr=r(Tte,` load the model weights. It only affects the
model\u2019s configuration. Use `),Bee=n(Tte,"A",{href:!0});var ujt=s(Bee);Xzr=r(ujt,"from_pretrained()"),ujt.forEach(t),zzr=r(Tte," to load the model weights."),Tte.forEach(t),Qzr=i(F7),T(iA.$$.fragment,F7),F7.forEach(t),Wzr=i(di),Wr=n(di,"DIV",{class:!0});var ci=s(Wr);T(p$.$$.fragment,ci),Hzr=i(ci),cwe=n(ci,"P",{});var pjt=s(cwe);Uzr=r(pjt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),pjt.forEach(t),Jzr=i(ci),wn=n(ci,"P",{});var T7=s(wn);Yzr=r(T7,"The model class to instantiate is selected based on the "),mwe=n(T7,"CODE",{});var _jt=s(mwe);Kzr=r(_jt,"model_type"),_jt.forEach(t),Zzr=r(T7,` property of the config object (either
passed as an argument or loaded from `),fwe=n(T7,"CODE",{});var bjt=s(fwe);eQr=r(bjt,"pretrained_model_name_or_path"),bjt.forEach(t),oQr=r(T7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gwe=n(T7,"CODE",{});var vjt=s(gwe);rQr=r(vjt,"pretrained_model_name_or_path"),vjt.forEach(t),tQr=r(T7,":"),T7.forEach(t),aQr=i(ci),Se=n(ci,"UL",{});var De=s(Se);dA=n(De,"LI",{});var NGe=s(dA);hwe=n(NGe,"STRONG",{});var Fjt=s(hwe);nQr=r(Fjt,"albert"),Fjt.forEach(t),sQr=r(NGe," \u2014 "),Iee=n(NGe,"A",{href:!0});var Tjt=s(Iee);lQr=r(Tjt,"FlaxAlbertForSequenceClassification"),Tjt.forEach(t),iQr=r(NGe," (ALBERT model)"),NGe.forEach(t),dQr=i(De),cA=n(De,"LI",{});var qGe=s(cA);uwe=n(qGe,"STRONG",{});var Mjt=s(uwe);cQr=r(Mjt,"bart"),Mjt.forEach(t),mQr=r(qGe," \u2014 "),Nee=n(qGe,"A",{href:!0});var Ejt=s(Nee);fQr=r(Ejt,"FlaxBartForSequenceClassification"),Ejt.forEach(t),gQr=r(qGe," (BART model)"),qGe.forEach(t),hQr=i(De),mA=n(De,"LI",{});var jGe=s(mA);pwe=n(jGe,"STRONG",{});var Cjt=s(pwe);uQr=r(Cjt,"bert"),Cjt.forEach(t),pQr=r(jGe," \u2014 "),qee=n(jGe,"A",{href:!0});var wjt=s(qee);_Qr=r(wjt,"FlaxBertForSequenceClassification"),wjt.forEach(t),bQr=r(jGe," (BERT model)"),jGe.forEach(t),vQr=i(De),fA=n(De,"LI",{});var DGe=s(fA);_we=n(DGe,"STRONG",{});var Ajt=s(_we);FQr=r(Ajt,"big_bird"),Ajt.forEach(t),TQr=r(DGe," \u2014 "),jee=n(DGe,"A",{href:!0});var Ljt=s(jee);MQr=r(Ljt,"FlaxBigBirdForSequenceClassification"),Ljt.forEach(t),EQr=r(DGe," (BigBird model)"),DGe.forEach(t),CQr=i(De),gA=n(De,"LI",{});var GGe=s(gA);bwe=n(GGe,"STRONG",{});var yjt=s(bwe);wQr=r(yjt,"distilbert"),yjt.forEach(t),AQr=r(GGe," \u2014 "),Dee=n(GGe,"A",{href:!0});var xjt=s(Dee);LQr=r(xjt,"FlaxDistilBertForSequenceClassification"),xjt.forEach(t),yQr=r(GGe," (DistilBERT model)"),GGe.forEach(t),xQr=i(De),hA=n(De,"LI",{});var OGe=s(hA);vwe=n(OGe,"STRONG",{});var $jt=s(vwe);$Qr=r($jt,"electra"),$jt.forEach(t),kQr=r(OGe," \u2014 "),Gee=n(OGe,"A",{href:!0});var kjt=s(Gee);SQr=r(kjt,"FlaxElectraForSequenceClassification"),kjt.forEach(t),RQr=r(OGe," (ELECTRA model)"),OGe.forEach(t),PQr=i(De),uA=n(De,"LI",{});var VGe=s(uA);Fwe=n(VGe,"STRONG",{});var Sjt=s(Fwe);BQr=r(Sjt,"mbart"),Sjt.forEach(t),IQr=r(VGe," \u2014 "),Oee=n(VGe,"A",{href:!0});var Rjt=s(Oee);NQr=r(Rjt,"FlaxMBartForSequenceClassification"),Rjt.forEach(t),qQr=r(VGe," (mBART model)"),VGe.forEach(t),jQr=i(De),pA=n(De,"LI",{});var XGe=s(pA);Twe=n(XGe,"STRONG",{});var Pjt=s(Twe);DQr=r(Pjt,"roberta"),Pjt.forEach(t),GQr=r(XGe," \u2014 "),Vee=n(XGe,"A",{href:!0});var Bjt=s(Vee);OQr=r(Bjt,"FlaxRobertaForSequenceClassification"),Bjt.forEach(t),VQr=r(XGe," (RoBERTa model)"),XGe.forEach(t),XQr=i(De),_A=n(De,"LI",{});var zGe=s(_A);Mwe=n(zGe,"STRONG",{});var Ijt=s(Mwe);zQr=r(Ijt,"roformer"),Ijt.forEach(t),QQr=r(zGe," \u2014 "),Xee=n(zGe,"A",{href:!0});var Njt=s(Xee);WQr=r(Njt,"FlaxRoFormerForSequenceClassification"),Njt.forEach(t),HQr=r(zGe," (RoFormer model)"),zGe.forEach(t),UQr=i(De),bA=n(De,"LI",{});var QGe=s(bA);Ewe=n(QGe,"STRONG",{});var qjt=s(Ewe);JQr=r(qjt,"xlm-roberta"),qjt.forEach(t),YQr=r(QGe," \u2014 "),zee=n(QGe,"A",{href:!0});var jjt=s(zee);KQr=r(jjt,"FlaxXLMRobertaForSequenceClassification"),jjt.forEach(t),ZQr=r(QGe," (XLM-RoBERTa model)"),QGe.forEach(t),De.forEach(t),eWr=i(ci),T(vA.$$.fragment,ci),ci.forEach(t),di.forEach(t),pXe=i(m),im=n(m,"H2",{class:!0});var wQe=s(im);FA=n(wQe,"A",{id:!0,class:!0,href:!0});var Djt=s(FA);Cwe=n(Djt,"SPAN",{});var Gjt=s(Cwe);T(_$.$$.fragment,Gjt),Gjt.forEach(t),Djt.forEach(t),oWr=i(wQe),wwe=n(wQe,"SPAN",{});var Ojt=s(wwe);rWr=r(Ojt,"FlaxAutoModelForQuestionAnswering"),Ojt.forEach(t),wQe.forEach(t),_Xe=i(m),Fr=n(m,"DIV",{class:!0});var mi=s(Fr);T(b$.$$.fragment,mi),tWr=i(mi),dm=n(mi,"P",{});var Mte=s(dm);aWr=r(Mte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Qee=n(Mte,"A",{href:!0});var Vjt=s(Qee);nWr=r(Vjt,"from_pretrained()"),Vjt.forEach(t),sWr=r(Mte," class method or the "),Wee=n(Mte,"A",{href:!0});var Xjt=s(Wee);lWr=r(Xjt,"from_config()"),Xjt.forEach(t),iWr=r(Mte,` class
method.`),Mte.forEach(t),dWr=i(mi),v$=n(mi,"P",{});var AQe=s(v$);cWr=r(AQe,"This class cannot be instantiated directly using "),Awe=n(AQe,"CODE",{});var zjt=s(Awe);mWr=r(zjt,"__init__()"),zjt.forEach(t),fWr=r(AQe," (throws an error)."),AQe.forEach(t),gWr=i(mi),Jt=n(mi,"DIV",{class:!0});var M7=s(Jt);T(F$.$$.fragment,M7),hWr=i(M7),Lwe=n(M7,"P",{});var Qjt=s(Lwe);uWr=r(Qjt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Qjt.forEach(t),pWr=i(M7),cm=n(M7,"P",{});var Ete=s(cm);_Wr=r(Ete,`Note:
Loading a model from its configuration file does `),ywe=n(Ete,"STRONG",{});var Wjt=s(ywe);bWr=r(Wjt,"not"),Wjt.forEach(t),vWr=r(Ete,` load the model weights. It only affects the
model\u2019s configuration. Use `),Hee=n(Ete,"A",{href:!0});var Hjt=s(Hee);FWr=r(Hjt,"from_pretrained()"),Hjt.forEach(t),TWr=r(Ete," to load the model weights."),Ete.forEach(t),MWr=i(M7),T(TA.$$.fragment,M7),M7.forEach(t),EWr=i(mi),Hr=n(mi,"DIV",{class:!0});var fi=s(Hr);T(T$.$$.fragment,fi),CWr=i(fi),xwe=n(fi,"P",{});var Ujt=s(xwe);wWr=r(Ujt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Ujt.forEach(t),AWr=i(fi),An=n(fi,"P",{});var E7=s(An);LWr=r(E7,"The model class to instantiate is selected based on the "),$we=n(E7,"CODE",{});var Jjt=s($we);yWr=r(Jjt,"model_type"),Jjt.forEach(t),xWr=r(E7,` property of the config object (either
passed as an argument or loaded from `),kwe=n(E7,"CODE",{});var Yjt=s(kwe);$Wr=r(Yjt,"pretrained_model_name_or_path"),Yjt.forEach(t),kWr=r(E7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Swe=n(E7,"CODE",{});var Kjt=s(Swe);SWr=r(Kjt,"pretrained_model_name_or_path"),Kjt.forEach(t),RWr=r(E7,":"),E7.forEach(t),PWr=i(fi),Re=n(fi,"UL",{});var Ge=s(Re);MA=n(Ge,"LI",{});var WGe=s(MA);Rwe=n(WGe,"STRONG",{});var Zjt=s(Rwe);BWr=r(Zjt,"albert"),Zjt.forEach(t),IWr=r(WGe," \u2014 "),Uee=n(WGe,"A",{href:!0});var eDt=s(Uee);NWr=r(eDt,"FlaxAlbertForQuestionAnswering"),eDt.forEach(t),qWr=r(WGe," (ALBERT model)"),WGe.forEach(t),jWr=i(Ge),EA=n(Ge,"LI",{});var HGe=s(EA);Pwe=n(HGe,"STRONG",{});var oDt=s(Pwe);DWr=r(oDt,"bart"),oDt.forEach(t),GWr=r(HGe," \u2014 "),Jee=n(HGe,"A",{href:!0});var rDt=s(Jee);OWr=r(rDt,"FlaxBartForQuestionAnswering"),rDt.forEach(t),VWr=r(HGe," (BART model)"),HGe.forEach(t),XWr=i(Ge),CA=n(Ge,"LI",{});var UGe=s(CA);Bwe=n(UGe,"STRONG",{});var tDt=s(Bwe);zWr=r(tDt,"bert"),tDt.forEach(t),QWr=r(UGe," \u2014 "),Yee=n(UGe,"A",{href:!0});var aDt=s(Yee);WWr=r(aDt,"FlaxBertForQuestionAnswering"),aDt.forEach(t),HWr=r(UGe," (BERT model)"),UGe.forEach(t),UWr=i(Ge),wA=n(Ge,"LI",{});var JGe=s(wA);Iwe=n(JGe,"STRONG",{});var nDt=s(Iwe);JWr=r(nDt,"big_bird"),nDt.forEach(t),YWr=r(JGe," \u2014 "),Kee=n(JGe,"A",{href:!0});var sDt=s(Kee);KWr=r(sDt,"FlaxBigBirdForQuestionAnswering"),sDt.forEach(t),ZWr=r(JGe," (BigBird model)"),JGe.forEach(t),eHr=i(Ge),AA=n(Ge,"LI",{});var YGe=s(AA);Nwe=n(YGe,"STRONG",{});var lDt=s(Nwe);oHr=r(lDt,"distilbert"),lDt.forEach(t),rHr=r(YGe," \u2014 "),Zee=n(YGe,"A",{href:!0});var iDt=s(Zee);tHr=r(iDt,"FlaxDistilBertForQuestionAnswering"),iDt.forEach(t),aHr=r(YGe," (DistilBERT model)"),YGe.forEach(t),nHr=i(Ge),LA=n(Ge,"LI",{});var KGe=s(LA);qwe=n(KGe,"STRONG",{});var dDt=s(qwe);sHr=r(dDt,"electra"),dDt.forEach(t),lHr=r(KGe," \u2014 "),eoe=n(KGe,"A",{href:!0});var cDt=s(eoe);iHr=r(cDt,"FlaxElectraForQuestionAnswering"),cDt.forEach(t),dHr=r(KGe," (ELECTRA model)"),KGe.forEach(t),cHr=i(Ge),yA=n(Ge,"LI",{});var ZGe=s(yA);jwe=n(ZGe,"STRONG",{});var mDt=s(jwe);mHr=r(mDt,"mbart"),mDt.forEach(t),fHr=r(ZGe," \u2014 "),ooe=n(ZGe,"A",{href:!0});var fDt=s(ooe);gHr=r(fDt,"FlaxMBartForQuestionAnswering"),fDt.forEach(t),hHr=r(ZGe," (mBART model)"),ZGe.forEach(t),uHr=i(Ge),xA=n(Ge,"LI",{});var eOe=s(xA);Dwe=n(eOe,"STRONG",{});var gDt=s(Dwe);pHr=r(gDt,"roberta"),gDt.forEach(t),_Hr=r(eOe," \u2014 "),roe=n(eOe,"A",{href:!0});var hDt=s(roe);bHr=r(hDt,"FlaxRobertaForQuestionAnswering"),hDt.forEach(t),vHr=r(eOe," (RoBERTa model)"),eOe.forEach(t),FHr=i(Ge),$A=n(Ge,"LI",{});var oOe=s($A);Gwe=n(oOe,"STRONG",{});var uDt=s(Gwe);THr=r(uDt,"roformer"),uDt.forEach(t),MHr=r(oOe," \u2014 "),toe=n(oOe,"A",{href:!0});var pDt=s(toe);EHr=r(pDt,"FlaxRoFormerForQuestionAnswering"),pDt.forEach(t),CHr=r(oOe," (RoFormer model)"),oOe.forEach(t),wHr=i(Ge),kA=n(Ge,"LI",{});var rOe=s(kA);Owe=n(rOe,"STRONG",{});var _Dt=s(Owe);AHr=r(_Dt,"xlm-roberta"),_Dt.forEach(t),LHr=r(rOe," \u2014 "),aoe=n(rOe,"A",{href:!0});var bDt=s(aoe);yHr=r(bDt,"FlaxXLMRobertaForQuestionAnswering"),bDt.forEach(t),xHr=r(rOe," (XLM-RoBERTa model)"),rOe.forEach(t),Ge.forEach(t),$Hr=i(fi),T(SA.$$.fragment,fi),fi.forEach(t),mi.forEach(t),bXe=i(m),mm=n(m,"H2",{class:!0});var LQe=s(mm);RA=n(LQe,"A",{id:!0,class:!0,href:!0});var vDt=s(RA);Vwe=n(vDt,"SPAN",{});var FDt=s(Vwe);T(M$.$$.fragment,FDt),FDt.forEach(t),vDt.forEach(t),kHr=i(LQe),Xwe=n(LQe,"SPAN",{});var TDt=s(Xwe);SHr=r(TDt,"FlaxAutoModelForTokenClassification"),TDt.forEach(t),LQe.forEach(t),vXe=i(m),Tr=n(m,"DIV",{class:!0});var gi=s(Tr);T(E$.$$.fragment,gi),RHr=i(gi),fm=n(gi,"P",{});var Cte=s(fm);PHr=r(Cte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),noe=n(Cte,"A",{href:!0});var MDt=s(noe);BHr=r(MDt,"from_pretrained()"),MDt.forEach(t),IHr=r(Cte," class method or the "),soe=n(Cte,"A",{href:!0});var EDt=s(soe);NHr=r(EDt,"from_config()"),EDt.forEach(t),qHr=r(Cte,` class
method.`),Cte.forEach(t),jHr=i(gi),C$=n(gi,"P",{});var yQe=s(C$);DHr=r(yQe,"This class cannot be instantiated directly using "),zwe=n(yQe,"CODE",{});var CDt=s(zwe);GHr=r(CDt,"__init__()"),CDt.forEach(t),OHr=r(yQe," (throws an error)."),yQe.forEach(t),VHr=i(gi),Yt=n(gi,"DIV",{class:!0});var C7=s(Yt);T(w$.$$.fragment,C7),XHr=i(C7),Qwe=n(C7,"P",{});var wDt=s(Qwe);zHr=r(wDt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),wDt.forEach(t),QHr=i(C7),gm=n(C7,"P",{});var wte=s(gm);WHr=r(wte,`Note:
Loading a model from its configuration file does `),Wwe=n(wte,"STRONG",{});var ADt=s(Wwe);HHr=r(ADt,"not"),ADt.forEach(t),UHr=r(wte,` load the model weights. It only affects the
model\u2019s configuration. Use `),loe=n(wte,"A",{href:!0});var LDt=s(loe);JHr=r(LDt,"from_pretrained()"),LDt.forEach(t),YHr=r(wte," to load the model weights."),wte.forEach(t),KHr=i(C7),T(PA.$$.fragment,C7),C7.forEach(t),ZHr=i(gi),Ur=n(gi,"DIV",{class:!0});var hi=s(Ur);T(A$.$$.fragment,hi),eUr=i(hi),Hwe=n(hi,"P",{});var yDt=s(Hwe);oUr=r(yDt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),yDt.forEach(t),rUr=i(hi),Ln=n(hi,"P",{});var w7=s(Ln);tUr=r(w7,"The model class to instantiate is selected based on the "),Uwe=n(w7,"CODE",{});var xDt=s(Uwe);aUr=r(xDt,"model_type"),xDt.forEach(t),nUr=r(w7,` property of the config object (either
passed as an argument or loaded from `),Jwe=n(w7,"CODE",{});var $Dt=s(Jwe);sUr=r($Dt,"pretrained_model_name_or_path"),$Dt.forEach(t),lUr=r(w7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ywe=n(w7,"CODE",{});var kDt=s(Ywe);iUr=r(kDt,"pretrained_model_name_or_path"),kDt.forEach(t),dUr=r(w7,":"),w7.forEach(t),cUr=i(hi),Ve=n(hi,"UL",{});var To=s(Ve);BA=n(To,"LI",{});var tOe=s(BA);Kwe=n(tOe,"STRONG",{});var SDt=s(Kwe);mUr=r(SDt,"albert"),SDt.forEach(t),fUr=r(tOe," \u2014 "),ioe=n(tOe,"A",{href:!0});var RDt=s(ioe);gUr=r(RDt,"FlaxAlbertForTokenClassification"),RDt.forEach(t),hUr=r(tOe," (ALBERT model)"),tOe.forEach(t),uUr=i(To),IA=n(To,"LI",{});var aOe=s(IA);Zwe=n(aOe,"STRONG",{});var PDt=s(Zwe);pUr=r(PDt,"bert"),PDt.forEach(t),_Ur=r(aOe," \u2014 "),doe=n(aOe,"A",{href:!0});var BDt=s(doe);bUr=r(BDt,"FlaxBertForTokenClassification"),BDt.forEach(t),vUr=r(aOe," (BERT model)"),aOe.forEach(t),FUr=i(To),NA=n(To,"LI",{});var nOe=s(NA);eAe=n(nOe,"STRONG",{});var IDt=s(eAe);TUr=r(IDt,"big_bird"),IDt.forEach(t),MUr=r(nOe," \u2014 "),coe=n(nOe,"A",{href:!0});var NDt=s(coe);EUr=r(NDt,"FlaxBigBirdForTokenClassification"),NDt.forEach(t),CUr=r(nOe," (BigBird model)"),nOe.forEach(t),wUr=i(To),qA=n(To,"LI",{});var sOe=s(qA);oAe=n(sOe,"STRONG",{});var qDt=s(oAe);AUr=r(qDt,"distilbert"),qDt.forEach(t),LUr=r(sOe," \u2014 "),moe=n(sOe,"A",{href:!0});var jDt=s(moe);yUr=r(jDt,"FlaxDistilBertForTokenClassification"),jDt.forEach(t),xUr=r(sOe," (DistilBERT model)"),sOe.forEach(t),$Ur=i(To),jA=n(To,"LI",{});var lOe=s(jA);rAe=n(lOe,"STRONG",{});var DDt=s(rAe);kUr=r(DDt,"electra"),DDt.forEach(t),SUr=r(lOe," \u2014 "),foe=n(lOe,"A",{href:!0});var GDt=s(foe);RUr=r(GDt,"FlaxElectraForTokenClassification"),GDt.forEach(t),PUr=r(lOe," (ELECTRA model)"),lOe.forEach(t),BUr=i(To),DA=n(To,"LI",{});var iOe=s(DA);tAe=n(iOe,"STRONG",{});var ODt=s(tAe);IUr=r(ODt,"roberta"),ODt.forEach(t),NUr=r(iOe," \u2014 "),goe=n(iOe,"A",{href:!0});var VDt=s(goe);qUr=r(VDt,"FlaxRobertaForTokenClassification"),VDt.forEach(t),jUr=r(iOe," (RoBERTa model)"),iOe.forEach(t),DUr=i(To),GA=n(To,"LI",{});var dOe=s(GA);aAe=n(dOe,"STRONG",{});var XDt=s(aAe);GUr=r(XDt,"roformer"),XDt.forEach(t),OUr=r(dOe," \u2014 "),hoe=n(dOe,"A",{href:!0});var zDt=s(hoe);VUr=r(zDt,"FlaxRoFormerForTokenClassification"),zDt.forEach(t),XUr=r(dOe," (RoFormer model)"),dOe.forEach(t),zUr=i(To),OA=n(To,"LI",{});var cOe=s(OA);nAe=n(cOe,"STRONG",{});var QDt=s(nAe);QUr=r(QDt,"xlm-roberta"),QDt.forEach(t),WUr=r(cOe," \u2014 "),uoe=n(cOe,"A",{href:!0});var WDt=s(uoe);HUr=r(WDt,"FlaxXLMRobertaForTokenClassification"),WDt.forEach(t),UUr=r(cOe," (XLM-RoBERTa model)"),cOe.forEach(t),To.forEach(t),JUr=i(hi),T(VA.$$.fragment,hi),hi.forEach(t),gi.forEach(t),FXe=i(m),hm=n(m,"H2",{class:!0});var xQe=s(hm);XA=n(xQe,"A",{id:!0,class:!0,href:!0});var HDt=s(XA);sAe=n(HDt,"SPAN",{});var UDt=s(sAe);T(L$.$$.fragment,UDt),UDt.forEach(t),HDt.forEach(t),YUr=i(xQe),lAe=n(xQe,"SPAN",{});var JDt=s(lAe);KUr=r(JDt,"FlaxAutoModelForMultipleChoice"),JDt.forEach(t),xQe.forEach(t),TXe=i(m),Mr=n(m,"DIV",{class:!0});var ui=s(Mr);T(y$.$$.fragment,ui),ZUr=i(ui),um=n(ui,"P",{});var Ate=s(um);eJr=r(Ate,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),poe=n(Ate,"A",{href:!0});var YDt=s(poe);oJr=r(YDt,"from_pretrained()"),YDt.forEach(t),rJr=r(Ate," class method or the "),_oe=n(Ate,"A",{href:!0});var KDt=s(_oe);tJr=r(KDt,"from_config()"),KDt.forEach(t),aJr=r(Ate,` class
method.`),Ate.forEach(t),nJr=i(ui),x$=n(ui,"P",{});var $Qe=s(x$);sJr=r($Qe,"This class cannot be instantiated directly using "),iAe=n($Qe,"CODE",{});var ZDt=s(iAe);lJr=r(ZDt,"__init__()"),ZDt.forEach(t),iJr=r($Qe," (throws an error)."),$Qe.forEach(t),dJr=i(ui),Kt=n(ui,"DIV",{class:!0});var A7=s(Kt);T($$.$$.fragment,A7),cJr=i(A7),dAe=n(A7,"P",{});var eGt=s(dAe);mJr=r(eGt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),eGt.forEach(t),fJr=i(A7),pm=n(A7,"P",{});var Lte=s(pm);gJr=r(Lte,`Note:
Loading a model from its configuration file does `),cAe=n(Lte,"STRONG",{});var oGt=s(cAe);hJr=r(oGt,"not"),oGt.forEach(t),uJr=r(Lte,` load the model weights. It only affects the
model\u2019s configuration. Use `),boe=n(Lte,"A",{href:!0});var rGt=s(boe);pJr=r(rGt,"from_pretrained()"),rGt.forEach(t),_Jr=r(Lte," to load the model weights."),Lte.forEach(t),bJr=i(A7),T(zA.$$.fragment,A7),A7.forEach(t),vJr=i(ui),Jr=n(ui,"DIV",{class:!0});var pi=s(Jr);T(k$.$$.fragment,pi),FJr=i(pi),mAe=n(pi,"P",{});var tGt=s(mAe);TJr=r(tGt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),tGt.forEach(t),MJr=i(pi),yn=n(pi,"P",{});var L7=s(yn);EJr=r(L7,"The model class to instantiate is selected based on the "),fAe=n(L7,"CODE",{});var aGt=s(fAe);CJr=r(aGt,"model_type"),aGt.forEach(t),wJr=r(L7,` property of the config object (either
passed as an argument or loaded from `),gAe=n(L7,"CODE",{});var nGt=s(gAe);AJr=r(nGt,"pretrained_model_name_or_path"),nGt.forEach(t),LJr=r(L7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hAe=n(L7,"CODE",{});var sGt=s(hAe);yJr=r(sGt,"pretrained_model_name_or_path"),sGt.forEach(t),xJr=r(L7,":"),L7.forEach(t),$Jr=i(pi),Xe=n(pi,"UL",{});var Mo=s(Xe);QA=n(Mo,"LI",{});var mOe=s(QA);uAe=n(mOe,"STRONG",{});var lGt=s(uAe);kJr=r(lGt,"albert"),lGt.forEach(t),SJr=r(mOe," \u2014 "),voe=n(mOe,"A",{href:!0});var iGt=s(voe);RJr=r(iGt,"FlaxAlbertForMultipleChoice"),iGt.forEach(t),PJr=r(mOe," (ALBERT model)"),mOe.forEach(t),BJr=i(Mo),WA=n(Mo,"LI",{});var fOe=s(WA);pAe=n(fOe,"STRONG",{});var dGt=s(pAe);IJr=r(dGt,"bert"),dGt.forEach(t),NJr=r(fOe," \u2014 "),Foe=n(fOe,"A",{href:!0});var cGt=s(Foe);qJr=r(cGt,"FlaxBertForMultipleChoice"),cGt.forEach(t),jJr=r(fOe," (BERT model)"),fOe.forEach(t),DJr=i(Mo),HA=n(Mo,"LI",{});var gOe=s(HA);_Ae=n(gOe,"STRONG",{});var mGt=s(_Ae);GJr=r(mGt,"big_bird"),mGt.forEach(t),OJr=r(gOe," \u2014 "),Toe=n(gOe,"A",{href:!0});var fGt=s(Toe);VJr=r(fGt,"FlaxBigBirdForMultipleChoice"),fGt.forEach(t),XJr=r(gOe," (BigBird model)"),gOe.forEach(t),zJr=i(Mo),UA=n(Mo,"LI",{});var hOe=s(UA);bAe=n(hOe,"STRONG",{});var gGt=s(bAe);QJr=r(gGt,"distilbert"),gGt.forEach(t),WJr=r(hOe," \u2014 "),Moe=n(hOe,"A",{href:!0});var hGt=s(Moe);HJr=r(hGt,"FlaxDistilBertForMultipleChoice"),hGt.forEach(t),UJr=r(hOe," (DistilBERT model)"),hOe.forEach(t),JJr=i(Mo),JA=n(Mo,"LI",{});var uOe=s(JA);vAe=n(uOe,"STRONG",{});var uGt=s(vAe);YJr=r(uGt,"electra"),uGt.forEach(t),KJr=r(uOe," \u2014 "),Eoe=n(uOe,"A",{href:!0});var pGt=s(Eoe);ZJr=r(pGt,"FlaxElectraForMultipleChoice"),pGt.forEach(t),eYr=r(uOe," (ELECTRA model)"),uOe.forEach(t),oYr=i(Mo),YA=n(Mo,"LI",{});var pOe=s(YA);FAe=n(pOe,"STRONG",{});var _Gt=s(FAe);rYr=r(_Gt,"roberta"),_Gt.forEach(t),tYr=r(pOe," \u2014 "),Coe=n(pOe,"A",{href:!0});var bGt=s(Coe);aYr=r(bGt,"FlaxRobertaForMultipleChoice"),bGt.forEach(t),nYr=r(pOe," (RoBERTa model)"),pOe.forEach(t),sYr=i(Mo),KA=n(Mo,"LI",{});var _Oe=s(KA);TAe=n(_Oe,"STRONG",{});var vGt=s(TAe);lYr=r(vGt,"roformer"),vGt.forEach(t),iYr=r(_Oe," \u2014 "),woe=n(_Oe,"A",{href:!0});var FGt=s(woe);dYr=r(FGt,"FlaxRoFormerForMultipleChoice"),FGt.forEach(t),cYr=r(_Oe," (RoFormer model)"),_Oe.forEach(t),mYr=i(Mo),ZA=n(Mo,"LI",{});var bOe=s(ZA);MAe=n(bOe,"STRONG",{});var TGt=s(MAe);fYr=r(TGt,"xlm-roberta"),TGt.forEach(t),gYr=r(bOe," \u2014 "),Aoe=n(bOe,"A",{href:!0});var MGt=s(Aoe);hYr=r(MGt,"FlaxXLMRobertaForMultipleChoice"),MGt.forEach(t),uYr=r(bOe," (XLM-RoBERTa model)"),bOe.forEach(t),Mo.forEach(t),pYr=i(pi),T(e6.$$.fragment,pi),pi.forEach(t),ui.forEach(t),MXe=i(m),_m=n(m,"H2",{class:!0});var kQe=s(_m);o6=n(kQe,"A",{id:!0,class:!0,href:!0});var EGt=s(o6);EAe=n(EGt,"SPAN",{});var CGt=s(EAe);T(S$.$$.fragment,CGt),CGt.forEach(t),EGt.forEach(t),_Yr=i(kQe),CAe=n(kQe,"SPAN",{});var wGt=s(CAe);bYr=r(wGt,"FlaxAutoModelForNextSentencePrediction"),wGt.forEach(t),kQe.forEach(t),EXe=i(m),Er=n(m,"DIV",{class:!0});var _i=s(Er);T(R$.$$.fragment,_i),vYr=i(_i),bm=n(_i,"P",{});var yte=s(bm);FYr=r(yte,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Loe=n(yte,"A",{href:!0});var AGt=s(Loe);TYr=r(AGt,"from_pretrained()"),AGt.forEach(t),MYr=r(yte," class method or the "),yoe=n(yte,"A",{href:!0});var LGt=s(yoe);EYr=r(LGt,"from_config()"),LGt.forEach(t),CYr=r(yte,` class
method.`),yte.forEach(t),wYr=i(_i),P$=n(_i,"P",{});var SQe=s(P$);AYr=r(SQe,"This class cannot be instantiated directly using "),wAe=n(SQe,"CODE",{});var yGt=s(wAe);LYr=r(yGt,"__init__()"),yGt.forEach(t),yYr=r(SQe," (throws an error)."),SQe.forEach(t),xYr=i(_i),Zt=n(_i,"DIV",{class:!0});var y7=s(Zt);T(B$.$$.fragment,y7),$Yr=i(y7),AAe=n(y7,"P",{});var xGt=s(AAe);kYr=r(xGt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),xGt.forEach(t),SYr=i(y7),vm=n(y7,"P",{});var xte=s(vm);RYr=r(xte,`Note:
Loading a model from its configuration file does `),LAe=n(xte,"STRONG",{});var $Gt=s(LAe);PYr=r($Gt,"not"),$Gt.forEach(t),BYr=r(xte,` load the model weights. It only affects the
model\u2019s configuration. Use `),xoe=n(xte,"A",{href:!0});var kGt=s(xoe);IYr=r(kGt,"from_pretrained()"),kGt.forEach(t),NYr=r(xte," to load the model weights."),xte.forEach(t),qYr=i(y7),T(r6.$$.fragment,y7),y7.forEach(t),jYr=i(_i),Yr=n(_i,"DIV",{class:!0});var bi=s(Yr);T(I$.$$.fragment,bi),DYr=i(bi),yAe=n(bi,"P",{});var SGt=s(yAe);GYr=r(SGt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),SGt.forEach(t),OYr=i(bi),xn=n(bi,"P",{});var x7=s(xn);VYr=r(x7,"The model class to instantiate is selected based on the "),xAe=n(x7,"CODE",{});var RGt=s(xAe);XYr=r(RGt,"model_type"),RGt.forEach(t),zYr=r(x7,` property of the config object (either
passed as an argument or loaded from `),$Ae=n(x7,"CODE",{});var PGt=s($Ae);QYr=r(PGt,"pretrained_model_name_or_path"),PGt.forEach(t),WYr=r(x7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kAe=n(x7,"CODE",{});var BGt=s(kAe);HYr=r(BGt,"pretrained_model_name_or_path"),BGt.forEach(t),UYr=r(x7,":"),x7.forEach(t),JYr=i(bi),SAe=n(bi,"UL",{});var IGt=s(SAe);t6=n(IGt,"LI",{});var vOe=s(t6);RAe=n(vOe,"STRONG",{});var NGt=s(RAe);YYr=r(NGt,"bert"),NGt.forEach(t),KYr=r(vOe," \u2014 "),$oe=n(vOe,"A",{href:!0});var qGt=s($oe);ZYr=r(qGt,"FlaxBertForNextSentencePrediction"),qGt.forEach(t),eKr=r(vOe," (BERT model)"),vOe.forEach(t),IGt.forEach(t),oKr=i(bi),T(a6.$$.fragment,bi),bi.forEach(t),_i.forEach(t),CXe=i(m),Fm=n(m,"H2",{class:!0});var RQe=s(Fm);n6=n(RQe,"A",{id:!0,class:!0,href:!0});var jGt=s(n6);PAe=n(jGt,"SPAN",{});var DGt=s(PAe);T(N$.$$.fragment,DGt),DGt.forEach(t),jGt.forEach(t),rKr=i(RQe),BAe=n(RQe,"SPAN",{});var GGt=s(BAe);tKr=r(GGt,"FlaxAutoModelForImageClassification"),GGt.forEach(t),RQe.forEach(t),wXe=i(m),Cr=n(m,"DIV",{class:!0});var vi=s(Cr);T(q$.$$.fragment,vi),aKr=i(vi),Tm=n(vi,"P",{});var $te=s(Tm);nKr=r($te,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),koe=n($te,"A",{href:!0});var OGt=s(koe);sKr=r(OGt,"from_pretrained()"),OGt.forEach(t),lKr=r($te," class method or the "),Soe=n($te,"A",{href:!0});var VGt=s(Soe);iKr=r(VGt,"from_config()"),VGt.forEach(t),dKr=r($te,` class
method.`),$te.forEach(t),cKr=i(vi),j$=n(vi,"P",{});var PQe=s(j$);mKr=r(PQe,"This class cannot be instantiated directly using "),IAe=n(PQe,"CODE",{});var XGt=s(IAe);fKr=r(XGt,"__init__()"),XGt.forEach(t),gKr=r(PQe," (throws an error)."),PQe.forEach(t),hKr=i(vi),ea=n(vi,"DIV",{class:!0});var $7=s(ea);T(D$.$$.fragment,$7),uKr=i($7),NAe=n($7,"P",{});var zGt=s(NAe);pKr=r(zGt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),zGt.forEach(t),_Kr=i($7),Mm=n($7,"P",{});var kte=s(Mm);bKr=r(kte,`Note:
Loading a model from its configuration file does `),qAe=n(kte,"STRONG",{});var QGt=s(qAe);vKr=r(QGt,"not"),QGt.forEach(t),FKr=r(kte,` load the model weights. It only affects the
model\u2019s configuration. Use `),Roe=n(kte,"A",{href:!0});var WGt=s(Roe);TKr=r(WGt,"from_pretrained()"),WGt.forEach(t),MKr=r(kte," to load the model weights."),kte.forEach(t),EKr=i($7),T(s6.$$.fragment,$7),$7.forEach(t),CKr=i(vi),Kr=n(vi,"DIV",{class:!0});var Fi=s(Kr);T(G$.$$.fragment,Fi),wKr=i(Fi),jAe=n(Fi,"P",{});var HGt=s(jAe);AKr=r(HGt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),HGt.forEach(t),LKr=i(Fi),$n=n(Fi,"P",{});var k7=s($n);yKr=r(k7,"The model class to instantiate is selected based on the "),DAe=n(k7,"CODE",{});var UGt=s(DAe);xKr=r(UGt,"model_type"),UGt.forEach(t),$Kr=r(k7,` property of the config object (either
passed as an argument or loaded from `),GAe=n(k7,"CODE",{});var JGt=s(GAe);kKr=r(JGt,"pretrained_model_name_or_path"),JGt.forEach(t),SKr=r(k7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),OAe=n(k7,"CODE",{});var YGt=s(OAe);RKr=r(YGt,"pretrained_model_name_or_path"),YGt.forEach(t),PKr=r(k7,":"),k7.forEach(t),BKr=i(Fi),O$=n(Fi,"UL",{});var BQe=s(O$);l6=n(BQe,"LI",{});var FOe=s(l6);VAe=n(FOe,"STRONG",{});var KGt=s(VAe);IKr=r(KGt,"beit"),KGt.forEach(t),NKr=r(FOe," \u2014 "),Poe=n(FOe,"A",{href:!0});var ZGt=s(Poe);qKr=r(ZGt,"FlaxBeitForImageClassification"),ZGt.forEach(t),jKr=r(FOe," (BEiT model)"),FOe.forEach(t),DKr=i(BQe),i6=n(BQe,"LI",{});var TOe=s(i6);XAe=n(TOe,"STRONG",{});var eOt=s(XAe);GKr=r(eOt,"vit"),eOt.forEach(t),OKr=r(TOe," \u2014 "),Boe=n(TOe,"A",{href:!0});var oOt=s(Boe);VKr=r(oOt,"FlaxViTForImageClassification"),oOt.forEach(t),XKr=r(TOe," (ViT model)"),TOe.forEach(t),BQe.forEach(t),zKr=i(Fi),T(d6.$$.fragment,Fi),Fi.forEach(t),vi.forEach(t),AXe=i(m),Em=n(m,"H2",{class:!0});var IQe=s(Em);c6=n(IQe,"A",{id:!0,class:!0,href:!0});var rOt=s(c6);zAe=n(rOt,"SPAN",{});var tOt=s(zAe);T(V$.$$.fragment,tOt),tOt.forEach(t),rOt.forEach(t),QKr=i(IQe),QAe=n(IQe,"SPAN",{});var aOt=s(QAe);WKr=r(aOt,"FlaxAutoModelForVision2Seq"),aOt.forEach(t),IQe.forEach(t),LXe=i(m),wr=n(m,"DIV",{class:!0});var Ti=s(wr);T(X$.$$.fragment,Ti),HKr=i(Ti),Cm=n(Ti,"P",{});var Ste=s(Cm);UKr=r(Ste,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Ioe=n(Ste,"A",{href:!0});var nOt=s(Ioe);JKr=r(nOt,"from_pretrained()"),nOt.forEach(t),YKr=r(Ste," class method or the "),Noe=n(Ste,"A",{href:!0});var sOt=s(Noe);KKr=r(sOt,"from_config()"),sOt.forEach(t),ZKr=r(Ste,` class
method.`),Ste.forEach(t),eZr=i(Ti),z$=n(Ti,"P",{});var NQe=s(z$);oZr=r(NQe,"This class cannot be instantiated directly using "),WAe=n(NQe,"CODE",{});var lOt=s(WAe);rZr=r(lOt,"__init__()"),lOt.forEach(t),tZr=r(NQe," (throws an error)."),NQe.forEach(t),aZr=i(Ti),oa=n(Ti,"DIV",{class:!0});var S7=s(oa);T(Q$.$$.fragment,S7),nZr=i(S7),HAe=n(S7,"P",{});var iOt=s(HAe);sZr=r(iOt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),iOt.forEach(t),lZr=i(S7),wm=n(S7,"P",{});var Rte=s(wm);iZr=r(Rte,`Note:
Loading a model from its configuration file does `),UAe=n(Rte,"STRONG",{});var dOt=s(UAe);dZr=r(dOt,"not"),dOt.forEach(t),cZr=r(Rte,` load the model weights. It only affects the
model\u2019s configuration. Use `),qoe=n(Rte,"A",{href:!0});var cOt=s(qoe);mZr=r(cOt,"from_pretrained()"),cOt.forEach(t),fZr=r(Rte," to load the model weights."),Rte.forEach(t),gZr=i(S7),T(m6.$$.fragment,S7),S7.forEach(t),hZr=i(Ti),Zr=n(Ti,"DIV",{class:!0});var Mi=s(Zr);T(W$.$$.fragment,Mi),uZr=i(Mi),JAe=n(Mi,"P",{});var mOt=s(JAe);pZr=r(mOt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),mOt.forEach(t),_Zr=i(Mi),kn=n(Mi,"P",{});var R7=s(kn);bZr=r(R7,"The model class to instantiate is selected based on the "),YAe=n(R7,"CODE",{});var fOt=s(YAe);vZr=r(fOt,"model_type"),fOt.forEach(t),FZr=r(R7,` property of the config object (either
passed as an argument or loaded from `),KAe=n(R7,"CODE",{});var gOt=s(KAe);TZr=r(gOt,"pretrained_model_name_or_path"),gOt.forEach(t),MZr=r(R7,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ZAe=n(R7,"CODE",{});var hOt=s(ZAe);EZr=r(hOt,"pretrained_model_name_or_path"),hOt.forEach(t),CZr=r(R7,":"),R7.forEach(t),wZr=i(Mi),e6e=n(Mi,"UL",{});var uOt=s(e6e);f6=n(uOt,"LI",{});var MOe=s(f6);o6e=n(MOe,"STRONG",{});var pOt=s(o6e);AZr=r(pOt,"vision-encoder-decoder"),pOt.forEach(t),LZr=r(MOe," \u2014 "),joe=n(MOe,"A",{href:!0});var _Ot=s(joe);yZr=r(_Ot,"FlaxVisionEncoderDecoderModel"),_Ot.forEach(t),xZr=r(MOe," (Vision Encoder decoder model)"),MOe.forEach(t),uOt.forEach(t),$Zr=i(Mi),T(g6.$$.fragment,Mi),Mi.forEach(t),Ti.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(EXt)),c(f,"id","auto-classes"),c(f,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(f,"href","#auto-classes"),c(u,"class","relative group"),c(Rn,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoConfig"),c(Bn,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoModel"),c(In,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoTokenizer"),c(xi,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertModel"),c(Rm,"id","extending-the-auto-classes"),c(Rm,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Rm,"href","#extending-the-auto-classes"),c($i,"class","relative group"),c(Bm,"id","transformers.AutoConfig"),c(Bm,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Bm,"href","#transformers.AutoConfig"),c(ki,"class","relative group"),c(vS,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(FS,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig"),c(TS,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartConfig"),c(MS,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig"),c(ES,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertConfig"),c(CS,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(wS,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig"),c(AS,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(LS,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(yS,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(xS,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig"),c($S,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig"),c(kS,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig"),c(SS,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig"),c(RS,"href","/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenConfig"),c(PS,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig"),c(BS,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig"),c(IS,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig"),c(NS,"href","/docs/transformers/main/en/model_doc/cvt#transformers.CvtConfig"),c(qS,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(jS,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(DS,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(GS,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig"),c(OS,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(VS,"href","/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(XS,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig"),c(zS,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig"),c(QS,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig"),c(WS,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRConfig"),c(HS,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTConfig"),c(US,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig"),c(JS,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(YS,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig"),c(KS,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaConfig"),c(ZS,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig"),c(eR,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig"),c(oR,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig"),c(rR,"href","/docs/transformers/main/en/model_doc/glpn#transformers.GLPNConfig"),c(tR,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config"),c(aR,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(nR,"href","/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXConfig"),c(sR,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig"),c(lR,"href","/docs/transformers/main/en/model_doc/groupvit#transformers.GroupViTConfig"),c(iR,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig"),c(dR,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig"),c(cR,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(mR,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(fR,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(gR,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config"),c(hR,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDConfig"),c(uR,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitConfig"),c(pR,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig"),c(_R,"href","/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config"),c(bR,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig"),c(vR,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig"),c(FR,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Config"),c(TR,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig"),c(MR,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(ER,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig"),c(CR,"href","/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTConfig"),c(wR,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(AR,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(LR,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig"),c(yR,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config"),c(xR,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig"),c($R,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(kR,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(SR,"href","/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig"),c(RR,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig"),c(PR,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig"),c(BR,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig"),c(IR,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(NR,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(qR,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(jR,"href","/docs/transformers/main/en/model_doc/rag#transformers.RagConfig"),c(DR,"href","/docs/transformers/main/en/model_doc/realm#transformers.RealmConfig"),c(GR,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig"),c(OR,"href","/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig"),c(VR,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig"),c(XR,"href","/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig"),c(zR,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertConfig"),c(QR,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig"),c(WR,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig"),c(HR,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig"),c(UR,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig"),c(JR,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig"),c(YR,"href","/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(KR,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(ZR,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(eP,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig"),c(oP,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(rP,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig"),c(tP,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Config"),c(aP,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig"),c(nP,"href","/docs/transformers/main/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),c(sP,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(lP,"href","/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRConfig"),c(iP,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(dP,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(cP,"href","/docs/transformers/main/en/model_doc/van#transformers.VanConfig"),c(mP,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltConfig"),c(fP,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(gP,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(hP,"href","/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(uP,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig"),c(pP,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(_P,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(bP,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(vP,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig"),c(FP,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig"),c(TP,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig"),c(MP,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(EP,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(CP,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(wP,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig"),c(AP,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosConfig"),c(LP,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wg,"id","transformers.AutoTokenizer"),c(Wg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Wg,"href","#transformers.AutoTokenizer"),c(Ri,"class","relative group"),c(yP,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(xP,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizer"),c($P,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(kP,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartTokenizer"),c(SP,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartTokenizerFast"),c(RP,"href","/docs/transformers/main/en/model_doc/barthez#transformers.BarthezTokenizer"),c(PP,"href","/docs/transformers/main/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(BP,"href","/docs/transformers/main/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(IP,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(NP,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(qP,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(jP,"href","/docs/transformers/main/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(DP,"href","/docs/transformers/main/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(GP,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(OP,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(VP,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(XP,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(zP,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(QP,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(WP,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(HP,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomTokenizerFast"),c(UP,"href","/docs/transformers/main/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(JP,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertTokenizer"),c(YP,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(KP,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineTokenizer"),c(ZP,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizer"),c(eB,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(oB,"href","/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenTokenizer"),c(rB,"href","/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenTokenizerFast"),c(tB,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(aB,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(nB,"href","/docs/transformers/main/en/model_doc/cpm#transformers.CpmTokenizer"),c(sB,"href","/docs/transformers/main/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(lB,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(iB,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),c(dB,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(cB,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaTokenizer"),c(mB,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(fB,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(gB,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(hB,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(uB,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(pB,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(_B,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(bB,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraTokenizer"),c(vB,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(FB,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(TB,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetTokenizer"),c(MB,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(EB,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(CB,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelTokenizer"),c(wB,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(AB,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(LB,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(yB,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(xB,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c($B,"href","/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXTokenizerFast"),c(kB,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(SB,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(RB,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizer"),c(PB,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(BB,"href","/docs/transformers/main/en/model_doc/herbert#transformers.HerbertTokenizer"),c(IB,"href","/docs/transformers/main/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(NB,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(qB,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),c(jB,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(DB,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(GB,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(OB,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(VB,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(XB,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),c(zB,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),c(QB,"href","/docs/transformers/main/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(WB,"href","/docs/transformers/main/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(HB,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDTokenizer"),c(UB,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDTokenizerFast"),c(JB,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerTokenizer"),c(YB,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(KB,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Tokenizer"),c(ZB,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5TokenizerFast"),c(eI,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeTokenizer"),c(oI,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(rI,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(tI,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(aI,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianTokenizer"),c(nI,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartTokenizer"),c(sI,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(lI,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(iI,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(dI,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(cI,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(mI,"href","/docs/transformers/main/en/model_doc/mluke#transformers.MLukeTokenizer"),c(fI,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(gI,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(hI,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(uI,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(pI,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Tokenizer"),c(_I,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5TokenizerFast"),c(bI,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(vI,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(FI,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizer"),c(TI,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(MI,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(EI,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(CI,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(wI,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(AI,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(LI,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(yI,"href","/docs/transformers/main/en/model_doc/phobert#transformers.PhobertTokenizer"),c(xI,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartTokenizer"),c($I,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(kI,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(SI,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(RI,"href","/docs/transformers/main/en/model_doc/rag#transformers.RagTokenizer"),c(PI,"href","/docs/transformers/main/en/model_doc/realm#transformers.RealmTokenizer"),c(BI,"href","/docs/transformers/main/en/model_doc/realm#transformers.RealmTokenizerFast"),c(II,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerTokenizer"),c(NI,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(qI,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertTokenizer"),c(jI,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(DI,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(GI,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(OI,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),c(VI,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(XI,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(zI,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(QI,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(WI,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(HI,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterTokenizer"),c(UI,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(JI,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(YI,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(KI,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Tokenizer"),c(ZI,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5TokenizerFast"),c(eN,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasTokenizer"),c(oN,"href","/docs/transformers/main/en/model_doc/tapex#transformers.TapexTokenizer"),c(rN,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(tN,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(aN,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(nN,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(sN,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(lN,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(iN,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(dN,"href","/docs/transformers/main/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(cN,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMTokenizer"),c(mN,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(fN,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMTokenizer"),c(gN,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(hN,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(uN,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(pN,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),c(_N,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(bN,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(vN,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(FN,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizer"),c(TN,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xh,"id","transformers.AutoFeatureExtractor"),c(xh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(xh,"href","#transformers.AutoFeatureExtractor"),c(Pi,"class","relative group"),c(MN,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(EN,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(CN,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(wN,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(AN,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(LN,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(yN,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(xN,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c($N,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(kN,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(SN,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(RN,"href","/docs/transformers/main/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(PN,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(BN,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(IN,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTFeatureExtractor"),c(NN,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(qN,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3FeatureExtractor"),c(jN,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitFeatureExtractor"),c(DN,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(GN,"href","/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTFeatureExtractor"),c(ON,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(VN,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(XN,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(zN,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(QN,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(WN,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(HN,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(UN,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(JN,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltFeatureExtractor"),c(YN,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(KN,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(ZN,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(eq,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(oq,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mu,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fu,"id","transformers.AutoProcessor"),c(fu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(fu,"href","#transformers.AutoProcessor"),c(Bi,"class","relative group"),c(rq,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(tq,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPProcessor"),c(aq,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPProcessor"),c(nq,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(sq,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Processor"),c(lq,"href","/docs/transformers/main/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(iq,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(dq,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(cq,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(mq,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(fq,"href","/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRProcessor"),c(gq,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(hq,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(uq,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltProcessor"),c(pq,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(_q,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(bq,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(vq,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ru,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Pu,"id","transformers.AutoModel"),c(Pu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Pu,"href","#transformers.AutoModel"),c(Ni,"class","relative group"),c(Fq,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tq,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Mq,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Eq,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertModel"),c(Cq,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartModel"),c(wq,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitModel"),c(Aq,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertModel"),c(Lq,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(yq,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdModel"),c(xq,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c($q,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(kq,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(Sq,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomModel"),c(Rq,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertModel"),c(Pq,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineModel"),c(Bq,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPModel"),c(Iq,"href","/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenModel"),c(Nq,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertModel"),c(qq,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextModel"),c(jq,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLModel"),c(Dq,"href","/docs/transformers/main/en/model_doc/cvt#transformers.CvtModel"),c(Gq,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(Oq,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(Vq,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(Xq,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaModel"),c(zq,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(Qq,"href","/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(Wq,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTModel"),c(Hq,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrModel"),c(Uq,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertModel"),c(Jq,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(Yq,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTModel"),c(Kq,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraModel"),c(Zq,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertModel"),c(ej,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaModel"),c(oj,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetModel"),c(rj,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTModel"),c(tj,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelModel"),c(aj,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelBaseModel"),c(nj,"href","/docs/transformers/main/en/model_doc/glpn#transformers.GLPNModel"),c(sj,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Model"),c(lj,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(ij,"href","/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXModel"),c(dj,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJModel"),c(cj,"href","/docs/transformers/main/en/model_doc/groupvit#transformers.GroupViTModel"),c(mj,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertModel"),c(fj,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertModel"),c(gj,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(hj,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(uj,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(pj,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model"),c(_j,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDModel"),c(bj,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitModel"),c(vj,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerModel"),c(Fj,"href","/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Model"),c(Tj,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeModel"),c(Mj,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertModel"),c(Ej,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Model"),c(Cj,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianModel"),c(wj,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerModel"),c(Aj,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartModel"),c(Lj,"href","/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTModel"),c(yj,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(xj,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertModel"),c($j,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetModel"),c(kj,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5Model"),c(Sj,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaModel"),c(Rj,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerModel"),c(Pj,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(Bj,"href","/docs/transformers/main/en/model_doc/opt#transformers.OPTModel"),c(Ij,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusModel"),c(Nj,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverModel"),c(qj,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartModel"),c(jj,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerModel"),c(Dj,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(Gj,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertModel"),c(Oj,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModel"),c(Vj,"href","/docs/transformers/main/en/model_doc/regnet#transformers.RegNetModel"),c(Xj,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertModel"),c(zj,"href","/docs/transformers/main/en/model_doc/resnet#transformers.ResNetModel"),c(Qj,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel"),c(Wj,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaModel"),c(Hj,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerModel"),c(Uj,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerModel"),c(Jj,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWModel"),c(Yj,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDModel"),c(Kj,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(Zj,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterModel"),c(eD,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(oD,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinModel"),c(rD,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Model"),c(tD,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasModel"),c(aD,"href","/docs/transformers/main/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),c(nD,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(sD,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechModel"),c(lD,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(iD,"href","/docs/transformers/main/en/model_doc/van#transformers.VanModel"),c(dD,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltModel"),c(cD,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(mD,"href","/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertModel"),c(fD,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTModel"),c(gD,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(hD,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(uD,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(pD,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMModel"),c(_D,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMModel"),c(bD,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMModel"),c(vD,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(FD,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(TD,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(MD,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetModel"),c(ED,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosModel"),c(CD,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(q_,"id","transformers.AutoModelForPreTraining"),c(q_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(q_,"href","#transformers.AutoModelForPreTraining"),c(Di,"class","relative group"),c(wD,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(AD,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(LD,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yD,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForPreTraining"),c(xD,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),c($D,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForPreTraining"),c(kD,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(SD,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomForCausalLM"),c(RD,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(PD,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(BD,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(ID,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(ND,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(qD,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(jD,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForPreTraining"),c(DD,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(GD,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaForPreTraining"),c(OD,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForPreTraining"),c(VD,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(XD,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(zD,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(QD,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(WD,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(HD,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(UD,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(JD,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(YD,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(KD,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(ZD,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForPreTraining"),c(eG,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(oG,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel"),c(rG,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(tG,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(aG,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(nG,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(sG,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(lG,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(iG,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(dG,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(cG,"href","/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(mG,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(fG,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(gG,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(hG,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(uG,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(pG,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(_G,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(S2,"id","transformers.AutoModelForCausalLM"),c(S2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(S2,"href","#transformers.AutoModelForCausalLM"),c(Vi,"class","relative group"),c(bG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TG,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForCausalLM"),c(MG,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertLMHeadModel"),c(EG,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(CG,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(wG,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(AG,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(LG,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(yG,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomForCausalLM"),c(xG,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForCausalLM"),c($G,"href","/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenForCausalLM"),c(kG,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(SG,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(RG,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForCausalLM"),c(PG,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(BG,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(IG,"href","/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM"),c(NG,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(qG,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianForCausalLM"),c(jG,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForCausalLM"),c(DG,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(GG,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(OG,"href","/docs/transformers/main/en/model_doc/opt#transformers.OPTForCausalLM"),c(VG,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(XG,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(zG,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(QG,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(WG,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(HG,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(UG,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(JG,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(YG,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(KG,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(ZG,"href","/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(eO,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(oO,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(rO,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(tO,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(aO,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(nO,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tb,"id","transformers.AutoModelForMaskedLM"),c(Tb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Tb,"href","#transformers.AutoModelForMaskedLM"),c(Qi,"class","relative group"),c(sO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dO,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(cO,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(mO,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForMaskedLM"),c(fO,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(gO,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(hO,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(uO,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(pO,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(_O,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(bO,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(vO,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(FO,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(TO,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(MO,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(EO,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(CO,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(wO,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(AO,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeForMaskedLM"),c(LO,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(yO,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(xO,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c($O,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(kO,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForMaskedLM"),c(SO,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(RO,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(PO,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(BO,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(IO,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(NO,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(qO,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(jO,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(DO,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(GO,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(OO,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(VO,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(XO,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iv,"id","transformers.AutoModelForSeq2SeqLM"),c(iv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(iv,"href","#transformers.AutoModelForSeq2SeqLM"),c(Ui,"class","relative group"),c(zO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(QO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(WO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HO,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(UO,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(JO,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(YO,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(KO,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(ZO,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(eV,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(oV,"href","/docs/transformers/main/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration"),c(rV,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(tV,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianMTModel"),c(aV,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(nV,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(sV,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(lV,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(iV,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(dV,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(cV,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xv,"id","transformers.AutoModelForSequenceClassification"),c(xv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(xv,"href","#transformers.AutoModelForSequenceClassification"),c(Ki,"class","relative group"),c(mV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hV,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(uV,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForSequenceClassification"),c(pV,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForSequenceClassification"),c(_V,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(bV,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(vV,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomForSequenceClassification"),c(FV,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(TV,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(MV,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(EV,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(CV,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(wV,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(AV,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(LV,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(yV,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(xV,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c($V,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(kV,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(SV,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(RV,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(PV,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(BV,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(IV,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(NV,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(qV,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification"),c(jV,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDForSequenceClassification"),c(DV,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(GV,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(OV,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(VV,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(XV,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(zV,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForSequenceClassification"),c(QV,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(WV,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(HV,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(UV,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(JV,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(YV,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(KV,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(ZV,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(eX,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(oX,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(rX,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(tX,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(aX,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(nX,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(sX,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(lX,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(iX,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(y1,"id","transformers.AutoModelForMultipleChoice"),c(y1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(y1,"href","#transformers.AutoModelForMultipleChoice"),c(od,"class","relative group"),c(dX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fX,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(gX,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForMultipleChoice"),c(hX,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(uX,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(pX,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(_X,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(bX,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(vX,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(FX,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(TX,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(MX,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(EX,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(CX,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(wX,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(AX,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(LX,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(yX,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(xX,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c($X,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForMultipleChoice"),c(kX,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(SX,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(RX,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(PX,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(BX,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(IX,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(NX,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(qX,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(jX,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(DX,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(GX,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iF,"id","transformers.AutoModelForNextSentencePrediction"),c(iF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(iF,"href","#transformers.AutoModelForNextSentencePrediction"),c(ad,"class","relative group"),c(OX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zX,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(QX,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(WX,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(HX,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(UX,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction"),c(JX,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bF,"id","transformers.AutoModelForTokenClassification"),c(bF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bF,"href","#transformers.AutoModelForTokenClassification"),c(ld,"class","relative group"),c(YX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ez,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(oz,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForTokenClassification"),c(rz,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(tz,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomForTokenClassification"),c(az,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(nz,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForTokenClassification"),c(sz,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(lz,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(iz,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(dz,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(cz,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(mz,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(fz,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(gz,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(hz,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(uz,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(pz,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(_z,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(bz,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(vz,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification"),c(Fz,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(Tz,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(Mz,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(Ez,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(Cz,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForTokenClassification"),c(wz,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(Az,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(Lz,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(yz,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(xz,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c($z,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(kz,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(Sz,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(Rz,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(Pz,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(Bz,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aT,"id","transformers.AutoModelForQuestionAnswering"),c(aT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(aT,"href","#transformers.AutoModelForQuestionAnswering"),c(cd,"class","relative group"),c(Iz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jz,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(Dz,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(Gz,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(Oz,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(Vz,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(Xz,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(zz,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(Qz,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(Wz,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(Hz,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(Uz,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(Jz,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(Yz,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(Kz,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(Zz,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(eQ,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(oQ,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(rQ,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(tQ,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(aQ,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),c(nQ,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(sQ,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(lQ,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(iQ,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(dQ,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(cQ,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(mQ,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(fQ,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForQuestionAnswering"),c(gQ,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(hQ,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(uQ,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(pQ,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(_Q,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(bQ,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(vQ,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(FQ,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(TQ,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(MQ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(EQ,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(CQ,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(wQ,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UT,"id","transformers.AutoModelForTableQuestionAnswering"),c(UT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(UT,"href","#transformers.AutoModelForTableQuestionAnswering"),c(gd,"class","relative group"),c(AQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xQ,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eM,"id","transformers.AutoModelForImageClassification"),c(eM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(eM,"href","#transformers.AutoModelForImageClassification"),c(pd,"class","relative group"),c($Q,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(SQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RQ,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitForImageClassification"),c(PQ,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(BQ,"href","/docs/transformers/main/en/model_doc/cvt#transformers.CvtForImageClassification"),c(IQ,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(NQ,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassification"),c(qQ,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(jQ,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(DQ,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitForImageClassification"),c(GQ,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher"),c(OQ,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(VQ,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(XQ,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(zQ,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(QQ,"href","/docs/transformers/main/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(WQ,"href","/docs/transformers/main/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(HQ,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(UQ,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinForImageClassification"),c(JQ,"href","/docs/transformers/main/en/model_doc/van#transformers.VanForImageClassification"),c(YQ,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTForImageClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pM,"id","transformers.AutoModelForVision2Seq"),c(pM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pM,"href","#transformers.AutoModelForVision2Seq"),c(vd,"class","relative group"),c(KQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oW,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TM,"id","transformers.AutoModelForVisualQuestionAnswering"),c(TM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(TM,"href","#transformers.AutoModelForVisualQuestionAnswering"),c(Md,"class","relative group"),c(rW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nW,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltForQuestionAnswering"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AM,"id","transformers.AutoModelForAudioClassification"),c(AM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(AM,"href","#transformers.AutoModelForAudioClassification"),c(wd,"class","relative group"),c(sW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dW,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(cW,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(mW,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(fW,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(gW,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(hW,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(uW,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(pW,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(_W,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jM,"id","transformers.AutoModelForAudioFrameClassification"),c(jM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jM,"href","#transformers.AutoModelForAudioFrameClassification"),c(yd,"class","relative group"),c(bW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TW,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(MW,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(EW,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(CW,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(wW,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HM,"id","transformers.AutoModelForCTC"),c(HM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(HM,"href","#transformers.AutoModelForCTC"),c(kd,"class","relative group"),c(AW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xW,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c($W,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertForCTC"),c(kW,"href","/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTForCTC"),c(SW,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWForCTC"),c(RW,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForCTC"),c(PW,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(BW,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(IW,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(NW,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(qW,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForCTC"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iE,"id","transformers.AutoModelForSpeechSeq2Seq"),c(iE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(iE,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(Pd,"class","relative group"),c(jW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OW,"href","/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(VW,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hE,"id","transformers.AutoModelForAudioXVector"),c(hE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(hE,"href","#transformers.AutoModelForAudioXVector"),c(Nd,"class","relative group"),c(XW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WW,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(HW,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(UW,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(JW,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(YW,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForXVector"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EE,"id","transformers.AutoModelForMaskedImageModeling"),c(EE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(EE,"href","#transformers.AutoModelForMaskedImageModeling"),c(Dd,"class","relative group"),c(KW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oH,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(rH,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(tH,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($E,"id","transformers.AutoModelForObjectDetection"),c($E,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($E,"href","#transformers.AutoModelForObjectDetection"),c(Xd,"class","relative group"),c(aH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lH,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrForObjectDetection"),c(iH,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IE,"id","transformers.AutoModelForImageSegmentation"),c(IE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(IE,"href","#transformers.AutoModelForImageSegmentation"),c(Wd,"class","relative group"),c(dH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fH,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrForSegmentation"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GE,"id","transformers.AutoModelForSemanticSegmentation"),c(GE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(GE,"href","#transformers.AutoModelForSemanticSegmentation"),c(Jd,"class","relative group"),c(gH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pH,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(_H,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(bH,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(vH,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UE,"id","transformers.AutoModelForInstanceSegmentation"),c(UE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(UE,"href","#transformers.AutoModelForInstanceSegmentation"),c(Zd,"class","relative group"),c(FH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EH,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(Fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(e4,"id","transformers.TFAutoModel"),c(e4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(e4,"href","#transformers.TFAutoModel"),c(rc,"class","relative group"),c(CH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(AH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LH,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertModel"),c(yH,"href","/docs/transformers/main/en/model_doc/bart#transformers.TFBartModel"),c(xH,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertModel"),c($H,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(kH,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(SH,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertModel"),c(RH,"href","/docs/transformers/main/en/model_doc/clip#transformers.TFCLIPModel"),c(PH,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertModel"),c(BH,"href","/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextModel"),c(IH,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLModel"),c(NH,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(qH,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaModel"),c(jH,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(DH,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(GH,"href","/docs/transformers/main/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(OH,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraModel"),c(VH,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(XH,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelModel"),c(zH,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(QH,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2Model"),c(WH,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJModel"),c(HH,"href","/docs/transformers/main/en/model_doc/hubert#transformers.TFHubertModel"),c(UH,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(JH,"href","/docs/transformers/main/en/model_doc/led#transformers.TFLEDModel"),c(YH,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerModel"),c(KH,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertModel"),c(ZH,"href","/docs/transformers/main/en/model_doc/marian#transformers.TFMarianModel"),c(eU,"href","/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartModel"),c(oU,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(rU,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetModel"),c(tU,"href","/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5Model"),c(aU,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(nU,"href","/docs/transformers/main/en/model_doc/opt#transformers.TFOPTModel"),c(sU,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusModel"),c(lU,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertModel"),c(iU,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaModel"),c(dU,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerModel"),c(cU,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(mU,"href","/docs/transformers/main/en/model_doc/swin#transformers.TFSwinModel"),c(fU,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5Model"),c(gU,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasModel"),c(hU,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(uU,"href","/docs/transformers/main/en/model_doc/vit#transformers.TFViTModel"),c(pU,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(_U,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(bU,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMModel"),c(vU,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(FU,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetModel"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(U4,"id","transformers.TFAutoModelForPreTraining"),c(U4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(U4,"href","#transformers.TFAutoModelForPreTraining"),c(nc,"class","relative group"),c(TU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(MU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(EU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CU,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(wU,"href","/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(AU,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForPreTraining"),c(LU,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(yU,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(xU,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c($U,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(kU,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(SU,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(RU,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(PU,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(BU,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(IU,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(NU,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(qU,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(jU,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(DU,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(GU,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(OU,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(VU,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(XU,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(zU,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(QU,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TC,"id","transformers.TFAutoModelForCausalLM"),c(TC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(TC,"href","#transformers.TFAutoModelForCausalLM"),c(ic,"class","relative group"),c(WU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JU,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(YU,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(KU,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(ZU,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(eJ,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(oJ,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(rJ,"href","/docs/transformers/main/en/model_doc/opt#transformers.TFOPTForCausalLM"),c(tJ,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(aJ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(nJ,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(sJ,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(lJ,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(iJ,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NC,"id","transformers.TFAutoModelForImageClassification"),c(NC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(NC,"href","#transformers.TFAutoModelForImageClassification"),c(mc,"class","relative group"),c(dJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fJ,"href","/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(gJ,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(hJ,"href","/docs/transformers/main/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(uJ,"href","/docs/transformers/main/en/model_doc/vit#transformers.TFViTForImageClassification"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XC,"id","transformers.TFAutoModelForMaskedLM"),c(XC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(XC,"href","#transformers.TFAutoModelForMaskedLM"),c(hc,"class","relative group"),c(pJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_J,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vJ,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(FJ,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(TJ,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(MJ,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(EJ,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(CJ,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(wJ,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(AJ,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(LJ,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(yJ,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(xJ,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c($J,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(kJ,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(SJ,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(RJ,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(PJ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(BJ,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(IJ,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(NJ,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(qJ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(g5,"id","transformers.TFAutoModelForSeq2SeqLM"),c(g5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(g5,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(_c,"class","relative group"),c(jJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OJ,"href","/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(VJ,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(XJ,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(zJ,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(QJ,"href","/docs/transformers/main/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(WJ,"href","/docs/transformers/main/en/model_doc/marian#transformers.TFMarianMTModel"),c(HJ,"href","/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(UJ,"href","/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(JJ,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(YJ,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(A5,"id","transformers.TFAutoModelForSequenceClassification"),c(A5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(A5,"href","#transformers.TFAutoModelForSequenceClassification"),c(Fc,"class","relative group"),c(KJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oY,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(rY,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(tY,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(aY,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(nY,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(sY,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(lY,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(iY,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(dY,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(cY,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(mY,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(fY,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(gY,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(hY,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(uY,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(pY,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(_Y,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(bY,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(vY,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(FY,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(TY,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(MY,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(EY,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(CY,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(wY,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(AY,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(o3,"id","transformers.TFAutoModelForMultipleChoice"),c(o3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(o3,"href","#transformers.TFAutoModelForMultipleChoice"),c(Ec,"class","relative group"),c(LY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($Y,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(kY,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(SY,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(RY,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(PY,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(BY,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(IY,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(NY,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(qY,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(jY,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(DY,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(GY,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(OY,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(VY,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(XY,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(zY,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(QY,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(T3,"id","transformers.TFAutoModelForNextSentencePrediction"),c(T3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(T3,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(Ac,"class","relative group"),c(WY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JY,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(YY,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(A3,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(A3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(A3,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(xc,"class","relative group"),c(KY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oK,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($3,"id","transformers.TFAutoModelForTokenClassification"),c($3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($3,"href","#transformers.TFAutoModelForTokenClassification"),c(Sc,"class","relative group"),c(rK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nK,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(sK,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(lK,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(iK,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(dK,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(cK,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(mK,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(fK,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(gK,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(hK,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(uK,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(pK,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(_K,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(bK,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(vK,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(FK,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(TK,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(MK,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(EK,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(CK,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Z3,"id","transformers.TFAutoModelForQuestionAnswering"),c(Z3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Z3,"href","#transformers.TFAutoModelForQuestionAnswering"),c(Bc,"class","relative group"),c(wK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(AK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(LK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yK,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(xK,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c($K,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(kK,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(SK,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(RK,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(PK,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(BK,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(IK,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(NK,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(qK,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(jK,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(DK,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(GK,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(OK,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(VK,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(XK,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(zK,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(QK,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(WK,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(M0,"id","transformers.TFAutoModelForVision2Seq"),c(M0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(M0,"href","#transformers.TFAutoModelForVision2Seq"),c(qc,"class","relative group"),c(HK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YK,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(A0,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(A0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(A0,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(Gc,"class","relative group"),c(KK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oZ,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($0,"id","transformers.FlaxAutoModel"),c($0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($0,"href","#transformers.FlaxAutoModel"),c(Xc,"class","relative group"),c(rZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nZ,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertModel"),c(sZ,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartModel"),c(lZ,"href","/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitModel"),c(iZ,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertModel"),c(dZ,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(cZ,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(mZ,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(fZ,"href","/docs/transformers/main/en/model_doc/clip#transformers.FlaxCLIPModel"),c(gZ,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(hZ,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraModel"),c(uZ,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(pZ,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(_Z,"href","/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(bZ,"href","/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5Model"),c(vZ,"href","/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianModel"),c(FZ,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartModel"),c(TZ,"href","/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5Model"),c(MZ,"href","/docs/transformers/main/en/model_doc/opt#transformers.FlaxOPTModel"),c(EZ,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(CZ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(wZ,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(AZ,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5Model"),c(LZ,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(yZ,"href","/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTModel"),c(xZ,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c($Z,"href","/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(kZ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sw,"id","transformers.FlaxAutoModelForCausalLM"),c(sw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sw,"href","#transformers.FlaxAutoModelForCausalLM"),c(Wc,"class","relative group"),c(SZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(RZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BZ,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(IZ,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(NZ,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(qZ,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(jZ,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(DZ,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(GZ,"href","/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(OZ,"href","/docs/transformers/main/en/model_doc/opt#transformers.FlaxOPTForCausalLM"),c(VZ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(XZ,"href","/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vw,"id","transformers.FlaxAutoModelForPreTraining"),c(vw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vw,"href","#transformers.FlaxAutoModelForPreTraining"),c(Jc,"class","relative group"),c(zZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(QZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(WZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HZ,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(UZ,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(JZ,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(YZ,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(KZ,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(ZZ,"href","/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(eee,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(oee,"href","/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(ree,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(tee,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(aee,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(nee,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(see,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bw,"id","transformers.FlaxAutoModelForMaskedLM"),c(Bw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Bw,"href","#transformers.FlaxAutoModelForMaskedLM"),c(Zc,"class","relative group"),c(lee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cee,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(mee,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(fee,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(gee,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(hee,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(uee,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(pee,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(_ee,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(bee,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(vee,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Hw,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(Hw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Hw,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(rm,"class","relative group"),c(Fee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Mee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Eee,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(Cee,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(wee,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(Aee,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(Lee,"href","/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(yee,"href","/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(xee,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c($ee,"href","/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(kee,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(See,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lA,"id","transformers.FlaxAutoModelForSequenceClassification"),c(lA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lA,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(nm,"class","relative group"),c(Ree,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Bee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Iee,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(Nee,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(qee,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(jee,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(Dee,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(Gee,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(Oee,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(Vee,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(Xee,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(zee,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FA,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(FA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(FA,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(im,"class","relative group"),c(Qee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Hee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uee,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(Jee,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(Yee,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(Kee,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(Zee,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(eoe,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(ooe,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(roe,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(toe,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(aoe,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RA,"id","transformers.FlaxAutoModelForTokenClassification"),c(RA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(RA,"href","#transformers.FlaxAutoModelForTokenClassification"),c(mm,"class","relative group"),c(noe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(soe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(loe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ioe,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(doe,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(coe,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(moe,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(foe,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(goe,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(hoe,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(uoe,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XA,"id","transformers.FlaxAutoModelForMultipleChoice"),c(XA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(XA,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(hm,"class","relative group"),c(poe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_oe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(boe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(voe,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(Foe,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(Toe,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(Moe,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(Eoe,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(Coe,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(woe,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(Aoe,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(o6,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(o6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(o6,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(_m,"class","relative group"),c(Loe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yoe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xoe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($oe,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(n6,"id","transformers.FlaxAutoModelForImageClassification"),c(n6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(n6,"href","#transformers.FlaxAutoModelForImageClassification"),c(Fm,"class","relative group"),c(koe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Soe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Roe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ea,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Poe,"href","/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(Boe,"href","/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(c6,"id","transformers.FlaxAutoModelForVision2Seq"),c(c6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(c6,"href","#transformers.FlaxAutoModelForVision2Seq"),c(Em,"class","relative group"),c(Ioe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Noe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qoe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(joe,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(m,_){e(document.head,g),b(m,v,_),b(m,u,_),e(u,f),e(f,p),M(d,p,null),e(u,h),e(u,Eo),e(Eo,Ei),b(m,xm,_),b(m,at,_),e(at,Ci),e(at,wi),e(wi,P7),e(at,$m),b(m,Oe,_),b(m,Qe,_),e(Qe,Ai),e(Qe,Rn),e(Rn,B7),e(Qe,Pn),e(Qe,Bn),e(Bn,I7),e(Qe,Li),e(Qe,In),e(In,N7),e(Qe,yi),b(m,km,_),M(xa,m,_),b(m,We,_),b(m,Ae,_),e(Ae,gS),e(Ae,xi),e(xi,hS),e(Ae,uS),b(m,Co,_),b(m,$a,_),e($a,pS),e($a,Sm),e(Sm,_S),e($a,qQe),b(m,EOe,_),b(m,$i,_),e($i,Rm),e(Rm,Pte),M(q7,Pte,null),e($i,jQe),e($i,Bte),e(Bte,DQe),b(m,COe,_),b(m,Nn,_),e(Nn,GQe),e(Nn,Ite),e(Ite,OQe),e(Nn,VQe),e(Nn,Nte),e(Nte,XQe),e(Nn,zQe),b(m,wOe,_),M(j7,m,_),b(m,AOe,_),b(m,bS,_),e(bS,QQe),b(m,LOe,_),M(Pm,m,_),b(m,yOe,_),b(m,ki,_),e(ki,Bm),e(Bm,qte),M(D7,qte,null),e(ki,WQe),e(ki,jte),e(jte,HQe),b(m,xOe,_),b(m,wo,_),M(G7,wo,null),e(wo,UQe),e(wo,O7),e(O7,JQe),e(O7,vS),e(vS,YQe),e(O7,KQe),e(wo,ZQe),e(wo,V7),e(V7,eWe),e(V7,Dte),e(Dte,oWe),e(V7,rWe),e(wo,tWe),e(wo,Ar),M(X7,Ar,null),e(Ar,aWe),e(Ar,Gte),e(Gte,nWe),e(Ar,sWe),e(Ar,Si),e(Si,lWe),e(Si,Ote),e(Ote,iWe),e(Si,dWe),e(Si,Vte),e(Vte,cWe),e(Si,mWe),e(Ar,fWe),e(Ar,A),e(A,Im),e(Im,Xte),e(Xte,gWe),e(Im,hWe),e(Im,FS),e(FS,uWe),e(Im,pWe),e(A,_We),e(A,Nm),e(Nm,zte),e(zte,bWe),e(Nm,vWe),e(Nm,TS),e(TS,FWe),e(Nm,TWe),e(A,MWe),e(A,qm),e(qm,Qte),e(Qte,EWe),e(qm,CWe),e(qm,MS),e(MS,wWe),e(qm,AWe),e(A,LWe),e(A,jm),e(jm,Wte),e(Wte,yWe),e(jm,xWe),e(jm,ES),e(ES,$We),e(jm,kWe),e(A,SWe),e(A,Dm),e(Dm,Hte),e(Hte,RWe),e(Dm,PWe),e(Dm,CS),e(CS,BWe),e(Dm,IWe),e(A,NWe),e(A,Gm),e(Gm,Ute),e(Ute,qWe),e(Gm,jWe),e(Gm,wS),e(wS,DWe),e(Gm,GWe),e(A,OWe),e(A,Om),e(Om,Jte),e(Jte,VWe),e(Om,XWe),e(Om,AS),e(AS,zWe),e(Om,QWe),e(A,WWe),e(A,Vm),e(Vm,Yte),e(Yte,HWe),e(Vm,UWe),e(Vm,LS),e(LS,JWe),e(Vm,YWe),e(A,KWe),e(A,Xm),e(Xm,Kte),e(Kte,ZWe),e(Xm,eHe),e(Xm,yS),e(yS,oHe),e(Xm,rHe),e(A,tHe),e(A,zm),e(zm,Zte),e(Zte,aHe),e(zm,nHe),e(zm,xS),e(xS,sHe),e(zm,lHe),e(A,iHe),e(A,Qm),e(Qm,eae),e(eae,dHe),e(Qm,cHe),e(Qm,$S),e($S,mHe),e(Qm,fHe),e(A,gHe),e(A,Wm),e(Wm,oae),e(oae,hHe),e(Wm,uHe),e(Wm,kS),e(kS,pHe),e(Wm,_He),e(A,bHe),e(A,Hm),e(Hm,rae),e(rae,vHe),e(Hm,FHe),e(Hm,SS),e(SS,THe),e(Hm,MHe),e(A,EHe),e(A,Um),e(Um,tae),e(tae,CHe),e(Um,wHe),e(Um,RS),e(RS,AHe),e(Um,LHe),e(A,yHe),e(A,Jm),e(Jm,aae),e(aae,xHe),e(Jm,$He),e(Jm,PS),e(PS,kHe),e(Jm,SHe),e(A,RHe),e(A,Ym),e(Ym,nae),e(nae,PHe),e(Ym,BHe),e(Ym,BS),e(BS,IHe),e(Ym,NHe),e(A,qHe),e(A,Km),e(Km,sae),e(sae,jHe),e(Km,DHe),e(Km,IS),e(IS,GHe),e(Km,OHe),e(A,VHe),e(A,Zm),e(Zm,lae),e(lae,XHe),e(Zm,zHe),e(Zm,NS),e(NS,QHe),e(Zm,WHe),e(A,HHe),e(A,ef),e(ef,iae),e(iae,UHe),e(ef,JHe),e(ef,qS),e(qS,YHe),e(ef,KHe),e(A,ZHe),e(A,of),e(of,dae),e(dae,eUe),e(of,oUe),e(of,jS),e(jS,rUe),e(of,tUe),e(A,aUe),e(A,rf),e(rf,cae),e(cae,nUe),e(rf,sUe),e(rf,DS),e(DS,lUe),e(rf,iUe),e(A,dUe),e(A,tf),e(tf,mae),e(mae,cUe),e(tf,mUe),e(tf,GS),e(GS,fUe),e(tf,gUe),e(A,hUe),e(A,af),e(af,fae),e(fae,uUe),e(af,pUe),e(af,OS),e(OS,_Ue),e(af,bUe),e(A,vUe),e(A,nf),e(nf,gae),e(gae,FUe),e(nf,TUe),e(nf,VS),e(VS,MUe),e(nf,EUe),e(A,CUe),e(A,sf),e(sf,hae),e(hae,wUe),e(sf,AUe),e(sf,XS),e(XS,LUe),e(sf,yUe),e(A,xUe),e(A,lf),e(lf,uae),e(uae,$Ue),e(lf,kUe),e(lf,zS),e(zS,SUe),e(lf,RUe),e(A,PUe),e(A,df),e(df,pae),e(pae,BUe),e(df,IUe),e(df,QS),e(QS,NUe),e(df,qUe),e(A,jUe),e(A,cf),e(cf,_ae),e(_ae,DUe),e(cf,GUe),e(cf,WS),e(WS,OUe),e(cf,VUe),e(A,XUe),e(A,mf),e(mf,bae),e(bae,zUe),e(mf,QUe),e(mf,HS),e(HS,WUe),e(mf,HUe),e(A,UUe),e(A,ff),e(ff,vae),e(vae,JUe),e(ff,YUe),e(ff,US),e(US,KUe),e(ff,ZUe),e(A,eJe),e(A,gf),e(gf,Fae),e(Fae,oJe),e(gf,rJe),e(gf,JS),e(JS,tJe),e(gf,aJe),e(A,nJe),e(A,hf),e(hf,Tae),e(Tae,sJe),e(hf,lJe),e(hf,YS),e(YS,iJe),e(hf,dJe),e(A,cJe),e(A,uf),e(uf,Mae),e(Mae,mJe),e(uf,fJe),e(uf,KS),e(KS,gJe),e(uf,hJe),e(A,uJe),e(A,pf),e(pf,Eae),e(Eae,pJe),e(pf,_Je),e(pf,ZS),e(ZS,bJe),e(pf,vJe),e(A,FJe),e(A,_f),e(_f,Cae),e(Cae,TJe),e(_f,MJe),e(_f,eR),e(eR,EJe),e(_f,CJe),e(A,wJe),e(A,bf),e(bf,wae),e(wae,AJe),e(bf,LJe),e(bf,oR),e(oR,yJe),e(bf,xJe),e(A,$Je),e(A,vf),e(vf,Aae),e(Aae,kJe),e(vf,SJe),e(vf,rR),e(rR,RJe),e(vf,PJe),e(A,BJe),e(A,Ff),e(Ff,Lae),e(Lae,IJe),e(Ff,NJe),e(Ff,tR),e(tR,qJe),e(Ff,jJe),e(A,DJe),e(A,Tf),e(Tf,yae),e(yae,GJe),e(Tf,OJe),e(Tf,aR),e(aR,VJe),e(Tf,XJe),e(A,zJe),e(A,Mf),e(Mf,xae),e(xae,QJe),e(Mf,WJe),e(Mf,nR),e(nR,HJe),e(Mf,UJe),e(A,JJe),e(A,Ef),e(Ef,$ae),e($ae,YJe),e(Ef,KJe),e(Ef,sR),e(sR,ZJe),e(Ef,eYe),e(A,oYe),e(A,Cf),e(Cf,kae),e(kae,rYe),e(Cf,tYe),e(Cf,lR),e(lR,aYe),e(Cf,nYe),e(A,sYe),e(A,wf),e(wf,Sae),e(Sae,lYe),e(wf,iYe),e(wf,iR),e(iR,dYe),e(wf,cYe),e(A,mYe),e(A,Af),e(Af,Rae),e(Rae,fYe),e(Af,gYe),e(Af,dR),e(dR,hYe),e(Af,uYe),e(A,pYe),e(A,Lf),e(Lf,Pae),e(Pae,_Ye),e(Lf,bYe),e(Lf,cR),e(cR,vYe),e(Lf,FYe),e(A,TYe),e(A,yf),e(yf,Bae),e(Bae,MYe),e(yf,EYe),e(yf,mR),e(mR,CYe),e(yf,wYe),e(A,AYe),e(A,xf),e(xf,Iae),e(Iae,LYe),e(xf,yYe),e(xf,fR),e(fR,xYe),e(xf,$Ye),e(A,kYe),e(A,$f),e($f,Nae),e(Nae,SYe),e($f,RYe),e($f,gR),e(gR,PYe),e($f,BYe),e(A,IYe),e(A,kf),e(kf,qae),e(qae,NYe),e(kf,qYe),e(kf,hR),e(hR,jYe),e(kf,DYe),e(A,GYe),e(A,Sf),e(Sf,jae),e(jae,OYe),e(Sf,VYe),e(Sf,uR),e(uR,XYe),e(Sf,zYe),e(A,QYe),e(A,Rf),e(Rf,Dae),e(Dae,WYe),e(Rf,HYe),e(Rf,pR),e(pR,UYe),e(Rf,JYe),e(A,YYe),e(A,Pf),e(Pf,Gae),e(Gae,KYe),e(Pf,ZYe),e(Pf,_R),e(_R,eKe),e(Pf,oKe),e(A,rKe),e(A,Bf),e(Bf,Oae),e(Oae,tKe),e(Bf,aKe),e(Bf,bR),e(bR,nKe),e(Bf,sKe),e(A,lKe),e(A,If),e(If,Vae),e(Vae,iKe),e(If,dKe),e(If,vR),e(vR,cKe),e(If,mKe),e(A,fKe),e(A,Nf),e(Nf,Xae),e(Xae,gKe),e(Nf,hKe),e(Nf,FR),e(FR,uKe),e(Nf,pKe),e(A,_Ke),e(A,qf),e(qf,zae),e(zae,bKe),e(qf,vKe),e(qf,TR),e(TR,FKe),e(qf,TKe),e(A,MKe),e(A,jf),e(jf,Qae),e(Qae,EKe),e(jf,CKe),e(jf,MR),e(MR,wKe),e(jf,AKe),e(A,LKe),e(A,Df),e(Df,Wae),e(Wae,yKe),e(Df,xKe),e(Df,ER),e(ER,$Ke),e(Df,kKe),e(A,SKe),e(A,Gf),e(Gf,Hae),e(Hae,RKe),e(Gf,PKe),e(Gf,CR),e(CR,BKe),e(Gf,IKe),e(A,NKe),e(A,Of),e(Of,Uae),e(Uae,qKe),e(Of,jKe),e(Of,wR),e(wR,DKe),e(Of,GKe),e(A,OKe),e(A,Vf),e(Vf,Jae),e(Jae,VKe),e(Vf,XKe),e(Vf,AR),e(AR,zKe),e(Vf,QKe),e(A,WKe),e(A,Xf),e(Xf,Yae),e(Yae,HKe),e(Xf,UKe),e(Xf,LR),e(LR,JKe),e(Xf,YKe),e(A,KKe),e(A,zf),e(zf,Kae),e(Kae,ZKe),e(zf,eZe),e(zf,yR),e(yR,oZe),e(zf,rZe),e(A,tZe),e(A,Qf),e(Qf,Zae),e(Zae,aZe),e(Qf,nZe),e(Qf,xR),e(xR,sZe),e(Qf,lZe),e(A,iZe),e(A,Wf),e(Wf,ene),e(ene,dZe),e(Wf,cZe),e(Wf,$R),e($R,mZe),e(Wf,fZe),e(A,gZe),e(A,Hf),e(Hf,one),e(one,hZe),e(Hf,uZe),e(Hf,kR),e(kR,pZe),e(Hf,_Ze),e(A,bZe),e(A,Uf),e(Uf,rne),e(rne,vZe),e(Uf,FZe),e(Uf,SR),e(SR,TZe),e(Uf,MZe),e(A,EZe),e(A,Jf),e(Jf,tne),e(tne,CZe),e(Jf,wZe),e(Jf,RR),e(RR,AZe),e(Jf,LZe),e(A,yZe),e(A,Yf),e(Yf,ane),e(ane,xZe),e(Yf,$Ze),e(Yf,PR),e(PR,kZe),e(Yf,SZe),e(A,RZe),e(A,Kf),e(Kf,nne),e(nne,PZe),e(Kf,BZe),e(Kf,BR),e(BR,IZe),e(Kf,NZe),e(A,qZe),e(A,Zf),e(Zf,sne),e(sne,jZe),e(Zf,DZe),e(Zf,IR),e(IR,GZe),e(Zf,OZe),e(A,VZe),e(A,eg),e(eg,lne),e(lne,XZe),e(eg,zZe),e(eg,NR),e(NR,QZe),e(eg,WZe),e(A,HZe),e(A,og),e(og,ine),e(ine,UZe),e(og,JZe),e(og,qR),e(qR,YZe),e(og,KZe),e(A,ZZe),e(A,rg),e(rg,dne),e(dne,eeo),e(rg,oeo),e(rg,jR),e(jR,reo),e(rg,teo),e(A,aeo),e(A,tg),e(tg,cne),e(cne,neo),e(tg,seo),e(tg,DR),e(DR,leo),e(tg,ieo),e(A,deo),e(A,ag),e(ag,mne),e(mne,ceo),e(ag,meo),e(ag,GR),e(GR,feo),e(ag,geo),e(A,heo),e(A,ng),e(ng,fne),e(fne,ueo),e(ng,peo),e(ng,OR),e(OR,_eo),e(ng,beo),e(A,veo),e(A,sg),e(sg,gne),e(gne,Feo),e(sg,Teo),e(sg,VR),e(VR,Meo),e(sg,Eeo),e(A,Ceo),e(A,lg),e(lg,hne),e(hne,weo),e(lg,Aeo),e(lg,XR),e(XR,Leo),e(lg,yeo),e(A,xeo),e(A,ig),e(ig,une),e(une,$eo),e(ig,keo),e(ig,zR),e(zR,Seo),e(ig,Reo),e(A,Peo),e(A,dg),e(dg,pne),e(pne,Beo),e(dg,Ieo),e(dg,QR),e(QR,Neo),e(dg,qeo),e(A,jeo),e(A,cg),e(cg,_ne),e(_ne,Deo),e(cg,Geo),e(cg,WR),e(WR,Oeo),e(cg,Veo),e(A,Xeo),e(A,mg),e(mg,bne),e(bne,zeo),e(mg,Qeo),e(mg,HR),e(HR,Weo),e(mg,Heo),e(A,Ueo),e(A,fg),e(fg,vne),e(vne,Jeo),e(fg,Yeo),e(fg,UR),e(UR,Keo),e(fg,Zeo),e(A,eoo),e(A,gg),e(gg,Fne),e(Fne,ooo),e(gg,roo),e(gg,JR),e(JR,too),e(gg,aoo),e(A,noo),e(A,hg),e(hg,Tne),e(Tne,soo),e(hg,loo),e(hg,YR),e(YR,ioo),e(hg,doo),e(A,coo),e(A,ug),e(ug,Mne),e(Mne,moo),e(ug,foo),e(ug,KR),e(KR,goo),e(ug,hoo),e(A,uoo),e(A,pg),e(pg,Ene),e(Ene,poo),e(pg,_oo),e(pg,ZR),e(ZR,boo),e(pg,voo),e(A,Foo),e(A,_g),e(_g,Cne),e(Cne,Too),e(_g,Moo),e(_g,eP),e(eP,Eoo),e(_g,Coo),e(A,woo),e(A,bg),e(bg,wne),e(wne,Aoo),e(bg,Loo),e(bg,oP),e(oP,yoo),e(bg,xoo),e(A,$oo),e(A,vg),e(vg,Ane),e(Ane,koo),e(vg,Soo),e(vg,rP),e(rP,Roo),e(vg,Poo),e(A,Boo),e(A,Fg),e(Fg,Lne),e(Lne,Ioo),e(Fg,Noo),e(Fg,tP),e(tP,qoo),e(Fg,joo),e(A,Doo),e(A,Tg),e(Tg,yne),e(yne,Goo),e(Tg,Ooo),e(Tg,aP),e(aP,Voo),e(Tg,Xoo),e(A,zoo),e(A,Mg),e(Mg,xne),e(xne,Qoo),e(Mg,Woo),e(Mg,nP),e(nP,Hoo),e(Mg,Uoo),e(A,Joo),e(A,Eg),e(Eg,$ne),e($ne,Yoo),e(Eg,Koo),e(Eg,sP),e(sP,Zoo),e(Eg,ero),e(A,oro),e(A,Cg),e(Cg,kne),e(kne,rro),e(Cg,tro),e(Cg,lP),e(lP,aro),e(Cg,nro),e(A,sro),e(A,wg),e(wg,Sne),e(Sne,lro),e(wg,iro),e(wg,iP),e(iP,dro),e(wg,cro),e(A,mro),e(A,Ag),e(Ag,Rne),e(Rne,fro),e(Ag,gro),e(Ag,dP),e(dP,hro),e(Ag,uro),e(A,pro),e(A,Lg),e(Lg,Pne),e(Pne,_ro),e(Lg,bro),e(Lg,cP),e(cP,vro),e(Lg,Fro),e(A,Tro),e(A,yg),e(yg,Bne),e(Bne,Mro),e(yg,Ero),e(yg,mP),e(mP,Cro),e(yg,wro),e(A,Aro),e(A,xg),e(xg,Ine),e(Ine,Lro),e(xg,yro),e(xg,fP),e(fP,xro),e(xg,$ro),e(A,kro),e(A,$g),e($g,Nne),e(Nne,Sro),e($g,Rro),e($g,gP),e(gP,Pro),e($g,Bro),e(A,Iro),e(A,kg),e(kg,qne),e(qne,Nro),e(kg,qro),e(kg,hP),e(hP,jro),e(kg,Dro),e(A,Gro),e(A,Sg),e(Sg,jne),e(jne,Oro),e(Sg,Vro),e(Sg,uP),e(uP,Xro),e(Sg,zro),e(A,Qro),e(A,Rg),e(Rg,Dne),e(Dne,Wro),e(Rg,Hro),e(Rg,pP),e(pP,Uro),e(Rg,Jro),e(A,Yro),e(A,Pg),e(Pg,Gne),e(Gne,Kro),e(Pg,Zro),e(Pg,_P),e(_P,eto),e(Pg,oto),e(A,rto),e(A,Bg),e(Bg,One),e(One,tto),e(Bg,ato),e(Bg,bP),e(bP,nto),e(Bg,sto),e(A,lto),e(A,Ig),e(Ig,Vne),e(Vne,ito),e(Ig,dto),e(Ig,vP),e(vP,cto),e(Ig,mto),e(A,fto),e(A,Ng),e(Ng,Xne),e(Xne,gto),e(Ng,hto),e(Ng,FP),e(FP,uto),e(Ng,pto),e(A,_to),e(A,qg),e(qg,zne),e(zne,bto),e(qg,vto),e(qg,TP),e(TP,Fto),e(qg,Tto),e(A,Mto),e(A,jg),e(jg,Qne),e(Qne,Eto),e(jg,Cto),e(jg,MP),e(MP,wto),e(jg,Ato),e(A,Lto),e(A,Dg),e(Dg,Wne),e(Wne,yto),e(Dg,xto),e(Dg,EP),e(EP,$to),e(Dg,kto),e(A,Sto),e(A,Gg),e(Gg,Hne),e(Hne,Rto),e(Gg,Pto),e(Gg,CP),e(CP,Bto),e(Gg,Ito),e(A,Nto),e(A,Og),e(Og,Une),e(Une,qto),e(Og,jto),e(Og,wP),e(wP,Dto),e(Og,Gto),e(A,Oto),e(A,Vg),e(Vg,Jne),e(Jne,Vto),e(Vg,Xto),e(Vg,AP),e(AP,zto),e(Vg,Qto),e(A,Wto),e(A,Xg),e(Xg,Yne),e(Yne,Hto),e(Xg,Uto),e(Xg,LP),e(LP,Jto),e(Xg,Yto),e(Ar,Kto),M(zg,Ar,null),e(wo,Zto),e(wo,Qg),M(z7,Qg,null),e(Qg,eao),e(Qg,Kne),e(Kne,oao),b(m,$Oe,_),b(m,Ri,_),e(Ri,Wg),e(Wg,Zne),M(Q7,Zne,null),e(Ri,rao),e(Ri,ese),e(ese,tao),b(m,kOe,_),b(m,Ao,_),M(W7,Ao,null),e(Ao,aao),e(Ao,H7),e(H7,nao),e(H7,yP),e(yP,sao),e(H7,lao),e(Ao,iao),e(Ao,U7),e(U7,dao),e(U7,ose),e(ose,cao),e(U7,mao),e(Ao,fao),e(Ao,Lr),M(J7,Lr,null),e(Lr,gao),e(Lr,rse),e(rse,hao),e(Lr,uao),e(Lr,ka),e(ka,pao),e(ka,tse),e(tse,_ao),e(ka,bao),e(ka,ase),e(ase,vao),e(ka,Fao),e(ka,nse),e(nse,Tao),e(ka,Mao),e(Lr,Eao),e(Lr,k),e(k,qn),e(qn,sse),e(sse,Cao),e(qn,wao),e(qn,xP),e(xP,Aao),e(qn,Lao),e(qn,$P),e($P,yao),e(qn,xao),e(k,$ao),e(k,jn),e(jn,lse),e(lse,kao),e(jn,Sao),e(jn,kP),e(kP,Rao),e(jn,Pao),e(jn,SP),e(SP,Bao),e(jn,Iao),e(k,Nao),e(k,Dn),e(Dn,ise),e(ise,qao),e(Dn,jao),e(Dn,RP),e(RP,Dao),e(Dn,Gao),e(Dn,PP),e(PP,Oao),e(Dn,Vao),e(k,Xao),e(k,Hg),e(Hg,dse),e(dse,zao),e(Hg,Qao),e(Hg,BP),e(BP,Wao),e(Hg,Hao),e(k,Uao),e(k,Gn),e(Gn,cse),e(cse,Jao),e(Gn,Yao),e(Gn,IP),e(IP,Kao),e(Gn,Zao),e(Gn,NP),e(NP,eno),e(Gn,ono),e(k,rno),e(k,Ug),e(Ug,mse),e(mse,tno),e(Ug,ano),e(Ug,qP),e(qP,nno),e(Ug,sno),e(k,lno),e(k,Jg),e(Jg,fse),e(fse,ino),e(Jg,dno),e(Jg,jP),e(jP,cno),e(Jg,mno),e(k,fno),e(k,Yg),e(Yg,gse),e(gse,gno),e(Yg,hno),e(Yg,DP),e(DP,uno),e(Yg,pno),e(k,_no),e(k,On),e(On,hse),e(hse,bno),e(On,vno),e(On,GP),e(GP,Fno),e(On,Tno),e(On,OP),e(OP,Mno),e(On,Eno),e(k,Cno),e(k,Vn),e(Vn,use),e(use,wno),e(Vn,Ano),e(Vn,VP),e(VP,Lno),e(Vn,yno),e(Vn,XP),e(XP,xno),e(Vn,$no),e(k,kno),e(k,Xn),e(Xn,pse),e(pse,Sno),e(Xn,Rno),e(Xn,zP),e(zP,Pno),e(Xn,Bno),e(Xn,QP),e(QP,Ino),e(Xn,Nno),e(k,qno),e(k,Kg),e(Kg,_se),e(_se,jno),e(Kg,Dno),e(Kg,WP),e(WP,Gno),e(Kg,Ono),e(k,Vno),e(k,Zg),e(Zg,bse),e(bse,Xno),e(Zg,zno),e(Zg,HP),e(HP,Qno),e(Zg,Wno),e(k,Hno),e(k,eh),e(eh,vse),e(vse,Uno),e(eh,Jno),e(eh,UP),e(UP,Yno),e(eh,Kno),e(k,Zno),e(k,zn),e(zn,Fse),e(Fse,eso),e(zn,oso),e(zn,JP),e(JP,rso),e(zn,tso),e(zn,YP),e(YP,aso),e(zn,nso),e(k,sso),e(k,oh),e(oh,Tse),e(Tse,lso),e(oh,iso),e(oh,KP),e(KP,dso),e(oh,cso),e(k,mso),e(k,Qn),e(Qn,Mse),e(Mse,fso),e(Qn,gso),e(Qn,ZP),e(ZP,hso),e(Qn,uso),e(Qn,eB),e(eB,pso),e(Qn,_so),e(k,bso),e(k,Wn),e(Wn,Ese),e(Ese,vso),e(Wn,Fso),e(Wn,oB),e(oB,Tso),e(Wn,Mso),e(Wn,rB),e(rB,Eso),e(Wn,Cso),e(k,wso),e(k,Hn),e(Hn,Cse),e(Cse,Aso),e(Hn,Lso),e(Hn,tB),e(tB,yso),e(Hn,xso),e(Hn,aB),e(aB,$so),e(Hn,kso),e(k,Sso),e(k,Un),e(Un,wse),e(wse,Rso),e(Un,Pso),e(Un,nB),e(nB,Bso),e(Un,Iso),e(Un,sB),e(sB,Nso),e(Un,qso),e(k,jso),e(k,rh),e(rh,Ase),e(Ase,Dso),e(rh,Gso),e(rh,lB),e(lB,Oso),e(rh,Vso),e(k,Xso),e(k,Jn),e(Jn,Lse),e(Lse,zso),e(Jn,Qso),e(Jn,iB),e(iB,Wso),e(Jn,Hso),e(Jn,dB),e(dB,Uso),e(Jn,Jso),e(k,Yso),e(k,Yn),e(Yn,yse),e(yse,Kso),e(Yn,Zso),e(Yn,cB),e(cB,elo),e(Yn,olo),e(Yn,mB),e(mB,rlo),e(Yn,tlo),e(k,alo),e(k,Kn),e(Kn,xse),e(xse,nlo),e(Kn,slo),e(Kn,fB),e(fB,llo),e(Kn,ilo),e(Kn,gB),e(gB,dlo),e(Kn,clo),e(k,mlo),e(k,Zn),e(Zn,$se),e($se,flo),e(Zn,glo),e(Zn,hB),e(hB,hlo),e(Zn,ulo),e(Zn,uB),e(uB,plo),e(Zn,_lo),e(k,blo),e(k,es),e(es,kse),e(kse,vlo),e(es,Flo),e(es,pB),e(pB,Tlo),e(es,Mlo),e(es,_B),e(_B,Elo),e(es,Clo),e(k,wlo),e(k,os),e(os,Sse),e(Sse,Alo),e(os,Llo),e(os,bB),e(bB,ylo),e(os,xlo),e(os,vB),e(vB,$lo),e(os,klo),e(k,Slo),e(k,th),e(th,Rse),e(Rse,Rlo),e(th,Plo),e(th,FB),e(FB,Blo),e(th,Ilo),e(k,Nlo),e(k,rs),e(rs,Pse),e(Pse,qlo),e(rs,jlo),e(rs,TB),e(TB,Dlo),e(rs,Glo),e(rs,MB),e(MB,Olo),e(rs,Vlo),e(k,Xlo),e(k,ah),e(ah,Bse),e(Bse,zlo),e(ah,Qlo),e(ah,EB),e(EB,Wlo),e(ah,Hlo),e(k,Ulo),e(k,ts),e(ts,Ise),e(Ise,Jlo),e(ts,Ylo),e(ts,CB),e(CB,Klo),e(ts,Zlo),e(ts,wB),e(wB,eio),e(ts,oio),e(k,rio),e(k,as),e(as,Nse),e(Nse,tio),e(as,aio),e(as,AB),e(AB,nio),e(as,sio),e(as,LB),e(LB,lio),e(as,iio),e(k,dio),e(k,ns),e(ns,qse),e(qse,cio),e(ns,mio),e(ns,yB),e(yB,fio),e(ns,gio),e(ns,xB),e(xB,hio),e(ns,uio),e(k,pio),e(k,nh),e(nh,jse),e(jse,_io),e(nh,bio),e(nh,$B),e($B,vio),e(nh,Fio),e(k,Tio),e(k,ss),e(ss,Dse),e(Dse,Mio),e(ss,Eio),e(ss,kB),e(kB,Cio),e(ss,wio),e(ss,SB),e(SB,Aio),e(ss,Lio),e(k,yio),e(k,ls),e(ls,Gse),e(Gse,xio),e(ls,$io),e(ls,RB),e(RB,kio),e(ls,Sio),e(ls,PB),e(PB,Rio),e(ls,Pio),e(k,Bio),e(k,is),e(is,Ose),e(Ose,Iio),e(is,Nio),e(is,BB),e(BB,qio),e(is,jio),e(is,IB),e(IB,Dio),e(is,Gio),e(k,Oio),e(k,sh),e(sh,Vse),e(Vse,Vio),e(sh,Xio),e(sh,NB),e(NB,zio),e(sh,Qio),e(k,Wio),e(k,ds),e(ds,Xse),e(Xse,Hio),e(ds,Uio),e(ds,qB),e(qB,Jio),e(ds,Yio),e(ds,jB),e(jB,Kio),e(ds,Zio),e(k,edo),e(k,cs),e(cs,zse),e(zse,odo),e(cs,rdo),e(cs,DB),e(DB,tdo),e(cs,ado),e(cs,GB),e(GB,ndo),e(cs,sdo),e(k,ldo),e(k,ms),e(ms,Qse),e(Qse,ido),e(ms,ddo),e(ms,OB),e(OB,cdo),e(ms,mdo),e(ms,VB),e(VB,fdo),e(ms,gdo),e(k,hdo),e(k,fs),e(fs,Wse),e(Wse,udo),e(fs,pdo),e(fs,XB),e(XB,_do),e(fs,bdo),e(fs,zB),e(zB,vdo),e(fs,Fdo),e(k,Tdo),e(k,gs),e(gs,Hse),e(Hse,Mdo),e(gs,Edo),e(gs,QB),e(QB,Cdo),e(gs,wdo),e(gs,WB),e(WB,Ado),e(gs,Ldo),e(k,ydo),e(k,hs),e(hs,Use),e(Use,xdo),e(hs,$do),e(hs,HB),e(HB,kdo),e(hs,Sdo),e(hs,UB),e(UB,Rdo),e(hs,Pdo),e(k,Bdo),e(k,us),e(us,Jse),e(Jse,Ido),e(us,Ndo),e(us,JB),e(JB,qdo),e(us,jdo),e(us,YB),e(YB,Ddo),e(us,Gdo),e(k,Odo),e(k,ps),e(ps,Yse),e(Yse,Vdo),e(ps,Xdo),e(ps,KB),e(KB,zdo),e(ps,Qdo),e(ps,ZB),e(ZB,Wdo),e(ps,Hdo),e(k,Udo),e(k,lh),e(lh,Kse),e(Kse,Jdo),e(lh,Ydo),e(lh,eI),e(eI,Kdo),e(lh,Zdo),e(k,eco),e(k,_s),e(_s,Zse),e(Zse,oco),e(_s,rco),e(_s,oI),e(oI,tco),e(_s,aco),e(_s,rI),e(rI,nco),e(_s,sco),e(k,lco),e(k,ih),e(ih,ele),e(ele,ico),e(ih,dco),e(ih,tI),e(tI,cco),e(ih,mco),e(k,fco),e(k,dh),e(dh,ole),e(ole,gco),e(dh,hco),e(dh,aI),e(aI,uco),e(dh,pco),e(k,_co),e(k,bs),e(bs,rle),e(rle,bco),e(bs,vco),e(bs,nI),e(nI,Fco),e(bs,Tco),e(bs,sI),e(sI,Mco),e(bs,Eco),e(k,Cco),e(k,vs),e(vs,tle),e(tle,wco),e(vs,Aco),e(vs,lI),e(lI,Lco),e(vs,yco),e(vs,iI),e(iI,xco),e(vs,$co),e(k,kco),e(k,Fs),e(Fs,ale),e(ale,Sco),e(Fs,Rco),e(Fs,dI),e(dI,Pco),e(Fs,Bco),e(Fs,cI),e(cI,Ico),e(Fs,Nco),e(k,qco),e(k,ch),e(ch,nle),e(nle,jco),e(ch,Dco),e(ch,mI),e(mI,Gco),e(ch,Oco),e(k,Vco),e(k,Ts),e(Ts,sle),e(sle,Xco),e(Ts,zco),e(Ts,fI),e(fI,Qco),e(Ts,Wco),e(Ts,gI),e(gI,Hco),e(Ts,Uco),e(k,Jco),e(k,Ms),e(Ms,lle),e(lle,Yco),e(Ms,Kco),e(Ms,hI),e(hI,Zco),e(Ms,emo),e(Ms,uI),e(uI,omo),e(Ms,rmo),e(k,tmo),e(k,Es),e(Es,ile),e(ile,amo),e(Es,nmo),e(Es,pI),e(pI,smo),e(Es,lmo),e(Es,_I),e(_I,imo),e(Es,dmo),e(k,cmo),e(k,Cs),e(Cs,dle),e(dle,mmo),e(Cs,fmo),e(Cs,bI),e(bI,gmo),e(Cs,hmo),e(Cs,vI),e(vI,umo),e(Cs,pmo),e(k,_mo),e(k,ws),e(ws,cle),e(cle,bmo),e(ws,vmo),e(ws,FI),e(FI,Fmo),e(ws,Tmo),e(ws,TI),e(TI,Mmo),e(ws,Emo),e(k,Cmo),e(k,As),e(As,mle),e(mle,wmo),e(As,Amo),e(As,MI),e(MI,Lmo),e(As,ymo),e(As,EI),e(EI,xmo),e(As,$mo),e(k,kmo),e(k,mh),e(mh,fle),e(fle,Smo),e(mh,Rmo),e(mh,CI),e(CI,Pmo),e(mh,Bmo),e(k,Imo),e(k,Ls),e(Ls,gle),e(gle,Nmo),e(Ls,qmo),e(Ls,wI),e(wI,jmo),e(Ls,Dmo),e(Ls,AI),e(AI,Gmo),e(Ls,Omo),e(k,Vmo),e(k,fh),e(fh,hle),e(hle,Xmo),e(fh,zmo),e(fh,LI),e(LI,Qmo),e(fh,Wmo),e(k,Hmo),e(k,gh),e(gh,ule),e(ule,Umo),e(gh,Jmo),e(gh,yI),e(yI,Ymo),e(gh,Kmo),e(k,Zmo),e(k,hh),e(hh,ple),e(ple,efo),e(hh,ofo),e(hh,xI),e(xI,rfo),e(hh,tfo),e(k,afo),e(k,uh),e(uh,_le),e(_le,nfo),e(uh,sfo),e(uh,$I),e($I,lfo),e(uh,ifo),e(k,dfo),e(k,ys),e(ys,ble),e(ble,cfo),e(ys,mfo),e(ys,kI),e(kI,ffo),e(ys,gfo),e(ys,SI),e(SI,hfo),e(ys,ufo),e(k,pfo),e(k,ph),e(ph,vle),e(vle,_fo),e(ph,bfo),e(ph,RI),e(RI,vfo),e(ph,Ffo),e(k,Tfo),e(k,xs),e(xs,Fle),e(Fle,Mfo),e(xs,Efo),e(xs,PI),e(PI,Cfo),e(xs,wfo),e(xs,BI),e(BI,Afo),e(xs,Lfo),e(k,yfo),e(k,$s),e($s,Tle),e(Tle,xfo),e($s,$fo),e($s,II),e(II,kfo),e($s,Sfo),e($s,NI),e(NI,Rfo),e($s,Pfo),e(k,Bfo),e(k,ks),e(ks,Mle),e(Mle,Ifo),e(ks,Nfo),e(ks,qI),e(qI,qfo),e(ks,jfo),e(ks,jI),e(jI,Dfo),e(ks,Gfo),e(k,Ofo),e(k,Ss),e(Ss,Ele),e(Ele,Vfo),e(Ss,Xfo),e(Ss,DI),e(DI,zfo),e(Ss,Qfo),e(Ss,GI),e(GI,Wfo),e(Ss,Hfo),e(k,Ufo),e(k,Rs),e(Rs,Cle),e(Cle,Jfo),e(Rs,Yfo),e(Rs,OI),e(OI,Kfo),e(Rs,Zfo),e(Rs,VI),e(VI,ego),e(Rs,ogo),e(k,rgo),e(k,Ps),e(Ps,wle),e(wle,tgo),e(Ps,ago),e(Ps,XI),e(XI,ngo),e(Ps,sgo),e(Ps,zI),e(zI,lgo),e(Ps,igo),e(k,dgo),e(k,_h),e(_h,Ale),e(Ale,cgo),e(_h,mgo),e(_h,QI),e(QI,fgo),e(_h,ggo),e(k,hgo),e(k,bh),e(bh,Lle),e(Lle,ugo),e(bh,pgo),e(bh,WI),e(WI,_go),e(bh,bgo),e(k,vgo),e(k,Bs),e(Bs,yle),e(yle,Fgo),e(Bs,Tgo),e(Bs,HI),e(HI,Mgo),e(Bs,Ego),e(Bs,UI),e(UI,Cgo),e(Bs,wgo),e(k,Ago),e(k,Is),e(Is,xle),e(xle,Lgo),e(Is,ygo),e(Is,JI),e(JI,xgo),e(Is,$go),e(Is,YI),e(YI,kgo),e(Is,Sgo),e(k,Rgo),e(k,Ns),e(Ns,$le),e($le,Pgo),e(Ns,Bgo),e(Ns,KI),e(KI,Igo),e(Ns,Ngo),e(Ns,ZI),e(ZI,qgo),e(Ns,jgo),e(k,Dgo),e(k,vh),e(vh,kle),e(kle,Ggo),e(vh,Ogo),e(vh,eN),e(eN,Vgo),e(vh,Xgo),e(k,zgo),e(k,Fh),e(Fh,Sle),e(Sle,Qgo),e(Fh,Wgo),e(Fh,oN),e(oN,Hgo),e(Fh,Ugo),e(k,Jgo),e(k,Th),e(Th,Rle),e(Rle,Ygo),e(Th,Kgo),e(Th,rN),e(rN,Zgo),e(Th,eho),e(k,oho),e(k,qs),e(qs,Ple),e(Ple,rho),e(qs,tho),e(qs,tN),e(tN,aho),e(qs,nho),e(qs,aN),e(aN,sho),e(qs,lho),e(k,iho),e(k,js),e(js,Ble),e(Ble,dho),e(js,cho),e(js,nN),e(nN,mho),e(js,fho),e(js,sN),e(sN,gho),e(js,hho),e(k,uho),e(k,Mh),e(Mh,Ile),e(Ile,pho),e(Mh,_ho),e(Mh,lN),e(lN,bho),e(Mh,vho),e(k,Fho),e(k,Eh),e(Eh,Nle),e(Nle,Tho),e(Eh,Mho),e(Eh,iN),e(iN,Eho),e(Eh,Cho),e(k,who),e(k,Ch),e(Ch,qle),e(qle,Aho),e(Ch,Lho),e(Ch,dN),e(dN,yho),e(Ch,xho),e(k,$ho),e(k,Ds),e(Ds,jle),e(jle,kho),e(Ds,Sho),e(Ds,cN),e(cN,Rho),e(Ds,Pho),e(Ds,mN),e(mN,Bho),e(Ds,Iho),e(k,Nho),e(k,wh),e(wh,Dle),e(Dle,qho),e(wh,jho),e(wh,fN),e(fN,Dho),e(wh,Gho),e(k,Oho),e(k,Ah),e(Ah,Gle),e(Gle,Vho),e(Ah,Xho),e(Ah,gN),e(gN,zho),e(Ah,Qho),e(k,Who),e(k,Gs),e(Gs,Ole),e(Ole,Hho),e(Gs,Uho),e(Gs,hN),e(hN,Jho),e(Gs,Yho),e(Gs,uN),e(uN,Kho),e(Gs,Zho),e(k,euo),e(k,Os),e(Os,Vle),e(Vle,ouo),e(Os,ruo),e(Os,pN),e(pN,tuo),e(Os,auo),e(Os,_N),e(_N,nuo),e(Os,suo),e(k,luo),e(k,Vs),e(Vs,Xle),e(Xle,iuo),e(Vs,duo),e(Vs,bN),e(bN,cuo),e(Vs,muo),e(Vs,vN),e(vN,fuo),e(Vs,guo),e(k,huo),e(k,Xs),e(Xs,zle),e(zle,uuo),e(Xs,puo),e(Xs,FN),e(FN,_uo),e(Xs,buo),e(Xs,TN),e(TN,vuo),e(Xs,Fuo),e(Lr,Tuo),M(Lh,Lr,null),e(Ao,Muo),e(Ao,yh),M(Y7,yh,null),e(yh,Euo),e(yh,Qle),e(Qle,Cuo),b(m,SOe,_),b(m,Pi,_),e(Pi,xh),e(xh,Wle),M(K7,Wle,null),e(Pi,wuo),e(Pi,Hle),e(Hle,Auo),b(m,ROe,_),b(m,Lo,_),M(Z7,Lo,null),e(Lo,Luo),e(Lo,ey),e(ey,yuo),e(ey,MN),e(MN,xuo),e(ey,$uo),e(Lo,kuo),e(Lo,oy),e(oy,Suo),e(oy,Ule),e(Ule,Ruo),e(oy,Puo),e(Lo,Buo),e(Lo,He),M(ry,He,null),e(He,Iuo),e(He,Jle),e(Jle,Nuo),e(He,quo),e(He,Sa),e(Sa,juo),e(Sa,Yle),e(Yle,Duo),e(Sa,Guo),e(Sa,Kle),e(Kle,Ouo),e(Sa,Vuo),e(Sa,Zle),e(Zle,Xuo),e(Sa,zuo),e(He,Quo),e(He,Y),e(Y,$h),e($h,eie),e(eie,Wuo),e($h,Huo),e($h,EN),e(EN,Uuo),e($h,Juo),e(Y,Yuo),e(Y,kh),e(kh,oie),e(oie,Kuo),e(kh,Zuo),e(kh,CN),e(CN,epo),e(kh,opo),e(Y,rpo),e(Y,Sh),e(Sh,rie),e(rie,tpo),e(Sh,apo),e(Sh,wN),e(wN,npo),e(Sh,spo),e(Y,lpo),e(Y,Rh),e(Rh,tie),e(tie,ipo),e(Rh,dpo),e(Rh,AN),e(AN,cpo),e(Rh,mpo),e(Y,fpo),e(Y,Ph),e(Ph,aie),e(aie,gpo),e(Ph,hpo),e(Ph,LN),e(LN,upo),e(Ph,ppo),e(Y,_po),e(Y,Bh),e(Bh,nie),e(nie,bpo),e(Bh,vpo),e(Bh,yN),e(yN,Fpo),e(Bh,Tpo),e(Y,Mpo),e(Y,Ih),e(Ih,sie),e(sie,Epo),e(Ih,Cpo),e(Ih,xN),e(xN,wpo),e(Ih,Apo),e(Y,Lpo),e(Y,Nh),e(Nh,lie),e(lie,ypo),e(Nh,xpo),e(Nh,$N),e($N,$po),e(Nh,kpo),e(Y,Spo),e(Y,qh),e(qh,iie),e(iie,Rpo),e(qh,Ppo),e(qh,kN),e(kN,Bpo),e(qh,Ipo),e(Y,Npo),e(Y,jh),e(jh,die),e(die,qpo),e(jh,jpo),e(jh,SN),e(SN,Dpo),e(jh,Gpo),e(Y,Opo),e(Y,Dh),e(Dh,cie),e(cie,Vpo),e(Dh,Xpo),e(Dh,RN),e(RN,zpo),e(Dh,Qpo),e(Y,Wpo),e(Y,Gh),e(Gh,mie),e(mie,Hpo),e(Gh,Upo),e(Gh,PN),e(PN,Jpo),e(Gh,Ypo),e(Y,Kpo),e(Y,Oh),e(Oh,fie),e(fie,Zpo),e(Oh,e_o),e(Oh,BN),e(BN,o_o),e(Oh,r_o),e(Y,t_o),e(Y,Vh),e(Vh,gie),e(gie,a_o),e(Vh,n_o),e(Vh,IN),e(IN,s_o),e(Vh,l_o),e(Y,i_o),e(Y,Xh),e(Xh,hie),e(hie,d_o),e(Xh,c_o),e(Xh,NN),e(NN,m_o),e(Xh,f_o),e(Y,g_o),e(Y,zh),e(zh,uie),e(uie,h_o),e(zh,u_o),e(zh,qN),e(qN,p_o),e(zh,__o),e(Y,b_o),e(Y,Qh),e(Qh,pie),e(pie,v_o),e(Qh,F_o),e(Qh,jN),e(jN,T_o),e(Qh,M_o),e(Y,E_o),e(Y,Wh),e(Wh,_ie),e(_ie,C_o),e(Wh,w_o),e(Wh,DN),e(DN,A_o),e(Wh,L_o),e(Y,y_o),e(Y,Hh),e(Hh,bie),e(bie,x_o),e(Hh,$_o),e(Hh,GN),e(GN,k_o),e(Hh,S_o),e(Y,R_o),e(Y,Uh),e(Uh,vie),e(vie,P_o),e(Uh,B_o),e(Uh,ON),e(ON,I_o),e(Uh,N_o),e(Y,q_o),e(Y,Jh),e(Jh,Fie),e(Fie,j_o),e(Jh,D_o),e(Jh,VN),e(VN,G_o),e(Jh,O_o),e(Y,V_o),e(Y,Yh),e(Yh,Tie),e(Tie,X_o),e(Yh,z_o),e(Yh,XN),e(XN,Q_o),e(Yh,W_o),e(Y,H_o),e(Y,Kh),e(Kh,Mie),e(Mie,U_o),e(Kh,J_o),e(Kh,zN),e(zN,Y_o),e(Kh,K_o),e(Y,Z_o),e(Y,Zh),e(Zh,Eie),e(Eie,e2o),e(Zh,o2o),e(Zh,QN),e(QN,r2o),e(Zh,t2o),e(Y,a2o),e(Y,eu),e(eu,Cie),e(Cie,n2o),e(eu,s2o),e(eu,WN),e(WN,l2o),e(eu,i2o),e(Y,d2o),e(Y,ou),e(ou,wie),e(wie,c2o),e(ou,m2o),e(ou,HN),e(HN,f2o),e(ou,g2o),e(Y,h2o),e(Y,ru),e(ru,Aie),e(Aie,u2o),e(ru,p2o),e(ru,UN),e(UN,_2o),e(ru,b2o),e(Y,v2o),e(Y,tu),e(tu,Lie),e(Lie,F2o),e(tu,T2o),e(tu,JN),e(JN,M2o),e(tu,E2o),e(Y,C2o),e(Y,au),e(au,yie),e(yie,w2o),e(au,A2o),e(au,YN),e(YN,L2o),e(au,y2o),e(Y,x2o),e(Y,nu),e(nu,xie),e(xie,$2o),e(nu,k2o),e(nu,KN),e(KN,S2o),e(nu,R2o),e(Y,P2o),e(Y,su),e(su,$ie),e($ie,B2o),e(su,I2o),e(su,ZN),e(ZN,N2o),e(su,q2o),e(Y,j2o),e(Y,lu),e(lu,kie),e(kie,D2o),e(lu,G2o),e(lu,eq),e(eq,O2o),e(lu,V2o),e(Y,X2o),e(Y,iu),e(iu,Sie),e(Sie,z2o),e(iu,Q2o),e(iu,oq),e(oq,W2o),e(iu,H2o),e(He,U2o),M(du,He,null),e(He,J2o),M(cu,He,null),e(Lo,Y2o),e(Lo,mu),M(ty,mu,null),e(mu,K2o),e(mu,Rie),e(Rie,Z2o),b(m,POe,_),b(m,Bi,_),e(Bi,fu),e(fu,Pie),M(ay,Pie,null),e(Bi,ebo),e(Bi,Bie),e(Bie,obo),b(m,BOe,_),b(m,yo,_),M(ny,yo,null),e(yo,rbo),e(yo,sy),e(sy,tbo),e(sy,rq),e(rq,abo),e(sy,nbo),e(yo,sbo),e(yo,ly),e(ly,lbo),e(ly,Iie),e(Iie,ibo),e(ly,dbo),e(yo,cbo),e(yo,Ue),M(iy,Ue,null),e(Ue,mbo),e(Ue,Nie),e(Nie,fbo),e(Ue,gbo),e(Ue,Ii),e(Ii,hbo),e(Ii,qie),e(qie,ubo),e(Ii,pbo),e(Ii,jie),e(jie,_bo),e(Ii,bbo),e(Ue,vbo),e(Ue,he),e(he,gu),e(gu,Die),e(Die,Fbo),e(gu,Tbo),e(gu,tq),e(tq,Mbo),e(gu,Ebo),e(he,Cbo),e(he,hu),e(hu,Gie),e(Gie,wbo),e(hu,Abo),e(hu,Oie),e(Oie,Lbo),e(hu,ybo),e(he,xbo),e(he,uu),e(uu,Vie),e(Vie,$bo),e(uu,kbo),e(uu,aq),e(aq,Sbo),e(uu,Rbo),e(he,Pbo),e(he,pu),e(pu,Xie),e(Xie,Bbo),e(pu,Ibo),e(pu,nq),e(nq,Nbo),e(pu,qbo),e(he,jbo),e(he,_u),e(_u,zie),e(zie,Dbo),e(_u,Gbo),e(_u,sq),e(sq,Obo),e(_u,Vbo),e(he,Xbo),e(he,bu),e(bu,Qie),e(Qie,zbo),e(bu,Qbo),e(bu,lq),e(lq,Wbo),e(bu,Hbo),e(he,Ubo),e(he,vu),e(vu,Wie),e(Wie,Jbo),e(vu,Ybo),e(vu,iq),e(iq,Kbo),e(vu,Zbo),e(he,evo),e(he,Fu),e(Fu,Hie),e(Hie,ovo),e(Fu,rvo),e(Fu,dq),e(dq,tvo),e(Fu,avo),e(he,nvo),e(he,Tu),e(Tu,Uie),e(Uie,svo),e(Tu,lvo),e(Tu,cq),e(cq,ivo),e(Tu,dvo),e(he,cvo),e(he,Mu),e(Mu,Jie),e(Jie,mvo),e(Mu,fvo),e(Mu,mq),e(mq,gvo),e(Mu,hvo),e(he,uvo),e(he,Eu),e(Eu,Yie),e(Yie,pvo),e(Eu,_vo),e(Eu,fq),e(fq,bvo),e(Eu,vvo),e(he,Fvo),e(he,Cu),e(Cu,Kie),e(Kie,Tvo),e(Cu,Mvo),e(Cu,gq),e(gq,Evo),e(Cu,Cvo),e(he,wvo),e(he,wu),e(wu,Zie),e(Zie,Avo),e(wu,Lvo),e(wu,hq),e(hq,yvo),e(wu,xvo),e(he,$vo),e(he,Au),e(Au,ede),e(ede,kvo),e(Au,Svo),e(Au,uq),e(uq,Rvo),e(Au,Pvo),e(he,Bvo),e(he,Lu),e(Lu,ode),e(ode,Ivo),e(Lu,Nvo),e(Lu,pq),e(pq,qvo),e(Lu,jvo),e(he,Dvo),e(he,yu),e(yu,rde),e(rde,Gvo),e(yu,Ovo),e(yu,_q),e(_q,Vvo),e(yu,Xvo),e(he,zvo),e(he,xu),e(xu,tde),e(tde,Qvo),e(xu,Wvo),e(xu,bq),e(bq,Hvo),e(xu,Uvo),e(he,Jvo),e(he,$u),e($u,ade),e(ade,Yvo),e($u,Kvo),e($u,vq),e(vq,Zvo),e($u,e1o),e(Ue,o1o),M(ku,Ue,null),e(Ue,r1o),M(Su,Ue,null),e(yo,t1o),e(yo,Ru),M(dy,Ru,null),e(Ru,a1o),e(Ru,nde),e(nde,n1o),b(m,IOe,_),b(m,Ni,_),e(Ni,Pu),e(Pu,sde),M(cy,sde,null),e(Ni,s1o),e(Ni,lde),e(lde,l1o),b(m,NOe,_),b(m,xo,_),M(my,xo,null),e(xo,i1o),e(xo,qi),e(qi,d1o),e(qi,Fq),e(Fq,c1o),e(qi,m1o),e(qi,Tq),e(Tq,f1o),e(qi,g1o),e(xo,h1o),e(xo,fy),e(fy,u1o),e(fy,ide),e(ide,p1o),e(fy,_1o),e(xo,b1o),e(xo,nt),M(gy,nt,null),e(nt,v1o),e(nt,dde),e(dde,F1o),e(nt,T1o),e(nt,ji),e(ji,M1o),e(ji,cde),e(cde,E1o),e(ji,C1o),e(ji,Mq),e(Mq,w1o),e(ji,A1o),e(nt,L1o),M(Bu,nt,null),e(xo,y1o),e(xo,Je),M(hy,Je,null),e(Je,x1o),e(Je,mde),e(mde,$1o),e(Je,k1o),e(Je,Ra),e(Ra,S1o),e(Ra,fde),e(fde,R1o),e(Ra,P1o),e(Ra,gde),e(gde,B1o),e(Ra,I1o),e(Ra,hde),e(hde,N1o),e(Ra,q1o),e(Je,j1o),e(Je,y),e(y,Iu),e(Iu,ude),e(ude,D1o),e(Iu,G1o),e(Iu,Eq),e(Eq,O1o),e(Iu,V1o),e(y,X1o),e(y,Nu),e(Nu,pde),e(pde,z1o),e(Nu,Q1o),e(Nu,Cq),e(Cq,W1o),e(Nu,H1o),e(y,U1o),e(y,qu),e(qu,_de),e(_de,J1o),e(qu,Y1o),e(qu,wq),e(wq,K1o),e(qu,Z1o),e(y,eFo),e(y,ju),e(ju,bde),e(bde,oFo),e(ju,rFo),e(ju,Aq),e(Aq,tFo),e(ju,aFo),e(y,nFo),e(y,Du),e(Du,vde),e(vde,sFo),e(Du,lFo),e(Du,Lq),e(Lq,iFo),e(Du,dFo),e(y,cFo),e(y,Gu),e(Gu,Fde),e(Fde,mFo),e(Gu,fFo),e(Gu,yq),e(yq,gFo),e(Gu,hFo),e(y,uFo),e(y,Ou),e(Ou,Tde),e(Tde,pFo),e(Ou,_Fo),e(Ou,xq),e(xq,bFo),e(Ou,vFo),e(y,FFo),e(y,Vu),e(Vu,Mde),e(Mde,TFo),e(Vu,MFo),e(Vu,$q),e($q,EFo),e(Vu,CFo),e(y,wFo),e(y,Xu),e(Xu,Ede),e(Ede,AFo),e(Xu,LFo),e(Xu,kq),e(kq,yFo),e(Xu,xFo),e(y,$Fo),e(y,zu),e(zu,Cde),e(Cde,kFo),e(zu,SFo),e(zu,Sq),e(Sq,RFo),e(zu,PFo),e(y,BFo),e(y,Qu),e(Qu,wde),e(wde,IFo),e(Qu,NFo),e(Qu,Rq),e(Rq,qFo),e(Qu,jFo),e(y,DFo),e(y,Wu),e(Wu,Ade),e(Ade,GFo),e(Wu,OFo),e(Wu,Pq),e(Pq,VFo),e(Wu,XFo),e(y,zFo),e(y,Hu),e(Hu,Lde),e(Lde,QFo),e(Hu,WFo),e(Hu,Bq),e(Bq,HFo),e(Hu,UFo),e(y,JFo),e(y,Uu),e(Uu,yde),e(yde,YFo),e(Uu,KFo),e(Uu,Iq),e(Iq,ZFo),e(Uu,eTo),e(y,oTo),e(y,Ju),e(Ju,xde),e(xde,rTo),e(Ju,tTo),e(Ju,Nq),e(Nq,aTo),e(Ju,nTo),e(y,sTo),e(y,Yu),e(Yu,$de),e($de,lTo),e(Yu,iTo),e(Yu,qq),e(qq,dTo),e(Yu,cTo),e(y,mTo),e(y,Ku),e(Ku,kde),e(kde,fTo),e(Ku,gTo),e(Ku,jq),e(jq,hTo),e(Ku,uTo),e(y,pTo),e(y,Zu),e(Zu,Sde),e(Sde,_To),e(Zu,bTo),e(Zu,Dq),e(Dq,vTo),e(Zu,FTo),e(y,TTo),e(y,ep),e(ep,Rde),e(Rde,MTo),e(ep,ETo),e(ep,Gq),e(Gq,CTo),e(ep,wTo),e(y,ATo),e(y,op),e(op,Pde),e(Pde,LTo),e(op,yTo),e(op,Oq),e(Oq,xTo),e(op,$To),e(y,kTo),e(y,rp),e(rp,Bde),e(Bde,STo),e(rp,RTo),e(rp,Vq),e(Vq,PTo),e(rp,BTo),e(y,ITo),e(y,tp),e(tp,Ide),e(Ide,NTo),e(tp,qTo),e(tp,Xq),e(Xq,jTo),e(tp,DTo),e(y,GTo),e(y,ap),e(ap,Nde),e(Nde,OTo),e(ap,VTo),e(ap,zq),e(zq,XTo),e(ap,zTo),e(y,QTo),e(y,np),e(np,qde),e(qde,WTo),e(np,HTo),e(np,Qq),e(Qq,UTo),e(np,JTo),e(y,YTo),e(y,sp),e(sp,jde),e(jde,KTo),e(sp,ZTo),e(sp,Wq),e(Wq,eMo),e(sp,oMo),e(y,rMo),e(y,lp),e(lp,Dde),e(Dde,tMo),e(lp,aMo),e(lp,Hq),e(Hq,nMo),e(lp,sMo),e(y,lMo),e(y,ip),e(ip,Gde),e(Gde,iMo),e(ip,dMo),e(ip,Uq),e(Uq,cMo),e(ip,mMo),e(y,fMo),e(y,dp),e(dp,Ode),e(Ode,gMo),e(dp,hMo),e(dp,Jq),e(Jq,uMo),e(dp,pMo),e(y,_Mo),e(y,cp),e(cp,Vde),e(Vde,bMo),e(cp,vMo),e(cp,Yq),e(Yq,FMo),e(cp,TMo),e(y,MMo),e(y,mp),e(mp,Xde),e(Xde,EMo),e(mp,CMo),e(mp,Kq),e(Kq,wMo),e(mp,AMo),e(y,LMo),e(y,fp),e(fp,zde),e(zde,yMo),e(fp,xMo),e(fp,Zq),e(Zq,$Mo),e(fp,kMo),e(y,SMo),e(y,gp),e(gp,Qde),e(Qde,RMo),e(gp,PMo),e(gp,ej),e(ej,BMo),e(gp,IMo),e(y,NMo),e(y,hp),e(hp,Wde),e(Wde,qMo),e(hp,jMo),e(hp,oj),e(oj,DMo),e(hp,GMo),e(y,OMo),e(y,up),e(up,Hde),e(Hde,VMo),e(up,XMo),e(up,rj),e(rj,zMo),e(up,QMo),e(y,WMo),e(y,zs),e(zs,Ude),e(Ude,HMo),e(zs,UMo),e(zs,tj),e(tj,JMo),e(zs,YMo),e(zs,aj),e(aj,KMo),e(zs,ZMo),e(y,eEo),e(y,pp),e(pp,Jde),e(Jde,oEo),e(pp,rEo),e(pp,nj),e(nj,tEo),e(pp,aEo),e(y,nEo),e(y,_p),e(_p,Yde),e(Yde,sEo),e(_p,lEo),e(_p,sj),e(sj,iEo),e(_p,dEo),e(y,cEo),e(y,bp),e(bp,Kde),e(Kde,mEo),e(bp,fEo),e(bp,lj),e(lj,gEo),e(bp,hEo),e(y,uEo),e(y,vp),e(vp,Zde),e(Zde,pEo),e(vp,_Eo),e(vp,ij),e(ij,bEo),e(vp,vEo),e(y,FEo),e(y,Fp),e(Fp,ece),e(ece,TEo),e(Fp,MEo),e(Fp,dj),e(dj,EEo),e(Fp,CEo),e(y,wEo),e(y,Tp),e(Tp,oce),e(oce,AEo),e(Tp,LEo),e(Tp,cj),e(cj,yEo),e(Tp,xEo),e(y,$Eo),e(y,Mp),e(Mp,rce),e(rce,kEo),e(Mp,SEo),e(Mp,mj),e(mj,REo),e(Mp,PEo),e(y,BEo),e(y,Ep),e(Ep,tce),e(tce,IEo),e(Ep,NEo),e(Ep,fj),e(fj,qEo),e(Ep,jEo),e(y,DEo),e(y,Cp),e(Cp,ace),e(ace,GEo),e(Cp,OEo),e(Cp,gj),e(gj,VEo),e(Cp,XEo),e(y,zEo),e(y,wp),e(wp,nce),e(nce,QEo),e(wp,WEo),e(wp,hj),e(hj,HEo),e(wp,UEo),e(y,JEo),e(y,Ap),e(Ap,sce),e(sce,YEo),e(Ap,KEo),e(Ap,uj),e(uj,ZEo),e(Ap,e4o),e(y,o4o),e(y,Lp),e(Lp,lce),e(lce,r4o),e(Lp,t4o),e(Lp,pj),e(pj,a4o),e(Lp,n4o),e(y,s4o),e(y,yp),e(yp,ice),e(ice,l4o),e(yp,i4o),e(yp,_j),e(_j,d4o),e(yp,c4o),e(y,m4o),e(y,xp),e(xp,dce),e(dce,f4o),e(xp,g4o),e(xp,bj),e(bj,h4o),e(xp,u4o),e(y,p4o),e(y,$p),e($p,cce),e(cce,_4o),e($p,b4o),e($p,vj),e(vj,v4o),e($p,F4o),e(y,T4o),e(y,kp),e(kp,mce),e(mce,M4o),e(kp,E4o),e(kp,Fj),e(Fj,C4o),e(kp,w4o),e(y,A4o),e(y,Sp),e(Sp,fce),e(fce,L4o),e(Sp,y4o),e(Sp,Tj),e(Tj,x4o),e(Sp,$4o),e(y,k4o),e(y,Rp),e(Rp,gce),e(gce,S4o),e(Rp,R4o),e(Rp,Mj),e(Mj,P4o),e(Rp,B4o),e(y,I4o),e(y,Pp),e(Pp,hce),e(hce,N4o),e(Pp,q4o),e(Pp,Ej),e(Ej,j4o),e(Pp,D4o),e(y,G4o),e(y,Bp),e(Bp,uce),e(uce,O4o),e(Bp,V4o),e(Bp,Cj),e(Cj,X4o),e(Bp,z4o),e(y,Q4o),e(y,Ip),e(Ip,pce),e(pce,W4o),e(Ip,H4o),e(Ip,wj),e(wj,U4o),e(Ip,J4o),e(y,Y4o),e(y,Np),e(Np,_ce),e(_ce,K4o),e(Np,Z4o),e(Np,Aj),e(Aj,eCo),e(Np,oCo),e(y,rCo),e(y,qp),e(qp,bce),e(bce,tCo),e(qp,aCo),e(qp,Lj),e(Lj,nCo),e(qp,sCo),e(y,lCo),e(y,jp),e(jp,vce),e(vce,iCo),e(jp,dCo),e(jp,yj),e(yj,cCo),e(jp,mCo),e(y,fCo),e(y,Dp),e(Dp,Fce),e(Fce,gCo),e(Dp,hCo),e(Dp,xj),e(xj,uCo),e(Dp,pCo),e(y,_Co),e(y,Gp),e(Gp,Tce),e(Tce,bCo),e(Gp,vCo),e(Gp,$j),e($j,FCo),e(Gp,TCo),e(y,MCo),e(y,Op),e(Op,Mce),e(Mce,ECo),e(Op,CCo),e(Op,kj),e(kj,wCo),e(Op,ACo),e(y,LCo),e(y,Vp),e(Vp,Ece),e(Ece,yCo),e(Vp,xCo),e(Vp,Sj),e(Sj,$Co),e(Vp,kCo),e(y,SCo),e(y,Xp),e(Xp,Cce),e(Cce,RCo),e(Xp,PCo),e(Xp,Rj),e(Rj,BCo),e(Xp,ICo),e(y,NCo),e(y,zp),e(zp,wce),e(wce,qCo),e(zp,jCo),e(zp,Pj),e(Pj,DCo),e(zp,GCo),e(y,OCo),e(y,Qp),e(Qp,Ace),e(Ace,VCo),e(Qp,XCo),e(Qp,Bj),e(Bj,zCo),e(Qp,QCo),e(y,WCo),e(y,Wp),e(Wp,Lce),e(Lce,HCo),e(Wp,UCo),e(Wp,Ij),e(Ij,JCo),e(Wp,YCo),e(y,KCo),e(y,Hp),e(Hp,yce),e(yce,ZCo),e(Hp,e5o),e(Hp,Nj),e(Nj,o5o),e(Hp,r5o),e(y,t5o),e(y,Up),e(Up,xce),e(xce,a5o),e(Up,n5o),e(Up,qj),e(qj,s5o),e(Up,l5o),e(y,i5o),e(y,Jp),e(Jp,$ce),e($ce,d5o),e(Jp,c5o),e(Jp,jj),e(jj,m5o),e(Jp,f5o),e(y,g5o),e(y,Yp),e(Yp,kce),e(kce,h5o),e(Yp,u5o),e(Yp,Dj),e(Dj,p5o),e(Yp,_5o),e(y,b5o),e(y,Kp),e(Kp,Sce),e(Sce,v5o),e(Kp,F5o),e(Kp,Gj),e(Gj,T5o),e(Kp,M5o),e(y,E5o),e(y,Zp),e(Zp,Rce),e(Rce,C5o),e(Zp,w5o),e(Zp,Oj),e(Oj,A5o),e(Zp,L5o),e(y,y5o),e(y,e_),e(e_,Pce),e(Pce,x5o),e(e_,$5o),e(e_,Vj),e(Vj,k5o),e(e_,S5o),e(y,R5o),e(y,o_),e(o_,Bce),e(Bce,P5o),e(o_,B5o),e(o_,Xj),e(Xj,I5o),e(o_,N5o),e(y,q5o),e(y,r_),e(r_,Ice),e(Ice,j5o),e(r_,D5o),e(r_,zj),e(zj,G5o),e(r_,O5o),e(y,V5o),e(y,t_),e(t_,Nce),e(Nce,X5o),e(t_,z5o),e(t_,Qj),e(Qj,Q5o),e(t_,W5o),e(y,H5o),e(y,a_),e(a_,qce),e(qce,U5o),e(a_,J5o),e(a_,Wj),e(Wj,Y5o),e(a_,K5o),e(y,Z5o),e(y,n_),e(n_,jce),e(jce,e3o),e(n_,o3o),e(n_,Hj),e(Hj,r3o),e(n_,t3o),e(y,a3o),e(y,s_),e(s_,Dce),e(Dce,n3o),e(s_,s3o),e(s_,Uj),e(Uj,l3o),e(s_,i3o),e(y,d3o),e(y,l_),e(l_,Gce),e(Gce,c3o),e(l_,m3o),e(l_,Jj),e(Jj,f3o),e(l_,g3o),e(y,h3o),e(y,i_),e(i_,Oce),e(Oce,u3o),e(i_,p3o),e(i_,Yj),e(Yj,_3o),e(i_,b3o),e(y,v3o),e(y,d_),e(d_,Vce),e(Vce,F3o),e(d_,T3o),e(d_,Kj),e(Kj,M3o),e(d_,E3o),e(y,C3o),e(y,c_),e(c_,Xce),e(Xce,w3o),e(c_,A3o),e(c_,Zj),e(Zj,L3o),e(c_,y3o),e(y,x3o),e(y,m_),e(m_,zce),e(zce,$3o),e(m_,k3o),e(m_,eD),e(eD,S3o),e(m_,R3o),e(y,P3o),e(y,f_),e(f_,Qce),e(Qce,B3o),e(f_,I3o),e(f_,oD),e(oD,N3o),e(f_,q3o),e(y,j3o),e(y,g_),e(g_,Wce),e(Wce,D3o),e(g_,G3o),e(g_,rD),e(rD,O3o),e(g_,V3o),e(y,X3o),e(y,h_),e(h_,Hce),e(Hce,z3o),e(h_,Q3o),e(h_,tD),e(tD,W3o),e(h_,H3o),e(y,U3o),e(y,u_),e(u_,Uce),e(Uce,J3o),e(u_,Y3o),e(u_,aD),e(aD,K3o),e(u_,Z3o),e(y,e0o),e(y,p_),e(p_,Jce),e(Jce,o0o),e(p_,r0o),e(p_,nD),e(nD,t0o),e(p_,a0o),e(y,n0o),e(y,__),e(__,Yce),e(Yce,s0o),e(__,l0o),e(__,sD),e(sD,i0o),e(__,d0o),e(y,c0o),e(y,b_),e(b_,Kce),e(Kce,m0o),e(b_,f0o),e(b_,lD),e(lD,g0o),e(b_,h0o),e(y,u0o),e(y,v_),e(v_,Zce),e(Zce,p0o),e(v_,_0o),e(v_,iD),e(iD,b0o),e(v_,v0o),e(y,F0o),e(y,F_),e(F_,eme),e(eme,T0o),e(F_,M0o),e(F_,dD),e(dD,E0o),e(F_,C0o),e(y,w0o),e(y,T_),e(T_,ome),e(ome,A0o),e(T_,L0o),e(T_,cD),e(cD,y0o),e(T_,x0o),e(y,$0o),e(y,M_),e(M_,rme),e(rme,k0o),e(M_,S0o),e(M_,mD),e(mD,R0o),e(M_,P0o),e(y,B0o),e(y,E_),e(E_,tme),e(tme,I0o),e(E_,N0o),e(E_,fD),e(fD,q0o),e(E_,j0o),e(y,D0o),e(y,C_),e(C_,ame),e(ame,G0o),e(C_,O0o),e(C_,gD),e(gD,V0o),e(C_,X0o),e(y,z0o),e(y,w_),e(w_,nme),e(nme,Q0o),e(w_,W0o),e(w_,hD),e(hD,H0o),e(w_,U0o),e(y,J0o),e(y,A_),e(A_,sme),e(sme,Y0o),e(A_,K0o),e(A_,uD),e(uD,Z0o),e(A_,ewo),e(y,owo),e(y,L_),e(L_,lme),e(lme,rwo),e(L_,two),e(L_,pD),e(pD,awo),e(L_,nwo),e(y,swo),e(y,y_),e(y_,ime),e(ime,lwo),e(y_,iwo),e(y_,_D),e(_D,dwo),e(y_,cwo),e(y,mwo),e(y,x_),e(x_,dme),e(dme,fwo),e(x_,gwo),e(x_,bD),e(bD,hwo),e(x_,uwo),e(y,pwo),e(y,$_),e($_,cme),e(cme,_wo),e($_,bwo),e($_,vD),e(vD,vwo),e($_,Fwo),e(y,Two),e(y,k_),e(k_,mme),e(mme,Mwo),e(k_,Ewo),e(k_,FD),e(FD,Cwo),e(k_,wwo),e(y,Awo),e(y,S_),e(S_,fme),e(fme,Lwo),e(S_,ywo),e(S_,TD),e(TD,xwo),e(S_,$wo),e(y,kwo),e(y,R_),e(R_,gme),e(gme,Swo),e(R_,Rwo),e(R_,MD),e(MD,Pwo),e(R_,Bwo),e(y,Iwo),e(y,P_),e(P_,hme),e(hme,Nwo),e(P_,qwo),e(P_,ED),e(ED,jwo),e(P_,Dwo),e(y,Gwo),e(y,B_),e(B_,ume),e(ume,Owo),e(B_,Vwo),e(B_,CD),e(CD,Xwo),e(B_,zwo),e(Je,Qwo),e(Je,I_),e(I_,Wwo),e(I_,pme),e(pme,Hwo),e(I_,Uwo),e(I_,_me),e(_me,Jwo),e(Je,Ywo),M(N_,Je,null),b(m,qOe,_),b(m,Di,_),e(Di,q_),e(q_,bme),M(uy,bme,null),e(Di,Kwo),e(Di,vme),e(vme,Zwo),b(m,jOe,_),b(m,$o,_),M(py,$o,null),e($o,eAo),e($o,Gi),e(Gi,oAo),e(Gi,wD),e(wD,rAo),e(Gi,tAo),e(Gi,AD),e(AD,aAo),e(Gi,nAo),e($o,sAo),e($o,_y),e(_y,lAo),e(_y,Fme),e(Fme,iAo),e(_y,dAo),e($o,cAo),e($o,st),M(by,st,null),e(st,mAo),e(st,Tme),e(Tme,fAo),e(st,gAo),e(st,Oi),e(Oi,hAo),e(Oi,Mme),e(Mme,uAo),e(Oi,pAo),e(Oi,LD),e(LD,_Ao),e(Oi,bAo),e(st,vAo),M(j_,st,null),e($o,FAo),e($o,Ye),M(vy,Ye,null),e(Ye,TAo),e(Ye,Eme),e(Eme,MAo),e(Ye,EAo),e(Ye,Pa),e(Pa,CAo),e(Pa,Cme),e(Cme,wAo),e(Pa,AAo),e(Pa,wme),e(wme,LAo),e(Pa,yAo),e(Pa,Ame),e(Ame,xAo),e(Pa,$Ao),e(Ye,kAo),e(Ye,G),e(G,D_),e(D_,Lme),e(Lme,SAo),e(D_,RAo),e(D_,yD),e(yD,PAo),e(D_,BAo),e(G,IAo),e(G,G_),e(G_,yme),e(yme,NAo),e(G_,qAo),e(G_,xD),e(xD,jAo),e(G_,DAo),e(G,GAo),e(G,O_),e(O_,xme),e(xme,OAo),e(O_,VAo),e(O_,$D),e($D,XAo),e(O_,zAo),e(G,QAo),e(G,V_),e(V_,$me),e($me,WAo),e(V_,HAo),e(V_,kD),e(kD,UAo),e(V_,JAo),e(G,YAo),e(G,X_),e(X_,kme),e(kme,KAo),e(X_,ZAo),e(X_,SD),e(SD,e6o),e(X_,o6o),e(G,r6o),e(G,z_),e(z_,Sme),e(Sme,t6o),e(z_,a6o),e(z_,RD),e(RD,n6o),e(z_,s6o),e(G,l6o),e(G,Q_),e(Q_,Rme),e(Rme,i6o),e(Q_,d6o),e(Q_,PD),e(PD,c6o),e(Q_,m6o),e(G,f6o),e(G,W_),e(W_,Pme),e(Pme,g6o),e(W_,h6o),e(W_,BD),e(BD,u6o),e(W_,p6o),e(G,_6o),e(G,H_),e(H_,Bme),e(Bme,b6o),e(H_,v6o),e(H_,ID),e(ID,F6o),e(H_,T6o),e(G,M6o),e(G,U_),e(U_,Ime),e(Ime,E6o),e(U_,C6o),e(U_,ND),e(ND,w6o),e(U_,A6o),e(G,L6o),e(G,J_),e(J_,Nme),e(Nme,y6o),e(J_,x6o),e(J_,qD),e(qD,$6o),e(J_,k6o),e(G,S6o),e(G,Y_),e(Y_,qme),e(qme,R6o),e(Y_,P6o),e(Y_,jD),e(jD,B6o),e(Y_,I6o),e(G,N6o),e(G,K_),e(K_,jme),e(jme,q6o),e(K_,j6o),e(K_,DD),e(DD,D6o),e(K_,G6o),e(G,O6o),e(G,Z_),e(Z_,Dme),e(Dme,V6o),e(Z_,X6o),e(Z_,GD),e(GD,z6o),e(Z_,Q6o),e(G,W6o),e(G,e2),e(e2,Gme),e(Gme,H6o),e(e2,U6o),e(e2,OD),e(OD,J6o),e(e2,Y6o),e(G,K6o),e(G,o2),e(o2,Ome),e(Ome,Z6o),e(o2,eLo),e(o2,VD),e(VD,oLo),e(o2,rLo),e(G,tLo),e(G,r2),e(r2,Vme),e(Vme,aLo),e(r2,nLo),e(r2,XD),e(XD,sLo),e(r2,lLo),e(G,iLo),e(G,t2),e(t2,Xme),e(Xme,dLo),e(t2,cLo),e(t2,zD),e(zD,mLo),e(t2,fLo),e(G,gLo),e(G,a2),e(a2,zme),e(zme,hLo),e(a2,uLo),e(a2,QD),e(QD,pLo),e(a2,_Lo),e(G,bLo),e(G,n2),e(n2,Qme),e(Qme,vLo),e(n2,FLo),e(n2,WD),e(WD,TLo),e(n2,MLo),e(G,ELo),e(G,s2),e(s2,Wme),e(Wme,CLo),e(s2,wLo),e(s2,HD),e(HD,ALo),e(s2,LLo),e(G,yLo),e(G,l2),e(l2,Hme),e(Hme,xLo),e(l2,$Lo),e(l2,UD),e(UD,kLo),e(l2,SLo),e(G,RLo),e(G,i2),e(i2,Ume),e(Ume,PLo),e(i2,BLo),e(i2,JD),e(JD,ILo),e(i2,NLo),e(G,qLo),e(G,d2),e(d2,Jme),e(Jme,jLo),e(d2,DLo),e(d2,YD),e(YD,GLo),e(d2,OLo),e(G,VLo),e(G,c2),e(c2,Yme),e(Yme,XLo),e(c2,zLo),e(c2,KD),e(KD,QLo),e(c2,WLo),e(G,HLo),e(G,m2),e(m2,Kme),e(Kme,ULo),e(m2,JLo),e(m2,ZD),e(ZD,YLo),e(m2,KLo),e(G,ZLo),e(G,f2),e(f2,Zme),e(Zme,e7o),e(f2,o7o),e(f2,eG),e(eG,r7o),e(f2,t7o),e(G,a7o),e(G,g2),e(g2,efe),e(efe,n7o),e(g2,s7o),e(g2,oG),e(oG,l7o),e(g2,i7o),e(G,d7o),e(G,h2),e(h2,ofe),e(ofe,c7o),e(h2,m7o),e(h2,rG),e(rG,f7o),e(h2,g7o),e(G,h7o),e(G,u2),e(u2,rfe),e(rfe,u7o),e(u2,p7o),e(u2,tG),e(tG,_7o),e(u2,b7o),e(G,v7o),e(G,p2),e(p2,tfe),e(tfe,F7o),e(p2,T7o),e(p2,aG),e(aG,M7o),e(p2,E7o),e(G,C7o),e(G,_2),e(_2,afe),e(afe,w7o),e(_2,A7o),e(_2,nG),e(nG,L7o),e(_2,y7o),e(G,x7o),e(G,b2),e(b2,nfe),e(nfe,$7o),e(b2,k7o),e(b2,sG),e(sG,S7o),e(b2,R7o),e(G,P7o),e(G,v2),e(v2,sfe),e(sfe,B7o),e(v2,I7o),e(v2,lG),e(lG,N7o),e(v2,q7o),e(G,j7o),e(G,F2),e(F2,lfe),e(lfe,D7o),e(F2,G7o),e(F2,iG),e(iG,O7o),e(F2,V7o),e(G,X7o),e(G,T2),e(T2,ife),e(ife,z7o),e(T2,Q7o),e(T2,dG),e(dG,W7o),e(T2,H7o),e(G,U7o),e(G,M2),e(M2,dfe),e(dfe,J7o),e(M2,Y7o),e(M2,cG),e(cG,K7o),e(M2,Z7o),e(G,eyo),e(G,E2),e(E2,cfe),e(cfe,oyo),e(E2,ryo),e(E2,mG),e(mG,tyo),e(E2,ayo),e(G,nyo),e(G,C2),e(C2,mfe),e(mfe,syo),e(C2,lyo),e(C2,fG),e(fG,iyo),e(C2,dyo),e(G,cyo),e(G,w2),e(w2,ffe),e(ffe,myo),e(w2,fyo),e(w2,gG),e(gG,gyo),e(w2,hyo),e(G,uyo),e(G,A2),e(A2,gfe),e(gfe,pyo),e(A2,_yo),e(A2,hG),e(hG,byo),e(A2,vyo),e(G,Fyo),e(G,L2),e(L2,hfe),e(hfe,Tyo),e(L2,Myo),e(L2,uG),e(uG,Eyo),e(L2,Cyo),e(G,wyo),e(G,y2),e(y2,ufe),e(ufe,Ayo),e(y2,Lyo),e(y2,pG),e(pG,yyo),e(y2,xyo),e(G,$yo),e(G,x2),e(x2,pfe),e(pfe,kyo),e(x2,Syo),e(x2,_G),e(_G,Ryo),e(x2,Pyo),e(Ye,Byo),e(Ye,$2),e($2,Iyo),e($2,_fe),e(_fe,Nyo),e($2,qyo),e($2,bfe),e(bfe,jyo),e(Ye,Dyo),M(k2,Ye,null),b(m,DOe,_),b(m,Vi,_),e(Vi,S2),e(S2,vfe),M(Fy,vfe,null),e(Vi,Gyo),e(Vi,Ffe),e(Ffe,Oyo),b(m,GOe,_),b(m,ko,_),M(Ty,ko,null),e(ko,Vyo),e(ko,Xi),e(Xi,Xyo),e(Xi,bG),e(bG,zyo),e(Xi,Qyo),e(Xi,vG),e(vG,Wyo),e(Xi,Hyo),e(ko,Uyo),e(ko,My),e(My,Jyo),e(My,Tfe),e(Tfe,Yyo),e(My,Kyo),e(ko,Zyo),e(ko,lt),M(Ey,lt,null),e(lt,e8o),e(lt,Mfe),e(Mfe,o8o),e(lt,r8o),e(lt,zi),e(zi,t8o),e(zi,Efe),e(Efe,a8o),e(zi,n8o),e(zi,FG),e(FG,s8o),e(zi,l8o),e(lt,i8o),M(R2,lt,null),e(ko,d8o),e(ko,Ke),M(Cy,Ke,null),e(Ke,c8o),e(Ke,Cfe),e(Cfe,m8o),e(Ke,f8o),e(Ke,Ba),e(Ba,g8o),e(Ba,wfe),e(wfe,h8o),e(Ba,u8o),e(Ba,Afe),e(Afe,p8o),e(Ba,_8o),e(Ba,Lfe),e(Lfe,b8o),e(Ba,v8o),e(Ke,F8o),e(Ke,z),e(z,P2),e(P2,yfe),e(yfe,T8o),e(P2,M8o),e(P2,TG),e(TG,E8o),e(P2,C8o),e(z,w8o),e(z,B2),e(B2,xfe),e(xfe,A8o),e(B2,L8o),e(B2,MG),e(MG,y8o),e(B2,x8o),e(z,$8o),e(z,I2),e(I2,$fe),e($fe,k8o),e(I2,S8o),e(I2,EG),e(EG,R8o),e(I2,P8o),e(z,B8o),e(z,N2),e(N2,kfe),e(kfe,I8o),e(N2,N8o),e(N2,CG),e(CG,q8o),e(N2,j8o),e(z,D8o),e(z,q2),e(q2,Sfe),e(Sfe,G8o),e(q2,O8o),e(q2,wG),e(wG,V8o),e(q2,X8o),e(z,z8o),e(z,j2),e(j2,Rfe),e(Rfe,Q8o),e(j2,W8o),e(j2,AG),e(AG,H8o),e(j2,U8o),e(z,J8o),e(z,D2),e(D2,Pfe),e(Pfe,Y8o),e(D2,K8o),e(D2,LG),e(LG,Z8o),e(D2,e9o),e(z,o9o),e(z,G2),e(G2,Bfe),e(Bfe,r9o),e(G2,t9o),e(G2,yG),e(yG,a9o),e(G2,n9o),e(z,s9o),e(z,O2),e(O2,Ife),e(Ife,l9o),e(O2,i9o),e(O2,xG),e(xG,d9o),e(O2,c9o),e(z,m9o),e(z,V2),e(V2,Nfe),e(Nfe,f9o),e(V2,g9o),e(V2,$G),e($G,h9o),e(V2,u9o),e(z,p9o),e(z,X2),e(X2,qfe),e(qfe,_9o),e(X2,b9o),e(X2,kG),e(kG,v9o),e(X2,F9o),e(z,T9o),e(z,z2),e(z2,jfe),e(jfe,M9o),e(z2,E9o),e(z2,SG),e(SG,C9o),e(z2,w9o),e(z,A9o),e(z,Q2),e(Q2,Dfe),e(Dfe,L9o),e(Q2,y9o),e(Q2,RG),e(RG,x9o),e(Q2,$9o),e(z,k9o),e(z,W2),e(W2,Gfe),e(Gfe,S9o),e(W2,R9o),e(W2,PG),e(PG,P9o),e(W2,B9o),e(z,I9o),e(z,H2),e(H2,Ofe),e(Ofe,N9o),e(H2,q9o),e(H2,BG),e(BG,j9o),e(H2,D9o),e(z,G9o),e(z,U2),e(U2,Vfe),e(Vfe,O9o),e(U2,V9o),e(U2,IG),e(IG,X9o),e(U2,z9o),e(z,Q9o),e(z,J2),e(J2,Xfe),e(Xfe,W9o),e(J2,H9o),e(J2,NG),e(NG,U9o),e(J2,J9o),e(z,Y9o),e(z,Y2),e(Y2,zfe),e(zfe,K9o),e(Y2,Z9o),e(Y2,qG),e(qG,exo),e(Y2,oxo),e(z,rxo),e(z,K2),e(K2,Qfe),e(Qfe,txo),e(K2,axo),e(K2,jG),e(jG,nxo),e(K2,sxo),e(z,lxo),e(z,Z2),e(Z2,Wfe),e(Wfe,ixo),e(Z2,dxo),e(Z2,DG),e(DG,cxo),e(Z2,mxo),e(z,fxo),e(z,eb),e(eb,Hfe),e(Hfe,gxo),e(eb,hxo),e(eb,GG),e(GG,uxo),e(eb,pxo),e(z,_xo),e(z,ob),e(ob,Ufe),e(Ufe,bxo),e(ob,vxo),e(ob,OG),e(OG,Fxo),e(ob,Txo),e(z,Mxo),e(z,rb),e(rb,Jfe),e(Jfe,Exo),e(rb,Cxo),e(rb,VG),e(VG,wxo),e(rb,Axo),e(z,Lxo),e(z,tb),e(tb,Yfe),e(Yfe,yxo),e(tb,xxo),e(tb,XG),e(XG,$xo),e(tb,kxo),e(z,Sxo),e(z,ab),e(ab,Kfe),e(Kfe,Rxo),e(ab,Pxo),e(ab,zG),e(zG,Bxo),e(ab,Ixo),e(z,Nxo),e(z,nb),e(nb,Zfe),e(Zfe,qxo),e(nb,jxo),e(nb,QG),e(QG,Dxo),e(nb,Gxo),e(z,Oxo),e(z,sb),e(sb,ege),e(ege,Vxo),e(sb,Xxo),e(sb,WG),e(WG,zxo),e(sb,Qxo),e(z,Wxo),e(z,lb),e(lb,oge),e(oge,Hxo),e(lb,Uxo),e(lb,HG),e(HG,Jxo),e(lb,Yxo),e(z,Kxo),e(z,ib),e(ib,rge),e(rge,Zxo),e(ib,e$o),e(ib,UG),e(UG,o$o),e(ib,r$o),e(z,t$o),e(z,db),e(db,tge),e(tge,a$o),e(db,n$o),e(db,JG),e(JG,s$o),e(db,l$o),e(z,i$o),e(z,cb),e(cb,age),e(age,d$o),e(cb,c$o),e(cb,YG),e(YG,m$o),e(cb,f$o),e(z,g$o),e(z,mb),e(mb,nge),e(nge,h$o),e(mb,u$o),e(mb,KG),e(KG,p$o),e(mb,_$o),e(z,b$o),e(z,fb),e(fb,sge),e(sge,v$o),e(fb,F$o),e(fb,ZG),e(ZG,T$o),e(fb,M$o),e(z,E$o),e(z,gb),e(gb,lge),e(lge,C$o),e(gb,w$o),e(gb,eO),e(eO,A$o),e(gb,L$o),e(z,y$o),e(z,hb),e(hb,ige),e(ige,x$o),e(hb,$$o),e(hb,oO),e(oO,k$o),e(hb,S$o),e(z,R$o),e(z,ub),e(ub,dge),e(dge,P$o),e(ub,B$o),e(ub,rO),e(rO,I$o),e(ub,N$o),e(z,q$o),e(z,pb),e(pb,cge),e(cge,j$o),e(pb,D$o),e(pb,tO),e(tO,G$o),e(pb,O$o),e(z,V$o),e(z,_b),e(_b,mge),e(mge,X$o),e(_b,z$o),e(_b,aO),e(aO,Q$o),e(_b,W$o),e(z,H$o),e(z,bb),e(bb,fge),e(fge,U$o),e(bb,J$o),e(bb,nO),e(nO,Y$o),e(bb,K$o),e(Ke,Z$o),e(Ke,vb),e(vb,eko),e(vb,gge),e(gge,oko),e(vb,rko),e(vb,hge),e(hge,tko),e(Ke,ako),M(Fb,Ke,null),b(m,OOe,_),b(m,Qi,_),e(Qi,Tb),e(Tb,uge),M(wy,uge,null),e(Qi,nko),e(Qi,pge),e(pge,sko),b(m,VOe,_),b(m,So,_),M(Ay,So,null),e(So,lko),e(So,Wi),e(Wi,iko),e(Wi,sO),e(sO,dko),e(Wi,cko),e(Wi,lO),e(lO,mko),e(Wi,fko),e(So,gko),e(So,Ly),e(Ly,hko),e(Ly,_ge),e(_ge,uko),e(Ly,pko),e(So,_ko),e(So,it),M(yy,it,null),e(it,bko),e(it,bge),e(bge,vko),e(it,Fko),e(it,Hi),e(Hi,Tko),e(Hi,vge),e(vge,Mko),e(Hi,Eko),e(Hi,iO),e(iO,Cko),e(Hi,wko),e(it,Ako),M(Mb,it,null),e(So,Lko),e(So,Ze),M(xy,Ze,null),e(Ze,yko),e(Ze,Fge),e(Fge,xko),e(Ze,$ko),e(Ze,Ia),e(Ia,kko),e(Ia,Tge),e(Tge,Sko),e(Ia,Rko),e(Ia,Mge),e(Mge,Pko),e(Ia,Bko),e(Ia,Ege),e(Ege,Iko),e(Ia,Nko),e(Ze,qko),e(Ze,W),e(W,Eb),e(Eb,Cge),e(Cge,jko),e(Eb,Dko),e(Eb,dO),e(dO,Gko),e(Eb,Oko),e(W,Vko),e(W,Cb),e(Cb,wge),e(wge,Xko),e(Cb,zko),e(Cb,cO),e(cO,Qko),e(Cb,Wko),e(W,Hko),e(W,wb),e(wb,Age),e(Age,Uko),e(wb,Jko),e(wb,mO),e(mO,Yko),e(wb,Kko),e(W,Zko),e(W,Ab),e(Ab,Lge),e(Lge,eSo),e(Ab,oSo),e(Ab,fO),e(fO,rSo),e(Ab,tSo),e(W,aSo),e(W,Lb),e(Lb,yge),e(yge,nSo),e(Lb,sSo),e(Lb,gO),e(gO,lSo),e(Lb,iSo),e(W,dSo),e(W,yb),e(yb,xge),e(xge,cSo),e(yb,mSo),e(yb,hO),e(hO,fSo),e(yb,gSo),e(W,hSo),e(W,xb),e(xb,$ge),e($ge,uSo),e(xb,pSo),e(xb,uO),e(uO,_So),e(xb,bSo),e(W,vSo),e(W,$b),e($b,kge),e(kge,FSo),e($b,TSo),e($b,pO),e(pO,MSo),e($b,ESo),e(W,CSo),e(W,kb),e(kb,Sge),e(Sge,wSo),e(kb,ASo),e(kb,_O),e(_O,LSo),e(kb,ySo),e(W,xSo),e(W,Sb),e(Sb,Rge),e(Rge,$So),e(Sb,kSo),e(Sb,bO),e(bO,SSo),e(Sb,RSo),e(W,PSo),e(W,Rb),e(Rb,Pge),e(Pge,BSo),e(Rb,ISo),e(Rb,vO),e(vO,NSo),e(Rb,qSo),e(W,jSo),e(W,Pb),e(Pb,Bge),e(Bge,DSo),e(Pb,GSo),e(Pb,FO),e(FO,OSo),e(Pb,VSo),e(W,XSo),e(W,Bb),e(Bb,Ige),e(Ige,zSo),e(Bb,QSo),e(Bb,TO),e(TO,WSo),e(Bb,HSo),e(W,USo),e(W,Ib),e(Ib,Nge),e(Nge,JSo),e(Ib,YSo),e(Ib,MO),e(MO,KSo),e(Ib,ZSo),e(W,eRo),e(W,Nb),e(Nb,qge),e(qge,oRo),e(Nb,rRo),e(Nb,EO),e(EO,tRo),e(Nb,aRo),e(W,nRo),e(W,qb),e(qb,jge),e(jge,sRo),e(qb,lRo),e(qb,CO),e(CO,iRo),e(qb,dRo),e(W,cRo),e(W,jb),e(jb,Dge),e(Dge,mRo),e(jb,fRo),e(jb,wO),e(wO,gRo),e(jb,hRo),e(W,uRo),e(W,Db),e(Db,Gge),e(Gge,pRo),e(Db,_Ro),e(Db,AO),e(AO,bRo),e(Db,vRo),e(W,FRo),e(W,Gb),e(Gb,Oge),e(Oge,TRo),e(Gb,MRo),e(Gb,LO),e(LO,ERo),e(Gb,CRo),e(W,wRo),e(W,Ob),e(Ob,Vge),e(Vge,ARo),e(Ob,LRo),e(Ob,yO),e(yO,yRo),e(Ob,xRo),e(W,$Ro),e(W,Vb),e(Vb,Xge),e(Xge,kRo),e(Vb,SRo),e(Vb,xO),e(xO,RRo),e(Vb,PRo),e(W,BRo),e(W,Xb),e(Xb,zge),e(zge,IRo),e(Xb,NRo),e(Xb,$O),e($O,qRo),e(Xb,jRo),e(W,DRo),e(W,zb),e(zb,Qge),e(Qge,GRo),e(zb,ORo),e(zb,kO),e(kO,VRo),e(zb,XRo),e(W,zRo),e(W,Qb),e(Qb,Wge),e(Wge,QRo),e(Qb,WRo),e(Qb,SO),e(SO,HRo),e(Qb,URo),e(W,JRo),e(W,Wb),e(Wb,Hge),e(Hge,YRo),e(Wb,KRo),e(Wb,RO),e(RO,ZRo),e(Wb,ePo),e(W,oPo),e(W,Hb),e(Hb,Uge),e(Uge,rPo),e(Hb,tPo),e(Hb,PO),e(PO,aPo),e(Hb,nPo),e(W,sPo),e(W,Ub),e(Ub,Jge),e(Jge,lPo),e(Ub,iPo),e(Ub,BO),e(BO,dPo),e(Ub,cPo),e(W,mPo),e(W,Jb),e(Jb,Yge),e(Yge,fPo),e(Jb,gPo),e(Jb,IO),e(IO,hPo),e(Jb,uPo),e(W,pPo),e(W,Yb),e(Yb,Kge),e(Kge,_Po),e(Yb,bPo),e(Yb,NO),e(NO,vPo),e(Yb,FPo),e(W,TPo),e(W,Kb),e(Kb,Zge),e(Zge,MPo),e(Kb,EPo),e(Kb,qO),e(qO,CPo),e(Kb,wPo),e(W,APo),e(W,Zb),e(Zb,ehe),e(ehe,LPo),e(Zb,yPo),e(Zb,jO),e(jO,xPo),e(Zb,$Po),e(W,kPo),e(W,ev),e(ev,ohe),e(ohe,SPo),e(ev,RPo),e(ev,DO),e(DO,PPo),e(ev,BPo),e(W,IPo),e(W,ov),e(ov,rhe),e(rhe,NPo),e(ov,qPo),e(ov,the),e(the,jPo),e(ov,DPo),e(W,GPo),e(W,rv),e(rv,ahe),e(ahe,OPo),e(rv,VPo),e(rv,GO),e(GO,XPo),e(rv,zPo),e(W,QPo),e(W,tv),e(tv,nhe),e(nhe,WPo),e(tv,HPo),e(tv,OO),e(OO,UPo),e(tv,JPo),e(W,YPo),e(W,av),e(av,she),e(she,KPo),e(av,ZPo),e(av,VO),e(VO,eBo),e(av,oBo),e(W,rBo),e(W,nv),e(nv,lhe),e(lhe,tBo),e(nv,aBo),e(nv,XO),e(XO,nBo),e(nv,sBo),e(Ze,lBo),e(Ze,sv),e(sv,iBo),e(sv,ihe),e(ihe,dBo),e(sv,cBo),e(sv,dhe),e(dhe,mBo),e(Ze,fBo),M(lv,Ze,null),b(m,XOe,_),b(m,Ui,_),e(Ui,iv),e(iv,che),M($y,che,null),e(Ui,gBo),e(Ui,mhe),e(mhe,hBo),b(m,zOe,_),b(m,Ro,_),M(ky,Ro,null),e(Ro,uBo),e(Ro,Ji),e(Ji,pBo),e(Ji,zO),e(zO,_Bo),e(Ji,bBo),e(Ji,QO),e(QO,vBo),e(Ji,FBo),e(Ro,TBo),e(Ro,Sy),e(Sy,MBo),e(Sy,fhe),e(fhe,EBo),e(Sy,CBo),e(Ro,wBo),e(Ro,dt),M(Ry,dt,null),e(dt,ABo),e(dt,ghe),e(ghe,LBo),e(dt,yBo),e(dt,Yi),e(Yi,xBo),e(Yi,hhe),e(hhe,$Bo),e(Yi,kBo),e(Yi,WO),e(WO,SBo),e(Yi,RBo),e(dt,PBo),M(dv,dt,null),e(Ro,BBo),e(Ro,eo),M(Py,eo,null),e(eo,IBo),e(eo,uhe),e(uhe,NBo),e(eo,qBo),e(eo,Na),e(Na,jBo),e(Na,phe),e(phe,DBo),e(Na,GBo),e(Na,_he),e(_he,OBo),e(Na,VBo),e(Na,bhe),e(bhe,XBo),e(Na,zBo),e(eo,QBo),e(eo,ue),e(ue,cv),e(cv,vhe),e(vhe,WBo),e(cv,HBo),e(cv,HO),e(HO,UBo),e(cv,JBo),e(ue,YBo),e(ue,mv),e(mv,Fhe),e(Fhe,KBo),e(mv,ZBo),e(mv,UO),e(UO,eIo),e(mv,oIo),e(ue,rIo),e(ue,fv),e(fv,The),e(The,tIo),e(fv,aIo),e(fv,JO),e(JO,nIo),e(fv,sIo),e(ue,lIo),e(ue,gv),e(gv,Mhe),e(Mhe,iIo),e(gv,dIo),e(gv,YO),e(YO,cIo),e(gv,mIo),e(ue,fIo),e(ue,hv),e(hv,Ehe),e(Ehe,gIo),e(hv,hIo),e(hv,KO),e(KO,uIo),e(hv,pIo),e(ue,_Io),e(ue,uv),e(uv,Che),e(Che,bIo),e(uv,vIo),e(uv,ZO),e(ZO,FIo),e(uv,TIo),e(ue,MIo),e(ue,pv),e(pv,whe),e(whe,EIo),e(pv,CIo),e(pv,eV),e(eV,wIo),e(pv,AIo),e(ue,LIo),e(ue,_v),e(_v,Ahe),e(Ahe,yIo),e(_v,xIo),e(_v,oV),e(oV,$Io),e(_v,kIo),e(ue,SIo),e(ue,bv),e(bv,Lhe),e(Lhe,RIo),e(bv,PIo),e(bv,rV),e(rV,BIo),e(bv,IIo),e(ue,NIo),e(ue,vv),e(vv,yhe),e(yhe,qIo),e(vv,jIo),e(vv,tV),e(tV,DIo),e(vv,GIo),e(ue,OIo),e(ue,Fv),e(Fv,xhe),e(xhe,VIo),e(Fv,XIo),e(Fv,aV),e(aV,zIo),e(Fv,QIo),e(ue,WIo),e(ue,Tv),e(Tv,$he),e($he,HIo),e(Tv,UIo),e(Tv,nV),e(nV,JIo),e(Tv,YIo),e(ue,KIo),e(ue,Mv),e(Mv,khe),e(khe,ZIo),e(Mv,eNo),e(Mv,sV),e(sV,oNo),e(Mv,rNo),e(ue,tNo),e(ue,Ev),e(Ev,She),e(She,aNo),e(Ev,nNo),e(Ev,lV),e(lV,sNo),e(Ev,lNo),e(ue,iNo),e(ue,Cv),e(Cv,Rhe),e(Rhe,dNo),e(Cv,cNo),e(Cv,iV),e(iV,mNo),e(Cv,fNo),e(ue,gNo),e(ue,wv),e(wv,Phe),e(Phe,hNo),e(wv,uNo),e(wv,dV),e(dV,pNo),e(wv,_No),e(ue,bNo),e(ue,Av),e(Av,Bhe),e(Bhe,vNo),e(Av,FNo),e(Av,cV),e(cV,TNo),e(Av,MNo),e(eo,ENo),e(eo,Lv),e(Lv,CNo),e(Lv,Ihe),e(Ihe,wNo),e(Lv,ANo),e(Lv,Nhe),e(Nhe,LNo),e(eo,yNo),M(yv,eo,null),b(m,QOe,_),b(m,Ki,_),e(Ki,xv),e(xv,qhe),M(By,qhe,null),e(Ki,xNo),e(Ki,jhe),e(jhe,$No),b(m,WOe,_),b(m,Po,_),M(Iy,Po,null),e(Po,kNo),e(Po,Zi),e(Zi,SNo),e(Zi,mV),e(mV,RNo),e(Zi,PNo),e(Zi,fV),e(fV,BNo),e(Zi,INo),e(Po,NNo),e(Po,Ny),e(Ny,qNo),e(Ny,Dhe),e(Dhe,jNo),e(Ny,DNo),e(Po,GNo),e(Po,ct),M(qy,ct,null),e(ct,ONo),e(ct,Ghe),e(Ghe,VNo),e(ct,XNo),e(ct,ed),e(ed,zNo),e(ed,Ohe),e(Ohe,QNo),e(ed,WNo),e(ed,gV),e(gV,HNo),e(ed,UNo),e(ct,JNo),M($v,ct,null),e(Po,YNo),e(Po,oo),M(jy,oo,null),e(oo,KNo),e(oo,Vhe),e(Vhe,ZNo),e(oo,eqo),e(oo,qa),e(qa,oqo),e(qa,Xhe),e(Xhe,rqo),e(qa,tqo),e(qa,zhe),e(zhe,aqo),e(qa,nqo),e(qa,Qhe),e(Qhe,sqo),e(qa,lqo),e(oo,iqo),e(oo,N),e(N,kv),e(kv,Whe),e(Whe,dqo),e(kv,cqo),e(kv,hV),e(hV,mqo),e(kv,fqo),e(N,gqo),e(N,Sv),e(Sv,Hhe),e(Hhe,hqo),e(Sv,uqo),e(Sv,uV),e(uV,pqo),e(Sv,_qo),e(N,bqo),e(N,Rv),e(Rv,Uhe),e(Uhe,vqo),e(Rv,Fqo),e(Rv,pV),e(pV,Tqo),e(Rv,Mqo),e(N,Eqo),e(N,Pv),e(Pv,Jhe),e(Jhe,Cqo),e(Pv,wqo),e(Pv,_V),e(_V,Aqo),e(Pv,Lqo),e(N,yqo),e(N,Bv),e(Bv,Yhe),e(Yhe,xqo),e(Bv,$qo),e(Bv,bV),e(bV,kqo),e(Bv,Sqo),e(N,Rqo),e(N,Iv),e(Iv,Khe),e(Khe,Pqo),e(Iv,Bqo),e(Iv,vV),e(vV,Iqo),e(Iv,Nqo),e(N,qqo),e(N,Nv),e(Nv,Zhe),e(Zhe,jqo),e(Nv,Dqo),e(Nv,FV),e(FV,Gqo),e(Nv,Oqo),e(N,Vqo),e(N,qv),e(qv,eue),e(eue,Xqo),e(qv,zqo),e(qv,TV),e(TV,Qqo),e(qv,Wqo),e(N,Hqo),e(N,jv),e(jv,oue),e(oue,Uqo),e(jv,Jqo),e(jv,MV),e(MV,Yqo),e(jv,Kqo),e(N,Zqo),e(N,Dv),e(Dv,rue),e(rue,ejo),e(Dv,ojo),e(Dv,EV),e(EV,rjo),e(Dv,tjo),e(N,ajo),e(N,Gv),e(Gv,tue),e(tue,njo),e(Gv,sjo),e(Gv,CV),e(CV,ljo),e(Gv,ijo),e(N,djo),e(N,Ov),e(Ov,aue),e(aue,cjo),e(Ov,mjo),e(Ov,wV),e(wV,fjo),e(Ov,gjo),e(N,hjo),e(N,Vv),e(Vv,nue),e(nue,ujo),e(Vv,pjo),e(Vv,AV),e(AV,_jo),e(Vv,bjo),e(N,vjo),e(N,Xv),e(Xv,sue),e(sue,Fjo),e(Xv,Tjo),e(Xv,LV),e(LV,Mjo),e(Xv,Ejo),e(N,Cjo),e(N,zv),e(zv,lue),e(lue,wjo),e(zv,Ajo),e(zv,yV),e(yV,Ljo),e(zv,yjo),e(N,xjo),e(N,Qv),e(Qv,iue),e(iue,$jo),e(Qv,kjo),e(Qv,xV),e(xV,Sjo),e(Qv,Rjo),e(N,Pjo),e(N,Wv),e(Wv,due),e(due,Bjo),e(Wv,Ijo),e(Wv,$V),e($V,Njo),e(Wv,qjo),e(N,jjo),e(N,Hv),e(Hv,cue),e(cue,Djo),e(Hv,Gjo),e(Hv,kV),e(kV,Ojo),e(Hv,Vjo),e(N,Xjo),e(N,Uv),e(Uv,mue),e(mue,zjo),e(Uv,Qjo),e(Uv,SV),e(SV,Wjo),e(Uv,Hjo),e(N,Ujo),e(N,Jv),e(Jv,fue),e(fue,Jjo),e(Jv,Yjo),e(Jv,RV),e(RV,Kjo),e(Jv,Zjo),e(N,eDo),e(N,Yv),e(Yv,gue),e(gue,oDo),e(Yv,rDo),e(Yv,PV),e(PV,tDo),e(Yv,aDo),e(N,nDo),e(N,Kv),e(Kv,hue),e(hue,sDo),e(Kv,lDo),e(Kv,BV),e(BV,iDo),e(Kv,dDo),e(N,cDo),e(N,Zv),e(Zv,uue),e(uue,mDo),e(Zv,fDo),e(Zv,IV),e(IV,gDo),e(Zv,hDo),e(N,uDo),e(N,e1),e(e1,pue),e(pue,pDo),e(e1,_Do),e(e1,NV),e(NV,bDo),e(e1,vDo),e(N,FDo),e(N,o1),e(o1,_ue),e(_ue,TDo),e(o1,MDo),e(o1,qV),e(qV,EDo),e(o1,CDo),e(N,wDo),e(N,r1),e(r1,bue),e(bue,ADo),e(r1,LDo),e(r1,jV),e(jV,yDo),e(r1,xDo),e(N,$Do),e(N,t1),e(t1,vue),e(vue,kDo),e(t1,SDo),e(t1,DV),e(DV,RDo),e(t1,PDo),e(N,BDo),e(N,a1),e(a1,Fue),e(Fue,IDo),e(a1,NDo),e(a1,GV),e(GV,qDo),e(a1,jDo),e(N,DDo),e(N,n1),e(n1,Tue),e(Tue,GDo),e(n1,ODo),e(n1,OV),e(OV,VDo),e(n1,XDo),e(N,zDo),e(N,s1),e(s1,Mue),e(Mue,QDo),e(s1,WDo),e(s1,VV),e(VV,HDo),e(s1,UDo),e(N,JDo),e(N,l1),e(l1,Eue),e(Eue,YDo),e(l1,KDo),e(l1,XV),e(XV,ZDo),e(l1,eGo),e(N,oGo),e(N,i1),e(i1,Cue),e(Cue,rGo),e(i1,tGo),e(i1,zV),e(zV,aGo),e(i1,nGo),e(N,sGo),e(N,d1),e(d1,wue),e(wue,lGo),e(d1,iGo),e(d1,QV),e(QV,dGo),e(d1,cGo),e(N,mGo),e(N,c1),e(c1,Aue),e(Aue,fGo),e(c1,gGo),e(c1,WV),e(WV,hGo),e(c1,uGo),e(N,pGo),e(N,m1),e(m1,Lue),e(Lue,_Go),e(m1,bGo),e(m1,HV),e(HV,vGo),e(m1,FGo),e(N,TGo),e(N,f1),e(f1,yue),e(yue,MGo),e(f1,EGo),e(f1,UV),e(UV,CGo),e(f1,wGo),e(N,AGo),e(N,g1),e(g1,xue),e(xue,LGo),e(g1,yGo),e(g1,JV),e(JV,xGo),e(g1,$Go),e(N,kGo),e(N,h1),e(h1,$ue),e($ue,SGo),e(h1,RGo),e(h1,YV),e(YV,PGo),e(h1,BGo),e(N,IGo),e(N,u1),e(u1,kue),e(kue,NGo),e(u1,qGo),e(u1,KV),e(KV,jGo),e(u1,DGo),e(N,GGo),e(N,p1),e(p1,Sue),e(Sue,OGo),e(p1,VGo),e(p1,ZV),e(ZV,XGo),e(p1,zGo),e(N,QGo),e(N,_1),e(_1,Rue),e(Rue,WGo),e(_1,HGo),e(_1,eX),e(eX,UGo),e(_1,JGo),e(N,YGo),e(N,b1),e(b1,Pue),e(Pue,KGo),e(b1,ZGo),e(b1,oX),e(oX,eOo),e(b1,oOo),e(N,rOo),e(N,v1),e(v1,Bue),e(Bue,tOo),e(v1,aOo),e(v1,rX),e(rX,nOo),e(v1,sOo),e(N,lOo),e(N,F1),e(F1,Iue),e(Iue,iOo),e(F1,dOo),e(F1,tX),e(tX,cOo),e(F1,mOo),e(N,fOo),e(N,T1),e(T1,Nue),e(Nue,gOo),e(T1,hOo),e(T1,aX),e(aX,uOo),e(T1,pOo),e(N,_Oo),e(N,M1),e(M1,que),e(que,bOo),e(M1,vOo),e(M1,nX),e(nX,FOo),e(M1,TOo),e(N,MOo),e(N,E1),e(E1,jue),e(jue,EOo),e(E1,COo),e(E1,sX),e(sX,wOo),e(E1,AOo),e(N,LOo),e(N,C1),e(C1,Due),e(Due,yOo),e(C1,xOo),e(C1,lX),e(lX,$Oo),e(C1,kOo),e(N,SOo),e(N,w1),e(w1,Gue),e(Gue,ROo),e(w1,POo),e(w1,iX),e(iX,BOo),e(w1,IOo),e(oo,NOo),e(oo,A1),e(A1,qOo),e(A1,Oue),e(Oue,jOo),e(A1,DOo),e(A1,Vue),e(Vue,GOo),e(oo,OOo),M(L1,oo,null),b(m,HOe,_),b(m,od,_),e(od,y1),e(y1,Xue),M(Dy,Xue,null),e(od,VOo),e(od,zue),e(zue,XOo),b(m,UOe,_),b(m,Bo,_),M(Gy,Bo,null),e(Bo,zOo),e(Bo,rd),e(rd,QOo),e(rd,dX),e(dX,WOo),e(rd,HOo),e(rd,cX),e(cX,UOo),e(rd,JOo),e(Bo,YOo),e(Bo,Oy),e(Oy,KOo),e(Oy,Que),e(Que,ZOo),e(Oy,eVo),e(Bo,oVo),e(Bo,mt),M(Vy,mt,null),e(mt,rVo),e(mt,Wue),e(Wue,tVo),e(mt,aVo),e(mt,td),e(td,nVo),e(td,Hue),e(Hue,sVo),e(td,lVo),e(td,mX),e(mX,iVo),e(td,dVo),e(mt,cVo),M(x1,mt,null),e(Bo,mVo),e(Bo,ro),M(Xy,ro,null),e(ro,fVo),e(ro,Uue),e(Uue,gVo),e(ro,hVo),e(ro,ja),e(ja,uVo),e(ja,Jue),e(Jue,pVo),e(ja,_Vo),e(ja,Yue),e(Yue,bVo),e(ja,vVo),e(ja,Kue),e(Kue,FVo),e(ja,TVo),e(ro,MVo),e(ro,Z),e(Z,$1),e($1,Zue),e(Zue,EVo),e($1,CVo),e($1,fX),e(fX,wVo),e($1,AVo),e(Z,LVo),e(Z,k1),e(k1,epe),e(epe,yVo),e(k1,xVo),e(k1,gX),e(gX,$Vo),e(k1,kVo),e(Z,SVo),e(Z,S1),e(S1,ope),e(ope,RVo),e(S1,PVo),e(S1,hX),e(hX,BVo),e(S1,IVo),e(Z,NVo),e(Z,R1),e(R1,rpe),e(rpe,qVo),e(R1,jVo),e(R1,uX),e(uX,DVo),e(R1,GVo),e(Z,OVo),e(Z,P1),e(P1,tpe),e(tpe,VVo),e(P1,XVo),e(P1,pX),e(pX,zVo),e(P1,QVo),e(Z,WVo),e(Z,B1),e(B1,ape),e(ape,HVo),e(B1,UVo),e(B1,_X),e(_X,JVo),e(B1,YVo),e(Z,KVo),e(Z,I1),e(I1,npe),e(npe,ZVo),e(I1,eXo),e(I1,bX),e(bX,oXo),e(I1,rXo),e(Z,tXo),e(Z,N1),e(N1,spe),e(spe,aXo),e(N1,nXo),e(N1,vX),e(vX,sXo),e(N1,lXo),e(Z,iXo),e(Z,q1),e(q1,lpe),e(lpe,dXo),e(q1,cXo),e(q1,FX),e(FX,mXo),e(q1,fXo),e(Z,gXo),e(Z,j1),e(j1,ipe),e(ipe,hXo),e(j1,uXo),e(j1,TX),e(TX,pXo),e(j1,_Xo),e(Z,bXo),e(Z,D1),e(D1,dpe),e(dpe,vXo),e(D1,FXo),e(D1,MX),e(MX,TXo),e(D1,MXo),e(Z,EXo),e(Z,G1),e(G1,cpe),e(cpe,CXo),e(G1,wXo),e(G1,EX),e(EX,AXo),e(G1,LXo),e(Z,yXo),e(Z,O1),e(O1,mpe),e(mpe,xXo),e(O1,$Xo),e(O1,CX),e(CX,kXo),e(O1,SXo),e(Z,RXo),e(Z,V1),e(V1,fpe),e(fpe,PXo),e(V1,BXo),e(V1,wX),e(wX,IXo),e(V1,NXo),e(Z,qXo),e(Z,X1),e(X1,gpe),e(gpe,jXo),e(X1,DXo),e(X1,AX),e(AX,GXo),e(X1,OXo),e(Z,VXo),e(Z,z1),e(z1,hpe),e(hpe,XXo),e(z1,zXo),e(z1,LX),e(LX,QXo),e(z1,WXo),e(Z,HXo),e(Z,Q1),e(Q1,upe),e(upe,UXo),e(Q1,JXo),e(Q1,yX),e(yX,YXo),e(Q1,KXo),e(Z,ZXo),e(Z,W1),e(W1,ppe),e(ppe,ezo),e(W1,ozo),e(W1,xX),e(xX,rzo),e(W1,tzo),e(Z,azo),e(Z,H1),e(H1,_pe),e(_pe,nzo),e(H1,szo),e(H1,$X),e($X,lzo),e(H1,izo),e(Z,dzo),e(Z,U1),e(U1,bpe),e(bpe,czo),e(U1,mzo),e(U1,kX),e(kX,fzo),e(U1,gzo),e(Z,hzo),e(Z,J1),e(J1,vpe),e(vpe,uzo),e(J1,pzo),e(J1,SX),e(SX,_zo),e(J1,bzo),e(Z,vzo),e(Z,Y1),e(Y1,Fpe),e(Fpe,Fzo),e(Y1,Tzo),e(Y1,RX),e(RX,Mzo),e(Y1,Ezo),e(Z,Czo),e(Z,K1),e(K1,Tpe),e(Tpe,wzo),e(K1,Azo),e(K1,PX),e(PX,Lzo),e(K1,yzo),e(Z,xzo),e(Z,Z1),e(Z1,Mpe),e(Mpe,$zo),e(Z1,kzo),e(Z1,BX),e(BX,Szo),e(Z1,Rzo),e(Z,Pzo),e(Z,eF),e(eF,Epe),e(Epe,Bzo),e(eF,Izo),e(eF,IX),e(IX,Nzo),e(eF,qzo),e(Z,jzo),e(Z,oF),e(oF,Cpe),e(Cpe,Dzo),e(oF,Gzo),e(oF,NX),e(NX,Ozo),e(oF,Vzo),e(Z,Xzo),e(Z,rF),e(rF,wpe),e(wpe,zzo),e(rF,Qzo),e(rF,qX),e(qX,Wzo),e(rF,Hzo),e(Z,Uzo),e(Z,tF),e(tF,Ape),e(Ape,Jzo),e(tF,Yzo),e(tF,jX),e(jX,Kzo),e(tF,Zzo),e(Z,eQo),e(Z,aF),e(aF,Lpe),e(Lpe,oQo),e(aF,rQo),e(aF,DX),e(DX,tQo),e(aF,aQo),e(Z,nQo),e(Z,nF),e(nF,ype),e(ype,sQo),e(nF,lQo),e(nF,GX),e(GX,iQo),e(nF,dQo),e(ro,cQo),e(ro,sF),e(sF,mQo),e(sF,xpe),e(xpe,fQo),e(sF,gQo),e(sF,$pe),e($pe,hQo),e(ro,uQo),M(lF,ro,null),b(m,JOe,_),b(m,ad,_),e(ad,iF),e(iF,kpe),M(zy,kpe,null),e(ad,pQo),e(ad,Spe),e(Spe,_Qo),b(m,YOe,_),b(m,Io,_),M(Qy,Io,null),e(Io,bQo),e(Io,nd),e(nd,vQo),e(nd,OX),e(OX,FQo),e(nd,TQo),e(nd,VX),e(VX,MQo),e(nd,EQo),e(Io,CQo),e(Io,Wy),e(Wy,wQo),e(Wy,Rpe),e(Rpe,AQo),e(Wy,LQo),e(Io,yQo),e(Io,ft),M(Hy,ft,null),e(ft,xQo),e(ft,Ppe),e(Ppe,$Qo),e(ft,kQo),e(ft,sd),e(sd,SQo),e(sd,Bpe),e(Bpe,RQo),e(sd,PQo),e(sd,XX),e(XX,BQo),e(sd,IQo),e(ft,NQo),M(dF,ft,null),e(Io,qQo),e(Io,to),M(Uy,to,null),e(to,jQo),e(to,Ipe),e(Ipe,DQo),e(to,GQo),e(to,Da),e(Da,OQo),e(Da,Npe),e(Npe,VQo),e(Da,XQo),e(Da,qpe),e(qpe,zQo),e(Da,QQo),e(Da,jpe),e(jpe,WQo),e(Da,HQo),e(to,UQo),e(to,No),e(No,cF),e(cF,Dpe),e(Dpe,JQo),e(cF,YQo),e(cF,zX),e(zX,KQo),e(cF,ZQo),e(No,eWo),e(No,mF),e(mF,Gpe),e(Gpe,oWo),e(mF,rWo),e(mF,QX),e(QX,tWo),e(mF,aWo),e(No,nWo),e(No,fF),e(fF,Ope),e(Ope,sWo),e(fF,lWo),e(fF,WX),e(WX,iWo),e(fF,dWo),e(No,cWo),e(No,gF),e(gF,Vpe),e(Vpe,mWo),e(gF,fWo),e(gF,HX),e(HX,gWo),e(gF,hWo),e(No,uWo),e(No,hF),e(hF,Xpe),e(Xpe,pWo),e(hF,_Wo),e(hF,UX),e(UX,bWo),e(hF,vWo),e(No,FWo),e(No,uF),e(uF,zpe),e(zpe,TWo),e(uF,MWo),e(uF,JX),e(JX,EWo),e(uF,CWo),e(to,wWo),e(to,pF),e(pF,AWo),e(pF,Qpe),e(Qpe,LWo),e(pF,yWo),e(pF,Wpe),e(Wpe,xWo),e(to,$Wo),M(_F,to,null),b(m,KOe,_),b(m,ld,_),e(ld,bF),e(bF,Hpe),M(Jy,Hpe,null),e(ld,kWo),e(ld,Upe),e(Upe,SWo),b(m,ZOe,_),b(m,qo,_),M(Yy,qo,null),e(qo,RWo),e(qo,id),e(id,PWo),e(id,YX),e(YX,BWo),e(id,IWo),e(id,KX),e(KX,NWo),e(id,qWo),e(qo,jWo),e(qo,Ky),e(Ky,DWo),e(Ky,Jpe),e(Jpe,GWo),e(Ky,OWo),e(qo,VWo),e(qo,gt),M(Zy,gt,null),e(gt,XWo),e(gt,Ype),e(Ype,zWo),e(gt,QWo),e(gt,dd),e(dd,WWo),e(dd,Kpe),e(Kpe,HWo),e(dd,UWo),e(dd,ZX),e(ZX,JWo),e(dd,YWo),e(gt,KWo),M(vF,gt,null),e(qo,ZWo),e(qo,ao),M(e8,ao,null),e(ao,eHo),e(ao,Zpe),e(Zpe,oHo),e(ao,rHo),e(ao,Ga),e(Ga,tHo),e(Ga,e_e),e(e_e,aHo),e(Ga,nHo),e(Ga,o_e),e(o_e,sHo),e(Ga,lHo),e(Ga,r_e),e(r_e,iHo),e(Ga,dHo),e(ao,cHo),e(ao,H),e(H,FF),e(FF,t_e),e(t_e,mHo),e(FF,fHo),e(FF,ez),e(ez,gHo),e(FF,hHo),e(H,uHo),e(H,TF),e(TF,a_e),e(a_e,pHo),e(TF,_Ho),e(TF,oz),e(oz,bHo),e(TF,vHo),e(H,FHo),e(H,MF),e(MF,n_e),e(n_e,THo),e(MF,MHo),e(MF,rz),e(rz,EHo),e(MF,CHo),e(H,wHo),e(H,EF),e(EF,s_e),e(s_e,AHo),e(EF,LHo),e(EF,tz),e(tz,yHo),e(EF,xHo),e(H,$Ho),e(H,CF),e(CF,l_e),e(l_e,kHo),e(CF,SHo),e(CF,az),e(az,RHo),e(CF,PHo),e(H,BHo),e(H,wF),e(wF,i_e),e(i_e,IHo),e(wF,NHo),e(wF,nz),e(nz,qHo),e(wF,jHo),e(H,DHo),e(H,AF),e(AF,d_e),e(d_e,GHo),e(AF,OHo),e(AF,sz),e(sz,VHo),e(AF,XHo),e(H,zHo),e(H,LF),e(LF,c_e),e(c_e,QHo),e(LF,WHo),e(LF,lz),e(lz,HHo),e(LF,UHo),e(H,JHo),e(H,yF),e(yF,m_e),e(m_e,YHo),e(yF,KHo),e(yF,iz),e(iz,ZHo),e(yF,eUo),e(H,oUo),e(H,xF),e(xF,f_e),e(f_e,rUo),e(xF,tUo),e(xF,dz),e(dz,aUo),e(xF,nUo),e(H,sUo),e(H,$F),e($F,g_e),e(g_e,lUo),e($F,iUo),e($F,cz),e(cz,dUo),e($F,cUo),e(H,mUo),e(H,kF),e(kF,h_e),e(h_e,fUo),e(kF,gUo),e(kF,mz),e(mz,hUo),e(kF,uUo),e(H,pUo),e(H,SF),e(SF,u_e),e(u_e,_Uo),e(SF,bUo),e(SF,fz),e(fz,vUo),e(SF,FUo),e(H,TUo),e(H,RF),e(RF,p_e),e(p_e,MUo),e(RF,EUo),e(RF,gz),e(gz,CUo),e(RF,wUo),e(H,AUo),e(H,PF),e(PF,__e),e(__e,LUo),e(PF,yUo),e(PF,hz),e(hz,xUo),e(PF,$Uo),e(H,kUo),e(H,BF),e(BF,b_e),e(b_e,SUo),e(BF,RUo),e(BF,uz),e(uz,PUo),e(BF,BUo),e(H,IUo),e(H,IF),e(IF,v_e),e(v_e,NUo),e(IF,qUo),e(IF,pz),e(pz,jUo),e(IF,DUo),e(H,GUo),e(H,NF),e(NF,F_e),e(F_e,OUo),e(NF,VUo),e(NF,_z),e(_z,XUo),e(NF,zUo),e(H,QUo),e(H,qF),e(qF,T_e),e(T_e,WUo),e(qF,HUo),e(qF,bz),e(bz,UUo),e(qF,JUo),e(H,YUo),e(H,jF),e(jF,M_e),e(M_e,KUo),e(jF,ZUo),e(jF,vz),e(vz,eJo),e(jF,oJo),e(H,rJo),e(H,DF),e(DF,E_e),e(E_e,tJo),e(DF,aJo),e(DF,Fz),e(Fz,nJo),e(DF,sJo),e(H,lJo),e(H,GF),e(GF,C_e),e(C_e,iJo),e(GF,dJo),e(GF,Tz),e(Tz,cJo),e(GF,mJo),e(H,fJo),e(H,OF),e(OF,w_e),e(w_e,gJo),e(OF,hJo),e(OF,Mz),e(Mz,uJo),e(OF,pJo),e(H,_Jo),e(H,VF),e(VF,A_e),e(A_e,bJo),e(VF,vJo),e(VF,Ez),e(Ez,FJo),e(VF,TJo),e(H,MJo),e(H,XF),e(XF,L_e),e(L_e,EJo),e(XF,CJo),e(XF,Cz),e(Cz,wJo),e(XF,AJo),e(H,LJo),e(H,zF),e(zF,y_e),e(y_e,yJo),e(zF,xJo),e(zF,wz),e(wz,$Jo),e(zF,kJo),e(H,SJo),e(H,QF),e(QF,x_e),e(x_e,RJo),e(QF,PJo),e(QF,Az),e(Az,BJo),e(QF,IJo),e(H,NJo),e(H,WF),e(WF,$_e),e($_e,qJo),e(WF,jJo),e(WF,Lz),e(Lz,DJo),e(WF,GJo),e(H,OJo),e(H,HF),e(HF,k_e),e(k_e,VJo),e(HF,XJo),e(HF,yz),e(yz,zJo),e(HF,QJo),e(H,WJo),e(H,UF),e(UF,S_e),e(S_e,HJo),e(UF,UJo),e(UF,xz),e(xz,JJo),e(UF,YJo),e(H,KJo),e(H,JF),e(JF,R_e),e(R_e,ZJo),e(JF,eYo),e(JF,$z),e($z,oYo),e(JF,rYo),e(H,tYo),e(H,YF),e(YF,P_e),e(P_e,aYo),e(YF,nYo),e(YF,kz),e(kz,sYo),e(YF,lYo),e(H,iYo),e(H,KF),e(KF,B_e),e(B_e,dYo),e(KF,cYo),e(KF,Sz),e(Sz,mYo),e(KF,fYo),e(H,gYo),e(H,ZF),e(ZF,I_e),e(I_e,hYo),e(ZF,uYo),e(ZF,Rz),e(Rz,pYo),e(ZF,_Yo),e(H,bYo),e(H,eT),e(eT,N_e),e(N_e,vYo),e(eT,FYo),e(eT,Pz),e(Pz,TYo),e(eT,MYo),e(H,EYo),e(H,oT),e(oT,q_e),e(q_e,CYo),e(oT,wYo),e(oT,Bz),e(Bz,AYo),e(oT,LYo),e(ao,yYo),e(ao,rT),e(rT,xYo),e(rT,j_e),e(j_e,$Yo),e(rT,kYo),e(rT,D_e),e(D_e,SYo),e(ao,RYo),M(tT,ao,null),b(m,eVe,_),b(m,cd,_),e(cd,aT),e(aT,G_e),M(o8,G_e,null),e(cd,PYo),e(cd,O_e),e(O_e,BYo),b(m,oVe,_),b(m,jo,_),M(r8,jo,null),e(jo,IYo),e(jo,md),e(md,NYo),e(md,Iz),e(Iz,qYo),e(md,jYo),e(md,Nz),e(Nz,DYo),e(md,GYo),e(jo,OYo),e(jo,t8),e(t8,VYo),e(t8,V_e),e(V_e,XYo),e(t8,zYo),e(jo,QYo),e(jo,ht),M(a8,ht,null),e(ht,WYo),e(ht,X_e),e(X_e,HYo),e(ht,UYo),e(ht,fd),e(fd,JYo),e(fd,z_e),e(z_e,YYo),e(fd,KYo),e(fd,qz),e(qz,ZYo),e(fd,eKo),e(ht,oKo),M(nT,ht,null),e(jo,rKo),e(jo,no),M(n8,no,null),e(no,tKo),e(no,Q_e),e(Q_e,aKo),e(no,nKo),e(no,Oa),e(Oa,sKo),e(Oa,W_e),e(W_e,lKo),e(Oa,iKo),e(Oa,H_e),e(H_e,dKo),e(Oa,cKo),e(Oa,U_e),e(U_e,mKo),e(Oa,fKo),e(no,gKo),e(no,V),e(V,sT),e(sT,J_e),e(J_e,hKo),e(sT,uKo),e(sT,jz),e(jz,pKo),e(sT,_Ko),e(V,bKo),e(V,lT),e(lT,Y_e),e(Y_e,vKo),e(lT,FKo),e(lT,Dz),e(Dz,TKo),e(lT,MKo),e(V,EKo),e(V,iT),e(iT,K_e),e(K_e,CKo),e(iT,wKo),e(iT,Gz),e(Gz,AKo),e(iT,LKo),e(V,yKo),e(V,dT),e(dT,Z_e),e(Z_e,xKo),e(dT,$Ko),e(dT,Oz),e(Oz,kKo),e(dT,SKo),e(V,RKo),e(V,cT),e(cT,e2e),e(e2e,PKo),e(cT,BKo),e(cT,Vz),e(Vz,IKo),e(cT,NKo),e(V,qKo),e(V,mT),e(mT,o2e),e(o2e,jKo),e(mT,DKo),e(mT,Xz),e(Xz,GKo),e(mT,OKo),e(V,VKo),e(V,fT),e(fT,r2e),e(r2e,XKo),e(fT,zKo),e(fT,zz),e(zz,QKo),e(fT,WKo),e(V,HKo),e(V,gT),e(gT,t2e),e(t2e,UKo),e(gT,JKo),e(gT,Qz),e(Qz,YKo),e(gT,KKo),e(V,ZKo),e(V,hT),e(hT,a2e),e(a2e,eZo),e(hT,oZo),e(hT,Wz),e(Wz,rZo),e(hT,tZo),e(V,aZo),e(V,uT),e(uT,n2e),e(n2e,nZo),e(uT,sZo),e(uT,Hz),e(Hz,lZo),e(uT,iZo),e(V,dZo),e(V,pT),e(pT,s2e),e(s2e,cZo),e(pT,mZo),e(pT,Uz),e(Uz,fZo),e(pT,gZo),e(V,hZo),e(V,_T),e(_T,l2e),e(l2e,uZo),e(_T,pZo),e(_T,Jz),e(Jz,_Zo),e(_T,bZo),e(V,vZo),e(V,bT),e(bT,i2e),e(i2e,FZo),e(bT,TZo),e(bT,Yz),e(Yz,MZo),e(bT,EZo),e(V,CZo),e(V,vT),e(vT,d2e),e(d2e,wZo),e(vT,AZo),e(vT,Kz),e(Kz,LZo),e(vT,yZo),e(V,xZo),e(V,FT),e(FT,c2e),e(c2e,$Zo),e(FT,kZo),e(FT,Zz),e(Zz,SZo),e(FT,RZo),e(V,PZo),e(V,TT),e(TT,m2e),e(m2e,BZo),e(TT,IZo),e(TT,eQ),e(eQ,NZo),e(TT,qZo),e(V,jZo),e(V,MT),e(MT,f2e),e(f2e,DZo),e(MT,GZo),e(MT,oQ),e(oQ,OZo),e(MT,VZo),e(V,XZo),e(V,ET),e(ET,g2e),e(g2e,zZo),e(ET,QZo),e(ET,rQ),e(rQ,WZo),e(ET,HZo),e(V,UZo),e(V,CT),e(CT,h2e),e(h2e,JZo),e(CT,YZo),e(CT,tQ),e(tQ,KZo),e(CT,ZZo),e(V,eer),e(V,wT),e(wT,u2e),e(u2e,oer),e(wT,rer),e(wT,aQ),e(aQ,ter),e(wT,aer),e(V,ner),e(V,AT),e(AT,p2e),e(p2e,ser),e(AT,ler),e(AT,nQ),e(nQ,ier),e(AT,der),e(V,cer),e(V,LT),e(LT,_2e),e(_2e,mer),e(LT,fer),e(LT,sQ),e(sQ,ger),e(LT,her),e(V,uer),e(V,yT),e(yT,b2e),e(b2e,per),e(yT,_er),e(yT,lQ),e(lQ,ber),e(yT,ver),e(V,Fer),e(V,xT),e(xT,v2e),e(v2e,Ter),e(xT,Mer),e(xT,iQ),e(iQ,Eer),e(xT,Cer),e(V,wer),e(V,$T),e($T,F2e),e(F2e,Aer),e($T,Ler),e($T,dQ),e(dQ,yer),e($T,xer),e(V,$er),e(V,kT),e(kT,T2e),e(T2e,ker),e(kT,Ser),e(kT,cQ),e(cQ,Rer),e(kT,Per),e(V,Ber),e(V,ST),e(ST,M2e),e(M2e,Ier),e(ST,Ner),e(ST,mQ),e(mQ,qer),e(ST,jer),e(V,Der),e(V,RT),e(RT,E2e),e(E2e,Ger),e(RT,Oer),e(RT,fQ),e(fQ,Ver),e(RT,Xer),e(V,zer),e(V,PT),e(PT,C2e),e(C2e,Qer),e(PT,Wer),e(PT,gQ),e(gQ,Her),e(PT,Uer),e(V,Jer),e(V,BT),e(BT,w2e),e(w2e,Yer),e(BT,Ker),e(BT,hQ),e(hQ,Zer),e(BT,eor),e(V,oor),e(V,IT),e(IT,A2e),e(A2e,ror),e(IT,tor),e(IT,uQ),e(uQ,aor),e(IT,nor),e(V,sor),e(V,NT),e(NT,L2e),e(L2e,lor),e(NT,ior),e(NT,pQ),e(pQ,dor),e(NT,cor),e(V,mor),e(V,qT),e(qT,y2e),e(y2e,gor),e(qT,hor),e(qT,_Q),e(_Q,uor),e(qT,por),e(V,_or),e(V,jT),e(jT,x2e),e(x2e,bor),e(jT,vor),e(jT,bQ),e(bQ,For),e(jT,Tor),e(V,Mor),e(V,DT),e(DT,$2e),e($2e,Eor),e(DT,Cor),e(DT,vQ),e(vQ,wor),e(DT,Aor),e(V,Lor),e(V,GT),e(GT,k2e),e(k2e,yor),e(GT,xor),e(GT,FQ),e(FQ,$or),e(GT,kor),e(V,Sor),e(V,OT),e(OT,S2e),e(S2e,Ror),e(OT,Por),e(OT,TQ),e(TQ,Bor),e(OT,Ior),e(V,Nor),e(V,VT),e(VT,R2e),e(R2e,qor),e(VT,jor),e(VT,MQ),e(MQ,Dor),e(VT,Gor),e(V,Oor),e(V,XT),e(XT,P2e),e(P2e,Vor),e(XT,Xor),e(XT,EQ),e(EQ,zor),e(XT,Qor),e(V,Wor),e(V,zT),e(zT,B2e),e(B2e,Hor),e(zT,Uor),e(zT,CQ),e(CQ,Jor),e(zT,Yor),e(V,Kor),e(V,QT),e(QT,I2e),e(I2e,Zor),e(QT,err),e(QT,wQ),e(wQ,orr),e(QT,rrr),e(no,trr),e(no,WT),e(WT,arr),e(WT,N2e),e(N2e,nrr),e(WT,srr),e(WT,q2e),e(q2e,lrr),e(no,irr),M(HT,no,null),b(m,rVe,_),b(m,gd,_),e(gd,UT),e(UT,j2e),M(s8,j2e,null),e(gd,drr),e(gd,D2e),e(D2e,crr),b(m,tVe,_),b(m,Do,_),M(l8,Do,null),e(Do,mrr),e(Do,hd),e(hd,frr),e(hd,AQ),e(AQ,grr),e(hd,hrr),e(hd,LQ),e(LQ,urr),e(hd,prr),e(Do,_rr),e(Do,i8),e(i8,brr),e(i8,G2e),e(G2e,vrr),e(i8,Frr),e(Do,Trr),e(Do,ut),M(d8,ut,null),e(ut,Mrr),e(ut,O2e),e(O2e,Err),e(ut,Crr),e(ut,ud),e(ud,wrr),e(ud,V2e),e(V2e,Arr),e(ud,Lrr),e(ud,yQ),e(yQ,yrr),e(ud,xrr),e(ut,$rr),M(JT,ut,null),e(Do,krr),e(Do,so),M(c8,so,null),e(so,Srr),e(so,X2e),e(X2e,Rrr),e(so,Prr),e(so,Va),e(Va,Brr),e(Va,z2e),e(z2e,Irr),e(Va,Nrr),e(Va,Q2e),e(Q2e,qrr),e(Va,jrr),e(Va,W2e),e(W2e,Drr),e(Va,Grr),e(so,Orr),e(so,H2e),e(H2e,YT),e(YT,U2e),e(U2e,Vrr),e(YT,Xrr),e(YT,xQ),e(xQ,zrr),e(YT,Qrr),e(so,Wrr),e(so,KT),e(KT,Hrr),e(KT,J2e),e(J2e,Urr),e(KT,Jrr),e(KT,Y2e),e(Y2e,Yrr),e(so,Krr),M(ZT,so,null),b(m,aVe,_),b(m,pd,_),e(pd,eM),e(eM,K2e),M(m8,K2e,null),e(pd,Zrr),e(pd,Z2e),e(Z2e,etr),b(m,nVe,_),b(m,Go,_),M(f8,Go,null),e(Go,otr),e(Go,_d),e(_d,rtr),e(_d,$Q),e($Q,ttr),e(_d,atr),e(_d,kQ),e(kQ,ntr),e(_d,str),e(Go,ltr),e(Go,g8),e(g8,itr),e(g8,ebe),e(ebe,dtr),e(g8,ctr),e(Go,mtr),e(Go,pt),M(h8,pt,null),e(pt,ftr),e(pt,obe),e(obe,gtr),e(pt,htr),e(pt,bd),e(bd,utr),e(bd,rbe),e(rbe,ptr),e(bd,_tr),e(bd,SQ),e(SQ,btr),e(bd,vtr),e(pt,Ftr),M(oM,pt,null),e(Go,Ttr),e(Go,lo),M(u8,lo,null),e(lo,Mtr),e(lo,tbe),e(tbe,Etr),e(lo,Ctr),e(lo,Xa),e(Xa,wtr),e(Xa,abe),e(abe,Atr),e(Xa,Ltr),e(Xa,nbe),e(nbe,ytr),e(Xa,xtr),e(Xa,sbe),e(sbe,$tr),e(Xa,ktr),e(lo,Str),e(lo,Fe),e(Fe,rM),e(rM,lbe),e(lbe,Rtr),e(rM,Ptr),e(rM,RQ),e(RQ,Btr),e(rM,Itr),e(Fe,Ntr),e(Fe,tM),e(tM,ibe),e(ibe,qtr),e(tM,jtr),e(tM,PQ),e(PQ,Dtr),e(tM,Gtr),e(Fe,Otr),e(Fe,aM),e(aM,dbe),e(dbe,Vtr),e(aM,Xtr),e(aM,BQ),e(BQ,ztr),e(aM,Qtr),e(Fe,Wtr),e(Fe,nM),e(nM,cbe),e(cbe,Htr),e(nM,Utr),e(nM,IQ),e(IQ,Jtr),e(nM,Ytr),e(Fe,Ktr),e(Fe,Qs),e(Qs,mbe),e(mbe,Ztr),e(Qs,ear),e(Qs,NQ),e(NQ,oar),e(Qs,rar),e(Qs,qQ),e(qQ,tar),e(Qs,aar),e(Fe,nar),e(Fe,sM),e(sM,fbe),e(fbe,sar),e(sM,lar),e(sM,jQ),e(jQ,iar),e(sM,dar),e(Fe,car),e(Fe,Ws),e(Ws,gbe),e(gbe,mar),e(Ws,far),e(Ws,DQ),e(DQ,gar),e(Ws,har),e(Ws,GQ),e(GQ,uar),e(Ws,par),e(Fe,_ar),e(Fe,_t),e(_t,hbe),e(hbe,bar),e(_t,Far),e(_t,OQ),e(OQ,Tar),e(_t,Mar),e(_t,VQ),e(VQ,Ear),e(_t,Car),e(_t,XQ),e(XQ,war),e(_t,Aar),e(Fe,Lar),e(Fe,lM),e(lM,ube),e(ube,yar),e(lM,xar),e(lM,zQ),e(zQ,$ar),e(lM,kar),e(Fe,Sar),e(Fe,iM),e(iM,pbe),e(pbe,Rar),e(iM,Par),e(iM,QQ),e(QQ,Bar),e(iM,Iar),e(Fe,Nar),e(Fe,dM),e(dM,_be),e(_be,qar),e(dM,jar),e(dM,WQ),e(WQ,Dar),e(dM,Gar),e(Fe,Oar),e(Fe,cM),e(cM,bbe),e(bbe,Var),e(cM,Xar),e(cM,HQ),e(HQ,zar),e(cM,Qar),e(Fe,War),e(Fe,mM),e(mM,vbe),e(vbe,Har),e(mM,Uar),e(mM,UQ),e(UQ,Jar),e(mM,Yar),e(Fe,Kar),e(Fe,fM),e(fM,Fbe),e(Fbe,Zar),e(fM,enr),e(fM,JQ),e(JQ,onr),e(fM,rnr),e(Fe,tnr),e(Fe,gM),e(gM,Tbe),e(Tbe,anr),e(gM,nnr),e(gM,YQ),e(YQ,snr),e(gM,lnr),e(lo,inr),e(lo,hM),e(hM,dnr),e(hM,Mbe),e(Mbe,cnr),e(hM,mnr),e(hM,Ebe),e(Ebe,fnr),e(lo,gnr),M(uM,lo,null),b(m,sVe,_),b(m,vd,_),e(vd,pM),e(pM,Cbe),M(p8,Cbe,null),e(vd,hnr),e(vd,wbe),e(wbe,unr),b(m,lVe,_),b(m,Oo,_),M(_8,Oo,null),e(Oo,pnr),e(Oo,Fd),e(Fd,_nr),e(Fd,KQ),e(KQ,bnr),e(Fd,vnr),e(Fd,ZQ),e(ZQ,Fnr),e(Fd,Tnr),e(Oo,Mnr),e(Oo,b8),e(b8,Enr),e(b8,Abe),e(Abe,Cnr),e(b8,wnr),e(Oo,Anr),e(Oo,bt),M(v8,bt,null),e(bt,Lnr),e(bt,Lbe),e(Lbe,ynr),e(bt,xnr),e(bt,Td),e(Td,$nr),e(Td,ybe),e(ybe,knr),e(Td,Snr),e(Td,eW),e(eW,Rnr),e(Td,Pnr),e(bt,Bnr),M(_M,bt,null),e(Oo,Inr),e(Oo,io),M(F8,io,null),e(io,Nnr),e(io,xbe),e(xbe,qnr),e(io,jnr),e(io,za),e(za,Dnr),e(za,$be),e($be,Gnr),e(za,Onr),e(za,kbe),e(kbe,Vnr),e(za,Xnr),e(za,Sbe),e(Sbe,znr),e(za,Qnr),e(io,Wnr),e(io,Rbe),e(Rbe,bM),e(bM,Pbe),e(Pbe,Hnr),e(bM,Unr),e(bM,oW),e(oW,Jnr),e(bM,Ynr),e(io,Knr),e(io,vM),e(vM,Znr),e(vM,Bbe),e(Bbe,esr),e(vM,osr),e(vM,Ibe),e(Ibe,rsr),e(io,tsr),M(FM,io,null),b(m,iVe,_),b(m,Md,_),e(Md,TM),e(TM,Nbe),M(T8,Nbe,null),e(Md,asr),e(Md,qbe),e(qbe,nsr),b(m,dVe,_),b(m,Vo,_),M(M8,Vo,null),e(Vo,ssr),e(Vo,Ed),e(Ed,lsr),e(Ed,rW),e(rW,isr),e(Ed,dsr),e(Ed,tW),e(tW,csr),e(Ed,msr),e(Vo,fsr),e(Vo,E8),e(E8,gsr),e(E8,jbe),e(jbe,hsr),e(E8,usr),e(Vo,psr),e(Vo,vt),M(C8,vt,null),e(vt,_sr),e(vt,Dbe),e(Dbe,bsr),e(vt,vsr),e(vt,Cd),e(Cd,Fsr),e(Cd,Gbe),e(Gbe,Tsr),e(Cd,Msr),e(Cd,aW),e(aW,Esr),e(Cd,Csr),e(vt,wsr),M(MM,vt,null),e(Vo,Asr),e(Vo,co),M(w8,co,null),e(co,Lsr),e(co,Obe),e(Obe,ysr),e(co,xsr),e(co,Qa),e(Qa,$sr),e(Qa,Vbe),e(Vbe,ksr),e(Qa,Ssr),e(Qa,Xbe),e(Xbe,Rsr),e(Qa,Psr),e(Qa,zbe),e(zbe,Bsr),e(Qa,Isr),e(co,Nsr),e(co,Qbe),e(Qbe,EM),e(EM,Wbe),e(Wbe,qsr),e(EM,jsr),e(EM,nW),e(nW,Dsr),e(EM,Gsr),e(co,Osr),e(co,CM),e(CM,Vsr),e(CM,Hbe),e(Hbe,Xsr),e(CM,zsr),e(CM,Ube),e(Ube,Qsr),e(co,Wsr),M(wM,co,null),b(m,cVe,_),b(m,wd,_),e(wd,AM),e(AM,Jbe),M(A8,Jbe,null),e(wd,Hsr),e(wd,Ybe),e(Ybe,Usr),b(m,mVe,_),b(m,Xo,_),M(L8,Xo,null),e(Xo,Jsr),e(Xo,Ad),e(Ad,Ysr),e(Ad,sW),e(sW,Ksr),e(Ad,Zsr),e(Ad,lW),e(lW,elr),e(Ad,olr),e(Xo,rlr),e(Xo,y8),e(y8,tlr),e(y8,Kbe),e(Kbe,alr),e(y8,nlr),e(Xo,slr),e(Xo,Ft),M(x8,Ft,null),e(Ft,llr),e(Ft,Zbe),e(Zbe,ilr),e(Ft,dlr),e(Ft,Ld),e(Ld,clr),e(Ld,eve),e(eve,mlr),e(Ld,flr),e(Ld,iW),e(iW,glr),e(Ld,hlr),e(Ft,ulr),M(LM,Ft,null),e(Xo,plr),e(Xo,mo),M($8,mo,null),e(mo,_lr),e(mo,ove),e(ove,blr),e(mo,vlr),e(mo,Wa),e(Wa,Flr),e(Wa,rve),e(rve,Tlr),e(Wa,Mlr),e(Wa,tve),e(tve,Elr),e(Wa,Clr),e(Wa,ave),e(ave,wlr),e(Wa,Alr),e(mo,Llr),e(mo,Pe),e(Pe,yM),e(yM,nve),e(nve,ylr),e(yM,xlr),e(yM,dW),e(dW,$lr),e(yM,klr),e(Pe,Slr),e(Pe,xM),e(xM,sve),e(sve,Rlr),e(xM,Plr),e(xM,cW),e(cW,Blr),e(xM,Ilr),e(Pe,Nlr),e(Pe,$M),e($M,lve),e(lve,qlr),e($M,jlr),e($M,mW),e(mW,Dlr),e($M,Glr),e(Pe,Olr),e(Pe,kM),e(kM,ive),e(ive,Vlr),e(kM,Xlr),e(kM,fW),e(fW,zlr),e(kM,Qlr),e(Pe,Wlr),e(Pe,SM),e(SM,dve),e(dve,Hlr),e(SM,Ulr),e(SM,gW),e(gW,Jlr),e(SM,Ylr),e(Pe,Klr),e(Pe,RM),e(RM,cve),e(cve,Zlr),e(RM,eir),e(RM,hW),e(hW,oir),e(RM,rir),e(Pe,tir),e(Pe,PM),e(PM,mve),e(mve,air),e(PM,nir),e(PM,uW),e(uW,sir),e(PM,lir),e(Pe,iir),e(Pe,BM),e(BM,fve),e(fve,dir),e(BM,cir),e(BM,pW),e(pW,mir),e(BM,fir),e(Pe,gir),e(Pe,IM),e(IM,gve),e(gve,hir),e(IM,uir),e(IM,_W),e(_W,pir),e(IM,_ir),e(mo,bir),e(mo,NM),e(NM,vir),e(NM,hve),e(hve,Fir),e(NM,Tir),e(NM,uve),e(uve,Mir),e(mo,Eir),M(qM,mo,null),b(m,fVe,_),b(m,yd,_),e(yd,jM),e(jM,pve),M(k8,pve,null),e(yd,Cir),e(yd,_ve),e(_ve,wir),b(m,gVe,_),b(m,zo,_),M(S8,zo,null),e(zo,Air),e(zo,xd),e(xd,Lir),e(xd,bW),e(bW,yir),e(xd,xir),e(xd,vW),e(vW,$ir),e(xd,kir),e(zo,Sir),e(zo,R8),e(R8,Rir),e(R8,bve),e(bve,Pir),e(R8,Bir),e(zo,Iir),e(zo,Tt),M(P8,Tt,null),e(Tt,Nir),e(Tt,vve),e(vve,qir),e(Tt,jir),e(Tt,$d),e($d,Dir),e($d,Fve),e(Fve,Gir),e($d,Oir),e($d,FW),e(FW,Vir),e($d,Xir),e(Tt,zir),M(DM,Tt,null),e(zo,Qir),e(zo,fo),M(B8,fo,null),e(fo,Wir),e(fo,Tve),e(Tve,Hir),e(fo,Uir),e(fo,Ha),e(Ha,Jir),e(Ha,Mve),e(Mve,Yir),e(Ha,Kir),e(Ha,Eve),e(Eve,Zir),e(Ha,edr),e(Ha,Cve),e(Cve,odr),e(Ha,rdr),e(fo,tdr),e(fo,et),e(et,GM),e(GM,wve),e(wve,adr),e(GM,ndr),e(GM,TW),e(TW,sdr),e(GM,ldr),e(et,idr),e(et,OM),e(OM,Ave),e(Ave,ddr),e(OM,cdr),e(OM,MW),e(MW,mdr),e(OM,fdr),e(et,gdr),e(et,VM),e(VM,Lve),e(Lve,hdr),e(VM,udr),e(VM,EW),e(EW,pdr),e(VM,_dr),e(et,bdr),e(et,XM),e(XM,yve),e(yve,vdr),e(XM,Fdr),e(XM,CW),e(CW,Tdr),e(XM,Mdr),e(et,Edr),e(et,zM),e(zM,xve),e(xve,Cdr),e(zM,wdr),e(zM,wW),e(wW,Adr),e(zM,Ldr),e(fo,ydr),e(fo,QM),e(QM,xdr),e(QM,$ve),e($ve,$dr),e(QM,kdr),e(QM,kve),e(kve,Sdr),e(fo,Rdr),M(WM,fo,null),b(m,hVe,_),b(m,kd,_),e(kd,HM),e(HM,Sve),M(I8,Sve,null),e(kd,Pdr),e(kd,Rve),e(Rve,Bdr),b(m,uVe,_),b(m,Qo,_),M(N8,Qo,null),e(Qo,Idr),e(Qo,Sd),e(Sd,Ndr),e(Sd,AW),e(AW,qdr),e(Sd,jdr),e(Sd,LW),e(LW,Ddr),e(Sd,Gdr),e(Qo,Odr),e(Qo,q8),e(q8,Vdr),e(q8,Pve),e(Pve,Xdr),e(q8,zdr),e(Qo,Qdr),e(Qo,Mt),M(j8,Mt,null),e(Mt,Wdr),e(Mt,Bve),e(Bve,Hdr),e(Mt,Udr),e(Mt,Rd),e(Rd,Jdr),e(Rd,Ive),e(Ive,Ydr),e(Rd,Kdr),e(Rd,yW),e(yW,Zdr),e(Rd,ecr),e(Mt,ocr),M(UM,Mt,null),e(Qo,rcr),e(Qo,go),M(D8,go,null),e(go,tcr),e(go,Nve),e(Nve,acr),e(go,ncr),e(go,Ua),e(Ua,scr),e(Ua,qve),e(qve,lcr),e(Ua,icr),e(Ua,jve),e(jve,dcr),e(Ua,ccr),e(Ua,Dve),e(Dve,mcr),e(Ua,fcr),e(go,gcr),e(go,Le),e(Le,JM),e(JM,Gve),e(Gve,hcr),e(JM,ucr),e(JM,xW),e(xW,pcr),e(JM,_cr),e(Le,bcr),e(Le,YM),e(YM,Ove),e(Ove,vcr),e(YM,Fcr),e(YM,$W),e($W,Tcr),e(YM,Mcr),e(Le,Ecr),e(Le,KM),e(KM,Vve),e(Vve,Ccr),e(KM,wcr),e(KM,kW),e(kW,Acr),e(KM,Lcr),e(Le,ycr),e(Le,ZM),e(ZM,Xve),e(Xve,xcr),e(ZM,$cr),e(ZM,SW),e(SW,kcr),e(ZM,Scr),e(Le,Rcr),e(Le,eE),e(eE,zve),e(zve,Pcr),e(eE,Bcr),e(eE,RW),e(RW,Icr),e(eE,Ncr),e(Le,qcr),e(Le,oE),e(oE,Qve),e(Qve,jcr),e(oE,Dcr),e(oE,PW),e(PW,Gcr),e(oE,Ocr),e(Le,Vcr),e(Le,rE),e(rE,Wve),e(Wve,Xcr),e(rE,zcr),e(rE,BW),e(BW,Qcr),e(rE,Wcr),e(Le,Hcr),e(Le,tE),e(tE,Hve),e(Hve,Ucr),e(tE,Jcr),e(tE,IW),e(IW,Ycr),e(tE,Kcr),e(Le,Zcr),e(Le,aE),e(aE,Uve),e(Uve,emr),e(aE,omr),e(aE,NW),e(NW,rmr),e(aE,tmr),e(Le,amr),e(Le,nE),e(nE,Jve),e(Jve,nmr),e(nE,smr),e(nE,qW),e(qW,lmr),e(nE,imr),e(go,dmr),e(go,sE),e(sE,cmr),e(sE,Yve),e(Yve,mmr),e(sE,fmr),e(sE,Kve),e(Kve,gmr),e(go,hmr),M(lE,go,null),b(m,pVe,_),b(m,Pd,_),e(Pd,iE),e(iE,Zve),M(G8,Zve,null),e(Pd,umr),e(Pd,e1e),e(e1e,pmr),b(m,_Ve,_),b(m,Wo,_),M(O8,Wo,null),e(Wo,_mr),e(Wo,Bd),e(Bd,bmr),e(Bd,jW),e(jW,vmr),e(Bd,Fmr),e(Bd,DW),e(DW,Tmr),e(Bd,Mmr),e(Wo,Emr),e(Wo,V8),e(V8,Cmr),e(V8,o1e),e(o1e,wmr),e(V8,Amr),e(Wo,Lmr),e(Wo,Et),M(X8,Et,null),e(Et,ymr),e(Et,r1e),e(r1e,xmr),e(Et,$mr),e(Et,Id),e(Id,kmr),e(Id,t1e),e(t1e,Smr),e(Id,Rmr),e(Id,GW),e(GW,Pmr),e(Id,Bmr),e(Et,Imr),M(dE,Et,null),e(Wo,Nmr),e(Wo,ho),M(z8,ho,null),e(ho,qmr),e(ho,a1e),e(a1e,jmr),e(ho,Dmr),e(ho,Ja),e(Ja,Gmr),e(Ja,n1e),e(n1e,Omr),e(Ja,Vmr),e(Ja,s1e),e(s1e,Xmr),e(Ja,zmr),e(Ja,l1e),e(l1e,Qmr),e(Ja,Wmr),e(ho,Hmr),e(ho,Q8),e(Q8,cE),e(cE,i1e),e(i1e,Umr),e(cE,Jmr),e(cE,OW),e(OW,Ymr),e(cE,Kmr),e(Q8,Zmr),e(Q8,mE),e(mE,d1e),e(d1e,efr),e(mE,ofr),e(mE,VW),e(VW,rfr),e(mE,tfr),e(ho,afr),e(ho,fE),e(fE,nfr),e(fE,c1e),e(c1e,sfr),e(fE,lfr),e(fE,m1e),e(m1e,ifr),e(ho,dfr),M(gE,ho,null),b(m,bVe,_),b(m,Nd,_),e(Nd,hE),e(hE,f1e),M(W8,f1e,null),e(Nd,cfr),e(Nd,g1e),e(g1e,mfr),b(m,vVe,_),b(m,Ho,_),M(H8,Ho,null),e(Ho,ffr),e(Ho,qd),e(qd,gfr),e(qd,XW),e(XW,hfr),e(qd,ufr),e(qd,zW),e(zW,pfr),e(qd,_fr),e(Ho,bfr),e(Ho,U8),e(U8,vfr),e(U8,h1e),e(h1e,Ffr),e(U8,Tfr),e(Ho,Mfr),e(Ho,Ct),M(J8,Ct,null),e(Ct,Efr),e(Ct,u1e),e(u1e,Cfr),e(Ct,wfr),e(Ct,jd),e(jd,Afr),e(jd,p1e),e(p1e,Lfr),e(jd,yfr),e(jd,QW),e(QW,xfr),e(jd,$fr),e(Ct,kfr),M(uE,Ct,null),e(Ho,Sfr),e(Ho,uo),M(Y8,uo,null),e(uo,Rfr),e(uo,_1e),e(_1e,Pfr),e(uo,Bfr),e(uo,Ya),e(Ya,Ifr),e(Ya,b1e),e(b1e,Nfr),e(Ya,qfr),e(Ya,v1e),e(v1e,jfr),e(Ya,Dfr),e(Ya,F1e),e(F1e,Gfr),e(Ya,Ofr),e(uo,Vfr),e(uo,ot),e(ot,pE),e(pE,T1e),e(T1e,Xfr),e(pE,zfr),e(pE,WW),e(WW,Qfr),e(pE,Wfr),e(ot,Hfr),e(ot,_E),e(_E,M1e),e(M1e,Ufr),e(_E,Jfr),e(_E,HW),e(HW,Yfr),e(_E,Kfr),e(ot,Zfr),e(ot,bE),e(bE,E1e),e(E1e,egr),e(bE,ogr),e(bE,UW),e(UW,rgr),e(bE,tgr),e(ot,agr),e(ot,vE),e(vE,C1e),e(C1e,ngr),e(vE,sgr),e(vE,JW),e(JW,lgr),e(vE,igr),e(ot,dgr),e(ot,FE),e(FE,w1e),e(w1e,cgr),e(FE,mgr),e(FE,YW),e(YW,fgr),e(FE,ggr),e(uo,hgr),e(uo,TE),e(TE,ugr),e(TE,A1e),e(A1e,pgr),e(TE,_gr),e(TE,L1e),e(L1e,bgr),e(uo,vgr),M(ME,uo,null),b(m,FVe,_),b(m,Dd,_),e(Dd,EE),e(EE,y1e),M(K8,y1e,null),e(Dd,Fgr),e(Dd,x1e),e(x1e,Tgr),b(m,TVe,_),b(m,Uo,_),M(Z8,Uo,null),e(Uo,Mgr),e(Uo,Gd),e(Gd,Egr),e(Gd,KW),e(KW,Cgr),e(Gd,wgr),e(Gd,ZW),e(ZW,Agr),e(Gd,Lgr),e(Uo,ygr),e(Uo,e9),e(e9,xgr),e(e9,$1e),e($1e,$gr),e(e9,kgr),e(Uo,Sgr),e(Uo,wt),M(o9,wt,null),e(wt,Rgr),e(wt,k1e),e(k1e,Pgr),e(wt,Bgr),e(wt,Od),e(Od,Igr),e(Od,S1e),e(S1e,Ngr),e(Od,qgr),e(Od,eH),e(eH,jgr),e(Od,Dgr),e(wt,Ggr),M(CE,wt,null),e(Uo,Ogr),e(Uo,po),M(r9,po,null),e(po,Vgr),e(po,R1e),e(R1e,Xgr),e(po,zgr),e(po,Ka),e(Ka,Qgr),e(Ka,P1e),e(P1e,Wgr),e(Ka,Hgr),e(Ka,B1e),e(B1e,Ugr),e(Ka,Jgr),e(Ka,I1e),e(I1e,Ygr),e(Ka,Kgr),e(po,Zgr),e(po,Vd),e(Vd,wE),e(wE,N1e),e(N1e,ehr),e(wE,ohr),e(wE,oH),e(oH,rhr),e(wE,thr),e(Vd,ahr),e(Vd,AE),e(AE,q1e),e(q1e,nhr),e(AE,shr),e(AE,rH),e(rH,lhr),e(AE,ihr),e(Vd,dhr),e(Vd,LE),e(LE,j1e),e(j1e,chr),e(LE,mhr),e(LE,tH),e(tH,fhr),e(LE,ghr),e(po,hhr),e(po,yE),e(yE,uhr),e(yE,D1e),e(D1e,phr),e(yE,_hr),e(yE,G1e),e(G1e,bhr),e(po,vhr),M(xE,po,null),b(m,MVe,_),b(m,Xd,_),e(Xd,$E),e($E,O1e),M(t9,O1e,null),e(Xd,Fhr),e(Xd,V1e),e(V1e,Thr),b(m,EVe,_),b(m,Jo,_),M(a9,Jo,null),e(Jo,Mhr),e(Jo,zd),e(zd,Ehr),e(zd,aH),e(aH,Chr),e(zd,whr),e(zd,nH),e(nH,Ahr),e(zd,Lhr),e(Jo,yhr),e(Jo,n9),e(n9,xhr),e(n9,X1e),e(X1e,$hr),e(n9,khr),e(Jo,Shr),e(Jo,At),M(s9,At,null),e(At,Rhr),e(At,z1e),e(z1e,Phr),e(At,Bhr),e(At,Qd),e(Qd,Ihr),e(Qd,Q1e),e(Q1e,Nhr),e(Qd,qhr),e(Qd,sH),e(sH,jhr),e(Qd,Dhr),e(At,Ghr),M(kE,At,null),e(Jo,Ohr),e(Jo,_o),M(l9,_o,null),e(_o,Vhr),e(_o,W1e),e(W1e,Xhr),e(_o,zhr),e(_o,Za),e(Za,Qhr),e(Za,H1e),e(H1e,Whr),e(Za,Hhr),e(Za,U1e),e(U1e,Uhr),e(Za,Jhr),e(Za,J1e),e(J1e,Yhr),e(Za,Khr),e(_o,Zhr),e(_o,i9),e(i9,SE),e(SE,Y1e),e(Y1e,eur),e(SE,our),e(SE,lH),e(lH,rur),e(SE,tur),e(i9,aur),e(i9,RE),e(RE,K1e),e(K1e,nur),e(RE,sur),e(RE,iH),e(iH,lur),e(RE,iur),e(_o,dur),e(_o,PE),e(PE,cur),e(PE,Z1e),e(Z1e,mur),e(PE,fur),e(PE,eFe),e(eFe,gur),e(_o,hur),M(BE,_o,null),b(m,CVe,_),b(m,Wd,_),e(Wd,IE),e(IE,oFe),M(d9,oFe,null),e(Wd,uur),e(Wd,rFe),e(rFe,pur),b(m,wVe,_),b(m,Yo,_),M(c9,Yo,null),e(Yo,_ur),e(Yo,Hd),e(Hd,bur),e(Hd,dH),e(dH,vur),e(Hd,Fur),e(Hd,cH),e(cH,Tur),e(Hd,Mur),e(Yo,Eur),e(Yo,m9),e(m9,Cur),e(m9,tFe),e(tFe,wur),e(m9,Aur),e(Yo,Lur),e(Yo,Lt),M(f9,Lt,null),e(Lt,yur),e(Lt,aFe),e(aFe,xur),e(Lt,$ur),e(Lt,Ud),e(Ud,kur),e(Ud,nFe),e(nFe,Sur),e(Ud,Rur),e(Ud,mH),e(mH,Pur),e(Ud,Bur),e(Lt,Iur),M(NE,Lt,null),e(Yo,Nur),e(Yo,bo),M(g9,bo,null),e(bo,qur),e(bo,sFe),e(sFe,jur),e(bo,Dur),e(bo,en),e(en,Gur),e(en,lFe),e(lFe,Our),e(en,Vur),e(en,iFe),e(iFe,Xur),e(en,zur),e(en,dFe),e(dFe,Qur),e(en,Wur),e(bo,Hur),e(bo,cFe),e(cFe,qE),e(qE,mFe),e(mFe,Uur),e(qE,Jur),e(qE,fH),e(fH,Yur),e(qE,Kur),e(bo,Zur),e(bo,jE),e(jE,epr),e(jE,fFe),e(fFe,opr),e(jE,rpr),e(jE,gFe),e(gFe,tpr),e(bo,apr),M(DE,bo,null),b(m,AVe,_),b(m,Jd,_),e(Jd,GE),e(GE,hFe),M(h9,hFe,null),e(Jd,npr),e(Jd,uFe),e(uFe,spr),b(m,LVe,_),b(m,Ko,_),M(u9,Ko,null),e(Ko,lpr),e(Ko,Yd),e(Yd,ipr),e(Yd,gH),e(gH,dpr),e(Yd,cpr),e(Yd,hH),e(hH,mpr),e(Yd,fpr),e(Ko,gpr),e(Ko,p9),e(p9,hpr),e(p9,pFe),e(pFe,upr),e(p9,ppr),e(Ko,_pr),e(Ko,yt),M(_9,yt,null),e(yt,bpr),e(yt,_Fe),e(_Fe,vpr),e(yt,Fpr),e(yt,Kd),e(Kd,Tpr),e(Kd,bFe),e(bFe,Mpr),e(Kd,Epr),e(Kd,uH),e(uH,Cpr),e(Kd,wpr),e(yt,Apr),M(OE,yt,null),e(Ko,Lpr),e(Ko,vo),M(b9,vo,null),e(vo,ypr),e(vo,vFe),e(vFe,xpr),e(vo,$pr),e(vo,on),e(on,kpr),e(on,FFe),e(FFe,Spr),e(on,Rpr),e(on,TFe),e(TFe,Ppr),e(on,Bpr),e(on,MFe),e(MFe,Ipr),e(on,Npr),e(vo,qpr),e(vo,rn),e(rn,VE),e(VE,EFe),e(EFe,jpr),e(VE,Dpr),e(VE,pH),e(pH,Gpr),e(VE,Opr),e(rn,Vpr),e(rn,XE),e(XE,CFe),e(CFe,Xpr),e(XE,zpr),e(XE,_H),e(_H,Qpr),e(XE,Wpr),e(rn,Hpr),e(rn,zE),e(zE,wFe),e(wFe,Upr),e(zE,Jpr),e(zE,bH),e(bH,Ypr),e(zE,Kpr),e(rn,Zpr),e(rn,QE),e(QE,AFe),e(AFe,e_r),e(QE,o_r),e(QE,vH),e(vH,r_r),e(QE,t_r),e(vo,a_r),e(vo,WE),e(WE,n_r),e(WE,LFe),e(LFe,s_r),e(WE,l_r),e(WE,yFe),e(yFe,i_r),e(vo,d_r),M(HE,vo,null),b(m,yVe,_),b(m,Zd,_),e(Zd,UE),e(UE,xFe),M(v9,xFe,null),e(Zd,c_r),e(Zd,$Fe),e($Fe,m_r),b(m,xVe,_),b(m,Zo,_),M(F9,Zo,null),e(Zo,f_r),e(Zo,ec),e(ec,g_r),e(ec,FH),e(FH,h_r),e(ec,u_r),e(ec,TH),e(TH,p_r),e(ec,__r),e(Zo,b_r),e(Zo,T9),e(T9,v_r),e(T9,kFe),e(kFe,F_r),e(T9,T_r),e(Zo,M_r),e(Zo,xt),M(M9,xt,null),e(xt,E_r),e(xt,SFe),e(SFe,C_r),e(xt,w_r),e(xt,oc),e(oc,A_r),e(oc,RFe),e(RFe,L_r),e(oc,y_r),e(oc,MH),e(MH,x_r),e(oc,$_r),e(xt,k_r),M(JE,xt,null),e(Zo,S_r),e(Zo,Fo),M(E9,Fo,null),e(Fo,R_r),e(Fo,PFe),e(PFe,P_r),e(Fo,B_r),e(Fo,tn),e(tn,I_r),e(tn,BFe),e(BFe,N_r),e(tn,q_r),e(tn,IFe),e(IFe,j_r),e(tn,D_r),e(tn,NFe),e(NFe,G_r),e(tn,O_r),e(Fo,V_r),e(Fo,qFe),e(qFe,YE),e(YE,jFe),e(jFe,X_r),e(YE,z_r),e(YE,EH),e(EH,Q_r),e(YE,W_r),e(Fo,H_r),e(Fo,KE),e(KE,U_r),e(KE,DFe),e(DFe,J_r),e(KE,Y_r),e(KE,GFe),e(GFe,K_r),e(Fo,Z_r),M(ZE,Fo,null),b(m,$Ve,_),b(m,rc,_),e(rc,e4),e(e4,OFe),M(C9,OFe,null),e(rc,e2r),e(rc,VFe),e(VFe,o2r),b(m,kVe,_),b(m,er,_),M(w9,er,null),e(er,r2r),e(er,tc),e(tc,t2r),e(tc,CH),e(CH,a2r),e(tc,n2r),e(tc,wH),e(wH,s2r),e(tc,l2r),e(er,i2r),e(er,A9),e(A9,d2r),e(A9,XFe),e(XFe,c2r),e(A9,m2r),e(er,f2r),e(er,$t),M(L9,$t,null),e($t,g2r),e($t,zFe),e(zFe,h2r),e($t,u2r),e($t,ac),e(ac,p2r),e(ac,QFe),e(QFe,_2r),e(ac,b2r),e(ac,AH),e(AH,v2r),e(ac,F2r),e($t,T2r),M(o4,$t,null),e(er,M2r),e(er,yr),M(y9,yr,null),e(yr,E2r),e(yr,WFe),e(WFe,C2r),e(yr,w2r),e(yr,an),e(an,A2r),e(an,HFe),e(HFe,L2r),e(an,y2r),e(an,UFe),e(UFe,x2r),e(an,$2r),e(an,JFe),e(JFe,k2r),e(an,S2r),e(yr,R2r),e(yr,j),e(j,r4),e(r4,YFe),e(YFe,P2r),e(r4,B2r),e(r4,LH),e(LH,I2r),e(r4,N2r),e(j,q2r),e(j,t4),e(t4,KFe),e(KFe,j2r),e(t4,D2r),e(t4,yH),e(yH,G2r),e(t4,O2r),e(j,V2r),e(j,a4),e(a4,ZFe),e(ZFe,X2r),e(a4,z2r),e(a4,xH),e(xH,Q2r),e(a4,W2r),e(j,H2r),e(j,n4),e(n4,eTe),e(eTe,U2r),e(n4,J2r),e(n4,$H),e($H,Y2r),e(n4,K2r),e(j,Z2r),e(j,s4),e(s4,oTe),e(oTe,ebr),e(s4,obr),e(s4,kH),e(kH,rbr),e(s4,tbr),e(j,abr),e(j,l4),e(l4,rTe),e(rTe,nbr),e(l4,sbr),e(l4,SH),e(SH,lbr),e(l4,ibr),e(j,dbr),e(j,i4),e(i4,tTe),e(tTe,cbr),e(i4,mbr),e(i4,RH),e(RH,fbr),e(i4,gbr),e(j,hbr),e(j,d4),e(d4,aTe),e(aTe,ubr),e(d4,pbr),e(d4,PH),e(PH,_br),e(d4,bbr),e(j,vbr),e(j,c4),e(c4,nTe),e(nTe,Fbr),e(c4,Tbr),e(c4,BH),e(BH,Mbr),e(c4,Ebr),e(j,Cbr),e(j,m4),e(m4,sTe),e(sTe,wbr),e(m4,Abr),e(m4,IH),e(IH,Lbr),e(m4,ybr),e(j,xbr),e(j,f4),e(f4,lTe),e(lTe,$br),e(f4,kbr),e(f4,NH),e(NH,Sbr),e(f4,Rbr),e(j,Pbr),e(j,g4),e(g4,iTe),e(iTe,Bbr),e(g4,Ibr),e(g4,qH),e(qH,Nbr),e(g4,qbr),e(j,jbr),e(j,h4),e(h4,dTe),e(dTe,Dbr),e(h4,Gbr),e(h4,jH),e(jH,Obr),e(h4,Vbr),e(j,Xbr),e(j,u4),e(u4,cTe),e(cTe,zbr),e(u4,Qbr),e(u4,DH),e(DH,Wbr),e(u4,Hbr),e(j,Ubr),e(j,p4),e(p4,mTe),e(mTe,Jbr),e(p4,Ybr),e(p4,GH),e(GH,Kbr),e(p4,Zbr),e(j,evr),e(j,_4),e(_4,fTe),e(fTe,ovr),e(_4,rvr),e(_4,OH),e(OH,tvr),e(_4,avr),e(j,nvr),e(j,b4),e(b4,gTe),e(gTe,svr),e(b4,lvr),e(b4,VH),e(VH,ivr),e(b4,dvr),e(j,cvr),e(j,Hs),e(Hs,hTe),e(hTe,mvr),e(Hs,fvr),e(Hs,XH),e(XH,gvr),e(Hs,hvr),e(Hs,zH),e(zH,uvr),e(Hs,pvr),e(j,_vr),e(j,v4),e(v4,uTe),e(uTe,bvr),e(v4,vvr),e(v4,QH),e(QH,Fvr),e(v4,Tvr),e(j,Mvr),e(j,F4),e(F4,pTe),e(pTe,Evr),e(F4,Cvr),e(F4,WH),e(WH,wvr),e(F4,Avr),e(j,Lvr),e(j,T4),e(T4,_Te),e(_Te,yvr),e(T4,xvr),e(T4,HH),e(HH,$vr),e(T4,kvr),e(j,Svr),e(j,M4),e(M4,bTe),e(bTe,Rvr),e(M4,Pvr),e(M4,UH),e(UH,Bvr),e(M4,Ivr),e(j,Nvr),e(j,E4),e(E4,vTe),e(vTe,qvr),e(E4,jvr),e(E4,JH),e(JH,Dvr),e(E4,Gvr),e(j,Ovr),e(j,C4),e(C4,FTe),e(FTe,Vvr),e(C4,Xvr),e(C4,YH),e(YH,zvr),e(C4,Qvr),e(j,Wvr),e(j,w4),e(w4,TTe),e(TTe,Hvr),e(w4,Uvr),e(w4,KH),e(KH,Jvr),e(w4,Yvr),e(j,Kvr),e(j,A4),e(A4,MTe),e(MTe,Zvr),e(A4,e1r),e(A4,ZH),e(ZH,o1r),e(A4,r1r),e(j,t1r),e(j,L4),e(L4,ETe),e(ETe,a1r),e(L4,n1r),e(L4,eU),e(eU,s1r),e(L4,l1r),e(j,i1r),e(j,y4),e(y4,CTe),e(CTe,d1r),e(y4,c1r),e(y4,oU),e(oU,m1r),e(y4,f1r),e(j,g1r),e(j,x4),e(x4,wTe),e(wTe,h1r),e(x4,u1r),e(x4,rU),e(rU,p1r),e(x4,_1r),e(j,b1r),e(j,$4),e($4,ATe),e(ATe,v1r),e($4,F1r),e($4,tU),e(tU,T1r),e($4,M1r),e(j,E1r),e(j,k4),e(k4,LTe),e(LTe,C1r),e(k4,w1r),e(k4,aU),e(aU,A1r),e(k4,L1r),e(j,y1r),e(j,S4),e(S4,yTe),e(yTe,x1r),e(S4,$1r),e(S4,nU),e(nU,k1r),e(S4,S1r),e(j,R1r),e(j,R4),e(R4,xTe),e(xTe,P1r),e(R4,B1r),e(R4,sU),e(sU,I1r),e(R4,N1r),e(j,q1r),e(j,P4),e(P4,$Te),e($Te,j1r),e(P4,D1r),e(P4,lU),e(lU,G1r),e(P4,O1r),e(j,V1r),e(j,B4),e(B4,kTe),e(kTe,X1r),e(B4,z1r),e(B4,iU),e(iU,Q1r),e(B4,W1r),e(j,H1r),e(j,I4),e(I4,STe),e(STe,U1r),e(I4,J1r),e(I4,dU),e(dU,Y1r),e(I4,K1r),e(j,Z1r),e(j,N4),e(N4,RTe),e(RTe,eFr),e(N4,oFr),e(N4,cU),e(cU,rFr),e(N4,tFr),e(j,aFr),e(j,q4),e(q4,PTe),e(PTe,nFr),e(q4,sFr),e(q4,mU),e(mU,lFr),e(q4,iFr),e(j,dFr),e(j,j4),e(j4,BTe),e(BTe,cFr),e(j4,mFr),e(j4,fU),e(fU,fFr),e(j4,gFr),e(j,hFr),e(j,D4),e(D4,ITe),e(ITe,uFr),e(D4,pFr),e(D4,gU),e(gU,_Fr),e(D4,bFr),e(j,vFr),e(j,G4),e(G4,NTe),e(NTe,FFr),e(G4,TFr),e(G4,hU),e(hU,MFr),e(G4,EFr),e(j,CFr),e(j,O4),e(O4,qTe),e(qTe,wFr),e(O4,AFr),e(O4,uU),e(uU,LFr),e(O4,yFr),e(j,xFr),e(j,V4),e(V4,jTe),e(jTe,$Fr),e(V4,kFr),e(V4,pU),e(pU,SFr),e(V4,RFr),e(j,PFr),e(j,X4),e(X4,DTe),e(DTe,BFr),e(X4,IFr),e(X4,_U),e(_U,NFr),e(X4,qFr),e(j,jFr),e(j,z4),e(z4,GTe),e(GTe,DFr),e(z4,GFr),e(z4,bU),e(bU,OFr),e(z4,VFr),e(j,XFr),e(j,Q4),e(Q4,OTe),e(OTe,zFr),e(Q4,QFr),e(Q4,vU),e(vU,WFr),e(Q4,HFr),e(j,UFr),e(j,W4),e(W4,VTe),e(VTe,JFr),e(W4,YFr),e(W4,FU),e(FU,KFr),e(W4,ZFr),e(yr,eTr),M(H4,yr,null),b(m,SVe,_),b(m,nc,_),e(nc,U4),e(U4,XTe),M(x9,XTe,null),e(nc,oTr),e(nc,zTe),e(zTe,rTr),b(m,RVe,_),b(m,or,_),M($9,or,null),e(or,tTr),e(or,sc),e(sc,aTr),e(sc,TU),e(TU,nTr),e(sc,sTr),e(sc,MU),e(MU,lTr),e(sc,iTr),e(or,dTr),e(or,k9),e(k9,cTr),e(k9,QTe),e(QTe,mTr),e(k9,fTr),e(or,gTr),e(or,kt),M(S9,kt,null),e(kt,hTr),e(kt,WTe),e(WTe,uTr),e(kt,pTr),e(kt,lc),e(lc,_Tr),e(lc,HTe),e(HTe,bTr),e(lc,vTr),e(lc,EU),e(EU,FTr),e(lc,TTr),e(kt,MTr),M(J4,kt,null),e(or,ETr),e(or,xr),M(R9,xr,null),e(xr,CTr),e(xr,UTe),e(UTe,wTr),e(xr,ATr),e(xr,nn),e(nn,LTr),e(nn,JTe),e(JTe,yTr),e(nn,xTr),e(nn,YTe),e(YTe,$Tr),e(nn,kTr),e(nn,KTe),e(KTe,STr),e(nn,RTr),e(xr,PTr),e(xr,se),e(se,Y4),e(Y4,ZTe),e(ZTe,BTr),e(Y4,ITr),e(Y4,CU),e(CU,NTr),e(Y4,qTr),e(se,jTr),e(se,K4),e(K4,eMe),e(eMe,DTr),e(K4,GTr),e(K4,wU),e(wU,OTr),e(K4,VTr),e(se,XTr),e(se,Z4),e(Z4,oMe),e(oMe,zTr),e(Z4,QTr),e(Z4,AU),e(AU,WTr),e(Z4,HTr),e(se,UTr),e(se,eC),e(eC,rMe),e(rMe,JTr),e(eC,YTr),e(eC,LU),e(LU,KTr),e(eC,ZTr),e(se,eMr),e(se,oC),e(oC,tMe),e(tMe,oMr),e(oC,rMr),e(oC,yU),e(yU,tMr),e(oC,aMr),e(se,nMr),e(se,rC),e(rC,aMe),e(aMe,sMr),e(rC,lMr),e(rC,xU),e(xU,iMr),e(rC,dMr),e(se,cMr),e(se,tC),e(tC,nMe),e(nMe,mMr),e(tC,fMr),e(tC,$U),e($U,gMr),e(tC,hMr),e(se,uMr),e(se,aC),e(aC,sMe),e(sMe,pMr),e(aC,_Mr),e(aC,kU),e(kU,bMr),e(aC,vMr),e(se,FMr),e(se,nC),e(nC,lMe),e(lMe,TMr),e(nC,MMr),e(nC,SU),e(SU,EMr),e(nC,CMr),e(se,wMr),e(se,sC),e(sC,iMe),e(iMe,AMr),e(sC,LMr),e(sC,RU),e(RU,yMr),e(sC,xMr),e(se,$Mr),e(se,lC),e(lC,dMe),e(dMe,kMr),e(lC,SMr),e(lC,PU),e(PU,RMr),e(lC,PMr),e(se,BMr),e(se,iC),e(iC,cMe),e(cMe,IMr),e(iC,NMr),e(iC,BU),e(BU,qMr),e(iC,jMr),e(se,DMr),e(se,dC),e(dC,mMe),e(mMe,GMr),e(dC,OMr),e(dC,IU),e(IU,VMr),e(dC,XMr),e(se,zMr),e(se,cC),e(cC,fMe),e(fMe,QMr),e(cC,WMr),e(cC,NU),e(NU,HMr),e(cC,UMr),e(se,JMr),e(se,mC),e(mC,gMe),e(gMe,YMr),e(mC,KMr),e(mC,qU),e(qU,ZMr),e(mC,eEr),e(se,oEr),e(se,fC),e(fC,hMe),e(hMe,rEr),e(fC,tEr),e(fC,jU),e(jU,aEr),e(fC,nEr),e(se,sEr),e(se,gC),e(gC,uMe),e(uMe,lEr),e(gC,iEr),e(gC,DU),e(DU,dEr),e(gC,cEr),e(se,mEr),e(se,hC),e(hC,pMe),e(pMe,fEr),e(hC,gEr),e(hC,GU),e(GU,hEr),e(hC,uEr),e(se,pEr),e(se,uC),e(uC,_Me),e(_Me,_Er),e(uC,bEr),e(uC,OU),e(OU,vEr),e(uC,FEr),e(se,TEr),e(se,pC),e(pC,bMe),e(bMe,MEr),e(pC,EEr),e(pC,VU),e(VU,CEr),e(pC,wEr),e(se,AEr),e(se,_C),e(_C,vMe),e(vMe,LEr),e(_C,yEr),e(_C,XU),e(XU,xEr),e(_C,$Er),e(se,kEr),e(se,bC),e(bC,FMe),e(FMe,SEr),e(bC,REr),e(bC,zU),e(zU,PEr),e(bC,BEr),e(se,IEr),e(se,vC),e(vC,TMe),e(TMe,NEr),e(vC,qEr),e(vC,QU),e(QU,jEr),e(vC,DEr),e(xr,GEr),M(FC,xr,null),b(m,PVe,_),b(m,ic,_),e(ic,TC),e(TC,MMe),M(P9,MMe,null),e(ic,OEr),e(ic,EMe),e(EMe,VEr),b(m,BVe,_),b(m,rr,_),M(B9,rr,null),e(rr,XEr),e(rr,dc),e(dc,zEr),e(dc,WU),e(WU,QEr),e(dc,WEr),e(dc,HU),e(HU,HEr),e(dc,UEr),e(rr,JEr),e(rr,I9),e(I9,YEr),e(I9,CMe),e(CMe,KEr),e(I9,ZEr),e(rr,e4r),e(rr,St),M(N9,St,null),e(St,o4r),e(St,wMe),e(wMe,r4r),e(St,t4r),e(St,cc),e(cc,a4r),e(cc,AMe),e(AMe,n4r),e(cc,s4r),e(cc,UU),e(UU,l4r),e(cc,i4r),e(St,d4r),M(MC,St,null),e(rr,c4r),e(rr,$r),M(q9,$r,null),e($r,m4r),e($r,LMe),e(LMe,f4r),e($r,g4r),e($r,sn),e(sn,h4r),e(sn,yMe),e(yMe,u4r),e(sn,p4r),e(sn,xMe),e(xMe,_4r),e(sn,b4r),e(sn,$Me),e($Me,v4r),e(sn,F4r),e($r,T4r),e($r,Me),e(Me,EC),e(EC,kMe),e(kMe,M4r),e(EC,E4r),e(EC,JU),e(JU,C4r),e(EC,w4r),e(Me,A4r),e(Me,CC),e(CC,SMe),e(SMe,L4r),e(CC,y4r),e(CC,YU),e(YU,x4r),e(CC,$4r),e(Me,k4r),e(Me,wC),e(wC,RMe),e(RMe,S4r),e(wC,R4r),e(wC,KU),e(KU,P4r),e(wC,B4r),e(Me,I4r),e(Me,AC),e(AC,PMe),e(PMe,N4r),e(AC,q4r),e(AC,ZU),e(ZU,j4r),e(AC,D4r),e(Me,G4r),e(Me,LC),e(LC,BMe),e(BMe,O4r),e(LC,V4r),e(LC,eJ),e(eJ,X4r),e(LC,z4r),e(Me,Q4r),e(Me,yC),e(yC,IMe),e(IMe,W4r),e(yC,H4r),e(yC,oJ),e(oJ,U4r),e(yC,J4r),e(Me,Y4r),e(Me,xC),e(xC,NMe),e(NMe,K4r),e(xC,Z4r),e(xC,rJ),e(rJ,eCr),e(xC,oCr),e(Me,rCr),e(Me,$C),e($C,qMe),e(qMe,tCr),e($C,aCr),e($C,tJ),e(tJ,nCr),e($C,sCr),e(Me,lCr),e(Me,kC),e(kC,jMe),e(jMe,iCr),e(kC,dCr),e(kC,aJ),e(aJ,cCr),e(kC,mCr),e(Me,fCr),e(Me,SC),e(SC,DMe),e(DMe,gCr),e(SC,hCr),e(SC,nJ),e(nJ,uCr),e(SC,pCr),e(Me,_Cr),e(Me,RC),e(RC,GMe),e(GMe,bCr),e(RC,vCr),e(RC,sJ),e(sJ,FCr),e(RC,TCr),e(Me,MCr),e(Me,PC),e(PC,OMe),e(OMe,ECr),e(PC,CCr),e(PC,lJ),e(lJ,wCr),e(PC,ACr),e(Me,LCr),e(Me,BC),e(BC,VMe),e(VMe,yCr),e(BC,xCr),e(BC,iJ),e(iJ,$Cr),e(BC,kCr),e($r,SCr),M(IC,$r,null),b(m,IVe,_),b(m,mc,_),e(mc,NC),e(NC,XMe),M(j9,XMe,null),e(mc,RCr),e(mc,zMe),e(zMe,PCr),b(m,NVe,_),b(m,tr,_),M(D9,tr,null),e(tr,BCr),e(tr,fc),e(fc,ICr),e(fc,dJ),e(dJ,NCr),e(fc,qCr),e(fc,cJ),e(cJ,jCr),e(fc,DCr),e(tr,GCr),e(tr,G9),e(G9,OCr),e(G9,QMe),e(QMe,VCr),e(G9,XCr),e(tr,zCr),e(tr,Rt),M(O9,Rt,null),e(Rt,QCr),e(Rt,WMe),e(WMe,WCr),e(Rt,HCr),e(Rt,gc),e(gc,UCr),e(gc,HMe),e(HMe,JCr),e(gc,YCr),e(gc,mJ),e(mJ,KCr),e(gc,ZCr),e(Rt,e5r),M(qC,Rt,null),e(tr,o5r),e(tr,kr),M(V9,kr,null),e(kr,r5r),e(kr,UMe),e(UMe,t5r),e(kr,a5r),e(kr,ln),e(ln,n5r),e(ln,JMe),e(JMe,s5r),e(ln,l5r),e(ln,YMe),e(YMe,i5r),e(ln,d5r),e(ln,KMe),e(KMe,c5r),e(ln,m5r),e(kr,f5r),e(kr,dn),e(dn,jC),e(jC,ZMe),e(ZMe,g5r),e(jC,h5r),e(jC,fJ),e(fJ,u5r),e(jC,p5r),e(dn,_5r),e(dn,DC),e(DC,eEe),e(eEe,b5r),e(DC,v5r),e(DC,gJ),e(gJ,F5r),e(DC,T5r),e(dn,M5r),e(dn,GC),e(GC,oEe),e(oEe,E5r),e(GC,C5r),e(GC,hJ),e(hJ,w5r),e(GC,A5r),e(dn,L5r),e(dn,OC),e(OC,rEe),e(rEe,y5r),e(OC,x5r),e(OC,uJ),e(uJ,$5r),e(OC,k5r),e(kr,S5r),M(VC,kr,null),b(m,qVe,_),b(m,hc,_),e(hc,XC),e(XC,tEe),M(X9,tEe,null),e(hc,R5r),e(hc,aEe),e(aEe,P5r),b(m,jVe,_),b(m,ar,_),M(z9,ar,null),e(ar,B5r),e(ar,uc),e(uc,I5r),e(uc,pJ),e(pJ,N5r),e(uc,q5r),e(uc,_J),e(_J,j5r),e(uc,D5r),e(ar,G5r),e(ar,Q9),e(Q9,O5r),e(Q9,nEe),e(nEe,V5r),e(Q9,X5r),e(ar,z5r),e(ar,Pt),M(W9,Pt,null),e(Pt,Q5r),e(Pt,sEe),e(sEe,W5r),e(Pt,H5r),e(Pt,pc),e(pc,U5r),e(pc,lEe),e(lEe,J5r),e(pc,Y5r),e(pc,bJ),e(bJ,K5r),e(pc,Z5r),e(Pt,e3r),M(zC,Pt,null),e(ar,o3r),e(ar,Sr),M(H9,Sr,null),e(Sr,r3r),e(Sr,iEe),e(iEe,t3r),e(Sr,a3r),e(Sr,cn),e(cn,n3r),e(cn,dEe),e(dEe,s3r),e(cn,l3r),e(cn,cEe),e(cEe,i3r),e(cn,d3r),e(cn,mEe),e(mEe,c3r),e(cn,m3r),e(Sr,f3r),e(Sr,ie),e(ie,QC),e(QC,fEe),e(fEe,g3r),e(QC,h3r),e(QC,vJ),e(vJ,u3r),e(QC,p3r),e(ie,_3r),e(ie,WC),e(WC,gEe),e(gEe,b3r),e(WC,v3r),e(WC,FJ),e(FJ,F3r),e(WC,T3r),e(ie,M3r),e(ie,HC),e(HC,hEe),e(hEe,E3r),e(HC,C3r),e(HC,TJ),e(TJ,w3r),e(HC,A3r),e(ie,L3r),e(ie,UC),e(UC,uEe),e(uEe,y3r),e(UC,x3r),e(UC,MJ),e(MJ,$3r),e(UC,k3r),e(ie,S3r),e(ie,JC),e(JC,pEe),e(pEe,R3r),e(JC,P3r),e(JC,EJ),e(EJ,B3r),e(JC,I3r),e(ie,N3r),e(ie,YC),e(YC,_Ee),e(_Ee,q3r),e(YC,j3r),e(YC,CJ),e(CJ,D3r),e(YC,G3r),e(ie,O3r),e(ie,KC),e(KC,bEe),e(bEe,V3r),e(KC,X3r),e(KC,wJ),e(wJ,z3r),e(KC,Q3r),e(ie,W3r),e(ie,ZC),e(ZC,vEe),e(vEe,H3r),e(ZC,U3r),e(ZC,AJ),e(AJ,J3r),e(ZC,Y3r),e(ie,K3r),e(ie,e5),e(e5,FEe),e(FEe,Z3r),e(e5,e0r),e(e5,LJ),e(LJ,o0r),e(e5,r0r),e(ie,t0r),e(ie,o5),e(o5,TEe),e(TEe,a0r),e(o5,n0r),e(o5,yJ),e(yJ,s0r),e(o5,l0r),e(ie,i0r),e(ie,r5),e(r5,MEe),e(MEe,d0r),e(r5,c0r),e(r5,xJ),e(xJ,m0r),e(r5,f0r),e(ie,g0r),e(ie,t5),e(t5,EEe),e(EEe,h0r),e(t5,u0r),e(t5,$J),e($J,p0r),e(t5,_0r),e(ie,b0r),e(ie,a5),e(a5,CEe),e(CEe,v0r),e(a5,F0r),e(a5,kJ),e(kJ,T0r),e(a5,M0r),e(ie,E0r),e(ie,n5),e(n5,wEe),e(wEe,C0r),e(n5,w0r),e(n5,SJ),e(SJ,A0r),e(n5,L0r),e(ie,y0r),e(ie,s5),e(s5,AEe),e(AEe,x0r),e(s5,$0r),e(s5,RJ),e(RJ,k0r),e(s5,S0r),e(ie,R0r),e(ie,l5),e(l5,LEe),e(LEe,P0r),e(l5,B0r),e(l5,PJ),e(PJ,I0r),e(l5,N0r),e(ie,q0r),e(ie,i5),e(i5,yEe),e(yEe,j0r),e(i5,D0r),e(i5,BJ),e(BJ,G0r),e(i5,O0r),e(ie,V0r),e(ie,d5),e(d5,xEe),e(xEe,X0r),e(d5,z0r),e(d5,IJ),e(IJ,Q0r),e(d5,W0r),e(ie,H0r),e(ie,c5),e(c5,$Ee),e($Ee,U0r),e(c5,J0r),e(c5,NJ),e(NJ,Y0r),e(c5,K0r),e(ie,Z0r),e(ie,m5),e(m5,kEe),e(kEe,ewr),e(m5,owr),e(m5,qJ),e(qJ,rwr),e(m5,twr),e(Sr,awr),M(f5,Sr,null),b(m,DVe,_),b(m,_c,_),e(_c,g5),e(g5,SEe),M(U9,SEe,null),e(_c,nwr),e(_c,REe),e(REe,swr),b(m,GVe,_),b(m,nr,_),M(J9,nr,null),e(nr,lwr),e(nr,bc),e(bc,iwr),e(bc,jJ),e(jJ,dwr),e(bc,cwr),e(bc,DJ),e(DJ,mwr),e(bc,fwr),e(nr,gwr),e(nr,Y9),e(Y9,hwr),e(Y9,PEe),e(PEe,uwr),e(Y9,pwr),e(nr,_wr),e(nr,Bt),M(K9,Bt,null),e(Bt,bwr),e(Bt,BEe),e(BEe,vwr),e(Bt,Fwr),e(Bt,vc),e(vc,Twr),e(vc,IEe),e(IEe,Mwr),e(vc,Ewr),e(vc,GJ),e(GJ,Cwr),e(vc,wwr),e(Bt,Awr),M(h5,Bt,null),e(nr,Lwr),e(nr,Rr),M(Z9,Rr,null),e(Rr,ywr),e(Rr,NEe),e(NEe,xwr),e(Rr,$wr),e(Rr,mn),e(mn,kwr),e(mn,qEe),e(qEe,Swr),e(mn,Rwr),e(mn,jEe),e(jEe,Pwr),e(mn,Bwr),e(mn,DEe),e(DEe,Iwr),e(mn,Nwr),e(Rr,qwr),e(Rr,ye),e(ye,u5),e(u5,GEe),e(GEe,jwr),e(u5,Dwr),e(u5,OJ),e(OJ,Gwr),e(u5,Owr),e(ye,Vwr),e(ye,p5),e(p5,OEe),e(OEe,Xwr),e(p5,zwr),e(p5,VJ),e(VJ,Qwr),e(p5,Wwr),e(ye,Hwr),e(ye,_5),e(_5,VEe),e(VEe,Uwr),e(_5,Jwr),e(_5,XJ),e(XJ,Ywr),e(_5,Kwr),e(ye,Zwr),e(ye,b5),e(b5,XEe),e(XEe,eAr),e(b5,oAr),e(b5,zJ),e(zJ,rAr),e(b5,tAr),e(ye,aAr),e(ye,v5),e(v5,zEe),e(zEe,nAr),e(v5,sAr),e(v5,QJ),e(QJ,lAr),e(v5,iAr),e(ye,dAr),e(ye,F5),e(F5,QEe),e(QEe,cAr),e(F5,mAr),e(F5,WJ),e(WJ,fAr),e(F5,gAr),e(ye,hAr),e(ye,T5),e(T5,WEe),e(WEe,uAr),e(T5,pAr),e(T5,HJ),e(HJ,_Ar),e(T5,bAr),e(ye,vAr),e(ye,M5),e(M5,HEe),e(HEe,FAr),e(M5,TAr),e(M5,UJ),e(UJ,MAr),e(M5,EAr),e(ye,CAr),e(ye,E5),e(E5,UEe),e(UEe,wAr),e(E5,AAr),e(E5,JJ),e(JJ,LAr),e(E5,yAr),e(ye,xAr),e(ye,C5),e(C5,JEe),e(JEe,$Ar),e(C5,kAr),e(C5,YJ),e(YJ,SAr),e(C5,RAr),e(Rr,PAr),M(w5,Rr,null),b(m,OVe,_),b(m,Fc,_),e(Fc,A5),e(A5,YEe),M(ex,YEe,null),e(Fc,BAr),e(Fc,KEe),e(KEe,IAr),b(m,VVe,_),b(m,sr,_),M(ox,sr,null),e(sr,NAr),e(sr,Tc),e(Tc,qAr),e(Tc,KJ),e(KJ,jAr),e(Tc,DAr),e(Tc,ZJ),e(ZJ,GAr),e(Tc,OAr),e(sr,VAr),e(sr,rx),e(rx,XAr),e(rx,ZEe),e(ZEe,zAr),e(rx,QAr),e(sr,WAr),e(sr,It),M(tx,It,null),e(It,HAr),e(It,e4e),e(e4e,UAr),e(It,JAr),e(It,Mc),e(Mc,YAr),e(Mc,o4e),e(o4e,KAr),e(Mc,ZAr),e(Mc,eY),e(eY,e6r),e(Mc,o6r),e(It,r6r),M(L5,It,null),e(sr,t6r),e(sr,Pr),M(ax,Pr,null),e(Pr,a6r),e(Pr,r4e),e(r4e,n6r),e(Pr,s6r),e(Pr,fn),e(fn,l6r),e(fn,t4e),e(t4e,i6r),e(fn,d6r),e(fn,a4e),e(a4e,c6r),e(fn,m6r),e(fn,n4e),e(n4e,f6r),e(fn,g6r),e(Pr,h6r),e(Pr,te),e(te,y5),e(y5,s4e),e(s4e,u6r),e(y5,p6r),e(y5,oY),e(oY,_6r),e(y5,b6r),e(te,v6r),e(te,x5),e(x5,l4e),e(l4e,F6r),e(x5,T6r),e(x5,rY),e(rY,M6r),e(x5,E6r),e(te,C6r),e(te,$5),e($5,i4e),e(i4e,w6r),e($5,A6r),e($5,tY),e(tY,L6r),e($5,y6r),e(te,x6r),e(te,k5),e(k5,d4e),e(d4e,$6r),e(k5,k6r),e(k5,aY),e(aY,S6r),e(k5,R6r),e(te,P6r),e(te,S5),e(S5,c4e),e(c4e,B6r),e(S5,I6r),e(S5,nY),e(nY,N6r),e(S5,q6r),e(te,j6r),e(te,R5),e(R5,m4e),e(m4e,D6r),e(R5,G6r),e(R5,sY),e(sY,O6r),e(R5,V6r),e(te,X6r),e(te,P5),e(P5,f4e),e(f4e,z6r),e(P5,Q6r),e(P5,lY),e(lY,W6r),e(P5,H6r),e(te,U6r),e(te,B5),e(B5,g4e),e(g4e,J6r),e(B5,Y6r),e(B5,iY),e(iY,K6r),e(B5,Z6r),e(te,eLr),e(te,I5),e(I5,h4e),e(h4e,oLr),e(I5,rLr),e(I5,dY),e(dY,tLr),e(I5,aLr),e(te,nLr),e(te,N5),e(N5,u4e),e(u4e,sLr),e(N5,lLr),e(N5,cY),e(cY,iLr),e(N5,dLr),e(te,cLr),e(te,q5),e(q5,p4e),e(p4e,mLr),e(q5,fLr),e(q5,mY),e(mY,gLr),e(q5,hLr),e(te,uLr),e(te,j5),e(j5,_4e),e(_4e,pLr),e(j5,_Lr),e(j5,fY),e(fY,bLr),e(j5,vLr),e(te,FLr),e(te,D5),e(D5,b4e),e(b4e,TLr),e(D5,MLr),e(D5,gY),e(gY,ELr),e(D5,CLr),e(te,wLr),e(te,G5),e(G5,v4e),e(v4e,ALr),e(G5,LLr),e(G5,hY),e(hY,yLr),e(G5,xLr),e(te,$Lr),e(te,O5),e(O5,F4e),e(F4e,kLr),e(O5,SLr),e(O5,uY),e(uY,RLr),e(O5,PLr),e(te,BLr),e(te,V5),e(V5,T4e),e(T4e,ILr),e(V5,NLr),e(V5,pY),e(pY,qLr),e(V5,jLr),e(te,DLr),e(te,X5),e(X5,M4e),e(M4e,GLr),e(X5,OLr),e(X5,_Y),e(_Y,VLr),e(X5,XLr),e(te,zLr),e(te,z5),e(z5,E4e),e(E4e,QLr),e(z5,WLr),e(z5,bY),e(bY,HLr),e(z5,ULr),e(te,JLr),e(te,Q5),e(Q5,C4e),e(C4e,YLr),e(Q5,KLr),e(Q5,vY),e(vY,ZLr),e(Q5,e7r),e(te,o7r),e(te,W5),e(W5,w4e),e(w4e,r7r),e(W5,t7r),e(W5,FY),e(FY,a7r),e(W5,n7r),e(te,s7r),e(te,H5),e(H5,A4e),e(A4e,l7r),e(H5,i7r),e(H5,TY),e(TY,d7r),e(H5,c7r),e(te,m7r),e(te,U5),e(U5,L4e),e(L4e,f7r),e(U5,g7r),e(U5,MY),e(MY,h7r),e(U5,u7r),e(te,p7r),e(te,J5),e(J5,y4e),e(y4e,_7r),e(J5,b7r),e(J5,EY),e(EY,v7r),e(J5,F7r),e(te,T7r),e(te,Y5),e(Y5,x4e),e(x4e,M7r),e(Y5,E7r),e(Y5,CY),e(CY,C7r),e(Y5,w7r),e(te,A7r),e(te,K5),e(K5,$4e),e($4e,L7r),e(K5,y7r),e(K5,wY),e(wY,x7r),e(K5,$7r),e(te,k7r),e(te,Z5),e(Z5,k4e),e(k4e,S7r),e(Z5,R7r),e(Z5,AY),e(AY,P7r),e(Z5,B7r),e(Pr,I7r),M(e3,Pr,null),b(m,XVe,_),b(m,Ec,_),e(Ec,o3),e(o3,S4e),M(nx,S4e,null),e(Ec,N7r),e(Ec,R4e),e(R4e,q7r),b(m,zVe,_),b(m,lr,_),M(sx,lr,null),e(lr,j7r),e(lr,Cc),e(Cc,D7r),e(Cc,LY),e(LY,G7r),e(Cc,O7r),e(Cc,yY),e(yY,V7r),e(Cc,X7r),e(lr,z7r),e(lr,lx),e(lx,Q7r),e(lx,P4e),e(P4e,W7r),e(lx,H7r),e(lr,U7r),e(lr,Nt),M(ix,Nt,null),e(Nt,J7r),e(Nt,B4e),e(B4e,Y7r),e(Nt,K7r),e(Nt,wc),e(wc,Z7r),e(wc,I4e),e(I4e,eyr),e(wc,oyr),e(wc,xY),e(xY,ryr),e(wc,tyr),e(Nt,ayr),M(r3,Nt,null),e(lr,nyr),e(lr,Br),M(dx,Br,null),e(Br,syr),e(Br,N4e),e(N4e,lyr),e(Br,iyr),e(Br,gn),e(gn,dyr),e(gn,q4e),e(q4e,cyr),e(gn,myr),e(gn,j4e),e(j4e,fyr),e(gn,gyr),e(gn,D4e),e(D4e,hyr),e(gn,uyr),e(Br,pyr),e(Br,pe),e(pe,t3),e(t3,G4e),e(G4e,_yr),e(t3,byr),e(t3,$Y),e($Y,vyr),e(t3,Fyr),e(pe,Tyr),e(pe,a3),e(a3,O4e),e(O4e,Myr),e(a3,Eyr),e(a3,kY),e(kY,Cyr),e(a3,wyr),e(pe,Ayr),e(pe,n3),e(n3,V4e),e(V4e,Lyr),e(n3,yyr),e(n3,SY),e(SY,xyr),e(n3,$yr),e(pe,kyr),e(pe,s3),e(s3,X4e),e(X4e,Syr),e(s3,Ryr),e(s3,RY),e(RY,Pyr),e(s3,Byr),e(pe,Iyr),e(pe,l3),e(l3,z4e),e(z4e,Nyr),e(l3,qyr),e(l3,PY),e(PY,jyr),e(l3,Dyr),e(pe,Gyr),e(pe,i3),e(i3,Q4e),e(Q4e,Oyr),e(i3,Vyr),e(i3,BY),e(BY,Xyr),e(i3,zyr),e(pe,Qyr),e(pe,d3),e(d3,W4e),e(W4e,Wyr),e(d3,Hyr),e(d3,IY),e(IY,Uyr),e(d3,Jyr),e(pe,Yyr),e(pe,c3),e(c3,H4e),e(H4e,Kyr),e(c3,Zyr),e(c3,NY),e(NY,e8r),e(c3,o8r),e(pe,r8r),e(pe,m3),e(m3,U4e),e(U4e,t8r),e(m3,a8r),e(m3,qY),e(qY,n8r),e(m3,s8r),e(pe,l8r),e(pe,f3),e(f3,J4e),e(J4e,i8r),e(f3,d8r),e(f3,jY),e(jY,c8r),e(f3,m8r),e(pe,f8r),e(pe,g3),e(g3,Y4e),e(Y4e,g8r),e(g3,h8r),e(g3,DY),e(DY,u8r),e(g3,p8r),e(pe,_8r),e(pe,h3),e(h3,K4e),e(K4e,b8r),e(h3,v8r),e(h3,GY),e(GY,F8r),e(h3,T8r),e(pe,M8r),e(pe,u3),e(u3,Z4e),e(Z4e,E8r),e(u3,C8r),e(u3,OY),e(OY,w8r),e(u3,A8r),e(pe,L8r),e(pe,p3),e(p3,eCe),e(eCe,y8r),e(p3,x8r),e(p3,VY),e(VY,$8r),e(p3,k8r),e(pe,S8r),e(pe,_3),e(_3,oCe),e(oCe,R8r),e(_3,P8r),e(_3,XY),e(XY,B8r),e(_3,I8r),e(pe,N8r),e(pe,b3),e(b3,rCe),e(rCe,q8r),e(b3,j8r),e(b3,zY),e(zY,D8r),e(b3,G8r),e(pe,O8r),e(pe,v3),e(v3,tCe),e(tCe,V8r),e(v3,X8r),e(v3,QY),e(QY,z8r),e(v3,Q8r),e(Br,W8r),M(F3,Br,null),b(m,QVe,_),b(m,Ac,_),e(Ac,T3),e(T3,aCe),M(cx,aCe,null),e(Ac,H8r),e(Ac,nCe),e(nCe,U8r),b(m,WVe,_),b(m,ir,_),M(mx,ir,null),e(ir,J8r),e(ir,Lc),e(Lc,Y8r),e(Lc,WY),e(WY,K8r),e(Lc,Z8r),e(Lc,HY),e(HY,e9r),e(Lc,o9r),e(ir,r9r),e(ir,fx),e(fx,t9r),e(fx,sCe),e(sCe,a9r),e(fx,n9r),e(ir,s9r),e(ir,qt),M(gx,qt,null),e(qt,l9r),e(qt,lCe),e(lCe,i9r),e(qt,d9r),e(qt,yc),e(yc,c9r),e(yc,iCe),e(iCe,m9r),e(yc,f9r),e(yc,UY),e(UY,g9r),e(yc,h9r),e(qt,u9r),M(M3,qt,null),e(ir,p9r),e(ir,Ir),M(hx,Ir,null),e(Ir,_9r),e(Ir,dCe),e(dCe,b9r),e(Ir,v9r),e(Ir,hn),e(hn,F9r),e(hn,cCe),e(cCe,T9r),e(hn,M9r),e(hn,mCe),e(mCe,E9r),e(hn,C9r),e(hn,fCe),e(fCe,w9r),e(hn,A9r),e(Ir,L9r),e(Ir,ux),e(ux,E3),e(E3,gCe),e(gCe,y9r),e(E3,x9r),e(E3,JY),e(JY,$9r),e(E3,k9r),e(ux,S9r),e(ux,C3),e(C3,hCe),e(hCe,R9r),e(C3,P9r),e(C3,YY),e(YY,B9r),e(C3,I9r),e(Ir,N9r),M(w3,Ir,null),b(m,HVe,_),b(m,xc,_),e(xc,A3),e(A3,uCe),M(px,uCe,null),e(xc,q9r),e(xc,pCe),e(pCe,j9r),b(m,UVe,_),b(m,dr,_),M(_x,dr,null),e(dr,D9r),e(dr,$c),e($c,G9r),e($c,KY),e(KY,O9r),e($c,V9r),e($c,ZY),e(ZY,X9r),e($c,z9r),e(dr,Q9r),e(dr,bx),e(bx,W9r),e(bx,_Ce),e(_Ce,H9r),e(bx,U9r),e(dr,J9r),e(dr,jt),M(vx,jt,null),e(jt,Y9r),e(jt,bCe),e(bCe,K9r),e(jt,Z9r),e(jt,kc),e(kc,exr),e(kc,vCe),e(vCe,oxr),e(kc,rxr),e(kc,eK),e(eK,txr),e(kc,axr),e(jt,nxr),M(L3,jt,null),e(dr,sxr),e(dr,Nr),M(Fx,Nr,null),e(Nr,lxr),e(Nr,FCe),e(FCe,ixr),e(Nr,dxr),e(Nr,un),e(un,cxr),e(un,TCe),e(TCe,mxr),e(un,fxr),e(un,MCe),e(MCe,gxr),e(un,hxr),e(un,ECe),e(ECe,uxr),e(un,pxr),e(Nr,_xr),e(Nr,CCe),e(CCe,y3),e(y3,wCe),e(wCe,bxr),e(y3,vxr),e(y3,oK),e(oK,Fxr),e(y3,Txr),e(Nr,Mxr),M(x3,Nr,null),b(m,JVe,_),b(m,Sc,_),e(Sc,$3),e($3,ACe),M(Tx,ACe,null),e(Sc,Exr),e(Sc,LCe),e(LCe,Cxr),b(m,YVe,_),b(m,cr,_),M(Mx,cr,null),e(cr,wxr),e(cr,Rc),e(Rc,Axr),e(Rc,rK),e(rK,Lxr),e(Rc,yxr),e(Rc,tK),e(tK,xxr),e(Rc,$xr),e(cr,kxr),e(cr,Ex),e(Ex,Sxr),e(Ex,yCe),e(yCe,Rxr),e(Ex,Pxr),e(cr,Bxr),e(cr,Dt),M(Cx,Dt,null),e(Dt,Ixr),e(Dt,xCe),e(xCe,Nxr),e(Dt,qxr),e(Dt,Pc),e(Pc,jxr),e(Pc,$Ce),e($Ce,Dxr),e(Pc,Gxr),e(Pc,aK),e(aK,Oxr),e(Pc,Vxr),e(Dt,Xxr),M(k3,Dt,null),e(cr,zxr),e(cr,qr),M(wx,qr,null),e(qr,Qxr),e(qr,kCe),e(kCe,Wxr),e(qr,Hxr),e(qr,pn),e(pn,Uxr),e(pn,SCe),e(SCe,Jxr),e(pn,Yxr),e(pn,RCe),e(RCe,Kxr),e(pn,Zxr),e(pn,PCe),e(PCe,e$r),e(pn,o$r),e(qr,r$r),e(qr,de),e(de,S3),e(S3,BCe),e(BCe,t$r),e(S3,a$r),e(S3,nK),e(nK,n$r),e(S3,s$r),e(de,l$r),e(de,R3),e(R3,ICe),e(ICe,i$r),e(R3,d$r),e(R3,sK),e(sK,c$r),e(R3,m$r),e(de,f$r),e(de,P3),e(P3,NCe),e(NCe,g$r),e(P3,h$r),e(P3,lK),e(lK,u$r),e(P3,p$r),e(de,_$r),e(de,B3),e(B3,qCe),e(qCe,b$r),e(B3,v$r),e(B3,iK),e(iK,F$r),e(B3,T$r),e(de,M$r),e(de,I3),e(I3,jCe),e(jCe,E$r),e(I3,C$r),e(I3,dK),e(dK,w$r),e(I3,A$r),e(de,L$r),e(de,N3),e(N3,DCe),e(DCe,y$r),e(N3,x$r),e(N3,cK),e(cK,$$r),e(N3,k$r),e(de,S$r),e(de,q3),e(q3,GCe),e(GCe,R$r),e(q3,P$r),e(q3,mK),e(mK,B$r),e(q3,I$r),e(de,N$r),e(de,j3),e(j3,OCe),e(OCe,q$r),e(j3,j$r),e(j3,fK),e(fK,D$r),e(j3,G$r),e(de,O$r),e(de,D3),e(D3,VCe),e(VCe,V$r),e(D3,X$r),e(D3,gK),e(gK,z$r),e(D3,Q$r),e(de,W$r),e(de,G3),e(G3,XCe),e(XCe,H$r),e(G3,U$r),e(G3,hK),e(hK,J$r),e(G3,Y$r),e(de,K$r),e(de,O3),e(O3,zCe),e(zCe,Z$r),e(O3,ekr),e(O3,uK),e(uK,okr),e(O3,rkr),e(de,tkr),e(de,V3),e(V3,QCe),e(QCe,akr),e(V3,nkr),e(V3,pK),e(pK,skr),e(V3,lkr),e(de,ikr),e(de,X3),e(X3,WCe),e(WCe,dkr),e(X3,ckr),e(X3,_K),e(_K,mkr),e(X3,fkr),e(de,gkr),e(de,z3),e(z3,HCe),e(HCe,hkr),e(z3,ukr),e(z3,bK),e(bK,pkr),e(z3,_kr),e(de,bkr),e(de,Q3),e(Q3,UCe),e(UCe,vkr),e(Q3,Fkr),e(Q3,vK),e(vK,Tkr),e(Q3,Mkr),e(de,Ekr),e(de,W3),e(W3,JCe),e(JCe,Ckr),e(W3,wkr),e(W3,FK),e(FK,Akr),e(W3,Lkr),e(de,ykr),e(de,H3),e(H3,YCe),e(YCe,xkr),e(H3,$kr),e(H3,TK),e(TK,kkr),e(H3,Skr),e(de,Rkr),e(de,U3),e(U3,KCe),e(KCe,Pkr),e(U3,Bkr),e(U3,MK),e(MK,Ikr),e(U3,Nkr),e(de,qkr),e(de,J3),e(J3,ZCe),e(ZCe,jkr),e(J3,Dkr),e(J3,EK),e(EK,Gkr),e(J3,Okr),e(de,Vkr),e(de,Y3),e(Y3,e5e),e(e5e,Xkr),e(Y3,zkr),e(Y3,CK),e(CK,Qkr),e(Y3,Wkr),e(qr,Hkr),M(K3,qr,null),b(m,KVe,_),b(m,Bc,_),e(Bc,Z3),e(Z3,o5e),M(Ax,o5e,null),e(Bc,Ukr),e(Bc,r5e),e(r5e,Jkr),b(m,ZVe,_),b(m,mr,_),M(Lx,mr,null),e(mr,Ykr),e(mr,Ic),e(Ic,Kkr),e(Ic,wK),e(wK,Zkr),e(Ic,eSr),e(Ic,AK),e(AK,oSr),e(Ic,rSr),e(mr,tSr),e(mr,yx),e(yx,aSr),e(yx,t5e),e(t5e,nSr),e(yx,sSr),e(mr,lSr),e(mr,Gt),M(xx,Gt,null),e(Gt,iSr),e(Gt,a5e),e(a5e,dSr),e(Gt,cSr),e(Gt,Nc),e(Nc,mSr),e(Nc,n5e),e(n5e,fSr),e(Nc,gSr),e(Nc,LK),e(LK,hSr),e(Nc,uSr),e(Gt,pSr),M(e0,Gt,null),e(mr,_Sr),e(mr,jr),M($x,jr,null),e(jr,bSr),e(jr,s5e),e(s5e,vSr),e(jr,FSr),e(jr,_n),e(_n,TSr),e(_n,l5e),e(l5e,MSr),e(_n,ESr),e(_n,i5e),e(i5e,CSr),e(_n,wSr),e(_n,d5e),e(d5e,ASr),e(_n,LSr),e(jr,ySr),e(jr,ce),e(ce,o0),e(o0,c5e),e(c5e,xSr),e(o0,$Sr),e(o0,yK),e(yK,kSr),e(o0,SSr),e(ce,RSr),e(ce,r0),e(r0,m5e),e(m5e,PSr),e(r0,BSr),e(r0,xK),e(xK,ISr),e(r0,NSr),e(ce,qSr),e(ce,t0),e(t0,f5e),e(f5e,jSr),e(t0,DSr),e(t0,$K),e($K,GSr),e(t0,OSr),e(ce,VSr),e(ce,a0),e(a0,g5e),e(g5e,XSr),e(a0,zSr),e(a0,kK),e(kK,QSr),e(a0,WSr),e(ce,HSr),e(ce,n0),e(n0,h5e),e(h5e,USr),e(n0,JSr),e(n0,SK),e(SK,YSr),e(n0,KSr),e(ce,ZSr),e(ce,s0),e(s0,u5e),e(u5e,eRr),e(s0,oRr),e(s0,RK),e(RK,rRr),e(s0,tRr),e(ce,aRr),e(ce,l0),e(l0,p5e),e(p5e,nRr),e(l0,sRr),e(l0,PK),e(PK,lRr),e(l0,iRr),e(ce,dRr),e(ce,i0),e(i0,_5e),e(_5e,cRr),e(i0,mRr),e(i0,BK),e(BK,fRr),e(i0,gRr),e(ce,hRr),e(ce,d0),e(d0,b5e),e(b5e,uRr),e(d0,pRr),e(d0,IK),e(IK,_Rr),e(d0,bRr),e(ce,vRr),e(ce,c0),e(c0,v5e),e(v5e,FRr),e(c0,TRr),e(c0,NK),e(NK,MRr),e(c0,ERr),e(ce,CRr),e(ce,m0),e(m0,F5e),e(F5e,wRr),e(m0,ARr),e(m0,qK),e(qK,LRr),e(m0,yRr),e(ce,xRr),e(ce,f0),e(f0,T5e),e(T5e,$Rr),e(f0,kRr),e(f0,jK),e(jK,SRr),e(f0,RRr),e(ce,PRr),e(ce,g0),e(g0,M5e),e(M5e,BRr),e(g0,IRr),e(g0,DK),e(DK,NRr),e(g0,qRr),e(ce,jRr),e(ce,h0),e(h0,E5e),e(E5e,DRr),e(h0,GRr),e(h0,GK),e(GK,ORr),e(h0,VRr),e(ce,XRr),e(ce,u0),e(u0,C5e),e(C5e,zRr),e(u0,QRr),e(u0,OK),e(OK,WRr),e(u0,HRr),e(ce,URr),e(ce,p0),e(p0,w5e),e(w5e,JRr),e(p0,YRr),e(p0,VK),e(VK,KRr),e(p0,ZRr),e(ce,ePr),e(ce,_0),e(_0,A5e),e(A5e,oPr),e(_0,rPr),e(_0,XK),e(XK,tPr),e(_0,aPr),e(ce,nPr),e(ce,b0),e(b0,L5e),e(L5e,sPr),e(b0,lPr),e(b0,zK),e(zK,iPr),e(b0,dPr),e(ce,cPr),e(ce,v0),e(v0,y5e),e(y5e,mPr),e(v0,fPr),e(v0,QK),e(QK,gPr),e(v0,hPr),e(ce,uPr),e(ce,F0),e(F0,x5e),e(x5e,pPr),e(F0,_Pr),e(F0,WK),e(WK,bPr),e(F0,vPr),e(jr,FPr),M(T0,jr,null),b(m,eXe,_),b(m,qc,_),e(qc,M0),e(M0,$5e),M(kx,$5e,null),e(qc,TPr),e(qc,k5e),e(k5e,MPr),b(m,oXe,_),b(m,fr,_),M(Sx,fr,null),e(fr,EPr),e(fr,jc),e(jc,CPr),e(jc,HK),e(HK,wPr),e(jc,APr),e(jc,UK),e(UK,LPr),e(jc,yPr),e(fr,xPr),e(fr,Rx),e(Rx,$Pr),e(Rx,S5e),e(S5e,kPr),e(Rx,SPr),e(fr,RPr),e(fr,Ot),M(Px,Ot,null),e(Ot,PPr),e(Ot,R5e),e(R5e,BPr),e(Ot,IPr),e(Ot,Dc),e(Dc,NPr),e(Dc,P5e),e(P5e,qPr),e(Dc,jPr),e(Dc,JK),e(JK,DPr),e(Dc,GPr),e(Ot,OPr),M(E0,Ot,null),e(fr,VPr),e(fr,Dr),M(Bx,Dr,null),e(Dr,XPr),e(Dr,B5e),e(B5e,zPr),e(Dr,QPr),e(Dr,bn),e(bn,WPr),e(bn,I5e),e(I5e,HPr),e(bn,UPr),e(bn,N5e),e(N5e,JPr),e(bn,YPr),e(bn,q5e),e(q5e,KPr),e(bn,ZPr),e(Dr,eBr),e(Dr,j5e),e(j5e,C0),e(C0,D5e),e(D5e,oBr),e(C0,rBr),e(C0,YK),e(YK,tBr),e(C0,aBr),e(Dr,nBr),M(w0,Dr,null),b(m,rXe,_),b(m,Gc,_),e(Gc,A0),e(A0,G5e),M(Ix,G5e,null),e(Gc,sBr),e(Gc,O5e),e(O5e,lBr),b(m,tXe,_),b(m,gr,_),M(Nx,gr,null),e(gr,iBr),e(gr,Oc),e(Oc,dBr),e(Oc,KK),e(KK,cBr),e(Oc,mBr),e(Oc,ZK),e(ZK,fBr),e(Oc,gBr),e(gr,hBr),e(gr,qx),e(qx,uBr),e(qx,V5e),e(V5e,pBr),e(qx,_Br),e(gr,bBr),e(gr,Vt),M(jx,Vt,null),e(Vt,vBr),e(Vt,X5e),e(X5e,FBr),e(Vt,TBr),e(Vt,Vc),e(Vc,MBr),e(Vc,z5e),e(z5e,EBr),e(Vc,CBr),e(Vc,eZ),e(eZ,wBr),e(Vc,ABr),e(Vt,LBr),M(L0,Vt,null),e(gr,yBr),e(gr,Gr),M(Dx,Gr,null),e(Gr,xBr),e(Gr,Q5e),e(Q5e,$Br),e(Gr,kBr),e(Gr,vn),e(vn,SBr),e(vn,W5e),e(W5e,RBr),e(vn,PBr),e(vn,H5e),e(H5e,BBr),e(vn,IBr),e(vn,U5e),e(U5e,NBr),e(vn,qBr),e(Gr,jBr),e(Gr,J5e),e(J5e,y0),e(y0,Y5e),e(Y5e,DBr),e(y0,GBr),e(y0,oZ),e(oZ,OBr),e(y0,VBr),e(Gr,XBr),M(x0,Gr,null),b(m,aXe,_),b(m,Xc,_),e(Xc,$0),e($0,K5e),M(Gx,K5e,null),e(Xc,zBr),e(Xc,Z5e),e(Z5e,QBr),b(m,nXe,_),b(m,hr,_),M(Ox,hr,null),e(hr,WBr),e(hr,zc),e(zc,HBr),e(zc,rZ),e(rZ,UBr),e(zc,JBr),e(zc,tZ),e(tZ,YBr),e(zc,KBr),e(hr,ZBr),e(hr,Vx),e(Vx,eIr),e(Vx,e3e),e(e3e,oIr),e(Vx,rIr),e(hr,tIr),e(hr,Xt),M(Xx,Xt,null),e(Xt,aIr),e(Xt,o3e),e(o3e,nIr),e(Xt,sIr),e(Xt,Qc),e(Qc,lIr),e(Qc,r3e),e(r3e,iIr),e(Qc,dIr),e(Qc,aZ),e(aZ,cIr),e(Qc,mIr),e(Xt,fIr),M(k0,Xt,null),e(hr,gIr),e(hr,Or),M(zx,Or,null),e(Or,hIr),e(Or,t3e),e(t3e,uIr),e(Or,pIr),e(Or,Fn),e(Fn,_Ir),e(Fn,a3e),e(a3e,bIr),e(Fn,vIr),e(Fn,n3e),e(n3e,FIr),e(Fn,TIr),e(Fn,s3e),e(s3e,MIr),e(Fn,EIr),e(Or,CIr),e(Or,oe),e(oe,S0),e(S0,l3e),e(l3e,wIr),e(S0,AIr),e(S0,nZ),e(nZ,LIr),e(S0,yIr),e(oe,xIr),e(oe,R0),e(R0,i3e),e(i3e,$Ir),e(R0,kIr),e(R0,sZ),e(sZ,SIr),e(R0,RIr),e(oe,PIr),e(oe,P0),e(P0,d3e),e(d3e,BIr),e(P0,IIr),e(P0,lZ),e(lZ,NIr),e(P0,qIr),e(oe,jIr),e(oe,B0),e(B0,c3e),e(c3e,DIr),e(B0,GIr),e(B0,iZ),e(iZ,OIr),e(B0,VIr),e(oe,XIr),e(oe,I0),e(I0,m3e),e(m3e,zIr),e(I0,QIr),e(I0,dZ),e(dZ,WIr),e(I0,HIr),e(oe,UIr),e(oe,N0),e(N0,f3e),e(f3e,JIr),e(N0,YIr),e(N0,cZ),e(cZ,KIr),e(N0,ZIr),e(oe,eNr),e(oe,q0),e(q0,g3e),e(g3e,oNr),e(q0,rNr),e(q0,mZ),e(mZ,tNr),e(q0,aNr),e(oe,nNr),e(oe,j0),e(j0,h3e),e(h3e,sNr),e(j0,lNr),e(j0,fZ),e(fZ,iNr),e(j0,dNr),e(oe,cNr),e(oe,D0),e(D0,u3e),e(u3e,mNr),e(D0,fNr),e(D0,gZ),e(gZ,gNr),e(D0,hNr),e(oe,uNr),e(oe,G0),e(G0,p3e),e(p3e,pNr),e(G0,_Nr),e(G0,hZ),e(hZ,bNr),e(G0,vNr),e(oe,FNr),e(oe,O0),e(O0,_3e),e(_3e,TNr),e(O0,MNr),e(O0,uZ),e(uZ,ENr),e(O0,CNr),e(oe,wNr),e(oe,V0),e(V0,b3e),e(b3e,ANr),e(V0,LNr),e(V0,pZ),e(pZ,yNr),e(V0,xNr),e(oe,$Nr),e(oe,X0),e(X0,v3e),e(v3e,kNr),e(X0,SNr),e(X0,_Z),e(_Z,RNr),e(X0,PNr),e(oe,BNr),e(oe,z0),e(z0,F3e),e(F3e,INr),e(z0,NNr),e(z0,bZ),e(bZ,qNr),e(z0,jNr),e(oe,DNr),e(oe,Q0),e(Q0,T3e),e(T3e,GNr),e(Q0,ONr),e(Q0,vZ),e(vZ,VNr),e(Q0,XNr),e(oe,zNr),e(oe,W0),e(W0,M3e),e(M3e,QNr),e(W0,WNr),e(W0,FZ),e(FZ,HNr),e(W0,UNr),e(oe,JNr),e(oe,H0),e(H0,E3e),e(E3e,YNr),e(H0,KNr),e(H0,TZ),e(TZ,ZNr),e(H0,eqr),e(oe,oqr),e(oe,U0),e(U0,C3e),e(C3e,rqr),e(U0,tqr),e(U0,MZ),e(MZ,aqr),e(U0,nqr),e(oe,sqr),e(oe,J0),e(J0,w3e),e(w3e,lqr),e(J0,iqr),e(J0,EZ),e(EZ,dqr),e(J0,cqr),e(oe,mqr),e(oe,Y0),e(Y0,A3e),e(A3e,fqr),e(Y0,gqr),e(Y0,CZ),e(CZ,hqr),e(Y0,uqr),e(oe,pqr),e(oe,K0),e(K0,L3e),e(L3e,_qr),e(K0,bqr),e(K0,wZ),e(wZ,vqr),e(K0,Fqr),e(oe,Tqr),e(oe,Z0),e(Z0,y3e),e(y3e,Mqr),e(Z0,Eqr),e(Z0,AZ),e(AZ,Cqr),e(Z0,wqr),e(oe,Aqr),e(oe,ew),e(ew,x3e),e(x3e,Lqr),e(ew,yqr),e(ew,LZ),e(LZ,xqr),e(ew,$qr),e(oe,kqr),e(oe,ow),e(ow,$3e),e($3e,Sqr),e(ow,Rqr),e(ow,yZ),e(yZ,Pqr),e(ow,Bqr),e(oe,Iqr),e(oe,rw),e(rw,k3e),e(k3e,Nqr),e(rw,qqr),e(rw,xZ),e(xZ,jqr),e(rw,Dqr),e(oe,Gqr),e(oe,tw),e(tw,S3e),e(S3e,Oqr),e(tw,Vqr),e(tw,$Z),e($Z,Xqr),e(tw,zqr),e(oe,Qqr),e(oe,aw),e(aw,R3e),e(R3e,Wqr),e(aw,Hqr),e(aw,kZ),e(kZ,Uqr),e(aw,Jqr),e(Or,Yqr),M(nw,Or,null),b(m,sXe,_),b(m,Wc,_),e(Wc,sw),e(sw,P3e),M(Qx,P3e,null),e(Wc,Kqr),e(Wc,B3e),e(B3e,Zqr),b(m,lXe,_),b(m,ur,_),M(Wx,ur,null),e(ur,ejr),e(ur,Hc),e(Hc,ojr),e(Hc,SZ),e(SZ,rjr),e(Hc,tjr),e(Hc,RZ),e(RZ,ajr),e(Hc,njr),e(ur,sjr),e(ur,Hx),e(Hx,ljr),e(Hx,I3e),e(I3e,ijr),e(Hx,djr),e(ur,cjr),e(ur,zt),M(Ux,zt,null),e(zt,mjr),e(zt,N3e),e(N3e,fjr),e(zt,gjr),e(zt,Uc),e(Uc,hjr),e(Uc,q3e),e(q3e,ujr),e(Uc,pjr),e(Uc,PZ),e(PZ,_jr),e(Uc,bjr),e(zt,vjr),M(lw,zt,null),e(ur,Fjr),e(ur,Vr),M(Jx,Vr,null),e(Vr,Tjr),e(Vr,j3e),e(j3e,Mjr),e(Vr,Ejr),e(Vr,Tn),e(Tn,Cjr),e(Tn,D3e),e(D3e,wjr),e(Tn,Ajr),e(Tn,G3e),e(G3e,Ljr),e(Tn,yjr),e(Tn,O3e),e(O3e,xjr),e(Tn,$jr),e(Vr,kjr),e(Vr,xe),e(xe,iw),e(iw,V3e),e(V3e,Sjr),e(iw,Rjr),e(iw,BZ),e(BZ,Pjr),e(iw,Bjr),e(xe,Ijr),e(xe,dw),e(dw,X3e),e(X3e,Njr),e(dw,qjr),e(dw,IZ),e(IZ,jjr),e(dw,Djr),e(xe,Gjr),e(xe,cw),e(cw,z3e),e(z3e,Ojr),e(cw,Vjr),e(cw,NZ),e(NZ,Xjr),e(cw,zjr),e(xe,Qjr),e(xe,mw),e(mw,Q3e),e(Q3e,Wjr),e(mw,Hjr),e(mw,qZ),e(qZ,Ujr),e(mw,Jjr),e(xe,Yjr),e(xe,fw),e(fw,W3e),e(W3e,Kjr),e(fw,Zjr),e(fw,jZ),e(jZ,eDr),e(fw,oDr),e(xe,rDr),e(xe,gw),e(gw,H3e),e(H3e,tDr),e(gw,aDr),e(gw,DZ),e(DZ,nDr),e(gw,sDr),e(xe,lDr),e(xe,hw),e(hw,U3e),e(U3e,iDr),e(hw,dDr),e(hw,GZ),e(GZ,cDr),e(hw,mDr),e(xe,fDr),e(xe,uw),e(uw,J3e),e(J3e,gDr),e(uw,hDr),e(uw,OZ),e(OZ,uDr),e(uw,pDr),e(xe,_Dr),e(xe,pw),e(pw,Y3e),e(Y3e,bDr),e(pw,vDr),e(pw,VZ),e(VZ,FDr),e(pw,TDr),e(xe,MDr),e(xe,_w),e(_w,K3e),e(K3e,EDr),e(_w,CDr),e(_w,XZ),e(XZ,wDr),e(_w,ADr),e(Vr,LDr),M(bw,Vr,null),b(m,iXe,_),b(m,Jc,_),e(Jc,vw),e(vw,Z3e),M(Yx,Z3e,null),e(Jc,yDr),e(Jc,e0e),e(e0e,xDr),b(m,dXe,_),b(m,pr,_),M(Kx,pr,null),e(pr,$Dr),e(pr,Yc),e(Yc,kDr),e(Yc,zZ),e(zZ,SDr),e(Yc,RDr),e(Yc,QZ),e(QZ,PDr),e(Yc,BDr),e(pr,IDr),e(pr,Zx),e(Zx,NDr),e(Zx,o0e),e(o0e,qDr),e(Zx,jDr),e(pr,DDr),e(pr,Qt),M(e$,Qt,null),e(Qt,GDr),e(Qt,r0e),e(r0e,ODr),e(Qt,VDr),e(Qt,Kc),e(Kc,XDr),e(Kc,t0e),e(t0e,zDr),e(Kc,QDr),e(Kc,WZ),e(WZ,WDr),e(Kc,HDr),e(Qt,UDr),M(Fw,Qt,null),e(pr,JDr),e(pr,Xr),M(o$,Xr,null),e(Xr,YDr),e(Xr,a0e),e(a0e,KDr),e(Xr,ZDr),e(Xr,Mn),e(Mn,eGr),e(Mn,n0e),e(n0e,oGr),e(Mn,rGr),e(Mn,s0e),e(s0e,tGr),e(Mn,aGr),e(Mn,l0e),e(l0e,nGr),e(Mn,sGr),e(Xr,lGr),e(Xr,Ee),e(Ee,Tw),e(Tw,i0e),e(i0e,iGr),e(Tw,dGr),e(Tw,HZ),e(HZ,cGr),e(Tw,mGr),e(Ee,fGr),e(Ee,Mw),e(Mw,d0e),e(d0e,gGr),e(Mw,hGr),e(Mw,UZ),e(UZ,uGr),e(Mw,pGr),e(Ee,_Gr),e(Ee,Ew),e(Ew,c0e),e(c0e,bGr),e(Ew,vGr),e(Ew,JZ),e(JZ,FGr),e(Ew,TGr),e(Ee,MGr),e(Ee,Cw),e(Cw,m0e),e(m0e,EGr),e(Cw,CGr),e(Cw,YZ),e(YZ,wGr),e(Cw,AGr),e(Ee,LGr),e(Ee,ww),e(ww,f0e),e(f0e,yGr),e(ww,xGr),e(ww,KZ),e(KZ,$Gr),e(ww,kGr),e(Ee,SGr),e(Ee,Aw),e(Aw,g0e),e(g0e,RGr),e(Aw,PGr),e(Aw,ZZ),e(ZZ,BGr),e(Aw,IGr),e(Ee,NGr),e(Ee,Lw),e(Lw,h0e),e(h0e,qGr),e(Lw,jGr),e(Lw,eee),e(eee,DGr),e(Lw,GGr),e(Ee,OGr),e(Ee,yw),e(yw,u0e),e(u0e,VGr),e(yw,XGr),e(yw,oee),e(oee,zGr),e(yw,QGr),e(Ee,WGr),e(Ee,xw),e(xw,p0e),e(p0e,HGr),e(xw,UGr),e(xw,ree),e(ree,JGr),e(xw,YGr),e(Ee,KGr),e(Ee,$w),e($w,_0e),e(_0e,ZGr),e($w,eOr),e($w,tee),e(tee,oOr),e($w,rOr),e(Ee,tOr),e(Ee,kw),e(kw,b0e),e(b0e,aOr),e(kw,nOr),e(kw,aee),e(aee,sOr),e(kw,lOr),e(Ee,iOr),e(Ee,Sw),e(Sw,v0e),e(v0e,dOr),e(Sw,cOr),e(Sw,nee),e(nee,mOr),e(Sw,fOr),e(Ee,gOr),e(Ee,Rw),e(Rw,F0e),e(F0e,hOr),e(Rw,uOr),e(Rw,see),e(see,pOr),e(Rw,_Or),e(Xr,bOr),M(Pw,Xr,null),b(m,cXe,_),b(m,Zc,_),e(Zc,Bw),e(Bw,T0e),M(r$,T0e,null),e(Zc,vOr),e(Zc,M0e),e(M0e,FOr),b(m,mXe,_),b(m,_r,_),M(t$,_r,null),e(_r,TOr),e(_r,em),e(em,MOr),e(em,lee),e(lee,EOr),e(em,COr),e(em,iee),e(iee,wOr),e(em,AOr),e(_r,LOr),e(_r,a$),e(a$,yOr),e(a$,E0e),e(E0e,xOr),e(a$,$Or),e(_r,kOr),e(_r,Wt),M(n$,Wt,null),e(Wt,SOr),e(Wt,C0e),e(C0e,ROr),e(Wt,POr),e(Wt,om),e(om,BOr),e(om,w0e),e(w0e,IOr),e(om,NOr),e(om,dee),e(dee,qOr),e(om,jOr),e(Wt,DOr),M(Iw,Wt,null),e(_r,GOr),e(_r,zr),M(s$,zr,null),e(zr,OOr),e(zr,A0e),e(A0e,VOr),e(zr,XOr),e(zr,En),e(En,zOr),e(En,L0e),e(L0e,QOr),e(En,WOr),e(En,y0e),e(y0e,HOr),e(En,UOr),e(En,x0e),e(x0e,JOr),e(En,YOr),e(zr,KOr),e(zr,$e),e($e,Nw),e(Nw,$0e),e($0e,ZOr),e(Nw,eVr),e(Nw,cee),e(cee,oVr),e(Nw,rVr),e($e,tVr),e($e,qw),e(qw,k0e),e(k0e,aVr),e(qw,nVr),e(qw,mee),e(mee,sVr),e(qw,lVr),e($e,iVr),e($e,jw),e(jw,S0e),e(S0e,dVr),e(jw,cVr),e(jw,fee),e(fee,mVr),e(jw,fVr),e($e,gVr),e($e,Dw),e(Dw,R0e),e(R0e,hVr),e(Dw,uVr),e(Dw,gee),e(gee,pVr),e(Dw,_Vr),e($e,bVr),e($e,Gw),e(Gw,P0e),e(P0e,vVr),e(Gw,FVr),e(Gw,hee),e(hee,TVr),e(Gw,MVr),e($e,EVr),e($e,Ow),e(Ow,B0e),e(B0e,CVr),e(Ow,wVr),e(Ow,uee),e(uee,AVr),e(Ow,LVr),e($e,yVr),e($e,Vw),e(Vw,I0e),e(I0e,xVr),e(Vw,$Vr),e(Vw,pee),e(pee,kVr),e(Vw,SVr),e($e,RVr),e($e,Xw),e(Xw,N0e),e(N0e,PVr),e(Xw,BVr),e(Xw,_ee),e(_ee,IVr),e(Xw,NVr),e($e,qVr),e($e,zw),e(zw,q0e),e(q0e,jVr),e(zw,DVr),e(zw,bee),e(bee,GVr),e(zw,OVr),e($e,VVr),e($e,Qw),e(Qw,j0e),e(j0e,XVr),e(Qw,zVr),e(Qw,vee),e(vee,QVr),e(Qw,WVr),e(zr,HVr),M(Ww,zr,null),b(m,fXe,_),b(m,rm,_),e(rm,Hw),e(Hw,D0e),M(l$,D0e,null),e(rm,UVr),e(rm,G0e),e(G0e,JVr),b(m,gXe,_),b(m,br,_),M(i$,br,null),e(br,YVr),e(br,tm),e(tm,KVr),e(tm,Fee),e(Fee,ZVr),e(tm,eXr),e(tm,Tee),e(Tee,oXr),e(tm,rXr),e(br,tXr),e(br,d$),e(d$,aXr),e(d$,O0e),e(O0e,nXr),e(d$,sXr),e(br,lXr),e(br,Ht),M(c$,Ht,null),e(Ht,iXr),e(Ht,V0e),e(V0e,dXr),e(Ht,cXr),e(Ht,am),e(am,mXr),e(am,X0e),e(X0e,fXr),e(am,gXr),e(am,Mee),e(Mee,hXr),e(am,uXr),e(Ht,pXr),M(Uw,Ht,null),e(br,_Xr),e(br,Qr),M(m$,Qr,null),e(Qr,bXr),e(Qr,z0e),e(z0e,vXr),e(Qr,FXr),e(Qr,Cn),e(Cn,TXr),e(Cn,Q0e),e(Q0e,MXr),e(Cn,EXr),e(Cn,W0e),e(W0e,CXr),e(Cn,wXr),e(Cn,H0e),e(H0e,AXr),e(Cn,LXr),e(Qr,yXr),e(Qr,ke),e(ke,Jw),e(Jw,U0e),e(U0e,xXr),e(Jw,$Xr),e(Jw,Eee),e(Eee,kXr),e(Jw,SXr),e(ke,RXr),e(ke,Yw),e(Yw,J0e),e(J0e,PXr),e(Yw,BXr),e(Yw,Cee),e(Cee,IXr),e(Yw,NXr),e(ke,qXr),e(ke,Kw),e(Kw,Y0e),e(Y0e,jXr),e(Kw,DXr),e(Kw,wee),e(wee,GXr),e(Kw,OXr),e(ke,VXr),e(ke,Zw),e(Zw,K0e),e(K0e,XXr),e(Zw,zXr),e(Zw,Aee),e(Aee,QXr),e(Zw,WXr),e(ke,HXr),e(ke,eA),e(eA,Z0e),e(Z0e,UXr),e(eA,JXr),e(eA,Lee),e(Lee,YXr),e(eA,KXr),e(ke,ZXr),e(ke,oA),e(oA,ewe),e(ewe,ezr),e(oA,ozr),e(oA,yee),e(yee,rzr),e(oA,tzr),e(ke,azr),e(ke,rA),e(rA,owe),e(owe,nzr),e(rA,szr),e(rA,xee),e(xee,lzr),e(rA,izr),e(ke,dzr),e(ke,tA),e(tA,rwe),e(rwe,czr),e(tA,mzr),e(tA,$ee),e($ee,fzr),e(tA,gzr),e(ke,hzr),e(ke,aA),e(aA,twe),e(twe,uzr),e(aA,pzr),e(aA,kee),e(kee,_zr),e(aA,bzr),e(ke,vzr),e(ke,nA),e(nA,awe),e(awe,Fzr),e(nA,Tzr),e(nA,See),e(See,Mzr),e(nA,Ezr),e(Qr,Czr),M(sA,Qr,null),b(m,hXe,_),b(m,nm,_),e(nm,lA),e(lA,nwe),M(f$,nwe,null),e(nm,wzr),e(nm,swe),e(swe,Azr),b(m,uXe,_),b(m,vr,_),M(g$,vr,null),e(vr,Lzr),e(vr,sm),e(sm,yzr),e(sm,Ree),e(Ree,xzr),e(sm,$zr),e(sm,Pee),e(Pee,kzr),e(sm,Szr),e(vr,Rzr),e(vr,h$),e(h$,Pzr),e(h$,lwe),e(lwe,Bzr),e(h$,Izr),e(vr,Nzr),e(vr,Ut),M(u$,Ut,null),e(Ut,qzr),e(Ut,iwe),e(iwe,jzr),e(Ut,Dzr),e(Ut,lm),e(lm,Gzr),e(lm,dwe),e(dwe,Ozr),e(lm,Vzr),e(lm,Bee),e(Bee,Xzr),e(lm,zzr),e(Ut,Qzr),M(iA,Ut,null),e(vr,Wzr),e(vr,Wr),M(p$,Wr,null),e(Wr,Hzr),e(Wr,cwe),e(cwe,Uzr),e(Wr,Jzr),e(Wr,wn),e(wn,Yzr),e(wn,mwe),e(mwe,Kzr),e(wn,Zzr),e(wn,fwe),e(fwe,eQr),e(wn,oQr),e(wn,gwe),e(gwe,rQr),e(wn,tQr),e(Wr,aQr),e(Wr,Se),e(Se,dA),e(dA,hwe),e(hwe,nQr),e(dA,sQr),e(dA,Iee),e(Iee,lQr),e(dA,iQr),e(Se,dQr),e(Se,cA),e(cA,uwe),e(uwe,cQr),e(cA,mQr),e(cA,Nee),e(Nee,fQr),e(cA,gQr),e(Se,hQr),e(Se,mA),e(mA,pwe),e(pwe,uQr),e(mA,pQr),e(mA,qee),e(qee,_Qr),e(mA,bQr),e(Se,vQr),e(Se,fA),e(fA,_we),e(_we,FQr),e(fA,TQr),e(fA,jee),e(jee,MQr),e(fA,EQr),e(Se,CQr),e(Se,gA),e(gA,bwe),e(bwe,wQr),e(gA,AQr),e(gA,Dee),e(Dee,LQr),e(gA,yQr),e(Se,xQr),e(Se,hA),e(hA,vwe),e(vwe,$Qr),e(hA,kQr),e(hA,Gee),e(Gee,SQr),e(hA,RQr),e(Se,PQr),e(Se,uA),e(uA,Fwe),e(Fwe,BQr),e(uA,IQr),e(uA,Oee),e(Oee,NQr),e(uA,qQr),e(Se,jQr),e(Se,pA),e(pA,Twe),e(Twe,DQr),e(pA,GQr),e(pA,Vee),e(Vee,OQr),e(pA,VQr),e(Se,XQr),e(Se,_A),e(_A,Mwe),e(Mwe,zQr),e(_A,QQr),e(_A,Xee),e(Xee,WQr),e(_A,HQr),e(Se,UQr),e(Se,bA),e(bA,Ewe),e(Ewe,JQr),e(bA,YQr),e(bA,zee),e(zee,KQr),e(bA,ZQr),e(Wr,eWr),M(vA,Wr,null),b(m,pXe,_),b(m,im,_),e(im,FA),e(FA,Cwe),M(_$,Cwe,null),e(im,oWr),e(im,wwe),e(wwe,rWr),b(m,_Xe,_),b(m,Fr,_),M(b$,Fr,null),e(Fr,tWr),e(Fr,dm),e(dm,aWr),e(dm,Qee),e(Qee,nWr),e(dm,sWr),e(dm,Wee),e(Wee,lWr),e(dm,iWr),e(Fr,dWr),e(Fr,v$),e(v$,cWr),e(v$,Awe),e(Awe,mWr),e(v$,fWr),e(Fr,gWr),e(Fr,Jt),M(F$,Jt,null),e(Jt,hWr),e(Jt,Lwe),e(Lwe,uWr),e(Jt,pWr),e(Jt,cm),e(cm,_Wr),e(cm,ywe),e(ywe,bWr),e(cm,vWr),e(cm,Hee),e(Hee,FWr),e(cm,TWr),e(Jt,MWr),M(TA,Jt,null),e(Fr,EWr),e(Fr,Hr),M(T$,Hr,null),e(Hr,CWr),e(Hr,xwe),e(xwe,wWr),e(Hr,AWr),e(Hr,An),e(An,LWr),e(An,$we),e($we,yWr),e(An,xWr),e(An,kwe),e(kwe,$Wr),e(An,kWr),e(An,Swe),e(Swe,SWr),e(An,RWr),e(Hr,PWr),e(Hr,Re),e(Re,MA),e(MA,Rwe),e(Rwe,BWr),e(MA,IWr),e(MA,Uee),e(Uee,NWr),e(MA,qWr),e(Re,jWr),e(Re,EA),e(EA,Pwe),e(Pwe,DWr),e(EA,GWr),e(EA,Jee),e(Jee,OWr),e(EA,VWr),e(Re,XWr),e(Re,CA),e(CA,Bwe),e(Bwe,zWr),e(CA,QWr),e(CA,Yee),e(Yee,WWr),e(CA,HWr),e(Re,UWr),e(Re,wA),e(wA,Iwe),e(Iwe,JWr),e(wA,YWr),e(wA,Kee),e(Kee,KWr),e(wA,ZWr),e(Re,eHr),e(Re,AA),e(AA,Nwe),e(Nwe,oHr),e(AA,rHr),e(AA,Zee),e(Zee,tHr),e(AA,aHr),e(Re,nHr),e(Re,LA),e(LA,qwe),e(qwe,sHr),e(LA,lHr),e(LA,eoe),e(eoe,iHr),e(LA,dHr),e(Re,cHr),e(Re,yA),e(yA,jwe),e(jwe,mHr),e(yA,fHr),e(yA,ooe),e(ooe,gHr),e(yA,hHr),e(Re,uHr),e(Re,xA),e(xA,Dwe),e(Dwe,pHr),e(xA,_Hr),e(xA,roe),e(roe,bHr),e(xA,vHr),e(Re,FHr),e(Re,$A),e($A,Gwe),e(Gwe,THr),e($A,MHr),e($A,toe),e(toe,EHr),e($A,CHr),e(Re,wHr),e(Re,kA),e(kA,Owe),e(Owe,AHr),e(kA,LHr),e(kA,aoe),e(aoe,yHr),e(kA,xHr),e(Hr,$Hr),M(SA,Hr,null),b(m,bXe,_),b(m,mm,_),e(mm,RA),e(RA,Vwe),M(M$,Vwe,null),e(mm,kHr),e(mm,Xwe),e(Xwe,SHr),b(m,vXe,_),b(m,Tr,_),M(E$,Tr,null),e(Tr,RHr),e(Tr,fm),e(fm,PHr),e(fm,noe),e(noe,BHr),e(fm,IHr),e(fm,soe),e(soe,NHr),e(fm,qHr),e(Tr,jHr),e(Tr,C$),e(C$,DHr),e(C$,zwe),e(zwe,GHr),e(C$,OHr),e(Tr,VHr),e(Tr,Yt),M(w$,Yt,null),e(Yt,XHr),e(Yt,Qwe),e(Qwe,zHr),e(Yt,QHr),e(Yt,gm),e(gm,WHr),e(gm,Wwe),e(Wwe,HHr),e(gm,UHr),e(gm,loe),e(loe,JHr),e(gm,YHr),e(Yt,KHr),M(PA,Yt,null),e(Tr,ZHr),e(Tr,Ur),M(A$,Ur,null),e(Ur,eUr),e(Ur,Hwe),e(Hwe,oUr),e(Ur,rUr),e(Ur,Ln),e(Ln,tUr),e(Ln,Uwe),e(Uwe,aUr),e(Ln,nUr),e(Ln,Jwe),e(Jwe,sUr),e(Ln,lUr),e(Ln,Ywe),e(Ywe,iUr),e(Ln,dUr),e(Ur,cUr),e(Ur,Ve),e(Ve,BA),e(BA,Kwe),e(Kwe,mUr),e(BA,fUr),e(BA,ioe),e(ioe,gUr),e(BA,hUr),e(Ve,uUr),e(Ve,IA),e(IA,Zwe),e(Zwe,pUr),e(IA,_Ur),e(IA,doe),e(doe,bUr),e(IA,vUr),e(Ve,FUr),e(Ve,NA),e(NA,eAe),e(eAe,TUr),e(NA,MUr),e(NA,coe),e(coe,EUr),e(NA,CUr),e(Ve,wUr),e(Ve,qA),e(qA,oAe),e(oAe,AUr),e(qA,LUr),e(qA,moe),e(moe,yUr),e(qA,xUr),e(Ve,$Ur),e(Ve,jA),e(jA,rAe),e(rAe,kUr),e(jA,SUr),e(jA,foe),e(foe,RUr),e(jA,PUr),e(Ve,BUr),e(Ve,DA),e(DA,tAe),e(tAe,IUr),e(DA,NUr),e(DA,goe),e(goe,qUr),e(DA,jUr),e(Ve,DUr),e(Ve,GA),e(GA,aAe),e(aAe,GUr),e(GA,OUr),e(GA,hoe),e(hoe,VUr),e(GA,XUr),e(Ve,zUr),e(Ve,OA),e(OA,nAe),e(nAe,QUr),e(OA,WUr),e(OA,uoe),e(uoe,HUr),e(OA,UUr),e(Ur,JUr),M(VA,Ur,null),b(m,FXe,_),b(m,hm,_),e(hm,XA),e(XA,sAe),M(L$,sAe,null),e(hm,YUr),e(hm,lAe),e(lAe,KUr),b(m,TXe,_),b(m,Mr,_),M(y$,Mr,null),e(Mr,ZUr),e(Mr,um),e(um,eJr),e(um,poe),e(poe,oJr),e(um,rJr),e(um,_oe),e(_oe,tJr),e(um,aJr),e(Mr,nJr),e(Mr,x$),e(x$,sJr),e(x$,iAe),e(iAe,lJr),e(x$,iJr),e(Mr,dJr),e(Mr,Kt),M($$,Kt,null),e(Kt,cJr),e(Kt,dAe),e(dAe,mJr),e(Kt,fJr),e(Kt,pm),e(pm,gJr),e(pm,cAe),e(cAe,hJr),e(pm,uJr),e(pm,boe),e(boe,pJr),e(pm,_Jr),e(Kt,bJr),M(zA,Kt,null),e(Mr,vJr),e(Mr,Jr),M(k$,Jr,null),e(Jr,FJr),e(Jr,mAe),e(mAe,TJr),e(Jr,MJr),e(Jr,yn),e(yn,EJr),e(yn,fAe),e(fAe,CJr),e(yn,wJr),e(yn,gAe),e(gAe,AJr),e(yn,LJr),e(yn,hAe),e(hAe,yJr),e(yn,xJr),e(Jr,$Jr),e(Jr,Xe),e(Xe,QA),e(QA,uAe),e(uAe,kJr),e(QA,SJr),e(QA,voe),e(voe,RJr),e(QA,PJr),e(Xe,BJr),e(Xe,WA),e(WA,pAe),e(pAe,IJr),e(WA,NJr),e(WA,Foe),e(Foe,qJr),e(WA,jJr),e(Xe,DJr),e(Xe,HA),e(HA,_Ae),e(_Ae,GJr),e(HA,OJr),e(HA,Toe),e(Toe,VJr),e(HA,XJr),e(Xe,zJr),e(Xe,UA),e(UA,bAe),e(bAe,QJr),e(UA,WJr),e(UA,Moe),e(Moe,HJr),e(UA,UJr),e(Xe,JJr),e(Xe,JA),e(JA,vAe),e(vAe,YJr),e(JA,KJr),e(JA,Eoe),e(Eoe,ZJr),e(JA,eYr),e(Xe,oYr),e(Xe,YA),e(YA,FAe),e(FAe,rYr),e(YA,tYr),e(YA,Coe),e(Coe,aYr),e(YA,nYr),e(Xe,sYr),e(Xe,KA),e(KA,TAe),e(TAe,lYr),e(KA,iYr),e(KA,woe),e(woe,dYr),e(KA,cYr),e(Xe,mYr),e(Xe,ZA),e(ZA,MAe),e(MAe,fYr),e(ZA,gYr),e(ZA,Aoe),e(Aoe,hYr),e(ZA,uYr),e(Jr,pYr),M(e6,Jr,null),b(m,MXe,_),b(m,_m,_),e(_m,o6),e(o6,EAe),M(S$,EAe,null),e(_m,_Yr),e(_m,CAe),e(CAe,bYr),b(m,EXe,_),b(m,Er,_),M(R$,Er,null),e(Er,vYr),e(Er,bm),e(bm,FYr),e(bm,Loe),e(Loe,TYr),e(bm,MYr),e(bm,yoe),e(yoe,EYr),e(bm,CYr),e(Er,wYr),e(Er,P$),e(P$,AYr),e(P$,wAe),e(wAe,LYr),e(P$,yYr),e(Er,xYr),e(Er,Zt),M(B$,Zt,null),e(Zt,$Yr),e(Zt,AAe),e(AAe,kYr),e(Zt,SYr),e(Zt,vm),e(vm,RYr),e(vm,LAe),e(LAe,PYr),e(vm,BYr),e(vm,xoe),e(xoe,IYr),e(vm,NYr),e(Zt,qYr),M(r6,Zt,null),e(Er,jYr),e(Er,Yr),M(I$,Yr,null),e(Yr,DYr),e(Yr,yAe),e(yAe,GYr),e(Yr,OYr),e(Yr,xn),e(xn,VYr),e(xn,xAe),e(xAe,XYr),e(xn,zYr),e(xn,$Ae),e($Ae,QYr),e(xn,WYr),e(xn,kAe),e(kAe,HYr),e(xn,UYr),e(Yr,JYr),e(Yr,SAe),e(SAe,t6),e(t6,RAe),e(RAe,YYr),e(t6,KYr),e(t6,$oe),e($oe,ZYr),e(t6,eKr),e(Yr,oKr),M(a6,Yr,null),b(m,CXe,_),b(m,Fm,_),e(Fm,n6),e(n6,PAe),M(N$,PAe,null),e(Fm,rKr),e(Fm,BAe),e(BAe,tKr),b(m,wXe,_),b(m,Cr,_),M(q$,Cr,null),e(Cr,aKr),e(Cr,Tm),e(Tm,nKr),e(Tm,koe),e(koe,sKr),e(Tm,lKr),e(Tm,Soe),e(Soe,iKr),e(Tm,dKr),e(Cr,cKr),e(Cr,j$),e(j$,mKr),e(j$,IAe),e(IAe,fKr),e(j$,gKr),e(Cr,hKr),e(Cr,ea),M(D$,ea,null),e(ea,uKr),e(ea,NAe),e(NAe,pKr),e(ea,_Kr),e(ea,Mm),e(Mm,bKr),e(Mm,qAe),e(qAe,vKr),e(Mm,FKr),e(Mm,Roe),e(Roe,TKr),e(Mm,MKr),e(ea,EKr),M(s6,ea,null),e(Cr,CKr),e(Cr,Kr),M(G$,Kr,null),e(Kr,wKr),e(Kr,jAe),e(jAe,AKr),e(Kr,LKr),e(Kr,$n),e($n,yKr),e($n,DAe),e(DAe,xKr),e($n,$Kr),e($n,GAe),e(GAe,kKr),e($n,SKr),e($n,OAe),e(OAe,RKr),e($n,PKr),e(Kr,BKr),e(Kr,O$),e(O$,l6),e(l6,VAe),e(VAe,IKr),e(l6,NKr),e(l6,Poe),e(Poe,qKr),e(l6,jKr),e(O$,DKr),e(O$,i6),e(i6,XAe),e(XAe,GKr),e(i6,OKr),e(i6,Boe),e(Boe,VKr),e(i6,XKr),e(Kr,zKr),M(d6,Kr,null),b(m,AXe,_),b(m,Em,_),e(Em,c6),e(c6,zAe),M(V$,zAe,null),e(Em,QKr),e(Em,QAe),e(QAe,WKr),b(m,LXe,_),b(m,wr,_),M(X$,wr,null),e(wr,HKr),e(wr,Cm),e(Cm,UKr),e(Cm,Ioe),e(Ioe,JKr),e(Cm,YKr),e(Cm,Noe),e(Noe,KKr),e(Cm,ZKr),e(wr,eZr),e(wr,z$),e(z$,oZr),e(z$,WAe),e(WAe,rZr),e(z$,tZr),e(wr,aZr),e(wr,oa),M(Q$,oa,null),e(oa,nZr),e(oa,HAe),e(HAe,sZr),e(oa,lZr),e(oa,wm),e(wm,iZr),e(wm,UAe),e(UAe,dZr),e(wm,cZr),e(wm,qoe),e(qoe,mZr),e(wm,fZr),e(oa,gZr),M(m6,oa,null),e(wr,hZr),e(wr,Zr),M(W$,Zr,null),e(Zr,uZr),e(Zr,JAe),e(JAe,pZr),e(Zr,_Zr),e(Zr,kn),e(kn,bZr),e(kn,YAe),e(YAe,vZr),e(kn,FZr),e(kn,KAe),e(KAe,TZr),e(kn,MZr),e(kn,ZAe),e(ZAe,EZr),e(kn,CZr),e(Zr,wZr),e(Zr,e6e),e(e6e,f6),e(f6,o6e),e(o6e,AZr),e(f6,LZr),e(f6,joe),e(joe,yZr),e(f6,xZr),e(Zr,$Zr),M(g6,Zr,null),yXe=!0},p(m,[_]){const H$={};_&2&&(H$.$$scope={dirty:_,ctx:m}),Pm.$set(H$);const r6e={};_&2&&(r6e.$$scope={dirty:_,ctx:m}),zg.$set(r6e);const t6e={};_&2&&(t6e.$$scope={dirty:_,ctx:m}),Lh.$set(t6e);const a6e={};_&2&&(a6e.$$scope={dirty:_,ctx:m}),du.$set(a6e);const U$={};_&2&&(U$.$$scope={dirty:_,ctx:m}),cu.$set(U$);const n6e={};_&2&&(n6e.$$scope={dirty:_,ctx:m}),ku.$set(n6e);const Sn={};_&2&&(Sn.$$scope={dirty:_,ctx:m}),Su.$set(Sn);const s6e={};_&2&&(s6e.$$scope={dirty:_,ctx:m}),Bu.$set(s6e);const l6e={};_&2&&(l6e.$$scope={dirty:_,ctx:m}),N_.$set(l6e);const i6e={};_&2&&(i6e.$$scope={dirty:_,ctx:m}),j_.$set(i6e);const J$={};_&2&&(J$.$$scope={dirty:_,ctx:m}),k2.$set(J$);const d6e={};_&2&&(d6e.$$scope={dirty:_,ctx:m}),R2.$set(d6e);const Y$={};_&2&&(Y$.$$scope={dirty:_,ctx:m}),Fb.$set(Y$);const c6e={};_&2&&(c6e.$$scope={dirty:_,ctx:m}),Mb.$set(c6e);const K$={};_&2&&(K$.$$scope={dirty:_,ctx:m}),lv.$set(K$);const m6e={};_&2&&(m6e.$$scope={dirty:_,ctx:m}),dv.$set(m6e);const f6e={};_&2&&(f6e.$$scope={dirty:_,ctx:m}),yv.$set(f6e);const g6e={};_&2&&(g6e.$$scope={dirty:_,ctx:m}),$v.$set(g6e);const Am={};_&2&&(Am.$$scope={dirty:_,ctx:m}),L1.$set(Am);const h6e={};_&2&&(h6e.$$scope={dirty:_,ctx:m}),x1.$set(h6e);const u6e={};_&2&&(u6e.$$scope={dirty:_,ctx:m}),lF.$set(u6e);const p6e={};_&2&&(p6e.$$scope={dirty:_,ctx:m}),dF.$set(p6e);const Z$={};_&2&&(Z$.$$scope={dirty:_,ctx:m}),_F.$set(Z$);const _6e={};_&2&&(_6e.$$scope={dirty:_,ctx:m}),vF.$set(_6e);const b6e={};_&2&&(b6e.$$scope={dirty:_,ctx:m}),tT.$set(b6e);const v6e={};_&2&&(v6e.$$scope={dirty:_,ctx:m}),nT.$set(v6e);const rt={};_&2&&(rt.$$scope={dirty:_,ctx:m}),HT.$set(rt);const ek={};_&2&&(ek.$$scope={dirty:_,ctx:m}),JT.$set(ek);const F6e={};_&2&&(F6e.$$scope={dirty:_,ctx:m}),ZT.$set(F6e);const ok={};_&2&&(ok.$$scope={dirty:_,ctx:m}),oM.$set(ok);const T6e={};_&2&&(T6e.$$scope={dirty:_,ctx:m}),uM.$set(T6e);const tt={};_&2&&(tt.$$scope={dirty:_,ctx:m}),_M.$set(tt);const M6e={};_&2&&(M6e.$$scope={dirty:_,ctx:m}),FM.$set(M6e);const Lm={};_&2&&(Lm.$$scope={dirty:_,ctx:m}),MM.$set(Lm);const E6e={};_&2&&(E6e.$$scope={dirty:_,ctx:m}),wM.$set(E6e);const C6e={};_&2&&(C6e.$$scope={dirty:_,ctx:m}),LM.$set(C6e);const L={};_&2&&(L.$$scope={dirty:_,ctx:m}),qM.$set(L);const h6={};_&2&&(h6.$$scope={dirty:_,ctx:m}),DM.$set(h6);const w6e={};_&2&&(w6e.$$scope={dirty:_,ctx:m}),WM.$set(w6e);const A6e={};_&2&&(A6e.$$scope={dirty:_,ctx:m}),UM.$set(A6e);const u6={};_&2&&(u6.$$scope={dirty:_,ctx:m}),lE.$set(u6);const L6e={};_&2&&(L6e.$$scope={dirty:_,ctx:m}),dE.$set(L6e);const y6e={};_&2&&(y6e.$$scope={dirty:_,ctx:m}),gE.$set(y6e);const p6={};_&2&&(p6.$$scope={dirty:_,ctx:m}),uE.$set(p6);const x6e={};_&2&&(x6e.$$scope={dirty:_,ctx:m}),ME.$set(x6e);const $6e={};_&2&&($6e.$$scope={dirty:_,ctx:m}),CE.$set($6e);const _6={};_&2&&(_6.$$scope={dirty:_,ctx:m}),xE.$set(_6);const k6e={};_&2&&(k6e.$$scope={dirty:_,ctx:m}),kE.$set(k6e);const S6e={};_&2&&(S6e.$$scope={dirty:_,ctx:m}),BE.$set(S6e);const b6={};_&2&&(b6.$$scope={dirty:_,ctx:m}),NE.$set(b6);const R6e={};_&2&&(R6e.$$scope={dirty:_,ctx:m}),DE.$set(R6e);const P6e={};_&2&&(P6e.$$scope={dirty:_,ctx:m}),OE.$set(P6e);const v6={};_&2&&(v6.$$scope={dirty:_,ctx:m}),HE.$set(v6);const B6e={};_&2&&(B6e.$$scope={dirty:_,ctx:m}),JE.$set(B6e);const I6e={};_&2&&(I6e.$$scope={dirty:_,ctx:m}),ZE.$set(I6e);const F6={};_&2&&(F6.$$scope={dirty:_,ctx:m}),o4.$set(F6);const N6e={};_&2&&(N6e.$$scope={dirty:_,ctx:m}),H4.$set(N6e);const q6e={};_&2&&(q6e.$$scope={dirty:_,ctx:m}),J4.$set(q6e);const T6={};_&2&&(T6.$$scope={dirty:_,ctx:m}),FC.$set(T6);const j6e={};_&2&&(j6e.$$scope={dirty:_,ctx:m}),MC.$set(j6e);const D6e={};_&2&&(D6e.$$scope={dirty:_,ctx:m}),IC.$set(D6e);const M6={};_&2&&(M6.$$scope={dirty:_,ctx:m}),qC.$set(M6);const G6e={};_&2&&(G6e.$$scope={dirty:_,ctx:m}),VC.$set(G6e);const O6e={};_&2&&(O6e.$$scope={dirty:_,ctx:m}),zC.$set(O6e);const E6={};_&2&&(E6.$$scope={dirty:_,ctx:m}),f5.$set(E6);const V6e={};_&2&&(V6e.$$scope={dirty:_,ctx:m}),h5.$set(V6e);const X6e={};_&2&&(X6e.$$scope={dirty:_,ctx:m}),w5.$set(X6e);const C6={};_&2&&(C6.$$scope={dirty:_,ctx:m}),L5.$set(C6);const z6e={};_&2&&(z6e.$$scope={dirty:_,ctx:m}),e3.$set(z6e);const Q6e={};_&2&&(Q6e.$$scope={dirty:_,ctx:m}),r3.$set(Q6e);const w6={};_&2&&(w6.$$scope={dirty:_,ctx:m}),F3.$set(w6);const W6e={};_&2&&(W6e.$$scope={dirty:_,ctx:m}),M3.$set(W6e);const H6e={};_&2&&(H6e.$$scope={dirty:_,ctx:m}),w3.$set(H6e);const A6={};_&2&&(A6.$$scope={dirty:_,ctx:m}),L3.$set(A6);const U6e={};_&2&&(U6e.$$scope={dirty:_,ctx:m}),x3.$set(U6e);const J6e={};_&2&&(J6e.$$scope={dirty:_,ctx:m}),k3.$set(J6e);const L6={};_&2&&(L6.$$scope={dirty:_,ctx:m}),K3.$set(L6);const Y6e={};_&2&&(Y6e.$$scope={dirty:_,ctx:m}),e0.$set(Y6e);const K6e={};_&2&&(K6e.$$scope={dirty:_,ctx:m}),T0.$set(K6e);const y6={};_&2&&(y6.$$scope={dirty:_,ctx:m}),E0.$set(y6);const Z6e={};_&2&&(Z6e.$$scope={dirty:_,ctx:m}),w0.$set(Z6e);const eLe={};_&2&&(eLe.$$scope={dirty:_,ctx:m}),L0.$set(eLe);const x6={};_&2&&(x6.$$scope={dirty:_,ctx:m}),x0.$set(x6);const oLe={};_&2&&(oLe.$$scope={dirty:_,ctx:m}),k0.$set(oLe);const rLe={};_&2&&(rLe.$$scope={dirty:_,ctx:m}),nw.$set(rLe);const $6={};_&2&&($6.$$scope={dirty:_,ctx:m}),lw.$set($6);const tLe={};_&2&&(tLe.$$scope={dirty:_,ctx:m}),bw.$set(tLe);const aLe={};_&2&&(aLe.$$scope={dirty:_,ctx:m}),Fw.$set(aLe);const k6={};_&2&&(k6.$$scope={dirty:_,ctx:m}),Pw.$set(k6);const nLe={};_&2&&(nLe.$$scope={dirty:_,ctx:m}),Iw.$set(nLe);const sLe={};_&2&&(sLe.$$scope={dirty:_,ctx:m}),Ww.$set(sLe);const S6={};_&2&&(S6.$$scope={dirty:_,ctx:m}),Uw.$set(S6);const lLe={};_&2&&(lLe.$$scope={dirty:_,ctx:m}),sA.$set(lLe);const iLe={};_&2&&(iLe.$$scope={dirty:_,ctx:m}),iA.$set(iLe);const R6={};_&2&&(R6.$$scope={dirty:_,ctx:m}),vA.$set(R6);const dLe={};_&2&&(dLe.$$scope={dirty:_,ctx:m}),TA.$set(dLe);const cLe={};_&2&&(cLe.$$scope={dirty:_,ctx:m}),SA.$set(cLe);const P6={};_&2&&(P6.$$scope={dirty:_,ctx:m}),PA.$set(P6);const mLe={};_&2&&(mLe.$$scope={dirty:_,ctx:m}),VA.$set(mLe);const fLe={};_&2&&(fLe.$$scope={dirty:_,ctx:m}),zA.$set(fLe);const B6={};_&2&&(B6.$$scope={dirty:_,ctx:m}),e6.$set(B6);const gLe={};_&2&&(gLe.$$scope={dirty:_,ctx:m}),r6.$set(gLe);const hLe={};_&2&&(hLe.$$scope={dirty:_,ctx:m}),a6.$set(hLe);const I6={};_&2&&(I6.$$scope={dirty:_,ctx:m}),s6.$set(I6);const uLe={};_&2&&(uLe.$$scope={dirty:_,ctx:m}),d6.$set(uLe);const pLe={};_&2&&(pLe.$$scope={dirty:_,ctx:m}),m6.$set(pLe);const N6={};_&2&&(N6.$$scope={dirty:_,ctx:m}),g6.$set(N6)},i(m){yXe||(E(d.$$.fragment,m),E(xa.$$.fragment,m),E(q7.$$.fragment,m),E(j7.$$.fragment,m),E(Pm.$$.fragment,m),E(D7.$$.fragment,m),E(G7.$$.fragment,m),E(X7.$$.fragment,m),E(zg.$$.fragment,m),E(z7.$$.fragment,m),E(Q7.$$.fragment,m),E(W7.$$.fragment,m),E(J7.$$.fragment,m),E(Lh.$$.fragment,m),E(Y7.$$.fragment,m),E(K7.$$.fragment,m),E(Z7.$$.fragment,m),E(ry.$$.fragment,m),E(du.$$.fragment,m),E(cu.$$.fragment,m),E(ty.$$.fragment,m),E(ay.$$.fragment,m),E(ny.$$.fragment,m),E(iy.$$.fragment,m),E(ku.$$.fragment,m),E(Su.$$.fragment,m),E(dy.$$.fragment,m),E(cy.$$.fragment,m),E(my.$$.fragment,m),E(gy.$$.fragment,m),E(Bu.$$.fragment,m),E(hy.$$.fragment,m),E(N_.$$.fragment,m),E(uy.$$.fragment,m),E(py.$$.fragment,m),E(by.$$.fragment,m),E(j_.$$.fragment,m),E(vy.$$.fragment,m),E(k2.$$.fragment,m),E(Fy.$$.fragment,m),E(Ty.$$.fragment,m),E(Ey.$$.fragment,m),E(R2.$$.fragment,m),E(Cy.$$.fragment,m),E(Fb.$$.fragment,m),E(wy.$$.fragment,m),E(Ay.$$.fragment,m),E(yy.$$.fragment,m),E(Mb.$$.fragment,m),E(xy.$$.fragment,m),E(lv.$$.fragment,m),E($y.$$.fragment,m),E(ky.$$.fragment,m),E(Ry.$$.fragment,m),E(dv.$$.fragment,m),E(Py.$$.fragment,m),E(yv.$$.fragment,m),E(By.$$.fragment,m),E(Iy.$$.fragment,m),E(qy.$$.fragment,m),E($v.$$.fragment,m),E(jy.$$.fragment,m),E(L1.$$.fragment,m),E(Dy.$$.fragment,m),E(Gy.$$.fragment,m),E(Vy.$$.fragment,m),E(x1.$$.fragment,m),E(Xy.$$.fragment,m),E(lF.$$.fragment,m),E(zy.$$.fragment,m),E(Qy.$$.fragment,m),E(Hy.$$.fragment,m),E(dF.$$.fragment,m),E(Uy.$$.fragment,m),E(_F.$$.fragment,m),E(Jy.$$.fragment,m),E(Yy.$$.fragment,m),E(Zy.$$.fragment,m),E(vF.$$.fragment,m),E(e8.$$.fragment,m),E(tT.$$.fragment,m),E(o8.$$.fragment,m),E(r8.$$.fragment,m),E(a8.$$.fragment,m),E(nT.$$.fragment,m),E(n8.$$.fragment,m),E(HT.$$.fragment,m),E(s8.$$.fragment,m),E(l8.$$.fragment,m),E(d8.$$.fragment,m),E(JT.$$.fragment,m),E(c8.$$.fragment,m),E(ZT.$$.fragment,m),E(m8.$$.fragment,m),E(f8.$$.fragment,m),E(h8.$$.fragment,m),E(oM.$$.fragment,m),E(u8.$$.fragment,m),E(uM.$$.fragment,m),E(p8.$$.fragment,m),E(_8.$$.fragment,m),E(v8.$$.fragment,m),E(_M.$$.fragment,m),E(F8.$$.fragment,m),E(FM.$$.fragment,m),E(T8.$$.fragment,m),E(M8.$$.fragment,m),E(C8.$$.fragment,m),E(MM.$$.fragment,m),E(w8.$$.fragment,m),E(wM.$$.fragment,m),E(A8.$$.fragment,m),E(L8.$$.fragment,m),E(x8.$$.fragment,m),E(LM.$$.fragment,m),E($8.$$.fragment,m),E(qM.$$.fragment,m),E(k8.$$.fragment,m),E(S8.$$.fragment,m),E(P8.$$.fragment,m),E(DM.$$.fragment,m),E(B8.$$.fragment,m),E(WM.$$.fragment,m),E(I8.$$.fragment,m),E(N8.$$.fragment,m),E(j8.$$.fragment,m),E(UM.$$.fragment,m),E(D8.$$.fragment,m),E(lE.$$.fragment,m),E(G8.$$.fragment,m),E(O8.$$.fragment,m),E(X8.$$.fragment,m),E(dE.$$.fragment,m),E(z8.$$.fragment,m),E(gE.$$.fragment,m),E(W8.$$.fragment,m),E(H8.$$.fragment,m),E(J8.$$.fragment,m),E(uE.$$.fragment,m),E(Y8.$$.fragment,m),E(ME.$$.fragment,m),E(K8.$$.fragment,m),E(Z8.$$.fragment,m),E(o9.$$.fragment,m),E(CE.$$.fragment,m),E(r9.$$.fragment,m),E(xE.$$.fragment,m),E(t9.$$.fragment,m),E(a9.$$.fragment,m),E(s9.$$.fragment,m),E(kE.$$.fragment,m),E(l9.$$.fragment,m),E(BE.$$.fragment,m),E(d9.$$.fragment,m),E(c9.$$.fragment,m),E(f9.$$.fragment,m),E(NE.$$.fragment,m),E(g9.$$.fragment,m),E(DE.$$.fragment,m),E(h9.$$.fragment,m),E(u9.$$.fragment,m),E(_9.$$.fragment,m),E(OE.$$.fragment,m),E(b9.$$.fragment,m),E(HE.$$.fragment,m),E(v9.$$.fragment,m),E(F9.$$.fragment,m),E(M9.$$.fragment,m),E(JE.$$.fragment,m),E(E9.$$.fragment,m),E(ZE.$$.fragment,m),E(C9.$$.fragment,m),E(w9.$$.fragment,m),E(L9.$$.fragment,m),E(o4.$$.fragment,m),E(y9.$$.fragment,m),E(H4.$$.fragment,m),E(x9.$$.fragment,m),E($9.$$.fragment,m),E(S9.$$.fragment,m),E(J4.$$.fragment,m),E(R9.$$.fragment,m),E(FC.$$.fragment,m),E(P9.$$.fragment,m),E(B9.$$.fragment,m),E(N9.$$.fragment,m),E(MC.$$.fragment,m),E(q9.$$.fragment,m),E(IC.$$.fragment,m),E(j9.$$.fragment,m),E(D9.$$.fragment,m),E(O9.$$.fragment,m),E(qC.$$.fragment,m),E(V9.$$.fragment,m),E(VC.$$.fragment,m),E(X9.$$.fragment,m),E(z9.$$.fragment,m),E(W9.$$.fragment,m),E(zC.$$.fragment,m),E(H9.$$.fragment,m),E(f5.$$.fragment,m),E(U9.$$.fragment,m),E(J9.$$.fragment,m),E(K9.$$.fragment,m),E(h5.$$.fragment,m),E(Z9.$$.fragment,m),E(w5.$$.fragment,m),E(ex.$$.fragment,m),E(ox.$$.fragment,m),E(tx.$$.fragment,m),E(L5.$$.fragment,m),E(ax.$$.fragment,m),E(e3.$$.fragment,m),E(nx.$$.fragment,m),E(sx.$$.fragment,m),E(ix.$$.fragment,m),E(r3.$$.fragment,m),E(dx.$$.fragment,m),E(F3.$$.fragment,m),E(cx.$$.fragment,m),E(mx.$$.fragment,m),E(gx.$$.fragment,m),E(M3.$$.fragment,m),E(hx.$$.fragment,m),E(w3.$$.fragment,m),E(px.$$.fragment,m),E(_x.$$.fragment,m),E(vx.$$.fragment,m),E(L3.$$.fragment,m),E(Fx.$$.fragment,m),E(x3.$$.fragment,m),E(Tx.$$.fragment,m),E(Mx.$$.fragment,m),E(Cx.$$.fragment,m),E(k3.$$.fragment,m),E(wx.$$.fragment,m),E(K3.$$.fragment,m),E(Ax.$$.fragment,m),E(Lx.$$.fragment,m),E(xx.$$.fragment,m),E(e0.$$.fragment,m),E($x.$$.fragment,m),E(T0.$$.fragment,m),E(kx.$$.fragment,m),E(Sx.$$.fragment,m),E(Px.$$.fragment,m),E(E0.$$.fragment,m),E(Bx.$$.fragment,m),E(w0.$$.fragment,m),E(Ix.$$.fragment,m),E(Nx.$$.fragment,m),E(jx.$$.fragment,m),E(L0.$$.fragment,m),E(Dx.$$.fragment,m),E(x0.$$.fragment,m),E(Gx.$$.fragment,m),E(Ox.$$.fragment,m),E(Xx.$$.fragment,m),E(k0.$$.fragment,m),E(zx.$$.fragment,m),E(nw.$$.fragment,m),E(Qx.$$.fragment,m),E(Wx.$$.fragment,m),E(Ux.$$.fragment,m),E(lw.$$.fragment,m),E(Jx.$$.fragment,m),E(bw.$$.fragment,m),E(Yx.$$.fragment,m),E(Kx.$$.fragment,m),E(e$.$$.fragment,m),E(Fw.$$.fragment,m),E(o$.$$.fragment,m),E(Pw.$$.fragment,m),E(r$.$$.fragment,m),E(t$.$$.fragment,m),E(n$.$$.fragment,m),E(Iw.$$.fragment,m),E(s$.$$.fragment,m),E(Ww.$$.fragment,m),E(l$.$$.fragment,m),E(i$.$$.fragment,m),E(c$.$$.fragment,m),E(Uw.$$.fragment,m),E(m$.$$.fragment,m),E(sA.$$.fragment,m),E(f$.$$.fragment,m),E(g$.$$.fragment,m),E(u$.$$.fragment,m),E(iA.$$.fragment,m),E(p$.$$.fragment,m),E(vA.$$.fragment,m),E(_$.$$.fragment,m),E(b$.$$.fragment,m),E(F$.$$.fragment,m),E(TA.$$.fragment,m),E(T$.$$.fragment,m),E(SA.$$.fragment,m),E(M$.$$.fragment,m),E(E$.$$.fragment,m),E(w$.$$.fragment,m),E(PA.$$.fragment,m),E(A$.$$.fragment,m),E(VA.$$.fragment,m),E(L$.$$.fragment,m),E(y$.$$.fragment,m),E($$.$$.fragment,m),E(zA.$$.fragment,m),E(k$.$$.fragment,m),E(e6.$$.fragment,m),E(S$.$$.fragment,m),E(R$.$$.fragment,m),E(B$.$$.fragment,m),E(r6.$$.fragment,m),E(I$.$$.fragment,m),E(a6.$$.fragment,m),E(N$.$$.fragment,m),E(q$.$$.fragment,m),E(D$.$$.fragment,m),E(s6.$$.fragment,m),E(G$.$$.fragment,m),E(d6.$$.fragment,m),E(V$.$$.fragment,m),E(X$.$$.fragment,m),E(Q$.$$.fragment,m),E(m6.$$.fragment,m),E(W$.$$.fragment,m),E(g6.$$.fragment,m),yXe=!0)},o(m){C(d.$$.fragment,m),C(xa.$$.fragment,m),C(q7.$$.fragment,m),C(j7.$$.fragment,m),C(Pm.$$.fragment,m),C(D7.$$.fragment,m),C(G7.$$.fragment,m),C(X7.$$.fragment,m),C(zg.$$.fragment,m),C(z7.$$.fragment,m),C(Q7.$$.fragment,m),C(W7.$$.fragment,m),C(J7.$$.fragment,m),C(Lh.$$.fragment,m),C(Y7.$$.fragment,m),C(K7.$$.fragment,m),C(Z7.$$.fragment,m),C(ry.$$.fragment,m),C(du.$$.fragment,m),C(cu.$$.fragment,m),C(ty.$$.fragment,m),C(ay.$$.fragment,m),C(ny.$$.fragment,m),C(iy.$$.fragment,m),C(ku.$$.fragment,m),C(Su.$$.fragment,m),C(dy.$$.fragment,m),C(cy.$$.fragment,m),C(my.$$.fragment,m),C(gy.$$.fragment,m),C(Bu.$$.fragment,m),C(hy.$$.fragment,m),C(N_.$$.fragment,m),C(uy.$$.fragment,m),C(py.$$.fragment,m),C(by.$$.fragment,m),C(j_.$$.fragment,m),C(vy.$$.fragment,m),C(k2.$$.fragment,m),C(Fy.$$.fragment,m),C(Ty.$$.fragment,m),C(Ey.$$.fragment,m),C(R2.$$.fragment,m),C(Cy.$$.fragment,m),C(Fb.$$.fragment,m),C(wy.$$.fragment,m),C(Ay.$$.fragment,m),C(yy.$$.fragment,m),C(Mb.$$.fragment,m),C(xy.$$.fragment,m),C(lv.$$.fragment,m),C($y.$$.fragment,m),C(ky.$$.fragment,m),C(Ry.$$.fragment,m),C(dv.$$.fragment,m),C(Py.$$.fragment,m),C(yv.$$.fragment,m),C(By.$$.fragment,m),C(Iy.$$.fragment,m),C(qy.$$.fragment,m),C($v.$$.fragment,m),C(jy.$$.fragment,m),C(L1.$$.fragment,m),C(Dy.$$.fragment,m),C(Gy.$$.fragment,m),C(Vy.$$.fragment,m),C(x1.$$.fragment,m),C(Xy.$$.fragment,m),C(lF.$$.fragment,m),C(zy.$$.fragment,m),C(Qy.$$.fragment,m),C(Hy.$$.fragment,m),C(dF.$$.fragment,m),C(Uy.$$.fragment,m),C(_F.$$.fragment,m),C(Jy.$$.fragment,m),C(Yy.$$.fragment,m),C(Zy.$$.fragment,m),C(vF.$$.fragment,m),C(e8.$$.fragment,m),C(tT.$$.fragment,m),C(o8.$$.fragment,m),C(r8.$$.fragment,m),C(a8.$$.fragment,m),C(nT.$$.fragment,m),C(n8.$$.fragment,m),C(HT.$$.fragment,m),C(s8.$$.fragment,m),C(l8.$$.fragment,m),C(d8.$$.fragment,m),C(JT.$$.fragment,m),C(c8.$$.fragment,m),C(ZT.$$.fragment,m),C(m8.$$.fragment,m),C(f8.$$.fragment,m),C(h8.$$.fragment,m),C(oM.$$.fragment,m),C(u8.$$.fragment,m),C(uM.$$.fragment,m),C(p8.$$.fragment,m),C(_8.$$.fragment,m),C(v8.$$.fragment,m),C(_M.$$.fragment,m),C(F8.$$.fragment,m),C(FM.$$.fragment,m),C(T8.$$.fragment,m),C(M8.$$.fragment,m),C(C8.$$.fragment,m),C(MM.$$.fragment,m),C(w8.$$.fragment,m),C(wM.$$.fragment,m),C(A8.$$.fragment,m),C(L8.$$.fragment,m),C(x8.$$.fragment,m),C(LM.$$.fragment,m),C($8.$$.fragment,m),C(qM.$$.fragment,m),C(k8.$$.fragment,m),C(S8.$$.fragment,m),C(P8.$$.fragment,m),C(DM.$$.fragment,m),C(B8.$$.fragment,m),C(WM.$$.fragment,m),C(I8.$$.fragment,m),C(N8.$$.fragment,m),C(j8.$$.fragment,m),C(UM.$$.fragment,m),C(D8.$$.fragment,m),C(lE.$$.fragment,m),C(G8.$$.fragment,m),C(O8.$$.fragment,m),C(X8.$$.fragment,m),C(dE.$$.fragment,m),C(z8.$$.fragment,m),C(gE.$$.fragment,m),C(W8.$$.fragment,m),C(H8.$$.fragment,m),C(J8.$$.fragment,m),C(uE.$$.fragment,m),C(Y8.$$.fragment,m),C(ME.$$.fragment,m),C(K8.$$.fragment,m),C(Z8.$$.fragment,m),C(o9.$$.fragment,m),C(CE.$$.fragment,m),C(r9.$$.fragment,m),C(xE.$$.fragment,m),C(t9.$$.fragment,m),C(a9.$$.fragment,m),C(s9.$$.fragment,m),C(kE.$$.fragment,m),C(l9.$$.fragment,m),C(BE.$$.fragment,m),C(d9.$$.fragment,m),C(c9.$$.fragment,m),C(f9.$$.fragment,m),C(NE.$$.fragment,m),C(g9.$$.fragment,m),C(DE.$$.fragment,m),C(h9.$$.fragment,m),C(u9.$$.fragment,m),C(_9.$$.fragment,m),C(OE.$$.fragment,m),C(b9.$$.fragment,m),C(HE.$$.fragment,m),C(v9.$$.fragment,m),C(F9.$$.fragment,m),C(M9.$$.fragment,m),C(JE.$$.fragment,m),C(E9.$$.fragment,m),C(ZE.$$.fragment,m),C(C9.$$.fragment,m),C(w9.$$.fragment,m),C(L9.$$.fragment,m),C(o4.$$.fragment,m),C(y9.$$.fragment,m),C(H4.$$.fragment,m),C(x9.$$.fragment,m),C($9.$$.fragment,m),C(S9.$$.fragment,m),C(J4.$$.fragment,m),C(R9.$$.fragment,m),C(FC.$$.fragment,m),C(P9.$$.fragment,m),C(B9.$$.fragment,m),C(N9.$$.fragment,m),C(MC.$$.fragment,m),C(q9.$$.fragment,m),C(IC.$$.fragment,m),C(j9.$$.fragment,m),C(D9.$$.fragment,m),C(O9.$$.fragment,m),C(qC.$$.fragment,m),C(V9.$$.fragment,m),C(VC.$$.fragment,m),C(X9.$$.fragment,m),C(z9.$$.fragment,m),C(W9.$$.fragment,m),C(zC.$$.fragment,m),C(H9.$$.fragment,m),C(f5.$$.fragment,m),C(U9.$$.fragment,m),C(J9.$$.fragment,m),C(K9.$$.fragment,m),C(h5.$$.fragment,m),C(Z9.$$.fragment,m),C(w5.$$.fragment,m),C(ex.$$.fragment,m),C(ox.$$.fragment,m),C(tx.$$.fragment,m),C(L5.$$.fragment,m),C(ax.$$.fragment,m),C(e3.$$.fragment,m),C(nx.$$.fragment,m),C(sx.$$.fragment,m),C(ix.$$.fragment,m),C(r3.$$.fragment,m),C(dx.$$.fragment,m),C(F3.$$.fragment,m),C(cx.$$.fragment,m),C(mx.$$.fragment,m),C(gx.$$.fragment,m),C(M3.$$.fragment,m),C(hx.$$.fragment,m),C(w3.$$.fragment,m),C(px.$$.fragment,m),C(_x.$$.fragment,m),C(vx.$$.fragment,m),C(L3.$$.fragment,m),C(Fx.$$.fragment,m),C(x3.$$.fragment,m),C(Tx.$$.fragment,m),C(Mx.$$.fragment,m),C(Cx.$$.fragment,m),C(k3.$$.fragment,m),C(wx.$$.fragment,m),C(K3.$$.fragment,m),C(Ax.$$.fragment,m),C(Lx.$$.fragment,m),C(xx.$$.fragment,m),C(e0.$$.fragment,m),C($x.$$.fragment,m),C(T0.$$.fragment,m),C(kx.$$.fragment,m),C(Sx.$$.fragment,m),C(Px.$$.fragment,m),C(E0.$$.fragment,m),C(Bx.$$.fragment,m),C(w0.$$.fragment,m),C(Ix.$$.fragment,m),C(Nx.$$.fragment,m),C(jx.$$.fragment,m),C(L0.$$.fragment,m),C(Dx.$$.fragment,m),C(x0.$$.fragment,m),C(Gx.$$.fragment,m),C(Ox.$$.fragment,m),C(Xx.$$.fragment,m),C(k0.$$.fragment,m),C(zx.$$.fragment,m),C(nw.$$.fragment,m),C(Qx.$$.fragment,m),C(Wx.$$.fragment,m),C(Ux.$$.fragment,m),C(lw.$$.fragment,m),C(Jx.$$.fragment,m),C(bw.$$.fragment,m),C(Yx.$$.fragment,m),C(Kx.$$.fragment,m),C(e$.$$.fragment,m),C(Fw.$$.fragment,m),C(o$.$$.fragment,m),C(Pw.$$.fragment,m),C(r$.$$.fragment,m),C(t$.$$.fragment,m),C(n$.$$.fragment,m),C(Iw.$$.fragment,m),C(s$.$$.fragment,m),C(Ww.$$.fragment,m),C(l$.$$.fragment,m),C(i$.$$.fragment,m),C(c$.$$.fragment,m),C(Uw.$$.fragment,m),C(m$.$$.fragment,m),C(sA.$$.fragment,m),C(f$.$$.fragment,m),C(g$.$$.fragment,m),C(u$.$$.fragment,m),C(iA.$$.fragment,m),C(p$.$$.fragment,m),C(vA.$$.fragment,m),C(_$.$$.fragment,m),C(b$.$$.fragment,m),C(F$.$$.fragment,m),C(TA.$$.fragment,m),C(T$.$$.fragment,m),C(SA.$$.fragment,m),C(M$.$$.fragment,m),C(E$.$$.fragment,m),C(w$.$$.fragment,m),C(PA.$$.fragment,m),C(A$.$$.fragment,m),C(VA.$$.fragment,m),C(L$.$$.fragment,m),C(y$.$$.fragment,m),C($$.$$.fragment,m),C(zA.$$.fragment,m),C(k$.$$.fragment,m),C(e6.$$.fragment,m),C(S$.$$.fragment,m),C(R$.$$.fragment,m),C(B$.$$.fragment,m),C(r6.$$.fragment,m),C(I$.$$.fragment,m),C(a6.$$.fragment,m),C(N$.$$.fragment,m),C(q$.$$.fragment,m),C(D$.$$.fragment,m),C(s6.$$.fragment,m),C(G$.$$.fragment,m),C(d6.$$.fragment,m),C(V$.$$.fragment,m),C(X$.$$.fragment,m),C(Q$.$$.fragment,m),C(m6.$$.fragment,m),C(W$.$$.fragment,m),C(g6.$$.fragment,m),yXe=!1},d(m){t(g),m&&t(v),m&&t(u),w(d),m&&t(xm),m&&t(at),m&&t(Oe),m&&t(Qe),m&&t(km),w(xa,m),m&&t(We),m&&t(Ae),m&&t(Co),m&&t($a),m&&t(EOe),m&&t($i),w(q7),m&&t(COe),m&&t(Nn),m&&t(wOe),w(j7,m),m&&t(AOe),m&&t(bS),m&&t(LOe),w(Pm,m),m&&t(yOe),m&&t(ki),w(D7),m&&t(xOe),m&&t(wo),w(G7),w(X7),w(zg),w(z7),m&&t($Oe),m&&t(Ri),w(Q7),m&&t(kOe),m&&t(Ao),w(W7),w(J7),w(Lh),w(Y7),m&&t(SOe),m&&t(Pi),w(K7),m&&t(ROe),m&&t(Lo),w(Z7),w(ry),w(du),w(cu),w(ty),m&&t(POe),m&&t(Bi),w(ay),m&&t(BOe),m&&t(yo),w(ny),w(iy),w(ku),w(Su),w(dy),m&&t(IOe),m&&t(Ni),w(cy),m&&t(NOe),m&&t(xo),w(my),w(gy),w(Bu),w(hy),w(N_),m&&t(qOe),m&&t(Di),w(uy),m&&t(jOe),m&&t($o),w(py),w(by),w(j_),w(vy),w(k2),m&&t(DOe),m&&t(Vi),w(Fy),m&&t(GOe),m&&t(ko),w(Ty),w(Ey),w(R2),w(Cy),w(Fb),m&&t(OOe),m&&t(Qi),w(wy),m&&t(VOe),m&&t(So),w(Ay),w(yy),w(Mb),w(xy),w(lv),m&&t(XOe),m&&t(Ui),w($y),m&&t(zOe),m&&t(Ro),w(ky),w(Ry),w(dv),w(Py),w(yv),m&&t(QOe),m&&t(Ki),w(By),m&&t(WOe),m&&t(Po),w(Iy),w(qy),w($v),w(jy),w(L1),m&&t(HOe),m&&t(od),w(Dy),m&&t(UOe),m&&t(Bo),w(Gy),w(Vy),w(x1),w(Xy),w(lF),m&&t(JOe),m&&t(ad),w(zy),m&&t(YOe),m&&t(Io),w(Qy),w(Hy),w(dF),w(Uy),w(_F),m&&t(KOe),m&&t(ld),w(Jy),m&&t(ZOe),m&&t(qo),w(Yy),w(Zy),w(vF),w(e8),w(tT),m&&t(eVe),m&&t(cd),w(o8),m&&t(oVe),m&&t(jo),w(r8),w(a8),w(nT),w(n8),w(HT),m&&t(rVe),m&&t(gd),w(s8),m&&t(tVe),m&&t(Do),w(l8),w(d8),w(JT),w(c8),w(ZT),m&&t(aVe),m&&t(pd),w(m8),m&&t(nVe),m&&t(Go),w(f8),w(h8),w(oM),w(u8),w(uM),m&&t(sVe),m&&t(vd),w(p8),m&&t(lVe),m&&t(Oo),w(_8),w(v8),w(_M),w(F8),w(FM),m&&t(iVe),m&&t(Md),w(T8),m&&t(dVe),m&&t(Vo),w(M8),w(C8),w(MM),w(w8),w(wM),m&&t(cVe),m&&t(wd),w(A8),m&&t(mVe),m&&t(Xo),w(L8),w(x8),w(LM),w($8),w(qM),m&&t(fVe),m&&t(yd),w(k8),m&&t(gVe),m&&t(zo),w(S8),w(P8),w(DM),w(B8),w(WM),m&&t(hVe),m&&t(kd),w(I8),m&&t(uVe),m&&t(Qo),w(N8),w(j8),w(UM),w(D8),w(lE),m&&t(pVe),m&&t(Pd),w(G8),m&&t(_Ve),m&&t(Wo),w(O8),w(X8),w(dE),w(z8),w(gE),m&&t(bVe),m&&t(Nd),w(W8),m&&t(vVe),m&&t(Ho),w(H8),w(J8),w(uE),w(Y8),w(ME),m&&t(FVe),m&&t(Dd),w(K8),m&&t(TVe),m&&t(Uo),w(Z8),w(o9),w(CE),w(r9),w(xE),m&&t(MVe),m&&t(Xd),w(t9),m&&t(EVe),m&&t(Jo),w(a9),w(s9),w(kE),w(l9),w(BE),m&&t(CVe),m&&t(Wd),w(d9),m&&t(wVe),m&&t(Yo),w(c9),w(f9),w(NE),w(g9),w(DE),m&&t(AVe),m&&t(Jd),w(h9),m&&t(LVe),m&&t(Ko),w(u9),w(_9),w(OE),w(b9),w(HE),m&&t(yVe),m&&t(Zd),w(v9),m&&t(xVe),m&&t(Zo),w(F9),w(M9),w(JE),w(E9),w(ZE),m&&t($Ve),m&&t(rc),w(C9),m&&t(kVe),m&&t(er),w(w9),w(L9),w(o4),w(y9),w(H4),m&&t(SVe),m&&t(nc),w(x9),m&&t(RVe),m&&t(or),w($9),w(S9),w(J4),w(R9),w(FC),m&&t(PVe),m&&t(ic),w(P9),m&&t(BVe),m&&t(rr),w(B9),w(N9),w(MC),w(q9),w(IC),m&&t(IVe),m&&t(mc),w(j9),m&&t(NVe),m&&t(tr),w(D9),w(O9),w(qC),w(V9),w(VC),m&&t(qVe),m&&t(hc),w(X9),m&&t(jVe),m&&t(ar),w(z9),w(W9),w(zC),w(H9),w(f5),m&&t(DVe),m&&t(_c),w(U9),m&&t(GVe),m&&t(nr),w(J9),w(K9),w(h5),w(Z9),w(w5),m&&t(OVe),m&&t(Fc),w(ex),m&&t(VVe),m&&t(sr),w(ox),w(tx),w(L5),w(ax),w(e3),m&&t(XVe),m&&t(Ec),w(nx),m&&t(zVe),m&&t(lr),w(sx),w(ix),w(r3),w(dx),w(F3),m&&t(QVe),m&&t(Ac),w(cx),m&&t(WVe),m&&t(ir),w(mx),w(gx),w(M3),w(hx),w(w3),m&&t(HVe),m&&t(xc),w(px),m&&t(UVe),m&&t(dr),w(_x),w(vx),w(L3),w(Fx),w(x3),m&&t(JVe),m&&t(Sc),w(Tx),m&&t(YVe),m&&t(cr),w(Mx),w(Cx),w(k3),w(wx),w(K3),m&&t(KVe),m&&t(Bc),w(Ax),m&&t(ZVe),m&&t(mr),w(Lx),w(xx),w(e0),w($x),w(T0),m&&t(eXe),m&&t(qc),w(kx),m&&t(oXe),m&&t(fr),w(Sx),w(Px),w(E0),w(Bx),w(w0),m&&t(rXe),m&&t(Gc),w(Ix),m&&t(tXe),m&&t(gr),w(Nx),w(jx),w(L0),w(Dx),w(x0),m&&t(aXe),m&&t(Xc),w(Gx),m&&t(nXe),m&&t(hr),w(Ox),w(Xx),w(k0),w(zx),w(nw),m&&t(sXe),m&&t(Wc),w(Qx),m&&t(lXe),m&&t(ur),w(Wx),w(Ux),w(lw),w(Jx),w(bw),m&&t(iXe),m&&t(Jc),w(Yx),m&&t(dXe),m&&t(pr),w(Kx),w(e$),w(Fw),w(o$),w(Pw),m&&t(cXe),m&&t(Zc),w(r$),m&&t(mXe),m&&t(_r),w(t$),w(n$),w(Iw),w(s$),w(Ww),m&&t(fXe),m&&t(rm),w(l$),m&&t(gXe),m&&t(br),w(i$),w(c$),w(Uw),w(m$),w(sA),m&&t(hXe),m&&t(nm),w(f$),m&&t(uXe),m&&t(vr),w(g$),w(u$),w(iA),w(p$),w(vA),m&&t(pXe),m&&t(im),w(_$),m&&t(_Xe),m&&t(Fr),w(b$),w(F$),w(TA),w(T$),w(SA),m&&t(bXe),m&&t(mm),w(M$),m&&t(vXe),m&&t(Tr),w(E$),w(w$),w(PA),w(A$),w(VA),m&&t(FXe),m&&t(hm),w(L$),m&&t(TXe),m&&t(Mr),w(y$),w($$),w(zA),w(k$),w(e6),m&&t(MXe),m&&t(_m),w(S$),m&&t(EXe),m&&t(Er),w(R$),w(B$),w(r6),w(I$),w(a6),m&&t(CXe),m&&t(Fm),w(N$),m&&t(wXe),m&&t(Cr),w(q$),w(D$),w(s6),w(G$),w(d6),m&&t(AXe),m&&t(Em),w(V$),m&&t(LXe),m&&t(wr),w(X$),w(Q$),w(m6),w(W$),w(g6)}}}const EXt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForVisualQuestionAnswering",title:"AutoModelForVisualQuestionAnswering"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function CXt($){return MOt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class kXt extends bOt{constructor(g){super();vOt(this,g,CXt,MXt,FOt,{})}}export{kXt as default,EXt as metadata};
