import{S as zta,i as Wta,s as Qta,e as a,k as l,w as F,t as o,M as Uta,c as n,d as t,m as i,a as s,x as T,h as r,b as c,G as e,g as b,y as M,q as E,o as C,B as w,v as Hta,L as N}from"../../chunks/vendor-hf-doc-builder.js";import{T as Tft}from"../../chunks/Tip-hf-doc-builder.js";import{D as R}from"../../chunks/Docstring-hf-doc-builder.js";import{C as P}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as oe}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as I}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function Jta($){let g,v,u,f,p,d,h,Ao,Oi,Zm,mt,Vi,Xi,u8,ef,Oe,Qe,zi,Xn,p8,zn,Wn,_8,Wi,Qn,b8,Qi,of,ja;return{c(){g=a("p"),v=o("If your "),u=a("code"),f=o("NewModelConfig"),p=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Ao=o(`, make sure its
`),Oi=a("code"),Zm=o("model_type"),mt=o(" attribute is set to the same key you use when registering the config (here "),Vi=a("code"),Xi=o('"new-model"'),u8=o(")."),ef=l(),Oe=a("p"),Qe=o("Likewise, if your "),zi=a("code"),Xn=o("NewModel"),p8=o(" is a subclass of "),zn=a("a"),Wn=o("PreTrainedModel"),_8=o(`, make sure its
`),Wi=a("code"),Qn=o("config_class"),b8=o(` attribute is set to the same class you use when registering the model (here
`),Qi=a("code"),of=o("NewModelConfig"),ja=o(")."),this.h()},l(Ue){g=n(Ue,"P",{});var Ae=s(g);v=r(Ae,"If your "),u=n(Ae,"CODE",{});var dP=s(u);f=r(dP,"NewModelConfig"),dP.forEach(t),p=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var Ui=s(d);h=r(Ui,"PretrainedConfig"),Ui.forEach(t),Ao=r(Ae,`, make sure its
`),Oi=n(Ae,"CODE",{});var cP=s(Oi);Zm=r(cP,"model_type"),cP.forEach(t),mt=r(Ae," attribute is set to the same key you use when registering the config (here "),Vi=n(Ae,"CODE",{});var mP=s(Vi);Xi=r(mP,'"new-model"'),mP.forEach(t),u8=r(Ae,")."),Ae.forEach(t),ef=i(Ue),Oe=n(Ue,"P",{});var Lo=s(Oe);Qe=r(Lo,"Likewise, if your "),zi=n(Lo,"CODE",{});var Da=s(zi);Xn=r(Da,"NewModel"),Da.forEach(t),p8=r(Lo," is a subclass of "),zn=n(Lo,"A",{href:!0});var fP=s(zn);Wn=r(fP,"PreTrainedModel"),fP.forEach(t),_8=r(Lo,`, make sure its
`),Wi=n(Lo,"CODE",{});var rf=s(Wi);Qn=r(rf,"config_class"),rf.forEach(t),b8=r(Lo,` attribute is set to the same class you use when registering the model (here
`),Qi=n(Lo,"CODE",{});var gP=s(Qi);of=r(gP,"NewModelConfig"),gP.forEach(t),ja=r(Lo,")."),Lo.forEach(t),this.h()},h(){c(zn,"href","/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel")},m(Ue,Ae){b(Ue,g,Ae),e(g,v),e(g,u),e(u,f),e(g,p),e(g,d),e(d,h),e(g,Ao),e(g,Oi),e(Oi,Zm),e(g,mt),e(g,Vi),e(Vi,Xi),e(g,u8),b(Ue,ef,Ae),b(Ue,Oe,Ae),e(Oe,Qe),e(Oe,zi),e(zi,Xn),e(Oe,p8),e(Oe,zn),e(zn,Wn),e(Oe,_8),e(Oe,Wi),e(Wi,Qn),e(Oe,b8),e(Oe,Qi),e(Qi,of),e(Oe,ja)},d(Ue){Ue&&t(g),Ue&&t(ef),Ue&&t(Oe)}}}function Yta($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Kta($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")

# Download vocabulary from huggingface.co and define model-specific arguments
tokenizer = AutoTokenizer.from_pretrained("roberta-base", add_prefix_space=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and define model-specific arguments</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;roberta-base&quot;</span>, add_prefix_space=<span class="hljs-literal">True</span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Zta($){let g,v,u,f,p;return{c(){g=a("p"),v=o("Passing "),u=a("code"),f=o("use_auth_token=True"),p=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),u=n(h,"CODE",{});var Ao=s(u);f=r(Ao,"use_auth_token=True"),Ao.forEach(t),p=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,u),e(u,f),e(g,p)},d(d){d&&t(g)}}}function eaa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function oaa($){let g,v,u,f,p;return{c(){g=a("p"),v=o("Passing "),u=a("code"),f=o("use_auth_token=True"),p=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),u=n(h,"CODE",{});var Ao=s(u);f=r(Ao,"use_auth_token=True"),Ao.forEach(t),p=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,u),e(u,f),e(g,p)},d(d){d&&t(g)}}}function raa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function taa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function aaa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function naa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function saa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function laa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function iaa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function daa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function caa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function maa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function faa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function gaa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function haa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function uaa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function paa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function _aa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function baa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function vaa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Faa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Taa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Maa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Eaa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Caa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function waa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Aaa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Laa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForVideoClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVideoClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVideoClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVideoClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function yaa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForVideoClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVideoClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVideoClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVideoClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVideoClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVideoClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVideoClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVideoClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function xaa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function $aa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function kaa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("dandelin/vilt-b32-finetuned-vqa")
model = AutoModelForVisualQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Saa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa")

# Update configuration during loading
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/vilt_tf_model_config.json")
model = AutoModelForVisualQuestionAnswering.from_pretrained(
    "./tf_model/vilt_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/vilt_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/vilt_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Raa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Paa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Baa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Iaa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Naa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function qaa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function jaa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Daa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Gaa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Oaa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Vaa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Xaa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function zaa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Waa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Qaa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Uaa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Haa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Jaa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Yaa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Kaa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Zaa($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function ena($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function ona($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function rna($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function tna($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function ana($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function nna($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function sna($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function lna($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function ina($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSemanticSegmentation.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function dna($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function cna($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function mna($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function fna($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function gna($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function hna($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function una($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function pna($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function _na($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function bna($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function vna($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Fna($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Tna($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Mna($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Ena($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Cna($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function wna($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Ana($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Lna($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function yna($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function xna($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function $na($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function kna($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Sna($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Rna($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Pna($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Bna($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Ina($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Nna($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function qna($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function jna($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Dna($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Gna($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Ona($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Vna($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Xna($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function zna($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Wna($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Qna($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Una($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Hna($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Jna($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Yna($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Kna($){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:N,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Zna($){let g,v,u,f,p,d,h,Ao,Oi,Zm,mt,Vi,Xi,u8,ef,Oe,Qe,zi,Xn,p8,zn,Wn,_8,Wi,Qn,b8,Qi,of,ja,Ue,Ae,dP,Ui,cP,mP,Lo,Da,fP,rf,gP,PKe,cUe,Hi,tf,Use,v8,BKe,Hse,IKe,mUe,Un,NKe,Jse,qKe,jKe,Yse,DKe,GKe,fUe,F8,gUe,hP,OKe,hUe,af,uUe,Ji,nf,Kse,T8,VKe,Zse,XKe,pUe,yo,M8,zKe,E8,WKe,uP,QKe,UKe,HKe,C8,JKe,ele,YKe,KKe,ZKe,kr,w8,eZe,ole,oZe,rZe,Yi,tZe,rle,aZe,nZe,tle,sZe,lZe,iZe,A,sf,ale,dZe,cZe,pP,mZe,fZe,gZe,lf,nle,hZe,uZe,_P,pZe,_Ze,bZe,df,sle,vZe,FZe,bP,TZe,MZe,EZe,cf,lle,CZe,wZe,vP,AZe,LZe,yZe,mf,ile,xZe,$Ze,FP,kZe,SZe,RZe,ff,dle,PZe,BZe,TP,IZe,NZe,qZe,gf,cle,jZe,DZe,MP,GZe,OZe,VZe,hf,mle,XZe,zZe,EP,WZe,QZe,UZe,uf,fle,HZe,JZe,CP,YZe,KZe,ZZe,pf,gle,eeo,oeo,wP,reo,teo,aeo,_f,hle,neo,seo,AP,leo,ieo,deo,bf,ule,ceo,meo,LP,feo,geo,heo,vf,ple,ueo,peo,yP,_eo,beo,veo,Ff,_le,Feo,Teo,xP,Meo,Eeo,Ceo,Tf,ble,weo,Aeo,$P,Leo,yeo,xeo,Mf,vle,$eo,keo,kP,Seo,Reo,Peo,Ef,Fle,Beo,Ieo,SP,Neo,qeo,jeo,Cf,Tle,Deo,Geo,RP,Oeo,Veo,Xeo,wf,Mle,zeo,Weo,PP,Qeo,Ueo,Heo,Af,Ele,Jeo,Yeo,BP,Keo,Zeo,eoo,Lf,Cle,ooo,roo,IP,too,aoo,noo,yf,wle,soo,loo,NP,ioo,doo,coo,xf,Ale,moo,foo,qP,goo,hoo,uoo,$f,Lle,poo,_oo,jP,boo,voo,Foo,kf,yle,Too,Moo,DP,Eoo,Coo,woo,Sf,xle,Aoo,Loo,GP,yoo,xoo,$oo,Rf,$le,koo,Soo,OP,Roo,Poo,Boo,Pf,kle,Ioo,Noo,VP,qoo,joo,Doo,Bf,Sle,Goo,Ooo,XP,Voo,Xoo,zoo,If,Rle,Woo,Qoo,zP,Uoo,Hoo,Joo,Nf,Ple,Yoo,Koo,WP,Zoo,ero,oro,qf,Ble,rro,tro,QP,aro,nro,sro,jf,Ile,lro,iro,UP,dro,cro,mro,Df,Nle,fro,gro,HP,hro,uro,pro,Gf,qle,_ro,bro,JP,vro,Fro,Tro,Of,jle,Mro,Ero,YP,Cro,wro,Aro,Vf,Dle,Lro,yro,KP,xro,$ro,kro,Xf,Gle,Sro,Rro,ZP,Pro,Bro,Iro,zf,Ole,Nro,qro,eB,jro,Dro,Gro,Wf,Vle,Oro,Vro,oB,Xro,zro,Wro,Qf,Xle,Qro,Uro,rB,Hro,Jro,Yro,Uf,zle,Kro,Zro,tB,eto,oto,rto,Hf,Wle,tto,ato,aB,nto,sto,lto,Jf,Qle,ito,dto,nB,cto,mto,fto,Yf,Ule,gto,hto,sB,uto,pto,_to,Kf,Hle,bto,vto,lB,Fto,Tto,Mto,Zf,Jle,Eto,Cto,iB,wto,Ato,Lto,eg,Yle,yto,xto,dB,$to,kto,Sto,og,Kle,Rto,Pto,cB,Bto,Ito,Nto,rg,Zle,qto,jto,mB,Dto,Gto,Oto,tg,eie,Vto,Xto,fB,zto,Wto,Qto,ag,oie,Uto,Hto,gB,Jto,Yto,Kto,ng,rie,Zto,eao,hB,oao,rao,tao,sg,tie,aao,nao,uB,sao,lao,iao,lg,aie,dao,cao,pB,mao,fao,gao,ig,nie,hao,uao,_B,pao,_ao,bao,dg,sie,vao,Fao,bB,Tao,Mao,Eao,cg,lie,Cao,wao,vB,Aao,Lao,yao,mg,iie,xao,$ao,FB,kao,Sao,Rao,fg,die,Pao,Bao,TB,Iao,Nao,qao,gg,cie,jao,Dao,MB,Gao,Oao,Vao,hg,mie,Xao,zao,EB,Wao,Qao,Uao,ug,fie,Hao,Jao,CB,Yao,Kao,Zao,pg,gie,eno,ono,wB,rno,tno,ano,_g,hie,nno,sno,AB,lno,ino,dno,bg,uie,cno,mno,LB,fno,gno,hno,vg,pie,uno,pno,yB,_no,bno,vno,Fg,_ie,Fno,Tno,xB,Mno,Eno,Cno,Tg,bie,wno,Ano,$B,Lno,yno,xno,Mg,vie,$no,kno,kB,Sno,Rno,Pno,Eg,Fie,Bno,Ino,SB,Nno,qno,jno,Cg,Tie,Dno,Gno,RB,Ono,Vno,Xno,wg,Mie,zno,Wno,PB,Qno,Uno,Hno,Ag,Eie,Jno,Yno,BB,Kno,Zno,eso,Lg,Cie,oso,rso,IB,tso,aso,nso,yg,wie,sso,lso,NB,iso,dso,cso,xg,Aie,mso,fso,qB,gso,hso,uso,$g,Lie,pso,_so,jB,bso,vso,Fso,kg,yie,Tso,Mso,DB,Eso,Cso,wso,Sg,xie,Aso,Lso,GB,yso,xso,$so,Rg,$ie,kso,Sso,OB,Rso,Pso,Bso,Pg,kie,Iso,Nso,VB,qso,jso,Dso,Bg,Sie,Gso,Oso,XB,Vso,Xso,zso,Ig,Rie,Wso,Qso,zB,Uso,Hso,Jso,Ng,Pie,Yso,Kso,WB,Zso,elo,olo,qg,Bie,rlo,tlo,QB,alo,nlo,slo,jg,Iie,llo,ilo,UB,dlo,clo,mlo,Dg,Nie,flo,glo,HB,hlo,ulo,plo,Gg,qie,_lo,blo,JB,vlo,Flo,Tlo,Og,jie,Mlo,Elo,YB,Clo,wlo,Alo,Vg,Die,Llo,ylo,KB,xlo,$lo,klo,Xg,Gie,Slo,Rlo,ZB,Plo,Blo,Ilo,zg,Oie,Nlo,qlo,eI,jlo,Dlo,Glo,Wg,Vie,Olo,Vlo,oI,Xlo,zlo,Wlo,Qg,Xie,Qlo,Ulo,rI,Hlo,Jlo,Ylo,Ug,zie,Klo,Zlo,tI,eio,oio,rio,Hg,Wie,tio,aio,aI,nio,sio,lio,Jg,Qie,iio,dio,nI,cio,mio,fio,Yg,Uie,gio,hio,sI,uio,pio,_io,Kg,Hie,bio,vio,lI,Fio,Tio,Mio,Zg,Jie,Eio,Cio,iI,wio,Aio,Lio,eh,Yie,yio,xio,dI,$io,kio,Sio,oh,Kie,Rio,Pio,cI,Bio,Iio,Nio,rh,Zie,qio,jio,mI,Dio,Gio,Oio,th,ede,Vio,Xio,fI,zio,Wio,Qio,ah,ode,Uio,Hio,gI,Jio,Yio,Kio,nh,rde,Zio,edo,hI,odo,rdo,tdo,sh,tde,ado,ndo,uI,sdo,ldo,ido,lh,ade,ddo,cdo,pI,mdo,fdo,gdo,ih,nde,hdo,udo,_I,pdo,_do,bdo,dh,sde,vdo,Fdo,bI,Tdo,Mdo,Edo,ch,lde,Cdo,wdo,vI,Ado,Ldo,ydo,mh,ide,xdo,$do,FI,kdo,Sdo,Rdo,fh,dde,Pdo,Bdo,TI,Ido,Ndo,qdo,gh,cde,jdo,Ddo,MI,Gdo,Odo,Vdo,hh,mde,Xdo,zdo,EI,Wdo,Qdo,Udo,uh,fde,Hdo,Jdo,CI,Ydo,Kdo,Zdo,ph,gde,eco,oco,wI,rco,tco,aco,_h,hde,nco,sco,AI,lco,ico,dco,bh,ude,cco,mco,LI,fco,gco,hco,vh,pde,uco,pco,yI,_co,bco,vco,Fh,_de,Fco,Tco,xI,Mco,Eco,Cco,Th,wco,Mh,A8,Aco,bde,Lco,_Ue,Ki,Eh,vde,L8,yco,Fde,xco,bUe,xo,y8,$co,x8,kco,$I,Sco,Rco,Pco,$8,Bco,Tde,Ico,Nco,qco,Sr,k8,jco,Mde,Dco,Gco,Ga,Oco,Ede,Vco,Xco,Cde,zco,Wco,wde,Qco,Uco,Hco,k,Hn,Ade,Jco,Yco,kI,Kco,Zco,SI,emo,omo,rmo,Jn,Lde,tmo,amo,RI,nmo,smo,PI,lmo,imo,dmo,Yn,yde,cmo,mmo,BI,fmo,gmo,II,hmo,umo,pmo,Ch,xde,_mo,bmo,NI,vmo,Fmo,Tmo,Kn,$de,Mmo,Emo,qI,Cmo,wmo,jI,Amo,Lmo,ymo,wh,kde,xmo,$mo,DI,kmo,Smo,Rmo,Ah,Sde,Pmo,Bmo,GI,Imo,Nmo,qmo,Lh,Rde,jmo,Dmo,OI,Gmo,Omo,Vmo,Zn,Pde,Xmo,zmo,VI,Wmo,Qmo,XI,Umo,Hmo,Jmo,es,Bde,Ymo,Kmo,zI,Zmo,efo,WI,ofo,rfo,tfo,os,Ide,afo,nfo,QI,sfo,lfo,UI,ifo,dfo,cfo,yh,Nde,mfo,ffo,HI,gfo,hfo,ufo,xh,qde,pfo,_fo,JI,bfo,vfo,Ffo,$h,jde,Tfo,Mfo,YI,Efo,Cfo,wfo,rs,Dde,Afo,Lfo,KI,yfo,xfo,ZI,$fo,kfo,Sfo,kh,Gde,Rfo,Pfo,eN,Bfo,Ifo,Nfo,ts,Ode,qfo,jfo,oN,Dfo,Gfo,rN,Ofo,Vfo,Xfo,as,Vde,zfo,Wfo,tN,Qfo,Ufo,aN,Hfo,Jfo,Yfo,ns,Xde,Kfo,Zfo,nN,ego,ogo,sN,rgo,tgo,ago,ss,zde,ngo,sgo,lN,lgo,igo,iN,dgo,cgo,mgo,Sh,Wde,fgo,ggo,dN,hgo,ugo,pgo,ls,Qde,_go,bgo,cN,vgo,Fgo,mN,Tgo,Mgo,Ego,is,Ude,Cgo,wgo,fN,Ago,Lgo,gN,ygo,xgo,$go,ds,Hde,kgo,Sgo,hN,Rgo,Pgo,uN,Bgo,Igo,Ngo,cs,Jde,qgo,jgo,pN,Dgo,Ggo,_N,Ogo,Vgo,Xgo,ms,Yde,zgo,Wgo,bN,Qgo,Ugo,vN,Hgo,Jgo,Ygo,fs,Kde,Kgo,Zgo,FN,eho,oho,TN,rho,tho,aho,Rh,Zde,nho,sho,MN,lho,iho,dho,gs,ece,cho,mho,EN,fho,gho,CN,hho,uho,pho,Ph,oce,_ho,bho,wN,vho,Fho,Tho,hs,rce,Mho,Eho,AN,Cho,who,LN,Aho,Lho,yho,us,tce,xho,$ho,yN,kho,Sho,xN,Rho,Pho,Bho,ps,ace,Iho,Nho,$N,qho,jho,kN,Dho,Gho,Oho,Bh,nce,Vho,Xho,SN,zho,Who,Qho,_s,sce,Uho,Hho,RN,Jho,Yho,PN,Kho,Zho,euo,bs,lce,ouo,ruo,BN,tuo,auo,IN,nuo,suo,luo,vs,ice,iuo,duo,NN,cuo,muo,qN,fuo,guo,huo,Ih,dce,uuo,puo,jN,_uo,buo,vuo,Fs,cce,Fuo,Tuo,DN,Muo,Euo,GN,Cuo,wuo,Auo,Ts,mce,Luo,yuo,ON,xuo,$uo,VN,kuo,Suo,Ruo,Ms,fce,Puo,Buo,XN,Iuo,Nuo,zN,quo,juo,Duo,Es,gce,Guo,Ouo,WN,Vuo,Xuo,QN,zuo,Wuo,Quo,Cs,hce,Uuo,Huo,UN,Juo,Yuo,HN,Kuo,Zuo,epo,ws,uce,opo,rpo,JN,tpo,apo,YN,npo,spo,lpo,As,pce,ipo,dpo,KN,cpo,mpo,ZN,fpo,gpo,hpo,Ls,_ce,upo,ppo,eq,_po,bpo,oq,vpo,Fpo,Tpo,Nh,bce,Mpo,Epo,rq,Cpo,wpo,Apo,ys,vce,Lpo,ypo,tq,xpo,$po,aq,kpo,Spo,Rpo,qh,Fce,Ppo,Bpo,nq,Ipo,Npo,qpo,jh,Tce,jpo,Dpo,sq,Gpo,Opo,Vpo,xs,Mce,Xpo,zpo,lq,Wpo,Qpo,iq,Upo,Hpo,Jpo,$s,Ece,Ypo,Kpo,dq,Zpo,e_o,cq,o_o,r_o,t_o,ks,Cce,a_o,n_o,mq,s_o,l_o,fq,i_o,d_o,c_o,Dh,wce,m_o,f_o,gq,g_o,h_o,u_o,Ss,Ace,p_o,__o,hq,b_o,v_o,uq,F_o,T_o,M_o,Rs,Lce,E_o,C_o,pq,w_o,A_o,_q,L_o,y_o,x_o,Ps,yce,$_o,k_o,bq,S_o,R_o,vq,P_o,B_o,I_o,Bs,xce,N_o,q_o,Fq,j_o,D_o,Tq,G_o,O_o,V_o,Is,$ce,X_o,z_o,Mq,W_o,Q_o,Eq,U_o,H_o,J_o,Ns,kce,Y_o,K_o,Cq,Z_o,e2o,wq,o2o,r2o,t2o,qs,Sce,a2o,n2o,Aq,s2o,l2o,Lq,i2o,d2o,c2o,js,Rce,m2o,f2o,yq,g2o,h2o,xq,u2o,p2o,_2o,Gh,Pce,b2o,v2o,$q,F2o,T2o,M2o,Ds,Bce,E2o,C2o,kq,w2o,A2o,Sq,L2o,y2o,x2o,Gs,Ice,$2o,k2o,Rq,S2o,R2o,Pq,P2o,B2o,I2o,Oh,Nce,N2o,q2o,Bq,j2o,D2o,G2o,Vh,qce,O2o,V2o,Iq,X2o,z2o,W2o,Xh,jce,Q2o,U2o,Nq,H2o,J2o,Y2o,zh,Dce,K2o,Z2o,qq,ebo,obo,rbo,Os,Gce,tbo,abo,jq,nbo,sbo,Dq,lbo,ibo,dbo,Wh,Oce,cbo,mbo,Gq,fbo,gbo,hbo,Vs,Vce,ubo,pbo,Oq,_bo,bbo,Vq,vbo,Fbo,Tbo,Xs,Xce,Mbo,Ebo,Xq,Cbo,wbo,zq,Abo,Lbo,ybo,zs,zce,xbo,$bo,Wq,kbo,Sbo,Qq,Rbo,Pbo,Bbo,Ws,Wce,Ibo,Nbo,Uq,qbo,jbo,Hq,Dbo,Gbo,Obo,Qs,Qce,Vbo,Xbo,Jq,zbo,Wbo,Yq,Qbo,Ubo,Hbo,Us,Uce,Jbo,Ybo,Kq,Kbo,Zbo,Zq,evo,ovo,rvo,Qh,Hce,tvo,avo,ej,nvo,svo,lvo,Uh,Jce,ivo,dvo,oj,cvo,mvo,fvo,Hs,Yce,gvo,hvo,rj,uvo,pvo,tj,_vo,bvo,vvo,Js,Kce,Fvo,Tvo,aj,Mvo,Evo,nj,Cvo,wvo,Avo,Ys,Zce,Lvo,yvo,sj,xvo,$vo,lj,kvo,Svo,Rvo,Hh,eme,Pvo,Bvo,ij,Ivo,Nvo,qvo,Jh,ome,jvo,Dvo,dj,Gvo,Ovo,Vvo,Yh,rme,Xvo,zvo,cj,Wvo,Qvo,Uvo,Ks,tme,Hvo,Jvo,mj,Yvo,Kvo,fj,Zvo,e1o,o1o,Zs,ame,r1o,t1o,gj,a1o,n1o,hj,s1o,l1o,i1o,Kh,nme,d1o,c1o,uj,m1o,f1o,g1o,Zh,sme,h1o,u1o,pj,p1o,_1o,b1o,eu,lme,v1o,F1o,_j,T1o,M1o,E1o,el,ime,C1o,w1o,bj,A1o,L1o,vj,y1o,x1o,$1o,ou,dme,k1o,S1o,Fj,R1o,P1o,B1o,ru,cme,I1o,N1o,Tj,q1o,j1o,D1o,ol,mme,G1o,O1o,Mj,V1o,X1o,Ej,z1o,W1o,Q1o,rl,fme,U1o,H1o,Cj,J1o,Y1o,wj,K1o,Z1o,eFo,tl,gme,oFo,rFo,Aj,tFo,aFo,Lj,nFo,sFo,lFo,al,hme,iFo,dFo,yj,cFo,mFo,xj,fFo,gFo,hFo,tu,uFo,au,S8,pFo,ume,_Fo,vUe,Zi,nu,pme,R8,bFo,_me,vFo,FUe,$o,P8,FFo,B8,TFo,$j,MFo,EFo,CFo,I8,wFo,bme,AFo,LFo,yFo,He,N8,xFo,vme,$Fo,kFo,Oa,SFo,Fme,RFo,PFo,Tme,BFo,IFo,Mme,NFo,qFo,jFo,Q,su,Eme,DFo,GFo,kj,OFo,VFo,XFo,lu,Cme,zFo,WFo,Sj,QFo,UFo,HFo,iu,wme,JFo,YFo,Rj,KFo,ZFo,eTo,du,Ame,oTo,rTo,Pj,tTo,aTo,nTo,cu,Lme,sTo,lTo,Bj,iTo,dTo,cTo,mu,yme,mTo,fTo,Ij,gTo,hTo,uTo,fu,xme,pTo,_To,Nj,bTo,vTo,FTo,gu,$me,TTo,MTo,qj,ETo,CTo,wTo,hu,kme,ATo,LTo,jj,yTo,xTo,$To,uu,Sme,kTo,STo,Dj,RTo,PTo,BTo,pu,Rme,ITo,NTo,Gj,qTo,jTo,DTo,_u,Pme,GTo,OTo,Oj,VTo,XTo,zTo,bu,Bme,WTo,QTo,Vj,UTo,HTo,JTo,vu,Ime,YTo,KTo,Xj,ZTo,eMo,oMo,Fu,Nme,rMo,tMo,zj,aMo,nMo,sMo,Tu,qme,lMo,iMo,Wj,dMo,cMo,mMo,Mu,jme,fMo,gMo,Qj,hMo,uMo,pMo,Eu,Dme,_Mo,bMo,Uj,vMo,FMo,TMo,Cu,Gme,MMo,EMo,Hj,CMo,wMo,AMo,wu,Ome,LMo,yMo,Jj,xMo,$Mo,kMo,Au,Vme,SMo,RMo,Yj,PMo,BMo,IMo,Lu,Xme,NMo,qMo,Kj,jMo,DMo,GMo,yu,zme,OMo,VMo,Zj,XMo,zMo,WMo,xu,Wme,QMo,UMo,eD,HMo,JMo,YMo,$u,Qme,KMo,ZMo,oD,eEo,oEo,rEo,ku,Ume,tEo,aEo,rD,nEo,sEo,lEo,Su,Hme,iEo,dEo,tD,cEo,mEo,fEo,Ru,Jme,gEo,hEo,aD,uEo,pEo,_Eo,Pu,Yme,bEo,vEo,nD,FEo,TEo,MEo,Bu,Kme,EEo,CEo,sD,wEo,AEo,LEo,Iu,Zme,yEo,xEo,lD,$Eo,kEo,SEo,Nu,efe,REo,PEo,iD,BEo,IEo,NEo,qu,ofe,qEo,jEo,dD,DEo,GEo,OEo,ju,rfe,VEo,XEo,cD,zEo,WEo,QEo,Du,tfe,UEo,HEo,mD,JEo,YEo,KEo,Gu,afe,ZEo,e4o,fD,o4o,r4o,t4o,Ou,nfe,a4o,n4o,gD,s4o,l4o,i4o,Vu,sfe,d4o,c4o,hD,m4o,f4o,g4o,Xu,h4o,zu,u4o,Wu,q8,p4o,lfe,_4o,TUe,ed,Qu,ife,j8,b4o,dfe,v4o,MUe,ko,D8,F4o,G8,T4o,uD,M4o,E4o,C4o,O8,w4o,cfe,A4o,L4o,y4o,Je,V8,x4o,mfe,$4o,k4o,od,S4o,ffe,R4o,P4o,gfe,B4o,I4o,N4o,ce,Uu,hfe,q4o,j4o,pD,D4o,G4o,O4o,Hu,ufe,V4o,X4o,_D,z4o,W4o,Q4o,Ju,pfe,U4o,H4o,bD,J4o,Y4o,K4o,Yu,_fe,Z4o,eCo,vD,oCo,rCo,tCo,Ku,bfe,aCo,nCo,FD,sCo,lCo,iCo,Zu,vfe,dCo,cCo,TD,mCo,fCo,gCo,ep,Ffe,hCo,uCo,MD,pCo,_Co,bCo,op,Tfe,vCo,FCo,ED,TCo,MCo,ECo,rp,Mfe,CCo,wCo,CD,ACo,LCo,yCo,tp,Efe,xCo,$Co,wD,kCo,SCo,RCo,ap,Cfe,PCo,BCo,AD,ICo,NCo,qCo,np,wfe,jCo,DCo,LD,GCo,OCo,VCo,sp,Afe,XCo,zCo,yD,WCo,QCo,UCo,lp,Lfe,HCo,JCo,xD,YCo,KCo,ZCo,ip,yfe,e3o,o3o,$D,r3o,t3o,a3o,dp,xfe,n3o,s3o,kD,l3o,i3o,d3o,cp,$fe,c3o,m3o,SD,f3o,g3o,h3o,mp,kfe,u3o,p3o,RD,_3o,b3o,v3o,fp,Sfe,F3o,T3o,PD,M3o,E3o,C3o,gp,Rfe,w3o,A3o,BD,L3o,y3o,x3o,hp,$3o,up,k3o,pp,X8,S3o,Pfe,R3o,EUe,rd,_p,Bfe,z8,P3o,Ife,B3o,CUe,So,W8,I3o,td,N3o,ID,q3o,j3o,ND,D3o,G3o,O3o,Q8,V3o,Nfe,X3o,z3o,W3o,ft,U8,Q3o,qfe,U3o,H3o,ad,J3o,jfe,Y3o,K3o,qD,Z3o,e5o,o5o,bp,r5o,Ye,H8,t5o,Dfe,a5o,n5o,Va,s5o,Gfe,l5o,i5o,Ofe,d5o,c5o,Vfe,m5o,f5o,g5o,y,vp,Xfe,h5o,u5o,jD,p5o,_5o,b5o,Fp,zfe,v5o,F5o,DD,T5o,M5o,E5o,Tp,Wfe,C5o,w5o,GD,A5o,L5o,y5o,Mp,Qfe,x5o,$5o,OD,k5o,S5o,R5o,Ep,Ufe,P5o,B5o,VD,I5o,N5o,q5o,Cp,Hfe,j5o,D5o,XD,G5o,O5o,V5o,wp,Jfe,X5o,z5o,zD,W5o,Q5o,U5o,Ap,Yfe,H5o,J5o,WD,Y5o,K5o,Z5o,Lp,Kfe,e0o,o0o,QD,r0o,t0o,a0o,yp,Zfe,n0o,s0o,UD,l0o,i0o,d0o,xp,ege,c0o,m0o,HD,f0o,g0o,h0o,$p,oge,u0o,p0o,JD,_0o,b0o,v0o,kp,rge,F0o,T0o,YD,M0o,E0o,C0o,Sp,tge,w0o,A0o,KD,L0o,y0o,x0o,Rp,age,$0o,k0o,ZD,S0o,R0o,P0o,Pp,nge,B0o,I0o,eG,N0o,q0o,j0o,Bp,sge,D0o,G0o,oG,O0o,V0o,X0o,Ip,lge,z0o,W0o,rG,Q0o,U0o,H0o,Np,ige,J0o,Y0o,tG,K0o,Z0o,ewo,qp,dge,owo,rwo,aG,two,awo,nwo,jp,cge,swo,lwo,nG,iwo,dwo,cwo,Dp,mge,mwo,fwo,sG,gwo,hwo,uwo,Gp,fge,pwo,_wo,lG,bwo,vwo,Fwo,Op,gge,Two,Mwo,iG,Ewo,Cwo,wwo,Vp,hge,Awo,Lwo,dG,ywo,xwo,$wo,Xp,uge,kwo,Swo,cG,Rwo,Pwo,Bwo,zp,pge,Iwo,Nwo,mG,qwo,jwo,Dwo,Wp,_ge,Gwo,Owo,fG,Vwo,Xwo,zwo,Qp,bge,Wwo,Qwo,gG,Uwo,Hwo,Jwo,Up,vge,Ywo,Kwo,hG,Zwo,e6o,o6o,Hp,Fge,r6o,t6o,uG,a6o,n6o,s6o,Jp,Tge,l6o,i6o,pG,d6o,c6o,m6o,Yp,Mge,f6o,g6o,_G,h6o,u6o,p6o,Kp,Ege,_6o,b6o,bG,v6o,F6o,T6o,Zp,Cge,M6o,E6o,vG,C6o,w6o,A6o,nl,wge,L6o,y6o,FG,x6o,$6o,TG,k6o,S6o,R6o,e_,Age,P6o,B6o,MG,I6o,N6o,q6o,o_,Lge,j6o,D6o,EG,G6o,O6o,V6o,r_,yge,X6o,z6o,CG,W6o,Q6o,U6o,t_,xge,H6o,J6o,wG,Y6o,K6o,Z6o,a_,$ge,eAo,oAo,AG,rAo,tAo,aAo,n_,kge,nAo,sAo,LG,lAo,iAo,dAo,s_,Sge,cAo,mAo,yG,fAo,gAo,hAo,l_,Rge,uAo,pAo,xG,_Ao,bAo,vAo,i_,Pge,FAo,TAo,$G,MAo,EAo,CAo,d_,Bge,wAo,AAo,kG,LAo,yAo,xAo,c_,Ige,$Ao,kAo,SG,SAo,RAo,PAo,m_,Nge,BAo,IAo,RG,NAo,qAo,jAo,f_,qge,DAo,GAo,PG,OAo,VAo,XAo,g_,jge,zAo,WAo,BG,QAo,UAo,HAo,h_,Dge,JAo,YAo,IG,KAo,ZAo,e7o,u_,Gge,o7o,r7o,NG,t7o,a7o,n7o,p_,Oge,s7o,l7o,qG,i7o,d7o,c7o,__,Vge,m7o,f7o,jG,g7o,h7o,u7o,b_,Xge,p7o,_7o,DG,b7o,v7o,F7o,v_,zge,T7o,M7o,GG,E7o,C7o,w7o,F_,Wge,A7o,L7o,OG,y7o,x7o,$7o,T_,Qge,k7o,S7o,VG,R7o,P7o,B7o,M_,Uge,I7o,N7o,XG,q7o,j7o,D7o,E_,Hge,G7o,O7o,zG,V7o,X7o,z7o,C_,Jge,W7o,Q7o,WG,U7o,H7o,J7o,w_,Yge,Y7o,K7o,QG,Z7o,eLo,oLo,A_,Kge,rLo,tLo,UG,aLo,nLo,sLo,L_,Zge,lLo,iLo,HG,dLo,cLo,mLo,y_,ehe,fLo,gLo,JG,hLo,uLo,pLo,x_,ohe,_Lo,bLo,YG,vLo,FLo,TLo,$_,rhe,MLo,ELo,KG,CLo,wLo,ALo,k_,the,LLo,yLo,ZG,xLo,$Lo,kLo,S_,ahe,SLo,RLo,eO,PLo,BLo,ILo,R_,nhe,NLo,qLo,oO,jLo,DLo,GLo,P_,she,OLo,VLo,rO,XLo,zLo,WLo,B_,lhe,QLo,ULo,tO,HLo,JLo,YLo,I_,ihe,KLo,ZLo,aO,eyo,oyo,ryo,N_,dhe,tyo,ayo,nO,nyo,syo,lyo,q_,che,iyo,dyo,sO,cyo,myo,fyo,j_,mhe,gyo,hyo,lO,uyo,pyo,_yo,D_,fhe,byo,vyo,iO,Fyo,Tyo,Myo,G_,ghe,Eyo,Cyo,dO,wyo,Ayo,Lyo,O_,hhe,yyo,xyo,cO,$yo,kyo,Syo,V_,uhe,Ryo,Pyo,mO,Byo,Iyo,Nyo,X_,phe,qyo,jyo,fO,Dyo,Gyo,Oyo,z_,_he,Vyo,Xyo,gO,zyo,Wyo,Qyo,W_,bhe,Uyo,Hyo,hO,Jyo,Yyo,Kyo,Q_,vhe,Zyo,e8o,uO,o8o,r8o,t8o,U_,Fhe,a8o,n8o,pO,s8o,l8o,i8o,H_,The,d8o,c8o,_O,m8o,f8o,g8o,J_,Mhe,h8o,u8o,bO,p8o,_8o,b8o,Y_,Ehe,v8o,F8o,vO,T8o,M8o,E8o,K_,Che,C8o,w8o,FO,A8o,L8o,y8o,Z_,whe,x8o,$8o,TO,k8o,S8o,R8o,e2,Ahe,P8o,B8o,MO,I8o,N8o,q8o,o2,Lhe,j8o,D8o,EO,G8o,O8o,V8o,r2,yhe,X8o,z8o,CO,W8o,Q8o,U8o,t2,xhe,H8o,J8o,wO,Y8o,K8o,Z8o,a2,$he,e9o,o9o,AO,r9o,t9o,a9o,n2,khe,n9o,s9o,LO,l9o,i9o,d9o,s2,She,c9o,m9o,yO,f9o,g9o,h9o,l2,Rhe,u9o,p9o,xO,_9o,b9o,v9o,i2,Phe,F9o,T9o,$O,M9o,E9o,C9o,d2,Bhe,w9o,A9o,kO,L9o,y9o,x9o,c2,Ihe,$9o,k9o,SO,S9o,R9o,P9o,m2,Nhe,B9o,I9o,RO,N9o,q9o,j9o,f2,qhe,D9o,G9o,PO,O9o,V9o,X9o,g2,jhe,z9o,W9o,BO,Q9o,U9o,H9o,h2,Dhe,J9o,Y9o,IO,K9o,Z9o,exo,u2,Ghe,oxo,rxo,NO,txo,axo,nxo,p2,Ohe,sxo,lxo,qO,ixo,dxo,cxo,_2,Vhe,mxo,fxo,jO,gxo,hxo,uxo,b2,Xhe,pxo,_xo,DO,bxo,vxo,Fxo,v2,zhe,Txo,Mxo,GO,Exo,Cxo,wxo,F2,Whe,Axo,Lxo,OO,yxo,xxo,$xo,T2,Qhe,kxo,Sxo,VO,Rxo,Pxo,Bxo,M2,Uhe,Ixo,Nxo,XO,qxo,jxo,Dxo,E2,Hhe,Gxo,Oxo,zO,Vxo,Xxo,zxo,C2,Jhe,Wxo,Qxo,WO,Uxo,Hxo,Jxo,w2,Yhe,Yxo,Kxo,QO,Zxo,e$o,o$o,A2,r$o,Khe,t$o,a$o,Zhe,n$o,s$o,L2,wUe,nd,y2,eue,J8,l$o,oue,i$o,AUe,Ro,Y8,d$o,sd,c$o,UO,m$o,f$o,HO,g$o,h$o,u$o,K8,p$o,rue,_$o,b$o,v$o,gt,Z8,F$o,tue,T$o,M$o,ld,E$o,aue,C$o,w$o,JO,A$o,L$o,y$o,x2,x$o,Ke,e9,$$o,nue,k$o,S$o,Xa,R$o,sue,P$o,B$o,lue,I$o,N$o,iue,q$o,j$o,D$o,G,$2,due,G$o,O$o,YO,V$o,X$o,z$o,k2,cue,W$o,Q$o,KO,U$o,H$o,J$o,S2,mue,Y$o,K$o,ZO,Z$o,eko,oko,R2,fue,rko,tko,eV,ako,nko,sko,P2,gue,lko,iko,oV,dko,cko,mko,B2,hue,fko,gko,rV,hko,uko,pko,I2,uue,_ko,bko,tV,vko,Fko,Tko,N2,pue,Mko,Eko,aV,Cko,wko,Ako,q2,_ue,Lko,yko,nV,xko,$ko,kko,j2,bue,Sko,Rko,sV,Pko,Bko,Iko,D2,vue,Nko,qko,lV,jko,Dko,Gko,G2,Fue,Oko,Vko,iV,Xko,zko,Wko,O2,Tue,Qko,Uko,dV,Hko,Jko,Yko,V2,Mue,Kko,Zko,cV,eSo,oSo,rSo,X2,Eue,tSo,aSo,mV,nSo,sSo,lSo,z2,Cue,iSo,dSo,fV,cSo,mSo,fSo,W2,wue,gSo,hSo,gV,uSo,pSo,_So,Q2,Aue,bSo,vSo,hV,FSo,TSo,MSo,U2,Lue,ESo,CSo,uV,wSo,ASo,LSo,H2,yue,ySo,xSo,pV,$So,kSo,SSo,J2,xue,RSo,PSo,_V,BSo,ISo,NSo,Y2,$ue,qSo,jSo,bV,DSo,GSo,OSo,K2,kue,VSo,XSo,vV,zSo,WSo,QSo,Z2,Sue,USo,HSo,FV,JSo,YSo,KSo,eb,Rue,ZSo,eRo,TV,oRo,rRo,tRo,ob,Pue,aRo,nRo,MV,sRo,lRo,iRo,rb,Bue,dRo,cRo,EV,mRo,fRo,gRo,tb,Iue,hRo,uRo,CV,pRo,_Ro,bRo,ab,Nue,vRo,FRo,wV,TRo,MRo,ERo,nb,que,CRo,wRo,AV,ARo,LRo,yRo,sb,jue,xRo,$Ro,LV,kRo,SRo,RRo,lb,Due,PRo,BRo,yV,IRo,NRo,qRo,ib,Gue,jRo,DRo,xV,GRo,ORo,VRo,db,Oue,XRo,zRo,$V,WRo,QRo,URo,cb,Vue,HRo,JRo,kV,YRo,KRo,ZRo,mb,Xue,ePo,oPo,SV,rPo,tPo,aPo,fb,zue,nPo,sPo,RV,lPo,iPo,dPo,gb,Wue,cPo,mPo,PV,fPo,gPo,hPo,hb,Que,uPo,pPo,BV,_Po,bPo,vPo,ub,Uue,FPo,TPo,IV,MPo,EPo,CPo,pb,Hue,wPo,APo,NV,LPo,yPo,xPo,_b,Jue,$Po,kPo,qV,SPo,RPo,PPo,bb,Yue,BPo,IPo,jV,NPo,qPo,jPo,vb,Kue,DPo,GPo,DV,OPo,VPo,XPo,Fb,Zue,zPo,WPo,GV,QPo,UPo,HPo,Tb,epe,JPo,YPo,OV,KPo,ZPo,eBo,Mb,ope,oBo,rBo,VV,tBo,aBo,nBo,Eb,sBo,rpe,lBo,iBo,tpe,dBo,cBo,Cb,LUe,id,wb,ape,o9,mBo,npe,fBo,yUe,Po,r9,gBo,dd,hBo,XV,uBo,pBo,zV,_Bo,bBo,vBo,t9,FBo,spe,TBo,MBo,EBo,ht,a9,CBo,lpe,wBo,ABo,cd,LBo,ipe,yBo,xBo,WV,$Bo,kBo,SBo,Ab,RBo,Ze,n9,PBo,dpe,BBo,IBo,za,NBo,cpe,qBo,jBo,mpe,DBo,GBo,fpe,OBo,VBo,XBo,z,Lb,gpe,zBo,WBo,QV,QBo,UBo,HBo,yb,hpe,JBo,YBo,UV,KBo,ZBo,eIo,xb,upe,oIo,rIo,HV,tIo,aIo,nIo,$b,ppe,sIo,lIo,JV,iIo,dIo,cIo,kb,_pe,mIo,fIo,YV,gIo,hIo,uIo,Sb,bpe,pIo,_Io,KV,bIo,vIo,FIo,Rb,vpe,TIo,MIo,ZV,EIo,CIo,wIo,Pb,Fpe,AIo,LIo,eX,yIo,xIo,$Io,Bb,Tpe,kIo,SIo,oX,RIo,PIo,BIo,Ib,Mpe,IIo,NIo,rX,qIo,jIo,DIo,Nb,Epe,GIo,OIo,tX,VIo,XIo,zIo,qb,Cpe,WIo,QIo,aX,UIo,HIo,JIo,jb,wpe,YIo,KIo,nX,ZIo,eNo,oNo,Db,Ape,rNo,tNo,sX,aNo,nNo,sNo,Gb,Lpe,lNo,iNo,lX,dNo,cNo,mNo,Ob,ype,fNo,gNo,iX,hNo,uNo,pNo,Vb,xpe,_No,bNo,dX,vNo,FNo,TNo,Xb,$pe,MNo,ENo,cX,CNo,wNo,ANo,zb,kpe,LNo,yNo,mX,xNo,$No,kNo,Wb,Spe,SNo,RNo,fX,PNo,BNo,INo,Qb,Rpe,NNo,qNo,gX,jNo,DNo,GNo,Ub,Ppe,ONo,VNo,hX,XNo,zNo,WNo,Hb,Bpe,QNo,UNo,uX,HNo,JNo,YNo,Jb,Ipe,KNo,ZNo,pX,eqo,oqo,rqo,Yb,Npe,tqo,aqo,_X,nqo,sqo,lqo,Kb,qpe,iqo,dqo,bX,cqo,mqo,fqo,Zb,jpe,gqo,hqo,vX,uqo,pqo,_qo,ev,Dpe,bqo,vqo,FX,Fqo,Tqo,Mqo,ov,Gpe,Eqo,Cqo,TX,wqo,Aqo,Lqo,rv,Ope,yqo,xqo,MX,$qo,kqo,Sqo,tv,Vpe,Rqo,Pqo,EX,Bqo,Iqo,Nqo,av,Xpe,qqo,jqo,CX,Dqo,Gqo,Oqo,nv,zpe,Vqo,Xqo,wX,zqo,Wqo,Qqo,sv,Wpe,Uqo,Hqo,AX,Jqo,Yqo,Kqo,lv,Qpe,Zqo,ejo,LX,ojo,rjo,tjo,iv,Upe,ajo,njo,yX,sjo,ljo,ijo,dv,Hpe,djo,cjo,xX,mjo,fjo,gjo,cv,Jpe,hjo,ujo,$X,pjo,_jo,bjo,mv,Ype,vjo,Fjo,kX,Tjo,Mjo,Ejo,fv,Kpe,Cjo,wjo,SX,Ajo,Ljo,yjo,gv,xjo,Zpe,$jo,kjo,e_e,Sjo,Rjo,hv,xUe,md,uv,o_e,s9,Pjo,r_e,Bjo,$Ue,Bo,l9,Ijo,fd,Njo,RX,qjo,jjo,PX,Djo,Gjo,Ojo,i9,Vjo,t_e,Xjo,zjo,Wjo,ut,d9,Qjo,a_e,Ujo,Hjo,gd,Jjo,n_e,Yjo,Kjo,BX,Zjo,eDo,oDo,pv,rDo,eo,c9,tDo,s_e,aDo,nDo,Wa,sDo,l_e,lDo,iDo,i_e,dDo,cDo,d_e,mDo,fDo,gDo,U,_v,c_e,hDo,uDo,IX,pDo,_Do,bDo,bv,m_e,vDo,FDo,NX,TDo,MDo,EDo,vv,f_e,CDo,wDo,qX,ADo,LDo,yDo,Fv,g_e,xDo,$Do,jX,kDo,SDo,RDo,Tv,h_e,PDo,BDo,DX,IDo,NDo,qDo,Mv,u_e,jDo,DDo,GX,GDo,ODo,VDo,Ev,p_e,XDo,zDo,OX,WDo,QDo,UDo,Cv,__e,HDo,JDo,VX,YDo,KDo,ZDo,wv,b_e,eGo,oGo,XX,rGo,tGo,aGo,Av,v_e,nGo,sGo,zX,lGo,iGo,dGo,Lv,F_e,cGo,mGo,WX,fGo,gGo,hGo,yv,T_e,uGo,pGo,QX,_Go,bGo,vGo,xv,M_e,FGo,TGo,UX,MGo,EGo,CGo,$v,E_e,wGo,AGo,HX,LGo,yGo,xGo,kv,C_e,$Go,kGo,JX,SGo,RGo,PGo,Sv,w_e,BGo,IGo,YX,NGo,qGo,jGo,Rv,A_e,DGo,GGo,KX,OGo,VGo,XGo,Pv,L_e,zGo,WGo,ZX,QGo,UGo,HGo,Bv,y_e,JGo,YGo,ez,KGo,ZGo,eOo,Iv,x_e,oOo,rOo,oz,tOo,aOo,nOo,Nv,$_e,sOo,lOo,rz,iOo,dOo,cOo,qv,k_e,mOo,fOo,tz,gOo,hOo,uOo,jv,S_e,pOo,_Oo,az,bOo,vOo,FOo,Dv,R_e,TOo,MOo,nz,EOo,COo,wOo,Gv,P_e,AOo,LOo,sz,yOo,xOo,$Oo,Ov,B_e,kOo,SOo,lz,ROo,POo,BOo,Vv,I_e,IOo,NOo,iz,qOo,jOo,DOo,Xv,N_e,GOo,OOo,dz,VOo,XOo,zOo,zv,q_e,WOo,QOo,cz,UOo,HOo,JOo,Wv,j_e,YOo,KOo,mz,ZOo,eVo,oVo,Qv,D_e,rVo,tVo,fz,aVo,nVo,sVo,Uv,G_e,lVo,iVo,gz,dVo,cVo,mVo,Hv,O_e,fVo,gVo,hz,hVo,uVo,pVo,Jv,V_e,_Vo,bVo,X_e,vVo,FVo,TVo,Yv,z_e,MVo,EVo,uz,CVo,wVo,AVo,Kv,W_e,LVo,yVo,pz,xVo,$Vo,kVo,Zv,Q_e,SVo,RVo,_z,PVo,BVo,IVo,e1,U_e,NVo,qVo,bz,jVo,DVo,GVo,o1,OVo,H_e,VVo,XVo,J_e,zVo,WVo,r1,kUe,hd,t1,Y_e,m9,QVo,K_e,UVo,SUe,Io,f9,HVo,ud,JVo,vz,YVo,KVo,Fz,ZVo,eXo,oXo,g9,rXo,Z_e,tXo,aXo,nXo,pt,h9,sXo,e2e,lXo,iXo,pd,dXo,o2e,cXo,mXo,Tz,fXo,gXo,hXo,a1,uXo,oo,u9,pXo,r2e,_Xo,bXo,Qa,vXo,t2e,FXo,TXo,a2e,MXo,EXo,n2e,CXo,wXo,AXo,he,n1,s2e,LXo,yXo,Mz,xXo,$Xo,kXo,s1,l2e,SXo,RXo,Ez,PXo,BXo,IXo,l1,i2e,NXo,qXo,Cz,jXo,DXo,GXo,i1,d2e,OXo,VXo,wz,XXo,zXo,WXo,d1,c2e,QXo,UXo,Az,HXo,JXo,YXo,c1,m2e,KXo,ZXo,Lz,ezo,ozo,rzo,m1,f2e,tzo,azo,yz,nzo,szo,lzo,f1,g2e,izo,dzo,xz,czo,mzo,fzo,g1,h2e,gzo,hzo,$z,uzo,pzo,_zo,h1,u2e,bzo,vzo,kz,Fzo,Tzo,Mzo,u1,p2e,Ezo,Czo,Sz,wzo,Azo,Lzo,p1,_2e,yzo,xzo,Rz,$zo,kzo,Szo,_1,b2e,Rzo,Pzo,Pz,Bzo,Izo,Nzo,b1,v2e,qzo,jzo,Bz,Dzo,Gzo,Ozo,v1,F2e,Vzo,Xzo,Iz,zzo,Wzo,Qzo,F1,T2e,Uzo,Hzo,Nz,Jzo,Yzo,Kzo,T1,M2e,Zzo,eWo,qz,oWo,rWo,tWo,M1,E2e,aWo,nWo,jz,sWo,lWo,iWo,E1,C2e,dWo,cWo,Dz,mWo,fWo,gWo,C1,hWo,w2e,uWo,pWo,A2e,_Wo,bWo,w1,RUe,_d,A1,L2e,p9,vWo,y2e,FWo,PUe,No,_9,TWo,bd,MWo,Gz,EWo,CWo,Oz,wWo,AWo,LWo,b9,yWo,x2e,xWo,$Wo,kWo,_t,v9,SWo,$2e,RWo,PWo,vd,BWo,k2e,IWo,NWo,Vz,qWo,jWo,DWo,L1,GWo,ro,F9,OWo,S2e,VWo,XWo,Ua,zWo,R2e,WWo,QWo,P2e,UWo,HWo,B2e,JWo,YWo,KWo,q,y1,I2e,ZWo,eQo,Xz,oQo,rQo,tQo,x1,N2e,aQo,nQo,zz,sQo,lQo,iQo,$1,q2e,dQo,cQo,Wz,mQo,fQo,gQo,k1,j2e,hQo,uQo,Qz,pQo,_Qo,bQo,S1,D2e,vQo,FQo,Uz,TQo,MQo,EQo,R1,G2e,CQo,wQo,Hz,AQo,LQo,yQo,P1,O2e,xQo,$Qo,Jz,kQo,SQo,RQo,B1,V2e,PQo,BQo,Yz,IQo,NQo,qQo,I1,X2e,jQo,DQo,Kz,GQo,OQo,VQo,N1,z2e,XQo,zQo,Zz,WQo,QQo,UQo,q1,W2e,HQo,JQo,eW,YQo,KQo,ZQo,j1,Q2e,eUo,oUo,oW,rUo,tUo,aUo,D1,U2e,nUo,sUo,rW,lUo,iUo,dUo,G1,H2e,cUo,mUo,tW,fUo,gUo,hUo,O1,J2e,uUo,pUo,aW,_Uo,bUo,vUo,V1,Y2e,FUo,TUo,nW,MUo,EUo,CUo,X1,K2e,wUo,AUo,sW,LUo,yUo,xUo,z1,Z2e,$Uo,kUo,lW,SUo,RUo,PUo,W1,ebe,BUo,IUo,iW,NUo,qUo,jUo,Q1,obe,DUo,GUo,dW,OUo,VUo,XUo,U1,rbe,zUo,WUo,cW,QUo,UUo,HUo,H1,tbe,JUo,YUo,mW,KUo,ZUo,eHo,J1,abe,oHo,rHo,fW,tHo,aHo,nHo,Y1,nbe,sHo,lHo,gW,iHo,dHo,cHo,K1,sbe,mHo,fHo,hW,gHo,hHo,uHo,Z1,lbe,pHo,_Ho,uW,bHo,vHo,FHo,eF,ibe,THo,MHo,pW,EHo,CHo,wHo,oF,dbe,AHo,LHo,_W,yHo,xHo,$Ho,rF,cbe,kHo,SHo,bW,RHo,PHo,BHo,tF,mbe,IHo,NHo,vW,qHo,jHo,DHo,aF,fbe,GHo,OHo,FW,VHo,XHo,zHo,nF,gbe,WHo,QHo,TW,UHo,HHo,JHo,sF,hbe,YHo,KHo,MW,ZHo,eJo,oJo,lF,ube,rJo,tJo,EW,aJo,nJo,sJo,iF,pbe,lJo,iJo,CW,dJo,cJo,mJo,dF,_be,fJo,gJo,wW,hJo,uJo,pJo,cF,bbe,_Jo,bJo,AW,vJo,FJo,TJo,mF,vbe,MJo,EJo,LW,CJo,wJo,AJo,fF,Fbe,LJo,yJo,yW,xJo,$Jo,kJo,gF,Tbe,SJo,RJo,xW,PJo,BJo,IJo,hF,Mbe,NJo,qJo,$W,jJo,DJo,GJo,uF,Ebe,OJo,VJo,kW,XJo,zJo,WJo,pF,Cbe,QJo,UJo,SW,HJo,JJo,YJo,_F,wbe,KJo,ZJo,RW,eYo,oYo,rYo,bF,Abe,tYo,aYo,PW,nYo,sYo,lYo,vF,Lbe,iYo,dYo,BW,cYo,mYo,fYo,FF,ybe,gYo,hYo,IW,uYo,pYo,_Yo,TF,xbe,bYo,vYo,NW,FYo,TYo,MYo,MF,$be,EYo,CYo,qW,wYo,AYo,LYo,EF,kbe,yYo,xYo,jW,$Yo,kYo,SYo,CF,Sbe,RYo,PYo,DW,BYo,IYo,NYo,wF,Rbe,qYo,jYo,GW,DYo,GYo,OYo,AF,VYo,Pbe,XYo,zYo,Bbe,WYo,QYo,LF,BUe,Fd,yF,Ibe,T9,UYo,Nbe,HYo,IUe,qo,M9,JYo,Td,YYo,OW,KYo,ZYo,VW,eKo,oKo,rKo,E9,tKo,qbe,aKo,nKo,sKo,bt,C9,lKo,jbe,iKo,dKo,Md,cKo,Dbe,mKo,fKo,XW,gKo,hKo,uKo,xF,pKo,to,w9,_Ko,Gbe,bKo,vKo,Ha,FKo,Obe,TKo,MKo,Vbe,EKo,CKo,Xbe,wKo,AKo,LKo,Z,$F,zbe,yKo,xKo,zW,$Ko,kKo,SKo,kF,Wbe,RKo,PKo,WW,BKo,IKo,NKo,SF,Qbe,qKo,jKo,QW,DKo,GKo,OKo,RF,Ube,VKo,XKo,UW,zKo,WKo,QKo,PF,Hbe,UKo,HKo,HW,JKo,YKo,KKo,BF,Jbe,ZKo,eZo,JW,oZo,rZo,tZo,IF,Ybe,aZo,nZo,YW,sZo,lZo,iZo,NF,Kbe,dZo,cZo,KW,mZo,fZo,gZo,qF,Zbe,hZo,uZo,ZW,pZo,_Zo,bZo,jF,eve,vZo,FZo,eQ,TZo,MZo,EZo,DF,ove,CZo,wZo,oQ,AZo,LZo,yZo,GF,rve,xZo,$Zo,rQ,kZo,SZo,RZo,OF,tve,PZo,BZo,tQ,IZo,NZo,qZo,VF,ave,jZo,DZo,aQ,GZo,OZo,VZo,XF,nve,XZo,zZo,nQ,WZo,QZo,UZo,zF,sve,HZo,JZo,sQ,YZo,KZo,ZZo,WF,lve,eer,oer,lQ,rer,ter,aer,QF,ive,ner,ser,iQ,ler,ier,der,UF,dve,cer,mer,dQ,fer,ger,her,HF,cve,uer,per,cQ,_er,ber,ver,JF,mve,Fer,Ter,mQ,Mer,Eer,Cer,YF,fve,wer,Aer,fQ,Ler,yer,xer,KF,gve,$er,ker,gQ,Ser,Rer,Per,ZF,hve,Ber,Ier,hQ,Ner,qer,jer,eT,uve,Der,Ger,uQ,Oer,Ver,Xer,oT,pve,zer,Wer,pQ,Qer,Uer,Her,rT,_ve,Jer,Yer,_Q,Ker,Zer,eor,tT,bve,oor,ror,bQ,tor,aor,nor,aT,vve,sor,lor,vQ,ior,dor,cor,nT,Fve,mor,gor,FQ,hor,uor,por,sT,Tve,_or,bor,TQ,vor,For,Tor,lT,Mor,Mve,Eor,Cor,Eve,wor,Aor,iT,NUe,Ed,dT,Cve,A9,Lor,wve,yor,qUe,jo,L9,xor,Cd,$or,MQ,kor,Sor,EQ,Ror,Por,Bor,y9,Ior,Ave,Nor,qor,jor,vt,x9,Dor,Lve,Gor,Oor,wd,Vor,yve,Xor,zor,CQ,Wor,Qor,Uor,cT,Hor,ao,$9,Jor,xve,Yor,Kor,Ja,Zor,$ve,err,orr,kve,rrr,trr,Sve,arr,nrr,srr,Do,mT,Rve,lrr,irr,wQ,drr,crr,mrr,fT,Pve,frr,grr,AQ,hrr,urr,prr,gT,Bve,_rr,brr,LQ,vrr,Frr,Trr,hT,Ive,Mrr,Err,yQ,Crr,wrr,Arr,uT,Nve,Lrr,yrr,xQ,xrr,$rr,krr,pT,qve,Srr,Rrr,$Q,Prr,Brr,Irr,_T,Nrr,jve,qrr,jrr,Dve,Drr,Grr,bT,jUe,Ad,vT,Gve,k9,Orr,Ove,Vrr,DUe,Go,S9,Xrr,Ld,zrr,kQ,Wrr,Qrr,SQ,Urr,Hrr,Jrr,R9,Yrr,Vve,Krr,Zrr,etr,Ft,P9,otr,Xve,rtr,ttr,yd,atr,zve,ntr,str,RQ,ltr,itr,dtr,FT,ctr,no,B9,mtr,Wve,ftr,gtr,Ya,htr,Qve,utr,ptr,Uve,_tr,btr,Hve,vtr,Ftr,Ttr,H,TT,Jve,Mtr,Etr,PQ,Ctr,wtr,Atr,MT,Yve,Ltr,ytr,BQ,xtr,$tr,ktr,ET,Kve,Str,Rtr,IQ,Ptr,Btr,Itr,CT,Zve,Ntr,qtr,NQ,jtr,Dtr,Gtr,wT,e1e,Otr,Vtr,qQ,Xtr,ztr,Wtr,AT,o1e,Qtr,Utr,jQ,Htr,Jtr,Ytr,LT,r1e,Ktr,Ztr,DQ,ear,oar,rar,yT,t1e,tar,aar,GQ,nar,sar,lar,xT,a1e,iar,dar,OQ,car,mar,far,$T,n1e,gar,har,VQ,uar,par,_ar,kT,s1e,bar,Far,XQ,Tar,Mar,Ear,ST,l1e,Car,war,zQ,Aar,Lar,yar,RT,i1e,xar,$ar,WQ,kar,Sar,Rar,PT,d1e,Par,Bar,QQ,Iar,Nar,qar,BT,c1e,jar,Dar,UQ,Gar,Oar,Var,IT,m1e,Xar,zar,HQ,War,Qar,Uar,NT,f1e,Har,Jar,JQ,Yar,Kar,Zar,qT,g1e,enr,onr,YQ,rnr,tnr,anr,jT,h1e,nnr,snr,KQ,lnr,inr,dnr,DT,u1e,cnr,mnr,ZQ,fnr,gnr,hnr,GT,p1e,unr,pnr,eU,_nr,bnr,vnr,OT,_1e,Fnr,Tnr,oU,Mnr,Enr,Cnr,VT,b1e,wnr,Anr,rU,Lnr,ynr,xnr,XT,v1e,$nr,knr,tU,Snr,Rnr,Pnr,zT,F1e,Bnr,Inr,aU,Nnr,qnr,jnr,WT,T1e,Dnr,Gnr,nU,Onr,Vnr,Xnr,QT,M1e,znr,Wnr,sU,Qnr,Unr,Hnr,UT,E1e,Jnr,Ynr,lU,Knr,Znr,esr,HT,C1e,osr,rsr,iU,tsr,asr,nsr,JT,w1e,ssr,lsr,dU,isr,dsr,csr,YT,A1e,msr,fsr,cU,gsr,hsr,usr,KT,L1e,psr,_sr,mU,bsr,vsr,Fsr,ZT,y1e,Tsr,Msr,fU,Esr,Csr,wsr,eM,x1e,Asr,Lsr,gU,ysr,xsr,$sr,oM,$1e,ksr,Ssr,hU,Rsr,Psr,Bsr,rM,k1e,Isr,Nsr,uU,qsr,jsr,Dsr,tM,S1e,Gsr,Osr,pU,Vsr,Xsr,zsr,aM,Wsr,R1e,Qsr,Usr,P1e,Hsr,Jsr,nM,GUe,xd,sM,B1e,I9,Ysr,I1e,Ksr,OUe,Oo,N9,Zsr,$d,elr,_U,olr,rlr,bU,tlr,alr,nlr,q9,slr,N1e,llr,ilr,dlr,Tt,j9,clr,q1e,mlr,flr,kd,glr,j1e,hlr,ulr,vU,plr,_lr,blr,lM,vlr,so,D9,Flr,D1e,Tlr,Mlr,Ka,Elr,G1e,Clr,wlr,O1e,Alr,Llr,V1e,ylr,xlr,$lr,V,iM,X1e,klr,Slr,FU,Rlr,Plr,Blr,dM,z1e,Ilr,Nlr,TU,qlr,jlr,Dlr,cM,W1e,Glr,Olr,MU,Vlr,Xlr,zlr,mM,Q1e,Wlr,Qlr,EU,Ulr,Hlr,Jlr,fM,U1e,Ylr,Klr,CU,Zlr,eir,oir,gM,H1e,rir,tir,wU,air,nir,sir,hM,J1e,lir,iir,AU,dir,cir,mir,uM,Y1e,fir,gir,LU,hir,uir,pir,pM,K1e,_ir,bir,yU,vir,Fir,Tir,_M,Z1e,Mir,Eir,xU,Cir,wir,Air,bM,eFe,Lir,yir,$U,xir,$ir,kir,vM,oFe,Sir,Rir,kU,Pir,Bir,Iir,FM,rFe,Nir,qir,SU,jir,Dir,Gir,TM,tFe,Oir,Vir,RU,Xir,zir,Wir,MM,aFe,Qir,Uir,PU,Hir,Jir,Yir,EM,nFe,Kir,Zir,BU,edr,odr,rdr,CM,sFe,tdr,adr,IU,ndr,sdr,ldr,wM,lFe,idr,ddr,NU,cdr,mdr,fdr,AM,iFe,gdr,hdr,qU,udr,pdr,_dr,LM,dFe,bdr,vdr,jU,Fdr,Tdr,Mdr,yM,cFe,Edr,Cdr,DU,wdr,Adr,Ldr,xM,mFe,ydr,xdr,GU,$dr,kdr,Sdr,$M,fFe,Rdr,Pdr,OU,Bdr,Idr,Ndr,kM,gFe,qdr,jdr,VU,Ddr,Gdr,Odr,SM,hFe,Vdr,Xdr,XU,zdr,Wdr,Qdr,RM,uFe,Udr,Hdr,zU,Jdr,Ydr,Kdr,PM,pFe,Zdr,ecr,WU,ocr,rcr,tcr,BM,_Fe,acr,ncr,QU,scr,lcr,icr,IM,bFe,dcr,ccr,UU,mcr,fcr,gcr,NM,vFe,hcr,ucr,HU,pcr,_cr,bcr,qM,FFe,vcr,Fcr,JU,Tcr,Mcr,Ecr,jM,TFe,Ccr,wcr,YU,Acr,Lcr,ycr,DM,MFe,xcr,$cr,KU,kcr,Scr,Rcr,GM,EFe,Pcr,Bcr,ZU,Icr,Ncr,qcr,OM,CFe,jcr,Dcr,eH,Gcr,Ocr,Vcr,VM,wFe,Xcr,zcr,oH,Wcr,Qcr,Ucr,XM,AFe,Hcr,Jcr,rH,Ycr,Kcr,Zcr,zM,LFe,emr,omr,tH,rmr,tmr,amr,WM,yFe,nmr,smr,aH,lmr,imr,dmr,QM,xFe,cmr,mmr,nH,fmr,gmr,hmr,UM,$Fe,umr,pmr,sH,_mr,bmr,vmr,HM,kFe,Fmr,Tmr,lH,Mmr,Emr,Cmr,JM,SFe,wmr,Amr,iH,Lmr,ymr,xmr,YM,$mr,RFe,kmr,Smr,PFe,Rmr,Pmr,KM,VUe,Sd,ZM,BFe,G9,Bmr,IFe,Imr,XUe,Vo,O9,Nmr,Rd,qmr,dH,jmr,Dmr,cH,Gmr,Omr,Vmr,V9,Xmr,NFe,zmr,Wmr,Qmr,Mt,X9,Umr,qFe,Hmr,Jmr,Pd,Ymr,jFe,Kmr,Zmr,mH,efr,ofr,rfr,eE,tfr,lo,z9,afr,DFe,nfr,sfr,Za,lfr,GFe,ifr,dfr,OFe,cfr,mfr,VFe,ffr,gfr,hfr,XFe,oE,zFe,ufr,pfr,fH,_fr,bfr,vfr,rE,Ffr,WFe,Tfr,Mfr,QFe,Efr,Cfr,tE,zUe,Bd,aE,UFe,W9,wfr,HFe,Afr,WUe,Xo,Q9,Lfr,Id,yfr,gH,xfr,$fr,hH,kfr,Sfr,Rfr,U9,Pfr,JFe,Bfr,Ifr,Nfr,Et,H9,qfr,YFe,jfr,Dfr,Nd,Gfr,KFe,Ofr,Vfr,uH,Xfr,zfr,Wfr,nE,Qfr,io,J9,Ufr,ZFe,Hfr,Jfr,en,Yfr,eTe,Kfr,Zfr,oTe,egr,ogr,rTe,rgr,tgr,agr,be,sE,tTe,ngr,sgr,pH,lgr,igr,dgr,lE,aTe,cgr,mgr,_H,fgr,ggr,hgr,iE,nTe,ugr,pgr,bH,_gr,bgr,vgr,dE,sTe,Fgr,Tgr,vH,Mgr,Egr,Cgr,sl,lTe,wgr,Agr,FH,Lgr,ygr,TH,xgr,$gr,kgr,cE,iTe,Sgr,Rgr,MH,Pgr,Bgr,Igr,ll,dTe,Ngr,qgr,EH,jgr,Dgr,CH,Ggr,Ogr,Vgr,mE,cTe,Xgr,zgr,wH,Wgr,Qgr,Ugr,Ct,mTe,Hgr,Jgr,AH,Ygr,Kgr,LH,Zgr,ehr,yH,ohr,rhr,thr,fE,fTe,ahr,nhr,xH,shr,lhr,ihr,gE,gTe,dhr,chr,$H,mhr,fhr,ghr,hE,hTe,hhr,uhr,kH,phr,_hr,bhr,uE,uTe,vhr,Fhr,SH,Thr,Mhr,Ehr,pE,pTe,Chr,whr,RH,Ahr,Lhr,yhr,_E,_Te,xhr,$hr,PH,khr,Shr,Rhr,bE,bTe,Phr,Bhr,BH,Ihr,Nhr,qhr,vE,vTe,jhr,Dhr,IH,Ghr,Ohr,Vhr,FE,Xhr,FTe,zhr,Whr,TTe,Qhr,Uhr,TE,QUe,qd,ME,MTe,Y9,Hhr,ETe,Jhr,UUe,zo,K9,Yhr,jd,Khr,NH,Zhr,eur,qH,our,rur,tur,Z9,aur,CTe,nur,sur,lur,wt,ex,iur,wTe,dur,cur,Dd,mur,ATe,fur,gur,jH,hur,uur,pur,EE,_ur,co,ox,bur,LTe,vur,Fur,on,Tur,yTe,Mur,Eur,xTe,Cur,wur,$Te,Aur,Lur,yur,kTe,CE,STe,xur,$ur,DH,kur,Sur,Rur,wE,Pur,RTe,Bur,Iur,PTe,Nur,qur,AE,HUe,Gd,LE,BTe,rx,jur,ITe,Dur,JUe,Wo,tx,Gur,Od,Our,GH,Vur,Xur,OH,zur,Wur,Qur,ax,Uur,NTe,Hur,Jur,Yur,At,nx,Kur,qTe,Zur,epr,Vd,opr,jTe,rpr,tpr,VH,apr,npr,spr,yE,lpr,mo,sx,ipr,DTe,dpr,cpr,rn,mpr,GTe,fpr,gpr,OTe,hpr,upr,VTe,ppr,_pr,bpr,XTe,xE,zTe,vpr,Fpr,XH,Tpr,Mpr,Epr,$E,Cpr,WTe,wpr,Apr,QTe,Lpr,ypr,kE,YUe,Xd,SE,UTe,lx,xpr,HTe,$pr,KUe,Qo,ix,kpr,zd,Spr,zH,Rpr,Ppr,WH,Bpr,Ipr,Npr,dx,qpr,JTe,jpr,Dpr,Gpr,Lt,cx,Opr,YTe,Vpr,Xpr,Wd,zpr,KTe,Wpr,Qpr,QH,Upr,Hpr,Jpr,RE,Ypr,fo,mx,Kpr,ZTe,Zpr,e_r,tn,o_r,eMe,r_r,t_r,oMe,a_r,n_r,rMe,s_r,l_r,i_r,tMe,PE,aMe,d_r,c_r,UH,m_r,f_r,g_r,BE,h_r,nMe,u_r,p_r,sMe,__r,b_r,IE,ZUe,Qd,NE,lMe,fx,v_r,iMe,F_r,eHe,Uo,gx,T_r,Ud,M_r,HH,E_r,C_r,JH,w_r,A_r,L_r,hx,y_r,dMe,x_r,$_r,k_r,yt,ux,S_r,cMe,R_r,P_r,Hd,B_r,mMe,I_r,N_r,YH,q_r,j_r,D_r,qE,G_r,go,px,O_r,fMe,V_r,X_r,an,z_r,gMe,W_r,Q_r,hMe,U_r,H_r,uMe,J_r,Y_r,K_r,Pe,jE,pMe,Z_r,e2r,KH,o2r,r2r,t2r,DE,_Me,a2r,n2r,ZH,s2r,l2r,i2r,GE,bMe,d2r,c2r,eJ,m2r,f2r,g2r,OE,vMe,h2r,u2r,oJ,p2r,_2r,b2r,VE,FMe,v2r,F2r,rJ,T2r,M2r,E2r,XE,TMe,C2r,w2r,tJ,A2r,L2r,y2r,zE,MMe,x2r,$2r,aJ,k2r,S2r,R2r,WE,EMe,P2r,B2r,nJ,I2r,N2r,q2r,QE,CMe,j2r,D2r,sJ,G2r,O2r,V2r,UE,X2r,wMe,z2r,W2r,AMe,Q2r,U2r,HE,oHe,Jd,JE,LMe,_x,H2r,yMe,J2r,rHe,Ho,bx,Y2r,Yd,K2r,lJ,Z2r,ebr,iJ,obr,rbr,tbr,vx,abr,xMe,nbr,sbr,lbr,xt,Fx,ibr,$Me,dbr,cbr,Kd,mbr,kMe,fbr,gbr,dJ,hbr,ubr,pbr,YE,_br,ho,Tx,bbr,SMe,vbr,Fbr,nn,Tbr,RMe,Mbr,Ebr,PMe,Cbr,wbr,BMe,Abr,Lbr,ybr,st,KE,IMe,xbr,$br,cJ,kbr,Sbr,Rbr,ZE,NMe,Pbr,Bbr,mJ,Ibr,Nbr,qbr,e4,qMe,jbr,Dbr,fJ,Gbr,Obr,Vbr,o4,jMe,Xbr,zbr,gJ,Wbr,Qbr,Ubr,r4,DMe,Hbr,Jbr,hJ,Ybr,Kbr,Zbr,t4,evr,GMe,ovr,rvr,OMe,tvr,avr,a4,tHe,Zd,n4,VMe,Mx,nvr,XMe,svr,aHe,Jo,Ex,lvr,ec,ivr,uJ,dvr,cvr,pJ,mvr,fvr,gvr,Cx,hvr,zMe,uvr,pvr,_vr,$t,wx,bvr,WMe,vvr,Fvr,oc,Tvr,QMe,Mvr,Evr,_J,Cvr,wvr,Avr,s4,Lvr,uo,Ax,yvr,UMe,xvr,$vr,sn,kvr,HMe,Svr,Rvr,JMe,Pvr,Bvr,YMe,Ivr,Nvr,qvr,Le,l4,KMe,jvr,Dvr,bJ,Gvr,Ovr,Vvr,i4,ZMe,Xvr,zvr,vJ,Wvr,Qvr,Uvr,d4,eEe,Hvr,Jvr,FJ,Yvr,Kvr,Zvr,c4,oEe,e1r,o1r,TJ,r1r,t1r,a1r,m4,rEe,n1r,s1r,MJ,l1r,i1r,d1r,f4,tEe,c1r,m1r,EJ,f1r,g1r,h1r,g4,aEe,u1r,p1r,CJ,_1r,b1r,v1r,h4,nEe,F1r,T1r,wJ,M1r,E1r,C1r,u4,sEe,w1r,A1r,AJ,L1r,y1r,x1r,p4,lEe,$1r,k1r,LJ,S1r,R1r,P1r,_4,B1r,iEe,I1r,N1r,dEe,q1r,j1r,b4,nHe,rc,v4,cEe,Lx,D1r,mEe,G1r,sHe,Yo,yx,O1r,tc,V1r,yJ,X1r,z1r,xJ,W1r,Q1r,U1r,xx,H1r,fEe,J1r,Y1r,K1r,kt,$x,Z1r,gEe,eFr,oFr,ac,rFr,hEe,tFr,aFr,$J,nFr,sFr,lFr,F4,iFr,po,kx,dFr,uEe,cFr,mFr,ln,fFr,pEe,gFr,hFr,_Ee,uFr,pFr,bEe,_Fr,bFr,vFr,Sx,T4,vEe,FFr,TFr,kJ,MFr,EFr,CFr,M4,FEe,wFr,AFr,SJ,LFr,yFr,xFr,E4,$Fr,TEe,kFr,SFr,MEe,RFr,PFr,C4,lHe,nc,w4,EEe,Rx,BFr,CEe,IFr,iHe,Ko,Px,NFr,sc,qFr,RJ,jFr,DFr,PJ,GFr,OFr,VFr,Bx,XFr,wEe,zFr,WFr,QFr,St,Ix,UFr,AEe,HFr,JFr,lc,YFr,LEe,KFr,ZFr,BJ,eTr,oTr,rTr,A4,tTr,_o,Nx,aTr,yEe,nTr,sTr,dn,lTr,xEe,iTr,dTr,$Ee,cTr,mTr,kEe,fTr,gTr,hTr,lt,L4,SEe,uTr,pTr,IJ,_Tr,bTr,vTr,y4,REe,FTr,TTr,NJ,MTr,ETr,CTr,x4,PEe,wTr,ATr,qJ,LTr,yTr,xTr,$4,BEe,$Tr,kTr,jJ,STr,RTr,PTr,k4,IEe,BTr,ITr,DJ,NTr,qTr,jTr,S4,DTr,NEe,GTr,OTr,qEe,VTr,XTr,R4,dHe,ic,P4,jEe,qx,zTr,DEe,WTr,cHe,Zo,jx,QTr,dc,UTr,GJ,HTr,JTr,OJ,YTr,KTr,ZTr,Dx,eMr,GEe,oMr,rMr,tMr,Rt,Gx,aMr,OEe,nMr,sMr,cc,lMr,VEe,iMr,dMr,VJ,cMr,mMr,fMr,B4,gMr,bo,Ox,hMr,XEe,uMr,pMr,cn,_Mr,zEe,bMr,vMr,WEe,FMr,TMr,QEe,MMr,EMr,CMr,mn,I4,UEe,wMr,AMr,XJ,LMr,yMr,xMr,N4,HEe,$Mr,kMr,zJ,SMr,RMr,PMr,q4,JEe,BMr,IMr,WJ,NMr,qMr,jMr,j4,YEe,DMr,GMr,QJ,OMr,VMr,XMr,D4,zMr,KEe,WMr,QMr,ZEe,UMr,HMr,G4,mHe,mc,O4,e4e,Vx,JMr,o4e,YMr,fHe,er,Xx,KMr,fc,ZMr,UJ,eEr,oEr,HJ,rEr,tEr,aEr,zx,nEr,r4e,sEr,lEr,iEr,Pt,Wx,dEr,t4e,cEr,mEr,gc,fEr,a4e,gEr,hEr,JJ,uEr,pEr,_Er,V4,bEr,vo,Qx,vEr,n4e,FEr,TEr,fn,MEr,s4e,EEr,CEr,l4e,wEr,AEr,i4e,LEr,yEr,xEr,Ux,X4,d4e,$Er,kEr,YJ,SEr,REr,PEr,z4,c4e,BEr,IEr,KJ,NEr,qEr,jEr,W4,DEr,m4e,GEr,OEr,f4e,VEr,XEr,Q4,gHe,hc,U4,g4e,Hx,zEr,h4e,WEr,hHe,or,Jx,QEr,uc,UEr,ZJ,HEr,JEr,eY,YEr,KEr,ZEr,Yx,e4r,u4e,o4r,r4r,t4r,Bt,Kx,a4r,p4e,n4r,s4r,pc,l4r,_4e,i4r,d4r,oY,c4r,m4r,f4r,H4,g4r,Fo,Zx,h4r,b4e,u4r,p4r,gn,_4r,v4e,b4r,v4r,F4e,F4r,T4r,T4e,M4r,E4r,C4r,M4e,J4,E4e,w4r,A4r,rY,L4r,y4r,x4r,Y4,$4r,C4e,k4r,S4r,w4e,R4r,P4r,K4,uHe,_c,Z4,A4e,e$,B4r,L4e,I4r,pHe,rr,o$,N4r,bc,q4r,tY,j4r,D4r,aY,G4r,O4r,V4r,r$,X4r,y4e,z4r,W4r,Q4r,It,t$,U4r,x4e,H4r,J4r,vc,Y4r,$4e,K4r,Z4r,nY,eCr,oCr,rCr,eC,tCr,To,a$,aCr,k4e,nCr,sCr,hn,lCr,S4e,iCr,dCr,R4e,cCr,mCr,P4e,fCr,gCr,hCr,it,oC,B4e,uCr,pCr,sY,_Cr,bCr,vCr,rC,I4e,FCr,TCr,lY,MCr,ECr,CCr,tC,N4e,wCr,ACr,iY,LCr,yCr,xCr,aC,q4e,$Cr,kCr,dY,SCr,RCr,PCr,nC,j4e,BCr,ICr,cY,NCr,qCr,jCr,sC,DCr,D4e,GCr,OCr,G4e,VCr,XCr,lC,_He,Fc,iC,O4e,n$,zCr,V4e,WCr,bHe,tr,s$,QCr,Tc,UCr,mY,HCr,JCr,fY,YCr,KCr,ZCr,l$,e3r,X4e,o3r,r3r,t3r,Nt,i$,a3r,z4e,n3r,s3r,Mc,l3r,W4e,i3r,d3r,gY,c3r,m3r,f3r,dC,g3r,Mo,d$,h3r,Q4e,u3r,p3r,un,_3r,U4e,b3r,v3r,H4e,F3r,T3r,J4e,M3r,E3r,C3r,Y4e,cC,K4e,w3r,A3r,hY,L3r,y3r,x3r,mC,$3r,Z4e,k3r,S3r,eCe,R3r,P3r,fC,vHe,Ec,gC,oCe,c$,B3r,rCe,I3r,FHe,ar,m$,N3r,Cc,q3r,uY,j3r,D3r,pY,G3r,O3r,V3r,f$,X3r,tCe,z3r,W3r,Q3r,qt,g$,U3r,aCe,H3r,J3r,wc,Y3r,nCe,K3r,Z3r,_Y,e5r,o5r,r5r,hC,t5r,Rr,h$,a5r,sCe,n5r,s5r,pn,l5r,lCe,i5r,d5r,iCe,c5r,m5r,dCe,f5r,g5r,h5r,B,uC,cCe,u5r,p5r,bY,_5r,b5r,v5r,pC,mCe,F5r,T5r,vY,M5r,E5r,C5r,_C,fCe,w5r,A5r,FY,L5r,y5r,x5r,bC,gCe,$5r,k5r,TY,S5r,R5r,P5r,vC,hCe,B5r,I5r,MY,N5r,q5r,j5r,FC,uCe,D5r,G5r,EY,O5r,V5r,X5r,TC,pCe,z5r,W5r,CY,Q5r,U5r,H5r,MC,_Ce,J5r,Y5r,wY,K5r,Z5r,e0r,EC,bCe,o0r,r0r,AY,t0r,a0r,n0r,CC,vCe,s0r,l0r,LY,i0r,d0r,c0r,wC,FCe,m0r,f0r,yY,g0r,h0r,u0r,AC,TCe,p0r,_0r,xY,b0r,v0r,F0r,LC,MCe,T0r,M0r,$Y,E0r,C0r,w0r,yC,ECe,A0r,L0r,kY,y0r,x0r,$0r,xC,CCe,k0r,S0r,SY,R0r,P0r,B0r,$C,wCe,I0r,N0r,RY,q0r,j0r,D0r,kC,ACe,G0r,O0r,PY,V0r,X0r,z0r,SC,LCe,W0r,Q0r,BY,U0r,H0r,J0r,il,yCe,Y0r,K0r,IY,Z0r,ewr,NY,owr,rwr,twr,RC,xCe,awr,nwr,qY,swr,lwr,iwr,PC,$Ce,dwr,cwr,jY,mwr,fwr,gwr,BC,kCe,hwr,uwr,DY,pwr,_wr,bwr,IC,SCe,vwr,Fwr,GY,Twr,Mwr,Ewr,NC,RCe,Cwr,wwr,OY,Awr,Lwr,ywr,qC,PCe,xwr,$wr,VY,kwr,Swr,Rwr,jC,BCe,Pwr,Bwr,XY,Iwr,Nwr,qwr,DC,ICe,jwr,Dwr,zY,Gwr,Owr,Vwr,GC,NCe,Xwr,zwr,WY,Wwr,Qwr,Uwr,OC,qCe,Hwr,Jwr,QY,Ywr,Kwr,Zwr,VC,jCe,e6r,o6r,UY,r6r,t6r,a6r,XC,DCe,n6r,s6r,HY,l6r,i6r,d6r,zC,GCe,c6r,m6r,JY,f6r,g6r,h6r,WC,OCe,u6r,p6r,YY,_6r,b6r,v6r,QC,VCe,F6r,T6r,KY,M6r,E6r,C6r,UC,XCe,w6r,A6r,ZY,L6r,y6r,x6r,HC,zCe,$6r,k6r,eK,S6r,R6r,P6r,JC,WCe,B6r,I6r,oK,N6r,q6r,j6r,YC,QCe,D6r,G6r,rK,O6r,V6r,X6r,KC,UCe,z6r,W6r,tK,Q6r,U6r,H6r,ZC,HCe,J6r,Y6r,aK,K6r,Z6r,eAr,e3,JCe,oAr,rAr,nK,tAr,aAr,nAr,o3,YCe,sAr,lAr,sK,iAr,dAr,cAr,r3,KCe,mAr,fAr,lK,gAr,hAr,uAr,t3,ZCe,pAr,_Ar,iK,bAr,vAr,FAr,a3,e3e,TAr,MAr,dK,EAr,CAr,wAr,n3,o3e,AAr,LAr,cK,yAr,xAr,$Ar,s3,r3e,kAr,SAr,mK,RAr,PAr,BAr,l3,t3e,IAr,NAr,fK,qAr,jAr,DAr,i3,a3e,GAr,OAr,gK,VAr,XAr,zAr,d3,n3e,WAr,QAr,hK,UAr,HAr,JAr,c3,s3e,YAr,KAr,uK,ZAr,e7r,o7r,m3,l3e,r7r,t7r,pK,a7r,n7r,s7r,f3,i3e,l7r,i7r,_K,d7r,c7r,m7r,g3,THe,Ac,h3,d3e,u$,f7r,c3e,g7r,MHe,nr,p$,h7r,Lc,u7r,bK,p7r,_7r,vK,b7r,v7r,F7r,_$,T7r,m3e,M7r,E7r,C7r,jt,b$,w7r,f3e,A7r,L7r,yc,y7r,g3e,x7r,$7r,FK,k7r,S7r,R7r,u3,P7r,Pr,v$,B7r,h3e,I7r,N7r,_n,q7r,u3e,j7r,D7r,p3e,G7r,O7r,_3e,V7r,X7r,z7r,se,p3,b3e,W7r,Q7r,TK,U7r,H7r,J7r,_3,v3e,Y7r,K7r,MK,Z7r,eLr,oLr,b3,F3e,rLr,tLr,EK,aLr,nLr,sLr,v3,T3e,lLr,iLr,CK,dLr,cLr,mLr,F3,M3e,fLr,gLr,wK,hLr,uLr,pLr,T3,E3e,_Lr,bLr,AK,vLr,FLr,TLr,M3,C3e,MLr,ELr,LK,CLr,wLr,ALr,E3,w3e,LLr,yLr,yK,xLr,$Lr,kLr,C3,A3e,SLr,RLr,xK,PLr,BLr,ILr,w3,L3e,NLr,qLr,$K,jLr,DLr,GLr,A3,y3e,OLr,VLr,kK,XLr,zLr,WLr,L3,x3e,QLr,ULr,SK,HLr,JLr,YLr,y3,$3e,KLr,ZLr,RK,eyr,oyr,ryr,x3,k3e,tyr,ayr,PK,nyr,syr,lyr,$3,S3e,iyr,dyr,BK,cyr,myr,fyr,k3,R3e,gyr,hyr,IK,uyr,pyr,_yr,S3,P3e,byr,vyr,NK,Fyr,Tyr,Myr,R3,B3e,Eyr,Cyr,qK,wyr,Ayr,Lyr,P3,I3e,yyr,xyr,jK,$yr,kyr,Syr,B3,N3e,Ryr,Pyr,DK,Byr,Iyr,Nyr,I3,q3e,qyr,jyr,GK,Dyr,Gyr,Oyr,N3,j3e,Vyr,Xyr,OK,zyr,Wyr,Qyr,q3,D3e,Uyr,Hyr,VK,Jyr,Yyr,Kyr,j3,EHe,xc,D3,G3e,F$,Zyr,O3e,e8r,CHe,sr,T$,o8r,$c,r8r,XK,t8r,a8r,zK,n8r,s8r,l8r,M$,i8r,V3e,d8r,c8r,m8r,Dt,E$,f8r,X3e,g8r,h8r,kc,u8r,z3e,p8r,_8r,WK,b8r,v8r,F8r,G3,T8r,Br,C$,M8r,W3e,E8r,C8r,bn,w8r,Q3e,A8r,L8r,U3e,y8r,x8r,H3e,$8r,k8r,S8r,Me,O3,J3e,R8r,P8r,QK,B8r,I8r,N8r,V3,Y3e,q8r,j8r,UK,D8r,G8r,O8r,X3,K3e,V8r,X8r,HK,z8r,W8r,Q8r,z3,Z3e,U8r,H8r,JK,J8r,Y8r,K8r,W3,e5e,Z8r,e9r,YK,o9r,r9r,t9r,Q3,o5e,a9r,n9r,KK,s9r,l9r,i9r,U3,r5e,d9r,c9r,ZK,m9r,f9r,g9r,H3,t5e,h9r,u9r,eZ,p9r,_9r,b9r,J3,a5e,v9r,F9r,oZ,T9r,M9r,E9r,Y3,n5e,C9r,w9r,rZ,A9r,L9r,y9r,K3,s5e,x9r,$9r,tZ,k9r,S9r,R9r,Z3,l5e,P9r,B9r,aZ,I9r,N9r,q9r,e5,i5e,j9r,D9r,nZ,G9r,O9r,V9r,o5,d5e,X9r,z9r,sZ,W9r,Q9r,U9r,r5,wHe,Sc,t5,c5e,w$,H9r,m5e,J9r,AHe,lr,A$,Y9r,Rc,K9r,lZ,Z9r,exr,iZ,oxr,rxr,txr,L$,axr,f5e,nxr,sxr,lxr,Gt,y$,ixr,g5e,dxr,cxr,Pc,mxr,h5e,fxr,gxr,dZ,hxr,uxr,pxr,a5,_xr,Ir,x$,bxr,u5e,vxr,Fxr,vn,Txr,p5e,Mxr,Exr,_5e,Cxr,wxr,b5e,Axr,Lxr,yxr,Ve,n5,v5e,xxr,$xr,cZ,kxr,Sxr,Rxr,s5,F5e,Pxr,Bxr,mZ,Ixr,Nxr,qxr,dl,T5e,jxr,Dxr,fZ,Gxr,Oxr,gZ,Vxr,Xxr,zxr,l5,M5e,Wxr,Qxr,hZ,Uxr,Hxr,Jxr,i5,E5e,Yxr,Kxr,uZ,Zxr,e$r,o$r,d5,C5e,r$r,t$r,pZ,a$r,n$r,s$r,c5,w5e,l$r,i$r,_Z,d$r,c$r,m$r,m5,A5e,f$r,g$r,bZ,h$r,u$r,p$r,f5,LHe,Bc,g5,L5e,$$,_$r,y5e,b$r,yHe,ir,k$,v$r,Ic,F$r,vZ,T$r,M$r,FZ,E$r,C$r,w$r,S$,A$r,x5e,L$r,y$r,x$r,Ot,R$,$$r,$5e,k$r,S$r,Nc,R$r,k5e,P$r,B$r,TZ,I$r,N$r,q$r,h5,j$r,Nr,P$,D$r,S5e,G$r,O$r,Fn,V$r,R5e,X$r,z$r,P5e,W$r,Q$r,B5e,U$r,H$r,J$r,B$,u5,I5e,Y$r,K$r,MZ,Z$r,ekr,okr,p5,N5e,rkr,tkr,EZ,akr,nkr,skr,_5,xHe,qc,b5,q5e,I$,lkr,j5e,ikr,$He,dr,N$,dkr,jc,ckr,CZ,mkr,fkr,wZ,gkr,hkr,ukr,q$,pkr,D5e,_kr,bkr,vkr,Vt,j$,Fkr,G5e,Tkr,Mkr,Dc,Ekr,O5e,Ckr,wkr,AZ,Akr,Lkr,ykr,v5,xkr,qr,D$,$kr,V5e,kkr,Skr,Tn,Rkr,X5e,Pkr,Bkr,z5e,Ikr,Nkr,W5e,qkr,jkr,Dkr,me,F5,Q5e,Gkr,Okr,LZ,Vkr,Xkr,zkr,T5,U5e,Wkr,Qkr,yZ,Ukr,Hkr,Jkr,M5,H5e,Ykr,Kkr,xZ,Zkr,eSr,oSr,E5,J5e,rSr,tSr,$Z,aSr,nSr,sSr,C5,Y5e,lSr,iSr,kZ,dSr,cSr,mSr,w5,K5e,fSr,gSr,SZ,hSr,uSr,pSr,A5,Z5e,_Sr,bSr,RZ,vSr,FSr,TSr,L5,e0e,MSr,ESr,PZ,CSr,wSr,ASr,y5,o0e,LSr,ySr,BZ,xSr,$Sr,kSr,x5,r0e,SSr,RSr,IZ,PSr,BSr,ISr,$5,t0e,NSr,qSr,NZ,jSr,DSr,GSr,k5,a0e,OSr,VSr,qZ,XSr,zSr,WSr,S5,n0e,QSr,USr,jZ,HSr,JSr,YSr,R5,s0e,KSr,ZSr,DZ,eRr,oRr,rRr,P5,l0e,tRr,aRr,GZ,nRr,sRr,lRr,B5,i0e,iRr,dRr,OZ,cRr,mRr,fRr,I5,d0e,gRr,hRr,VZ,uRr,pRr,_Rr,N5,c0e,bRr,vRr,XZ,FRr,TRr,MRr,q5,m0e,ERr,CRr,zZ,wRr,ARr,LRr,j5,f0e,yRr,xRr,WZ,$Rr,kRr,SRr,D5,kHe,Gc,G5,g0e,G$,RRr,h0e,PRr,SHe,cr,O$,BRr,Oc,IRr,QZ,NRr,qRr,UZ,jRr,DRr,GRr,V$,ORr,u0e,VRr,XRr,zRr,Xt,X$,WRr,p0e,QRr,URr,Vc,HRr,_0e,JRr,YRr,HZ,KRr,ZRr,ePr,O5,oPr,jr,z$,rPr,b0e,tPr,aPr,Mn,nPr,v0e,sPr,lPr,F0e,iPr,dPr,T0e,cPr,mPr,fPr,ye,V5,M0e,gPr,hPr,JZ,uPr,pPr,_Pr,X5,E0e,bPr,vPr,YZ,FPr,TPr,MPr,z5,C0e,EPr,CPr,KZ,wPr,APr,LPr,W5,w0e,yPr,xPr,ZZ,$Pr,kPr,SPr,Q5,A0e,RPr,PPr,eee,BPr,IPr,NPr,U5,L0e,qPr,jPr,oee,DPr,GPr,OPr,H5,y0e,VPr,XPr,ree,zPr,WPr,QPr,J5,x0e,UPr,HPr,tee,JPr,YPr,KPr,Y5,$0e,ZPr,eBr,aee,oBr,rBr,tBr,K5,k0e,aBr,nBr,nee,sBr,lBr,iBr,Z5,RHe,Xc,e0,S0e,W$,dBr,R0e,cBr,PHe,mr,Q$,mBr,zc,fBr,see,gBr,hBr,lee,uBr,pBr,_Br,U$,bBr,P0e,vBr,FBr,TBr,zt,H$,MBr,B0e,EBr,CBr,Wc,wBr,I0e,ABr,LBr,iee,yBr,xBr,$Br,o0,kBr,Dr,J$,SBr,N0e,RBr,PBr,En,BBr,q0e,IBr,NBr,j0e,qBr,jBr,D0e,DBr,GBr,OBr,re,r0,G0e,VBr,XBr,dee,zBr,WBr,QBr,t0,O0e,UBr,HBr,cee,JBr,YBr,KBr,a0,V0e,ZBr,eIr,mee,oIr,rIr,tIr,n0,X0e,aIr,nIr,fee,sIr,lIr,iIr,s0,z0e,dIr,cIr,gee,mIr,fIr,gIr,l0,W0e,hIr,uIr,hee,pIr,_Ir,bIr,i0,Q0e,vIr,FIr,uee,TIr,MIr,EIr,d0,U0e,CIr,wIr,pee,AIr,LIr,yIr,c0,H0e,xIr,$Ir,_ee,kIr,SIr,RIr,m0,J0e,PIr,BIr,bee,IIr,NIr,qIr,f0,Y0e,jIr,DIr,vee,GIr,OIr,VIr,g0,K0e,XIr,zIr,Fee,WIr,QIr,UIr,h0,Z0e,HIr,JIr,Tee,YIr,KIr,ZIr,u0,ewe,eNr,oNr,Mee,rNr,tNr,aNr,p0,owe,nNr,sNr,Eee,lNr,iNr,dNr,_0,rwe,cNr,mNr,Cee,fNr,gNr,hNr,b0,twe,uNr,pNr,wee,_Nr,bNr,vNr,v0,awe,FNr,TNr,Aee,MNr,ENr,CNr,F0,nwe,wNr,ANr,Lee,LNr,yNr,xNr,T0,swe,$Nr,kNr,yee,SNr,RNr,PNr,M0,lwe,BNr,INr,xee,NNr,qNr,jNr,E0,iwe,DNr,GNr,$ee,ONr,VNr,XNr,C0,dwe,zNr,WNr,kee,QNr,UNr,HNr,w0,cwe,JNr,YNr,See,KNr,ZNr,eqr,A0,mwe,oqr,rqr,Ree,tqr,aqr,nqr,L0,fwe,sqr,lqr,Pee,iqr,dqr,cqr,y0,gwe,mqr,fqr,Bee,gqr,hqr,uqr,x0,BHe,Qc,$0,hwe,Y$,pqr,uwe,_qr,IHe,fr,K$,bqr,Uc,vqr,Iee,Fqr,Tqr,Nee,Mqr,Eqr,Cqr,Z$,wqr,pwe,Aqr,Lqr,yqr,Wt,ek,xqr,_we,$qr,kqr,Hc,Sqr,bwe,Rqr,Pqr,qee,Bqr,Iqr,Nqr,k0,qqr,Gr,ok,jqr,vwe,Dqr,Gqr,Cn,Oqr,Fwe,Vqr,Xqr,Twe,zqr,Wqr,Mwe,Qqr,Uqr,Hqr,ve,S0,Ewe,Jqr,Yqr,jee,Kqr,Zqr,ejr,R0,Cwe,ojr,rjr,Dee,tjr,ajr,njr,P0,wwe,sjr,ljr,Gee,ijr,djr,cjr,B0,Awe,mjr,fjr,Oee,gjr,hjr,ujr,I0,Lwe,pjr,_jr,Vee,bjr,vjr,Fjr,N0,ywe,Tjr,Mjr,Xee,Ejr,Cjr,wjr,q0,xwe,Ajr,Ljr,zee,yjr,xjr,$jr,j0,$we,kjr,Sjr,Wee,Rjr,Pjr,Bjr,D0,kwe,Ijr,Njr,Qee,qjr,jjr,Djr,G0,Swe,Gjr,Ojr,Uee,Vjr,Xjr,zjr,O0,Rwe,Wjr,Qjr,Hee,Ujr,Hjr,Jjr,V0,Pwe,Yjr,Kjr,Jee,Zjr,eDr,oDr,X0,Bwe,rDr,tDr,Yee,aDr,nDr,sDr,z0,Iwe,lDr,iDr,Kee,dDr,cDr,mDr,W0,Nwe,fDr,gDr,Zee,hDr,uDr,pDr,Q0,qwe,_Dr,bDr,eoe,vDr,FDr,TDr,U0,jwe,MDr,EDr,ooe,CDr,wDr,ADr,H0,NHe,Jc,J0,Dwe,rk,LDr,Gwe,yDr,qHe,gr,tk,xDr,Yc,$Dr,roe,kDr,SDr,toe,RDr,PDr,BDr,ak,IDr,Owe,NDr,qDr,jDr,Qt,nk,DDr,Vwe,GDr,ODr,Kc,VDr,Xwe,XDr,zDr,aoe,WDr,QDr,UDr,Y0,HDr,Or,sk,JDr,zwe,YDr,KDr,wn,ZDr,Wwe,eGr,oGr,Qwe,rGr,tGr,Uwe,aGr,nGr,sGr,lk,K0,Hwe,lGr,iGr,noe,dGr,cGr,mGr,Z0,Jwe,fGr,gGr,soe,hGr,uGr,pGr,ew,jHe,Zc,ow,Ywe,ik,_Gr,Kwe,bGr,DHe,hr,dk,vGr,em,FGr,loe,TGr,MGr,ioe,EGr,CGr,wGr,ck,AGr,Zwe,LGr,yGr,xGr,Ut,mk,$Gr,e6e,kGr,SGr,om,RGr,o6e,PGr,BGr,doe,IGr,NGr,qGr,rw,jGr,Vr,fk,DGr,r6e,GGr,OGr,An,VGr,t6e,XGr,zGr,a6e,WGr,QGr,n6e,UGr,HGr,JGr,s6e,tw,l6e,YGr,KGr,coe,ZGr,eOr,oOr,aw,GHe,rm,nw,i6e,gk,rOr,d6e,tOr,OHe,ur,hk,aOr,tm,nOr,moe,sOr,lOr,foe,iOr,dOr,cOr,uk,mOr,c6e,fOr,gOr,hOr,Ht,pk,uOr,m6e,pOr,_Or,am,bOr,f6e,vOr,FOr,goe,TOr,MOr,EOr,sw,COr,Xr,_k,wOr,g6e,AOr,LOr,Ln,yOr,h6e,xOr,$Or,u6e,kOr,SOr,p6e,ROr,POr,BOr,ie,lw,_6e,IOr,NOr,hoe,qOr,jOr,DOr,iw,b6e,GOr,OOr,uoe,VOr,XOr,zOr,dw,v6e,WOr,QOr,poe,UOr,HOr,JOr,cw,F6e,YOr,KOr,_oe,ZOr,eVr,oVr,mw,T6e,rVr,tVr,boe,aVr,nVr,sVr,fw,M6e,lVr,iVr,voe,dVr,cVr,mVr,gw,E6e,fVr,gVr,Foe,hVr,uVr,pVr,hw,C6e,_Vr,bVr,Toe,vVr,FVr,TVr,uw,w6e,MVr,EVr,Moe,CVr,wVr,AVr,pw,A6e,LVr,yVr,Eoe,xVr,$Vr,kVr,_w,L6e,SVr,RVr,Coe,PVr,BVr,IVr,bw,y6e,NVr,qVr,woe,jVr,DVr,GVr,vw,x6e,OVr,VVr,Aoe,XVr,zVr,WVr,Fw,$6e,QVr,UVr,Loe,HVr,JVr,YVr,Tw,k6e,KVr,ZVr,yoe,eXr,oXr,rXr,Mw,S6e,tXr,aXr,xoe,nXr,sXr,lXr,Ew,R6e,iXr,dXr,$oe,cXr,mXr,fXr,Cw,P6e,gXr,hXr,koe,uXr,pXr,_Xr,ww,B6e,bXr,vXr,Soe,FXr,TXr,MXr,Aw,I6e,EXr,CXr,Roe,wXr,AXr,LXr,Lw,N6e,yXr,xXr,Poe,$Xr,kXr,SXr,yw,VHe,nm,xw,q6e,bk,RXr,j6e,PXr,XHe,pr,vk,BXr,sm,IXr,Boe,NXr,qXr,Ioe,jXr,DXr,GXr,Fk,OXr,D6e,VXr,XXr,zXr,Jt,Tk,WXr,G6e,QXr,UXr,lm,HXr,O6e,JXr,YXr,Noe,KXr,ZXr,ezr,$w,ozr,zr,Mk,rzr,V6e,tzr,azr,yn,nzr,X6e,szr,lzr,z6e,izr,dzr,W6e,czr,mzr,fzr,de,kw,Q6e,gzr,hzr,qoe,uzr,pzr,_zr,Sw,U6e,bzr,vzr,joe,Fzr,Tzr,Mzr,Rw,H6e,Ezr,Czr,Doe,wzr,Azr,Lzr,Pw,J6e,yzr,xzr,Goe,$zr,kzr,Szr,Bw,Y6e,Rzr,Pzr,Ooe,Bzr,Izr,Nzr,Iw,K6e,qzr,jzr,Voe,Dzr,Gzr,Ozr,Nw,Z6e,Vzr,Xzr,Xoe,zzr,Wzr,Qzr,qw,eAe,Uzr,Hzr,zoe,Jzr,Yzr,Kzr,jw,oAe,Zzr,eWr,Woe,oWr,rWr,tWr,Dw,rAe,aWr,nWr,Qoe,sWr,lWr,iWr,Gw,tAe,dWr,cWr,Uoe,mWr,fWr,gWr,Ow,aAe,hWr,uWr,Hoe,pWr,_Wr,bWr,Vw,nAe,vWr,FWr,Joe,TWr,MWr,EWr,Xw,sAe,CWr,wWr,Yoe,AWr,LWr,yWr,zw,lAe,xWr,$Wr,Koe,kWr,SWr,RWr,Ww,iAe,PWr,BWr,Zoe,IWr,NWr,qWr,Qw,dAe,jWr,DWr,ere,GWr,OWr,VWr,Uw,cAe,XWr,zWr,ore,WWr,QWr,UWr,Hw,mAe,HWr,JWr,rre,YWr,KWr,ZWr,Jw,fAe,eQr,oQr,tre,rQr,tQr,aQr,Yw,gAe,nQr,sQr,are,lQr,iQr,dQr,Kw,zHe,im,Zw,hAe,Ek,cQr,uAe,mQr,WHe,_r,Ck,fQr,dm,gQr,nre,hQr,uQr,sre,pQr,_Qr,bQr,wk,vQr,pAe,FQr,TQr,MQr,Yt,Ak,EQr,_Ae,CQr,wQr,cm,AQr,bAe,LQr,yQr,lre,xQr,$Qr,kQr,e6,SQr,Wr,Lk,RQr,vAe,PQr,BQr,xn,IQr,FAe,NQr,qQr,TAe,jQr,DQr,MAe,GQr,OQr,VQr,EAe,o6,CAe,XQr,zQr,ire,WQr,QQr,UQr,r6,QHe,mm,t6,wAe,yk,HQr,AAe,JQr,UHe,br,xk,YQr,fm,KQr,dre,ZQr,eUr,cre,oUr,rUr,tUr,$k,aUr,LAe,nUr,sUr,lUr,Kt,kk,iUr,yAe,dUr,cUr,gm,mUr,xAe,fUr,gUr,mre,hUr,uUr,pUr,a6,_Ur,Qr,Sk,bUr,$Ae,vUr,FUr,$n,TUr,kAe,MUr,EUr,SAe,CUr,wUr,RAe,AUr,LUr,yUr,PAe,n6,BAe,xUr,$Ur,fre,kUr,SUr,RUr,s6,HHe,hm,l6,IAe,Rk,PUr,NAe,BUr,JHe,vr,Pk,IUr,um,NUr,gre,qUr,jUr,hre,DUr,GUr,OUr,Bk,VUr,qAe,XUr,zUr,WUr,Zt,Ik,QUr,jAe,UUr,HUr,pm,JUr,DAe,YUr,KUr,ure,ZUr,eHr,oHr,i6,rHr,Ur,Nk,tHr,GAe,aHr,nHr,kn,sHr,OAe,lHr,iHr,VAe,dHr,cHr,XAe,mHr,fHr,gHr,te,d6,zAe,hHr,uHr,pre,pHr,_Hr,bHr,c6,WAe,vHr,FHr,_re,THr,MHr,EHr,m6,QAe,CHr,wHr,bre,AHr,LHr,yHr,f6,UAe,xHr,$Hr,vre,kHr,SHr,RHr,g6,HAe,PHr,BHr,Fre,IHr,NHr,qHr,h6,JAe,jHr,DHr,Tre,GHr,OHr,VHr,u6,YAe,XHr,zHr,Mre,WHr,QHr,UHr,p6,KAe,HHr,JHr,Ere,YHr,KHr,ZHr,_6,ZAe,eJr,oJr,Cre,rJr,tJr,aJr,b6,e7e,nJr,sJr,wre,lJr,iJr,dJr,v6,o7e,cJr,mJr,Are,fJr,gJr,hJr,F6,r7e,uJr,pJr,Lre,_Jr,bJr,vJr,T6,t7e,FJr,TJr,yre,MJr,EJr,CJr,M6,a7e,wJr,AJr,xre,LJr,yJr,xJr,E6,n7e,$Jr,kJr,$re,SJr,RJr,PJr,C6,s7e,BJr,IJr,kre,NJr,qJr,jJr,w6,l7e,DJr,GJr,Sre,OJr,VJr,XJr,A6,i7e,zJr,WJr,Rre,QJr,UJr,HJr,L6,d7e,JJr,YJr,Pre,KJr,ZJr,eYr,y6,c7e,oYr,rYr,Bre,tYr,aYr,nYr,x6,m7e,sYr,lYr,Ire,iYr,dYr,cYr,$6,f7e,mYr,fYr,Nre,gYr,hYr,uYr,k6,g7e,pYr,_Yr,qre,bYr,vYr,FYr,S6,h7e,TYr,MYr,jre,EYr,CYr,wYr,R6,u7e,AYr,LYr,Dre,yYr,xYr,$Yr,P6,p7e,kYr,SYr,Gre,RYr,PYr,BYr,B6,_7e,IYr,NYr,Ore,qYr,jYr,DYr,I6,YHe,_m,N6,b7e,qk,GYr,v7e,OYr,KHe,Fr,jk,VYr,bm,XYr,Vre,zYr,WYr,Xre,QYr,UYr,HYr,Dk,JYr,F7e,YYr,KYr,ZYr,ea,Gk,eKr,T7e,oKr,rKr,vm,tKr,M7e,aKr,nKr,zre,sKr,lKr,iKr,q6,dKr,Hr,Ok,cKr,E7e,mKr,fKr,Sn,gKr,C7e,hKr,uKr,w7e,pKr,_Kr,A7e,bKr,vKr,FKr,xe,j6,L7e,TKr,MKr,Wre,EKr,CKr,wKr,D6,y7e,AKr,LKr,Qre,yKr,xKr,$Kr,G6,x7e,kKr,SKr,Ure,RKr,PKr,BKr,O6,$7e,IKr,NKr,Hre,qKr,jKr,DKr,V6,k7e,GKr,OKr,Jre,VKr,XKr,zKr,X6,S7e,WKr,QKr,Yre,UKr,HKr,JKr,z6,R7e,YKr,KKr,Kre,ZKr,eZr,oZr,W6,P7e,rZr,tZr,Zre,aZr,nZr,sZr,Q6,B7e,lZr,iZr,ete,dZr,cZr,mZr,U6,I7e,fZr,gZr,ote,hZr,uZr,pZr,H6,ZHe,Fm,J6,N7e,Vk,_Zr,q7e,bZr,eJe,Tr,Xk,vZr,Tm,FZr,rte,TZr,MZr,tte,EZr,CZr,wZr,zk,AZr,j7e,LZr,yZr,xZr,oa,Wk,$Zr,D7e,kZr,SZr,Mm,RZr,G7e,PZr,BZr,ate,IZr,NZr,qZr,Y6,jZr,Jr,Qk,DZr,O7e,GZr,OZr,Rn,VZr,V7e,XZr,zZr,X7e,WZr,QZr,z7e,UZr,HZr,JZr,Ee,K6,W7e,YZr,KZr,nte,ZZr,eet,oet,Z6,Q7e,ret,tet,ste,aet,net,set,eA,U7e,iet,det,lte,cet,met,fet,oA,H7e,get,het,ite,uet,pet,_et,rA,J7e,bet,vet,dte,Fet,Tet,Met,tA,Y7e,Eet,Cet,cte,wet,Aet,Let,aA,K7e,yet,xet,mte,$et,ket,Set,nA,Z7e,Ret,Pet,fte,Bet,Iet,Net,sA,eLe,qet,jet,gte,Det,Get,Oet,lA,oLe,Vet,Xet,hte,zet,Wet,Qet,iA,rLe,Uet,Het,ute,Jet,Yet,Ket,dA,tLe,Zet,eot,pte,oot,rot,tot,cA,aLe,aot,not,_te,sot,lot,iot,mA,oJe,Em,fA,nLe,Uk,dot,sLe,cot,rJe,Mr,Hk,mot,Cm,fot,bte,got,hot,vte,uot,pot,_ot,Jk,bot,lLe,vot,Fot,Tot,ra,Yk,Mot,iLe,Eot,Cot,wm,wot,dLe,Aot,Lot,Fte,yot,xot,$ot,gA,kot,Yr,Kk,Sot,cLe,Rot,Pot,Pn,Bot,mLe,Iot,Not,fLe,qot,jot,gLe,Dot,Got,Oot,$e,hA,hLe,Vot,Xot,Tte,zot,Wot,Qot,uA,uLe,Uot,Hot,Mte,Jot,Yot,Kot,pA,pLe,Zot,ert,Ete,ort,rrt,trt,_A,_Le,art,nrt,Cte,srt,lrt,irt,bA,bLe,drt,crt,wte,mrt,frt,grt,vA,vLe,hrt,urt,Ate,prt,_rt,brt,FA,FLe,vrt,Frt,Lte,Trt,Mrt,Ert,TA,TLe,Crt,wrt,yte,Art,Lrt,yrt,MA,MLe,xrt,$rt,xte,krt,Srt,Rrt,EA,ELe,Prt,Brt,$te,Irt,Nrt,qrt,CA,tJe,Am,wA,CLe,Zk,jrt,wLe,Drt,aJe,Er,eS,Grt,Lm,Ort,kte,Vrt,Xrt,Ste,zrt,Wrt,Qrt,oS,Urt,ALe,Hrt,Jrt,Yrt,ta,rS,Krt,LLe,Zrt,ett,ym,ott,yLe,rtt,ttt,Rte,att,ntt,stt,AA,ltt,Kr,tS,itt,xLe,dtt,ctt,Bn,mtt,$Le,ftt,gtt,kLe,htt,utt,SLe,ptt,_tt,btt,ke,LA,RLe,vtt,Ftt,Pte,Ttt,Mtt,Ett,yA,PLe,Ctt,wtt,Bte,Att,Ltt,ytt,xA,BLe,xtt,$tt,Ite,ktt,Stt,Rtt,$A,ILe,Ptt,Btt,Nte,Itt,Ntt,qtt,kA,NLe,jtt,Dtt,qte,Gtt,Ott,Vtt,SA,qLe,Xtt,ztt,jte,Wtt,Qtt,Utt,RA,jLe,Htt,Jtt,Dte,Ytt,Ktt,Ztt,PA,DLe,eat,oat,Gte,rat,tat,aat,BA,GLe,nat,sat,Ote,lat,iat,dat,IA,OLe,cat,mat,Vte,fat,gat,hat,NA,nJe,xm,qA,VLe,aS,uat,XLe,pat,sJe,Cr,nS,_at,$m,bat,Xte,vat,Fat,zte,Tat,Mat,Eat,sS,Cat,zLe,wat,Aat,Lat,aa,lS,yat,WLe,xat,$at,km,kat,QLe,Sat,Rat,Wte,Pat,Bat,Iat,jA,Nat,Zr,iS,qat,ULe,jat,Dat,In,Gat,HLe,Oat,Vat,JLe,Xat,zat,YLe,Wat,Qat,Uat,Se,DA,KLe,Hat,Jat,Qte,Yat,Kat,Zat,GA,ZLe,ent,ont,Ute,rnt,tnt,ant,OA,eye,nnt,snt,Hte,lnt,int,dnt,VA,oye,cnt,mnt,Jte,fnt,gnt,hnt,XA,rye,unt,pnt,Yte,_nt,bnt,vnt,zA,tye,Fnt,Tnt,Kte,Mnt,Ent,Cnt,WA,aye,wnt,Ant,Zte,Lnt,ynt,xnt,QA,nye,$nt,knt,eae,Snt,Rnt,Pnt,UA,sye,Bnt,Int,oae,Nnt,qnt,jnt,HA,lye,Dnt,Gnt,rae,Ont,Vnt,Xnt,JA,lJe,Sm,YA,iye,dS,znt,dye,Wnt,iJe,wr,cS,Qnt,Rm,Unt,tae,Hnt,Jnt,aae,Ynt,Knt,Znt,mS,est,cye,ost,rst,tst,na,fS,ast,mye,nst,sst,Pm,lst,fye,ist,dst,nae,cst,mst,fst,KA,gst,et,gS,hst,gye,ust,pst,Nn,_st,hye,bst,vst,uye,Fst,Tst,pye,Mst,Est,Cst,Re,ZA,_ye,wst,Ast,sae,Lst,yst,xst,e7,bye,$st,kst,lae,Sst,Rst,Pst,o7,vye,Bst,Ist,iae,Nst,qst,jst,r7,Fye,Dst,Gst,dae,Ost,Vst,Xst,t7,Tye,zst,Wst,cae,Qst,Ust,Hst,a7,Mye,Jst,Yst,mae,Kst,Zst,elt,n7,Eye,olt,rlt,fae,tlt,alt,nlt,s7,Cye,slt,llt,gae,ilt,dlt,clt,l7,wye,mlt,flt,hae,glt,hlt,ult,i7,Aye,plt,_lt,uae,blt,vlt,Flt,d7,dJe,Bm,c7,Lye,hS,Tlt,yye,Mlt,cJe,Ar,uS,Elt,Im,Clt,pae,wlt,Alt,_ae,Llt,ylt,xlt,pS,$lt,xye,klt,Slt,Rlt,sa,_S,Plt,$ye,Blt,Ilt,Nm,Nlt,kye,qlt,jlt,bae,Dlt,Glt,Olt,m7,Vlt,ot,bS,Xlt,Sye,zlt,Wlt,qn,Qlt,Rye,Ult,Hlt,Pye,Jlt,Ylt,Bye,Klt,Zlt,eit,Xe,f7,Iye,oit,rit,vae,tit,ait,nit,g7,Nye,sit,lit,Fae,iit,dit,cit,h7,qye,mit,fit,Tae,git,hit,uit,u7,jye,pit,_it,Mae,bit,vit,Fit,p7,Dye,Tit,Mit,Eae,Eit,Cit,wit,_7,Gye,Ait,Lit,Cae,yit,xit,$it,b7,Oye,kit,Sit,wae,Rit,Pit,Bit,v7,Vye,Iit,Nit,Aae,qit,jit,Dit,F7,mJe,qm,T7,Xye,vS,Git,zye,Oit,fJe,Lr,FS,Vit,jm,Xit,Lae,zit,Wit,yae,Qit,Uit,Hit,TS,Jit,Wye,Yit,Kit,Zit,la,MS,edt,Qye,odt,rdt,Dm,tdt,Uye,adt,ndt,xae,sdt,ldt,idt,M7,ddt,rt,ES,cdt,Hye,mdt,fdt,jn,gdt,Jye,hdt,udt,Yye,pdt,_dt,Kye,bdt,vdt,Fdt,ze,E7,Zye,Tdt,Mdt,$ae,Edt,Cdt,wdt,C7,e8e,Adt,Ldt,kae,ydt,xdt,$dt,w7,o8e,kdt,Sdt,Sae,Rdt,Pdt,Bdt,A7,r8e,Idt,Ndt,Rae,qdt,jdt,Ddt,L7,t8e,Gdt,Odt,Pae,Vdt,Xdt,zdt,y7,a8e,Wdt,Qdt,Bae,Udt,Hdt,Jdt,x7,n8e,Ydt,Kdt,Iae,Zdt,ect,oct,$7,s8e,rct,tct,Nae,act,nct,sct,k7,gJe,Gm,S7,l8e,CS,lct,i8e,ict,hJe,yr,wS,dct,Om,cct,qae,mct,fct,jae,gct,hct,uct,AS,pct,d8e,_ct,bct,vct,ia,LS,Fct,c8e,Tct,Mct,Vm,Ect,m8e,Cct,wct,Dae,Act,Lct,yct,R7,xct,tt,yS,$ct,f8e,kct,Sct,Dn,Rct,g8e,Pct,Bct,h8e,Ict,Nct,u8e,qct,jct,Dct,p8e,P7,_8e,Gct,Oct,Gae,Vct,Xct,zct,B7,uJe,Xm,I7,b8e,xS,Wct,v8e,Qct,pJe,xr,$S,Uct,zm,Hct,Oae,Jct,Yct,Vae,Kct,Zct,emt,kS,omt,F8e,rmt,tmt,amt,da,SS,nmt,T8e,smt,lmt,Wm,imt,M8e,dmt,cmt,Xae,mmt,fmt,gmt,N7,hmt,at,RS,umt,E8e,pmt,_mt,Gn,bmt,C8e,vmt,Fmt,w8e,Tmt,Mmt,A8e,Emt,Cmt,wmt,PS,q7,L8e,Amt,Lmt,zae,ymt,xmt,$mt,j7,y8e,kmt,Smt,Wae,Rmt,Pmt,Bmt,D7,_Je,Qm,G7,x8e,BS,Imt,$8e,Nmt,bJe,$r,IS,qmt,Um,jmt,Qae,Dmt,Gmt,Uae,Omt,Vmt,Xmt,NS,zmt,k8e,Wmt,Qmt,Umt,ca,qS,Hmt,S8e,Jmt,Ymt,Hm,Kmt,R8e,Zmt,eft,Hae,oft,rft,tft,O7,aft,nt,jS,nft,P8e,sft,lft,On,ift,B8e,dft,cft,I8e,mft,fft,N8e,gft,hft,uft,q8e,V7,j8e,pft,_ft,Jae,bft,vft,Fft,X7,vJe;return d=new oe({}),ja=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),v8=new oe({}),F8=new P({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),af=new Tft({props:{warning:!0,$$slots:{default:[Jta]},$$scope:{ctx:$}}}),T8=new oe({}),M8=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/configuration_auto.py#L625"}}),w8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/configuration_auto.py#L648"}}),Th=new I({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[Yta]},$$scope:{ctx:$}}}),A8=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/configuration_auto.py#L771"}}),L8=new oe({}),y8=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/tokenization_auto.py#L418"}}),k8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/tokenization_auto.py#L432"}}),tu=new I({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[Kta]},$$scope:{ctx:$}}}),S8=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/tokenization_auto.py#L633"}}),R8=new oe({}),P8=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/feature_extraction_auto.py#L199"}}),N8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/main/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>huggingface-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/feature_extraction_auto.py#L213"}}),Xu=new Tft({props:{$$slots:{default:[Zta]},$$scope:{ctx:$}}}),zu=new I({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[eaa]},$$scope:{ctx:$}}}),q8=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/feature_extraction_auto.py#L340"}}),j8=new oe({}),D8=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/processing_auto.py#L91"}}),V8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>huggingface-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/processing_auto.py#L105"}}),hp=new Tft({props:{$$slots:{default:[oaa]},$$scope:{ctx:$}}}),up=new I({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[raa]},$$scope:{ctx:$}}}),X8=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/processing_auto.py#L258"}}),z8=new oe({}),W8=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L808"}}),U8=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomModel">BloomModel</a> (BLOOM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (CANINE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenModel">CodeGenModel</a> (CodeGen model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/donut#transformers.DonutSwinConfig">DonutSwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/donut#transformers.DonutSwinModel">DonutSwinModel</a> (DonutSwin model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (FLAVA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXModel">GPTNeoXModel</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/main/en/model_doc/groupvit#transformers.GroupViTConfig">GroupViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/groupvit#transformers.GroupViTModel">GroupViTModel</a> (GroupViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model">LayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/levit#transformers.LevitModel">LevitModel</a> (LeViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Model">LongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTModel">MCTCTModel</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTModel">MobileViTModel</a> (MobileViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpModel">MvpModel</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaModel">NezhaModel</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTConfig">OwlViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTModel">OwlViTModel</a> (OWL-ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2Config">Swinv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2Model">Swinv2Model</a> (Swin Transformer V2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEConfig">VideoMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEModel">VideoMAEModel</a> (VideoMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),bp=new I({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[taa]},$$scope:{ctx:$}}}),H8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),L2=new I({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[aaa]},$$scope:{ctx:$}}}),J8=new oe({}),Y8=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L815"}}),Z8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (FLAVA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForPreTraining">NezhaForPreTraining</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEConfig">VideoMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEForPreTraining">VideoMAEForPreTraining</a> (VideoMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),x2=new I({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[naa]},$$scope:{ctx:$}}}),e9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Cb=new I({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[saa]},$$scope:{ctx:$}}}),o9=new oe({}),r9=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L830"}}),a9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenConfig">CodeGenConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenForCausalLM">CodeGenForCausalLM</a> (CodeGen model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM">GPTNeoXForCausalLM</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpForCausalLM">MvpForCausalLM</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Ab=new I({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[laa]},$$scope:{ctx:$}}}),n9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),hv=new I({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[iaa]},$$scope:{ctx:$}}}),s9=new oe({}),l9=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L837"}}),d9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForMaskedLM">NezhaForMaskedLM</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),pv=new I({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[daa]},$$scope:{ctx:$}}}),c9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),r1=new I({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[caa]},$$scope:{ctx:$}}}),m9=new oe({}),f9=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L844"}}),h9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration">LongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpForConditionalGeneration">MvpForConditionalGeneration</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLM-ProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),a1=new I({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[maa]},$$scope:{ctx:$}}}),u9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),w1=new I({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[faa]},$$scope:{ctx:$}}}),p9=new oe({}),_9=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L853"}}),v9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomForSequenceClassification">BloomForSequenceClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification">LayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeForSequenceClassification">LukeForSequenceClassification</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpForSequenceClassification">MvpForSequenceClassification</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForSequenceClassification">NezhaForSequenceClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTForSequenceClassification">OPTForSequenceClassification</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),L1=new I({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[gaa]},$$scope:{ctx:$}}}),F9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),LF=new I({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[haa]},$$scope:{ctx:$}}}),T9=new oe({}),M9=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L898"}}),C9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (CANINE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeForMultipleChoice">LukeForMultipleChoice</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForMultipleChoice">NezhaForMultipleChoice</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),xF=new I({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[uaa]},$$scope:{ctx:$}}}),w9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),iT=new I({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[paa]},$$scope:{ctx:$}}}),A9=new oe({}),L9=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L905"}}),x9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction">NezhaForNextSentencePrediction</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),cT=new I({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[_aa]},$$scope:{ctx:$}}}),$9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),bT=new I({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[baa]},$$scope:{ctx:$}}}),k9=new oe({}),S9=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L891"}}),P9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomForTokenClassification">BloomForTokenClassification</a> (BLOOM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification">LayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeForTokenClassification">LukeForTokenClassification</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForTokenClassification">NezhaForTokenClassification</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),FT=new I({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[vaa]},$$scope:{ctx:$}}}),B9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),nM=new I({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[Faa]},$$scope:{ctx:$}}}),I9=new oe({}),N9=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L862"}}),j9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (CANINE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeForQuestionAnswering">LukeForQuestionAnswering</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig">MvpConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mvp#transformers.MvpForQuestionAnswering">MvpForQuestionAnswering</a> (MVP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig">NezhaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForQuestionAnswering">NezhaForQuestionAnswering</a> (Nezha model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),lM=new I({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[Taa]},$$scope:{ctx:$}}}),D9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),KM=new I({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[Maa]},$$scope:{ctx:$}}}),G9=new oe({}),O9=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L869"}}),X9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),eE=new I({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[Eaa]},$$scope:{ctx:$}}}),z9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),tE=new I({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[Caa]},$$scope:{ctx:$}}}),W9=new oe({}),Q9=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L914"}}),H9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/levit#transformers.LevitForImageClassification">LevitForImageClassification</a> or <a href="/docs/transformers/main/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher">LevitForImageClassificationWithTeacher</a> (LeViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTForImageClassification">MobileViTForImageClassification</a> (MobileViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2Config">Swinv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2ForImageClassification">Swinv2ForImageClassification</a> (Swin Transformer V2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),nE=new I({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[waa]},$$scope:{ctx:$}}}),J9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),TE=new I({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[Aaa]},$$scope:{ctx:$}}}),Y9=new oe({}),K9=new R({props:{name:"class transformers.AutoModelForVideoClassification",anchor:"transformers.AutoModelForVideoClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L953"}}),ex=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVideoClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVideoClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEConfig">VideoMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEForVideoClassification">VideoMAEForVideoClassification</a> (VideoMAE model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),EE=new I({props:{anchor:"transformers.AutoModelForVideoClassification.from_config.example",$$slots:{default:[Laa]},$$scope:{ctx:$}}}),ox=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVideoClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),AE=new I({props:{anchor:"transformers.AutoModelForVideoClassification.from_pretrained.example",$$slots:{default:[yaa]},$$scope:{ctx:$}}}),rx=new oe({}),tx=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L960"}}),nx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),yE=new I({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[xaa]},$$scope:{ctx:$}}}),sx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),kE=new I({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[$aa]},$$scope:{ctx:$}}}),lx=new oe({}),ix=new R({props:{name:"class transformers.AutoModelForVisualQuestionAnswering",anchor:"transformers.AutoModelForVisualQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L880"}}),cx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltForQuestionAnswering">ViltForQuestionAnswering</a> (ViLT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),RE=new I({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.example",$$slots:{default:[kaa]},$$scope:{ctx:$}}}),mx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),IE=new I({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.example",$$slots:{default:[Saa]},$$scope:{ctx:$}}}),fx=new oe({}),gx=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L967"}}),ux=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),qE=new I({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[Raa]},$$scope:{ctx:$}}}),px=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),HE=new I({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[Paa]},$$scope:{ctx:$}}}),_x=new oe({}),bx=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L990"}}),Fx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),YE=new I({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[Baa]},$$scope:{ctx:$}}}),Tx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),a4=new I({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[Iaa]},$$scope:{ctx:$}}}),Mx=new oe({}),Ex=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L974"}}),wx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTForCTC">MCTCTForCTC</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),s4=new I({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[Naa]},$$scope:{ctx:$}}}),Ax=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),b4=new I({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[qaa]},$$scope:{ctx:$}}}),Lx=new oe({}),yx=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L981"}}),$x=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),F4=new I({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[jaa]},$$scope:{ctx:$}}}),kx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),C4=new I({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[Daa]},$$scope:{ctx:$}}}),Rx=new oe({}),Px=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L999"}}),Ix=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),A4=new I({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[Gaa]},$$scope:{ctx:$}}}),Nx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),R4=new I({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[Oaa]},$$scope:{ctx:$}}}),qx=new oe({}),jx=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L1006"}}),Gx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2Config">Swinv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2ForMaskedImageModeling">Swinv2ForMaskedImageModeling</a> (Swin Transformer V2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),B4=new I({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[Vaa]},$$scope:{ctx:$}}}),Ox=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),G4=new I({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[Xaa]},$$scope:{ctx:$}}}),Vx=new oe({}),Xx=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L946"}}),Wx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),V4=new I({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[zaa]},$$scope:{ctx:$}}}),Qx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Q4=new I({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[Waa]},$$scope:{ctx:$}}}),Hx=new oe({}),Jx=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L921"}}),Kx=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),H4=new I({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[Qaa]},$$scope:{ctx:$}}}),Zx=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),K4=new I({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[Uaa]},$$scope:{ctx:$}}}),e$=new oe({}),o$=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L928"}}),t$=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig">MobileViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation">MobileViTForSemanticSegmentation</a> (MobileViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),eC=new I({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[Haa]},$$scope:{ctx:$}}}),a$=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),lC=new I({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[Jaa]},$$scope:{ctx:$}}}),n$=new oe({}),s$=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L937"}}),i$=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),dC=new I({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[Yaa]},$$scope:{ctx:$}}}),d$=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),fC=new I({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[Kaa]},$$scope:{ctx:$}}}),c$=new oe({}),m$=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L420"}}),g$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.TFDeiTModel">TFDeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.TFLayoutLMv3Model">TFLayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.TFOPTModel">TFOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/regnet#transformers.TFRegNetModel">TFRegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/resnet#transformers.TFResNetModel">TFResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.TFSegformerModel">TFSegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.TFXGLMModel">TFXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),hC=new I({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[Zaa]},$$scope:{ctx:$}}}),h$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),g3=new I({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[ena]},$$scope:{ctx:$}}}),u$=new oe({}),p$=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L427"}}),b$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),u3=new I({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[ona]},$$scope:{ctx:$}}}),v$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),j3=new I({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[rna]},$$scope:{ctx:$}}}),F$=new oe({}),T$=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L442"}}),E$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.TFOPTForCausalLM">TFOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.TFXGLMForCausalLM">TFXGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),G3=new I({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[tna]},$$scope:{ctx:$}}}),C$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),r5=new I({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[ana]},$$scope:{ctx:$}}}),w$=new oe({}),A$=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L458"}}),y$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.TFDeiTForImageClassification">TFDeiTForImageClassification</a> or <a href="/docs/transformers/main/en/model_doc/deit#transformers.TFDeiTForImageClassificationWithTeacher">TFDeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/regnet#transformers.TFRegNetForImageClassification">TFRegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/resnet#transformers.TFResNetForImageClassification">TFResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.TFSegformerForImageClassification">TFSegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),a5=new I({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[nna]},$$scope:{ctx:$}}}),x$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),f5=new I({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[sna]},$$scope:{ctx:$}}}),$$=new oe({}),k$=new R({props:{name:"class transformers.TFAutoModelForSemanticSegmentation",anchor:"transformers.TFAutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L467"}}),R$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionForSemanticSegmentation">TFData2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.TFSegformerForSemanticSegmentation">TFSegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),h5=new I({props:{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[lna]},$$scope:{ctx:$}}}),P$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),_5=new I({props:{anchor:"transformers.TFAutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[ina]},$$scope:{ctx:$}}}),I$=new oe({}),N$=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L483"}}),j$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),v5=new I({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[dna]},$$scope:{ctx:$}}}),D$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),D5=new I({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[cna]},$$scope:{ctx:$}}}),G$=new oe({}),O$=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L490"}}),X$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),O5=new I({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[mna]},$$scope:{ctx:$}}}),z$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Z5=new I({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[fna]},$$scope:{ctx:$}}}),W$=new oe({}),Q$=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L499"}}),H$=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.TFLayoutLMv3ForSequenceClassification">TFLayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),o0=new I({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[gna]},$$scope:{ctx:$}}}),J$=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),x0=new I({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[hna]},$$scope:{ctx:$}}}),Y$=new oe({}),K$=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L535"}}),ek=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),k0=new I({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[una]},$$scope:{ctx:$}}}),ok=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),H0=new I({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[pna]},$$scope:{ctx:$}}}),rk=new oe({}),tk=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L542"}}),nk=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Y0=new I({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[_na]},$$scope:{ctx:$}}}),sk=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),ew=new I({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[bna]},$$scope:{ctx:$}}}),ik=new oe({}),dk=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L515"}}),mk=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),rw=new I({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[vna]},$$scope:{ctx:$}}}),fk=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),aw=new I({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[Fna]},$$scope:{ctx:$}}}),gk=new oe({}),hk=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L526"}}),pk=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.TFLayoutLMv3ForTokenClassification">TFLayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),sw=new I({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[Tna]},$$scope:{ctx:$}}}),_k=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),yw=new I({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[Mna]},$$scope:{ctx:$}}}),bk=new oe({}),vk=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L508"}}),Tk=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.TFLayoutLMv3ForQuestionAnswering">TFLayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),$w=new I({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[Ena]},$$scope:{ctx:$}}}),Mk=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Kw=new I({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[Cna]},$$scope:{ctx:$}}}),Ek=new oe({}),Ck=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L476"}}),Ak=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),e6=new I({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[wna]},$$scope:{ctx:$}}}),Lk=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),r6=new I({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[Ana]},$$scope:{ctx:$}}}),yk=new oe({}),xk=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L551"}}),kk=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),a6=new I({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[Lna]},$$scope:{ctx:$}}}),Sk=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),s6=new I({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[yna]},$$scope:{ctx:$}}}),Rk=new oe({}),Pk=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L246"}}),Ik=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5Model">FlaxLongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.FlaxOPTModel">FlaxOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),i6=new I({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[xna]},$$scope:{ctx:$}}}),Nk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),I6=new I({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[$na]},$$scope:{ctx:$}}}),qk=new oe({}),jk=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L260"}}),Gk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.FlaxOPTForCausalLM">FlaxOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),q6=new I({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[kna]},$$scope:{ctx:$}}}),Ok=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),H6=new I({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[Sna]},$$scope:{ctx:$}}}),Vk=new oe({}),Xk=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L253"}}),Wk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Y6=new I({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[Rna]},$$scope:{ctx:$}}}),Qk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),mA=new I({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[Pna]},$$scope:{ctx:$}}}),Uk=new oe({}),Hk=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L267"}}),Yk=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),gA=new I({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[Bna]},$$scope:{ctx:$}}}),Kk=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),CA=new I({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[Ina]},$$scope:{ctx:$}}}),Zk=new oe({}),eS=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),rS=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),AA=new I({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[Nna]},$$scope:{ctx:$}}}),tS=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),NA=new I({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[qna]},$$scope:{ctx:$}}}),aS=new oe({}),nS=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),lS=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),jA=new I({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[jna]},$$scope:{ctx:$}}}),iS=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),JA=new I({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[Dna]},$$scope:{ctx:$}}}),dS=new oe({}),cS=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L292"}}),fS=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),KA=new I({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[Gna]},$$scope:{ctx:$}}}),gS=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),d7=new I({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[Ona]},$$scope:{ctx:$}}}),hS=new oe({}),uS=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),_S=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),m7=new I({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[Vna]},$$scope:{ctx:$}}}),bS=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),F7=new I({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[Xna]},$$scope:{ctx:$}}}),vS=new oe({}),FS=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L308"}}),MS=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),M7=new I({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[zna]},$$scope:{ctx:$}}}),ES=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),k7=new I({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[Wna]},$$scope:{ctx:$}}}),CS=new oe({}),wS=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),LS=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),R7=new I({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[Qna]},$$scope:{ctx:$}}}),yS=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),B7=new I({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[Una]},$$scope:{ctx:$}}}),xS=new oe({}),$S=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),SS=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),N7=new I({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[Hna]},$$scope:{ctx:$}}}),RS=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),D7=new I({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[Jna]},$$scope:{ctx:$}}}),BS=new oe({}),IS=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L333"}}),qS=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),O7=new I({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[Yna]},$$scope:{ctx:$}}}),jS=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),X7=new I({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[Kna]},$$scope:{ctx:$}}}),{c(){g=a("meta"),v=l(),u=a("h1"),f=a("a"),p=a("span"),F(d.$$.fragment),h=l(),Ao=a("span"),Oi=o("Auto Classes"),Zm=l(),mt=a("p"),Vi=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Xi=a("code"),u8=o("from_pretrained()"),ef=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Oe=l(),Qe=a("p"),zi=o("Instantiating one of "),Xn=a("a"),p8=o("AutoConfig"),zn=o(", "),Wn=a("a"),_8=o("AutoModel"),Wi=o(`, and
`),Qn=a("a"),b8=o("AutoTokenizer"),Qi=o(" will directly create a class of the relevant architecture. For instance"),of=l(),F(ja.$$.fragment),Ue=l(),Ae=a("p"),dP=o("will create a model that is an instance of "),Ui=a("a"),cP=o("BertModel"),mP=o("."),Lo=l(),Da=a("p"),fP=o("There is one class of "),rf=a("code"),gP=o("AutoModel"),PKe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),cUe=l(),Hi=a("h2"),tf=a("a"),Use=a("span"),F(v8.$$.fragment),BKe=l(),Hse=a("span"),IKe=o("Extending the Auto Classes"),mUe=l(),Un=a("p"),NKe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Jse=a("code"),qKe=o("NewModel"),jKe=o(", make sure you have a "),Yse=a("code"),DKe=o("NewModelConfig"),GKe=o(` then you can add those to the auto
classes like this:`),fUe=l(),F(F8.$$.fragment),gUe=l(),hP=a("p"),OKe=o("You will then be able to use the auto classes like you would usually do!"),hUe=l(),F(af.$$.fragment),uUe=l(),Ji=a("h2"),nf=a("a"),Kse=a("span"),F(T8.$$.fragment),VKe=l(),Zse=a("span"),XKe=o("AutoConfig"),pUe=l(),yo=a("div"),F(M8.$$.fragment),zKe=l(),E8=a("p"),WKe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),uP=a("a"),QKe=o("from_pretrained()"),UKe=o(" class method."),HKe=l(),C8=a("p"),JKe=o("This class cannot be instantiated directly using "),ele=a("code"),YKe=o("__init__()"),KKe=o(" (throws an error)."),ZKe=l(),kr=a("div"),F(w8.$$.fragment),eZe=l(),ole=a("p"),oZe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),rZe=l(),Yi=a("p"),tZe=o("The configuration class to instantiate is selected based on the "),rle=a("code"),aZe=o("model_type"),nZe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),tle=a("code"),sZe=o("pretrained_model_name_or_path"),lZe=o(":"),iZe=l(),A=a("ul"),sf=a("li"),ale=a("strong"),dZe=o("albert"),cZe=o(" \u2014 "),pP=a("a"),mZe=o("AlbertConfig"),fZe=o(" (ALBERT model)"),gZe=l(),lf=a("li"),nle=a("strong"),hZe=o("bart"),uZe=o(" \u2014 "),_P=a("a"),pZe=o("BartConfig"),_Ze=o(" (BART model)"),bZe=l(),df=a("li"),sle=a("strong"),vZe=o("beit"),FZe=o(" \u2014 "),bP=a("a"),TZe=o("BeitConfig"),MZe=o(" (BEiT model)"),EZe=l(),cf=a("li"),lle=a("strong"),CZe=o("bert"),wZe=o(" \u2014 "),vP=a("a"),AZe=o("BertConfig"),LZe=o(" (BERT model)"),yZe=l(),mf=a("li"),ile=a("strong"),xZe=o("bert-generation"),$Ze=o(" \u2014 "),FP=a("a"),kZe=o("BertGenerationConfig"),SZe=o(" (Bert Generation model)"),RZe=l(),ff=a("li"),dle=a("strong"),PZe=o("big_bird"),BZe=o(" \u2014 "),TP=a("a"),IZe=o("BigBirdConfig"),NZe=o(" (BigBird model)"),qZe=l(),gf=a("li"),cle=a("strong"),jZe=o("bigbird_pegasus"),DZe=o(" \u2014 "),MP=a("a"),GZe=o("BigBirdPegasusConfig"),OZe=o(" (BigBird-Pegasus model)"),VZe=l(),hf=a("li"),mle=a("strong"),XZe=o("blenderbot"),zZe=o(" \u2014 "),EP=a("a"),WZe=o("BlenderbotConfig"),QZe=o(" (Blenderbot model)"),UZe=l(),uf=a("li"),fle=a("strong"),HZe=o("blenderbot-small"),JZe=o(" \u2014 "),CP=a("a"),YZe=o("BlenderbotSmallConfig"),KZe=o(" (BlenderbotSmall model)"),ZZe=l(),pf=a("li"),gle=a("strong"),eeo=o("bloom"),oeo=o(" \u2014 "),wP=a("a"),reo=o("BloomConfig"),teo=o(" (BLOOM model)"),aeo=l(),_f=a("li"),hle=a("strong"),neo=o("camembert"),seo=o(" \u2014 "),AP=a("a"),leo=o("CamembertConfig"),ieo=o(" (CamemBERT model)"),deo=l(),bf=a("li"),ule=a("strong"),ceo=o("canine"),meo=o(" \u2014 "),LP=a("a"),feo=o("CanineConfig"),geo=o(" (CANINE model)"),heo=l(),vf=a("li"),ple=a("strong"),ueo=o("clip"),peo=o(" \u2014 "),yP=a("a"),_eo=o("CLIPConfig"),beo=o(" (CLIP model)"),veo=l(),Ff=a("li"),_le=a("strong"),Feo=o("codegen"),Teo=o(" \u2014 "),xP=a("a"),Meo=o("CodeGenConfig"),Eeo=o(" (CodeGen model)"),Ceo=l(),Tf=a("li"),ble=a("strong"),weo=o("convbert"),Aeo=o(" \u2014 "),$P=a("a"),Leo=o("ConvBertConfig"),yeo=o(" (ConvBERT model)"),xeo=l(),Mf=a("li"),vle=a("strong"),$eo=o("convnext"),keo=o(" \u2014 "),kP=a("a"),Seo=o("ConvNextConfig"),Reo=o(" (ConvNeXT model)"),Peo=l(),Ef=a("li"),Fle=a("strong"),Beo=o("ctrl"),Ieo=o(" \u2014 "),SP=a("a"),Neo=o("CTRLConfig"),qeo=o(" (CTRL model)"),jeo=l(),Cf=a("li"),Tle=a("strong"),Deo=o("cvt"),Geo=o(" \u2014 "),RP=a("a"),Oeo=o("CvtConfig"),Veo=o(" (CvT model)"),Xeo=l(),wf=a("li"),Mle=a("strong"),zeo=o("data2vec-audio"),Weo=o(" \u2014 "),PP=a("a"),Qeo=o("Data2VecAudioConfig"),Ueo=o(" (Data2VecAudio model)"),Heo=l(),Af=a("li"),Ele=a("strong"),Jeo=o("data2vec-text"),Yeo=o(" \u2014 "),BP=a("a"),Keo=o("Data2VecTextConfig"),Zeo=o(" (Data2VecText model)"),eoo=l(),Lf=a("li"),Cle=a("strong"),ooo=o("data2vec-vision"),roo=o(" \u2014 "),IP=a("a"),too=o("Data2VecVisionConfig"),aoo=o(" (Data2VecVision model)"),noo=l(),yf=a("li"),wle=a("strong"),soo=o("deberta"),loo=o(" \u2014 "),NP=a("a"),ioo=o("DebertaConfig"),doo=o(" (DeBERTa model)"),coo=l(),xf=a("li"),Ale=a("strong"),moo=o("deberta-v2"),foo=o(" \u2014 "),qP=a("a"),goo=o("DebertaV2Config"),hoo=o(" (DeBERTa-v2 model)"),uoo=l(),$f=a("li"),Lle=a("strong"),poo=o("decision_transformer"),_oo=o(" \u2014 "),jP=a("a"),boo=o("DecisionTransformerConfig"),voo=o(" (Decision Transformer model)"),Foo=l(),kf=a("li"),yle=a("strong"),Too=o("deit"),Moo=o(" \u2014 "),DP=a("a"),Eoo=o("DeiTConfig"),Coo=o(" (DeiT model)"),woo=l(),Sf=a("li"),xle=a("strong"),Aoo=o("detr"),Loo=o(" \u2014 "),GP=a("a"),yoo=o("DetrConfig"),xoo=o(" (DETR model)"),$oo=l(),Rf=a("li"),$le=a("strong"),koo=o("distilbert"),Soo=o(" \u2014 "),OP=a("a"),Roo=o("DistilBertConfig"),Poo=o(" (DistilBERT model)"),Boo=l(),Pf=a("li"),kle=a("strong"),Ioo=o("donut-swin"),Noo=o(" \u2014 "),VP=a("a"),qoo=o("DonutSwinConfig"),joo=o(" (DonutSwin model)"),Doo=l(),Bf=a("li"),Sle=a("strong"),Goo=o("dpr"),Ooo=o(" \u2014 "),XP=a("a"),Voo=o("DPRConfig"),Xoo=o(" (DPR model)"),zoo=l(),If=a("li"),Rle=a("strong"),Woo=o("dpt"),Qoo=o(" \u2014 "),zP=a("a"),Uoo=o("DPTConfig"),Hoo=o(" (DPT model)"),Joo=l(),Nf=a("li"),Ple=a("strong"),Yoo=o("electra"),Koo=o(" \u2014 "),WP=a("a"),Zoo=o("ElectraConfig"),ero=o(" (ELECTRA model)"),oro=l(),qf=a("li"),Ble=a("strong"),rro=o("encoder-decoder"),tro=o(" \u2014 "),QP=a("a"),aro=o("EncoderDecoderConfig"),nro=o(" (Encoder decoder model)"),sro=l(),jf=a("li"),Ile=a("strong"),lro=o("flaubert"),iro=o(" \u2014 "),UP=a("a"),dro=o("FlaubertConfig"),cro=o(" (FlauBERT model)"),mro=l(),Df=a("li"),Nle=a("strong"),fro=o("flava"),gro=o(" \u2014 "),HP=a("a"),hro=o("FlavaConfig"),uro=o(" (FLAVA model)"),pro=l(),Gf=a("li"),qle=a("strong"),_ro=o("fnet"),bro=o(" \u2014 "),JP=a("a"),vro=o("FNetConfig"),Fro=o(" (FNet model)"),Tro=l(),Of=a("li"),jle=a("strong"),Mro=o("fsmt"),Ero=o(" \u2014 "),YP=a("a"),Cro=o("FSMTConfig"),wro=o(" (FairSeq Machine-Translation model)"),Aro=l(),Vf=a("li"),Dle=a("strong"),Lro=o("funnel"),yro=o(" \u2014 "),KP=a("a"),xro=o("FunnelConfig"),$ro=o(" (Funnel Transformer model)"),kro=l(),Xf=a("li"),Gle=a("strong"),Sro=o("glpn"),Rro=o(" \u2014 "),ZP=a("a"),Pro=o("GLPNConfig"),Bro=o(" (GLPN model)"),Iro=l(),zf=a("li"),Ole=a("strong"),Nro=o("gpt2"),qro=o(" \u2014 "),eB=a("a"),jro=o("GPT2Config"),Dro=o(" (OpenAI GPT-2 model)"),Gro=l(),Wf=a("li"),Vle=a("strong"),Oro=o("gpt_neo"),Vro=o(" \u2014 "),oB=a("a"),Xro=o("GPTNeoConfig"),zro=o(" (GPT Neo model)"),Wro=l(),Qf=a("li"),Xle=a("strong"),Qro=o("gpt_neox"),Uro=o(" \u2014 "),rB=a("a"),Hro=o("GPTNeoXConfig"),Jro=o(" (GPT NeoX model)"),Yro=l(),Uf=a("li"),zle=a("strong"),Kro=o("gptj"),Zro=o(" \u2014 "),tB=a("a"),eto=o("GPTJConfig"),oto=o(" (GPT-J model)"),rto=l(),Hf=a("li"),Wle=a("strong"),tto=o("groupvit"),ato=o(" \u2014 "),aB=a("a"),nto=o("GroupViTConfig"),sto=o(" (GroupViT model)"),lto=l(),Jf=a("li"),Qle=a("strong"),ito=o("hubert"),dto=o(" \u2014 "),nB=a("a"),cto=o("HubertConfig"),mto=o(" (Hubert model)"),fto=l(),Yf=a("li"),Ule=a("strong"),gto=o("ibert"),hto=o(" \u2014 "),sB=a("a"),uto=o("IBertConfig"),pto=o(" (I-BERT model)"),_to=l(),Kf=a("li"),Hle=a("strong"),bto=o("imagegpt"),vto=o(" \u2014 "),lB=a("a"),Fto=o("ImageGPTConfig"),Tto=o(" (ImageGPT model)"),Mto=l(),Zf=a("li"),Jle=a("strong"),Eto=o("layoutlm"),Cto=o(" \u2014 "),iB=a("a"),wto=o("LayoutLMConfig"),Ato=o(" (LayoutLM model)"),Lto=l(),eg=a("li"),Yle=a("strong"),yto=o("layoutlmv2"),xto=o(" \u2014 "),dB=a("a"),$to=o("LayoutLMv2Config"),kto=o(" (LayoutLMv2 model)"),Sto=l(),og=a("li"),Kle=a("strong"),Rto=o("layoutlmv3"),Pto=o(" \u2014 "),cB=a("a"),Bto=o("LayoutLMv3Config"),Ito=o(" (LayoutLMv3 model)"),Nto=l(),rg=a("li"),Zle=a("strong"),qto=o("led"),jto=o(" \u2014 "),mB=a("a"),Dto=o("LEDConfig"),Gto=o(" (LED model)"),Oto=l(),tg=a("li"),eie=a("strong"),Vto=o("levit"),Xto=o(" \u2014 "),fB=a("a"),zto=o("LevitConfig"),Wto=o(" (LeViT model)"),Qto=l(),ag=a("li"),oie=a("strong"),Uto=o("longformer"),Hto=o(" \u2014 "),gB=a("a"),Jto=o("LongformerConfig"),Yto=o(" (Longformer model)"),Kto=l(),ng=a("li"),rie=a("strong"),Zto=o("longt5"),eao=o(" \u2014 "),hB=a("a"),oao=o("LongT5Config"),rao=o(" (LongT5 model)"),tao=l(),sg=a("li"),tie=a("strong"),aao=o("luke"),nao=o(" \u2014 "),uB=a("a"),sao=o("LukeConfig"),lao=o(" (LUKE model)"),iao=l(),lg=a("li"),aie=a("strong"),dao=o("lxmert"),cao=o(" \u2014 "),pB=a("a"),mao=o("LxmertConfig"),fao=o(" (LXMERT model)"),gao=l(),ig=a("li"),nie=a("strong"),hao=o("m2m_100"),uao=o(" \u2014 "),_B=a("a"),pao=o("M2M100Config"),_ao=o(" (M2M100 model)"),bao=l(),dg=a("li"),sie=a("strong"),vao=o("marian"),Fao=o(" \u2014 "),bB=a("a"),Tao=o("MarianConfig"),Mao=o(" (Marian model)"),Eao=l(),cg=a("li"),lie=a("strong"),Cao=o("maskformer"),wao=o(" \u2014 "),vB=a("a"),Aao=o("MaskFormerConfig"),Lao=o(" (MaskFormer model)"),yao=l(),mg=a("li"),iie=a("strong"),xao=o("mbart"),$ao=o(" \u2014 "),FB=a("a"),kao=o("MBartConfig"),Sao=o(" (mBART model)"),Rao=l(),fg=a("li"),die=a("strong"),Pao=o("mctct"),Bao=o(" \u2014 "),TB=a("a"),Iao=o("MCTCTConfig"),Nao=o(" (M-CTC-T model)"),qao=l(),gg=a("li"),cie=a("strong"),jao=o("megatron-bert"),Dao=o(" \u2014 "),MB=a("a"),Gao=o("MegatronBertConfig"),Oao=o(" (Megatron-BERT model)"),Vao=l(),hg=a("li"),mie=a("strong"),Xao=o("mobilebert"),zao=o(" \u2014 "),EB=a("a"),Wao=o("MobileBertConfig"),Qao=o(" (MobileBERT model)"),Uao=l(),ug=a("li"),fie=a("strong"),Hao=o("mobilevit"),Jao=o(" \u2014 "),CB=a("a"),Yao=o("MobileViTConfig"),Kao=o(" (MobileViT model)"),Zao=l(),pg=a("li"),gie=a("strong"),eno=o("mpnet"),ono=o(" \u2014 "),wB=a("a"),rno=o("MPNetConfig"),tno=o(" (MPNet model)"),ano=l(),_g=a("li"),hie=a("strong"),nno=o("mt5"),sno=o(" \u2014 "),AB=a("a"),lno=o("MT5Config"),ino=o(" (MT5 model)"),dno=l(),bg=a("li"),uie=a("strong"),cno=o("mvp"),mno=o(" \u2014 "),LB=a("a"),fno=o("MvpConfig"),gno=o(" (MVP model)"),hno=l(),vg=a("li"),pie=a("strong"),uno=o("nezha"),pno=o(" \u2014 "),yB=a("a"),_no=o("NezhaConfig"),bno=o(" (Nezha model)"),vno=l(),Fg=a("li"),_ie=a("strong"),Fno=o("nystromformer"),Tno=o(" \u2014 "),xB=a("a"),Mno=o("NystromformerConfig"),Eno=o(" (Nystr\xF6mformer model)"),Cno=l(),Tg=a("li"),bie=a("strong"),wno=o("openai-gpt"),Ano=o(" \u2014 "),$B=a("a"),Lno=o("OpenAIGPTConfig"),yno=o(" (OpenAI GPT model)"),xno=l(),Mg=a("li"),vie=a("strong"),$no=o("opt"),kno=o(" \u2014 "),kB=a("a"),Sno=o("OPTConfig"),Rno=o(" (OPT model)"),Pno=l(),Eg=a("li"),Fie=a("strong"),Bno=o("owlvit"),Ino=o(" \u2014 "),SB=a("a"),Nno=o("OwlViTConfig"),qno=o(" (OWL-ViT model)"),jno=l(),Cg=a("li"),Tie=a("strong"),Dno=o("pegasus"),Gno=o(" \u2014 "),RB=a("a"),Ono=o("PegasusConfig"),Vno=o(" (Pegasus model)"),Xno=l(),wg=a("li"),Mie=a("strong"),zno=o("perceiver"),Wno=o(" \u2014 "),PB=a("a"),Qno=o("PerceiverConfig"),Uno=o(" (Perceiver model)"),Hno=l(),Ag=a("li"),Eie=a("strong"),Jno=o("plbart"),Yno=o(" \u2014 "),BB=a("a"),Kno=o("PLBartConfig"),Zno=o(" (PLBart model)"),eso=l(),Lg=a("li"),Cie=a("strong"),oso=o("poolformer"),rso=o(" \u2014 "),IB=a("a"),tso=o("PoolFormerConfig"),aso=o(" (PoolFormer model)"),nso=l(),yg=a("li"),wie=a("strong"),sso=o("prophetnet"),lso=o(" \u2014 "),NB=a("a"),iso=o("ProphetNetConfig"),dso=o(" (ProphetNet model)"),cso=l(),xg=a("li"),Aie=a("strong"),mso=o("qdqbert"),fso=o(" \u2014 "),qB=a("a"),gso=o("QDQBertConfig"),hso=o(" (QDQBert model)"),uso=l(),$g=a("li"),Lie=a("strong"),pso=o("rag"),_so=o(" \u2014 "),jB=a("a"),bso=o("RagConfig"),vso=o(" (RAG model)"),Fso=l(),kg=a("li"),yie=a("strong"),Tso=o("realm"),Mso=o(" \u2014 "),DB=a("a"),Eso=o("RealmConfig"),Cso=o(" (REALM model)"),wso=l(),Sg=a("li"),xie=a("strong"),Aso=o("reformer"),Lso=o(" \u2014 "),GB=a("a"),yso=o("ReformerConfig"),xso=o(" (Reformer model)"),$so=l(),Rg=a("li"),$ie=a("strong"),kso=o("regnet"),Sso=o(" \u2014 "),OB=a("a"),Rso=o("RegNetConfig"),Pso=o(" (RegNet model)"),Bso=l(),Pg=a("li"),kie=a("strong"),Iso=o("rembert"),Nso=o(" \u2014 "),VB=a("a"),qso=o("RemBertConfig"),jso=o(" (RemBERT model)"),Dso=l(),Bg=a("li"),Sie=a("strong"),Gso=o("resnet"),Oso=o(" \u2014 "),XB=a("a"),Vso=o("ResNetConfig"),Xso=o(" (ResNet model)"),zso=l(),Ig=a("li"),Rie=a("strong"),Wso=o("retribert"),Qso=o(" \u2014 "),zB=a("a"),Uso=o("RetriBertConfig"),Hso=o(" (RetriBERT model)"),Jso=l(),Ng=a("li"),Pie=a("strong"),Yso=o("roberta"),Kso=o(" \u2014 "),WB=a("a"),Zso=o("RobertaConfig"),elo=o(" (RoBERTa model)"),olo=l(),qg=a("li"),Bie=a("strong"),rlo=o("roformer"),tlo=o(" \u2014 "),QB=a("a"),alo=o("RoFormerConfig"),nlo=o(" (RoFormer model)"),slo=l(),jg=a("li"),Iie=a("strong"),llo=o("segformer"),ilo=o(" \u2014 "),UB=a("a"),dlo=o("SegformerConfig"),clo=o(" (SegFormer model)"),mlo=l(),Dg=a("li"),Nie=a("strong"),flo=o("sew"),glo=o(" \u2014 "),HB=a("a"),hlo=o("SEWConfig"),ulo=o(" (SEW model)"),plo=l(),Gg=a("li"),qie=a("strong"),_lo=o("sew-d"),blo=o(" \u2014 "),JB=a("a"),vlo=o("SEWDConfig"),Flo=o(" (SEW-D model)"),Tlo=l(),Og=a("li"),jie=a("strong"),Mlo=o("speech-encoder-decoder"),Elo=o(" \u2014 "),YB=a("a"),Clo=o("SpeechEncoderDecoderConfig"),wlo=o(" (Speech Encoder decoder model)"),Alo=l(),Vg=a("li"),Die=a("strong"),Llo=o("speech_to_text"),ylo=o(" \u2014 "),KB=a("a"),xlo=o("Speech2TextConfig"),$lo=o(" (Speech2Text model)"),klo=l(),Xg=a("li"),Gie=a("strong"),Slo=o("speech_to_text_2"),Rlo=o(" \u2014 "),ZB=a("a"),Plo=o("Speech2Text2Config"),Blo=o(" (Speech2Text2 model)"),Ilo=l(),zg=a("li"),Oie=a("strong"),Nlo=o("splinter"),qlo=o(" \u2014 "),eI=a("a"),jlo=o("SplinterConfig"),Dlo=o(" (Splinter model)"),Glo=l(),Wg=a("li"),Vie=a("strong"),Olo=o("squeezebert"),Vlo=o(" \u2014 "),oI=a("a"),Xlo=o("SqueezeBertConfig"),zlo=o(" (SqueezeBERT model)"),Wlo=l(),Qg=a("li"),Xie=a("strong"),Qlo=o("swin"),Ulo=o(" \u2014 "),rI=a("a"),Hlo=o("SwinConfig"),Jlo=o(" (Swin Transformer model)"),Ylo=l(),Ug=a("li"),zie=a("strong"),Klo=o("swinv2"),Zlo=o(" \u2014 "),tI=a("a"),eio=o("Swinv2Config"),oio=o(" (Swin Transformer V2 model)"),rio=l(),Hg=a("li"),Wie=a("strong"),tio=o("t5"),aio=o(" \u2014 "),aI=a("a"),nio=o("T5Config"),sio=o(" (T5 model)"),lio=l(),Jg=a("li"),Qie=a("strong"),iio=o("tapas"),dio=o(" \u2014 "),nI=a("a"),cio=o("TapasConfig"),mio=o(" (TAPAS model)"),fio=l(),Yg=a("li"),Uie=a("strong"),gio=o("trajectory_transformer"),hio=o(" \u2014 "),sI=a("a"),uio=o("TrajectoryTransformerConfig"),pio=o(" (Trajectory Transformer model)"),_io=l(),Kg=a("li"),Hie=a("strong"),bio=o("transfo-xl"),vio=o(" \u2014 "),lI=a("a"),Fio=o("TransfoXLConfig"),Tio=o(" (Transformer-XL model)"),Mio=l(),Zg=a("li"),Jie=a("strong"),Eio=o("trocr"),Cio=o(" \u2014 "),iI=a("a"),wio=o("TrOCRConfig"),Aio=o(" (TrOCR model)"),Lio=l(),eh=a("li"),Yie=a("strong"),yio=o("unispeech"),xio=o(" \u2014 "),dI=a("a"),$io=o("UniSpeechConfig"),kio=o(" (UniSpeech model)"),Sio=l(),oh=a("li"),Kie=a("strong"),Rio=o("unispeech-sat"),Pio=o(" \u2014 "),cI=a("a"),Bio=o("UniSpeechSatConfig"),Iio=o(" (UniSpeechSat model)"),Nio=l(),rh=a("li"),Zie=a("strong"),qio=o("van"),jio=o(" \u2014 "),mI=a("a"),Dio=o("VanConfig"),Gio=o(" (VAN model)"),Oio=l(),th=a("li"),ede=a("strong"),Vio=o("videomae"),Xio=o(" \u2014 "),fI=a("a"),zio=o("VideoMAEConfig"),Wio=o(" (VideoMAE model)"),Qio=l(),ah=a("li"),ode=a("strong"),Uio=o("vilt"),Hio=o(" \u2014 "),gI=a("a"),Jio=o("ViltConfig"),Yio=o(" (ViLT model)"),Kio=l(),nh=a("li"),rde=a("strong"),Zio=o("vision-encoder-decoder"),edo=o(" \u2014 "),hI=a("a"),odo=o("VisionEncoderDecoderConfig"),rdo=o(" (Vision Encoder decoder model)"),tdo=l(),sh=a("li"),tde=a("strong"),ado=o("vision-text-dual-encoder"),ndo=o(" \u2014 "),uI=a("a"),sdo=o("VisionTextDualEncoderConfig"),ldo=o(" (VisionTextDualEncoder model)"),ido=l(),lh=a("li"),ade=a("strong"),ddo=o("visual_bert"),cdo=o(" \u2014 "),pI=a("a"),mdo=o("VisualBertConfig"),fdo=o(" (VisualBERT model)"),gdo=l(),ih=a("li"),nde=a("strong"),hdo=o("vit"),udo=o(" \u2014 "),_I=a("a"),pdo=o("ViTConfig"),_do=o(" (ViT model)"),bdo=l(),dh=a("li"),sde=a("strong"),vdo=o("vit_mae"),Fdo=o(" \u2014 "),bI=a("a"),Tdo=o("ViTMAEConfig"),Mdo=o(" (ViTMAE model)"),Edo=l(),ch=a("li"),lde=a("strong"),Cdo=o("wav2vec2"),wdo=o(" \u2014 "),vI=a("a"),Ado=o("Wav2Vec2Config"),Ldo=o(" (Wav2Vec2 model)"),ydo=l(),mh=a("li"),ide=a("strong"),xdo=o("wav2vec2-conformer"),$do=o(" \u2014 "),FI=a("a"),kdo=o("Wav2Vec2ConformerConfig"),Sdo=o(" (Wav2Vec2-Conformer model)"),Rdo=l(),fh=a("li"),dde=a("strong"),Pdo=o("wavlm"),Bdo=o(" \u2014 "),TI=a("a"),Ido=o("WavLMConfig"),Ndo=o(" (WavLM model)"),qdo=l(),gh=a("li"),cde=a("strong"),jdo=o("xglm"),Ddo=o(" \u2014 "),MI=a("a"),Gdo=o("XGLMConfig"),Odo=o(" (XGLM model)"),Vdo=l(),hh=a("li"),mde=a("strong"),Xdo=o("xlm"),zdo=o(" \u2014 "),EI=a("a"),Wdo=o("XLMConfig"),Qdo=o(" (XLM model)"),Udo=l(),uh=a("li"),fde=a("strong"),Hdo=o("xlm-prophetnet"),Jdo=o(" \u2014 "),CI=a("a"),Ydo=o("XLMProphetNetConfig"),Kdo=o(" (XLM-ProphetNet model)"),Zdo=l(),ph=a("li"),gde=a("strong"),eco=o("xlm-roberta"),oco=o(" \u2014 "),wI=a("a"),rco=o("XLMRobertaConfig"),tco=o(" (XLM-RoBERTa model)"),aco=l(),_h=a("li"),hde=a("strong"),nco=o("xlm-roberta-xl"),sco=o(" \u2014 "),AI=a("a"),lco=o("XLMRobertaXLConfig"),ico=o(" (XLM-RoBERTa-XL model)"),dco=l(),bh=a("li"),ude=a("strong"),cco=o("xlnet"),mco=o(" \u2014 "),LI=a("a"),fco=o("XLNetConfig"),gco=o(" (XLNet model)"),hco=l(),vh=a("li"),pde=a("strong"),uco=o("yolos"),pco=o(" \u2014 "),yI=a("a"),_co=o("YolosConfig"),bco=o(" (YOLOS model)"),vco=l(),Fh=a("li"),_de=a("strong"),Fco=o("yoso"),Tco=o(" \u2014 "),xI=a("a"),Mco=o("YosoConfig"),Eco=o(" (YOSO model)"),Cco=l(),F(Th.$$.fragment),wco=l(),Mh=a("div"),F(A8.$$.fragment),Aco=l(),bde=a("p"),Lco=o("Register a new configuration for this class."),_Ue=l(),Ki=a("h2"),Eh=a("a"),vde=a("span"),F(L8.$$.fragment),yco=l(),Fde=a("span"),xco=o("AutoTokenizer"),bUe=l(),xo=a("div"),F(y8.$$.fragment),$co=l(),x8=a("p"),kco=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),$I=a("a"),Sco=o("AutoTokenizer.from_pretrained()"),Rco=o(" class method."),Pco=l(),$8=a("p"),Bco=o("This class cannot be instantiated directly using "),Tde=a("code"),Ico=o("__init__()"),Nco=o(" (throws an error)."),qco=l(),Sr=a("div"),F(k8.$$.fragment),jco=l(),Mde=a("p"),Dco=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),Gco=l(),Ga=a("p"),Oco=o("The tokenizer class to instantiate is selected based on the "),Ede=a("code"),Vco=o("model_type"),Xco=o(` property of the config object (either
passed as an argument or loaded from `),Cde=a("code"),zco=o("pretrained_model_name_or_path"),Wco=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wde=a("code"),Qco=o("pretrained_model_name_or_path"),Uco=o(":"),Hco=l(),k=a("ul"),Hn=a("li"),Ade=a("strong"),Jco=o("albert"),Yco=o(" \u2014 "),kI=a("a"),Kco=o("AlbertTokenizer"),Zco=o(" or "),SI=a("a"),emo=o("AlbertTokenizerFast"),omo=o(" (ALBERT model)"),rmo=l(),Jn=a("li"),Lde=a("strong"),tmo=o("bart"),amo=o(" \u2014 "),RI=a("a"),nmo=o("BartTokenizer"),smo=o(" or "),PI=a("a"),lmo=o("BartTokenizerFast"),imo=o(" (BART model)"),dmo=l(),Yn=a("li"),yde=a("strong"),cmo=o("barthez"),mmo=o(" \u2014 "),BI=a("a"),fmo=o("BarthezTokenizer"),gmo=o(" or "),II=a("a"),hmo=o("BarthezTokenizerFast"),umo=o(" (BARThez model)"),pmo=l(),Ch=a("li"),xde=a("strong"),_mo=o("bartpho"),bmo=o(" \u2014 "),NI=a("a"),vmo=o("BartphoTokenizer"),Fmo=o(" (BARTpho model)"),Tmo=l(),Kn=a("li"),$de=a("strong"),Mmo=o("bert"),Emo=o(" \u2014 "),qI=a("a"),Cmo=o("BertTokenizer"),wmo=o(" or "),jI=a("a"),Amo=o("BertTokenizerFast"),Lmo=o(" (BERT model)"),ymo=l(),wh=a("li"),kde=a("strong"),xmo=o("bert-generation"),$mo=o(" \u2014 "),DI=a("a"),kmo=o("BertGenerationTokenizer"),Smo=o(" (Bert Generation model)"),Rmo=l(),Ah=a("li"),Sde=a("strong"),Pmo=o("bert-japanese"),Bmo=o(" \u2014 "),GI=a("a"),Imo=o("BertJapaneseTokenizer"),Nmo=o(" (BertJapanese model)"),qmo=l(),Lh=a("li"),Rde=a("strong"),jmo=o("bertweet"),Dmo=o(" \u2014 "),OI=a("a"),Gmo=o("BertweetTokenizer"),Omo=o(" (BERTweet model)"),Vmo=l(),Zn=a("li"),Pde=a("strong"),Xmo=o("big_bird"),zmo=o(" \u2014 "),VI=a("a"),Wmo=o("BigBirdTokenizer"),Qmo=o(" or "),XI=a("a"),Umo=o("BigBirdTokenizerFast"),Hmo=o(" (BigBird model)"),Jmo=l(),es=a("li"),Bde=a("strong"),Ymo=o("bigbird_pegasus"),Kmo=o(" \u2014 "),zI=a("a"),Zmo=o("PegasusTokenizer"),efo=o(" or "),WI=a("a"),ofo=o("PegasusTokenizerFast"),rfo=o(" (BigBird-Pegasus model)"),tfo=l(),os=a("li"),Ide=a("strong"),afo=o("blenderbot"),nfo=o(" \u2014 "),QI=a("a"),sfo=o("BlenderbotTokenizer"),lfo=o(" or "),UI=a("a"),ifo=o("BlenderbotTokenizerFast"),dfo=o(" (Blenderbot model)"),cfo=l(),yh=a("li"),Nde=a("strong"),mfo=o("blenderbot-small"),ffo=o(" \u2014 "),HI=a("a"),gfo=o("BlenderbotSmallTokenizer"),hfo=o(" (BlenderbotSmall model)"),ufo=l(),xh=a("li"),qde=a("strong"),pfo=o("bloom"),_fo=o(" \u2014 "),JI=a("a"),bfo=o("BloomTokenizerFast"),vfo=o(" (BLOOM model)"),Ffo=l(),$h=a("li"),jde=a("strong"),Tfo=o("byt5"),Mfo=o(" \u2014 "),YI=a("a"),Efo=o("ByT5Tokenizer"),Cfo=o(" (ByT5 model)"),wfo=l(),rs=a("li"),Dde=a("strong"),Afo=o("camembert"),Lfo=o(" \u2014 "),KI=a("a"),yfo=o("CamembertTokenizer"),xfo=o(" or "),ZI=a("a"),$fo=o("CamembertTokenizerFast"),kfo=o(" (CamemBERT model)"),Sfo=l(),kh=a("li"),Gde=a("strong"),Rfo=o("canine"),Pfo=o(" \u2014 "),eN=a("a"),Bfo=o("CanineTokenizer"),Ifo=o(" (CANINE model)"),Nfo=l(),ts=a("li"),Ode=a("strong"),qfo=o("clip"),jfo=o(" \u2014 "),oN=a("a"),Dfo=o("CLIPTokenizer"),Gfo=o(" or "),rN=a("a"),Ofo=o("CLIPTokenizerFast"),Vfo=o(" (CLIP model)"),Xfo=l(),as=a("li"),Vde=a("strong"),zfo=o("codegen"),Wfo=o(" \u2014 "),tN=a("a"),Qfo=o("CodeGenTokenizer"),Ufo=o(" or "),aN=a("a"),Hfo=o("CodeGenTokenizerFast"),Jfo=o(" (CodeGen model)"),Yfo=l(),ns=a("li"),Xde=a("strong"),Kfo=o("convbert"),Zfo=o(" \u2014 "),nN=a("a"),ego=o("ConvBertTokenizer"),ogo=o(" or "),sN=a("a"),rgo=o("ConvBertTokenizerFast"),tgo=o(" (ConvBERT model)"),ago=l(),ss=a("li"),zde=a("strong"),ngo=o("cpm"),sgo=o(" \u2014 "),lN=a("a"),lgo=o("CpmTokenizer"),igo=o(" or "),iN=a("a"),dgo=o("CpmTokenizerFast"),cgo=o(" (CPM model)"),mgo=l(),Sh=a("li"),Wde=a("strong"),fgo=o("ctrl"),ggo=o(" \u2014 "),dN=a("a"),hgo=o("CTRLTokenizer"),ugo=o(" (CTRL model)"),pgo=l(),ls=a("li"),Qde=a("strong"),_go=o("data2vec-text"),bgo=o(" \u2014 "),cN=a("a"),vgo=o("RobertaTokenizer"),Fgo=o(" or "),mN=a("a"),Tgo=o("RobertaTokenizerFast"),Mgo=o(" (Data2VecText model)"),Ego=l(),is=a("li"),Ude=a("strong"),Cgo=o("deberta"),wgo=o(" \u2014 "),fN=a("a"),Ago=o("DebertaTokenizer"),Lgo=o(" or "),gN=a("a"),ygo=o("DebertaTokenizerFast"),xgo=o(" (DeBERTa model)"),$go=l(),ds=a("li"),Hde=a("strong"),kgo=o("deberta-v2"),Sgo=o(" \u2014 "),hN=a("a"),Rgo=o("DebertaV2Tokenizer"),Pgo=o(" or "),uN=a("a"),Bgo=o("DebertaV2TokenizerFast"),Igo=o(" (DeBERTa-v2 model)"),Ngo=l(),cs=a("li"),Jde=a("strong"),qgo=o("distilbert"),jgo=o(" \u2014 "),pN=a("a"),Dgo=o("DistilBertTokenizer"),Ggo=o(" or "),_N=a("a"),Ogo=o("DistilBertTokenizerFast"),Vgo=o(" (DistilBERT model)"),Xgo=l(),ms=a("li"),Yde=a("strong"),zgo=o("dpr"),Wgo=o(" \u2014 "),bN=a("a"),Qgo=o("DPRQuestionEncoderTokenizer"),Ugo=o(" or "),vN=a("a"),Hgo=o("DPRQuestionEncoderTokenizerFast"),Jgo=o(" (DPR model)"),Ygo=l(),fs=a("li"),Kde=a("strong"),Kgo=o("electra"),Zgo=o(" \u2014 "),FN=a("a"),eho=o("ElectraTokenizer"),oho=o(" or "),TN=a("a"),rho=o("ElectraTokenizerFast"),tho=o(" (ELECTRA model)"),aho=l(),Rh=a("li"),Zde=a("strong"),nho=o("flaubert"),sho=o(" \u2014 "),MN=a("a"),lho=o("FlaubertTokenizer"),iho=o(" (FlauBERT model)"),dho=l(),gs=a("li"),ece=a("strong"),cho=o("fnet"),mho=o(" \u2014 "),EN=a("a"),fho=o("FNetTokenizer"),gho=o(" or "),CN=a("a"),hho=o("FNetTokenizerFast"),uho=o(" (FNet model)"),pho=l(),Ph=a("li"),oce=a("strong"),_ho=o("fsmt"),bho=o(" \u2014 "),wN=a("a"),vho=o("FSMTTokenizer"),Fho=o(" (FairSeq Machine-Translation model)"),Tho=l(),hs=a("li"),rce=a("strong"),Mho=o("funnel"),Eho=o(" \u2014 "),AN=a("a"),Cho=o("FunnelTokenizer"),who=o(" or "),LN=a("a"),Aho=o("FunnelTokenizerFast"),Lho=o(" (Funnel Transformer model)"),yho=l(),us=a("li"),tce=a("strong"),xho=o("gpt2"),$ho=o(" \u2014 "),yN=a("a"),kho=o("GPT2Tokenizer"),Sho=o(" or "),xN=a("a"),Rho=o("GPT2TokenizerFast"),Pho=o(" (OpenAI GPT-2 model)"),Bho=l(),ps=a("li"),ace=a("strong"),Iho=o("gpt_neo"),Nho=o(" \u2014 "),$N=a("a"),qho=o("GPT2Tokenizer"),jho=o(" or "),kN=a("a"),Dho=o("GPT2TokenizerFast"),Gho=o(" (GPT Neo model)"),Oho=l(),Bh=a("li"),nce=a("strong"),Vho=o("gpt_neox"),Xho=o(" \u2014 "),SN=a("a"),zho=o("GPTNeoXTokenizerFast"),Who=o(" (GPT NeoX model)"),Qho=l(),_s=a("li"),sce=a("strong"),Uho=o("gptj"),Hho=o(" \u2014 "),RN=a("a"),Jho=o("GPT2Tokenizer"),Yho=o(" or "),PN=a("a"),Kho=o("GPT2TokenizerFast"),Zho=o(" (GPT-J model)"),euo=l(),bs=a("li"),lce=a("strong"),ouo=o("groupvit"),ruo=o(" \u2014 "),BN=a("a"),tuo=o("CLIPTokenizer"),auo=o(" or "),IN=a("a"),nuo=o("CLIPTokenizerFast"),suo=o(" (GroupViT model)"),luo=l(),vs=a("li"),ice=a("strong"),iuo=o("herbert"),duo=o(" \u2014 "),NN=a("a"),cuo=o("HerbertTokenizer"),muo=o(" or "),qN=a("a"),fuo=o("HerbertTokenizerFast"),guo=o(" (HerBERT model)"),huo=l(),Ih=a("li"),dce=a("strong"),uuo=o("hubert"),puo=o(" \u2014 "),jN=a("a"),_uo=o("Wav2Vec2CTCTokenizer"),buo=o(" (Hubert model)"),vuo=l(),Fs=a("li"),cce=a("strong"),Fuo=o("ibert"),Tuo=o(" \u2014 "),DN=a("a"),Muo=o("RobertaTokenizer"),Euo=o(" or "),GN=a("a"),Cuo=o("RobertaTokenizerFast"),wuo=o(" (I-BERT model)"),Auo=l(),Ts=a("li"),mce=a("strong"),Luo=o("layoutlm"),yuo=o(" \u2014 "),ON=a("a"),xuo=o("LayoutLMTokenizer"),$uo=o(" or "),VN=a("a"),kuo=o("LayoutLMTokenizerFast"),Suo=o(" (LayoutLM model)"),Ruo=l(),Ms=a("li"),fce=a("strong"),Puo=o("layoutlmv2"),Buo=o(" \u2014 "),XN=a("a"),Iuo=o("LayoutLMv2Tokenizer"),Nuo=o(" or "),zN=a("a"),quo=o("LayoutLMv2TokenizerFast"),juo=o(" (LayoutLMv2 model)"),Duo=l(),Es=a("li"),gce=a("strong"),Guo=o("layoutlmv3"),Ouo=o(" \u2014 "),WN=a("a"),Vuo=o("LayoutLMv3Tokenizer"),Xuo=o(" or "),QN=a("a"),zuo=o("LayoutLMv3TokenizerFast"),Wuo=o(" (LayoutLMv3 model)"),Quo=l(),Cs=a("li"),hce=a("strong"),Uuo=o("layoutxlm"),Huo=o(" \u2014 "),UN=a("a"),Juo=o("LayoutXLMTokenizer"),Yuo=o(" or "),HN=a("a"),Kuo=o("LayoutXLMTokenizerFast"),Zuo=o(" (LayoutXLM model)"),epo=l(),ws=a("li"),uce=a("strong"),opo=o("led"),rpo=o(" \u2014 "),JN=a("a"),tpo=o("LEDTokenizer"),apo=o(" or "),YN=a("a"),npo=o("LEDTokenizerFast"),spo=o(" (LED model)"),lpo=l(),As=a("li"),pce=a("strong"),ipo=o("longformer"),dpo=o(" \u2014 "),KN=a("a"),cpo=o("LongformerTokenizer"),mpo=o(" or "),ZN=a("a"),fpo=o("LongformerTokenizerFast"),gpo=o(" (Longformer model)"),hpo=l(),Ls=a("li"),_ce=a("strong"),upo=o("longt5"),ppo=o(" \u2014 "),eq=a("a"),_po=o("T5Tokenizer"),bpo=o(" or "),oq=a("a"),vpo=o("T5TokenizerFast"),Fpo=o(" (LongT5 model)"),Tpo=l(),Nh=a("li"),bce=a("strong"),Mpo=o("luke"),Epo=o(" \u2014 "),rq=a("a"),Cpo=o("LukeTokenizer"),wpo=o(" (LUKE model)"),Apo=l(),ys=a("li"),vce=a("strong"),Lpo=o("lxmert"),ypo=o(" \u2014 "),tq=a("a"),xpo=o("LxmertTokenizer"),$po=o(" or "),aq=a("a"),kpo=o("LxmertTokenizerFast"),Spo=o(" (LXMERT model)"),Rpo=l(),qh=a("li"),Fce=a("strong"),Ppo=o("m2m_100"),Bpo=o(" \u2014 "),nq=a("a"),Ipo=o("M2M100Tokenizer"),Npo=o(" (M2M100 model)"),qpo=l(),jh=a("li"),Tce=a("strong"),jpo=o("marian"),Dpo=o(" \u2014 "),sq=a("a"),Gpo=o("MarianTokenizer"),Opo=o(" (Marian model)"),Vpo=l(),xs=a("li"),Mce=a("strong"),Xpo=o("mbart"),zpo=o(" \u2014 "),lq=a("a"),Wpo=o("MBartTokenizer"),Qpo=o(" or "),iq=a("a"),Upo=o("MBartTokenizerFast"),Hpo=o(" (mBART model)"),Jpo=l(),$s=a("li"),Ece=a("strong"),Ypo=o("mbart50"),Kpo=o(" \u2014 "),dq=a("a"),Zpo=o("MBart50Tokenizer"),e_o=o(" or "),cq=a("a"),o_o=o("MBart50TokenizerFast"),r_o=o(" (mBART-50 model)"),t_o=l(),ks=a("li"),Cce=a("strong"),a_o=o("megatron-bert"),n_o=o(" \u2014 "),mq=a("a"),s_o=o("BertTokenizer"),l_o=o(" or "),fq=a("a"),i_o=o("BertTokenizerFast"),d_o=o(" (Megatron-BERT model)"),c_o=l(),Dh=a("li"),wce=a("strong"),m_o=o("mluke"),f_o=o(" \u2014 "),gq=a("a"),g_o=o("MLukeTokenizer"),h_o=o(" (mLUKE model)"),u_o=l(),Ss=a("li"),Ace=a("strong"),p_o=o("mobilebert"),__o=o(" \u2014 "),hq=a("a"),b_o=o("MobileBertTokenizer"),v_o=o(" or "),uq=a("a"),F_o=o("MobileBertTokenizerFast"),T_o=o(" (MobileBERT model)"),M_o=l(),Rs=a("li"),Lce=a("strong"),E_o=o("mpnet"),C_o=o(" \u2014 "),pq=a("a"),w_o=o("MPNetTokenizer"),A_o=o(" or "),_q=a("a"),L_o=o("MPNetTokenizerFast"),y_o=o(" (MPNet model)"),x_o=l(),Ps=a("li"),yce=a("strong"),$_o=o("mt5"),k_o=o(" \u2014 "),bq=a("a"),S_o=o("MT5Tokenizer"),R_o=o(" or "),vq=a("a"),P_o=o("MT5TokenizerFast"),B_o=o(" (MT5 model)"),I_o=l(),Bs=a("li"),xce=a("strong"),N_o=o("mvp"),q_o=o(" \u2014 "),Fq=a("a"),j_o=o("MvpTokenizer"),D_o=o(" or "),Tq=a("a"),G_o=o("MvpTokenizerFast"),O_o=o(" (MVP model)"),V_o=l(),Is=a("li"),$ce=a("strong"),X_o=o("nezha"),z_o=o(" \u2014 "),Mq=a("a"),W_o=o("BertTokenizer"),Q_o=o(" or "),Eq=a("a"),U_o=o("BertTokenizerFast"),H_o=o(" (Nezha model)"),J_o=l(),Ns=a("li"),kce=a("strong"),Y_o=o("nllb"),K_o=o(" \u2014 "),Cq=a("a"),Z_o=o("NllbTokenizer"),e2o=o(" or "),wq=a("a"),o2o=o("NllbTokenizerFast"),r2o=o(" (NLLB model)"),t2o=l(),qs=a("li"),Sce=a("strong"),a2o=o("nystromformer"),n2o=o(" \u2014 "),Aq=a("a"),s2o=o("AlbertTokenizer"),l2o=o(" or "),Lq=a("a"),i2o=o("AlbertTokenizerFast"),d2o=o(" (Nystr\xF6mformer model)"),c2o=l(),js=a("li"),Rce=a("strong"),m2o=o("openai-gpt"),f2o=o(" \u2014 "),yq=a("a"),g2o=o("OpenAIGPTTokenizer"),h2o=o(" or "),xq=a("a"),u2o=o("OpenAIGPTTokenizerFast"),p2o=o(" (OpenAI GPT model)"),_2o=l(),Gh=a("li"),Pce=a("strong"),b2o=o("opt"),v2o=o(" \u2014 "),$q=a("a"),F2o=o("GPT2Tokenizer"),T2o=o(" (OPT model)"),M2o=l(),Ds=a("li"),Bce=a("strong"),E2o=o("owlvit"),C2o=o(" \u2014 "),kq=a("a"),w2o=o("CLIPTokenizer"),A2o=o(" or "),Sq=a("a"),L2o=o("CLIPTokenizerFast"),y2o=o(" (OWL-ViT model)"),x2o=l(),Gs=a("li"),Ice=a("strong"),$2o=o("pegasus"),k2o=o(" \u2014 "),Rq=a("a"),S2o=o("PegasusTokenizer"),R2o=o(" or "),Pq=a("a"),P2o=o("PegasusTokenizerFast"),B2o=o(" (Pegasus model)"),I2o=l(),Oh=a("li"),Nce=a("strong"),N2o=o("perceiver"),q2o=o(" \u2014 "),Bq=a("a"),j2o=o("PerceiverTokenizer"),D2o=o(" (Perceiver model)"),G2o=l(),Vh=a("li"),qce=a("strong"),O2o=o("phobert"),V2o=o(" \u2014 "),Iq=a("a"),X2o=o("PhobertTokenizer"),z2o=o(" (PhoBERT model)"),W2o=l(),Xh=a("li"),jce=a("strong"),Q2o=o("plbart"),U2o=o(" \u2014 "),Nq=a("a"),H2o=o("PLBartTokenizer"),J2o=o(" (PLBart model)"),Y2o=l(),zh=a("li"),Dce=a("strong"),K2o=o("prophetnet"),Z2o=o(" \u2014 "),qq=a("a"),ebo=o("ProphetNetTokenizer"),obo=o(" (ProphetNet model)"),rbo=l(),Os=a("li"),Gce=a("strong"),tbo=o("qdqbert"),abo=o(" \u2014 "),jq=a("a"),nbo=o("BertTokenizer"),sbo=o(" or "),Dq=a("a"),lbo=o("BertTokenizerFast"),ibo=o(" (QDQBert model)"),dbo=l(),Wh=a("li"),Oce=a("strong"),cbo=o("rag"),mbo=o(" \u2014 "),Gq=a("a"),fbo=o("RagTokenizer"),gbo=o(" (RAG model)"),hbo=l(),Vs=a("li"),Vce=a("strong"),ubo=o("realm"),pbo=o(" \u2014 "),Oq=a("a"),_bo=o("RealmTokenizer"),bbo=o(" or "),Vq=a("a"),vbo=o("RealmTokenizerFast"),Fbo=o(" (REALM model)"),Tbo=l(),Xs=a("li"),Xce=a("strong"),Mbo=o("reformer"),Ebo=o(" \u2014 "),Xq=a("a"),Cbo=o("ReformerTokenizer"),wbo=o(" or "),zq=a("a"),Abo=o("ReformerTokenizerFast"),Lbo=o(" (Reformer model)"),ybo=l(),zs=a("li"),zce=a("strong"),xbo=o("rembert"),$bo=o(" \u2014 "),Wq=a("a"),kbo=o("RemBertTokenizer"),Sbo=o(" or "),Qq=a("a"),Rbo=o("RemBertTokenizerFast"),Pbo=o(" (RemBERT model)"),Bbo=l(),Ws=a("li"),Wce=a("strong"),Ibo=o("retribert"),Nbo=o(" \u2014 "),Uq=a("a"),qbo=o("RetriBertTokenizer"),jbo=o(" or "),Hq=a("a"),Dbo=o("RetriBertTokenizerFast"),Gbo=o(" (RetriBERT model)"),Obo=l(),Qs=a("li"),Qce=a("strong"),Vbo=o("roberta"),Xbo=o(" \u2014 "),Jq=a("a"),zbo=o("RobertaTokenizer"),Wbo=o(" or "),Yq=a("a"),Qbo=o("RobertaTokenizerFast"),Ubo=o(" (RoBERTa model)"),Hbo=l(),Us=a("li"),Uce=a("strong"),Jbo=o("roformer"),Ybo=o(" \u2014 "),Kq=a("a"),Kbo=o("RoFormerTokenizer"),Zbo=o(" or "),Zq=a("a"),evo=o("RoFormerTokenizerFast"),ovo=o(" (RoFormer model)"),rvo=l(),Qh=a("li"),Hce=a("strong"),tvo=o("speech_to_text"),avo=o(" \u2014 "),ej=a("a"),nvo=o("Speech2TextTokenizer"),svo=o(" (Speech2Text model)"),lvo=l(),Uh=a("li"),Jce=a("strong"),ivo=o("speech_to_text_2"),dvo=o(" \u2014 "),oj=a("a"),cvo=o("Speech2Text2Tokenizer"),mvo=o(" (Speech2Text2 model)"),fvo=l(),Hs=a("li"),Yce=a("strong"),gvo=o("splinter"),hvo=o(" \u2014 "),rj=a("a"),uvo=o("SplinterTokenizer"),pvo=o(" or "),tj=a("a"),_vo=o("SplinterTokenizerFast"),bvo=o(" (Splinter model)"),vvo=l(),Js=a("li"),Kce=a("strong"),Fvo=o("squeezebert"),Tvo=o(" \u2014 "),aj=a("a"),Mvo=o("SqueezeBertTokenizer"),Evo=o(" or "),nj=a("a"),Cvo=o("SqueezeBertTokenizerFast"),wvo=o(" (SqueezeBERT model)"),Avo=l(),Ys=a("li"),Zce=a("strong"),Lvo=o("t5"),yvo=o(" \u2014 "),sj=a("a"),xvo=o("T5Tokenizer"),$vo=o(" or "),lj=a("a"),kvo=o("T5TokenizerFast"),Svo=o(" (T5 model)"),Rvo=l(),Hh=a("li"),eme=a("strong"),Pvo=o("tapas"),Bvo=o(" \u2014 "),ij=a("a"),Ivo=o("TapasTokenizer"),Nvo=o(" (TAPAS model)"),qvo=l(),Jh=a("li"),ome=a("strong"),jvo=o("tapex"),Dvo=o(" \u2014 "),dj=a("a"),Gvo=o("TapexTokenizer"),Ovo=o(" (TAPEX model)"),Vvo=l(),Yh=a("li"),rme=a("strong"),Xvo=o("transfo-xl"),zvo=o(" \u2014 "),cj=a("a"),Wvo=o("TransfoXLTokenizer"),Qvo=o(" (Transformer-XL model)"),Uvo=l(),Ks=a("li"),tme=a("strong"),Hvo=o("vilt"),Jvo=o(" \u2014 "),mj=a("a"),Yvo=o("BertTokenizer"),Kvo=o(" or "),fj=a("a"),Zvo=o("BertTokenizerFast"),e1o=o(" (ViLT model)"),o1o=l(),Zs=a("li"),ame=a("strong"),r1o=o("visual_bert"),t1o=o(" \u2014 "),gj=a("a"),a1o=o("BertTokenizer"),n1o=o(" or "),hj=a("a"),s1o=o("BertTokenizerFast"),l1o=o(" (VisualBERT model)"),i1o=l(),Kh=a("li"),nme=a("strong"),d1o=o("wav2vec2"),c1o=o(" \u2014 "),uj=a("a"),m1o=o("Wav2Vec2CTCTokenizer"),f1o=o(" (Wav2Vec2 model)"),g1o=l(),Zh=a("li"),sme=a("strong"),h1o=o("wav2vec2-conformer"),u1o=o(" \u2014 "),pj=a("a"),p1o=o("Wav2Vec2CTCTokenizer"),_1o=o(" (Wav2Vec2-Conformer model)"),b1o=l(),eu=a("li"),lme=a("strong"),v1o=o("wav2vec2_phoneme"),F1o=o(" \u2014 "),_j=a("a"),T1o=o("Wav2Vec2PhonemeCTCTokenizer"),M1o=o(" (Wav2Vec2Phoneme model)"),E1o=l(),el=a("li"),ime=a("strong"),C1o=o("xglm"),w1o=o(" \u2014 "),bj=a("a"),A1o=o("XGLMTokenizer"),L1o=o(" or "),vj=a("a"),y1o=o("XGLMTokenizerFast"),x1o=o(" (XGLM model)"),$1o=l(),ou=a("li"),dme=a("strong"),k1o=o("xlm"),S1o=o(" \u2014 "),Fj=a("a"),R1o=o("XLMTokenizer"),P1o=o(" (XLM model)"),B1o=l(),ru=a("li"),cme=a("strong"),I1o=o("xlm-prophetnet"),N1o=o(" \u2014 "),Tj=a("a"),q1o=o("XLMProphetNetTokenizer"),j1o=o(" (XLM-ProphetNet model)"),D1o=l(),ol=a("li"),mme=a("strong"),G1o=o("xlm-roberta"),O1o=o(" \u2014 "),Mj=a("a"),V1o=o("XLMRobertaTokenizer"),X1o=o(" or "),Ej=a("a"),z1o=o("XLMRobertaTokenizerFast"),W1o=o(" (XLM-RoBERTa model)"),Q1o=l(),rl=a("li"),fme=a("strong"),U1o=o("xlm-roberta-xl"),H1o=o(" \u2014 "),Cj=a("a"),J1o=o("RobertaTokenizer"),Y1o=o(" or "),wj=a("a"),K1o=o("RobertaTokenizerFast"),Z1o=o(" (XLM-RoBERTa-XL model)"),eFo=l(),tl=a("li"),gme=a("strong"),oFo=o("xlnet"),rFo=o(" \u2014 "),Aj=a("a"),tFo=o("XLNetTokenizer"),aFo=o(" or "),Lj=a("a"),nFo=o("XLNetTokenizerFast"),sFo=o(" (XLNet model)"),lFo=l(),al=a("li"),hme=a("strong"),iFo=o("yoso"),dFo=o(" \u2014 "),yj=a("a"),cFo=o("AlbertTokenizer"),mFo=o(" or "),xj=a("a"),fFo=o("AlbertTokenizerFast"),gFo=o(" (YOSO model)"),hFo=l(),F(tu.$$.fragment),uFo=l(),au=a("div"),F(S8.$$.fragment),pFo=l(),ume=a("p"),_Fo=o("Register a new tokenizer in this mapping."),vUe=l(),Zi=a("h2"),nu=a("a"),pme=a("span"),F(R8.$$.fragment),bFo=l(),_me=a("span"),vFo=o("AutoFeatureExtractor"),FUe=l(),$o=a("div"),F(P8.$$.fragment),FFo=l(),B8=a("p"),TFo=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),$j=a("a"),MFo=o("AutoFeatureExtractor.from_pretrained()"),EFo=o(" class method."),CFo=l(),I8=a("p"),wFo=o("This class cannot be instantiated directly using "),bme=a("code"),AFo=o("__init__()"),LFo=o(" (throws an error)."),yFo=l(),He=a("div"),F(N8.$$.fragment),xFo=l(),vme=a("p"),$Fo=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),kFo=l(),Oa=a("p"),SFo=o("The feature extractor class to instantiate is selected based on the "),Fme=a("code"),RFo=o("model_type"),PFo=o(` property of the config object
(either passed as an argument or loaded from `),Tme=a("code"),BFo=o("pretrained_model_name_or_path"),IFo=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Mme=a("code"),NFo=o("pretrained_model_name_or_path"),qFo=o(":"),jFo=l(),Q=a("ul"),su=a("li"),Eme=a("strong"),DFo=o("beit"),GFo=o(" \u2014 "),kj=a("a"),OFo=o("BeitFeatureExtractor"),VFo=o(" (BEiT model)"),XFo=l(),lu=a("li"),Cme=a("strong"),zFo=o("clip"),WFo=o(" \u2014 "),Sj=a("a"),QFo=o("CLIPFeatureExtractor"),UFo=o(" (CLIP model)"),HFo=l(),iu=a("li"),wme=a("strong"),JFo=o("convnext"),YFo=o(" \u2014 "),Rj=a("a"),KFo=o("ConvNextFeatureExtractor"),ZFo=o(" (ConvNeXT model)"),eTo=l(),du=a("li"),Ame=a("strong"),oTo=o("cvt"),rTo=o(" \u2014 "),Pj=a("a"),tTo=o("ConvNextFeatureExtractor"),aTo=o(" (CvT model)"),nTo=l(),cu=a("li"),Lme=a("strong"),sTo=o("data2vec-audio"),lTo=o(" \u2014 "),Bj=a("a"),iTo=o("Wav2Vec2FeatureExtractor"),dTo=o(" (Data2VecAudio model)"),cTo=l(),mu=a("li"),yme=a("strong"),mTo=o("data2vec-vision"),fTo=o(" \u2014 "),Ij=a("a"),gTo=o("BeitFeatureExtractor"),hTo=o(" (Data2VecVision model)"),uTo=l(),fu=a("li"),xme=a("strong"),pTo=o("deit"),_To=o(" \u2014 "),Nj=a("a"),bTo=o("DeiTFeatureExtractor"),vTo=o(" (DeiT model)"),FTo=l(),gu=a("li"),$me=a("strong"),TTo=o("detr"),MTo=o(" \u2014 "),qj=a("a"),ETo=o("DetrFeatureExtractor"),CTo=o(" (DETR model)"),wTo=l(),hu=a("li"),kme=a("strong"),ATo=o("donut"),LTo=o(" \u2014 "),jj=a("a"),yTo=o("DonutFeatureExtractor"),xTo=o(" (Donut model)"),$To=l(),uu=a("li"),Sme=a("strong"),kTo=o("dpt"),STo=o(" \u2014 "),Dj=a("a"),RTo=o("DPTFeatureExtractor"),PTo=o(" (DPT model)"),BTo=l(),pu=a("li"),Rme=a("strong"),ITo=o("flava"),NTo=o(" \u2014 "),Gj=a("a"),qTo=o("FlavaFeatureExtractor"),jTo=o(" (FLAVA model)"),DTo=l(),_u=a("li"),Pme=a("strong"),GTo=o("glpn"),OTo=o(" \u2014 "),Oj=a("a"),VTo=o("GLPNFeatureExtractor"),XTo=o(" (GLPN model)"),zTo=l(),bu=a("li"),Bme=a("strong"),WTo=o("groupvit"),QTo=o(" \u2014 "),Vj=a("a"),UTo=o("CLIPFeatureExtractor"),HTo=o(" (GroupViT model)"),JTo=l(),vu=a("li"),Ime=a("strong"),YTo=o("hubert"),KTo=o(" \u2014 "),Xj=a("a"),ZTo=o("Wav2Vec2FeatureExtractor"),eMo=o(" (Hubert model)"),oMo=l(),Fu=a("li"),Nme=a("strong"),rMo=o("imagegpt"),tMo=o(" \u2014 "),zj=a("a"),aMo=o("ImageGPTFeatureExtractor"),nMo=o(" (ImageGPT model)"),sMo=l(),Tu=a("li"),qme=a("strong"),lMo=o("layoutlmv2"),iMo=o(" \u2014 "),Wj=a("a"),dMo=o("LayoutLMv2FeatureExtractor"),cMo=o(" (LayoutLMv2 model)"),mMo=l(),Mu=a("li"),jme=a("strong"),fMo=o("layoutlmv3"),gMo=o(" \u2014 "),Qj=a("a"),hMo=o("LayoutLMv3FeatureExtractor"),uMo=o(" (LayoutLMv3 model)"),pMo=l(),Eu=a("li"),Dme=a("strong"),_Mo=o("levit"),bMo=o(" \u2014 "),Uj=a("a"),vMo=o("LevitFeatureExtractor"),FMo=o(" (LeViT model)"),TMo=l(),Cu=a("li"),Gme=a("strong"),MMo=o("maskformer"),EMo=o(" \u2014 "),Hj=a("a"),CMo=o("MaskFormerFeatureExtractor"),wMo=o(" (MaskFormer model)"),AMo=l(),wu=a("li"),Ome=a("strong"),LMo=o("mctct"),yMo=o(" \u2014 "),Jj=a("a"),xMo=o("MCTCTFeatureExtractor"),$Mo=o(" (M-CTC-T model)"),kMo=l(),Au=a("li"),Vme=a("strong"),SMo=o("mobilevit"),RMo=o(" \u2014 "),Yj=a("a"),PMo=o("MobileViTFeatureExtractor"),BMo=o(" (MobileViT model)"),IMo=l(),Lu=a("li"),Xme=a("strong"),NMo=o("owlvit"),qMo=o(" \u2014 "),Kj=a("a"),jMo=o("OwlViTFeatureExtractor"),DMo=o(" (OWL-ViT model)"),GMo=l(),yu=a("li"),zme=a("strong"),OMo=o("perceiver"),VMo=o(" \u2014 "),Zj=a("a"),XMo=o("PerceiverFeatureExtractor"),zMo=o(" (Perceiver model)"),WMo=l(),xu=a("li"),Wme=a("strong"),QMo=o("poolformer"),UMo=o(" \u2014 "),eD=a("a"),HMo=o("PoolFormerFeatureExtractor"),JMo=o(" (PoolFormer model)"),YMo=l(),$u=a("li"),Qme=a("strong"),KMo=o("regnet"),ZMo=o(" \u2014 "),oD=a("a"),eEo=o("ConvNextFeatureExtractor"),oEo=o(" (RegNet model)"),rEo=l(),ku=a("li"),Ume=a("strong"),tEo=o("resnet"),aEo=o(" \u2014 "),rD=a("a"),nEo=o("ConvNextFeatureExtractor"),sEo=o(" (ResNet model)"),lEo=l(),Su=a("li"),Hme=a("strong"),iEo=o("segformer"),dEo=o(" \u2014 "),tD=a("a"),cEo=o("SegformerFeatureExtractor"),mEo=o(" (SegFormer model)"),fEo=l(),Ru=a("li"),Jme=a("strong"),gEo=o("speech_to_text"),hEo=o(" \u2014 "),aD=a("a"),uEo=o("Speech2TextFeatureExtractor"),pEo=o(" (Speech2Text model)"),_Eo=l(),Pu=a("li"),Yme=a("strong"),bEo=o("swin"),vEo=o(" \u2014 "),nD=a("a"),FEo=o("ViTFeatureExtractor"),TEo=o(" (Swin Transformer model)"),MEo=l(),Bu=a("li"),Kme=a("strong"),EEo=o("swinv2"),CEo=o(" \u2014 "),sD=a("a"),wEo=o("ViTFeatureExtractor"),AEo=o(" (Swin Transformer V2 model)"),LEo=l(),Iu=a("li"),Zme=a("strong"),yEo=o("van"),xEo=o(" \u2014 "),lD=a("a"),$Eo=o("ConvNextFeatureExtractor"),kEo=o(" (VAN model)"),SEo=l(),Nu=a("li"),efe=a("strong"),REo=o("videomae"),PEo=o(" \u2014 "),iD=a("a"),BEo=o("VideoMAEFeatureExtractor"),IEo=o(" (VideoMAE model)"),NEo=l(),qu=a("li"),ofe=a("strong"),qEo=o("vilt"),jEo=o(" \u2014 "),dD=a("a"),DEo=o("ViltFeatureExtractor"),GEo=o(" (ViLT model)"),OEo=l(),ju=a("li"),rfe=a("strong"),VEo=o("vit"),XEo=o(" \u2014 "),cD=a("a"),zEo=o("ViTFeatureExtractor"),WEo=o(" (ViT model)"),QEo=l(),Du=a("li"),tfe=a("strong"),UEo=o("vit_mae"),HEo=o(" \u2014 "),mD=a("a"),JEo=o("ViTFeatureExtractor"),YEo=o(" (ViTMAE model)"),KEo=l(),Gu=a("li"),afe=a("strong"),ZEo=o("wav2vec2"),e4o=o(" \u2014 "),fD=a("a"),o4o=o("Wav2Vec2FeatureExtractor"),r4o=o(" (Wav2Vec2 model)"),t4o=l(),Ou=a("li"),nfe=a("strong"),a4o=o("wav2vec2-conformer"),n4o=o(" \u2014 "),gD=a("a"),s4o=o("Wav2Vec2FeatureExtractor"),l4o=o(" (Wav2Vec2-Conformer model)"),i4o=l(),Vu=a("li"),sfe=a("strong"),d4o=o("yolos"),c4o=o(" \u2014 "),hD=a("a"),m4o=o("YolosFeatureExtractor"),f4o=o(" (YOLOS model)"),g4o=l(),F(Xu.$$.fragment),h4o=l(),F(zu.$$.fragment),u4o=l(),Wu=a("div"),F(q8.$$.fragment),p4o=l(),lfe=a("p"),_4o=o("Register a new feature extractor for this class."),TUe=l(),ed=a("h2"),Qu=a("a"),ife=a("span"),F(j8.$$.fragment),b4o=l(),dfe=a("span"),v4o=o("AutoProcessor"),MUe=l(),ko=a("div"),F(D8.$$.fragment),F4o=l(),G8=a("p"),T4o=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),uD=a("a"),M4o=o("AutoProcessor.from_pretrained()"),E4o=o(" class method."),C4o=l(),O8=a("p"),w4o=o("This class cannot be instantiated directly using "),cfe=a("code"),A4o=o("__init__()"),L4o=o(" (throws an error)."),y4o=l(),Je=a("div"),F(V8.$$.fragment),x4o=l(),mfe=a("p"),$4o=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),k4o=l(),od=a("p"),S4o=o("The processor class to instantiate is selected based on the "),ffe=a("code"),R4o=o("model_type"),P4o=o(` property of the config object (either
passed as an argument or loaded from `),gfe=a("code"),B4o=o("pretrained_model_name_or_path"),I4o=o(" if possible):"),N4o=l(),ce=a("ul"),Uu=a("li"),hfe=a("strong"),q4o=o("clip"),j4o=o(" \u2014 "),pD=a("a"),D4o=o("CLIPProcessor"),G4o=o(" (CLIP model)"),O4o=l(),Hu=a("li"),ufe=a("strong"),V4o=o("donut"),X4o=o(" \u2014 "),_D=a("a"),z4o=o("DonutProcessor"),W4o=o(" (Donut model)"),Q4o=l(),Ju=a("li"),pfe=a("strong"),U4o=o("flava"),H4o=o(" \u2014 "),bD=a("a"),J4o=o("FlavaProcessor"),Y4o=o(" (FLAVA model)"),K4o=l(),Yu=a("li"),_fe=a("strong"),Z4o=o("groupvit"),eCo=o(" \u2014 "),vD=a("a"),oCo=o("CLIPProcessor"),rCo=o(" (GroupViT model)"),tCo=l(),Ku=a("li"),bfe=a("strong"),aCo=o("layoutlmv2"),nCo=o(" \u2014 "),FD=a("a"),sCo=o("LayoutLMv2Processor"),lCo=o(" (LayoutLMv2 model)"),iCo=l(),Zu=a("li"),vfe=a("strong"),dCo=o("layoutlmv3"),cCo=o(" \u2014 "),TD=a("a"),mCo=o("LayoutLMv3Processor"),fCo=o(" (LayoutLMv3 model)"),gCo=l(),ep=a("li"),Ffe=a("strong"),hCo=o("layoutxlm"),uCo=o(" \u2014 "),MD=a("a"),pCo=o("LayoutXLMProcessor"),_Co=o(" (LayoutXLM model)"),bCo=l(),op=a("li"),Tfe=a("strong"),vCo=o("owlvit"),FCo=o(" \u2014 "),ED=a("a"),TCo=o("OwlViTProcessor"),MCo=o(" (OWL-ViT model)"),ECo=l(),rp=a("li"),Mfe=a("strong"),CCo=o("sew"),wCo=o(" \u2014 "),CD=a("a"),ACo=o("Wav2Vec2Processor"),LCo=o(" (SEW model)"),yCo=l(),tp=a("li"),Efe=a("strong"),xCo=o("sew-d"),$Co=o(" \u2014 "),wD=a("a"),kCo=o("Wav2Vec2Processor"),SCo=o(" (SEW-D model)"),RCo=l(),ap=a("li"),Cfe=a("strong"),PCo=o("speech_to_text"),BCo=o(" \u2014 "),AD=a("a"),ICo=o("Speech2TextProcessor"),NCo=o(" (Speech2Text model)"),qCo=l(),np=a("li"),wfe=a("strong"),jCo=o("speech_to_text_2"),DCo=o(" \u2014 "),LD=a("a"),GCo=o("Speech2Text2Processor"),OCo=o(" (Speech2Text2 model)"),VCo=l(),sp=a("li"),Afe=a("strong"),XCo=o("trocr"),zCo=o(" \u2014 "),yD=a("a"),WCo=o("TrOCRProcessor"),QCo=o(" (TrOCR model)"),UCo=l(),lp=a("li"),Lfe=a("strong"),HCo=o("unispeech"),JCo=o(" \u2014 "),xD=a("a"),YCo=o("Wav2Vec2Processor"),KCo=o(" (UniSpeech model)"),ZCo=l(),ip=a("li"),yfe=a("strong"),e3o=o("unispeech-sat"),o3o=o(" \u2014 "),$D=a("a"),r3o=o("Wav2Vec2Processor"),t3o=o(" (UniSpeechSat model)"),a3o=l(),dp=a("li"),xfe=a("strong"),n3o=o("vilt"),s3o=o(" \u2014 "),kD=a("a"),l3o=o("ViltProcessor"),i3o=o(" (ViLT model)"),d3o=l(),cp=a("li"),$fe=a("strong"),c3o=o("vision-text-dual-encoder"),m3o=o(" \u2014 "),SD=a("a"),f3o=o("VisionTextDualEncoderProcessor"),g3o=o(" (VisionTextDualEncoder model)"),h3o=l(),mp=a("li"),kfe=a("strong"),u3o=o("wav2vec2"),p3o=o(" \u2014 "),RD=a("a"),_3o=o("Wav2Vec2Processor"),b3o=o(" (Wav2Vec2 model)"),v3o=l(),fp=a("li"),Sfe=a("strong"),F3o=o("wav2vec2-conformer"),T3o=o(" \u2014 "),PD=a("a"),M3o=o("Wav2Vec2Processor"),E3o=o(" (Wav2Vec2-Conformer model)"),C3o=l(),gp=a("li"),Rfe=a("strong"),w3o=o("wavlm"),A3o=o(" \u2014 "),BD=a("a"),L3o=o("Wav2Vec2Processor"),y3o=o(" (WavLM model)"),x3o=l(),F(hp.$$.fragment),$3o=l(),F(up.$$.fragment),k3o=l(),pp=a("div"),F(X8.$$.fragment),S3o=l(),Pfe=a("p"),R3o=o("Register a new processor for this class."),EUe=l(),rd=a("h2"),_p=a("a"),Bfe=a("span"),F(z8.$$.fragment),P3o=l(),Ife=a("span"),B3o=o("AutoModel"),CUe=l(),So=a("div"),F(W8.$$.fragment),I3o=l(),td=a("p"),N3o=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),ID=a("a"),q3o=o("from_pretrained()"),j3o=o(" class method or the "),ND=a("a"),D3o=o("from_config()"),G3o=o(` class
method.`),O3o=l(),Q8=a("p"),V3o=o("This class cannot be instantiated directly using "),Nfe=a("code"),X3o=o("__init__()"),z3o=o(" (throws an error)."),W3o=l(),ft=a("div"),F(U8.$$.fragment),Q3o=l(),qfe=a("p"),U3o=o("Instantiates one of the base model classes of the library from a configuration."),H3o=l(),ad=a("p"),J3o=o(`Note:
Loading a model from its configuration file does `),jfe=a("strong"),Y3o=o("not"),K3o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qD=a("a"),Z3o=o("from_pretrained()"),e5o=o(" to load the model weights."),o5o=l(),F(bp.$$.fragment),r5o=l(),Ye=a("div"),F(H8.$$.fragment),t5o=l(),Dfe=a("p"),a5o=o("Instantiate one of the base model classes of the library from a pretrained model."),n5o=l(),Va=a("p"),s5o=o("The model class to instantiate is selected based on the "),Gfe=a("code"),l5o=o("model_type"),i5o=o(` property of the config object (either
passed as an argument or loaded from `),Ofe=a("code"),d5o=o("pretrained_model_name_or_path"),c5o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vfe=a("code"),m5o=o("pretrained_model_name_or_path"),f5o=o(":"),g5o=l(),y=a("ul"),vp=a("li"),Xfe=a("strong"),h5o=o("albert"),u5o=o(" \u2014 "),jD=a("a"),p5o=o("AlbertModel"),_5o=o(" (ALBERT model)"),b5o=l(),Fp=a("li"),zfe=a("strong"),v5o=o("bart"),F5o=o(" \u2014 "),DD=a("a"),T5o=o("BartModel"),M5o=o(" (BART model)"),E5o=l(),Tp=a("li"),Wfe=a("strong"),C5o=o("beit"),w5o=o(" \u2014 "),GD=a("a"),A5o=o("BeitModel"),L5o=o(" (BEiT model)"),y5o=l(),Mp=a("li"),Qfe=a("strong"),x5o=o("bert"),$5o=o(" \u2014 "),OD=a("a"),k5o=o("BertModel"),S5o=o(" (BERT model)"),R5o=l(),Ep=a("li"),Ufe=a("strong"),P5o=o("bert-generation"),B5o=o(" \u2014 "),VD=a("a"),I5o=o("BertGenerationEncoder"),N5o=o(" (Bert Generation model)"),q5o=l(),Cp=a("li"),Hfe=a("strong"),j5o=o("big_bird"),D5o=o(" \u2014 "),XD=a("a"),G5o=o("BigBirdModel"),O5o=o(" (BigBird model)"),V5o=l(),wp=a("li"),Jfe=a("strong"),X5o=o("bigbird_pegasus"),z5o=o(" \u2014 "),zD=a("a"),W5o=o("BigBirdPegasusModel"),Q5o=o(" (BigBird-Pegasus model)"),U5o=l(),Ap=a("li"),Yfe=a("strong"),H5o=o("blenderbot"),J5o=o(" \u2014 "),WD=a("a"),Y5o=o("BlenderbotModel"),K5o=o(" (Blenderbot model)"),Z5o=l(),Lp=a("li"),Kfe=a("strong"),e0o=o("blenderbot-small"),o0o=o(" \u2014 "),QD=a("a"),r0o=o("BlenderbotSmallModel"),t0o=o(" (BlenderbotSmall model)"),a0o=l(),yp=a("li"),Zfe=a("strong"),n0o=o("bloom"),s0o=o(" \u2014 "),UD=a("a"),l0o=o("BloomModel"),i0o=o(" (BLOOM model)"),d0o=l(),xp=a("li"),ege=a("strong"),c0o=o("camembert"),m0o=o(" \u2014 "),HD=a("a"),f0o=o("CamembertModel"),g0o=o(" (CamemBERT model)"),h0o=l(),$p=a("li"),oge=a("strong"),u0o=o("canine"),p0o=o(" \u2014 "),JD=a("a"),_0o=o("CanineModel"),b0o=o(" (CANINE model)"),v0o=l(),kp=a("li"),rge=a("strong"),F0o=o("clip"),T0o=o(" \u2014 "),YD=a("a"),M0o=o("CLIPModel"),E0o=o(" (CLIP model)"),C0o=l(),Sp=a("li"),tge=a("strong"),w0o=o("codegen"),A0o=o(" \u2014 "),KD=a("a"),L0o=o("CodeGenModel"),y0o=o(" (CodeGen model)"),x0o=l(),Rp=a("li"),age=a("strong"),$0o=o("convbert"),k0o=o(" \u2014 "),ZD=a("a"),S0o=o("ConvBertModel"),R0o=o(" (ConvBERT model)"),P0o=l(),Pp=a("li"),nge=a("strong"),B0o=o("convnext"),I0o=o(" \u2014 "),eG=a("a"),N0o=o("ConvNextModel"),q0o=o(" (ConvNeXT model)"),j0o=l(),Bp=a("li"),sge=a("strong"),D0o=o("ctrl"),G0o=o(" \u2014 "),oG=a("a"),O0o=o("CTRLModel"),V0o=o(" (CTRL model)"),X0o=l(),Ip=a("li"),lge=a("strong"),z0o=o("cvt"),W0o=o(" \u2014 "),rG=a("a"),Q0o=o("CvtModel"),U0o=o(" (CvT model)"),H0o=l(),Np=a("li"),ige=a("strong"),J0o=o("data2vec-audio"),Y0o=o(" \u2014 "),tG=a("a"),K0o=o("Data2VecAudioModel"),Z0o=o(" (Data2VecAudio model)"),ewo=l(),qp=a("li"),dge=a("strong"),owo=o("data2vec-text"),rwo=o(" \u2014 "),aG=a("a"),two=o("Data2VecTextModel"),awo=o(" (Data2VecText model)"),nwo=l(),jp=a("li"),cge=a("strong"),swo=o("data2vec-vision"),lwo=o(" \u2014 "),nG=a("a"),iwo=o("Data2VecVisionModel"),dwo=o(" (Data2VecVision model)"),cwo=l(),Dp=a("li"),mge=a("strong"),mwo=o("deberta"),fwo=o(" \u2014 "),sG=a("a"),gwo=o("DebertaModel"),hwo=o(" (DeBERTa model)"),uwo=l(),Gp=a("li"),fge=a("strong"),pwo=o("deberta-v2"),_wo=o(" \u2014 "),lG=a("a"),bwo=o("DebertaV2Model"),vwo=o(" (DeBERTa-v2 model)"),Fwo=l(),Op=a("li"),gge=a("strong"),Two=o("decision_transformer"),Mwo=o(" \u2014 "),iG=a("a"),Ewo=o("DecisionTransformerModel"),Cwo=o(" (Decision Transformer model)"),wwo=l(),Vp=a("li"),hge=a("strong"),Awo=o("deit"),Lwo=o(" \u2014 "),dG=a("a"),ywo=o("DeiTModel"),xwo=o(" (DeiT model)"),$wo=l(),Xp=a("li"),uge=a("strong"),kwo=o("detr"),Swo=o(" \u2014 "),cG=a("a"),Rwo=o("DetrModel"),Pwo=o(" (DETR model)"),Bwo=l(),zp=a("li"),pge=a("strong"),Iwo=o("distilbert"),Nwo=o(" \u2014 "),mG=a("a"),qwo=o("DistilBertModel"),jwo=o(" (DistilBERT model)"),Dwo=l(),Wp=a("li"),_ge=a("strong"),Gwo=o("donut-swin"),Owo=o(" \u2014 "),fG=a("a"),Vwo=o("DonutSwinModel"),Xwo=o(" (DonutSwin model)"),zwo=l(),Qp=a("li"),bge=a("strong"),Wwo=o("dpr"),Qwo=o(" \u2014 "),gG=a("a"),Uwo=o("DPRQuestionEncoder"),Hwo=o(" (DPR model)"),Jwo=l(),Up=a("li"),vge=a("strong"),Ywo=o("dpt"),Kwo=o(" \u2014 "),hG=a("a"),Zwo=o("DPTModel"),e6o=o(" (DPT model)"),o6o=l(),Hp=a("li"),Fge=a("strong"),r6o=o("electra"),t6o=o(" \u2014 "),uG=a("a"),a6o=o("ElectraModel"),n6o=o(" (ELECTRA model)"),s6o=l(),Jp=a("li"),Tge=a("strong"),l6o=o("flaubert"),i6o=o(" \u2014 "),pG=a("a"),d6o=o("FlaubertModel"),c6o=o(" (FlauBERT model)"),m6o=l(),Yp=a("li"),Mge=a("strong"),f6o=o("flava"),g6o=o(" \u2014 "),_G=a("a"),h6o=o("FlavaModel"),u6o=o(" (FLAVA model)"),p6o=l(),Kp=a("li"),Ege=a("strong"),_6o=o("fnet"),b6o=o(" \u2014 "),bG=a("a"),v6o=o("FNetModel"),F6o=o(" (FNet model)"),T6o=l(),Zp=a("li"),Cge=a("strong"),M6o=o("fsmt"),E6o=o(" \u2014 "),vG=a("a"),C6o=o("FSMTModel"),w6o=o(" (FairSeq Machine-Translation model)"),A6o=l(),nl=a("li"),wge=a("strong"),L6o=o("funnel"),y6o=o(" \u2014 "),FG=a("a"),x6o=o("FunnelModel"),$6o=o(" or "),TG=a("a"),k6o=o("FunnelBaseModel"),S6o=o(" (Funnel Transformer model)"),R6o=l(),e_=a("li"),Age=a("strong"),P6o=o("glpn"),B6o=o(" \u2014 "),MG=a("a"),I6o=o("GLPNModel"),N6o=o(" (GLPN model)"),q6o=l(),o_=a("li"),Lge=a("strong"),j6o=o("gpt2"),D6o=o(" \u2014 "),EG=a("a"),G6o=o("GPT2Model"),O6o=o(" (OpenAI GPT-2 model)"),V6o=l(),r_=a("li"),yge=a("strong"),X6o=o("gpt_neo"),z6o=o(" \u2014 "),CG=a("a"),W6o=o("GPTNeoModel"),Q6o=o(" (GPT Neo model)"),U6o=l(),t_=a("li"),xge=a("strong"),H6o=o("gpt_neox"),J6o=o(" \u2014 "),wG=a("a"),Y6o=o("GPTNeoXModel"),K6o=o(" (GPT NeoX model)"),Z6o=l(),a_=a("li"),$ge=a("strong"),eAo=o("gptj"),oAo=o(" \u2014 "),AG=a("a"),rAo=o("GPTJModel"),tAo=o(" (GPT-J model)"),aAo=l(),n_=a("li"),kge=a("strong"),nAo=o("groupvit"),sAo=o(" \u2014 "),LG=a("a"),lAo=o("GroupViTModel"),iAo=o(" (GroupViT model)"),dAo=l(),s_=a("li"),Sge=a("strong"),cAo=o("hubert"),mAo=o(" \u2014 "),yG=a("a"),fAo=o("HubertModel"),gAo=o(" (Hubert model)"),hAo=l(),l_=a("li"),Rge=a("strong"),uAo=o("ibert"),pAo=o(" \u2014 "),xG=a("a"),_Ao=o("IBertModel"),bAo=o(" (I-BERT model)"),vAo=l(),i_=a("li"),Pge=a("strong"),FAo=o("imagegpt"),TAo=o(" \u2014 "),$G=a("a"),MAo=o("ImageGPTModel"),EAo=o(" (ImageGPT model)"),CAo=l(),d_=a("li"),Bge=a("strong"),wAo=o("layoutlm"),AAo=o(" \u2014 "),kG=a("a"),LAo=o("LayoutLMModel"),yAo=o(" (LayoutLM model)"),xAo=l(),c_=a("li"),Ige=a("strong"),$Ao=o("layoutlmv2"),kAo=o(" \u2014 "),SG=a("a"),SAo=o("LayoutLMv2Model"),RAo=o(" (LayoutLMv2 model)"),PAo=l(),m_=a("li"),Nge=a("strong"),BAo=o("layoutlmv3"),IAo=o(" \u2014 "),RG=a("a"),NAo=o("LayoutLMv3Model"),qAo=o(" (LayoutLMv3 model)"),jAo=l(),f_=a("li"),qge=a("strong"),DAo=o("led"),GAo=o(" \u2014 "),PG=a("a"),OAo=o("LEDModel"),VAo=o(" (LED model)"),XAo=l(),g_=a("li"),jge=a("strong"),zAo=o("levit"),WAo=o(" \u2014 "),BG=a("a"),QAo=o("LevitModel"),UAo=o(" (LeViT model)"),HAo=l(),h_=a("li"),Dge=a("strong"),JAo=o("longformer"),YAo=o(" \u2014 "),IG=a("a"),KAo=o("LongformerModel"),ZAo=o(" (Longformer model)"),e7o=l(),u_=a("li"),Gge=a("strong"),o7o=o("longt5"),r7o=o(" \u2014 "),NG=a("a"),t7o=o("LongT5Model"),a7o=o(" (LongT5 model)"),n7o=l(),p_=a("li"),Oge=a("strong"),s7o=o("luke"),l7o=o(" \u2014 "),qG=a("a"),i7o=o("LukeModel"),d7o=o(" (LUKE model)"),c7o=l(),__=a("li"),Vge=a("strong"),m7o=o("lxmert"),f7o=o(" \u2014 "),jG=a("a"),g7o=o("LxmertModel"),h7o=o(" (LXMERT model)"),u7o=l(),b_=a("li"),Xge=a("strong"),p7o=o("m2m_100"),_7o=o(" \u2014 "),DG=a("a"),b7o=o("M2M100Model"),v7o=o(" (M2M100 model)"),F7o=l(),v_=a("li"),zge=a("strong"),T7o=o("marian"),M7o=o(" \u2014 "),GG=a("a"),E7o=o("MarianModel"),C7o=o(" (Marian model)"),w7o=l(),F_=a("li"),Wge=a("strong"),A7o=o("maskformer"),L7o=o(" \u2014 "),OG=a("a"),y7o=o("MaskFormerModel"),x7o=o(" (MaskFormer model)"),$7o=l(),T_=a("li"),Qge=a("strong"),k7o=o("mbart"),S7o=o(" \u2014 "),VG=a("a"),R7o=o("MBartModel"),P7o=o(" (mBART model)"),B7o=l(),M_=a("li"),Uge=a("strong"),I7o=o("mctct"),N7o=o(" \u2014 "),XG=a("a"),q7o=o("MCTCTModel"),j7o=o(" (M-CTC-T model)"),D7o=l(),E_=a("li"),Hge=a("strong"),G7o=o("megatron-bert"),O7o=o(" \u2014 "),zG=a("a"),V7o=o("MegatronBertModel"),X7o=o(" (Megatron-BERT model)"),z7o=l(),C_=a("li"),Jge=a("strong"),W7o=o("mobilebert"),Q7o=o(" \u2014 "),WG=a("a"),U7o=o("MobileBertModel"),H7o=o(" (MobileBERT model)"),J7o=l(),w_=a("li"),Yge=a("strong"),Y7o=o("mobilevit"),K7o=o(" \u2014 "),QG=a("a"),Z7o=o("MobileViTModel"),eLo=o(" (MobileViT model)"),oLo=l(),A_=a("li"),Kge=a("strong"),rLo=o("mpnet"),tLo=o(" \u2014 "),UG=a("a"),aLo=o("MPNetModel"),nLo=o(" (MPNet model)"),sLo=l(),L_=a("li"),Zge=a("strong"),lLo=o("mt5"),iLo=o(" \u2014 "),HG=a("a"),dLo=o("MT5Model"),cLo=o(" (MT5 model)"),mLo=l(),y_=a("li"),ehe=a("strong"),fLo=o("mvp"),gLo=o(" \u2014 "),JG=a("a"),hLo=o("MvpModel"),uLo=o(" (MVP model)"),pLo=l(),x_=a("li"),ohe=a("strong"),_Lo=o("nezha"),bLo=o(" \u2014 "),YG=a("a"),vLo=o("NezhaModel"),FLo=o(" (Nezha model)"),TLo=l(),$_=a("li"),rhe=a("strong"),MLo=o("nllb"),ELo=o(" \u2014 "),KG=a("a"),CLo=o("M2M100Model"),wLo=o(" (NLLB model)"),ALo=l(),k_=a("li"),the=a("strong"),LLo=o("nystromformer"),yLo=o(" \u2014 "),ZG=a("a"),xLo=o("NystromformerModel"),$Lo=o(" (Nystr\xF6mformer model)"),kLo=l(),S_=a("li"),ahe=a("strong"),SLo=o("openai-gpt"),RLo=o(" \u2014 "),eO=a("a"),PLo=o("OpenAIGPTModel"),BLo=o(" (OpenAI GPT model)"),ILo=l(),R_=a("li"),nhe=a("strong"),NLo=o("opt"),qLo=o(" \u2014 "),oO=a("a"),jLo=o("OPTModel"),DLo=o(" (OPT model)"),GLo=l(),P_=a("li"),she=a("strong"),OLo=o("owlvit"),VLo=o(" \u2014 "),rO=a("a"),XLo=o("OwlViTModel"),zLo=o(" (OWL-ViT model)"),WLo=l(),B_=a("li"),lhe=a("strong"),QLo=o("pegasus"),ULo=o(" \u2014 "),tO=a("a"),HLo=o("PegasusModel"),JLo=o(" (Pegasus model)"),YLo=l(),I_=a("li"),ihe=a("strong"),KLo=o("perceiver"),ZLo=o(" \u2014 "),aO=a("a"),eyo=o("PerceiverModel"),oyo=o(" (Perceiver model)"),ryo=l(),N_=a("li"),dhe=a("strong"),tyo=o("plbart"),ayo=o(" \u2014 "),nO=a("a"),nyo=o("PLBartModel"),syo=o(" (PLBart model)"),lyo=l(),q_=a("li"),che=a("strong"),iyo=o("poolformer"),dyo=o(" \u2014 "),sO=a("a"),cyo=o("PoolFormerModel"),myo=o(" (PoolFormer model)"),fyo=l(),j_=a("li"),mhe=a("strong"),gyo=o("prophetnet"),hyo=o(" \u2014 "),lO=a("a"),uyo=o("ProphetNetModel"),pyo=o(" (ProphetNet model)"),_yo=l(),D_=a("li"),fhe=a("strong"),byo=o("qdqbert"),vyo=o(" \u2014 "),iO=a("a"),Fyo=o("QDQBertModel"),Tyo=o(" (QDQBert model)"),Myo=l(),G_=a("li"),ghe=a("strong"),Eyo=o("reformer"),Cyo=o(" \u2014 "),dO=a("a"),wyo=o("ReformerModel"),Ayo=o(" (Reformer model)"),Lyo=l(),O_=a("li"),hhe=a("strong"),yyo=o("regnet"),xyo=o(" \u2014 "),cO=a("a"),$yo=o("RegNetModel"),kyo=o(" (RegNet model)"),Syo=l(),V_=a("li"),uhe=a("strong"),Ryo=o("rembert"),Pyo=o(" \u2014 "),mO=a("a"),Byo=o("RemBertModel"),Iyo=o(" (RemBERT model)"),Nyo=l(),X_=a("li"),phe=a("strong"),qyo=o("resnet"),jyo=o(" \u2014 "),fO=a("a"),Dyo=o("ResNetModel"),Gyo=o(" (ResNet model)"),Oyo=l(),z_=a("li"),_he=a("strong"),Vyo=o("retribert"),Xyo=o(" \u2014 "),gO=a("a"),zyo=o("RetriBertModel"),Wyo=o(" (RetriBERT model)"),Qyo=l(),W_=a("li"),bhe=a("strong"),Uyo=o("roberta"),Hyo=o(" \u2014 "),hO=a("a"),Jyo=o("RobertaModel"),Yyo=o(" (RoBERTa model)"),Kyo=l(),Q_=a("li"),vhe=a("strong"),Zyo=o("roformer"),e8o=o(" \u2014 "),uO=a("a"),o8o=o("RoFormerModel"),r8o=o(" (RoFormer model)"),t8o=l(),U_=a("li"),Fhe=a("strong"),a8o=o("segformer"),n8o=o(" \u2014 "),pO=a("a"),s8o=o("SegformerModel"),l8o=o(" (SegFormer model)"),i8o=l(),H_=a("li"),The=a("strong"),d8o=o("sew"),c8o=o(" \u2014 "),_O=a("a"),m8o=o("SEWModel"),f8o=o(" (SEW model)"),g8o=l(),J_=a("li"),Mhe=a("strong"),h8o=o("sew-d"),u8o=o(" \u2014 "),bO=a("a"),p8o=o("SEWDModel"),_8o=o(" (SEW-D model)"),b8o=l(),Y_=a("li"),Ehe=a("strong"),v8o=o("speech_to_text"),F8o=o(" \u2014 "),vO=a("a"),T8o=o("Speech2TextModel"),M8o=o(" (Speech2Text model)"),E8o=l(),K_=a("li"),Che=a("strong"),C8o=o("splinter"),w8o=o(" \u2014 "),FO=a("a"),A8o=o("SplinterModel"),L8o=o(" (Splinter model)"),y8o=l(),Z_=a("li"),whe=a("strong"),x8o=o("squeezebert"),$8o=o(" \u2014 "),TO=a("a"),k8o=o("SqueezeBertModel"),S8o=o(" (SqueezeBERT model)"),R8o=l(),e2=a("li"),Ahe=a("strong"),P8o=o("swin"),B8o=o(" \u2014 "),MO=a("a"),I8o=o("SwinModel"),N8o=o(" (Swin Transformer model)"),q8o=l(),o2=a("li"),Lhe=a("strong"),j8o=o("swinv2"),D8o=o(" \u2014 "),EO=a("a"),G8o=o("Swinv2Model"),O8o=o(" (Swin Transformer V2 model)"),V8o=l(),r2=a("li"),yhe=a("strong"),X8o=o("t5"),z8o=o(" \u2014 "),CO=a("a"),W8o=o("T5Model"),Q8o=o(" (T5 model)"),U8o=l(),t2=a("li"),xhe=a("strong"),H8o=o("tapas"),J8o=o(" \u2014 "),wO=a("a"),Y8o=o("TapasModel"),K8o=o(" (TAPAS model)"),Z8o=l(),a2=a("li"),$he=a("strong"),e9o=o("trajectory_transformer"),o9o=o(" \u2014 "),AO=a("a"),r9o=o("TrajectoryTransformerModel"),t9o=o(" (Trajectory Transformer model)"),a9o=l(),n2=a("li"),khe=a("strong"),n9o=o("transfo-xl"),s9o=o(" \u2014 "),LO=a("a"),l9o=o("TransfoXLModel"),i9o=o(" (Transformer-XL model)"),d9o=l(),s2=a("li"),She=a("strong"),c9o=o("unispeech"),m9o=o(" \u2014 "),yO=a("a"),f9o=o("UniSpeechModel"),g9o=o(" (UniSpeech model)"),h9o=l(),l2=a("li"),Rhe=a("strong"),u9o=o("unispeech-sat"),p9o=o(" \u2014 "),xO=a("a"),_9o=o("UniSpeechSatModel"),b9o=o(" (UniSpeechSat model)"),v9o=l(),i2=a("li"),Phe=a("strong"),F9o=o("van"),T9o=o(" \u2014 "),$O=a("a"),M9o=o("VanModel"),E9o=o(" (VAN model)"),C9o=l(),d2=a("li"),Bhe=a("strong"),w9o=o("videomae"),A9o=o(" \u2014 "),kO=a("a"),L9o=o("VideoMAEModel"),y9o=o(" (VideoMAE model)"),x9o=l(),c2=a("li"),Ihe=a("strong"),$9o=o("vilt"),k9o=o(" \u2014 "),SO=a("a"),S9o=o("ViltModel"),R9o=o(" (ViLT model)"),P9o=l(),m2=a("li"),Nhe=a("strong"),B9o=o("vision-text-dual-encoder"),I9o=o(" \u2014 "),RO=a("a"),N9o=o("VisionTextDualEncoderModel"),q9o=o(" (VisionTextDualEncoder model)"),j9o=l(),f2=a("li"),qhe=a("strong"),D9o=o("visual_bert"),G9o=o(" \u2014 "),PO=a("a"),O9o=o("VisualBertModel"),V9o=o(" (VisualBERT model)"),X9o=l(),g2=a("li"),jhe=a("strong"),z9o=o("vit"),W9o=o(" \u2014 "),BO=a("a"),Q9o=o("ViTModel"),U9o=o(" (ViT model)"),H9o=l(),h2=a("li"),Dhe=a("strong"),J9o=o("vit_mae"),Y9o=o(" \u2014 "),IO=a("a"),K9o=o("ViTMAEModel"),Z9o=o(" (ViTMAE model)"),exo=l(),u2=a("li"),Ghe=a("strong"),oxo=o("wav2vec2"),rxo=o(" \u2014 "),NO=a("a"),txo=o("Wav2Vec2Model"),axo=o(" (Wav2Vec2 model)"),nxo=l(),p2=a("li"),Ohe=a("strong"),sxo=o("wav2vec2-conformer"),lxo=o(" \u2014 "),qO=a("a"),ixo=o("Wav2Vec2ConformerModel"),dxo=o(" (Wav2Vec2-Conformer model)"),cxo=l(),_2=a("li"),Vhe=a("strong"),mxo=o("wavlm"),fxo=o(" \u2014 "),jO=a("a"),gxo=o("WavLMModel"),hxo=o(" (WavLM model)"),uxo=l(),b2=a("li"),Xhe=a("strong"),pxo=o("xglm"),_xo=o(" \u2014 "),DO=a("a"),bxo=o("XGLMModel"),vxo=o(" (XGLM model)"),Fxo=l(),v2=a("li"),zhe=a("strong"),Txo=o("xlm"),Mxo=o(" \u2014 "),GO=a("a"),Exo=o("XLMModel"),Cxo=o(" (XLM model)"),wxo=l(),F2=a("li"),Whe=a("strong"),Axo=o("xlm-prophetnet"),Lxo=o(" \u2014 "),OO=a("a"),yxo=o("XLMProphetNetModel"),xxo=o(" (XLM-ProphetNet model)"),$xo=l(),T2=a("li"),Qhe=a("strong"),kxo=o("xlm-roberta"),Sxo=o(" \u2014 "),VO=a("a"),Rxo=o("XLMRobertaModel"),Pxo=o(" (XLM-RoBERTa model)"),Bxo=l(),M2=a("li"),Uhe=a("strong"),Ixo=o("xlm-roberta-xl"),Nxo=o(" \u2014 "),XO=a("a"),qxo=o("XLMRobertaXLModel"),jxo=o(" (XLM-RoBERTa-XL model)"),Dxo=l(),E2=a("li"),Hhe=a("strong"),Gxo=o("xlnet"),Oxo=o(" \u2014 "),zO=a("a"),Vxo=o("XLNetModel"),Xxo=o(" (XLNet model)"),zxo=l(),C2=a("li"),Jhe=a("strong"),Wxo=o("yolos"),Qxo=o(" \u2014 "),WO=a("a"),Uxo=o("YolosModel"),Hxo=o(" (YOLOS model)"),Jxo=l(),w2=a("li"),Yhe=a("strong"),Yxo=o("yoso"),Kxo=o(" \u2014 "),QO=a("a"),Zxo=o("YosoModel"),e$o=o(" (YOSO model)"),o$o=l(),A2=a("p"),r$o=o("The model is set in evaluation mode by default using "),Khe=a("code"),t$o=o("model.eval()"),a$o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zhe=a("code"),n$o=o("model.train()"),s$o=l(),F(L2.$$.fragment),wUe=l(),nd=a("h2"),y2=a("a"),eue=a("span"),F(J8.$$.fragment),l$o=l(),oue=a("span"),i$o=o("AutoModelForPreTraining"),AUe=l(),Ro=a("div"),F(Y8.$$.fragment),d$o=l(),sd=a("p"),c$o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),UO=a("a"),m$o=o("from_pretrained()"),f$o=o(" class method or the "),HO=a("a"),g$o=o("from_config()"),h$o=o(` class
method.`),u$o=l(),K8=a("p"),p$o=o("This class cannot be instantiated directly using "),rue=a("code"),_$o=o("__init__()"),b$o=o(" (throws an error)."),v$o=l(),gt=a("div"),F(Z8.$$.fragment),F$o=l(),tue=a("p"),T$o=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),M$o=l(),ld=a("p"),E$o=o(`Note:
Loading a model from its configuration file does `),aue=a("strong"),C$o=o("not"),w$o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JO=a("a"),A$o=o("from_pretrained()"),L$o=o(" to load the model weights."),y$o=l(),F(x2.$$.fragment),x$o=l(),Ke=a("div"),F(e9.$$.fragment),$$o=l(),nue=a("p"),k$o=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),S$o=l(),Xa=a("p"),R$o=o("The model class to instantiate is selected based on the "),sue=a("code"),P$o=o("model_type"),B$o=o(` property of the config object (either
passed as an argument or loaded from `),lue=a("code"),I$o=o("pretrained_model_name_or_path"),N$o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iue=a("code"),q$o=o("pretrained_model_name_or_path"),j$o=o(":"),D$o=l(),G=a("ul"),$2=a("li"),due=a("strong"),G$o=o("albert"),O$o=o(" \u2014 "),YO=a("a"),V$o=o("AlbertForPreTraining"),X$o=o(" (ALBERT model)"),z$o=l(),k2=a("li"),cue=a("strong"),W$o=o("bart"),Q$o=o(" \u2014 "),KO=a("a"),U$o=o("BartForConditionalGeneration"),H$o=o(" (BART model)"),J$o=l(),S2=a("li"),mue=a("strong"),Y$o=o("bert"),K$o=o(" \u2014 "),ZO=a("a"),Z$o=o("BertForPreTraining"),eko=o(" (BERT model)"),oko=l(),R2=a("li"),fue=a("strong"),rko=o("big_bird"),tko=o(" \u2014 "),eV=a("a"),ako=o("BigBirdForPreTraining"),nko=o(" (BigBird model)"),sko=l(),P2=a("li"),gue=a("strong"),lko=o("bloom"),iko=o(" \u2014 "),oV=a("a"),dko=o("BloomForCausalLM"),cko=o(" (BLOOM model)"),mko=l(),B2=a("li"),hue=a("strong"),fko=o("camembert"),gko=o(" \u2014 "),rV=a("a"),hko=o("CamembertForMaskedLM"),uko=o(" (CamemBERT model)"),pko=l(),I2=a("li"),uue=a("strong"),_ko=o("ctrl"),bko=o(" \u2014 "),tV=a("a"),vko=o("CTRLLMHeadModel"),Fko=o(" (CTRL model)"),Tko=l(),N2=a("li"),pue=a("strong"),Mko=o("data2vec-text"),Eko=o(" \u2014 "),aV=a("a"),Cko=o("Data2VecTextForMaskedLM"),wko=o(" (Data2VecText model)"),Ako=l(),q2=a("li"),_ue=a("strong"),Lko=o("deberta"),yko=o(" \u2014 "),nV=a("a"),xko=o("DebertaForMaskedLM"),$ko=o(" (DeBERTa model)"),kko=l(),j2=a("li"),bue=a("strong"),Sko=o("deberta-v2"),Rko=o(" \u2014 "),sV=a("a"),Pko=o("DebertaV2ForMaskedLM"),Bko=o(" (DeBERTa-v2 model)"),Iko=l(),D2=a("li"),vue=a("strong"),Nko=o("distilbert"),qko=o(" \u2014 "),lV=a("a"),jko=o("DistilBertForMaskedLM"),Dko=o(" (DistilBERT model)"),Gko=l(),G2=a("li"),Fue=a("strong"),Oko=o("electra"),Vko=o(" \u2014 "),iV=a("a"),Xko=o("ElectraForPreTraining"),zko=o(" (ELECTRA model)"),Wko=l(),O2=a("li"),Tue=a("strong"),Qko=o("flaubert"),Uko=o(" \u2014 "),dV=a("a"),Hko=o("FlaubertWithLMHeadModel"),Jko=o(" (FlauBERT model)"),Yko=l(),V2=a("li"),Mue=a("strong"),Kko=o("flava"),Zko=o(" \u2014 "),cV=a("a"),eSo=o("FlavaForPreTraining"),oSo=o(" (FLAVA model)"),rSo=l(),X2=a("li"),Eue=a("strong"),tSo=o("fnet"),aSo=o(" \u2014 "),mV=a("a"),nSo=o("FNetForPreTraining"),sSo=o(" (FNet model)"),lSo=l(),z2=a("li"),Cue=a("strong"),iSo=o("fsmt"),dSo=o(" \u2014 "),fV=a("a"),cSo=o("FSMTForConditionalGeneration"),mSo=o(" (FairSeq Machine-Translation model)"),fSo=l(),W2=a("li"),wue=a("strong"),gSo=o("funnel"),hSo=o(" \u2014 "),gV=a("a"),uSo=o("FunnelForPreTraining"),pSo=o(" (Funnel Transformer model)"),_So=l(),Q2=a("li"),Aue=a("strong"),bSo=o("gpt2"),vSo=o(" \u2014 "),hV=a("a"),FSo=o("GPT2LMHeadModel"),TSo=o(" (OpenAI GPT-2 model)"),MSo=l(),U2=a("li"),Lue=a("strong"),ESo=o("ibert"),CSo=o(" \u2014 "),uV=a("a"),wSo=o("IBertForMaskedLM"),ASo=o(" (I-BERT model)"),LSo=l(),H2=a("li"),yue=a("strong"),ySo=o("layoutlm"),xSo=o(" \u2014 "),pV=a("a"),$So=o("LayoutLMForMaskedLM"),kSo=o(" (LayoutLM model)"),SSo=l(),J2=a("li"),xue=a("strong"),RSo=o("longformer"),PSo=o(" \u2014 "),_V=a("a"),BSo=o("LongformerForMaskedLM"),ISo=o(" (Longformer model)"),NSo=l(),Y2=a("li"),$ue=a("strong"),qSo=o("luke"),jSo=o(" \u2014 "),bV=a("a"),DSo=o("LukeForMaskedLM"),GSo=o(" (LUKE model)"),OSo=l(),K2=a("li"),kue=a("strong"),VSo=o("lxmert"),XSo=o(" \u2014 "),vV=a("a"),zSo=o("LxmertForPreTraining"),WSo=o(" (LXMERT model)"),QSo=l(),Z2=a("li"),Sue=a("strong"),USo=o("megatron-bert"),HSo=o(" \u2014 "),FV=a("a"),JSo=o("MegatronBertForPreTraining"),YSo=o(" (Megatron-BERT model)"),KSo=l(),eb=a("li"),Rue=a("strong"),ZSo=o("mobilebert"),eRo=o(" \u2014 "),TV=a("a"),oRo=o("MobileBertForPreTraining"),rRo=o(" (MobileBERT model)"),tRo=l(),ob=a("li"),Pue=a("strong"),aRo=o("mpnet"),nRo=o(" \u2014 "),MV=a("a"),sRo=o("MPNetForMaskedLM"),lRo=o(" (MPNet model)"),iRo=l(),rb=a("li"),Bue=a("strong"),dRo=o("mvp"),cRo=o(" \u2014 "),EV=a("a"),mRo=o("MvpForConditionalGeneration"),fRo=o(" (MVP model)"),gRo=l(),tb=a("li"),Iue=a("strong"),hRo=o("nezha"),uRo=o(" \u2014 "),CV=a("a"),pRo=o("NezhaForPreTraining"),_Ro=o(" (Nezha model)"),bRo=l(),ab=a("li"),Nue=a("strong"),vRo=o("openai-gpt"),FRo=o(" \u2014 "),wV=a("a"),TRo=o("OpenAIGPTLMHeadModel"),MRo=o(" (OpenAI GPT model)"),ERo=l(),nb=a("li"),que=a("strong"),CRo=o("retribert"),wRo=o(" \u2014 "),AV=a("a"),ARo=o("RetriBertModel"),LRo=o(" (RetriBERT model)"),yRo=l(),sb=a("li"),jue=a("strong"),xRo=o("roberta"),$Ro=o(" \u2014 "),LV=a("a"),kRo=o("RobertaForMaskedLM"),SRo=o(" (RoBERTa model)"),RRo=l(),lb=a("li"),Due=a("strong"),PRo=o("splinter"),BRo=o(" \u2014 "),yV=a("a"),IRo=o("SplinterForPreTraining"),NRo=o(" (Splinter model)"),qRo=l(),ib=a("li"),Gue=a("strong"),jRo=o("squeezebert"),DRo=o(" \u2014 "),xV=a("a"),GRo=o("SqueezeBertForMaskedLM"),ORo=o(" (SqueezeBERT model)"),VRo=l(),db=a("li"),Oue=a("strong"),XRo=o("t5"),zRo=o(" \u2014 "),$V=a("a"),WRo=o("T5ForConditionalGeneration"),QRo=o(" (T5 model)"),URo=l(),cb=a("li"),Vue=a("strong"),HRo=o("tapas"),JRo=o(" \u2014 "),kV=a("a"),YRo=o("TapasForMaskedLM"),KRo=o(" (TAPAS model)"),ZRo=l(),mb=a("li"),Xue=a("strong"),ePo=o("transfo-xl"),oPo=o(" \u2014 "),SV=a("a"),rPo=o("TransfoXLLMHeadModel"),tPo=o(" (Transformer-XL model)"),aPo=l(),fb=a("li"),zue=a("strong"),nPo=o("unispeech"),sPo=o(" \u2014 "),RV=a("a"),lPo=o("UniSpeechForPreTraining"),iPo=o(" (UniSpeech model)"),dPo=l(),gb=a("li"),Wue=a("strong"),cPo=o("unispeech-sat"),mPo=o(" \u2014 "),PV=a("a"),fPo=o("UniSpeechSatForPreTraining"),gPo=o(" (UniSpeechSat model)"),hPo=l(),hb=a("li"),Que=a("strong"),uPo=o("videomae"),pPo=o(" \u2014 "),BV=a("a"),_Po=o("VideoMAEForPreTraining"),bPo=o(" (VideoMAE model)"),vPo=l(),ub=a("li"),Uue=a("strong"),FPo=o("visual_bert"),TPo=o(" \u2014 "),IV=a("a"),MPo=o("VisualBertForPreTraining"),EPo=o(" (VisualBERT model)"),CPo=l(),pb=a("li"),Hue=a("strong"),wPo=o("vit_mae"),APo=o(" \u2014 "),NV=a("a"),LPo=o("ViTMAEForPreTraining"),yPo=o(" (ViTMAE model)"),xPo=l(),_b=a("li"),Jue=a("strong"),$Po=o("wav2vec2"),kPo=o(" \u2014 "),qV=a("a"),SPo=o("Wav2Vec2ForPreTraining"),RPo=o(" (Wav2Vec2 model)"),PPo=l(),bb=a("li"),Yue=a("strong"),BPo=o("wav2vec2-conformer"),IPo=o(" \u2014 "),jV=a("a"),NPo=o("Wav2Vec2ConformerForPreTraining"),qPo=o(" (Wav2Vec2-Conformer model)"),jPo=l(),vb=a("li"),Kue=a("strong"),DPo=o("xlm"),GPo=o(" \u2014 "),DV=a("a"),OPo=o("XLMWithLMHeadModel"),VPo=o(" (XLM model)"),XPo=l(),Fb=a("li"),Zue=a("strong"),zPo=o("xlm-roberta"),WPo=o(" \u2014 "),GV=a("a"),QPo=o("XLMRobertaForMaskedLM"),UPo=o(" (XLM-RoBERTa model)"),HPo=l(),Tb=a("li"),epe=a("strong"),JPo=o("xlm-roberta-xl"),YPo=o(" \u2014 "),OV=a("a"),KPo=o("XLMRobertaXLForMaskedLM"),ZPo=o(" (XLM-RoBERTa-XL model)"),eBo=l(),Mb=a("li"),ope=a("strong"),oBo=o("xlnet"),rBo=o(" \u2014 "),VV=a("a"),tBo=o("XLNetLMHeadModel"),aBo=o(" (XLNet model)"),nBo=l(),Eb=a("p"),sBo=o("The model is set in evaluation mode by default using "),rpe=a("code"),lBo=o("model.eval()"),iBo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tpe=a("code"),dBo=o("model.train()"),cBo=l(),F(Cb.$$.fragment),LUe=l(),id=a("h2"),wb=a("a"),ape=a("span"),F(o9.$$.fragment),mBo=l(),npe=a("span"),fBo=o("AutoModelForCausalLM"),yUe=l(),Po=a("div"),F(r9.$$.fragment),gBo=l(),dd=a("p"),hBo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),XV=a("a"),uBo=o("from_pretrained()"),pBo=o(" class method or the "),zV=a("a"),_Bo=o("from_config()"),bBo=o(` class
method.`),vBo=l(),t9=a("p"),FBo=o("This class cannot be instantiated directly using "),spe=a("code"),TBo=o("__init__()"),MBo=o(" (throws an error)."),EBo=l(),ht=a("div"),F(a9.$$.fragment),CBo=l(),lpe=a("p"),wBo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),ABo=l(),cd=a("p"),LBo=o(`Note:
Loading a model from its configuration file does `),ipe=a("strong"),yBo=o("not"),xBo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WV=a("a"),$Bo=o("from_pretrained()"),kBo=o(" to load the model weights."),SBo=l(),F(Ab.$$.fragment),RBo=l(),Ze=a("div"),F(n9.$$.fragment),PBo=l(),dpe=a("p"),BBo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),IBo=l(),za=a("p"),NBo=o("The model class to instantiate is selected based on the "),cpe=a("code"),qBo=o("model_type"),jBo=o(` property of the config object (either
passed as an argument or loaded from `),mpe=a("code"),DBo=o("pretrained_model_name_or_path"),GBo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fpe=a("code"),OBo=o("pretrained_model_name_or_path"),VBo=o(":"),XBo=l(),z=a("ul"),Lb=a("li"),gpe=a("strong"),zBo=o("bart"),WBo=o(" \u2014 "),QV=a("a"),QBo=o("BartForCausalLM"),UBo=o(" (BART model)"),HBo=l(),yb=a("li"),hpe=a("strong"),JBo=o("bert"),YBo=o(" \u2014 "),UV=a("a"),KBo=o("BertLMHeadModel"),ZBo=o(" (BERT model)"),eIo=l(),xb=a("li"),upe=a("strong"),oIo=o("bert-generation"),rIo=o(" \u2014 "),HV=a("a"),tIo=o("BertGenerationDecoder"),aIo=o(" (Bert Generation model)"),nIo=l(),$b=a("li"),ppe=a("strong"),sIo=o("big_bird"),lIo=o(" \u2014 "),JV=a("a"),iIo=o("BigBirdForCausalLM"),dIo=o(" (BigBird model)"),cIo=l(),kb=a("li"),_pe=a("strong"),mIo=o("bigbird_pegasus"),fIo=o(" \u2014 "),YV=a("a"),gIo=o("BigBirdPegasusForCausalLM"),hIo=o(" (BigBird-Pegasus model)"),uIo=l(),Sb=a("li"),bpe=a("strong"),pIo=o("blenderbot"),_Io=o(" \u2014 "),KV=a("a"),bIo=o("BlenderbotForCausalLM"),vIo=o(" (Blenderbot model)"),FIo=l(),Rb=a("li"),vpe=a("strong"),TIo=o("blenderbot-small"),MIo=o(" \u2014 "),ZV=a("a"),EIo=o("BlenderbotSmallForCausalLM"),CIo=o(" (BlenderbotSmall model)"),wIo=l(),Pb=a("li"),Fpe=a("strong"),AIo=o("bloom"),LIo=o(" \u2014 "),eX=a("a"),yIo=o("BloomForCausalLM"),xIo=o(" (BLOOM model)"),$Io=l(),Bb=a("li"),Tpe=a("strong"),kIo=o("camembert"),SIo=o(" \u2014 "),oX=a("a"),RIo=o("CamembertForCausalLM"),PIo=o(" (CamemBERT model)"),BIo=l(),Ib=a("li"),Mpe=a("strong"),IIo=o("codegen"),NIo=o(" \u2014 "),rX=a("a"),qIo=o("CodeGenForCausalLM"),jIo=o(" (CodeGen model)"),DIo=l(),Nb=a("li"),Epe=a("strong"),GIo=o("ctrl"),OIo=o(" \u2014 "),tX=a("a"),VIo=o("CTRLLMHeadModel"),XIo=o(" (CTRL model)"),zIo=l(),qb=a("li"),Cpe=a("strong"),WIo=o("data2vec-text"),QIo=o(" \u2014 "),aX=a("a"),UIo=o("Data2VecTextForCausalLM"),HIo=o(" (Data2VecText model)"),JIo=l(),jb=a("li"),wpe=a("strong"),YIo=o("electra"),KIo=o(" \u2014 "),nX=a("a"),ZIo=o("ElectraForCausalLM"),eNo=o(" (ELECTRA model)"),oNo=l(),Db=a("li"),Ape=a("strong"),rNo=o("gpt2"),tNo=o(" \u2014 "),sX=a("a"),aNo=o("GPT2LMHeadModel"),nNo=o(" (OpenAI GPT-2 model)"),sNo=l(),Gb=a("li"),Lpe=a("strong"),lNo=o("gpt_neo"),iNo=o(" \u2014 "),lX=a("a"),dNo=o("GPTNeoForCausalLM"),cNo=o(" (GPT Neo model)"),mNo=l(),Ob=a("li"),ype=a("strong"),fNo=o("gpt_neox"),gNo=o(" \u2014 "),iX=a("a"),hNo=o("GPTNeoXForCausalLM"),uNo=o(" (GPT NeoX model)"),pNo=l(),Vb=a("li"),xpe=a("strong"),_No=o("gptj"),bNo=o(" \u2014 "),dX=a("a"),vNo=o("GPTJForCausalLM"),FNo=o(" (GPT-J model)"),TNo=l(),Xb=a("li"),$pe=a("strong"),MNo=o("marian"),ENo=o(" \u2014 "),cX=a("a"),CNo=o("MarianForCausalLM"),wNo=o(" (Marian model)"),ANo=l(),zb=a("li"),kpe=a("strong"),LNo=o("mbart"),yNo=o(" \u2014 "),mX=a("a"),xNo=o("MBartForCausalLM"),$No=o(" (mBART model)"),kNo=l(),Wb=a("li"),Spe=a("strong"),SNo=o("megatron-bert"),RNo=o(" \u2014 "),fX=a("a"),PNo=o("MegatronBertForCausalLM"),BNo=o(" (Megatron-BERT model)"),INo=l(),Qb=a("li"),Rpe=a("strong"),NNo=o("mvp"),qNo=o(" \u2014 "),gX=a("a"),jNo=o("MvpForCausalLM"),DNo=o(" (MVP model)"),GNo=l(),Ub=a("li"),Ppe=a("strong"),ONo=o("openai-gpt"),VNo=o(" \u2014 "),hX=a("a"),XNo=o("OpenAIGPTLMHeadModel"),zNo=o(" (OpenAI GPT model)"),WNo=l(),Hb=a("li"),Bpe=a("strong"),QNo=o("opt"),UNo=o(" \u2014 "),uX=a("a"),HNo=o("OPTForCausalLM"),JNo=o(" (OPT model)"),YNo=l(),Jb=a("li"),Ipe=a("strong"),KNo=o("pegasus"),ZNo=o(" \u2014 "),pX=a("a"),eqo=o("PegasusForCausalLM"),oqo=o(" (Pegasus model)"),rqo=l(),Yb=a("li"),Npe=a("strong"),tqo=o("plbart"),aqo=o(" \u2014 "),_X=a("a"),nqo=o("PLBartForCausalLM"),sqo=o(" (PLBart model)"),lqo=l(),Kb=a("li"),qpe=a("strong"),iqo=o("prophetnet"),dqo=o(" \u2014 "),bX=a("a"),cqo=o("ProphetNetForCausalLM"),mqo=o(" (ProphetNet model)"),fqo=l(),Zb=a("li"),jpe=a("strong"),gqo=o("qdqbert"),hqo=o(" \u2014 "),vX=a("a"),uqo=o("QDQBertLMHeadModel"),pqo=o(" (QDQBert model)"),_qo=l(),ev=a("li"),Dpe=a("strong"),bqo=o("reformer"),vqo=o(" \u2014 "),FX=a("a"),Fqo=o("ReformerModelWithLMHead"),Tqo=o(" (Reformer model)"),Mqo=l(),ov=a("li"),Gpe=a("strong"),Eqo=o("rembert"),Cqo=o(" \u2014 "),TX=a("a"),wqo=o("RemBertForCausalLM"),Aqo=o(" (RemBERT model)"),Lqo=l(),rv=a("li"),Ope=a("strong"),yqo=o("roberta"),xqo=o(" \u2014 "),MX=a("a"),$qo=o("RobertaForCausalLM"),kqo=o(" (RoBERTa model)"),Sqo=l(),tv=a("li"),Vpe=a("strong"),Rqo=o("roformer"),Pqo=o(" \u2014 "),EX=a("a"),Bqo=o("RoFormerForCausalLM"),Iqo=o(" (RoFormer model)"),Nqo=l(),av=a("li"),Xpe=a("strong"),qqo=o("speech_to_text_2"),jqo=o(" \u2014 "),CX=a("a"),Dqo=o("Speech2Text2ForCausalLM"),Gqo=o(" (Speech2Text2 model)"),Oqo=l(),nv=a("li"),zpe=a("strong"),Vqo=o("transfo-xl"),Xqo=o(" \u2014 "),wX=a("a"),zqo=o("TransfoXLLMHeadModel"),Wqo=o(" (Transformer-XL model)"),Qqo=l(),sv=a("li"),Wpe=a("strong"),Uqo=o("trocr"),Hqo=o(" \u2014 "),AX=a("a"),Jqo=o("TrOCRForCausalLM"),Yqo=o(" (TrOCR model)"),Kqo=l(),lv=a("li"),Qpe=a("strong"),Zqo=o("xglm"),ejo=o(" \u2014 "),LX=a("a"),ojo=o("XGLMForCausalLM"),rjo=o(" (XGLM model)"),tjo=l(),iv=a("li"),Upe=a("strong"),ajo=o("xlm"),njo=o(" \u2014 "),yX=a("a"),sjo=o("XLMWithLMHeadModel"),ljo=o(" (XLM model)"),ijo=l(),dv=a("li"),Hpe=a("strong"),djo=o("xlm-prophetnet"),cjo=o(" \u2014 "),xX=a("a"),mjo=o("XLMProphetNetForCausalLM"),fjo=o(" (XLM-ProphetNet model)"),gjo=l(),cv=a("li"),Jpe=a("strong"),hjo=o("xlm-roberta"),ujo=o(" \u2014 "),$X=a("a"),pjo=o("XLMRobertaForCausalLM"),_jo=o(" (XLM-RoBERTa model)"),bjo=l(),mv=a("li"),Ype=a("strong"),vjo=o("xlm-roberta-xl"),Fjo=o(" \u2014 "),kX=a("a"),Tjo=o("XLMRobertaXLForCausalLM"),Mjo=o(" (XLM-RoBERTa-XL model)"),Ejo=l(),fv=a("li"),Kpe=a("strong"),Cjo=o("xlnet"),wjo=o(" \u2014 "),SX=a("a"),Ajo=o("XLNetLMHeadModel"),Ljo=o(" (XLNet model)"),yjo=l(),gv=a("p"),xjo=o("The model is set in evaluation mode by default using "),Zpe=a("code"),$jo=o("model.eval()"),kjo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),e_e=a("code"),Sjo=o("model.train()"),Rjo=l(),F(hv.$$.fragment),xUe=l(),md=a("h2"),uv=a("a"),o_e=a("span"),F(s9.$$.fragment),Pjo=l(),r_e=a("span"),Bjo=o("AutoModelForMaskedLM"),$Ue=l(),Bo=a("div"),F(l9.$$.fragment),Ijo=l(),fd=a("p"),Njo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),RX=a("a"),qjo=o("from_pretrained()"),jjo=o(" class method or the "),PX=a("a"),Djo=o("from_config()"),Gjo=o(` class
method.`),Ojo=l(),i9=a("p"),Vjo=o("This class cannot be instantiated directly using "),t_e=a("code"),Xjo=o("__init__()"),zjo=o(" (throws an error)."),Wjo=l(),ut=a("div"),F(d9.$$.fragment),Qjo=l(),a_e=a("p"),Ujo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Hjo=l(),gd=a("p"),Jjo=o(`Note:
Loading a model from its configuration file does `),n_e=a("strong"),Yjo=o("not"),Kjo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BX=a("a"),Zjo=o("from_pretrained()"),eDo=o(" to load the model weights."),oDo=l(),F(pv.$$.fragment),rDo=l(),eo=a("div"),F(c9.$$.fragment),tDo=l(),s_e=a("p"),aDo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),nDo=l(),Wa=a("p"),sDo=o("The model class to instantiate is selected based on the "),l_e=a("code"),lDo=o("model_type"),iDo=o(` property of the config object (either
passed as an argument or loaded from `),i_e=a("code"),dDo=o("pretrained_model_name_or_path"),cDo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d_e=a("code"),mDo=o("pretrained_model_name_or_path"),fDo=o(":"),gDo=l(),U=a("ul"),_v=a("li"),c_e=a("strong"),hDo=o("albert"),uDo=o(" \u2014 "),IX=a("a"),pDo=o("AlbertForMaskedLM"),_Do=o(" (ALBERT model)"),bDo=l(),bv=a("li"),m_e=a("strong"),vDo=o("bart"),FDo=o(" \u2014 "),NX=a("a"),TDo=o("BartForConditionalGeneration"),MDo=o(" (BART model)"),EDo=l(),vv=a("li"),f_e=a("strong"),CDo=o("bert"),wDo=o(" \u2014 "),qX=a("a"),ADo=o("BertForMaskedLM"),LDo=o(" (BERT model)"),yDo=l(),Fv=a("li"),g_e=a("strong"),xDo=o("big_bird"),$Do=o(" \u2014 "),jX=a("a"),kDo=o("BigBirdForMaskedLM"),SDo=o(" (BigBird model)"),RDo=l(),Tv=a("li"),h_e=a("strong"),PDo=o("camembert"),BDo=o(" \u2014 "),DX=a("a"),IDo=o("CamembertForMaskedLM"),NDo=o(" (CamemBERT model)"),qDo=l(),Mv=a("li"),u_e=a("strong"),jDo=o("convbert"),DDo=o(" \u2014 "),GX=a("a"),GDo=o("ConvBertForMaskedLM"),ODo=o(" (ConvBERT model)"),VDo=l(),Ev=a("li"),p_e=a("strong"),XDo=o("data2vec-text"),zDo=o(" \u2014 "),OX=a("a"),WDo=o("Data2VecTextForMaskedLM"),QDo=o(" (Data2VecText model)"),UDo=l(),Cv=a("li"),__e=a("strong"),HDo=o("deberta"),JDo=o(" \u2014 "),VX=a("a"),YDo=o("DebertaForMaskedLM"),KDo=o(" (DeBERTa model)"),ZDo=l(),wv=a("li"),b_e=a("strong"),eGo=o("deberta-v2"),oGo=o(" \u2014 "),XX=a("a"),rGo=o("DebertaV2ForMaskedLM"),tGo=o(" (DeBERTa-v2 model)"),aGo=l(),Av=a("li"),v_e=a("strong"),nGo=o("distilbert"),sGo=o(" \u2014 "),zX=a("a"),lGo=o("DistilBertForMaskedLM"),iGo=o(" (DistilBERT model)"),dGo=l(),Lv=a("li"),F_e=a("strong"),cGo=o("electra"),mGo=o(" \u2014 "),WX=a("a"),fGo=o("ElectraForMaskedLM"),gGo=o(" (ELECTRA model)"),hGo=l(),yv=a("li"),T_e=a("strong"),uGo=o("flaubert"),pGo=o(" \u2014 "),QX=a("a"),_Go=o("FlaubertWithLMHeadModel"),bGo=o(" (FlauBERT model)"),vGo=l(),xv=a("li"),M_e=a("strong"),FGo=o("fnet"),TGo=o(" \u2014 "),UX=a("a"),MGo=o("FNetForMaskedLM"),EGo=o(" (FNet model)"),CGo=l(),$v=a("li"),E_e=a("strong"),wGo=o("funnel"),AGo=o(" \u2014 "),HX=a("a"),LGo=o("FunnelForMaskedLM"),yGo=o(" (Funnel Transformer model)"),xGo=l(),kv=a("li"),C_e=a("strong"),$Go=o("ibert"),kGo=o(" \u2014 "),JX=a("a"),SGo=o("IBertForMaskedLM"),RGo=o(" (I-BERT model)"),PGo=l(),Sv=a("li"),w_e=a("strong"),BGo=o("layoutlm"),IGo=o(" \u2014 "),YX=a("a"),NGo=o("LayoutLMForMaskedLM"),qGo=o(" (LayoutLM model)"),jGo=l(),Rv=a("li"),A_e=a("strong"),DGo=o("longformer"),GGo=o(" \u2014 "),KX=a("a"),OGo=o("LongformerForMaskedLM"),VGo=o(" (Longformer model)"),XGo=l(),Pv=a("li"),L_e=a("strong"),zGo=o("luke"),WGo=o(" \u2014 "),ZX=a("a"),QGo=o("LukeForMaskedLM"),UGo=o(" (LUKE model)"),HGo=l(),Bv=a("li"),y_e=a("strong"),JGo=o("mbart"),YGo=o(" \u2014 "),ez=a("a"),KGo=o("MBartForConditionalGeneration"),ZGo=o(" (mBART model)"),eOo=l(),Iv=a("li"),x_e=a("strong"),oOo=o("megatron-bert"),rOo=o(" \u2014 "),oz=a("a"),tOo=o("MegatronBertForMaskedLM"),aOo=o(" (Megatron-BERT model)"),nOo=l(),Nv=a("li"),$_e=a("strong"),sOo=o("mobilebert"),lOo=o(" \u2014 "),rz=a("a"),iOo=o("MobileBertForMaskedLM"),dOo=o(" (MobileBERT model)"),cOo=l(),qv=a("li"),k_e=a("strong"),mOo=o("mpnet"),fOo=o(" \u2014 "),tz=a("a"),gOo=o("MPNetForMaskedLM"),hOo=o(" (MPNet model)"),uOo=l(),jv=a("li"),S_e=a("strong"),pOo=o("mvp"),_Oo=o(" \u2014 "),az=a("a"),bOo=o("MvpForConditionalGeneration"),vOo=o(" (MVP model)"),FOo=l(),Dv=a("li"),R_e=a("strong"),TOo=o("nezha"),MOo=o(" \u2014 "),nz=a("a"),EOo=o("NezhaForMaskedLM"),COo=o(" (Nezha model)"),wOo=l(),Gv=a("li"),P_e=a("strong"),AOo=o("nystromformer"),LOo=o(" \u2014 "),sz=a("a"),yOo=o("NystromformerForMaskedLM"),xOo=o(" (Nystr\xF6mformer model)"),$Oo=l(),Ov=a("li"),B_e=a("strong"),kOo=o("perceiver"),SOo=o(" \u2014 "),lz=a("a"),ROo=o("PerceiverForMaskedLM"),POo=o(" (Perceiver model)"),BOo=l(),Vv=a("li"),I_e=a("strong"),IOo=o("qdqbert"),NOo=o(" \u2014 "),iz=a("a"),qOo=o("QDQBertForMaskedLM"),jOo=o(" (QDQBert model)"),DOo=l(),Xv=a("li"),N_e=a("strong"),GOo=o("reformer"),OOo=o(" \u2014 "),dz=a("a"),VOo=o("ReformerForMaskedLM"),XOo=o(" (Reformer model)"),zOo=l(),zv=a("li"),q_e=a("strong"),WOo=o("rembert"),QOo=o(" \u2014 "),cz=a("a"),UOo=o("RemBertForMaskedLM"),HOo=o(" (RemBERT model)"),JOo=l(),Wv=a("li"),j_e=a("strong"),YOo=o("roberta"),KOo=o(" \u2014 "),mz=a("a"),ZOo=o("RobertaForMaskedLM"),eVo=o(" (RoBERTa model)"),oVo=l(),Qv=a("li"),D_e=a("strong"),rVo=o("roformer"),tVo=o(" \u2014 "),fz=a("a"),aVo=o("RoFormerForMaskedLM"),nVo=o(" (RoFormer model)"),sVo=l(),Uv=a("li"),G_e=a("strong"),lVo=o("squeezebert"),iVo=o(" \u2014 "),gz=a("a"),dVo=o("SqueezeBertForMaskedLM"),cVo=o(" (SqueezeBERT model)"),mVo=l(),Hv=a("li"),O_e=a("strong"),fVo=o("tapas"),gVo=o(" \u2014 "),hz=a("a"),hVo=o("TapasForMaskedLM"),uVo=o(" (TAPAS model)"),pVo=l(),Jv=a("li"),V_e=a("strong"),_Vo=o("wav2vec2"),bVo=o(" \u2014 "),X_e=a("code"),vVo=o("Wav2Vec2ForMaskedLM"),FVo=o(" (Wav2Vec2 model)"),TVo=l(),Yv=a("li"),z_e=a("strong"),MVo=o("xlm"),EVo=o(" \u2014 "),uz=a("a"),CVo=o("XLMWithLMHeadModel"),wVo=o(" (XLM model)"),AVo=l(),Kv=a("li"),W_e=a("strong"),LVo=o("xlm-roberta"),yVo=o(" \u2014 "),pz=a("a"),xVo=o("XLMRobertaForMaskedLM"),$Vo=o(" (XLM-RoBERTa model)"),kVo=l(),Zv=a("li"),Q_e=a("strong"),SVo=o("xlm-roberta-xl"),RVo=o(" \u2014 "),_z=a("a"),PVo=o("XLMRobertaXLForMaskedLM"),BVo=o(" (XLM-RoBERTa-XL model)"),IVo=l(),e1=a("li"),U_e=a("strong"),NVo=o("yoso"),qVo=o(" \u2014 "),bz=a("a"),jVo=o("YosoForMaskedLM"),DVo=o(" (YOSO model)"),GVo=l(),o1=a("p"),OVo=o("The model is set in evaluation mode by default using "),H_e=a("code"),VVo=o("model.eval()"),XVo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),J_e=a("code"),zVo=o("model.train()"),WVo=l(),F(r1.$$.fragment),kUe=l(),hd=a("h2"),t1=a("a"),Y_e=a("span"),F(m9.$$.fragment),QVo=l(),K_e=a("span"),UVo=o("AutoModelForSeq2SeqLM"),SUe=l(),Io=a("div"),F(f9.$$.fragment),HVo=l(),ud=a("p"),JVo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),vz=a("a"),YVo=o("from_pretrained()"),KVo=o(" class method or the "),Fz=a("a"),ZVo=o("from_config()"),eXo=o(` class
method.`),oXo=l(),g9=a("p"),rXo=o("This class cannot be instantiated directly using "),Z_e=a("code"),tXo=o("__init__()"),aXo=o(" (throws an error)."),nXo=l(),pt=a("div"),F(h9.$$.fragment),sXo=l(),e2e=a("p"),lXo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),iXo=l(),pd=a("p"),dXo=o(`Note:
Loading a model from its configuration file does `),o2e=a("strong"),cXo=o("not"),mXo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Tz=a("a"),fXo=o("from_pretrained()"),gXo=o(" to load the model weights."),hXo=l(),F(a1.$$.fragment),uXo=l(),oo=a("div"),F(u9.$$.fragment),pXo=l(),r2e=a("p"),_Xo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),bXo=l(),Qa=a("p"),vXo=o("The model class to instantiate is selected based on the "),t2e=a("code"),FXo=o("model_type"),TXo=o(` property of the config object (either
passed as an argument or loaded from `),a2e=a("code"),MXo=o("pretrained_model_name_or_path"),EXo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n2e=a("code"),CXo=o("pretrained_model_name_or_path"),wXo=o(":"),AXo=l(),he=a("ul"),n1=a("li"),s2e=a("strong"),LXo=o("bart"),yXo=o(" \u2014 "),Mz=a("a"),xXo=o("BartForConditionalGeneration"),$Xo=o(" (BART model)"),kXo=l(),s1=a("li"),l2e=a("strong"),SXo=o("bigbird_pegasus"),RXo=o(" \u2014 "),Ez=a("a"),PXo=o("BigBirdPegasusForConditionalGeneration"),BXo=o(" (BigBird-Pegasus model)"),IXo=l(),l1=a("li"),i2e=a("strong"),NXo=o("blenderbot"),qXo=o(" \u2014 "),Cz=a("a"),jXo=o("BlenderbotForConditionalGeneration"),DXo=o(" (Blenderbot model)"),GXo=l(),i1=a("li"),d2e=a("strong"),OXo=o("blenderbot-small"),VXo=o(" \u2014 "),wz=a("a"),XXo=o("BlenderbotSmallForConditionalGeneration"),zXo=o(" (BlenderbotSmall model)"),WXo=l(),d1=a("li"),c2e=a("strong"),QXo=o("encoder-decoder"),UXo=o(" \u2014 "),Az=a("a"),HXo=o("EncoderDecoderModel"),JXo=o(" (Encoder decoder model)"),YXo=l(),c1=a("li"),m2e=a("strong"),KXo=o("fsmt"),ZXo=o(" \u2014 "),Lz=a("a"),ezo=o("FSMTForConditionalGeneration"),ozo=o(" (FairSeq Machine-Translation model)"),rzo=l(),m1=a("li"),f2e=a("strong"),tzo=o("led"),azo=o(" \u2014 "),yz=a("a"),nzo=o("LEDForConditionalGeneration"),szo=o(" (LED model)"),lzo=l(),f1=a("li"),g2e=a("strong"),izo=o("longt5"),dzo=o(" \u2014 "),xz=a("a"),czo=o("LongT5ForConditionalGeneration"),mzo=o(" (LongT5 model)"),fzo=l(),g1=a("li"),h2e=a("strong"),gzo=o("m2m_100"),hzo=o(" \u2014 "),$z=a("a"),uzo=o("M2M100ForConditionalGeneration"),pzo=o(" (M2M100 model)"),_zo=l(),h1=a("li"),u2e=a("strong"),bzo=o("marian"),vzo=o(" \u2014 "),kz=a("a"),Fzo=o("MarianMTModel"),Tzo=o(" (Marian model)"),Mzo=l(),u1=a("li"),p2e=a("strong"),Ezo=o("mbart"),Czo=o(" \u2014 "),Sz=a("a"),wzo=o("MBartForConditionalGeneration"),Azo=o(" (mBART model)"),Lzo=l(),p1=a("li"),_2e=a("strong"),yzo=o("mt5"),xzo=o(" \u2014 "),Rz=a("a"),$zo=o("MT5ForConditionalGeneration"),kzo=o(" (MT5 model)"),Szo=l(),_1=a("li"),b2e=a("strong"),Rzo=o("mvp"),Pzo=o(" \u2014 "),Pz=a("a"),Bzo=o("MvpForConditionalGeneration"),Izo=o(" (MVP model)"),Nzo=l(),b1=a("li"),v2e=a("strong"),qzo=o("nllb"),jzo=o(" \u2014 "),Bz=a("a"),Dzo=o("M2M100ForConditionalGeneration"),Gzo=o(" (NLLB model)"),Ozo=l(),v1=a("li"),F2e=a("strong"),Vzo=o("pegasus"),Xzo=o(" \u2014 "),Iz=a("a"),zzo=o("PegasusForConditionalGeneration"),Wzo=o(" (Pegasus model)"),Qzo=l(),F1=a("li"),T2e=a("strong"),Uzo=o("plbart"),Hzo=o(" \u2014 "),Nz=a("a"),Jzo=o("PLBartForConditionalGeneration"),Yzo=o(" (PLBart model)"),Kzo=l(),T1=a("li"),M2e=a("strong"),Zzo=o("prophetnet"),eWo=o(" \u2014 "),qz=a("a"),oWo=o("ProphetNetForConditionalGeneration"),rWo=o(" (ProphetNet model)"),tWo=l(),M1=a("li"),E2e=a("strong"),aWo=o("t5"),nWo=o(" \u2014 "),jz=a("a"),sWo=o("T5ForConditionalGeneration"),lWo=o(" (T5 model)"),iWo=l(),E1=a("li"),C2e=a("strong"),dWo=o("xlm-prophetnet"),cWo=o(" \u2014 "),Dz=a("a"),mWo=o("XLMProphetNetForConditionalGeneration"),fWo=o(" (XLM-ProphetNet model)"),gWo=l(),C1=a("p"),hWo=o("The model is set in evaluation mode by default using "),w2e=a("code"),uWo=o("model.eval()"),pWo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),A2e=a("code"),_Wo=o("model.train()"),bWo=l(),F(w1.$$.fragment),RUe=l(),_d=a("h2"),A1=a("a"),L2e=a("span"),F(p9.$$.fragment),vWo=l(),y2e=a("span"),FWo=o("AutoModelForSequenceClassification"),PUe=l(),No=a("div"),F(_9.$$.fragment),TWo=l(),bd=a("p"),MWo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Gz=a("a"),EWo=o("from_pretrained()"),CWo=o(" class method or the "),Oz=a("a"),wWo=o("from_config()"),AWo=o(` class
method.`),LWo=l(),b9=a("p"),yWo=o("This class cannot be instantiated directly using "),x2e=a("code"),xWo=o("__init__()"),$Wo=o(" (throws an error)."),kWo=l(),_t=a("div"),F(v9.$$.fragment),SWo=l(),$2e=a("p"),RWo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),PWo=l(),vd=a("p"),BWo=o(`Note:
Loading a model from its configuration file does `),k2e=a("strong"),IWo=o("not"),NWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Vz=a("a"),qWo=o("from_pretrained()"),jWo=o(" to load the model weights."),DWo=l(),F(L1.$$.fragment),GWo=l(),ro=a("div"),F(F9.$$.fragment),OWo=l(),S2e=a("p"),VWo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),XWo=l(),Ua=a("p"),zWo=o("The model class to instantiate is selected based on the "),R2e=a("code"),WWo=o("model_type"),QWo=o(` property of the config object (either
passed as an argument or loaded from `),P2e=a("code"),UWo=o("pretrained_model_name_or_path"),HWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B2e=a("code"),JWo=o("pretrained_model_name_or_path"),YWo=o(":"),KWo=l(),q=a("ul"),y1=a("li"),I2e=a("strong"),ZWo=o("albert"),eQo=o(" \u2014 "),Xz=a("a"),oQo=o("AlbertForSequenceClassification"),rQo=o(" (ALBERT model)"),tQo=l(),x1=a("li"),N2e=a("strong"),aQo=o("bart"),nQo=o(" \u2014 "),zz=a("a"),sQo=o("BartForSequenceClassification"),lQo=o(" (BART model)"),iQo=l(),$1=a("li"),q2e=a("strong"),dQo=o("bert"),cQo=o(" \u2014 "),Wz=a("a"),mQo=o("BertForSequenceClassification"),fQo=o(" (BERT model)"),gQo=l(),k1=a("li"),j2e=a("strong"),hQo=o("big_bird"),uQo=o(" \u2014 "),Qz=a("a"),pQo=o("BigBirdForSequenceClassification"),_Qo=o(" (BigBird model)"),bQo=l(),S1=a("li"),D2e=a("strong"),vQo=o("bigbird_pegasus"),FQo=o(" \u2014 "),Uz=a("a"),TQo=o("BigBirdPegasusForSequenceClassification"),MQo=o(" (BigBird-Pegasus model)"),EQo=l(),R1=a("li"),G2e=a("strong"),CQo=o("bloom"),wQo=o(" \u2014 "),Hz=a("a"),AQo=o("BloomForSequenceClassification"),LQo=o(" (BLOOM model)"),yQo=l(),P1=a("li"),O2e=a("strong"),xQo=o("camembert"),$Qo=o(" \u2014 "),Jz=a("a"),kQo=o("CamembertForSequenceClassification"),SQo=o(" (CamemBERT model)"),RQo=l(),B1=a("li"),V2e=a("strong"),PQo=o("canine"),BQo=o(" \u2014 "),Yz=a("a"),IQo=o("CanineForSequenceClassification"),NQo=o(" (CANINE model)"),qQo=l(),I1=a("li"),X2e=a("strong"),jQo=o("convbert"),DQo=o(" \u2014 "),Kz=a("a"),GQo=o("ConvBertForSequenceClassification"),OQo=o(" (ConvBERT model)"),VQo=l(),N1=a("li"),z2e=a("strong"),XQo=o("ctrl"),zQo=o(" \u2014 "),Zz=a("a"),WQo=o("CTRLForSequenceClassification"),QQo=o(" (CTRL model)"),UQo=l(),q1=a("li"),W2e=a("strong"),HQo=o("data2vec-text"),JQo=o(" \u2014 "),eW=a("a"),YQo=o("Data2VecTextForSequenceClassification"),KQo=o(" (Data2VecText model)"),ZQo=l(),j1=a("li"),Q2e=a("strong"),eUo=o("deberta"),oUo=o(" \u2014 "),oW=a("a"),rUo=o("DebertaForSequenceClassification"),tUo=o(" (DeBERTa model)"),aUo=l(),D1=a("li"),U2e=a("strong"),nUo=o("deberta-v2"),sUo=o(" \u2014 "),rW=a("a"),lUo=o("DebertaV2ForSequenceClassification"),iUo=o(" (DeBERTa-v2 model)"),dUo=l(),G1=a("li"),H2e=a("strong"),cUo=o("distilbert"),mUo=o(" \u2014 "),tW=a("a"),fUo=o("DistilBertForSequenceClassification"),gUo=o(" (DistilBERT model)"),hUo=l(),O1=a("li"),J2e=a("strong"),uUo=o("electra"),pUo=o(" \u2014 "),aW=a("a"),_Uo=o("ElectraForSequenceClassification"),bUo=o(" (ELECTRA model)"),vUo=l(),V1=a("li"),Y2e=a("strong"),FUo=o("flaubert"),TUo=o(" \u2014 "),nW=a("a"),MUo=o("FlaubertForSequenceClassification"),EUo=o(" (FlauBERT model)"),CUo=l(),X1=a("li"),K2e=a("strong"),wUo=o("fnet"),AUo=o(" \u2014 "),sW=a("a"),LUo=o("FNetForSequenceClassification"),yUo=o(" (FNet model)"),xUo=l(),z1=a("li"),Z2e=a("strong"),$Uo=o("funnel"),kUo=o(" \u2014 "),lW=a("a"),SUo=o("FunnelForSequenceClassification"),RUo=o(" (Funnel Transformer model)"),PUo=l(),W1=a("li"),ebe=a("strong"),BUo=o("gpt2"),IUo=o(" \u2014 "),iW=a("a"),NUo=o("GPT2ForSequenceClassification"),qUo=o(" (OpenAI GPT-2 model)"),jUo=l(),Q1=a("li"),obe=a("strong"),DUo=o("gpt_neo"),GUo=o(" \u2014 "),dW=a("a"),OUo=o("GPTNeoForSequenceClassification"),VUo=o(" (GPT Neo model)"),XUo=l(),U1=a("li"),rbe=a("strong"),zUo=o("gptj"),WUo=o(" \u2014 "),cW=a("a"),QUo=o("GPTJForSequenceClassification"),UUo=o(" (GPT-J model)"),HUo=l(),H1=a("li"),tbe=a("strong"),JUo=o("ibert"),YUo=o(" \u2014 "),mW=a("a"),KUo=o("IBertForSequenceClassification"),ZUo=o(" (I-BERT model)"),eHo=l(),J1=a("li"),abe=a("strong"),oHo=o("layoutlm"),rHo=o(" \u2014 "),fW=a("a"),tHo=o("LayoutLMForSequenceClassification"),aHo=o(" (LayoutLM model)"),nHo=l(),Y1=a("li"),nbe=a("strong"),sHo=o("layoutlmv2"),lHo=o(" \u2014 "),gW=a("a"),iHo=o("LayoutLMv2ForSequenceClassification"),dHo=o(" (LayoutLMv2 model)"),cHo=l(),K1=a("li"),sbe=a("strong"),mHo=o("layoutlmv3"),fHo=o(" \u2014 "),hW=a("a"),gHo=o("LayoutLMv3ForSequenceClassification"),hHo=o(" (LayoutLMv3 model)"),uHo=l(),Z1=a("li"),lbe=a("strong"),pHo=o("led"),_Ho=o(" \u2014 "),uW=a("a"),bHo=o("LEDForSequenceClassification"),vHo=o(" (LED model)"),FHo=l(),eF=a("li"),ibe=a("strong"),THo=o("longformer"),MHo=o(" \u2014 "),pW=a("a"),EHo=o("LongformerForSequenceClassification"),CHo=o(" (Longformer model)"),wHo=l(),oF=a("li"),dbe=a("strong"),AHo=o("luke"),LHo=o(" \u2014 "),_W=a("a"),yHo=o("LukeForSequenceClassification"),xHo=o(" (LUKE model)"),$Ho=l(),rF=a("li"),cbe=a("strong"),kHo=o("mbart"),SHo=o(" \u2014 "),bW=a("a"),RHo=o("MBartForSequenceClassification"),PHo=o(" (mBART model)"),BHo=l(),tF=a("li"),mbe=a("strong"),IHo=o("megatron-bert"),NHo=o(" \u2014 "),vW=a("a"),qHo=o("MegatronBertForSequenceClassification"),jHo=o(" (Megatron-BERT model)"),DHo=l(),aF=a("li"),fbe=a("strong"),GHo=o("mobilebert"),OHo=o(" \u2014 "),FW=a("a"),VHo=o("MobileBertForSequenceClassification"),XHo=o(" (MobileBERT model)"),zHo=l(),nF=a("li"),gbe=a("strong"),WHo=o("mpnet"),QHo=o(" \u2014 "),TW=a("a"),UHo=o("MPNetForSequenceClassification"),HHo=o(" (MPNet model)"),JHo=l(),sF=a("li"),hbe=a("strong"),YHo=o("mvp"),KHo=o(" \u2014 "),MW=a("a"),ZHo=o("MvpForSequenceClassification"),eJo=o(" (MVP model)"),oJo=l(),lF=a("li"),ube=a("strong"),rJo=o("nezha"),tJo=o(" \u2014 "),EW=a("a"),aJo=o("NezhaForSequenceClassification"),nJo=o(" (Nezha model)"),sJo=l(),iF=a("li"),pbe=a("strong"),lJo=o("nystromformer"),iJo=o(" \u2014 "),CW=a("a"),dJo=o("NystromformerForSequenceClassification"),cJo=o(" (Nystr\xF6mformer model)"),mJo=l(),dF=a("li"),_be=a("strong"),fJo=o("openai-gpt"),gJo=o(" \u2014 "),wW=a("a"),hJo=o("OpenAIGPTForSequenceClassification"),uJo=o(" (OpenAI GPT model)"),pJo=l(),cF=a("li"),bbe=a("strong"),_Jo=o("opt"),bJo=o(" \u2014 "),AW=a("a"),vJo=o("OPTForSequenceClassification"),FJo=o(" (OPT model)"),TJo=l(),mF=a("li"),vbe=a("strong"),MJo=o("perceiver"),EJo=o(" \u2014 "),LW=a("a"),CJo=o("PerceiverForSequenceClassification"),wJo=o(" (Perceiver model)"),AJo=l(),fF=a("li"),Fbe=a("strong"),LJo=o("plbart"),yJo=o(" \u2014 "),yW=a("a"),xJo=o("PLBartForSequenceClassification"),$Jo=o(" (PLBart model)"),kJo=l(),gF=a("li"),Tbe=a("strong"),SJo=o("qdqbert"),RJo=o(" \u2014 "),xW=a("a"),PJo=o("QDQBertForSequenceClassification"),BJo=o(" (QDQBert model)"),IJo=l(),hF=a("li"),Mbe=a("strong"),NJo=o("reformer"),qJo=o(" \u2014 "),$W=a("a"),jJo=o("ReformerForSequenceClassification"),DJo=o(" (Reformer model)"),GJo=l(),uF=a("li"),Ebe=a("strong"),OJo=o("rembert"),VJo=o(" \u2014 "),kW=a("a"),XJo=o("RemBertForSequenceClassification"),zJo=o(" (RemBERT model)"),WJo=l(),pF=a("li"),Cbe=a("strong"),QJo=o("roberta"),UJo=o(" \u2014 "),SW=a("a"),HJo=o("RobertaForSequenceClassification"),JJo=o(" (RoBERTa model)"),YJo=l(),_F=a("li"),wbe=a("strong"),KJo=o("roformer"),ZJo=o(" \u2014 "),RW=a("a"),eYo=o("RoFormerForSequenceClassification"),oYo=o(" (RoFormer model)"),rYo=l(),bF=a("li"),Abe=a("strong"),tYo=o("squeezebert"),aYo=o(" \u2014 "),PW=a("a"),nYo=o("SqueezeBertForSequenceClassification"),sYo=o(" (SqueezeBERT model)"),lYo=l(),vF=a("li"),Lbe=a("strong"),iYo=o("tapas"),dYo=o(" \u2014 "),BW=a("a"),cYo=o("TapasForSequenceClassification"),mYo=o(" (TAPAS model)"),fYo=l(),FF=a("li"),ybe=a("strong"),gYo=o("transfo-xl"),hYo=o(" \u2014 "),IW=a("a"),uYo=o("TransfoXLForSequenceClassification"),pYo=o(" (Transformer-XL model)"),_Yo=l(),TF=a("li"),xbe=a("strong"),bYo=o("xlm"),vYo=o(" \u2014 "),NW=a("a"),FYo=o("XLMForSequenceClassification"),TYo=o(" (XLM model)"),MYo=l(),MF=a("li"),$be=a("strong"),EYo=o("xlm-roberta"),CYo=o(" \u2014 "),qW=a("a"),wYo=o("XLMRobertaForSequenceClassification"),AYo=o(" (XLM-RoBERTa model)"),LYo=l(),EF=a("li"),kbe=a("strong"),yYo=o("xlm-roberta-xl"),xYo=o(" \u2014 "),jW=a("a"),$Yo=o("XLMRobertaXLForSequenceClassification"),kYo=o(" (XLM-RoBERTa-XL model)"),SYo=l(),CF=a("li"),Sbe=a("strong"),RYo=o("xlnet"),PYo=o(" \u2014 "),DW=a("a"),BYo=o("XLNetForSequenceClassification"),IYo=o(" (XLNet model)"),NYo=l(),wF=a("li"),Rbe=a("strong"),qYo=o("yoso"),jYo=o(" \u2014 "),GW=a("a"),DYo=o("YosoForSequenceClassification"),GYo=o(" (YOSO model)"),OYo=l(),AF=a("p"),VYo=o("The model is set in evaluation mode by default using "),Pbe=a("code"),XYo=o("model.eval()"),zYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Bbe=a("code"),WYo=o("model.train()"),QYo=l(),F(LF.$$.fragment),BUe=l(),Fd=a("h2"),yF=a("a"),Ibe=a("span"),F(T9.$$.fragment),UYo=l(),Nbe=a("span"),HYo=o("AutoModelForMultipleChoice"),IUe=l(),qo=a("div"),F(M9.$$.fragment),JYo=l(),Td=a("p"),YYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),OW=a("a"),KYo=o("from_pretrained()"),ZYo=o(" class method or the "),VW=a("a"),eKo=o("from_config()"),oKo=o(` class
method.`),rKo=l(),E9=a("p"),tKo=o("This class cannot be instantiated directly using "),qbe=a("code"),aKo=o("__init__()"),nKo=o(" (throws an error)."),sKo=l(),bt=a("div"),F(C9.$$.fragment),lKo=l(),jbe=a("p"),iKo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),dKo=l(),Md=a("p"),cKo=o(`Note:
Loading a model from its configuration file does `),Dbe=a("strong"),mKo=o("not"),fKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XW=a("a"),gKo=o("from_pretrained()"),hKo=o(" to load the model weights."),uKo=l(),F(xF.$$.fragment),pKo=l(),to=a("div"),F(w9.$$.fragment),_Ko=l(),Gbe=a("p"),bKo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),vKo=l(),Ha=a("p"),FKo=o("The model class to instantiate is selected based on the "),Obe=a("code"),TKo=o("model_type"),MKo=o(` property of the config object (either
passed as an argument or loaded from `),Vbe=a("code"),EKo=o("pretrained_model_name_or_path"),CKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xbe=a("code"),wKo=o("pretrained_model_name_or_path"),AKo=o(":"),LKo=l(),Z=a("ul"),$F=a("li"),zbe=a("strong"),yKo=o("albert"),xKo=o(" \u2014 "),zW=a("a"),$Ko=o("AlbertForMultipleChoice"),kKo=o(" (ALBERT model)"),SKo=l(),kF=a("li"),Wbe=a("strong"),RKo=o("bert"),PKo=o(" \u2014 "),WW=a("a"),BKo=o("BertForMultipleChoice"),IKo=o(" (BERT model)"),NKo=l(),SF=a("li"),Qbe=a("strong"),qKo=o("big_bird"),jKo=o(" \u2014 "),QW=a("a"),DKo=o("BigBirdForMultipleChoice"),GKo=o(" (BigBird model)"),OKo=l(),RF=a("li"),Ube=a("strong"),VKo=o("camembert"),XKo=o(" \u2014 "),UW=a("a"),zKo=o("CamembertForMultipleChoice"),WKo=o(" (CamemBERT model)"),QKo=l(),PF=a("li"),Hbe=a("strong"),UKo=o("canine"),HKo=o(" \u2014 "),HW=a("a"),JKo=o("CanineForMultipleChoice"),YKo=o(" (CANINE model)"),KKo=l(),BF=a("li"),Jbe=a("strong"),ZKo=o("convbert"),eZo=o(" \u2014 "),JW=a("a"),oZo=o("ConvBertForMultipleChoice"),rZo=o(" (ConvBERT model)"),tZo=l(),IF=a("li"),Ybe=a("strong"),aZo=o("data2vec-text"),nZo=o(" \u2014 "),YW=a("a"),sZo=o("Data2VecTextForMultipleChoice"),lZo=o(" (Data2VecText model)"),iZo=l(),NF=a("li"),Kbe=a("strong"),dZo=o("deberta-v2"),cZo=o(" \u2014 "),KW=a("a"),mZo=o("DebertaV2ForMultipleChoice"),fZo=o(" (DeBERTa-v2 model)"),gZo=l(),qF=a("li"),Zbe=a("strong"),hZo=o("distilbert"),uZo=o(" \u2014 "),ZW=a("a"),pZo=o("DistilBertForMultipleChoice"),_Zo=o(" (DistilBERT model)"),bZo=l(),jF=a("li"),eve=a("strong"),vZo=o("electra"),FZo=o(" \u2014 "),eQ=a("a"),TZo=o("ElectraForMultipleChoice"),MZo=o(" (ELECTRA model)"),EZo=l(),DF=a("li"),ove=a("strong"),CZo=o("flaubert"),wZo=o(" \u2014 "),oQ=a("a"),AZo=o("FlaubertForMultipleChoice"),LZo=o(" (FlauBERT model)"),yZo=l(),GF=a("li"),rve=a("strong"),xZo=o("fnet"),$Zo=o(" \u2014 "),rQ=a("a"),kZo=o("FNetForMultipleChoice"),SZo=o(" (FNet model)"),RZo=l(),OF=a("li"),tve=a("strong"),PZo=o("funnel"),BZo=o(" \u2014 "),tQ=a("a"),IZo=o("FunnelForMultipleChoice"),NZo=o(" (Funnel Transformer model)"),qZo=l(),VF=a("li"),ave=a("strong"),jZo=o("ibert"),DZo=o(" \u2014 "),aQ=a("a"),GZo=o("IBertForMultipleChoice"),OZo=o(" (I-BERT model)"),VZo=l(),XF=a("li"),nve=a("strong"),XZo=o("longformer"),zZo=o(" \u2014 "),nQ=a("a"),WZo=o("LongformerForMultipleChoice"),QZo=o(" (Longformer model)"),UZo=l(),zF=a("li"),sve=a("strong"),HZo=o("luke"),JZo=o(" \u2014 "),sQ=a("a"),YZo=o("LukeForMultipleChoice"),KZo=o(" (LUKE model)"),ZZo=l(),WF=a("li"),lve=a("strong"),eer=o("megatron-bert"),oer=o(" \u2014 "),lQ=a("a"),rer=o("MegatronBertForMultipleChoice"),ter=o(" (Megatron-BERT model)"),aer=l(),QF=a("li"),ive=a("strong"),ner=o("mobilebert"),ser=o(" \u2014 "),iQ=a("a"),ler=o("MobileBertForMultipleChoice"),ier=o(" (MobileBERT model)"),der=l(),UF=a("li"),dve=a("strong"),cer=o("mpnet"),mer=o(" \u2014 "),dQ=a("a"),fer=o("MPNetForMultipleChoice"),ger=o(" (MPNet model)"),her=l(),HF=a("li"),cve=a("strong"),uer=o("nezha"),per=o(" \u2014 "),cQ=a("a"),_er=o("NezhaForMultipleChoice"),ber=o(" (Nezha model)"),ver=l(),JF=a("li"),mve=a("strong"),Fer=o("nystromformer"),Ter=o(" \u2014 "),mQ=a("a"),Mer=o("NystromformerForMultipleChoice"),Eer=o(" (Nystr\xF6mformer model)"),Cer=l(),YF=a("li"),fve=a("strong"),wer=o("qdqbert"),Aer=o(" \u2014 "),fQ=a("a"),Ler=o("QDQBertForMultipleChoice"),yer=o(" (QDQBert model)"),xer=l(),KF=a("li"),gve=a("strong"),$er=o("rembert"),ker=o(" \u2014 "),gQ=a("a"),Ser=o("RemBertForMultipleChoice"),Rer=o(" (RemBERT model)"),Per=l(),ZF=a("li"),hve=a("strong"),Ber=o("roberta"),Ier=o(" \u2014 "),hQ=a("a"),Ner=o("RobertaForMultipleChoice"),qer=o(" (RoBERTa model)"),jer=l(),eT=a("li"),uve=a("strong"),Der=o("roformer"),Ger=o(" \u2014 "),uQ=a("a"),Oer=o("RoFormerForMultipleChoice"),Ver=o(" (RoFormer model)"),Xer=l(),oT=a("li"),pve=a("strong"),zer=o("squeezebert"),Wer=o(" \u2014 "),pQ=a("a"),Qer=o("SqueezeBertForMultipleChoice"),Uer=o(" (SqueezeBERT model)"),Her=l(),rT=a("li"),_ve=a("strong"),Jer=o("xlm"),Yer=o(" \u2014 "),_Q=a("a"),Ker=o("XLMForMultipleChoice"),Zer=o(" (XLM model)"),eor=l(),tT=a("li"),bve=a("strong"),oor=o("xlm-roberta"),ror=o(" \u2014 "),bQ=a("a"),tor=o("XLMRobertaForMultipleChoice"),aor=o(" (XLM-RoBERTa model)"),nor=l(),aT=a("li"),vve=a("strong"),sor=o("xlm-roberta-xl"),lor=o(" \u2014 "),vQ=a("a"),ior=o("XLMRobertaXLForMultipleChoice"),dor=o(" (XLM-RoBERTa-XL model)"),cor=l(),nT=a("li"),Fve=a("strong"),mor=o("xlnet"),gor=o(" \u2014 "),FQ=a("a"),hor=o("XLNetForMultipleChoice"),uor=o(" (XLNet model)"),por=l(),sT=a("li"),Tve=a("strong"),_or=o("yoso"),bor=o(" \u2014 "),TQ=a("a"),vor=o("YosoForMultipleChoice"),For=o(" (YOSO model)"),Tor=l(),lT=a("p"),Mor=o("The model is set in evaluation mode by default using "),Mve=a("code"),Eor=o("model.eval()"),Cor=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Eve=a("code"),wor=o("model.train()"),Aor=l(),F(iT.$$.fragment),NUe=l(),Ed=a("h2"),dT=a("a"),Cve=a("span"),F(A9.$$.fragment),Lor=l(),wve=a("span"),yor=o("AutoModelForNextSentencePrediction"),qUe=l(),jo=a("div"),F(L9.$$.fragment),xor=l(),Cd=a("p"),$or=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),MQ=a("a"),kor=o("from_pretrained()"),Sor=o(" class method or the "),EQ=a("a"),Ror=o("from_config()"),Por=o(` class
method.`),Bor=l(),y9=a("p"),Ior=o("This class cannot be instantiated directly using "),Ave=a("code"),Nor=o("__init__()"),qor=o(" (throws an error)."),jor=l(),vt=a("div"),F(x9.$$.fragment),Dor=l(),Lve=a("p"),Gor=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Oor=l(),wd=a("p"),Vor=o(`Note:
Loading a model from its configuration file does `),yve=a("strong"),Xor=o("not"),zor=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CQ=a("a"),Wor=o("from_pretrained()"),Qor=o(" to load the model weights."),Uor=l(),F(cT.$$.fragment),Hor=l(),ao=a("div"),F($9.$$.fragment),Jor=l(),xve=a("p"),Yor=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Kor=l(),Ja=a("p"),Zor=o("The model class to instantiate is selected based on the "),$ve=a("code"),err=o("model_type"),orr=o(` property of the config object (either
passed as an argument or loaded from `),kve=a("code"),rrr=o("pretrained_model_name_or_path"),trr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sve=a("code"),arr=o("pretrained_model_name_or_path"),nrr=o(":"),srr=l(),Do=a("ul"),mT=a("li"),Rve=a("strong"),lrr=o("bert"),irr=o(" \u2014 "),wQ=a("a"),drr=o("BertForNextSentencePrediction"),crr=o(" (BERT model)"),mrr=l(),fT=a("li"),Pve=a("strong"),frr=o("fnet"),grr=o(" \u2014 "),AQ=a("a"),hrr=o("FNetForNextSentencePrediction"),urr=o(" (FNet model)"),prr=l(),gT=a("li"),Bve=a("strong"),_rr=o("megatron-bert"),brr=o(" \u2014 "),LQ=a("a"),vrr=o("MegatronBertForNextSentencePrediction"),Frr=o(" (Megatron-BERT model)"),Trr=l(),hT=a("li"),Ive=a("strong"),Mrr=o("mobilebert"),Err=o(" \u2014 "),yQ=a("a"),Crr=o("MobileBertForNextSentencePrediction"),wrr=o(" (MobileBERT model)"),Arr=l(),uT=a("li"),Nve=a("strong"),Lrr=o("nezha"),yrr=o(" \u2014 "),xQ=a("a"),xrr=o("NezhaForNextSentencePrediction"),$rr=o(" (Nezha model)"),krr=l(),pT=a("li"),qve=a("strong"),Srr=o("qdqbert"),Rrr=o(" \u2014 "),$Q=a("a"),Prr=o("QDQBertForNextSentencePrediction"),Brr=o(" (QDQBert model)"),Irr=l(),_T=a("p"),Nrr=o("The model is set in evaluation mode by default using "),jve=a("code"),qrr=o("model.eval()"),jrr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dve=a("code"),Drr=o("model.train()"),Grr=l(),F(bT.$$.fragment),jUe=l(),Ad=a("h2"),vT=a("a"),Gve=a("span"),F(k9.$$.fragment),Orr=l(),Ove=a("span"),Vrr=o("AutoModelForTokenClassification"),DUe=l(),Go=a("div"),F(S9.$$.fragment),Xrr=l(),Ld=a("p"),zrr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),kQ=a("a"),Wrr=o("from_pretrained()"),Qrr=o(" class method or the "),SQ=a("a"),Urr=o("from_config()"),Hrr=o(` class
method.`),Jrr=l(),R9=a("p"),Yrr=o("This class cannot be instantiated directly using "),Vve=a("code"),Krr=o("__init__()"),Zrr=o(" (throws an error)."),etr=l(),Ft=a("div"),F(P9.$$.fragment),otr=l(),Xve=a("p"),rtr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),ttr=l(),yd=a("p"),atr=o(`Note:
Loading a model from its configuration file does `),zve=a("strong"),ntr=o("not"),str=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RQ=a("a"),ltr=o("from_pretrained()"),itr=o(" to load the model weights."),dtr=l(),F(FT.$$.fragment),ctr=l(),no=a("div"),F(B9.$$.fragment),mtr=l(),Wve=a("p"),ftr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),gtr=l(),Ya=a("p"),htr=o("The model class to instantiate is selected based on the "),Qve=a("code"),utr=o("model_type"),ptr=o(` property of the config object (either
passed as an argument or loaded from `),Uve=a("code"),_tr=o("pretrained_model_name_or_path"),btr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hve=a("code"),vtr=o("pretrained_model_name_or_path"),Ftr=o(":"),Ttr=l(),H=a("ul"),TT=a("li"),Jve=a("strong"),Mtr=o("albert"),Etr=o(" \u2014 "),PQ=a("a"),Ctr=o("AlbertForTokenClassification"),wtr=o(" (ALBERT model)"),Atr=l(),MT=a("li"),Yve=a("strong"),Ltr=o("bert"),ytr=o(" \u2014 "),BQ=a("a"),xtr=o("BertForTokenClassification"),$tr=o(" (BERT model)"),ktr=l(),ET=a("li"),Kve=a("strong"),Str=o("big_bird"),Rtr=o(" \u2014 "),IQ=a("a"),Ptr=o("BigBirdForTokenClassification"),Btr=o(" (BigBird model)"),Itr=l(),CT=a("li"),Zve=a("strong"),Ntr=o("bloom"),qtr=o(" \u2014 "),NQ=a("a"),jtr=o("BloomForTokenClassification"),Dtr=o(" (BLOOM model)"),Gtr=l(),wT=a("li"),e1e=a("strong"),Otr=o("camembert"),Vtr=o(" \u2014 "),qQ=a("a"),Xtr=o("CamembertForTokenClassification"),ztr=o(" (CamemBERT model)"),Wtr=l(),AT=a("li"),o1e=a("strong"),Qtr=o("canine"),Utr=o(" \u2014 "),jQ=a("a"),Htr=o("CanineForTokenClassification"),Jtr=o(" (CANINE model)"),Ytr=l(),LT=a("li"),r1e=a("strong"),Ktr=o("convbert"),Ztr=o(" \u2014 "),DQ=a("a"),ear=o("ConvBertForTokenClassification"),oar=o(" (ConvBERT model)"),rar=l(),yT=a("li"),t1e=a("strong"),tar=o("data2vec-text"),aar=o(" \u2014 "),GQ=a("a"),nar=o("Data2VecTextForTokenClassification"),sar=o(" (Data2VecText model)"),lar=l(),xT=a("li"),a1e=a("strong"),iar=o("deberta"),dar=o(" \u2014 "),OQ=a("a"),car=o("DebertaForTokenClassification"),mar=o(" (DeBERTa model)"),far=l(),$T=a("li"),n1e=a("strong"),gar=o("deberta-v2"),har=o(" \u2014 "),VQ=a("a"),uar=o("DebertaV2ForTokenClassification"),par=o(" (DeBERTa-v2 model)"),_ar=l(),kT=a("li"),s1e=a("strong"),bar=o("distilbert"),Far=o(" \u2014 "),XQ=a("a"),Tar=o("DistilBertForTokenClassification"),Mar=o(" (DistilBERT model)"),Ear=l(),ST=a("li"),l1e=a("strong"),Car=o("electra"),war=o(" \u2014 "),zQ=a("a"),Aar=o("ElectraForTokenClassification"),Lar=o(" (ELECTRA model)"),yar=l(),RT=a("li"),i1e=a("strong"),xar=o("flaubert"),$ar=o(" \u2014 "),WQ=a("a"),kar=o("FlaubertForTokenClassification"),Sar=o(" (FlauBERT model)"),Rar=l(),PT=a("li"),d1e=a("strong"),Par=o("fnet"),Bar=o(" \u2014 "),QQ=a("a"),Iar=o("FNetForTokenClassification"),Nar=o(" (FNet model)"),qar=l(),BT=a("li"),c1e=a("strong"),jar=o("funnel"),Dar=o(" \u2014 "),UQ=a("a"),Gar=o("FunnelForTokenClassification"),Oar=o(" (Funnel Transformer model)"),Var=l(),IT=a("li"),m1e=a("strong"),Xar=o("gpt2"),zar=o(" \u2014 "),HQ=a("a"),War=o("GPT2ForTokenClassification"),Qar=o(" (OpenAI GPT-2 model)"),Uar=l(),NT=a("li"),f1e=a("strong"),Har=o("ibert"),Jar=o(" \u2014 "),JQ=a("a"),Yar=o("IBertForTokenClassification"),Kar=o(" (I-BERT model)"),Zar=l(),qT=a("li"),g1e=a("strong"),enr=o("layoutlm"),onr=o(" \u2014 "),YQ=a("a"),rnr=o("LayoutLMForTokenClassification"),tnr=o(" (LayoutLM model)"),anr=l(),jT=a("li"),h1e=a("strong"),nnr=o("layoutlmv2"),snr=o(" \u2014 "),KQ=a("a"),lnr=o("LayoutLMv2ForTokenClassification"),inr=o(" (LayoutLMv2 model)"),dnr=l(),DT=a("li"),u1e=a("strong"),cnr=o("layoutlmv3"),mnr=o(" \u2014 "),ZQ=a("a"),fnr=o("LayoutLMv3ForTokenClassification"),gnr=o(" (LayoutLMv3 model)"),hnr=l(),GT=a("li"),p1e=a("strong"),unr=o("longformer"),pnr=o(" \u2014 "),eU=a("a"),_nr=o("LongformerForTokenClassification"),bnr=o(" (Longformer model)"),vnr=l(),OT=a("li"),_1e=a("strong"),Fnr=o("luke"),Tnr=o(" \u2014 "),oU=a("a"),Mnr=o("LukeForTokenClassification"),Enr=o(" (LUKE model)"),Cnr=l(),VT=a("li"),b1e=a("strong"),wnr=o("megatron-bert"),Anr=o(" \u2014 "),rU=a("a"),Lnr=o("MegatronBertForTokenClassification"),ynr=o(" (Megatron-BERT model)"),xnr=l(),XT=a("li"),v1e=a("strong"),$nr=o("mobilebert"),knr=o(" \u2014 "),tU=a("a"),Snr=o("MobileBertForTokenClassification"),Rnr=o(" (MobileBERT model)"),Pnr=l(),zT=a("li"),F1e=a("strong"),Bnr=o("mpnet"),Inr=o(" \u2014 "),aU=a("a"),Nnr=o("MPNetForTokenClassification"),qnr=o(" (MPNet model)"),jnr=l(),WT=a("li"),T1e=a("strong"),Dnr=o("nezha"),Gnr=o(" \u2014 "),nU=a("a"),Onr=o("NezhaForTokenClassification"),Vnr=o(" (Nezha model)"),Xnr=l(),QT=a("li"),M1e=a("strong"),znr=o("nystromformer"),Wnr=o(" \u2014 "),sU=a("a"),Qnr=o("NystromformerForTokenClassification"),Unr=o(" (Nystr\xF6mformer model)"),Hnr=l(),UT=a("li"),E1e=a("strong"),Jnr=o("qdqbert"),Ynr=o(" \u2014 "),lU=a("a"),Knr=o("QDQBertForTokenClassification"),Znr=o(" (QDQBert model)"),esr=l(),HT=a("li"),C1e=a("strong"),osr=o("rembert"),rsr=o(" \u2014 "),iU=a("a"),tsr=o("RemBertForTokenClassification"),asr=o(" (RemBERT model)"),nsr=l(),JT=a("li"),w1e=a("strong"),ssr=o("roberta"),lsr=o(" \u2014 "),dU=a("a"),isr=o("RobertaForTokenClassification"),dsr=o(" (RoBERTa model)"),csr=l(),YT=a("li"),A1e=a("strong"),msr=o("roformer"),fsr=o(" \u2014 "),cU=a("a"),gsr=o("RoFormerForTokenClassification"),hsr=o(" (RoFormer model)"),usr=l(),KT=a("li"),L1e=a("strong"),psr=o("squeezebert"),_sr=o(" \u2014 "),mU=a("a"),bsr=o("SqueezeBertForTokenClassification"),vsr=o(" (SqueezeBERT model)"),Fsr=l(),ZT=a("li"),y1e=a("strong"),Tsr=o("xlm"),Msr=o(" \u2014 "),fU=a("a"),Esr=o("XLMForTokenClassification"),Csr=o(" (XLM model)"),wsr=l(),eM=a("li"),x1e=a("strong"),Asr=o("xlm-roberta"),Lsr=o(" \u2014 "),gU=a("a"),ysr=o("XLMRobertaForTokenClassification"),xsr=o(" (XLM-RoBERTa model)"),$sr=l(),oM=a("li"),$1e=a("strong"),ksr=o("xlm-roberta-xl"),Ssr=o(" \u2014 "),hU=a("a"),Rsr=o("XLMRobertaXLForTokenClassification"),Psr=o(" (XLM-RoBERTa-XL model)"),Bsr=l(),rM=a("li"),k1e=a("strong"),Isr=o("xlnet"),Nsr=o(" \u2014 "),uU=a("a"),qsr=o("XLNetForTokenClassification"),jsr=o(" (XLNet model)"),Dsr=l(),tM=a("li"),S1e=a("strong"),Gsr=o("yoso"),Osr=o(" \u2014 "),pU=a("a"),Vsr=o("YosoForTokenClassification"),Xsr=o(" (YOSO model)"),zsr=l(),aM=a("p"),Wsr=o("The model is set in evaluation mode by default using "),R1e=a("code"),Qsr=o("model.eval()"),Usr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),P1e=a("code"),Hsr=o("model.train()"),Jsr=l(),F(nM.$$.fragment),GUe=l(),xd=a("h2"),sM=a("a"),B1e=a("span"),F(I9.$$.fragment),Ysr=l(),I1e=a("span"),Ksr=o("AutoModelForQuestionAnswering"),OUe=l(),Oo=a("div"),F(N9.$$.fragment),Zsr=l(),$d=a("p"),elr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),_U=a("a"),olr=o("from_pretrained()"),rlr=o(" class method or the "),bU=a("a"),tlr=o("from_config()"),alr=o(` class
method.`),nlr=l(),q9=a("p"),slr=o("This class cannot be instantiated directly using "),N1e=a("code"),llr=o("__init__()"),ilr=o(" (throws an error)."),dlr=l(),Tt=a("div"),F(j9.$$.fragment),clr=l(),q1e=a("p"),mlr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),flr=l(),kd=a("p"),glr=o(`Note:
Loading a model from its configuration file does `),j1e=a("strong"),hlr=o("not"),ulr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vU=a("a"),plr=o("from_pretrained()"),_lr=o(" to load the model weights."),blr=l(),F(lM.$$.fragment),vlr=l(),so=a("div"),F(D9.$$.fragment),Flr=l(),D1e=a("p"),Tlr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Mlr=l(),Ka=a("p"),Elr=o("The model class to instantiate is selected based on the "),G1e=a("code"),Clr=o("model_type"),wlr=o(` property of the config object (either
passed as an argument or loaded from `),O1e=a("code"),Alr=o("pretrained_model_name_or_path"),Llr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V1e=a("code"),ylr=o("pretrained_model_name_or_path"),xlr=o(":"),$lr=l(),V=a("ul"),iM=a("li"),X1e=a("strong"),klr=o("albert"),Slr=o(" \u2014 "),FU=a("a"),Rlr=o("AlbertForQuestionAnswering"),Plr=o(" (ALBERT model)"),Blr=l(),dM=a("li"),z1e=a("strong"),Ilr=o("bart"),Nlr=o(" \u2014 "),TU=a("a"),qlr=o("BartForQuestionAnswering"),jlr=o(" (BART model)"),Dlr=l(),cM=a("li"),W1e=a("strong"),Glr=o("bert"),Olr=o(" \u2014 "),MU=a("a"),Vlr=o("BertForQuestionAnswering"),Xlr=o(" (BERT model)"),zlr=l(),mM=a("li"),Q1e=a("strong"),Wlr=o("big_bird"),Qlr=o(" \u2014 "),EU=a("a"),Ulr=o("BigBirdForQuestionAnswering"),Hlr=o(" (BigBird model)"),Jlr=l(),fM=a("li"),U1e=a("strong"),Ylr=o("bigbird_pegasus"),Klr=o(" \u2014 "),CU=a("a"),Zlr=o("BigBirdPegasusForQuestionAnswering"),eir=o(" (BigBird-Pegasus model)"),oir=l(),gM=a("li"),H1e=a("strong"),rir=o("camembert"),tir=o(" \u2014 "),wU=a("a"),air=o("CamembertForQuestionAnswering"),nir=o(" (CamemBERT model)"),sir=l(),hM=a("li"),J1e=a("strong"),lir=o("canine"),iir=o(" \u2014 "),AU=a("a"),dir=o("CanineForQuestionAnswering"),cir=o(" (CANINE model)"),mir=l(),uM=a("li"),Y1e=a("strong"),fir=o("convbert"),gir=o(" \u2014 "),LU=a("a"),hir=o("ConvBertForQuestionAnswering"),uir=o(" (ConvBERT model)"),pir=l(),pM=a("li"),K1e=a("strong"),_ir=o("data2vec-text"),bir=o(" \u2014 "),yU=a("a"),vir=o("Data2VecTextForQuestionAnswering"),Fir=o(" (Data2VecText model)"),Tir=l(),_M=a("li"),Z1e=a("strong"),Mir=o("deberta"),Eir=o(" \u2014 "),xU=a("a"),Cir=o("DebertaForQuestionAnswering"),wir=o(" (DeBERTa model)"),Air=l(),bM=a("li"),eFe=a("strong"),Lir=o("deberta-v2"),yir=o(" \u2014 "),$U=a("a"),xir=o("DebertaV2ForQuestionAnswering"),$ir=o(" (DeBERTa-v2 model)"),kir=l(),vM=a("li"),oFe=a("strong"),Sir=o("distilbert"),Rir=o(" \u2014 "),kU=a("a"),Pir=o("DistilBertForQuestionAnswering"),Bir=o(" (DistilBERT model)"),Iir=l(),FM=a("li"),rFe=a("strong"),Nir=o("electra"),qir=o(" \u2014 "),SU=a("a"),jir=o("ElectraForQuestionAnswering"),Dir=o(" (ELECTRA model)"),Gir=l(),TM=a("li"),tFe=a("strong"),Oir=o("flaubert"),Vir=o(" \u2014 "),RU=a("a"),Xir=o("FlaubertForQuestionAnsweringSimple"),zir=o(" (FlauBERT model)"),Wir=l(),MM=a("li"),aFe=a("strong"),Qir=o("fnet"),Uir=o(" \u2014 "),PU=a("a"),Hir=o("FNetForQuestionAnswering"),Jir=o(" (FNet model)"),Yir=l(),EM=a("li"),nFe=a("strong"),Kir=o("funnel"),Zir=o(" \u2014 "),BU=a("a"),edr=o("FunnelForQuestionAnswering"),odr=o(" (Funnel Transformer model)"),rdr=l(),CM=a("li"),sFe=a("strong"),tdr=o("gptj"),adr=o(" \u2014 "),IU=a("a"),ndr=o("GPTJForQuestionAnswering"),sdr=o(" (GPT-J model)"),ldr=l(),wM=a("li"),lFe=a("strong"),idr=o("ibert"),ddr=o(" \u2014 "),NU=a("a"),cdr=o("IBertForQuestionAnswering"),mdr=o(" (I-BERT model)"),fdr=l(),AM=a("li"),iFe=a("strong"),gdr=o("layoutlmv2"),hdr=o(" \u2014 "),qU=a("a"),udr=o("LayoutLMv2ForQuestionAnswering"),pdr=o(" (LayoutLMv2 model)"),_dr=l(),LM=a("li"),dFe=a("strong"),bdr=o("layoutlmv3"),vdr=o(" \u2014 "),jU=a("a"),Fdr=o("LayoutLMv3ForQuestionAnswering"),Tdr=o(" (LayoutLMv3 model)"),Mdr=l(),yM=a("li"),cFe=a("strong"),Edr=o("led"),Cdr=o(" \u2014 "),DU=a("a"),wdr=o("LEDForQuestionAnswering"),Adr=o(" (LED model)"),Ldr=l(),xM=a("li"),mFe=a("strong"),ydr=o("longformer"),xdr=o(" \u2014 "),GU=a("a"),$dr=o("LongformerForQuestionAnswering"),kdr=o(" (Longformer model)"),Sdr=l(),$M=a("li"),fFe=a("strong"),Rdr=o("luke"),Pdr=o(" \u2014 "),OU=a("a"),Bdr=o("LukeForQuestionAnswering"),Idr=o(" (LUKE model)"),Ndr=l(),kM=a("li"),gFe=a("strong"),qdr=o("lxmert"),jdr=o(" \u2014 "),VU=a("a"),Ddr=o("LxmertForQuestionAnswering"),Gdr=o(" (LXMERT model)"),Odr=l(),SM=a("li"),hFe=a("strong"),Vdr=o("mbart"),Xdr=o(" \u2014 "),XU=a("a"),zdr=o("MBartForQuestionAnswering"),Wdr=o(" (mBART model)"),Qdr=l(),RM=a("li"),uFe=a("strong"),Udr=o("megatron-bert"),Hdr=o(" \u2014 "),zU=a("a"),Jdr=o("MegatronBertForQuestionAnswering"),Ydr=o(" (Megatron-BERT model)"),Kdr=l(),PM=a("li"),pFe=a("strong"),Zdr=o("mobilebert"),ecr=o(" \u2014 "),WU=a("a"),ocr=o("MobileBertForQuestionAnswering"),rcr=o(" (MobileBERT model)"),tcr=l(),BM=a("li"),_Fe=a("strong"),acr=o("mpnet"),ncr=o(" \u2014 "),QU=a("a"),scr=o("MPNetForQuestionAnswering"),lcr=o(" (MPNet model)"),icr=l(),IM=a("li"),bFe=a("strong"),dcr=o("mvp"),ccr=o(" \u2014 "),UU=a("a"),mcr=o("MvpForQuestionAnswering"),fcr=o(" (MVP model)"),gcr=l(),NM=a("li"),vFe=a("strong"),hcr=o("nezha"),ucr=o(" \u2014 "),HU=a("a"),pcr=o("NezhaForQuestionAnswering"),_cr=o(" (Nezha model)"),bcr=l(),qM=a("li"),FFe=a("strong"),vcr=o("nystromformer"),Fcr=o(" \u2014 "),JU=a("a"),Tcr=o("NystromformerForQuestionAnswering"),Mcr=o(" (Nystr\xF6mformer model)"),Ecr=l(),jM=a("li"),TFe=a("strong"),Ccr=o("qdqbert"),wcr=o(" \u2014 "),YU=a("a"),Acr=o("QDQBertForQuestionAnswering"),Lcr=o(" (QDQBert model)"),ycr=l(),DM=a("li"),MFe=a("strong"),xcr=o("reformer"),$cr=o(" \u2014 "),KU=a("a"),kcr=o("ReformerForQuestionAnswering"),Scr=o(" (Reformer model)"),Rcr=l(),GM=a("li"),EFe=a("strong"),Pcr=o("rembert"),Bcr=o(" \u2014 "),ZU=a("a"),Icr=o("RemBertForQuestionAnswering"),Ncr=o(" (RemBERT model)"),qcr=l(),OM=a("li"),CFe=a("strong"),jcr=o("roberta"),Dcr=o(" \u2014 "),eH=a("a"),Gcr=o("RobertaForQuestionAnswering"),Ocr=o(" (RoBERTa model)"),Vcr=l(),VM=a("li"),wFe=a("strong"),Xcr=o("roformer"),zcr=o(" \u2014 "),oH=a("a"),Wcr=o("RoFormerForQuestionAnswering"),Qcr=o(" (RoFormer model)"),Ucr=l(),XM=a("li"),AFe=a("strong"),Hcr=o("splinter"),Jcr=o(" \u2014 "),rH=a("a"),Ycr=o("SplinterForQuestionAnswering"),Kcr=o(" (Splinter model)"),Zcr=l(),zM=a("li"),LFe=a("strong"),emr=o("squeezebert"),omr=o(" \u2014 "),tH=a("a"),rmr=o("SqueezeBertForQuestionAnswering"),tmr=o(" (SqueezeBERT model)"),amr=l(),WM=a("li"),yFe=a("strong"),nmr=o("xlm"),smr=o(" \u2014 "),aH=a("a"),lmr=o("XLMForQuestionAnsweringSimple"),imr=o(" (XLM model)"),dmr=l(),QM=a("li"),xFe=a("strong"),cmr=o("xlm-roberta"),mmr=o(" \u2014 "),nH=a("a"),fmr=o("XLMRobertaForQuestionAnswering"),gmr=o(" (XLM-RoBERTa model)"),hmr=l(),UM=a("li"),$Fe=a("strong"),umr=o("xlm-roberta-xl"),pmr=o(" \u2014 "),sH=a("a"),_mr=o("XLMRobertaXLForQuestionAnswering"),bmr=o(" (XLM-RoBERTa-XL model)"),vmr=l(),HM=a("li"),kFe=a("strong"),Fmr=o("xlnet"),Tmr=o(" \u2014 "),lH=a("a"),Mmr=o("XLNetForQuestionAnsweringSimple"),Emr=o(" (XLNet model)"),Cmr=l(),JM=a("li"),SFe=a("strong"),wmr=o("yoso"),Amr=o(" \u2014 "),iH=a("a"),Lmr=o("YosoForQuestionAnswering"),ymr=o(" (YOSO model)"),xmr=l(),YM=a("p"),$mr=o("The model is set in evaluation mode by default using "),RFe=a("code"),kmr=o("model.eval()"),Smr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),PFe=a("code"),Rmr=o("model.train()"),Pmr=l(),F(KM.$$.fragment),VUe=l(),Sd=a("h2"),ZM=a("a"),BFe=a("span"),F(G9.$$.fragment),Bmr=l(),IFe=a("span"),Imr=o("AutoModelForTableQuestionAnswering"),XUe=l(),Vo=a("div"),F(O9.$$.fragment),Nmr=l(),Rd=a("p"),qmr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),dH=a("a"),jmr=o("from_pretrained()"),Dmr=o(" class method or the "),cH=a("a"),Gmr=o("from_config()"),Omr=o(` class
method.`),Vmr=l(),V9=a("p"),Xmr=o("This class cannot be instantiated directly using "),NFe=a("code"),zmr=o("__init__()"),Wmr=o(" (throws an error)."),Qmr=l(),Mt=a("div"),F(X9.$$.fragment),Umr=l(),qFe=a("p"),Hmr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Jmr=l(),Pd=a("p"),Ymr=o(`Note:
Loading a model from its configuration file does `),jFe=a("strong"),Kmr=o("not"),Zmr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mH=a("a"),efr=o("from_pretrained()"),ofr=o(" to load the model weights."),rfr=l(),F(eE.$$.fragment),tfr=l(),lo=a("div"),F(z9.$$.fragment),afr=l(),DFe=a("p"),nfr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),sfr=l(),Za=a("p"),lfr=o("The model class to instantiate is selected based on the "),GFe=a("code"),ifr=o("model_type"),dfr=o(` property of the config object (either
passed as an argument or loaded from `),OFe=a("code"),cfr=o("pretrained_model_name_or_path"),mfr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),VFe=a("code"),ffr=o("pretrained_model_name_or_path"),gfr=o(":"),hfr=l(),XFe=a("ul"),oE=a("li"),zFe=a("strong"),ufr=o("tapas"),pfr=o(" \u2014 "),fH=a("a"),_fr=o("TapasForQuestionAnswering"),bfr=o(" (TAPAS model)"),vfr=l(),rE=a("p"),Ffr=o("The model is set in evaluation mode by default using "),WFe=a("code"),Tfr=o("model.eval()"),Mfr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),QFe=a("code"),Efr=o("model.train()"),Cfr=l(),F(tE.$$.fragment),zUe=l(),Bd=a("h2"),aE=a("a"),UFe=a("span"),F(W9.$$.fragment),wfr=l(),HFe=a("span"),Afr=o("AutoModelForImageClassification"),WUe=l(),Xo=a("div"),F(Q9.$$.fragment),Lfr=l(),Id=a("p"),yfr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),gH=a("a"),xfr=o("from_pretrained()"),$fr=o(" class method or the "),hH=a("a"),kfr=o("from_config()"),Sfr=o(` class
method.`),Rfr=l(),U9=a("p"),Pfr=o("This class cannot be instantiated directly using "),JFe=a("code"),Bfr=o("__init__()"),Ifr=o(" (throws an error)."),Nfr=l(),Et=a("div"),F(H9.$$.fragment),qfr=l(),YFe=a("p"),jfr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Dfr=l(),Nd=a("p"),Gfr=o(`Note:
Loading a model from its configuration file does `),KFe=a("strong"),Ofr=o("not"),Vfr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uH=a("a"),Xfr=o("from_pretrained()"),zfr=o(" to load the model weights."),Wfr=l(),F(nE.$$.fragment),Qfr=l(),io=a("div"),F(J9.$$.fragment),Ufr=l(),ZFe=a("p"),Hfr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Jfr=l(),en=a("p"),Yfr=o("The model class to instantiate is selected based on the "),eTe=a("code"),Kfr=o("model_type"),Zfr=o(` property of the config object (either
passed as an argument or loaded from `),oTe=a("code"),egr=o("pretrained_model_name_or_path"),ogr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rTe=a("code"),rgr=o("pretrained_model_name_or_path"),tgr=o(":"),agr=l(),be=a("ul"),sE=a("li"),tTe=a("strong"),ngr=o("beit"),sgr=o(" \u2014 "),pH=a("a"),lgr=o("BeitForImageClassification"),igr=o(" (BEiT model)"),dgr=l(),lE=a("li"),aTe=a("strong"),cgr=o("convnext"),mgr=o(" \u2014 "),_H=a("a"),fgr=o("ConvNextForImageClassification"),ggr=o(" (ConvNeXT model)"),hgr=l(),iE=a("li"),nTe=a("strong"),ugr=o("cvt"),pgr=o(" \u2014 "),bH=a("a"),_gr=o("CvtForImageClassification"),bgr=o(" (CvT model)"),vgr=l(),dE=a("li"),sTe=a("strong"),Fgr=o("data2vec-vision"),Tgr=o(" \u2014 "),vH=a("a"),Mgr=o("Data2VecVisionForImageClassification"),Egr=o(" (Data2VecVision model)"),Cgr=l(),sl=a("li"),lTe=a("strong"),wgr=o("deit"),Agr=o(" \u2014 "),FH=a("a"),Lgr=o("DeiTForImageClassification"),ygr=o(" or "),TH=a("a"),xgr=o("DeiTForImageClassificationWithTeacher"),$gr=o(" (DeiT model)"),kgr=l(),cE=a("li"),iTe=a("strong"),Sgr=o("imagegpt"),Rgr=o(" \u2014 "),MH=a("a"),Pgr=o("ImageGPTForImageClassification"),Bgr=o(" (ImageGPT model)"),Igr=l(),ll=a("li"),dTe=a("strong"),Ngr=o("levit"),qgr=o(" \u2014 "),EH=a("a"),jgr=o("LevitForImageClassification"),Dgr=o(" or "),CH=a("a"),Ggr=o("LevitForImageClassificationWithTeacher"),Ogr=o(" (LeViT model)"),Vgr=l(),mE=a("li"),cTe=a("strong"),Xgr=o("mobilevit"),zgr=o(" \u2014 "),wH=a("a"),Wgr=o("MobileViTForImageClassification"),Qgr=o(" (MobileViT model)"),Ugr=l(),Ct=a("li"),mTe=a("strong"),Hgr=o("perceiver"),Jgr=o(" \u2014 "),AH=a("a"),Ygr=o("PerceiverForImageClassificationLearned"),Kgr=o(" or "),LH=a("a"),Zgr=o("PerceiverForImageClassificationFourier"),ehr=o(" or "),yH=a("a"),ohr=o("PerceiverForImageClassificationConvProcessing"),rhr=o(" (Perceiver model)"),thr=l(),fE=a("li"),fTe=a("strong"),ahr=o("poolformer"),nhr=o(" \u2014 "),xH=a("a"),shr=o("PoolFormerForImageClassification"),lhr=o(" (PoolFormer model)"),ihr=l(),gE=a("li"),gTe=a("strong"),dhr=o("regnet"),chr=o(" \u2014 "),$H=a("a"),mhr=o("RegNetForImageClassification"),fhr=o(" (RegNet model)"),ghr=l(),hE=a("li"),hTe=a("strong"),hhr=o("resnet"),uhr=o(" \u2014 "),kH=a("a"),phr=o("ResNetForImageClassification"),_hr=o(" (ResNet model)"),bhr=l(),uE=a("li"),uTe=a("strong"),vhr=o("segformer"),Fhr=o(" \u2014 "),SH=a("a"),Thr=o("SegformerForImageClassification"),Mhr=o(" (SegFormer model)"),Ehr=l(),pE=a("li"),pTe=a("strong"),Chr=o("swin"),whr=o(" \u2014 "),RH=a("a"),Ahr=o("SwinForImageClassification"),Lhr=o(" (Swin Transformer model)"),yhr=l(),_E=a("li"),_Te=a("strong"),xhr=o("swinv2"),$hr=o(" \u2014 "),PH=a("a"),khr=o("Swinv2ForImageClassification"),Shr=o(" (Swin Transformer V2 model)"),Rhr=l(),bE=a("li"),bTe=a("strong"),Phr=o("van"),Bhr=o(" \u2014 "),BH=a("a"),Ihr=o("VanForImageClassification"),Nhr=o(" (VAN model)"),qhr=l(),vE=a("li"),vTe=a("strong"),jhr=o("vit"),Dhr=o(" \u2014 "),IH=a("a"),Ghr=o("ViTForImageClassification"),Ohr=o(" (ViT model)"),Vhr=l(),FE=a("p"),Xhr=o("The model is set in evaluation mode by default using "),FTe=a("code"),zhr=o("model.eval()"),Whr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),TTe=a("code"),Qhr=o("model.train()"),Uhr=l(),F(TE.$$.fragment),QUe=l(),qd=a("h2"),ME=a("a"),MTe=a("span"),F(Y9.$$.fragment),Hhr=l(),ETe=a("span"),Jhr=o("AutoModelForVideoClassification"),UUe=l(),zo=a("div"),F(K9.$$.fragment),Yhr=l(),jd=a("p"),Khr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a video classification head) when created
with the `),NH=a("a"),Zhr=o("from_pretrained()"),eur=o(" class method or the "),qH=a("a"),our=o("from_config()"),rur=o(` class
method.`),tur=l(),Z9=a("p"),aur=o("This class cannot be instantiated directly using "),CTe=a("code"),nur=o("__init__()"),sur=o(" (throws an error)."),lur=l(),wt=a("div"),F(ex.$$.fragment),iur=l(),wTe=a("p"),dur=o("Instantiates one of the model classes of the library (with a video classification head) from a configuration."),cur=l(),Dd=a("p"),mur=o(`Note:
Loading a model from its configuration file does `),ATe=a("strong"),fur=o("not"),gur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jH=a("a"),hur=o("from_pretrained()"),uur=o(" to load the model weights."),pur=l(),F(EE.$$.fragment),_ur=l(),co=a("div"),F(ox.$$.fragment),bur=l(),LTe=a("p"),vur=o("Instantiate one of the model classes of the library (with a video classification head) from a pretrained model."),Fur=l(),on=a("p"),Tur=o("The model class to instantiate is selected based on the "),yTe=a("code"),Mur=o("model_type"),Eur=o(` property of the config object (either
passed as an argument or loaded from `),xTe=a("code"),Cur=o("pretrained_model_name_or_path"),wur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$Te=a("code"),Aur=o("pretrained_model_name_or_path"),Lur=o(":"),yur=l(),kTe=a("ul"),CE=a("li"),STe=a("strong"),xur=o("videomae"),$ur=o(" \u2014 "),DH=a("a"),kur=o("VideoMAEForVideoClassification"),Sur=o(" (VideoMAE model)"),Rur=l(),wE=a("p"),Pur=o("The model is set in evaluation mode by default using "),RTe=a("code"),Bur=o("model.eval()"),Iur=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),PTe=a("code"),Nur=o("model.train()"),qur=l(),F(AE.$$.fragment),HUe=l(),Gd=a("h2"),LE=a("a"),BTe=a("span"),F(rx.$$.fragment),jur=l(),ITe=a("span"),Dur=o("AutoModelForVision2Seq"),JUe=l(),Wo=a("div"),F(tx.$$.fragment),Gur=l(),Od=a("p"),Our=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),GH=a("a"),Vur=o("from_pretrained()"),Xur=o(" class method or the "),OH=a("a"),zur=o("from_config()"),Wur=o(` class
method.`),Qur=l(),ax=a("p"),Uur=o("This class cannot be instantiated directly using "),NTe=a("code"),Hur=o("__init__()"),Jur=o(" (throws an error)."),Yur=l(),At=a("div"),F(nx.$$.fragment),Kur=l(),qTe=a("p"),Zur=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),epr=l(),Vd=a("p"),opr=o(`Note:
Loading a model from its configuration file does `),jTe=a("strong"),rpr=o("not"),tpr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VH=a("a"),apr=o("from_pretrained()"),npr=o(" to load the model weights."),spr=l(),F(yE.$$.fragment),lpr=l(),mo=a("div"),F(sx.$$.fragment),ipr=l(),DTe=a("p"),dpr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),cpr=l(),rn=a("p"),mpr=o("The model class to instantiate is selected based on the "),GTe=a("code"),fpr=o("model_type"),gpr=o(` property of the config object (either
passed as an argument or loaded from `),OTe=a("code"),hpr=o("pretrained_model_name_or_path"),upr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),VTe=a("code"),ppr=o("pretrained_model_name_or_path"),_pr=o(":"),bpr=l(),XTe=a("ul"),xE=a("li"),zTe=a("strong"),vpr=o("vision-encoder-decoder"),Fpr=o(" \u2014 "),XH=a("a"),Tpr=o("VisionEncoderDecoderModel"),Mpr=o(" (Vision Encoder decoder model)"),Epr=l(),$E=a("p"),Cpr=o("The model is set in evaluation mode by default using "),WTe=a("code"),wpr=o("model.eval()"),Apr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),QTe=a("code"),Lpr=o("model.train()"),ypr=l(),F(kE.$$.fragment),YUe=l(),Xd=a("h2"),SE=a("a"),UTe=a("span"),F(lx.$$.fragment),xpr=l(),HTe=a("span"),$pr=o("AutoModelForVisualQuestionAnswering"),KUe=l(),Qo=a("div"),F(ix.$$.fragment),kpr=l(),zd=a("p"),Spr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),zH=a("a"),Rpr=o("from_pretrained()"),Ppr=o(" class method or the "),WH=a("a"),Bpr=o("from_config()"),Ipr=o(` class
method.`),Npr=l(),dx=a("p"),qpr=o("This class cannot be instantiated directly using "),JTe=a("code"),jpr=o("__init__()"),Dpr=o(" (throws an error)."),Gpr=l(),Lt=a("div"),F(cx.$$.fragment),Opr=l(),YTe=a("p"),Vpr=o("Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),Xpr=l(),Wd=a("p"),zpr=o(`Note:
Loading a model from its configuration file does `),KTe=a("strong"),Wpr=o("not"),Qpr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QH=a("a"),Upr=o("from_pretrained()"),Hpr=o(" to load the model weights."),Jpr=l(),F(RE.$$.fragment),Ypr=l(),fo=a("div"),F(mx.$$.fragment),Kpr=l(),ZTe=a("p"),Zpr=o("Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),e_r=l(),tn=a("p"),o_r=o("The model class to instantiate is selected based on the "),eMe=a("code"),r_r=o("model_type"),t_r=o(` property of the config object (either
passed as an argument or loaded from `),oMe=a("code"),a_r=o("pretrained_model_name_or_path"),n_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rMe=a("code"),s_r=o("pretrained_model_name_or_path"),l_r=o(":"),i_r=l(),tMe=a("ul"),PE=a("li"),aMe=a("strong"),d_r=o("vilt"),c_r=o(" \u2014 "),UH=a("a"),m_r=o("ViltForQuestionAnswering"),f_r=o(" (ViLT model)"),g_r=l(),BE=a("p"),h_r=o("The model is set in evaluation mode by default using "),nMe=a("code"),u_r=o("model.eval()"),p_r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sMe=a("code"),__r=o("model.train()"),b_r=l(),F(IE.$$.fragment),ZUe=l(),Qd=a("h2"),NE=a("a"),lMe=a("span"),F(fx.$$.fragment),v_r=l(),iMe=a("span"),F_r=o("AutoModelForAudioClassification"),eHe=l(),Uo=a("div"),F(gx.$$.fragment),T_r=l(),Ud=a("p"),M_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),HH=a("a"),E_r=o("from_pretrained()"),C_r=o(" class method or the "),JH=a("a"),w_r=o("from_config()"),A_r=o(` class
method.`),L_r=l(),hx=a("p"),y_r=o("This class cannot be instantiated directly using "),dMe=a("code"),x_r=o("__init__()"),$_r=o(" (throws an error)."),k_r=l(),yt=a("div"),F(ux.$$.fragment),S_r=l(),cMe=a("p"),R_r=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),P_r=l(),Hd=a("p"),B_r=o(`Note:
Loading a model from its configuration file does `),mMe=a("strong"),I_r=o("not"),N_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YH=a("a"),q_r=o("from_pretrained()"),j_r=o(" to load the model weights."),D_r=l(),F(qE.$$.fragment),G_r=l(),go=a("div"),F(px.$$.fragment),O_r=l(),fMe=a("p"),V_r=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),X_r=l(),an=a("p"),z_r=o("The model class to instantiate is selected based on the "),gMe=a("code"),W_r=o("model_type"),Q_r=o(` property of the config object (either
passed as an argument or loaded from `),hMe=a("code"),U_r=o("pretrained_model_name_or_path"),H_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uMe=a("code"),J_r=o("pretrained_model_name_or_path"),Y_r=o(":"),K_r=l(),Pe=a("ul"),jE=a("li"),pMe=a("strong"),Z_r=o("data2vec-audio"),e2r=o(" \u2014 "),KH=a("a"),o2r=o("Data2VecAudioForSequenceClassification"),r2r=o(" (Data2VecAudio model)"),t2r=l(),DE=a("li"),_Me=a("strong"),a2r=o("hubert"),n2r=o(" \u2014 "),ZH=a("a"),s2r=o("HubertForSequenceClassification"),l2r=o(" (Hubert model)"),i2r=l(),GE=a("li"),bMe=a("strong"),d2r=o("sew"),c2r=o(" \u2014 "),eJ=a("a"),m2r=o("SEWForSequenceClassification"),f2r=o(" (SEW model)"),g2r=l(),OE=a("li"),vMe=a("strong"),h2r=o("sew-d"),u2r=o(" \u2014 "),oJ=a("a"),p2r=o("SEWDForSequenceClassification"),_2r=o(" (SEW-D model)"),b2r=l(),VE=a("li"),FMe=a("strong"),v2r=o("unispeech"),F2r=o(" \u2014 "),rJ=a("a"),T2r=o("UniSpeechForSequenceClassification"),M2r=o(" (UniSpeech model)"),E2r=l(),XE=a("li"),TMe=a("strong"),C2r=o("unispeech-sat"),w2r=o(" \u2014 "),tJ=a("a"),A2r=o("UniSpeechSatForSequenceClassification"),L2r=o(" (UniSpeechSat model)"),y2r=l(),zE=a("li"),MMe=a("strong"),x2r=o("wav2vec2"),$2r=o(" \u2014 "),aJ=a("a"),k2r=o("Wav2Vec2ForSequenceClassification"),S2r=o(" (Wav2Vec2 model)"),R2r=l(),WE=a("li"),EMe=a("strong"),P2r=o("wav2vec2-conformer"),B2r=o(" \u2014 "),nJ=a("a"),I2r=o("Wav2Vec2ConformerForSequenceClassification"),N2r=o(" (Wav2Vec2-Conformer model)"),q2r=l(),QE=a("li"),CMe=a("strong"),j2r=o("wavlm"),D2r=o(" \u2014 "),sJ=a("a"),G2r=o("WavLMForSequenceClassification"),O2r=o(" (WavLM model)"),V2r=l(),UE=a("p"),X2r=o("The model is set in evaluation mode by default using "),wMe=a("code"),z2r=o("model.eval()"),W2r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),AMe=a("code"),Q2r=o("model.train()"),U2r=l(),F(HE.$$.fragment),oHe=l(),Jd=a("h2"),JE=a("a"),LMe=a("span"),F(_x.$$.fragment),H2r=l(),yMe=a("span"),J2r=o("AutoModelForAudioFrameClassification"),rHe=l(),Ho=a("div"),F(bx.$$.fragment),Y2r=l(),Yd=a("p"),K2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),lJ=a("a"),Z2r=o("from_pretrained()"),ebr=o(" class method or the "),iJ=a("a"),obr=o("from_config()"),rbr=o(` class
method.`),tbr=l(),vx=a("p"),abr=o("This class cannot be instantiated directly using "),xMe=a("code"),nbr=o("__init__()"),sbr=o(" (throws an error)."),lbr=l(),xt=a("div"),F(Fx.$$.fragment),ibr=l(),$Me=a("p"),dbr=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),cbr=l(),Kd=a("p"),mbr=o(`Note:
Loading a model from its configuration file does `),kMe=a("strong"),fbr=o("not"),gbr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dJ=a("a"),hbr=o("from_pretrained()"),ubr=o(" to load the model weights."),pbr=l(),F(YE.$$.fragment),_br=l(),ho=a("div"),F(Tx.$$.fragment),bbr=l(),SMe=a("p"),vbr=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),Fbr=l(),nn=a("p"),Tbr=o("The model class to instantiate is selected based on the "),RMe=a("code"),Mbr=o("model_type"),Ebr=o(` property of the config object (either
passed as an argument or loaded from `),PMe=a("code"),Cbr=o("pretrained_model_name_or_path"),wbr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),BMe=a("code"),Abr=o("pretrained_model_name_or_path"),Lbr=o(":"),ybr=l(),st=a("ul"),KE=a("li"),IMe=a("strong"),xbr=o("data2vec-audio"),$br=o(" \u2014 "),cJ=a("a"),kbr=o("Data2VecAudioForAudioFrameClassification"),Sbr=o(" (Data2VecAudio model)"),Rbr=l(),ZE=a("li"),NMe=a("strong"),Pbr=o("unispeech-sat"),Bbr=o(" \u2014 "),mJ=a("a"),Ibr=o("UniSpeechSatForAudioFrameClassification"),Nbr=o(" (UniSpeechSat model)"),qbr=l(),e4=a("li"),qMe=a("strong"),jbr=o("wav2vec2"),Dbr=o(" \u2014 "),fJ=a("a"),Gbr=o("Wav2Vec2ForAudioFrameClassification"),Obr=o(" (Wav2Vec2 model)"),Vbr=l(),o4=a("li"),jMe=a("strong"),Xbr=o("wav2vec2-conformer"),zbr=o(" \u2014 "),gJ=a("a"),Wbr=o("Wav2Vec2ConformerForAudioFrameClassification"),Qbr=o(" (Wav2Vec2-Conformer model)"),Ubr=l(),r4=a("li"),DMe=a("strong"),Hbr=o("wavlm"),Jbr=o(" \u2014 "),hJ=a("a"),Ybr=o("WavLMForAudioFrameClassification"),Kbr=o(" (WavLM model)"),Zbr=l(),t4=a("p"),evr=o("The model is set in evaluation mode by default using "),GMe=a("code"),ovr=o("model.eval()"),rvr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),OMe=a("code"),tvr=o("model.train()"),avr=l(),F(a4.$$.fragment),tHe=l(),Zd=a("h2"),n4=a("a"),VMe=a("span"),F(Mx.$$.fragment),nvr=l(),XMe=a("span"),svr=o("AutoModelForCTC"),aHe=l(),Jo=a("div"),F(Ex.$$.fragment),lvr=l(),ec=a("p"),ivr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),uJ=a("a"),dvr=o("from_pretrained()"),cvr=o(" class method or the "),pJ=a("a"),mvr=o("from_config()"),fvr=o(` class
method.`),gvr=l(),Cx=a("p"),hvr=o("This class cannot be instantiated directly using "),zMe=a("code"),uvr=o("__init__()"),pvr=o(" (throws an error)."),_vr=l(),$t=a("div"),F(wx.$$.fragment),bvr=l(),WMe=a("p"),vvr=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Fvr=l(),oc=a("p"),Tvr=o(`Note:
Loading a model from its configuration file does `),QMe=a("strong"),Mvr=o("not"),Evr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_J=a("a"),Cvr=o("from_pretrained()"),wvr=o(" to load the model weights."),Avr=l(),F(s4.$$.fragment),Lvr=l(),uo=a("div"),F(Ax.$$.fragment),yvr=l(),UMe=a("p"),xvr=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),$vr=l(),sn=a("p"),kvr=o("The model class to instantiate is selected based on the "),HMe=a("code"),Svr=o("model_type"),Rvr=o(` property of the config object (either
passed as an argument or loaded from `),JMe=a("code"),Pvr=o("pretrained_model_name_or_path"),Bvr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),YMe=a("code"),Ivr=o("pretrained_model_name_or_path"),Nvr=o(":"),qvr=l(),Le=a("ul"),l4=a("li"),KMe=a("strong"),jvr=o("data2vec-audio"),Dvr=o(" \u2014 "),bJ=a("a"),Gvr=o("Data2VecAudioForCTC"),Ovr=o(" (Data2VecAudio model)"),Vvr=l(),i4=a("li"),ZMe=a("strong"),Xvr=o("hubert"),zvr=o(" \u2014 "),vJ=a("a"),Wvr=o("HubertForCTC"),Qvr=o(" (Hubert model)"),Uvr=l(),d4=a("li"),eEe=a("strong"),Hvr=o("mctct"),Jvr=o(" \u2014 "),FJ=a("a"),Yvr=o("MCTCTForCTC"),Kvr=o(" (M-CTC-T model)"),Zvr=l(),c4=a("li"),oEe=a("strong"),e1r=o("sew"),o1r=o(" \u2014 "),TJ=a("a"),r1r=o("SEWForCTC"),t1r=o(" (SEW model)"),a1r=l(),m4=a("li"),rEe=a("strong"),n1r=o("sew-d"),s1r=o(" \u2014 "),MJ=a("a"),l1r=o("SEWDForCTC"),i1r=o(" (SEW-D model)"),d1r=l(),f4=a("li"),tEe=a("strong"),c1r=o("unispeech"),m1r=o(" \u2014 "),EJ=a("a"),f1r=o("UniSpeechForCTC"),g1r=o(" (UniSpeech model)"),h1r=l(),g4=a("li"),aEe=a("strong"),u1r=o("unispeech-sat"),p1r=o(" \u2014 "),CJ=a("a"),_1r=o("UniSpeechSatForCTC"),b1r=o(" (UniSpeechSat model)"),v1r=l(),h4=a("li"),nEe=a("strong"),F1r=o("wav2vec2"),T1r=o(" \u2014 "),wJ=a("a"),M1r=o("Wav2Vec2ForCTC"),E1r=o(" (Wav2Vec2 model)"),C1r=l(),u4=a("li"),sEe=a("strong"),w1r=o("wav2vec2-conformer"),A1r=o(" \u2014 "),AJ=a("a"),L1r=o("Wav2Vec2ConformerForCTC"),y1r=o(" (Wav2Vec2-Conformer model)"),x1r=l(),p4=a("li"),lEe=a("strong"),$1r=o("wavlm"),k1r=o(" \u2014 "),LJ=a("a"),S1r=o("WavLMForCTC"),R1r=o(" (WavLM model)"),P1r=l(),_4=a("p"),B1r=o("The model is set in evaluation mode by default using "),iEe=a("code"),I1r=o("model.eval()"),N1r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dEe=a("code"),q1r=o("model.train()"),j1r=l(),F(b4.$$.fragment),nHe=l(),rc=a("h2"),v4=a("a"),cEe=a("span"),F(Lx.$$.fragment),D1r=l(),mEe=a("span"),G1r=o("AutoModelForSpeechSeq2Seq"),sHe=l(),Yo=a("div"),F(yx.$$.fragment),O1r=l(),tc=a("p"),V1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),yJ=a("a"),X1r=o("from_pretrained()"),z1r=o(" class method or the "),xJ=a("a"),W1r=o("from_config()"),Q1r=o(` class
method.`),U1r=l(),xx=a("p"),H1r=o("This class cannot be instantiated directly using "),fEe=a("code"),J1r=o("__init__()"),Y1r=o(" (throws an error)."),K1r=l(),kt=a("div"),F($x.$$.fragment),Z1r=l(),gEe=a("p"),eFr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),oFr=l(),ac=a("p"),rFr=o(`Note:
Loading a model from its configuration file does `),hEe=a("strong"),tFr=o("not"),aFr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$J=a("a"),nFr=o("from_pretrained()"),sFr=o(" to load the model weights."),lFr=l(),F(F4.$$.fragment),iFr=l(),po=a("div"),F(kx.$$.fragment),dFr=l(),uEe=a("p"),cFr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),mFr=l(),ln=a("p"),fFr=o("The model class to instantiate is selected based on the "),pEe=a("code"),gFr=o("model_type"),hFr=o(` property of the config object (either
passed as an argument or loaded from `),_Ee=a("code"),uFr=o("pretrained_model_name_or_path"),pFr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bEe=a("code"),_Fr=o("pretrained_model_name_or_path"),bFr=o(":"),vFr=l(),Sx=a("ul"),T4=a("li"),vEe=a("strong"),FFr=o("speech-encoder-decoder"),TFr=o(" \u2014 "),kJ=a("a"),MFr=o("SpeechEncoderDecoderModel"),EFr=o(" (Speech Encoder decoder model)"),CFr=l(),M4=a("li"),FEe=a("strong"),wFr=o("speech_to_text"),AFr=o(" \u2014 "),SJ=a("a"),LFr=o("Speech2TextForConditionalGeneration"),yFr=o(" (Speech2Text model)"),xFr=l(),E4=a("p"),$Fr=o("The model is set in evaluation mode by default using "),TEe=a("code"),kFr=o("model.eval()"),SFr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),MEe=a("code"),RFr=o("model.train()"),PFr=l(),F(C4.$$.fragment),lHe=l(),nc=a("h2"),w4=a("a"),EEe=a("span"),F(Rx.$$.fragment),BFr=l(),CEe=a("span"),IFr=o("AutoModelForAudioXVector"),iHe=l(),Ko=a("div"),F(Px.$$.fragment),NFr=l(),sc=a("p"),qFr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),RJ=a("a"),jFr=o("from_pretrained()"),DFr=o(" class method or the "),PJ=a("a"),GFr=o("from_config()"),OFr=o(` class
method.`),VFr=l(),Bx=a("p"),XFr=o("This class cannot be instantiated directly using "),wEe=a("code"),zFr=o("__init__()"),WFr=o(" (throws an error)."),QFr=l(),St=a("div"),F(Ix.$$.fragment),UFr=l(),AEe=a("p"),HFr=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),JFr=l(),lc=a("p"),YFr=o(`Note:
Loading a model from its configuration file does `),LEe=a("strong"),KFr=o("not"),ZFr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BJ=a("a"),eTr=o("from_pretrained()"),oTr=o(" to load the model weights."),rTr=l(),F(A4.$$.fragment),tTr=l(),_o=a("div"),F(Nx.$$.fragment),aTr=l(),yEe=a("p"),nTr=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),sTr=l(),dn=a("p"),lTr=o("The model class to instantiate is selected based on the "),xEe=a("code"),iTr=o("model_type"),dTr=o(` property of the config object (either
passed as an argument or loaded from `),$Ee=a("code"),cTr=o("pretrained_model_name_or_path"),mTr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kEe=a("code"),fTr=o("pretrained_model_name_or_path"),gTr=o(":"),hTr=l(),lt=a("ul"),L4=a("li"),SEe=a("strong"),uTr=o("data2vec-audio"),pTr=o(" \u2014 "),IJ=a("a"),_Tr=o("Data2VecAudioForXVector"),bTr=o(" (Data2VecAudio model)"),vTr=l(),y4=a("li"),REe=a("strong"),FTr=o("unispeech-sat"),TTr=o(" \u2014 "),NJ=a("a"),MTr=o("UniSpeechSatForXVector"),ETr=o(" (UniSpeechSat model)"),CTr=l(),x4=a("li"),PEe=a("strong"),wTr=o("wav2vec2"),ATr=o(" \u2014 "),qJ=a("a"),LTr=o("Wav2Vec2ForXVector"),yTr=o(" (Wav2Vec2 model)"),xTr=l(),$4=a("li"),BEe=a("strong"),$Tr=o("wav2vec2-conformer"),kTr=o(" \u2014 "),jJ=a("a"),STr=o("Wav2Vec2ConformerForXVector"),RTr=o(" (Wav2Vec2-Conformer model)"),PTr=l(),k4=a("li"),IEe=a("strong"),BTr=o("wavlm"),ITr=o(" \u2014 "),DJ=a("a"),NTr=o("WavLMForXVector"),qTr=o(" (WavLM model)"),jTr=l(),S4=a("p"),DTr=o("The model is set in evaluation mode by default using "),NEe=a("code"),GTr=o("model.eval()"),OTr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qEe=a("code"),VTr=o("model.train()"),XTr=l(),F(R4.$$.fragment),dHe=l(),ic=a("h2"),P4=a("a"),jEe=a("span"),F(qx.$$.fragment),zTr=l(),DEe=a("span"),WTr=o("AutoModelForMaskedImageModeling"),cHe=l(),Zo=a("div"),F(jx.$$.fragment),QTr=l(),dc=a("p"),UTr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),GJ=a("a"),HTr=o("from_pretrained()"),JTr=o(" class method or the "),OJ=a("a"),YTr=o("from_config()"),KTr=o(` class
method.`),ZTr=l(),Dx=a("p"),eMr=o("This class cannot be instantiated directly using "),GEe=a("code"),oMr=o("__init__()"),rMr=o(" (throws an error)."),tMr=l(),Rt=a("div"),F(Gx.$$.fragment),aMr=l(),OEe=a("p"),nMr=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),sMr=l(),cc=a("p"),lMr=o(`Note:
Loading a model from its configuration file does `),VEe=a("strong"),iMr=o("not"),dMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VJ=a("a"),cMr=o("from_pretrained()"),mMr=o(" to load the model weights."),fMr=l(),F(B4.$$.fragment),gMr=l(),bo=a("div"),F(Ox.$$.fragment),hMr=l(),XEe=a("p"),uMr=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),pMr=l(),cn=a("p"),_Mr=o("The model class to instantiate is selected based on the "),zEe=a("code"),bMr=o("model_type"),vMr=o(` property of the config object (either
passed as an argument or loaded from `),WEe=a("code"),FMr=o("pretrained_model_name_or_path"),TMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),QEe=a("code"),MMr=o("pretrained_model_name_or_path"),EMr=o(":"),CMr=l(),mn=a("ul"),I4=a("li"),UEe=a("strong"),wMr=o("deit"),AMr=o(" \u2014 "),XJ=a("a"),LMr=o("DeiTForMaskedImageModeling"),yMr=o(" (DeiT model)"),xMr=l(),N4=a("li"),HEe=a("strong"),$Mr=o("swin"),kMr=o(" \u2014 "),zJ=a("a"),SMr=o("SwinForMaskedImageModeling"),RMr=o(" (Swin Transformer model)"),PMr=l(),q4=a("li"),JEe=a("strong"),BMr=o("swinv2"),IMr=o(" \u2014 "),WJ=a("a"),NMr=o("Swinv2ForMaskedImageModeling"),qMr=o(" (Swin Transformer V2 model)"),jMr=l(),j4=a("li"),YEe=a("strong"),DMr=o("vit"),GMr=o(" \u2014 "),QJ=a("a"),OMr=o("ViTForMaskedImageModeling"),VMr=o(" (ViT model)"),XMr=l(),D4=a("p"),zMr=o("The model is set in evaluation mode by default using "),KEe=a("code"),WMr=o("model.eval()"),QMr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ZEe=a("code"),UMr=o("model.train()"),HMr=l(),F(G4.$$.fragment),mHe=l(),mc=a("h2"),O4=a("a"),e4e=a("span"),F(Vx.$$.fragment),JMr=l(),o4e=a("span"),YMr=o("AutoModelForObjectDetection"),fHe=l(),er=a("div"),F(Xx.$$.fragment),KMr=l(),fc=a("p"),ZMr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),UJ=a("a"),eEr=o("from_pretrained()"),oEr=o(" class method or the "),HJ=a("a"),rEr=o("from_config()"),tEr=o(` class
method.`),aEr=l(),zx=a("p"),nEr=o("This class cannot be instantiated directly using "),r4e=a("code"),sEr=o("__init__()"),lEr=o(" (throws an error)."),iEr=l(),Pt=a("div"),F(Wx.$$.fragment),dEr=l(),t4e=a("p"),cEr=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),mEr=l(),gc=a("p"),fEr=o(`Note:
Loading a model from its configuration file does `),a4e=a("strong"),gEr=o("not"),hEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JJ=a("a"),uEr=o("from_pretrained()"),pEr=o(" to load the model weights."),_Er=l(),F(V4.$$.fragment),bEr=l(),vo=a("div"),F(Qx.$$.fragment),vEr=l(),n4e=a("p"),FEr=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),TEr=l(),fn=a("p"),MEr=o("The model class to instantiate is selected based on the "),s4e=a("code"),EEr=o("model_type"),CEr=o(` property of the config object (either
passed as an argument or loaded from `),l4e=a("code"),wEr=o("pretrained_model_name_or_path"),AEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i4e=a("code"),LEr=o("pretrained_model_name_or_path"),yEr=o(":"),xEr=l(),Ux=a("ul"),X4=a("li"),d4e=a("strong"),$Er=o("detr"),kEr=o(" \u2014 "),YJ=a("a"),SEr=o("DetrForObjectDetection"),REr=o(" (DETR model)"),PEr=l(),z4=a("li"),c4e=a("strong"),BEr=o("yolos"),IEr=o(" \u2014 "),KJ=a("a"),NEr=o("YolosForObjectDetection"),qEr=o(" (YOLOS model)"),jEr=l(),W4=a("p"),DEr=o("The model is set in evaluation mode by default using "),m4e=a("code"),GEr=o("model.eval()"),OEr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),f4e=a("code"),VEr=o("model.train()"),XEr=l(),F(Q4.$$.fragment),gHe=l(),hc=a("h2"),U4=a("a"),g4e=a("span"),F(Hx.$$.fragment),zEr=l(),h4e=a("span"),WEr=o("AutoModelForImageSegmentation"),hHe=l(),or=a("div"),F(Jx.$$.fragment),QEr=l(),uc=a("p"),UEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),ZJ=a("a"),HEr=o("from_pretrained()"),JEr=o(" class method or the "),eY=a("a"),YEr=o("from_config()"),KEr=o(` class
method.`),ZEr=l(),Yx=a("p"),e4r=o("This class cannot be instantiated directly using "),u4e=a("code"),o4r=o("__init__()"),r4r=o(" (throws an error)."),t4r=l(),Bt=a("div"),F(Kx.$$.fragment),a4r=l(),p4e=a("p"),n4r=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),s4r=l(),pc=a("p"),l4r=o(`Note:
Loading a model from its configuration file does `),_4e=a("strong"),i4r=o("not"),d4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oY=a("a"),c4r=o("from_pretrained()"),m4r=o(" to load the model weights."),f4r=l(),F(H4.$$.fragment),g4r=l(),Fo=a("div"),F(Zx.$$.fragment),h4r=l(),b4e=a("p"),u4r=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),p4r=l(),gn=a("p"),_4r=o("The model class to instantiate is selected based on the "),v4e=a("code"),b4r=o("model_type"),v4r=o(` property of the config object (either
passed as an argument or loaded from `),F4e=a("code"),F4r=o("pretrained_model_name_or_path"),T4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T4e=a("code"),M4r=o("pretrained_model_name_or_path"),E4r=o(":"),C4r=l(),M4e=a("ul"),J4=a("li"),E4e=a("strong"),w4r=o("detr"),A4r=o(" \u2014 "),rY=a("a"),L4r=o("DetrForSegmentation"),y4r=o(" (DETR model)"),x4r=l(),Y4=a("p"),$4r=o("The model is set in evaluation mode by default using "),C4e=a("code"),k4r=o("model.eval()"),S4r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),w4e=a("code"),R4r=o("model.train()"),P4r=l(),F(K4.$$.fragment),uHe=l(),_c=a("h2"),Z4=a("a"),A4e=a("span"),F(e$.$$.fragment),B4r=l(),L4e=a("span"),I4r=o("AutoModelForSemanticSegmentation"),pHe=l(),rr=a("div"),F(o$.$$.fragment),N4r=l(),bc=a("p"),q4r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),tY=a("a"),j4r=o("from_pretrained()"),D4r=o(" class method or the "),aY=a("a"),G4r=o("from_config()"),O4r=o(` class
method.`),V4r=l(),r$=a("p"),X4r=o("This class cannot be instantiated directly using "),y4e=a("code"),z4r=o("__init__()"),W4r=o(" (throws an error)."),Q4r=l(),It=a("div"),F(t$.$$.fragment),U4r=l(),x4e=a("p"),H4r=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),J4r=l(),vc=a("p"),Y4r=o(`Note:
Loading a model from its configuration file does `),$4e=a("strong"),K4r=o("not"),Z4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nY=a("a"),eCr=o("from_pretrained()"),oCr=o(" to load the model weights."),rCr=l(),F(eC.$$.fragment),tCr=l(),To=a("div"),F(a$.$$.fragment),aCr=l(),k4e=a("p"),nCr=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),sCr=l(),hn=a("p"),lCr=o("The model class to instantiate is selected based on the "),S4e=a("code"),iCr=o("model_type"),dCr=o(` property of the config object (either
passed as an argument or loaded from `),R4e=a("code"),cCr=o("pretrained_model_name_or_path"),mCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P4e=a("code"),fCr=o("pretrained_model_name_or_path"),gCr=o(":"),hCr=l(),it=a("ul"),oC=a("li"),B4e=a("strong"),uCr=o("beit"),pCr=o(" \u2014 "),sY=a("a"),_Cr=o("BeitForSemanticSegmentation"),bCr=o(" (BEiT model)"),vCr=l(),rC=a("li"),I4e=a("strong"),FCr=o("data2vec-vision"),TCr=o(" \u2014 "),lY=a("a"),MCr=o("Data2VecVisionForSemanticSegmentation"),ECr=o(" (Data2VecVision model)"),CCr=l(),tC=a("li"),N4e=a("strong"),wCr=o("dpt"),ACr=o(" \u2014 "),iY=a("a"),LCr=o("DPTForSemanticSegmentation"),yCr=o(" (DPT model)"),xCr=l(),aC=a("li"),q4e=a("strong"),$Cr=o("mobilevit"),kCr=o(" \u2014 "),dY=a("a"),SCr=o("MobileViTForSemanticSegmentation"),RCr=o(" (MobileViT model)"),PCr=l(),nC=a("li"),j4e=a("strong"),BCr=o("segformer"),ICr=o(" \u2014 "),cY=a("a"),NCr=o("SegformerForSemanticSegmentation"),qCr=o(" (SegFormer model)"),jCr=l(),sC=a("p"),DCr=o("The model is set in evaluation mode by default using "),D4e=a("code"),GCr=o("model.eval()"),OCr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),G4e=a("code"),VCr=o("model.train()"),XCr=l(),F(lC.$$.fragment),_He=l(),Fc=a("h2"),iC=a("a"),O4e=a("span"),F(n$.$$.fragment),zCr=l(),V4e=a("span"),WCr=o("AutoModelForInstanceSegmentation"),bHe=l(),tr=a("div"),F(s$.$$.fragment),QCr=l(),Tc=a("p"),UCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),mY=a("a"),HCr=o("from_pretrained()"),JCr=o(" class method or the "),fY=a("a"),YCr=o("from_config()"),KCr=o(` class
method.`),ZCr=l(),l$=a("p"),e3r=o("This class cannot be instantiated directly using "),X4e=a("code"),o3r=o("__init__()"),r3r=o(" (throws an error)."),t3r=l(),Nt=a("div"),F(i$.$$.fragment),a3r=l(),z4e=a("p"),n3r=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),s3r=l(),Mc=a("p"),l3r=o(`Note:
Loading a model from its configuration file does `),W4e=a("strong"),i3r=o("not"),d3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gY=a("a"),c3r=o("from_pretrained()"),m3r=o(" to load the model weights."),f3r=l(),F(dC.$$.fragment),g3r=l(),Mo=a("div"),F(d$.$$.fragment),h3r=l(),Q4e=a("p"),u3r=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),p3r=l(),un=a("p"),_3r=o("The model class to instantiate is selected based on the "),U4e=a("code"),b3r=o("model_type"),v3r=o(` property of the config object (either
passed as an argument or loaded from `),H4e=a("code"),F3r=o("pretrained_model_name_or_path"),T3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J4e=a("code"),M3r=o("pretrained_model_name_or_path"),E3r=o(":"),C3r=l(),Y4e=a("ul"),cC=a("li"),K4e=a("strong"),w3r=o("maskformer"),A3r=o(" \u2014 "),hY=a("a"),L3r=o("MaskFormerForInstanceSegmentation"),y3r=o(" (MaskFormer model)"),x3r=l(),mC=a("p"),$3r=o("The model is set in evaluation mode by default using "),Z4e=a("code"),k3r=o("model.eval()"),S3r=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),eCe=a("code"),R3r=o("model.train()"),P3r=l(),F(fC.$$.fragment),vHe=l(),Ec=a("h2"),gC=a("a"),oCe=a("span"),F(c$.$$.fragment),B3r=l(),rCe=a("span"),I3r=o("TFAutoModel"),FHe=l(),ar=a("div"),F(m$.$$.fragment),N3r=l(),Cc=a("p"),q3r=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),uY=a("a"),j3r=o("from_pretrained()"),D3r=o(" class method or the "),pY=a("a"),G3r=o("from_config()"),O3r=o(` class
method.`),V3r=l(),f$=a("p"),X3r=o("This class cannot be instantiated directly using "),tCe=a("code"),z3r=o("__init__()"),W3r=o(" (throws an error)."),Q3r=l(),qt=a("div"),F(g$.$$.fragment),U3r=l(),aCe=a("p"),H3r=o("Instantiates one of the base model classes of the library from a configuration."),J3r=l(),wc=a("p"),Y3r=o(`Note:
Loading a model from its configuration file does `),nCe=a("strong"),K3r=o("not"),Z3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_Y=a("a"),e5r=o("from_pretrained()"),o5r=o(" to load the model weights."),r5r=l(),F(hC.$$.fragment),t5r=l(),Rr=a("div"),F(h$.$$.fragment),a5r=l(),sCe=a("p"),n5r=o("Instantiate one of the base model classes of the library from a pretrained model."),s5r=l(),pn=a("p"),l5r=o("The model class to instantiate is selected based on the "),lCe=a("code"),i5r=o("model_type"),d5r=o(` property of the config object (either
passed as an argument or loaded from `),iCe=a("code"),c5r=o("pretrained_model_name_or_path"),m5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dCe=a("code"),f5r=o("pretrained_model_name_or_path"),g5r=o(":"),h5r=l(),B=a("ul"),uC=a("li"),cCe=a("strong"),u5r=o("albert"),p5r=o(" \u2014 "),bY=a("a"),_5r=o("TFAlbertModel"),b5r=o(" (ALBERT model)"),v5r=l(),pC=a("li"),mCe=a("strong"),F5r=o("bart"),T5r=o(" \u2014 "),vY=a("a"),M5r=o("TFBartModel"),E5r=o(" (BART model)"),C5r=l(),_C=a("li"),fCe=a("strong"),w5r=o("bert"),A5r=o(" \u2014 "),FY=a("a"),L5r=o("TFBertModel"),y5r=o(" (BERT model)"),x5r=l(),bC=a("li"),gCe=a("strong"),$5r=o("blenderbot"),k5r=o(" \u2014 "),TY=a("a"),S5r=o("TFBlenderbotModel"),R5r=o(" (Blenderbot model)"),P5r=l(),vC=a("li"),hCe=a("strong"),B5r=o("blenderbot-small"),I5r=o(" \u2014 "),MY=a("a"),N5r=o("TFBlenderbotSmallModel"),q5r=o(" (BlenderbotSmall model)"),j5r=l(),FC=a("li"),uCe=a("strong"),D5r=o("camembert"),G5r=o(" \u2014 "),EY=a("a"),O5r=o("TFCamembertModel"),V5r=o(" (CamemBERT model)"),X5r=l(),TC=a("li"),pCe=a("strong"),z5r=o("clip"),W5r=o(" \u2014 "),CY=a("a"),Q5r=o("TFCLIPModel"),U5r=o(" (CLIP model)"),H5r=l(),MC=a("li"),_Ce=a("strong"),J5r=o("convbert"),Y5r=o(" \u2014 "),wY=a("a"),K5r=o("TFConvBertModel"),Z5r=o(" (ConvBERT model)"),e0r=l(),EC=a("li"),bCe=a("strong"),o0r=o("convnext"),r0r=o(" \u2014 "),AY=a("a"),t0r=o("TFConvNextModel"),a0r=o(" (ConvNeXT model)"),n0r=l(),CC=a("li"),vCe=a("strong"),s0r=o("ctrl"),l0r=o(" \u2014 "),LY=a("a"),i0r=o("TFCTRLModel"),d0r=o(" (CTRL model)"),c0r=l(),wC=a("li"),FCe=a("strong"),m0r=o("data2vec-vision"),f0r=o(" \u2014 "),yY=a("a"),g0r=o("TFData2VecVisionModel"),h0r=o(" (Data2VecVision model)"),u0r=l(),AC=a("li"),TCe=a("strong"),p0r=o("deberta"),_0r=o(" \u2014 "),xY=a("a"),b0r=o("TFDebertaModel"),v0r=o(" (DeBERTa model)"),F0r=l(),LC=a("li"),MCe=a("strong"),T0r=o("deberta-v2"),M0r=o(" \u2014 "),$Y=a("a"),E0r=o("TFDebertaV2Model"),C0r=o(" (DeBERTa-v2 model)"),w0r=l(),yC=a("li"),ECe=a("strong"),A0r=o("deit"),L0r=o(" \u2014 "),kY=a("a"),y0r=o("TFDeiTModel"),x0r=o(" (DeiT model)"),$0r=l(),xC=a("li"),CCe=a("strong"),k0r=o("distilbert"),S0r=o(" \u2014 "),SY=a("a"),R0r=o("TFDistilBertModel"),P0r=o(" (DistilBERT model)"),B0r=l(),$C=a("li"),wCe=a("strong"),I0r=o("dpr"),N0r=o(" \u2014 "),RY=a("a"),q0r=o("TFDPRQuestionEncoder"),j0r=o(" (DPR model)"),D0r=l(),kC=a("li"),ACe=a("strong"),G0r=o("electra"),O0r=o(" \u2014 "),PY=a("a"),V0r=o("TFElectraModel"),X0r=o(" (ELECTRA model)"),z0r=l(),SC=a("li"),LCe=a("strong"),W0r=o("flaubert"),Q0r=o(" \u2014 "),BY=a("a"),U0r=o("TFFlaubertModel"),H0r=o(" (FlauBERT model)"),J0r=l(),il=a("li"),yCe=a("strong"),Y0r=o("funnel"),K0r=o(" \u2014 "),IY=a("a"),Z0r=o("TFFunnelModel"),ewr=o(" or "),NY=a("a"),owr=o("TFFunnelBaseModel"),rwr=o(" (Funnel Transformer model)"),twr=l(),RC=a("li"),xCe=a("strong"),awr=o("gpt2"),nwr=o(" \u2014 "),qY=a("a"),swr=o("TFGPT2Model"),lwr=o(" (OpenAI GPT-2 model)"),iwr=l(),PC=a("li"),$Ce=a("strong"),dwr=o("gptj"),cwr=o(" \u2014 "),jY=a("a"),mwr=o("TFGPTJModel"),fwr=o(" (GPT-J model)"),gwr=l(),BC=a("li"),kCe=a("strong"),hwr=o("hubert"),uwr=o(" \u2014 "),DY=a("a"),pwr=o("TFHubertModel"),_wr=o(" (Hubert model)"),bwr=l(),IC=a("li"),SCe=a("strong"),vwr=o("layoutlm"),Fwr=o(" \u2014 "),GY=a("a"),Twr=o("TFLayoutLMModel"),Mwr=o(" (LayoutLM model)"),Ewr=l(),NC=a("li"),RCe=a("strong"),Cwr=o("layoutlmv3"),wwr=o(" \u2014 "),OY=a("a"),Awr=o("TFLayoutLMv3Model"),Lwr=o(" (LayoutLMv3 model)"),ywr=l(),qC=a("li"),PCe=a("strong"),xwr=o("led"),$wr=o(" \u2014 "),VY=a("a"),kwr=o("TFLEDModel"),Swr=o(" (LED model)"),Rwr=l(),jC=a("li"),BCe=a("strong"),Pwr=o("longformer"),Bwr=o(" \u2014 "),XY=a("a"),Iwr=o("TFLongformerModel"),Nwr=o(" (Longformer model)"),qwr=l(),DC=a("li"),ICe=a("strong"),jwr=o("lxmert"),Dwr=o(" \u2014 "),zY=a("a"),Gwr=o("TFLxmertModel"),Owr=o(" (LXMERT model)"),Vwr=l(),GC=a("li"),NCe=a("strong"),Xwr=o("marian"),zwr=o(" \u2014 "),WY=a("a"),Wwr=o("TFMarianModel"),Qwr=o(" (Marian model)"),Uwr=l(),OC=a("li"),qCe=a("strong"),Hwr=o("mbart"),Jwr=o(" \u2014 "),QY=a("a"),Ywr=o("TFMBartModel"),Kwr=o(" (mBART model)"),Zwr=l(),VC=a("li"),jCe=a("strong"),e6r=o("mobilebert"),o6r=o(" \u2014 "),UY=a("a"),r6r=o("TFMobileBertModel"),t6r=o(" (MobileBERT model)"),a6r=l(),XC=a("li"),DCe=a("strong"),n6r=o("mpnet"),s6r=o(" \u2014 "),HY=a("a"),l6r=o("TFMPNetModel"),i6r=o(" (MPNet model)"),d6r=l(),zC=a("li"),GCe=a("strong"),c6r=o("mt5"),m6r=o(" \u2014 "),JY=a("a"),f6r=o("TFMT5Model"),g6r=o(" (MT5 model)"),h6r=l(),WC=a("li"),OCe=a("strong"),u6r=o("openai-gpt"),p6r=o(" \u2014 "),YY=a("a"),_6r=o("TFOpenAIGPTModel"),b6r=o(" (OpenAI GPT model)"),v6r=l(),QC=a("li"),VCe=a("strong"),F6r=o("opt"),T6r=o(" \u2014 "),KY=a("a"),M6r=o("TFOPTModel"),E6r=o(" (OPT model)"),C6r=l(),UC=a("li"),XCe=a("strong"),w6r=o("pegasus"),A6r=o(" \u2014 "),ZY=a("a"),L6r=o("TFPegasusModel"),y6r=o(" (Pegasus model)"),x6r=l(),HC=a("li"),zCe=a("strong"),$6r=o("regnet"),k6r=o(" \u2014 "),eK=a("a"),S6r=o("TFRegNetModel"),R6r=o(" (RegNet model)"),P6r=l(),JC=a("li"),WCe=a("strong"),B6r=o("rembert"),I6r=o(" \u2014 "),oK=a("a"),N6r=o("TFRemBertModel"),q6r=o(" (RemBERT model)"),j6r=l(),YC=a("li"),QCe=a("strong"),D6r=o("resnet"),G6r=o(" \u2014 "),rK=a("a"),O6r=o("TFResNetModel"),V6r=o(" (ResNet model)"),X6r=l(),KC=a("li"),UCe=a("strong"),z6r=o("roberta"),W6r=o(" \u2014 "),tK=a("a"),Q6r=o("TFRobertaModel"),U6r=o(" (RoBERTa model)"),H6r=l(),ZC=a("li"),HCe=a("strong"),J6r=o("roformer"),Y6r=o(" \u2014 "),aK=a("a"),K6r=o("TFRoFormerModel"),Z6r=o(" (RoFormer model)"),eAr=l(),e3=a("li"),JCe=a("strong"),oAr=o("segformer"),rAr=o(" \u2014 "),nK=a("a"),tAr=o("TFSegformerModel"),aAr=o(" (SegFormer model)"),nAr=l(),o3=a("li"),YCe=a("strong"),sAr=o("speech_to_text"),lAr=o(" \u2014 "),sK=a("a"),iAr=o("TFSpeech2TextModel"),dAr=o(" (Speech2Text model)"),cAr=l(),r3=a("li"),KCe=a("strong"),mAr=o("swin"),fAr=o(" \u2014 "),lK=a("a"),gAr=o("TFSwinModel"),hAr=o(" (Swin Transformer model)"),uAr=l(),t3=a("li"),ZCe=a("strong"),pAr=o("t5"),_Ar=o(" \u2014 "),iK=a("a"),bAr=o("TFT5Model"),vAr=o(" (T5 model)"),FAr=l(),a3=a("li"),e3e=a("strong"),TAr=o("tapas"),MAr=o(" \u2014 "),dK=a("a"),EAr=o("TFTapasModel"),CAr=o(" (TAPAS model)"),wAr=l(),n3=a("li"),o3e=a("strong"),AAr=o("transfo-xl"),LAr=o(" \u2014 "),cK=a("a"),yAr=o("TFTransfoXLModel"),xAr=o(" (Transformer-XL model)"),$Ar=l(),s3=a("li"),r3e=a("strong"),kAr=o("vit"),SAr=o(" \u2014 "),mK=a("a"),RAr=o("TFViTModel"),PAr=o(" (ViT model)"),BAr=l(),l3=a("li"),t3e=a("strong"),IAr=o("vit_mae"),NAr=o(" \u2014 "),fK=a("a"),qAr=o("TFViTMAEModel"),jAr=o(" (ViTMAE model)"),DAr=l(),i3=a("li"),a3e=a("strong"),GAr=o("wav2vec2"),OAr=o(" \u2014 "),gK=a("a"),VAr=o("TFWav2Vec2Model"),XAr=o(" (Wav2Vec2 model)"),zAr=l(),d3=a("li"),n3e=a("strong"),WAr=o("xglm"),QAr=o(" \u2014 "),hK=a("a"),UAr=o("TFXGLMModel"),HAr=o(" (XGLM model)"),JAr=l(),c3=a("li"),s3e=a("strong"),YAr=o("xlm"),KAr=o(" \u2014 "),uK=a("a"),ZAr=o("TFXLMModel"),e7r=o(" (XLM model)"),o7r=l(),m3=a("li"),l3e=a("strong"),r7r=o("xlm-roberta"),t7r=o(" \u2014 "),pK=a("a"),a7r=o("TFXLMRobertaModel"),n7r=o(" (XLM-RoBERTa model)"),s7r=l(),f3=a("li"),i3e=a("strong"),l7r=o("xlnet"),i7r=o(" \u2014 "),_K=a("a"),d7r=o("TFXLNetModel"),c7r=o(" (XLNet model)"),m7r=l(),F(g3.$$.fragment),THe=l(),Ac=a("h2"),h3=a("a"),d3e=a("span"),F(u$.$$.fragment),f7r=l(),c3e=a("span"),g7r=o("TFAutoModelForPreTraining"),MHe=l(),nr=a("div"),F(p$.$$.fragment),h7r=l(),Lc=a("p"),u7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),bK=a("a"),p7r=o("from_pretrained()"),_7r=o(" class method or the "),vK=a("a"),b7r=o("from_config()"),v7r=o(` class
method.`),F7r=l(),_$=a("p"),T7r=o("This class cannot be instantiated directly using "),m3e=a("code"),M7r=o("__init__()"),E7r=o(" (throws an error)."),C7r=l(),jt=a("div"),F(b$.$$.fragment),w7r=l(),f3e=a("p"),A7r=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),L7r=l(),yc=a("p"),y7r=o(`Note:
Loading a model from its configuration file does `),g3e=a("strong"),x7r=o("not"),$7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FK=a("a"),k7r=o("from_pretrained()"),S7r=o(" to load the model weights."),R7r=l(),F(u3.$$.fragment),P7r=l(),Pr=a("div"),F(v$.$$.fragment),B7r=l(),h3e=a("p"),I7r=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),N7r=l(),_n=a("p"),q7r=o("The model class to instantiate is selected based on the "),u3e=a("code"),j7r=o("model_type"),D7r=o(` property of the config object (either
passed as an argument or loaded from `),p3e=a("code"),G7r=o("pretrained_model_name_or_path"),O7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_3e=a("code"),V7r=o("pretrained_model_name_or_path"),X7r=o(":"),z7r=l(),se=a("ul"),p3=a("li"),b3e=a("strong"),W7r=o("albert"),Q7r=o(" \u2014 "),TK=a("a"),U7r=o("TFAlbertForPreTraining"),H7r=o(" (ALBERT model)"),J7r=l(),_3=a("li"),v3e=a("strong"),Y7r=o("bart"),K7r=o(" \u2014 "),MK=a("a"),Z7r=o("TFBartForConditionalGeneration"),eLr=o(" (BART model)"),oLr=l(),b3=a("li"),F3e=a("strong"),rLr=o("bert"),tLr=o(" \u2014 "),EK=a("a"),aLr=o("TFBertForPreTraining"),nLr=o(" (BERT model)"),sLr=l(),v3=a("li"),T3e=a("strong"),lLr=o("camembert"),iLr=o(" \u2014 "),CK=a("a"),dLr=o("TFCamembertForMaskedLM"),cLr=o(" (CamemBERT model)"),mLr=l(),F3=a("li"),M3e=a("strong"),fLr=o("ctrl"),gLr=o(" \u2014 "),wK=a("a"),hLr=o("TFCTRLLMHeadModel"),uLr=o(" (CTRL model)"),pLr=l(),T3=a("li"),E3e=a("strong"),_Lr=o("distilbert"),bLr=o(" \u2014 "),AK=a("a"),vLr=o("TFDistilBertForMaskedLM"),FLr=o(" (DistilBERT model)"),TLr=l(),M3=a("li"),C3e=a("strong"),MLr=o("electra"),ELr=o(" \u2014 "),LK=a("a"),CLr=o("TFElectraForPreTraining"),wLr=o(" (ELECTRA model)"),ALr=l(),E3=a("li"),w3e=a("strong"),LLr=o("flaubert"),yLr=o(" \u2014 "),yK=a("a"),xLr=o("TFFlaubertWithLMHeadModel"),$Lr=o(" (FlauBERT model)"),kLr=l(),C3=a("li"),A3e=a("strong"),SLr=o("funnel"),RLr=o(" \u2014 "),xK=a("a"),PLr=o("TFFunnelForPreTraining"),BLr=o(" (Funnel Transformer model)"),ILr=l(),w3=a("li"),L3e=a("strong"),NLr=o("gpt2"),qLr=o(" \u2014 "),$K=a("a"),jLr=o("TFGPT2LMHeadModel"),DLr=o(" (OpenAI GPT-2 model)"),GLr=l(),A3=a("li"),y3e=a("strong"),OLr=o("layoutlm"),VLr=o(" \u2014 "),kK=a("a"),XLr=o("TFLayoutLMForMaskedLM"),zLr=o(" (LayoutLM model)"),WLr=l(),L3=a("li"),x3e=a("strong"),QLr=o("lxmert"),ULr=o(" \u2014 "),SK=a("a"),HLr=o("TFLxmertForPreTraining"),JLr=o(" (LXMERT model)"),YLr=l(),y3=a("li"),$3e=a("strong"),KLr=o("mobilebert"),ZLr=o(" \u2014 "),RK=a("a"),eyr=o("TFMobileBertForPreTraining"),oyr=o(" (MobileBERT model)"),ryr=l(),x3=a("li"),k3e=a("strong"),tyr=o("mpnet"),ayr=o(" \u2014 "),PK=a("a"),nyr=o("TFMPNetForMaskedLM"),syr=o(" (MPNet model)"),lyr=l(),$3=a("li"),S3e=a("strong"),iyr=o("openai-gpt"),dyr=o(" \u2014 "),BK=a("a"),cyr=o("TFOpenAIGPTLMHeadModel"),myr=o(" (OpenAI GPT model)"),fyr=l(),k3=a("li"),R3e=a("strong"),gyr=o("roberta"),hyr=o(" \u2014 "),IK=a("a"),uyr=o("TFRobertaForMaskedLM"),pyr=o(" (RoBERTa model)"),_yr=l(),S3=a("li"),P3e=a("strong"),byr=o("t5"),vyr=o(" \u2014 "),NK=a("a"),Fyr=o("TFT5ForConditionalGeneration"),Tyr=o(" (T5 model)"),Myr=l(),R3=a("li"),B3e=a("strong"),Eyr=o("tapas"),Cyr=o(" \u2014 "),qK=a("a"),wyr=o("TFTapasForMaskedLM"),Ayr=o(" (TAPAS model)"),Lyr=l(),P3=a("li"),I3e=a("strong"),yyr=o("transfo-xl"),xyr=o(" \u2014 "),jK=a("a"),$yr=o("TFTransfoXLLMHeadModel"),kyr=o(" (Transformer-XL model)"),Syr=l(),B3=a("li"),N3e=a("strong"),Ryr=o("vit_mae"),Pyr=o(" \u2014 "),DK=a("a"),Byr=o("TFViTMAEForPreTraining"),Iyr=o(" (ViTMAE model)"),Nyr=l(),I3=a("li"),q3e=a("strong"),qyr=o("xlm"),jyr=o(" \u2014 "),GK=a("a"),Dyr=o("TFXLMWithLMHeadModel"),Gyr=o(" (XLM model)"),Oyr=l(),N3=a("li"),j3e=a("strong"),Vyr=o("xlm-roberta"),Xyr=o(" \u2014 "),OK=a("a"),zyr=o("TFXLMRobertaForMaskedLM"),Wyr=o(" (XLM-RoBERTa model)"),Qyr=l(),q3=a("li"),D3e=a("strong"),Uyr=o("xlnet"),Hyr=o(" \u2014 "),VK=a("a"),Jyr=o("TFXLNetLMHeadModel"),Yyr=o(" (XLNet model)"),Kyr=l(),F(j3.$$.fragment),EHe=l(),xc=a("h2"),D3=a("a"),G3e=a("span"),F(F$.$$.fragment),Zyr=l(),O3e=a("span"),e8r=o("TFAutoModelForCausalLM"),CHe=l(),sr=a("div"),F(T$.$$.fragment),o8r=l(),$c=a("p"),r8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),XK=a("a"),t8r=o("from_pretrained()"),a8r=o(" class method or the "),zK=a("a"),n8r=o("from_config()"),s8r=o(` class
method.`),l8r=l(),M$=a("p"),i8r=o("This class cannot be instantiated directly using "),V3e=a("code"),d8r=o("__init__()"),c8r=o(" (throws an error)."),m8r=l(),Dt=a("div"),F(E$.$$.fragment),f8r=l(),X3e=a("p"),g8r=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),h8r=l(),kc=a("p"),u8r=o(`Note:
Loading a model from its configuration file does `),z3e=a("strong"),p8r=o("not"),_8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WK=a("a"),b8r=o("from_pretrained()"),v8r=o(" to load the model weights."),F8r=l(),F(G3.$$.fragment),T8r=l(),Br=a("div"),F(C$.$$.fragment),M8r=l(),W3e=a("p"),E8r=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),C8r=l(),bn=a("p"),w8r=o("The model class to instantiate is selected based on the "),Q3e=a("code"),A8r=o("model_type"),L8r=o(` property of the config object (either
passed as an argument or loaded from `),U3e=a("code"),y8r=o("pretrained_model_name_or_path"),x8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H3e=a("code"),$8r=o("pretrained_model_name_or_path"),k8r=o(":"),S8r=l(),Me=a("ul"),O3=a("li"),J3e=a("strong"),R8r=o("bert"),P8r=o(" \u2014 "),QK=a("a"),B8r=o("TFBertLMHeadModel"),I8r=o(" (BERT model)"),N8r=l(),V3=a("li"),Y3e=a("strong"),q8r=o("camembert"),j8r=o(" \u2014 "),UK=a("a"),D8r=o("TFCamembertForCausalLM"),G8r=o(" (CamemBERT model)"),O8r=l(),X3=a("li"),K3e=a("strong"),V8r=o("ctrl"),X8r=o(" \u2014 "),HK=a("a"),z8r=o("TFCTRLLMHeadModel"),W8r=o(" (CTRL model)"),Q8r=l(),z3=a("li"),Z3e=a("strong"),U8r=o("gpt2"),H8r=o(" \u2014 "),JK=a("a"),J8r=o("TFGPT2LMHeadModel"),Y8r=o(" (OpenAI GPT-2 model)"),K8r=l(),W3=a("li"),e5e=a("strong"),Z8r=o("gptj"),e9r=o(" \u2014 "),YK=a("a"),o9r=o("TFGPTJForCausalLM"),r9r=o(" (GPT-J model)"),t9r=l(),Q3=a("li"),o5e=a("strong"),a9r=o("openai-gpt"),n9r=o(" \u2014 "),KK=a("a"),s9r=o("TFOpenAIGPTLMHeadModel"),l9r=o(" (OpenAI GPT model)"),i9r=l(),U3=a("li"),r5e=a("strong"),d9r=o("opt"),c9r=o(" \u2014 "),ZK=a("a"),m9r=o("TFOPTForCausalLM"),f9r=o(" (OPT model)"),g9r=l(),H3=a("li"),t5e=a("strong"),h9r=o("rembert"),u9r=o(" \u2014 "),eZ=a("a"),p9r=o("TFRemBertForCausalLM"),_9r=o(" (RemBERT model)"),b9r=l(),J3=a("li"),a5e=a("strong"),v9r=o("roberta"),F9r=o(" \u2014 "),oZ=a("a"),T9r=o("TFRobertaForCausalLM"),M9r=o(" (RoBERTa model)"),E9r=l(),Y3=a("li"),n5e=a("strong"),C9r=o("roformer"),w9r=o(" \u2014 "),rZ=a("a"),A9r=o("TFRoFormerForCausalLM"),L9r=o(" (RoFormer model)"),y9r=l(),K3=a("li"),s5e=a("strong"),x9r=o("transfo-xl"),$9r=o(" \u2014 "),tZ=a("a"),k9r=o("TFTransfoXLLMHeadModel"),S9r=o(" (Transformer-XL model)"),R9r=l(),Z3=a("li"),l5e=a("strong"),P9r=o("xglm"),B9r=o(" \u2014 "),aZ=a("a"),I9r=o("TFXGLMForCausalLM"),N9r=o(" (XGLM model)"),q9r=l(),e5=a("li"),i5e=a("strong"),j9r=o("xlm"),D9r=o(" \u2014 "),nZ=a("a"),G9r=o("TFXLMWithLMHeadModel"),O9r=o(" (XLM model)"),V9r=l(),o5=a("li"),d5e=a("strong"),X9r=o("xlnet"),z9r=o(" \u2014 "),sZ=a("a"),W9r=o("TFXLNetLMHeadModel"),Q9r=o(" (XLNet model)"),U9r=l(),F(r5.$$.fragment),wHe=l(),Sc=a("h2"),t5=a("a"),c5e=a("span"),F(w$.$$.fragment),H9r=l(),m5e=a("span"),J9r=o("TFAutoModelForImageClassification"),AHe=l(),lr=a("div"),F(A$.$$.fragment),Y9r=l(),Rc=a("p"),K9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),lZ=a("a"),Z9r=o("from_pretrained()"),exr=o(" class method or the "),iZ=a("a"),oxr=o("from_config()"),rxr=o(` class
method.`),txr=l(),L$=a("p"),axr=o("This class cannot be instantiated directly using "),f5e=a("code"),nxr=o("__init__()"),sxr=o(" (throws an error)."),lxr=l(),Gt=a("div"),F(y$.$$.fragment),ixr=l(),g5e=a("p"),dxr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),cxr=l(),Pc=a("p"),mxr=o(`Note:
Loading a model from its configuration file does `),h5e=a("strong"),fxr=o("not"),gxr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dZ=a("a"),hxr=o("from_pretrained()"),uxr=o(" to load the model weights."),pxr=l(),F(a5.$$.fragment),_xr=l(),Ir=a("div"),F(x$.$$.fragment),bxr=l(),u5e=a("p"),vxr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Fxr=l(),vn=a("p"),Txr=o("The model class to instantiate is selected based on the "),p5e=a("code"),Mxr=o("model_type"),Exr=o(` property of the config object (either
passed as an argument or loaded from `),_5e=a("code"),Cxr=o("pretrained_model_name_or_path"),wxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b5e=a("code"),Axr=o("pretrained_model_name_or_path"),Lxr=o(":"),yxr=l(),Ve=a("ul"),n5=a("li"),v5e=a("strong"),xxr=o("convnext"),$xr=o(" \u2014 "),cZ=a("a"),kxr=o("TFConvNextForImageClassification"),Sxr=o(" (ConvNeXT model)"),Rxr=l(),s5=a("li"),F5e=a("strong"),Pxr=o("data2vec-vision"),Bxr=o(" \u2014 "),mZ=a("a"),Ixr=o("TFData2VecVisionForImageClassification"),Nxr=o(" (Data2VecVision model)"),qxr=l(),dl=a("li"),T5e=a("strong"),jxr=o("deit"),Dxr=o(" \u2014 "),fZ=a("a"),Gxr=o("TFDeiTForImageClassification"),Oxr=o(" or "),gZ=a("a"),Vxr=o("TFDeiTForImageClassificationWithTeacher"),Xxr=o(" (DeiT model)"),zxr=l(),l5=a("li"),M5e=a("strong"),Wxr=o("regnet"),Qxr=o(" \u2014 "),hZ=a("a"),Uxr=o("TFRegNetForImageClassification"),Hxr=o(" (RegNet model)"),Jxr=l(),i5=a("li"),E5e=a("strong"),Yxr=o("resnet"),Kxr=o(" \u2014 "),uZ=a("a"),Zxr=o("TFResNetForImageClassification"),e$r=o(" (ResNet model)"),o$r=l(),d5=a("li"),C5e=a("strong"),r$r=o("segformer"),t$r=o(" \u2014 "),pZ=a("a"),a$r=o("TFSegformerForImageClassification"),n$r=o(" (SegFormer model)"),s$r=l(),c5=a("li"),w5e=a("strong"),l$r=o("swin"),i$r=o(" \u2014 "),_Z=a("a"),d$r=o("TFSwinForImageClassification"),c$r=o(" (Swin Transformer model)"),m$r=l(),m5=a("li"),A5e=a("strong"),f$r=o("vit"),g$r=o(" \u2014 "),bZ=a("a"),h$r=o("TFViTForImageClassification"),u$r=o(" (ViT model)"),p$r=l(),F(f5.$$.fragment),LHe=l(),Bc=a("h2"),g5=a("a"),L5e=a("span"),F($$.$$.fragment),_$r=l(),y5e=a("span"),b$r=o("TFAutoModelForSemanticSegmentation"),yHe=l(),ir=a("div"),F(k$.$$.fragment),v$r=l(),Ic=a("p"),F$r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),vZ=a("a"),T$r=o("from_pretrained()"),M$r=o(" class method or the "),FZ=a("a"),E$r=o("from_config()"),C$r=o(` class
method.`),w$r=l(),S$=a("p"),A$r=o("This class cannot be instantiated directly using "),x5e=a("code"),L$r=o("__init__()"),y$r=o(" (throws an error)."),x$r=l(),Ot=a("div"),F(R$.$$.fragment),$$r=l(),$5e=a("p"),k$r=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),S$r=l(),Nc=a("p"),R$r=o(`Note:
Loading a model from its configuration file does `),k5e=a("strong"),P$r=o("not"),B$r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TZ=a("a"),I$r=o("from_pretrained()"),N$r=o(" to load the model weights."),q$r=l(),F(h5.$$.fragment),j$r=l(),Nr=a("div"),F(P$.$$.fragment),D$r=l(),S5e=a("p"),G$r=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),O$r=l(),Fn=a("p"),V$r=o("The model class to instantiate is selected based on the "),R5e=a("code"),X$r=o("model_type"),z$r=o(` property of the config object (either
passed as an argument or loaded from `),P5e=a("code"),W$r=o("pretrained_model_name_or_path"),Q$r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B5e=a("code"),U$r=o("pretrained_model_name_or_path"),H$r=o(":"),J$r=l(),B$=a("ul"),u5=a("li"),I5e=a("strong"),Y$r=o("data2vec-vision"),K$r=o(" \u2014 "),MZ=a("a"),Z$r=o("TFData2VecVisionForSemanticSegmentation"),ekr=o(" (Data2VecVision model)"),okr=l(),p5=a("li"),N5e=a("strong"),rkr=o("segformer"),tkr=o(" \u2014 "),EZ=a("a"),akr=o("TFSegformerForSemanticSegmentation"),nkr=o(" (SegFormer model)"),skr=l(),F(_5.$$.fragment),xHe=l(),qc=a("h2"),b5=a("a"),q5e=a("span"),F(I$.$$.fragment),lkr=l(),j5e=a("span"),ikr=o("TFAutoModelForMaskedLM"),$He=l(),dr=a("div"),F(N$.$$.fragment),dkr=l(),jc=a("p"),ckr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),CZ=a("a"),mkr=o("from_pretrained()"),fkr=o(" class method or the "),wZ=a("a"),gkr=o("from_config()"),hkr=o(` class
method.`),ukr=l(),q$=a("p"),pkr=o("This class cannot be instantiated directly using "),D5e=a("code"),_kr=o("__init__()"),bkr=o(" (throws an error)."),vkr=l(),Vt=a("div"),F(j$.$$.fragment),Fkr=l(),G5e=a("p"),Tkr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Mkr=l(),Dc=a("p"),Ekr=o(`Note:
Loading a model from its configuration file does `),O5e=a("strong"),Ckr=o("not"),wkr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),AZ=a("a"),Akr=o("from_pretrained()"),Lkr=o(" to load the model weights."),ykr=l(),F(v5.$$.fragment),xkr=l(),qr=a("div"),F(D$.$$.fragment),$kr=l(),V5e=a("p"),kkr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Skr=l(),Tn=a("p"),Rkr=o("The model class to instantiate is selected based on the "),X5e=a("code"),Pkr=o("model_type"),Bkr=o(` property of the config object (either
passed as an argument or loaded from `),z5e=a("code"),Ikr=o("pretrained_model_name_or_path"),Nkr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W5e=a("code"),qkr=o("pretrained_model_name_or_path"),jkr=o(":"),Dkr=l(),me=a("ul"),F5=a("li"),Q5e=a("strong"),Gkr=o("albert"),Okr=o(" \u2014 "),LZ=a("a"),Vkr=o("TFAlbertForMaskedLM"),Xkr=o(" (ALBERT model)"),zkr=l(),T5=a("li"),U5e=a("strong"),Wkr=o("bert"),Qkr=o(" \u2014 "),yZ=a("a"),Ukr=o("TFBertForMaskedLM"),Hkr=o(" (BERT model)"),Jkr=l(),M5=a("li"),H5e=a("strong"),Ykr=o("camembert"),Kkr=o(" \u2014 "),xZ=a("a"),Zkr=o("TFCamembertForMaskedLM"),eSr=o(" (CamemBERT model)"),oSr=l(),E5=a("li"),J5e=a("strong"),rSr=o("convbert"),tSr=o(" \u2014 "),$Z=a("a"),aSr=o("TFConvBertForMaskedLM"),nSr=o(" (ConvBERT model)"),sSr=l(),C5=a("li"),Y5e=a("strong"),lSr=o("deberta"),iSr=o(" \u2014 "),kZ=a("a"),dSr=o("TFDebertaForMaskedLM"),cSr=o(" (DeBERTa model)"),mSr=l(),w5=a("li"),K5e=a("strong"),fSr=o("deberta-v2"),gSr=o(" \u2014 "),SZ=a("a"),hSr=o("TFDebertaV2ForMaskedLM"),uSr=o(" (DeBERTa-v2 model)"),pSr=l(),A5=a("li"),Z5e=a("strong"),_Sr=o("distilbert"),bSr=o(" \u2014 "),RZ=a("a"),vSr=o("TFDistilBertForMaskedLM"),FSr=o(" (DistilBERT model)"),TSr=l(),L5=a("li"),e0e=a("strong"),MSr=o("electra"),ESr=o(" \u2014 "),PZ=a("a"),CSr=o("TFElectraForMaskedLM"),wSr=o(" (ELECTRA model)"),ASr=l(),y5=a("li"),o0e=a("strong"),LSr=o("flaubert"),ySr=o(" \u2014 "),BZ=a("a"),xSr=o("TFFlaubertWithLMHeadModel"),$Sr=o(" (FlauBERT model)"),kSr=l(),x5=a("li"),r0e=a("strong"),SSr=o("funnel"),RSr=o(" \u2014 "),IZ=a("a"),PSr=o("TFFunnelForMaskedLM"),BSr=o(" (Funnel Transformer model)"),ISr=l(),$5=a("li"),t0e=a("strong"),NSr=o("layoutlm"),qSr=o(" \u2014 "),NZ=a("a"),jSr=o("TFLayoutLMForMaskedLM"),DSr=o(" (LayoutLM model)"),GSr=l(),k5=a("li"),a0e=a("strong"),OSr=o("longformer"),VSr=o(" \u2014 "),qZ=a("a"),XSr=o("TFLongformerForMaskedLM"),zSr=o(" (Longformer model)"),WSr=l(),S5=a("li"),n0e=a("strong"),QSr=o("mobilebert"),USr=o(" \u2014 "),jZ=a("a"),HSr=o("TFMobileBertForMaskedLM"),JSr=o(" (MobileBERT model)"),YSr=l(),R5=a("li"),s0e=a("strong"),KSr=o("mpnet"),ZSr=o(" \u2014 "),DZ=a("a"),eRr=o("TFMPNetForMaskedLM"),oRr=o(" (MPNet model)"),rRr=l(),P5=a("li"),l0e=a("strong"),tRr=o("rembert"),aRr=o(" \u2014 "),GZ=a("a"),nRr=o("TFRemBertForMaskedLM"),sRr=o(" (RemBERT model)"),lRr=l(),B5=a("li"),i0e=a("strong"),iRr=o("roberta"),dRr=o(" \u2014 "),OZ=a("a"),cRr=o("TFRobertaForMaskedLM"),mRr=o(" (RoBERTa model)"),fRr=l(),I5=a("li"),d0e=a("strong"),gRr=o("roformer"),hRr=o(" \u2014 "),VZ=a("a"),uRr=o("TFRoFormerForMaskedLM"),pRr=o(" (RoFormer model)"),_Rr=l(),N5=a("li"),c0e=a("strong"),bRr=o("tapas"),vRr=o(" \u2014 "),XZ=a("a"),FRr=o("TFTapasForMaskedLM"),TRr=o(" (TAPAS model)"),MRr=l(),q5=a("li"),m0e=a("strong"),ERr=o("xlm"),CRr=o(" \u2014 "),zZ=a("a"),wRr=o("TFXLMWithLMHeadModel"),ARr=o(" (XLM model)"),LRr=l(),j5=a("li"),f0e=a("strong"),yRr=o("xlm-roberta"),xRr=o(" \u2014 "),WZ=a("a"),$Rr=o("TFXLMRobertaForMaskedLM"),kRr=o(" (XLM-RoBERTa model)"),SRr=l(),F(D5.$$.fragment),kHe=l(),Gc=a("h2"),G5=a("a"),g0e=a("span"),F(G$.$$.fragment),RRr=l(),h0e=a("span"),PRr=o("TFAutoModelForSeq2SeqLM"),SHe=l(),cr=a("div"),F(O$.$$.fragment),BRr=l(),Oc=a("p"),IRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),QZ=a("a"),NRr=o("from_pretrained()"),qRr=o(" class method or the "),UZ=a("a"),jRr=o("from_config()"),DRr=o(` class
method.`),GRr=l(),V$=a("p"),ORr=o("This class cannot be instantiated directly using "),u0e=a("code"),VRr=o("__init__()"),XRr=o(" (throws an error)."),zRr=l(),Xt=a("div"),F(X$.$$.fragment),WRr=l(),p0e=a("p"),QRr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),URr=l(),Vc=a("p"),HRr=o(`Note:
Loading a model from its configuration file does `),_0e=a("strong"),JRr=o("not"),YRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HZ=a("a"),KRr=o("from_pretrained()"),ZRr=o(" to load the model weights."),ePr=l(),F(O5.$$.fragment),oPr=l(),jr=a("div"),F(z$.$$.fragment),rPr=l(),b0e=a("p"),tPr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),aPr=l(),Mn=a("p"),nPr=o("The model class to instantiate is selected based on the "),v0e=a("code"),sPr=o("model_type"),lPr=o(` property of the config object (either
passed as an argument or loaded from `),F0e=a("code"),iPr=o("pretrained_model_name_or_path"),dPr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T0e=a("code"),cPr=o("pretrained_model_name_or_path"),mPr=o(":"),fPr=l(),ye=a("ul"),V5=a("li"),M0e=a("strong"),gPr=o("bart"),hPr=o(" \u2014 "),JZ=a("a"),uPr=o("TFBartForConditionalGeneration"),pPr=o(" (BART model)"),_Pr=l(),X5=a("li"),E0e=a("strong"),bPr=o("blenderbot"),vPr=o(" \u2014 "),YZ=a("a"),FPr=o("TFBlenderbotForConditionalGeneration"),TPr=o(" (Blenderbot model)"),MPr=l(),z5=a("li"),C0e=a("strong"),EPr=o("blenderbot-small"),CPr=o(" \u2014 "),KZ=a("a"),wPr=o("TFBlenderbotSmallForConditionalGeneration"),APr=o(" (BlenderbotSmall model)"),LPr=l(),W5=a("li"),w0e=a("strong"),yPr=o("encoder-decoder"),xPr=o(" \u2014 "),ZZ=a("a"),$Pr=o("TFEncoderDecoderModel"),kPr=o(" (Encoder decoder model)"),SPr=l(),Q5=a("li"),A0e=a("strong"),RPr=o("led"),PPr=o(" \u2014 "),eee=a("a"),BPr=o("TFLEDForConditionalGeneration"),IPr=o(" (LED model)"),NPr=l(),U5=a("li"),L0e=a("strong"),qPr=o("marian"),jPr=o(" \u2014 "),oee=a("a"),DPr=o("TFMarianMTModel"),GPr=o(" (Marian model)"),OPr=l(),H5=a("li"),y0e=a("strong"),VPr=o("mbart"),XPr=o(" \u2014 "),ree=a("a"),zPr=o("TFMBartForConditionalGeneration"),WPr=o(" (mBART model)"),QPr=l(),J5=a("li"),x0e=a("strong"),UPr=o("mt5"),HPr=o(" \u2014 "),tee=a("a"),JPr=o("TFMT5ForConditionalGeneration"),YPr=o(" (MT5 model)"),KPr=l(),Y5=a("li"),$0e=a("strong"),ZPr=o("pegasus"),eBr=o(" \u2014 "),aee=a("a"),oBr=o("TFPegasusForConditionalGeneration"),rBr=o(" (Pegasus model)"),tBr=l(),K5=a("li"),k0e=a("strong"),aBr=o("t5"),nBr=o(" \u2014 "),nee=a("a"),sBr=o("TFT5ForConditionalGeneration"),lBr=o(" (T5 model)"),iBr=l(),F(Z5.$$.fragment),RHe=l(),Xc=a("h2"),e0=a("a"),S0e=a("span"),F(W$.$$.fragment),dBr=l(),R0e=a("span"),cBr=o("TFAutoModelForSequenceClassification"),PHe=l(),mr=a("div"),F(Q$.$$.fragment),mBr=l(),zc=a("p"),fBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),see=a("a"),gBr=o("from_pretrained()"),hBr=o(" class method or the "),lee=a("a"),uBr=o("from_config()"),pBr=o(` class
method.`),_Br=l(),U$=a("p"),bBr=o("This class cannot be instantiated directly using "),P0e=a("code"),vBr=o("__init__()"),FBr=o(" (throws an error)."),TBr=l(),zt=a("div"),F(H$.$$.fragment),MBr=l(),B0e=a("p"),EBr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),CBr=l(),Wc=a("p"),wBr=o(`Note:
Loading a model from its configuration file does `),I0e=a("strong"),ABr=o("not"),LBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iee=a("a"),yBr=o("from_pretrained()"),xBr=o(" to load the model weights."),$Br=l(),F(o0.$$.fragment),kBr=l(),Dr=a("div"),F(J$.$$.fragment),SBr=l(),N0e=a("p"),RBr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),PBr=l(),En=a("p"),BBr=o("The model class to instantiate is selected based on the "),q0e=a("code"),IBr=o("model_type"),NBr=o(` property of the config object (either
passed as an argument or loaded from `),j0e=a("code"),qBr=o("pretrained_model_name_or_path"),jBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D0e=a("code"),DBr=o("pretrained_model_name_or_path"),GBr=o(":"),OBr=l(),re=a("ul"),r0=a("li"),G0e=a("strong"),VBr=o("albert"),XBr=o(" \u2014 "),dee=a("a"),zBr=o("TFAlbertForSequenceClassification"),WBr=o(" (ALBERT model)"),QBr=l(),t0=a("li"),O0e=a("strong"),UBr=o("bert"),HBr=o(" \u2014 "),cee=a("a"),JBr=o("TFBertForSequenceClassification"),YBr=o(" (BERT model)"),KBr=l(),a0=a("li"),V0e=a("strong"),ZBr=o("camembert"),eIr=o(" \u2014 "),mee=a("a"),oIr=o("TFCamembertForSequenceClassification"),rIr=o(" (CamemBERT model)"),tIr=l(),n0=a("li"),X0e=a("strong"),aIr=o("convbert"),nIr=o(" \u2014 "),fee=a("a"),sIr=o("TFConvBertForSequenceClassification"),lIr=o(" (ConvBERT model)"),iIr=l(),s0=a("li"),z0e=a("strong"),dIr=o("ctrl"),cIr=o(" \u2014 "),gee=a("a"),mIr=o("TFCTRLForSequenceClassification"),fIr=o(" (CTRL model)"),gIr=l(),l0=a("li"),W0e=a("strong"),hIr=o("deberta"),uIr=o(" \u2014 "),hee=a("a"),pIr=o("TFDebertaForSequenceClassification"),_Ir=o(" (DeBERTa model)"),bIr=l(),i0=a("li"),Q0e=a("strong"),vIr=o("deberta-v2"),FIr=o(" \u2014 "),uee=a("a"),TIr=o("TFDebertaV2ForSequenceClassification"),MIr=o(" (DeBERTa-v2 model)"),EIr=l(),d0=a("li"),U0e=a("strong"),CIr=o("distilbert"),wIr=o(" \u2014 "),pee=a("a"),AIr=o("TFDistilBertForSequenceClassification"),LIr=o(" (DistilBERT model)"),yIr=l(),c0=a("li"),H0e=a("strong"),xIr=o("electra"),$Ir=o(" \u2014 "),_ee=a("a"),kIr=o("TFElectraForSequenceClassification"),SIr=o(" (ELECTRA model)"),RIr=l(),m0=a("li"),J0e=a("strong"),PIr=o("flaubert"),BIr=o(" \u2014 "),bee=a("a"),IIr=o("TFFlaubertForSequenceClassification"),NIr=o(" (FlauBERT model)"),qIr=l(),f0=a("li"),Y0e=a("strong"),jIr=o("funnel"),DIr=o(" \u2014 "),vee=a("a"),GIr=o("TFFunnelForSequenceClassification"),OIr=o(" (Funnel Transformer model)"),VIr=l(),g0=a("li"),K0e=a("strong"),XIr=o("gpt2"),zIr=o(" \u2014 "),Fee=a("a"),WIr=o("TFGPT2ForSequenceClassification"),QIr=o(" (OpenAI GPT-2 model)"),UIr=l(),h0=a("li"),Z0e=a("strong"),HIr=o("gptj"),JIr=o(" \u2014 "),Tee=a("a"),YIr=o("TFGPTJForSequenceClassification"),KIr=o(" (GPT-J model)"),ZIr=l(),u0=a("li"),ewe=a("strong"),eNr=o("layoutlm"),oNr=o(" \u2014 "),Mee=a("a"),rNr=o("TFLayoutLMForSequenceClassification"),tNr=o(" (LayoutLM model)"),aNr=l(),p0=a("li"),owe=a("strong"),nNr=o("layoutlmv3"),sNr=o(" \u2014 "),Eee=a("a"),lNr=o("TFLayoutLMv3ForSequenceClassification"),iNr=o(" (LayoutLMv3 model)"),dNr=l(),_0=a("li"),rwe=a("strong"),cNr=o("longformer"),mNr=o(" \u2014 "),Cee=a("a"),fNr=o("TFLongformerForSequenceClassification"),gNr=o(" (Longformer model)"),hNr=l(),b0=a("li"),twe=a("strong"),uNr=o("mobilebert"),pNr=o(" \u2014 "),wee=a("a"),_Nr=o("TFMobileBertForSequenceClassification"),bNr=o(" (MobileBERT model)"),vNr=l(),v0=a("li"),awe=a("strong"),FNr=o("mpnet"),TNr=o(" \u2014 "),Aee=a("a"),MNr=o("TFMPNetForSequenceClassification"),ENr=o(" (MPNet model)"),CNr=l(),F0=a("li"),nwe=a("strong"),wNr=o("openai-gpt"),ANr=o(" \u2014 "),Lee=a("a"),LNr=o("TFOpenAIGPTForSequenceClassification"),yNr=o(" (OpenAI GPT model)"),xNr=l(),T0=a("li"),swe=a("strong"),$Nr=o("rembert"),kNr=o(" \u2014 "),yee=a("a"),SNr=o("TFRemBertForSequenceClassification"),RNr=o(" (RemBERT model)"),PNr=l(),M0=a("li"),lwe=a("strong"),BNr=o("roberta"),INr=o(" \u2014 "),xee=a("a"),NNr=o("TFRobertaForSequenceClassification"),qNr=o(" (RoBERTa model)"),jNr=l(),E0=a("li"),iwe=a("strong"),DNr=o("roformer"),GNr=o(" \u2014 "),$ee=a("a"),ONr=o("TFRoFormerForSequenceClassification"),VNr=o(" (RoFormer model)"),XNr=l(),C0=a("li"),dwe=a("strong"),zNr=o("tapas"),WNr=o(" \u2014 "),kee=a("a"),QNr=o("TFTapasForSequenceClassification"),UNr=o(" (TAPAS model)"),HNr=l(),w0=a("li"),cwe=a("strong"),JNr=o("transfo-xl"),YNr=o(" \u2014 "),See=a("a"),KNr=o("TFTransfoXLForSequenceClassification"),ZNr=o(" (Transformer-XL model)"),eqr=l(),A0=a("li"),mwe=a("strong"),oqr=o("xlm"),rqr=o(" \u2014 "),Ree=a("a"),tqr=o("TFXLMForSequenceClassification"),aqr=o(" (XLM model)"),nqr=l(),L0=a("li"),fwe=a("strong"),sqr=o("xlm-roberta"),lqr=o(" \u2014 "),Pee=a("a"),iqr=o("TFXLMRobertaForSequenceClassification"),dqr=o(" (XLM-RoBERTa model)"),cqr=l(),y0=a("li"),gwe=a("strong"),mqr=o("xlnet"),fqr=o(" \u2014 "),Bee=a("a"),gqr=o("TFXLNetForSequenceClassification"),hqr=o(" (XLNet model)"),uqr=l(),F(x0.$$.fragment),BHe=l(),Qc=a("h2"),$0=a("a"),hwe=a("span"),F(Y$.$$.fragment),pqr=l(),uwe=a("span"),_qr=o("TFAutoModelForMultipleChoice"),IHe=l(),fr=a("div"),F(K$.$$.fragment),bqr=l(),Uc=a("p"),vqr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Iee=a("a"),Fqr=o("from_pretrained()"),Tqr=o(" class method or the "),Nee=a("a"),Mqr=o("from_config()"),Eqr=o(` class
method.`),Cqr=l(),Z$=a("p"),wqr=o("This class cannot be instantiated directly using "),pwe=a("code"),Aqr=o("__init__()"),Lqr=o(" (throws an error)."),yqr=l(),Wt=a("div"),F(ek.$$.fragment),xqr=l(),_we=a("p"),$qr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),kqr=l(),Hc=a("p"),Sqr=o(`Note:
Loading a model from its configuration file does `),bwe=a("strong"),Rqr=o("not"),Pqr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qee=a("a"),Bqr=o("from_pretrained()"),Iqr=o(" to load the model weights."),Nqr=l(),F(k0.$$.fragment),qqr=l(),Gr=a("div"),F(ok.$$.fragment),jqr=l(),vwe=a("p"),Dqr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Gqr=l(),Cn=a("p"),Oqr=o("The model class to instantiate is selected based on the "),Fwe=a("code"),Vqr=o("model_type"),Xqr=o(` property of the config object (either
passed as an argument or loaded from `),Twe=a("code"),zqr=o("pretrained_model_name_or_path"),Wqr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mwe=a("code"),Qqr=o("pretrained_model_name_or_path"),Uqr=o(":"),Hqr=l(),ve=a("ul"),S0=a("li"),Ewe=a("strong"),Jqr=o("albert"),Yqr=o(" \u2014 "),jee=a("a"),Kqr=o("TFAlbertForMultipleChoice"),Zqr=o(" (ALBERT model)"),ejr=l(),R0=a("li"),Cwe=a("strong"),ojr=o("bert"),rjr=o(" \u2014 "),Dee=a("a"),tjr=o("TFBertForMultipleChoice"),ajr=o(" (BERT model)"),njr=l(),P0=a("li"),wwe=a("strong"),sjr=o("camembert"),ljr=o(" \u2014 "),Gee=a("a"),ijr=o("TFCamembertForMultipleChoice"),djr=o(" (CamemBERT model)"),cjr=l(),B0=a("li"),Awe=a("strong"),mjr=o("convbert"),fjr=o(" \u2014 "),Oee=a("a"),gjr=o("TFConvBertForMultipleChoice"),hjr=o(" (ConvBERT model)"),ujr=l(),I0=a("li"),Lwe=a("strong"),pjr=o("distilbert"),_jr=o(" \u2014 "),Vee=a("a"),bjr=o("TFDistilBertForMultipleChoice"),vjr=o(" (DistilBERT model)"),Fjr=l(),N0=a("li"),ywe=a("strong"),Tjr=o("electra"),Mjr=o(" \u2014 "),Xee=a("a"),Ejr=o("TFElectraForMultipleChoice"),Cjr=o(" (ELECTRA model)"),wjr=l(),q0=a("li"),xwe=a("strong"),Ajr=o("flaubert"),Ljr=o(" \u2014 "),zee=a("a"),yjr=o("TFFlaubertForMultipleChoice"),xjr=o(" (FlauBERT model)"),$jr=l(),j0=a("li"),$we=a("strong"),kjr=o("funnel"),Sjr=o(" \u2014 "),Wee=a("a"),Rjr=o("TFFunnelForMultipleChoice"),Pjr=o(" (Funnel Transformer model)"),Bjr=l(),D0=a("li"),kwe=a("strong"),Ijr=o("longformer"),Njr=o(" \u2014 "),Qee=a("a"),qjr=o("TFLongformerForMultipleChoice"),jjr=o(" (Longformer model)"),Djr=l(),G0=a("li"),Swe=a("strong"),Gjr=o("mobilebert"),Ojr=o(" \u2014 "),Uee=a("a"),Vjr=o("TFMobileBertForMultipleChoice"),Xjr=o(" (MobileBERT model)"),zjr=l(),O0=a("li"),Rwe=a("strong"),Wjr=o("mpnet"),Qjr=o(" \u2014 "),Hee=a("a"),Ujr=o("TFMPNetForMultipleChoice"),Hjr=o(" (MPNet model)"),Jjr=l(),V0=a("li"),Pwe=a("strong"),Yjr=o("rembert"),Kjr=o(" \u2014 "),Jee=a("a"),Zjr=o("TFRemBertForMultipleChoice"),eDr=o(" (RemBERT model)"),oDr=l(),X0=a("li"),Bwe=a("strong"),rDr=o("roberta"),tDr=o(" \u2014 "),Yee=a("a"),aDr=o("TFRobertaForMultipleChoice"),nDr=o(" (RoBERTa model)"),sDr=l(),z0=a("li"),Iwe=a("strong"),lDr=o("roformer"),iDr=o(" \u2014 "),Kee=a("a"),dDr=o("TFRoFormerForMultipleChoice"),cDr=o(" (RoFormer model)"),mDr=l(),W0=a("li"),Nwe=a("strong"),fDr=o("xlm"),gDr=o(" \u2014 "),Zee=a("a"),hDr=o("TFXLMForMultipleChoice"),uDr=o(" (XLM model)"),pDr=l(),Q0=a("li"),qwe=a("strong"),_Dr=o("xlm-roberta"),bDr=o(" \u2014 "),eoe=a("a"),vDr=o("TFXLMRobertaForMultipleChoice"),FDr=o(" (XLM-RoBERTa model)"),TDr=l(),U0=a("li"),jwe=a("strong"),MDr=o("xlnet"),EDr=o(" \u2014 "),ooe=a("a"),CDr=o("TFXLNetForMultipleChoice"),wDr=o(" (XLNet model)"),ADr=l(),F(H0.$$.fragment),NHe=l(),Jc=a("h2"),J0=a("a"),Dwe=a("span"),F(rk.$$.fragment),LDr=l(),Gwe=a("span"),yDr=o("TFAutoModelForNextSentencePrediction"),qHe=l(),gr=a("div"),F(tk.$$.fragment),xDr=l(),Yc=a("p"),$Dr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),roe=a("a"),kDr=o("from_pretrained()"),SDr=o(" class method or the "),toe=a("a"),RDr=o("from_config()"),PDr=o(` class
method.`),BDr=l(),ak=a("p"),IDr=o("This class cannot be instantiated directly using "),Owe=a("code"),NDr=o("__init__()"),qDr=o(" (throws an error)."),jDr=l(),Qt=a("div"),F(nk.$$.fragment),DDr=l(),Vwe=a("p"),GDr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),ODr=l(),Kc=a("p"),VDr=o(`Note:
Loading a model from its configuration file does `),Xwe=a("strong"),XDr=o("not"),zDr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aoe=a("a"),WDr=o("from_pretrained()"),QDr=o(" to load the model weights."),UDr=l(),F(Y0.$$.fragment),HDr=l(),Or=a("div"),F(sk.$$.fragment),JDr=l(),zwe=a("p"),YDr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),KDr=l(),wn=a("p"),ZDr=o("The model class to instantiate is selected based on the "),Wwe=a("code"),eGr=o("model_type"),oGr=o(` property of the config object (either
passed as an argument or loaded from `),Qwe=a("code"),rGr=o("pretrained_model_name_or_path"),tGr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uwe=a("code"),aGr=o("pretrained_model_name_or_path"),nGr=o(":"),sGr=l(),lk=a("ul"),K0=a("li"),Hwe=a("strong"),lGr=o("bert"),iGr=o(" \u2014 "),noe=a("a"),dGr=o("TFBertForNextSentencePrediction"),cGr=o(" (BERT model)"),mGr=l(),Z0=a("li"),Jwe=a("strong"),fGr=o("mobilebert"),gGr=o(" \u2014 "),soe=a("a"),hGr=o("TFMobileBertForNextSentencePrediction"),uGr=o(" (MobileBERT model)"),pGr=l(),F(ew.$$.fragment),jHe=l(),Zc=a("h2"),ow=a("a"),Ywe=a("span"),F(ik.$$.fragment),_Gr=l(),Kwe=a("span"),bGr=o("TFAutoModelForTableQuestionAnswering"),DHe=l(),hr=a("div"),F(dk.$$.fragment),vGr=l(),em=a("p"),FGr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),loe=a("a"),TGr=o("from_pretrained()"),MGr=o(" class method or the "),ioe=a("a"),EGr=o("from_config()"),CGr=o(` class
method.`),wGr=l(),ck=a("p"),AGr=o("This class cannot be instantiated directly using "),Zwe=a("code"),LGr=o("__init__()"),yGr=o(" (throws an error)."),xGr=l(),Ut=a("div"),F(mk.$$.fragment),$Gr=l(),e6e=a("p"),kGr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),SGr=l(),om=a("p"),RGr=o(`Note:
Loading a model from its configuration file does `),o6e=a("strong"),PGr=o("not"),BGr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),doe=a("a"),IGr=o("from_pretrained()"),NGr=o(" to load the model weights."),qGr=l(),F(rw.$$.fragment),jGr=l(),Vr=a("div"),F(fk.$$.fragment),DGr=l(),r6e=a("p"),GGr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),OGr=l(),An=a("p"),VGr=o("The model class to instantiate is selected based on the "),t6e=a("code"),XGr=o("model_type"),zGr=o(` property of the config object (either
passed as an argument or loaded from `),a6e=a("code"),WGr=o("pretrained_model_name_or_path"),QGr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n6e=a("code"),UGr=o("pretrained_model_name_or_path"),HGr=o(":"),JGr=l(),s6e=a("ul"),tw=a("li"),l6e=a("strong"),YGr=o("tapas"),KGr=o(" \u2014 "),coe=a("a"),ZGr=o("TFTapasForQuestionAnswering"),eOr=o(" (TAPAS model)"),oOr=l(),F(aw.$$.fragment),GHe=l(),rm=a("h2"),nw=a("a"),i6e=a("span"),F(gk.$$.fragment),rOr=l(),d6e=a("span"),tOr=o("TFAutoModelForTokenClassification"),OHe=l(),ur=a("div"),F(hk.$$.fragment),aOr=l(),tm=a("p"),nOr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),moe=a("a"),sOr=o("from_pretrained()"),lOr=o(" class method or the "),foe=a("a"),iOr=o("from_config()"),dOr=o(` class
method.`),cOr=l(),uk=a("p"),mOr=o("This class cannot be instantiated directly using "),c6e=a("code"),fOr=o("__init__()"),gOr=o(" (throws an error)."),hOr=l(),Ht=a("div"),F(pk.$$.fragment),uOr=l(),m6e=a("p"),pOr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),_Or=l(),am=a("p"),bOr=o(`Note:
Loading a model from its configuration file does `),f6e=a("strong"),vOr=o("not"),FOr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),goe=a("a"),TOr=o("from_pretrained()"),MOr=o(" to load the model weights."),EOr=l(),F(sw.$$.fragment),COr=l(),Xr=a("div"),F(_k.$$.fragment),wOr=l(),g6e=a("p"),AOr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),LOr=l(),Ln=a("p"),yOr=o("The model class to instantiate is selected based on the "),h6e=a("code"),xOr=o("model_type"),$Or=o(` property of the config object (either
passed as an argument or loaded from `),u6e=a("code"),kOr=o("pretrained_model_name_or_path"),SOr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p6e=a("code"),ROr=o("pretrained_model_name_or_path"),POr=o(":"),BOr=l(),ie=a("ul"),lw=a("li"),_6e=a("strong"),IOr=o("albert"),NOr=o(" \u2014 "),hoe=a("a"),qOr=o("TFAlbertForTokenClassification"),jOr=o(" (ALBERT model)"),DOr=l(),iw=a("li"),b6e=a("strong"),GOr=o("bert"),OOr=o(" \u2014 "),uoe=a("a"),VOr=o("TFBertForTokenClassification"),XOr=o(" (BERT model)"),zOr=l(),dw=a("li"),v6e=a("strong"),WOr=o("camembert"),QOr=o(" \u2014 "),poe=a("a"),UOr=o("TFCamembertForTokenClassification"),HOr=o(" (CamemBERT model)"),JOr=l(),cw=a("li"),F6e=a("strong"),YOr=o("convbert"),KOr=o(" \u2014 "),_oe=a("a"),ZOr=o("TFConvBertForTokenClassification"),eVr=o(" (ConvBERT model)"),oVr=l(),mw=a("li"),T6e=a("strong"),rVr=o("deberta"),tVr=o(" \u2014 "),boe=a("a"),aVr=o("TFDebertaForTokenClassification"),nVr=o(" (DeBERTa model)"),sVr=l(),fw=a("li"),M6e=a("strong"),lVr=o("deberta-v2"),iVr=o(" \u2014 "),voe=a("a"),dVr=o("TFDebertaV2ForTokenClassification"),cVr=o(" (DeBERTa-v2 model)"),mVr=l(),gw=a("li"),E6e=a("strong"),fVr=o("distilbert"),gVr=o(" \u2014 "),Foe=a("a"),hVr=o("TFDistilBertForTokenClassification"),uVr=o(" (DistilBERT model)"),pVr=l(),hw=a("li"),C6e=a("strong"),_Vr=o("electra"),bVr=o(" \u2014 "),Toe=a("a"),vVr=o("TFElectraForTokenClassification"),FVr=o(" (ELECTRA model)"),TVr=l(),uw=a("li"),w6e=a("strong"),MVr=o("flaubert"),EVr=o(" \u2014 "),Moe=a("a"),CVr=o("TFFlaubertForTokenClassification"),wVr=o(" (FlauBERT model)"),AVr=l(),pw=a("li"),A6e=a("strong"),LVr=o("funnel"),yVr=o(" \u2014 "),Eoe=a("a"),xVr=o("TFFunnelForTokenClassification"),$Vr=o(" (Funnel Transformer model)"),kVr=l(),_w=a("li"),L6e=a("strong"),SVr=o("layoutlm"),RVr=o(" \u2014 "),Coe=a("a"),PVr=o("TFLayoutLMForTokenClassification"),BVr=o(" (LayoutLM model)"),IVr=l(),bw=a("li"),y6e=a("strong"),NVr=o("layoutlmv3"),qVr=o(" \u2014 "),woe=a("a"),jVr=o("TFLayoutLMv3ForTokenClassification"),DVr=o(" (LayoutLMv3 model)"),GVr=l(),vw=a("li"),x6e=a("strong"),OVr=o("longformer"),VVr=o(" \u2014 "),Aoe=a("a"),XVr=o("TFLongformerForTokenClassification"),zVr=o(" (Longformer model)"),WVr=l(),Fw=a("li"),$6e=a("strong"),QVr=o("mobilebert"),UVr=o(" \u2014 "),Loe=a("a"),HVr=o("TFMobileBertForTokenClassification"),JVr=o(" (MobileBERT model)"),YVr=l(),Tw=a("li"),k6e=a("strong"),KVr=o("mpnet"),ZVr=o(" \u2014 "),yoe=a("a"),eXr=o("TFMPNetForTokenClassification"),oXr=o(" (MPNet model)"),rXr=l(),Mw=a("li"),S6e=a("strong"),tXr=o("rembert"),aXr=o(" \u2014 "),xoe=a("a"),nXr=o("TFRemBertForTokenClassification"),sXr=o(" (RemBERT model)"),lXr=l(),Ew=a("li"),R6e=a("strong"),iXr=o("roberta"),dXr=o(" \u2014 "),$oe=a("a"),cXr=o("TFRobertaForTokenClassification"),mXr=o(" (RoBERTa model)"),fXr=l(),Cw=a("li"),P6e=a("strong"),gXr=o("roformer"),hXr=o(" \u2014 "),koe=a("a"),uXr=o("TFRoFormerForTokenClassification"),pXr=o(" (RoFormer model)"),_Xr=l(),ww=a("li"),B6e=a("strong"),bXr=o("xlm"),vXr=o(" \u2014 "),Soe=a("a"),FXr=o("TFXLMForTokenClassification"),TXr=o(" (XLM model)"),MXr=l(),Aw=a("li"),I6e=a("strong"),EXr=o("xlm-roberta"),CXr=o(" \u2014 "),Roe=a("a"),wXr=o("TFXLMRobertaForTokenClassification"),AXr=o(" (XLM-RoBERTa model)"),LXr=l(),Lw=a("li"),N6e=a("strong"),yXr=o("xlnet"),xXr=o(" \u2014 "),Poe=a("a"),$Xr=o("TFXLNetForTokenClassification"),kXr=o(" (XLNet model)"),SXr=l(),F(yw.$$.fragment),VHe=l(),nm=a("h2"),xw=a("a"),q6e=a("span"),F(bk.$$.fragment),RXr=l(),j6e=a("span"),PXr=o("TFAutoModelForQuestionAnswering"),XHe=l(),pr=a("div"),F(vk.$$.fragment),BXr=l(),sm=a("p"),IXr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Boe=a("a"),NXr=o("from_pretrained()"),qXr=o(" class method or the "),Ioe=a("a"),jXr=o("from_config()"),DXr=o(` class
method.`),GXr=l(),Fk=a("p"),OXr=o("This class cannot be instantiated directly using "),D6e=a("code"),VXr=o("__init__()"),XXr=o(" (throws an error)."),zXr=l(),Jt=a("div"),F(Tk.$$.fragment),WXr=l(),G6e=a("p"),QXr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),UXr=l(),lm=a("p"),HXr=o(`Note:
Loading a model from its configuration file does `),O6e=a("strong"),JXr=o("not"),YXr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Noe=a("a"),KXr=o("from_pretrained()"),ZXr=o(" to load the model weights."),ezr=l(),F($w.$$.fragment),ozr=l(),zr=a("div"),F(Mk.$$.fragment),rzr=l(),V6e=a("p"),tzr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),azr=l(),yn=a("p"),nzr=o("The model class to instantiate is selected based on the "),X6e=a("code"),szr=o("model_type"),lzr=o(` property of the config object (either
passed as an argument or loaded from `),z6e=a("code"),izr=o("pretrained_model_name_or_path"),dzr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W6e=a("code"),czr=o("pretrained_model_name_or_path"),mzr=o(":"),fzr=l(),de=a("ul"),kw=a("li"),Q6e=a("strong"),gzr=o("albert"),hzr=o(" \u2014 "),qoe=a("a"),uzr=o("TFAlbertForQuestionAnswering"),pzr=o(" (ALBERT model)"),_zr=l(),Sw=a("li"),U6e=a("strong"),bzr=o("bert"),vzr=o(" \u2014 "),joe=a("a"),Fzr=o("TFBertForQuestionAnswering"),Tzr=o(" (BERT model)"),Mzr=l(),Rw=a("li"),H6e=a("strong"),Ezr=o("camembert"),Czr=o(" \u2014 "),Doe=a("a"),wzr=o("TFCamembertForQuestionAnswering"),Azr=o(" (CamemBERT model)"),Lzr=l(),Pw=a("li"),J6e=a("strong"),yzr=o("convbert"),xzr=o(" \u2014 "),Goe=a("a"),$zr=o("TFConvBertForQuestionAnswering"),kzr=o(" (ConvBERT model)"),Szr=l(),Bw=a("li"),Y6e=a("strong"),Rzr=o("deberta"),Pzr=o(" \u2014 "),Ooe=a("a"),Bzr=o("TFDebertaForQuestionAnswering"),Izr=o(" (DeBERTa model)"),Nzr=l(),Iw=a("li"),K6e=a("strong"),qzr=o("deberta-v2"),jzr=o(" \u2014 "),Voe=a("a"),Dzr=o("TFDebertaV2ForQuestionAnswering"),Gzr=o(" (DeBERTa-v2 model)"),Ozr=l(),Nw=a("li"),Z6e=a("strong"),Vzr=o("distilbert"),Xzr=o(" \u2014 "),Xoe=a("a"),zzr=o("TFDistilBertForQuestionAnswering"),Wzr=o(" (DistilBERT model)"),Qzr=l(),qw=a("li"),eAe=a("strong"),Uzr=o("electra"),Hzr=o(" \u2014 "),zoe=a("a"),Jzr=o("TFElectraForQuestionAnswering"),Yzr=o(" (ELECTRA model)"),Kzr=l(),jw=a("li"),oAe=a("strong"),Zzr=o("flaubert"),eWr=o(" \u2014 "),Woe=a("a"),oWr=o("TFFlaubertForQuestionAnsweringSimple"),rWr=o(" (FlauBERT model)"),tWr=l(),Dw=a("li"),rAe=a("strong"),aWr=o("funnel"),nWr=o(" \u2014 "),Qoe=a("a"),sWr=o("TFFunnelForQuestionAnswering"),lWr=o(" (Funnel Transformer model)"),iWr=l(),Gw=a("li"),tAe=a("strong"),dWr=o("gptj"),cWr=o(" \u2014 "),Uoe=a("a"),mWr=o("TFGPTJForQuestionAnswering"),fWr=o(" (GPT-J model)"),gWr=l(),Ow=a("li"),aAe=a("strong"),hWr=o("layoutlmv3"),uWr=o(" \u2014 "),Hoe=a("a"),pWr=o("TFLayoutLMv3ForQuestionAnswering"),_Wr=o(" (LayoutLMv3 model)"),bWr=l(),Vw=a("li"),nAe=a("strong"),vWr=o("longformer"),FWr=o(" \u2014 "),Joe=a("a"),TWr=o("TFLongformerForQuestionAnswering"),MWr=o(" (Longformer model)"),EWr=l(),Xw=a("li"),sAe=a("strong"),CWr=o("mobilebert"),wWr=o(" \u2014 "),Yoe=a("a"),AWr=o("TFMobileBertForQuestionAnswering"),LWr=o(" (MobileBERT model)"),yWr=l(),zw=a("li"),lAe=a("strong"),xWr=o("mpnet"),$Wr=o(" \u2014 "),Koe=a("a"),kWr=o("TFMPNetForQuestionAnswering"),SWr=o(" (MPNet model)"),RWr=l(),Ww=a("li"),iAe=a("strong"),PWr=o("rembert"),BWr=o(" \u2014 "),Zoe=a("a"),IWr=o("TFRemBertForQuestionAnswering"),NWr=o(" (RemBERT model)"),qWr=l(),Qw=a("li"),dAe=a("strong"),jWr=o("roberta"),DWr=o(" \u2014 "),ere=a("a"),GWr=o("TFRobertaForQuestionAnswering"),OWr=o(" (RoBERTa model)"),VWr=l(),Uw=a("li"),cAe=a("strong"),XWr=o("roformer"),zWr=o(" \u2014 "),ore=a("a"),WWr=o("TFRoFormerForQuestionAnswering"),QWr=o(" (RoFormer model)"),UWr=l(),Hw=a("li"),mAe=a("strong"),HWr=o("xlm"),JWr=o(" \u2014 "),rre=a("a"),YWr=o("TFXLMForQuestionAnsweringSimple"),KWr=o(" (XLM model)"),ZWr=l(),Jw=a("li"),fAe=a("strong"),eQr=o("xlm-roberta"),oQr=o(" \u2014 "),tre=a("a"),rQr=o("TFXLMRobertaForQuestionAnswering"),tQr=o(" (XLM-RoBERTa model)"),aQr=l(),Yw=a("li"),gAe=a("strong"),nQr=o("xlnet"),sQr=o(" \u2014 "),are=a("a"),lQr=o("TFXLNetForQuestionAnsweringSimple"),iQr=o(" (XLNet model)"),dQr=l(),F(Kw.$$.fragment),zHe=l(),im=a("h2"),Zw=a("a"),hAe=a("span"),F(Ek.$$.fragment),cQr=l(),uAe=a("span"),mQr=o("TFAutoModelForVision2Seq"),WHe=l(),_r=a("div"),F(Ck.$$.fragment),fQr=l(),dm=a("p"),gQr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),nre=a("a"),hQr=o("from_pretrained()"),uQr=o(" class method or the "),sre=a("a"),pQr=o("from_config()"),_Qr=o(` class
method.`),bQr=l(),wk=a("p"),vQr=o("This class cannot be instantiated directly using "),pAe=a("code"),FQr=o("__init__()"),TQr=o(" (throws an error)."),MQr=l(),Yt=a("div"),F(Ak.$$.fragment),EQr=l(),_Ae=a("p"),CQr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),wQr=l(),cm=a("p"),AQr=o(`Note:
Loading a model from its configuration file does `),bAe=a("strong"),LQr=o("not"),yQr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lre=a("a"),xQr=o("from_pretrained()"),$Qr=o(" to load the model weights."),kQr=l(),F(e6.$$.fragment),SQr=l(),Wr=a("div"),F(Lk.$$.fragment),RQr=l(),vAe=a("p"),PQr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),BQr=l(),xn=a("p"),IQr=o("The model class to instantiate is selected based on the "),FAe=a("code"),NQr=o("model_type"),qQr=o(` property of the config object (either
passed as an argument or loaded from `),TAe=a("code"),jQr=o("pretrained_model_name_or_path"),DQr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),MAe=a("code"),GQr=o("pretrained_model_name_or_path"),OQr=o(":"),VQr=l(),EAe=a("ul"),o6=a("li"),CAe=a("strong"),XQr=o("vision-encoder-decoder"),zQr=o(" \u2014 "),ire=a("a"),WQr=o("TFVisionEncoderDecoderModel"),QQr=o(" (Vision Encoder decoder model)"),UQr=l(),F(r6.$$.fragment),QHe=l(),mm=a("h2"),t6=a("a"),wAe=a("span"),F(yk.$$.fragment),HQr=l(),AAe=a("span"),JQr=o("TFAutoModelForSpeechSeq2Seq"),UHe=l(),br=a("div"),F(xk.$$.fragment),YQr=l(),fm=a("p"),KQr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),dre=a("a"),ZQr=o("from_pretrained()"),eUr=o(" class method or the "),cre=a("a"),oUr=o("from_config()"),rUr=o(` class
method.`),tUr=l(),$k=a("p"),aUr=o("This class cannot be instantiated directly using "),LAe=a("code"),nUr=o("__init__()"),sUr=o(" (throws an error)."),lUr=l(),Kt=a("div"),F(kk.$$.fragment),iUr=l(),yAe=a("p"),dUr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),cUr=l(),gm=a("p"),mUr=o(`Note:
Loading a model from its configuration file does `),xAe=a("strong"),fUr=o("not"),gUr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mre=a("a"),hUr=o("from_pretrained()"),uUr=o(" to load the model weights."),pUr=l(),F(a6.$$.fragment),_Ur=l(),Qr=a("div"),F(Sk.$$.fragment),bUr=l(),$Ae=a("p"),vUr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),FUr=l(),$n=a("p"),TUr=o("The model class to instantiate is selected based on the "),kAe=a("code"),MUr=o("model_type"),EUr=o(` property of the config object (either
passed as an argument or loaded from `),SAe=a("code"),CUr=o("pretrained_model_name_or_path"),wUr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),RAe=a("code"),AUr=o("pretrained_model_name_or_path"),LUr=o(":"),yUr=l(),PAe=a("ul"),n6=a("li"),BAe=a("strong"),xUr=o("speech_to_text"),$Ur=o(" \u2014 "),fre=a("a"),kUr=o("TFSpeech2TextForConditionalGeneration"),SUr=o(" (Speech2Text model)"),RUr=l(),F(s6.$$.fragment),HHe=l(),hm=a("h2"),l6=a("a"),IAe=a("span"),F(Rk.$$.fragment),PUr=l(),NAe=a("span"),BUr=o("FlaxAutoModel"),JHe=l(),vr=a("div"),F(Pk.$$.fragment),IUr=l(),um=a("p"),NUr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),gre=a("a"),qUr=o("from_pretrained()"),jUr=o(" class method or the "),hre=a("a"),DUr=o("from_config()"),GUr=o(` class
method.`),OUr=l(),Bk=a("p"),VUr=o("This class cannot be instantiated directly using "),qAe=a("code"),XUr=o("__init__()"),zUr=o(" (throws an error)."),WUr=l(),Zt=a("div"),F(Ik.$$.fragment),QUr=l(),jAe=a("p"),UUr=o("Instantiates one of the base model classes of the library from a configuration."),HUr=l(),pm=a("p"),JUr=o(`Note:
Loading a model from its configuration file does `),DAe=a("strong"),YUr=o("not"),KUr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ure=a("a"),ZUr=o("from_pretrained()"),eHr=o(" to load the model weights."),oHr=l(),F(i6.$$.fragment),rHr=l(),Ur=a("div"),F(Nk.$$.fragment),tHr=l(),GAe=a("p"),aHr=o("Instantiate one of the base model classes of the library from a pretrained model."),nHr=l(),kn=a("p"),sHr=o("The model class to instantiate is selected based on the "),OAe=a("code"),lHr=o("model_type"),iHr=o(` property of the config object (either
passed as an argument or loaded from `),VAe=a("code"),dHr=o("pretrained_model_name_or_path"),cHr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),XAe=a("code"),mHr=o("pretrained_model_name_or_path"),fHr=o(":"),gHr=l(),te=a("ul"),d6=a("li"),zAe=a("strong"),hHr=o("albert"),uHr=o(" \u2014 "),pre=a("a"),pHr=o("FlaxAlbertModel"),_Hr=o(" (ALBERT model)"),bHr=l(),c6=a("li"),WAe=a("strong"),vHr=o("bart"),FHr=o(" \u2014 "),_re=a("a"),THr=o("FlaxBartModel"),MHr=o(" (BART model)"),EHr=l(),m6=a("li"),QAe=a("strong"),CHr=o("beit"),wHr=o(" \u2014 "),bre=a("a"),AHr=o("FlaxBeitModel"),LHr=o(" (BEiT model)"),yHr=l(),f6=a("li"),UAe=a("strong"),xHr=o("bert"),$Hr=o(" \u2014 "),vre=a("a"),kHr=o("FlaxBertModel"),SHr=o(" (BERT model)"),RHr=l(),g6=a("li"),HAe=a("strong"),PHr=o("big_bird"),BHr=o(" \u2014 "),Fre=a("a"),IHr=o("FlaxBigBirdModel"),NHr=o(" (BigBird model)"),qHr=l(),h6=a("li"),JAe=a("strong"),jHr=o("blenderbot"),DHr=o(" \u2014 "),Tre=a("a"),GHr=o("FlaxBlenderbotModel"),OHr=o(" (Blenderbot model)"),VHr=l(),u6=a("li"),YAe=a("strong"),XHr=o("blenderbot-small"),zHr=o(" \u2014 "),Mre=a("a"),WHr=o("FlaxBlenderbotSmallModel"),QHr=o(" (BlenderbotSmall model)"),UHr=l(),p6=a("li"),KAe=a("strong"),HHr=o("clip"),JHr=o(" \u2014 "),Ere=a("a"),YHr=o("FlaxCLIPModel"),KHr=o(" (CLIP model)"),ZHr=l(),_6=a("li"),ZAe=a("strong"),eJr=o("distilbert"),oJr=o(" \u2014 "),Cre=a("a"),rJr=o("FlaxDistilBertModel"),tJr=o(" (DistilBERT model)"),aJr=l(),b6=a("li"),e7e=a("strong"),nJr=o("electra"),sJr=o(" \u2014 "),wre=a("a"),lJr=o("FlaxElectraModel"),iJr=o(" (ELECTRA model)"),dJr=l(),v6=a("li"),o7e=a("strong"),cJr=o("gpt2"),mJr=o(" \u2014 "),Are=a("a"),fJr=o("FlaxGPT2Model"),gJr=o(" (OpenAI GPT-2 model)"),hJr=l(),F6=a("li"),r7e=a("strong"),uJr=o("gpt_neo"),pJr=o(" \u2014 "),Lre=a("a"),_Jr=o("FlaxGPTNeoModel"),bJr=o(" (GPT Neo model)"),vJr=l(),T6=a("li"),t7e=a("strong"),FJr=o("gptj"),TJr=o(" \u2014 "),yre=a("a"),MJr=o("FlaxGPTJModel"),EJr=o(" (GPT-J model)"),CJr=l(),M6=a("li"),a7e=a("strong"),wJr=o("longt5"),AJr=o(" \u2014 "),xre=a("a"),LJr=o("FlaxLongT5Model"),yJr=o(" (LongT5 model)"),xJr=l(),E6=a("li"),n7e=a("strong"),$Jr=o("marian"),kJr=o(" \u2014 "),$re=a("a"),SJr=o("FlaxMarianModel"),RJr=o(" (Marian model)"),PJr=l(),C6=a("li"),s7e=a("strong"),BJr=o("mbart"),IJr=o(" \u2014 "),kre=a("a"),NJr=o("FlaxMBartModel"),qJr=o(" (mBART model)"),jJr=l(),w6=a("li"),l7e=a("strong"),DJr=o("mt5"),GJr=o(" \u2014 "),Sre=a("a"),OJr=o("FlaxMT5Model"),VJr=o(" (MT5 model)"),XJr=l(),A6=a("li"),i7e=a("strong"),zJr=o("opt"),WJr=o(" \u2014 "),Rre=a("a"),QJr=o("FlaxOPTModel"),UJr=o(" (OPT model)"),HJr=l(),L6=a("li"),d7e=a("strong"),JJr=o("pegasus"),YJr=o(" \u2014 "),Pre=a("a"),KJr=o("FlaxPegasusModel"),ZJr=o(" (Pegasus model)"),eYr=l(),y6=a("li"),c7e=a("strong"),oYr=o("roberta"),rYr=o(" \u2014 "),Bre=a("a"),tYr=o("FlaxRobertaModel"),aYr=o(" (RoBERTa model)"),nYr=l(),x6=a("li"),m7e=a("strong"),sYr=o("roformer"),lYr=o(" \u2014 "),Ire=a("a"),iYr=o("FlaxRoFormerModel"),dYr=o(" (RoFormer model)"),cYr=l(),$6=a("li"),f7e=a("strong"),mYr=o("t5"),fYr=o(" \u2014 "),Nre=a("a"),gYr=o("FlaxT5Model"),hYr=o(" (T5 model)"),uYr=l(),k6=a("li"),g7e=a("strong"),pYr=o("vision-text-dual-encoder"),_Yr=o(" \u2014 "),qre=a("a"),bYr=o("FlaxVisionTextDualEncoderModel"),vYr=o(" (VisionTextDualEncoder model)"),FYr=l(),S6=a("li"),h7e=a("strong"),TYr=o("vit"),MYr=o(" \u2014 "),jre=a("a"),EYr=o("FlaxViTModel"),CYr=o(" (ViT model)"),wYr=l(),R6=a("li"),u7e=a("strong"),AYr=o("wav2vec2"),LYr=o(" \u2014 "),Dre=a("a"),yYr=o("FlaxWav2Vec2Model"),xYr=o(" (Wav2Vec2 model)"),$Yr=l(),P6=a("li"),p7e=a("strong"),kYr=o("xglm"),SYr=o(" \u2014 "),Gre=a("a"),RYr=o("FlaxXGLMModel"),PYr=o(" (XGLM model)"),BYr=l(),B6=a("li"),_7e=a("strong"),IYr=o("xlm-roberta"),NYr=o(" \u2014 "),Ore=a("a"),qYr=o("FlaxXLMRobertaModel"),jYr=o(" (XLM-RoBERTa model)"),DYr=l(),F(I6.$$.fragment),YHe=l(),_m=a("h2"),N6=a("a"),b7e=a("span"),F(qk.$$.fragment),GYr=l(),v7e=a("span"),OYr=o("FlaxAutoModelForCausalLM"),KHe=l(),Fr=a("div"),F(jk.$$.fragment),VYr=l(),bm=a("p"),XYr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Vre=a("a"),zYr=o("from_pretrained()"),WYr=o(" class method or the "),Xre=a("a"),QYr=o("from_config()"),UYr=o(` class
method.`),HYr=l(),Dk=a("p"),JYr=o("This class cannot be instantiated directly using "),F7e=a("code"),YYr=o("__init__()"),KYr=o(" (throws an error)."),ZYr=l(),ea=a("div"),F(Gk.$$.fragment),eKr=l(),T7e=a("p"),oKr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),rKr=l(),vm=a("p"),tKr=o(`Note:
Loading a model from its configuration file does `),M7e=a("strong"),aKr=o("not"),nKr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zre=a("a"),sKr=o("from_pretrained()"),lKr=o(" to load the model weights."),iKr=l(),F(q6.$$.fragment),dKr=l(),Hr=a("div"),F(Ok.$$.fragment),cKr=l(),E7e=a("p"),mKr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),fKr=l(),Sn=a("p"),gKr=o("The model class to instantiate is selected based on the "),C7e=a("code"),hKr=o("model_type"),uKr=o(` property of the config object (either
passed as an argument or loaded from `),w7e=a("code"),pKr=o("pretrained_model_name_or_path"),_Kr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A7e=a("code"),bKr=o("pretrained_model_name_or_path"),vKr=o(":"),FKr=l(),xe=a("ul"),j6=a("li"),L7e=a("strong"),TKr=o("bart"),MKr=o(" \u2014 "),Wre=a("a"),EKr=o("FlaxBartForCausalLM"),CKr=o(" (BART model)"),wKr=l(),D6=a("li"),y7e=a("strong"),AKr=o("bert"),LKr=o(" \u2014 "),Qre=a("a"),yKr=o("FlaxBertForCausalLM"),xKr=o(" (BERT model)"),$Kr=l(),G6=a("li"),x7e=a("strong"),kKr=o("big_bird"),SKr=o(" \u2014 "),Ure=a("a"),RKr=o("FlaxBigBirdForCausalLM"),PKr=o(" (BigBird model)"),BKr=l(),O6=a("li"),$7e=a("strong"),IKr=o("electra"),NKr=o(" \u2014 "),Hre=a("a"),qKr=o("FlaxElectraForCausalLM"),jKr=o(" (ELECTRA model)"),DKr=l(),V6=a("li"),k7e=a("strong"),GKr=o("gpt2"),OKr=o(" \u2014 "),Jre=a("a"),VKr=o("FlaxGPT2LMHeadModel"),XKr=o(" (OpenAI GPT-2 model)"),zKr=l(),X6=a("li"),S7e=a("strong"),WKr=o("gpt_neo"),QKr=o(" \u2014 "),Yre=a("a"),UKr=o("FlaxGPTNeoForCausalLM"),HKr=o(" (GPT Neo model)"),JKr=l(),z6=a("li"),R7e=a("strong"),YKr=o("gptj"),KKr=o(" \u2014 "),Kre=a("a"),ZKr=o("FlaxGPTJForCausalLM"),eZr=o(" (GPT-J model)"),oZr=l(),W6=a("li"),P7e=a("strong"),rZr=o("opt"),tZr=o(" \u2014 "),Zre=a("a"),aZr=o("FlaxOPTForCausalLM"),nZr=o(" (OPT model)"),sZr=l(),Q6=a("li"),B7e=a("strong"),lZr=o("roberta"),iZr=o(" \u2014 "),ete=a("a"),dZr=o("FlaxRobertaForCausalLM"),cZr=o(" (RoBERTa model)"),mZr=l(),U6=a("li"),I7e=a("strong"),fZr=o("xglm"),gZr=o(" \u2014 "),ote=a("a"),hZr=o("FlaxXGLMForCausalLM"),uZr=o(" (XGLM model)"),pZr=l(),F(H6.$$.fragment),ZHe=l(),Fm=a("h2"),J6=a("a"),N7e=a("span"),F(Vk.$$.fragment),_Zr=l(),q7e=a("span"),bZr=o("FlaxAutoModelForPreTraining"),eJe=l(),Tr=a("div"),F(Xk.$$.fragment),vZr=l(),Tm=a("p"),FZr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),rte=a("a"),TZr=o("from_pretrained()"),MZr=o(" class method or the "),tte=a("a"),EZr=o("from_config()"),CZr=o(` class
method.`),wZr=l(),zk=a("p"),AZr=o("This class cannot be instantiated directly using "),j7e=a("code"),LZr=o("__init__()"),yZr=o(" (throws an error)."),xZr=l(),oa=a("div"),F(Wk.$$.fragment),$Zr=l(),D7e=a("p"),kZr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),SZr=l(),Mm=a("p"),RZr=o(`Note:
Loading a model from its configuration file does `),G7e=a("strong"),PZr=o("not"),BZr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ate=a("a"),IZr=o("from_pretrained()"),NZr=o(" to load the model weights."),qZr=l(),F(Y6.$$.fragment),jZr=l(),Jr=a("div"),F(Qk.$$.fragment),DZr=l(),O7e=a("p"),GZr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),OZr=l(),Rn=a("p"),VZr=o("The model class to instantiate is selected based on the "),V7e=a("code"),XZr=o("model_type"),zZr=o(` property of the config object (either
passed as an argument or loaded from `),X7e=a("code"),WZr=o("pretrained_model_name_or_path"),QZr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z7e=a("code"),UZr=o("pretrained_model_name_or_path"),HZr=o(":"),JZr=l(),Ee=a("ul"),K6=a("li"),W7e=a("strong"),YZr=o("albert"),KZr=o(" \u2014 "),nte=a("a"),ZZr=o("FlaxAlbertForPreTraining"),eet=o(" (ALBERT model)"),oet=l(),Z6=a("li"),Q7e=a("strong"),ret=o("bart"),tet=o(" \u2014 "),ste=a("a"),aet=o("FlaxBartForConditionalGeneration"),net=o(" (BART model)"),set=l(),eA=a("li"),U7e=a("strong"),iet=o("bert"),det=o(" \u2014 "),lte=a("a"),cet=o("FlaxBertForPreTraining"),met=o(" (BERT model)"),fet=l(),oA=a("li"),H7e=a("strong"),get=o("big_bird"),het=o(" \u2014 "),ite=a("a"),uet=o("FlaxBigBirdForPreTraining"),pet=o(" (BigBird model)"),_et=l(),rA=a("li"),J7e=a("strong"),bet=o("electra"),vet=o(" \u2014 "),dte=a("a"),Fet=o("FlaxElectraForPreTraining"),Tet=o(" (ELECTRA model)"),Met=l(),tA=a("li"),Y7e=a("strong"),Eet=o("longt5"),Cet=o(" \u2014 "),cte=a("a"),wet=o("FlaxLongT5ForConditionalGeneration"),Aet=o(" (LongT5 model)"),Let=l(),aA=a("li"),K7e=a("strong"),yet=o("mbart"),xet=o(" \u2014 "),mte=a("a"),$et=o("FlaxMBartForConditionalGeneration"),ket=o(" (mBART model)"),Set=l(),nA=a("li"),Z7e=a("strong"),Ret=o("mt5"),Pet=o(" \u2014 "),fte=a("a"),Bet=o("FlaxMT5ForConditionalGeneration"),Iet=o(" (MT5 model)"),Net=l(),sA=a("li"),eLe=a("strong"),qet=o("roberta"),jet=o(" \u2014 "),gte=a("a"),Det=o("FlaxRobertaForMaskedLM"),Get=o(" (RoBERTa model)"),Oet=l(),lA=a("li"),oLe=a("strong"),Vet=o("roformer"),Xet=o(" \u2014 "),hte=a("a"),zet=o("FlaxRoFormerForMaskedLM"),Wet=o(" (RoFormer model)"),Qet=l(),iA=a("li"),rLe=a("strong"),Uet=o("t5"),Het=o(" \u2014 "),ute=a("a"),Jet=o("FlaxT5ForConditionalGeneration"),Yet=o(" (T5 model)"),Ket=l(),dA=a("li"),tLe=a("strong"),Zet=o("wav2vec2"),eot=o(" \u2014 "),pte=a("a"),oot=o("FlaxWav2Vec2ForPreTraining"),rot=o(" (Wav2Vec2 model)"),tot=l(),cA=a("li"),aLe=a("strong"),aot=o("xlm-roberta"),not=o(" \u2014 "),_te=a("a"),sot=o("FlaxXLMRobertaForMaskedLM"),lot=o(" (XLM-RoBERTa model)"),iot=l(),F(mA.$$.fragment),oJe=l(),Em=a("h2"),fA=a("a"),nLe=a("span"),F(Uk.$$.fragment),dot=l(),sLe=a("span"),cot=o("FlaxAutoModelForMaskedLM"),rJe=l(),Mr=a("div"),F(Hk.$$.fragment),mot=l(),Cm=a("p"),fot=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),bte=a("a"),got=o("from_pretrained()"),hot=o(" class method or the "),vte=a("a"),uot=o("from_config()"),pot=o(` class
method.`),_ot=l(),Jk=a("p"),bot=o("This class cannot be instantiated directly using "),lLe=a("code"),vot=o("__init__()"),Fot=o(" (throws an error)."),Tot=l(),ra=a("div"),F(Yk.$$.fragment),Mot=l(),iLe=a("p"),Eot=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Cot=l(),wm=a("p"),wot=o(`Note:
Loading a model from its configuration file does `),dLe=a("strong"),Aot=o("not"),Lot=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Fte=a("a"),yot=o("from_pretrained()"),xot=o(" to load the model weights."),$ot=l(),F(gA.$$.fragment),kot=l(),Yr=a("div"),F(Kk.$$.fragment),Sot=l(),cLe=a("p"),Rot=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Pot=l(),Pn=a("p"),Bot=o("The model class to instantiate is selected based on the "),mLe=a("code"),Iot=o("model_type"),Not=o(` property of the config object (either
passed as an argument or loaded from `),fLe=a("code"),qot=o("pretrained_model_name_or_path"),jot=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gLe=a("code"),Dot=o("pretrained_model_name_or_path"),Got=o(":"),Oot=l(),$e=a("ul"),hA=a("li"),hLe=a("strong"),Vot=o("albert"),Xot=o(" \u2014 "),Tte=a("a"),zot=o("FlaxAlbertForMaskedLM"),Wot=o(" (ALBERT model)"),Qot=l(),uA=a("li"),uLe=a("strong"),Uot=o("bart"),Hot=o(" \u2014 "),Mte=a("a"),Jot=o("FlaxBartForConditionalGeneration"),Yot=o(" (BART model)"),Kot=l(),pA=a("li"),pLe=a("strong"),Zot=o("bert"),ert=o(" \u2014 "),Ete=a("a"),ort=o("FlaxBertForMaskedLM"),rrt=o(" (BERT model)"),trt=l(),_A=a("li"),_Le=a("strong"),art=o("big_bird"),nrt=o(" \u2014 "),Cte=a("a"),srt=o("FlaxBigBirdForMaskedLM"),lrt=o(" (BigBird model)"),irt=l(),bA=a("li"),bLe=a("strong"),drt=o("distilbert"),crt=o(" \u2014 "),wte=a("a"),mrt=o("FlaxDistilBertForMaskedLM"),frt=o(" (DistilBERT model)"),grt=l(),vA=a("li"),vLe=a("strong"),hrt=o("electra"),urt=o(" \u2014 "),Ate=a("a"),prt=o("FlaxElectraForMaskedLM"),_rt=o(" (ELECTRA model)"),brt=l(),FA=a("li"),FLe=a("strong"),vrt=o("mbart"),Frt=o(" \u2014 "),Lte=a("a"),Trt=o("FlaxMBartForConditionalGeneration"),Mrt=o(" (mBART model)"),Ert=l(),TA=a("li"),TLe=a("strong"),Crt=o("roberta"),wrt=o(" \u2014 "),yte=a("a"),Art=o("FlaxRobertaForMaskedLM"),Lrt=o(" (RoBERTa model)"),yrt=l(),MA=a("li"),MLe=a("strong"),xrt=o("roformer"),$rt=o(" \u2014 "),xte=a("a"),krt=o("FlaxRoFormerForMaskedLM"),Srt=o(" (RoFormer model)"),Rrt=l(),EA=a("li"),ELe=a("strong"),Prt=o("xlm-roberta"),Brt=o(" \u2014 "),$te=a("a"),Irt=o("FlaxXLMRobertaForMaskedLM"),Nrt=o(" (XLM-RoBERTa model)"),qrt=l(),F(CA.$$.fragment),tJe=l(),Am=a("h2"),wA=a("a"),CLe=a("span"),F(Zk.$$.fragment),jrt=l(),wLe=a("span"),Drt=o("FlaxAutoModelForSeq2SeqLM"),aJe=l(),Er=a("div"),F(eS.$$.fragment),Grt=l(),Lm=a("p"),Ort=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),kte=a("a"),Vrt=o("from_pretrained()"),Xrt=o(" class method or the "),Ste=a("a"),zrt=o("from_config()"),Wrt=o(` class
method.`),Qrt=l(),oS=a("p"),Urt=o("This class cannot be instantiated directly using "),ALe=a("code"),Hrt=o("__init__()"),Jrt=o(" (throws an error)."),Yrt=l(),ta=a("div"),F(rS.$$.fragment),Krt=l(),LLe=a("p"),Zrt=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),ett=l(),ym=a("p"),ott=o(`Note:
Loading a model from its configuration file does `),yLe=a("strong"),rtt=o("not"),ttt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Rte=a("a"),att=o("from_pretrained()"),ntt=o(" to load the model weights."),stt=l(),F(AA.$$.fragment),ltt=l(),Kr=a("div"),F(tS.$$.fragment),itt=l(),xLe=a("p"),dtt=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),ctt=l(),Bn=a("p"),mtt=o("The model class to instantiate is selected based on the "),$Le=a("code"),ftt=o("model_type"),gtt=o(` property of the config object (either
passed as an argument or loaded from `),kLe=a("code"),htt=o("pretrained_model_name_or_path"),utt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),SLe=a("code"),ptt=o("pretrained_model_name_or_path"),_tt=o(":"),btt=l(),ke=a("ul"),LA=a("li"),RLe=a("strong"),vtt=o("bart"),Ftt=o(" \u2014 "),Pte=a("a"),Ttt=o("FlaxBartForConditionalGeneration"),Mtt=o(" (BART model)"),Ett=l(),yA=a("li"),PLe=a("strong"),Ctt=o("blenderbot"),wtt=o(" \u2014 "),Bte=a("a"),Att=o("FlaxBlenderbotForConditionalGeneration"),Ltt=o(" (Blenderbot model)"),ytt=l(),xA=a("li"),BLe=a("strong"),xtt=o("blenderbot-small"),$tt=o(" \u2014 "),Ite=a("a"),ktt=o("FlaxBlenderbotSmallForConditionalGeneration"),Stt=o(" (BlenderbotSmall model)"),Rtt=l(),$A=a("li"),ILe=a("strong"),Ptt=o("encoder-decoder"),Btt=o(" \u2014 "),Nte=a("a"),Itt=o("FlaxEncoderDecoderModel"),Ntt=o(" (Encoder decoder model)"),qtt=l(),kA=a("li"),NLe=a("strong"),jtt=o("longt5"),Dtt=o(" \u2014 "),qte=a("a"),Gtt=o("FlaxLongT5ForConditionalGeneration"),Ott=o(" (LongT5 model)"),Vtt=l(),SA=a("li"),qLe=a("strong"),Xtt=o("marian"),ztt=o(" \u2014 "),jte=a("a"),Wtt=o("FlaxMarianMTModel"),Qtt=o(" (Marian model)"),Utt=l(),RA=a("li"),jLe=a("strong"),Htt=o("mbart"),Jtt=o(" \u2014 "),Dte=a("a"),Ytt=o("FlaxMBartForConditionalGeneration"),Ktt=o(" (mBART model)"),Ztt=l(),PA=a("li"),DLe=a("strong"),eat=o("mt5"),oat=o(" \u2014 "),Gte=a("a"),rat=o("FlaxMT5ForConditionalGeneration"),tat=o(" (MT5 model)"),aat=l(),BA=a("li"),GLe=a("strong"),nat=o("pegasus"),sat=o(" \u2014 "),Ote=a("a"),lat=o("FlaxPegasusForConditionalGeneration"),iat=o(" (Pegasus model)"),dat=l(),IA=a("li"),OLe=a("strong"),cat=o("t5"),mat=o(" \u2014 "),Vte=a("a"),fat=o("FlaxT5ForConditionalGeneration"),gat=o(" (T5 model)"),hat=l(),F(NA.$$.fragment),nJe=l(),xm=a("h2"),qA=a("a"),VLe=a("span"),F(aS.$$.fragment),uat=l(),XLe=a("span"),pat=o("FlaxAutoModelForSequenceClassification"),sJe=l(),Cr=a("div"),F(nS.$$.fragment),_at=l(),$m=a("p"),bat=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Xte=a("a"),vat=o("from_pretrained()"),Fat=o(" class method or the "),zte=a("a"),Tat=o("from_config()"),Mat=o(` class
method.`),Eat=l(),sS=a("p"),Cat=o("This class cannot be instantiated directly using "),zLe=a("code"),wat=o("__init__()"),Aat=o(" (throws an error)."),Lat=l(),aa=a("div"),F(lS.$$.fragment),yat=l(),WLe=a("p"),xat=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),$at=l(),km=a("p"),kat=o(`Note:
Loading a model from its configuration file does `),QLe=a("strong"),Sat=o("not"),Rat=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Wte=a("a"),Pat=o("from_pretrained()"),Bat=o(" to load the model weights."),Iat=l(),F(jA.$$.fragment),Nat=l(),Zr=a("div"),F(iS.$$.fragment),qat=l(),ULe=a("p"),jat=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Dat=l(),In=a("p"),Gat=o("The model class to instantiate is selected based on the "),HLe=a("code"),Oat=o("model_type"),Vat=o(` property of the config object (either
passed as an argument or loaded from `),JLe=a("code"),Xat=o("pretrained_model_name_or_path"),zat=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),YLe=a("code"),Wat=o("pretrained_model_name_or_path"),Qat=o(":"),Uat=l(),Se=a("ul"),DA=a("li"),KLe=a("strong"),Hat=o("albert"),Jat=o(" \u2014 "),Qte=a("a"),Yat=o("FlaxAlbertForSequenceClassification"),Kat=o(" (ALBERT model)"),Zat=l(),GA=a("li"),ZLe=a("strong"),ent=o("bart"),ont=o(" \u2014 "),Ute=a("a"),rnt=o("FlaxBartForSequenceClassification"),tnt=o(" (BART model)"),ant=l(),OA=a("li"),eye=a("strong"),nnt=o("bert"),snt=o(" \u2014 "),Hte=a("a"),lnt=o("FlaxBertForSequenceClassification"),int=o(" (BERT model)"),dnt=l(),VA=a("li"),oye=a("strong"),cnt=o("big_bird"),mnt=o(" \u2014 "),Jte=a("a"),fnt=o("FlaxBigBirdForSequenceClassification"),gnt=o(" (BigBird model)"),hnt=l(),XA=a("li"),rye=a("strong"),unt=o("distilbert"),pnt=o(" \u2014 "),Yte=a("a"),_nt=o("FlaxDistilBertForSequenceClassification"),bnt=o(" (DistilBERT model)"),vnt=l(),zA=a("li"),tye=a("strong"),Fnt=o("electra"),Tnt=o(" \u2014 "),Kte=a("a"),Mnt=o("FlaxElectraForSequenceClassification"),Ent=o(" (ELECTRA model)"),Cnt=l(),WA=a("li"),aye=a("strong"),wnt=o("mbart"),Ant=o(" \u2014 "),Zte=a("a"),Lnt=o("FlaxMBartForSequenceClassification"),ynt=o(" (mBART model)"),xnt=l(),QA=a("li"),nye=a("strong"),$nt=o("roberta"),knt=o(" \u2014 "),eae=a("a"),Snt=o("FlaxRobertaForSequenceClassification"),Rnt=o(" (RoBERTa model)"),Pnt=l(),UA=a("li"),sye=a("strong"),Bnt=o("roformer"),Int=o(" \u2014 "),oae=a("a"),Nnt=o("FlaxRoFormerForSequenceClassification"),qnt=o(" (RoFormer model)"),jnt=l(),HA=a("li"),lye=a("strong"),Dnt=o("xlm-roberta"),Gnt=o(" \u2014 "),rae=a("a"),Ont=o("FlaxXLMRobertaForSequenceClassification"),Vnt=o(" (XLM-RoBERTa model)"),Xnt=l(),F(JA.$$.fragment),lJe=l(),Sm=a("h2"),YA=a("a"),iye=a("span"),F(dS.$$.fragment),znt=l(),dye=a("span"),Wnt=o("FlaxAutoModelForQuestionAnswering"),iJe=l(),wr=a("div"),F(cS.$$.fragment),Qnt=l(),Rm=a("p"),Unt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),tae=a("a"),Hnt=o("from_pretrained()"),Jnt=o(" class method or the "),aae=a("a"),Ynt=o("from_config()"),Knt=o(` class
method.`),Znt=l(),mS=a("p"),est=o("This class cannot be instantiated directly using "),cye=a("code"),ost=o("__init__()"),rst=o(" (throws an error)."),tst=l(),na=a("div"),F(fS.$$.fragment),ast=l(),mye=a("p"),nst=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),sst=l(),Pm=a("p"),lst=o(`Note:
Loading a model from its configuration file does `),fye=a("strong"),ist=o("not"),dst=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nae=a("a"),cst=o("from_pretrained()"),mst=o(" to load the model weights."),fst=l(),F(KA.$$.fragment),gst=l(),et=a("div"),F(gS.$$.fragment),hst=l(),gye=a("p"),ust=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),pst=l(),Nn=a("p"),_st=o("The model class to instantiate is selected based on the "),hye=a("code"),bst=o("model_type"),vst=o(` property of the config object (either
passed as an argument or loaded from `),uye=a("code"),Fst=o("pretrained_model_name_or_path"),Tst=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pye=a("code"),Mst=o("pretrained_model_name_or_path"),Est=o(":"),Cst=l(),Re=a("ul"),ZA=a("li"),_ye=a("strong"),wst=o("albert"),Ast=o(" \u2014 "),sae=a("a"),Lst=o("FlaxAlbertForQuestionAnswering"),yst=o(" (ALBERT model)"),xst=l(),e7=a("li"),bye=a("strong"),$st=o("bart"),kst=o(" \u2014 "),lae=a("a"),Sst=o("FlaxBartForQuestionAnswering"),Rst=o(" (BART model)"),Pst=l(),o7=a("li"),vye=a("strong"),Bst=o("bert"),Ist=o(" \u2014 "),iae=a("a"),Nst=o("FlaxBertForQuestionAnswering"),qst=o(" (BERT model)"),jst=l(),r7=a("li"),Fye=a("strong"),Dst=o("big_bird"),Gst=o(" \u2014 "),dae=a("a"),Ost=o("FlaxBigBirdForQuestionAnswering"),Vst=o(" (BigBird model)"),Xst=l(),t7=a("li"),Tye=a("strong"),zst=o("distilbert"),Wst=o(" \u2014 "),cae=a("a"),Qst=o("FlaxDistilBertForQuestionAnswering"),Ust=o(" (DistilBERT model)"),Hst=l(),a7=a("li"),Mye=a("strong"),Jst=o("electra"),Yst=o(" \u2014 "),mae=a("a"),Kst=o("FlaxElectraForQuestionAnswering"),Zst=o(" (ELECTRA model)"),elt=l(),n7=a("li"),Eye=a("strong"),olt=o("mbart"),rlt=o(" \u2014 "),fae=a("a"),tlt=o("FlaxMBartForQuestionAnswering"),alt=o(" (mBART model)"),nlt=l(),s7=a("li"),Cye=a("strong"),slt=o("roberta"),llt=o(" \u2014 "),gae=a("a"),ilt=o("FlaxRobertaForQuestionAnswering"),dlt=o(" (RoBERTa model)"),clt=l(),l7=a("li"),wye=a("strong"),mlt=o("roformer"),flt=o(" \u2014 "),hae=a("a"),glt=o("FlaxRoFormerForQuestionAnswering"),hlt=o(" (RoFormer model)"),ult=l(),i7=a("li"),Aye=a("strong"),plt=o("xlm-roberta"),_lt=o(" \u2014 "),uae=a("a"),blt=o("FlaxXLMRobertaForQuestionAnswering"),vlt=o(" (XLM-RoBERTa model)"),Flt=l(),F(d7.$$.fragment),dJe=l(),Bm=a("h2"),c7=a("a"),Lye=a("span"),F(hS.$$.fragment),Tlt=l(),yye=a("span"),Mlt=o("FlaxAutoModelForTokenClassification"),cJe=l(),Ar=a("div"),F(uS.$$.fragment),Elt=l(),Im=a("p"),Clt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),pae=a("a"),wlt=o("from_pretrained()"),Alt=o(" class method or the "),_ae=a("a"),Llt=o("from_config()"),ylt=o(` class
method.`),xlt=l(),pS=a("p"),$lt=o("This class cannot be instantiated directly using "),xye=a("code"),klt=o("__init__()"),Slt=o(" (throws an error)."),Rlt=l(),sa=a("div"),F(_S.$$.fragment),Plt=l(),$ye=a("p"),Blt=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Ilt=l(),Nm=a("p"),Nlt=o(`Note:
Loading a model from its configuration file does `),kye=a("strong"),qlt=o("not"),jlt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bae=a("a"),Dlt=o("from_pretrained()"),Glt=o(" to load the model weights."),Olt=l(),F(m7.$$.fragment),Vlt=l(),ot=a("div"),F(bS.$$.fragment),Xlt=l(),Sye=a("p"),zlt=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Wlt=l(),qn=a("p"),Qlt=o("The model class to instantiate is selected based on the "),Rye=a("code"),Ult=o("model_type"),Hlt=o(` property of the config object (either
passed as an argument or loaded from `),Pye=a("code"),Jlt=o("pretrained_model_name_or_path"),Ylt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bye=a("code"),Klt=o("pretrained_model_name_or_path"),Zlt=o(":"),eit=l(),Xe=a("ul"),f7=a("li"),Iye=a("strong"),oit=o("albert"),rit=o(" \u2014 "),vae=a("a"),tit=o("FlaxAlbertForTokenClassification"),ait=o(" (ALBERT model)"),nit=l(),g7=a("li"),Nye=a("strong"),sit=o("bert"),lit=o(" \u2014 "),Fae=a("a"),iit=o("FlaxBertForTokenClassification"),dit=o(" (BERT model)"),cit=l(),h7=a("li"),qye=a("strong"),mit=o("big_bird"),fit=o(" \u2014 "),Tae=a("a"),git=o("FlaxBigBirdForTokenClassification"),hit=o(" (BigBird model)"),uit=l(),u7=a("li"),jye=a("strong"),pit=o("distilbert"),_it=o(" \u2014 "),Mae=a("a"),bit=o("FlaxDistilBertForTokenClassification"),vit=o(" (DistilBERT model)"),Fit=l(),p7=a("li"),Dye=a("strong"),Tit=o("electra"),Mit=o(" \u2014 "),Eae=a("a"),Eit=o("FlaxElectraForTokenClassification"),Cit=o(" (ELECTRA model)"),wit=l(),_7=a("li"),Gye=a("strong"),Ait=o("roberta"),Lit=o(" \u2014 "),Cae=a("a"),yit=o("FlaxRobertaForTokenClassification"),xit=o(" (RoBERTa model)"),$it=l(),b7=a("li"),Oye=a("strong"),kit=o("roformer"),Sit=o(" \u2014 "),wae=a("a"),Rit=o("FlaxRoFormerForTokenClassification"),Pit=o(" (RoFormer model)"),Bit=l(),v7=a("li"),Vye=a("strong"),Iit=o("xlm-roberta"),Nit=o(" \u2014 "),Aae=a("a"),qit=o("FlaxXLMRobertaForTokenClassification"),jit=o(" (XLM-RoBERTa model)"),Dit=l(),F(F7.$$.fragment),mJe=l(),qm=a("h2"),T7=a("a"),Xye=a("span"),F(vS.$$.fragment),Git=l(),zye=a("span"),Oit=o("FlaxAutoModelForMultipleChoice"),fJe=l(),Lr=a("div"),F(FS.$$.fragment),Vit=l(),jm=a("p"),Xit=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Lae=a("a"),zit=o("from_pretrained()"),Wit=o(" class method or the "),yae=a("a"),Qit=o("from_config()"),Uit=o(` class
method.`),Hit=l(),TS=a("p"),Jit=o("This class cannot be instantiated directly using "),Wye=a("code"),Yit=o("__init__()"),Kit=o(" (throws an error)."),Zit=l(),la=a("div"),F(MS.$$.fragment),edt=l(),Qye=a("p"),odt=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),rdt=l(),Dm=a("p"),tdt=o(`Note:
Loading a model from its configuration file does `),Uye=a("strong"),adt=o("not"),ndt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xae=a("a"),sdt=o("from_pretrained()"),ldt=o(" to load the model weights."),idt=l(),F(M7.$$.fragment),ddt=l(),rt=a("div"),F(ES.$$.fragment),cdt=l(),Hye=a("p"),mdt=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),fdt=l(),jn=a("p"),gdt=o("The model class to instantiate is selected based on the "),Jye=a("code"),hdt=o("model_type"),udt=o(` property of the config object (either
passed as an argument or loaded from `),Yye=a("code"),pdt=o("pretrained_model_name_or_path"),_dt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kye=a("code"),bdt=o("pretrained_model_name_or_path"),vdt=o(":"),Fdt=l(),ze=a("ul"),E7=a("li"),Zye=a("strong"),Tdt=o("albert"),Mdt=o(" \u2014 "),$ae=a("a"),Edt=o("FlaxAlbertForMultipleChoice"),Cdt=o(" (ALBERT model)"),wdt=l(),C7=a("li"),e8e=a("strong"),Adt=o("bert"),Ldt=o(" \u2014 "),kae=a("a"),ydt=o("FlaxBertForMultipleChoice"),xdt=o(" (BERT model)"),$dt=l(),w7=a("li"),o8e=a("strong"),kdt=o("big_bird"),Sdt=o(" \u2014 "),Sae=a("a"),Rdt=o("FlaxBigBirdForMultipleChoice"),Pdt=o(" (BigBird model)"),Bdt=l(),A7=a("li"),r8e=a("strong"),Idt=o("distilbert"),Ndt=o(" \u2014 "),Rae=a("a"),qdt=o("FlaxDistilBertForMultipleChoice"),jdt=o(" (DistilBERT model)"),Ddt=l(),L7=a("li"),t8e=a("strong"),Gdt=o("electra"),Odt=o(" \u2014 "),Pae=a("a"),Vdt=o("FlaxElectraForMultipleChoice"),Xdt=o(" (ELECTRA model)"),zdt=l(),y7=a("li"),a8e=a("strong"),Wdt=o("roberta"),Qdt=o(" \u2014 "),Bae=a("a"),Udt=o("FlaxRobertaForMultipleChoice"),Hdt=o(" (RoBERTa model)"),Jdt=l(),x7=a("li"),n8e=a("strong"),Ydt=o("roformer"),Kdt=o(" \u2014 "),Iae=a("a"),Zdt=o("FlaxRoFormerForMultipleChoice"),ect=o(" (RoFormer model)"),oct=l(),$7=a("li"),s8e=a("strong"),rct=o("xlm-roberta"),tct=o(" \u2014 "),Nae=a("a"),act=o("FlaxXLMRobertaForMultipleChoice"),nct=o(" (XLM-RoBERTa model)"),sct=l(),F(k7.$$.fragment),gJe=l(),Gm=a("h2"),S7=a("a"),l8e=a("span"),F(CS.$$.fragment),lct=l(),i8e=a("span"),ict=o("FlaxAutoModelForNextSentencePrediction"),hJe=l(),yr=a("div"),F(wS.$$.fragment),dct=l(),Om=a("p"),cct=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),qae=a("a"),mct=o("from_pretrained()"),fct=o(" class method or the "),jae=a("a"),gct=o("from_config()"),hct=o(` class
method.`),uct=l(),AS=a("p"),pct=o("This class cannot be instantiated directly using "),d8e=a("code"),_ct=o("__init__()"),bct=o(" (throws an error)."),vct=l(),ia=a("div"),F(LS.$$.fragment),Fct=l(),c8e=a("p"),Tct=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Mct=l(),Vm=a("p"),Ect=o(`Note:
Loading a model from its configuration file does `),m8e=a("strong"),Cct=o("not"),wct=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Dae=a("a"),Act=o("from_pretrained()"),Lct=o(" to load the model weights."),yct=l(),F(R7.$$.fragment),xct=l(),tt=a("div"),F(yS.$$.fragment),$ct=l(),f8e=a("p"),kct=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Sct=l(),Dn=a("p"),Rct=o("The model class to instantiate is selected based on the "),g8e=a("code"),Pct=o("model_type"),Bct=o(` property of the config object (either
passed as an argument or loaded from `),h8e=a("code"),Ict=o("pretrained_model_name_or_path"),Nct=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u8e=a("code"),qct=o("pretrained_model_name_or_path"),jct=o(":"),Dct=l(),p8e=a("ul"),P7=a("li"),_8e=a("strong"),Gct=o("bert"),Oct=o(" \u2014 "),Gae=a("a"),Vct=o("FlaxBertForNextSentencePrediction"),Xct=o(" (BERT model)"),zct=l(),F(B7.$$.fragment),uJe=l(),Xm=a("h2"),I7=a("a"),b8e=a("span"),F(xS.$$.fragment),Wct=l(),v8e=a("span"),Qct=o("FlaxAutoModelForImageClassification"),pJe=l(),xr=a("div"),F($S.$$.fragment),Uct=l(),zm=a("p"),Hct=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Oae=a("a"),Jct=o("from_pretrained()"),Yct=o(" class method or the "),Vae=a("a"),Kct=o("from_config()"),Zct=o(` class
method.`),emt=l(),kS=a("p"),omt=o("This class cannot be instantiated directly using "),F8e=a("code"),rmt=o("__init__()"),tmt=o(" (throws an error)."),amt=l(),da=a("div"),F(SS.$$.fragment),nmt=l(),T8e=a("p"),smt=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),lmt=l(),Wm=a("p"),imt=o(`Note:
Loading a model from its configuration file does `),M8e=a("strong"),dmt=o("not"),cmt=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Xae=a("a"),mmt=o("from_pretrained()"),fmt=o(" to load the model weights."),gmt=l(),F(N7.$$.fragment),hmt=l(),at=a("div"),F(RS.$$.fragment),umt=l(),E8e=a("p"),pmt=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),_mt=l(),Gn=a("p"),bmt=o("The model class to instantiate is selected based on the "),C8e=a("code"),vmt=o("model_type"),Fmt=o(` property of the config object (either
passed as an argument or loaded from `),w8e=a("code"),Tmt=o("pretrained_model_name_or_path"),Mmt=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A8e=a("code"),Emt=o("pretrained_model_name_or_path"),Cmt=o(":"),wmt=l(),PS=a("ul"),q7=a("li"),L8e=a("strong"),Amt=o("beit"),Lmt=o(" \u2014 "),zae=a("a"),ymt=o("FlaxBeitForImageClassification"),xmt=o(" (BEiT model)"),$mt=l(),j7=a("li"),y8e=a("strong"),kmt=o("vit"),Smt=o(" \u2014 "),Wae=a("a"),Rmt=o("FlaxViTForImageClassification"),Pmt=o(" (ViT model)"),Bmt=l(),F(D7.$$.fragment),_Je=l(),Qm=a("h2"),G7=a("a"),x8e=a("span"),F(BS.$$.fragment),Imt=l(),$8e=a("span"),Nmt=o("FlaxAutoModelForVision2Seq"),bJe=l(),$r=a("div"),F(IS.$$.fragment),qmt=l(),Um=a("p"),jmt=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Qae=a("a"),Dmt=o("from_pretrained()"),Gmt=o(" class method or the "),Uae=a("a"),Omt=o("from_config()"),Vmt=o(` class
method.`),Xmt=l(),NS=a("p"),zmt=o("This class cannot be instantiated directly using "),k8e=a("code"),Wmt=o("__init__()"),Qmt=o(" (throws an error)."),Umt=l(),ca=a("div"),F(qS.$$.fragment),Hmt=l(),S8e=a("p"),Jmt=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Ymt=l(),Hm=a("p"),Kmt=o(`Note:
Loading a model from its configuration file does `),R8e=a("strong"),Zmt=o("not"),eft=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Hae=a("a"),oft=o("from_pretrained()"),rft=o(" to load the model weights."),tft=l(),F(O7.$$.fragment),aft=l(),nt=a("div"),F(jS.$$.fragment),nft=l(),P8e=a("p"),sft=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),lft=l(),On=a("p"),ift=o("The model class to instantiate is selected based on the "),B8e=a("code"),dft=o("model_type"),cft=o(` property of the config object (either
passed as an argument or loaded from `),I8e=a("code"),mft=o("pretrained_model_name_or_path"),fft=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N8e=a("code"),gft=o("pretrained_model_name_or_path"),hft=o(":"),uft=l(),q8e=a("ul"),V7=a("li"),j8e=a("strong"),pft=o("vision-encoder-decoder"),_ft=o(" \u2014 "),Jae=a("a"),bft=o("FlaxVisionEncoderDecoderModel"),vft=o(" (Vision Encoder decoder model)"),Fft=l(),F(X7.$$.fragment),this.h()},l(m){const _=Uta('[data-svelte="svelte-1phssyn"]',document.head);g=n(_,"META",{name:!0,content:!0}),_.forEach(t),v=i(m),u=n(m,"H1",{class:!0});var DS=s(u);f=n(DS,"A",{id:!0,class:!0,href:!0});var D8e=s(f);p=n(D8e,"SPAN",{});var G8e=s(p);T(d.$$.fragment,G8e),G8e.forEach(t),D8e.forEach(t),h=i(DS),Ao=n(DS,"SPAN",{});var O8e=s(Ao);Oi=r(O8e,"Auto Classes"),O8e.forEach(t),DS.forEach(t),Zm=i(m),mt=n(m,"P",{});var GS=s(mt);Vi=r(GS,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Xi=n(GS,"CODE",{});var V8e=s(Xi);u8=r(V8e,"from_pretrained()"),V8e.forEach(t),ef=r(GS,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),GS.forEach(t),Oe=i(m),Qe=n(m,"P",{});var Vn=s(Qe);zi=r(Vn,"Instantiating one of "),Xn=n(Vn,"A",{href:!0});var X8e=s(Xn);p8=r(X8e,"AutoConfig"),X8e.forEach(t),zn=r(Vn,", "),Wn=n(Vn,"A",{href:!0});var z8e=s(Wn);_8=r(z8e,"AutoModel"),z8e.forEach(t),Wi=r(Vn,`, and
`),Qn=n(Vn,"A",{href:!0});var W8e=s(Qn);b8=r(W8e,"AutoTokenizer"),W8e.forEach(t),Qi=r(Vn," will directly create a class of the relevant architecture. For instance"),Vn.forEach(t),of=i(m),T(ja.$$.fragment,m),Ue=i(m),Ae=n(m,"P",{});var OS=s(Ae);dP=r(OS,"will create a model that is an instance of "),Ui=n(OS,"A",{href:!0});var Q8e=s(Ui);cP=r(Q8e,"BertModel"),Q8e.forEach(t),mP=r(OS,"."),OS.forEach(t),Lo=i(m),Da=n(m,"P",{});var VS=s(Da);fP=r(VS,"There is one class of "),rf=n(VS,"CODE",{});var U8e=s(rf);gP=r(U8e,"AutoModel"),U8e.forEach(t),PKe=r(VS," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),VS.forEach(t),cUe=i(m),Hi=n(m,"H2",{class:!0});var XS=s(Hi);tf=n(XS,"A",{id:!0,class:!0,href:!0});var H8e=s(tf);Use=n(H8e,"SPAN",{});var J8e=s(Use);T(v8.$$.fragment,J8e),J8e.forEach(t),H8e.forEach(t),BKe=i(XS),Hse=n(XS,"SPAN",{});var Y8e=s(Hse);IKe=r(Y8e,"Extending the Auto Classes"),Y8e.forEach(t),XS.forEach(t),mUe=i(m),Un=n(m,"P",{});var Jm=s(Un);NKe=r(Jm,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Jse=n(Jm,"CODE",{});var K8e=s(Jse);qKe=r(K8e,"NewModel"),K8e.forEach(t),jKe=r(Jm,", make sure you have a "),Yse=n(Jm,"CODE",{});var Z8e=s(Yse);DKe=r(Z8e,"NewModelConfig"),Z8e.forEach(t),GKe=r(Jm,` then you can add those to the auto
classes like this:`),Jm.forEach(t),fUe=i(m),T(F8.$$.fragment,m),gUe=i(m),hP=n(m,"P",{});var e9e=s(hP);OKe=r(e9e,"You will then be able to use the auto classes like you would usually do!"),e9e.forEach(t),hUe=i(m),T(af.$$.fragment,m),uUe=i(m),Ji=n(m,"H2",{class:!0});var zS=s(Ji);nf=n(zS,"A",{id:!0,class:!0,href:!0});var o9e=s(nf);Kse=n(o9e,"SPAN",{});var r9e=s(Kse);T(T8.$$.fragment,r9e),r9e.forEach(t),o9e.forEach(t),VKe=i(zS),Zse=n(zS,"SPAN",{});var t9e=s(Zse);XKe=r(t9e,"AutoConfig"),t9e.forEach(t),zS.forEach(t),pUe=i(m),yo=n(m,"DIV",{class:!0});var dt=s(yo);T(M8.$$.fragment,dt),zKe=i(dt),E8=n(dt,"P",{});var WS=s(E8);WKe=r(WS,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),uP=n(WS,"A",{href:!0});var a9e=s(uP);QKe=r(a9e,"from_pretrained()"),a9e.forEach(t),UKe=r(WS," class method."),WS.forEach(t),HKe=i(dt),C8=n(dt,"P",{});var QS=s(C8);JKe=r(QS,"This class cannot be instantiated directly using "),ele=n(QS,"CODE",{});var n9e=s(ele);YKe=r(n9e,"__init__()"),n9e.forEach(t),KKe=r(QS," (throws an error)."),QS.forEach(t),ZKe=i(dt),kr=n(dt,"DIV",{class:!0});var ct=s(kr);T(w8.$$.fragment,ct),eZe=i(ct),ole=n(ct,"P",{});var s9e=s(ole);oZe=r(s9e,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),s9e.forEach(t),rZe=i(ct),Yi=n(ct,"P",{});var Ym=s(Yi);tZe=r(Ym,"The configuration class to instantiate is selected based on the "),rle=n(Ym,"CODE",{});var l9e=s(rle);aZe=r(l9e,"model_type"),l9e.forEach(t),nZe=r(Ym,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),tle=n(Ym,"CODE",{});var i9e=s(tle);sZe=r(i9e,"pretrained_model_name_or_path"),i9e.forEach(t),lZe=r(Ym,":"),Ym.forEach(t),iZe=i(ct),A=n(ct,"UL",{});var L=s(A);sf=n(L,"LI",{});var z7=s(sf);ale=n(z7,"STRONG",{});var d9e=s(ale);dZe=r(d9e,"albert"),d9e.forEach(t),cZe=r(z7," \u2014 "),pP=n(z7,"A",{href:!0});var c9e=s(pP);mZe=r(c9e,"AlbertConfig"),c9e.forEach(t),fZe=r(z7," (ALBERT model)"),z7.forEach(t),gZe=i(L),lf=n(L,"LI",{});var W7=s(lf);nle=n(W7,"STRONG",{});var m9e=s(nle);hZe=r(m9e,"bart"),m9e.forEach(t),uZe=r(W7," \u2014 "),_P=n(W7,"A",{href:!0});var f9e=s(_P);pZe=r(f9e,"BartConfig"),f9e.forEach(t),_Ze=r(W7," (BART model)"),W7.forEach(t),bZe=i(L),df=n(L,"LI",{});var Q7=s(df);sle=n(Q7,"STRONG",{});var g9e=s(sle);vZe=r(g9e,"beit"),g9e.forEach(t),FZe=r(Q7," \u2014 "),bP=n(Q7,"A",{href:!0});var h9e=s(bP);TZe=r(h9e,"BeitConfig"),h9e.forEach(t),MZe=r(Q7," (BEiT model)"),Q7.forEach(t),EZe=i(L),cf=n(L,"LI",{});var U7=s(cf);lle=n(U7,"STRONG",{});var u9e=s(lle);CZe=r(u9e,"bert"),u9e.forEach(t),wZe=r(U7," \u2014 "),vP=n(U7,"A",{href:!0});var p9e=s(vP);AZe=r(p9e,"BertConfig"),p9e.forEach(t),LZe=r(U7," (BERT model)"),U7.forEach(t),yZe=i(L),mf=n(L,"LI",{});var H7=s(mf);ile=n(H7,"STRONG",{});var _9e=s(ile);xZe=r(_9e,"bert-generation"),_9e.forEach(t),$Ze=r(H7," \u2014 "),FP=n(H7,"A",{href:!0});var b9e=s(FP);kZe=r(b9e,"BertGenerationConfig"),b9e.forEach(t),SZe=r(H7," (Bert Generation model)"),H7.forEach(t),RZe=i(L),ff=n(L,"LI",{});var J7=s(ff);dle=n(J7,"STRONG",{});var v9e=s(dle);PZe=r(v9e,"big_bird"),v9e.forEach(t),BZe=r(J7," \u2014 "),TP=n(J7,"A",{href:!0});var F9e=s(TP);IZe=r(F9e,"BigBirdConfig"),F9e.forEach(t),NZe=r(J7," (BigBird model)"),J7.forEach(t),qZe=i(L),gf=n(L,"LI",{});var Y7=s(gf);cle=n(Y7,"STRONG",{});var T9e=s(cle);jZe=r(T9e,"bigbird_pegasus"),T9e.forEach(t),DZe=r(Y7," \u2014 "),MP=n(Y7,"A",{href:!0});var M9e=s(MP);GZe=r(M9e,"BigBirdPegasusConfig"),M9e.forEach(t),OZe=r(Y7," (BigBird-Pegasus model)"),Y7.forEach(t),VZe=i(L),hf=n(L,"LI",{});var K7=s(hf);mle=n(K7,"STRONG",{});var E9e=s(mle);XZe=r(E9e,"blenderbot"),E9e.forEach(t),zZe=r(K7," \u2014 "),EP=n(K7,"A",{href:!0});var C9e=s(EP);WZe=r(C9e,"BlenderbotConfig"),C9e.forEach(t),QZe=r(K7," (Blenderbot model)"),K7.forEach(t),UZe=i(L),uf=n(L,"LI",{});var Z7=s(uf);fle=n(Z7,"STRONG",{});var w9e=s(fle);HZe=r(w9e,"blenderbot-small"),w9e.forEach(t),JZe=r(Z7," \u2014 "),CP=n(Z7,"A",{href:!0});var A9e=s(CP);YZe=r(A9e,"BlenderbotSmallConfig"),A9e.forEach(t),KZe=r(Z7," (BlenderbotSmall model)"),Z7.forEach(t),ZZe=i(L),pf=n(L,"LI",{});var eL=s(pf);gle=n(eL,"STRONG",{});var L9e=s(gle);eeo=r(L9e,"bloom"),L9e.forEach(t),oeo=r(eL," \u2014 "),wP=n(eL,"A",{href:!0});var y9e=s(wP);reo=r(y9e,"BloomConfig"),y9e.forEach(t),teo=r(eL," (BLOOM model)"),eL.forEach(t),aeo=i(L),_f=n(L,"LI",{});var oL=s(_f);hle=n(oL,"STRONG",{});var x9e=s(hle);neo=r(x9e,"camembert"),x9e.forEach(t),seo=r(oL," \u2014 "),AP=n(oL,"A",{href:!0});var $9e=s(AP);leo=r($9e,"CamembertConfig"),$9e.forEach(t),ieo=r(oL," (CamemBERT model)"),oL.forEach(t),deo=i(L),bf=n(L,"LI",{});var rL=s(bf);ule=n(rL,"STRONG",{});var k9e=s(ule);ceo=r(k9e,"canine"),k9e.forEach(t),meo=r(rL," \u2014 "),LP=n(rL,"A",{href:!0});var S9e=s(LP);feo=r(S9e,"CanineConfig"),S9e.forEach(t),geo=r(rL," (CANINE model)"),rL.forEach(t),heo=i(L),vf=n(L,"LI",{});var tL=s(vf);ple=n(tL,"STRONG",{});var R9e=s(ple);ueo=r(R9e,"clip"),R9e.forEach(t),peo=r(tL," \u2014 "),yP=n(tL,"A",{href:!0});var P9e=s(yP);_eo=r(P9e,"CLIPConfig"),P9e.forEach(t),beo=r(tL," (CLIP model)"),tL.forEach(t),veo=i(L),Ff=n(L,"LI",{});var aL=s(Ff);_le=n(aL,"STRONG",{});var B9e=s(_le);Feo=r(B9e,"codegen"),B9e.forEach(t),Teo=r(aL," \u2014 "),xP=n(aL,"A",{href:!0});var I9e=s(xP);Meo=r(I9e,"CodeGenConfig"),I9e.forEach(t),Eeo=r(aL," (CodeGen model)"),aL.forEach(t),Ceo=i(L),Tf=n(L,"LI",{});var nL=s(Tf);ble=n(nL,"STRONG",{});var N9e=s(ble);weo=r(N9e,"convbert"),N9e.forEach(t),Aeo=r(nL," \u2014 "),$P=n(nL,"A",{href:!0});var q9e=s($P);Leo=r(q9e,"ConvBertConfig"),q9e.forEach(t),yeo=r(nL," (ConvBERT model)"),nL.forEach(t),xeo=i(L),Mf=n(L,"LI",{});var sL=s(Mf);vle=n(sL,"STRONG",{});var j9e=s(vle);$eo=r(j9e,"convnext"),j9e.forEach(t),keo=r(sL," \u2014 "),kP=n(sL,"A",{href:!0});var D9e=s(kP);Seo=r(D9e,"ConvNextConfig"),D9e.forEach(t),Reo=r(sL," (ConvNeXT model)"),sL.forEach(t),Peo=i(L),Ef=n(L,"LI",{});var lL=s(Ef);Fle=n(lL,"STRONG",{});var G9e=s(Fle);Beo=r(G9e,"ctrl"),G9e.forEach(t),Ieo=r(lL," \u2014 "),SP=n(lL,"A",{href:!0});var O9e=s(SP);Neo=r(O9e,"CTRLConfig"),O9e.forEach(t),qeo=r(lL," (CTRL model)"),lL.forEach(t),jeo=i(L),Cf=n(L,"LI",{});var iL=s(Cf);Tle=n(iL,"STRONG",{});var V9e=s(Tle);Deo=r(V9e,"cvt"),V9e.forEach(t),Geo=r(iL," \u2014 "),RP=n(iL,"A",{href:!0});var X9e=s(RP);Oeo=r(X9e,"CvtConfig"),X9e.forEach(t),Veo=r(iL," (CvT model)"),iL.forEach(t),Xeo=i(L),wf=n(L,"LI",{});var dL=s(wf);Mle=n(dL,"STRONG",{});var z9e=s(Mle);zeo=r(z9e,"data2vec-audio"),z9e.forEach(t),Weo=r(dL," \u2014 "),PP=n(dL,"A",{href:!0});var W9e=s(PP);Qeo=r(W9e,"Data2VecAudioConfig"),W9e.forEach(t),Ueo=r(dL," (Data2VecAudio model)"),dL.forEach(t),Heo=i(L),Af=n(L,"LI",{});var cL=s(Af);Ele=n(cL,"STRONG",{});var Q9e=s(Ele);Jeo=r(Q9e,"data2vec-text"),Q9e.forEach(t),Yeo=r(cL," \u2014 "),BP=n(cL,"A",{href:!0});var U9e=s(BP);Keo=r(U9e,"Data2VecTextConfig"),U9e.forEach(t),Zeo=r(cL," (Data2VecText model)"),cL.forEach(t),eoo=i(L),Lf=n(L,"LI",{});var mL=s(Lf);Cle=n(mL,"STRONG",{});var H9e=s(Cle);ooo=r(H9e,"data2vec-vision"),H9e.forEach(t),roo=r(mL," \u2014 "),IP=n(mL,"A",{href:!0});var J9e=s(IP);too=r(J9e,"Data2VecVisionConfig"),J9e.forEach(t),aoo=r(mL," (Data2VecVision model)"),mL.forEach(t),noo=i(L),yf=n(L,"LI",{});var fL=s(yf);wle=n(fL,"STRONG",{});var Y9e=s(wle);soo=r(Y9e,"deberta"),Y9e.forEach(t),loo=r(fL," \u2014 "),NP=n(fL,"A",{href:!0});var K9e=s(NP);ioo=r(K9e,"DebertaConfig"),K9e.forEach(t),doo=r(fL," (DeBERTa model)"),fL.forEach(t),coo=i(L),xf=n(L,"LI",{});var gL=s(xf);Ale=n(gL,"STRONG",{});var Z9e=s(Ale);moo=r(Z9e,"deberta-v2"),Z9e.forEach(t),foo=r(gL," \u2014 "),qP=n(gL,"A",{href:!0});var exe=s(qP);goo=r(exe,"DebertaV2Config"),exe.forEach(t),hoo=r(gL," (DeBERTa-v2 model)"),gL.forEach(t),uoo=i(L),$f=n(L,"LI",{});var hL=s($f);Lle=n(hL,"STRONG",{});var oxe=s(Lle);poo=r(oxe,"decision_transformer"),oxe.forEach(t),_oo=r(hL," \u2014 "),jP=n(hL,"A",{href:!0});var rxe=s(jP);boo=r(rxe,"DecisionTransformerConfig"),rxe.forEach(t),voo=r(hL," (Decision Transformer model)"),hL.forEach(t),Foo=i(L),kf=n(L,"LI",{});var uL=s(kf);yle=n(uL,"STRONG",{});var txe=s(yle);Too=r(txe,"deit"),txe.forEach(t),Moo=r(uL," \u2014 "),DP=n(uL,"A",{href:!0});var Mft=s(DP);Eoo=r(Mft,"DeiTConfig"),Mft.forEach(t),Coo=r(uL," (DeiT model)"),uL.forEach(t),woo=i(L),Sf=n(L,"LI",{});var axe=s(Sf);xle=n(axe,"STRONG",{});var Eft=s(xle);Aoo=r(Eft,"detr"),Eft.forEach(t),Loo=r(axe," \u2014 "),GP=n(axe,"A",{href:!0});var Cft=s(GP);yoo=r(Cft,"DetrConfig"),Cft.forEach(t),xoo=r(axe," (DETR model)"),axe.forEach(t),$oo=i(L),Rf=n(L,"LI",{});var nxe=s(Rf);$le=n(nxe,"STRONG",{});var wft=s($le);koo=r(wft,"distilbert"),wft.forEach(t),Soo=r(nxe," \u2014 "),OP=n(nxe,"A",{href:!0});var Aft=s(OP);Roo=r(Aft,"DistilBertConfig"),Aft.forEach(t),Poo=r(nxe," (DistilBERT model)"),nxe.forEach(t),Boo=i(L),Pf=n(L,"LI",{});var sxe=s(Pf);kle=n(sxe,"STRONG",{});var Lft=s(kle);Ioo=r(Lft,"donut-swin"),Lft.forEach(t),Noo=r(sxe," \u2014 "),VP=n(sxe,"A",{href:!0});var yft=s(VP);qoo=r(yft,"DonutSwinConfig"),yft.forEach(t),joo=r(sxe," (DonutSwin model)"),sxe.forEach(t),Doo=i(L),Bf=n(L,"LI",{});var lxe=s(Bf);Sle=n(lxe,"STRONG",{});var xft=s(Sle);Goo=r(xft,"dpr"),xft.forEach(t),Ooo=r(lxe," \u2014 "),XP=n(lxe,"A",{href:!0});var $ft=s(XP);Voo=r($ft,"DPRConfig"),$ft.forEach(t),Xoo=r(lxe," (DPR model)"),lxe.forEach(t),zoo=i(L),If=n(L,"LI",{});var ixe=s(If);Rle=n(ixe,"STRONG",{});var kft=s(Rle);Woo=r(kft,"dpt"),kft.forEach(t),Qoo=r(ixe," \u2014 "),zP=n(ixe,"A",{href:!0});var Sft=s(zP);Uoo=r(Sft,"DPTConfig"),Sft.forEach(t),Hoo=r(ixe," (DPT model)"),ixe.forEach(t),Joo=i(L),Nf=n(L,"LI",{});var dxe=s(Nf);Ple=n(dxe,"STRONG",{});var Rft=s(Ple);Yoo=r(Rft,"electra"),Rft.forEach(t),Koo=r(dxe," \u2014 "),WP=n(dxe,"A",{href:!0});var Pft=s(WP);Zoo=r(Pft,"ElectraConfig"),Pft.forEach(t),ero=r(dxe," (ELECTRA model)"),dxe.forEach(t),oro=i(L),qf=n(L,"LI",{});var cxe=s(qf);Ble=n(cxe,"STRONG",{});var Bft=s(Ble);rro=r(Bft,"encoder-decoder"),Bft.forEach(t),tro=r(cxe," \u2014 "),QP=n(cxe,"A",{href:!0});var Ift=s(QP);aro=r(Ift,"EncoderDecoderConfig"),Ift.forEach(t),nro=r(cxe," (Encoder decoder model)"),cxe.forEach(t),sro=i(L),jf=n(L,"LI",{});var mxe=s(jf);Ile=n(mxe,"STRONG",{});var Nft=s(Ile);lro=r(Nft,"flaubert"),Nft.forEach(t),iro=r(mxe," \u2014 "),UP=n(mxe,"A",{href:!0});var qft=s(UP);dro=r(qft,"FlaubertConfig"),qft.forEach(t),cro=r(mxe," (FlauBERT model)"),mxe.forEach(t),mro=i(L),Df=n(L,"LI",{});var fxe=s(Df);Nle=n(fxe,"STRONG",{});var jft=s(Nle);fro=r(jft,"flava"),jft.forEach(t),gro=r(fxe," \u2014 "),HP=n(fxe,"A",{href:!0});var Dft=s(HP);hro=r(Dft,"FlavaConfig"),Dft.forEach(t),uro=r(fxe," (FLAVA model)"),fxe.forEach(t),pro=i(L),Gf=n(L,"LI",{});var gxe=s(Gf);qle=n(gxe,"STRONG",{});var Gft=s(qle);_ro=r(Gft,"fnet"),Gft.forEach(t),bro=r(gxe," \u2014 "),JP=n(gxe,"A",{href:!0});var Oft=s(JP);vro=r(Oft,"FNetConfig"),Oft.forEach(t),Fro=r(gxe," (FNet model)"),gxe.forEach(t),Tro=i(L),Of=n(L,"LI",{});var hxe=s(Of);jle=n(hxe,"STRONG",{});var Vft=s(jle);Mro=r(Vft,"fsmt"),Vft.forEach(t),Ero=r(hxe," \u2014 "),YP=n(hxe,"A",{href:!0});var Xft=s(YP);Cro=r(Xft,"FSMTConfig"),Xft.forEach(t),wro=r(hxe," (FairSeq Machine-Translation model)"),hxe.forEach(t),Aro=i(L),Vf=n(L,"LI",{});var uxe=s(Vf);Dle=n(uxe,"STRONG",{});var zft=s(Dle);Lro=r(zft,"funnel"),zft.forEach(t),yro=r(uxe," \u2014 "),KP=n(uxe,"A",{href:!0});var Wft=s(KP);xro=r(Wft,"FunnelConfig"),Wft.forEach(t),$ro=r(uxe," (Funnel Transformer model)"),uxe.forEach(t),kro=i(L),Xf=n(L,"LI",{});var pxe=s(Xf);Gle=n(pxe,"STRONG",{});var Qft=s(Gle);Sro=r(Qft,"glpn"),Qft.forEach(t),Rro=r(pxe," \u2014 "),ZP=n(pxe,"A",{href:!0});var Uft=s(ZP);Pro=r(Uft,"GLPNConfig"),Uft.forEach(t),Bro=r(pxe," (GLPN model)"),pxe.forEach(t),Iro=i(L),zf=n(L,"LI",{});var _xe=s(zf);Ole=n(_xe,"STRONG",{});var Hft=s(Ole);Nro=r(Hft,"gpt2"),Hft.forEach(t),qro=r(_xe," \u2014 "),eB=n(_xe,"A",{href:!0});var Jft=s(eB);jro=r(Jft,"GPT2Config"),Jft.forEach(t),Dro=r(_xe," (OpenAI GPT-2 model)"),_xe.forEach(t),Gro=i(L),Wf=n(L,"LI",{});var bxe=s(Wf);Vle=n(bxe,"STRONG",{});var Yft=s(Vle);Oro=r(Yft,"gpt_neo"),Yft.forEach(t),Vro=r(bxe," \u2014 "),oB=n(bxe,"A",{href:!0});var Kft=s(oB);Xro=r(Kft,"GPTNeoConfig"),Kft.forEach(t),zro=r(bxe," (GPT Neo model)"),bxe.forEach(t),Wro=i(L),Qf=n(L,"LI",{});var vxe=s(Qf);Xle=n(vxe,"STRONG",{});var Zft=s(Xle);Qro=r(Zft,"gpt_neox"),Zft.forEach(t),Uro=r(vxe," \u2014 "),rB=n(vxe,"A",{href:!0});var egt=s(rB);Hro=r(egt,"GPTNeoXConfig"),egt.forEach(t),Jro=r(vxe," (GPT NeoX model)"),vxe.forEach(t),Yro=i(L),Uf=n(L,"LI",{});var Fxe=s(Uf);zle=n(Fxe,"STRONG",{});var ogt=s(zle);Kro=r(ogt,"gptj"),ogt.forEach(t),Zro=r(Fxe," \u2014 "),tB=n(Fxe,"A",{href:!0});var rgt=s(tB);eto=r(rgt,"GPTJConfig"),rgt.forEach(t),oto=r(Fxe," (GPT-J model)"),Fxe.forEach(t),rto=i(L),Hf=n(L,"LI",{});var Txe=s(Hf);Wle=n(Txe,"STRONG",{});var tgt=s(Wle);tto=r(tgt,"groupvit"),tgt.forEach(t),ato=r(Txe," \u2014 "),aB=n(Txe,"A",{href:!0});var agt=s(aB);nto=r(agt,"GroupViTConfig"),agt.forEach(t),sto=r(Txe," (GroupViT model)"),Txe.forEach(t),lto=i(L),Jf=n(L,"LI",{});var Mxe=s(Jf);Qle=n(Mxe,"STRONG",{});var ngt=s(Qle);ito=r(ngt,"hubert"),ngt.forEach(t),dto=r(Mxe," \u2014 "),nB=n(Mxe,"A",{href:!0});var sgt=s(nB);cto=r(sgt,"HubertConfig"),sgt.forEach(t),mto=r(Mxe," (Hubert model)"),Mxe.forEach(t),fto=i(L),Yf=n(L,"LI",{});var Exe=s(Yf);Ule=n(Exe,"STRONG",{});var lgt=s(Ule);gto=r(lgt,"ibert"),lgt.forEach(t),hto=r(Exe," \u2014 "),sB=n(Exe,"A",{href:!0});var igt=s(sB);uto=r(igt,"IBertConfig"),igt.forEach(t),pto=r(Exe," (I-BERT model)"),Exe.forEach(t),_to=i(L),Kf=n(L,"LI",{});var Cxe=s(Kf);Hle=n(Cxe,"STRONG",{});var dgt=s(Hle);bto=r(dgt,"imagegpt"),dgt.forEach(t),vto=r(Cxe," \u2014 "),lB=n(Cxe,"A",{href:!0});var cgt=s(lB);Fto=r(cgt,"ImageGPTConfig"),cgt.forEach(t),Tto=r(Cxe," (ImageGPT model)"),Cxe.forEach(t),Mto=i(L),Zf=n(L,"LI",{});var wxe=s(Zf);Jle=n(wxe,"STRONG",{});var mgt=s(Jle);Eto=r(mgt,"layoutlm"),mgt.forEach(t),Cto=r(wxe," \u2014 "),iB=n(wxe,"A",{href:!0});var fgt=s(iB);wto=r(fgt,"LayoutLMConfig"),fgt.forEach(t),Ato=r(wxe," (LayoutLM model)"),wxe.forEach(t),Lto=i(L),eg=n(L,"LI",{});var Axe=s(eg);Yle=n(Axe,"STRONG",{});var ggt=s(Yle);yto=r(ggt,"layoutlmv2"),ggt.forEach(t),xto=r(Axe," \u2014 "),dB=n(Axe,"A",{href:!0});var hgt=s(dB);$to=r(hgt,"LayoutLMv2Config"),hgt.forEach(t),kto=r(Axe," (LayoutLMv2 model)"),Axe.forEach(t),Sto=i(L),og=n(L,"LI",{});var Lxe=s(og);Kle=n(Lxe,"STRONG",{});var ugt=s(Kle);Rto=r(ugt,"layoutlmv3"),ugt.forEach(t),Pto=r(Lxe," \u2014 "),cB=n(Lxe,"A",{href:!0});var pgt=s(cB);Bto=r(pgt,"LayoutLMv3Config"),pgt.forEach(t),Ito=r(Lxe," (LayoutLMv3 model)"),Lxe.forEach(t),Nto=i(L),rg=n(L,"LI",{});var yxe=s(rg);Zle=n(yxe,"STRONG",{});var _gt=s(Zle);qto=r(_gt,"led"),_gt.forEach(t),jto=r(yxe," \u2014 "),mB=n(yxe,"A",{href:!0});var bgt=s(mB);Dto=r(bgt,"LEDConfig"),bgt.forEach(t),Gto=r(yxe," (LED model)"),yxe.forEach(t),Oto=i(L),tg=n(L,"LI",{});var xxe=s(tg);eie=n(xxe,"STRONG",{});var vgt=s(eie);Vto=r(vgt,"levit"),vgt.forEach(t),Xto=r(xxe," \u2014 "),fB=n(xxe,"A",{href:!0});var Fgt=s(fB);zto=r(Fgt,"LevitConfig"),Fgt.forEach(t),Wto=r(xxe," (LeViT model)"),xxe.forEach(t),Qto=i(L),ag=n(L,"LI",{});var $xe=s(ag);oie=n($xe,"STRONG",{});var Tgt=s(oie);Uto=r(Tgt,"longformer"),Tgt.forEach(t),Hto=r($xe," \u2014 "),gB=n($xe,"A",{href:!0});var Mgt=s(gB);Jto=r(Mgt,"LongformerConfig"),Mgt.forEach(t),Yto=r($xe," (Longformer model)"),$xe.forEach(t),Kto=i(L),ng=n(L,"LI",{});var kxe=s(ng);rie=n(kxe,"STRONG",{});var Egt=s(rie);Zto=r(Egt,"longt5"),Egt.forEach(t),eao=r(kxe," \u2014 "),hB=n(kxe,"A",{href:!0});var Cgt=s(hB);oao=r(Cgt,"LongT5Config"),Cgt.forEach(t),rao=r(kxe," (LongT5 model)"),kxe.forEach(t),tao=i(L),sg=n(L,"LI",{});var Sxe=s(sg);tie=n(Sxe,"STRONG",{});var wgt=s(tie);aao=r(wgt,"luke"),wgt.forEach(t),nao=r(Sxe," \u2014 "),uB=n(Sxe,"A",{href:!0});var Agt=s(uB);sao=r(Agt,"LukeConfig"),Agt.forEach(t),lao=r(Sxe," (LUKE model)"),Sxe.forEach(t),iao=i(L),lg=n(L,"LI",{});var Rxe=s(lg);aie=n(Rxe,"STRONG",{});var Lgt=s(aie);dao=r(Lgt,"lxmert"),Lgt.forEach(t),cao=r(Rxe," \u2014 "),pB=n(Rxe,"A",{href:!0});var ygt=s(pB);mao=r(ygt,"LxmertConfig"),ygt.forEach(t),fao=r(Rxe," (LXMERT model)"),Rxe.forEach(t),gao=i(L),ig=n(L,"LI",{});var Pxe=s(ig);nie=n(Pxe,"STRONG",{});var xgt=s(nie);hao=r(xgt,"m2m_100"),xgt.forEach(t),uao=r(Pxe," \u2014 "),_B=n(Pxe,"A",{href:!0});var $gt=s(_B);pao=r($gt,"M2M100Config"),$gt.forEach(t),_ao=r(Pxe," (M2M100 model)"),Pxe.forEach(t),bao=i(L),dg=n(L,"LI",{});var Bxe=s(dg);sie=n(Bxe,"STRONG",{});var kgt=s(sie);vao=r(kgt,"marian"),kgt.forEach(t),Fao=r(Bxe," \u2014 "),bB=n(Bxe,"A",{href:!0});var Sgt=s(bB);Tao=r(Sgt,"MarianConfig"),Sgt.forEach(t),Mao=r(Bxe," (Marian model)"),Bxe.forEach(t),Eao=i(L),cg=n(L,"LI",{});var Ixe=s(cg);lie=n(Ixe,"STRONG",{});var Rgt=s(lie);Cao=r(Rgt,"maskformer"),Rgt.forEach(t),wao=r(Ixe," \u2014 "),vB=n(Ixe,"A",{href:!0});var Pgt=s(vB);Aao=r(Pgt,"MaskFormerConfig"),Pgt.forEach(t),Lao=r(Ixe," (MaskFormer model)"),Ixe.forEach(t),yao=i(L),mg=n(L,"LI",{});var Nxe=s(mg);iie=n(Nxe,"STRONG",{});var Bgt=s(iie);xao=r(Bgt,"mbart"),Bgt.forEach(t),$ao=r(Nxe," \u2014 "),FB=n(Nxe,"A",{href:!0});var Igt=s(FB);kao=r(Igt,"MBartConfig"),Igt.forEach(t),Sao=r(Nxe," (mBART model)"),Nxe.forEach(t),Rao=i(L),fg=n(L,"LI",{});var qxe=s(fg);die=n(qxe,"STRONG",{});var Ngt=s(die);Pao=r(Ngt,"mctct"),Ngt.forEach(t),Bao=r(qxe," \u2014 "),TB=n(qxe,"A",{href:!0});var qgt=s(TB);Iao=r(qgt,"MCTCTConfig"),qgt.forEach(t),Nao=r(qxe," (M-CTC-T model)"),qxe.forEach(t),qao=i(L),gg=n(L,"LI",{});var jxe=s(gg);cie=n(jxe,"STRONG",{});var jgt=s(cie);jao=r(jgt,"megatron-bert"),jgt.forEach(t),Dao=r(jxe," \u2014 "),MB=n(jxe,"A",{href:!0});var Dgt=s(MB);Gao=r(Dgt,"MegatronBertConfig"),Dgt.forEach(t),Oao=r(jxe," (Megatron-BERT model)"),jxe.forEach(t),Vao=i(L),hg=n(L,"LI",{});var Dxe=s(hg);mie=n(Dxe,"STRONG",{});var Ggt=s(mie);Xao=r(Ggt,"mobilebert"),Ggt.forEach(t),zao=r(Dxe," \u2014 "),EB=n(Dxe,"A",{href:!0});var Ogt=s(EB);Wao=r(Ogt,"MobileBertConfig"),Ogt.forEach(t),Qao=r(Dxe," (MobileBERT model)"),Dxe.forEach(t),Uao=i(L),ug=n(L,"LI",{});var Gxe=s(ug);fie=n(Gxe,"STRONG",{});var Vgt=s(fie);Hao=r(Vgt,"mobilevit"),Vgt.forEach(t),Jao=r(Gxe," \u2014 "),CB=n(Gxe,"A",{href:!0});var Xgt=s(CB);Yao=r(Xgt,"MobileViTConfig"),Xgt.forEach(t),Kao=r(Gxe," (MobileViT model)"),Gxe.forEach(t),Zao=i(L),pg=n(L,"LI",{});var Oxe=s(pg);gie=n(Oxe,"STRONG",{});var zgt=s(gie);eno=r(zgt,"mpnet"),zgt.forEach(t),ono=r(Oxe," \u2014 "),wB=n(Oxe,"A",{href:!0});var Wgt=s(wB);rno=r(Wgt,"MPNetConfig"),Wgt.forEach(t),tno=r(Oxe," (MPNet model)"),Oxe.forEach(t),ano=i(L),_g=n(L,"LI",{});var Vxe=s(_g);hie=n(Vxe,"STRONG",{});var Qgt=s(hie);nno=r(Qgt,"mt5"),Qgt.forEach(t),sno=r(Vxe," \u2014 "),AB=n(Vxe,"A",{href:!0});var Ugt=s(AB);lno=r(Ugt,"MT5Config"),Ugt.forEach(t),ino=r(Vxe," (MT5 model)"),Vxe.forEach(t),dno=i(L),bg=n(L,"LI",{});var Xxe=s(bg);uie=n(Xxe,"STRONG",{});var Hgt=s(uie);cno=r(Hgt,"mvp"),Hgt.forEach(t),mno=r(Xxe," \u2014 "),LB=n(Xxe,"A",{href:!0});var Jgt=s(LB);fno=r(Jgt,"MvpConfig"),Jgt.forEach(t),gno=r(Xxe," (MVP model)"),Xxe.forEach(t),hno=i(L),vg=n(L,"LI",{});var zxe=s(vg);pie=n(zxe,"STRONG",{});var Ygt=s(pie);uno=r(Ygt,"nezha"),Ygt.forEach(t),pno=r(zxe," \u2014 "),yB=n(zxe,"A",{href:!0});var Kgt=s(yB);_no=r(Kgt,"NezhaConfig"),Kgt.forEach(t),bno=r(zxe," (Nezha model)"),zxe.forEach(t),vno=i(L),Fg=n(L,"LI",{});var Wxe=s(Fg);_ie=n(Wxe,"STRONG",{});var Zgt=s(_ie);Fno=r(Zgt,"nystromformer"),Zgt.forEach(t),Tno=r(Wxe," \u2014 "),xB=n(Wxe,"A",{href:!0});var eht=s(xB);Mno=r(eht,"NystromformerConfig"),eht.forEach(t),Eno=r(Wxe," (Nystr\xF6mformer model)"),Wxe.forEach(t),Cno=i(L),Tg=n(L,"LI",{});var Qxe=s(Tg);bie=n(Qxe,"STRONG",{});var oht=s(bie);wno=r(oht,"openai-gpt"),oht.forEach(t),Ano=r(Qxe," \u2014 "),$B=n(Qxe,"A",{href:!0});var rht=s($B);Lno=r(rht,"OpenAIGPTConfig"),rht.forEach(t),yno=r(Qxe," (OpenAI GPT model)"),Qxe.forEach(t),xno=i(L),Mg=n(L,"LI",{});var Uxe=s(Mg);vie=n(Uxe,"STRONG",{});var tht=s(vie);$no=r(tht,"opt"),tht.forEach(t),kno=r(Uxe," \u2014 "),kB=n(Uxe,"A",{href:!0});var aht=s(kB);Sno=r(aht,"OPTConfig"),aht.forEach(t),Rno=r(Uxe," (OPT model)"),Uxe.forEach(t),Pno=i(L),Eg=n(L,"LI",{});var Hxe=s(Eg);Fie=n(Hxe,"STRONG",{});var nht=s(Fie);Bno=r(nht,"owlvit"),nht.forEach(t),Ino=r(Hxe," \u2014 "),SB=n(Hxe,"A",{href:!0});var sht=s(SB);Nno=r(sht,"OwlViTConfig"),sht.forEach(t),qno=r(Hxe," (OWL-ViT model)"),Hxe.forEach(t),jno=i(L),Cg=n(L,"LI",{});var Jxe=s(Cg);Tie=n(Jxe,"STRONG",{});var lht=s(Tie);Dno=r(lht,"pegasus"),lht.forEach(t),Gno=r(Jxe," \u2014 "),RB=n(Jxe,"A",{href:!0});var iht=s(RB);Ono=r(iht,"PegasusConfig"),iht.forEach(t),Vno=r(Jxe," (Pegasus model)"),Jxe.forEach(t),Xno=i(L),wg=n(L,"LI",{});var Yxe=s(wg);Mie=n(Yxe,"STRONG",{});var dht=s(Mie);zno=r(dht,"perceiver"),dht.forEach(t),Wno=r(Yxe," \u2014 "),PB=n(Yxe,"A",{href:!0});var cht=s(PB);Qno=r(cht,"PerceiverConfig"),cht.forEach(t),Uno=r(Yxe," (Perceiver model)"),Yxe.forEach(t),Hno=i(L),Ag=n(L,"LI",{});var Kxe=s(Ag);Eie=n(Kxe,"STRONG",{});var mht=s(Eie);Jno=r(mht,"plbart"),mht.forEach(t),Yno=r(Kxe," \u2014 "),BB=n(Kxe,"A",{href:!0});var fht=s(BB);Kno=r(fht,"PLBartConfig"),fht.forEach(t),Zno=r(Kxe," (PLBart model)"),Kxe.forEach(t),eso=i(L),Lg=n(L,"LI",{});var Zxe=s(Lg);Cie=n(Zxe,"STRONG",{});var ght=s(Cie);oso=r(ght,"poolformer"),ght.forEach(t),rso=r(Zxe," \u2014 "),IB=n(Zxe,"A",{href:!0});var hht=s(IB);tso=r(hht,"PoolFormerConfig"),hht.forEach(t),aso=r(Zxe," (PoolFormer model)"),Zxe.forEach(t),nso=i(L),yg=n(L,"LI",{});var e$e=s(yg);wie=n(e$e,"STRONG",{});var uht=s(wie);sso=r(uht,"prophetnet"),uht.forEach(t),lso=r(e$e," \u2014 "),NB=n(e$e,"A",{href:!0});var pht=s(NB);iso=r(pht,"ProphetNetConfig"),pht.forEach(t),dso=r(e$e," (ProphetNet model)"),e$e.forEach(t),cso=i(L),xg=n(L,"LI",{});var o$e=s(xg);Aie=n(o$e,"STRONG",{});var _ht=s(Aie);mso=r(_ht,"qdqbert"),_ht.forEach(t),fso=r(o$e," \u2014 "),qB=n(o$e,"A",{href:!0});var bht=s(qB);gso=r(bht,"QDQBertConfig"),bht.forEach(t),hso=r(o$e," (QDQBert model)"),o$e.forEach(t),uso=i(L),$g=n(L,"LI",{});var r$e=s($g);Lie=n(r$e,"STRONG",{});var vht=s(Lie);pso=r(vht,"rag"),vht.forEach(t),_so=r(r$e," \u2014 "),jB=n(r$e,"A",{href:!0});var Fht=s(jB);bso=r(Fht,"RagConfig"),Fht.forEach(t),vso=r(r$e," (RAG model)"),r$e.forEach(t),Fso=i(L),kg=n(L,"LI",{});var t$e=s(kg);yie=n(t$e,"STRONG",{});var Tht=s(yie);Tso=r(Tht,"realm"),Tht.forEach(t),Mso=r(t$e," \u2014 "),DB=n(t$e,"A",{href:!0});var Mht=s(DB);Eso=r(Mht,"RealmConfig"),Mht.forEach(t),Cso=r(t$e," (REALM model)"),t$e.forEach(t),wso=i(L),Sg=n(L,"LI",{});var a$e=s(Sg);xie=n(a$e,"STRONG",{});var Eht=s(xie);Aso=r(Eht,"reformer"),Eht.forEach(t),Lso=r(a$e," \u2014 "),GB=n(a$e,"A",{href:!0});var Cht=s(GB);yso=r(Cht,"ReformerConfig"),Cht.forEach(t),xso=r(a$e," (Reformer model)"),a$e.forEach(t),$so=i(L),Rg=n(L,"LI",{});var n$e=s(Rg);$ie=n(n$e,"STRONG",{});var wht=s($ie);kso=r(wht,"regnet"),wht.forEach(t),Sso=r(n$e," \u2014 "),OB=n(n$e,"A",{href:!0});var Aht=s(OB);Rso=r(Aht,"RegNetConfig"),Aht.forEach(t),Pso=r(n$e," (RegNet model)"),n$e.forEach(t),Bso=i(L),Pg=n(L,"LI",{});var s$e=s(Pg);kie=n(s$e,"STRONG",{});var Lht=s(kie);Iso=r(Lht,"rembert"),Lht.forEach(t),Nso=r(s$e," \u2014 "),VB=n(s$e,"A",{href:!0});var yht=s(VB);qso=r(yht,"RemBertConfig"),yht.forEach(t),jso=r(s$e," (RemBERT model)"),s$e.forEach(t),Dso=i(L),Bg=n(L,"LI",{});var l$e=s(Bg);Sie=n(l$e,"STRONG",{});var xht=s(Sie);Gso=r(xht,"resnet"),xht.forEach(t),Oso=r(l$e," \u2014 "),XB=n(l$e,"A",{href:!0});var $ht=s(XB);Vso=r($ht,"ResNetConfig"),$ht.forEach(t),Xso=r(l$e," (ResNet model)"),l$e.forEach(t),zso=i(L),Ig=n(L,"LI",{});var i$e=s(Ig);Rie=n(i$e,"STRONG",{});var kht=s(Rie);Wso=r(kht,"retribert"),kht.forEach(t),Qso=r(i$e," \u2014 "),zB=n(i$e,"A",{href:!0});var Sht=s(zB);Uso=r(Sht,"RetriBertConfig"),Sht.forEach(t),Hso=r(i$e," (RetriBERT model)"),i$e.forEach(t),Jso=i(L),Ng=n(L,"LI",{});var d$e=s(Ng);Pie=n(d$e,"STRONG",{});var Rht=s(Pie);Yso=r(Rht,"roberta"),Rht.forEach(t),Kso=r(d$e," \u2014 "),WB=n(d$e,"A",{href:!0});var Pht=s(WB);Zso=r(Pht,"RobertaConfig"),Pht.forEach(t),elo=r(d$e," (RoBERTa model)"),d$e.forEach(t),olo=i(L),qg=n(L,"LI",{});var c$e=s(qg);Bie=n(c$e,"STRONG",{});var Bht=s(Bie);rlo=r(Bht,"roformer"),Bht.forEach(t),tlo=r(c$e," \u2014 "),QB=n(c$e,"A",{href:!0});var Iht=s(QB);alo=r(Iht,"RoFormerConfig"),Iht.forEach(t),nlo=r(c$e," (RoFormer model)"),c$e.forEach(t),slo=i(L),jg=n(L,"LI",{});var m$e=s(jg);Iie=n(m$e,"STRONG",{});var Nht=s(Iie);llo=r(Nht,"segformer"),Nht.forEach(t),ilo=r(m$e," \u2014 "),UB=n(m$e,"A",{href:!0});var qht=s(UB);dlo=r(qht,"SegformerConfig"),qht.forEach(t),clo=r(m$e," (SegFormer model)"),m$e.forEach(t),mlo=i(L),Dg=n(L,"LI",{});var f$e=s(Dg);Nie=n(f$e,"STRONG",{});var jht=s(Nie);flo=r(jht,"sew"),jht.forEach(t),glo=r(f$e," \u2014 "),HB=n(f$e,"A",{href:!0});var Dht=s(HB);hlo=r(Dht,"SEWConfig"),Dht.forEach(t),ulo=r(f$e," (SEW model)"),f$e.forEach(t),plo=i(L),Gg=n(L,"LI",{});var g$e=s(Gg);qie=n(g$e,"STRONG",{});var Ght=s(qie);_lo=r(Ght,"sew-d"),Ght.forEach(t),blo=r(g$e," \u2014 "),JB=n(g$e,"A",{href:!0});var Oht=s(JB);vlo=r(Oht,"SEWDConfig"),Oht.forEach(t),Flo=r(g$e," (SEW-D model)"),g$e.forEach(t),Tlo=i(L),Og=n(L,"LI",{});var h$e=s(Og);jie=n(h$e,"STRONG",{});var Vht=s(jie);Mlo=r(Vht,"speech-encoder-decoder"),Vht.forEach(t),Elo=r(h$e," \u2014 "),YB=n(h$e,"A",{href:!0});var Xht=s(YB);Clo=r(Xht,"SpeechEncoderDecoderConfig"),Xht.forEach(t),wlo=r(h$e," (Speech Encoder decoder model)"),h$e.forEach(t),Alo=i(L),Vg=n(L,"LI",{});var u$e=s(Vg);Die=n(u$e,"STRONG",{});var zht=s(Die);Llo=r(zht,"speech_to_text"),zht.forEach(t),ylo=r(u$e," \u2014 "),KB=n(u$e,"A",{href:!0});var Wht=s(KB);xlo=r(Wht,"Speech2TextConfig"),Wht.forEach(t),$lo=r(u$e," (Speech2Text model)"),u$e.forEach(t),klo=i(L),Xg=n(L,"LI",{});var p$e=s(Xg);Gie=n(p$e,"STRONG",{});var Qht=s(Gie);Slo=r(Qht,"speech_to_text_2"),Qht.forEach(t),Rlo=r(p$e," \u2014 "),ZB=n(p$e,"A",{href:!0});var Uht=s(ZB);Plo=r(Uht,"Speech2Text2Config"),Uht.forEach(t),Blo=r(p$e," (Speech2Text2 model)"),p$e.forEach(t),Ilo=i(L),zg=n(L,"LI",{});var _$e=s(zg);Oie=n(_$e,"STRONG",{});var Hht=s(Oie);Nlo=r(Hht,"splinter"),Hht.forEach(t),qlo=r(_$e," \u2014 "),eI=n(_$e,"A",{href:!0});var Jht=s(eI);jlo=r(Jht,"SplinterConfig"),Jht.forEach(t),Dlo=r(_$e," (Splinter model)"),_$e.forEach(t),Glo=i(L),Wg=n(L,"LI",{});var b$e=s(Wg);Vie=n(b$e,"STRONG",{});var Yht=s(Vie);Olo=r(Yht,"squeezebert"),Yht.forEach(t),Vlo=r(b$e," \u2014 "),oI=n(b$e,"A",{href:!0});var Kht=s(oI);Xlo=r(Kht,"SqueezeBertConfig"),Kht.forEach(t),zlo=r(b$e," (SqueezeBERT model)"),b$e.forEach(t),Wlo=i(L),Qg=n(L,"LI",{});var v$e=s(Qg);Xie=n(v$e,"STRONG",{});var Zht=s(Xie);Qlo=r(Zht,"swin"),Zht.forEach(t),Ulo=r(v$e," \u2014 "),rI=n(v$e,"A",{href:!0});var eut=s(rI);Hlo=r(eut,"SwinConfig"),eut.forEach(t),Jlo=r(v$e," (Swin Transformer model)"),v$e.forEach(t),Ylo=i(L),Ug=n(L,"LI",{});var F$e=s(Ug);zie=n(F$e,"STRONG",{});var out=s(zie);Klo=r(out,"swinv2"),out.forEach(t),Zlo=r(F$e," \u2014 "),tI=n(F$e,"A",{href:!0});var rut=s(tI);eio=r(rut,"Swinv2Config"),rut.forEach(t),oio=r(F$e," (Swin Transformer V2 model)"),F$e.forEach(t),rio=i(L),Hg=n(L,"LI",{});var T$e=s(Hg);Wie=n(T$e,"STRONG",{});var tut=s(Wie);tio=r(tut,"t5"),tut.forEach(t),aio=r(T$e," \u2014 "),aI=n(T$e,"A",{href:!0});var aut=s(aI);nio=r(aut,"T5Config"),aut.forEach(t),sio=r(T$e," (T5 model)"),T$e.forEach(t),lio=i(L),Jg=n(L,"LI",{});var M$e=s(Jg);Qie=n(M$e,"STRONG",{});var nut=s(Qie);iio=r(nut,"tapas"),nut.forEach(t),dio=r(M$e," \u2014 "),nI=n(M$e,"A",{href:!0});var sut=s(nI);cio=r(sut,"TapasConfig"),sut.forEach(t),mio=r(M$e," (TAPAS model)"),M$e.forEach(t),fio=i(L),Yg=n(L,"LI",{});var E$e=s(Yg);Uie=n(E$e,"STRONG",{});var lut=s(Uie);gio=r(lut,"trajectory_transformer"),lut.forEach(t),hio=r(E$e," \u2014 "),sI=n(E$e,"A",{href:!0});var iut=s(sI);uio=r(iut,"TrajectoryTransformerConfig"),iut.forEach(t),pio=r(E$e," (Trajectory Transformer model)"),E$e.forEach(t),_io=i(L),Kg=n(L,"LI",{});var C$e=s(Kg);Hie=n(C$e,"STRONG",{});var dut=s(Hie);bio=r(dut,"transfo-xl"),dut.forEach(t),vio=r(C$e," \u2014 "),lI=n(C$e,"A",{href:!0});var cut=s(lI);Fio=r(cut,"TransfoXLConfig"),cut.forEach(t),Tio=r(C$e," (Transformer-XL model)"),C$e.forEach(t),Mio=i(L),Zg=n(L,"LI",{});var w$e=s(Zg);Jie=n(w$e,"STRONG",{});var mut=s(Jie);Eio=r(mut,"trocr"),mut.forEach(t),Cio=r(w$e," \u2014 "),iI=n(w$e,"A",{href:!0});var fut=s(iI);wio=r(fut,"TrOCRConfig"),fut.forEach(t),Aio=r(w$e," (TrOCR model)"),w$e.forEach(t),Lio=i(L),eh=n(L,"LI",{});var A$e=s(eh);Yie=n(A$e,"STRONG",{});var gut=s(Yie);yio=r(gut,"unispeech"),gut.forEach(t),xio=r(A$e," \u2014 "),dI=n(A$e,"A",{href:!0});var hut=s(dI);$io=r(hut,"UniSpeechConfig"),hut.forEach(t),kio=r(A$e," (UniSpeech model)"),A$e.forEach(t),Sio=i(L),oh=n(L,"LI",{});var L$e=s(oh);Kie=n(L$e,"STRONG",{});var uut=s(Kie);Rio=r(uut,"unispeech-sat"),uut.forEach(t),Pio=r(L$e," \u2014 "),cI=n(L$e,"A",{href:!0});var put=s(cI);Bio=r(put,"UniSpeechSatConfig"),put.forEach(t),Iio=r(L$e," (UniSpeechSat model)"),L$e.forEach(t),Nio=i(L),rh=n(L,"LI",{});var y$e=s(rh);Zie=n(y$e,"STRONG",{});var _ut=s(Zie);qio=r(_ut,"van"),_ut.forEach(t),jio=r(y$e," \u2014 "),mI=n(y$e,"A",{href:!0});var but=s(mI);Dio=r(but,"VanConfig"),but.forEach(t),Gio=r(y$e," (VAN model)"),y$e.forEach(t),Oio=i(L),th=n(L,"LI",{});var x$e=s(th);ede=n(x$e,"STRONG",{});var vut=s(ede);Vio=r(vut,"videomae"),vut.forEach(t),Xio=r(x$e," \u2014 "),fI=n(x$e,"A",{href:!0});var Fut=s(fI);zio=r(Fut,"VideoMAEConfig"),Fut.forEach(t),Wio=r(x$e," (VideoMAE model)"),x$e.forEach(t),Qio=i(L),ah=n(L,"LI",{});var $$e=s(ah);ode=n($$e,"STRONG",{});var Tut=s(ode);Uio=r(Tut,"vilt"),Tut.forEach(t),Hio=r($$e," \u2014 "),gI=n($$e,"A",{href:!0});var Mut=s(gI);Jio=r(Mut,"ViltConfig"),Mut.forEach(t),Yio=r($$e," (ViLT model)"),$$e.forEach(t),Kio=i(L),nh=n(L,"LI",{});var k$e=s(nh);rde=n(k$e,"STRONG",{});var Eut=s(rde);Zio=r(Eut,"vision-encoder-decoder"),Eut.forEach(t),edo=r(k$e," \u2014 "),hI=n(k$e,"A",{href:!0});var Cut=s(hI);odo=r(Cut,"VisionEncoderDecoderConfig"),Cut.forEach(t),rdo=r(k$e," (Vision Encoder decoder model)"),k$e.forEach(t),tdo=i(L),sh=n(L,"LI",{});var S$e=s(sh);tde=n(S$e,"STRONG",{});var wut=s(tde);ado=r(wut,"vision-text-dual-encoder"),wut.forEach(t),ndo=r(S$e," \u2014 "),uI=n(S$e,"A",{href:!0});var Aut=s(uI);sdo=r(Aut,"VisionTextDualEncoderConfig"),Aut.forEach(t),ldo=r(S$e," (VisionTextDualEncoder model)"),S$e.forEach(t),ido=i(L),lh=n(L,"LI",{});var R$e=s(lh);ade=n(R$e,"STRONG",{});var Lut=s(ade);ddo=r(Lut,"visual_bert"),Lut.forEach(t),cdo=r(R$e," \u2014 "),pI=n(R$e,"A",{href:!0});var yut=s(pI);mdo=r(yut,"VisualBertConfig"),yut.forEach(t),fdo=r(R$e," (VisualBERT model)"),R$e.forEach(t),gdo=i(L),ih=n(L,"LI",{});var P$e=s(ih);nde=n(P$e,"STRONG",{});var xut=s(nde);hdo=r(xut,"vit"),xut.forEach(t),udo=r(P$e," \u2014 "),_I=n(P$e,"A",{href:!0});var $ut=s(_I);pdo=r($ut,"ViTConfig"),$ut.forEach(t),_do=r(P$e," (ViT model)"),P$e.forEach(t),bdo=i(L),dh=n(L,"LI",{});var B$e=s(dh);sde=n(B$e,"STRONG",{});var kut=s(sde);vdo=r(kut,"vit_mae"),kut.forEach(t),Fdo=r(B$e," \u2014 "),bI=n(B$e,"A",{href:!0});var Sut=s(bI);Tdo=r(Sut,"ViTMAEConfig"),Sut.forEach(t),Mdo=r(B$e," (ViTMAE model)"),B$e.forEach(t),Edo=i(L),ch=n(L,"LI",{});var I$e=s(ch);lde=n(I$e,"STRONG",{});var Rut=s(lde);Cdo=r(Rut,"wav2vec2"),Rut.forEach(t),wdo=r(I$e," \u2014 "),vI=n(I$e,"A",{href:!0});var Put=s(vI);Ado=r(Put,"Wav2Vec2Config"),Put.forEach(t),Ldo=r(I$e," (Wav2Vec2 model)"),I$e.forEach(t),ydo=i(L),mh=n(L,"LI",{});var N$e=s(mh);ide=n(N$e,"STRONG",{});var But=s(ide);xdo=r(But,"wav2vec2-conformer"),But.forEach(t),$do=r(N$e," \u2014 "),FI=n(N$e,"A",{href:!0});var Iut=s(FI);kdo=r(Iut,"Wav2Vec2ConformerConfig"),Iut.forEach(t),Sdo=r(N$e," (Wav2Vec2-Conformer model)"),N$e.forEach(t),Rdo=i(L),fh=n(L,"LI",{});var q$e=s(fh);dde=n(q$e,"STRONG",{});var Nut=s(dde);Pdo=r(Nut,"wavlm"),Nut.forEach(t),Bdo=r(q$e," \u2014 "),TI=n(q$e,"A",{href:!0});var qut=s(TI);Ido=r(qut,"WavLMConfig"),qut.forEach(t),Ndo=r(q$e," (WavLM model)"),q$e.forEach(t),qdo=i(L),gh=n(L,"LI",{});var j$e=s(gh);cde=n(j$e,"STRONG",{});var jut=s(cde);jdo=r(jut,"xglm"),jut.forEach(t),Ddo=r(j$e," \u2014 "),MI=n(j$e,"A",{href:!0});var Dut=s(MI);Gdo=r(Dut,"XGLMConfig"),Dut.forEach(t),Odo=r(j$e," (XGLM model)"),j$e.forEach(t),Vdo=i(L),hh=n(L,"LI",{});var D$e=s(hh);mde=n(D$e,"STRONG",{});var Gut=s(mde);Xdo=r(Gut,"xlm"),Gut.forEach(t),zdo=r(D$e," \u2014 "),EI=n(D$e,"A",{href:!0});var Out=s(EI);Wdo=r(Out,"XLMConfig"),Out.forEach(t),Qdo=r(D$e," (XLM model)"),D$e.forEach(t),Udo=i(L),uh=n(L,"LI",{});var G$e=s(uh);fde=n(G$e,"STRONG",{});var Vut=s(fde);Hdo=r(Vut,"xlm-prophetnet"),Vut.forEach(t),Jdo=r(G$e," \u2014 "),CI=n(G$e,"A",{href:!0});var Xut=s(CI);Ydo=r(Xut,"XLMProphetNetConfig"),Xut.forEach(t),Kdo=r(G$e," (XLM-ProphetNet model)"),G$e.forEach(t),Zdo=i(L),ph=n(L,"LI",{});var O$e=s(ph);gde=n(O$e,"STRONG",{});var zut=s(gde);eco=r(zut,"xlm-roberta"),zut.forEach(t),oco=r(O$e," \u2014 "),wI=n(O$e,"A",{href:!0});var Wut=s(wI);rco=r(Wut,"XLMRobertaConfig"),Wut.forEach(t),tco=r(O$e," (XLM-RoBERTa model)"),O$e.forEach(t),aco=i(L),_h=n(L,"LI",{});var V$e=s(_h);hde=n(V$e,"STRONG",{});var Qut=s(hde);nco=r(Qut,"xlm-roberta-xl"),Qut.forEach(t),sco=r(V$e," \u2014 "),AI=n(V$e,"A",{href:!0});var Uut=s(AI);lco=r(Uut,"XLMRobertaXLConfig"),Uut.forEach(t),ico=r(V$e," (XLM-RoBERTa-XL model)"),V$e.forEach(t),dco=i(L),bh=n(L,"LI",{});var X$e=s(bh);ude=n(X$e,"STRONG",{});var Hut=s(ude);cco=r(Hut,"xlnet"),Hut.forEach(t),mco=r(X$e," \u2014 "),LI=n(X$e,"A",{href:!0});var Jut=s(LI);fco=r(Jut,"XLNetConfig"),Jut.forEach(t),gco=r(X$e," (XLNet model)"),X$e.forEach(t),hco=i(L),vh=n(L,"LI",{});var z$e=s(vh);pde=n(z$e,"STRONG",{});var Yut=s(pde);uco=r(Yut,"yolos"),Yut.forEach(t),pco=r(z$e," \u2014 "),yI=n(z$e,"A",{href:!0});var Kut=s(yI);_co=r(Kut,"YolosConfig"),Kut.forEach(t),bco=r(z$e," (YOLOS model)"),z$e.forEach(t),vco=i(L),Fh=n(L,"LI",{});var W$e=s(Fh);_de=n(W$e,"STRONG",{});var Zut=s(_de);Fco=r(Zut,"yoso"),Zut.forEach(t),Tco=r(W$e," \u2014 "),xI=n(W$e,"A",{href:!0});var ept=s(xI);Mco=r(ept,"YosoConfig"),ept.forEach(t),Eco=r(W$e," (YOSO model)"),W$e.forEach(t),L.forEach(t),Cco=i(ct),T(Th.$$.fragment,ct),ct.forEach(t),wco=i(dt),Mh=n(dt,"DIV",{class:!0});var FJe=s(Mh);T(A8.$$.fragment,FJe),Aco=i(FJe),bde=n(FJe,"P",{});var opt=s(bde);Lco=r(opt,"Register a new configuration for this class."),opt.forEach(t),FJe.forEach(t),dt.forEach(t),_Ue=i(m),Ki=n(m,"H2",{class:!0});var TJe=s(Ki);Eh=n(TJe,"A",{id:!0,class:!0,href:!0});var rpt=s(Eh);vde=n(rpt,"SPAN",{});var tpt=s(vde);T(L8.$$.fragment,tpt),tpt.forEach(t),rpt.forEach(t),yco=i(TJe),Fde=n(TJe,"SPAN",{});var apt=s(Fde);xco=r(apt,"AutoTokenizer"),apt.forEach(t),TJe.forEach(t),bUe=i(m),xo=n(m,"DIV",{class:!0});var cl=s(xo);T(y8.$$.fragment,cl),$co=i(cl),x8=n(cl,"P",{});var MJe=s(x8);kco=r(MJe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),$I=n(MJe,"A",{href:!0});var npt=s($I);Sco=r(npt,"AutoTokenizer.from_pretrained()"),npt.forEach(t),Rco=r(MJe," class method."),MJe.forEach(t),Pco=i(cl),$8=n(cl,"P",{});var EJe=s($8);Bco=r(EJe,"This class cannot be instantiated directly using "),Tde=n(EJe,"CODE",{});var spt=s(Tde);Ico=r(spt,"__init__()"),spt.forEach(t),Nco=r(EJe," (throws an error)."),EJe.forEach(t),qco=i(cl),Sr=n(cl,"DIV",{class:!0});var ml=s(Sr);T(k8.$$.fragment,ml),jco=i(ml),Mde=n(ml,"P",{});var lpt=s(Mde);Dco=r(lpt,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),lpt.forEach(t),Gco=i(ml),Ga=n(ml,"P",{});var pL=s(Ga);Oco=r(pL,"The tokenizer class to instantiate is selected based on the "),Ede=n(pL,"CODE",{});var ipt=s(Ede);Vco=r(ipt,"model_type"),ipt.forEach(t),Xco=r(pL,` property of the config object (either
passed as an argument or loaded from `),Cde=n(pL,"CODE",{});var dpt=s(Cde);zco=r(dpt,"pretrained_model_name_or_path"),dpt.forEach(t),Wco=r(pL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wde=n(pL,"CODE",{});var cpt=s(wde);Qco=r(cpt,"pretrained_model_name_or_path"),cpt.forEach(t),Uco=r(pL,":"),pL.forEach(t),Hco=i(ml),k=n(ml,"UL",{});var S=s(k);Hn=n(S,"LI",{});var US=s(Hn);Ade=n(US,"STRONG",{});var mpt=s(Ade);Jco=r(mpt,"albert"),mpt.forEach(t),Yco=r(US," \u2014 "),kI=n(US,"A",{href:!0});var fpt=s(kI);Kco=r(fpt,"AlbertTokenizer"),fpt.forEach(t),Zco=r(US," or "),SI=n(US,"A",{href:!0});var gpt=s(SI);emo=r(gpt,"AlbertTokenizerFast"),gpt.forEach(t),omo=r(US," (ALBERT model)"),US.forEach(t),rmo=i(S),Jn=n(S,"LI",{});var HS=s(Jn);Lde=n(HS,"STRONG",{});var hpt=s(Lde);tmo=r(hpt,"bart"),hpt.forEach(t),amo=r(HS," \u2014 "),RI=n(HS,"A",{href:!0});var upt=s(RI);nmo=r(upt,"BartTokenizer"),upt.forEach(t),smo=r(HS," or "),PI=n(HS,"A",{href:!0});var ppt=s(PI);lmo=r(ppt,"BartTokenizerFast"),ppt.forEach(t),imo=r(HS," (BART model)"),HS.forEach(t),dmo=i(S),Yn=n(S,"LI",{});var JS=s(Yn);yde=n(JS,"STRONG",{});var _pt=s(yde);cmo=r(_pt,"barthez"),_pt.forEach(t),mmo=r(JS," \u2014 "),BI=n(JS,"A",{href:!0});var bpt=s(BI);fmo=r(bpt,"BarthezTokenizer"),bpt.forEach(t),gmo=r(JS," or "),II=n(JS,"A",{href:!0});var vpt=s(II);hmo=r(vpt,"BarthezTokenizerFast"),vpt.forEach(t),umo=r(JS," (BARThez model)"),JS.forEach(t),pmo=i(S),Ch=n(S,"LI",{});var Q$e=s(Ch);xde=n(Q$e,"STRONG",{});var Fpt=s(xde);_mo=r(Fpt,"bartpho"),Fpt.forEach(t),bmo=r(Q$e," \u2014 "),NI=n(Q$e,"A",{href:!0});var Tpt=s(NI);vmo=r(Tpt,"BartphoTokenizer"),Tpt.forEach(t),Fmo=r(Q$e," (BARTpho model)"),Q$e.forEach(t),Tmo=i(S),Kn=n(S,"LI",{});var YS=s(Kn);$de=n(YS,"STRONG",{});var Mpt=s($de);Mmo=r(Mpt,"bert"),Mpt.forEach(t),Emo=r(YS," \u2014 "),qI=n(YS,"A",{href:!0});var Ept=s(qI);Cmo=r(Ept,"BertTokenizer"),Ept.forEach(t),wmo=r(YS," or "),jI=n(YS,"A",{href:!0});var Cpt=s(jI);Amo=r(Cpt,"BertTokenizerFast"),Cpt.forEach(t),Lmo=r(YS," (BERT model)"),YS.forEach(t),ymo=i(S),wh=n(S,"LI",{});var U$e=s(wh);kde=n(U$e,"STRONG",{});var wpt=s(kde);xmo=r(wpt,"bert-generation"),wpt.forEach(t),$mo=r(U$e," \u2014 "),DI=n(U$e,"A",{href:!0});var Apt=s(DI);kmo=r(Apt,"BertGenerationTokenizer"),Apt.forEach(t),Smo=r(U$e," (Bert Generation model)"),U$e.forEach(t),Rmo=i(S),Ah=n(S,"LI",{});var H$e=s(Ah);Sde=n(H$e,"STRONG",{});var Lpt=s(Sde);Pmo=r(Lpt,"bert-japanese"),Lpt.forEach(t),Bmo=r(H$e," \u2014 "),GI=n(H$e,"A",{href:!0});var ypt=s(GI);Imo=r(ypt,"BertJapaneseTokenizer"),ypt.forEach(t),Nmo=r(H$e," (BertJapanese model)"),H$e.forEach(t),qmo=i(S),Lh=n(S,"LI",{});var J$e=s(Lh);Rde=n(J$e,"STRONG",{});var xpt=s(Rde);jmo=r(xpt,"bertweet"),xpt.forEach(t),Dmo=r(J$e," \u2014 "),OI=n(J$e,"A",{href:!0});var $pt=s(OI);Gmo=r($pt,"BertweetTokenizer"),$pt.forEach(t),Omo=r(J$e," (BERTweet model)"),J$e.forEach(t),Vmo=i(S),Zn=n(S,"LI",{});var KS=s(Zn);Pde=n(KS,"STRONG",{});var kpt=s(Pde);Xmo=r(kpt,"big_bird"),kpt.forEach(t),zmo=r(KS," \u2014 "),VI=n(KS,"A",{href:!0});var Spt=s(VI);Wmo=r(Spt,"BigBirdTokenizer"),Spt.forEach(t),Qmo=r(KS," or "),XI=n(KS,"A",{href:!0});var Rpt=s(XI);Umo=r(Rpt,"BigBirdTokenizerFast"),Rpt.forEach(t),Hmo=r(KS," (BigBird model)"),KS.forEach(t),Jmo=i(S),es=n(S,"LI",{});var ZS=s(es);Bde=n(ZS,"STRONG",{});var Ppt=s(Bde);Ymo=r(Ppt,"bigbird_pegasus"),Ppt.forEach(t),Kmo=r(ZS," \u2014 "),zI=n(ZS,"A",{href:!0});var Bpt=s(zI);Zmo=r(Bpt,"PegasusTokenizer"),Bpt.forEach(t),efo=r(ZS," or "),WI=n(ZS,"A",{href:!0});var Ipt=s(WI);ofo=r(Ipt,"PegasusTokenizerFast"),Ipt.forEach(t),rfo=r(ZS," (BigBird-Pegasus model)"),ZS.forEach(t),tfo=i(S),os=n(S,"LI",{});var eR=s(os);Ide=n(eR,"STRONG",{});var Npt=s(Ide);afo=r(Npt,"blenderbot"),Npt.forEach(t),nfo=r(eR," \u2014 "),QI=n(eR,"A",{href:!0});var qpt=s(QI);sfo=r(qpt,"BlenderbotTokenizer"),qpt.forEach(t),lfo=r(eR," or "),UI=n(eR,"A",{href:!0});var jpt=s(UI);ifo=r(jpt,"BlenderbotTokenizerFast"),jpt.forEach(t),dfo=r(eR," (Blenderbot model)"),eR.forEach(t),cfo=i(S),yh=n(S,"LI",{});var Y$e=s(yh);Nde=n(Y$e,"STRONG",{});var Dpt=s(Nde);mfo=r(Dpt,"blenderbot-small"),Dpt.forEach(t),ffo=r(Y$e," \u2014 "),HI=n(Y$e,"A",{href:!0});var Gpt=s(HI);gfo=r(Gpt,"BlenderbotSmallTokenizer"),Gpt.forEach(t),hfo=r(Y$e," (BlenderbotSmall model)"),Y$e.forEach(t),ufo=i(S),xh=n(S,"LI",{});var K$e=s(xh);qde=n(K$e,"STRONG",{});var Opt=s(qde);pfo=r(Opt,"bloom"),Opt.forEach(t),_fo=r(K$e," \u2014 "),JI=n(K$e,"A",{href:!0});var Vpt=s(JI);bfo=r(Vpt,"BloomTokenizerFast"),Vpt.forEach(t),vfo=r(K$e," (BLOOM model)"),K$e.forEach(t),Ffo=i(S),$h=n(S,"LI",{});var Z$e=s($h);jde=n(Z$e,"STRONG",{});var Xpt=s(jde);Tfo=r(Xpt,"byt5"),Xpt.forEach(t),Mfo=r(Z$e," \u2014 "),YI=n(Z$e,"A",{href:!0});var zpt=s(YI);Efo=r(zpt,"ByT5Tokenizer"),zpt.forEach(t),Cfo=r(Z$e," (ByT5 model)"),Z$e.forEach(t),wfo=i(S),rs=n(S,"LI",{});var oR=s(rs);Dde=n(oR,"STRONG",{});var Wpt=s(Dde);Afo=r(Wpt,"camembert"),Wpt.forEach(t),Lfo=r(oR," \u2014 "),KI=n(oR,"A",{href:!0});var Qpt=s(KI);yfo=r(Qpt,"CamembertTokenizer"),Qpt.forEach(t),xfo=r(oR," or "),ZI=n(oR,"A",{href:!0});var Upt=s(ZI);$fo=r(Upt,"CamembertTokenizerFast"),Upt.forEach(t),kfo=r(oR," (CamemBERT model)"),oR.forEach(t),Sfo=i(S),kh=n(S,"LI",{});var eke=s(kh);Gde=n(eke,"STRONG",{});var Hpt=s(Gde);Rfo=r(Hpt,"canine"),Hpt.forEach(t),Pfo=r(eke," \u2014 "),eN=n(eke,"A",{href:!0});var Jpt=s(eN);Bfo=r(Jpt,"CanineTokenizer"),Jpt.forEach(t),Ifo=r(eke," (CANINE model)"),eke.forEach(t),Nfo=i(S),ts=n(S,"LI",{});var rR=s(ts);Ode=n(rR,"STRONG",{});var Ypt=s(Ode);qfo=r(Ypt,"clip"),Ypt.forEach(t),jfo=r(rR," \u2014 "),oN=n(rR,"A",{href:!0});var Kpt=s(oN);Dfo=r(Kpt,"CLIPTokenizer"),Kpt.forEach(t),Gfo=r(rR," or "),rN=n(rR,"A",{href:!0});var Zpt=s(rN);Ofo=r(Zpt,"CLIPTokenizerFast"),Zpt.forEach(t),Vfo=r(rR," (CLIP model)"),rR.forEach(t),Xfo=i(S),as=n(S,"LI",{});var tR=s(as);Vde=n(tR,"STRONG",{});var e_t=s(Vde);zfo=r(e_t,"codegen"),e_t.forEach(t),Wfo=r(tR," \u2014 "),tN=n(tR,"A",{href:!0});var o_t=s(tN);Qfo=r(o_t,"CodeGenTokenizer"),o_t.forEach(t),Ufo=r(tR," or "),aN=n(tR,"A",{href:!0});var r_t=s(aN);Hfo=r(r_t,"CodeGenTokenizerFast"),r_t.forEach(t),Jfo=r(tR," (CodeGen model)"),tR.forEach(t),Yfo=i(S),ns=n(S,"LI",{});var aR=s(ns);Xde=n(aR,"STRONG",{});var t_t=s(Xde);Kfo=r(t_t,"convbert"),t_t.forEach(t),Zfo=r(aR," \u2014 "),nN=n(aR,"A",{href:!0});var a_t=s(nN);ego=r(a_t,"ConvBertTokenizer"),a_t.forEach(t),ogo=r(aR," or "),sN=n(aR,"A",{href:!0});var n_t=s(sN);rgo=r(n_t,"ConvBertTokenizerFast"),n_t.forEach(t),tgo=r(aR," (ConvBERT model)"),aR.forEach(t),ago=i(S),ss=n(S,"LI",{});var nR=s(ss);zde=n(nR,"STRONG",{});var s_t=s(zde);ngo=r(s_t,"cpm"),s_t.forEach(t),sgo=r(nR," \u2014 "),lN=n(nR,"A",{href:!0});var l_t=s(lN);lgo=r(l_t,"CpmTokenizer"),l_t.forEach(t),igo=r(nR," or "),iN=n(nR,"A",{href:!0});var i_t=s(iN);dgo=r(i_t,"CpmTokenizerFast"),i_t.forEach(t),cgo=r(nR," (CPM model)"),nR.forEach(t),mgo=i(S),Sh=n(S,"LI",{});var oke=s(Sh);Wde=n(oke,"STRONG",{});var d_t=s(Wde);fgo=r(d_t,"ctrl"),d_t.forEach(t),ggo=r(oke," \u2014 "),dN=n(oke,"A",{href:!0});var c_t=s(dN);hgo=r(c_t,"CTRLTokenizer"),c_t.forEach(t),ugo=r(oke," (CTRL model)"),oke.forEach(t),pgo=i(S),ls=n(S,"LI",{});var sR=s(ls);Qde=n(sR,"STRONG",{});var m_t=s(Qde);_go=r(m_t,"data2vec-text"),m_t.forEach(t),bgo=r(sR," \u2014 "),cN=n(sR,"A",{href:!0});var f_t=s(cN);vgo=r(f_t,"RobertaTokenizer"),f_t.forEach(t),Fgo=r(sR," or "),mN=n(sR,"A",{href:!0});var g_t=s(mN);Tgo=r(g_t,"RobertaTokenizerFast"),g_t.forEach(t),Mgo=r(sR," (Data2VecText model)"),sR.forEach(t),Ego=i(S),is=n(S,"LI",{});var lR=s(is);Ude=n(lR,"STRONG",{});var h_t=s(Ude);Cgo=r(h_t,"deberta"),h_t.forEach(t),wgo=r(lR," \u2014 "),fN=n(lR,"A",{href:!0});var u_t=s(fN);Ago=r(u_t,"DebertaTokenizer"),u_t.forEach(t),Lgo=r(lR," or "),gN=n(lR,"A",{href:!0});var p_t=s(gN);ygo=r(p_t,"DebertaTokenizerFast"),p_t.forEach(t),xgo=r(lR," (DeBERTa model)"),lR.forEach(t),$go=i(S),ds=n(S,"LI",{});var iR=s(ds);Hde=n(iR,"STRONG",{});var __t=s(Hde);kgo=r(__t,"deberta-v2"),__t.forEach(t),Sgo=r(iR," \u2014 "),hN=n(iR,"A",{href:!0});var b_t=s(hN);Rgo=r(b_t,"DebertaV2Tokenizer"),b_t.forEach(t),Pgo=r(iR," or "),uN=n(iR,"A",{href:!0});var v_t=s(uN);Bgo=r(v_t,"DebertaV2TokenizerFast"),v_t.forEach(t),Igo=r(iR," (DeBERTa-v2 model)"),iR.forEach(t),Ngo=i(S),cs=n(S,"LI",{});var dR=s(cs);Jde=n(dR,"STRONG",{});var F_t=s(Jde);qgo=r(F_t,"distilbert"),F_t.forEach(t),jgo=r(dR," \u2014 "),pN=n(dR,"A",{href:!0});var T_t=s(pN);Dgo=r(T_t,"DistilBertTokenizer"),T_t.forEach(t),Ggo=r(dR," or "),_N=n(dR,"A",{href:!0});var M_t=s(_N);Ogo=r(M_t,"DistilBertTokenizerFast"),M_t.forEach(t),Vgo=r(dR," (DistilBERT model)"),dR.forEach(t),Xgo=i(S),ms=n(S,"LI",{});var cR=s(ms);Yde=n(cR,"STRONG",{});var E_t=s(Yde);zgo=r(E_t,"dpr"),E_t.forEach(t),Wgo=r(cR," \u2014 "),bN=n(cR,"A",{href:!0});var C_t=s(bN);Qgo=r(C_t,"DPRQuestionEncoderTokenizer"),C_t.forEach(t),Ugo=r(cR," or "),vN=n(cR,"A",{href:!0});var w_t=s(vN);Hgo=r(w_t,"DPRQuestionEncoderTokenizerFast"),w_t.forEach(t),Jgo=r(cR," (DPR model)"),cR.forEach(t),Ygo=i(S),fs=n(S,"LI",{});var mR=s(fs);Kde=n(mR,"STRONG",{});var A_t=s(Kde);Kgo=r(A_t,"electra"),A_t.forEach(t),Zgo=r(mR," \u2014 "),FN=n(mR,"A",{href:!0});var L_t=s(FN);eho=r(L_t,"ElectraTokenizer"),L_t.forEach(t),oho=r(mR," or "),TN=n(mR,"A",{href:!0});var y_t=s(TN);rho=r(y_t,"ElectraTokenizerFast"),y_t.forEach(t),tho=r(mR," (ELECTRA model)"),mR.forEach(t),aho=i(S),Rh=n(S,"LI",{});var rke=s(Rh);Zde=n(rke,"STRONG",{});var x_t=s(Zde);nho=r(x_t,"flaubert"),x_t.forEach(t),sho=r(rke," \u2014 "),MN=n(rke,"A",{href:!0});var $_t=s(MN);lho=r($_t,"FlaubertTokenizer"),$_t.forEach(t),iho=r(rke," (FlauBERT model)"),rke.forEach(t),dho=i(S),gs=n(S,"LI",{});var fR=s(gs);ece=n(fR,"STRONG",{});var k_t=s(ece);cho=r(k_t,"fnet"),k_t.forEach(t),mho=r(fR," \u2014 "),EN=n(fR,"A",{href:!0});var S_t=s(EN);fho=r(S_t,"FNetTokenizer"),S_t.forEach(t),gho=r(fR," or "),CN=n(fR,"A",{href:!0});var R_t=s(CN);hho=r(R_t,"FNetTokenizerFast"),R_t.forEach(t),uho=r(fR," (FNet model)"),fR.forEach(t),pho=i(S),Ph=n(S,"LI",{});var tke=s(Ph);oce=n(tke,"STRONG",{});var P_t=s(oce);_ho=r(P_t,"fsmt"),P_t.forEach(t),bho=r(tke," \u2014 "),wN=n(tke,"A",{href:!0});var B_t=s(wN);vho=r(B_t,"FSMTTokenizer"),B_t.forEach(t),Fho=r(tke," (FairSeq Machine-Translation model)"),tke.forEach(t),Tho=i(S),hs=n(S,"LI",{});var gR=s(hs);rce=n(gR,"STRONG",{});var I_t=s(rce);Mho=r(I_t,"funnel"),I_t.forEach(t),Eho=r(gR," \u2014 "),AN=n(gR,"A",{href:!0});var N_t=s(AN);Cho=r(N_t,"FunnelTokenizer"),N_t.forEach(t),who=r(gR," or "),LN=n(gR,"A",{href:!0});var q_t=s(LN);Aho=r(q_t,"FunnelTokenizerFast"),q_t.forEach(t),Lho=r(gR," (Funnel Transformer model)"),gR.forEach(t),yho=i(S),us=n(S,"LI",{});var hR=s(us);tce=n(hR,"STRONG",{});var j_t=s(tce);xho=r(j_t,"gpt2"),j_t.forEach(t),$ho=r(hR," \u2014 "),yN=n(hR,"A",{href:!0});var D_t=s(yN);kho=r(D_t,"GPT2Tokenizer"),D_t.forEach(t),Sho=r(hR," or "),xN=n(hR,"A",{href:!0});var G_t=s(xN);Rho=r(G_t,"GPT2TokenizerFast"),G_t.forEach(t),Pho=r(hR," (OpenAI GPT-2 model)"),hR.forEach(t),Bho=i(S),ps=n(S,"LI",{});var uR=s(ps);ace=n(uR,"STRONG",{});var O_t=s(ace);Iho=r(O_t,"gpt_neo"),O_t.forEach(t),Nho=r(uR," \u2014 "),$N=n(uR,"A",{href:!0});var V_t=s($N);qho=r(V_t,"GPT2Tokenizer"),V_t.forEach(t),jho=r(uR," or "),kN=n(uR,"A",{href:!0});var X_t=s(kN);Dho=r(X_t,"GPT2TokenizerFast"),X_t.forEach(t),Gho=r(uR," (GPT Neo model)"),uR.forEach(t),Oho=i(S),Bh=n(S,"LI",{});var ake=s(Bh);nce=n(ake,"STRONG",{});var z_t=s(nce);Vho=r(z_t,"gpt_neox"),z_t.forEach(t),Xho=r(ake," \u2014 "),SN=n(ake,"A",{href:!0});var W_t=s(SN);zho=r(W_t,"GPTNeoXTokenizerFast"),W_t.forEach(t),Who=r(ake," (GPT NeoX model)"),ake.forEach(t),Qho=i(S),_s=n(S,"LI",{});var pR=s(_s);sce=n(pR,"STRONG",{});var Q_t=s(sce);Uho=r(Q_t,"gptj"),Q_t.forEach(t),Hho=r(pR," \u2014 "),RN=n(pR,"A",{href:!0});var U_t=s(RN);Jho=r(U_t,"GPT2Tokenizer"),U_t.forEach(t),Yho=r(pR," or "),PN=n(pR,"A",{href:!0});var H_t=s(PN);Kho=r(H_t,"GPT2TokenizerFast"),H_t.forEach(t),Zho=r(pR," (GPT-J model)"),pR.forEach(t),euo=i(S),bs=n(S,"LI",{});var _R=s(bs);lce=n(_R,"STRONG",{});var J_t=s(lce);ouo=r(J_t,"groupvit"),J_t.forEach(t),ruo=r(_R," \u2014 "),BN=n(_R,"A",{href:!0});var Y_t=s(BN);tuo=r(Y_t,"CLIPTokenizer"),Y_t.forEach(t),auo=r(_R," or "),IN=n(_R,"A",{href:!0});var K_t=s(IN);nuo=r(K_t,"CLIPTokenizerFast"),K_t.forEach(t),suo=r(_R," (GroupViT model)"),_R.forEach(t),luo=i(S),vs=n(S,"LI",{});var bR=s(vs);ice=n(bR,"STRONG",{});var Z_t=s(ice);iuo=r(Z_t,"herbert"),Z_t.forEach(t),duo=r(bR," \u2014 "),NN=n(bR,"A",{href:!0});var e2t=s(NN);cuo=r(e2t,"HerbertTokenizer"),e2t.forEach(t),muo=r(bR," or "),qN=n(bR,"A",{href:!0});var o2t=s(qN);fuo=r(o2t,"HerbertTokenizerFast"),o2t.forEach(t),guo=r(bR," (HerBERT model)"),bR.forEach(t),huo=i(S),Ih=n(S,"LI",{});var nke=s(Ih);dce=n(nke,"STRONG",{});var r2t=s(dce);uuo=r(r2t,"hubert"),r2t.forEach(t),puo=r(nke," \u2014 "),jN=n(nke,"A",{href:!0});var t2t=s(jN);_uo=r(t2t,"Wav2Vec2CTCTokenizer"),t2t.forEach(t),buo=r(nke," (Hubert model)"),nke.forEach(t),vuo=i(S),Fs=n(S,"LI",{});var vR=s(Fs);cce=n(vR,"STRONG",{});var a2t=s(cce);Fuo=r(a2t,"ibert"),a2t.forEach(t),Tuo=r(vR," \u2014 "),DN=n(vR,"A",{href:!0});var n2t=s(DN);Muo=r(n2t,"RobertaTokenizer"),n2t.forEach(t),Euo=r(vR," or "),GN=n(vR,"A",{href:!0});var s2t=s(GN);Cuo=r(s2t,"RobertaTokenizerFast"),s2t.forEach(t),wuo=r(vR," (I-BERT model)"),vR.forEach(t),Auo=i(S),Ts=n(S,"LI",{});var FR=s(Ts);mce=n(FR,"STRONG",{});var l2t=s(mce);Luo=r(l2t,"layoutlm"),l2t.forEach(t),yuo=r(FR," \u2014 "),ON=n(FR,"A",{href:!0});var i2t=s(ON);xuo=r(i2t,"LayoutLMTokenizer"),i2t.forEach(t),$uo=r(FR," or "),VN=n(FR,"A",{href:!0});var d2t=s(VN);kuo=r(d2t,"LayoutLMTokenizerFast"),d2t.forEach(t),Suo=r(FR," (LayoutLM model)"),FR.forEach(t),Ruo=i(S),Ms=n(S,"LI",{});var TR=s(Ms);fce=n(TR,"STRONG",{});var c2t=s(fce);Puo=r(c2t,"layoutlmv2"),c2t.forEach(t),Buo=r(TR," \u2014 "),XN=n(TR,"A",{href:!0});var m2t=s(XN);Iuo=r(m2t,"LayoutLMv2Tokenizer"),m2t.forEach(t),Nuo=r(TR," or "),zN=n(TR,"A",{href:!0});var f2t=s(zN);quo=r(f2t,"LayoutLMv2TokenizerFast"),f2t.forEach(t),juo=r(TR," (LayoutLMv2 model)"),TR.forEach(t),Duo=i(S),Es=n(S,"LI",{});var MR=s(Es);gce=n(MR,"STRONG",{});var g2t=s(gce);Guo=r(g2t,"layoutlmv3"),g2t.forEach(t),Ouo=r(MR," \u2014 "),WN=n(MR,"A",{href:!0});var h2t=s(WN);Vuo=r(h2t,"LayoutLMv3Tokenizer"),h2t.forEach(t),Xuo=r(MR," or "),QN=n(MR,"A",{href:!0});var u2t=s(QN);zuo=r(u2t,"LayoutLMv3TokenizerFast"),u2t.forEach(t),Wuo=r(MR," (LayoutLMv3 model)"),MR.forEach(t),Quo=i(S),Cs=n(S,"LI",{});var ER=s(Cs);hce=n(ER,"STRONG",{});var p2t=s(hce);Uuo=r(p2t,"layoutxlm"),p2t.forEach(t),Huo=r(ER," \u2014 "),UN=n(ER,"A",{href:!0});var _2t=s(UN);Juo=r(_2t,"LayoutXLMTokenizer"),_2t.forEach(t),Yuo=r(ER," or "),HN=n(ER,"A",{href:!0});var b2t=s(HN);Kuo=r(b2t,"LayoutXLMTokenizerFast"),b2t.forEach(t),Zuo=r(ER," (LayoutXLM model)"),ER.forEach(t),epo=i(S),ws=n(S,"LI",{});var CR=s(ws);uce=n(CR,"STRONG",{});var v2t=s(uce);opo=r(v2t,"led"),v2t.forEach(t),rpo=r(CR," \u2014 "),JN=n(CR,"A",{href:!0});var F2t=s(JN);tpo=r(F2t,"LEDTokenizer"),F2t.forEach(t),apo=r(CR," or "),YN=n(CR,"A",{href:!0});var T2t=s(YN);npo=r(T2t,"LEDTokenizerFast"),T2t.forEach(t),spo=r(CR," (LED model)"),CR.forEach(t),lpo=i(S),As=n(S,"LI",{});var wR=s(As);pce=n(wR,"STRONG",{});var M2t=s(pce);ipo=r(M2t,"longformer"),M2t.forEach(t),dpo=r(wR," \u2014 "),KN=n(wR,"A",{href:!0});var E2t=s(KN);cpo=r(E2t,"LongformerTokenizer"),E2t.forEach(t),mpo=r(wR," or "),ZN=n(wR,"A",{href:!0});var C2t=s(ZN);fpo=r(C2t,"LongformerTokenizerFast"),C2t.forEach(t),gpo=r(wR," (Longformer model)"),wR.forEach(t),hpo=i(S),Ls=n(S,"LI",{});var AR=s(Ls);_ce=n(AR,"STRONG",{});var w2t=s(_ce);upo=r(w2t,"longt5"),w2t.forEach(t),ppo=r(AR," \u2014 "),eq=n(AR,"A",{href:!0});var A2t=s(eq);_po=r(A2t,"T5Tokenizer"),A2t.forEach(t),bpo=r(AR," or "),oq=n(AR,"A",{href:!0});var L2t=s(oq);vpo=r(L2t,"T5TokenizerFast"),L2t.forEach(t),Fpo=r(AR," (LongT5 model)"),AR.forEach(t),Tpo=i(S),Nh=n(S,"LI",{});var ske=s(Nh);bce=n(ske,"STRONG",{});var y2t=s(bce);Mpo=r(y2t,"luke"),y2t.forEach(t),Epo=r(ske," \u2014 "),rq=n(ske,"A",{href:!0});var x2t=s(rq);Cpo=r(x2t,"LukeTokenizer"),x2t.forEach(t),wpo=r(ske," (LUKE model)"),ske.forEach(t),Apo=i(S),ys=n(S,"LI",{});var LR=s(ys);vce=n(LR,"STRONG",{});var $2t=s(vce);Lpo=r($2t,"lxmert"),$2t.forEach(t),ypo=r(LR," \u2014 "),tq=n(LR,"A",{href:!0});var k2t=s(tq);xpo=r(k2t,"LxmertTokenizer"),k2t.forEach(t),$po=r(LR," or "),aq=n(LR,"A",{href:!0});var S2t=s(aq);kpo=r(S2t,"LxmertTokenizerFast"),S2t.forEach(t),Spo=r(LR," (LXMERT model)"),LR.forEach(t),Rpo=i(S),qh=n(S,"LI",{});var lke=s(qh);Fce=n(lke,"STRONG",{});var R2t=s(Fce);Ppo=r(R2t,"m2m_100"),R2t.forEach(t),Bpo=r(lke," \u2014 "),nq=n(lke,"A",{href:!0});var P2t=s(nq);Ipo=r(P2t,"M2M100Tokenizer"),P2t.forEach(t),Npo=r(lke," (M2M100 model)"),lke.forEach(t),qpo=i(S),jh=n(S,"LI",{});var ike=s(jh);Tce=n(ike,"STRONG",{});var B2t=s(Tce);jpo=r(B2t,"marian"),B2t.forEach(t),Dpo=r(ike," \u2014 "),sq=n(ike,"A",{href:!0});var I2t=s(sq);Gpo=r(I2t,"MarianTokenizer"),I2t.forEach(t),Opo=r(ike," (Marian model)"),ike.forEach(t),Vpo=i(S),xs=n(S,"LI",{});var yR=s(xs);Mce=n(yR,"STRONG",{});var N2t=s(Mce);Xpo=r(N2t,"mbart"),N2t.forEach(t),zpo=r(yR," \u2014 "),lq=n(yR,"A",{href:!0});var q2t=s(lq);Wpo=r(q2t,"MBartTokenizer"),q2t.forEach(t),Qpo=r(yR," or "),iq=n(yR,"A",{href:!0});var j2t=s(iq);Upo=r(j2t,"MBartTokenizerFast"),j2t.forEach(t),Hpo=r(yR," (mBART model)"),yR.forEach(t),Jpo=i(S),$s=n(S,"LI",{});var xR=s($s);Ece=n(xR,"STRONG",{});var D2t=s(Ece);Ypo=r(D2t,"mbart50"),D2t.forEach(t),Kpo=r(xR," \u2014 "),dq=n(xR,"A",{href:!0});var G2t=s(dq);Zpo=r(G2t,"MBart50Tokenizer"),G2t.forEach(t),e_o=r(xR," or "),cq=n(xR,"A",{href:!0});var O2t=s(cq);o_o=r(O2t,"MBart50TokenizerFast"),O2t.forEach(t),r_o=r(xR," (mBART-50 model)"),xR.forEach(t),t_o=i(S),ks=n(S,"LI",{});var $R=s(ks);Cce=n($R,"STRONG",{});var V2t=s(Cce);a_o=r(V2t,"megatron-bert"),V2t.forEach(t),n_o=r($R," \u2014 "),mq=n($R,"A",{href:!0});var X2t=s(mq);s_o=r(X2t,"BertTokenizer"),X2t.forEach(t),l_o=r($R," or "),fq=n($R,"A",{href:!0});var z2t=s(fq);i_o=r(z2t,"BertTokenizerFast"),z2t.forEach(t),d_o=r($R," (Megatron-BERT model)"),$R.forEach(t),c_o=i(S),Dh=n(S,"LI",{});var dke=s(Dh);wce=n(dke,"STRONG",{});var W2t=s(wce);m_o=r(W2t,"mluke"),W2t.forEach(t),f_o=r(dke," \u2014 "),gq=n(dke,"A",{href:!0});var Q2t=s(gq);g_o=r(Q2t,"MLukeTokenizer"),Q2t.forEach(t),h_o=r(dke," (mLUKE model)"),dke.forEach(t),u_o=i(S),Ss=n(S,"LI",{});var kR=s(Ss);Ace=n(kR,"STRONG",{});var U2t=s(Ace);p_o=r(U2t,"mobilebert"),U2t.forEach(t),__o=r(kR," \u2014 "),hq=n(kR,"A",{href:!0});var H2t=s(hq);b_o=r(H2t,"MobileBertTokenizer"),H2t.forEach(t),v_o=r(kR," or "),uq=n(kR,"A",{href:!0});var J2t=s(uq);F_o=r(J2t,"MobileBertTokenizerFast"),J2t.forEach(t),T_o=r(kR," (MobileBERT model)"),kR.forEach(t),M_o=i(S),Rs=n(S,"LI",{});var SR=s(Rs);Lce=n(SR,"STRONG",{});var Y2t=s(Lce);E_o=r(Y2t,"mpnet"),Y2t.forEach(t),C_o=r(SR," \u2014 "),pq=n(SR,"A",{href:!0});var K2t=s(pq);w_o=r(K2t,"MPNetTokenizer"),K2t.forEach(t),A_o=r(SR," or "),_q=n(SR,"A",{href:!0});var Z2t=s(_q);L_o=r(Z2t,"MPNetTokenizerFast"),Z2t.forEach(t),y_o=r(SR," (MPNet model)"),SR.forEach(t),x_o=i(S),Ps=n(S,"LI",{});var RR=s(Ps);yce=n(RR,"STRONG",{});var ebt=s(yce);$_o=r(ebt,"mt5"),ebt.forEach(t),k_o=r(RR," \u2014 "),bq=n(RR,"A",{href:!0});var obt=s(bq);S_o=r(obt,"MT5Tokenizer"),obt.forEach(t),R_o=r(RR," or "),vq=n(RR,"A",{href:!0});var rbt=s(vq);P_o=r(rbt,"MT5TokenizerFast"),rbt.forEach(t),B_o=r(RR," (MT5 model)"),RR.forEach(t),I_o=i(S),Bs=n(S,"LI",{});var PR=s(Bs);xce=n(PR,"STRONG",{});var tbt=s(xce);N_o=r(tbt,"mvp"),tbt.forEach(t),q_o=r(PR," \u2014 "),Fq=n(PR,"A",{href:!0});var abt=s(Fq);j_o=r(abt,"MvpTokenizer"),abt.forEach(t),D_o=r(PR," or "),Tq=n(PR,"A",{href:!0});var nbt=s(Tq);G_o=r(nbt,"MvpTokenizerFast"),nbt.forEach(t),O_o=r(PR," (MVP model)"),PR.forEach(t),V_o=i(S),Is=n(S,"LI",{});var BR=s(Is);$ce=n(BR,"STRONG",{});var sbt=s($ce);X_o=r(sbt,"nezha"),sbt.forEach(t),z_o=r(BR," \u2014 "),Mq=n(BR,"A",{href:!0});var lbt=s(Mq);W_o=r(lbt,"BertTokenizer"),lbt.forEach(t),Q_o=r(BR," or "),Eq=n(BR,"A",{href:!0});var ibt=s(Eq);U_o=r(ibt,"BertTokenizerFast"),ibt.forEach(t),H_o=r(BR," (Nezha model)"),BR.forEach(t),J_o=i(S),Ns=n(S,"LI",{});var IR=s(Ns);kce=n(IR,"STRONG",{});var dbt=s(kce);Y_o=r(dbt,"nllb"),dbt.forEach(t),K_o=r(IR," \u2014 "),Cq=n(IR,"A",{href:!0});var cbt=s(Cq);Z_o=r(cbt,"NllbTokenizer"),cbt.forEach(t),e2o=r(IR," or "),wq=n(IR,"A",{href:!0});var mbt=s(wq);o2o=r(mbt,"NllbTokenizerFast"),mbt.forEach(t),r2o=r(IR," (NLLB model)"),IR.forEach(t),t2o=i(S),qs=n(S,"LI",{});var NR=s(qs);Sce=n(NR,"STRONG",{});var fbt=s(Sce);a2o=r(fbt,"nystromformer"),fbt.forEach(t),n2o=r(NR," \u2014 "),Aq=n(NR,"A",{href:!0});var gbt=s(Aq);s2o=r(gbt,"AlbertTokenizer"),gbt.forEach(t),l2o=r(NR," or "),Lq=n(NR,"A",{href:!0});var hbt=s(Lq);i2o=r(hbt,"AlbertTokenizerFast"),hbt.forEach(t),d2o=r(NR," (Nystr\xF6mformer model)"),NR.forEach(t),c2o=i(S),js=n(S,"LI",{});var qR=s(js);Rce=n(qR,"STRONG",{});var ubt=s(Rce);m2o=r(ubt,"openai-gpt"),ubt.forEach(t),f2o=r(qR," \u2014 "),yq=n(qR,"A",{href:!0});var pbt=s(yq);g2o=r(pbt,"OpenAIGPTTokenizer"),pbt.forEach(t),h2o=r(qR," or "),xq=n(qR,"A",{href:!0});var _bt=s(xq);u2o=r(_bt,"OpenAIGPTTokenizerFast"),_bt.forEach(t),p2o=r(qR," (OpenAI GPT model)"),qR.forEach(t),_2o=i(S),Gh=n(S,"LI",{});var cke=s(Gh);Pce=n(cke,"STRONG",{});var bbt=s(Pce);b2o=r(bbt,"opt"),bbt.forEach(t),v2o=r(cke," \u2014 "),$q=n(cke,"A",{href:!0});var vbt=s($q);F2o=r(vbt,"GPT2Tokenizer"),vbt.forEach(t),T2o=r(cke," (OPT model)"),cke.forEach(t),M2o=i(S),Ds=n(S,"LI",{});var jR=s(Ds);Bce=n(jR,"STRONG",{});var Fbt=s(Bce);E2o=r(Fbt,"owlvit"),Fbt.forEach(t),C2o=r(jR," \u2014 "),kq=n(jR,"A",{href:!0});var Tbt=s(kq);w2o=r(Tbt,"CLIPTokenizer"),Tbt.forEach(t),A2o=r(jR," or "),Sq=n(jR,"A",{href:!0});var Mbt=s(Sq);L2o=r(Mbt,"CLIPTokenizerFast"),Mbt.forEach(t),y2o=r(jR," (OWL-ViT model)"),jR.forEach(t),x2o=i(S),Gs=n(S,"LI",{});var DR=s(Gs);Ice=n(DR,"STRONG",{});var Ebt=s(Ice);$2o=r(Ebt,"pegasus"),Ebt.forEach(t),k2o=r(DR," \u2014 "),Rq=n(DR,"A",{href:!0});var Cbt=s(Rq);S2o=r(Cbt,"PegasusTokenizer"),Cbt.forEach(t),R2o=r(DR," or "),Pq=n(DR,"A",{href:!0});var wbt=s(Pq);P2o=r(wbt,"PegasusTokenizerFast"),wbt.forEach(t),B2o=r(DR," (Pegasus model)"),DR.forEach(t),I2o=i(S),Oh=n(S,"LI",{});var mke=s(Oh);Nce=n(mke,"STRONG",{});var Abt=s(Nce);N2o=r(Abt,"perceiver"),Abt.forEach(t),q2o=r(mke," \u2014 "),Bq=n(mke,"A",{href:!0});var Lbt=s(Bq);j2o=r(Lbt,"PerceiverTokenizer"),Lbt.forEach(t),D2o=r(mke," (Perceiver model)"),mke.forEach(t),G2o=i(S),Vh=n(S,"LI",{});var fke=s(Vh);qce=n(fke,"STRONG",{});var ybt=s(qce);O2o=r(ybt,"phobert"),ybt.forEach(t),V2o=r(fke," \u2014 "),Iq=n(fke,"A",{href:!0});var xbt=s(Iq);X2o=r(xbt,"PhobertTokenizer"),xbt.forEach(t),z2o=r(fke," (PhoBERT model)"),fke.forEach(t),W2o=i(S),Xh=n(S,"LI",{});var gke=s(Xh);jce=n(gke,"STRONG",{});var $bt=s(jce);Q2o=r($bt,"plbart"),$bt.forEach(t),U2o=r(gke," \u2014 "),Nq=n(gke,"A",{href:!0});var kbt=s(Nq);H2o=r(kbt,"PLBartTokenizer"),kbt.forEach(t),J2o=r(gke," (PLBart model)"),gke.forEach(t),Y2o=i(S),zh=n(S,"LI",{});var hke=s(zh);Dce=n(hke,"STRONG",{});var Sbt=s(Dce);K2o=r(Sbt,"prophetnet"),Sbt.forEach(t),Z2o=r(hke," \u2014 "),qq=n(hke,"A",{href:!0});var Rbt=s(qq);ebo=r(Rbt,"ProphetNetTokenizer"),Rbt.forEach(t),obo=r(hke," (ProphetNet model)"),hke.forEach(t),rbo=i(S),Os=n(S,"LI",{});var GR=s(Os);Gce=n(GR,"STRONG",{});var Pbt=s(Gce);tbo=r(Pbt,"qdqbert"),Pbt.forEach(t),abo=r(GR," \u2014 "),jq=n(GR,"A",{href:!0});var Bbt=s(jq);nbo=r(Bbt,"BertTokenizer"),Bbt.forEach(t),sbo=r(GR," or "),Dq=n(GR,"A",{href:!0});var Ibt=s(Dq);lbo=r(Ibt,"BertTokenizerFast"),Ibt.forEach(t),ibo=r(GR," (QDQBert model)"),GR.forEach(t),dbo=i(S),Wh=n(S,"LI",{});var uke=s(Wh);Oce=n(uke,"STRONG",{});var Nbt=s(Oce);cbo=r(Nbt,"rag"),Nbt.forEach(t),mbo=r(uke," \u2014 "),Gq=n(uke,"A",{href:!0});var qbt=s(Gq);fbo=r(qbt,"RagTokenizer"),qbt.forEach(t),gbo=r(uke," (RAG model)"),uke.forEach(t),hbo=i(S),Vs=n(S,"LI",{});var OR=s(Vs);Vce=n(OR,"STRONG",{});var jbt=s(Vce);ubo=r(jbt,"realm"),jbt.forEach(t),pbo=r(OR," \u2014 "),Oq=n(OR,"A",{href:!0});var Dbt=s(Oq);_bo=r(Dbt,"RealmTokenizer"),Dbt.forEach(t),bbo=r(OR," or "),Vq=n(OR,"A",{href:!0});var Gbt=s(Vq);vbo=r(Gbt,"RealmTokenizerFast"),Gbt.forEach(t),Fbo=r(OR," (REALM model)"),OR.forEach(t),Tbo=i(S),Xs=n(S,"LI",{});var VR=s(Xs);Xce=n(VR,"STRONG",{});var Obt=s(Xce);Mbo=r(Obt,"reformer"),Obt.forEach(t),Ebo=r(VR," \u2014 "),Xq=n(VR,"A",{href:!0});var Vbt=s(Xq);Cbo=r(Vbt,"ReformerTokenizer"),Vbt.forEach(t),wbo=r(VR," or "),zq=n(VR,"A",{href:!0});var Xbt=s(zq);Abo=r(Xbt,"ReformerTokenizerFast"),Xbt.forEach(t),Lbo=r(VR," (Reformer model)"),VR.forEach(t),ybo=i(S),zs=n(S,"LI",{});var XR=s(zs);zce=n(XR,"STRONG",{});var zbt=s(zce);xbo=r(zbt,"rembert"),zbt.forEach(t),$bo=r(XR," \u2014 "),Wq=n(XR,"A",{href:!0});var Wbt=s(Wq);kbo=r(Wbt,"RemBertTokenizer"),Wbt.forEach(t),Sbo=r(XR," or "),Qq=n(XR,"A",{href:!0});var Qbt=s(Qq);Rbo=r(Qbt,"RemBertTokenizerFast"),Qbt.forEach(t),Pbo=r(XR," (RemBERT model)"),XR.forEach(t),Bbo=i(S),Ws=n(S,"LI",{});var zR=s(Ws);Wce=n(zR,"STRONG",{});var Ubt=s(Wce);Ibo=r(Ubt,"retribert"),Ubt.forEach(t),Nbo=r(zR," \u2014 "),Uq=n(zR,"A",{href:!0});var Hbt=s(Uq);qbo=r(Hbt,"RetriBertTokenizer"),Hbt.forEach(t),jbo=r(zR," or "),Hq=n(zR,"A",{href:!0});var Jbt=s(Hq);Dbo=r(Jbt,"RetriBertTokenizerFast"),Jbt.forEach(t),Gbo=r(zR," (RetriBERT model)"),zR.forEach(t),Obo=i(S),Qs=n(S,"LI",{});var WR=s(Qs);Qce=n(WR,"STRONG",{});var Ybt=s(Qce);Vbo=r(Ybt,"roberta"),Ybt.forEach(t),Xbo=r(WR," \u2014 "),Jq=n(WR,"A",{href:!0});var Kbt=s(Jq);zbo=r(Kbt,"RobertaTokenizer"),Kbt.forEach(t),Wbo=r(WR," or "),Yq=n(WR,"A",{href:!0});var Zbt=s(Yq);Qbo=r(Zbt,"RobertaTokenizerFast"),Zbt.forEach(t),Ubo=r(WR," (RoBERTa model)"),WR.forEach(t),Hbo=i(S),Us=n(S,"LI",{});var QR=s(Us);Uce=n(QR,"STRONG",{});var evt=s(Uce);Jbo=r(evt,"roformer"),evt.forEach(t),Ybo=r(QR," \u2014 "),Kq=n(QR,"A",{href:!0});var ovt=s(Kq);Kbo=r(ovt,"RoFormerTokenizer"),ovt.forEach(t),Zbo=r(QR," or "),Zq=n(QR,"A",{href:!0});var rvt=s(Zq);evo=r(rvt,"RoFormerTokenizerFast"),rvt.forEach(t),ovo=r(QR," (RoFormer model)"),QR.forEach(t),rvo=i(S),Qh=n(S,"LI",{});var pke=s(Qh);Hce=n(pke,"STRONG",{});var tvt=s(Hce);tvo=r(tvt,"speech_to_text"),tvt.forEach(t),avo=r(pke," \u2014 "),ej=n(pke,"A",{href:!0});var avt=s(ej);nvo=r(avt,"Speech2TextTokenizer"),avt.forEach(t),svo=r(pke," (Speech2Text model)"),pke.forEach(t),lvo=i(S),Uh=n(S,"LI",{});var _ke=s(Uh);Jce=n(_ke,"STRONG",{});var nvt=s(Jce);ivo=r(nvt,"speech_to_text_2"),nvt.forEach(t),dvo=r(_ke," \u2014 "),oj=n(_ke,"A",{href:!0});var svt=s(oj);cvo=r(svt,"Speech2Text2Tokenizer"),svt.forEach(t),mvo=r(_ke," (Speech2Text2 model)"),_ke.forEach(t),fvo=i(S),Hs=n(S,"LI",{});var UR=s(Hs);Yce=n(UR,"STRONG",{});var lvt=s(Yce);gvo=r(lvt,"splinter"),lvt.forEach(t),hvo=r(UR," \u2014 "),rj=n(UR,"A",{href:!0});var ivt=s(rj);uvo=r(ivt,"SplinterTokenizer"),ivt.forEach(t),pvo=r(UR," or "),tj=n(UR,"A",{href:!0});var dvt=s(tj);_vo=r(dvt,"SplinterTokenizerFast"),dvt.forEach(t),bvo=r(UR," (Splinter model)"),UR.forEach(t),vvo=i(S),Js=n(S,"LI",{});var HR=s(Js);Kce=n(HR,"STRONG",{});var cvt=s(Kce);Fvo=r(cvt,"squeezebert"),cvt.forEach(t),Tvo=r(HR," \u2014 "),aj=n(HR,"A",{href:!0});var mvt=s(aj);Mvo=r(mvt,"SqueezeBertTokenizer"),mvt.forEach(t),Evo=r(HR," or "),nj=n(HR,"A",{href:!0});var fvt=s(nj);Cvo=r(fvt,"SqueezeBertTokenizerFast"),fvt.forEach(t),wvo=r(HR," (SqueezeBERT model)"),HR.forEach(t),Avo=i(S),Ys=n(S,"LI",{});var JR=s(Ys);Zce=n(JR,"STRONG",{});var gvt=s(Zce);Lvo=r(gvt,"t5"),gvt.forEach(t),yvo=r(JR," \u2014 "),sj=n(JR,"A",{href:!0});var hvt=s(sj);xvo=r(hvt,"T5Tokenizer"),hvt.forEach(t),$vo=r(JR," or "),lj=n(JR,"A",{href:!0});var uvt=s(lj);kvo=r(uvt,"T5TokenizerFast"),uvt.forEach(t),Svo=r(JR," (T5 model)"),JR.forEach(t),Rvo=i(S),Hh=n(S,"LI",{});var bke=s(Hh);eme=n(bke,"STRONG",{});var pvt=s(eme);Pvo=r(pvt,"tapas"),pvt.forEach(t),Bvo=r(bke," \u2014 "),ij=n(bke,"A",{href:!0});var _vt=s(ij);Ivo=r(_vt,"TapasTokenizer"),_vt.forEach(t),Nvo=r(bke," (TAPAS model)"),bke.forEach(t),qvo=i(S),Jh=n(S,"LI",{});var vke=s(Jh);ome=n(vke,"STRONG",{});var bvt=s(ome);jvo=r(bvt,"tapex"),bvt.forEach(t),Dvo=r(vke," \u2014 "),dj=n(vke,"A",{href:!0});var vvt=s(dj);Gvo=r(vvt,"TapexTokenizer"),vvt.forEach(t),Ovo=r(vke," (TAPEX model)"),vke.forEach(t),Vvo=i(S),Yh=n(S,"LI",{});var Fke=s(Yh);rme=n(Fke,"STRONG",{});var Fvt=s(rme);Xvo=r(Fvt,"transfo-xl"),Fvt.forEach(t),zvo=r(Fke," \u2014 "),cj=n(Fke,"A",{href:!0});var Tvt=s(cj);Wvo=r(Tvt,"TransfoXLTokenizer"),Tvt.forEach(t),Qvo=r(Fke," (Transformer-XL model)"),Fke.forEach(t),Uvo=i(S),Ks=n(S,"LI",{});var YR=s(Ks);tme=n(YR,"STRONG",{});var Mvt=s(tme);Hvo=r(Mvt,"vilt"),Mvt.forEach(t),Jvo=r(YR," \u2014 "),mj=n(YR,"A",{href:!0});var Evt=s(mj);Yvo=r(Evt,"BertTokenizer"),Evt.forEach(t),Kvo=r(YR," or "),fj=n(YR,"A",{href:!0});var Cvt=s(fj);Zvo=r(Cvt,"BertTokenizerFast"),Cvt.forEach(t),e1o=r(YR," (ViLT model)"),YR.forEach(t),o1o=i(S),Zs=n(S,"LI",{});var KR=s(Zs);ame=n(KR,"STRONG",{});var wvt=s(ame);r1o=r(wvt,"visual_bert"),wvt.forEach(t),t1o=r(KR," \u2014 "),gj=n(KR,"A",{href:!0});var Avt=s(gj);a1o=r(Avt,"BertTokenizer"),Avt.forEach(t),n1o=r(KR," or "),hj=n(KR,"A",{href:!0});var Lvt=s(hj);s1o=r(Lvt,"BertTokenizerFast"),Lvt.forEach(t),l1o=r(KR," (VisualBERT model)"),KR.forEach(t),i1o=i(S),Kh=n(S,"LI",{});var Tke=s(Kh);nme=n(Tke,"STRONG",{});var yvt=s(nme);d1o=r(yvt,"wav2vec2"),yvt.forEach(t),c1o=r(Tke," \u2014 "),uj=n(Tke,"A",{href:!0});var xvt=s(uj);m1o=r(xvt,"Wav2Vec2CTCTokenizer"),xvt.forEach(t),f1o=r(Tke," (Wav2Vec2 model)"),Tke.forEach(t),g1o=i(S),Zh=n(S,"LI",{});var Mke=s(Zh);sme=n(Mke,"STRONG",{});var $vt=s(sme);h1o=r($vt,"wav2vec2-conformer"),$vt.forEach(t),u1o=r(Mke," \u2014 "),pj=n(Mke,"A",{href:!0});var kvt=s(pj);p1o=r(kvt,"Wav2Vec2CTCTokenizer"),kvt.forEach(t),_1o=r(Mke," (Wav2Vec2-Conformer model)"),Mke.forEach(t),b1o=i(S),eu=n(S,"LI",{});var Eke=s(eu);lme=n(Eke,"STRONG",{});var Svt=s(lme);v1o=r(Svt,"wav2vec2_phoneme"),Svt.forEach(t),F1o=r(Eke," \u2014 "),_j=n(Eke,"A",{href:!0});var Rvt=s(_j);T1o=r(Rvt,"Wav2Vec2PhonemeCTCTokenizer"),Rvt.forEach(t),M1o=r(Eke," (Wav2Vec2Phoneme model)"),Eke.forEach(t),E1o=i(S),el=n(S,"LI",{});var ZR=s(el);ime=n(ZR,"STRONG",{});var Pvt=s(ime);C1o=r(Pvt,"xglm"),Pvt.forEach(t),w1o=r(ZR," \u2014 "),bj=n(ZR,"A",{href:!0});var Bvt=s(bj);A1o=r(Bvt,"XGLMTokenizer"),Bvt.forEach(t),L1o=r(ZR," or "),vj=n(ZR,"A",{href:!0});var Ivt=s(vj);y1o=r(Ivt,"XGLMTokenizerFast"),Ivt.forEach(t),x1o=r(ZR," (XGLM model)"),ZR.forEach(t),$1o=i(S),ou=n(S,"LI",{});var Cke=s(ou);dme=n(Cke,"STRONG",{});var Nvt=s(dme);k1o=r(Nvt,"xlm"),Nvt.forEach(t),S1o=r(Cke," \u2014 "),Fj=n(Cke,"A",{href:!0});var qvt=s(Fj);R1o=r(qvt,"XLMTokenizer"),qvt.forEach(t),P1o=r(Cke," (XLM model)"),Cke.forEach(t),B1o=i(S),ru=n(S,"LI",{});var wke=s(ru);cme=n(wke,"STRONG",{});var jvt=s(cme);I1o=r(jvt,"xlm-prophetnet"),jvt.forEach(t),N1o=r(wke," \u2014 "),Tj=n(wke,"A",{href:!0});var Dvt=s(Tj);q1o=r(Dvt,"XLMProphetNetTokenizer"),Dvt.forEach(t),j1o=r(wke," (XLM-ProphetNet model)"),wke.forEach(t),D1o=i(S),ol=n(S,"LI",{});var eP=s(ol);mme=n(eP,"STRONG",{});var Gvt=s(mme);G1o=r(Gvt,"xlm-roberta"),Gvt.forEach(t),O1o=r(eP," \u2014 "),Mj=n(eP,"A",{href:!0});var Ovt=s(Mj);V1o=r(Ovt,"XLMRobertaTokenizer"),Ovt.forEach(t),X1o=r(eP," or "),Ej=n(eP,"A",{href:!0});var Vvt=s(Ej);z1o=r(Vvt,"XLMRobertaTokenizerFast"),Vvt.forEach(t),W1o=r(eP," (XLM-RoBERTa model)"),eP.forEach(t),Q1o=i(S),rl=n(S,"LI",{});var oP=s(rl);fme=n(oP,"STRONG",{});var Xvt=s(fme);U1o=r(Xvt,"xlm-roberta-xl"),Xvt.forEach(t),H1o=r(oP," \u2014 "),Cj=n(oP,"A",{href:!0});var zvt=s(Cj);J1o=r(zvt,"RobertaTokenizer"),zvt.forEach(t),Y1o=r(oP," or "),wj=n(oP,"A",{href:!0});var Wvt=s(wj);K1o=r(Wvt,"RobertaTokenizerFast"),Wvt.forEach(t),Z1o=r(oP," (XLM-RoBERTa-XL model)"),oP.forEach(t),eFo=i(S),tl=n(S,"LI",{});var rP=s(tl);gme=n(rP,"STRONG",{});var Qvt=s(gme);oFo=r(Qvt,"xlnet"),Qvt.forEach(t),rFo=r(rP," \u2014 "),Aj=n(rP,"A",{href:!0});var Uvt=s(Aj);tFo=r(Uvt,"XLNetTokenizer"),Uvt.forEach(t),aFo=r(rP," or "),Lj=n(rP,"A",{href:!0});var Hvt=s(Lj);nFo=r(Hvt,"XLNetTokenizerFast"),Hvt.forEach(t),sFo=r(rP," (XLNet model)"),rP.forEach(t),lFo=i(S),al=n(S,"LI",{});var tP=s(al);hme=n(tP,"STRONG",{});var Jvt=s(hme);iFo=r(Jvt,"yoso"),Jvt.forEach(t),dFo=r(tP," \u2014 "),yj=n(tP,"A",{href:!0});var Yvt=s(yj);cFo=r(Yvt,"AlbertTokenizer"),Yvt.forEach(t),mFo=r(tP," or "),xj=n(tP,"A",{href:!0});var Kvt=s(xj);fFo=r(Kvt,"AlbertTokenizerFast"),Kvt.forEach(t),gFo=r(tP," (YOSO model)"),tP.forEach(t),S.forEach(t),hFo=i(ml),T(tu.$$.fragment,ml),ml.forEach(t),uFo=i(cl),au=n(cl,"DIV",{class:!0});var CJe=s(au);T(S8.$$.fragment,CJe),pFo=i(CJe),ume=n(CJe,"P",{});var Zvt=s(ume);_Fo=r(Zvt,"Register a new tokenizer in this mapping."),Zvt.forEach(t),CJe.forEach(t),cl.forEach(t),vUe=i(m),Zi=n(m,"H2",{class:!0});var wJe=s(Zi);nu=n(wJe,"A",{id:!0,class:!0,href:!0});var e1t=s(nu);pme=n(e1t,"SPAN",{});var o1t=s(pme);T(R8.$$.fragment,o1t),o1t.forEach(t),e1t.forEach(t),bFo=i(wJe),_me=n(wJe,"SPAN",{});var r1t=s(_me);vFo=r(r1t,"AutoFeatureExtractor"),r1t.forEach(t),wJe.forEach(t),FUe=i(m),$o=n(m,"DIV",{class:!0});var fl=s($o);T(P8.$$.fragment,fl),FFo=i(fl),B8=n(fl,"P",{});var AJe=s(B8);TFo=r(AJe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),$j=n(AJe,"A",{href:!0});var t1t=s($j);MFo=r(t1t,"AutoFeatureExtractor.from_pretrained()"),t1t.forEach(t),EFo=r(AJe," class method."),AJe.forEach(t),CFo=i(fl),I8=n(fl,"P",{});var LJe=s(I8);wFo=r(LJe,"This class cannot be instantiated directly using "),bme=n(LJe,"CODE",{});var a1t=s(bme);AFo=r(a1t,"__init__()"),a1t.forEach(t),LFo=r(LJe," (throws an error)."),LJe.forEach(t),yFo=i(fl),He=n(fl,"DIV",{class:!0});var ma=s(He);T(N8.$$.fragment,ma),xFo=i(ma),vme=n(ma,"P",{});var n1t=s(vme);$Fo=r(n1t,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),n1t.forEach(t),kFo=i(ma),Oa=n(ma,"P",{});var _L=s(Oa);SFo=r(_L,"The feature extractor class to instantiate is selected based on the "),Fme=n(_L,"CODE",{});var s1t=s(Fme);RFo=r(s1t,"model_type"),s1t.forEach(t),PFo=r(_L,` property of the config object
(either passed as an argument or loaded from `),Tme=n(_L,"CODE",{});var l1t=s(Tme);BFo=r(l1t,"pretrained_model_name_or_path"),l1t.forEach(t),IFo=r(_L,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Mme=n(_L,"CODE",{});var i1t=s(Mme);NFo=r(i1t,"pretrained_model_name_or_path"),i1t.forEach(t),qFo=r(_L,":"),_L.forEach(t),jFo=i(ma),Q=n(ma,"UL",{});var J=s(Q);su=n(J,"LI",{});var Ake=s(su);Eme=n(Ake,"STRONG",{});var d1t=s(Eme);DFo=r(d1t,"beit"),d1t.forEach(t),GFo=r(Ake," \u2014 "),kj=n(Ake,"A",{href:!0});var c1t=s(kj);OFo=r(c1t,"BeitFeatureExtractor"),c1t.forEach(t),VFo=r(Ake," (BEiT model)"),Ake.forEach(t),XFo=i(J),lu=n(J,"LI",{});var Lke=s(lu);Cme=n(Lke,"STRONG",{});var m1t=s(Cme);zFo=r(m1t,"clip"),m1t.forEach(t),WFo=r(Lke," \u2014 "),Sj=n(Lke,"A",{href:!0});var f1t=s(Sj);QFo=r(f1t,"CLIPFeatureExtractor"),f1t.forEach(t),UFo=r(Lke," (CLIP model)"),Lke.forEach(t),HFo=i(J),iu=n(J,"LI",{});var yke=s(iu);wme=n(yke,"STRONG",{});var g1t=s(wme);JFo=r(g1t,"convnext"),g1t.forEach(t),YFo=r(yke," \u2014 "),Rj=n(yke,"A",{href:!0});var h1t=s(Rj);KFo=r(h1t,"ConvNextFeatureExtractor"),h1t.forEach(t),ZFo=r(yke," (ConvNeXT model)"),yke.forEach(t),eTo=i(J),du=n(J,"LI",{});var xke=s(du);Ame=n(xke,"STRONG",{});var u1t=s(Ame);oTo=r(u1t,"cvt"),u1t.forEach(t),rTo=r(xke," \u2014 "),Pj=n(xke,"A",{href:!0});var p1t=s(Pj);tTo=r(p1t,"ConvNextFeatureExtractor"),p1t.forEach(t),aTo=r(xke," (CvT model)"),xke.forEach(t),nTo=i(J),cu=n(J,"LI",{});var $ke=s(cu);Lme=n($ke,"STRONG",{});var _1t=s(Lme);sTo=r(_1t,"data2vec-audio"),_1t.forEach(t),lTo=r($ke," \u2014 "),Bj=n($ke,"A",{href:!0});var b1t=s(Bj);iTo=r(b1t,"Wav2Vec2FeatureExtractor"),b1t.forEach(t),dTo=r($ke," (Data2VecAudio model)"),$ke.forEach(t),cTo=i(J),mu=n(J,"LI",{});var kke=s(mu);yme=n(kke,"STRONG",{});var v1t=s(yme);mTo=r(v1t,"data2vec-vision"),v1t.forEach(t),fTo=r(kke," \u2014 "),Ij=n(kke,"A",{href:!0});var F1t=s(Ij);gTo=r(F1t,"BeitFeatureExtractor"),F1t.forEach(t),hTo=r(kke," (Data2VecVision model)"),kke.forEach(t),uTo=i(J),fu=n(J,"LI",{});var Ske=s(fu);xme=n(Ske,"STRONG",{});var T1t=s(xme);pTo=r(T1t,"deit"),T1t.forEach(t),_To=r(Ske," \u2014 "),Nj=n(Ske,"A",{href:!0});var M1t=s(Nj);bTo=r(M1t,"DeiTFeatureExtractor"),M1t.forEach(t),vTo=r(Ske," (DeiT model)"),Ske.forEach(t),FTo=i(J),gu=n(J,"LI",{});var Rke=s(gu);$me=n(Rke,"STRONG",{});var E1t=s($me);TTo=r(E1t,"detr"),E1t.forEach(t),MTo=r(Rke," \u2014 "),qj=n(Rke,"A",{href:!0});var C1t=s(qj);ETo=r(C1t,"DetrFeatureExtractor"),C1t.forEach(t),CTo=r(Rke," (DETR model)"),Rke.forEach(t),wTo=i(J),hu=n(J,"LI",{});var Pke=s(hu);kme=n(Pke,"STRONG",{});var w1t=s(kme);ATo=r(w1t,"donut"),w1t.forEach(t),LTo=r(Pke," \u2014 "),jj=n(Pke,"A",{href:!0});var A1t=s(jj);yTo=r(A1t,"DonutFeatureExtractor"),A1t.forEach(t),xTo=r(Pke," (Donut model)"),Pke.forEach(t),$To=i(J),uu=n(J,"LI",{});var Bke=s(uu);Sme=n(Bke,"STRONG",{});var L1t=s(Sme);kTo=r(L1t,"dpt"),L1t.forEach(t),STo=r(Bke," \u2014 "),Dj=n(Bke,"A",{href:!0});var y1t=s(Dj);RTo=r(y1t,"DPTFeatureExtractor"),y1t.forEach(t),PTo=r(Bke," (DPT model)"),Bke.forEach(t),BTo=i(J),pu=n(J,"LI",{});var Ike=s(pu);Rme=n(Ike,"STRONG",{});var x1t=s(Rme);ITo=r(x1t,"flava"),x1t.forEach(t),NTo=r(Ike," \u2014 "),Gj=n(Ike,"A",{href:!0});var $1t=s(Gj);qTo=r($1t,"FlavaFeatureExtractor"),$1t.forEach(t),jTo=r(Ike," (FLAVA model)"),Ike.forEach(t),DTo=i(J),_u=n(J,"LI",{});var Nke=s(_u);Pme=n(Nke,"STRONG",{});var k1t=s(Pme);GTo=r(k1t,"glpn"),k1t.forEach(t),OTo=r(Nke," \u2014 "),Oj=n(Nke,"A",{href:!0});var S1t=s(Oj);VTo=r(S1t,"GLPNFeatureExtractor"),S1t.forEach(t),XTo=r(Nke," (GLPN model)"),Nke.forEach(t),zTo=i(J),bu=n(J,"LI",{});var qke=s(bu);Bme=n(qke,"STRONG",{});var R1t=s(Bme);WTo=r(R1t,"groupvit"),R1t.forEach(t),QTo=r(qke," \u2014 "),Vj=n(qke,"A",{href:!0});var P1t=s(Vj);UTo=r(P1t,"CLIPFeatureExtractor"),P1t.forEach(t),HTo=r(qke," (GroupViT model)"),qke.forEach(t),JTo=i(J),vu=n(J,"LI",{});var jke=s(vu);Ime=n(jke,"STRONG",{});var B1t=s(Ime);YTo=r(B1t,"hubert"),B1t.forEach(t),KTo=r(jke," \u2014 "),Xj=n(jke,"A",{href:!0});var I1t=s(Xj);ZTo=r(I1t,"Wav2Vec2FeatureExtractor"),I1t.forEach(t),eMo=r(jke," (Hubert model)"),jke.forEach(t),oMo=i(J),Fu=n(J,"LI",{});var Dke=s(Fu);Nme=n(Dke,"STRONG",{});var N1t=s(Nme);rMo=r(N1t,"imagegpt"),N1t.forEach(t),tMo=r(Dke," \u2014 "),zj=n(Dke,"A",{href:!0});var q1t=s(zj);aMo=r(q1t,"ImageGPTFeatureExtractor"),q1t.forEach(t),nMo=r(Dke," (ImageGPT model)"),Dke.forEach(t),sMo=i(J),Tu=n(J,"LI",{});var Gke=s(Tu);qme=n(Gke,"STRONG",{});var j1t=s(qme);lMo=r(j1t,"layoutlmv2"),j1t.forEach(t),iMo=r(Gke," \u2014 "),Wj=n(Gke,"A",{href:!0});var D1t=s(Wj);dMo=r(D1t,"LayoutLMv2FeatureExtractor"),D1t.forEach(t),cMo=r(Gke," (LayoutLMv2 model)"),Gke.forEach(t),mMo=i(J),Mu=n(J,"LI",{});var Oke=s(Mu);jme=n(Oke,"STRONG",{});var G1t=s(jme);fMo=r(G1t,"layoutlmv3"),G1t.forEach(t),gMo=r(Oke," \u2014 "),Qj=n(Oke,"A",{href:!0});var O1t=s(Qj);hMo=r(O1t,"LayoutLMv3FeatureExtractor"),O1t.forEach(t),uMo=r(Oke," (LayoutLMv3 model)"),Oke.forEach(t),pMo=i(J),Eu=n(J,"LI",{});var Vke=s(Eu);Dme=n(Vke,"STRONG",{});var V1t=s(Dme);_Mo=r(V1t,"levit"),V1t.forEach(t),bMo=r(Vke," \u2014 "),Uj=n(Vke,"A",{href:!0});var X1t=s(Uj);vMo=r(X1t,"LevitFeatureExtractor"),X1t.forEach(t),FMo=r(Vke," (LeViT model)"),Vke.forEach(t),TMo=i(J),Cu=n(J,"LI",{});var Xke=s(Cu);Gme=n(Xke,"STRONG",{});var z1t=s(Gme);MMo=r(z1t,"maskformer"),z1t.forEach(t),EMo=r(Xke," \u2014 "),Hj=n(Xke,"A",{href:!0});var W1t=s(Hj);CMo=r(W1t,"MaskFormerFeatureExtractor"),W1t.forEach(t),wMo=r(Xke," (MaskFormer model)"),Xke.forEach(t),AMo=i(J),wu=n(J,"LI",{});var zke=s(wu);Ome=n(zke,"STRONG",{});var Q1t=s(Ome);LMo=r(Q1t,"mctct"),Q1t.forEach(t),yMo=r(zke," \u2014 "),Jj=n(zke,"A",{href:!0});var U1t=s(Jj);xMo=r(U1t,"MCTCTFeatureExtractor"),U1t.forEach(t),$Mo=r(zke," (M-CTC-T model)"),zke.forEach(t),kMo=i(J),Au=n(J,"LI",{});var Wke=s(Au);Vme=n(Wke,"STRONG",{});var H1t=s(Vme);SMo=r(H1t,"mobilevit"),H1t.forEach(t),RMo=r(Wke," \u2014 "),Yj=n(Wke,"A",{href:!0});var J1t=s(Yj);PMo=r(J1t,"MobileViTFeatureExtractor"),J1t.forEach(t),BMo=r(Wke," (MobileViT model)"),Wke.forEach(t),IMo=i(J),Lu=n(J,"LI",{});var Qke=s(Lu);Xme=n(Qke,"STRONG",{});var Y1t=s(Xme);NMo=r(Y1t,"owlvit"),Y1t.forEach(t),qMo=r(Qke," \u2014 "),Kj=n(Qke,"A",{href:!0});var K1t=s(Kj);jMo=r(K1t,"OwlViTFeatureExtractor"),K1t.forEach(t),DMo=r(Qke," (OWL-ViT model)"),Qke.forEach(t),GMo=i(J),yu=n(J,"LI",{});var Uke=s(yu);zme=n(Uke,"STRONG",{});var Z1t=s(zme);OMo=r(Z1t,"perceiver"),Z1t.forEach(t),VMo=r(Uke," \u2014 "),Zj=n(Uke,"A",{href:!0});var eFt=s(Zj);XMo=r(eFt,"PerceiverFeatureExtractor"),eFt.forEach(t),zMo=r(Uke," (Perceiver model)"),Uke.forEach(t),WMo=i(J),xu=n(J,"LI",{});var Hke=s(xu);Wme=n(Hke,"STRONG",{});var oFt=s(Wme);QMo=r(oFt,"poolformer"),oFt.forEach(t),UMo=r(Hke," \u2014 "),eD=n(Hke,"A",{href:!0});var rFt=s(eD);HMo=r(rFt,"PoolFormerFeatureExtractor"),rFt.forEach(t),JMo=r(Hke," (PoolFormer model)"),Hke.forEach(t),YMo=i(J),$u=n(J,"LI",{});var Jke=s($u);Qme=n(Jke,"STRONG",{});var tFt=s(Qme);KMo=r(tFt,"regnet"),tFt.forEach(t),ZMo=r(Jke," \u2014 "),oD=n(Jke,"A",{href:!0});var aFt=s(oD);eEo=r(aFt,"ConvNextFeatureExtractor"),aFt.forEach(t),oEo=r(Jke," (RegNet model)"),Jke.forEach(t),rEo=i(J),ku=n(J,"LI",{});var Yke=s(ku);Ume=n(Yke,"STRONG",{});var nFt=s(Ume);tEo=r(nFt,"resnet"),nFt.forEach(t),aEo=r(Yke," \u2014 "),rD=n(Yke,"A",{href:!0});var sFt=s(rD);nEo=r(sFt,"ConvNextFeatureExtractor"),sFt.forEach(t),sEo=r(Yke," (ResNet model)"),Yke.forEach(t),lEo=i(J),Su=n(J,"LI",{});var Kke=s(Su);Hme=n(Kke,"STRONG",{});var lFt=s(Hme);iEo=r(lFt,"segformer"),lFt.forEach(t),dEo=r(Kke," \u2014 "),tD=n(Kke,"A",{href:!0});var iFt=s(tD);cEo=r(iFt,"SegformerFeatureExtractor"),iFt.forEach(t),mEo=r(Kke," (SegFormer model)"),Kke.forEach(t),fEo=i(J),Ru=n(J,"LI",{});var Zke=s(Ru);Jme=n(Zke,"STRONG",{});var dFt=s(Jme);gEo=r(dFt,"speech_to_text"),dFt.forEach(t),hEo=r(Zke," \u2014 "),aD=n(Zke,"A",{href:!0});var cFt=s(aD);uEo=r(cFt,"Speech2TextFeatureExtractor"),cFt.forEach(t),pEo=r(Zke," (Speech2Text model)"),Zke.forEach(t),_Eo=i(J),Pu=n(J,"LI",{});var eSe=s(Pu);Yme=n(eSe,"STRONG",{});var mFt=s(Yme);bEo=r(mFt,"swin"),mFt.forEach(t),vEo=r(eSe," \u2014 "),nD=n(eSe,"A",{href:!0});var fFt=s(nD);FEo=r(fFt,"ViTFeatureExtractor"),fFt.forEach(t),TEo=r(eSe," (Swin Transformer model)"),eSe.forEach(t),MEo=i(J),Bu=n(J,"LI",{});var oSe=s(Bu);Kme=n(oSe,"STRONG",{});var gFt=s(Kme);EEo=r(gFt,"swinv2"),gFt.forEach(t),CEo=r(oSe," \u2014 "),sD=n(oSe,"A",{href:!0});var hFt=s(sD);wEo=r(hFt,"ViTFeatureExtractor"),hFt.forEach(t),AEo=r(oSe," (Swin Transformer V2 model)"),oSe.forEach(t),LEo=i(J),Iu=n(J,"LI",{});var rSe=s(Iu);Zme=n(rSe,"STRONG",{});var uFt=s(Zme);yEo=r(uFt,"van"),uFt.forEach(t),xEo=r(rSe," \u2014 "),lD=n(rSe,"A",{href:!0});var pFt=s(lD);$Eo=r(pFt,"ConvNextFeatureExtractor"),pFt.forEach(t),kEo=r(rSe," (VAN model)"),rSe.forEach(t),SEo=i(J),Nu=n(J,"LI",{});var tSe=s(Nu);efe=n(tSe,"STRONG",{});var _Ft=s(efe);REo=r(_Ft,"videomae"),_Ft.forEach(t),PEo=r(tSe," \u2014 "),iD=n(tSe,"A",{href:!0});var bFt=s(iD);BEo=r(bFt,"VideoMAEFeatureExtractor"),bFt.forEach(t),IEo=r(tSe," (VideoMAE model)"),tSe.forEach(t),NEo=i(J),qu=n(J,"LI",{});var aSe=s(qu);ofe=n(aSe,"STRONG",{});var vFt=s(ofe);qEo=r(vFt,"vilt"),vFt.forEach(t),jEo=r(aSe," \u2014 "),dD=n(aSe,"A",{href:!0});var FFt=s(dD);DEo=r(FFt,"ViltFeatureExtractor"),FFt.forEach(t),GEo=r(aSe," (ViLT model)"),aSe.forEach(t),OEo=i(J),ju=n(J,"LI",{});var nSe=s(ju);rfe=n(nSe,"STRONG",{});var TFt=s(rfe);VEo=r(TFt,"vit"),TFt.forEach(t),XEo=r(nSe," \u2014 "),cD=n(nSe,"A",{href:!0});var MFt=s(cD);zEo=r(MFt,"ViTFeatureExtractor"),MFt.forEach(t),WEo=r(nSe," (ViT model)"),nSe.forEach(t),QEo=i(J),Du=n(J,"LI",{});var sSe=s(Du);tfe=n(sSe,"STRONG",{});var EFt=s(tfe);UEo=r(EFt,"vit_mae"),EFt.forEach(t),HEo=r(sSe," \u2014 "),mD=n(sSe,"A",{href:!0});var CFt=s(mD);JEo=r(CFt,"ViTFeatureExtractor"),CFt.forEach(t),YEo=r(sSe," (ViTMAE model)"),sSe.forEach(t),KEo=i(J),Gu=n(J,"LI",{});var lSe=s(Gu);afe=n(lSe,"STRONG",{});var wFt=s(afe);ZEo=r(wFt,"wav2vec2"),wFt.forEach(t),e4o=r(lSe," \u2014 "),fD=n(lSe,"A",{href:!0});var AFt=s(fD);o4o=r(AFt,"Wav2Vec2FeatureExtractor"),AFt.forEach(t),r4o=r(lSe," (Wav2Vec2 model)"),lSe.forEach(t),t4o=i(J),Ou=n(J,"LI",{});var iSe=s(Ou);nfe=n(iSe,"STRONG",{});var LFt=s(nfe);a4o=r(LFt,"wav2vec2-conformer"),LFt.forEach(t),n4o=r(iSe," \u2014 "),gD=n(iSe,"A",{href:!0});var yFt=s(gD);s4o=r(yFt,"Wav2Vec2FeatureExtractor"),yFt.forEach(t),l4o=r(iSe," (Wav2Vec2-Conformer model)"),iSe.forEach(t),i4o=i(J),Vu=n(J,"LI",{});var dSe=s(Vu);sfe=n(dSe,"STRONG",{});var xFt=s(sfe);d4o=r(xFt,"yolos"),xFt.forEach(t),c4o=r(dSe," \u2014 "),hD=n(dSe,"A",{href:!0});var $Ft=s(hD);m4o=r($Ft,"YolosFeatureExtractor"),$Ft.forEach(t),f4o=r(dSe," (YOLOS model)"),dSe.forEach(t),J.forEach(t),g4o=i(ma),T(Xu.$$.fragment,ma),h4o=i(ma),T(zu.$$.fragment,ma),ma.forEach(t),u4o=i(fl),Wu=n(fl,"DIV",{class:!0});var yJe=s(Wu);T(q8.$$.fragment,yJe),p4o=i(yJe),lfe=n(yJe,"P",{});var kFt=s(lfe);_4o=r(kFt,"Register a new feature extractor for this class."),kFt.forEach(t),yJe.forEach(t),fl.forEach(t),TUe=i(m),ed=n(m,"H2",{class:!0});var xJe=s(ed);Qu=n(xJe,"A",{id:!0,class:!0,href:!0});var SFt=s(Qu);ife=n(SFt,"SPAN",{});var RFt=s(ife);T(j8.$$.fragment,RFt),RFt.forEach(t),SFt.forEach(t),b4o=i(xJe),dfe=n(xJe,"SPAN",{});var PFt=s(dfe);v4o=r(PFt,"AutoProcessor"),PFt.forEach(t),xJe.forEach(t),MUe=i(m),ko=n(m,"DIV",{class:!0});var gl=s(ko);T(D8.$$.fragment,gl),F4o=i(gl),G8=n(gl,"P",{});var $Je=s(G8);T4o=r($Je,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),uD=n($Je,"A",{href:!0});var BFt=s(uD);M4o=r(BFt,"AutoProcessor.from_pretrained()"),BFt.forEach(t),E4o=r($Je," class method."),$Je.forEach(t),C4o=i(gl),O8=n(gl,"P",{});var kJe=s(O8);w4o=r(kJe,"This class cannot be instantiated directly using "),cfe=n(kJe,"CODE",{});var IFt=s(cfe);A4o=r(IFt,"__init__()"),IFt.forEach(t),L4o=r(kJe," (throws an error)."),kJe.forEach(t),y4o=i(gl),Je=n(gl,"DIV",{class:!0});var fa=s(Je);T(V8.$$.fragment,fa),x4o=i(fa),mfe=n(fa,"P",{});var NFt=s(mfe);$4o=r(NFt,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),NFt.forEach(t),k4o=i(fa),od=n(fa,"P",{});var Yae=s(od);S4o=r(Yae,"The processor class to instantiate is selected based on the "),ffe=n(Yae,"CODE",{});var qFt=s(ffe);R4o=r(qFt,"model_type"),qFt.forEach(t),P4o=r(Yae,` property of the config object (either
passed as an argument or loaded from `),gfe=n(Yae,"CODE",{});var jFt=s(gfe);B4o=r(jFt,"pretrained_model_name_or_path"),jFt.forEach(t),I4o=r(Yae," if possible):"),Yae.forEach(t),N4o=i(fa),ce=n(fa,"UL",{});var ue=s(ce);Uu=n(ue,"LI",{});var cSe=s(Uu);hfe=n(cSe,"STRONG",{});var DFt=s(hfe);q4o=r(DFt,"clip"),DFt.forEach(t),j4o=r(cSe," \u2014 "),pD=n(cSe,"A",{href:!0});var GFt=s(pD);D4o=r(GFt,"CLIPProcessor"),GFt.forEach(t),G4o=r(cSe," (CLIP model)"),cSe.forEach(t),O4o=i(ue),Hu=n(ue,"LI",{});var mSe=s(Hu);ufe=n(mSe,"STRONG",{});var OFt=s(ufe);V4o=r(OFt,"donut"),OFt.forEach(t),X4o=r(mSe," \u2014 "),_D=n(mSe,"A",{href:!0});var VFt=s(_D);z4o=r(VFt,"DonutProcessor"),VFt.forEach(t),W4o=r(mSe," (Donut model)"),mSe.forEach(t),Q4o=i(ue),Ju=n(ue,"LI",{});var fSe=s(Ju);pfe=n(fSe,"STRONG",{});var XFt=s(pfe);U4o=r(XFt,"flava"),XFt.forEach(t),H4o=r(fSe," \u2014 "),bD=n(fSe,"A",{href:!0});var zFt=s(bD);J4o=r(zFt,"FlavaProcessor"),zFt.forEach(t),Y4o=r(fSe," (FLAVA model)"),fSe.forEach(t),K4o=i(ue),Yu=n(ue,"LI",{});var gSe=s(Yu);_fe=n(gSe,"STRONG",{});var WFt=s(_fe);Z4o=r(WFt,"groupvit"),WFt.forEach(t),eCo=r(gSe," \u2014 "),vD=n(gSe,"A",{href:!0});var QFt=s(vD);oCo=r(QFt,"CLIPProcessor"),QFt.forEach(t),rCo=r(gSe," (GroupViT model)"),gSe.forEach(t),tCo=i(ue),Ku=n(ue,"LI",{});var hSe=s(Ku);bfe=n(hSe,"STRONG",{});var UFt=s(bfe);aCo=r(UFt,"layoutlmv2"),UFt.forEach(t),nCo=r(hSe," \u2014 "),FD=n(hSe,"A",{href:!0});var HFt=s(FD);sCo=r(HFt,"LayoutLMv2Processor"),HFt.forEach(t),lCo=r(hSe," (LayoutLMv2 model)"),hSe.forEach(t),iCo=i(ue),Zu=n(ue,"LI",{});var uSe=s(Zu);vfe=n(uSe,"STRONG",{});var JFt=s(vfe);dCo=r(JFt,"layoutlmv3"),JFt.forEach(t),cCo=r(uSe," \u2014 "),TD=n(uSe,"A",{href:!0});var YFt=s(TD);mCo=r(YFt,"LayoutLMv3Processor"),YFt.forEach(t),fCo=r(uSe," (LayoutLMv3 model)"),uSe.forEach(t),gCo=i(ue),ep=n(ue,"LI",{});var pSe=s(ep);Ffe=n(pSe,"STRONG",{});var KFt=s(Ffe);hCo=r(KFt,"layoutxlm"),KFt.forEach(t),uCo=r(pSe," \u2014 "),MD=n(pSe,"A",{href:!0});var ZFt=s(MD);pCo=r(ZFt,"LayoutXLMProcessor"),ZFt.forEach(t),_Co=r(pSe," (LayoutXLM model)"),pSe.forEach(t),bCo=i(ue),op=n(ue,"LI",{});var _Se=s(op);Tfe=n(_Se,"STRONG",{});var eTt=s(Tfe);vCo=r(eTt,"owlvit"),eTt.forEach(t),FCo=r(_Se," \u2014 "),ED=n(_Se,"A",{href:!0});var oTt=s(ED);TCo=r(oTt,"OwlViTProcessor"),oTt.forEach(t),MCo=r(_Se," (OWL-ViT model)"),_Se.forEach(t),ECo=i(ue),rp=n(ue,"LI",{});var bSe=s(rp);Mfe=n(bSe,"STRONG",{});var rTt=s(Mfe);CCo=r(rTt,"sew"),rTt.forEach(t),wCo=r(bSe," \u2014 "),CD=n(bSe,"A",{href:!0});var tTt=s(CD);ACo=r(tTt,"Wav2Vec2Processor"),tTt.forEach(t),LCo=r(bSe," (SEW model)"),bSe.forEach(t),yCo=i(ue),tp=n(ue,"LI",{});var vSe=s(tp);Efe=n(vSe,"STRONG",{});var aTt=s(Efe);xCo=r(aTt,"sew-d"),aTt.forEach(t),$Co=r(vSe," \u2014 "),wD=n(vSe,"A",{href:!0});var nTt=s(wD);kCo=r(nTt,"Wav2Vec2Processor"),nTt.forEach(t),SCo=r(vSe," (SEW-D model)"),vSe.forEach(t),RCo=i(ue),ap=n(ue,"LI",{});var FSe=s(ap);Cfe=n(FSe,"STRONG",{});var sTt=s(Cfe);PCo=r(sTt,"speech_to_text"),sTt.forEach(t),BCo=r(FSe," \u2014 "),AD=n(FSe,"A",{href:!0});var lTt=s(AD);ICo=r(lTt,"Speech2TextProcessor"),lTt.forEach(t),NCo=r(FSe," (Speech2Text model)"),FSe.forEach(t),qCo=i(ue),np=n(ue,"LI",{});var TSe=s(np);wfe=n(TSe,"STRONG",{});var iTt=s(wfe);jCo=r(iTt,"speech_to_text_2"),iTt.forEach(t),DCo=r(TSe," \u2014 "),LD=n(TSe,"A",{href:!0});var dTt=s(LD);GCo=r(dTt,"Speech2Text2Processor"),dTt.forEach(t),OCo=r(TSe," (Speech2Text2 model)"),TSe.forEach(t),VCo=i(ue),sp=n(ue,"LI",{});var MSe=s(sp);Afe=n(MSe,"STRONG",{});var cTt=s(Afe);XCo=r(cTt,"trocr"),cTt.forEach(t),zCo=r(MSe," \u2014 "),yD=n(MSe,"A",{href:!0});var mTt=s(yD);WCo=r(mTt,"TrOCRProcessor"),mTt.forEach(t),QCo=r(MSe," (TrOCR model)"),MSe.forEach(t),UCo=i(ue),lp=n(ue,"LI",{});var ESe=s(lp);Lfe=n(ESe,"STRONG",{});var fTt=s(Lfe);HCo=r(fTt,"unispeech"),fTt.forEach(t),JCo=r(ESe," \u2014 "),xD=n(ESe,"A",{href:!0});var gTt=s(xD);YCo=r(gTt,"Wav2Vec2Processor"),gTt.forEach(t),KCo=r(ESe," (UniSpeech model)"),ESe.forEach(t),ZCo=i(ue),ip=n(ue,"LI",{});var CSe=s(ip);yfe=n(CSe,"STRONG",{});var hTt=s(yfe);e3o=r(hTt,"unispeech-sat"),hTt.forEach(t),o3o=r(CSe," \u2014 "),$D=n(CSe,"A",{href:!0});var uTt=s($D);r3o=r(uTt,"Wav2Vec2Processor"),uTt.forEach(t),t3o=r(CSe," (UniSpeechSat model)"),CSe.forEach(t),a3o=i(ue),dp=n(ue,"LI",{});var wSe=s(dp);xfe=n(wSe,"STRONG",{});var pTt=s(xfe);n3o=r(pTt,"vilt"),pTt.forEach(t),s3o=r(wSe," \u2014 "),kD=n(wSe,"A",{href:!0});var _Tt=s(kD);l3o=r(_Tt,"ViltProcessor"),_Tt.forEach(t),i3o=r(wSe," (ViLT model)"),wSe.forEach(t),d3o=i(ue),cp=n(ue,"LI",{});var ASe=s(cp);$fe=n(ASe,"STRONG",{});var bTt=s($fe);c3o=r(bTt,"vision-text-dual-encoder"),bTt.forEach(t),m3o=r(ASe," \u2014 "),SD=n(ASe,"A",{href:!0});var vTt=s(SD);f3o=r(vTt,"VisionTextDualEncoderProcessor"),vTt.forEach(t),g3o=r(ASe," (VisionTextDualEncoder model)"),ASe.forEach(t),h3o=i(ue),mp=n(ue,"LI",{});var LSe=s(mp);kfe=n(LSe,"STRONG",{});var FTt=s(kfe);u3o=r(FTt,"wav2vec2"),FTt.forEach(t),p3o=r(LSe," \u2014 "),RD=n(LSe,"A",{href:!0});var TTt=s(RD);_3o=r(TTt,"Wav2Vec2Processor"),TTt.forEach(t),b3o=r(LSe," (Wav2Vec2 model)"),LSe.forEach(t),v3o=i(ue),fp=n(ue,"LI",{});var ySe=s(fp);Sfe=n(ySe,"STRONG",{});var MTt=s(Sfe);F3o=r(MTt,"wav2vec2-conformer"),MTt.forEach(t),T3o=r(ySe," \u2014 "),PD=n(ySe,"A",{href:!0});var ETt=s(PD);M3o=r(ETt,"Wav2Vec2Processor"),ETt.forEach(t),E3o=r(ySe," (Wav2Vec2-Conformer model)"),ySe.forEach(t),C3o=i(ue),gp=n(ue,"LI",{});var xSe=s(gp);Rfe=n(xSe,"STRONG",{});var CTt=s(Rfe);w3o=r(CTt,"wavlm"),CTt.forEach(t),A3o=r(xSe," \u2014 "),BD=n(xSe,"A",{href:!0});var wTt=s(BD);L3o=r(wTt,"Wav2Vec2Processor"),wTt.forEach(t),y3o=r(xSe," (WavLM model)"),xSe.forEach(t),ue.forEach(t),x3o=i(fa),T(hp.$$.fragment,fa),$3o=i(fa),T(up.$$.fragment,fa),fa.forEach(t),k3o=i(gl),pp=n(gl,"DIV",{class:!0});var SJe=s(pp);T(X8.$$.fragment,SJe),S3o=i(SJe),Pfe=n(SJe,"P",{});var ATt=s(Pfe);R3o=r(ATt,"Register a new processor for this class."),ATt.forEach(t),SJe.forEach(t),gl.forEach(t),EUe=i(m),rd=n(m,"H2",{class:!0});var RJe=s(rd);_p=n(RJe,"A",{id:!0,class:!0,href:!0});var LTt=s(_p);Bfe=n(LTt,"SPAN",{});var yTt=s(Bfe);T(z8.$$.fragment,yTt),yTt.forEach(t),LTt.forEach(t),P3o=i(RJe),Ife=n(RJe,"SPAN",{});var xTt=s(Ife);B3o=r(xTt,"AutoModel"),xTt.forEach(t),RJe.forEach(t),CUe=i(m),So=n(m,"DIV",{class:!0});var hl=s(So);T(W8.$$.fragment,hl),I3o=i(hl),td=n(hl,"P",{});var Kae=s(td);N3o=r(Kae,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),ID=n(Kae,"A",{href:!0});var $Tt=s(ID);q3o=r($Tt,"from_pretrained()"),$Tt.forEach(t),j3o=r(Kae," class method or the "),ND=n(Kae,"A",{href:!0});var kTt=s(ND);D3o=r(kTt,"from_config()"),kTt.forEach(t),G3o=r(Kae,` class
method.`),Kae.forEach(t),O3o=i(hl),Q8=n(hl,"P",{});var PJe=s(Q8);V3o=r(PJe,"This class cannot be instantiated directly using "),Nfe=n(PJe,"CODE",{});var STt=s(Nfe);X3o=r(STt,"__init__()"),STt.forEach(t),z3o=r(PJe," (throws an error)."),PJe.forEach(t),W3o=i(hl),ft=n(hl,"DIV",{class:!0});var bL=s(ft);T(U8.$$.fragment,bL),Q3o=i(bL),qfe=n(bL,"P",{});var RTt=s(qfe);U3o=r(RTt,"Instantiates one of the base model classes of the library from a configuration."),RTt.forEach(t),H3o=i(bL),ad=n(bL,"P",{});var Zae=s(ad);J3o=r(Zae,`Note:
Loading a model from its configuration file does `),jfe=n(Zae,"STRONG",{});var PTt=s(jfe);Y3o=r(PTt,"not"),PTt.forEach(t),K3o=r(Zae,` load the model weights. It only affects the
model\u2019s configuration. Use `),qD=n(Zae,"A",{href:!0});var BTt=s(qD);Z3o=r(BTt,"from_pretrained()"),BTt.forEach(t),e5o=r(Zae," to load the model weights."),Zae.forEach(t),o5o=i(bL),T(bp.$$.fragment,bL),bL.forEach(t),r5o=i(hl),Ye=n(hl,"DIV",{class:!0});var ga=s(Ye);T(H8.$$.fragment,ga),t5o=i(ga),Dfe=n(ga,"P",{});var ITt=s(Dfe);a5o=r(ITt,"Instantiate one of the base model classes of the library from a pretrained model."),ITt.forEach(t),n5o=i(ga),Va=n(ga,"P",{});var vL=s(Va);s5o=r(vL,"The model class to instantiate is selected based on the "),Gfe=n(vL,"CODE",{});var NTt=s(Gfe);l5o=r(NTt,"model_type"),NTt.forEach(t),i5o=r(vL,` property of the config object (either
passed as an argument or loaded from `),Ofe=n(vL,"CODE",{});var qTt=s(Ofe);d5o=r(qTt,"pretrained_model_name_or_path"),qTt.forEach(t),c5o=r(vL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vfe=n(vL,"CODE",{});var jTt=s(Vfe);m5o=r(jTt,"pretrained_model_name_or_path"),jTt.forEach(t),f5o=r(vL,":"),vL.forEach(t),g5o=i(ga),y=n(ga,"UL",{});var x=s(y);vp=n(x,"LI",{});var $Se=s(vp);Xfe=n($Se,"STRONG",{});var DTt=s(Xfe);h5o=r(DTt,"albert"),DTt.forEach(t),u5o=r($Se," \u2014 "),jD=n($Se,"A",{href:!0});var GTt=s(jD);p5o=r(GTt,"AlbertModel"),GTt.forEach(t),_5o=r($Se," (ALBERT model)"),$Se.forEach(t),b5o=i(x),Fp=n(x,"LI",{});var kSe=s(Fp);zfe=n(kSe,"STRONG",{});var OTt=s(zfe);v5o=r(OTt,"bart"),OTt.forEach(t),F5o=r(kSe," \u2014 "),DD=n(kSe,"A",{href:!0});var VTt=s(DD);T5o=r(VTt,"BartModel"),VTt.forEach(t),M5o=r(kSe," (BART model)"),kSe.forEach(t),E5o=i(x),Tp=n(x,"LI",{});var SSe=s(Tp);Wfe=n(SSe,"STRONG",{});var XTt=s(Wfe);C5o=r(XTt,"beit"),XTt.forEach(t),w5o=r(SSe," \u2014 "),GD=n(SSe,"A",{href:!0});var zTt=s(GD);A5o=r(zTt,"BeitModel"),zTt.forEach(t),L5o=r(SSe," (BEiT model)"),SSe.forEach(t),y5o=i(x),Mp=n(x,"LI",{});var RSe=s(Mp);Qfe=n(RSe,"STRONG",{});var WTt=s(Qfe);x5o=r(WTt,"bert"),WTt.forEach(t),$5o=r(RSe," \u2014 "),OD=n(RSe,"A",{href:!0});var QTt=s(OD);k5o=r(QTt,"BertModel"),QTt.forEach(t),S5o=r(RSe," (BERT model)"),RSe.forEach(t),R5o=i(x),Ep=n(x,"LI",{});var PSe=s(Ep);Ufe=n(PSe,"STRONG",{});var UTt=s(Ufe);P5o=r(UTt,"bert-generation"),UTt.forEach(t),B5o=r(PSe," \u2014 "),VD=n(PSe,"A",{href:!0});var HTt=s(VD);I5o=r(HTt,"BertGenerationEncoder"),HTt.forEach(t),N5o=r(PSe," (Bert Generation model)"),PSe.forEach(t),q5o=i(x),Cp=n(x,"LI",{});var BSe=s(Cp);Hfe=n(BSe,"STRONG",{});var JTt=s(Hfe);j5o=r(JTt,"big_bird"),JTt.forEach(t),D5o=r(BSe," \u2014 "),XD=n(BSe,"A",{href:!0});var YTt=s(XD);G5o=r(YTt,"BigBirdModel"),YTt.forEach(t),O5o=r(BSe," (BigBird model)"),BSe.forEach(t),V5o=i(x),wp=n(x,"LI",{});var ISe=s(wp);Jfe=n(ISe,"STRONG",{});var KTt=s(Jfe);X5o=r(KTt,"bigbird_pegasus"),KTt.forEach(t),z5o=r(ISe," \u2014 "),zD=n(ISe,"A",{href:!0});var ZTt=s(zD);W5o=r(ZTt,"BigBirdPegasusModel"),ZTt.forEach(t),Q5o=r(ISe," (BigBird-Pegasus model)"),ISe.forEach(t),U5o=i(x),Ap=n(x,"LI",{});var NSe=s(Ap);Yfe=n(NSe,"STRONG",{});var eMt=s(Yfe);H5o=r(eMt,"blenderbot"),eMt.forEach(t),J5o=r(NSe," \u2014 "),WD=n(NSe,"A",{href:!0});var oMt=s(WD);Y5o=r(oMt,"BlenderbotModel"),oMt.forEach(t),K5o=r(NSe," (Blenderbot model)"),NSe.forEach(t),Z5o=i(x),Lp=n(x,"LI",{});var qSe=s(Lp);Kfe=n(qSe,"STRONG",{});var rMt=s(Kfe);e0o=r(rMt,"blenderbot-small"),rMt.forEach(t),o0o=r(qSe," \u2014 "),QD=n(qSe,"A",{href:!0});var tMt=s(QD);r0o=r(tMt,"BlenderbotSmallModel"),tMt.forEach(t),t0o=r(qSe," (BlenderbotSmall model)"),qSe.forEach(t),a0o=i(x),yp=n(x,"LI",{});var jSe=s(yp);Zfe=n(jSe,"STRONG",{});var aMt=s(Zfe);n0o=r(aMt,"bloom"),aMt.forEach(t),s0o=r(jSe," \u2014 "),UD=n(jSe,"A",{href:!0});var nMt=s(UD);l0o=r(nMt,"BloomModel"),nMt.forEach(t),i0o=r(jSe," (BLOOM model)"),jSe.forEach(t),d0o=i(x),xp=n(x,"LI",{});var DSe=s(xp);ege=n(DSe,"STRONG",{});var sMt=s(ege);c0o=r(sMt,"camembert"),sMt.forEach(t),m0o=r(DSe," \u2014 "),HD=n(DSe,"A",{href:!0});var lMt=s(HD);f0o=r(lMt,"CamembertModel"),lMt.forEach(t),g0o=r(DSe," (CamemBERT model)"),DSe.forEach(t),h0o=i(x),$p=n(x,"LI",{});var GSe=s($p);oge=n(GSe,"STRONG",{});var iMt=s(oge);u0o=r(iMt,"canine"),iMt.forEach(t),p0o=r(GSe," \u2014 "),JD=n(GSe,"A",{href:!0});var dMt=s(JD);_0o=r(dMt,"CanineModel"),dMt.forEach(t),b0o=r(GSe," (CANINE model)"),GSe.forEach(t),v0o=i(x),kp=n(x,"LI",{});var OSe=s(kp);rge=n(OSe,"STRONG",{});var cMt=s(rge);F0o=r(cMt,"clip"),cMt.forEach(t),T0o=r(OSe," \u2014 "),YD=n(OSe,"A",{href:!0});var mMt=s(YD);M0o=r(mMt,"CLIPModel"),mMt.forEach(t),E0o=r(OSe," (CLIP model)"),OSe.forEach(t),C0o=i(x),Sp=n(x,"LI",{});var VSe=s(Sp);tge=n(VSe,"STRONG",{});var fMt=s(tge);w0o=r(fMt,"codegen"),fMt.forEach(t),A0o=r(VSe," \u2014 "),KD=n(VSe,"A",{href:!0});var gMt=s(KD);L0o=r(gMt,"CodeGenModel"),gMt.forEach(t),y0o=r(VSe," (CodeGen model)"),VSe.forEach(t),x0o=i(x),Rp=n(x,"LI",{});var XSe=s(Rp);age=n(XSe,"STRONG",{});var hMt=s(age);$0o=r(hMt,"convbert"),hMt.forEach(t),k0o=r(XSe," \u2014 "),ZD=n(XSe,"A",{href:!0});var uMt=s(ZD);S0o=r(uMt,"ConvBertModel"),uMt.forEach(t),R0o=r(XSe," (ConvBERT model)"),XSe.forEach(t),P0o=i(x),Pp=n(x,"LI",{});var zSe=s(Pp);nge=n(zSe,"STRONG",{});var pMt=s(nge);B0o=r(pMt,"convnext"),pMt.forEach(t),I0o=r(zSe," \u2014 "),eG=n(zSe,"A",{href:!0});var _Mt=s(eG);N0o=r(_Mt,"ConvNextModel"),_Mt.forEach(t),q0o=r(zSe," (ConvNeXT model)"),zSe.forEach(t),j0o=i(x),Bp=n(x,"LI",{});var WSe=s(Bp);sge=n(WSe,"STRONG",{});var bMt=s(sge);D0o=r(bMt,"ctrl"),bMt.forEach(t),G0o=r(WSe," \u2014 "),oG=n(WSe,"A",{href:!0});var vMt=s(oG);O0o=r(vMt,"CTRLModel"),vMt.forEach(t),V0o=r(WSe," (CTRL model)"),WSe.forEach(t),X0o=i(x),Ip=n(x,"LI",{});var QSe=s(Ip);lge=n(QSe,"STRONG",{});var FMt=s(lge);z0o=r(FMt,"cvt"),FMt.forEach(t),W0o=r(QSe," \u2014 "),rG=n(QSe,"A",{href:!0});var TMt=s(rG);Q0o=r(TMt,"CvtModel"),TMt.forEach(t),U0o=r(QSe," (CvT model)"),QSe.forEach(t),H0o=i(x),Np=n(x,"LI",{});var USe=s(Np);ige=n(USe,"STRONG",{});var MMt=s(ige);J0o=r(MMt,"data2vec-audio"),MMt.forEach(t),Y0o=r(USe," \u2014 "),tG=n(USe,"A",{href:!0});var EMt=s(tG);K0o=r(EMt,"Data2VecAudioModel"),EMt.forEach(t),Z0o=r(USe," (Data2VecAudio model)"),USe.forEach(t),ewo=i(x),qp=n(x,"LI",{});var HSe=s(qp);dge=n(HSe,"STRONG",{});var CMt=s(dge);owo=r(CMt,"data2vec-text"),CMt.forEach(t),rwo=r(HSe," \u2014 "),aG=n(HSe,"A",{href:!0});var wMt=s(aG);two=r(wMt,"Data2VecTextModel"),wMt.forEach(t),awo=r(HSe," (Data2VecText model)"),HSe.forEach(t),nwo=i(x),jp=n(x,"LI",{});var JSe=s(jp);cge=n(JSe,"STRONG",{});var AMt=s(cge);swo=r(AMt,"data2vec-vision"),AMt.forEach(t),lwo=r(JSe," \u2014 "),nG=n(JSe,"A",{href:!0});var LMt=s(nG);iwo=r(LMt,"Data2VecVisionModel"),LMt.forEach(t),dwo=r(JSe," (Data2VecVision model)"),JSe.forEach(t),cwo=i(x),Dp=n(x,"LI",{});var YSe=s(Dp);mge=n(YSe,"STRONG",{});var yMt=s(mge);mwo=r(yMt,"deberta"),yMt.forEach(t),fwo=r(YSe," \u2014 "),sG=n(YSe,"A",{href:!0});var xMt=s(sG);gwo=r(xMt,"DebertaModel"),xMt.forEach(t),hwo=r(YSe," (DeBERTa model)"),YSe.forEach(t),uwo=i(x),Gp=n(x,"LI",{});var KSe=s(Gp);fge=n(KSe,"STRONG",{});var $Mt=s(fge);pwo=r($Mt,"deberta-v2"),$Mt.forEach(t),_wo=r(KSe," \u2014 "),lG=n(KSe,"A",{href:!0});var kMt=s(lG);bwo=r(kMt,"DebertaV2Model"),kMt.forEach(t),vwo=r(KSe," (DeBERTa-v2 model)"),KSe.forEach(t),Fwo=i(x),Op=n(x,"LI",{});var ZSe=s(Op);gge=n(ZSe,"STRONG",{});var SMt=s(gge);Two=r(SMt,"decision_transformer"),SMt.forEach(t),Mwo=r(ZSe," \u2014 "),iG=n(ZSe,"A",{href:!0});var RMt=s(iG);Ewo=r(RMt,"DecisionTransformerModel"),RMt.forEach(t),Cwo=r(ZSe," (Decision Transformer model)"),ZSe.forEach(t),wwo=i(x),Vp=n(x,"LI",{});var eRe=s(Vp);hge=n(eRe,"STRONG",{});var PMt=s(hge);Awo=r(PMt,"deit"),PMt.forEach(t),Lwo=r(eRe," \u2014 "),dG=n(eRe,"A",{href:!0});var BMt=s(dG);ywo=r(BMt,"DeiTModel"),BMt.forEach(t),xwo=r(eRe," (DeiT model)"),eRe.forEach(t),$wo=i(x),Xp=n(x,"LI",{});var oRe=s(Xp);uge=n(oRe,"STRONG",{});var IMt=s(uge);kwo=r(IMt,"detr"),IMt.forEach(t),Swo=r(oRe," \u2014 "),cG=n(oRe,"A",{href:!0});var NMt=s(cG);Rwo=r(NMt,"DetrModel"),NMt.forEach(t),Pwo=r(oRe," (DETR model)"),oRe.forEach(t),Bwo=i(x),zp=n(x,"LI",{});var rRe=s(zp);pge=n(rRe,"STRONG",{});var qMt=s(pge);Iwo=r(qMt,"distilbert"),qMt.forEach(t),Nwo=r(rRe," \u2014 "),mG=n(rRe,"A",{href:!0});var jMt=s(mG);qwo=r(jMt,"DistilBertModel"),jMt.forEach(t),jwo=r(rRe," (DistilBERT model)"),rRe.forEach(t),Dwo=i(x),Wp=n(x,"LI",{});var tRe=s(Wp);_ge=n(tRe,"STRONG",{});var DMt=s(_ge);Gwo=r(DMt,"donut-swin"),DMt.forEach(t),Owo=r(tRe," \u2014 "),fG=n(tRe,"A",{href:!0});var GMt=s(fG);Vwo=r(GMt,"DonutSwinModel"),GMt.forEach(t),Xwo=r(tRe," (DonutSwin model)"),tRe.forEach(t),zwo=i(x),Qp=n(x,"LI",{});var aRe=s(Qp);bge=n(aRe,"STRONG",{});var OMt=s(bge);Wwo=r(OMt,"dpr"),OMt.forEach(t),Qwo=r(aRe," \u2014 "),gG=n(aRe,"A",{href:!0});var VMt=s(gG);Uwo=r(VMt,"DPRQuestionEncoder"),VMt.forEach(t),Hwo=r(aRe," (DPR model)"),aRe.forEach(t),Jwo=i(x),Up=n(x,"LI",{});var nRe=s(Up);vge=n(nRe,"STRONG",{});var XMt=s(vge);Ywo=r(XMt,"dpt"),XMt.forEach(t),Kwo=r(nRe," \u2014 "),hG=n(nRe,"A",{href:!0});var zMt=s(hG);Zwo=r(zMt,"DPTModel"),zMt.forEach(t),e6o=r(nRe," (DPT model)"),nRe.forEach(t),o6o=i(x),Hp=n(x,"LI",{});var sRe=s(Hp);Fge=n(sRe,"STRONG",{});var WMt=s(Fge);r6o=r(WMt,"electra"),WMt.forEach(t),t6o=r(sRe," \u2014 "),uG=n(sRe,"A",{href:!0});var QMt=s(uG);a6o=r(QMt,"ElectraModel"),QMt.forEach(t),n6o=r(sRe," (ELECTRA model)"),sRe.forEach(t),s6o=i(x),Jp=n(x,"LI",{});var lRe=s(Jp);Tge=n(lRe,"STRONG",{});var UMt=s(Tge);l6o=r(UMt,"flaubert"),UMt.forEach(t),i6o=r(lRe," \u2014 "),pG=n(lRe,"A",{href:!0});var HMt=s(pG);d6o=r(HMt,"FlaubertModel"),HMt.forEach(t),c6o=r(lRe," (FlauBERT model)"),lRe.forEach(t),m6o=i(x),Yp=n(x,"LI",{});var iRe=s(Yp);Mge=n(iRe,"STRONG",{});var JMt=s(Mge);f6o=r(JMt,"flava"),JMt.forEach(t),g6o=r(iRe," \u2014 "),_G=n(iRe,"A",{href:!0});var YMt=s(_G);h6o=r(YMt,"FlavaModel"),YMt.forEach(t),u6o=r(iRe," (FLAVA model)"),iRe.forEach(t),p6o=i(x),Kp=n(x,"LI",{});var dRe=s(Kp);Ege=n(dRe,"STRONG",{});var KMt=s(Ege);_6o=r(KMt,"fnet"),KMt.forEach(t),b6o=r(dRe," \u2014 "),bG=n(dRe,"A",{href:!0});var ZMt=s(bG);v6o=r(ZMt,"FNetModel"),ZMt.forEach(t),F6o=r(dRe," (FNet model)"),dRe.forEach(t),T6o=i(x),Zp=n(x,"LI",{});var cRe=s(Zp);Cge=n(cRe,"STRONG",{});var eEt=s(Cge);M6o=r(eEt,"fsmt"),eEt.forEach(t),E6o=r(cRe," \u2014 "),vG=n(cRe,"A",{href:!0});var oEt=s(vG);C6o=r(oEt,"FSMTModel"),oEt.forEach(t),w6o=r(cRe," (FairSeq Machine-Translation model)"),cRe.forEach(t),A6o=i(x),nl=n(x,"LI",{});var aP=s(nl);wge=n(aP,"STRONG",{});var rEt=s(wge);L6o=r(rEt,"funnel"),rEt.forEach(t),y6o=r(aP," \u2014 "),FG=n(aP,"A",{href:!0});var tEt=s(FG);x6o=r(tEt,"FunnelModel"),tEt.forEach(t),$6o=r(aP," or "),TG=n(aP,"A",{href:!0});var aEt=s(TG);k6o=r(aEt,"FunnelBaseModel"),aEt.forEach(t),S6o=r(aP," (Funnel Transformer model)"),aP.forEach(t),R6o=i(x),e_=n(x,"LI",{});var mRe=s(e_);Age=n(mRe,"STRONG",{});var nEt=s(Age);P6o=r(nEt,"glpn"),nEt.forEach(t),B6o=r(mRe," \u2014 "),MG=n(mRe,"A",{href:!0});var sEt=s(MG);I6o=r(sEt,"GLPNModel"),sEt.forEach(t),N6o=r(mRe," (GLPN model)"),mRe.forEach(t),q6o=i(x),o_=n(x,"LI",{});var fRe=s(o_);Lge=n(fRe,"STRONG",{});var lEt=s(Lge);j6o=r(lEt,"gpt2"),lEt.forEach(t),D6o=r(fRe," \u2014 "),EG=n(fRe,"A",{href:!0});var iEt=s(EG);G6o=r(iEt,"GPT2Model"),iEt.forEach(t),O6o=r(fRe," (OpenAI GPT-2 model)"),fRe.forEach(t),V6o=i(x),r_=n(x,"LI",{});var gRe=s(r_);yge=n(gRe,"STRONG",{});var dEt=s(yge);X6o=r(dEt,"gpt_neo"),dEt.forEach(t),z6o=r(gRe," \u2014 "),CG=n(gRe,"A",{href:!0});var cEt=s(CG);W6o=r(cEt,"GPTNeoModel"),cEt.forEach(t),Q6o=r(gRe," (GPT Neo model)"),gRe.forEach(t),U6o=i(x),t_=n(x,"LI",{});var hRe=s(t_);xge=n(hRe,"STRONG",{});var mEt=s(xge);H6o=r(mEt,"gpt_neox"),mEt.forEach(t),J6o=r(hRe," \u2014 "),wG=n(hRe,"A",{href:!0});var fEt=s(wG);Y6o=r(fEt,"GPTNeoXModel"),fEt.forEach(t),K6o=r(hRe," (GPT NeoX model)"),hRe.forEach(t),Z6o=i(x),a_=n(x,"LI",{});var uRe=s(a_);$ge=n(uRe,"STRONG",{});var gEt=s($ge);eAo=r(gEt,"gptj"),gEt.forEach(t),oAo=r(uRe," \u2014 "),AG=n(uRe,"A",{href:!0});var hEt=s(AG);rAo=r(hEt,"GPTJModel"),hEt.forEach(t),tAo=r(uRe," (GPT-J model)"),uRe.forEach(t),aAo=i(x),n_=n(x,"LI",{});var pRe=s(n_);kge=n(pRe,"STRONG",{});var uEt=s(kge);nAo=r(uEt,"groupvit"),uEt.forEach(t),sAo=r(pRe," \u2014 "),LG=n(pRe,"A",{href:!0});var pEt=s(LG);lAo=r(pEt,"GroupViTModel"),pEt.forEach(t),iAo=r(pRe," (GroupViT model)"),pRe.forEach(t),dAo=i(x),s_=n(x,"LI",{});var _Re=s(s_);Sge=n(_Re,"STRONG",{});var _Et=s(Sge);cAo=r(_Et,"hubert"),_Et.forEach(t),mAo=r(_Re," \u2014 "),yG=n(_Re,"A",{href:!0});var bEt=s(yG);fAo=r(bEt,"HubertModel"),bEt.forEach(t),gAo=r(_Re," (Hubert model)"),_Re.forEach(t),hAo=i(x),l_=n(x,"LI",{});var bRe=s(l_);Rge=n(bRe,"STRONG",{});var vEt=s(Rge);uAo=r(vEt,"ibert"),vEt.forEach(t),pAo=r(bRe," \u2014 "),xG=n(bRe,"A",{href:!0});var FEt=s(xG);_Ao=r(FEt,"IBertModel"),FEt.forEach(t),bAo=r(bRe," (I-BERT model)"),bRe.forEach(t),vAo=i(x),i_=n(x,"LI",{});var vRe=s(i_);Pge=n(vRe,"STRONG",{});var TEt=s(Pge);FAo=r(TEt,"imagegpt"),TEt.forEach(t),TAo=r(vRe," \u2014 "),$G=n(vRe,"A",{href:!0});var MEt=s($G);MAo=r(MEt,"ImageGPTModel"),MEt.forEach(t),EAo=r(vRe," (ImageGPT model)"),vRe.forEach(t),CAo=i(x),d_=n(x,"LI",{});var FRe=s(d_);Bge=n(FRe,"STRONG",{});var EEt=s(Bge);wAo=r(EEt,"layoutlm"),EEt.forEach(t),AAo=r(FRe," \u2014 "),kG=n(FRe,"A",{href:!0});var CEt=s(kG);LAo=r(CEt,"LayoutLMModel"),CEt.forEach(t),yAo=r(FRe," (LayoutLM model)"),FRe.forEach(t),xAo=i(x),c_=n(x,"LI",{});var TRe=s(c_);Ige=n(TRe,"STRONG",{});var wEt=s(Ige);$Ao=r(wEt,"layoutlmv2"),wEt.forEach(t),kAo=r(TRe," \u2014 "),SG=n(TRe,"A",{href:!0});var AEt=s(SG);SAo=r(AEt,"LayoutLMv2Model"),AEt.forEach(t),RAo=r(TRe," (LayoutLMv2 model)"),TRe.forEach(t),PAo=i(x),m_=n(x,"LI",{});var MRe=s(m_);Nge=n(MRe,"STRONG",{});var LEt=s(Nge);BAo=r(LEt,"layoutlmv3"),LEt.forEach(t),IAo=r(MRe," \u2014 "),RG=n(MRe,"A",{href:!0});var yEt=s(RG);NAo=r(yEt,"LayoutLMv3Model"),yEt.forEach(t),qAo=r(MRe," (LayoutLMv3 model)"),MRe.forEach(t),jAo=i(x),f_=n(x,"LI",{});var ERe=s(f_);qge=n(ERe,"STRONG",{});var xEt=s(qge);DAo=r(xEt,"led"),xEt.forEach(t),GAo=r(ERe," \u2014 "),PG=n(ERe,"A",{href:!0});var $Et=s(PG);OAo=r($Et,"LEDModel"),$Et.forEach(t),VAo=r(ERe," (LED model)"),ERe.forEach(t),XAo=i(x),g_=n(x,"LI",{});var CRe=s(g_);jge=n(CRe,"STRONG",{});var kEt=s(jge);zAo=r(kEt,"levit"),kEt.forEach(t),WAo=r(CRe," \u2014 "),BG=n(CRe,"A",{href:!0});var SEt=s(BG);QAo=r(SEt,"LevitModel"),SEt.forEach(t),UAo=r(CRe," (LeViT model)"),CRe.forEach(t),HAo=i(x),h_=n(x,"LI",{});var wRe=s(h_);Dge=n(wRe,"STRONG",{});var REt=s(Dge);JAo=r(REt,"longformer"),REt.forEach(t),YAo=r(wRe," \u2014 "),IG=n(wRe,"A",{href:!0});var PEt=s(IG);KAo=r(PEt,"LongformerModel"),PEt.forEach(t),ZAo=r(wRe," (Longformer model)"),wRe.forEach(t),e7o=i(x),u_=n(x,"LI",{});var ARe=s(u_);Gge=n(ARe,"STRONG",{});var BEt=s(Gge);o7o=r(BEt,"longt5"),BEt.forEach(t),r7o=r(ARe," \u2014 "),NG=n(ARe,"A",{href:!0});var IEt=s(NG);t7o=r(IEt,"LongT5Model"),IEt.forEach(t),a7o=r(ARe," (LongT5 model)"),ARe.forEach(t),n7o=i(x),p_=n(x,"LI",{});var LRe=s(p_);Oge=n(LRe,"STRONG",{});var NEt=s(Oge);s7o=r(NEt,"luke"),NEt.forEach(t),l7o=r(LRe," \u2014 "),qG=n(LRe,"A",{href:!0});var qEt=s(qG);i7o=r(qEt,"LukeModel"),qEt.forEach(t),d7o=r(LRe," (LUKE model)"),LRe.forEach(t),c7o=i(x),__=n(x,"LI",{});var yRe=s(__);Vge=n(yRe,"STRONG",{});var jEt=s(Vge);m7o=r(jEt,"lxmert"),jEt.forEach(t),f7o=r(yRe," \u2014 "),jG=n(yRe,"A",{href:!0});var DEt=s(jG);g7o=r(DEt,"LxmertModel"),DEt.forEach(t),h7o=r(yRe," (LXMERT model)"),yRe.forEach(t),u7o=i(x),b_=n(x,"LI",{});var xRe=s(b_);Xge=n(xRe,"STRONG",{});var GEt=s(Xge);p7o=r(GEt,"m2m_100"),GEt.forEach(t),_7o=r(xRe," \u2014 "),DG=n(xRe,"A",{href:!0});var OEt=s(DG);b7o=r(OEt,"M2M100Model"),OEt.forEach(t),v7o=r(xRe," (M2M100 model)"),xRe.forEach(t),F7o=i(x),v_=n(x,"LI",{});var $Re=s(v_);zge=n($Re,"STRONG",{});var VEt=s(zge);T7o=r(VEt,"marian"),VEt.forEach(t),M7o=r($Re," \u2014 "),GG=n($Re,"A",{href:!0});var XEt=s(GG);E7o=r(XEt,"MarianModel"),XEt.forEach(t),C7o=r($Re," (Marian model)"),$Re.forEach(t),w7o=i(x),F_=n(x,"LI",{});var kRe=s(F_);Wge=n(kRe,"STRONG",{});var zEt=s(Wge);A7o=r(zEt,"maskformer"),zEt.forEach(t),L7o=r(kRe," \u2014 "),OG=n(kRe,"A",{href:!0});var WEt=s(OG);y7o=r(WEt,"MaskFormerModel"),WEt.forEach(t),x7o=r(kRe," (MaskFormer model)"),kRe.forEach(t),$7o=i(x),T_=n(x,"LI",{});var SRe=s(T_);Qge=n(SRe,"STRONG",{});var QEt=s(Qge);k7o=r(QEt,"mbart"),QEt.forEach(t),S7o=r(SRe," \u2014 "),VG=n(SRe,"A",{href:!0});var UEt=s(VG);R7o=r(UEt,"MBartModel"),UEt.forEach(t),P7o=r(SRe," (mBART model)"),SRe.forEach(t),B7o=i(x),M_=n(x,"LI",{});var RRe=s(M_);Uge=n(RRe,"STRONG",{});var HEt=s(Uge);I7o=r(HEt,"mctct"),HEt.forEach(t),N7o=r(RRe," \u2014 "),XG=n(RRe,"A",{href:!0});var JEt=s(XG);q7o=r(JEt,"MCTCTModel"),JEt.forEach(t),j7o=r(RRe," (M-CTC-T model)"),RRe.forEach(t),D7o=i(x),E_=n(x,"LI",{});var PRe=s(E_);Hge=n(PRe,"STRONG",{});var YEt=s(Hge);G7o=r(YEt,"megatron-bert"),YEt.forEach(t),O7o=r(PRe," \u2014 "),zG=n(PRe,"A",{href:!0});var KEt=s(zG);V7o=r(KEt,"MegatronBertModel"),KEt.forEach(t),X7o=r(PRe," (Megatron-BERT model)"),PRe.forEach(t),z7o=i(x),C_=n(x,"LI",{});var BRe=s(C_);Jge=n(BRe,"STRONG",{});var ZEt=s(Jge);W7o=r(ZEt,"mobilebert"),ZEt.forEach(t),Q7o=r(BRe," \u2014 "),WG=n(BRe,"A",{href:!0});var e4t=s(WG);U7o=r(e4t,"MobileBertModel"),e4t.forEach(t),H7o=r(BRe," (MobileBERT model)"),BRe.forEach(t),J7o=i(x),w_=n(x,"LI",{});var IRe=s(w_);Yge=n(IRe,"STRONG",{});var o4t=s(Yge);Y7o=r(o4t,"mobilevit"),o4t.forEach(t),K7o=r(IRe," \u2014 "),QG=n(IRe,"A",{href:!0});var r4t=s(QG);Z7o=r(r4t,"MobileViTModel"),r4t.forEach(t),eLo=r(IRe," (MobileViT model)"),IRe.forEach(t),oLo=i(x),A_=n(x,"LI",{});var NRe=s(A_);Kge=n(NRe,"STRONG",{});var t4t=s(Kge);rLo=r(t4t,"mpnet"),t4t.forEach(t),tLo=r(NRe," \u2014 "),UG=n(NRe,"A",{href:!0});var a4t=s(UG);aLo=r(a4t,"MPNetModel"),a4t.forEach(t),nLo=r(NRe," (MPNet model)"),NRe.forEach(t),sLo=i(x),L_=n(x,"LI",{});var qRe=s(L_);Zge=n(qRe,"STRONG",{});var n4t=s(Zge);lLo=r(n4t,"mt5"),n4t.forEach(t),iLo=r(qRe," \u2014 "),HG=n(qRe,"A",{href:!0});var s4t=s(HG);dLo=r(s4t,"MT5Model"),s4t.forEach(t),cLo=r(qRe," (MT5 model)"),qRe.forEach(t),mLo=i(x),y_=n(x,"LI",{});var jRe=s(y_);ehe=n(jRe,"STRONG",{});var l4t=s(ehe);fLo=r(l4t,"mvp"),l4t.forEach(t),gLo=r(jRe," \u2014 "),JG=n(jRe,"A",{href:!0});var i4t=s(JG);hLo=r(i4t,"MvpModel"),i4t.forEach(t),uLo=r(jRe," (MVP model)"),jRe.forEach(t),pLo=i(x),x_=n(x,"LI",{});var DRe=s(x_);ohe=n(DRe,"STRONG",{});var d4t=s(ohe);_Lo=r(d4t,"nezha"),d4t.forEach(t),bLo=r(DRe," \u2014 "),YG=n(DRe,"A",{href:!0});var c4t=s(YG);vLo=r(c4t,"NezhaModel"),c4t.forEach(t),FLo=r(DRe," (Nezha model)"),DRe.forEach(t),TLo=i(x),$_=n(x,"LI",{});var GRe=s($_);rhe=n(GRe,"STRONG",{});var m4t=s(rhe);MLo=r(m4t,"nllb"),m4t.forEach(t),ELo=r(GRe," \u2014 "),KG=n(GRe,"A",{href:!0});var f4t=s(KG);CLo=r(f4t,"M2M100Model"),f4t.forEach(t),wLo=r(GRe," (NLLB model)"),GRe.forEach(t),ALo=i(x),k_=n(x,"LI",{});var ORe=s(k_);the=n(ORe,"STRONG",{});var g4t=s(the);LLo=r(g4t,"nystromformer"),g4t.forEach(t),yLo=r(ORe," \u2014 "),ZG=n(ORe,"A",{href:!0});var h4t=s(ZG);xLo=r(h4t,"NystromformerModel"),h4t.forEach(t),$Lo=r(ORe," (Nystr\xF6mformer model)"),ORe.forEach(t),kLo=i(x),S_=n(x,"LI",{});var VRe=s(S_);ahe=n(VRe,"STRONG",{});var u4t=s(ahe);SLo=r(u4t,"openai-gpt"),u4t.forEach(t),RLo=r(VRe," \u2014 "),eO=n(VRe,"A",{href:!0});var p4t=s(eO);PLo=r(p4t,"OpenAIGPTModel"),p4t.forEach(t),BLo=r(VRe," (OpenAI GPT model)"),VRe.forEach(t),ILo=i(x),R_=n(x,"LI",{});var XRe=s(R_);nhe=n(XRe,"STRONG",{});var _4t=s(nhe);NLo=r(_4t,"opt"),_4t.forEach(t),qLo=r(XRe," \u2014 "),oO=n(XRe,"A",{href:!0});var b4t=s(oO);jLo=r(b4t,"OPTModel"),b4t.forEach(t),DLo=r(XRe," (OPT model)"),XRe.forEach(t),GLo=i(x),P_=n(x,"LI",{});var zRe=s(P_);she=n(zRe,"STRONG",{});var v4t=s(she);OLo=r(v4t,"owlvit"),v4t.forEach(t),VLo=r(zRe," \u2014 "),rO=n(zRe,"A",{href:!0});var F4t=s(rO);XLo=r(F4t,"OwlViTModel"),F4t.forEach(t),zLo=r(zRe," (OWL-ViT model)"),zRe.forEach(t),WLo=i(x),B_=n(x,"LI",{});var WRe=s(B_);lhe=n(WRe,"STRONG",{});var T4t=s(lhe);QLo=r(T4t,"pegasus"),T4t.forEach(t),ULo=r(WRe," \u2014 "),tO=n(WRe,"A",{href:!0});var M4t=s(tO);HLo=r(M4t,"PegasusModel"),M4t.forEach(t),JLo=r(WRe," (Pegasus model)"),WRe.forEach(t),YLo=i(x),I_=n(x,"LI",{});var QRe=s(I_);ihe=n(QRe,"STRONG",{});var E4t=s(ihe);KLo=r(E4t,"perceiver"),E4t.forEach(t),ZLo=r(QRe," \u2014 "),aO=n(QRe,"A",{href:!0});var C4t=s(aO);eyo=r(C4t,"PerceiverModel"),C4t.forEach(t),oyo=r(QRe," (Perceiver model)"),QRe.forEach(t),ryo=i(x),N_=n(x,"LI",{});var URe=s(N_);dhe=n(URe,"STRONG",{});var w4t=s(dhe);tyo=r(w4t,"plbart"),w4t.forEach(t),ayo=r(URe," \u2014 "),nO=n(URe,"A",{href:!0});var A4t=s(nO);nyo=r(A4t,"PLBartModel"),A4t.forEach(t),syo=r(URe," (PLBart model)"),URe.forEach(t),lyo=i(x),q_=n(x,"LI",{});var HRe=s(q_);che=n(HRe,"STRONG",{});var L4t=s(che);iyo=r(L4t,"poolformer"),L4t.forEach(t),dyo=r(HRe," \u2014 "),sO=n(HRe,"A",{href:!0});var y4t=s(sO);cyo=r(y4t,"PoolFormerModel"),y4t.forEach(t),myo=r(HRe," (PoolFormer model)"),HRe.forEach(t),fyo=i(x),j_=n(x,"LI",{});var JRe=s(j_);mhe=n(JRe,"STRONG",{});var x4t=s(mhe);gyo=r(x4t,"prophetnet"),x4t.forEach(t),hyo=r(JRe," \u2014 "),lO=n(JRe,"A",{href:!0});var $4t=s(lO);uyo=r($4t,"ProphetNetModel"),$4t.forEach(t),pyo=r(JRe," (ProphetNet model)"),JRe.forEach(t),_yo=i(x),D_=n(x,"LI",{});var YRe=s(D_);fhe=n(YRe,"STRONG",{});var k4t=s(fhe);byo=r(k4t,"qdqbert"),k4t.forEach(t),vyo=r(YRe," \u2014 "),iO=n(YRe,"A",{href:!0});var S4t=s(iO);Fyo=r(S4t,"QDQBertModel"),S4t.forEach(t),Tyo=r(YRe," (QDQBert model)"),YRe.forEach(t),Myo=i(x),G_=n(x,"LI",{});var KRe=s(G_);ghe=n(KRe,"STRONG",{});var R4t=s(ghe);Eyo=r(R4t,"reformer"),R4t.forEach(t),Cyo=r(KRe," \u2014 "),dO=n(KRe,"A",{href:!0});var P4t=s(dO);wyo=r(P4t,"ReformerModel"),P4t.forEach(t),Ayo=r(KRe," (Reformer model)"),KRe.forEach(t),Lyo=i(x),O_=n(x,"LI",{});var ZRe=s(O_);hhe=n(ZRe,"STRONG",{});var B4t=s(hhe);yyo=r(B4t,"regnet"),B4t.forEach(t),xyo=r(ZRe," \u2014 "),cO=n(ZRe,"A",{href:!0});var I4t=s(cO);$yo=r(I4t,"RegNetModel"),I4t.forEach(t),kyo=r(ZRe," (RegNet model)"),ZRe.forEach(t),Syo=i(x),V_=n(x,"LI",{});var ePe=s(V_);uhe=n(ePe,"STRONG",{});var N4t=s(uhe);Ryo=r(N4t,"rembert"),N4t.forEach(t),Pyo=r(ePe," \u2014 "),mO=n(ePe,"A",{href:!0});var q4t=s(mO);Byo=r(q4t,"RemBertModel"),q4t.forEach(t),Iyo=r(ePe," (RemBERT model)"),ePe.forEach(t),Nyo=i(x),X_=n(x,"LI",{});var oPe=s(X_);phe=n(oPe,"STRONG",{});var j4t=s(phe);qyo=r(j4t,"resnet"),j4t.forEach(t),jyo=r(oPe," \u2014 "),fO=n(oPe,"A",{href:!0});var D4t=s(fO);Dyo=r(D4t,"ResNetModel"),D4t.forEach(t),Gyo=r(oPe," (ResNet model)"),oPe.forEach(t),Oyo=i(x),z_=n(x,"LI",{});var rPe=s(z_);_he=n(rPe,"STRONG",{});var G4t=s(_he);Vyo=r(G4t,"retribert"),G4t.forEach(t),Xyo=r(rPe," \u2014 "),gO=n(rPe,"A",{href:!0});var O4t=s(gO);zyo=r(O4t,"RetriBertModel"),O4t.forEach(t),Wyo=r(rPe," (RetriBERT model)"),rPe.forEach(t),Qyo=i(x),W_=n(x,"LI",{});var tPe=s(W_);bhe=n(tPe,"STRONG",{});var V4t=s(bhe);Uyo=r(V4t,"roberta"),V4t.forEach(t),Hyo=r(tPe," \u2014 "),hO=n(tPe,"A",{href:!0});var X4t=s(hO);Jyo=r(X4t,"RobertaModel"),X4t.forEach(t),Yyo=r(tPe," (RoBERTa model)"),tPe.forEach(t),Kyo=i(x),Q_=n(x,"LI",{});var aPe=s(Q_);vhe=n(aPe,"STRONG",{});var z4t=s(vhe);Zyo=r(z4t,"roformer"),z4t.forEach(t),e8o=r(aPe," \u2014 "),uO=n(aPe,"A",{href:!0});var W4t=s(uO);o8o=r(W4t,"RoFormerModel"),W4t.forEach(t),r8o=r(aPe," (RoFormer model)"),aPe.forEach(t),t8o=i(x),U_=n(x,"LI",{});var nPe=s(U_);Fhe=n(nPe,"STRONG",{});var Q4t=s(Fhe);a8o=r(Q4t,"segformer"),Q4t.forEach(t),n8o=r(nPe," \u2014 "),pO=n(nPe,"A",{href:!0});var U4t=s(pO);s8o=r(U4t,"SegformerModel"),U4t.forEach(t),l8o=r(nPe," (SegFormer model)"),nPe.forEach(t),i8o=i(x),H_=n(x,"LI",{});var sPe=s(H_);The=n(sPe,"STRONG",{});var H4t=s(The);d8o=r(H4t,"sew"),H4t.forEach(t),c8o=r(sPe," \u2014 "),_O=n(sPe,"A",{href:!0});var J4t=s(_O);m8o=r(J4t,"SEWModel"),J4t.forEach(t),f8o=r(sPe," (SEW model)"),sPe.forEach(t),g8o=i(x),J_=n(x,"LI",{});var lPe=s(J_);Mhe=n(lPe,"STRONG",{});var Y4t=s(Mhe);h8o=r(Y4t,"sew-d"),Y4t.forEach(t),u8o=r(lPe," \u2014 "),bO=n(lPe,"A",{href:!0});var K4t=s(bO);p8o=r(K4t,"SEWDModel"),K4t.forEach(t),_8o=r(lPe," (SEW-D model)"),lPe.forEach(t),b8o=i(x),Y_=n(x,"LI",{});var iPe=s(Y_);Ehe=n(iPe,"STRONG",{});var Z4t=s(Ehe);v8o=r(Z4t,"speech_to_text"),Z4t.forEach(t),F8o=r(iPe," \u2014 "),vO=n(iPe,"A",{href:!0});var eCt=s(vO);T8o=r(eCt,"Speech2TextModel"),eCt.forEach(t),M8o=r(iPe," (Speech2Text model)"),iPe.forEach(t),E8o=i(x),K_=n(x,"LI",{});var dPe=s(K_);Che=n(dPe,"STRONG",{});var oCt=s(Che);C8o=r(oCt,"splinter"),oCt.forEach(t),w8o=r(dPe," \u2014 "),FO=n(dPe,"A",{href:!0});var rCt=s(FO);A8o=r(rCt,"SplinterModel"),rCt.forEach(t),L8o=r(dPe," (Splinter model)"),dPe.forEach(t),y8o=i(x),Z_=n(x,"LI",{});var cPe=s(Z_);whe=n(cPe,"STRONG",{});var tCt=s(whe);x8o=r(tCt,"squeezebert"),tCt.forEach(t),$8o=r(cPe," \u2014 "),TO=n(cPe,"A",{href:!0});var aCt=s(TO);k8o=r(aCt,"SqueezeBertModel"),aCt.forEach(t),S8o=r(cPe," (SqueezeBERT model)"),cPe.forEach(t),R8o=i(x),e2=n(x,"LI",{});var mPe=s(e2);Ahe=n(mPe,"STRONG",{});var nCt=s(Ahe);P8o=r(nCt,"swin"),nCt.forEach(t),B8o=r(mPe," \u2014 "),MO=n(mPe,"A",{href:!0});var sCt=s(MO);I8o=r(sCt,"SwinModel"),sCt.forEach(t),N8o=r(mPe," (Swin Transformer model)"),mPe.forEach(t),q8o=i(x),o2=n(x,"LI",{});var fPe=s(o2);Lhe=n(fPe,"STRONG",{});var lCt=s(Lhe);j8o=r(lCt,"swinv2"),lCt.forEach(t),D8o=r(fPe," \u2014 "),EO=n(fPe,"A",{href:!0});var iCt=s(EO);G8o=r(iCt,"Swinv2Model"),iCt.forEach(t),O8o=r(fPe," (Swin Transformer V2 model)"),fPe.forEach(t),V8o=i(x),r2=n(x,"LI",{});var gPe=s(r2);yhe=n(gPe,"STRONG",{});var dCt=s(yhe);X8o=r(dCt,"t5"),dCt.forEach(t),z8o=r(gPe," \u2014 "),CO=n(gPe,"A",{href:!0});var cCt=s(CO);W8o=r(cCt,"T5Model"),cCt.forEach(t),Q8o=r(gPe," (T5 model)"),gPe.forEach(t),U8o=i(x),t2=n(x,"LI",{});var hPe=s(t2);xhe=n(hPe,"STRONG",{});var mCt=s(xhe);H8o=r(mCt,"tapas"),mCt.forEach(t),J8o=r(hPe," \u2014 "),wO=n(hPe,"A",{href:!0});var fCt=s(wO);Y8o=r(fCt,"TapasModel"),fCt.forEach(t),K8o=r(hPe," (TAPAS model)"),hPe.forEach(t),Z8o=i(x),a2=n(x,"LI",{});var uPe=s(a2);$he=n(uPe,"STRONG",{});var gCt=s($he);e9o=r(gCt,"trajectory_transformer"),gCt.forEach(t),o9o=r(uPe," \u2014 "),AO=n(uPe,"A",{href:!0});var hCt=s(AO);r9o=r(hCt,"TrajectoryTransformerModel"),hCt.forEach(t),t9o=r(uPe," (Trajectory Transformer model)"),uPe.forEach(t),a9o=i(x),n2=n(x,"LI",{});var pPe=s(n2);khe=n(pPe,"STRONG",{});var uCt=s(khe);n9o=r(uCt,"transfo-xl"),uCt.forEach(t),s9o=r(pPe," \u2014 "),LO=n(pPe,"A",{href:!0});var pCt=s(LO);l9o=r(pCt,"TransfoXLModel"),pCt.forEach(t),i9o=r(pPe," (Transformer-XL model)"),pPe.forEach(t),d9o=i(x),s2=n(x,"LI",{});var _Pe=s(s2);She=n(_Pe,"STRONG",{});var _Ct=s(She);c9o=r(_Ct,"unispeech"),_Ct.forEach(t),m9o=r(_Pe," \u2014 "),yO=n(_Pe,"A",{href:!0});var bCt=s(yO);f9o=r(bCt,"UniSpeechModel"),bCt.forEach(t),g9o=r(_Pe," (UniSpeech model)"),_Pe.forEach(t),h9o=i(x),l2=n(x,"LI",{});var bPe=s(l2);Rhe=n(bPe,"STRONG",{});var vCt=s(Rhe);u9o=r(vCt,"unispeech-sat"),vCt.forEach(t),p9o=r(bPe," \u2014 "),xO=n(bPe,"A",{href:!0});var FCt=s(xO);_9o=r(FCt,"UniSpeechSatModel"),FCt.forEach(t),b9o=r(bPe," (UniSpeechSat model)"),bPe.forEach(t),v9o=i(x),i2=n(x,"LI",{});var vPe=s(i2);Phe=n(vPe,"STRONG",{});var TCt=s(Phe);F9o=r(TCt,"van"),TCt.forEach(t),T9o=r(vPe," \u2014 "),$O=n(vPe,"A",{href:!0});var MCt=s($O);M9o=r(MCt,"VanModel"),MCt.forEach(t),E9o=r(vPe," (VAN model)"),vPe.forEach(t),C9o=i(x),d2=n(x,"LI",{});var FPe=s(d2);Bhe=n(FPe,"STRONG",{});var ECt=s(Bhe);w9o=r(ECt,"videomae"),ECt.forEach(t),A9o=r(FPe," \u2014 "),kO=n(FPe,"A",{href:!0});var CCt=s(kO);L9o=r(CCt,"VideoMAEModel"),CCt.forEach(t),y9o=r(FPe," (VideoMAE model)"),FPe.forEach(t),x9o=i(x),c2=n(x,"LI",{});var TPe=s(c2);Ihe=n(TPe,"STRONG",{});var wCt=s(Ihe);$9o=r(wCt,"vilt"),wCt.forEach(t),k9o=r(TPe," \u2014 "),SO=n(TPe,"A",{href:!0});var ACt=s(SO);S9o=r(ACt,"ViltModel"),ACt.forEach(t),R9o=r(TPe," (ViLT model)"),TPe.forEach(t),P9o=i(x),m2=n(x,"LI",{});var MPe=s(m2);Nhe=n(MPe,"STRONG",{});var LCt=s(Nhe);B9o=r(LCt,"vision-text-dual-encoder"),LCt.forEach(t),I9o=r(MPe," \u2014 "),RO=n(MPe,"A",{href:!0});var yCt=s(RO);N9o=r(yCt,"VisionTextDualEncoderModel"),yCt.forEach(t),q9o=r(MPe," (VisionTextDualEncoder model)"),MPe.forEach(t),j9o=i(x),f2=n(x,"LI",{});var EPe=s(f2);qhe=n(EPe,"STRONG",{});var xCt=s(qhe);D9o=r(xCt,"visual_bert"),xCt.forEach(t),G9o=r(EPe," \u2014 "),PO=n(EPe,"A",{href:!0});var $Ct=s(PO);O9o=r($Ct,"VisualBertModel"),$Ct.forEach(t),V9o=r(EPe," (VisualBERT model)"),EPe.forEach(t),X9o=i(x),g2=n(x,"LI",{});var CPe=s(g2);jhe=n(CPe,"STRONG",{});var kCt=s(jhe);z9o=r(kCt,"vit"),kCt.forEach(t),W9o=r(CPe," \u2014 "),BO=n(CPe,"A",{href:!0});var SCt=s(BO);Q9o=r(SCt,"ViTModel"),SCt.forEach(t),U9o=r(CPe," (ViT model)"),CPe.forEach(t),H9o=i(x),h2=n(x,"LI",{});var wPe=s(h2);Dhe=n(wPe,"STRONG",{});var RCt=s(Dhe);J9o=r(RCt,"vit_mae"),RCt.forEach(t),Y9o=r(wPe," \u2014 "),IO=n(wPe,"A",{href:!0});var PCt=s(IO);K9o=r(PCt,"ViTMAEModel"),PCt.forEach(t),Z9o=r(wPe," (ViTMAE model)"),wPe.forEach(t),exo=i(x),u2=n(x,"LI",{});var APe=s(u2);Ghe=n(APe,"STRONG",{});var BCt=s(Ghe);oxo=r(BCt,"wav2vec2"),BCt.forEach(t),rxo=r(APe," \u2014 "),NO=n(APe,"A",{href:!0});var ICt=s(NO);txo=r(ICt,"Wav2Vec2Model"),ICt.forEach(t),axo=r(APe," (Wav2Vec2 model)"),APe.forEach(t),nxo=i(x),p2=n(x,"LI",{});var LPe=s(p2);Ohe=n(LPe,"STRONG",{});var NCt=s(Ohe);sxo=r(NCt,"wav2vec2-conformer"),NCt.forEach(t),lxo=r(LPe," \u2014 "),qO=n(LPe,"A",{href:!0});var qCt=s(qO);ixo=r(qCt,"Wav2Vec2ConformerModel"),qCt.forEach(t),dxo=r(LPe," (Wav2Vec2-Conformer model)"),LPe.forEach(t),cxo=i(x),_2=n(x,"LI",{});var yPe=s(_2);Vhe=n(yPe,"STRONG",{});var jCt=s(Vhe);mxo=r(jCt,"wavlm"),jCt.forEach(t),fxo=r(yPe," \u2014 "),jO=n(yPe,"A",{href:!0});var DCt=s(jO);gxo=r(DCt,"WavLMModel"),DCt.forEach(t),hxo=r(yPe," (WavLM model)"),yPe.forEach(t),uxo=i(x),b2=n(x,"LI",{});var xPe=s(b2);Xhe=n(xPe,"STRONG",{});var GCt=s(Xhe);pxo=r(GCt,"xglm"),GCt.forEach(t),_xo=r(xPe," \u2014 "),DO=n(xPe,"A",{href:!0});var OCt=s(DO);bxo=r(OCt,"XGLMModel"),OCt.forEach(t),vxo=r(xPe," (XGLM model)"),xPe.forEach(t),Fxo=i(x),v2=n(x,"LI",{});var $Pe=s(v2);zhe=n($Pe,"STRONG",{});var VCt=s(zhe);Txo=r(VCt,"xlm"),VCt.forEach(t),Mxo=r($Pe," \u2014 "),GO=n($Pe,"A",{href:!0});var XCt=s(GO);Exo=r(XCt,"XLMModel"),XCt.forEach(t),Cxo=r($Pe," (XLM model)"),$Pe.forEach(t),wxo=i(x),F2=n(x,"LI",{});var kPe=s(F2);Whe=n(kPe,"STRONG",{});var zCt=s(Whe);Axo=r(zCt,"xlm-prophetnet"),zCt.forEach(t),Lxo=r(kPe," \u2014 "),OO=n(kPe,"A",{href:!0});var WCt=s(OO);yxo=r(WCt,"XLMProphetNetModel"),WCt.forEach(t),xxo=r(kPe," (XLM-ProphetNet model)"),kPe.forEach(t),$xo=i(x),T2=n(x,"LI",{});var SPe=s(T2);Qhe=n(SPe,"STRONG",{});var QCt=s(Qhe);kxo=r(QCt,"xlm-roberta"),QCt.forEach(t),Sxo=r(SPe," \u2014 "),VO=n(SPe,"A",{href:!0});var UCt=s(VO);Rxo=r(UCt,"XLMRobertaModel"),UCt.forEach(t),Pxo=r(SPe," (XLM-RoBERTa model)"),SPe.forEach(t),Bxo=i(x),M2=n(x,"LI",{});var RPe=s(M2);Uhe=n(RPe,"STRONG",{});var HCt=s(Uhe);Ixo=r(HCt,"xlm-roberta-xl"),HCt.forEach(t),Nxo=r(RPe," \u2014 "),XO=n(RPe,"A",{href:!0});var JCt=s(XO);qxo=r(JCt,"XLMRobertaXLModel"),JCt.forEach(t),jxo=r(RPe," (XLM-RoBERTa-XL model)"),RPe.forEach(t),Dxo=i(x),E2=n(x,"LI",{});var PPe=s(E2);Hhe=n(PPe,"STRONG",{});var YCt=s(Hhe);Gxo=r(YCt,"xlnet"),YCt.forEach(t),Oxo=r(PPe," \u2014 "),zO=n(PPe,"A",{href:!0});var KCt=s(zO);Vxo=r(KCt,"XLNetModel"),KCt.forEach(t),Xxo=r(PPe," (XLNet model)"),PPe.forEach(t),zxo=i(x),C2=n(x,"LI",{});var BPe=s(C2);Jhe=n(BPe,"STRONG",{});var ZCt=s(Jhe);Wxo=r(ZCt,"yolos"),ZCt.forEach(t),Qxo=r(BPe," \u2014 "),WO=n(BPe,"A",{href:!0});var e3t=s(WO);Uxo=r(e3t,"YolosModel"),e3t.forEach(t),Hxo=r(BPe," (YOLOS model)"),BPe.forEach(t),Jxo=i(x),w2=n(x,"LI",{});var IPe=s(w2);Yhe=n(IPe,"STRONG",{});var o3t=s(Yhe);Yxo=r(o3t,"yoso"),o3t.forEach(t),Kxo=r(IPe," \u2014 "),QO=n(IPe,"A",{href:!0});var r3t=s(QO);Zxo=r(r3t,"YosoModel"),r3t.forEach(t),e$o=r(IPe," (YOSO model)"),IPe.forEach(t),x.forEach(t),o$o=i(ga),A2=n(ga,"P",{});var NPe=s(A2);r$o=r(NPe,"The model is set in evaluation mode by default using "),Khe=n(NPe,"CODE",{});var t3t=s(Khe);t$o=r(t3t,"model.eval()"),t3t.forEach(t),a$o=r(NPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zhe=n(NPe,"CODE",{});var a3t=s(Zhe);n$o=r(a3t,"model.train()"),a3t.forEach(t),NPe.forEach(t),s$o=i(ga),T(L2.$$.fragment,ga),ga.forEach(t),hl.forEach(t),wUe=i(m),nd=n(m,"H2",{class:!0});var BJe=s(nd);y2=n(BJe,"A",{id:!0,class:!0,href:!0});var n3t=s(y2);eue=n(n3t,"SPAN",{});var s3t=s(eue);T(J8.$$.fragment,s3t),s3t.forEach(t),n3t.forEach(t),l$o=i(BJe),oue=n(BJe,"SPAN",{});var l3t=s(oue);i$o=r(l3t,"AutoModelForPreTraining"),l3t.forEach(t),BJe.forEach(t),AUe=i(m),Ro=n(m,"DIV",{class:!0});var ul=s(Ro);T(Y8.$$.fragment,ul),d$o=i(ul),sd=n(ul,"P",{});var ene=s(sd);c$o=r(ene,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),UO=n(ene,"A",{href:!0});var i3t=s(UO);m$o=r(i3t,"from_pretrained()"),i3t.forEach(t),f$o=r(ene," class method or the "),HO=n(ene,"A",{href:!0});var d3t=s(HO);g$o=r(d3t,"from_config()"),d3t.forEach(t),h$o=r(ene,` class
method.`),ene.forEach(t),u$o=i(ul),K8=n(ul,"P",{});var IJe=s(K8);p$o=r(IJe,"This class cannot be instantiated directly using "),rue=n(IJe,"CODE",{});var c3t=s(rue);_$o=r(c3t,"__init__()"),c3t.forEach(t),b$o=r(IJe," (throws an error)."),IJe.forEach(t),v$o=i(ul),gt=n(ul,"DIV",{class:!0});var FL=s(gt);T(Z8.$$.fragment,FL),F$o=i(FL),tue=n(FL,"P",{});var m3t=s(tue);T$o=r(m3t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),m3t.forEach(t),M$o=i(FL),ld=n(FL,"P",{});var one=s(ld);E$o=r(one,`Note:
Loading a model from its configuration file does `),aue=n(one,"STRONG",{});var f3t=s(aue);C$o=r(f3t,"not"),f3t.forEach(t),w$o=r(one,` load the model weights. It only affects the
model\u2019s configuration. Use `),JO=n(one,"A",{href:!0});var g3t=s(JO);A$o=r(g3t,"from_pretrained()"),g3t.forEach(t),L$o=r(one," to load the model weights."),one.forEach(t),y$o=i(FL),T(x2.$$.fragment,FL),FL.forEach(t),x$o=i(ul),Ke=n(ul,"DIV",{class:!0});var ha=s(Ke);T(e9.$$.fragment,ha),$$o=i(ha),nue=n(ha,"P",{});var h3t=s(nue);k$o=r(h3t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),h3t.forEach(t),S$o=i(ha),Xa=n(ha,"P",{});var TL=s(Xa);R$o=r(TL,"The model class to instantiate is selected based on the "),sue=n(TL,"CODE",{});var u3t=s(sue);P$o=r(u3t,"model_type"),u3t.forEach(t),B$o=r(TL,` property of the config object (either
passed as an argument or loaded from `),lue=n(TL,"CODE",{});var p3t=s(lue);I$o=r(p3t,"pretrained_model_name_or_path"),p3t.forEach(t),N$o=r(TL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iue=n(TL,"CODE",{});var _3t=s(iue);q$o=r(_3t,"pretrained_model_name_or_path"),_3t.forEach(t),j$o=r(TL,":"),TL.forEach(t),D$o=i(ha),G=n(ha,"UL",{});var O=s(G);$2=n(O,"LI",{});var qPe=s($2);due=n(qPe,"STRONG",{});var b3t=s(due);G$o=r(b3t,"albert"),b3t.forEach(t),O$o=r(qPe," \u2014 "),YO=n(qPe,"A",{href:!0});var v3t=s(YO);V$o=r(v3t,"AlbertForPreTraining"),v3t.forEach(t),X$o=r(qPe," (ALBERT model)"),qPe.forEach(t),z$o=i(O),k2=n(O,"LI",{});var jPe=s(k2);cue=n(jPe,"STRONG",{});var F3t=s(cue);W$o=r(F3t,"bart"),F3t.forEach(t),Q$o=r(jPe," \u2014 "),KO=n(jPe,"A",{href:!0});var T3t=s(KO);U$o=r(T3t,"BartForConditionalGeneration"),T3t.forEach(t),H$o=r(jPe," (BART model)"),jPe.forEach(t),J$o=i(O),S2=n(O,"LI",{});var DPe=s(S2);mue=n(DPe,"STRONG",{});var M3t=s(mue);Y$o=r(M3t,"bert"),M3t.forEach(t),K$o=r(DPe," \u2014 "),ZO=n(DPe,"A",{href:!0});var E3t=s(ZO);Z$o=r(E3t,"BertForPreTraining"),E3t.forEach(t),eko=r(DPe," (BERT model)"),DPe.forEach(t),oko=i(O),R2=n(O,"LI",{});var GPe=s(R2);fue=n(GPe,"STRONG",{});var C3t=s(fue);rko=r(C3t,"big_bird"),C3t.forEach(t),tko=r(GPe," \u2014 "),eV=n(GPe,"A",{href:!0});var w3t=s(eV);ako=r(w3t,"BigBirdForPreTraining"),w3t.forEach(t),nko=r(GPe," (BigBird model)"),GPe.forEach(t),sko=i(O),P2=n(O,"LI",{});var OPe=s(P2);gue=n(OPe,"STRONG",{});var A3t=s(gue);lko=r(A3t,"bloom"),A3t.forEach(t),iko=r(OPe," \u2014 "),oV=n(OPe,"A",{href:!0});var L3t=s(oV);dko=r(L3t,"BloomForCausalLM"),L3t.forEach(t),cko=r(OPe," (BLOOM model)"),OPe.forEach(t),mko=i(O),B2=n(O,"LI",{});var VPe=s(B2);hue=n(VPe,"STRONG",{});var y3t=s(hue);fko=r(y3t,"camembert"),y3t.forEach(t),gko=r(VPe," \u2014 "),rV=n(VPe,"A",{href:!0});var x3t=s(rV);hko=r(x3t,"CamembertForMaskedLM"),x3t.forEach(t),uko=r(VPe," (CamemBERT model)"),VPe.forEach(t),pko=i(O),I2=n(O,"LI",{});var XPe=s(I2);uue=n(XPe,"STRONG",{});var $3t=s(uue);_ko=r($3t,"ctrl"),$3t.forEach(t),bko=r(XPe," \u2014 "),tV=n(XPe,"A",{href:!0});var k3t=s(tV);vko=r(k3t,"CTRLLMHeadModel"),k3t.forEach(t),Fko=r(XPe," (CTRL model)"),XPe.forEach(t),Tko=i(O),N2=n(O,"LI",{});var zPe=s(N2);pue=n(zPe,"STRONG",{});var S3t=s(pue);Mko=r(S3t,"data2vec-text"),S3t.forEach(t),Eko=r(zPe," \u2014 "),aV=n(zPe,"A",{href:!0});var R3t=s(aV);Cko=r(R3t,"Data2VecTextForMaskedLM"),R3t.forEach(t),wko=r(zPe," (Data2VecText model)"),zPe.forEach(t),Ako=i(O),q2=n(O,"LI",{});var WPe=s(q2);_ue=n(WPe,"STRONG",{});var P3t=s(_ue);Lko=r(P3t,"deberta"),P3t.forEach(t),yko=r(WPe," \u2014 "),nV=n(WPe,"A",{href:!0});var B3t=s(nV);xko=r(B3t,"DebertaForMaskedLM"),B3t.forEach(t),$ko=r(WPe," (DeBERTa model)"),WPe.forEach(t),kko=i(O),j2=n(O,"LI",{});var QPe=s(j2);bue=n(QPe,"STRONG",{});var I3t=s(bue);Sko=r(I3t,"deberta-v2"),I3t.forEach(t),Rko=r(QPe," \u2014 "),sV=n(QPe,"A",{href:!0});var N3t=s(sV);Pko=r(N3t,"DebertaV2ForMaskedLM"),N3t.forEach(t),Bko=r(QPe," (DeBERTa-v2 model)"),QPe.forEach(t),Iko=i(O),D2=n(O,"LI",{});var UPe=s(D2);vue=n(UPe,"STRONG",{});var q3t=s(vue);Nko=r(q3t,"distilbert"),q3t.forEach(t),qko=r(UPe," \u2014 "),lV=n(UPe,"A",{href:!0});var j3t=s(lV);jko=r(j3t,"DistilBertForMaskedLM"),j3t.forEach(t),Dko=r(UPe," (DistilBERT model)"),UPe.forEach(t),Gko=i(O),G2=n(O,"LI",{});var HPe=s(G2);Fue=n(HPe,"STRONG",{});var D3t=s(Fue);Oko=r(D3t,"electra"),D3t.forEach(t),Vko=r(HPe," \u2014 "),iV=n(HPe,"A",{href:!0});var G3t=s(iV);Xko=r(G3t,"ElectraForPreTraining"),G3t.forEach(t),zko=r(HPe," (ELECTRA model)"),HPe.forEach(t),Wko=i(O),O2=n(O,"LI",{});var JPe=s(O2);Tue=n(JPe,"STRONG",{});var O3t=s(Tue);Qko=r(O3t,"flaubert"),O3t.forEach(t),Uko=r(JPe," \u2014 "),dV=n(JPe,"A",{href:!0});var V3t=s(dV);Hko=r(V3t,"FlaubertWithLMHeadModel"),V3t.forEach(t),Jko=r(JPe," (FlauBERT model)"),JPe.forEach(t),Yko=i(O),V2=n(O,"LI",{});var YPe=s(V2);Mue=n(YPe,"STRONG",{});var X3t=s(Mue);Kko=r(X3t,"flava"),X3t.forEach(t),Zko=r(YPe," \u2014 "),cV=n(YPe,"A",{href:!0});var z3t=s(cV);eSo=r(z3t,"FlavaForPreTraining"),z3t.forEach(t),oSo=r(YPe," (FLAVA model)"),YPe.forEach(t),rSo=i(O),X2=n(O,"LI",{});var KPe=s(X2);Eue=n(KPe,"STRONG",{});var W3t=s(Eue);tSo=r(W3t,"fnet"),W3t.forEach(t),aSo=r(KPe," \u2014 "),mV=n(KPe,"A",{href:!0});var Q3t=s(mV);nSo=r(Q3t,"FNetForPreTraining"),Q3t.forEach(t),sSo=r(KPe," (FNet model)"),KPe.forEach(t),lSo=i(O),z2=n(O,"LI",{});var ZPe=s(z2);Cue=n(ZPe,"STRONG",{});var U3t=s(Cue);iSo=r(U3t,"fsmt"),U3t.forEach(t),dSo=r(ZPe," \u2014 "),fV=n(ZPe,"A",{href:!0});var H3t=s(fV);cSo=r(H3t,"FSMTForConditionalGeneration"),H3t.forEach(t),mSo=r(ZPe," (FairSeq Machine-Translation model)"),ZPe.forEach(t),fSo=i(O),W2=n(O,"LI",{});var eBe=s(W2);wue=n(eBe,"STRONG",{});var J3t=s(wue);gSo=r(J3t,"funnel"),J3t.forEach(t),hSo=r(eBe," \u2014 "),gV=n(eBe,"A",{href:!0});var Y3t=s(gV);uSo=r(Y3t,"FunnelForPreTraining"),Y3t.forEach(t),pSo=r(eBe," (Funnel Transformer model)"),eBe.forEach(t),_So=i(O),Q2=n(O,"LI",{});var oBe=s(Q2);Aue=n(oBe,"STRONG",{});var K3t=s(Aue);bSo=r(K3t,"gpt2"),K3t.forEach(t),vSo=r(oBe," \u2014 "),hV=n(oBe,"A",{href:!0});var Z3t=s(hV);FSo=r(Z3t,"GPT2LMHeadModel"),Z3t.forEach(t),TSo=r(oBe," (OpenAI GPT-2 model)"),oBe.forEach(t),MSo=i(O),U2=n(O,"LI",{});var rBe=s(U2);Lue=n(rBe,"STRONG",{});var e5t=s(Lue);ESo=r(e5t,"ibert"),e5t.forEach(t),CSo=r(rBe," \u2014 "),uV=n(rBe,"A",{href:!0});var o5t=s(uV);wSo=r(o5t,"IBertForMaskedLM"),o5t.forEach(t),ASo=r(rBe," (I-BERT model)"),rBe.forEach(t),LSo=i(O),H2=n(O,"LI",{});var tBe=s(H2);yue=n(tBe,"STRONG",{});var r5t=s(yue);ySo=r(r5t,"layoutlm"),r5t.forEach(t),xSo=r(tBe," \u2014 "),pV=n(tBe,"A",{href:!0});var t5t=s(pV);$So=r(t5t,"LayoutLMForMaskedLM"),t5t.forEach(t),kSo=r(tBe," (LayoutLM model)"),tBe.forEach(t),SSo=i(O),J2=n(O,"LI",{});var aBe=s(J2);xue=n(aBe,"STRONG",{});var a5t=s(xue);RSo=r(a5t,"longformer"),a5t.forEach(t),PSo=r(aBe," \u2014 "),_V=n(aBe,"A",{href:!0});var n5t=s(_V);BSo=r(n5t,"LongformerForMaskedLM"),n5t.forEach(t),ISo=r(aBe," (Longformer model)"),aBe.forEach(t),NSo=i(O),Y2=n(O,"LI",{});var nBe=s(Y2);$ue=n(nBe,"STRONG",{});var s5t=s($ue);qSo=r(s5t,"luke"),s5t.forEach(t),jSo=r(nBe," \u2014 "),bV=n(nBe,"A",{href:!0});var l5t=s(bV);DSo=r(l5t,"LukeForMaskedLM"),l5t.forEach(t),GSo=r(nBe," (LUKE model)"),nBe.forEach(t),OSo=i(O),K2=n(O,"LI",{});var sBe=s(K2);kue=n(sBe,"STRONG",{});var i5t=s(kue);VSo=r(i5t,"lxmert"),i5t.forEach(t),XSo=r(sBe," \u2014 "),vV=n(sBe,"A",{href:!0});var d5t=s(vV);zSo=r(d5t,"LxmertForPreTraining"),d5t.forEach(t),WSo=r(sBe," (LXMERT model)"),sBe.forEach(t),QSo=i(O),Z2=n(O,"LI",{});var lBe=s(Z2);Sue=n(lBe,"STRONG",{});var c5t=s(Sue);USo=r(c5t,"megatron-bert"),c5t.forEach(t),HSo=r(lBe," \u2014 "),FV=n(lBe,"A",{href:!0});var m5t=s(FV);JSo=r(m5t,"MegatronBertForPreTraining"),m5t.forEach(t),YSo=r(lBe," (Megatron-BERT model)"),lBe.forEach(t),KSo=i(O),eb=n(O,"LI",{});var iBe=s(eb);Rue=n(iBe,"STRONG",{});var f5t=s(Rue);ZSo=r(f5t,"mobilebert"),f5t.forEach(t),eRo=r(iBe," \u2014 "),TV=n(iBe,"A",{href:!0});var g5t=s(TV);oRo=r(g5t,"MobileBertForPreTraining"),g5t.forEach(t),rRo=r(iBe," (MobileBERT model)"),iBe.forEach(t),tRo=i(O),ob=n(O,"LI",{});var dBe=s(ob);Pue=n(dBe,"STRONG",{});var h5t=s(Pue);aRo=r(h5t,"mpnet"),h5t.forEach(t),nRo=r(dBe," \u2014 "),MV=n(dBe,"A",{href:!0});var u5t=s(MV);sRo=r(u5t,"MPNetForMaskedLM"),u5t.forEach(t),lRo=r(dBe," (MPNet model)"),dBe.forEach(t),iRo=i(O),rb=n(O,"LI",{});var cBe=s(rb);Bue=n(cBe,"STRONG",{});var p5t=s(Bue);dRo=r(p5t,"mvp"),p5t.forEach(t),cRo=r(cBe," \u2014 "),EV=n(cBe,"A",{href:!0});var _5t=s(EV);mRo=r(_5t,"MvpForConditionalGeneration"),_5t.forEach(t),fRo=r(cBe," (MVP model)"),cBe.forEach(t),gRo=i(O),tb=n(O,"LI",{});var mBe=s(tb);Iue=n(mBe,"STRONG",{});var b5t=s(Iue);hRo=r(b5t,"nezha"),b5t.forEach(t),uRo=r(mBe," \u2014 "),CV=n(mBe,"A",{href:!0});var v5t=s(CV);pRo=r(v5t,"NezhaForPreTraining"),v5t.forEach(t),_Ro=r(mBe," (Nezha model)"),mBe.forEach(t),bRo=i(O),ab=n(O,"LI",{});var fBe=s(ab);Nue=n(fBe,"STRONG",{});var F5t=s(Nue);vRo=r(F5t,"openai-gpt"),F5t.forEach(t),FRo=r(fBe," \u2014 "),wV=n(fBe,"A",{href:!0});var T5t=s(wV);TRo=r(T5t,"OpenAIGPTLMHeadModel"),T5t.forEach(t),MRo=r(fBe," (OpenAI GPT model)"),fBe.forEach(t),ERo=i(O),nb=n(O,"LI",{});var gBe=s(nb);que=n(gBe,"STRONG",{});var M5t=s(que);CRo=r(M5t,"retribert"),M5t.forEach(t),wRo=r(gBe," \u2014 "),AV=n(gBe,"A",{href:!0});var E5t=s(AV);ARo=r(E5t,"RetriBertModel"),E5t.forEach(t),LRo=r(gBe," (RetriBERT model)"),gBe.forEach(t),yRo=i(O),sb=n(O,"LI",{});var hBe=s(sb);jue=n(hBe,"STRONG",{});var C5t=s(jue);xRo=r(C5t,"roberta"),C5t.forEach(t),$Ro=r(hBe," \u2014 "),LV=n(hBe,"A",{href:!0});var w5t=s(LV);kRo=r(w5t,"RobertaForMaskedLM"),w5t.forEach(t),SRo=r(hBe," (RoBERTa model)"),hBe.forEach(t),RRo=i(O),lb=n(O,"LI",{});var uBe=s(lb);Due=n(uBe,"STRONG",{});var A5t=s(Due);PRo=r(A5t,"splinter"),A5t.forEach(t),BRo=r(uBe," \u2014 "),yV=n(uBe,"A",{href:!0});var L5t=s(yV);IRo=r(L5t,"SplinterForPreTraining"),L5t.forEach(t),NRo=r(uBe," (Splinter model)"),uBe.forEach(t),qRo=i(O),ib=n(O,"LI",{});var pBe=s(ib);Gue=n(pBe,"STRONG",{});var y5t=s(Gue);jRo=r(y5t,"squeezebert"),y5t.forEach(t),DRo=r(pBe," \u2014 "),xV=n(pBe,"A",{href:!0});var x5t=s(xV);GRo=r(x5t,"SqueezeBertForMaskedLM"),x5t.forEach(t),ORo=r(pBe," (SqueezeBERT model)"),pBe.forEach(t),VRo=i(O),db=n(O,"LI",{});var _Be=s(db);Oue=n(_Be,"STRONG",{});var $5t=s(Oue);XRo=r($5t,"t5"),$5t.forEach(t),zRo=r(_Be," \u2014 "),$V=n(_Be,"A",{href:!0});var k5t=s($V);WRo=r(k5t,"T5ForConditionalGeneration"),k5t.forEach(t),QRo=r(_Be," (T5 model)"),_Be.forEach(t),URo=i(O),cb=n(O,"LI",{});var bBe=s(cb);Vue=n(bBe,"STRONG",{});var S5t=s(Vue);HRo=r(S5t,"tapas"),S5t.forEach(t),JRo=r(bBe," \u2014 "),kV=n(bBe,"A",{href:!0});var R5t=s(kV);YRo=r(R5t,"TapasForMaskedLM"),R5t.forEach(t),KRo=r(bBe," (TAPAS model)"),bBe.forEach(t),ZRo=i(O),mb=n(O,"LI",{});var vBe=s(mb);Xue=n(vBe,"STRONG",{});var P5t=s(Xue);ePo=r(P5t,"transfo-xl"),P5t.forEach(t),oPo=r(vBe," \u2014 "),SV=n(vBe,"A",{href:!0});var B5t=s(SV);rPo=r(B5t,"TransfoXLLMHeadModel"),B5t.forEach(t),tPo=r(vBe," (Transformer-XL model)"),vBe.forEach(t),aPo=i(O),fb=n(O,"LI",{});var FBe=s(fb);zue=n(FBe,"STRONG",{});var I5t=s(zue);nPo=r(I5t,"unispeech"),I5t.forEach(t),sPo=r(FBe," \u2014 "),RV=n(FBe,"A",{href:!0});var N5t=s(RV);lPo=r(N5t,"UniSpeechForPreTraining"),N5t.forEach(t),iPo=r(FBe," (UniSpeech model)"),FBe.forEach(t),dPo=i(O),gb=n(O,"LI",{});var TBe=s(gb);Wue=n(TBe,"STRONG",{});var q5t=s(Wue);cPo=r(q5t,"unispeech-sat"),q5t.forEach(t),mPo=r(TBe," \u2014 "),PV=n(TBe,"A",{href:!0});var j5t=s(PV);fPo=r(j5t,"UniSpeechSatForPreTraining"),j5t.forEach(t),gPo=r(TBe," (UniSpeechSat model)"),TBe.forEach(t),hPo=i(O),hb=n(O,"LI",{});var MBe=s(hb);Que=n(MBe,"STRONG",{});var D5t=s(Que);uPo=r(D5t,"videomae"),D5t.forEach(t),pPo=r(MBe," \u2014 "),BV=n(MBe,"A",{href:!0});var G5t=s(BV);_Po=r(G5t,"VideoMAEForPreTraining"),G5t.forEach(t),bPo=r(MBe," (VideoMAE model)"),MBe.forEach(t),vPo=i(O),ub=n(O,"LI",{});var EBe=s(ub);Uue=n(EBe,"STRONG",{});var O5t=s(Uue);FPo=r(O5t,"visual_bert"),O5t.forEach(t),TPo=r(EBe," \u2014 "),IV=n(EBe,"A",{href:!0});var V5t=s(IV);MPo=r(V5t,"VisualBertForPreTraining"),V5t.forEach(t),EPo=r(EBe," (VisualBERT model)"),EBe.forEach(t),CPo=i(O),pb=n(O,"LI",{});var CBe=s(pb);Hue=n(CBe,"STRONG",{});var X5t=s(Hue);wPo=r(X5t,"vit_mae"),X5t.forEach(t),APo=r(CBe," \u2014 "),NV=n(CBe,"A",{href:!0});var z5t=s(NV);LPo=r(z5t,"ViTMAEForPreTraining"),z5t.forEach(t),yPo=r(CBe," (ViTMAE model)"),CBe.forEach(t),xPo=i(O),_b=n(O,"LI",{});var wBe=s(_b);Jue=n(wBe,"STRONG",{});var W5t=s(Jue);$Po=r(W5t,"wav2vec2"),W5t.forEach(t),kPo=r(wBe," \u2014 "),qV=n(wBe,"A",{href:!0});var Q5t=s(qV);SPo=r(Q5t,"Wav2Vec2ForPreTraining"),Q5t.forEach(t),RPo=r(wBe," (Wav2Vec2 model)"),wBe.forEach(t),PPo=i(O),bb=n(O,"LI",{});var ABe=s(bb);Yue=n(ABe,"STRONG",{});var U5t=s(Yue);BPo=r(U5t,"wav2vec2-conformer"),U5t.forEach(t),IPo=r(ABe," \u2014 "),jV=n(ABe,"A",{href:!0});var H5t=s(jV);NPo=r(H5t,"Wav2Vec2ConformerForPreTraining"),H5t.forEach(t),qPo=r(ABe," (Wav2Vec2-Conformer model)"),ABe.forEach(t),jPo=i(O),vb=n(O,"LI",{});var LBe=s(vb);Kue=n(LBe,"STRONG",{});var J5t=s(Kue);DPo=r(J5t,"xlm"),J5t.forEach(t),GPo=r(LBe," \u2014 "),DV=n(LBe,"A",{href:!0});var Y5t=s(DV);OPo=r(Y5t,"XLMWithLMHeadModel"),Y5t.forEach(t),VPo=r(LBe," (XLM model)"),LBe.forEach(t),XPo=i(O),Fb=n(O,"LI",{});var yBe=s(Fb);Zue=n(yBe,"STRONG",{});var K5t=s(Zue);zPo=r(K5t,"xlm-roberta"),K5t.forEach(t),WPo=r(yBe," \u2014 "),GV=n(yBe,"A",{href:!0});var Z5t=s(GV);QPo=r(Z5t,"XLMRobertaForMaskedLM"),Z5t.forEach(t),UPo=r(yBe," (XLM-RoBERTa model)"),yBe.forEach(t),HPo=i(O),Tb=n(O,"LI",{});var xBe=s(Tb);epe=n(xBe,"STRONG",{});var e0t=s(epe);JPo=r(e0t,"xlm-roberta-xl"),e0t.forEach(t),YPo=r(xBe," \u2014 "),OV=n(xBe,"A",{href:!0});var o0t=s(OV);KPo=r(o0t,"XLMRobertaXLForMaskedLM"),o0t.forEach(t),ZPo=r(xBe," (XLM-RoBERTa-XL model)"),xBe.forEach(t),eBo=i(O),Mb=n(O,"LI",{});var $Be=s(Mb);ope=n($Be,"STRONG",{});var r0t=s(ope);oBo=r(r0t,"xlnet"),r0t.forEach(t),rBo=r($Be," \u2014 "),VV=n($Be,"A",{href:!0});var t0t=s(VV);tBo=r(t0t,"XLNetLMHeadModel"),t0t.forEach(t),aBo=r($Be," (XLNet model)"),$Be.forEach(t),O.forEach(t),nBo=i(ha),Eb=n(ha,"P",{});var kBe=s(Eb);sBo=r(kBe,"The model is set in evaluation mode by default using "),rpe=n(kBe,"CODE",{});var a0t=s(rpe);lBo=r(a0t,"model.eval()"),a0t.forEach(t),iBo=r(kBe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tpe=n(kBe,"CODE",{});var n0t=s(tpe);dBo=r(n0t,"model.train()"),n0t.forEach(t),kBe.forEach(t),cBo=i(ha),T(Cb.$$.fragment,ha),ha.forEach(t),ul.forEach(t),LUe=i(m),id=n(m,"H2",{class:!0});var NJe=s(id);wb=n(NJe,"A",{id:!0,class:!0,href:!0});var s0t=s(wb);ape=n(s0t,"SPAN",{});var l0t=s(ape);T(o9.$$.fragment,l0t),l0t.forEach(t),s0t.forEach(t),mBo=i(NJe),npe=n(NJe,"SPAN",{});var i0t=s(npe);fBo=r(i0t,"AutoModelForCausalLM"),i0t.forEach(t),NJe.forEach(t),yUe=i(m),Po=n(m,"DIV",{class:!0});var pl=s(Po);T(r9.$$.fragment,pl),gBo=i(pl),dd=n(pl,"P",{});var rne=s(dd);hBo=r(rne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),XV=n(rne,"A",{href:!0});var d0t=s(XV);uBo=r(d0t,"from_pretrained()"),d0t.forEach(t),pBo=r(rne," class method or the "),zV=n(rne,"A",{href:!0});var c0t=s(zV);_Bo=r(c0t,"from_config()"),c0t.forEach(t),bBo=r(rne,` class
method.`),rne.forEach(t),vBo=i(pl),t9=n(pl,"P",{});var qJe=s(t9);FBo=r(qJe,"This class cannot be instantiated directly using "),spe=n(qJe,"CODE",{});var m0t=s(spe);TBo=r(m0t,"__init__()"),m0t.forEach(t),MBo=r(qJe," (throws an error)."),qJe.forEach(t),EBo=i(pl),ht=n(pl,"DIV",{class:!0});var ML=s(ht);T(a9.$$.fragment,ML),CBo=i(ML),lpe=n(ML,"P",{});var f0t=s(lpe);wBo=r(f0t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),f0t.forEach(t),ABo=i(ML),cd=n(ML,"P",{});var tne=s(cd);LBo=r(tne,`Note:
Loading a model from its configuration file does `),ipe=n(tne,"STRONG",{});var g0t=s(ipe);yBo=r(g0t,"not"),g0t.forEach(t),xBo=r(tne,` load the model weights. It only affects the
model\u2019s configuration. Use `),WV=n(tne,"A",{href:!0});var h0t=s(WV);$Bo=r(h0t,"from_pretrained()"),h0t.forEach(t),kBo=r(tne," to load the model weights."),tne.forEach(t),SBo=i(ML),T(Ab.$$.fragment,ML),ML.forEach(t),RBo=i(pl),Ze=n(pl,"DIV",{class:!0});var ua=s(Ze);T(n9.$$.fragment,ua),PBo=i(ua),dpe=n(ua,"P",{});var u0t=s(dpe);BBo=r(u0t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),u0t.forEach(t),IBo=i(ua),za=n(ua,"P",{});var EL=s(za);NBo=r(EL,"The model class to instantiate is selected based on the "),cpe=n(EL,"CODE",{});var p0t=s(cpe);qBo=r(p0t,"model_type"),p0t.forEach(t),jBo=r(EL,` property of the config object (either
passed as an argument or loaded from `),mpe=n(EL,"CODE",{});var _0t=s(mpe);DBo=r(_0t,"pretrained_model_name_or_path"),_0t.forEach(t),GBo=r(EL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fpe=n(EL,"CODE",{});var b0t=s(fpe);OBo=r(b0t,"pretrained_model_name_or_path"),b0t.forEach(t),VBo=r(EL,":"),EL.forEach(t),XBo=i(ua),z=n(ua,"UL",{});var W=s(z);Lb=n(W,"LI",{});var SBe=s(Lb);gpe=n(SBe,"STRONG",{});var v0t=s(gpe);zBo=r(v0t,"bart"),v0t.forEach(t),WBo=r(SBe," \u2014 "),QV=n(SBe,"A",{href:!0});var F0t=s(QV);QBo=r(F0t,"BartForCausalLM"),F0t.forEach(t),UBo=r(SBe," (BART model)"),SBe.forEach(t),HBo=i(W),yb=n(W,"LI",{});var RBe=s(yb);hpe=n(RBe,"STRONG",{});var T0t=s(hpe);JBo=r(T0t,"bert"),T0t.forEach(t),YBo=r(RBe," \u2014 "),UV=n(RBe,"A",{href:!0});var M0t=s(UV);KBo=r(M0t,"BertLMHeadModel"),M0t.forEach(t),ZBo=r(RBe," (BERT model)"),RBe.forEach(t),eIo=i(W),xb=n(W,"LI",{});var PBe=s(xb);upe=n(PBe,"STRONG",{});var E0t=s(upe);oIo=r(E0t,"bert-generation"),E0t.forEach(t),rIo=r(PBe," \u2014 "),HV=n(PBe,"A",{href:!0});var C0t=s(HV);tIo=r(C0t,"BertGenerationDecoder"),C0t.forEach(t),aIo=r(PBe," (Bert Generation model)"),PBe.forEach(t),nIo=i(W),$b=n(W,"LI",{});var BBe=s($b);ppe=n(BBe,"STRONG",{});var w0t=s(ppe);sIo=r(w0t,"big_bird"),w0t.forEach(t),lIo=r(BBe," \u2014 "),JV=n(BBe,"A",{href:!0});var A0t=s(JV);iIo=r(A0t,"BigBirdForCausalLM"),A0t.forEach(t),dIo=r(BBe," (BigBird model)"),BBe.forEach(t),cIo=i(W),kb=n(W,"LI",{});var IBe=s(kb);_pe=n(IBe,"STRONG",{});var L0t=s(_pe);mIo=r(L0t,"bigbird_pegasus"),L0t.forEach(t),fIo=r(IBe," \u2014 "),YV=n(IBe,"A",{href:!0});var y0t=s(YV);gIo=r(y0t,"BigBirdPegasusForCausalLM"),y0t.forEach(t),hIo=r(IBe," (BigBird-Pegasus model)"),IBe.forEach(t),uIo=i(W),Sb=n(W,"LI",{});var NBe=s(Sb);bpe=n(NBe,"STRONG",{});var x0t=s(bpe);pIo=r(x0t,"blenderbot"),x0t.forEach(t),_Io=r(NBe," \u2014 "),KV=n(NBe,"A",{href:!0});var $0t=s(KV);bIo=r($0t,"BlenderbotForCausalLM"),$0t.forEach(t),vIo=r(NBe," (Blenderbot model)"),NBe.forEach(t),FIo=i(W),Rb=n(W,"LI",{});var qBe=s(Rb);vpe=n(qBe,"STRONG",{});var k0t=s(vpe);TIo=r(k0t,"blenderbot-small"),k0t.forEach(t),MIo=r(qBe," \u2014 "),ZV=n(qBe,"A",{href:!0});var S0t=s(ZV);EIo=r(S0t,"BlenderbotSmallForCausalLM"),S0t.forEach(t),CIo=r(qBe," (BlenderbotSmall model)"),qBe.forEach(t),wIo=i(W),Pb=n(W,"LI",{});var jBe=s(Pb);Fpe=n(jBe,"STRONG",{});var R0t=s(Fpe);AIo=r(R0t,"bloom"),R0t.forEach(t),LIo=r(jBe," \u2014 "),eX=n(jBe,"A",{href:!0});var P0t=s(eX);yIo=r(P0t,"BloomForCausalLM"),P0t.forEach(t),xIo=r(jBe," (BLOOM model)"),jBe.forEach(t),$Io=i(W),Bb=n(W,"LI",{});var DBe=s(Bb);Tpe=n(DBe,"STRONG",{});var B0t=s(Tpe);kIo=r(B0t,"camembert"),B0t.forEach(t),SIo=r(DBe," \u2014 "),oX=n(DBe,"A",{href:!0});var I0t=s(oX);RIo=r(I0t,"CamembertForCausalLM"),I0t.forEach(t),PIo=r(DBe," (CamemBERT model)"),DBe.forEach(t),BIo=i(W),Ib=n(W,"LI",{});var GBe=s(Ib);Mpe=n(GBe,"STRONG",{});var N0t=s(Mpe);IIo=r(N0t,"codegen"),N0t.forEach(t),NIo=r(GBe," \u2014 "),rX=n(GBe,"A",{href:!0});var q0t=s(rX);qIo=r(q0t,"CodeGenForCausalLM"),q0t.forEach(t),jIo=r(GBe," (CodeGen model)"),GBe.forEach(t),DIo=i(W),Nb=n(W,"LI",{});var OBe=s(Nb);Epe=n(OBe,"STRONG",{});var j0t=s(Epe);GIo=r(j0t,"ctrl"),j0t.forEach(t),OIo=r(OBe," \u2014 "),tX=n(OBe,"A",{href:!0});var D0t=s(tX);VIo=r(D0t,"CTRLLMHeadModel"),D0t.forEach(t),XIo=r(OBe," (CTRL model)"),OBe.forEach(t),zIo=i(W),qb=n(W,"LI",{});var VBe=s(qb);Cpe=n(VBe,"STRONG",{});var G0t=s(Cpe);WIo=r(G0t,"data2vec-text"),G0t.forEach(t),QIo=r(VBe," \u2014 "),aX=n(VBe,"A",{href:!0});var O0t=s(aX);UIo=r(O0t,"Data2VecTextForCausalLM"),O0t.forEach(t),HIo=r(VBe," (Data2VecText model)"),VBe.forEach(t),JIo=i(W),jb=n(W,"LI",{});var XBe=s(jb);wpe=n(XBe,"STRONG",{});var V0t=s(wpe);YIo=r(V0t,"electra"),V0t.forEach(t),KIo=r(XBe," \u2014 "),nX=n(XBe,"A",{href:!0});var X0t=s(nX);ZIo=r(X0t,"ElectraForCausalLM"),X0t.forEach(t),eNo=r(XBe," (ELECTRA model)"),XBe.forEach(t),oNo=i(W),Db=n(W,"LI",{});var zBe=s(Db);Ape=n(zBe,"STRONG",{});var z0t=s(Ape);rNo=r(z0t,"gpt2"),z0t.forEach(t),tNo=r(zBe," \u2014 "),sX=n(zBe,"A",{href:!0});var W0t=s(sX);aNo=r(W0t,"GPT2LMHeadModel"),W0t.forEach(t),nNo=r(zBe," (OpenAI GPT-2 model)"),zBe.forEach(t),sNo=i(W),Gb=n(W,"LI",{});var WBe=s(Gb);Lpe=n(WBe,"STRONG",{});var Q0t=s(Lpe);lNo=r(Q0t,"gpt_neo"),Q0t.forEach(t),iNo=r(WBe," \u2014 "),lX=n(WBe,"A",{href:!0});var U0t=s(lX);dNo=r(U0t,"GPTNeoForCausalLM"),U0t.forEach(t),cNo=r(WBe," (GPT Neo model)"),WBe.forEach(t),mNo=i(W),Ob=n(W,"LI",{});var QBe=s(Ob);ype=n(QBe,"STRONG",{});var H0t=s(ype);fNo=r(H0t,"gpt_neox"),H0t.forEach(t),gNo=r(QBe," \u2014 "),iX=n(QBe,"A",{href:!0});var J0t=s(iX);hNo=r(J0t,"GPTNeoXForCausalLM"),J0t.forEach(t),uNo=r(QBe," (GPT NeoX model)"),QBe.forEach(t),pNo=i(W),Vb=n(W,"LI",{});var UBe=s(Vb);xpe=n(UBe,"STRONG",{});var Y0t=s(xpe);_No=r(Y0t,"gptj"),Y0t.forEach(t),bNo=r(UBe," \u2014 "),dX=n(UBe,"A",{href:!0});var K0t=s(dX);vNo=r(K0t,"GPTJForCausalLM"),K0t.forEach(t),FNo=r(UBe," (GPT-J model)"),UBe.forEach(t),TNo=i(W),Xb=n(W,"LI",{});var HBe=s(Xb);$pe=n(HBe,"STRONG",{});var Z0t=s($pe);MNo=r(Z0t,"marian"),Z0t.forEach(t),ENo=r(HBe," \u2014 "),cX=n(HBe,"A",{href:!0});var ewt=s(cX);CNo=r(ewt,"MarianForCausalLM"),ewt.forEach(t),wNo=r(HBe," (Marian model)"),HBe.forEach(t),ANo=i(W),zb=n(W,"LI",{});var JBe=s(zb);kpe=n(JBe,"STRONG",{});var owt=s(kpe);LNo=r(owt,"mbart"),owt.forEach(t),yNo=r(JBe," \u2014 "),mX=n(JBe,"A",{href:!0});var rwt=s(mX);xNo=r(rwt,"MBartForCausalLM"),rwt.forEach(t),$No=r(JBe," (mBART model)"),JBe.forEach(t),kNo=i(W),Wb=n(W,"LI",{});var YBe=s(Wb);Spe=n(YBe,"STRONG",{});var twt=s(Spe);SNo=r(twt,"megatron-bert"),twt.forEach(t),RNo=r(YBe," \u2014 "),fX=n(YBe,"A",{href:!0});var awt=s(fX);PNo=r(awt,"MegatronBertForCausalLM"),awt.forEach(t),BNo=r(YBe," (Megatron-BERT model)"),YBe.forEach(t),INo=i(W),Qb=n(W,"LI",{});var KBe=s(Qb);Rpe=n(KBe,"STRONG",{});var nwt=s(Rpe);NNo=r(nwt,"mvp"),nwt.forEach(t),qNo=r(KBe," \u2014 "),gX=n(KBe,"A",{href:!0});var swt=s(gX);jNo=r(swt,"MvpForCausalLM"),swt.forEach(t),DNo=r(KBe," (MVP model)"),KBe.forEach(t),GNo=i(W),Ub=n(W,"LI",{});var ZBe=s(Ub);Ppe=n(ZBe,"STRONG",{});var lwt=s(Ppe);ONo=r(lwt,"openai-gpt"),lwt.forEach(t),VNo=r(ZBe," \u2014 "),hX=n(ZBe,"A",{href:!0});var iwt=s(hX);XNo=r(iwt,"OpenAIGPTLMHeadModel"),iwt.forEach(t),zNo=r(ZBe," (OpenAI GPT model)"),ZBe.forEach(t),WNo=i(W),Hb=n(W,"LI",{});var eIe=s(Hb);Bpe=n(eIe,"STRONG",{});var dwt=s(Bpe);QNo=r(dwt,"opt"),dwt.forEach(t),UNo=r(eIe," \u2014 "),uX=n(eIe,"A",{href:!0});var cwt=s(uX);HNo=r(cwt,"OPTForCausalLM"),cwt.forEach(t),JNo=r(eIe," (OPT model)"),eIe.forEach(t),YNo=i(W),Jb=n(W,"LI",{});var oIe=s(Jb);Ipe=n(oIe,"STRONG",{});var mwt=s(Ipe);KNo=r(mwt,"pegasus"),mwt.forEach(t),ZNo=r(oIe," \u2014 "),pX=n(oIe,"A",{href:!0});var fwt=s(pX);eqo=r(fwt,"PegasusForCausalLM"),fwt.forEach(t),oqo=r(oIe," (Pegasus model)"),oIe.forEach(t),rqo=i(W),Yb=n(W,"LI",{});var rIe=s(Yb);Npe=n(rIe,"STRONG",{});var gwt=s(Npe);tqo=r(gwt,"plbart"),gwt.forEach(t),aqo=r(rIe," \u2014 "),_X=n(rIe,"A",{href:!0});var hwt=s(_X);nqo=r(hwt,"PLBartForCausalLM"),hwt.forEach(t),sqo=r(rIe," (PLBart model)"),rIe.forEach(t),lqo=i(W),Kb=n(W,"LI",{});var tIe=s(Kb);qpe=n(tIe,"STRONG",{});var uwt=s(qpe);iqo=r(uwt,"prophetnet"),uwt.forEach(t),dqo=r(tIe," \u2014 "),bX=n(tIe,"A",{href:!0});var pwt=s(bX);cqo=r(pwt,"ProphetNetForCausalLM"),pwt.forEach(t),mqo=r(tIe," (ProphetNet model)"),tIe.forEach(t),fqo=i(W),Zb=n(W,"LI",{});var aIe=s(Zb);jpe=n(aIe,"STRONG",{});var _wt=s(jpe);gqo=r(_wt,"qdqbert"),_wt.forEach(t),hqo=r(aIe," \u2014 "),vX=n(aIe,"A",{href:!0});var bwt=s(vX);uqo=r(bwt,"QDQBertLMHeadModel"),bwt.forEach(t),pqo=r(aIe," (QDQBert model)"),aIe.forEach(t),_qo=i(W),ev=n(W,"LI",{});var nIe=s(ev);Dpe=n(nIe,"STRONG",{});var vwt=s(Dpe);bqo=r(vwt,"reformer"),vwt.forEach(t),vqo=r(nIe," \u2014 "),FX=n(nIe,"A",{href:!0});var Fwt=s(FX);Fqo=r(Fwt,"ReformerModelWithLMHead"),Fwt.forEach(t),Tqo=r(nIe," (Reformer model)"),nIe.forEach(t),Mqo=i(W),ov=n(W,"LI",{});var sIe=s(ov);Gpe=n(sIe,"STRONG",{});var Twt=s(Gpe);Eqo=r(Twt,"rembert"),Twt.forEach(t),Cqo=r(sIe," \u2014 "),TX=n(sIe,"A",{href:!0});var Mwt=s(TX);wqo=r(Mwt,"RemBertForCausalLM"),Mwt.forEach(t),Aqo=r(sIe," (RemBERT model)"),sIe.forEach(t),Lqo=i(W),rv=n(W,"LI",{});var lIe=s(rv);Ope=n(lIe,"STRONG",{});var Ewt=s(Ope);yqo=r(Ewt,"roberta"),Ewt.forEach(t),xqo=r(lIe," \u2014 "),MX=n(lIe,"A",{href:!0});var Cwt=s(MX);$qo=r(Cwt,"RobertaForCausalLM"),Cwt.forEach(t),kqo=r(lIe," (RoBERTa model)"),lIe.forEach(t),Sqo=i(W),tv=n(W,"LI",{});var iIe=s(tv);Vpe=n(iIe,"STRONG",{});var wwt=s(Vpe);Rqo=r(wwt,"roformer"),wwt.forEach(t),Pqo=r(iIe," \u2014 "),EX=n(iIe,"A",{href:!0});var Awt=s(EX);Bqo=r(Awt,"RoFormerForCausalLM"),Awt.forEach(t),Iqo=r(iIe," (RoFormer model)"),iIe.forEach(t),Nqo=i(W),av=n(W,"LI",{});var dIe=s(av);Xpe=n(dIe,"STRONG",{});var Lwt=s(Xpe);qqo=r(Lwt,"speech_to_text_2"),Lwt.forEach(t),jqo=r(dIe," \u2014 "),CX=n(dIe,"A",{href:!0});var ywt=s(CX);Dqo=r(ywt,"Speech2Text2ForCausalLM"),ywt.forEach(t),Gqo=r(dIe," (Speech2Text2 model)"),dIe.forEach(t),Oqo=i(W),nv=n(W,"LI",{});var cIe=s(nv);zpe=n(cIe,"STRONG",{});var xwt=s(zpe);Vqo=r(xwt,"transfo-xl"),xwt.forEach(t),Xqo=r(cIe," \u2014 "),wX=n(cIe,"A",{href:!0});var $wt=s(wX);zqo=r($wt,"TransfoXLLMHeadModel"),$wt.forEach(t),Wqo=r(cIe," (Transformer-XL model)"),cIe.forEach(t),Qqo=i(W),sv=n(W,"LI",{});var mIe=s(sv);Wpe=n(mIe,"STRONG",{});var kwt=s(Wpe);Uqo=r(kwt,"trocr"),kwt.forEach(t),Hqo=r(mIe," \u2014 "),AX=n(mIe,"A",{href:!0});var Swt=s(AX);Jqo=r(Swt,"TrOCRForCausalLM"),Swt.forEach(t),Yqo=r(mIe," (TrOCR model)"),mIe.forEach(t),Kqo=i(W),lv=n(W,"LI",{});var fIe=s(lv);Qpe=n(fIe,"STRONG",{});var Rwt=s(Qpe);Zqo=r(Rwt,"xglm"),Rwt.forEach(t),ejo=r(fIe," \u2014 "),LX=n(fIe,"A",{href:!0});var Pwt=s(LX);ojo=r(Pwt,"XGLMForCausalLM"),Pwt.forEach(t),rjo=r(fIe," (XGLM model)"),fIe.forEach(t),tjo=i(W),iv=n(W,"LI",{});var gIe=s(iv);Upe=n(gIe,"STRONG",{});var Bwt=s(Upe);ajo=r(Bwt,"xlm"),Bwt.forEach(t),njo=r(gIe," \u2014 "),yX=n(gIe,"A",{href:!0});var Iwt=s(yX);sjo=r(Iwt,"XLMWithLMHeadModel"),Iwt.forEach(t),ljo=r(gIe," (XLM model)"),gIe.forEach(t),ijo=i(W),dv=n(W,"LI",{});var hIe=s(dv);Hpe=n(hIe,"STRONG",{});var Nwt=s(Hpe);djo=r(Nwt,"xlm-prophetnet"),Nwt.forEach(t),cjo=r(hIe," \u2014 "),xX=n(hIe,"A",{href:!0});var qwt=s(xX);mjo=r(qwt,"XLMProphetNetForCausalLM"),qwt.forEach(t),fjo=r(hIe," (XLM-ProphetNet model)"),hIe.forEach(t),gjo=i(W),cv=n(W,"LI",{});var uIe=s(cv);Jpe=n(uIe,"STRONG",{});var jwt=s(Jpe);hjo=r(jwt,"xlm-roberta"),jwt.forEach(t),ujo=r(uIe," \u2014 "),$X=n(uIe,"A",{href:!0});var Dwt=s($X);pjo=r(Dwt,"XLMRobertaForCausalLM"),Dwt.forEach(t),_jo=r(uIe," (XLM-RoBERTa model)"),uIe.forEach(t),bjo=i(W),mv=n(W,"LI",{});var pIe=s(mv);Ype=n(pIe,"STRONG",{});var Gwt=s(Ype);vjo=r(Gwt,"xlm-roberta-xl"),Gwt.forEach(t),Fjo=r(pIe," \u2014 "),kX=n(pIe,"A",{href:!0});var Owt=s(kX);Tjo=r(Owt,"XLMRobertaXLForCausalLM"),Owt.forEach(t),Mjo=r(pIe," (XLM-RoBERTa-XL model)"),pIe.forEach(t),Ejo=i(W),fv=n(W,"LI",{});var _Ie=s(fv);Kpe=n(_Ie,"STRONG",{});var Vwt=s(Kpe);Cjo=r(Vwt,"xlnet"),Vwt.forEach(t),wjo=r(_Ie," \u2014 "),SX=n(_Ie,"A",{href:!0});var Xwt=s(SX);Ajo=r(Xwt,"XLNetLMHeadModel"),Xwt.forEach(t),Ljo=r(_Ie," (XLNet model)"),_Ie.forEach(t),W.forEach(t),yjo=i(ua),gv=n(ua,"P",{});var bIe=s(gv);xjo=r(bIe,"The model is set in evaluation mode by default using "),Zpe=n(bIe,"CODE",{});var zwt=s(Zpe);$jo=r(zwt,"model.eval()"),zwt.forEach(t),kjo=r(bIe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),e_e=n(bIe,"CODE",{});var Wwt=s(e_e);Sjo=r(Wwt,"model.train()"),Wwt.forEach(t),bIe.forEach(t),Rjo=i(ua),T(hv.$$.fragment,ua),ua.forEach(t),pl.forEach(t),xUe=i(m),md=n(m,"H2",{class:!0});var jJe=s(md);uv=n(jJe,"A",{id:!0,class:!0,href:!0});var Qwt=s(uv);o_e=n(Qwt,"SPAN",{});var Uwt=s(o_e);T(s9.$$.fragment,Uwt),Uwt.forEach(t),Qwt.forEach(t),Pjo=i(jJe),r_e=n(jJe,"SPAN",{});var Hwt=s(r_e);Bjo=r(Hwt,"AutoModelForMaskedLM"),Hwt.forEach(t),jJe.forEach(t),$Ue=i(m),Bo=n(m,"DIV",{class:!0});var _l=s(Bo);T(l9.$$.fragment,_l),Ijo=i(_l),fd=n(_l,"P",{});var ane=s(fd);Njo=r(ane,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),RX=n(ane,"A",{href:!0});var Jwt=s(RX);qjo=r(Jwt,"from_pretrained()"),Jwt.forEach(t),jjo=r(ane," class method or the "),PX=n(ane,"A",{href:!0});var Ywt=s(PX);Djo=r(Ywt,"from_config()"),Ywt.forEach(t),Gjo=r(ane,` class
method.`),ane.forEach(t),Ojo=i(_l),i9=n(_l,"P",{});var DJe=s(i9);Vjo=r(DJe,"This class cannot be instantiated directly using "),t_e=n(DJe,"CODE",{});var Kwt=s(t_e);Xjo=r(Kwt,"__init__()"),Kwt.forEach(t),zjo=r(DJe," (throws an error)."),DJe.forEach(t),Wjo=i(_l),ut=n(_l,"DIV",{class:!0});var CL=s(ut);T(d9.$$.fragment,CL),Qjo=i(CL),a_e=n(CL,"P",{});var Zwt=s(a_e);Ujo=r(Zwt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Zwt.forEach(t),Hjo=i(CL),gd=n(CL,"P",{});var nne=s(gd);Jjo=r(nne,`Note:
Loading a model from its configuration file does `),n_e=n(nne,"STRONG",{});var e6t=s(n_e);Yjo=r(e6t,"not"),e6t.forEach(t),Kjo=r(nne,` load the model weights. It only affects the
model\u2019s configuration. Use `),BX=n(nne,"A",{href:!0});var o6t=s(BX);Zjo=r(o6t,"from_pretrained()"),o6t.forEach(t),eDo=r(nne," to load the model weights."),nne.forEach(t),oDo=i(CL),T(pv.$$.fragment,CL),CL.forEach(t),rDo=i(_l),eo=n(_l,"DIV",{class:!0});var pa=s(eo);T(c9.$$.fragment,pa),tDo=i(pa),s_e=n(pa,"P",{});var r6t=s(s_e);aDo=r(r6t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),r6t.forEach(t),nDo=i(pa),Wa=n(pa,"P",{});var wL=s(Wa);sDo=r(wL,"The model class to instantiate is selected based on the "),l_e=n(wL,"CODE",{});var t6t=s(l_e);lDo=r(t6t,"model_type"),t6t.forEach(t),iDo=r(wL,` property of the config object (either
passed as an argument or loaded from `),i_e=n(wL,"CODE",{});var a6t=s(i_e);dDo=r(a6t,"pretrained_model_name_or_path"),a6t.forEach(t),cDo=r(wL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),d_e=n(wL,"CODE",{});var n6t=s(d_e);mDo=r(n6t,"pretrained_model_name_or_path"),n6t.forEach(t),fDo=r(wL,":"),wL.forEach(t),gDo=i(pa),U=n(pa,"UL",{});var Y=s(U);_v=n(Y,"LI",{});var vIe=s(_v);c_e=n(vIe,"STRONG",{});var s6t=s(c_e);hDo=r(s6t,"albert"),s6t.forEach(t),uDo=r(vIe," \u2014 "),IX=n(vIe,"A",{href:!0});var l6t=s(IX);pDo=r(l6t,"AlbertForMaskedLM"),l6t.forEach(t),_Do=r(vIe," (ALBERT model)"),vIe.forEach(t),bDo=i(Y),bv=n(Y,"LI",{});var FIe=s(bv);m_e=n(FIe,"STRONG",{});var i6t=s(m_e);vDo=r(i6t,"bart"),i6t.forEach(t),FDo=r(FIe," \u2014 "),NX=n(FIe,"A",{href:!0});var d6t=s(NX);TDo=r(d6t,"BartForConditionalGeneration"),d6t.forEach(t),MDo=r(FIe," (BART model)"),FIe.forEach(t),EDo=i(Y),vv=n(Y,"LI",{});var TIe=s(vv);f_e=n(TIe,"STRONG",{});var c6t=s(f_e);CDo=r(c6t,"bert"),c6t.forEach(t),wDo=r(TIe," \u2014 "),qX=n(TIe,"A",{href:!0});var m6t=s(qX);ADo=r(m6t,"BertForMaskedLM"),m6t.forEach(t),LDo=r(TIe," (BERT model)"),TIe.forEach(t),yDo=i(Y),Fv=n(Y,"LI",{});var MIe=s(Fv);g_e=n(MIe,"STRONG",{});var f6t=s(g_e);xDo=r(f6t,"big_bird"),f6t.forEach(t),$Do=r(MIe," \u2014 "),jX=n(MIe,"A",{href:!0});var g6t=s(jX);kDo=r(g6t,"BigBirdForMaskedLM"),g6t.forEach(t),SDo=r(MIe," (BigBird model)"),MIe.forEach(t),RDo=i(Y),Tv=n(Y,"LI",{});var EIe=s(Tv);h_e=n(EIe,"STRONG",{});var h6t=s(h_e);PDo=r(h6t,"camembert"),h6t.forEach(t),BDo=r(EIe," \u2014 "),DX=n(EIe,"A",{href:!0});var u6t=s(DX);IDo=r(u6t,"CamembertForMaskedLM"),u6t.forEach(t),NDo=r(EIe," (CamemBERT model)"),EIe.forEach(t),qDo=i(Y),Mv=n(Y,"LI",{});var CIe=s(Mv);u_e=n(CIe,"STRONG",{});var p6t=s(u_e);jDo=r(p6t,"convbert"),p6t.forEach(t),DDo=r(CIe," \u2014 "),GX=n(CIe,"A",{href:!0});var _6t=s(GX);GDo=r(_6t,"ConvBertForMaskedLM"),_6t.forEach(t),ODo=r(CIe," (ConvBERT model)"),CIe.forEach(t),VDo=i(Y),Ev=n(Y,"LI",{});var wIe=s(Ev);p_e=n(wIe,"STRONG",{});var b6t=s(p_e);XDo=r(b6t,"data2vec-text"),b6t.forEach(t),zDo=r(wIe," \u2014 "),OX=n(wIe,"A",{href:!0});var v6t=s(OX);WDo=r(v6t,"Data2VecTextForMaskedLM"),v6t.forEach(t),QDo=r(wIe," (Data2VecText model)"),wIe.forEach(t),UDo=i(Y),Cv=n(Y,"LI",{});var AIe=s(Cv);__e=n(AIe,"STRONG",{});var F6t=s(__e);HDo=r(F6t,"deberta"),F6t.forEach(t),JDo=r(AIe," \u2014 "),VX=n(AIe,"A",{href:!0});var T6t=s(VX);YDo=r(T6t,"DebertaForMaskedLM"),T6t.forEach(t),KDo=r(AIe," (DeBERTa model)"),AIe.forEach(t),ZDo=i(Y),wv=n(Y,"LI",{});var LIe=s(wv);b_e=n(LIe,"STRONG",{});var M6t=s(b_e);eGo=r(M6t,"deberta-v2"),M6t.forEach(t),oGo=r(LIe," \u2014 "),XX=n(LIe,"A",{href:!0});var E6t=s(XX);rGo=r(E6t,"DebertaV2ForMaskedLM"),E6t.forEach(t),tGo=r(LIe," (DeBERTa-v2 model)"),LIe.forEach(t),aGo=i(Y),Av=n(Y,"LI",{});var yIe=s(Av);v_e=n(yIe,"STRONG",{});var C6t=s(v_e);nGo=r(C6t,"distilbert"),C6t.forEach(t),sGo=r(yIe," \u2014 "),zX=n(yIe,"A",{href:!0});var w6t=s(zX);lGo=r(w6t,"DistilBertForMaskedLM"),w6t.forEach(t),iGo=r(yIe," (DistilBERT model)"),yIe.forEach(t),dGo=i(Y),Lv=n(Y,"LI",{});var xIe=s(Lv);F_e=n(xIe,"STRONG",{});var A6t=s(F_e);cGo=r(A6t,"electra"),A6t.forEach(t),mGo=r(xIe," \u2014 "),WX=n(xIe,"A",{href:!0});var L6t=s(WX);fGo=r(L6t,"ElectraForMaskedLM"),L6t.forEach(t),gGo=r(xIe," (ELECTRA model)"),xIe.forEach(t),hGo=i(Y),yv=n(Y,"LI",{});var $Ie=s(yv);T_e=n($Ie,"STRONG",{});var y6t=s(T_e);uGo=r(y6t,"flaubert"),y6t.forEach(t),pGo=r($Ie," \u2014 "),QX=n($Ie,"A",{href:!0});var x6t=s(QX);_Go=r(x6t,"FlaubertWithLMHeadModel"),x6t.forEach(t),bGo=r($Ie," (FlauBERT model)"),$Ie.forEach(t),vGo=i(Y),xv=n(Y,"LI",{});var kIe=s(xv);M_e=n(kIe,"STRONG",{});var $6t=s(M_e);FGo=r($6t,"fnet"),$6t.forEach(t),TGo=r(kIe," \u2014 "),UX=n(kIe,"A",{href:!0});var k6t=s(UX);MGo=r(k6t,"FNetForMaskedLM"),k6t.forEach(t),EGo=r(kIe," (FNet model)"),kIe.forEach(t),CGo=i(Y),$v=n(Y,"LI",{});var SIe=s($v);E_e=n(SIe,"STRONG",{});var S6t=s(E_e);wGo=r(S6t,"funnel"),S6t.forEach(t),AGo=r(SIe," \u2014 "),HX=n(SIe,"A",{href:!0});var R6t=s(HX);LGo=r(R6t,"FunnelForMaskedLM"),R6t.forEach(t),yGo=r(SIe," (Funnel Transformer model)"),SIe.forEach(t),xGo=i(Y),kv=n(Y,"LI",{});var RIe=s(kv);C_e=n(RIe,"STRONG",{});var P6t=s(C_e);$Go=r(P6t,"ibert"),P6t.forEach(t),kGo=r(RIe," \u2014 "),JX=n(RIe,"A",{href:!0});var B6t=s(JX);SGo=r(B6t,"IBertForMaskedLM"),B6t.forEach(t),RGo=r(RIe," (I-BERT model)"),RIe.forEach(t),PGo=i(Y),Sv=n(Y,"LI",{});var PIe=s(Sv);w_e=n(PIe,"STRONG",{});var I6t=s(w_e);BGo=r(I6t,"layoutlm"),I6t.forEach(t),IGo=r(PIe," \u2014 "),YX=n(PIe,"A",{href:!0});var N6t=s(YX);NGo=r(N6t,"LayoutLMForMaskedLM"),N6t.forEach(t),qGo=r(PIe," (LayoutLM model)"),PIe.forEach(t),jGo=i(Y),Rv=n(Y,"LI",{});var BIe=s(Rv);A_e=n(BIe,"STRONG",{});var q6t=s(A_e);DGo=r(q6t,"longformer"),q6t.forEach(t),GGo=r(BIe," \u2014 "),KX=n(BIe,"A",{href:!0});var j6t=s(KX);OGo=r(j6t,"LongformerForMaskedLM"),j6t.forEach(t),VGo=r(BIe," (Longformer model)"),BIe.forEach(t),XGo=i(Y),Pv=n(Y,"LI",{});var IIe=s(Pv);L_e=n(IIe,"STRONG",{});var D6t=s(L_e);zGo=r(D6t,"luke"),D6t.forEach(t),WGo=r(IIe," \u2014 "),ZX=n(IIe,"A",{href:!0});var G6t=s(ZX);QGo=r(G6t,"LukeForMaskedLM"),G6t.forEach(t),UGo=r(IIe," (LUKE model)"),IIe.forEach(t),HGo=i(Y),Bv=n(Y,"LI",{});var NIe=s(Bv);y_e=n(NIe,"STRONG",{});var O6t=s(y_e);JGo=r(O6t,"mbart"),O6t.forEach(t),YGo=r(NIe," \u2014 "),ez=n(NIe,"A",{href:!0});var V6t=s(ez);KGo=r(V6t,"MBartForConditionalGeneration"),V6t.forEach(t),ZGo=r(NIe," (mBART model)"),NIe.forEach(t),eOo=i(Y),Iv=n(Y,"LI",{});var qIe=s(Iv);x_e=n(qIe,"STRONG",{});var X6t=s(x_e);oOo=r(X6t,"megatron-bert"),X6t.forEach(t),rOo=r(qIe," \u2014 "),oz=n(qIe,"A",{href:!0});var z6t=s(oz);tOo=r(z6t,"MegatronBertForMaskedLM"),z6t.forEach(t),aOo=r(qIe," (Megatron-BERT model)"),qIe.forEach(t),nOo=i(Y),Nv=n(Y,"LI",{});var jIe=s(Nv);$_e=n(jIe,"STRONG",{});var W6t=s($_e);sOo=r(W6t,"mobilebert"),W6t.forEach(t),lOo=r(jIe," \u2014 "),rz=n(jIe,"A",{href:!0});var Q6t=s(rz);iOo=r(Q6t,"MobileBertForMaskedLM"),Q6t.forEach(t),dOo=r(jIe," (MobileBERT model)"),jIe.forEach(t),cOo=i(Y),qv=n(Y,"LI",{});var DIe=s(qv);k_e=n(DIe,"STRONG",{});var U6t=s(k_e);mOo=r(U6t,"mpnet"),U6t.forEach(t),fOo=r(DIe," \u2014 "),tz=n(DIe,"A",{href:!0});var H6t=s(tz);gOo=r(H6t,"MPNetForMaskedLM"),H6t.forEach(t),hOo=r(DIe," (MPNet model)"),DIe.forEach(t),uOo=i(Y),jv=n(Y,"LI",{});var GIe=s(jv);S_e=n(GIe,"STRONG",{});var J6t=s(S_e);pOo=r(J6t,"mvp"),J6t.forEach(t),_Oo=r(GIe," \u2014 "),az=n(GIe,"A",{href:!0});var Y6t=s(az);bOo=r(Y6t,"MvpForConditionalGeneration"),Y6t.forEach(t),vOo=r(GIe," (MVP model)"),GIe.forEach(t),FOo=i(Y),Dv=n(Y,"LI",{});var OIe=s(Dv);R_e=n(OIe,"STRONG",{});var K6t=s(R_e);TOo=r(K6t,"nezha"),K6t.forEach(t),MOo=r(OIe," \u2014 "),nz=n(OIe,"A",{href:!0});var Z6t=s(nz);EOo=r(Z6t,"NezhaForMaskedLM"),Z6t.forEach(t),COo=r(OIe," (Nezha model)"),OIe.forEach(t),wOo=i(Y),Gv=n(Y,"LI",{});var VIe=s(Gv);P_e=n(VIe,"STRONG",{});var eAt=s(P_e);AOo=r(eAt,"nystromformer"),eAt.forEach(t),LOo=r(VIe," \u2014 "),sz=n(VIe,"A",{href:!0});var oAt=s(sz);yOo=r(oAt,"NystromformerForMaskedLM"),oAt.forEach(t),xOo=r(VIe," (Nystr\xF6mformer model)"),VIe.forEach(t),$Oo=i(Y),Ov=n(Y,"LI",{});var XIe=s(Ov);B_e=n(XIe,"STRONG",{});var rAt=s(B_e);kOo=r(rAt,"perceiver"),rAt.forEach(t),SOo=r(XIe," \u2014 "),lz=n(XIe,"A",{href:!0});var tAt=s(lz);ROo=r(tAt,"PerceiverForMaskedLM"),tAt.forEach(t),POo=r(XIe," (Perceiver model)"),XIe.forEach(t),BOo=i(Y),Vv=n(Y,"LI",{});var zIe=s(Vv);I_e=n(zIe,"STRONG",{});var aAt=s(I_e);IOo=r(aAt,"qdqbert"),aAt.forEach(t),NOo=r(zIe," \u2014 "),iz=n(zIe,"A",{href:!0});var nAt=s(iz);qOo=r(nAt,"QDQBertForMaskedLM"),nAt.forEach(t),jOo=r(zIe," (QDQBert model)"),zIe.forEach(t),DOo=i(Y),Xv=n(Y,"LI",{});var WIe=s(Xv);N_e=n(WIe,"STRONG",{});var sAt=s(N_e);GOo=r(sAt,"reformer"),sAt.forEach(t),OOo=r(WIe," \u2014 "),dz=n(WIe,"A",{href:!0});var lAt=s(dz);VOo=r(lAt,"ReformerForMaskedLM"),lAt.forEach(t),XOo=r(WIe," (Reformer model)"),WIe.forEach(t),zOo=i(Y),zv=n(Y,"LI",{});var QIe=s(zv);q_e=n(QIe,"STRONG",{});var iAt=s(q_e);WOo=r(iAt,"rembert"),iAt.forEach(t),QOo=r(QIe," \u2014 "),cz=n(QIe,"A",{href:!0});var dAt=s(cz);UOo=r(dAt,"RemBertForMaskedLM"),dAt.forEach(t),HOo=r(QIe," (RemBERT model)"),QIe.forEach(t),JOo=i(Y),Wv=n(Y,"LI",{});var UIe=s(Wv);j_e=n(UIe,"STRONG",{});var cAt=s(j_e);YOo=r(cAt,"roberta"),cAt.forEach(t),KOo=r(UIe," \u2014 "),mz=n(UIe,"A",{href:!0});var mAt=s(mz);ZOo=r(mAt,"RobertaForMaskedLM"),mAt.forEach(t),eVo=r(UIe," (RoBERTa model)"),UIe.forEach(t),oVo=i(Y),Qv=n(Y,"LI",{});var HIe=s(Qv);D_e=n(HIe,"STRONG",{});var fAt=s(D_e);rVo=r(fAt,"roformer"),fAt.forEach(t),tVo=r(HIe," \u2014 "),fz=n(HIe,"A",{href:!0});var gAt=s(fz);aVo=r(gAt,"RoFormerForMaskedLM"),gAt.forEach(t),nVo=r(HIe," (RoFormer model)"),HIe.forEach(t),sVo=i(Y),Uv=n(Y,"LI",{});var JIe=s(Uv);G_e=n(JIe,"STRONG",{});var hAt=s(G_e);lVo=r(hAt,"squeezebert"),hAt.forEach(t),iVo=r(JIe," \u2014 "),gz=n(JIe,"A",{href:!0});var uAt=s(gz);dVo=r(uAt,"SqueezeBertForMaskedLM"),uAt.forEach(t),cVo=r(JIe," (SqueezeBERT model)"),JIe.forEach(t),mVo=i(Y),Hv=n(Y,"LI",{});var YIe=s(Hv);O_e=n(YIe,"STRONG",{});var pAt=s(O_e);fVo=r(pAt,"tapas"),pAt.forEach(t),gVo=r(YIe," \u2014 "),hz=n(YIe,"A",{href:!0});var _At=s(hz);hVo=r(_At,"TapasForMaskedLM"),_At.forEach(t),uVo=r(YIe," (TAPAS model)"),YIe.forEach(t),pVo=i(Y),Jv=n(Y,"LI",{});var KIe=s(Jv);V_e=n(KIe,"STRONG",{});var bAt=s(V_e);_Vo=r(bAt,"wav2vec2"),bAt.forEach(t),bVo=r(KIe," \u2014 "),X_e=n(KIe,"CODE",{});var vAt=s(X_e);vVo=r(vAt,"Wav2Vec2ForMaskedLM"),vAt.forEach(t),FVo=r(KIe," (Wav2Vec2 model)"),KIe.forEach(t),TVo=i(Y),Yv=n(Y,"LI",{});var ZIe=s(Yv);z_e=n(ZIe,"STRONG",{});var FAt=s(z_e);MVo=r(FAt,"xlm"),FAt.forEach(t),EVo=r(ZIe," \u2014 "),uz=n(ZIe,"A",{href:!0});var TAt=s(uz);CVo=r(TAt,"XLMWithLMHeadModel"),TAt.forEach(t),wVo=r(ZIe," (XLM model)"),ZIe.forEach(t),AVo=i(Y),Kv=n(Y,"LI",{});var eNe=s(Kv);W_e=n(eNe,"STRONG",{});var MAt=s(W_e);LVo=r(MAt,"xlm-roberta"),MAt.forEach(t),yVo=r(eNe," \u2014 "),pz=n(eNe,"A",{href:!0});var EAt=s(pz);xVo=r(EAt,"XLMRobertaForMaskedLM"),EAt.forEach(t),$Vo=r(eNe," (XLM-RoBERTa model)"),eNe.forEach(t),kVo=i(Y),Zv=n(Y,"LI",{});var oNe=s(Zv);Q_e=n(oNe,"STRONG",{});var CAt=s(Q_e);SVo=r(CAt,"xlm-roberta-xl"),CAt.forEach(t),RVo=r(oNe," \u2014 "),_z=n(oNe,"A",{href:!0});var wAt=s(_z);PVo=r(wAt,"XLMRobertaXLForMaskedLM"),wAt.forEach(t),BVo=r(oNe," (XLM-RoBERTa-XL model)"),oNe.forEach(t),IVo=i(Y),e1=n(Y,"LI",{});var rNe=s(e1);U_e=n(rNe,"STRONG",{});var AAt=s(U_e);NVo=r(AAt,"yoso"),AAt.forEach(t),qVo=r(rNe," \u2014 "),bz=n(rNe,"A",{href:!0});var LAt=s(bz);jVo=r(LAt,"YosoForMaskedLM"),LAt.forEach(t),DVo=r(rNe," (YOSO model)"),rNe.forEach(t),Y.forEach(t),GVo=i(pa),o1=n(pa,"P",{});var tNe=s(o1);OVo=r(tNe,"The model is set in evaluation mode by default using "),H_e=n(tNe,"CODE",{});var yAt=s(H_e);VVo=r(yAt,"model.eval()"),yAt.forEach(t),XVo=r(tNe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),J_e=n(tNe,"CODE",{});var xAt=s(J_e);zVo=r(xAt,"model.train()"),xAt.forEach(t),tNe.forEach(t),WVo=i(pa),T(r1.$$.fragment,pa),pa.forEach(t),_l.forEach(t),kUe=i(m),hd=n(m,"H2",{class:!0});var GJe=s(hd);t1=n(GJe,"A",{id:!0,class:!0,href:!0});var $At=s(t1);Y_e=n($At,"SPAN",{});var kAt=s(Y_e);T(m9.$$.fragment,kAt),kAt.forEach(t),$At.forEach(t),QVo=i(GJe),K_e=n(GJe,"SPAN",{});var SAt=s(K_e);UVo=r(SAt,"AutoModelForSeq2SeqLM"),SAt.forEach(t),GJe.forEach(t),SUe=i(m),Io=n(m,"DIV",{class:!0});var bl=s(Io);T(f9.$$.fragment,bl),HVo=i(bl),ud=n(bl,"P",{});var sne=s(ud);JVo=r(sne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),vz=n(sne,"A",{href:!0});var RAt=s(vz);YVo=r(RAt,"from_pretrained()"),RAt.forEach(t),KVo=r(sne," class method or the "),Fz=n(sne,"A",{href:!0});var PAt=s(Fz);ZVo=r(PAt,"from_config()"),PAt.forEach(t),eXo=r(sne,` class
method.`),sne.forEach(t),oXo=i(bl),g9=n(bl,"P",{});var OJe=s(g9);rXo=r(OJe,"This class cannot be instantiated directly using "),Z_e=n(OJe,"CODE",{});var BAt=s(Z_e);tXo=r(BAt,"__init__()"),BAt.forEach(t),aXo=r(OJe," (throws an error)."),OJe.forEach(t),nXo=i(bl),pt=n(bl,"DIV",{class:!0});var AL=s(pt);T(h9.$$.fragment,AL),sXo=i(AL),e2e=n(AL,"P",{});var IAt=s(e2e);lXo=r(IAt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),IAt.forEach(t),iXo=i(AL),pd=n(AL,"P",{});var lne=s(pd);dXo=r(lne,`Note:
Loading a model from its configuration file does `),o2e=n(lne,"STRONG",{});var NAt=s(o2e);cXo=r(NAt,"not"),NAt.forEach(t),mXo=r(lne,` load the model weights. It only affects the
model\u2019s configuration. Use `),Tz=n(lne,"A",{href:!0});var qAt=s(Tz);fXo=r(qAt,"from_pretrained()"),qAt.forEach(t),gXo=r(lne," to load the model weights."),lne.forEach(t),hXo=i(AL),T(a1.$$.fragment,AL),AL.forEach(t),uXo=i(bl),oo=n(bl,"DIV",{class:!0});var _a=s(oo);T(u9.$$.fragment,_a),pXo=i(_a),r2e=n(_a,"P",{});var jAt=s(r2e);_Xo=r(jAt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),jAt.forEach(t),bXo=i(_a),Qa=n(_a,"P",{});var LL=s(Qa);vXo=r(LL,"The model class to instantiate is selected based on the "),t2e=n(LL,"CODE",{});var DAt=s(t2e);FXo=r(DAt,"model_type"),DAt.forEach(t),TXo=r(LL,` property of the config object (either
passed as an argument or loaded from `),a2e=n(LL,"CODE",{});var GAt=s(a2e);MXo=r(GAt,"pretrained_model_name_or_path"),GAt.forEach(t),EXo=r(LL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n2e=n(LL,"CODE",{});var OAt=s(n2e);CXo=r(OAt,"pretrained_model_name_or_path"),OAt.forEach(t),wXo=r(LL,":"),LL.forEach(t),AXo=i(_a),he=n(_a,"UL",{});var _e=s(he);n1=n(_e,"LI",{});var aNe=s(n1);s2e=n(aNe,"STRONG",{});var VAt=s(s2e);LXo=r(VAt,"bart"),VAt.forEach(t),yXo=r(aNe," \u2014 "),Mz=n(aNe,"A",{href:!0});var XAt=s(Mz);xXo=r(XAt,"BartForConditionalGeneration"),XAt.forEach(t),$Xo=r(aNe," (BART model)"),aNe.forEach(t),kXo=i(_e),s1=n(_e,"LI",{});var nNe=s(s1);l2e=n(nNe,"STRONG",{});var zAt=s(l2e);SXo=r(zAt,"bigbird_pegasus"),zAt.forEach(t),RXo=r(nNe," \u2014 "),Ez=n(nNe,"A",{href:!0});var WAt=s(Ez);PXo=r(WAt,"BigBirdPegasusForConditionalGeneration"),WAt.forEach(t),BXo=r(nNe," (BigBird-Pegasus model)"),nNe.forEach(t),IXo=i(_e),l1=n(_e,"LI",{});var sNe=s(l1);i2e=n(sNe,"STRONG",{});var QAt=s(i2e);NXo=r(QAt,"blenderbot"),QAt.forEach(t),qXo=r(sNe," \u2014 "),Cz=n(sNe,"A",{href:!0});var UAt=s(Cz);jXo=r(UAt,"BlenderbotForConditionalGeneration"),UAt.forEach(t),DXo=r(sNe," (Blenderbot model)"),sNe.forEach(t),GXo=i(_e),i1=n(_e,"LI",{});var lNe=s(i1);d2e=n(lNe,"STRONG",{});var HAt=s(d2e);OXo=r(HAt,"blenderbot-small"),HAt.forEach(t),VXo=r(lNe," \u2014 "),wz=n(lNe,"A",{href:!0});var JAt=s(wz);XXo=r(JAt,"BlenderbotSmallForConditionalGeneration"),JAt.forEach(t),zXo=r(lNe," (BlenderbotSmall model)"),lNe.forEach(t),WXo=i(_e),d1=n(_e,"LI",{});var iNe=s(d1);c2e=n(iNe,"STRONG",{});var YAt=s(c2e);QXo=r(YAt,"encoder-decoder"),YAt.forEach(t),UXo=r(iNe," \u2014 "),Az=n(iNe,"A",{href:!0});var KAt=s(Az);HXo=r(KAt,"EncoderDecoderModel"),KAt.forEach(t),JXo=r(iNe," (Encoder decoder model)"),iNe.forEach(t),YXo=i(_e),c1=n(_e,"LI",{});var dNe=s(c1);m2e=n(dNe,"STRONG",{});var ZAt=s(m2e);KXo=r(ZAt,"fsmt"),ZAt.forEach(t),ZXo=r(dNe," \u2014 "),Lz=n(dNe,"A",{href:!0});var e7t=s(Lz);ezo=r(e7t,"FSMTForConditionalGeneration"),e7t.forEach(t),ozo=r(dNe," (FairSeq Machine-Translation model)"),dNe.forEach(t),rzo=i(_e),m1=n(_e,"LI",{});var cNe=s(m1);f2e=n(cNe,"STRONG",{});var o7t=s(f2e);tzo=r(o7t,"led"),o7t.forEach(t),azo=r(cNe," \u2014 "),yz=n(cNe,"A",{href:!0});var r7t=s(yz);nzo=r(r7t,"LEDForConditionalGeneration"),r7t.forEach(t),szo=r(cNe," (LED model)"),cNe.forEach(t),lzo=i(_e),f1=n(_e,"LI",{});var mNe=s(f1);g2e=n(mNe,"STRONG",{});var t7t=s(g2e);izo=r(t7t,"longt5"),t7t.forEach(t),dzo=r(mNe," \u2014 "),xz=n(mNe,"A",{href:!0});var a7t=s(xz);czo=r(a7t,"LongT5ForConditionalGeneration"),a7t.forEach(t),mzo=r(mNe," (LongT5 model)"),mNe.forEach(t),fzo=i(_e),g1=n(_e,"LI",{});var fNe=s(g1);h2e=n(fNe,"STRONG",{});var n7t=s(h2e);gzo=r(n7t,"m2m_100"),n7t.forEach(t),hzo=r(fNe," \u2014 "),$z=n(fNe,"A",{href:!0});var s7t=s($z);uzo=r(s7t,"M2M100ForConditionalGeneration"),s7t.forEach(t),pzo=r(fNe," (M2M100 model)"),fNe.forEach(t),_zo=i(_e),h1=n(_e,"LI",{});var gNe=s(h1);u2e=n(gNe,"STRONG",{});var l7t=s(u2e);bzo=r(l7t,"marian"),l7t.forEach(t),vzo=r(gNe," \u2014 "),kz=n(gNe,"A",{href:!0});var i7t=s(kz);Fzo=r(i7t,"MarianMTModel"),i7t.forEach(t),Tzo=r(gNe," (Marian model)"),gNe.forEach(t),Mzo=i(_e),u1=n(_e,"LI",{});var hNe=s(u1);p2e=n(hNe,"STRONG",{});var d7t=s(p2e);Ezo=r(d7t,"mbart"),d7t.forEach(t),Czo=r(hNe," \u2014 "),Sz=n(hNe,"A",{href:!0});var c7t=s(Sz);wzo=r(c7t,"MBartForConditionalGeneration"),c7t.forEach(t),Azo=r(hNe," (mBART model)"),hNe.forEach(t),Lzo=i(_e),p1=n(_e,"LI",{});var uNe=s(p1);_2e=n(uNe,"STRONG",{});var m7t=s(_2e);yzo=r(m7t,"mt5"),m7t.forEach(t),xzo=r(uNe," \u2014 "),Rz=n(uNe,"A",{href:!0});var f7t=s(Rz);$zo=r(f7t,"MT5ForConditionalGeneration"),f7t.forEach(t),kzo=r(uNe," (MT5 model)"),uNe.forEach(t),Szo=i(_e),_1=n(_e,"LI",{});var pNe=s(_1);b2e=n(pNe,"STRONG",{});var g7t=s(b2e);Rzo=r(g7t,"mvp"),g7t.forEach(t),Pzo=r(pNe," \u2014 "),Pz=n(pNe,"A",{href:!0});var h7t=s(Pz);Bzo=r(h7t,"MvpForConditionalGeneration"),h7t.forEach(t),Izo=r(pNe," (MVP model)"),pNe.forEach(t),Nzo=i(_e),b1=n(_e,"LI",{});var _Ne=s(b1);v2e=n(_Ne,"STRONG",{});var u7t=s(v2e);qzo=r(u7t,"nllb"),u7t.forEach(t),jzo=r(_Ne," \u2014 "),Bz=n(_Ne,"A",{href:!0});var p7t=s(Bz);Dzo=r(p7t,"M2M100ForConditionalGeneration"),p7t.forEach(t),Gzo=r(_Ne," (NLLB model)"),_Ne.forEach(t),Ozo=i(_e),v1=n(_e,"LI",{});var bNe=s(v1);F2e=n(bNe,"STRONG",{});var _7t=s(F2e);Vzo=r(_7t,"pegasus"),_7t.forEach(t),Xzo=r(bNe," \u2014 "),Iz=n(bNe,"A",{href:!0});var b7t=s(Iz);zzo=r(b7t,"PegasusForConditionalGeneration"),b7t.forEach(t),Wzo=r(bNe," (Pegasus model)"),bNe.forEach(t),Qzo=i(_e),F1=n(_e,"LI",{});var vNe=s(F1);T2e=n(vNe,"STRONG",{});var v7t=s(T2e);Uzo=r(v7t,"plbart"),v7t.forEach(t),Hzo=r(vNe," \u2014 "),Nz=n(vNe,"A",{href:!0});var F7t=s(Nz);Jzo=r(F7t,"PLBartForConditionalGeneration"),F7t.forEach(t),Yzo=r(vNe," (PLBart model)"),vNe.forEach(t),Kzo=i(_e),T1=n(_e,"LI",{});var FNe=s(T1);M2e=n(FNe,"STRONG",{});var T7t=s(M2e);Zzo=r(T7t,"prophetnet"),T7t.forEach(t),eWo=r(FNe," \u2014 "),qz=n(FNe,"A",{href:!0});var M7t=s(qz);oWo=r(M7t,"ProphetNetForConditionalGeneration"),M7t.forEach(t),rWo=r(FNe," (ProphetNet model)"),FNe.forEach(t),tWo=i(_e),M1=n(_e,"LI",{});var TNe=s(M1);E2e=n(TNe,"STRONG",{});var E7t=s(E2e);aWo=r(E7t,"t5"),E7t.forEach(t),nWo=r(TNe," \u2014 "),jz=n(TNe,"A",{href:!0});var C7t=s(jz);sWo=r(C7t,"T5ForConditionalGeneration"),C7t.forEach(t),lWo=r(TNe," (T5 model)"),TNe.forEach(t),iWo=i(_e),E1=n(_e,"LI",{});var MNe=s(E1);C2e=n(MNe,"STRONG",{});var w7t=s(C2e);dWo=r(w7t,"xlm-prophetnet"),w7t.forEach(t),cWo=r(MNe," \u2014 "),Dz=n(MNe,"A",{href:!0});var A7t=s(Dz);mWo=r(A7t,"XLMProphetNetForConditionalGeneration"),A7t.forEach(t),fWo=r(MNe," (XLM-ProphetNet model)"),MNe.forEach(t),_e.forEach(t),gWo=i(_a),C1=n(_a,"P",{});var ENe=s(C1);hWo=r(ENe,"The model is set in evaluation mode by default using "),w2e=n(ENe,"CODE",{});var L7t=s(w2e);uWo=r(L7t,"model.eval()"),L7t.forEach(t),pWo=r(ENe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),A2e=n(ENe,"CODE",{});var y7t=s(A2e);_Wo=r(y7t,"model.train()"),y7t.forEach(t),ENe.forEach(t),bWo=i(_a),T(w1.$$.fragment,_a),_a.forEach(t),bl.forEach(t),RUe=i(m),_d=n(m,"H2",{class:!0});var VJe=s(_d);A1=n(VJe,"A",{id:!0,class:!0,href:!0});var x7t=s(A1);L2e=n(x7t,"SPAN",{});var $7t=s(L2e);T(p9.$$.fragment,$7t),$7t.forEach(t),x7t.forEach(t),vWo=i(VJe),y2e=n(VJe,"SPAN",{});var k7t=s(y2e);FWo=r(k7t,"AutoModelForSequenceClassification"),k7t.forEach(t),VJe.forEach(t),PUe=i(m),No=n(m,"DIV",{class:!0});var vl=s(No);T(_9.$$.fragment,vl),TWo=i(vl),bd=n(vl,"P",{});var ine=s(bd);MWo=r(ine,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Gz=n(ine,"A",{href:!0});var S7t=s(Gz);EWo=r(S7t,"from_pretrained()"),S7t.forEach(t),CWo=r(ine," class method or the "),Oz=n(ine,"A",{href:!0});var R7t=s(Oz);wWo=r(R7t,"from_config()"),R7t.forEach(t),AWo=r(ine,` class
method.`),ine.forEach(t),LWo=i(vl),b9=n(vl,"P",{});var XJe=s(b9);yWo=r(XJe,"This class cannot be instantiated directly using "),x2e=n(XJe,"CODE",{});var P7t=s(x2e);xWo=r(P7t,"__init__()"),P7t.forEach(t),$Wo=r(XJe," (throws an error)."),XJe.forEach(t),kWo=i(vl),_t=n(vl,"DIV",{class:!0});var yL=s(_t);T(v9.$$.fragment,yL),SWo=i(yL),$2e=n(yL,"P",{});var B7t=s($2e);RWo=r(B7t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),B7t.forEach(t),PWo=i(yL),vd=n(yL,"P",{});var dne=s(vd);BWo=r(dne,`Note:
Loading a model from its configuration file does `),k2e=n(dne,"STRONG",{});var I7t=s(k2e);IWo=r(I7t,"not"),I7t.forEach(t),NWo=r(dne,` load the model weights. It only affects the
model\u2019s configuration. Use `),Vz=n(dne,"A",{href:!0});var N7t=s(Vz);qWo=r(N7t,"from_pretrained()"),N7t.forEach(t),jWo=r(dne," to load the model weights."),dne.forEach(t),DWo=i(yL),T(L1.$$.fragment,yL),yL.forEach(t),GWo=i(vl),ro=n(vl,"DIV",{class:!0});var ba=s(ro);T(F9.$$.fragment,ba),OWo=i(ba),S2e=n(ba,"P",{});var q7t=s(S2e);VWo=r(q7t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),q7t.forEach(t),XWo=i(ba),Ua=n(ba,"P",{});var xL=s(Ua);zWo=r(xL,"The model class to instantiate is selected based on the "),R2e=n(xL,"CODE",{});var j7t=s(R2e);WWo=r(j7t,"model_type"),j7t.forEach(t),QWo=r(xL,` property of the config object (either
passed as an argument or loaded from `),P2e=n(xL,"CODE",{});var D7t=s(P2e);UWo=r(D7t,"pretrained_model_name_or_path"),D7t.forEach(t),HWo=r(xL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B2e=n(xL,"CODE",{});var G7t=s(B2e);JWo=r(G7t,"pretrained_model_name_or_path"),G7t.forEach(t),YWo=r(xL,":"),xL.forEach(t),KWo=i(ba),q=n(ba,"UL",{});var D=s(q);y1=n(D,"LI",{});var CNe=s(y1);I2e=n(CNe,"STRONG",{});var O7t=s(I2e);ZWo=r(O7t,"albert"),O7t.forEach(t),eQo=r(CNe," \u2014 "),Xz=n(CNe,"A",{href:!0});var V7t=s(Xz);oQo=r(V7t,"AlbertForSequenceClassification"),V7t.forEach(t),rQo=r(CNe," (ALBERT model)"),CNe.forEach(t),tQo=i(D),x1=n(D,"LI",{});var wNe=s(x1);N2e=n(wNe,"STRONG",{});var X7t=s(N2e);aQo=r(X7t,"bart"),X7t.forEach(t),nQo=r(wNe," \u2014 "),zz=n(wNe,"A",{href:!0});var z7t=s(zz);sQo=r(z7t,"BartForSequenceClassification"),z7t.forEach(t),lQo=r(wNe," (BART model)"),wNe.forEach(t),iQo=i(D),$1=n(D,"LI",{});var ANe=s($1);q2e=n(ANe,"STRONG",{});var W7t=s(q2e);dQo=r(W7t,"bert"),W7t.forEach(t),cQo=r(ANe," \u2014 "),Wz=n(ANe,"A",{href:!0});var Q7t=s(Wz);mQo=r(Q7t,"BertForSequenceClassification"),Q7t.forEach(t),fQo=r(ANe," (BERT model)"),ANe.forEach(t),gQo=i(D),k1=n(D,"LI",{});var LNe=s(k1);j2e=n(LNe,"STRONG",{});var U7t=s(j2e);hQo=r(U7t,"big_bird"),U7t.forEach(t),uQo=r(LNe," \u2014 "),Qz=n(LNe,"A",{href:!0});var H7t=s(Qz);pQo=r(H7t,"BigBirdForSequenceClassification"),H7t.forEach(t),_Qo=r(LNe," (BigBird model)"),LNe.forEach(t),bQo=i(D),S1=n(D,"LI",{});var yNe=s(S1);D2e=n(yNe,"STRONG",{});var J7t=s(D2e);vQo=r(J7t,"bigbird_pegasus"),J7t.forEach(t),FQo=r(yNe," \u2014 "),Uz=n(yNe,"A",{href:!0});var Y7t=s(Uz);TQo=r(Y7t,"BigBirdPegasusForSequenceClassification"),Y7t.forEach(t),MQo=r(yNe," (BigBird-Pegasus model)"),yNe.forEach(t),EQo=i(D),R1=n(D,"LI",{});var xNe=s(R1);G2e=n(xNe,"STRONG",{});var K7t=s(G2e);CQo=r(K7t,"bloom"),K7t.forEach(t),wQo=r(xNe," \u2014 "),Hz=n(xNe,"A",{href:!0});var Z7t=s(Hz);AQo=r(Z7t,"BloomForSequenceClassification"),Z7t.forEach(t),LQo=r(xNe," (BLOOM model)"),xNe.forEach(t),yQo=i(D),P1=n(D,"LI",{});var $Ne=s(P1);O2e=n($Ne,"STRONG",{});var eLt=s(O2e);xQo=r(eLt,"camembert"),eLt.forEach(t),$Qo=r($Ne," \u2014 "),Jz=n($Ne,"A",{href:!0});var oLt=s(Jz);kQo=r(oLt,"CamembertForSequenceClassification"),oLt.forEach(t),SQo=r($Ne," (CamemBERT model)"),$Ne.forEach(t),RQo=i(D),B1=n(D,"LI",{});var kNe=s(B1);V2e=n(kNe,"STRONG",{});var rLt=s(V2e);PQo=r(rLt,"canine"),rLt.forEach(t),BQo=r(kNe," \u2014 "),Yz=n(kNe,"A",{href:!0});var tLt=s(Yz);IQo=r(tLt,"CanineForSequenceClassification"),tLt.forEach(t),NQo=r(kNe," (CANINE model)"),kNe.forEach(t),qQo=i(D),I1=n(D,"LI",{});var SNe=s(I1);X2e=n(SNe,"STRONG",{});var aLt=s(X2e);jQo=r(aLt,"convbert"),aLt.forEach(t),DQo=r(SNe," \u2014 "),Kz=n(SNe,"A",{href:!0});var nLt=s(Kz);GQo=r(nLt,"ConvBertForSequenceClassification"),nLt.forEach(t),OQo=r(SNe," (ConvBERT model)"),SNe.forEach(t),VQo=i(D),N1=n(D,"LI",{});var RNe=s(N1);z2e=n(RNe,"STRONG",{});var sLt=s(z2e);XQo=r(sLt,"ctrl"),sLt.forEach(t),zQo=r(RNe," \u2014 "),Zz=n(RNe,"A",{href:!0});var lLt=s(Zz);WQo=r(lLt,"CTRLForSequenceClassification"),lLt.forEach(t),QQo=r(RNe," (CTRL model)"),RNe.forEach(t),UQo=i(D),q1=n(D,"LI",{});var PNe=s(q1);W2e=n(PNe,"STRONG",{});var iLt=s(W2e);HQo=r(iLt,"data2vec-text"),iLt.forEach(t),JQo=r(PNe," \u2014 "),eW=n(PNe,"A",{href:!0});var dLt=s(eW);YQo=r(dLt,"Data2VecTextForSequenceClassification"),dLt.forEach(t),KQo=r(PNe," (Data2VecText model)"),PNe.forEach(t),ZQo=i(D),j1=n(D,"LI",{});var BNe=s(j1);Q2e=n(BNe,"STRONG",{});var cLt=s(Q2e);eUo=r(cLt,"deberta"),cLt.forEach(t),oUo=r(BNe," \u2014 "),oW=n(BNe,"A",{href:!0});var mLt=s(oW);rUo=r(mLt,"DebertaForSequenceClassification"),mLt.forEach(t),tUo=r(BNe," (DeBERTa model)"),BNe.forEach(t),aUo=i(D),D1=n(D,"LI",{});var INe=s(D1);U2e=n(INe,"STRONG",{});var fLt=s(U2e);nUo=r(fLt,"deberta-v2"),fLt.forEach(t),sUo=r(INe," \u2014 "),rW=n(INe,"A",{href:!0});var gLt=s(rW);lUo=r(gLt,"DebertaV2ForSequenceClassification"),gLt.forEach(t),iUo=r(INe," (DeBERTa-v2 model)"),INe.forEach(t),dUo=i(D),G1=n(D,"LI",{});var NNe=s(G1);H2e=n(NNe,"STRONG",{});var hLt=s(H2e);cUo=r(hLt,"distilbert"),hLt.forEach(t),mUo=r(NNe," \u2014 "),tW=n(NNe,"A",{href:!0});var uLt=s(tW);fUo=r(uLt,"DistilBertForSequenceClassification"),uLt.forEach(t),gUo=r(NNe," (DistilBERT model)"),NNe.forEach(t),hUo=i(D),O1=n(D,"LI",{});var qNe=s(O1);J2e=n(qNe,"STRONG",{});var pLt=s(J2e);uUo=r(pLt,"electra"),pLt.forEach(t),pUo=r(qNe," \u2014 "),aW=n(qNe,"A",{href:!0});var _Lt=s(aW);_Uo=r(_Lt,"ElectraForSequenceClassification"),_Lt.forEach(t),bUo=r(qNe," (ELECTRA model)"),qNe.forEach(t),vUo=i(D),V1=n(D,"LI",{});var jNe=s(V1);Y2e=n(jNe,"STRONG",{});var bLt=s(Y2e);FUo=r(bLt,"flaubert"),bLt.forEach(t),TUo=r(jNe," \u2014 "),nW=n(jNe,"A",{href:!0});var vLt=s(nW);MUo=r(vLt,"FlaubertForSequenceClassification"),vLt.forEach(t),EUo=r(jNe," (FlauBERT model)"),jNe.forEach(t),CUo=i(D),X1=n(D,"LI",{});var DNe=s(X1);K2e=n(DNe,"STRONG",{});var FLt=s(K2e);wUo=r(FLt,"fnet"),FLt.forEach(t),AUo=r(DNe," \u2014 "),sW=n(DNe,"A",{href:!0});var TLt=s(sW);LUo=r(TLt,"FNetForSequenceClassification"),TLt.forEach(t),yUo=r(DNe," (FNet model)"),DNe.forEach(t),xUo=i(D),z1=n(D,"LI",{});var GNe=s(z1);Z2e=n(GNe,"STRONG",{});var MLt=s(Z2e);$Uo=r(MLt,"funnel"),MLt.forEach(t),kUo=r(GNe," \u2014 "),lW=n(GNe,"A",{href:!0});var ELt=s(lW);SUo=r(ELt,"FunnelForSequenceClassification"),ELt.forEach(t),RUo=r(GNe," (Funnel Transformer model)"),GNe.forEach(t),PUo=i(D),W1=n(D,"LI",{});var ONe=s(W1);ebe=n(ONe,"STRONG",{});var CLt=s(ebe);BUo=r(CLt,"gpt2"),CLt.forEach(t),IUo=r(ONe," \u2014 "),iW=n(ONe,"A",{href:!0});var wLt=s(iW);NUo=r(wLt,"GPT2ForSequenceClassification"),wLt.forEach(t),qUo=r(ONe," (OpenAI GPT-2 model)"),ONe.forEach(t),jUo=i(D),Q1=n(D,"LI",{});var VNe=s(Q1);obe=n(VNe,"STRONG",{});var ALt=s(obe);DUo=r(ALt,"gpt_neo"),ALt.forEach(t),GUo=r(VNe," \u2014 "),dW=n(VNe,"A",{href:!0});var LLt=s(dW);OUo=r(LLt,"GPTNeoForSequenceClassification"),LLt.forEach(t),VUo=r(VNe," (GPT Neo model)"),VNe.forEach(t),XUo=i(D),U1=n(D,"LI",{});var XNe=s(U1);rbe=n(XNe,"STRONG",{});var yLt=s(rbe);zUo=r(yLt,"gptj"),yLt.forEach(t),WUo=r(XNe," \u2014 "),cW=n(XNe,"A",{href:!0});var xLt=s(cW);QUo=r(xLt,"GPTJForSequenceClassification"),xLt.forEach(t),UUo=r(XNe," (GPT-J model)"),XNe.forEach(t),HUo=i(D),H1=n(D,"LI",{});var zNe=s(H1);tbe=n(zNe,"STRONG",{});var $Lt=s(tbe);JUo=r($Lt,"ibert"),$Lt.forEach(t),YUo=r(zNe," \u2014 "),mW=n(zNe,"A",{href:!0});var kLt=s(mW);KUo=r(kLt,"IBertForSequenceClassification"),kLt.forEach(t),ZUo=r(zNe," (I-BERT model)"),zNe.forEach(t),eHo=i(D),J1=n(D,"LI",{});var WNe=s(J1);abe=n(WNe,"STRONG",{});var SLt=s(abe);oHo=r(SLt,"layoutlm"),SLt.forEach(t),rHo=r(WNe," \u2014 "),fW=n(WNe,"A",{href:!0});var RLt=s(fW);tHo=r(RLt,"LayoutLMForSequenceClassification"),RLt.forEach(t),aHo=r(WNe," (LayoutLM model)"),WNe.forEach(t),nHo=i(D),Y1=n(D,"LI",{});var QNe=s(Y1);nbe=n(QNe,"STRONG",{});var PLt=s(nbe);sHo=r(PLt,"layoutlmv2"),PLt.forEach(t),lHo=r(QNe," \u2014 "),gW=n(QNe,"A",{href:!0});var BLt=s(gW);iHo=r(BLt,"LayoutLMv2ForSequenceClassification"),BLt.forEach(t),dHo=r(QNe," (LayoutLMv2 model)"),QNe.forEach(t),cHo=i(D),K1=n(D,"LI",{});var UNe=s(K1);sbe=n(UNe,"STRONG",{});var ILt=s(sbe);mHo=r(ILt,"layoutlmv3"),ILt.forEach(t),fHo=r(UNe," \u2014 "),hW=n(UNe,"A",{href:!0});var NLt=s(hW);gHo=r(NLt,"LayoutLMv3ForSequenceClassification"),NLt.forEach(t),hHo=r(UNe," (LayoutLMv3 model)"),UNe.forEach(t),uHo=i(D),Z1=n(D,"LI",{});var HNe=s(Z1);lbe=n(HNe,"STRONG",{});var qLt=s(lbe);pHo=r(qLt,"led"),qLt.forEach(t),_Ho=r(HNe," \u2014 "),uW=n(HNe,"A",{href:!0});var jLt=s(uW);bHo=r(jLt,"LEDForSequenceClassification"),jLt.forEach(t),vHo=r(HNe," (LED model)"),HNe.forEach(t),FHo=i(D),eF=n(D,"LI",{});var JNe=s(eF);ibe=n(JNe,"STRONG",{});var DLt=s(ibe);THo=r(DLt,"longformer"),DLt.forEach(t),MHo=r(JNe," \u2014 "),pW=n(JNe,"A",{href:!0});var GLt=s(pW);EHo=r(GLt,"LongformerForSequenceClassification"),GLt.forEach(t),CHo=r(JNe," (Longformer model)"),JNe.forEach(t),wHo=i(D),oF=n(D,"LI",{});var YNe=s(oF);dbe=n(YNe,"STRONG",{});var OLt=s(dbe);AHo=r(OLt,"luke"),OLt.forEach(t),LHo=r(YNe," \u2014 "),_W=n(YNe,"A",{href:!0});var VLt=s(_W);yHo=r(VLt,"LukeForSequenceClassification"),VLt.forEach(t),xHo=r(YNe," (LUKE model)"),YNe.forEach(t),$Ho=i(D),rF=n(D,"LI",{});var KNe=s(rF);cbe=n(KNe,"STRONG",{});var XLt=s(cbe);kHo=r(XLt,"mbart"),XLt.forEach(t),SHo=r(KNe," \u2014 "),bW=n(KNe,"A",{href:!0});var zLt=s(bW);RHo=r(zLt,"MBartForSequenceClassification"),zLt.forEach(t),PHo=r(KNe," (mBART model)"),KNe.forEach(t),BHo=i(D),tF=n(D,"LI",{});var ZNe=s(tF);mbe=n(ZNe,"STRONG",{});var WLt=s(mbe);IHo=r(WLt,"megatron-bert"),WLt.forEach(t),NHo=r(ZNe," \u2014 "),vW=n(ZNe,"A",{href:!0});var QLt=s(vW);qHo=r(QLt,"MegatronBertForSequenceClassification"),QLt.forEach(t),jHo=r(ZNe," (Megatron-BERT model)"),ZNe.forEach(t),DHo=i(D),aF=n(D,"LI",{});var eqe=s(aF);fbe=n(eqe,"STRONG",{});var ULt=s(fbe);GHo=r(ULt,"mobilebert"),ULt.forEach(t),OHo=r(eqe," \u2014 "),FW=n(eqe,"A",{href:!0});var HLt=s(FW);VHo=r(HLt,"MobileBertForSequenceClassification"),HLt.forEach(t),XHo=r(eqe," (MobileBERT model)"),eqe.forEach(t),zHo=i(D),nF=n(D,"LI",{});var oqe=s(nF);gbe=n(oqe,"STRONG",{});var JLt=s(gbe);WHo=r(JLt,"mpnet"),JLt.forEach(t),QHo=r(oqe," \u2014 "),TW=n(oqe,"A",{href:!0});var YLt=s(TW);UHo=r(YLt,"MPNetForSequenceClassification"),YLt.forEach(t),HHo=r(oqe," (MPNet model)"),oqe.forEach(t),JHo=i(D),sF=n(D,"LI",{});var rqe=s(sF);hbe=n(rqe,"STRONG",{});var KLt=s(hbe);YHo=r(KLt,"mvp"),KLt.forEach(t),KHo=r(rqe," \u2014 "),MW=n(rqe,"A",{href:!0});var ZLt=s(MW);ZHo=r(ZLt,"MvpForSequenceClassification"),ZLt.forEach(t),eJo=r(rqe," (MVP model)"),rqe.forEach(t),oJo=i(D),lF=n(D,"LI",{});var tqe=s(lF);ube=n(tqe,"STRONG",{});var eyt=s(ube);rJo=r(eyt,"nezha"),eyt.forEach(t),tJo=r(tqe," \u2014 "),EW=n(tqe,"A",{href:!0});var oyt=s(EW);aJo=r(oyt,"NezhaForSequenceClassification"),oyt.forEach(t),nJo=r(tqe," (Nezha model)"),tqe.forEach(t),sJo=i(D),iF=n(D,"LI",{});var aqe=s(iF);pbe=n(aqe,"STRONG",{});var ryt=s(pbe);lJo=r(ryt,"nystromformer"),ryt.forEach(t),iJo=r(aqe," \u2014 "),CW=n(aqe,"A",{href:!0});var tyt=s(CW);dJo=r(tyt,"NystromformerForSequenceClassification"),tyt.forEach(t),cJo=r(aqe," (Nystr\xF6mformer model)"),aqe.forEach(t),mJo=i(D),dF=n(D,"LI",{});var nqe=s(dF);_be=n(nqe,"STRONG",{});var ayt=s(_be);fJo=r(ayt,"openai-gpt"),ayt.forEach(t),gJo=r(nqe," \u2014 "),wW=n(nqe,"A",{href:!0});var nyt=s(wW);hJo=r(nyt,"OpenAIGPTForSequenceClassification"),nyt.forEach(t),uJo=r(nqe," (OpenAI GPT model)"),nqe.forEach(t),pJo=i(D),cF=n(D,"LI",{});var sqe=s(cF);bbe=n(sqe,"STRONG",{});var syt=s(bbe);_Jo=r(syt,"opt"),syt.forEach(t),bJo=r(sqe," \u2014 "),AW=n(sqe,"A",{href:!0});var lyt=s(AW);vJo=r(lyt,"OPTForSequenceClassification"),lyt.forEach(t),FJo=r(sqe," (OPT model)"),sqe.forEach(t),TJo=i(D),mF=n(D,"LI",{});var lqe=s(mF);vbe=n(lqe,"STRONG",{});var iyt=s(vbe);MJo=r(iyt,"perceiver"),iyt.forEach(t),EJo=r(lqe," \u2014 "),LW=n(lqe,"A",{href:!0});var dyt=s(LW);CJo=r(dyt,"PerceiverForSequenceClassification"),dyt.forEach(t),wJo=r(lqe," (Perceiver model)"),lqe.forEach(t),AJo=i(D),fF=n(D,"LI",{});var iqe=s(fF);Fbe=n(iqe,"STRONG",{});var cyt=s(Fbe);LJo=r(cyt,"plbart"),cyt.forEach(t),yJo=r(iqe," \u2014 "),yW=n(iqe,"A",{href:!0});var myt=s(yW);xJo=r(myt,"PLBartForSequenceClassification"),myt.forEach(t),$Jo=r(iqe," (PLBart model)"),iqe.forEach(t),kJo=i(D),gF=n(D,"LI",{});var dqe=s(gF);Tbe=n(dqe,"STRONG",{});var fyt=s(Tbe);SJo=r(fyt,"qdqbert"),fyt.forEach(t),RJo=r(dqe," \u2014 "),xW=n(dqe,"A",{href:!0});var gyt=s(xW);PJo=r(gyt,"QDQBertForSequenceClassification"),gyt.forEach(t),BJo=r(dqe," (QDQBert model)"),dqe.forEach(t),IJo=i(D),hF=n(D,"LI",{});var cqe=s(hF);Mbe=n(cqe,"STRONG",{});var hyt=s(Mbe);NJo=r(hyt,"reformer"),hyt.forEach(t),qJo=r(cqe," \u2014 "),$W=n(cqe,"A",{href:!0});var uyt=s($W);jJo=r(uyt,"ReformerForSequenceClassification"),uyt.forEach(t),DJo=r(cqe," (Reformer model)"),cqe.forEach(t),GJo=i(D),uF=n(D,"LI",{});var mqe=s(uF);Ebe=n(mqe,"STRONG",{});var pyt=s(Ebe);OJo=r(pyt,"rembert"),pyt.forEach(t),VJo=r(mqe," \u2014 "),kW=n(mqe,"A",{href:!0});var _yt=s(kW);XJo=r(_yt,"RemBertForSequenceClassification"),_yt.forEach(t),zJo=r(mqe," (RemBERT model)"),mqe.forEach(t),WJo=i(D),pF=n(D,"LI",{});var fqe=s(pF);Cbe=n(fqe,"STRONG",{});var byt=s(Cbe);QJo=r(byt,"roberta"),byt.forEach(t),UJo=r(fqe," \u2014 "),SW=n(fqe,"A",{href:!0});var vyt=s(SW);HJo=r(vyt,"RobertaForSequenceClassification"),vyt.forEach(t),JJo=r(fqe," (RoBERTa model)"),fqe.forEach(t),YJo=i(D),_F=n(D,"LI",{});var gqe=s(_F);wbe=n(gqe,"STRONG",{});var Fyt=s(wbe);KJo=r(Fyt,"roformer"),Fyt.forEach(t),ZJo=r(gqe," \u2014 "),RW=n(gqe,"A",{href:!0});var Tyt=s(RW);eYo=r(Tyt,"RoFormerForSequenceClassification"),Tyt.forEach(t),oYo=r(gqe," (RoFormer model)"),gqe.forEach(t),rYo=i(D),bF=n(D,"LI",{});var hqe=s(bF);Abe=n(hqe,"STRONG",{});var Myt=s(Abe);tYo=r(Myt,"squeezebert"),Myt.forEach(t),aYo=r(hqe," \u2014 "),PW=n(hqe,"A",{href:!0});var Eyt=s(PW);nYo=r(Eyt,"SqueezeBertForSequenceClassification"),Eyt.forEach(t),sYo=r(hqe," (SqueezeBERT model)"),hqe.forEach(t),lYo=i(D),vF=n(D,"LI",{});var uqe=s(vF);Lbe=n(uqe,"STRONG",{});var Cyt=s(Lbe);iYo=r(Cyt,"tapas"),Cyt.forEach(t),dYo=r(uqe," \u2014 "),BW=n(uqe,"A",{href:!0});var wyt=s(BW);cYo=r(wyt,"TapasForSequenceClassification"),wyt.forEach(t),mYo=r(uqe," (TAPAS model)"),uqe.forEach(t),fYo=i(D),FF=n(D,"LI",{});var pqe=s(FF);ybe=n(pqe,"STRONG",{});var Ayt=s(ybe);gYo=r(Ayt,"transfo-xl"),Ayt.forEach(t),hYo=r(pqe," \u2014 "),IW=n(pqe,"A",{href:!0});var Lyt=s(IW);uYo=r(Lyt,"TransfoXLForSequenceClassification"),Lyt.forEach(t),pYo=r(pqe," (Transformer-XL model)"),pqe.forEach(t),_Yo=i(D),TF=n(D,"LI",{});var _qe=s(TF);xbe=n(_qe,"STRONG",{});var yyt=s(xbe);bYo=r(yyt,"xlm"),yyt.forEach(t),vYo=r(_qe," \u2014 "),NW=n(_qe,"A",{href:!0});var xyt=s(NW);FYo=r(xyt,"XLMForSequenceClassification"),xyt.forEach(t),TYo=r(_qe," (XLM model)"),_qe.forEach(t),MYo=i(D),MF=n(D,"LI",{});var bqe=s(MF);$be=n(bqe,"STRONG",{});var $yt=s($be);EYo=r($yt,"xlm-roberta"),$yt.forEach(t),CYo=r(bqe," \u2014 "),qW=n(bqe,"A",{href:!0});var kyt=s(qW);wYo=r(kyt,"XLMRobertaForSequenceClassification"),kyt.forEach(t),AYo=r(bqe," (XLM-RoBERTa model)"),bqe.forEach(t),LYo=i(D),EF=n(D,"LI",{});var vqe=s(EF);kbe=n(vqe,"STRONG",{});var Syt=s(kbe);yYo=r(Syt,"xlm-roberta-xl"),Syt.forEach(t),xYo=r(vqe," \u2014 "),jW=n(vqe,"A",{href:!0});var Ryt=s(jW);$Yo=r(Ryt,"XLMRobertaXLForSequenceClassification"),Ryt.forEach(t),kYo=r(vqe," (XLM-RoBERTa-XL model)"),vqe.forEach(t),SYo=i(D),CF=n(D,"LI",{});var Fqe=s(CF);Sbe=n(Fqe,"STRONG",{});var Pyt=s(Sbe);RYo=r(Pyt,"xlnet"),Pyt.forEach(t),PYo=r(Fqe," \u2014 "),DW=n(Fqe,"A",{href:!0});var Byt=s(DW);BYo=r(Byt,"XLNetForSequenceClassification"),Byt.forEach(t),IYo=r(Fqe," (XLNet model)"),Fqe.forEach(t),NYo=i(D),wF=n(D,"LI",{});var Tqe=s(wF);Rbe=n(Tqe,"STRONG",{});var Iyt=s(Rbe);qYo=r(Iyt,"yoso"),Iyt.forEach(t),jYo=r(Tqe," \u2014 "),GW=n(Tqe,"A",{href:!0});var Nyt=s(GW);DYo=r(Nyt,"YosoForSequenceClassification"),Nyt.forEach(t),GYo=r(Tqe," (YOSO model)"),Tqe.forEach(t),D.forEach(t),OYo=i(ba),AF=n(ba,"P",{});var Mqe=s(AF);VYo=r(Mqe,"The model is set in evaluation mode by default using "),Pbe=n(Mqe,"CODE",{});var qyt=s(Pbe);XYo=r(qyt,"model.eval()"),qyt.forEach(t),zYo=r(Mqe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Bbe=n(Mqe,"CODE",{});var jyt=s(Bbe);WYo=r(jyt,"model.train()"),jyt.forEach(t),Mqe.forEach(t),QYo=i(ba),T(LF.$$.fragment,ba),ba.forEach(t),vl.forEach(t),BUe=i(m),Fd=n(m,"H2",{class:!0});var zJe=s(Fd);yF=n(zJe,"A",{id:!0,class:!0,href:!0});var Dyt=s(yF);Ibe=n(Dyt,"SPAN",{});var Gyt=s(Ibe);T(T9.$$.fragment,Gyt),Gyt.forEach(t),Dyt.forEach(t),UYo=i(zJe),Nbe=n(zJe,"SPAN",{});var Oyt=s(Nbe);HYo=r(Oyt,"AutoModelForMultipleChoice"),Oyt.forEach(t),zJe.forEach(t),IUe=i(m),qo=n(m,"DIV",{class:!0});var Fl=s(qo);T(M9.$$.fragment,Fl),JYo=i(Fl),Td=n(Fl,"P",{});var cne=s(Td);YYo=r(cne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),OW=n(cne,"A",{href:!0});var Vyt=s(OW);KYo=r(Vyt,"from_pretrained()"),Vyt.forEach(t),ZYo=r(cne," class method or the "),VW=n(cne,"A",{href:!0});var Xyt=s(VW);eKo=r(Xyt,"from_config()"),Xyt.forEach(t),oKo=r(cne,` class
method.`),cne.forEach(t),rKo=i(Fl),E9=n(Fl,"P",{});var WJe=s(E9);tKo=r(WJe,"This class cannot be instantiated directly using "),qbe=n(WJe,"CODE",{});var zyt=s(qbe);aKo=r(zyt,"__init__()"),zyt.forEach(t),nKo=r(WJe," (throws an error)."),WJe.forEach(t),sKo=i(Fl),bt=n(Fl,"DIV",{class:!0});var $L=s(bt);T(C9.$$.fragment,$L),lKo=i($L),jbe=n($L,"P",{});var Wyt=s(jbe);iKo=r(Wyt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Wyt.forEach(t),dKo=i($L),Md=n($L,"P",{});var mne=s(Md);cKo=r(mne,`Note:
Loading a model from its configuration file does `),Dbe=n(mne,"STRONG",{});var Qyt=s(Dbe);mKo=r(Qyt,"not"),Qyt.forEach(t),fKo=r(mne,` load the model weights. It only affects the
model\u2019s configuration. Use `),XW=n(mne,"A",{href:!0});var Uyt=s(XW);gKo=r(Uyt,"from_pretrained()"),Uyt.forEach(t),hKo=r(mne," to load the model weights."),mne.forEach(t),uKo=i($L),T(xF.$$.fragment,$L),$L.forEach(t),pKo=i(Fl),to=n(Fl,"DIV",{class:!0});var va=s(to);T(w9.$$.fragment,va),_Ko=i(va),Gbe=n(va,"P",{});var Hyt=s(Gbe);bKo=r(Hyt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Hyt.forEach(t),vKo=i(va),Ha=n(va,"P",{});var kL=s(Ha);FKo=r(kL,"The model class to instantiate is selected based on the "),Obe=n(kL,"CODE",{});var Jyt=s(Obe);TKo=r(Jyt,"model_type"),Jyt.forEach(t),MKo=r(kL,` property of the config object (either
passed as an argument or loaded from `),Vbe=n(kL,"CODE",{});var Yyt=s(Vbe);EKo=r(Yyt,"pretrained_model_name_or_path"),Yyt.forEach(t),CKo=r(kL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xbe=n(kL,"CODE",{});var Kyt=s(Xbe);wKo=r(Kyt,"pretrained_model_name_or_path"),Kyt.forEach(t),AKo=r(kL,":"),kL.forEach(t),LKo=i(va),Z=n(va,"UL",{});var ee=s(Z);$F=n(ee,"LI",{});var Eqe=s($F);zbe=n(Eqe,"STRONG",{});var Zyt=s(zbe);yKo=r(Zyt,"albert"),Zyt.forEach(t),xKo=r(Eqe," \u2014 "),zW=n(Eqe,"A",{href:!0});var e8t=s(zW);$Ko=r(e8t,"AlbertForMultipleChoice"),e8t.forEach(t),kKo=r(Eqe," (ALBERT model)"),Eqe.forEach(t),SKo=i(ee),kF=n(ee,"LI",{});var Cqe=s(kF);Wbe=n(Cqe,"STRONG",{});var o8t=s(Wbe);RKo=r(o8t,"bert"),o8t.forEach(t),PKo=r(Cqe," \u2014 "),WW=n(Cqe,"A",{href:!0});var r8t=s(WW);BKo=r(r8t,"BertForMultipleChoice"),r8t.forEach(t),IKo=r(Cqe," (BERT model)"),Cqe.forEach(t),NKo=i(ee),SF=n(ee,"LI",{});var wqe=s(SF);Qbe=n(wqe,"STRONG",{});var t8t=s(Qbe);qKo=r(t8t,"big_bird"),t8t.forEach(t),jKo=r(wqe," \u2014 "),QW=n(wqe,"A",{href:!0});var a8t=s(QW);DKo=r(a8t,"BigBirdForMultipleChoice"),a8t.forEach(t),GKo=r(wqe," (BigBird model)"),wqe.forEach(t),OKo=i(ee),RF=n(ee,"LI",{});var Aqe=s(RF);Ube=n(Aqe,"STRONG",{});var n8t=s(Ube);VKo=r(n8t,"camembert"),n8t.forEach(t),XKo=r(Aqe," \u2014 "),UW=n(Aqe,"A",{href:!0});var s8t=s(UW);zKo=r(s8t,"CamembertForMultipleChoice"),s8t.forEach(t),WKo=r(Aqe," (CamemBERT model)"),Aqe.forEach(t),QKo=i(ee),PF=n(ee,"LI",{});var Lqe=s(PF);Hbe=n(Lqe,"STRONG",{});var l8t=s(Hbe);UKo=r(l8t,"canine"),l8t.forEach(t),HKo=r(Lqe," \u2014 "),HW=n(Lqe,"A",{href:!0});var i8t=s(HW);JKo=r(i8t,"CanineForMultipleChoice"),i8t.forEach(t),YKo=r(Lqe," (CANINE model)"),Lqe.forEach(t),KKo=i(ee),BF=n(ee,"LI",{});var yqe=s(BF);Jbe=n(yqe,"STRONG",{});var d8t=s(Jbe);ZKo=r(d8t,"convbert"),d8t.forEach(t),eZo=r(yqe," \u2014 "),JW=n(yqe,"A",{href:!0});var c8t=s(JW);oZo=r(c8t,"ConvBertForMultipleChoice"),c8t.forEach(t),rZo=r(yqe," (ConvBERT model)"),yqe.forEach(t),tZo=i(ee),IF=n(ee,"LI",{});var xqe=s(IF);Ybe=n(xqe,"STRONG",{});var m8t=s(Ybe);aZo=r(m8t,"data2vec-text"),m8t.forEach(t),nZo=r(xqe," \u2014 "),YW=n(xqe,"A",{href:!0});var f8t=s(YW);sZo=r(f8t,"Data2VecTextForMultipleChoice"),f8t.forEach(t),lZo=r(xqe," (Data2VecText model)"),xqe.forEach(t),iZo=i(ee),NF=n(ee,"LI",{});var $qe=s(NF);Kbe=n($qe,"STRONG",{});var g8t=s(Kbe);dZo=r(g8t,"deberta-v2"),g8t.forEach(t),cZo=r($qe," \u2014 "),KW=n($qe,"A",{href:!0});var h8t=s(KW);mZo=r(h8t,"DebertaV2ForMultipleChoice"),h8t.forEach(t),fZo=r($qe," (DeBERTa-v2 model)"),$qe.forEach(t),gZo=i(ee),qF=n(ee,"LI",{});var kqe=s(qF);Zbe=n(kqe,"STRONG",{});var u8t=s(Zbe);hZo=r(u8t,"distilbert"),u8t.forEach(t),uZo=r(kqe," \u2014 "),ZW=n(kqe,"A",{href:!0});var p8t=s(ZW);pZo=r(p8t,"DistilBertForMultipleChoice"),p8t.forEach(t),_Zo=r(kqe," (DistilBERT model)"),kqe.forEach(t),bZo=i(ee),jF=n(ee,"LI",{});var Sqe=s(jF);eve=n(Sqe,"STRONG",{});var _8t=s(eve);vZo=r(_8t,"electra"),_8t.forEach(t),FZo=r(Sqe," \u2014 "),eQ=n(Sqe,"A",{href:!0});var b8t=s(eQ);TZo=r(b8t,"ElectraForMultipleChoice"),b8t.forEach(t),MZo=r(Sqe," (ELECTRA model)"),Sqe.forEach(t),EZo=i(ee),DF=n(ee,"LI",{});var Rqe=s(DF);ove=n(Rqe,"STRONG",{});var v8t=s(ove);CZo=r(v8t,"flaubert"),v8t.forEach(t),wZo=r(Rqe," \u2014 "),oQ=n(Rqe,"A",{href:!0});var F8t=s(oQ);AZo=r(F8t,"FlaubertForMultipleChoice"),F8t.forEach(t),LZo=r(Rqe," (FlauBERT model)"),Rqe.forEach(t),yZo=i(ee),GF=n(ee,"LI",{});var Pqe=s(GF);rve=n(Pqe,"STRONG",{});var T8t=s(rve);xZo=r(T8t,"fnet"),T8t.forEach(t),$Zo=r(Pqe," \u2014 "),rQ=n(Pqe,"A",{href:!0});var M8t=s(rQ);kZo=r(M8t,"FNetForMultipleChoice"),M8t.forEach(t),SZo=r(Pqe," (FNet model)"),Pqe.forEach(t),RZo=i(ee),OF=n(ee,"LI",{});var Bqe=s(OF);tve=n(Bqe,"STRONG",{});var E8t=s(tve);PZo=r(E8t,"funnel"),E8t.forEach(t),BZo=r(Bqe," \u2014 "),tQ=n(Bqe,"A",{href:!0});var C8t=s(tQ);IZo=r(C8t,"FunnelForMultipleChoice"),C8t.forEach(t),NZo=r(Bqe," (Funnel Transformer model)"),Bqe.forEach(t),qZo=i(ee),VF=n(ee,"LI",{});var Iqe=s(VF);ave=n(Iqe,"STRONG",{});var w8t=s(ave);jZo=r(w8t,"ibert"),w8t.forEach(t),DZo=r(Iqe," \u2014 "),aQ=n(Iqe,"A",{href:!0});var A8t=s(aQ);GZo=r(A8t,"IBertForMultipleChoice"),A8t.forEach(t),OZo=r(Iqe," (I-BERT model)"),Iqe.forEach(t),VZo=i(ee),XF=n(ee,"LI",{});var Nqe=s(XF);nve=n(Nqe,"STRONG",{});var L8t=s(nve);XZo=r(L8t,"longformer"),L8t.forEach(t),zZo=r(Nqe," \u2014 "),nQ=n(Nqe,"A",{href:!0});var y8t=s(nQ);WZo=r(y8t,"LongformerForMultipleChoice"),y8t.forEach(t),QZo=r(Nqe," (Longformer model)"),Nqe.forEach(t),UZo=i(ee),zF=n(ee,"LI",{});var qqe=s(zF);sve=n(qqe,"STRONG",{});var x8t=s(sve);HZo=r(x8t,"luke"),x8t.forEach(t),JZo=r(qqe," \u2014 "),sQ=n(qqe,"A",{href:!0});var $8t=s(sQ);YZo=r($8t,"LukeForMultipleChoice"),$8t.forEach(t),KZo=r(qqe," (LUKE model)"),qqe.forEach(t),ZZo=i(ee),WF=n(ee,"LI",{});var jqe=s(WF);lve=n(jqe,"STRONG",{});var k8t=s(lve);eer=r(k8t,"megatron-bert"),k8t.forEach(t),oer=r(jqe," \u2014 "),lQ=n(jqe,"A",{href:!0});var S8t=s(lQ);rer=r(S8t,"MegatronBertForMultipleChoice"),S8t.forEach(t),ter=r(jqe," (Megatron-BERT model)"),jqe.forEach(t),aer=i(ee),QF=n(ee,"LI",{});var Dqe=s(QF);ive=n(Dqe,"STRONG",{});var R8t=s(ive);ner=r(R8t,"mobilebert"),R8t.forEach(t),ser=r(Dqe," \u2014 "),iQ=n(Dqe,"A",{href:!0});var P8t=s(iQ);ler=r(P8t,"MobileBertForMultipleChoice"),P8t.forEach(t),ier=r(Dqe," (MobileBERT model)"),Dqe.forEach(t),der=i(ee),UF=n(ee,"LI",{});var Gqe=s(UF);dve=n(Gqe,"STRONG",{});var B8t=s(dve);cer=r(B8t,"mpnet"),B8t.forEach(t),mer=r(Gqe," \u2014 "),dQ=n(Gqe,"A",{href:!0});var I8t=s(dQ);fer=r(I8t,"MPNetForMultipleChoice"),I8t.forEach(t),ger=r(Gqe," (MPNet model)"),Gqe.forEach(t),her=i(ee),HF=n(ee,"LI",{});var Oqe=s(HF);cve=n(Oqe,"STRONG",{});var N8t=s(cve);uer=r(N8t,"nezha"),N8t.forEach(t),per=r(Oqe," \u2014 "),cQ=n(Oqe,"A",{href:!0});var q8t=s(cQ);_er=r(q8t,"NezhaForMultipleChoice"),q8t.forEach(t),ber=r(Oqe," (Nezha model)"),Oqe.forEach(t),ver=i(ee),JF=n(ee,"LI",{});var Vqe=s(JF);mve=n(Vqe,"STRONG",{});var j8t=s(mve);Fer=r(j8t,"nystromformer"),j8t.forEach(t),Ter=r(Vqe," \u2014 "),mQ=n(Vqe,"A",{href:!0});var D8t=s(mQ);Mer=r(D8t,"NystromformerForMultipleChoice"),D8t.forEach(t),Eer=r(Vqe," (Nystr\xF6mformer model)"),Vqe.forEach(t),Cer=i(ee),YF=n(ee,"LI",{});var Xqe=s(YF);fve=n(Xqe,"STRONG",{});var G8t=s(fve);wer=r(G8t,"qdqbert"),G8t.forEach(t),Aer=r(Xqe," \u2014 "),fQ=n(Xqe,"A",{href:!0});var O8t=s(fQ);Ler=r(O8t,"QDQBertForMultipleChoice"),O8t.forEach(t),yer=r(Xqe," (QDQBert model)"),Xqe.forEach(t),xer=i(ee),KF=n(ee,"LI",{});var zqe=s(KF);gve=n(zqe,"STRONG",{});var V8t=s(gve);$er=r(V8t,"rembert"),V8t.forEach(t),ker=r(zqe," \u2014 "),gQ=n(zqe,"A",{href:!0});var X8t=s(gQ);Ser=r(X8t,"RemBertForMultipleChoice"),X8t.forEach(t),Rer=r(zqe," (RemBERT model)"),zqe.forEach(t),Per=i(ee),ZF=n(ee,"LI",{});var Wqe=s(ZF);hve=n(Wqe,"STRONG",{});var z8t=s(hve);Ber=r(z8t,"roberta"),z8t.forEach(t),Ier=r(Wqe," \u2014 "),hQ=n(Wqe,"A",{href:!0});var W8t=s(hQ);Ner=r(W8t,"RobertaForMultipleChoice"),W8t.forEach(t),qer=r(Wqe," (RoBERTa model)"),Wqe.forEach(t),jer=i(ee),eT=n(ee,"LI",{});var Qqe=s(eT);uve=n(Qqe,"STRONG",{});var Q8t=s(uve);Der=r(Q8t,"roformer"),Q8t.forEach(t),Ger=r(Qqe," \u2014 "),uQ=n(Qqe,"A",{href:!0});var U8t=s(uQ);Oer=r(U8t,"RoFormerForMultipleChoice"),U8t.forEach(t),Ver=r(Qqe," (RoFormer model)"),Qqe.forEach(t),Xer=i(ee),oT=n(ee,"LI",{});var Uqe=s(oT);pve=n(Uqe,"STRONG",{});var H8t=s(pve);zer=r(H8t,"squeezebert"),H8t.forEach(t),Wer=r(Uqe," \u2014 "),pQ=n(Uqe,"A",{href:!0});var J8t=s(pQ);Qer=r(J8t,"SqueezeBertForMultipleChoice"),J8t.forEach(t),Uer=r(Uqe," (SqueezeBERT model)"),Uqe.forEach(t),Her=i(ee),rT=n(ee,"LI",{});var Hqe=s(rT);_ve=n(Hqe,"STRONG",{});var Y8t=s(_ve);Jer=r(Y8t,"xlm"),Y8t.forEach(t),Yer=r(Hqe," \u2014 "),_Q=n(Hqe,"A",{href:!0});var K8t=s(_Q);Ker=r(K8t,"XLMForMultipleChoice"),K8t.forEach(t),Zer=r(Hqe," (XLM model)"),Hqe.forEach(t),eor=i(ee),tT=n(ee,"LI",{});var Jqe=s(tT);bve=n(Jqe,"STRONG",{});var Z8t=s(bve);oor=r(Z8t,"xlm-roberta"),Z8t.forEach(t),ror=r(Jqe," \u2014 "),bQ=n(Jqe,"A",{href:!0});var e9t=s(bQ);tor=r(e9t,"XLMRobertaForMultipleChoice"),e9t.forEach(t),aor=r(Jqe," (XLM-RoBERTa model)"),Jqe.forEach(t),nor=i(ee),aT=n(ee,"LI",{});var Yqe=s(aT);vve=n(Yqe,"STRONG",{});var o9t=s(vve);sor=r(o9t,"xlm-roberta-xl"),o9t.forEach(t),lor=r(Yqe," \u2014 "),vQ=n(Yqe,"A",{href:!0});var r9t=s(vQ);ior=r(r9t,"XLMRobertaXLForMultipleChoice"),r9t.forEach(t),dor=r(Yqe," (XLM-RoBERTa-XL model)"),Yqe.forEach(t),cor=i(ee),nT=n(ee,"LI",{});var Kqe=s(nT);Fve=n(Kqe,"STRONG",{});var t9t=s(Fve);mor=r(t9t,"xlnet"),t9t.forEach(t),gor=r(Kqe," \u2014 "),FQ=n(Kqe,"A",{href:!0});var a9t=s(FQ);hor=r(a9t,"XLNetForMultipleChoice"),a9t.forEach(t),uor=r(Kqe," (XLNet model)"),Kqe.forEach(t),por=i(ee),sT=n(ee,"LI",{});var Zqe=s(sT);Tve=n(Zqe,"STRONG",{});var n9t=s(Tve);_or=r(n9t,"yoso"),n9t.forEach(t),bor=r(Zqe," \u2014 "),TQ=n(Zqe,"A",{href:!0});var s9t=s(TQ);vor=r(s9t,"YosoForMultipleChoice"),s9t.forEach(t),For=r(Zqe," (YOSO model)"),Zqe.forEach(t),ee.forEach(t),Tor=i(va),lT=n(va,"P",{});var eje=s(lT);Mor=r(eje,"The model is set in evaluation mode by default using "),Mve=n(eje,"CODE",{});var l9t=s(Mve);Eor=r(l9t,"model.eval()"),l9t.forEach(t),Cor=r(eje,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Eve=n(eje,"CODE",{});var i9t=s(Eve);wor=r(i9t,"model.train()"),i9t.forEach(t),eje.forEach(t),Aor=i(va),T(iT.$$.fragment,va),va.forEach(t),Fl.forEach(t),NUe=i(m),Ed=n(m,"H2",{class:!0});var QJe=s(Ed);dT=n(QJe,"A",{id:!0,class:!0,href:!0});var d9t=s(dT);Cve=n(d9t,"SPAN",{});var c9t=s(Cve);T(A9.$$.fragment,c9t),c9t.forEach(t),d9t.forEach(t),Lor=i(QJe),wve=n(QJe,"SPAN",{});var m9t=s(wve);yor=r(m9t,"AutoModelForNextSentencePrediction"),m9t.forEach(t),QJe.forEach(t),qUe=i(m),jo=n(m,"DIV",{class:!0});var Tl=s(jo);T(L9.$$.fragment,Tl),xor=i(Tl),Cd=n(Tl,"P",{});var fne=s(Cd);$or=r(fne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),MQ=n(fne,"A",{href:!0});var f9t=s(MQ);kor=r(f9t,"from_pretrained()"),f9t.forEach(t),Sor=r(fne," class method or the "),EQ=n(fne,"A",{href:!0});var g9t=s(EQ);Ror=r(g9t,"from_config()"),g9t.forEach(t),Por=r(fne,` class
method.`),fne.forEach(t),Bor=i(Tl),y9=n(Tl,"P",{});var UJe=s(y9);Ior=r(UJe,"This class cannot be instantiated directly using "),Ave=n(UJe,"CODE",{});var h9t=s(Ave);Nor=r(h9t,"__init__()"),h9t.forEach(t),qor=r(UJe," (throws an error)."),UJe.forEach(t),jor=i(Tl),vt=n(Tl,"DIV",{class:!0});var SL=s(vt);T(x9.$$.fragment,SL),Dor=i(SL),Lve=n(SL,"P",{});var u9t=s(Lve);Gor=r(u9t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),u9t.forEach(t),Oor=i(SL),wd=n(SL,"P",{});var gne=s(wd);Vor=r(gne,`Note:
Loading a model from its configuration file does `),yve=n(gne,"STRONG",{});var p9t=s(yve);Xor=r(p9t,"not"),p9t.forEach(t),zor=r(gne,` load the model weights. It only affects the
model\u2019s configuration. Use `),CQ=n(gne,"A",{href:!0});var _9t=s(CQ);Wor=r(_9t,"from_pretrained()"),_9t.forEach(t),Qor=r(gne," to load the model weights."),gne.forEach(t),Uor=i(SL),T(cT.$$.fragment,SL),SL.forEach(t),Hor=i(Tl),ao=n(Tl,"DIV",{class:!0});var Fa=s(ao);T($9.$$.fragment,Fa),Jor=i(Fa),xve=n(Fa,"P",{});var b9t=s(xve);Yor=r(b9t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),b9t.forEach(t),Kor=i(Fa),Ja=n(Fa,"P",{});var RL=s(Ja);Zor=r(RL,"The model class to instantiate is selected based on the "),$ve=n(RL,"CODE",{});var v9t=s($ve);err=r(v9t,"model_type"),v9t.forEach(t),orr=r(RL,` property of the config object (either
passed as an argument or loaded from `),kve=n(RL,"CODE",{});var F9t=s(kve);rrr=r(F9t,"pretrained_model_name_or_path"),F9t.forEach(t),trr=r(RL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sve=n(RL,"CODE",{});var T9t=s(Sve);arr=r(T9t,"pretrained_model_name_or_path"),T9t.forEach(t),nrr=r(RL,":"),RL.forEach(t),srr=i(Fa),Do=n(Fa,"UL",{});var Ta=s(Do);mT=n(Ta,"LI",{});var oje=s(mT);Rve=n(oje,"STRONG",{});var M9t=s(Rve);lrr=r(M9t,"bert"),M9t.forEach(t),irr=r(oje," \u2014 "),wQ=n(oje,"A",{href:!0});var E9t=s(wQ);drr=r(E9t,"BertForNextSentencePrediction"),E9t.forEach(t),crr=r(oje," (BERT model)"),oje.forEach(t),mrr=i(Ta),fT=n(Ta,"LI",{});var rje=s(fT);Pve=n(rje,"STRONG",{});var C9t=s(Pve);frr=r(C9t,"fnet"),C9t.forEach(t),grr=r(rje," \u2014 "),AQ=n(rje,"A",{href:!0});var w9t=s(AQ);hrr=r(w9t,"FNetForNextSentencePrediction"),w9t.forEach(t),urr=r(rje," (FNet model)"),rje.forEach(t),prr=i(Ta),gT=n(Ta,"LI",{});var tje=s(gT);Bve=n(tje,"STRONG",{});var A9t=s(Bve);_rr=r(A9t,"megatron-bert"),A9t.forEach(t),brr=r(tje," \u2014 "),LQ=n(tje,"A",{href:!0});var L9t=s(LQ);vrr=r(L9t,"MegatronBertForNextSentencePrediction"),L9t.forEach(t),Frr=r(tje," (Megatron-BERT model)"),tje.forEach(t),Trr=i(Ta),hT=n(Ta,"LI",{});var aje=s(hT);Ive=n(aje,"STRONG",{});var y9t=s(Ive);Mrr=r(y9t,"mobilebert"),y9t.forEach(t),Err=r(aje," \u2014 "),yQ=n(aje,"A",{href:!0});var x9t=s(yQ);Crr=r(x9t,"MobileBertForNextSentencePrediction"),x9t.forEach(t),wrr=r(aje," (MobileBERT model)"),aje.forEach(t),Arr=i(Ta),uT=n(Ta,"LI",{});var nje=s(uT);Nve=n(nje,"STRONG",{});var $9t=s(Nve);Lrr=r($9t,"nezha"),$9t.forEach(t),yrr=r(nje," \u2014 "),xQ=n(nje,"A",{href:!0});var k9t=s(xQ);xrr=r(k9t,"NezhaForNextSentencePrediction"),k9t.forEach(t),$rr=r(nje," (Nezha model)"),nje.forEach(t),krr=i(Ta),pT=n(Ta,"LI",{});var sje=s(pT);qve=n(sje,"STRONG",{});var S9t=s(qve);Srr=r(S9t,"qdqbert"),S9t.forEach(t),Rrr=r(sje," \u2014 "),$Q=n(sje,"A",{href:!0});var R9t=s($Q);Prr=r(R9t,"QDQBertForNextSentencePrediction"),R9t.forEach(t),Brr=r(sje," (QDQBert model)"),sje.forEach(t),Ta.forEach(t),Irr=i(Fa),_T=n(Fa,"P",{});var lje=s(_T);Nrr=r(lje,"The model is set in evaluation mode by default using "),jve=n(lje,"CODE",{});var P9t=s(jve);qrr=r(P9t,"model.eval()"),P9t.forEach(t),jrr=r(lje,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dve=n(lje,"CODE",{});var B9t=s(Dve);Drr=r(B9t,"model.train()"),B9t.forEach(t),lje.forEach(t),Grr=i(Fa),T(bT.$$.fragment,Fa),Fa.forEach(t),Tl.forEach(t),jUe=i(m),Ad=n(m,"H2",{class:!0});var HJe=s(Ad);vT=n(HJe,"A",{id:!0,class:!0,href:!0});var I9t=s(vT);Gve=n(I9t,"SPAN",{});var N9t=s(Gve);T(k9.$$.fragment,N9t),N9t.forEach(t),I9t.forEach(t),Orr=i(HJe),Ove=n(HJe,"SPAN",{});var q9t=s(Ove);Vrr=r(q9t,"AutoModelForTokenClassification"),q9t.forEach(t),HJe.forEach(t),DUe=i(m),Go=n(m,"DIV",{class:!0});var Ml=s(Go);T(S9.$$.fragment,Ml),Xrr=i(Ml),Ld=n(Ml,"P",{});var hne=s(Ld);zrr=r(hne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),kQ=n(hne,"A",{href:!0});var j9t=s(kQ);Wrr=r(j9t,"from_pretrained()"),j9t.forEach(t),Qrr=r(hne," class method or the "),SQ=n(hne,"A",{href:!0});var D9t=s(SQ);Urr=r(D9t,"from_config()"),D9t.forEach(t),Hrr=r(hne,` class
method.`),hne.forEach(t),Jrr=i(Ml),R9=n(Ml,"P",{});var JJe=s(R9);Yrr=r(JJe,"This class cannot be instantiated directly using "),Vve=n(JJe,"CODE",{});var G9t=s(Vve);Krr=r(G9t,"__init__()"),G9t.forEach(t),Zrr=r(JJe," (throws an error)."),JJe.forEach(t),etr=i(Ml),Ft=n(Ml,"DIV",{class:!0});var PL=s(Ft);T(P9.$$.fragment,PL),otr=i(PL),Xve=n(PL,"P",{});var O9t=s(Xve);rtr=r(O9t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),O9t.forEach(t),ttr=i(PL),yd=n(PL,"P",{});var une=s(yd);atr=r(une,`Note:
Loading a model from its configuration file does `),zve=n(une,"STRONG",{});var V9t=s(zve);ntr=r(V9t,"not"),V9t.forEach(t),str=r(une,` load the model weights. It only affects the
model\u2019s configuration. Use `),RQ=n(une,"A",{href:!0});var X9t=s(RQ);ltr=r(X9t,"from_pretrained()"),X9t.forEach(t),itr=r(une," to load the model weights."),une.forEach(t),dtr=i(PL),T(FT.$$.fragment,PL),PL.forEach(t),ctr=i(Ml),no=n(Ml,"DIV",{class:!0});var Ma=s(no);T(B9.$$.fragment,Ma),mtr=i(Ma),Wve=n(Ma,"P",{});var z9t=s(Wve);ftr=r(z9t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),z9t.forEach(t),gtr=i(Ma),Ya=n(Ma,"P",{});var BL=s(Ya);htr=r(BL,"The model class to instantiate is selected based on the "),Qve=n(BL,"CODE",{});var W9t=s(Qve);utr=r(W9t,"model_type"),W9t.forEach(t),ptr=r(BL,` property of the config object (either
passed as an argument or loaded from `),Uve=n(BL,"CODE",{});var Q9t=s(Uve);_tr=r(Q9t,"pretrained_model_name_or_path"),Q9t.forEach(t),btr=r(BL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hve=n(BL,"CODE",{});var U9t=s(Hve);vtr=r(U9t,"pretrained_model_name_or_path"),U9t.forEach(t),Ftr=r(BL,":"),BL.forEach(t),Ttr=i(Ma),H=n(Ma,"UL",{});var K=s(H);TT=n(K,"LI",{});var ije=s(TT);Jve=n(ije,"STRONG",{});var H9t=s(Jve);Mtr=r(H9t,"albert"),H9t.forEach(t),Etr=r(ije," \u2014 "),PQ=n(ije,"A",{href:!0});var J9t=s(PQ);Ctr=r(J9t,"AlbertForTokenClassification"),J9t.forEach(t),wtr=r(ije," (ALBERT model)"),ije.forEach(t),Atr=i(K),MT=n(K,"LI",{});var dje=s(MT);Yve=n(dje,"STRONG",{});var Y9t=s(Yve);Ltr=r(Y9t,"bert"),Y9t.forEach(t),ytr=r(dje," \u2014 "),BQ=n(dje,"A",{href:!0});var K9t=s(BQ);xtr=r(K9t,"BertForTokenClassification"),K9t.forEach(t),$tr=r(dje," (BERT model)"),dje.forEach(t),ktr=i(K),ET=n(K,"LI",{});var cje=s(ET);Kve=n(cje,"STRONG",{});var Z9t=s(Kve);Str=r(Z9t,"big_bird"),Z9t.forEach(t),Rtr=r(cje," \u2014 "),IQ=n(cje,"A",{href:!0});var ext=s(IQ);Ptr=r(ext,"BigBirdForTokenClassification"),ext.forEach(t),Btr=r(cje," (BigBird model)"),cje.forEach(t),Itr=i(K),CT=n(K,"LI",{});var mje=s(CT);Zve=n(mje,"STRONG",{});var oxt=s(Zve);Ntr=r(oxt,"bloom"),oxt.forEach(t),qtr=r(mje," \u2014 "),NQ=n(mje,"A",{href:!0});var rxt=s(NQ);jtr=r(rxt,"BloomForTokenClassification"),rxt.forEach(t),Dtr=r(mje," (BLOOM model)"),mje.forEach(t),Gtr=i(K),wT=n(K,"LI",{});var fje=s(wT);e1e=n(fje,"STRONG",{});var txt=s(e1e);Otr=r(txt,"camembert"),txt.forEach(t),Vtr=r(fje," \u2014 "),qQ=n(fje,"A",{href:!0});var axt=s(qQ);Xtr=r(axt,"CamembertForTokenClassification"),axt.forEach(t),ztr=r(fje," (CamemBERT model)"),fje.forEach(t),Wtr=i(K),AT=n(K,"LI",{});var gje=s(AT);o1e=n(gje,"STRONG",{});var nxt=s(o1e);Qtr=r(nxt,"canine"),nxt.forEach(t),Utr=r(gje," \u2014 "),jQ=n(gje,"A",{href:!0});var sxt=s(jQ);Htr=r(sxt,"CanineForTokenClassification"),sxt.forEach(t),Jtr=r(gje," (CANINE model)"),gje.forEach(t),Ytr=i(K),LT=n(K,"LI",{});var hje=s(LT);r1e=n(hje,"STRONG",{});var lxt=s(r1e);Ktr=r(lxt,"convbert"),lxt.forEach(t),Ztr=r(hje," \u2014 "),DQ=n(hje,"A",{href:!0});var ixt=s(DQ);ear=r(ixt,"ConvBertForTokenClassification"),ixt.forEach(t),oar=r(hje," (ConvBERT model)"),hje.forEach(t),rar=i(K),yT=n(K,"LI",{});var uje=s(yT);t1e=n(uje,"STRONG",{});var dxt=s(t1e);tar=r(dxt,"data2vec-text"),dxt.forEach(t),aar=r(uje," \u2014 "),GQ=n(uje,"A",{href:!0});var cxt=s(GQ);nar=r(cxt,"Data2VecTextForTokenClassification"),cxt.forEach(t),sar=r(uje," (Data2VecText model)"),uje.forEach(t),lar=i(K),xT=n(K,"LI",{});var pje=s(xT);a1e=n(pje,"STRONG",{});var mxt=s(a1e);iar=r(mxt,"deberta"),mxt.forEach(t),dar=r(pje," \u2014 "),OQ=n(pje,"A",{href:!0});var fxt=s(OQ);car=r(fxt,"DebertaForTokenClassification"),fxt.forEach(t),mar=r(pje," (DeBERTa model)"),pje.forEach(t),far=i(K),$T=n(K,"LI",{});var _je=s($T);n1e=n(_je,"STRONG",{});var gxt=s(n1e);gar=r(gxt,"deberta-v2"),gxt.forEach(t),har=r(_je," \u2014 "),VQ=n(_je,"A",{href:!0});var hxt=s(VQ);uar=r(hxt,"DebertaV2ForTokenClassification"),hxt.forEach(t),par=r(_je," (DeBERTa-v2 model)"),_je.forEach(t),_ar=i(K),kT=n(K,"LI",{});var bje=s(kT);s1e=n(bje,"STRONG",{});var uxt=s(s1e);bar=r(uxt,"distilbert"),uxt.forEach(t),Far=r(bje," \u2014 "),XQ=n(bje,"A",{href:!0});var pxt=s(XQ);Tar=r(pxt,"DistilBertForTokenClassification"),pxt.forEach(t),Mar=r(bje," (DistilBERT model)"),bje.forEach(t),Ear=i(K),ST=n(K,"LI",{});var vje=s(ST);l1e=n(vje,"STRONG",{});var _xt=s(l1e);Car=r(_xt,"electra"),_xt.forEach(t),war=r(vje," \u2014 "),zQ=n(vje,"A",{href:!0});var bxt=s(zQ);Aar=r(bxt,"ElectraForTokenClassification"),bxt.forEach(t),Lar=r(vje," (ELECTRA model)"),vje.forEach(t),yar=i(K),RT=n(K,"LI",{});var Fje=s(RT);i1e=n(Fje,"STRONG",{});var vxt=s(i1e);xar=r(vxt,"flaubert"),vxt.forEach(t),$ar=r(Fje," \u2014 "),WQ=n(Fje,"A",{href:!0});var Fxt=s(WQ);kar=r(Fxt,"FlaubertForTokenClassification"),Fxt.forEach(t),Sar=r(Fje," (FlauBERT model)"),Fje.forEach(t),Rar=i(K),PT=n(K,"LI",{});var Tje=s(PT);d1e=n(Tje,"STRONG",{});var Txt=s(d1e);Par=r(Txt,"fnet"),Txt.forEach(t),Bar=r(Tje," \u2014 "),QQ=n(Tje,"A",{href:!0});var Mxt=s(QQ);Iar=r(Mxt,"FNetForTokenClassification"),Mxt.forEach(t),Nar=r(Tje," (FNet model)"),Tje.forEach(t),qar=i(K),BT=n(K,"LI",{});var Mje=s(BT);c1e=n(Mje,"STRONG",{});var Ext=s(c1e);jar=r(Ext,"funnel"),Ext.forEach(t),Dar=r(Mje," \u2014 "),UQ=n(Mje,"A",{href:!0});var Cxt=s(UQ);Gar=r(Cxt,"FunnelForTokenClassification"),Cxt.forEach(t),Oar=r(Mje," (Funnel Transformer model)"),Mje.forEach(t),Var=i(K),IT=n(K,"LI",{});var Eje=s(IT);m1e=n(Eje,"STRONG",{});var wxt=s(m1e);Xar=r(wxt,"gpt2"),wxt.forEach(t),zar=r(Eje," \u2014 "),HQ=n(Eje,"A",{href:!0});var Axt=s(HQ);War=r(Axt,"GPT2ForTokenClassification"),Axt.forEach(t),Qar=r(Eje," (OpenAI GPT-2 model)"),Eje.forEach(t),Uar=i(K),NT=n(K,"LI",{});var Cje=s(NT);f1e=n(Cje,"STRONG",{});var Lxt=s(f1e);Har=r(Lxt,"ibert"),Lxt.forEach(t),Jar=r(Cje," \u2014 "),JQ=n(Cje,"A",{href:!0});var yxt=s(JQ);Yar=r(yxt,"IBertForTokenClassification"),yxt.forEach(t),Kar=r(Cje," (I-BERT model)"),Cje.forEach(t),Zar=i(K),qT=n(K,"LI",{});var wje=s(qT);g1e=n(wje,"STRONG",{});var xxt=s(g1e);enr=r(xxt,"layoutlm"),xxt.forEach(t),onr=r(wje," \u2014 "),YQ=n(wje,"A",{href:!0});var $xt=s(YQ);rnr=r($xt,"LayoutLMForTokenClassification"),$xt.forEach(t),tnr=r(wje," (LayoutLM model)"),wje.forEach(t),anr=i(K),jT=n(K,"LI",{});var Aje=s(jT);h1e=n(Aje,"STRONG",{});var kxt=s(h1e);nnr=r(kxt,"layoutlmv2"),kxt.forEach(t),snr=r(Aje," \u2014 "),KQ=n(Aje,"A",{href:!0});var Sxt=s(KQ);lnr=r(Sxt,"LayoutLMv2ForTokenClassification"),Sxt.forEach(t),inr=r(Aje," (LayoutLMv2 model)"),Aje.forEach(t),dnr=i(K),DT=n(K,"LI",{});var Lje=s(DT);u1e=n(Lje,"STRONG",{});var Rxt=s(u1e);cnr=r(Rxt,"layoutlmv3"),Rxt.forEach(t),mnr=r(Lje," \u2014 "),ZQ=n(Lje,"A",{href:!0});var Pxt=s(ZQ);fnr=r(Pxt,"LayoutLMv3ForTokenClassification"),Pxt.forEach(t),gnr=r(Lje," (LayoutLMv3 model)"),Lje.forEach(t),hnr=i(K),GT=n(K,"LI",{});var yje=s(GT);p1e=n(yje,"STRONG",{});var Bxt=s(p1e);unr=r(Bxt,"longformer"),Bxt.forEach(t),pnr=r(yje," \u2014 "),eU=n(yje,"A",{href:!0});var Ixt=s(eU);_nr=r(Ixt,"LongformerForTokenClassification"),Ixt.forEach(t),bnr=r(yje," (Longformer model)"),yje.forEach(t),vnr=i(K),OT=n(K,"LI",{});var xje=s(OT);_1e=n(xje,"STRONG",{});var Nxt=s(_1e);Fnr=r(Nxt,"luke"),Nxt.forEach(t),Tnr=r(xje," \u2014 "),oU=n(xje,"A",{href:!0});var qxt=s(oU);Mnr=r(qxt,"LukeForTokenClassification"),qxt.forEach(t),Enr=r(xje," (LUKE model)"),xje.forEach(t),Cnr=i(K),VT=n(K,"LI",{});var $je=s(VT);b1e=n($je,"STRONG",{});var jxt=s(b1e);wnr=r(jxt,"megatron-bert"),jxt.forEach(t),Anr=r($je," \u2014 "),rU=n($je,"A",{href:!0});var Dxt=s(rU);Lnr=r(Dxt,"MegatronBertForTokenClassification"),Dxt.forEach(t),ynr=r($je," (Megatron-BERT model)"),$je.forEach(t),xnr=i(K),XT=n(K,"LI",{});var kje=s(XT);v1e=n(kje,"STRONG",{});var Gxt=s(v1e);$nr=r(Gxt,"mobilebert"),Gxt.forEach(t),knr=r(kje," \u2014 "),tU=n(kje,"A",{href:!0});var Oxt=s(tU);Snr=r(Oxt,"MobileBertForTokenClassification"),Oxt.forEach(t),Rnr=r(kje," (MobileBERT model)"),kje.forEach(t),Pnr=i(K),zT=n(K,"LI",{});var Sje=s(zT);F1e=n(Sje,"STRONG",{});var Vxt=s(F1e);Bnr=r(Vxt,"mpnet"),Vxt.forEach(t),Inr=r(Sje," \u2014 "),aU=n(Sje,"A",{href:!0});var Xxt=s(aU);Nnr=r(Xxt,"MPNetForTokenClassification"),Xxt.forEach(t),qnr=r(Sje," (MPNet model)"),Sje.forEach(t),jnr=i(K),WT=n(K,"LI",{});var Rje=s(WT);T1e=n(Rje,"STRONG",{});var zxt=s(T1e);Dnr=r(zxt,"nezha"),zxt.forEach(t),Gnr=r(Rje," \u2014 "),nU=n(Rje,"A",{href:!0});var Wxt=s(nU);Onr=r(Wxt,"NezhaForTokenClassification"),Wxt.forEach(t),Vnr=r(Rje," (Nezha model)"),Rje.forEach(t),Xnr=i(K),QT=n(K,"LI",{});var Pje=s(QT);M1e=n(Pje,"STRONG",{});var Qxt=s(M1e);znr=r(Qxt,"nystromformer"),Qxt.forEach(t),Wnr=r(Pje," \u2014 "),sU=n(Pje,"A",{href:!0});var Uxt=s(sU);Qnr=r(Uxt,"NystromformerForTokenClassification"),Uxt.forEach(t),Unr=r(Pje," (Nystr\xF6mformer model)"),Pje.forEach(t),Hnr=i(K),UT=n(K,"LI",{});var Bje=s(UT);E1e=n(Bje,"STRONG",{});var Hxt=s(E1e);Jnr=r(Hxt,"qdqbert"),Hxt.forEach(t),Ynr=r(Bje," \u2014 "),lU=n(Bje,"A",{href:!0});var Jxt=s(lU);Knr=r(Jxt,"QDQBertForTokenClassification"),Jxt.forEach(t),Znr=r(Bje," (QDQBert model)"),Bje.forEach(t),esr=i(K),HT=n(K,"LI",{});var Ije=s(HT);C1e=n(Ije,"STRONG",{});var Yxt=s(C1e);osr=r(Yxt,"rembert"),Yxt.forEach(t),rsr=r(Ije," \u2014 "),iU=n(Ije,"A",{href:!0});var Kxt=s(iU);tsr=r(Kxt,"RemBertForTokenClassification"),Kxt.forEach(t),asr=r(Ije," (RemBERT model)"),Ije.forEach(t),nsr=i(K),JT=n(K,"LI",{});var Nje=s(JT);w1e=n(Nje,"STRONG",{});var Zxt=s(w1e);ssr=r(Zxt,"roberta"),Zxt.forEach(t),lsr=r(Nje," \u2014 "),dU=n(Nje,"A",{href:!0});var e$t=s(dU);isr=r(e$t,"RobertaForTokenClassification"),e$t.forEach(t),dsr=r(Nje," (RoBERTa model)"),Nje.forEach(t),csr=i(K),YT=n(K,"LI",{});var qje=s(YT);A1e=n(qje,"STRONG",{});var o$t=s(A1e);msr=r(o$t,"roformer"),o$t.forEach(t),fsr=r(qje," \u2014 "),cU=n(qje,"A",{href:!0});var r$t=s(cU);gsr=r(r$t,"RoFormerForTokenClassification"),r$t.forEach(t),hsr=r(qje," (RoFormer model)"),qje.forEach(t),usr=i(K),KT=n(K,"LI",{});var jje=s(KT);L1e=n(jje,"STRONG",{});var t$t=s(L1e);psr=r(t$t,"squeezebert"),t$t.forEach(t),_sr=r(jje," \u2014 "),mU=n(jje,"A",{href:!0});var a$t=s(mU);bsr=r(a$t,"SqueezeBertForTokenClassification"),a$t.forEach(t),vsr=r(jje," (SqueezeBERT model)"),jje.forEach(t),Fsr=i(K),ZT=n(K,"LI",{});var Dje=s(ZT);y1e=n(Dje,"STRONG",{});var n$t=s(y1e);Tsr=r(n$t,"xlm"),n$t.forEach(t),Msr=r(Dje," \u2014 "),fU=n(Dje,"A",{href:!0});var s$t=s(fU);Esr=r(s$t,"XLMForTokenClassification"),s$t.forEach(t),Csr=r(Dje," (XLM model)"),Dje.forEach(t),wsr=i(K),eM=n(K,"LI",{});var Gje=s(eM);x1e=n(Gje,"STRONG",{});var l$t=s(x1e);Asr=r(l$t,"xlm-roberta"),l$t.forEach(t),Lsr=r(Gje," \u2014 "),gU=n(Gje,"A",{href:!0});var i$t=s(gU);ysr=r(i$t,"XLMRobertaForTokenClassification"),i$t.forEach(t),xsr=r(Gje," (XLM-RoBERTa model)"),Gje.forEach(t),$sr=i(K),oM=n(K,"LI",{});var Oje=s(oM);$1e=n(Oje,"STRONG",{});var d$t=s($1e);ksr=r(d$t,"xlm-roberta-xl"),d$t.forEach(t),Ssr=r(Oje," \u2014 "),hU=n(Oje,"A",{href:!0});var c$t=s(hU);Rsr=r(c$t,"XLMRobertaXLForTokenClassification"),c$t.forEach(t),Psr=r(Oje," (XLM-RoBERTa-XL model)"),Oje.forEach(t),Bsr=i(K),rM=n(K,"LI",{});var Vje=s(rM);k1e=n(Vje,"STRONG",{});var m$t=s(k1e);Isr=r(m$t,"xlnet"),m$t.forEach(t),Nsr=r(Vje," \u2014 "),uU=n(Vje,"A",{href:!0});var f$t=s(uU);qsr=r(f$t,"XLNetForTokenClassification"),f$t.forEach(t),jsr=r(Vje," (XLNet model)"),Vje.forEach(t),Dsr=i(K),tM=n(K,"LI",{});var Xje=s(tM);S1e=n(Xje,"STRONG",{});var g$t=s(S1e);Gsr=r(g$t,"yoso"),g$t.forEach(t),Osr=r(Xje," \u2014 "),pU=n(Xje,"A",{href:!0});var h$t=s(pU);Vsr=r(h$t,"YosoForTokenClassification"),h$t.forEach(t),Xsr=r(Xje," (YOSO model)"),Xje.forEach(t),K.forEach(t),zsr=i(Ma),aM=n(Ma,"P",{});var zje=s(aM);Wsr=r(zje,"The model is set in evaluation mode by default using "),R1e=n(zje,"CODE",{});var u$t=s(R1e);Qsr=r(u$t,"model.eval()"),u$t.forEach(t),Usr=r(zje,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),P1e=n(zje,"CODE",{});var p$t=s(P1e);Hsr=r(p$t,"model.train()"),p$t.forEach(t),zje.forEach(t),Jsr=i(Ma),T(nM.$$.fragment,Ma),Ma.forEach(t),Ml.forEach(t),GUe=i(m),xd=n(m,"H2",{class:!0});var YJe=s(xd);sM=n(YJe,"A",{id:!0,class:!0,href:!0});var _$t=s(sM);B1e=n(_$t,"SPAN",{});var b$t=s(B1e);T(I9.$$.fragment,b$t),b$t.forEach(t),_$t.forEach(t),Ysr=i(YJe),I1e=n(YJe,"SPAN",{});var v$t=s(I1e);Ksr=r(v$t,"AutoModelForQuestionAnswering"),v$t.forEach(t),YJe.forEach(t),OUe=i(m),Oo=n(m,"DIV",{class:!0});var El=s(Oo);T(N9.$$.fragment,El),Zsr=i(El),$d=n(El,"P",{});var pne=s($d);elr=r(pne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),_U=n(pne,"A",{href:!0});var F$t=s(_U);olr=r(F$t,"from_pretrained()"),F$t.forEach(t),rlr=r(pne," class method or the "),bU=n(pne,"A",{href:!0});var T$t=s(bU);tlr=r(T$t,"from_config()"),T$t.forEach(t),alr=r(pne,` class
method.`),pne.forEach(t),nlr=i(El),q9=n(El,"P",{});var KJe=s(q9);slr=r(KJe,"This class cannot be instantiated directly using "),N1e=n(KJe,"CODE",{});var M$t=s(N1e);llr=r(M$t,"__init__()"),M$t.forEach(t),ilr=r(KJe," (throws an error)."),KJe.forEach(t),dlr=i(El),Tt=n(El,"DIV",{class:!0});var IL=s(Tt);T(j9.$$.fragment,IL),clr=i(IL),q1e=n(IL,"P",{});var E$t=s(q1e);mlr=r(E$t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),E$t.forEach(t),flr=i(IL),kd=n(IL,"P",{});var _ne=s(kd);glr=r(_ne,`Note:
Loading a model from its configuration file does `),j1e=n(_ne,"STRONG",{});var C$t=s(j1e);hlr=r(C$t,"not"),C$t.forEach(t),ulr=r(_ne,` load the model weights. It only affects the
model\u2019s configuration. Use `),vU=n(_ne,"A",{href:!0});var w$t=s(vU);plr=r(w$t,"from_pretrained()"),w$t.forEach(t),_lr=r(_ne," to load the model weights."),_ne.forEach(t),blr=i(IL),T(lM.$$.fragment,IL),IL.forEach(t),vlr=i(El),so=n(El,"DIV",{class:!0});var Ea=s(so);T(D9.$$.fragment,Ea),Flr=i(Ea),D1e=n(Ea,"P",{});var A$t=s(D1e);Tlr=r(A$t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),A$t.forEach(t),Mlr=i(Ea),Ka=n(Ea,"P",{});var NL=s(Ka);Elr=r(NL,"The model class to instantiate is selected based on the "),G1e=n(NL,"CODE",{});var L$t=s(G1e);Clr=r(L$t,"model_type"),L$t.forEach(t),wlr=r(NL,` property of the config object (either
passed as an argument or loaded from `),O1e=n(NL,"CODE",{});var y$t=s(O1e);Alr=r(y$t,"pretrained_model_name_or_path"),y$t.forEach(t),Llr=r(NL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V1e=n(NL,"CODE",{});var x$t=s(V1e);ylr=r(x$t,"pretrained_model_name_or_path"),x$t.forEach(t),xlr=r(NL,":"),NL.forEach(t),$lr=i(Ea),V=n(Ea,"UL",{});var X=s(V);iM=n(X,"LI",{});var Wje=s(iM);X1e=n(Wje,"STRONG",{});var $$t=s(X1e);klr=r($$t,"albert"),$$t.forEach(t),Slr=r(Wje," \u2014 "),FU=n(Wje,"A",{href:!0});var k$t=s(FU);Rlr=r(k$t,"AlbertForQuestionAnswering"),k$t.forEach(t),Plr=r(Wje," (ALBERT model)"),Wje.forEach(t),Blr=i(X),dM=n(X,"LI",{});var Qje=s(dM);z1e=n(Qje,"STRONG",{});var S$t=s(z1e);Ilr=r(S$t,"bart"),S$t.forEach(t),Nlr=r(Qje," \u2014 "),TU=n(Qje,"A",{href:!0});var R$t=s(TU);qlr=r(R$t,"BartForQuestionAnswering"),R$t.forEach(t),jlr=r(Qje," (BART model)"),Qje.forEach(t),Dlr=i(X),cM=n(X,"LI",{});var Uje=s(cM);W1e=n(Uje,"STRONG",{});var P$t=s(W1e);Glr=r(P$t,"bert"),P$t.forEach(t),Olr=r(Uje," \u2014 "),MU=n(Uje,"A",{href:!0});var B$t=s(MU);Vlr=r(B$t,"BertForQuestionAnswering"),B$t.forEach(t),Xlr=r(Uje," (BERT model)"),Uje.forEach(t),zlr=i(X),mM=n(X,"LI",{});var Hje=s(mM);Q1e=n(Hje,"STRONG",{});var I$t=s(Q1e);Wlr=r(I$t,"big_bird"),I$t.forEach(t),Qlr=r(Hje," \u2014 "),EU=n(Hje,"A",{href:!0});var N$t=s(EU);Ulr=r(N$t,"BigBirdForQuestionAnswering"),N$t.forEach(t),Hlr=r(Hje," (BigBird model)"),Hje.forEach(t),Jlr=i(X),fM=n(X,"LI",{});var Jje=s(fM);U1e=n(Jje,"STRONG",{});var q$t=s(U1e);Ylr=r(q$t,"bigbird_pegasus"),q$t.forEach(t),Klr=r(Jje," \u2014 "),CU=n(Jje,"A",{href:!0});var j$t=s(CU);Zlr=r(j$t,"BigBirdPegasusForQuestionAnswering"),j$t.forEach(t),eir=r(Jje," (BigBird-Pegasus model)"),Jje.forEach(t),oir=i(X),gM=n(X,"LI",{});var Yje=s(gM);H1e=n(Yje,"STRONG",{});var D$t=s(H1e);rir=r(D$t,"camembert"),D$t.forEach(t),tir=r(Yje," \u2014 "),wU=n(Yje,"A",{href:!0});var G$t=s(wU);air=r(G$t,"CamembertForQuestionAnswering"),G$t.forEach(t),nir=r(Yje," (CamemBERT model)"),Yje.forEach(t),sir=i(X),hM=n(X,"LI",{});var Kje=s(hM);J1e=n(Kje,"STRONG",{});var O$t=s(J1e);lir=r(O$t,"canine"),O$t.forEach(t),iir=r(Kje," \u2014 "),AU=n(Kje,"A",{href:!0});var V$t=s(AU);dir=r(V$t,"CanineForQuestionAnswering"),V$t.forEach(t),cir=r(Kje," (CANINE model)"),Kje.forEach(t),mir=i(X),uM=n(X,"LI",{});var Zje=s(uM);Y1e=n(Zje,"STRONG",{});var X$t=s(Y1e);fir=r(X$t,"convbert"),X$t.forEach(t),gir=r(Zje," \u2014 "),LU=n(Zje,"A",{href:!0});var z$t=s(LU);hir=r(z$t,"ConvBertForQuestionAnswering"),z$t.forEach(t),uir=r(Zje," (ConvBERT model)"),Zje.forEach(t),pir=i(X),pM=n(X,"LI",{});var eDe=s(pM);K1e=n(eDe,"STRONG",{});var W$t=s(K1e);_ir=r(W$t,"data2vec-text"),W$t.forEach(t),bir=r(eDe," \u2014 "),yU=n(eDe,"A",{href:!0});var Q$t=s(yU);vir=r(Q$t,"Data2VecTextForQuestionAnswering"),Q$t.forEach(t),Fir=r(eDe," (Data2VecText model)"),eDe.forEach(t),Tir=i(X),_M=n(X,"LI",{});var oDe=s(_M);Z1e=n(oDe,"STRONG",{});var U$t=s(Z1e);Mir=r(U$t,"deberta"),U$t.forEach(t),Eir=r(oDe," \u2014 "),xU=n(oDe,"A",{href:!0});var H$t=s(xU);Cir=r(H$t,"DebertaForQuestionAnswering"),H$t.forEach(t),wir=r(oDe," (DeBERTa model)"),oDe.forEach(t),Air=i(X),bM=n(X,"LI",{});var rDe=s(bM);eFe=n(rDe,"STRONG",{});var J$t=s(eFe);Lir=r(J$t,"deberta-v2"),J$t.forEach(t),yir=r(rDe," \u2014 "),$U=n(rDe,"A",{href:!0});var Y$t=s($U);xir=r(Y$t,"DebertaV2ForQuestionAnswering"),Y$t.forEach(t),$ir=r(rDe," (DeBERTa-v2 model)"),rDe.forEach(t),kir=i(X),vM=n(X,"LI",{});var tDe=s(vM);oFe=n(tDe,"STRONG",{});var K$t=s(oFe);Sir=r(K$t,"distilbert"),K$t.forEach(t),Rir=r(tDe," \u2014 "),kU=n(tDe,"A",{href:!0});var Z$t=s(kU);Pir=r(Z$t,"DistilBertForQuestionAnswering"),Z$t.forEach(t),Bir=r(tDe," (DistilBERT model)"),tDe.forEach(t),Iir=i(X),FM=n(X,"LI",{});var aDe=s(FM);rFe=n(aDe,"STRONG",{});var ekt=s(rFe);Nir=r(ekt,"electra"),ekt.forEach(t),qir=r(aDe," \u2014 "),SU=n(aDe,"A",{href:!0});var okt=s(SU);jir=r(okt,"ElectraForQuestionAnswering"),okt.forEach(t),Dir=r(aDe," (ELECTRA model)"),aDe.forEach(t),Gir=i(X),TM=n(X,"LI",{});var nDe=s(TM);tFe=n(nDe,"STRONG",{});var rkt=s(tFe);Oir=r(rkt,"flaubert"),rkt.forEach(t),Vir=r(nDe," \u2014 "),RU=n(nDe,"A",{href:!0});var tkt=s(RU);Xir=r(tkt,"FlaubertForQuestionAnsweringSimple"),tkt.forEach(t),zir=r(nDe," (FlauBERT model)"),nDe.forEach(t),Wir=i(X),MM=n(X,"LI",{});var sDe=s(MM);aFe=n(sDe,"STRONG",{});var akt=s(aFe);Qir=r(akt,"fnet"),akt.forEach(t),Uir=r(sDe," \u2014 "),PU=n(sDe,"A",{href:!0});var nkt=s(PU);Hir=r(nkt,"FNetForQuestionAnswering"),nkt.forEach(t),Jir=r(sDe," (FNet model)"),sDe.forEach(t),Yir=i(X),EM=n(X,"LI",{});var lDe=s(EM);nFe=n(lDe,"STRONG",{});var skt=s(nFe);Kir=r(skt,"funnel"),skt.forEach(t),Zir=r(lDe," \u2014 "),BU=n(lDe,"A",{href:!0});var lkt=s(BU);edr=r(lkt,"FunnelForQuestionAnswering"),lkt.forEach(t),odr=r(lDe," (Funnel Transformer model)"),lDe.forEach(t),rdr=i(X),CM=n(X,"LI",{});var iDe=s(CM);sFe=n(iDe,"STRONG",{});var ikt=s(sFe);tdr=r(ikt,"gptj"),ikt.forEach(t),adr=r(iDe," \u2014 "),IU=n(iDe,"A",{href:!0});var dkt=s(IU);ndr=r(dkt,"GPTJForQuestionAnswering"),dkt.forEach(t),sdr=r(iDe," (GPT-J model)"),iDe.forEach(t),ldr=i(X),wM=n(X,"LI",{});var dDe=s(wM);lFe=n(dDe,"STRONG",{});var ckt=s(lFe);idr=r(ckt,"ibert"),ckt.forEach(t),ddr=r(dDe," \u2014 "),NU=n(dDe,"A",{href:!0});var mkt=s(NU);cdr=r(mkt,"IBertForQuestionAnswering"),mkt.forEach(t),mdr=r(dDe," (I-BERT model)"),dDe.forEach(t),fdr=i(X),AM=n(X,"LI",{});var cDe=s(AM);iFe=n(cDe,"STRONG",{});var fkt=s(iFe);gdr=r(fkt,"layoutlmv2"),fkt.forEach(t),hdr=r(cDe," \u2014 "),qU=n(cDe,"A",{href:!0});var gkt=s(qU);udr=r(gkt,"LayoutLMv2ForQuestionAnswering"),gkt.forEach(t),pdr=r(cDe," (LayoutLMv2 model)"),cDe.forEach(t),_dr=i(X),LM=n(X,"LI",{});var mDe=s(LM);dFe=n(mDe,"STRONG",{});var hkt=s(dFe);bdr=r(hkt,"layoutlmv3"),hkt.forEach(t),vdr=r(mDe," \u2014 "),jU=n(mDe,"A",{href:!0});var ukt=s(jU);Fdr=r(ukt,"LayoutLMv3ForQuestionAnswering"),ukt.forEach(t),Tdr=r(mDe," (LayoutLMv3 model)"),mDe.forEach(t),Mdr=i(X),yM=n(X,"LI",{});var fDe=s(yM);cFe=n(fDe,"STRONG",{});var pkt=s(cFe);Edr=r(pkt,"led"),pkt.forEach(t),Cdr=r(fDe," \u2014 "),DU=n(fDe,"A",{href:!0});var _kt=s(DU);wdr=r(_kt,"LEDForQuestionAnswering"),_kt.forEach(t),Adr=r(fDe," (LED model)"),fDe.forEach(t),Ldr=i(X),xM=n(X,"LI",{});var gDe=s(xM);mFe=n(gDe,"STRONG",{});var bkt=s(mFe);ydr=r(bkt,"longformer"),bkt.forEach(t),xdr=r(gDe," \u2014 "),GU=n(gDe,"A",{href:!0});var vkt=s(GU);$dr=r(vkt,"LongformerForQuestionAnswering"),vkt.forEach(t),kdr=r(gDe," (Longformer model)"),gDe.forEach(t),Sdr=i(X),$M=n(X,"LI",{});var hDe=s($M);fFe=n(hDe,"STRONG",{});var Fkt=s(fFe);Rdr=r(Fkt,"luke"),Fkt.forEach(t),Pdr=r(hDe," \u2014 "),OU=n(hDe,"A",{href:!0});var Tkt=s(OU);Bdr=r(Tkt,"LukeForQuestionAnswering"),Tkt.forEach(t),Idr=r(hDe," (LUKE model)"),hDe.forEach(t),Ndr=i(X),kM=n(X,"LI",{});var uDe=s(kM);gFe=n(uDe,"STRONG",{});var Mkt=s(gFe);qdr=r(Mkt,"lxmert"),Mkt.forEach(t),jdr=r(uDe," \u2014 "),VU=n(uDe,"A",{href:!0});var Ekt=s(VU);Ddr=r(Ekt,"LxmertForQuestionAnswering"),Ekt.forEach(t),Gdr=r(uDe," (LXMERT model)"),uDe.forEach(t),Odr=i(X),SM=n(X,"LI",{});var pDe=s(SM);hFe=n(pDe,"STRONG",{});var Ckt=s(hFe);Vdr=r(Ckt,"mbart"),Ckt.forEach(t),Xdr=r(pDe," \u2014 "),XU=n(pDe,"A",{href:!0});var wkt=s(XU);zdr=r(wkt,"MBartForQuestionAnswering"),wkt.forEach(t),Wdr=r(pDe," (mBART model)"),pDe.forEach(t),Qdr=i(X),RM=n(X,"LI",{});var _De=s(RM);uFe=n(_De,"STRONG",{});var Akt=s(uFe);Udr=r(Akt,"megatron-bert"),Akt.forEach(t),Hdr=r(_De," \u2014 "),zU=n(_De,"A",{href:!0});var Lkt=s(zU);Jdr=r(Lkt,"MegatronBertForQuestionAnswering"),Lkt.forEach(t),Ydr=r(_De," (Megatron-BERT model)"),_De.forEach(t),Kdr=i(X),PM=n(X,"LI",{});var bDe=s(PM);pFe=n(bDe,"STRONG",{});var ykt=s(pFe);Zdr=r(ykt,"mobilebert"),ykt.forEach(t),ecr=r(bDe," \u2014 "),WU=n(bDe,"A",{href:!0});var xkt=s(WU);ocr=r(xkt,"MobileBertForQuestionAnswering"),xkt.forEach(t),rcr=r(bDe," (MobileBERT model)"),bDe.forEach(t),tcr=i(X),BM=n(X,"LI",{});var vDe=s(BM);_Fe=n(vDe,"STRONG",{});var $kt=s(_Fe);acr=r($kt,"mpnet"),$kt.forEach(t),ncr=r(vDe," \u2014 "),QU=n(vDe,"A",{href:!0});var kkt=s(QU);scr=r(kkt,"MPNetForQuestionAnswering"),kkt.forEach(t),lcr=r(vDe," (MPNet model)"),vDe.forEach(t),icr=i(X),IM=n(X,"LI",{});var FDe=s(IM);bFe=n(FDe,"STRONG",{});var Skt=s(bFe);dcr=r(Skt,"mvp"),Skt.forEach(t),ccr=r(FDe," \u2014 "),UU=n(FDe,"A",{href:!0});var Rkt=s(UU);mcr=r(Rkt,"MvpForQuestionAnswering"),Rkt.forEach(t),fcr=r(FDe," (MVP model)"),FDe.forEach(t),gcr=i(X),NM=n(X,"LI",{});var TDe=s(NM);vFe=n(TDe,"STRONG",{});var Pkt=s(vFe);hcr=r(Pkt,"nezha"),Pkt.forEach(t),ucr=r(TDe," \u2014 "),HU=n(TDe,"A",{href:!0});var Bkt=s(HU);pcr=r(Bkt,"NezhaForQuestionAnswering"),Bkt.forEach(t),_cr=r(TDe," (Nezha model)"),TDe.forEach(t),bcr=i(X),qM=n(X,"LI",{});var MDe=s(qM);FFe=n(MDe,"STRONG",{});var Ikt=s(FFe);vcr=r(Ikt,"nystromformer"),Ikt.forEach(t),Fcr=r(MDe," \u2014 "),JU=n(MDe,"A",{href:!0});var Nkt=s(JU);Tcr=r(Nkt,"NystromformerForQuestionAnswering"),Nkt.forEach(t),Mcr=r(MDe," (Nystr\xF6mformer model)"),MDe.forEach(t),Ecr=i(X),jM=n(X,"LI",{});var EDe=s(jM);TFe=n(EDe,"STRONG",{});var qkt=s(TFe);Ccr=r(qkt,"qdqbert"),qkt.forEach(t),wcr=r(EDe," \u2014 "),YU=n(EDe,"A",{href:!0});var jkt=s(YU);Acr=r(jkt,"QDQBertForQuestionAnswering"),jkt.forEach(t),Lcr=r(EDe," (QDQBert model)"),EDe.forEach(t),ycr=i(X),DM=n(X,"LI",{});var CDe=s(DM);MFe=n(CDe,"STRONG",{});var Dkt=s(MFe);xcr=r(Dkt,"reformer"),Dkt.forEach(t),$cr=r(CDe," \u2014 "),KU=n(CDe,"A",{href:!0});var Gkt=s(KU);kcr=r(Gkt,"ReformerForQuestionAnswering"),Gkt.forEach(t),Scr=r(CDe," (Reformer model)"),CDe.forEach(t),Rcr=i(X),GM=n(X,"LI",{});var wDe=s(GM);EFe=n(wDe,"STRONG",{});var Okt=s(EFe);Pcr=r(Okt,"rembert"),Okt.forEach(t),Bcr=r(wDe," \u2014 "),ZU=n(wDe,"A",{href:!0});var Vkt=s(ZU);Icr=r(Vkt,"RemBertForQuestionAnswering"),Vkt.forEach(t),Ncr=r(wDe," (RemBERT model)"),wDe.forEach(t),qcr=i(X),OM=n(X,"LI",{});var ADe=s(OM);CFe=n(ADe,"STRONG",{});var Xkt=s(CFe);jcr=r(Xkt,"roberta"),Xkt.forEach(t),Dcr=r(ADe," \u2014 "),eH=n(ADe,"A",{href:!0});var zkt=s(eH);Gcr=r(zkt,"RobertaForQuestionAnswering"),zkt.forEach(t),Ocr=r(ADe," (RoBERTa model)"),ADe.forEach(t),Vcr=i(X),VM=n(X,"LI",{});var LDe=s(VM);wFe=n(LDe,"STRONG",{});var Wkt=s(wFe);Xcr=r(Wkt,"roformer"),Wkt.forEach(t),zcr=r(LDe," \u2014 "),oH=n(LDe,"A",{href:!0});var Qkt=s(oH);Wcr=r(Qkt,"RoFormerForQuestionAnswering"),Qkt.forEach(t),Qcr=r(LDe," (RoFormer model)"),LDe.forEach(t),Ucr=i(X),XM=n(X,"LI",{});var yDe=s(XM);AFe=n(yDe,"STRONG",{});var Ukt=s(AFe);Hcr=r(Ukt,"splinter"),Ukt.forEach(t),Jcr=r(yDe," \u2014 "),rH=n(yDe,"A",{href:!0});var Hkt=s(rH);Ycr=r(Hkt,"SplinterForQuestionAnswering"),Hkt.forEach(t),Kcr=r(yDe," (Splinter model)"),yDe.forEach(t),Zcr=i(X),zM=n(X,"LI",{});var xDe=s(zM);LFe=n(xDe,"STRONG",{});var Jkt=s(LFe);emr=r(Jkt,"squeezebert"),Jkt.forEach(t),omr=r(xDe," \u2014 "),tH=n(xDe,"A",{href:!0});var Ykt=s(tH);rmr=r(Ykt,"SqueezeBertForQuestionAnswering"),Ykt.forEach(t),tmr=r(xDe," (SqueezeBERT model)"),xDe.forEach(t),amr=i(X),WM=n(X,"LI",{});var $De=s(WM);yFe=n($De,"STRONG",{});var Kkt=s(yFe);nmr=r(Kkt,"xlm"),Kkt.forEach(t),smr=r($De," \u2014 "),aH=n($De,"A",{href:!0});var Zkt=s(aH);lmr=r(Zkt,"XLMForQuestionAnsweringSimple"),Zkt.forEach(t),imr=r($De," (XLM model)"),$De.forEach(t),dmr=i(X),QM=n(X,"LI",{});var kDe=s(QM);xFe=n(kDe,"STRONG",{});var eSt=s(xFe);cmr=r(eSt,"xlm-roberta"),eSt.forEach(t),mmr=r(kDe," \u2014 "),nH=n(kDe,"A",{href:!0});var oSt=s(nH);fmr=r(oSt,"XLMRobertaForQuestionAnswering"),oSt.forEach(t),gmr=r(kDe," (XLM-RoBERTa model)"),kDe.forEach(t),hmr=i(X),UM=n(X,"LI",{});var SDe=s(UM);$Fe=n(SDe,"STRONG",{});var rSt=s($Fe);umr=r(rSt,"xlm-roberta-xl"),rSt.forEach(t),pmr=r(SDe," \u2014 "),sH=n(SDe,"A",{href:!0});var tSt=s(sH);_mr=r(tSt,"XLMRobertaXLForQuestionAnswering"),tSt.forEach(t),bmr=r(SDe," (XLM-RoBERTa-XL model)"),SDe.forEach(t),vmr=i(X),HM=n(X,"LI",{});var RDe=s(HM);kFe=n(RDe,"STRONG",{});var aSt=s(kFe);Fmr=r(aSt,"xlnet"),aSt.forEach(t),Tmr=r(RDe," \u2014 "),lH=n(RDe,"A",{href:!0});var nSt=s(lH);Mmr=r(nSt,"XLNetForQuestionAnsweringSimple"),nSt.forEach(t),Emr=r(RDe," (XLNet model)"),RDe.forEach(t),Cmr=i(X),JM=n(X,"LI",{});var PDe=s(JM);SFe=n(PDe,"STRONG",{});var sSt=s(SFe);wmr=r(sSt,"yoso"),sSt.forEach(t),Amr=r(PDe," \u2014 "),iH=n(PDe,"A",{href:!0});var lSt=s(iH);Lmr=r(lSt,"YosoForQuestionAnswering"),lSt.forEach(t),ymr=r(PDe," (YOSO model)"),PDe.forEach(t),X.forEach(t),xmr=i(Ea),YM=n(Ea,"P",{});var BDe=s(YM);$mr=r(BDe,"The model is set in evaluation mode by default using "),RFe=n(BDe,"CODE",{});var iSt=s(RFe);kmr=r(iSt,"model.eval()"),iSt.forEach(t),Smr=r(BDe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),PFe=n(BDe,"CODE",{});var dSt=s(PFe);Rmr=r(dSt,"model.train()"),dSt.forEach(t),BDe.forEach(t),Pmr=i(Ea),T(KM.$$.fragment,Ea),Ea.forEach(t),El.forEach(t),VUe=i(m),Sd=n(m,"H2",{class:!0});var ZJe=s(Sd);ZM=n(ZJe,"A",{id:!0,class:!0,href:!0});var cSt=s(ZM);BFe=n(cSt,"SPAN",{});var mSt=s(BFe);T(G9.$$.fragment,mSt),mSt.forEach(t),cSt.forEach(t),Bmr=i(ZJe),IFe=n(ZJe,"SPAN",{});var fSt=s(IFe);Imr=r(fSt,"AutoModelForTableQuestionAnswering"),fSt.forEach(t),ZJe.forEach(t),XUe=i(m),Vo=n(m,"DIV",{class:!0});var Cl=s(Vo);T(O9.$$.fragment,Cl),Nmr=i(Cl),Rd=n(Cl,"P",{});var bne=s(Rd);qmr=r(bne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),dH=n(bne,"A",{href:!0});var gSt=s(dH);jmr=r(gSt,"from_pretrained()"),gSt.forEach(t),Dmr=r(bne," class method or the "),cH=n(bne,"A",{href:!0});var hSt=s(cH);Gmr=r(hSt,"from_config()"),hSt.forEach(t),Omr=r(bne,` class
method.`),bne.forEach(t),Vmr=i(Cl),V9=n(Cl,"P",{});var eYe=s(V9);Xmr=r(eYe,"This class cannot be instantiated directly using "),NFe=n(eYe,"CODE",{});var uSt=s(NFe);zmr=r(uSt,"__init__()"),uSt.forEach(t),Wmr=r(eYe," (throws an error)."),eYe.forEach(t),Qmr=i(Cl),Mt=n(Cl,"DIV",{class:!0});var qL=s(Mt);T(X9.$$.fragment,qL),Umr=i(qL),qFe=n(qL,"P",{});var pSt=s(qFe);Hmr=r(pSt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),pSt.forEach(t),Jmr=i(qL),Pd=n(qL,"P",{});var vne=s(Pd);Ymr=r(vne,`Note:
Loading a model from its configuration file does `),jFe=n(vne,"STRONG",{});var _St=s(jFe);Kmr=r(_St,"not"),_St.forEach(t),Zmr=r(vne,` load the model weights. It only affects the
model\u2019s configuration. Use `),mH=n(vne,"A",{href:!0});var bSt=s(mH);efr=r(bSt,"from_pretrained()"),bSt.forEach(t),ofr=r(vne," to load the model weights."),vne.forEach(t),rfr=i(qL),T(eE.$$.fragment,qL),qL.forEach(t),tfr=i(Cl),lo=n(Cl,"DIV",{class:!0});var Ca=s(lo);T(z9.$$.fragment,Ca),afr=i(Ca),DFe=n(Ca,"P",{});var vSt=s(DFe);nfr=r(vSt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),vSt.forEach(t),sfr=i(Ca),Za=n(Ca,"P",{});var jL=s(Za);lfr=r(jL,"The model class to instantiate is selected based on the "),GFe=n(jL,"CODE",{});var FSt=s(GFe);ifr=r(FSt,"model_type"),FSt.forEach(t),dfr=r(jL,` property of the config object (either
passed as an argument or loaded from `),OFe=n(jL,"CODE",{});var TSt=s(OFe);cfr=r(TSt,"pretrained_model_name_or_path"),TSt.forEach(t),mfr=r(jL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),VFe=n(jL,"CODE",{});var MSt=s(VFe);ffr=r(MSt,"pretrained_model_name_or_path"),MSt.forEach(t),gfr=r(jL,":"),jL.forEach(t),hfr=i(Ca),XFe=n(Ca,"UL",{});var ESt=s(XFe);oE=n(ESt,"LI",{});var IDe=s(oE);zFe=n(IDe,"STRONG",{});var CSt=s(zFe);ufr=r(CSt,"tapas"),CSt.forEach(t),pfr=r(IDe," \u2014 "),fH=n(IDe,"A",{href:!0});var wSt=s(fH);_fr=r(wSt,"TapasForQuestionAnswering"),wSt.forEach(t),bfr=r(IDe," (TAPAS model)"),IDe.forEach(t),ESt.forEach(t),vfr=i(Ca),rE=n(Ca,"P",{});var NDe=s(rE);Ffr=r(NDe,"The model is set in evaluation mode by default using "),WFe=n(NDe,"CODE",{});var ASt=s(WFe);Tfr=r(ASt,"model.eval()"),ASt.forEach(t),Mfr=r(NDe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),QFe=n(NDe,"CODE",{});var LSt=s(QFe);Efr=r(LSt,"model.train()"),LSt.forEach(t),NDe.forEach(t),Cfr=i(Ca),T(tE.$$.fragment,Ca),Ca.forEach(t),Cl.forEach(t),zUe=i(m),Bd=n(m,"H2",{class:!0});var oYe=s(Bd);aE=n(oYe,"A",{id:!0,class:!0,href:!0});var ySt=s(aE);UFe=n(ySt,"SPAN",{});var xSt=s(UFe);T(W9.$$.fragment,xSt),xSt.forEach(t),ySt.forEach(t),wfr=i(oYe),HFe=n(oYe,"SPAN",{});var $St=s(HFe);Afr=r($St,"AutoModelForImageClassification"),$St.forEach(t),oYe.forEach(t),WUe=i(m),Xo=n(m,"DIV",{class:!0});var wl=s(Xo);T(Q9.$$.fragment,wl),Lfr=i(wl),Id=n(wl,"P",{});var Fne=s(Id);yfr=r(Fne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),gH=n(Fne,"A",{href:!0});var kSt=s(gH);xfr=r(kSt,"from_pretrained()"),kSt.forEach(t),$fr=r(Fne," class method or the "),hH=n(Fne,"A",{href:!0});var SSt=s(hH);kfr=r(SSt,"from_config()"),SSt.forEach(t),Sfr=r(Fne,` class
method.`),Fne.forEach(t),Rfr=i(wl),U9=n(wl,"P",{});var rYe=s(U9);Pfr=r(rYe,"This class cannot be instantiated directly using "),JFe=n(rYe,"CODE",{});var RSt=s(JFe);Bfr=r(RSt,"__init__()"),RSt.forEach(t),Ifr=r(rYe," (throws an error)."),rYe.forEach(t),Nfr=i(wl),Et=n(wl,"DIV",{class:!0});var DL=s(Et);T(H9.$$.fragment,DL),qfr=i(DL),YFe=n(DL,"P",{});var PSt=s(YFe);jfr=r(PSt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),PSt.forEach(t),Dfr=i(DL),Nd=n(DL,"P",{});var Tne=s(Nd);Gfr=r(Tne,`Note:
Loading a model from its configuration file does `),KFe=n(Tne,"STRONG",{});var BSt=s(KFe);Ofr=r(BSt,"not"),BSt.forEach(t),Vfr=r(Tne,` load the model weights. It only affects the
model\u2019s configuration. Use `),uH=n(Tne,"A",{href:!0});var ISt=s(uH);Xfr=r(ISt,"from_pretrained()"),ISt.forEach(t),zfr=r(Tne," to load the model weights."),Tne.forEach(t),Wfr=i(DL),T(nE.$$.fragment,DL),DL.forEach(t),Qfr=i(wl),io=n(wl,"DIV",{class:!0});var wa=s(io);T(J9.$$.fragment,wa),Ufr=i(wa),ZFe=n(wa,"P",{});var NSt=s(ZFe);Hfr=r(NSt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),NSt.forEach(t),Jfr=i(wa),en=n(wa,"P",{});var GL=s(en);Yfr=r(GL,"The model class to instantiate is selected based on the "),eTe=n(GL,"CODE",{});var qSt=s(eTe);Kfr=r(qSt,"model_type"),qSt.forEach(t),Zfr=r(GL,` property of the config object (either
passed as an argument or loaded from `),oTe=n(GL,"CODE",{});var jSt=s(oTe);egr=r(jSt,"pretrained_model_name_or_path"),jSt.forEach(t),ogr=r(GL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rTe=n(GL,"CODE",{});var DSt=s(rTe);rgr=r(DSt,"pretrained_model_name_or_path"),DSt.forEach(t),tgr=r(GL,":"),GL.forEach(t),agr=i(wa),be=n(wa,"UL",{});var Fe=s(be);sE=n(Fe,"LI",{});var qDe=s(sE);tTe=n(qDe,"STRONG",{});var GSt=s(tTe);ngr=r(GSt,"beit"),GSt.forEach(t),sgr=r(qDe," \u2014 "),pH=n(qDe,"A",{href:!0});var OSt=s(pH);lgr=r(OSt,"BeitForImageClassification"),OSt.forEach(t),igr=r(qDe," (BEiT model)"),qDe.forEach(t),dgr=i(Fe),lE=n(Fe,"LI",{});var jDe=s(lE);aTe=n(jDe,"STRONG",{});var VSt=s(aTe);cgr=r(VSt,"convnext"),VSt.forEach(t),mgr=r(jDe," \u2014 "),_H=n(jDe,"A",{href:!0});var XSt=s(_H);fgr=r(XSt,"ConvNextForImageClassification"),XSt.forEach(t),ggr=r(jDe," (ConvNeXT model)"),jDe.forEach(t),hgr=i(Fe),iE=n(Fe,"LI",{});var DDe=s(iE);nTe=n(DDe,"STRONG",{});var zSt=s(nTe);ugr=r(zSt,"cvt"),zSt.forEach(t),pgr=r(DDe," \u2014 "),bH=n(DDe,"A",{href:!0});var WSt=s(bH);_gr=r(WSt,"CvtForImageClassification"),WSt.forEach(t),bgr=r(DDe," (CvT model)"),DDe.forEach(t),vgr=i(Fe),dE=n(Fe,"LI",{});var GDe=s(dE);sTe=n(GDe,"STRONG",{});var QSt=s(sTe);Fgr=r(QSt,"data2vec-vision"),QSt.forEach(t),Tgr=r(GDe," \u2014 "),vH=n(GDe,"A",{href:!0});var USt=s(vH);Mgr=r(USt,"Data2VecVisionForImageClassification"),USt.forEach(t),Egr=r(GDe," (Data2VecVision model)"),GDe.forEach(t),Cgr=i(Fe),sl=n(Fe,"LI",{});var nP=s(sl);lTe=n(nP,"STRONG",{});var HSt=s(lTe);wgr=r(HSt,"deit"),HSt.forEach(t),Agr=r(nP," \u2014 "),FH=n(nP,"A",{href:!0});var JSt=s(FH);Lgr=r(JSt,"DeiTForImageClassification"),JSt.forEach(t),ygr=r(nP," or "),TH=n(nP,"A",{href:!0});var YSt=s(TH);xgr=r(YSt,"DeiTForImageClassificationWithTeacher"),YSt.forEach(t),$gr=r(nP," (DeiT model)"),nP.forEach(t),kgr=i(Fe),cE=n(Fe,"LI",{});var ODe=s(cE);iTe=n(ODe,"STRONG",{});var KSt=s(iTe);Sgr=r(KSt,"imagegpt"),KSt.forEach(t),Rgr=r(ODe," \u2014 "),MH=n(ODe,"A",{href:!0});var ZSt=s(MH);Pgr=r(ZSt,"ImageGPTForImageClassification"),ZSt.forEach(t),Bgr=r(ODe," (ImageGPT model)"),ODe.forEach(t),Igr=i(Fe),ll=n(Fe,"LI",{});var sP=s(ll);dTe=n(sP,"STRONG",{});var eRt=s(dTe);Ngr=r(eRt,"levit"),eRt.forEach(t),qgr=r(sP," \u2014 "),EH=n(sP,"A",{href:!0});var oRt=s(EH);jgr=r(oRt,"LevitForImageClassification"),oRt.forEach(t),Dgr=r(sP," or "),CH=n(sP,"A",{href:!0});var rRt=s(CH);Ggr=r(rRt,"LevitForImageClassificationWithTeacher"),rRt.forEach(t),Ogr=r(sP," (LeViT model)"),sP.forEach(t),Vgr=i(Fe),mE=n(Fe,"LI",{});var VDe=s(mE);cTe=n(VDe,"STRONG",{});var tRt=s(cTe);Xgr=r(tRt,"mobilevit"),tRt.forEach(t),zgr=r(VDe," \u2014 "),wH=n(VDe,"A",{href:!0});var aRt=s(wH);Wgr=r(aRt,"MobileViTForImageClassification"),aRt.forEach(t),Qgr=r(VDe," (MobileViT model)"),VDe.forEach(t),Ugr=i(Fe),Ct=n(Fe,"LI",{});var Km=s(Ct);mTe=n(Km,"STRONG",{});var nRt=s(mTe);Hgr=r(nRt,"perceiver"),nRt.forEach(t),Jgr=r(Km," \u2014 "),AH=n(Km,"A",{href:!0});var sRt=s(AH);Ygr=r(sRt,"PerceiverForImageClassificationLearned"),sRt.forEach(t),Kgr=r(Km," or "),LH=n(Km,"A",{href:!0});var lRt=s(LH);Zgr=r(lRt,"PerceiverForImageClassificationFourier"),lRt.forEach(t),ehr=r(Km," or "),yH=n(Km,"A",{href:!0});var iRt=s(yH);ohr=r(iRt,"PerceiverForImageClassificationConvProcessing"),iRt.forEach(t),rhr=r(Km," (Perceiver model)"),Km.forEach(t),thr=i(Fe),fE=n(Fe,"LI",{});var XDe=s(fE);fTe=n(XDe,"STRONG",{});var dRt=s(fTe);ahr=r(dRt,"poolformer"),dRt.forEach(t),nhr=r(XDe," \u2014 "),xH=n(XDe,"A",{href:!0});var cRt=s(xH);shr=r(cRt,"PoolFormerForImageClassification"),cRt.forEach(t),lhr=r(XDe," (PoolFormer model)"),XDe.forEach(t),ihr=i(Fe),gE=n(Fe,"LI",{});var zDe=s(gE);gTe=n(zDe,"STRONG",{});var mRt=s(gTe);dhr=r(mRt,"regnet"),mRt.forEach(t),chr=r(zDe," \u2014 "),$H=n(zDe,"A",{href:!0});var fRt=s($H);mhr=r(fRt,"RegNetForImageClassification"),fRt.forEach(t),fhr=r(zDe," (RegNet model)"),zDe.forEach(t),ghr=i(Fe),hE=n(Fe,"LI",{});var WDe=s(hE);hTe=n(WDe,"STRONG",{});var gRt=s(hTe);hhr=r(gRt,"resnet"),gRt.forEach(t),uhr=r(WDe," \u2014 "),kH=n(WDe,"A",{href:!0});var hRt=s(kH);phr=r(hRt,"ResNetForImageClassification"),hRt.forEach(t),_hr=r(WDe," (ResNet model)"),WDe.forEach(t),bhr=i(Fe),uE=n(Fe,"LI",{});var QDe=s(uE);uTe=n(QDe,"STRONG",{});var uRt=s(uTe);vhr=r(uRt,"segformer"),uRt.forEach(t),Fhr=r(QDe," \u2014 "),SH=n(QDe,"A",{href:!0});var pRt=s(SH);Thr=r(pRt,"SegformerForImageClassification"),pRt.forEach(t),Mhr=r(QDe," (SegFormer model)"),QDe.forEach(t),Ehr=i(Fe),pE=n(Fe,"LI",{});var UDe=s(pE);pTe=n(UDe,"STRONG",{});var _Rt=s(pTe);Chr=r(_Rt,"swin"),_Rt.forEach(t),whr=r(UDe," \u2014 "),RH=n(UDe,"A",{href:!0});var bRt=s(RH);Ahr=r(bRt,"SwinForImageClassification"),bRt.forEach(t),Lhr=r(UDe," (Swin Transformer model)"),UDe.forEach(t),yhr=i(Fe),_E=n(Fe,"LI",{});var HDe=s(_E);_Te=n(HDe,"STRONG",{});var vRt=s(_Te);xhr=r(vRt,"swinv2"),vRt.forEach(t),$hr=r(HDe," \u2014 "),PH=n(HDe,"A",{href:!0});var FRt=s(PH);khr=r(FRt,"Swinv2ForImageClassification"),FRt.forEach(t),Shr=r(HDe," (Swin Transformer V2 model)"),HDe.forEach(t),Rhr=i(Fe),bE=n(Fe,"LI",{});var JDe=s(bE);bTe=n(JDe,"STRONG",{});var TRt=s(bTe);Phr=r(TRt,"van"),TRt.forEach(t),Bhr=r(JDe," \u2014 "),BH=n(JDe,"A",{href:!0});var MRt=s(BH);Ihr=r(MRt,"VanForImageClassification"),MRt.forEach(t),Nhr=r(JDe," (VAN model)"),JDe.forEach(t),qhr=i(Fe),vE=n(Fe,"LI",{});var YDe=s(vE);vTe=n(YDe,"STRONG",{});var ERt=s(vTe);jhr=r(ERt,"vit"),ERt.forEach(t),Dhr=r(YDe," \u2014 "),IH=n(YDe,"A",{href:!0});var CRt=s(IH);Ghr=r(CRt,"ViTForImageClassification"),CRt.forEach(t),Ohr=r(YDe," (ViT model)"),YDe.forEach(t),Fe.forEach(t),Vhr=i(wa),FE=n(wa,"P",{});var KDe=s(FE);Xhr=r(KDe,"The model is set in evaluation mode by default using "),FTe=n(KDe,"CODE",{});var wRt=s(FTe);zhr=r(wRt,"model.eval()"),wRt.forEach(t),Whr=r(KDe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),TTe=n(KDe,"CODE",{});var ARt=s(TTe);Qhr=r(ARt,"model.train()"),ARt.forEach(t),KDe.forEach(t),Uhr=i(wa),T(TE.$$.fragment,wa),wa.forEach(t),wl.forEach(t),QUe=i(m),qd=n(m,"H2",{class:!0});var tYe=s(qd);ME=n(tYe,"A",{id:!0,class:!0,href:!0});var LRt=s(ME);MTe=n(LRt,"SPAN",{});var yRt=s(MTe);T(Y9.$$.fragment,yRt),yRt.forEach(t),LRt.forEach(t),Hhr=i(tYe),ETe=n(tYe,"SPAN",{});var xRt=s(ETe);Jhr=r(xRt,"AutoModelForVideoClassification"),xRt.forEach(t),tYe.forEach(t),UUe=i(m),zo=n(m,"DIV",{class:!0});var Al=s(zo);T(K9.$$.fragment,Al),Yhr=i(Al),jd=n(Al,"P",{});var Mne=s(jd);Khr=r(Mne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a video classification head) when created
with the `),NH=n(Mne,"A",{href:!0});var $Rt=s(NH);Zhr=r($Rt,"from_pretrained()"),$Rt.forEach(t),eur=r(Mne," class method or the "),qH=n(Mne,"A",{href:!0});var kRt=s(qH);our=r(kRt,"from_config()"),kRt.forEach(t),rur=r(Mne,` class
method.`),Mne.forEach(t),tur=i(Al),Z9=n(Al,"P",{});var aYe=s(Z9);aur=r(aYe,"This class cannot be instantiated directly using "),CTe=n(aYe,"CODE",{});var SRt=s(CTe);nur=r(SRt,"__init__()"),SRt.forEach(t),sur=r(aYe," (throws an error)."),aYe.forEach(t),lur=i(Al),wt=n(Al,"DIV",{class:!0});var OL=s(wt);T(ex.$$.fragment,OL),iur=i(OL),wTe=n(OL,"P",{});var RRt=s(wTe);dur=r(RRt,"Instantiates one of the model classes of the library (with a video classification head) from a configuration."),RRt.forEach(t),cur=i(OL),Dd=n(OL,"P",{});var Ene=s(Dd);mur=r(Ene,`Note:
Loading a model from its configuration file does `),ATe=n(Ene,"STRONG",{});var PRt=s(ATe);fur=r(PRt,"not"),PRt.forEach(t),gur=r(Ene,` load the model weights. It only affects the
model\u2019s configuration. Use `),jH=n(Ene,"A",{href:!0});var BRt=s(jH);hur=r(BRt,"from_pretrained()"),BRt.forEach(t),uur=r(Ene," to load the model weights."),Ene.forEach(t),pur=i(OL),T(EE.$$.fragment,OL),OL.forEach(t),_ur=i(Al),co=n(Al,"DIV",{class:!0});var Aa=s(co);T(ox.$$.fragment,Aa),bur=i(Aa),LTe=n(Aa,"P",{});var IRt=s(LTe);vur=r(IRt,"Instantiate one of the model classes of the library (with a video classification head) from a pretrained model."),IRt.forEach(t),Fur=i(Aa),on=n(Aa,"P",{});var VL=s(on);Tur=r(VL,"The model class to instantiate is selected based on the "),yTe=n(VL,"CODE",{});var NRt=s(yTe);Mur=r(NRt,"model_type"),NRt.forEach(t),Eur=r(VL,` property of the config object (either
passed as an argument or loaded from `),xTe=n(VL,"CODE",{});var qRt=s(xTe);Cur=r(qRt,"pretrained_model_name_or_path"),qRt.forEach(t),wur=r(VL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$Te=n(VL,"CODE",{});var jRt=s($Te);Aur=r(jRt,"pretrained_model_name_or_path"),jRt.forEach(t),Lur=r(VL,":"),VL.forEach(t),yur=i(Aa),kTe=n(Aa,"UL",{});var DRt=s(kTe);CE=n(DRt,"LI",{});var ZDe=s(CE);STe=n(ZDe,"STRONG",{});var GRt=s(STe);xur=r(GRt,"videomae"),GRt.forEach(t),$ur=r(ZDe," \u2014 "),DH=n(ZDe,"A",{href:!0});var ORt=s(DH);kur=r(ORt,"VideoMAEForVideoClassification"),ORt.forEach(t),Sur=r(ZDe," (VideoMAE model)"),ZDe.forEach(t),DRt.forEach(t),Rur=i(Aa),wE=n(Aa,"P",{});var eGe=s(wE);Pur=r(eGe,"The model is set in evaluation mode by default using "),RTe=n(eGe,"CODE",{});var VRt=s(RTe);Bur=r(VRt,"model.eval()"),VRt.forEach(t),Iur=r(eGe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),PTe=n(eGe,"CODE",{});var XRt=s(PTe);Nur=r(XRt,"model.train()"),XRt.forEach(t),eGe.forEach(t),qur=i(Aa),T(AE.$$.fragment,Aa),Aa.forEach(t),Al.forEach(t),HUe=i(m),Gd=n(m,"H2",{class:!0});var nYe=s(Gd);LE=n(nYe,"A",{id:!0,class:!0,href:!0});var zRt=s(LE);BTe=n(zRt,"SPAN",{});var WRt=s(BTe);T(rx.$$.fragment,WRt),WRt.forEach(t),zRt.forEach(t),jur=i(nYe),ITe=n(nYe,"SPAN",{});var QRt=s(ITe);Dur=r(QRt,"AutoModelForVision2Seq"),QRt.forEach(t),nYe.forEach(t),JUe=i(m),Wo=n(m,"DIV",{class:!0});var Ll=s(Wo);T(tx.$$.fragment,Ll),Gur=i(Ll),Od=n(Ll,"P",{});var Cne=s(Od);Our=r(Cne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),GH=n(Cne,"A",{href:!0});var URt=s(GH);Vur=r(URt,"from_pretrained()"),URt.forEach(t),Xur=r(Cne," class method or the "),OH=n(Cne,"A",{href:!0});var HRt=s(OH);zur=r(HRt,"from_config()"),HRt.forEach(t),Wur=r(Cne,` class
method.`),Cne.forEach(t),Qur=i(Ll),ax=n(Ll,"P",{});var sYe=s(ax);Uur=r(sYe,"This class cannot be instantiated directly using "),NTe=n(sYe,"CODE",{});var JRt=s(NTe);Hur=r(JRt,"__init__()"),JRt.forEach(t),Jur=r(sYe," (throws an error)."),sYe.forEach(t),Yur=i(Ll),At=n(Ll,"DIV",{class:!0});var XL=s(At);T(nx.$$.fragment,XL),Kur=i(XL),qTe=n(XL,"P",{});var YRt=s(qTe);Zur=r(YRt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),YRt.forEach(t),epr=i(XL),Vd=n(XL,"P",{});var wne=s(Vd);opr=r(wne,`Note:
Loading a model from its configuration file does `),jTe=n(wne,"STRONG",{});var KRt=s(jTe);rpr=r(KRt,"not"),KRt.forEach(t),tpr=r(wne,` load the model weights. It only affects the
model\u2019s configuration. Use `),VH=n(wne,"A",{href:!0});var ZRt=s(VH);apr=r(ZRt,"from_pretrained()"),ZRt.forEach(t),npr=r(wne," to load the model weights."),wne.forEach(t),spr=i(XL),T(yE.$$.fragment,XL),XL.forEach(t),lpr=i(Ll),mo=n(Ll,"DIV",{class:!0});var La=s(mo);T(sx.$$.fragment,La),ipr=i(La),DTe=n(La,"P",{});var ePt=s(DTe);dpr=r(ePt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),ePt.forEach(t),cpr=i(La),rn=n(La,"P",{});var zL=s(rn);mpr=r(zL,"The model class to instantiate is selected based on the "),GTe=n(zL,"CODE",{});var oPt=s(GTe);fpr=r(oPt,"model_type"),oPt.forEach(t),gpr=r(zL,` property of the config object (either
passed as an argument or loaded from `),OTe=n(zL,"CODE",{});var rPt=s(OTe);hpr=r(rPt,"pretrained_model_name_or_path"),rPt.forEach(t),upr=r(zL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),VTe=n(zL,"CODE",{});var tPt=s(VTe);ppr=r(tPt,"pretrained_model_name_or_path"),tPt.forEach(t),_pr=r(zL,":"),zL.forEach(t),bpr=i(La),XTe=n(La,"UL",{});var aPt=s(XTe);xE=n(aPt,"LI",{});var oGe=s(xE);zTe=n(oGe,"STRONG",{});var nPt=s(zTe);vpr=r(nPt,"vision-encoder-decoder"),nPt.forEach(t),Fpr=r(oGe," \u2014 "),XH=n(oGe,"A",{href:!0});var sPt=s(XH);Tpr=r(sPt,"VisionEncoderDecoderModel"),sPt.forEach(t),Mpr=r(oGe," (Vision Encoder decoder model)"),oGe.forEach(t),aPt.forEach(t),Epr=i(La),$E=n(La,"P",{});var rGe=s($E);Cpr=r(rGe,"The model is set in evaluation mode by default using "),WTe=n(rGe,"CODE",{});var lPt=s(WTe);wpr=r(lPt,"model.eval()"),lPt.forEach(t),Apr=r(rGe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),QTe=n(rGe,"CODE",{});var iPt=s(QTe);Lpr=r(iPt,"model.train()"),iPt.forEach(t),rGe.forEach(t),ypr=i(La),T(kE.$$.fragment,La),La.forEach(t),Ll.forEach(t),YUe=i(m),Xd=n(m,"H2",{class:!0});var lYe=s(Xd);SE=n(lYe,"A",{id:!0,class:!0,href:!0});var dPt=s(SE);UTe=n(dPt,"SPAN",{});var cPt=s(UTe);T(lx.$$.fragment,cPt),cPt.forEach(t),dPt.forEach(t),xpr=i(lYe),HTe=n(lYe,"SPAN",{});var mPt=s(HTe);$pr=r(mPt,"AutoModelForVisualQuestionAnswering"),mPt.forEach(t),lYe.forEach(t),KUe=i(m),Qo=n(m,"DIV",{class:!0});var yl=s(Qo);T(ix.$$.fragment,yl),kpr=i(yl),zd=n(yl,"P",{});var Ane=s(zd);Spr=r(Ane,`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),zH=n(Ane,"A",{href:!0});var fPt=s(zH);Rpr=r(fPt,"from_pretrained()"),fPt.forEach(t),Ppr=r(Ane," class method or the "),WH=n(Ane,"A",{href:!0});var gPt=s(WH);Bpr=r(gPt,"from_config()"),gPt.forEach(t),Ipr=r(Ane,` class
method.`),Ane.forEach(t),Npr=i(yl),dx=n(yl,"P",{});var iYe=s(dx);qpr=r(iYe,"This class cannot be instantiated directly using "),JTe=n(iYe,"CODE",{});var hPt=s(JTe);jpr=r(hPt,"__init__()"),hPt.forEach(t),Dpr=r(iYe," (throws an error)."),iYe.forEach(t),Gpr=i(yl),Lt=n(yl,"DIV",{class:!0});var WL=s(Lt);T(cx.$$.fragment,WL),Opr=i(WL),YTe=n(WL,"P",{});var uPt=s(YTe);Vpr=r(uPt,"Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),uPt.forEach(t),Xpr=i(WL),Wd=n(WL,"P",{});var Lne=s(Wd);zpr=r(Lne,`Note:
Loading a model from its configuration file does `),KTe=n(Lne,"STRONG",{});var pPt=s(KTe);Wpr=r(pPt,"not"),pPt.forEach(t),Qpr=r(Lne,` load the model weights. It only affects the
model\u2019s configuration. Use `),QH=n(Lne,"A",{href:!0});var _Pt=s(QH);Upr=r(_Pt,"from_pretrained()"),_Pt.forEach(t),Hpr=r(Lne," to load the model weights."),Lne.forEach(t),Jpr=i(WL),T(RE.$$.fragment,WL),WL.forEach(t),Ypr=i(yl),fo=n(yl,"DIV",{class:!0});var ya=s(fo);T(mx.$$.fragment,ya),Kpr=i(ya),ZTe=n(ya,"P",{});var bPt=s(ZTe);Zpr=r(bPt,"Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),bPt.forEach(t),e_r=i(ya),tn=n(ya,"P",{});var QL=s(tn);o_r=r(QL,"The model class to instantiate is selected based on the "),eMe=n(QL,"CODE",{});var vPt=s(eMe);r_r=r(vPt,"model_type"),vPt.forEach(t),t_r=r(QL,` property of the config object (either
passed as an argument or loaded from `),oMe=n(QL,"CODE",{});var FPt=s(oMe);a_r=r(FPt,"pretrained_model_name_or_path"),FPt.forEach(t),n_r=r(QL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rMe=n(QL,"CODE",{});var TPt=s(rMe);s_r=r(TPt,"pretrained_model_name_or_path"),TPt.forEach(t),l_r=r(QL,":"),QL.forEach(t),i_r=i(ya),tMe=n(ya,"UL",{});var MPt=s(tMe);PE=n(MPt,"LI",{});var tGe=s(PE);aMe=n(tGe,"STRONG",{});var EPt=s(aMe);d_r=r(EPt,"vilt"),EPt.forEach(t),c_r=r(tGe," \u2014 "),UH=n(tGe,"A",{href:!0});var CPt=s(UH);m_r=r(CPt,"ViltForQuestionAnswering"),CPt.forEach(t),f_r=r(tGe," (ViLT model)"),tGe.forEach(t),MPt.forEach(t),g_r=i(ya),BE=n(ya,"P",{});var aGe=s(BE);h_r=r(aGe,"The model is set in evaluation mode by default using "),nMe=n(aGe,"CODE",{});var wPt=s(nMe);u_r=r(wPt,"model.eval()"),wPt.forEach(t),p_r=r(aGe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sMe=n(aGe,"CODE",{});var APt=s(sMe);__r=r(APt,"model.train()"),APt.forEach(t),aGe.forEach(t),b_r=i(ya),T(IE.$$.fragment,ya),ya.forEach(t),yl.forEach(t),ZUe=i(m),Qd=n(m,"H2",{class:!0});var dYe=s(Qd);NE=n(dYe,"A",{id:!0,class:!0,href:!0});var LPt=s(NE);lMe=n(LPt,"SPAN",{});var yPt=s(lMe);T(fx.$$.fragment,yPt),yPt.forEach(t),LPt.forEach(t),v_r=i(dYe),iMe=n(dYe,"SPAN",{});var xPt=s(iMe);F_r=r(xPt,"AutoModelForAudioClassification"),xPt.forEach(t),dYe.forEach(t),eHe=i(m),Uo=n(m,"DIV",{class:!0});var xl=s(Uo);T(gx.$$.fragment,xl),T_r=i(xl),Ud=n(xl,"P",{});var yne=s(Ud);M_r=r(yne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),HH=n(yne,"A",{href:!0});var $Pt=s(HH);E_r=r($Pt,"from_pretrained()"),$Pt.forEach(t),C_r=r(yne," class method or the "),JH=n(yne,"A",{href:!0});var kPt=s(JH);w_r=r(kPt,"from_config()"),kPt.forEach(t),A_r=r(yne,` class
method.`),yne.forEach(t),L_r=i(xl),hx=n(xl,"P",{});var cYe=s(hx);y_r=r(cYe,"This class cannot be instantiated directly using "),dMe=n(cYe,"CODE",{});var SPt=s(dMe);x_r=r(SPt,"__init__()"),SPt.forEach(t),$_r=r(cYe," (throws an error)."),cYe.forEach(t),k_r=i(xl),yt=n(xl,"DIV",{class:!0});var UL=s(yt);T(ux.$$.fragment,UL),S_r=i(UL),cMe=n(UL,"P",{});var RPt=s(cMe);R_r=r(RPt,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),RPt.forEach(t),P_r=i(UL),Hd=n(UL,"P",{});var xne=s(Hd);B_r=r(xne,`Note:
Loading a model from its configuration file does `),mMe=n(xne,"STRONG",{});var PPt=s(mMe);I_r=r(PPt,"not"),PPt.forEach(t),N_r=r(xne,` load the model weights. It only affects the
model\u2019s configuration. Use `),YH=n(xne,"A",{href:!0});var BPt=s(YH);q_r=r(BPt,"from_pretrained()"),BPt.forEach(t),j_r=r(xne," to load the model weights."),xne.forEach(t),D_r=i(UL),T(qE.$$.fragment,UL),UL.forEach(t),G_r=i(xl),go=n(xl,"DIV",{class:!0});var xa=s(go);T(px.$$.fragment,xa),O_r=i(xa),fMe=n(xa,"P",{});var IPt=s(fMe);V_r=r(IPt,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),IPt.forEach(t),X_r=i(xa),an=n(xa,"P",{});var HL=s(an);z_r=r(HL,"The model class to instantiate is selected based on the "),gMe=n(HL,"CODE",{});var NPt=s(gMe);W_r=r(NPt,"model_type"),NPt.forEach(t),Q_r=r(HL,` property of the config object (either
passed as an argument or loaded from `),hMe=n(HL,"CODE",{});var qPt=s(hMe);U_r=r(qPt,"pretrained_model_name_or_path"),qPt.forEach(t),H_r=r(HL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uMe=n(HL,"CODE",{});var jPt=s(uMe);J_r=r(jPt,"pretrained_model_name_or_path"),jPt.forEach(t),Y_r=r(HL,":"),HL.forEach(t),K_r=i(xa),Pe=n(xa,"UL",{});var We=s(Pe);jE=n(We,"LI",{});var nGe=s(jE);pMe=n(nGe,"STRONG",{});var DPt=s(pMe);Z_r=r(DPt,"data2vec-audio"),DPt.forEach(t),e2r=r(nGe," \u2014 "),KH=n(nGe,"A",{href:!0});var GPt=s(KH);o2r=r(GPt,"Data2VecAudioForSequenceClassification"),GPt.forEach(t),r2r=r(nGe," (Data2VecAudio model)"),nGe.forEach(t),t2r=i(We),DE=n(We,"LI",{});var sGe=s(DE);_Me=n(sGe,"STRONG",{});var OPt=s(_Me);a2r=r(OPt,"hubert"),OPt.forEach(t),n2r=r(sGe," \u2014 "),ZH=n(sGe,"A",{href:!0});var VPt=s(ZH);s2r=r(VPt,"HubertForSequenceClassification"),VPt.forEach(t),l2r=r(sGe," (Hubert model)"),sGe.forEach(t),i2r=i(We),GE=n(We,"LI",{});var lGe=s(GE);bMe=n(lGe,"STRONG",{});var XPt=s(bMe);d2r=r(XPt,"sew"),XPt.forEach(t),c2r=r(lGe," \u2014 "),eJ=n(lGe,"A",{href:!0});var zPt=s(eJ);m2r=r(zPt,"SEWForSequenceClassification"),zPt.forEach(t),f2r=r(lGe," (SEW model)"),lGe.forEach(t),g2r=i(We),OE=n(We,"LI",{});var iGe=s(OE);vMe=n(iGe,"STRONG",{});var WPt=s(vMe);h2r=r(WPt,"sew-d"),WPt.forEach(t),u2r=r(iGe," \u2014 "),oJ=n(iGe,"A",{href:!0});var QPt=s(oJ);p2r=r(QPt,"SEWDForSequenceClassification"),QPt.forEach(t),_2r=r(iGe," (SEW-D model)"),iGe.forEach(t),b2r=i(We),VE=n(We,"LI",{});var dGe=s(VE);FMe=n(dGe,"STRONG",{});var UPt=s(FMe);v2r=r(UPt,"unispeech"),UPt.forEach(t),F2r=r(dGe," \u2014 "),rJ=n(dGe,"A",{href:!0});var HPt=s(rJ);T2r=r(HPt,"UniSpeechForSequenceClassification"),HPt.forEach(t),M2r=r(dGe," (UniSpeech model)"),dGe.forEach(t),E2r=i(We),XE=n(We,"LI",{});var cGe=s(XE);TMe=n(cGe,"STRONG",{});var JPt=s(TMe);C2r=r(JPt,"unispeech-sat"),JPt.forEach(t),w2r=r(cGe," \u2014 "),tJ=n(cGe,"A",{href:!0});var YPt=s(tJ);A2r=r(YPt,"UniSpeechSatForSequenceClassification"),YPt.forEach(t),L2r=r(cGe," (UniSpeechSat model)"),cGe.forEach(t),y2r=i(We),zE=n(We,"LI",{});var mGe=s(zE);MMe=n(mGe,"STRONG",{});var KPt=s(MMe);x2r=r(KPt,"wav2vec2"),KPt.forEach(t),$2r=r(mGe," \u2014 "),aJ=n(mGe,"A",{href:!0});var ZPt=s(aJ);k2r=r(ZPt,"Wav2Vec2ForSequenceClassification"),ZPt.forEach(t),S2r=r(mGe," (Wav2Vec2 model)"),mGe.forEach(t),R2r=i(We),WE=n(We,"LI",{});var fGe=s(WE);EMe=n(fGe,"STRONG",{});var eBt=s(EMe);P2r=r(eBt,"wav2vec2-conformer"),eBt.forEach(t),B2r=r(fGe," \u2014 "),nJ=n(fGe,"A",{href:!0});var oBt=s(nJ);I2r=r(oBt,"Wav2Vec2ConformerForSequenceClassification"),oBt.forEach(t),N2r=r(fGe," (Wav2Vec2-Conformer model)"),fGe.forEach(t),q2r=i(We),QE=n(We,"LI",{});var gGe=s(QE);CMe=n(gGe,"STRONG",{});var rBt=s(CMe);j2r=r(rBt,"wavlm"),rBt.forEach(t),D2r=r(gGe," \u2014 "),sJ=n(gGe,"A",{href:!0});var tBt=s(sJ);G2r=r(tBt,"WavLMForSequenceClassification"),tBt.forEach(t),O2r=r(gGe," (WavLM model)"),gGe.forEach(t),We.forEach(t),V2r=i(xa),UE=n(xa,"P",{});var hGe=s(UE);X2r=r(hGe,"The model is set in evaluation mode by default using "),wMe=n(hGe,"CODE",{});var aBt=s(wMe);z2r=r(aBt,"model.eval()"),aBt.forEach(t),W2r=r(hGe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),AMe=n(hGe,"CODE",{});var nBt=s(AMe);Q2r=r(nBt,"model.train()"),nBt.forEach(t),hGe.forEach(t),U2r=i(xa),T(HE.$$.fragment,xa),xa.forEach(t),xl.forEach(t),oHe=i(m),Jd=n(m,"H2",{class:!0});var mYe=s(Jd);JE=n(mYe,"A",{id:!0,class:!0,href:!0});var sBt=s(JE);LMe=n(sBt,"SPAN",{});var lBt=s(LMe);T(_x.$$.fragment,lBt),lBt.forEach(t),sBt.forEach(t),H2r=i(mYe),yMe=n(mYe,"SPAN",{});var iBt=s(yMe);J2r=r(iBt,"AutoModelForAudioFrameClassification"),iBt.forEach(t),mYe.forEach(t),rHe=i(m),Ho=n(m,"DIV",{class:!0});var $l=s(Ho);T(bx.$$.fragment,$l),Y2r=i($l),Yd=n($l,"P",{});var $ne=s(Yd);K2r=r($ne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),lJ=n($ne,"A",{href:!0});var dBt=s(lJ);Z2r=r(dBt,"from_pretrained()"),dBt.forEach(t),ebr=r($ne," class method or the "),iJ=n($ne,"A",{href:!0});var cBt=s(iJ);obr=r(cBt,"from_config()"),cBt.forEach(t),rbr=r($ne,` class
method.`),$ne.forEach(t),tbr=i($l),vx=n($l,"P",{});var fYe=s(vx);abr=r(fYe,"This class cannot be instantiated directly using "),xMe=n(fYe,"CODE",{});var mBt=s(xMe);nbr=r(mBt,"__init__()"),mBt.forEach(t),sbr=r(fYe," (throws an error)."),fYe.forEach(t),lbr=i($l),xt=n($l,"DIV",{class:!0});var JL=s(xt);T(Fx.$$.fragment,JL),ibr=i(JL),$Me=n(JL,"P",{});var fBt=s($Me);dbr=r(fBt,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),fBt.forEach(t),cbr=i(JL),Kd=n(JL,"P",{});var kne=s(Kd);mbr=r(kne,`Note:
Loading a model from its configuration file does `),kMe=n(kne,"STRONG",{});var gBt=s(kMe);fbr=r(gBt,"not"),gBt.forEach(t),gbr=r(kne,` load the model weights. It only affects the
model\u2019s configuration. Use `),dJ=n(kne,"A",{href:!0});var hBt=s(dJ);hbr=r(hBt,"from_pretrained()"),hBt.forEach(t),ubr=r(kne," to load the model weights."),kne.forEach(t),pbr=i(JL),T(YE.$$.fragment,JL),JL.forEach(t),_br=i($l),ho=n($l,"DIV",{class:!0});var $a=s(ho);T(Tx.$$.fragment,$a),bbr=i($a),SMe=n($a,"P",{});var uBt=s(SMe);vbr=r(uBt,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),uBt.forEach(t),Fbr=i($a),nn=n($a,"P",{});var YL=s(nn);Tbr=r(YL,"The model class to instantiate is selected based on the "),RMe=n(YL,"CODE",{});var pBt=s(RMe);Mbr=r(pBt,"model_type"),pBt.forEach(t),Ebr=r(YL,` property of the config object (either
passed as an argument or loaded from `),PMe=n(YL,"CODE",{});var _Bt=s(PMe);Cbr=r(_Bt,"pretrained_model_name_or_path"),_Bt.forEach(t),wbr=r(YL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),BMe=n(YL,"CODE",{});var bBt=s(BMe);Abr=r(bBt,"pretrained_model_name_or_path"),bBt.forEach(t),Lbr=r(YL,":"),YL.forEach(t),ybr=i($a),st=n($a,"UL",{});var kl=s(st);KE=n(kl,"LI",{});var uGe=s(KE);IMe=n(uGe,"STRONG",{});var vBt=s(IMe);xbr=r(vBt,"data2vec-audio"),vBt.forEach(t),$br=r(uGe," \u2014 "),cJ=n(uGe,"A",{href:!0});var FBt=s(cJ);kbr=r(FBt,"Data2VecAudioForAudioFrameClassification"),FBt.forEach(t),Sbr=r(uGe," (Data2VecAudio model)"),uGe.forEach(t),Rbr=i(kl),ZE=n(kl,"LI",{});var pGe=s(ZE);NMe=n(pGe,"STRONG",{});var TBt=s(NMe);Pbr=r(TBt,"unispeech-sat"),TBt.forEach(t),Bbr=r(pGe," \u2014 "),mJ=n(pGe,"A",{href:!0});var MBt=s(mJ);Ibr=r(MBt,"UniSpeechSatForAudioFrameClassification"),MBt.forEach(t),Nbr=r(pGe," (UniSpeechSat model)"),pGe.forEach(t),qbr=i(kl),e4=n(kl,"LI",{});var _Ge=s(e4);qMe=n(_Ge,"STRONG",{});var EBt=s(qMe);jbr=r(EBt,"wav2vec2"),EBt.forEach(t),Dbr=r(_Ge," \u2014 "),fJ=n(_Ge,"A",{href:!0});var CBt=s(fJ);Gbr=r(CBt,"Wav2Vec2ForAudioFrameClassification"),CBt.forEach(t),Obr=r(_Ge," (Wav2Vec2 model)"),_Ge.forEach(t),Vbr=i(kl),o4=n(kl,"LI",{});var bGe=s(o4);jMe=n(bGe,"STRONG",{});var wBt=s(jMe);Xbr=r(wBt,"wav2vec2-conformer"),wBt.forEach(t),zbr=r(bGe," \u2014 "),gJ=n(bGe,"A",{href:!0});var ABt=s(gJ);Wbr=r(ABt,"Wav2Vec2ConformerForAudioFrameClassification"),ABt.forEach(t),Qbr=r(bGe," (Wav2Vec2-Conformer model)"),bGe.forEach(t),Ubr=i(kl),r4=n(kl,"LI",{});var vGe=s(r4);DMe=n(vGe,"STRONG",{});var LBt=s(DMe);Hbr=r(LBt,"wavlm"),LBt.forEach(t),Jbr=r(vGe," \u2014 "),hJ=n(vGe,"A",{href:!0});var yBt=s(hJ);Ybr=r(yBt,"WavLMForAudioFrameClassification"),yBt.forEach(t),Kbr=r(vGe," (WavLM model)"),vGe.forEach(t),kl.forEach(t),Zbr=i($a),t4=n($a,"P",{});var FGe=s(t4);evr=r(FGe,"The model is set in evaluation mode by default using "),GMe=n(FGe,"CODE",{});var xBt=s(GMe);ovr=r(xBt,"model.eval()"),xBt.forEach(t),rvr=r(FGe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),OMe=n(FGe,"CODE",{});var $Bt=s(OMe);tvr=r($Bt,"model.train()"),$Bt.forEach(t),FGe.forEach(t),avr=i($a),T(a4.$$.fragment,$a),$a.forEach(t),$l.forEach(t),tHe=i(m),Zd=n(m,"H2",{class:!0});var gYe=s(Zd);n4=n(gYe,"A",{id:!0,class:!0,href:!0});var kBt=s(n4);VMe=n(kBt,"SPAN",{});var SBt=s(VMe);T(Mx.$$.fragment,SBt),SBt.forEach(t),kBt.forEach(t),nvr=i(gYe),XMe=n(gYe,"SPAN",{});var RBt=s(XMe);svr=r(RBt,"AutoModelForCTC"),RBt.forEach(t),gYe.forEach(t),aHe=i(m),Jo=n(m,"DIV",{class:!0});var Sl=s(Jo);T(Ex.$$.fragment,Sl),lvr=i(Sl),ec=n(Sl,"P",{});var Sne=s(ec);ivr=r(Sne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),uJ=n(Sne,"A",{href:!0});var PBt=s(uJ);dvr=r(PBt,"from_pretrained()"),PBt.forEach(t),cvr=r(Sne," class method or the "),pJ=n(Sne,"A",{href:!0});var BBt=s(pJ);mvr=r(BBt,"from_config()"),BBt.forEach(t),fvr=r(Sne,` class
method.`),Sne.forEach(t),gvr=i(Sl),Cx=n(Sl,"P",{});var hYe=s(Cx);hvr=r(hYe,"This class cannot be instantiated directly using "),zMe=n(hYe,"CODE",{});var IBt=s(zMe);uvr=r(IBt,"__init__()"),IBt.forEach(t),pvr=r(hYe," (throws an error)."),hYe.forEach(t),_vr=i(Sl),$t=n(Sl,"DIV",{class:!0});var KL=s($t);T(wx.$$.fragment,KL),bvr=i(KL),WMe=n(KL,"P",{});var NBt=s(WMe);vvr=r(NBt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),NBt.forEach(t),Fvr=i(KL),oc=n(KL,"P",{});var Rne=s(oc);Tvr=r(Rne,`Note:
Loading a model from its configuration file does `),QMe=n(Rne,"STRONG",{});var qBt=s(QMe);Mvr=r(qBt,"not"),qBt.forEach(t),Evr=r(Rne,` load the model weights. It only affects the
model\u2019s configuration. Use `),_J=n(Rne,"A",{href:!0});var jBt=s(_J);Cvr=r(jBt,"from_pretrained()"),jBt.forEach(t),wvr=r(Rne," to load the model weights."),Rne.forEach(t),Avr=i(KL),T(s4.$$.fragment,KL),KL.forEach(t),Lvr=i(Sl),uo=n(Sl,"DIV",{class:!0});var ka=s(uo);T(Ax.$$.fragment,ka),yvr=i(ka),UMe=n(ka,"P",{});var DBt=s(UMe);xvr=r(DBt,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),DBt.forEach(t),$vr=i(ka),sn=n(ka,"P",{});var ZL=s(sn);kvr=r(ZL,"The model class to instantiate is selected based on the "),HMe=n(ZL,"CODE",{});var GBt=s(HMe);Svr=r(GBt,"model_type"),GBt.forEach(t),Rvr=r(ZL,` property of the config object (either
passed as an argument or loaded from `),JMe=n(ZL,"CODE",{});var OBt=s(JMe);Pvr=r(OBt,"pretrained_model_name_or_path"),OBt.forEach(t),Bvr=r(ZL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),YMe=n(ZL,"CODE",{});var VBt=s(YMe);Ivr=r(VBt,"pretrained_model_name_or_path"),VBt.forEach(t),Nvr=r(ZL,":"),ZL.forEach(t),qvr=i(ka),Le=n(ka,"UL",{});var Be=s(Le);l4=n(Be,"LI",{});var TGe=s(l4);KMe=n(TGe,"STRONG",{});var XBt=s(KMe);jvr=r(XBt,"data2vec-audio"),XBt.forEach(t),Dvr=r(TGe," \u2014 "),bJ=n(TGe,"A",{href:!0});var zBt=s(bJ);Gvr=r(zBt,"Data2VecAudioForCTC"),zBt.forEach(t),Ovr=r(TGe," (Data2VecAudio model)"),TGe.forEach(t),Vvr=i(Be),i4=n(Be,"LI",{});var MGe=s(i4);ZMe=n(MGe,"STRONG",{});var WBt=s(ZMe);Xvr=r(WBt,"hubert"),WBt.forEach(t),zvr=r(MGe," \u2014 "),vJ=n(MGe,"A",{href:!0});var QBt=s(vJ);Wvr=r(QBt,"HubertForCTC"),QBt.forEach(t),Qvr=r(MGe," (Hubert model)"),MGe.forEach(t),Uvr=i(Be),d4=n(Be,"LI",{});var EGe=s(d4);eEe=n(EGe,"STRONG",{});var UBt=s(eEe);Hvr=r(UBt,"mctct"),UBt.forEach(t),Jvr=r(EGe," \u2014 "),FJ=n(EGe,"A",{href:!0});var HBt=s(FJ);Yvr=r(HBt,"MCTCTForCTC"),HBt.forEach(t),Kvr=r(EGe," (M-CTC-T model)"),EGe.forEach(t),Zvr=i(Be),c4=n(Be,"LI",{});var CGe=s(c4);oEe=n(CGe,"STRONG",{});var JBt=s(oEe);e1r=r(JBt,"sew"),JBt.forEach(t),o1r=r(CGe," \u2014 "),TJ=n(CGe,"A",{href:!0});var YBt=s(TJ);r1r=r(YBt,"SEWForCTC"),YBt.forEach(t),t1r=r(CGe," (SEW model)"),CGe.forEach(t),a1r=i(Be),m4=n(Be,"LI",{});var wGe=s(m4);rEe=n(wGe,"STRONG",{});var KBt=s(rEe);n1r=r(KBt,"sew-d"),KBt.forEach(t),s1r=r(wGe," \u2014 "),MJ=n(wGe,"A",{href:!0});var ZBt=s(MJ);l1r=r(ZBt,"SEWDForCTC"),ZBt.forEach(t),i1r=r(wGe," (SEW-D model)"),wGe.forEach(t),d1r=i(Be),f4=n(Be,"LI",{});var AGe=s(f4);tEe=n(AGe,"STRONG",{});var eIt=s(tEe);c1r=r(eIt,"unispeech"),eIt.forEach(t),m1r=r(AGe," \u2014 "),EJ=n(AGe,"A",{href:!0});var oIt=s(EJ);f1r=r(oIt,"UniSpeechForCTC"),oIt.forEach(t),g1r=r(AGe," (UniSpeech model)"),AGe.forEach(t),h1r=i(Be),g4=n(Be,"LI",{});var LGe=s(g4);aEe=n(LGe,"STRONG",{});var rIt=s(aEe);u1r=r(rIt,"unispeech-sat"),rIt.forEach(t),p1r=r(LGe," \u2014 "),CJ=n(LGe,"A",{href:!0});var tIt=s(CJ);_1r=r(tIt,"UniSpeechSatForCTC"),tIt.forEach(t),b1r=r(LGe," (UniSpeechSat model)"),LGe.forEach(t),v1r=i(Be),h4=n(Be,"LI",{});var yGe=s(h4);nEe=n(yGe,"STRONG",{});var aIt=s(nEe);F1r=r(aIt,"wav2vec2"),aIt.forEach(t),T1r=r(yGe," \u2014 "),wJ=n(yGe,"A",{href:!0});var nIt=s(wJ);M1r=r(nIt,"Wav2Vec2ForCTC"),nIt.forEach(t),E1r=r(yGe," (Wav2Vec2 model)"),yGe.forEach(t),C1r=i(Be),u4=n(Be,"LI",{});var xGe=s(u4);sEe=n(xGe,"STRONG",{});var sIt=s(sEe);w1r=r(sIt,"wav2vec2-conformer"),sIt.forEach(t),A1r=r(xGe," \u2014 "),AJ=n(xGe,"A",{href:!0});var lIt=s(AJ);L1r=r(lIt,"Wav2Vec2ConformerForCTC"),lIt.forEach(t),y1r=r(xGe," (Wav2Vec2-Conformer model)"),xGe.forEach(t),x1r=i(Be),p4=n(Be,"LI",{});var $Ge=s(p4);lEe=n($Ge,"STRONG",{});var iIt=s(lEe);$1r=r(iIt,"wavlm"),iIt.forEach(t),k1r=r($Ge," \u2014 "),LJ=n($Ge,"A",{href:!0});var dIt=s(LJ);S1r=r(dIt,"WavLMForCTC"),dIt.forEach(t),R1r=r($Ge," (WavLM model)"),$Ge.forEach(t),Be.forEach(t),P1r=i(ka),_4=n(ka,"P",{});var kGe=s(_4);B1r=r(kGe,"The model is set in evaluation mode by default using "),iEe=n(kGe,"CODE",{});var cIt=s(iEe);I1r=r(cIt,"model.eval()"),cIt.forEach(t),N1r=r(kGe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dEe=n(kGe,"CODE",{});var mIt=s(dEe);q1r=r(mIt,"model.train()"),mIt.forEach(t),kGe.forEach(t),j1r=i(ka),T(b4.$$.fragment,ka),ka.forEach(t),Sl.forEach(t),nHe=i(m),rc=n(m,"H2",{class:!0});var uYe=s(rc);v4=n(uYe,"A",{id:!0,class:!0,href:!0});var fIt=s(v4);cEe=n(fIt,"SPAN",{});var gIt=s(cEe);T(Lx.$$.fragment,gIt),gIt.forEach(t),fIt.forEach(t),D1r=i(uYe),mEe=n(uYe,"SPAN",{});var hIt=s(mEe);G1r=r(hIt,"AutoModelForSpeechSeq2Seq"),hIt.forEach(t),uYe.forEach(t),sHe=i(m),Yo=n(m,"DIV",{class:!0});var Rl=s(Yo);T(yx.$$.fragment,Rl),O1r=i(Rl),tc=n(Rl,"P",{});var Pne=s(tc);V1r=r(Pne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),yJ=n(Pne,"A",{href:!0});var uIt=s(yJ);X1r=r(uIt,"from_pretrained()"),uIt.forEach(t),z1r=r(Pne," class method or the "),xJ=n(Pne,"A",{href:!0});var pIt=s(xJ);W1r=r(pIt,"from_config()"),pIt.forEach(t),Q1r=r(Pne,` class
method.`),Pne.forEach(t),U1r=i(Rl),xx=n(Rl,"P",{});var pYe=s(xx);H1r=r(pYe,"This class cannot be instantiated directly using "),fEe=n(pYe,"CODE",{});var _It=s(fEe);J1r=r(_It,"__init__()"),_It.forEach(t),Y1r=r(pYe," (throws an error)."),pYe.forEach(t),K1r=i(Rl),kt=n(Rl,"DIV",{class:!0});var ey=s(kt);T($x.$$.fragment,ey),Z1r=i(ey),gEe=n(ey,"P",{});var bIt=s(gEe);eFr=r(bIt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),bIt.forEach(t),oFr=i(ey),ac=n(ey,"P",{});var Bne=s(ac);rFr=r(Bne,`Note:
Loading a model from its configuration file does `),hEe=n(Bne,"STRONG",{});var vIt=s(hEe);tFr=r(vIt,"not"),vIt.forEach(t),aFr=r(Bne,` load the model weights. It only affects the
model\u2019s configuration. Use `),$J=n(Bne,"A",{href:!0});var FIt=s($J);nFr=r(FIt,"from_pretrained()"),FIt.forEach(t),sFr=r(Bne," to load the model weights."),Bne.forEach(t),lFr=i(ey),T(F4.$$.fragment,ey),ey.forEach(t),iFr=i(Rl),po=n(Rl,"DIV",{class:!0});var Sa=s(po);T(kx.$$.fragment,Sa),dFr=i(Sa),uEe=n(Sa,"P",{});var TIt=s(uEe);cFr=r(TIt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),TIt.forEach(t),mFr=i(Sa),ln=n(Sa,"P",{});var oy=s(ln);fFr=r(oy,"The model class to instantiate is selected based on the "),pEe=n(oy,"CODE",{});var MIt=s(pEe);gFr=r(MIt,"model_type"),MIt.forEach(t),hFr=r(oy,` property of the config object (either
passed as an argument or loaded from `),_Ee=n(oy,"CODE",{});var EIt=s(_Ee);uFr=r(EIt,"pretrained_model_name_or_path"),EIt.forEach(t),pFr=r(oy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bEe=n(oy,"CODE",{});var CIt=s(bEe);_Fr=r(CIt,"pretrained_model_name_or_path"),CIt.forEach(t),bFr=r(oy,":"),oy.forEach(t),vFr=i(Sa),Sx=n(Sa,"UL",{});var _Ye=s(Sx);T4=n(_Ye,"LI",{});var SGe=s(T4);vEe=n(SGe,"STRONG",{});var wIt=s(vEe);FFr=r(wIt,"speech-encoder-decoder"),wIt.forEach(t),TFr=r(SGe," \u2014 "),kJ=n(SGe,"A",{href:!0});var AIt=s(kJ);MFr=r(AIt,"SpeechEncoderDecoderModel"),AIt.forEach(t),EFr=r(SGe," (Speech Encoder decoder model)"),SGe.forEach(t),CFr=i(_Ye),M4=n(_Ye,"LI",{});var RGe=s(M4);FEe=n(RGe,"STRONG",{});var LIt=s(FEe);wFr=r(LIt,"speech_to_text"),LIt.forEach(t),AFr=r(RGe," \u2014 "),SJ=n(RGe,"A",{href:!0});var yIt=s(SJ);LFr=r(yIt,"Speech2TextForConditionalGeneration"),yIt.forEach(t),yFr=r(RGe," (Speech2Text model)"),RGe.forEach(t),_Ye.forEach(t),xFr=i(Sa),E4=n(Sa,"P",{});var PGe=s(E4);$Fr=r(PGe,"The model is set in evaluation mode by default using "),TEe=n(PGe,"CODE",{});var xIt=s(TEe);kFr=r(xIt,"model.eval()"),xIt.forEach(t),SFr=r(PGe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),MEe=n(PGe,"CODE",{});var $It=s(MEe);RFr=r($It,"model.train()"),$It.forEach(t),PGe.forEach(t),PFr=i(Sa),T(C4.$$.fragment,Sa),Sa.forEach(t),Rl.forEach(t),lHe=i(m),nc=n(m,"H2",{class:!0});var bYe=s(nc);w4=n(bYe,"A",{id:!0,class:!0,href:!0});var kIt=s(w4);EEe=n(kIt,"SPAN",{});var SIt=s(EEe);T(Rx.$$.fragment,SIt),SIt.forEach(t),kIt.forEach(t),BFr=i(bYe),CEe=n(bYe,"SPAN",{});var RIt=s(CEe);IFr=r(RIt,"AutoModelForAudioXVector"),RIt.forEach(t),bYe.forEach(t),iHe=i(m),Ko=n(m,"DIV",{class:!0});var Pl=s(Ko);T(Px.$$.fragment,Pl),NFr=i(Pl),sc=n(Pl,"P",{});var Ine=s(sc);qFr=r(Ine,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),RJ=n(Ine,"A",{href:!0});var PIt=s(RJ);jFr=r(PIt,"from_pretrained()"),PIt.forEach(t),DFr=r(Ine," class method or the "),PJ=n(Ine,"A",{href:!0});var BIt=s(PJ);GFr=r(BIt,"from_config()"),BIt.forEach(t),OFr=r(Ine,` class
method.`),Ine.forEach(t),VFr=i(Pl),Bx=n(Pl,"P",{});var vYe=s(Bx);XFr=r(vYe,"This class cannot be instantiated directly using "),wEe=n(vYe,"CODE",{});var IIt=s(wEe);zFr=r(IIt,"__init__()"),IIt.forEach(t),WFr=r(vYe," (throws an error)."),vYe.forEach(t),QFr=i(Pl),St=n(Pl,"DIV",{class:!0});var ry=s(St);T(Ix.$$.fragment,ry),UFr=i(ry),AEe=n(ry,"P",{});var NIt=s(AEe);HFr=r(NIt,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),NIt.forEach(t),JFr=i(ry),lc=n(ry,"P",{});var Nne=s(lc);YFr=r(Nne,`Note:
Loading a model from its configuration file does `),LEe=n(Nne,"STRONG",{});var qIt=s(LEe);KFr=r(qIt,"not"),qIt.forEach(t),ZFr=r(Nne,` load the model weights. It only affects the
model\u2019s configuration. Use `),BJ=n(Nne,"A",{href:!0});var jIt=s(BJ);eTr=r(jIt,"from_pretrained()"),jIt.forEach(t),oTr=r(Nne," to load the model weights."),Nne.forEach(t),rTr=i(ry),T(A4.$$.fragment,ry),ry.forEach(t),tTr=i(Pl),_o=n(Pl,"DIV",{class:!0});var Ra=s(_o);T(Nx.$$.fragment,Ra),aTr=i(Ra),yEe=n(Ra,"P",{});var DIt=s(yEe);nTr=r(DIt,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),DIt.forEach(t),sTr=i(Ra),dn=n(Ra,"P",{});var ty=s(dn);lTr=r(ty,"The model class to instantiate is selected based on the "),xEe=n(ty,"CODE",{});var GIt=s(xEe);iTr=r(GIt,"model_type"),GIt.forEach(t),dTr=r(ty,` property of the config object (either
passed as an argument or loaded from `),$Ee=n(ty,"CODE",{});var OIt=s($Ee);cTr=r(OIt,"pretrained_model_name_or_path"),OIt.forEach(t),mTr=r(ty,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kEe=n(ty,"CODE",{});var VIt=s(kEe);fTr=r(VIt,"pretrained_model_name_or_path"),VIt.forEach(t),gTr=r(ty,":"),ty.forEach(t),hTr=i(Ra),lt=n(Ra,"UL",{});var Bl=s(lt);L4=n(Bl,"LI",{});var BGe=s(L4);SEe=n(BGe,"STRONG",{});var XIt=s(SEe);uTr=r(XIt,"data2vec-audio"),XIt.forEach(t),pTr=r(BGe," \u2014 "),IJ=n(BGe,"A",{href:!0});var zIt=s(IJ);_Tr=r(zIt,"Data2VecAudioForXVector"),zIt.forEach(t),bTr=r(BGe," (Data2VecAudio model)"),BGe.forEach(t),vTr=i(Bl),y4=n(Bl,"LI",{});var IGe=s(y4);REe=n(IGe,"STRONG",{});var WIt=s(REe);FTr=r(WIt,"unispeech-sat"),WIt.forEach(t),TTr=r(IGe," \u2014 "),NJ=n(IGe,"A",{href:!0});var QIt=s(NJ);MTr=r(QIt,"UniSpeechSatForXVector"),QIt.forEach(t),ETr=r(IGe," (UniSpeechSat model)"),IGe.forEach(t),CTr=i(Bl),x4=n(Bl,"LI",{});var NGe=s(x4);PEe=n(NGe,"STRONG",{});var UIt=s(PEe);wTr=r(UIt,"wav2vec2"),UIt.forEach(t),ATr=r(NGe," \u2014 "),qJ=n(NGe,"A",{href:!0});var HIt=s(qJ);LTr=r(HIt,"Wav2Vec2ForXVector"),HIt.forEach(t),yTr=r(NGe," (Wav2Vec2 model)"),NGe.forEach(t),xTr=i(Bl),$4=n(Bl,"LI",{});var qGe=s($4);BEe=n(qGe,"STRONG",{});var JIt=s(BEe);$Tr=r(JIt,"wav2vec2-conformer"),JIt.forEach(t),kTr=r(qGe," \u2014 "),jJ=n(qGe,"A",{href:!0});var YIt=s(jJ);STr=r(YIt,"Wav2Vec2ConformerForXVector"),YIt.forEach(t),RTr=r(qGe," (Wav2Vec2-Conformer model)"),qGe.forEach(t),PTr=i(Bl),k4=n(Bl,"LI",{});var jGe=s(k4);IEe=n(jGe,"STRONG",{});var KIt=s(IEe);BTr=r(KIt,"wavlm"),KIt.forEach(t),ITr=r(jGe," \u2014 "),DJ=n(jGe,"A",{href:!0});var ZIt=s(DJ);NTr=r(ZIt,"WavLMForXVector"),ZIt.forEach(t),qTr=r(jGe," (WavLM model)"),jGe.forEach(t),Bl.forEach(t),jTr=i(Ra),S4=n(Ra,"P",{});var DGe=s(S4);DTr=r(DGe,"The model is set in evaluation mode by default using "),NEe=n(DGe,"CODE",{});var eNt=s(NEe);GTr=r(eNt,"model.eval()"),eNt.forEach(t),OTr=r(DGe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qEe=n(DGe,"CODE",{});var oNt=s(qEe);VTr=r(oNt,"model.train()"),oNt.forEach(t),DGe.forEach(t),XTr=i(Ra),T(R4.$$.fragment,Ra),Ra.forEach(t),Pl.forEach(t),dHe=i(m),ic=n(m,"H2",{class:!0});var FYe=s(ic);P4=n(FYe,"A",{id:!0,class:!0,href:!0});var rNt=s(P4);jEe=n(rNt,"SPAN",{});var tNt=s(jEe);T(qx.$$.fragment,tNt),tNt.forEach(t),rNt.forEach(t),zTr=i(FYe),DEe=n(FYe,"SPAN",{});var aNt=s(DEe);WTr=r(aNt,"AutoModelForMaskedImageModeling"),aNt.forEach(t),FYe.forEach(t),cHe=i(m),Zo=n(m,"DIV",{class:!0});var Il=s(Zo);T(jx.$$.fragment,Il),QTr=i(Il),dc=n(Il,"P",{});var qne=s(dc);UTr=r(qne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),GJ=n(qne,"A",{href:!0});var nNt=s(GJ);HTr=r(nNt,"from_pretrained()"),nNt.forEach(t),JTr=r(qne," class method or the "),OJ=n(qne,"A",{href:!0});var sNt=s(OJ);YTr=r(sNt,"from_config()"),sNt.forEach(t),KTr=r(qne,` class
method.`),qne.forEach(t),ZTr=i(Il),Dx=n(Il,"P",{});var TYe=s(Dx);eMr=r(TYe,"This class cannot be instantiated directly using "),GEe=n(TYe,"CODE",{});var lNt=s(GEe);oMr=r(lNt,"__init__()"),lNt.forEach(t),rMr=r(TYe," (throws an error)."),TYe.forEach(t),tMr=i(Il),Rt=n(Il,"DIV",{class:!0});var ay=s(Rt);T(Gx.$$.fragment,ay),aMr=i(ay),OEe=n(ay,"P",{});var iNt=s(OEe);nMr=r(iNt,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),iNt.forEach(t),sMr=i(ay),cc=n(ay,"P",{});var jne=s(cc);lMr=r(jne,`Note:
Loading a model from its configuration file does `),VEe=n(jne,"STRONG",{});var dNt=s(VEe);iMr=r(dNt,"not"),dNt.forEach(t),dMr=r(jne,` load the model weights. It only affects the
model\u2019s configuration. Use `),VJ=n(jne,"A",{href:!0});var cNt=s(VJ);cMr=r(cNt,"from_pretrained()"),cNt.forEach(t),mMr=r(jne," to load the model weights."),jne.forEach(t),fMr=i(ay),T(B4.$$.fragment,ay),ay.forEach(t),gMr=i(Il),bo=n(Il,"DIV",{class:!0});var Pa=s(bo);T(Ox.$$.fragment,Pa),hMr=i(Pa),XEe=n(Pa,"P",{});var mNt=s(XEe);uMr=r(mNt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),mNt.forEach(t),pMr=i(Pa),cn=n(Pa,"P",{});var ny=s(cn);_Mr=r(ny,"The model class to instantiate is selected based on the "),zEe=n(ny,"CODE",{});var fNt=s(zEe);bMr=r(fNt,"model_type"),fNt.forEach(t),vMr=r(ny,` property of the config object (either
passed as an argument or loaded from `),WEe=n(ny,"CODE",{});var gNt=s(WEe);FMr=r(gNt,"pretrained_model_name_or_path"),gNt.forEach(t),TMr=r(ny,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),QEe=n(ny,"CODE",{});var hNt=s(QEe);MMr=r(hNt,"pretrained_model_name_or_path"),hNt.forEach(t),EMr=r(ny,":"),ny.forEach(t),CMr=i(Pa),mn=n(Pa,"UL",{});var sy=s(mn);I4=n(sy,"LI",{});var GGe=s(I4);UEe=n(GGe,"STRONG",{});var uNt=s(UEe);wMr=r(uNt,"deit"),uNt.forEach(t),AMr=r(GGe," \u2014 "),XJ=n(GGe,"A",{href:!0});var pNt=s(XJ);LMr=r(pNt,"DeiTForMaskedImageModeling"),pNt.forEach(t),yMr=r(GGe," (DeiT model)"),GGe.forEach(t),xMr=i(sy),N4=n(sy,"LI",{});var OGe=s(N4);HEe=n(OGe,"STRONG",{});var _Nt=s(HEe);$Mr=r(_Nt,"swin"),_Nt.forEach(t),kMr=r(OGe," \u2014 "),zJ=n(OGe,"A",{href:!0});var bNt=s(zJ);SMr=r(bNt,"SwinForMaskedImageModeling"),bNt.forEach(t),RMr=r(OGe," (Swin Transformer model)"),OGe.forEach(t),PMr=i(sy),q4=n(sy,"LI",{});var VGe=s(q4);JEe=n(VGe,"STRONG",{});var vNt=s(JEe);BMr=r(vNt,"swinv2"),vNt.forEach(t),IMr=r(VGe," \u2014 "),WJ=n(VGe,"A",{href:!0});var FNt=s(WJ);NMr=r(FNt,"Swinv2ForMaskedImageModeling"),FNt.forEach(t),qMr=r(VGe," (Swin Transformer V2 model)"),VGe.forEach(t),jMr=i(sy),j4=n(sy,"LI",{});var XGe=s(j4);YEe=n(XGe,"STRONG",{});var TNt=s(YEe);DMr=r(TNt,"vit"),TNt.forEach(t),GMr=r(XGe," \u2014 "),QJ=n(XGe,"A",{href:!0});var MNt=s(QJ);OMr=r(MNt,"ViTForMaskedImageModeling"),MNt.forEach(t),VMr=r(XGe," (ViT model)"),XGe.forEach(t),sy.forEach(t),XMr=i(Pa),D4=n(Pa,"P",{});var zGe=s(D4);zMr=r(zGe,"The model is set in evaluation mode by default using "),KEe=n(zGe,"CODE",{});var ENt=s(KEe);WMr=r(ENt,"model.eval()"),ENt.forEach(t),QMr=r(zGe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ZEe=n(zGe,"CODE",{});var CNt=s(ZEe);UMr=r(CNt,"model.train()"),CNt.forEach(t),zGe.forEach(t),HMr=i(Pa),T(G4.$$.fragment,Pa),Pa.forEach(t),Il.forEach(t),mHe=i(m),mc=n(m,"H2",{class:!0});var MYe=s(mc);O4=n(MYe,"A",{id:!0,class:!0,href:!0});var wNt=s(O4);e4e=n(wNt,"SPAN",{});var ANt=s(e4e);T(Vx.$$.fragment,ANt),ANt.forEach(t),wNt.forEach(t),JMr=i(MYe),o4e=n(MYe,"SPAN",{});var LNt=s(o4e);YMr=r(LNt,"AutoModelForObjectDetection"),LNt.forEach(t),MYe.forEach(t),fHe=i(m),er=n(m,"DIV",{class:!0});var Nl=s(er);T(Xx.$$.fragment,Nl),KMr=i(Nl),fc=n(Nl,"P",{});var Dne=s(fc);ZMr=r(Dne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),UJ=n(Dne,"A",{href:!0});var yNt=s(UJ);eEr=r(yNt,"from_pretrained()"),yNt.forEach(t),oEr=r(Dne," class method or the "),HJ=n(Dne,"A",{href:!0});var xNt=s(HJ);rEr=r(xNt,"from_config()"),xNt.forEach(t),tEr=r(Dne,` class
method.`),Dne.forEach(t),aEr=i(Nl),zx=n(Nl,"P",{});var EYe=s(zx);nEr=r(EYe,"This class cannot be instantiated directly using "),r4e=n(EYe,"CODE",{});var $Nt=s(r4e);sEr=r($Nt,"__init__()"),$Nt.forEach(t),lEr=r(EYe," (throws an error)."),EYe.forEach(t),iEr=i(Nl),Pt=n(Nl,"DIV",{class:!0});var ly=s(Pt);T(Wx.$$.fragment,ly),dEr=i(ly),t4e=n(ly,"P",{});var kNt=s(t4e);cEr=r(kNt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),kNt.forEach(t),mEr=i(ly),gc=n(ly,"P",{});var Gne=s(gc);fEr=r(Gne,`Note:
Loading a model from its configuration file does `),a4e=n(Gne,"STRONG",{});var SNt=s(a4e);gEr=r(SNt,"not"),SNt.forEach(t),hEr=r(Gne,` load the model weights. It only affects the
model\u2019s configuration. Use `),JJ=n(Gne,"A",{href:!0});var RNt=s(JJ);uEr=r(RNt,"from_pretrained()"),RNt.forEach(t),pEr=r(Gne," to load the model weights."),Gne.forEach(t),_Er=i(ly),T(V4.$$.fragment,ly),ly.forEach(t),bEr=i(Nl),vo=n(Nl,"DIV",{class:!0});var Ba=s(vo);T(Qx.$$.fragment,Ba),vEr=i(Ba),n4e=n(Ba,"P",{});var PNt=s(n4e);FEr=r(PNt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),PNt.forEach(t),TEr=i(Ba),fn=n(Ba,"P",{});var iy=s(fn);MEr=r(iy,"The model class to instantiate is selected based on the "),s4e=n(iy,"CODE",{});var BNt=s(s4e);EEr=r(BNt,"model_type"),BNt.forEach(t),CEr=r(iy,` property of the config object (either
passed as an argument or loaded from `),l4e=n(iy,"CODE",{});var INt=s(l4e);wEr=r(INt,"pretrained_model_name_or_path"),INt.forEach(t),AEr=r(iy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i4e=n(iy,"CODE",{});var NNt=s(i4e);LEr=r(NNt,"pretrained_model_name_or_path"),NNt.forEach(t),yEr=r(iy,":"),iy.forEach(t),xEr=i(Ba),Ux=n(Ba,"UL",{});var CYe=s(Ux);X4=n(CYe,"LI",{});var WGe=s(X4);d4e=n(WGe,"STRONG",{});var qNt=s(d4e);$Er=r(qNt,"detr"),qNt.forEach(t),kEr=r(WGe," \u2014 "),YJ=n(WGe,"A",{href:!0});var jNt=s(YJ);SEr=r(jNt,"DetrForObjectDetection"),jNt.forEach(t),REr=r(WGe," (DETR model)"),WGe.forEach(t),PEr=i(CYe),z4=n(CYe,"LI",{});var QGe=s(z4);c4e=n(QGe,"STRONG",{});var DNt=s(c4e);BEr=r(DNt,"yolos"),DNt.forEach(t),IEr=r(QGe," \u2014 "),KJ=n(QGe,"A",{href:!0});var GNt=s(KJ);NEr=r(GNt,"YolosForObjectDetection"),GNt.forEach(t),qEr=r(QGe," (YOLOS model)"),QGe.forEach(t),CYe.forEach(t),jEr=i(Ba),W4=n(Ba,"P",{});var UGe=s(W4);DEr=r(UGe,"The model is set in evaluation mode by default using "),m4e=n(UGe,"CODE",{});var ONt=s(m4e);GEr=r(ONt,"model.eval()"),ONt.forEach(t),OEr=r(UGe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),f4e=n(UGe,"CODE",{});var VNt=s(f4e);VEr=r(VNt,"model.train()"),VNt.forEach(t),UGe.forEach(t),XEr=i(Ba),T(Q4.$$.fragment,Ba),Ba.forEach(t),Nl.forEach(t),gHe=i(m),hc=n(m,"H2",{class:!0});var wYe=s(hc);U4=n(wYe,"A",{id:!0,class:!0,href:!0});var XNt=s(U4);g4e=n(XNt,"SPAN",{});var zNt=s(g4e);T(Hx.$$.fragment,zNt),zNt.forEach(t),XNt.forEach(t),zEr=i(wYe),h4e=n(wYe,"SPAN",{});var WNt=s(h4e);WEr=r(WNt,"AutoModelForImageSegmentation"),WNt.forEach(t),wYe.forEach(t),hHe=i(m),or=n(m,"DIV",{class:!0});var ql=s(or);T(Jx.$$.fragment,ql),QEr=i(ql),uc=n(ql,"P",{});var One=s(uc);UEr=r(One,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),ZJ=n(One,"A",{href:!0});var QNt=s(ZJ);HEr=r(QNt,"from_pretrained()"),QNt.forEach(t),JEr=r(One," class method or the "),eY=n(One,"A",{href:!0});var UNt=s(eY);YEr=r(UNt,"from_config()"),UNt.forEach(t),KEr=r(One,` class
method.`),One.forEach(t),ZEr=i(ql),Yx=n(ql,"P",{});var AYe=s(Yx);e4r=r(AYe,"This class cannot be instantiated directly using "),u4e=n(AYe,"CODE",{});var HNt=s(u4e);o4r=r(HNt,"__init__()"),HNt.forEach(t),r4r=r(AYe," (throws an error)."),AYe.forEach(t),t4r=i(ql),Bt=n(ql,"DIV",{class:!0});var dy=s(Bt);T(Kx.$$.fragment,dy),a4r=i(dy),p4e=n(dy,"P",{});var JNt=s(p4e);n4r=r(JNt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),JNt.forEach(t),s4r=i(dy),pc=n(dy,"P",{});var Vne=s(pc);l4r=r(Vne,`Note:
Loading a model from its configuration file does `),_4e=n(Vne,"STRONG",{});var YNt=s(_4e);i4r=r(YNt,"not"),YNt.forEach(t),d4r=r(Vne,` load the model weights. It only affects the
model\u2019s configuration. Use `),oY=n(Vne,"A",{href:!0});var KNt=s(oY);c4r=r(KNt,"from_pretrained()"),KNt.forEach(t),m4r=r(Vne," to load the model weights."),Vne.forEach(t),f4r=i(dy),T(H4.$$.fragment,dy),dy.forEach(t),g4r=i(ql),Fo=n(ql,"DIV",{class:!0});var Ia=s(Fo);T(Zx.$$.fragment,Ia),h4r=i(Ia),b4e=n(Ia,"P",{});var ZNt=s(b4e);u4r=r(ZNt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),ZNt.forEach(t),p4r=i(Ia),gn=n(Ia,"P",{});var cy=s(gn);_4r=r(cy,"The model class to instantiate is selected based on the "),v4e=n(cy,"CODE",{});var eqt=s(v4e);b4r=r(eqt,"model_type"),eqt.forEach(t),v4r=r(cy,` property of the config object (either
passed as an argument or loaded from `),F4e=n(cy,"CODE",{});var oqt=s(F4e);F4r=r(oqt,"pretrained_model_name_or_path"),oqt.forEach(t),T4r=r(cy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T4e=n(cy,"CODE",{});var rqt=s(T4e);M4r=r(rqt,"pretrained_model_name_or_path"),rqt.forEach(t),E4r=r(cy,":"),cy.forEach(t),C4r=i(Ia),M4e=n(Ia,"UL",{});var tqt=s(M4e);J4=n(tqt,"LI",{});var HGe=s(J4);E4e=n(HGe,"STRONG",{});var aqt=s(E4e);w4r=r(aqt,"detr"),aqt.forEach(t),A4r=r(HGe," \u2014 "),rY=n(HGe,"A",{href:!0});var nqt=s(rY);L4r=r(nqt,"DetrForSegmentation"),nqt.forEach(t),y4r=r(HGe," (DETR model)"),HGe.forEach(t),tqt.forEach(t),x4r=i(Ia),Y4=n(Ia,"P",{});var JGe=s(Y4);$4r=r(JGe,"The model is set in evaluation mode by default using "),C4e=n(JGe,"CODE",{});var sqt=s(C4e);k4r=r(sqt,"model.eval()"),sqt.forEach(t),S4r=r(JGe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),w4e=n(JGe,"CODE",{});var lqt=s(w4e);R4r=r(lqt,"model.train()"),lqt.forEach(t),JGe.forEach(t),P4r=i(Ia),T(K4.$$.fragment,Ia),Ia.forEach(t),ql.forEach(t),uHe=i(m),_c=n(m,"H2",{class:!0});var LYe=s(_c);Z4=n(LYe,"A",{id:!0,class:!0,href:!0});var iqt=s(Z4);A4e=n(iqt,"SPAN",{});var dqt=s(A4e);T(e$.$$.fragment,dqt),dqt.forEach(t),iqt.forEach(t),B4r=i(LYe),L4e=n(LYe,"SPAN",{});var cqt=s(L4e);I4r=r(cqt,"AutoModelForSemanticSegmentation"),cqt.forEach(t),LYe.forEach(t),pHe=i(m),rr=n(m,"DIV",{class:!0});var jl=s(rr);T(o$.$$.fragment,jl),N4r=i(jl),bc=n(jl,"P",{});var Xne=s(bc);q4r=r(Xne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),tY=n(Xne,"A",{href:!0});var mqt=s(tY);j4r=r(mqt,"from_pretrained()"),mqt.forEach(t),D4r=r(Xne," class method or the "),aY=n(Xne,"A",{href:!0});var fqt=s(aY);G4r=r(fqt,"from_config()"),fqt.forEach(t),O4r=r(Xne,` class
method.`),Xne.forEach(t),V4r=i(jl),r$=n(jl,"P",{});var yYe=s(r$);X4r=r(yYe,"This class cannot be instantiated directly using "),y4e=n(yYe,"CODE",{});var gqt=s(y4e);z4r=r(gqt,"__init__()"),gqt.forEach(t),W4r=r(yYe," (throws an error)."),yYe.forEach(t),Q4r=i(jl),It=n(jl,"DIV",{class:!0});var my=s(It);T(t$.$$.fragment,my),U4r=i(my),x4e=n(my,"P",{});var hqt=s(x4e);H4r=r(hqt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),hqt.forEach(t),J4r=i(my),vc=n(my,"P",{});var zne=s(vc);Y4r=r(zne,`Note:
Loading a model from its configuration file does `),$4e=n(zne,"STRONG",{});var uqt=s($4e);K4r=r(uqt,"not"),uqt.forEach(t),Z4r=r(zne,` load the model weights. It only affects the
model\u2019s configuration. Use `),nY=n(zne,"A",{href:!0});var pqt=s(nY);eCr=r(pqt,"from_pretrained()"),pqt.forEach(t),oCr=r(zne," to load the model weights."),zne.forEach(t),rCr=i(my),T(eC.$$.fragment,my),my.forEach(t),tCr=i(jl),To=n(jl,"DIV",{class:!0});var Na=s(To);T(a$.$$.fragment,Na),aCr=i(Na),k4e=n(Na,"P",{});var _qt=s(k4e);nCr=r(_qt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),_qt.forEach(t),sCr=i(Na),hn=n(Na,"P",{});var fy=s(hn);lCr=r(fy,"The model class to instantiate is selected based on the "),S4e=n(fy,"CODE",{});var bqt=s(S4e);iCr=r(bqt,"model_type"),bqt.forEach(t),dCr=r(fy,` property of the config object (either
passed as an argument or loaded from `),R4e=n(fy,"CODE",{});var vqt=s(R4e);cCr=r(vqt,"pretrained_model_name_or_path"),vqt.forEach(t),mCr=r(fy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P4e=n(fy,"CODE",{});var Fqt=s(P4e);fCr=r(Fqt,"pretrained_model_name_or_path"),Fqt.forEach(t),gCr=r(fy,":"),fy.forEach(t),hCr=i(Na),it=n(Na,"UL",{});var Dl=s(it);oC=n(Dl,"LI",{});var YGe=s(oC);B4e=n(YGe,"STRONG",{});var Tqt=s(B4e);uCr=r(Tqt,"beit"),Tqt.forEach(t),pCr=r(YGe," \u2014 "),sY=n(YGe,"A",{href:!0});var Mqt=s(sY);_Cr=r(Mqt,"BeitForSemanticSegmentation"),Mqt.forEach(t),bCr=r(YGe," (BEiT model)"),YGe.forEach(t),vCr=i(Dl),rC=n(Dl,"LI",{});var KGe=s(rC);I4e=n(KGe,"STRONG",{});var Eqt=s(I4e);FCr=r(Eqt,"data2vec-vision"),Eqt.forEach(t),TCr=r(KGe," \u2014 "),lY=n(KGe,"A",{href:!0});var Cqt=s(lY);MCr=r(Cqt,"Data2VecVisionForSemanticSegmentation"),Cqt.forEach(t),ECr=r(KGe," (Data2VecVision model)"),KGe.forEach(t),CCr=i(Dl),tC=n(Dl,"LI",{});var ZGe=s(tC);N4e=n(ZGe,"STRONG",{});var wqt=s(N4e);wCr=r(wqt,"dpt"),wqt.forEach(t),ACr=r(ZGe," \u2014 "),iY=n(ZGe,"A",{href:!0});var Aqt=s(iY);LCr=r(Aqt,"DPTForSemanticSegmentation"),Aqt.forEach(t),yCr=r(ZGe," (DPT model)"),ZGe.forEach(t),xCr=i(Dl),aC=n(Dl,"LI",{});var eOe=s(aC);q4e=n(eOe,"STRONG",{});var Lqt=s(q4e);$Cr=r(Lqt,"mobilevit"),Lqt.forEach(t),kCr=r(eOe," \u2014 "),dY=n(eOe,"A",{href:!0});var yqt=s(dY);SCr=r(yqt,"MobileViTForSemanticSegmentation"),yqt.forEach(t),RCr=r(eOe," (MobileViT model)"),eOe.forEach(t),PCr=i(Dl),nC=n(Dl,"LI",{});var oOe=s(nC);j4e=n(oOe,"STRONG",{});var xqt=s(j4e);BCr=r(xqt,"segformer"),xqt.forEach(t),ICr=r(oOe," \u2014 "),cY=n(oOe,"A",{href:!0});var $qt=s(cY);NCr=r($qt,"SegformerForSemanticSegmentation"),$qt.forEach(t),qCr=r(oOe," (SegFormer model)"),oOe.forEach(t),Dl.forEach(t),jCr=i(Na),sC=n(Na,"P",{});var rOe=s(sC);DCr=r(rOe,"The model is set in evaluation mode by default using "),D4e=n(rOe,"CODE",{});var kqt=s(D4e);GCr=r(kqt,"model.eval()"),kqt.forEach(t),OCr=r(rOe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),G4e=n(rOe,"CODE",{});var Sqt=s(G4e);VCr=r(Sqt,"model.train()"),Sqt.forEach(t),rOe.forEach(t),XCr=i(Na),T(lC.$$.fragment,Na),Na.forEach(t),jl.forEach(t),_He=i(m),Fc=n(m,"H2",{class:!0});var xYe=s(Fc);iC=n(xYe,"A",{id:!0,class:!0,href:!0});var Rqt=s(iC);O4e=n(Rqt,"SPAN",{});var Pqt=s(O4e);T(n$.$$.fragment,Pqt),Pqt.forEach(t),Rqt.forEach(t),zCr=i(xYe),V4e=n(xYe,"SPAN",{});var Bqt=s(V4e);WCr=r(Bqt,"AutoModelForInstanceSegmentation"),Bqt.forEach(t),xYe.forEach(t),bHe=i(m),tr=n(m,"DIV",{class:!0});var Gl=s(tr);T(s$.$$.fragment,Gl),QCr=i(Gl),Tc=n(Gl,"P",{});var Wne=s(Tc);UCr=r(Wne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),mY=n(Wne,"A",{href:!0});var Iqt=s(mY);HCr=r(Iqt,"from_pretrained()"),Iqt.forEach(t),JCr=r(Wne," class method or the "),fY=n(Wne,"A",{href:!0});var Nqt=s(fY);YCr=r(Nqt,"from_config()"),Nqt.forEach(t),KCr=r(Wne,` class
method.`),Wne.forEach(t),ZCr=i(Gl),l$=n(Gl,"P",{});var $Ye=s(l$);e3r=r($Ye,"This class cannot be instantiated directly using "),X4e=n($Ye,"CODE",{});var qqt=s(X4e);o3r=r(qqt,"__init__()"),qqt.forEach(t),r3r=r($Ye," (throws an error)."),$Ye.forEach(t),t3r=i(Gl),Nt=n(Gl,"DIV",{class:!0});var gy=s(Nt);T(i$.$$.fragment,gy),a3r=i(gy),z4e=n(gy,"P",{});var jqt=s(z4e);n3r=r(jqt,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),jqt.forEach(t),s3r=i(gy),Mc=n(gy,"P",{});var Qne=s(Mc);l3r=r(Qne,`Note:
Loading a model from its configuration file does `),W4e=n(Qne,"STRONG",{});var Dqt=s(W4e);i3r=r(Dqt,"not"),Dqt.forEach(t),d3r=r(Qne,` load the model weights. It only affects the
model\u2019s configuration. Use `),gY=n(Qne,"A",{href:!0});var Gqt=s(gY);c3r=r(Gqt,"from_pretrained()"),Gqt.forEach(t),m3r=r(Qne," to load the model weights."),Qne.forEach(t),f3r=i(gy),T(dC.$$.fragment,gy),gy.forEach(t),g3r=i(Gl),Mo=n(Gl,"DIV",{class:!0});var qa=s(Mo);T(d$.$$.fragment,qa),h3r=i(qa),Q4e=n(qa,"P",{});var Oqt=s(Q4e);u3r=r(Oqt,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),Oqt.forEach(t),p3r=i(qa),un=n(qa,"P",{});var hy=s(un);_3r=r(hy,"The model class to instantiate is selected based on the "),U4e=n(hy,"CODE",{});var Vqt=s(U4e);b3r=r(Vqt,"model_type"),Vqt.forEach(t),v3r=r(hy,` property of the config object (either
passed as an argument or loaded from `),H4e=n(hy,"CODE",{});var Xqt=s(H4e);F3r=r(Xqt,"pretrained_model_name_or_path"),Xqt.forEach(t),T3r=r(hy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J4e=n(hy,"CODE",{});var zqt=s(J4e);M3r=r(zqt,"pretrained_model_name_or_path"),zqt.forEach(t),E3r=r(hy,":"),hy.forEach(t),C3r=i(qa),Y4e=n(qa,"UL",{});var Wqt=s(Y4e);cC=n(Wqt,"LI",{});var tOe=s(cC);K4e=n(tOe,"STRONG",{});var Qqt=s(K4e);w3r=r(Qqt,"maskformer"),Qqt.forEach(t),A3r=r(tOe," \u2014 "),hY=n(tOe,"A",{href:!0});var Uqt=s(hY);L3r=r(Uqt,"MaskFormerForInstanceSegmentation"),Uqt.forEach(t),y3r=r(tOe," (MaskFormer model)"),tOe.forEach(t),Wqt.forEach(t),x3r=i(qa),mC=n(qa,"P",{});var aOe=s(mC);$3r=r(aOe,"The model is set in evaluation mode by default using "),Z4e=n(aOe,"CODE",{});var Hqt=s(Z4e);k3r=r(Hqt,"model.eval()"),Hqt.forEach(t),S3r=r(aOe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),eCe=n(aOe,"CODE",{});var Jqt=s(eCe);R3r=r(Jqt,"model.train()"),Jqt.forEach(t),aOe.forEach(t),P3r=i(qa),T(fC.$$.fragment,qa),qa.forEach(t),Gl.forEach(t),vHe=i(m),Ec=n(m,"H2",{class:!0});var kYe=s(Ec);gC=n(kYe,"A",{id:!0,class:!0,href:!0});var Yqt=s(gC);oCe=n(Yqt,"SPAN",{});var Kqt=s(oCe);T(c$.$$.fragment,Kqt),Kqt.forEach(t),Yqt.forEach(t),B3r=i(kYe),rCe=n(kYe,"SPAN",{});var Zqt=s(rCe);I3r=r(Zqt,"TFAutoModel"),Zqt.forEach(t),kYe.forEach(t),FHe=i(m),ar=n(m,"DIV",{class:!0});var Ol=s(ar);T(m$.$$.fragment,Ol),N3r=i(Ol),Cc=n(Ol,"P",{});var Une=s(Cc);q3r=r(Une,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),uY=n(Une,"A",{href:!0});var ejt=s(uY);j3r=r(ejt,"from_pretrained()"),ejt.forEach(t),D3r=r(Une," class method or the "),pY=n(Une,"A",{href:!0});var ojt=s(pY);G3r=r(ojt,"from_config()"),ojt.forEach(t),O3r=r(Une,` class
method.`),Une.forEach(t),V3r=i(Ol),f$=n(Ol,"P",{});var SYe=s(f$);X3r=r(SYe,"This class cannot be instantiated directly using "),tCe=n(SYe,"CODE",{});var rjt=s(tCe);z3r=r(rjt,"__init__()"),rjt.forEach(t),W3r=r(SYe," (throws an error)."),SYe.forEach(t),Q3r=i(Ol),qt=n(Ol,"DIV",{class:!0});var uy=s(qt);T(g$.$$.fragment,uy),U3r=i(uy),aCe=n(uy,"P",{});var tjt=s(aCe);H3r=r(tjt,"Instantiates one of the base model classes of the library from a configuration."),tjt.forEach(t),J3r=i(uy),wc=n(uy,"P",{});var Hne=s(wc);Y3r=r(Hne,`Note:
Loading a model from its configuration file does `),nCe=n(Hne,"STRONG",{});var ajt=s(nCe);K3r=r(ajt,"not"),ajt.forEach(t),Z3r=r(Hne,` load the model weights. It only affects the
model\u2019s configuration. Use `),_Y=n(Hne,"A",{href:!0});var njt=s(_Y);e5r=r(njt,"from_pretrained()"),njt.forEach(t),o5r=r(Hne," to load the model weights."),Hne.forEach(t),r5r=i(uy),T(hC.$$.fragment,uy),uy.forEach(t),t5r=i(Ol),Rr=n(Ol,"DIV",{class:!0});var Vl=s(Rr);T(h$.$$.fragment,Vl),a5r=i(Vl),sCe=n(Vl,"P",{});var sjt=s(sCe);n5r=r(sjt,"Instantiate one of the base model classes of the library from a pretrained model."),sjt.forEach(t),s5r=i(Vl),pn=n(Vl,"P",{});var py=s(pn);l5r=r(py,"The model class to instantiate is selected based on the "),lCe=n(py,"CODE",{});var ljt=s(lCe);i5r=r(ljt,"model_type"),ljt.forEach(t),d5r=r(py,` property of the config object (either
passed as an argument or loaded from `),iCe=n(py,"CODE",{});var ijt=s(iCe);c5r=r(ijt,"pretrained_model_name_or_path"),ijt.forEach(t),m5r=r(py,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dCe=n(py,"CODE",{});var djt=s(dCe);f5r=r(djt,"pretrained_model_name_or_path"),djt.forEach(t),g5r=r(py,":"),py.forEach(t),h5r=i(Vl),B=n(Vl,"UL",{});var j=s(B);uC=n(j,"LI",{});var nOe=s(uC);cCe=n(nOe,"STRONG",{});var cjt=s(cCe);u5r=r(cjt,"albert"),cjt.forEach(t),p5r=r(nOe," \u2014 "),bY=n(nOe,"A",{href:!0});var mjt=s(bY);_5r=r(mjt,"TFAlbertModel"),mjt.forEach(t),b5r=r(nOe," (ALBERT model)"),nOe.forEach(t),v5r=i(j),pC=n(j,"LI",{});var sOe=s(pC);mCe=n(sOe,"STRONG",{});var fjt=s(mCe);F5r=r(fjt,"bart"),fjt.forEach(t),T5r=r(sOe," \u2014 "),vY=n(sOe,"A",{href:!0});var gjt=s(vY);M5r=r(gjt,"TFBartModel"),gjt.forEach(t),E5r=r(sOe," (BART model)"),sOe.forEach(t),C5r=i(j),_C=n(j,"LI",{});var lOe=s(_C);fCe=n(lOe,"STRONG",{});var hjt=s(fCe);w5r=r(hjt,"bert"),hjt.forEach(t),A5r=r(lOe," \u2014 "),FY=n(lOe,"A",{href:!0});var ujt=s(FY);L5r=r(ujt,"TFBertModel"),ujt.forEach(t),y5r=r(lOe," (BERT model)"),lOe.forEach(t),x5r=i(j),bC=n(j,"LI",{});var iOe=s(bC);gCe=n(iOe,"STRONG",{});var pjt=s(gCe);$5r=r(pjt,"blenderbot"),pjt.forEach(t),k5r=r(iOe," \u2014 "),TY=n(iOe,"A",{href:!0});var _jt=s(TY);S5r=r(_jt,"TFBlenderbotModel"),_jt.forEach(t),R5r=r(iOe," (Blenderbot model)"),iOe.forEach(t),P5r=i(j),vC=n(j,"LI",{});var dOe=s(vC);hCe=n(dOe,"STRONG",{});var bjt=s(hCe);B5r=r(bjt,"blenderbot-small"),bjt.forEach(t),I5r=r(dOe," \u2014 "),MY=n(dOe,"A",{href:!0});var vjt=s(MY);N5r=r(vjt,"TFBlenderbotSmallModel"),vjt.forEach(t),q5r=r(dOe," (BlenderbotSmall model)"),dOe.forEach(t),j5r=i(j),FC=n(j,"LI",{});var cOe=s(FC);uCe=n(cOe,"STRONG",{});var Fjt=s(uCe);D5r=r(Fjt,"camembert"),Fjt.forEach(t),G5r=r(cOe," \u2014 "),EY=n(cOe,"A",{href:!0});var Tjt=s(EY);O5r=r(Tjt,"TFCamembertModel"),Tjt.forEach(t),V5r=r(cOe," (CamemBERT model)"),cOe.forEach(t),X5r=i(j),TC=n(j,"LI",{});var mOe=s(TC);pCe=n(mOe,"STRONG",{});var Mjt=s(pCe);z5r=r(Mjt,"clip"),Mjt.forEach(t),W5r=r(mOe," \u2014 "),CY=n(mOe,"A",{href:!0});var Ejt=s(CY);Q5r=r(Ejt,"TFCLIPModel"),Ejt.forEach(t),U5r=r(mOe," (CLIP model)"),mOe.forEach(t),H5r=i(j),MC=n(j,"LI",{});var fOe=s(MC);_Ce=n(fOe,"STRONG",{});var Cjt=s(_Ce);J5r=r(Cjt,"convbert"),Cjt.forEach(t),Y5r=r(fOe," \u2014 "),wY=n(fOe,"A",{href:!0});var wjt=s(wY);K5r=r(wjt,"TFConvBertModel"),wjt.forEach(t),Z5r=r(fOe," (ConvBERT model)"),fOe.forEach(t),e0r=i(j),EC=n(j,"LI",{});var gOe=s(EC);bCe=n(gOe,"STRONG",{});var Ajt=s(bCe);o0r=r(Ajt,"convnext"),Ajt.forEach(t),r0r=r(gOe," \u2014 "),AY=n(gOe,"A",{href:!0});var Ljt=s(AY);t0r=r(Ljt,"TFConvNextModel"),Ljt.forEach(t),a0r=r(gOe," (ConvNeXT model)"),gOe.forEach(t),n0r=i(j),CC=n(j,"LI",{});var hOe=s(CC);vCe=n(hOe,"STRONG",{});var yjt=s(vCe);s0r=r(yjt,"ctrl"),yjt.forEach(t),l0r=r(hOe," \u2014 "),LY=n(hOe,"A",{href:!0});var xjt=s(LY);i0r=r(xjt,"TFCTRLModel"),xjt.forEach(t),d0r=r(hOe," (CTRL model)"),hOe.forEach(t),c0r=i(j),wC=n(j,"LI",{});var uOe=s(wC);FCe=n(uOe,"STRONG",{});var $jt=s(FCe);m0r=r($jt,"data2vec-vision"),$jt.forEach(t),f0r=r(uOe," \u2014 "),yY=n(uOe,"A",{href:!0});var kjt=s(yY);g0r=r(kjt,"TFData2VecVisionModel"),kjt.forEach(t),h0r=r(uOe," (Data2VecVision model)"),uOe.forEach(t),u0r=i(j),AC=n(j,"LI",{});var pOe=s(AC);TCe=n(pOe,"STRONG",{});var Sjt=s(TCe);p0r=r(Sjt,"deberta"),Sjt.forEach(t),_0r=r(pOe," \u2014 "),xY=n(pOe,"A",{href:!0});var Rjt=s(xY);b0r=r(Rjt,"TFDebertaModel"),Rjt.forEach(t),v0r=r(pOe," (DeBERTa model)"),pOe.forEach(t),F0r=i(j),LC=n(j,"LI",{});var _Oe=s(LC);MCe=n(_Oe,"STRONG",{});var Pjt=s(MCe);T0r=r(Pjt,"deberta-v2"),Pjt.forEach(t),M0r=r(_Oe," \u2014 "),$Y=n(_Oe,"A",{href:!0});var Bjt=s($Y);E0r=r(Bjt,"TFDebertaV2Model"),Bjt.forEach(t),C0r=r(_Oe," (DeBERTa-v2 model)"),_Oe.forEach(t),w0r=i(j),yC=n(j,"LI",{});var bOe=s(yC);ECe=n(bOe,"STRONG",{});var Ijt=s(ECe);A0r=r(Ijt,"deit"),Ijt.forEach(t),L0r=r(bOe," \u2014 "),kY=n(bOe,"A",{href:!0});var Njt=s(kY);y0r=r(Njt,"TFDeiTModel"),Njt.forEach(t),x0r=r(bOe," (DeiT model)"),bOe.forEach(t),$0r=i(j),xC=n(j,"LI",{});var vOe=s(xC);CCe=n(vOe,"STRONG",{});var qjt=s(CCe);k0r=r(qjt,"distilbert"),qjt.forEach(t),S0r=r(vOe," \u2014 "),SY=n(vOe,"A",{href:!0});var jjt=s(SY);R0r=r(jjt,"TFDistilBertModel"),jjt.forEach(t),P0r=r(vOe," (DistilBERT model)"),vOe.forEach(t),B0r=i(j),$C=n(j,"LI",{});var FOe=s($C);wCe=n(FOe,"STRONG",{});var Djt=s(wCe);I0r=r(Djt,"dpr"),Djt.forEach(t),N0r=r(FOe," \u2014 "),RY=n(FOe,"A",{href:!0});var Gjt=s(RY);q0r=r(Gjt,"TFDPRQuestionEncoder"),Gjt.forEach(t),j0r=r(FOe," (DPR model)"),FOe.forEach(t),D0r=i(j),kC=n(j,"LI",{});var TOe=s(kC);ACe=n(TOe,"STRONG",{});var Ojt=s(ACe);G0r=r(Ojt,"electra"),Ojt.forEach(t),O0r=r(TOe," \u2014 "),PY=n(TOe,"A",{href:!0});var Vjt=s(PY);V0r=r(Vjt,"TFElectraModel"),Vjt.forEach(t),X0r=r(TOe," (ELECTRA model)"),TOe.forEach(t),z0r=i(j),SC=n(j,"LI",{});var MOe=s(SC);LCe=n(MOe,"STRONG",{});var Xjt=s(LCe);W0r=r(Xjt,"flaubert"),Xjt.forEach(t),Q0r=r(MOe," \u2014 "),BY=n(MOe,"A",{href:!0});var zjt=s(BY);U0r=r(zjt,"TFFlaubertModel"),zjt.forEach(t),H0r=r(MOe," (FlauBERT model)"),MOe.forEach(t),J0r=i(j),il=n(j,"LI",{});var lP=s(il);yCe=n(lP,"STRONG",{});var Wjt=s(yCe);Y0r=r(Wjt,"funnel"),Wjt.forEach(t),K0r=r(lP," \u2014 "),IY=n(lP,"A",{href:!0});var Qjt=s(IY);Z0r=r(Qjt,"TFFunnelModel"),Qjt.forEach(t),ewr=r(lP," or "),NY=n(lP,"A",{href:!0});var Ujt=s(NY);owr=r(Ujt,"TFFunnelBaseModel"),Ujt.forEach(t),rwr=r(lP," (Funnel Transformer model)"),lP.forEach(t),twr=i(j),RC=n(j,"LI",{});var EOe=s(RC);xCe=n(EOe,"STRONG",{});var Hjt=s(xCe);awr=r(Hjt,"gpt2"),Hjt.forEach(t),nwr=r(EOe," \u2014 "),qY=n(EOe,"A",{href:!0});var Jjt=s(qY);swr=r(Jjt,"TFGPT2Model"),Jjt.forEach(t),lwr=r(EOe," (OpenAI GPT-2 model)"),EOe.forEach(t),iwr=i(j),PC=n(j,"LI",{});var COe=s(PC);$Ce=n(COe,"STRONG",{});var Yjt=s($Ce);dwr=r(Yjt,"gptj"),Yjt.forEach(t),cwr=r(COe," \u2014 "),jY=n(COe,"A",{href:!0});var Kjt=s(jY);mwr=r(Kjt,"TFGPTJModel"),Kjt.forEach(t),fwr=r(COe," (GPT-J model)"),COe.forEach(t),gwr=i(j),BC=n(j,"LI",{});var wOe=s(BC);kCe=n(wOe,"STRONG",{});var Zjt=s(kCe);hwr=r(Zjt,"hubert"),Zjt.forEach(t),uwr=r(wOe," \u2014 "),DY=n(wOe,"A",{href:!0});var eDt=s(DY);pwr=r(eDt,"TFHubertModel"),eDt.forEach(t),_wr=r(wOe," (Hubert model)"),wOe.forEach(t),bwr=i(j),IC=n(j,"LI",{});var AOe=s(IC);SCe=n(AOe,"STRONG",{});var oDt=s(SCe);vwr=r(oDt,"layoutlm"),oDt.forEach(t),Fwr=r(AOe," \u2014 "),GY=n(AOe,"A",{href:!0});var rDt=s(GY);Twr=r(rDt,"TFLayoutLMModel"),rDt.forEach(t),Mwr=r(AOe," (LayoutLM model)"),AOe.forEach(t),Ewr=i(j),NC=n(j,"LI",{});var LOe=s(NC);RCe=n(LOe,"STRONG",{});var tDt=s(RCe);Cwr=r(tDt,"layoutlmv3"),tDt.forEach(t),wwr=r(LOe," \u2014 "),OY=n(LOe,"A",{href:!0});var aDt=s(OY);Awr=r(aDt,"TFLayoutLMv3Model"),aDt.forEach(t),Lwr=r(LOe," (LayoutLMv3 model)"),LOe.forEach(t),ywr=i(j),qC=n(j,"LI",{});var yOe=s(qC);PCe=n(yOe,"STRONG",{});var nDt=s(PCe);xwr=r(nDt,"led"),nDt.forEach(t),$wr=r(yOe," \u2014 "),VY=n(yOe,"A",{href:!0});var sDt=s(VY);kwr=r(sDt,"TFLEDModel"),sDt.forEach(t),Swr=r(yOe," (LED model)"),yOe.forEach(t),Rwr=i(j),jC=n(j,"LI",{});var xOe=s(jC);BCe=n(xOe,"STRONG",{});var lDt=s(BCe);Pwr=r(lDt,"longformer"),lDt.forEach(t),Bwr=r(xOe," \u2014 "),XY=n(xOe,"A",{href:!0});var iDt=s(XY);Iwr=r(iDt,"TFLongformerModel"),iDt.forEach(t),Nwr=r(xOe," (Longformer model)"),xOe.forEach(t),qwr=i(j),DC=n(j,"LI",{});var $Oe=s(DC);ICe=n($Oe,"STRONG",{});var dDt=s(ICe);jwr=r(dDt,"lxmert"),dDt.forEach(t),Dwr=r($Oe," \u2014 "),zY=n($Oe,"A",{href:!0});var cDt=s(zY);Gwr=r(cDt,"TFLxmertModel"),cDt.forEach(t),Owr=r($Oe," (LXMERT model)"),$Oe.forEach(t),Vwr=i(j),GC=n(j,"LI",{});var kOe=s(GC);NCe=n(kOe,"STRONG",{});var mDt=s(NCe);Xwr=r(mDt,"marian"),mDt.forEach(t),zwr=r(kOe," \u2014 "),WY=n(kOe,"A",{href:!0});var fDt=s(WY);Wwr=r(fDt,"TFMarianModel"),fDt.forEach(t),Qwr=r(kOe," (Marian model)"),kOe.forEach(t),Uwr=i(j),OC=n(j,"LI",{});var SOe=s(OC);qCe=n(SOe,"STRONG",{});var gDt=s(qCe);Hwr=r(gDt,"mbart"),gDt.forEach(t),Jwr=r(SOe," \u2014 "),QY=n(SOe,"A",{href:!0});var hDt=s(QY);Ywr=r(hDt,"TFMBartModel"),hDt.forEach(t),Kwr=r(SOe," (mBART model)"),SOe.forEach(t),Zwr=i(j),VC=n(j,"LI",{});var ROe=s(VC);jCe=n(ROe,"STRONG",{});var uDt=s(jCe);e6r=r(uDt,"mobilebert"),uDt.forEach(t),o6r=r(ROe," \u2014 "),UY=n(ROe,"A",{href:!0});var pDt=s(UY);r6r=r(pDt,"TFMobileBertModel"),pDt.forEach(t),t6r=r(ROe," (MobileBERT model)"),ROe.forEach(t),a6r=i(j),XC=n(j,"LI",{});var POe=s(XC);DCe=n(POe,"STRONG",{});var _Dt=s(DCe);n6r=r(_Dt,"mpnet"),_Dt.forEach(t),s6r=r(POe," \u2014 "),HY=n(POe,"A",{href:!0});var bDt=s(HY);l6r=r(bDt,"TFMPNetModel"),bDt.forEach(t),i6r=r(POe," (MPNet model)"),POe.forEach(t),d6r=i(j),zC=n(j,"LI",{});var BOe=s(zC);GCe=n(BOe,"STRONG",{});var vDt=s(GCe);c6r=r(vDt,"mt5"),vDt.forEach(t),m6r=r(BOe," \u2014 "),JY=n(BOe,"A",{href:!0});var FDt=s(JY);f6r=r(FDt,"TFMT5Model"),FDt.forEach(t),g6r=r(BOe," (MT5 model)"),BOe.forEach(t),h6r=i(j),WC=n(j,"LI",{});var IOe=s(WC);OCe=n(IOe,"STRONG",{});var TDt=s(OCe);u6r=r(TDt,"openai-gpt"),TDt.forEach(t),p6r=r(IOe," \u2014 "),YY=n(IOe,"A",{href:!0});var MDt=s(YY);_6r=r(MDt,"TFOpenAIGPTModel"),MDt.forEach(t),b6r=r(IOe," (OpenAI GPT model)"),IOe.forEach(t),v6r=i(j),QC=n(j,"LI",{});var NOe=s(QC);VCe=n(NOe,"STRONG",{});var EDt=s(VCe);F6r=r(EDt,"opt"),EDt.forEach(t),T6r=r(NOe," \u2014 "),KY=n(NOe,"A",{href:!0});var CDt=s(KY);M6r=r(CDt,"TFOPTModel"),CDt.forEach(t),E6r=r(NOe," (OPT model)"),NOe.forEach(t),C6r=i(j),UC=n(j,"LI",{});var qOe=s(UC);XCe=n(qOe,"STRONG",{});var wDt=s(XCe);w6r=r(wDt,"pegasus"),wDt.forEach(t),A6r=r(qOe," \u2014 "),ZY=n(qOe,"A",{href:!0});var ADt=s(ZY);L6r=r(ADt,"TFPegasusModel"),ADt.forEach(t),y6r=r(qOe," (Pegasus model)"),qOe.forEach(t),x6r=i(j),HC=n(j,"LI",{});var jOe=s(HC);zCe=n(jOe,"STRONG",{});var LDt=s(zCe);$6r=r(LDt,"regnet"),LDt.forEach(t),k6r=r(jOe," \u2014 "),eK=n(jOe,"A",{href:!0});var yDt=s(eK);S6r=r(yDt,"TFRegNetModel"),yDt.forEach(t),R6r=r(jOe," (RegNet model)"),jOe.forEach(t),P6r=i(j),JC=n(j,"LI",{});var DOe=s(JC);WCe=n(DOe,"STRONG",{});var xDt=s(WCe);B6r=r(xDt,"rembert"),xDt.forEach(t),I6r=r(DOe," \u2014 "),oK=n(DOe,"A",{href:!0});var $Dt=s(oK);N6r=r($Dt,"TFRemBertModel"),$Dt.forEach(t),q6r=r(DOe," (RemBERT model)"),DOe.forEach(t),j6r=i(j),YC=n(j,"LI",{});var GOe=s(YC);QCe=n(GOe,"STRONG",{});var kDt=s(QCe);D6r=r(kDt,"resnet"),kDt.forEach(t),G6r=r(GOe," \u2014 "),rK=n(GOe,"A",{href:!0});var SDt=s(rK);O6r=r(SDt,"TFResNetModel"),SDt.forEach(t),V6r=r(GOe," (ResNet model)"),GOe.forEach(t),X6r=i(j),KC=n(j,"LI",{});var OOe=s(KC);UCe=n(OOe,"STRONG",{});var RDt=s(UCe);z6r=r(RDt,"roberta"),RDt.forEach(t),W6r=r(OOe," \u2014 "),tK=n(OOe,"A",{href:!0});var PDt=s(tK);Q6r=r(PDt,"TFRobertaModel"),PDt.forEach(t),U6r=r(OOe," (RoBERTa model)"),OOe.forEach(t),H6r=i(j),ZC=n(j,"LI",{});var VOe=s(ZC);HCe=n(VOe,"STRONG",{});var BDt=s(HCe);J6r=r(BDt,"roformer"),BDt.forEach(t),Y6r=r(VOe," \u2014 "),aK=n(VOe,"A",{href:!0});var IDt=s(aK);K6r=r(IDt,"TFRoFormerModel"),IDt.forEach(t),Z6r=r(VOe," (RoFormer model)"),VOe.forEach(t),eAr=i(j),e3=n(j,"LI",{});var XOe=s(e3);JCe=n(XOe,"STRONG",{});var NDt=s(JCe);oAr=r(NDt,"segformer"),NDt.forEach(t),rAr=r(XOe," \u2014 "),nK=n(XOe,"A",{href:!0});var qDt=s(nK);tAr=r(qDt,"TFSegformerModel"),qDt.forEach(t),aAr=r(XOe," (SegFormer model)"),XOe.forEach(t),nAr=i(j),o3=n(j,"LI",{});var zOe=s(o3);YCe=n(zOe,"STRONG",{});var jDt=s(YCe);sAr=r(jDt,"speech_to_text"),jDt.forEach(t),lAr=r(zOe," \u2014 "),sK=n(zOe,"A",{href:!0});var DDt=s(sK);iAr=r(DDt,"TFSpeech2TextModel"),DDt.forEach(t),dAr=r(zOe," (Speech2Text model)"),zOe.forEach(t),cAr=i(j),r3=n(j,"LI",{});var WOe=s(r3);KCe=n(WOe,"STRONG",{});var GDt=s(KCe);mAr=r(GDt,"swin"),GDt.forEach(t),fAr=r(WOe," \u2014 "),lK=n(WOe,"A",{href:!0});var ODt=s(lK);gAr=r(ODt,"TFSwinModel"),ODt.forEach(t),hAr=r(WOe," (Swin Transformer model)"),WOe.forEach(t),uAr=i(j),t3=n(j,"LI",{});var QOe=s(t3);ZCe=n(QOe,"STRONG",{});var VDt=s(ZCe);pAr=r(VDt,"t5"),VDt.forEach(t),_Ar=r(QOe," \u2014 "),iK=n(QOe,"A",{href:!0});var XDt=s(iK);bAr=r(XDt,"TFT5Model"),XDt.forEach(t),vAr=r(QOe," (T5 model)"),QOe.forEach(t),FAr=i(j),a3=n(j,"LI",{});var UOe=s(a3);e3e=n(UOe,"STRONG",{});var zDt=s(e3e);TAr=r(zDt,"tapas"),zDt.forEach(t),MAr=r(UOe," \u2014 "),dK=n(UOe,"A",{href:!0});var WDt=s(dK);EAr=r(WDt,"TFTapasModel"),WDt.forEach(t),CAr=r(UOe," (TAPAS model)"),UOe.forEach(t),wAr=i(j),n3=n(j,"LI",{});var HOe=s(n3);o3e=n(HOe,"STRONG",{});var QDt=s(o3e);AAr=r(QDt,"transfo-xl"),QDt.forEach(t),LAr=r(HOe," \u2014 "),cK=n(HOe,"A",{href:!0});var UDt=s(cK);yAr=r(UDt,"TFTransfoXLModel"),UDt.forEach(t),xAr=r(HOe," (Transformer-XL model)"),HOe.forEach(t),$Ar=i(j),s3=n(j,"LI",{});var JOe=s(s3);r3e=n(JOe,"STRONG",{});var HDt=s(r3e);kAr=r(HDt,"vit"),HDt.forEach(t),SAr=r(JOe," \u2014 "),mK=n(JOe,"A",{href:!0});var JDt=s(mK);RAr=r(JDt,"TFViTModel"),JDt.forEach(t),PAr=r(JOe," (ViT model)"),JOe.forEach(t),BAr=i(j),l3=n(j,"LI",{});var YOe=s(l3);t3e=n(YOe,"STRONG",{});var YDt=s(t3e);IAr=r(YDt,"vit_mae"),YDt.forEach(t),NAr=r(YOe," \u2014 "),fK=n(YOe,"A",{href:!0});var KDt=s(fK);qAr=r(KDt,"TFViTMAEModel"),KDt.forEach(t),jAr=r(YOe," (ViTMAE model)"),YOe.forEach(t),DAr=i(j),i3=n(j,"LI",{});var KOe=s(i3);a3e=n(KOe,"STRONG",{});var ZDt=s(a3e);GAr=r(ZDt,"wav2vec2"),ZDt.forEach(t),OAr=r(KOe," \u2014 "),gK=n(KOe,"A",{href:!0});var eGt=s(gK);VAr=r(eGt,"TFWav2Vec2Model"),eGt.forEach(t),XAr=r(KOe," (Wav2Vec2 model)"),KOe.forEach(t),zAr=i(j),d3=n(j,"LI",{});var ZOe=s(d3);n3e=n(ZOe,"STRONG",{});var oGt=s(n3e);WAr=r(oGt,"xglm"),oGt.forEach(t),QAr=r(ZOe," \u2014 "),hK=n(ZOe,"A",{href:!0});var rGt=s(hK);UAr=r(rGt,"TFXGLMModel"),rGt.forEach(t),HAr=r(ZOe," (XGLM model)"),ZOe.forEach(t),JAr=i(j),c3=n(j,"LI",{});var eVe=s(c3);s3e=n(eVe,"STRONG",{});var tGt=s(s3e);YAr=r(tGt,"xlm"),tGt.forEach(t),KAr=r(eVe," \u2014 "),uK=n(eVe,"A",{href:!0});var aGt=s(uK);ZAr=r(aGt,"TFXLMModel"),aGt.forEach(t),e7r=r(eVe," (XLM model)"),eVe.forEach(t),o7r=i(j),m3=n(j,"LI",{});var oVe=s(m3);l3e=n(oVe,"STRONG",{});var nGt=s(l3e);r7r=r(nGt,"xlm-roberta"),nGt.forEach(t),t7r=r(oVe," \u2014 "),pK=n(oVe,"A",{href:!0});var sGt=s(pK);a7r=r(sGt,"TFXLMRobertaModel"),sGt.forEach(t),n7r=r(oVe," (XLM-RoBERTa model)"),oVe.forEach(t),s7r=i(j),f3=n(j,"LI",{});var rVe=s(f3);i3e=n(rVe,"STRONG",{});var lGt=s(i3e);l7r=r(lGt,"xlnet"),lGt.forEach(t),i7r=r(rVe," \u2014 "),_K=n(rVe,"A",{href:!0});var iGt=s(_K);d7r=r(iGt,"TFXLNetModel"),iGt.forEach(t),c7r=r(rVe," (XLNet model)"),rVe.forEach(t),j.forEach(t),m7r=i(Vl),T(g3.$$.fragment,Vl),Vl.forEach(t),Ol.forEach(t),THe=i(m),Ac=n(m,"H2",{class:!0});var RYe=s(Ac);h3=n(RYe,"A",{id:!0,class:!0,href:!0});var dGt=s(h3);d3e=n(dGt,"SPAN",{});var cGt=s(d3e);T(u$.$$.fragment,cGt),cGt.forEach(t),dGt.forEach(t),f7r=i(RYe),c3e=n(RYe,"SPAN",{});var mGt=s(c3e);g7r=r(mGt,"TFAutoModelForPreTraining"),mGt.forEach(t),RYe.forEach(t),MHe=i(m),nr=n(m,"DIV",{class:!0});var Xl=s(nr);T(p$.$$.fragment,Xl),h7r=i(Xl),Lc=n(Xl,"P",{});var Jne=s(Lc);u7r=r(Jne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),bK=n(Jne,"A",{href:!0});var fGt=s(bK);p7r=r(fGt,"from_pretrained()"),fGt.forEach(t),_7r=r(Jne," class method or the "),vK=n(Jne,"A",{href:!0});var gGt=s(vK);b7r=r(gGt,"from_config()"),gGt.forEach(t),v7r=r(Jne,` class
method.`),Jne.forEach(t),F7r=i(Xl),_$=n(Xl,"P",{});var PYe=s(_$);T7r=r(PYe,"This class cannot be instantiated directly using "),m3e=n(PYe,"CODE",{});var hGt=s(m3e);M7r=r(hGt,"__init__()"),hGt.forEach(t),E7r=r(PYe," (throws an error)."),PYe.forEach(t),C7r=i(Xl),jt=n(Xl,"DIV",{class:!0});var _y=s(jt);T(b$.$$.fragment,_y),w7r=i(_y),f3e=n(_y,"P",{});var uGt=s(f3e);A7r=r(uGt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),uGt.forEach(t),L7r=i(_y),yc=n(_y,"P",{});var Yne=s(yc);y7r=r(Yne,`Note:
Loading a model from its configuration file does `),g3e=n(Yne,"STRONG",{});var pGt=s(g3e);x7r=r(pGt,"not"),pGt.forEach(t),$7r=r(Yne,` load the model weights. It only affects the
model\u2019s configuration. Use `),FK=n(Yne,"A",{href:!0});var _Gt=s(FK);k7r=r(_Gt,"from_pretrained()"),_Gt.forEach(t),S7r=r(Yne," to load the model weights."),Yne.forEach(t),R7r=i(_y),T(u3.$$.fragment,_y),_y.forEach(t),P7r=i(Xl),Pr=n(Xl,"DIV",{class:!0});var zl=s(Pr);T(v$.$$.fragment,zl),B7r=i(zl),h3e=n(zl,"P",{});var bGt=s(h3e);I7r=r(bGt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),bGt.forEach(t),N7r=i(zl),_n=n(zl,"P",{});var by=s(_n);q7r=r(by,"The model class to instantiate is selected based on the "),u3e=n(by,"CODE",{});var vGt=s(u3e);j7r=r(vGt,"model_type"),vGt.forEach(t),D7r=r(by,` property of the config object (either
passed as an argument or loaded from `),p3e=n(by,"CODE",{});var FGt=s(p3e);G7r=r(FGt,"pretrained_model_name_or_path"),FGt.forEach(t),O7r=r(by,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_3e=n(by,"CODE",{});var TGt=s(_3e);V7r=r(TGt,"pretrained_model_name_or_path"),TGt.forEach(t),X7r=r(by,":"),by.forEach(t),z7r=i(zl),se=n(zl,"UL",{});var le=s(se);p3=n(le,"LI",{});var tVe=s(p3);b3e=n(tVe,"STRONG",{});var MGt=s(b3e);W7r=r(MGt,"albert"),MGt.forEach(t),Q7r=r(tVe," \u2014 "),TK=n(tVe,"A",{href:!0});var EGt=s(TK);U7r=r(EGt,"TFAlbertForPreTraining"),EGt.forEach(t),H7r=r(tVe," (ALBERT model)"),tVe.forEach(t),J7r=i(le),_3=n(le,"LI",{});var aVe=s(_3);v3e=n(aVe,"STRONG",{});var CGt=s(v3e);Y7r=r(CGt,"bart"),CGt.forEach(t),K7r=r(aVe," \u2014 "),MK=n(aVe,"A",{href:!0});var wGt=s(MK);Z7r=r(wGt,"TFBartForConditionalGeneration"),wGt.forEach(t),eLr=r(aVe," (BART model)"),aVe.forEach(t),oLr=i(le),b3=n(le,"LI",{});var nVe=s(b3);F3e=n(nVe,"STRONG",{});var AGt=s(F3e);rLr=r(AGt,"bert"),AGt.forEach(t),tLr=r(nVe," \u2014 "),EK=n(nVe,"A",{href:!0});var LGt=s(EK);aLr=r(LGt,"TFBertForPreTraining"),LGt.forEach(t),nLr=r(nVe," (BERT model)"),nVe.forEach(t),sLr=i(le),v3=n(le,"LI",{});var sVe=s(v3);T3e=n(sVe,"STRONG",{});var yGt=s(T3e);lLr=r(yGt,"camembert"),yGt.forEach(t),iLr=r(sVe," \u2014 "),CK=n(sVe,"A",{href:!0});var xGt=s(CK);dLr=r(xGt,"TFCamembertForMaskedLM"),xGt.forEach(t),cLr=r(sVe," (CamemBERT model)"),sVe.forEach(t),mLr=i(le),F3=n(le,"LI",{});var lVe=s(F3);M3e=n(lVe,"STRONG",{});var $Gt=s(M3e);fLr=r($Gt,"ctrl"),$Gt.forEach(t),gLr=r(lVe," \u2014 "),wK=n(lVe,"A",{href:!0});var kGt=s(wK);hLr=r(kGt,"TFCTRLLMHeadModel"),kGt.forEach(t),uLr=r(lVe," (CTRL model)"),lVe.forEach(t),pLr=i(le),T3=n(le,"LI",{});var iVe=s(T3);E3e=n(iVe,"STRONG",{});var SGt=s(E3e);_Lr=r(SGt,"distilbert"),SGt.forEach(t),bLr=r(iVe," \u2014 "),AK=n(iVe,"A",{href:!0});var RGt=s(AK);vLr=r(RGt,"TFDistilBertForMaskedLM"),RGt.forEach(t),FLr=r(iVe," (DistilBERT model)"),iVe.forEach(t),TLr=i(le),M3=n(le,"LI",{});var dVe=s(M3);C3e=n(dVe,"STRONG",{});var PGt=s(C3e);MLr=r(PGt,"electra"),PGt.forEach(t),ELr=r(dVe," \u2014 "),LK=n(dVe,"A",{href:!0});var BGt=s(LK);CLr=r(BGt,"TFElectraForPreTraining"),BGt.forEach(t),wLr=r(dVe," (ELECTRA model)"),dVe.forEach(t),ALr=i(le),E3=n(le,"LI",{});var cVe=s(E3);w3e=n(cVe,"STRONG",{});var IGt=s(w3e);LLr=r(IGt,"flaubert"),IGt.forEach(t),yLr=r(cVe," \u2014 "),yK=n(cVe,"A",{href:!0});var NGt=s(yK);xLr=r(NGt,"TFFlaubertWithLMHeadModel"),NGt.forEach(t),$Lr=r(cVe," (FlauBERT model)"),cVe.forEach(t),kLr=i(le),C3=n(le,"LI",{});var mVe=s(C3);A3e=n(mVe,"STRONG",{});var qGt=s(A3e);SLr=r(qGt,"funnel"),qGt.forEach(t),RLr=r(mVe," \u2014 "),xK=n(mVe,"A",{href:!0});var jGt=s(xK);PLr=r(jGt,"TFFunnelForPreTraining"),jGt.forEach(t),BLr=r(mVe," (Funnel Transformer model)"),mVe.forEach(t),ILr=i(le),w3=n(le,"LI",{});var fVe=s(w3);L3e=n(fVe,"STRONG",{});var DGt=s(L3e);NLr=r(DGt,"gpt2"),DGt.forEach(t),qLr=r(fVe," \u2014 "),$K=n(fVe,"A",{href:!0});var GGt=s($K);jLr=r(GGt,"TFGPT2LMHeadModel"),GGt.forEach(t),DLr=r(fVe," (OpenAI GPT-2 model)"),fVe.forEach(t),GLr=i(le),A3=n(le,"LI",{});var gVe=s(A3);y3e=n(gVe,"STRONG",{});var OGt=s(y3e);OLr=r(OGt,"layoutlm"),OGt.forEach(t),VLr=r(gVe," \u2014 "),kK=n(gVe,"A",{href:!0});var VGt=s(kK);XLr=r(VGt,"TFLayoutLMForMaskedLM"),VGt.forEach(t),zLr=r(gVe," (LayoutLM model)"),gVe.forEach(t),WLr=i(le),L3=n(le,"LI",{});var hVe=s(L3);x3e=n(hVe,"STRONG",{});var XGt=s(x3e);QLr=r(XGt,"lxmert"),XGt.forEach(t),ULr=r(hVe," \u2014 "),SK=n(hVe,"A",{href:!0});var zGt=s(SK);HLr=r(zGt,"TFLxmertForPreTraining"),zGt.forEach(t),JLr=r(hVe," (LXMERT model)"),hVe.forEach(t),YLr=i(le),y3=n(le,"LI",{});var uVe=s(y3);$3e=n(uVe,"STRONG",{});var WGt=s($3e);KLr=r(WGt,"mobilebert"),WGt.forEach(t),ZLr=r(uVe," \u2014 "),RK=n(uVe,"A",{href:!0});var QGt=s(RK);eyr=r(QGt,"TFMobileBertForPreTraining"),QGt.forEach(t),oyr=r(uVe," (MobileBERT model)"),uVe.forEach(t),ryr=i(le),x3=n(le,"LI",{});var pVe=s(x3);k3e=n(pVe,"STRONG",{});var UGt=s(k3e);tyr=r(UGt,"mpnet"),UGt.forEach(t),ayr=r(pVe," \u2014 "),PK=n(pVe,"A",{href:!0});var HGt=s(PK);nyr=r(HGt,"TFMPNetForMaskedLM"),HGt.forEach(t),syr=r(pVe," (MPNet model)"),pVe.forEach(t),lyr=i(le),$3=n(le,"LI",{});var _Ve=s($3);S3e=n(_Ve,"STRONG",{});var JGt=s(S3e);iyr=r(JGt,"openai-gpt"),JGt.forEach(t),dyr=r(_Ve," \u2014 "),BK=n(_Ve,"A",{href:!0});var YGt=s(BK);cyr=r(YGt,"TFOpenAIGPTLMHeadModel"),YGt.forEach(t),myr=r(_Ve," (OpenAI GPT model)"),_Ve.forEach(t),fyr=i(le),k3=n(le,"LI",{});var bVe=s(k3);R3e=n(bVe,"STRONG",{});var KGt=s(R3e);gyr=r(KGt,"roberta"),KGt.forEach(t),hyr=r(bVe," \u2014 "),IK=n(bVe,"A",{href:!0});var ZGt=s(IK);uyr=r(ZGt,"TFRobertaForMaskedLM"),ZGt.forEach(t),pyr=r(bVe," (RoBERTa model)"),bVe.forEach(t),_yr=i(le),S3=n(le,"LI",{});var vVe=s(S3);P3e=n(vVe,"STRONG",{});var eOt=s(P3e);byr=r(eOt,"t5"),eOt.forEach(t),vyr=r(vVe," \u2014 "),NK=n(vVe,"A",{href:!0});var oOt=s(NK);Fyr=r(oOt,"TFT5ForConditionalGeneration"),oOt.forEach(t),Tyr=r(vVe," (T5 model)"),vVe.forEach(t),Myr=i(le),R3=n(le,"LI",{});var FVe=s(R3);B3e=n(FVe,"STRONG",{});var rOt=s(B3e);Eyr=r(rOt,"tapas"),rOt.forEach(t),Cyr=r(FVe," \u2014 "),qK=n(FVe,"A",{href:!0});var tOt=s(qK);wyr=r(tOt,"TFTapasForMaskedLM"),tOt.forEach(t),Ayr=r(FVe," (TAPAS model)"),FVe.forEach(t),Lyr=i(le),P3=n(le,"LI",{});var TVe=s(P3);I3e=n(TVe,"STRONG",{});var aOt=s(I3e);yyr=r(aOt,"transfo-xl"),aOt.forEach(t),xyr=r(TVe," \u2014 "),jK=n(TVe,"A",{href:!0});var nOt=s(jK);$yr=r(nOt,"TFTransfoXLLMHeadModel"),nOt.forEach(t),kyr=r(TVe," (Transformer-XL model)"),TVe.forEach(t),Syr=i(le),B3=n(le,"LI",{});var MVe=s(B3);N3e=n(MVe,"STRONG",{});var sOt=s(N3e);Ryr=r(sOt,"vit_mae"),sOt.forEach(t),Pyr=r(MVe," \u2014 "),DK=n(MVe,"A",{href:!0});var lOt=s(DK);Byr=r(lOt,"TFViTMAEForPreTraining"),lOt.forEach(t),Iyr=r(MVe," (ViTMAE model)"),MVe.forEach(t),Nyr=i(le),I3=n(le,"LI",{});var EVe=s(I3);q3e=n(EVe,"STRONG",{});var iOt=s(q3e);qyr=r(iOt,"xlm"),iOt.forEach(t),jyr=r(EVe," \u2014 "),GK=n(EVe,"A",{href:!0});var dOt=s(GK);Dyr=r(dOt,"TFXLMWithLMHeadModel"),dOt.forEach(t),Gyr=r(EVe," (XLM model)"),EVe.forEach(t),Oyr=i(le),N3=n(le,"LI",{});var CVe=s(N3);j3e=n(CVe,"STRONG",{});var cOt=s(j3e);Vyr=r(cOt,"xlm-roberta"),cOt.forEach(t),Xyr=r(CVe," \u2014 "),OK=n(CVe,"A",{href:!0});var mOt=s(OK);zyr=r(mOt,"TFXLMRobertaForMaskedLM"),mOt.forEach(t),Wyr=r(CVe," (XLM-RoBERTa model)"),CVe.forEach(t),Qyr=i(le),q3=n(le,"LI",{});var wVe=s(q3);D3e=n(wVe,"STRONG",{});var fOt=s(D3e);Uyr=r(fOt,"xlnet"),fOt.forEach(t),Hyr=r(wVe," \u2014 "),VK=n(wVe,"A",{href:!0});var gOt=s(VK);Jyr=r(gOt,"TFXLNetLMHeadModel"),gOt.forEach(t),Yyr=r(wVe," (XLNet model)"),wVe.forEach(t),le.forEach(t),Kyr=i(zl),T(j3.$$.fragment,zl),zl.forEach(t),Xl.forEach(t),EHe=i(m),xc=n(m,"H2",{class:!0});var BYe=s(xc);D3=n(BYe,"A",{id:!0,class:!0,href:!0});var hOt=s(D3);G3e=n(hOt,"SPAN",{});var uOt=s(G3e);T(F$.$$.fragment,uOt),uOt.forEach(t),hOt.forEach(t),Zyr=i(BYe),O3e=n(BYe,"SPAN",{});var pOt=s(O3e);e8r=r(pOt,"TFAutoModelForCausalLM"),pOt.forEach(t),BYe.forEach(t),CHe=i(m),sr=n(m,"DIV",{class:!0});var Wl=s(sr);T(T$.$$.fragment,Wl),o8r=i(Wl),$c=n(Wl,"P",{});var Kne=s($c);r8r=r(Kne,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),XK=n(Kne,"A",{href:!0});var _Ot=s(XK);t8r=r(_Ot,"from_pretrained()"),_Ot.forEach(t),a8r=r(Kne," class method or the "),zK=n(Kne,"A",{href:!0});var bOt=s(zK);n8r=r(bOt,"from_config()"),bOt.forEach(t),s8r=r(Kne,` class
method.`),Kne.forEach(t),l8r=i(Wl),M$=n(Wl,"P",{});var IYe=s(M$);i8r=r(IYe,"This class cannot be instantiated directly using "),V3e=n(IYe,"CODE",{});var vOt=s(V3e);d8r=r(vOt,"__init__()"),vOt.forEach(t),c8r=r(IYe," (throws an error)."),IYe.forEach(t),m8r=i(Wl),Dt=n(Wl,"DIV",{class:!0});var vy=s(Dt);T(E$.$$.fragment,vy),f8r=i(vy),X3e=n(vy,"P",{});var FOt=s(X3e);g8r=r(FOt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),FOt.forEach(t),h8r=i(vy),kc=n(vy,"P",{});var Zne=s(kc);u8r=r(Zne,`Note:
Loading a model from its configuration file does `),z3e=n(Zne,"STRONG",{});var TOt=s(z3e);p8r=r(TOt,"not"),TOt.forEach(t),_8r=r(Zne,` load the model weights. It only affects the
model\u2019s configuration. Use `),WK=n(Zne,"A",{href:!0});var MOt=s(WK);b8r=r(MOt,"from_pretrained()"),MOt.forEach(t),v8r=r(Zne," to load the model weights."),Zne.forEach(t),F8r=i(vy),T(G3.$$.fragment,vy),vy.forEach(t),T8r=i(Wl),Br=n(Wl,"DIV",{class:!0});var Ql=s(Br);T(C$.$$.fragment,Ql),M8r=i(Ql),W3e=n(Ql,"P",{});var EOt=s(W3e);E8r=r(EOt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),EOt.forEach(t),C8r=i(Ql),bn=n(Ql,"P",{});var Fy=s(bn);w8r=r(Fy,"The model class to instantiate is selected based on the "),Q3e=n(Fy,"CODE",{});var COt=s(Q3e);A8r=r(COt,"model_type"),COt.forEach(t),L8r=r(Fy,` property of the config object (either
passed as an argument or loaded from `),U3e=n(Fy,"CODE",{});var wOt=s(U3e);y8r=r(wOt,"pretrained_model_name_or_path"),wOt.forEach(t),x8r=r(Fy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H3e=n(Fy,"CODE",{});var AOt=s(H3e);$8r=r(AOt,"pretrained_model_name_or_path"),AOt.forEach(t),k8r=r(Fy,":"),Fy.forEach(t),S8r=i(Ql),Me=n(Ql,"UL",{});var Ce=s(Me);O3=n(Ce,"LI",{});var AVe=s(O3);J3e=n(AVe,"STRONG",{});var LOt=s(J3e);R8r=r(LOt,"bert"),LOt.forEach(t),P8r=r(AVe," \u2014 "),QK=n(AVe,"A",{href:!0});var yOt=s(QK);B8r=r(yOt,"TFBertLMHeadModel"),yOt.forEach(t),I8r=r(AVe," (BERT model)"),AVe.forEach(t),N8r=i(Ce),V3=n(Ce,"LI",{});var LVe=s(V3);Y3e=n(LVe,"STRONG",{});var xOt=s(Y3e);q8r=r(xOt,"camembert"),xOt.forEach(t),j8r=r(LVe," \u2014 "),UK=n(LVe,"A",{href:!0});var $Ot=s(UK);D8r=r($Ot,"TFCamembertForCausalLM"),$Ot.forEach(t),G8r=r(LVe," (CamemBERT model)"),LVe.forEach(t),O8r=i(Ce),X3=n(Ce,"LI",{});var yVe=s(X3);K3e=n(yVe,"STRONG",{});var kOt=s(K3e);V8r=r(kOt,"ctrl"),kOt.forEach(t),X8r=r(yVe," \u2014 "),HK=n(yVe,"A",{href:!0});var SOt=s(HK);z8r=r(SOt,"TFCTRLLMHeadModel"),SOt.forEach(t),W8r=r(yVe," (CTRL model)"),yVe.forEach(t),Q8r=i(Ce),z3=n(Ce,"LI",{});var xVe=s(z3);Z3e=n(xVe,"STRONG",{});var ROt=s(Z3e);U8r=r(ROt,"gpt2"),ROt.forEach(t),H8r=r(xVe," \u2014 "),JK=n(xVe,"A",{href:!0});var POt=s(JK);J8r=r(POt,"TFGPT2LMHeadModel"),POt.forEach(t),Y8r=r(xVe," (OpenAI GPT-2 model)"),xVe.forEach(t),K8r=i(Ce),W3=n(Ce,"LI",{});var $Ve=s(W3);e5e=n($Ve,"STRONG",{});var BOt=s(e5e);Z8r=r(BOt,"gptj"),BOt.forEach(t),e9r=r($Ve," \u2014 "),YK=n($Ve,"A",{href:!0});var IOt=s(YK);o9r=r(IOt,"TFGPTJForCausalLM"),IOt.forEach(t),r9r=r($Ve," (GPT-J model)"),$Ve.forEach(t),t9r=i(Ce),Q3=n(Ce,"LI",{});var kVe=s(Q3);o5e=n(kVe,"STRONG",{});var NOt=s(o5e);a9r=r(NOt,"openai-gpt"),NOt.forEach(t),n9r=r(kVe," \u2014 "),KK=n(kVe,"A",{href:!0});var qOt=s(KK);s9r=r(qOt,"TFOpenAIGPTLMHeadModel"),qOt.forEach(t),l9r=r(kVe," (OpenAI GPT model)"),kVe.forEach(t),i9r=i(Ce),U3=n(Ce,"LI",{});var SVe=s(U3);r5e=n(SVe,"STRONG",{});var jOt=s(r5e);d9r=r(jOt,"opt"),jOt.forEach(t),c9r=r(SVe," \u2014 "),ZK=n(SVe,"A",{href:!0});var DOt=s(ZK);m9r=r(DOt,"TFOPTForCausalLM"),DOt.forEach(t),f9r=r(SVe," (OPT model)"),SVe.forEach(t),g9r=i(Ce),H3=n(Ce,"LI",{});var RVe=s(H3);t5e=n(RVe,"STRONG",{});var GOt=s(t5e);h9r=r(GOt,"rembert"),GOt.forEach(t),u9r=r(RVe," \u2014 "),eZ=n(RVe,"A",{href:!0});var OOt=s(eZ);p9r=r(OOt,"TFRemBertForCausalLM"),OOt.forEach(t),_9r=r(RVe," (RemBERT model)"),RVe.forEach(t),b9r=i(Ce),J3=n(Ce,"LI",{});var PVe=s(J3);a5e=n(PVe,"STRONG",{});var VOt=s(a5e);v9r=r(VOt,"roberta"),VOt.forEach(t),F9r=r(PVe," \u2014 "),oZ=n(PVe,"A",{href:!0});var XOt=s(oZ);T9r=r(XOt,"TFRobertaForCausalLM"),XOt.forEach(t),M9r=r(PVe," (RoBERTa model)"),PVe.forEach(t),E9r=i(Ce),Y3=n(Ce,"LI",{});var BVe=s(Y3);n5e=n(BVe,"STRONG",{});var zOt=s(n5e);C9r=r(zOt,"roformer"),zOt.forEach(t),w9r=r(BVe," \u2014 "),rZ=n(BVe,"A",{href:!0});var WOt=s(rZ);A9r=r(WOt,"TFRoFormerForCausalLM"),WOt.forEach(t),L9r=r(BVe," (RoFormer model)"),BVe.forEach(t),y9r=i(Ce),K3=n(Ce,"LI",{});var IVe=s(K3);s5e=n(IVe,"STRONG",{});var QOt=s(s5e);x9r=r(QOt,"transfo-xl"),QOt.forEach(t),$9r=r(IVe," \u2014 "),tZ=n(IVe,"A",{href:!0});var UOt=s(tZ);k9r=r(UOt,"TFTransfoXLLMHeadModel"),UOt.forEach(t),S9r=r(IVe," (Transformer-XL model)"),IVe.forEach(t),R9r=i(Ce),Z3=n(Ce,"LI",{});var NVe=s(Z3);l5e=n(NVe,"STRONG",{});var HOt=s(l5e);P9r=r(HOt,"xglm"),HOt.forEach(t),B9r=r(NVe," \u2014 "),aZ=n(NVe,"A",{href:!0});var JOt=s(aZ);I9r=r(JOt,"TFXGLMForCausalLM"),JOt.forEach(t),N9r=r(NVe," (XGLM model)"),NVe.forEach(t),q9r=i(Ce),e5=n(Ce,"LI",{});var qVe=s(e5);i5e=n(qVe,"STRONG",{});var YOt=s(i5e);j9r=r(YOt,"xlm"),YOt.forEach(t),D9r=r(qVe," \u2014 "),nZ=n(qVe,"A",{href:!0});var KOt=s(nZ);G9r=r(KOt,"TFXLMWithLMHeadModel"),KOt.forEach(t),O9r=r(qVe," (XLM model)"),qVe.forEach(t),V9r=i(Ce),o5=n(Ce,"LI",{});var jVe=s(o5);d5e=n(jVe,"STRONG",{});var ZOt=s(d5e);X9r=r(ZOt,"xlnet"),ZOt.forEach(t),z9r=r(jVe," \u2014 "),sZ=n(jVe,"A",{href:!0});var eVt=s(sZ);W9r=r(eVt,"TFXLNetLMHeadModel"),eVt.forEach(t),Q9r=r(jVe," (XLNet model)"),jVe.forEach(t),Ce.forEach(t),U9r=i(Ql),T(r5.$$.fragment,Ql),Ql.forEach(t),Wl.forEach(t),wHe=i(m),Sc=n(m,"H2",{class:!0});var NYe=s(Sc);t5=n(NYe,"A",{id:!0,class:!0,href:!0});var oVt=s(t5);c5e=n(oVt,"SPAN",{});var rVt=s(c5e);T(w$.$$.fragment,rVt),rVt.forEach(t),oVt.forEach(t),H9r=i(NYe),m5e=n(NYe,"SPAN",{});var tVt=s(m5e);J9r=r(tVt,"TFAutoModelForImageClassification"),tVt.forEach(t),NYe.forEach(t),AHe=i(m),lr=n(m,"DIV",{class:!0});var Ul=s(lr);T(A$.$$.fragment,Ul),Y9r=i(Ul),Rc=n(Ul,"P",{});var ese=s(Rc);K9r=r(ese,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),lZ=n(ese,"A",{href:!0});var aVt=s(lZ);Z9r=r(aVt,"from_pretrained()"),aVt.forEach(t),exr=r(ese," class method or the "),iZ=n(ese,"A",{href:!0});var nVt=s(iZ);oxr=r(nVt,"from_config()"),nVt.forEach(t),rxr=r(ese,` class
method.`),ese.forEach(t),txr=i(Ul),L$=n(Ul,"P",{});var qYe=s(L$);axr=r(qYe,"This class cannot be instantiated directly using "),f5e=n(qYe,"CODE",{});var sVt=s(f5e);nxr=r(sVt,"__init__()"),sVt.forEach(t),sxr=r(qYe," (throws an error)."),qYe.forEach(t),lxr=i(Ul),Gt=n(Ul,"DIV",{class:!0});var Ty=s(Gt);T(y$.$$.fragment,Ty),ixr=i(Ty),g5e=n(Ty,"P",{});var lVt=s(g5e);dxr=r(lVt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),lVt.forEach(t),cxr=i(Ty),Pc=n(Ty,"P",{});var ose=s(Pc);mxr=r(ose,`Note:
Loading a model from its configuration file does `),h5e=n(ose,"STRONG",{});var iVt=s(h5e);fxr=r(iVt,"not"),iVt.forEach(t),gxr=r(ose,` load the model weights. It only affects the
model\u2019s configuration. Use `),dZ=n(ose,"A",{href:!0});var dVt=s(dZ);hxr=r(dVt,"from_pretrained()"),dVt.forEach(t),uxr=r(ose," to load the model weights."),ose.forEach(t),pxr=i(Ty),T(a5.$$.fragment,Ty),Ty.forEach(t),_xr=i(Ul),Ir=n(Ul,"DIV",{class:!0});var Hl=s(Ir);T(x$.$$.fragment,Hl),bxr=i(Hl),u5e=n(Hl,"P",{});var cVt=s(u5e);vxr=r(cVt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),cVt.forEach(t),Fxr=i(Hl),vn=n(Hl,"P",{});var My=s(vn);Txr=r(My,"The model class to instantiate is selected based on the "),p5e=n(My,"CODE",{});var mVt=s(p5e);Mxr=r(mVt,"model_type"),mVt.forEach(t),Exr=r(My,` property of the config object (either
passed as an argument or loaded from `),_5e=n(My,"CODE",{});var fVt=s(_5e);Cxr=r(fVt,"pretrained_model_name_or_path"),fVt.forEach(t),wxr=r(My,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b5e=n(My,"CODE",{});var gVt=s(b5e);Axr=r(gVt,"pretrained_model_name_or_path"),gVt.forEach(t),Lxr=r(My,":"),My.forEach(t),yxr=i(Hl),Ve=n(Hl,"UL",{});var Eo=s(Ve);n5=n(Eo,"LI",{});var DVe=s(n5);v5e=n(DVe,"STRONG",{});var hVt=s(v5e);xxr=r(hVt,"convnext"),hVt.forEach(t),$xr=r(DVe," \u2014 "),cZ=n(DVe,"A",{href:!0});var uVt=s(cZ);kxr=r(uVt,"TFConvNextForImageClassification"),uVt.forEach(t),Sxr=r(DVe," (ConvNeXT model)"),DVe.forEach(t),Rxr=i(Eo),s5=n(Eo,"LI",{});var GVe=s(s5);F5e=n(GVe,"STRONG",{});var pVt=s(F5e);Pxr=r(pVt,"data2vec-vision"),pVt.forEach(t),Bxr=r(GVe," \u2014 "),mZ=n(GVe,"A",{href:!0});var _Vt=s(mZ);Ixr=r(_Vt,"TFData2VecVisionForImageClassification"),_Vt.forEach(t),Nxr=r(GVe," (Data2VecVision model)"),GVe.forEach(t),qxr=i(Eo),dl=n(Eo,"LI",{});var iP=s(dl);T5e=n(iP,"STRONG",{});var bVt=s(T5e);jxr=r(bVt,"deit"),bVt.forEach(t),Dxr=r(iP," \u2014 "),fZ=n(iP,"A",{href:!0});var vVt=s(fZ);Gxr=r(vVt,"TFDeiTForImageClassification"),vVt.forEach(t),Oxr=r(iP," or "),gZ=n(iP,"A",{href:!0});var FVt=s(gZ);Vxr=r(FVt,"TFDeiTForImageClassificationWithTeacher"),FVt.forEach(t),Xxr=r(iP," (DeiT model)"),iP.forEach(t),zxr=i(Eo),l5=n(Eo,"LI",{});var OVe=s(l5);M5e=n(OVe,"STRONG",{});var TVt=s(M5e);Wxr=r(TVt,"regnet"),TVt.forEach(t),Qxr=r(OVe," \u2014 "),hZ=n(OVe,"A",{href:!0});var MVt=s(hZ);Uxr=r(MVt,"TFRegNetForImageClassification"),MVt.forEach(t),Hxr=r(OVe," (RegNet model)"),OVe.forEach(t),Jxr=i(Eo),i5=n(Eo,"LI",{});var VVe=s(i5);E5e=n(VVe,"STRONG",{});var EVt=s(E5e);Yxr=r(EVt,"resnet"),EVt.forEach(t),Kxr=r(VVe," \u2014 "),uZ=n(VVe,"A",{href:!0});var CVt=s(uZ);Zxr=r(CVt,"TFResNetForImageClassification"),CVt.forEach(t),e$r=r(VVe," (ResNet model)"),VVe.forEach(t),o$r=i(Eo),d5=n(Eo,"LI",{});var XVe=s(d5);C5e=n(XVe,"STRONG",{});var wVt=s(C5e);r$r=r(wVt,"segformer"),wVt.forEach(t),t$r=r(XVe," \u2014 "),pZ=n(XVe,"A",{href:!0});var AVt=s(pZ);a$r=r(AVt,"TFSegformerForImageClassification"),AVt.forEach(t),n$r=r(XVe," (SegFormer model)"),XVe.forEach(t),s$r=i(Eo),c5=n(Eo,"LI",{});var zVe=s(c5);w5e=n(zVe,"STRONG",{});var LVt=s(w5e);l$r=r(LVt,"swin"),LVt.forEach(t),i$r=r(zVe," \u2014 "),_Z=n(zVe,"A",{href:!0});var yVt=s(_Z);d$r=r(yVt,"TFSwinForImageClassification"),yVt.forEach(t),c$r=r(zVe," (Swin Transformer model)"),zVe.forEach(t),m$r=i(Eo),m5=n(Eo,"LI",{});var WVe=s(m5);A5e=n(WVe,"STRONG",{});var xVt=s(A5e);f$r=r(xVt,"vit"),xVt.forEach(t),g$r=r(WVe," \u2014 "),bZ=n(WVe,"A",{href:!0});var $Vt=s(bZ);h$r=r($Vt,"TFViTForImageClassification"),$Vt.forEach(t),u$r=r(WVe," (ViT model)"),WVe.forEach(t),Eo.forEach(t),p$r=i(Hl),T(f5.$$.fragment,Hl),Hl.forEach(t),Ul.forEach(t),LHe=i(m),Bc=n(m,"H2",{class:!0});var jYe=s(Bc);g5=n(jYe,"A",{id:!0,class:!0,href:!0});var kVt=s(g5);L5e=n(kVt,"SPAN",{});var SVt=s(L5e);T($$.$$.fragment,SVt),SVt.forEach(t),kVt.forEach(t),_$r=i(jYe),y5e=n(jYe,"SPAN",{});var RVt=s(y5e);b$r=r(RVt,"TFAutoModelForSemanticSegmentation"),RVt.forEach(t),jYe.forEach(t),yHe=i(m),ir=n(m,"DIV",{class:!0});var Jl=s(ir);T(k$.$$.fragment,Jl),v$r=i(Jl),Ic=n(Jl,"P",{});var rse=s(Ic);F$r=r(rse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),vZ=n(rse,"A",{href:!0});var PVt=s(vZ);T$r=r(PVt,"from_pretrained()"),PVt.forEach(t),M$r=r(rse," class method or the "),FZ=n(rse,"A",{href:!0});var BVt=s(FZ);E$r=r(BVt,"from_config()"),BVt.forEach(t),C$r=r(rse,` class
method.`),rse.forEach(t),w$r=i(Jl),S$=n(Jl,"P",{});var DYe=s(S$);A$r=r(DYe,"This class cannot be instantiated directly using "),x5e=n(DYe,"CODE",{});var IVt=s(x5e);L$r=r(IVt,"__init__()"),IVt.forEach(t),y$r=r(DYe," (throws an error)."),DYe.forEach(t),x$r=i(Jl),Ot=n(Jl,"DIV",{class:!0});var Ey=s(Ot);T(R$.$$.fragment,Ey),$$r=i(Ey),$5e=n(Ey,"P",{});var NVt=s($5e);k$r=r(NVt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),NVt.forEach(t),S$r=i(Ey),Nc=n(Ey,"P",{});var tse=s(Nc);R$r=r(tse,`Note:
Loading a model from its configuration file does `),k5e=n(tse,"STRONG",{});var qVt=s(k5e);P$r=r(qVt,"not"),qVt.forEach(t),B$r=r(tse,` load the model weights. It only affects the
model\u2019s configuration. Use `),TZ=n(tse,"A",{href:!0});var jVt=s(TZ);I$r=r(jVt,"from_pretrained()"),jVt.forEach(t),N$r=r(tse," to load the model weights."),tse.forEach(t),q$r=i(Ey),T(h5.$$.fragment,Ey),Ey.forEach(t),j$r=i(Jl),Nr=n(Jl,"DIV",{class:!0});var Yl=s(Nr);T(P$.$$.fragment,Yl),D$r=i(Yl),S5e=n(Yl,"P",{});var DVt=s(S5e);G$r=r(DVt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),DVt.forEach(t),O$r=i(Yl),Fn=n(Yl,"P",{});var Cy=s(Fn);V$r=r(Cy,"The model class to instantiate is selected based on the "),R5e=n(Cy,"CODE",{});var GVt=s(R5e);X$r=r(GVt,"model_type"),GVt.forEach(t),z$r=r(Cy,` property of the config object (either
passed as an argument or loaded from `),P5e=n(Cy,"CODE",{});var OVt=s(P5e);W$r=r(OVt,"pretrained_model_name_or_path"),OVt.forEach(t),Q$r=r(Cy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B5e=n(Cy,"CODE",{});var VVt=s(B5e);U$r=r(VVt,"pretrained_model_name_or_path"),VVt.forEach(t),H$r=r(Cy,":"),Cy.forEach(t),J$r=i(Yl),B$=n(Yl,"UL",{});var GYe=s(B$);u5=n(GYe,"LI",{});var QVe=s(u5);I5e=n(QVe,"STRONG",{});var XVt=s(I5e);Y$r=r(XVt,"data2vec-vision"),XVt.forEach(t),K$r=r(QVe," \u2014 "),MZ=n(QVe,"A",{href:!0});var zVt=s(MZ);Z$r=r(zVt,"TFData2VecVisionForSemanticSegmentation"),zVt.forEach(t),ekr=r(QVe," (Data2VecVision model)"),QVe.forEach(t),okr=i(GYe),p5=n(GYe,"LI",{});var UVe=s(p5);N5e=n(UVe,"STRONG",{});var WVt=s(N5e);rkr=r(WVt,"segformer"),WVt.forEach(t),tkr=r(UVe," \u2014 "),EZ=n(UVe,"A",{href:!0});var QVt=s(EZ);akr=r(QVt,"TFSegformerForSemanticSegmentation"),QVt.forEach(t),nkr=r(UVe," (SegFormer model)"),UVe.forEach(t),GYe.forEach(t),skr=i(Yl),T(_5.$$.fragment,Yl),Yl.forEach(t),Jl.forEach(t),xHe=i(m),qc=n(m,"H2",{class:!0});var OYe=s(qc);b5=n(OYe,"A",{id:!0,class:!0,href:!0});var UVt=s(b5);q5e=n(UVt,"SPAN",{});var HVt=s(q5e);T(I$.$$.fragment,HVt),HVt.forEach(t),UVt.forEach(t),lkr=i(OYe),j5e=n(OYe,"SPAN",{});var JVt=s(j5e);ikr=r(JVt,"TFAutoModelForMaskedLM"),JVt.forEach(t),OYe.forEach(t),$He=i(m),dr=n(m,"DIV",{class:!0});var Kl=s(dr);T(N$.$$.fragment,Kl),dkr=i(Kl),jc=n(Kl,"P",{});var ase=s(jc);ckr=r(ase,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),CZ=n(ase,"A",{href:!0});var YVt=s(CZ);mkr=r(YVt,"from_pretrained()"),YVt.forEach(t),fkr=r(ase," class method or the "),wZ=n(ase,"A",{href:!0});var KVt=s(wZ);gkr=r(KVt,"from_config()"),KVt.forEach(t),hkr=r(ase,` class
method.`),ase.forEach(t),ukr=i(Kl),q$=n(Kl,"P",{});var VYe=s(q$);pkr=r(VYe,"This class cannot be instantiated directly using "),D5e=n(VYe,"CODE",{});var ZVt=s(D5e);_kr=r(ZVt,"__init__()"),ZVt.forEach(t),bkr=r(VYe," (throws an error)."),VYe.forEach(t),vkr=i(Kl),Vt=n(Kl,"DIV",{class:!0});var wy=s(Vt);T(j$.$$.fragment,wy),Fkr=i(wy),G5e=n(wy,"P",{});var eXt=s(G5e);Tkr=r(eXt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),eXt.forEach(t),Mkr=i(wy),Dc=n(wy,"P",{});var nse=s(Dc);Ekr=r(nse,`Note:
Loading a model from its configuration file does `),O5e=n(nse,"STRONG",{});var oXt=s(O5e);Ckr=r(oXt,"not"),oXt.forEach(t),wkr=r(nse,` load the model weights. It only affects the
model\u2019s configuration. Use `),AZ=n(nse,"A",{href:!0});var rXt=s(AZ);Akr=r(rXt,"from_pretrained()"),rXt.forEach(t),Lkr=r(nse," to load the model weights."),nse.forEach(t),ykr=i(wy),T(v5.$$.fragment,wy),wy.forEach(t),xkr=i(Kl),qr=n(Kl,"DIV",{class:!0});var Zl=s(qr);T(D$.$$.fragment,Zl),$kr=i(Zl),V5e=n(Zl,"P",{});var tXt=s(V5e);kkr=r(tXt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),tXt.forEach(t),Skr=i(Zl),Tn=n(Zl,"P",{});var Ay=s(Tn);Rkr=r(Ay,"The model class to instantiate is selected based on the "),X5e=n(Ay,"CODE",{});var aXt=s(X5e);Pkr=r(aXt,"model_type"),aXt.forEach(t),Bkr=r(Ay,` property of the config object (either
passed as an argument or loaded from `),z5e=n(Ay,"CODE",{});var nXt=s(z5e);Ikr=r(nXt,"pretrained_model_name_or_path"),nXt.forEach(t),Nkr=r(Ay,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W5e=n(Ay,"CODE",{});var sXt=s(W5e);qkr=r(sXt,"pretrained_model_name_or_path"),sXt.forEach(t),jkr=r(Ay,":"),Ay.forEach(t),Dkr=i(Zl),me=n(Zl,"UL",{});var pe=s(me);F5=n(pe,"LI",{});var HVe=s(F5);Q5e=n(HVe,"STRONG",{});var lXt=s(Q5e);Gkr=r(lXt,"albert"),lXt.forEach(t),Okr=r(HVe," \u2014 "),LZ=n(HVe,"A",{href:!0});var iXt=s(LZ);Vkr=r(iXt,"TFAlbertForMaskedLM"),iXt.forEach(t),Xkr=r(HVe," (ALBERT model)"),HVe.forEach(t),zkr=i(pe),T5=n(pe,"LI",{});var JVe=s(T5);U5e=n(JVe,"STRONG",{});var dXt=s(U5e);Wkr=r(dXt,"bert"),dXt.forEach(t),Qkr=r(JVe," \u2014 "),yZ=n(JVe,"A",{href:!0});var cXt=s(yZ);Ukr=r(cXt,"TFBertForMaskedLM"),cXt.forEach(t),Hkr=r(JVe," (BERT model)"),JVe.forEach(t),Jkr=i(pe),M5=n(pe,"LI",{});var YVe=s(M5);H5e=n(YVe,"STRONG",{});var mXt=s(H5e);Ykr=r(mXt,"camembert"),mXt.forEach(t),Kkr=r(YVe," \u2014 "),xZ=n(YVe,"A",{href:!0});var fXt=s(xZ);Zkr=r(fXt,"TFCamembertForMaskedLM"),fXt.forEach(t),eSr=r(YVe," (CamemBERT model)"),YVe.forEach(t),oSr=i(pe),E5=n(pe,"LI",{});var KVe=s(E5);J5e=n(KVe,"STRONG",{});var gXt=s(J5e);rSr=r(gXt,"convbert"),gXt.forEach(t),tSr=r(KVe," \u2014 "),$Z=n(KVe,"A",{href:!0});var hXt=s($Z);aSr=r(hXt,"TFConvBertForMaskedLM"),hXt.forEach(t),nSr=r(KVe," (ConvBERT model)"),KVe.forEach(t),sSr=i(pe),C5=n(pe,"LI",{});var ZVe=s(C5);Y5e=n(ZVe,"STRONG",{});var uXt=s(Y5e);lSr=r(uXt,"deberta"),uXt.forEach(t),iSr=r(ZVe," \u2014 "),kZ=n(ZVe,"A",{href:!0});var pXt=s(kZ);dSr=r(pXt,"TFDebertaForMaskedLM"),pXt.forEach(t),cSr=r(ZVe," (DeBERTa model)"),ZVe.forEach(t),mSr=i(pe),w5=n(pe,"LI",{});var eXe=s(w5);K5e=n(eXe,"STRONG",{});var _Xt=s(K5e);fSr=r(_Xt,"deberta-v2"),_Xt.forEach(t),gSr=r(eXe," \u2014 "),SZ=n(eXe,"A",{href:!0});var bXt=s(SZ);hSr=r(bXt,"TFDebertaV2ForMaskedLM"),bXt.forEach(t),uSr=r(eXe," (DeBERTa-v2 model)"),eXe.forEach(t),pSr=i(pe),A5=n(pe,"LI",{});var oXe=s(A5);Z5e=n(oXe,"STRONG",{});var vXt=s(Z5e);_Sr=r(vXt,"distilbert"),vXt.forEach(t),bSr=r(oXe," \u2014 "),RZ=n(oXe,"A",{href:!0});var FXt=s(RZ);vSr=r(FXt,"TFDistilBertForMaskedLM"),FXt.forEach(t),FSr=r(oXe," (DistilBERT model)"),oXe.forEach(t),TSr=i(pe),L5=n(pe,"LI",{});var rXe=s(L5);e0e=n(rXe,"STRONG",{});var TXt=s(e0e);MSr=r(TXt,"electra"),TXt.forEach(t),ESr=r(rXe," \u2014 "),PZ=n(rXe,"A",{href:!0});var MXt=s(PZ);CSr=r(MXt,"TFElectraForMaskedLM"),MXt.forEach(t),wSr=r(rXe," (ELECTRA model)"),rXe.forEach(t),ASr=i(pe),y5=n(pe,"LI",{});var tXe=s(y5);o0e=n(tXe,"STRONG",{});var EXt=s(o0e);LSr=r(EXt,"flaubert"),EXt.forEach(t),ySr=r(tXe," \u2014 "),BZ=n(tXe,"A",{href:!0});var CXt=s(BZ);xSr=r(CXt,"TFFlaubertWithLMHeadModel"),CXt.forEach(t),$Sr=r(tXe," (FlauBERT model)"),tXe.forEach(t),kSr=i(pe),x5=n(pe,"LI",{});var aXe=s(x5);r0e=n(aXe,"STRONG",{});var wXt=s(r0e);SSr=r(wXt,"funnel"),wXt.forEach(t),RSr=r(aXe," \u2014 "),IZ=n(aXe,"A",{href:!0});var AXt=s(IZ);PSr=r(AXt,"TFFunnelForMaskedLM"),AXt.forEach(t),BSr=r(aXe," (Funnel Transformer model)"),aXe.forEach(t),ISr=i(pe),$5=n(pe,"LI",{});var nXe=s($5);t0e=n(nXe,"STRONG",{});var LXt=s(t0e);NSr=r(LXt,"layoutlm"),LXt.forEach(t),qSr=r(nXe," \u2014 "),NZ=n(nXe,"A",{href:!0});var yXt=s(NZ);jSr=r(yXt,"TFLayoutLMForMaskedLM"),yXt.forEach(t),DSr=r(nXe," (LayoutLM model)"),nXe.forEach(t),GSr=i(pe),k5=n(pe,"LI",{});var sXe=s(k5);a0e=n(sXe,"STRONG",{});var xXt=s(a0e);OSr=r(xXt,"longformer"),xXt.forEach(t),VSr=r(sXe," \u2014 "),qZ=n(sXe,"A",{href:!0});var $Xt=s(qZ);XSr=r($Xt,"TFLongformerForMaskedLM"),$Xt.forEach(t),zSr=r(sXe," (Longformer model)"),sXe.forEach(t),WSr=i(pe),S5=n(pe,"LI",{});var lXe=s(S5);n0e=n(lXe,"STRONG",{});var kXt=s(n0e);QSr=r(kXt,"mobilebert"),kXt.forEach(t),USr=r(lXe," \u2014 "),jZ=n(lXe,"A",{href:!0});var SXt=s(jZ);HSr=r(SXt,"TFMobileBertForMaskedLM"),SXt.forEach(t),JSr=r(lXe," (MobileBERT model)"),lXe.forEach(t),YSr=i(pe),R5=n(pe,"LI",{});var iXe=s(R5);s0e=n(iXe,"STRONG",{});var RXt=s(s0e);KSr=r(RXt,"mpnet"),RXt.forEach(t),ZSr=r(iXe," \u2014 "),DZ=n(iXe,"A",{href:!0});var PXt=s(DZ);eRr=r(PXt,"TFMPNetForMaskedLM"),PXt.forEach(t),oRr=r(iXe," (MPNet model)"),iXe.forEach(t),rRr=i(pe),P5=n(pe,"LI",{});var dXe=s(P5);l0e=n(dXe,"STRONG",{});var BXt=s(l0e);tRr=r(BXt,"rembert"),BXt.forEach(t),aRr=r(dXe," \u2014 "),GZ=n(dXe,"A",{href:!0});var IXt=s(GZ);nRr=r(IXt,"TFRemBertForMaskedLM"),IXt.forEach(t),sRr=r(dXe," (RemBERT model)"),dXe.forEach(t),lRr=i(pe),B5=n(pe,"LI",{});var cXe=s(B5);i0e=n(cXe,"STRONG",{});var NXt=s(i0e);iRr=r(NXt,"roberta"),NXt.forEach(t),dRr=r(cXe," \u2014 "),OZ=n(cXe,"A",{href:!0});var qXt=s(OZ);cRr=r(qXt,"TFRobertaForMaskedLM"),qXt.forEach(t),mRr=r(cXe," (RoBERTa model)"),cXe.forEach(t),fRr=i(pe),I5=n(pe,"LI",{});var mXe=s(I5);d0e=n(mXe,"STRONG",{});var jXt=s(d0e);gRr=r(jXt,"roformer"),jXt.forEach(t),hRr=r(mXe," \u2014 "),VZ=n(mXe,"A",{href:!0});var DXt=s(VZ);uRr=r(DXt,"TFRoFormerForMaskedLM"),DXt.forEach(t),pRr=r(mXe," (RoFormer model)"),mXe.forEach(t),_Rr=i(pe),N5=n(pe,"LI",{});var fXe=s(N5);c0e=n(fXe,"STRONG",{});var GXt=s(c0e);bRr=r(GXt,"tapas"),GXt.forEach(t),vRr=r(fXe," \u2014 "),XZ=n(fXe,"A",{href:!0});var OXt=s(XZ);FRr=r(OXt,"TFTapasForMaskedLM"),OXt.forEach(t),TRr=r(fXe," (TAPAS model)"),fXe.forEach(t),MRr=i(pe),q5=n(pe,"LI",{});var gXe=s(q5);m0e=n(gXe,"STRONG",{});var VXt=s(m0e);ERr=r(VXt,"xlm"),VXt.forEach(t),CRr=r(gXe," \u2014 "),zZ=n(gXe,"A",{href:!0});var XXt=s(zZ);wRr=r(XXt,"TFXLMWithLMHeadModel"),XXt.forEach(t),ARr=r(gXe," (XLM model)"),gXe.forEach(t),LRr=i(pe),j5=n(pe,"LI",{});var hXe=s(j5);f0e=n(hXe,"STRONG",{});var zXt=s(f0e);yRr=r(zXt,"xlm-roberta"),zXt.forEach(t),xRr=r(hXe," \u2014 "),WZ=n(hXe,"A",{href:!0});var WXt=s(WZ);$Rr=r(WXt,"TFXLMRobertaForMaskedLM"),WXt.forEach(t),kRr=r(hXe," (XLM-RoBERTa model)"),hXe.forEach(t),pe.forEach(t),SRr=i(Zl),T(D5.$$.fragment,Zl),Zl.forEach(t),Kl.forEach(t),kHe=i(m),Gc=n(m,"H2",{class:!0});var XYe=s(Gc);G5=n(XYe,"A",{id:!0,class:!0,href:!0});var QXt=s(G5);g0e=n(QXt,"SPAN",{});var UXt=s(g0e);T(G$.$$.fragment,UXt),UXt.forEach(t),QXt.forEach(t),RRr=i(XYe),h0e=n(XYe,"SPAN",{});var HXt=s(h0e);PRr=r(HXt,"TFAutoModelForSeq2SeqLM"),HXt.forEach(t),XYe.forEach(t),SHe=i(m),cr=n(m,"DIV",{class:!0});var ei=s(cr);T(O$.$$.fragment,ei),BRr=i(ei),Oc=n(ei,"P",{});var sse=s(Oc);IRr=r(sse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),QZ=n(sse,"A",{href:!0});var JXt=s(QZ);NRr=r(JXt,"from_pretrained()"),JXt.forEach(t),qRr=r(sse," class method or the "),UZ=n(sse,"A",{href:!0});var YXt=s(UZ);jRr=r(YXt,"from_config()"),YXt.forEach(t),DRr=r(sse,` class
method.`),sse.forEach(t),GRr=i(ei),V$=n(ei,"P",{});var zYe=s(V$);ORr=r(zYe,"This class cannot be instantiated directly using "),u0e=n(zYe,"CODE",{});var KXt=s(u0e);VRr=r(KXt,"__init__()"),KXt.forEach(t),XRr=r(zYe," (throws an error)."),zYe.forEach(t),zRr=i(ei),Xt=n(ei,"DIV",{class:!0});var Ly=s(Xt);T(X$.$$.fragment,Ly),WRr=i(Ly),p0e=n(Ly,"P",{});var ZXt=s(p0e);QRr=r(ZXt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),ZXt.forEach(t),URr=i(Ly),Vc=n(Ly,"P",{});var lse=s(Vc);HRr=r(lse,`Note:
Loading a model from its configuration file does `),_0e=n(lse,"STRONG",{});var ezt=s(_0e);JRr=r(ezt,"not"),ezt.forEach(t),YRr=r(lse,` load the model weights. It only affects the
model\u2019s configuration. Use `),HZ=n(lse,"A",{href:!0});var ozt=s(HZ);KRr=r(ozt,"from_pretrained()"),ozt.forEach(t),ZRr=r(lse," to load the model weights."),lse.forEach(t),ePr=i(Ly),T(O5.$$.fragment,Ly),Ly.forEach(t),oPr=i(ei),jr=n(ei,"DIV",{class:!0});var oi=s(jr);T(z$.$$.fragment,oi),rPr=i(oi),b0e=n(oi,"P",{});var rzt=s(b0e);tPr=r(rzt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),rzt.forEach(t),aPr=i(oi),Mn=n(oi,"P",{});var yy=s(Mn);nPr=r(yy,"The model class to instantiate is selected based on the "),v0e=n(yy,"CODE",{});var tzt=s(v0e);sPr=r(tzt,"model_type"),tzt.forEach(t),lPr=r(yy,` property of the config object (either
passed as an argument or loaded from `),F0e=n(yy,"CODE",{});var azt=s(F0e);iPr=r(azt,"pretrained_model_name_or_path"),azt.forEach(t),dPr=r(yy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T0e=n(yy,"CODE",{});var nzt=s(T0e);cPr=r(nzt,"pretrained_model_name_or_path"),nzt.forEach(t),mPr=r(yy,":"),yy.forEach(t),fPr=i(oi),ye=n(oi,"UL",{});var Ie=s(ye);V5=n(Ie,"LI",{});var uXe=s(V5);M0e=n(uXe,"STRONG",{});var szt=s(M0e);gPr=r(szt,"bart"),szt.forEach(t),hPr=r(uXe," \u2014 "),JZ=n(uXe,"A",{href:!0});var lzt=s(JZ);uPr=r(lzt,"TFBartForConditionalGeneration"),lzt.forEach(t),pPr=r(uXe," (BART model)"),uXe.forEach(t),_Pr=i(Ie),X5=n(Ie,"LI",{});var pXe=s(X5);E0e=n(pXe,"STRONG",{});var izt=s(E0e);bPr=r(izt,"blenderbot"),izt.forEach(t),vPr=r(pXe," \u2014 "),YZ=n(pXe,"A",{href:!0});var dzt=s(YZ);FPr=r(dzt,"TFBlenderbotForConditionalGeneration"),dzt.forEach(t),TPr=r(pXe," (Blenderbot model)"),pXe.forEach(t),MPr=i(Ie),z5=n(Ie,"LI",{});var _Xe=s(z5);C0e=n(_Xe,"STRONG",{});var czt=s(C0e);EPr=r(czt,"blenderbot-small"),czt.forEach(t),CPr=r(_Xe," \u2014 "),KZ=n(_Xe,"A",{href:!0});var mzt=s(KZ);wPr=r(mzt,"TFBlenderbotSmallForConditionalGeneration"),mzt.forEach(t),APr=r(_Xe," (BlenderbotSmall model)"),_Xe.forEach(t),LPr=i(Ie),W5=n(Ie,"LI",{});var bXe=s(W5);w0e=n(bXe,"STRONG",{});var fzt=s(w0e);yPr=r(fzt,"encoder-decoder"),fzt.forEach(t),xPr=r(bXe," \u2014 "),ZZ=n(bXe,"A",{href:!0});var gzt=s(ZZ);$Pr=r(gzt,"TFEncoderDecoderModel"),gzt.forEach(t),kPr=r(bXe," (Encoder decoder model)"),bXe.forEach(t),SPr=i(Ie),Q5=n(Ie,"LI",{});var vXe=s(Q5);A0e=n(vXe,"STRONG",{});var hzt=s(A0e);RPr=r(hzt,"led"),hzt.forEach(t),PPr=r(vXe," \u2014 "),eee=n(vXe,"A",{href:!0});var uzt=s(eee);BPr=r(uzt,"TFLEDForConditionalGeneration"),uzt.forEach(t),IPr=r(vXe," (LED model)"),vXe.forEach(t),NPr=i(Ie),U5=n(Ie,"LI",{});var FXe=s(U5);L0e=n(FXe,"STRONG",{});var pzt=s(L0e);qPr=r(pzt,"marian"),pzt.forEach(t),jPr=r(FXe," \u2014 "),oee=n(FXe,"A",{href:!0});var _zt=s(oee);DPr=r(_zt,"TFMarianMTModel"),_zt.forEach(t),GPr=r(FXe," (Marian model)"),FXe.forEach(t),OPr=i(Ie),H5=n(Ie,"LI",{});var TXe=s(H5);y0e=n(TXe,"STRONG",{});var bzt=s(y0e);VPr=r(bzt,"mbart"),bzt.forEach(t),XPr=r(TXe," \u2014 "),ree=n(TXe,"A",{href:!0});var vzt=s(ree);zPr=r(vzt,"TFMBartForConditionalGeneration"),vzt.forEach(t),WPr=r(TXe," (mBART model)"),TXe.forEach(t),QPr=i(Ie),J5=n(Ie,"LI",{});var MXe=s(J5);x0e=n(MXe,"STRONG",{});var Fzt=s(x0e);UPr=r(Fzt,"mt5"),Fzt.forEach(t),HPr=r(MXe," \u2014 "),tee=n(MXe,"A",{href:!0});var Tzt=s(tee);JPr=r(Tzt,"TFMT5ForConditionalGeneration"),Tzt.forEach(t),YPr=r(MXe," (MT5 model)"),MXe.forEach(t),KPr=i(Ie),Y5=n(Ie,"LI",{});var EXe=s(Y5);$0e=n(EXe,"STRONG",{});var Mzt=s($0e);ZPr=r(Mzt,"pegasus"),Mzt.forEach(t),eBr=r(EXe," \u2014 "),aee=n(EXe,"A",{href:!0});var Ezt=s(aee);oBr=r(Ezt,"TFPegasusForConditionalGeneration"),Ezt.forEach(t),rBr=r(EXe," (Pegasus model)"),EXe.forEach(t),tBr=i(Ie),K5=n(Ie,"LI",{});var CXe=s(K5);k0e=n(CXe,"STRONG",{});var Czt=s(k0e);aBr=r(Czt,"t5"),Czt.forEach(t),nBr=r(CXe," \u2014 "),nee=n(CXe,"A",{href:!0});var wzt=s(nee);sBr=r(wzt,"TFT5ForConditionalGeneration"),wzt.forEach(t),lBr=r(CXe," (T5 model)"),CXe.forEach(t),Ie.forEach(t),iBr=i(oi),T(Z5.$$.fragment,oi),oi.forEach(t),ei.forEach(t),RHe=i(m),Xc=n(m,"H2",{class:!0});var WYe=s(Xc);e0=n(WYe,"A",{id:!0,class:!0,href:!0});var Azt=s(e0);S0e=n(Azt,"SPAN",{});var Lzt=s(S0e);T(W$.$$.fragment,Lzt),Lzt.forEach(t),Azt.forEach(t),dBr=i(WYe),R0e=n(WYe,"SPAN",{});var yzt=s(R0e);cBr=r(yzt,"TFAutoModelForSequenceClassification"),yzt.forEach(t),WYe.forEach(t),PHe=i(m),mr=n(m,"DIV",{class:!0});var ri=s(mr);T(Q$.$$.fragment,ri),mBr=i(ri),zc=n(ri,"P",{});var ise=s(zc);fBr=r(ise,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),see=n(ise,"A",{href:!0});var xzt=s(see);gBr=r(xzt,"from_pretrained()"),xzt.forEach(t),hBr=r(ise," class method or the "),lee=n(ise,"A",{href:!0});var $zt=s(lee);uBr=r($zt,"from_config()"),$zt.forEach(t),pBr=r(ise,` class
method.`),ise.forEach(t),_Br=i(ri),U$=n(ri,"P",{});var QYe=s(U$);bBr=r(QYe,"This class cannot be instantiated directly using "),P0e=n(QYe,"CODE",{});var kzt=s(P0e);vBr=r(kzt,"__init__()"),kzt.forEach(t),FBr=r(QYe," (throws an error)."),QYe.forEach(t),TBr=i(ri),zt=n(ri,"DIV",{class:!0});var xy=s(zt);T(H$.$$.fragment,xy),MBr=i(xy),B0e=n(xy,"P",{});var Szt=s(B0e);EBr=r(Szt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Szt.forEach(t),CBr=i(xy),Wc=n(xy,"P",{});var dse=s(Wc);wBr=r(dse,`Note:
Loading a model from its configuration file does `),I0e=n(dse,"STRONG",{});var Rzt=s(I0e);ABr=r(Rzt,"not"),Rzt.forEach(t),LBr=r(dse,` load the model weights. It only affects the
model\u2019s configuration. Use `),iee=n(dse,"A",{href:!0});var Pzt=s(iee);yBr=r(Pzt,"from_pretrained()"),Pzt.forEach(t),xBr=r(dse," to load the model weights."),dse.forEach(t),$Br=i(xy),T(o0.$$.fragment,xy),xy.forEach(t),kBr=i(ri),Dr=n(ri,"DIV",{class:!0});var ti=s(Dr);T(J$.$$.fragment,ti),SBr=i(ti),N0e=n(ti,"P",{});var Bzt=s(N0e);RBr=r(Bzt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Bzt.forEach(t),PBr=i(ti),En=n(ti,"P",{});var $y=s(En);BBr=r($y,"The model class to instantiate is selected based on the "),q0e=n($y,"CODE",{});var Izt=s(q0e);IBr=r(Izt,"model_type"),Izt.forEach(t),NBr=r($y,` property of the config object (either
passed as an argument or loaded from `),j0e=n($y,"CODE",{});var Nzt=s(j0e);qBr=r(Nzt,"pretrained_model_name_or_path"),Nzt.forEach(t),jBr=r($y,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),D0e=n($y,"CODE",{});var qzt=s(D0e);DBr=r(qzt,"pretrained_model_name_or_path"),qzt.forEach(t),GBr=r($y,":"),$y.forEach(t),OBr=i(ti),re=n(ti,"UL",{});var ae=s(re);r0=n(ae,"LI",{});var wXe=s(r0);G0e=n(wXe,"STRONG",{});var jzt=s(G0e);VBr=r(jzt,"albert"),jzt.forEach(t),XBr=r(wXe," \u2014 "),dee=n(wXe,"A",{href:!0});var Dzt=s(dee);zBr=r(Dzt,"TFAlbertForSequenceClassification"),Dzt.forEach(t),WBr=r(wXe," (ALBERT model)"),wXe.forEach(t),QBr=i(ae),t0=n(ae,"LI",{});var AXe=s(t0);O0e=n(AXe,"STRONG",{});var Gzt=s(O0e);UBr=r(Gzt,"bert"),Gzt.forEach(t),HBr=r(AXe," \u2014 "),cee=n(AXe,"A",{href:!0});var Ozt=s(cee);JBr=r(Ozt,"TFBertForSequenceClassification"),Ozt.forEach(t),YBr=r(AXe," (BERT model)"),AXe.forEach(t),KBr=i(ae),a0=n(ae,"LI",{});var LXe=s(a0);V0e=n(LXe,"STRONG",{});var Vzt=s(V0e);ZBr=r(Vzt,"camembert"),Vzt.forEach(t),eIr=r(LXe," \u2014 "),mee=n(LXe,"A",{href:!0});var Xzt=s(mee);oIr=r(Xzt,"TFCamembertForSequenceClassification"),Xzt.forEach(t),rIr=r(LXe," (CamemBERT model)"),LXe.forEach(t),tIr=i(ae),n0=n(ae,"LI",{});var yXe=s(n0);X0e=n(yXe,"STRONG",{});var zzt=s(X0e);aIr=r(zzt,"convbert"),zzt.forEach(t),nIr=r(yXe," \u2014 "),fee=n(yXe,"A",{href:!0});var Wzt=s(fee);sIr=r(Wzt,"TFConvBertForSequenceClassification"),Wzt.forEach(t),lIr=r(yXe," (ConvBERT model)"),yXe.forEach(t),iIr=i(ae),s0=n(ae,"LI",{});var xXe=s(s0);z0e=n(xXe,"STRONG",{});var Qzt=s(z0e);dIr=r(Qzt,"ctrl"),Qzt.forEach(t),cIr=r(xXe," \u2014 "),gee=n(xXe,"A",{href:!0});var Uzt=s(gee);mIr=r(Uzt,"TFCTRLForSequenceClassification"),Uzt.forEach(t),fIr=r(xXe," (CTRL model)"),xXe.forEach(t),gIr=i(ae),l0=n(ae,"LI",{});var $Xe=s(l0);W0e=n($Xe,"STRONG",{});var Hzt=s(W0e);hIr=r(Hzt,"deberta"),Hzt.forEach(t),uIr=r($Xe," \u2014 "),hee=n($Xe,"A",{href:!0});var Jzt=s(hee);pIr=r(Jzt,"TFDebertaForSequenceClassification"),Jzt.forEach(t),_Ir=r($Xe," (DeBERTa model)"),$Xe.forEach(t),bIr=i(ae),i0=n(ae,"LI",{});var kXe=s(i0);Q0e=n(kXe,"STRONG",{});var Yzt=s(Q0e);vIr=r(Yzt,"deberta-v2"),Yzt.forEach(t),FIr=r(kXe," \u2014 "),uee=n(kXe,"A",{href:!0});var Kzt=s(uee);TIr=r(Kzt,"TFDebertaV2ForSequenceClassification"),Kzt.forEach(t),MIr=r(kXe," (DeBERTa-v2 model)"),kXe.forEach(t),EIr=i(ae),d0=n(ae,"LI",{});var SXe=s(d0);U0e=n(SXe,"STRONG",{});var Zzt=s(U0e);CIr=r(Zzt,"distilbert"),Zzt.forEach(t),wIr=r(SXe," \u2014 "),pee=n(SXe,"A",{href:!0});var eWt=s(pee);AIr=r(eWt,"TFDistilBertForSequenceClassification"),eWt.forEach(t),LIr=r(SXe," (DistilBERT model)"),SXe.forEach(t),yIr=i(ae),c0=n(ae,"LI",{});var RXe=s(c0);H0e=n(RXe,"STRONG",{});var oWt=s(H0e);xIr=r(oWt,"electra"),oWt.forEach(t),$Ir=r(RXe," \u2014 "),_ee=n(RXe,"A",{href:!0});var rWt=s(_ee);kIr=r(rWt,"TFElectraForSequenceClassification"),rWt.forEach(t),SIr=r(RXe," (ELECTRA model)"),RXe.forEach(t),RIr=i(ae),m0=n(ae,"LI",{});var PXe=s(m0);J0e=n(PXe,"STRONG",{});var tWt=s(J0e);PIr=r(tWt,"flaubert"),tWt.forEach(t),BIr=r(PXe," \u2014 "),bee=n(PXe,"A",{href:!0});var aWt=s(bee);IIr=r(aWt,"TFFlaubertForSequenceClassification"),aWt.forEach(t),NIr=r(PXe," (FlauBERT model)"),PXe.forEach(t),qIr=i(ae),f0=n(ae,"LI",{});var BXe=s(f0);Y0e=n(BXe,"STRONG",{});var nWt=s(Y0e);jIr=r(nWt,"funnel"),nWt.forEach(t),DIr=r(BXe," \u2014 "),vee=n(BXe,"A",{href:!0});var sWt=s(vee);GIr=r(sWt,"TFFunnelForSequenceClassification"),sWt.forEach(t),OIr=r(BXe," (Funnel Transformer model)"),BXe.forEach(t),VIr=i(ae),g0=n(ae,"LI",{});var IXe=s(g0);K0e=n(IXe,"STRONG",{});var lWt=s(K0e);XIr=r(lWt,"gpt2"),lWt.forEach(t),zIr=r(IXe," \u2014 "),Fee=n(IXe,"A",{href:!0});var iWt=s(Fee);WIr=r(iWt,"TFGPT2ForSequenceClassification"),iWt.forEach(t),QIr=r(IXe," (OpenAI GPT-2 model)"),IXe.forEach(t),UIr=i(ae),h0=n(ae,"LI",{});var NXe=s(h0);Z0e=n(NXe,"STRONG",{});var dWt=s(Z0e);HIr=r(dWt,"gptj"),dWt.forEach(t),JIr=r(NXe," \u2014 "),Tee=n(NXe,"A",{href:!0});var cWt=s(Tee);YIr=r(cWt,"TFGPTJForSequenceClassification"),cWt.forEach(t),KIr=r(NXe," (GPT-J model)"),NXe.forEach(t),ZIr=i(ae),u0=n(ae,"LI",{});var qXe=s(u0);ewe=n(qXe,"STRONG",{});var mWt=s(ewe);eNr=r(mWt,"layoutlm"),mWt.forEach(t),oNr=r(qXe," \u2014 "),Mee=n(qXe,"A",{href:!0});var fWt=s(Mee);rNr=r(fWt,"TFLayoutLMForSequenceClassification"),fWt.forEach(t),tNr=r(qXe," (LayoutLM model)"),qXe.forEach(t),aNr=i(ae),p0=n(ae,"LI",{});var jXe=s(p0);owe=n(jXe,"STRONG",{});var gWt=s(owe);nNr=r(gWt,"layoutlmv3"),gWt.forEach(t),sNr=r(jXe," \u2014 "),Eee=n(jXe,"A",{href:!0});var hWt=s(Eee);lNr=r(hWt,"TFLayoutLMv3ForSequenceClassification"),hWt.forEach(t),iNr=r(jXe," (LayoutLMv3 model)"),jXe.forEach(t),dNr=i(ae),_0=n(ae,"LI",{});var DXe=s(_0);rwe=n(DXe,"STRONG",{});var uWt=s(rwe);cNr=r(uWt,"longformer"),uWt.forEach(t),mNr=r(DXe," \u2014 "),Cee=n(DXe,"A",{href:!0});var pWt=s(Cee);fNr=r(pWt,"TFLongformerForSequenceClassification"),pWt.forEach(t),gNr=r(DXe," (Longformer model)"),DXe.forEach(t),hNr=i(ae),b0=n(ae,"LI",{});var GXe=s(b0);twe=n(GXe,"STRONG",{});var _Wt=s(twe);uNr=r(_Wt,"mobilebert"),_Wt.forEach(t),pNr=r(GXe," \u2014 "),wee=n(GXe,"A",{href:!0});var bWt=s(wee);_Nr=r(bWt,"TFMobileBertForSequenceClassification"),bWt.forEach(t),bNr=r(GXe," (MobileBERT model)"),GXe.forEach(t),vNr=i(ae),v0=n(ae,"LI",{});var OXe=s(v0);awe=n(OXe,"STRONG",{});var vWt=s(awe);FNr=r(vWt,"mpnet"),vWt.forEach(t),TNr=r(OXe," \u2014 "),Aee=n(OXe,"A",{href:!0});var FWt=s(Aee);MNr=r(FWt,"TFMPNetForSequenceClassification"),FWt.forEach(t),ENr=r(OXe," (MPNet model)"),OXe.forEach(t),CNr=i(ae),F0=n(ae,"LI",{});var VXe=s(F0);nwe=n(VXe,"STRONG",{});var TWt=s(nwe);wNr=r(TWt,"openai-gpt"),TWt.forEach(t),ANr=r(VXe," \u2014 "),Lee=n(VXe,"A",{href:!0});var MWt=s(Lee);LNr=r(MWt,"TFOpenAIGPTForSequenceClassification"),MWt.forEach(t),yNr=r(VXe," (OpenAI GPT model)"),VXe.forEach(t),xNr=i(ae),T0=n(ae,"LI",{});var XXe=s(T0);swe=n(XXe,"STRONG",{});var EWt=s(swe);$Nr=r(EWt,"rembert"),EWt.forEach(t),kNr=r(XXe," \u2014 "),yee=n(XXe,"A",{href:!0});var CWt=s(yee);SNr=r(CWt,"TFRemBertForSequenceClassification"),CWt.forEach(t),RNr=r(XXe," (RemBERT model)"),XXe.forEach(t),PNr=i(ae),M0=n(ae,"LI",{});var zXe=s(M0);lwe=n(zXe,"STRONG",{});var wWt=s(lwe);BNr=r(wWt,"roberta"),wWt.forEach(t),INr=r(zXe," \u2014 "),xee=n(zXe,"A",{href:!0});var AWt=s(xee);NNr=r(AWt,"TFRobertaForSequenceClassification"),AWt.forEach(t),qNr=r(zXe," (RoBERTa model)"),zXe.forEach(t),jNr=i(ae),E0=n(ae,"LI",{});var WXe=s(E0);iwe=n(WXe,"STRONG",{});var LWt=s(iwe);DNr=r(LWt,"roformer"),LWt.forEach(t),GNr=r(WXe," \u2014 "),$ee=n(WXe,"A",{href:!0});var yWt=s($ee);ONr=r(yWt,"TFRoFormerForSequenceClassification"),yWt.forEach(t),VNr=r(WXe," (RoFormer model)"),WXe.forEach(t),XNr=i(ae),C0=n(ae,"LI",{});var QXe=s(C0);dwe=n(QXe,"STRONG",{});var xWt=s(dwe);zNr=r(xWt,"tapas"),xWt.forEach(t),WNr=r(QXe," \u2014 "),kee=n(QXe,"A",{href:!0});var $Wt=s(kee);QNr=r($Wt,"TFTapasForSequenceClassification"),$Wt.forEach(t),UNr=r(QXe," (TAPAS model)"),QXe.forEach(t),HNr=i(ae),w0=n(ae,"LI",{});var UXe=s(w0);cwe=n(UXe,"STRONG",{});var kWt=s(cwe);JNr=r(kWt,"transfo-xl"),kWt.forEach(t),YNr=r(UXe," \u2014 "),See=n(UXe,"A",{href:!0});var SWt=s(See);KNr=r(SWt,"TFTransfoXLForSequenceClassification"),SWt.forEach(t),ZNr=r(UXe," (Transformer-XL model)"),UXe.forEach(t),eqr=i(ae),A0=n(ae,"LI",{});var HXe=s(A0);mwe=n(HXe,"STRONG",{});var RWt=s(mwe);oqr=r(RWt,"xlm"),RWt.forEach(t),rqr=r(HXe," \u2014 "),Ree=n(HXe,"A",{href:!0});var PWt=s(Ree);tqr=r(PWt,"TFXLMForSequenceClassification"),PWt.forEach(t),aqr=r(HXe," (XLM model)"),HXe.forEach(t),nqr=i(ae),L0=n(ae,"LI",{});var JXe=s(L0);fwe=n(JXe,"STRONG",{});var BWt=s(fwe);sqr=r(BWt,"xlm-roberta"),BWt.forEach(t),lqr=r(JXe," \u2014 "),Pee=n(JXe,"A",{href:!0});var IWt=s(Pee);iqr=r(IWt,"TFXLMRobertaForSequenceClassification"),IWt.forEach(t),dqr=r(JXe," (XLM-RoBERTa model)"),JXe.forEach(t),cqr=i(ae),y0=n(ae,"LI",{});var YXe=s(y0);gwe=n(YXe,"STRONG",{});var NWt=s(gwe);mqr=r(NWt,"xlnet"),NWt.forEach(t),fqr=r(YXe," \u2014 "),Bee=n(YXe,"A",{href:!0});var qWt=s(Bee);gqr=r(qWt,"TFXLNetForSequenceClassification"),qWt.forEach(t),hqr=r(YXe," (XLNet model)"),YXe.forEach(t),ae.forEach(t),uqr=i(ti),T(x0.$$.fragment,ti),ti.forEach(t),ri.forEach(t),BHe=i(m),Qc=n(m,"H2",{class:!0});var UYe=s(Qc);$0=n(UYe,"A",{id:!0,class:!0,href:!0});var jWt=s($0);hwe=n(jWt,"SPAN",{});var DWt=s(hwe);T(Y$.$$.fragment,DWt),DWt.forEach(t),jWt.forEach(t),pqr=i(UYe),uwe=n(UYe,"SPAN",{});var GWt=s(uwe);_qr=r(GWt,"TFAutoModelForMultipleChoice"),GWt.forEach(t),UYe.forEach(t),IHe=i(m),fr=n(m,"DIV",{class:!0});var ai=s(fr);T(K$.$$.fragment,ai),bqr=i(ai),Uc=n(ai,"P",{});var cse=s(Uc);vqr=r(cse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Iee=n(cse,"A",{href:!0});var OWt=s(Iee);Fqr=r(OWt,"from_pretrained()"),OWt.forEach(t),Tqr=r(cse," class method or the "),Nee=n(cse,"A",{href:!0});var VWt=s(Nee);Mqr=r(VWt,"from_config()"),VWt.forEach(t),Eqr=r(cse,` class
method.`),cse.forEach(t),Cqr=i(ai),Z$=n(ai,"P",{});var HYe=s(Z$);wqr=r(HYe,"This class cannot be instantiated directly using "),pwe=n(HYe,"CODE",{});var XWt=s(pwe);Aqr=r(XWt,"__init__()"),XWt.forEach(t),Lqr=r(HYe," (throws an error)."),HYe.forEach(t),yqr=i(ai),Wt=n(ai,"DIV",{class:!0});var ky=s(Wt);T(ek.$$.fragment,ky),xqr=i(ky),_we=n(ky,"P",{});var zWt=s(_we);$qr=r(zWt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),zWt.forEach(t),kqr=i(ky),Hc=n(ky,"P",{});var mse=s(Hc);Sqr=r(mse,`Note:
Loading a model from its configuration file does `),bwe=n(mse,"STRONG",{});var WWt=s(bwe);Rqr=r(WWt,"not"),WWt.forEach(t),Pqr=r(mse,` load the model weights. It only affects the
model\u2019s configuration. Use `),qee=n(mse,"A",{href:!0});var QWt=s(qee);Bqr=r(QWt,"from_pretrained()"),QWt.forEach(t),Iqr=r(mse," to load the model weights."),mse.forEach(t),Nqr=i(ky),T(k0.$$.fragment,ky),ky.forEach(t),qqr=i(ai),Gr=n(ai,"DIV",{class:!0});var ni=s(Gr);T(ok.$$.fragment,ni),jqr=i(ni),vwe=n(ni,"P",{});var UWt=s(vwe);Dqr=r(UWt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),UWt.forEach(t),Gqr=i(ni),Cn=n(ni,"P",{});var Sy=s(Cn);Oqr=r(Sy,"The model class to instantiate is selected based on the "),Fwe=n(Sy,"CODE",{});var HWt=s(Fwe);Vqr=r(HWt,"model_type"),HWt.forEach(t),Xqr=r(Sy,` property of the config object (either
passed as an argument or loaded from `),Twe=n(Sy,"CODE",{});var JWt=s(Twe);zqr=r(JWt,"pretrained_model_name_or_path"),JWt.forEach(t),Wqr=r(Sy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mwe=n(Sy,"CODE",{});var YWt=s(Mwe);Qqr=r(YWt,"pretrained_model_name_or_path"),YWt.forEach(t),Uqr=r(Sy,":"),Sy.forEach(t),Hqr=i(ni),ve=n(ni,"UL",{});var Te=s(ve);S0=n(Te,"LI",{});var KXe=s(S0);Ewe=n(KXe,"STRONG",{});var KWt=s(Ewe);Jqr=r(KWt,"albert"),KWt.forEach(t),Yqr=r(KXe," \u2014 "),jee=n(KXe,"A",{href:!0});var ZWt=s(jee);Kqr=r(ZWt,"TFAlbertForMultipleChoice"),ZWt.forEach(t),Zqr=r(KXe," (ALBERT model)"),KXe.forEach(t),ejr=i(Te),R0=n(Te,"LI",{});var ZXe=s(R0);Cwe=n(ZXe,"STRONG",{});var eQt=s(Cwe);ojr=r(eQt,"bert"),eQt.forEach(t),rjr=r(ZXe," \u2014 "),Dee=n(ZXe,"A",{href:!0});var oQt=s(Dee);tjr=r(oQt,"TFBertForMultipleChoice"),oQt.forEach(t),ajr=r(ZXe," (BERT model)"),ZXe.forEach(t),njr=i(Te),P0=n(Te,"LI",{});var eze=s(P0);wwe=n(eze,"STRONG",{});var rQt=s(wwe);sjr=r(rQt,"camembert"),rQt.forEach(t),ljr=r(eze," \u2014 "),Gee=n(eze,"A",{href:!0});var tQt=s(Gee);ijr=r(tQt,"TFCamembertForMultipleChoice"),tQt.forEach(t),djr=r(eze," (CamemBERT model)"),eze.forEach(t),cjr=i(Te),B0=n(Te,"LI",{});var oze=s(B0);Awe=n(oze,"STRONG",{});var aQt=s(Awe);mjr=r(aQt,"convbert"),aQt.forEach(t),fjr=r(oze," \u2014 "),Oee=n(oze,"A",{href:!0});var nQt=s(Oee);gjr=r(nQt,"TFConvBertForMultipleChoice"),nQt.forEach(t),hjr=r(oze," (ConvBERT model)"),oze.forEach(t),ujr=i(Te),I0=n(Te,"LI",{});var rze=s(I0);Lwe=n(rze,"STRONG",{});var sQt=s(Lwe);pjr=r(sQt,"distilbert"),sQt.forEach(t),_jr=r(rze," \u2014 "),Vee=n(rze,"A",{href:!0});var lQt=s(Vee);bjr=r(lQt,"TFDistilBertForMultipleChoice"),lQt.forEach(t),vjr=r(rze," (DistilBERT model)"),rze.forEach(t),Fjr=i(Te),N0=n(Te,"LI",{});var tze=s(N0);ywe=n(tze,"STRONG",{});var iQt=s(ywe);Tjr=r(iQt,"electra"),iQt.forEach(t),Mjr=r(tze," \u2014 "),Xee=n(tze,"A",{href:!0});var dQt=s(Xee);Ejr=r(dQt,"TFElectraForMultipleChoice"),dQt.forEach(t),Cjr=r(tze," (ELECTRA model)"),tze.forEach(t),wjr=i(Te),q0=n(Te,"LI",{});var aze=s(q0);xwe=n(aze,"STRONG",{});var cQt=s(xwe);Ajr=r(cQt,"flaubert"),cQt.forEach(t),Ljr=r(aze," \u2014 "),zee=n(aze,"A",{href:!0});var mQt=s(zee);yjr=r(mQt,"TFFlaubertForMultipleChoice"),mQt.forEach(t),xjr=r(aze," (FlauBERT model)"),aze.forEach(t),$jr=i(Te),j0=n(Te,"LI",{});var nze=s(j0);$we=n(nze,"STRONG",{});var fQt=s($we);kjr=r(fQt,"funnel"),fQt.forEach(t),Sjr=r(nze," \u2014 "),Wee=n(nze,"A",{href:!0});var gQt=s(Wee);Rjr=r(gQt,"TFFunnelForMultipleChoice"),gQt.forEach(t),Pjr=r(nze," (Funnel Transformer model)"),nze.forEach(t),Bjr=i(Te),D0=n(Te,"LI",{});var sze=s(D0);kwe=n(sze,"STRONG",{});var hQt=s(kwe);Ijr=r(hQt,"longformer"),hQt.forEach(t),Njr=r(sze," \u2014 "),Qee=n(sze,"A",{href:!0});var uQt=s(Qee);qjr=r(uQt,"TFLongformerForMultipleChoice"),uQt.forEach(t),jjr=r(sze," (Longformer model)"),sze.forEach(t),Djr=i(Te),G0=n(Te,"LI",{});var lze=s(G0);Swe=n(lze,"STRONG",{});var pQt=s(Swe);Gjr=r(pQt,"mobilebert"),pQt.forEach(t),Ojr=r(lze," \u2014 "),Uee=n(lze,"A",{href:!0});var _Qt=s(Uee);Vjr=r(_Qt,"TFMobileBertForMultipleChoice"),_Qt.forEach(t),Xjr=r(lze," (MobileBERT model)"),lze.forEach(t),zjr=i(Te),O0=n(Te,"LI",{});var ize=s(O0);Rwe=n(ize,"STRONG",{});var bQt=s(Rwe);Wjr=r(bQt,"mpnet"),bQt.forEach(t),Qjr=r(ize," \u2014 "),Hee=n(ize,"A",{href:!0});var vQt=s(Hee);Ujr=r(vQt,"TFMPNetForMultipleChoice"),vQt.forEach(t),Hjr=r(ize," (MPNet model)"),ize.forEach(t),Jjr=i(Te),V0=n(Te,"LI",{});var dze=s(V0);Pwe=n(dze,"STRONG",{});var FQt=s(Pwe);Yjr=r(FQt,"rembert"),FQt.forEach(t),Kjr=r(dze," \u2014 "),Jee=n(dze,"A",{href:!0});var TQt=s(Jee);Zjr=r(TQt,"TFRemBertForMultipleChoice"),TQt.forEach(t),eDr=r(dze," (RemBERT model)"),dze.forEach(t),oDr=i(Te),X0=n(Te,"LI",{});var cze=s(X0);Bwe=n(cze,"STRONG",{});var MQt=s(Bwe);rDr=r(MQt,"roberta"),MQt.forEach(t),tDr=r(cze," \u2014 "),Yee=n(cze,"A",{href:!0});var EQt=s(Yee);aDr=r(EQt,"TFRobertaForMultipleChoice"),EQt.forEach(t),nDr=r(cze," (RoBERTa model)"),cze.forEach(t),sDr=i(Te),z0=n(Te,"LI",{});var mze=s(z0);Iwe=n(mze,"STRONG",{});var CQt=s(Iwe);lDr=r(CQt,"roformer"),CQt.forEach(t),iDr=r(mze," \u2014 "),Kee=n(mze,"A",{href:!0});var wQt=s(Kee);dDr=r(wQt,"TFRoFormerForMultipleChoice"),wQt.forEach(t),cDr=r(mze," (RoFormer model)"),mze.forEach(t),mDr=i(Te),W0=n(Te,"LI",{});var fze=s(W0);Nwe=n(fze,"STRONG",{});var AQt=s(Nwe);fDr=r(AQt,"xlm"),AQt.forEach(t),gDr=r(fze," \u2014 "),Zee=n(fze,"A",{href:!0});var LQt=s(Zee);hDr=r(LQt,"TFXLMForMultipleChoice"),LQt.forEach(t),uDr=r(fze," (XLM model)"),fze.forEach(t),pDr=i(Te),Q0=n(Te,"LI",{});var gze=s(Q0);qwe=n(gze,"STRONG",{});var yQt=s(qwe);_Dr=r(yQt,"xlm-roberta"),yQt.forEach(t),bDr=r(gze," \u2014 "),eoe=n(gze,"A",{href:!0});var xQt=s(eoe);vDr=r(xQt,"TFXLMRobertaForMultipleChoice"),xQt.forEach(t),FDr=r(gze," (XLM-RoBERTa model)"),gze.forEach(t),TDr=i(Te),U0=n(Te,"LI",{});var hze=s(U0);jwe=n(hze,"STRONG",{});var $Qt=s(jwe);MDr=r($Qt,"xlnet"),$Qt.forEach(t),EDr=r(hze," \u2014 "),ooe=n(hze,"A",{href:!0});var kQt=s(ooe);CDr=r(kQt,"TFXLNetForMultipleChoice"),kQt.forEach(t),wDr=r(hze," (XLNet model)"),hze.forEach(t),Te.forEach(t),ADr=i(ni),T(H0.$$.fragment,ni),ni.forEach(t),ai.forEach(t),NHe=i(m),Jc=n(m,"H2",{class:!0});var JYe=s(Jc);J0=n(JYe,"A",{id:!0,class:!0,href:!0});var SQt=s(J0);Dwe=n(SQt,"SPAN",{});var RQt=s(Dwe);T(rk.$$.fragment,RQt),RQt.forEach(t),SQt.forEach(t),LDr=i(JYe),Gwe=n(JYe,"SPAN",{});var PQt=s(Gwe);yDr=r(PQt,"TFAutoModelForNextSentencePrediction"),PQt.forEach(t),JYe.forEach(t),qHe=i(m),gr=n(m,"DIV",{class:!0});var si=s(gr);T(tk.$$.fragment,si),xDr=i(si),Yc=n(si,"P",{});var fse=s(Yc);$Dr=r(fse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),roe=n(fse,"A",{href:!0});var BQt=s(roe);kDr=r(BQt,"from_pretrained()"),BQt.forEach(t),SDr=r(fse," class method or the "),toe=n(fse,"A",{href:!0});var IQt=s(toe);RDr=r(IQt,"from_config()"),IQt.forEach(t),PDr=r(fse,` class
method.`),fse.forEach(t),BDr=i(si),ak=n(si,"P",{});var YYe=s(ak);IDr=r(YYe,"This class cannot be instantiated directly using "),Owe=n(YYe,"CODE",{});var NQt=s(Owe);NDr=r(NQt,"__init__()"),NQt.forEach(t),qDr=r(YYe," (throws an error)."),YYe.forEach(t),jDr=i(si),Qt=n(si,"DIV",{class:!0});var Ry=s(Qt);T(nk.$$.fragment,Ry),DDr=i(Ry),Vwe=n(Ry,"P",{});var qQt=s(Vwe);GDr=r(qQt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),qQt.forEach(t),ODr=i(Ry),Kc=n(Ry,"P",{});var gse=s(Kc);VDr=r(gse,`Note:
Loading a model from its configuration file does `),Xwe=n(gse,"STRONG",{});var jQt=s(Xwe);XDr=r(jQt,"not"),jQt.forEach(t),zDr=r(gse,` load the model weights. It only affects the
model\u2019s configuration. Use `),aoe=n(gse,"A",{href:!0});var DQt=s(aoe);WDr=r(DQt,"from_pretrained()"),DQt.forEach(t),QDr=r(gse," to load the model weights."),gse.forEach(t),UDr=i(Ry),T(Y0.$$.fragment,Ry),Ry.forEach(t),HDr=i(si),Or=n(si,"DIV",{class:!0});var li=s(Or);T(sk.$$.fragment,li),JDr=i(li),zwe=n(li,"P",{});var GQt=s(zwe);YDr=r(GQt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),GQt.forEach(t),KDr=i(li),wn=n(li,"P",{});var Py=s(wn);ZDr=r(Py,"The model class to instantiate is selected based on the "),Wwe=n(Py,"CODE",{});var OQt=s(Wwe);eGr=r(OQt,"model_type"),OQt.forEach(t),oGr=r(Py,` property of the config object (either
passed as an argument or loaded from `),Qwe=n(Py,"CODE",{});var VQt=s(Qwe);rGr=r(VQt,"pretrained_model_name_or_path"),VQt.forEach(t),tGr=r(Py,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uwe=n(Py,"CODE",{});var XQt=s(Uwe);aGr=r(XQt,"pretrained_model_name_or_path"),XQt.forEach(t),nGr=r(Py,":"),Py.forEach(t),sGr=i(li),lk=n(li,"UL",{});var KYe=s(lk);K0=n(KYe,"LI",{});var uze=s(K0);Hwe=n(uze,"STRONG",{});var zQt=s(Hwe);lGr=r(zQt,"bert"),zQt.forEach(t),iGr=r(uze," \u2014 "),noe=n(uze,"A",{href:!0});var WQt=s(noe);dGr=r(WQt,"TFBertForNextSentencePrediction"),WQt.forEach(t),cGr=r(uze," (BERT model)"),uze.forEach(t),mGr=i(KYe),Z0=n(KYe,"LI",{});var pze=s(Z0);Jwe=n(pze,"STRONG",{});var QQt=s(Jwe);fGr=r(QQt,"mobilebert"),QQt.forEach(t),gGr=r(pze," \u2014 "),soe=n(pze,"A",{href:!0});var UQt=s(soe);hGr=r(UQt,"TFMobileBertForNextSentencePrediction"),UQt.forEach(t),uGr=r(pze," (MobileBERT model)"),pze.forEach(t),KYe.forEach(t),pGr=i(li),T(ew.$$.fragment,li),li.forEach(t),si.forEach(t),jHe=i(m),Zc=n(m,"H2",{class:!0});var ZYe=s(Zc);ow=n(ZYe,"A",{id:!0,class:!0,href:!0});var HQt=s(ow);Ywe=n(HQt,"SPAN",{});var JQt=s(Ywe);T(ik.$$.fragment,JQt),JQt.forEach(t),HQt.forEach(t),_Gr=i(ZYe),Kwe=n(ZYe,"SPAN",{});var YQt=s(Kwe);bGr=r(YQt,"TFAutoModelForTableQuestionAnswering"),YQt.forEach(t),ZYe.forEach(t),DHe=i(m),hr=n(m,"DIV",{class:!0});var ii=s(hr);T(dk.$$.fragment,ii),vGr=i(ii),em=n(ii,"P",{});var hse=s(em);FGr=r(hse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),loe=n(hse,"A",{href:!0});var KQt=s(loe);TGr=r(KQt,"from_pretrained()"),KQt.forEach(t),MGr=r(hse," class method or the "),ioe=n(hse,"A",{href:!0});var ZQt=s(ioe);EGr=r(ZQt,"from_config()"),ZQt.forEach(t),CGr=r(hse,` class
method.`),hse.forEach(t),wGr=i(ii),ck=n(ii,"P",{});var eKe=s(ck);AGr=r(eKe,"This class cannot be instantiated directly using "),Zwe=n(eKe,"CODE",{});var eUt=s(Zwe);LGr=r(eUt,"__init__()"),eUt.forEach(t),yGr=r(eKe," (throws an error)."),eKe.forEach(t),xGr=i(ii),Ut=n(ii,"DIV",{class:!0});var By=s(Ut);T(mk.$$.fragment,By),$Gr=i(By),e6e=n(By,"P",{});var oUt=s(e6e);kGr=r(oUt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),oUt.forEach(t),SGr=i(By),om=n(By,"P",{});var use=s(om);RGr=r(use,`Note:
Loading a model from its configuration file does `),o6e=n(use,"STRONG",{});var rUt=s(o6e);PGr=r(rUt,"not"),rUt.forEach(t),BGr=r(use,` load the model weights. It only affects the
model\u2019s configuration. Use `),doe=n(use,"A",{href:!0});var tUt=s(doe);IGr=r(tUt,"from_pretrained()"),tUt.forEach(t),NGr=r(use," to load the model weights."),use.forEach(t),qGr=i(By),T(rw.$$.fragment,By),By.forEach(t),jGr=i(ii),Vr=n(ii,"DIV",{class:!0});var di=s(Vr);T(fk.$$.fragment,di),DGr=i(di),r6e=n(di,"P",{});var aUt=s(r6e);GGr=r(aUt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),aUt.forEach(t),OGr=i(di),An=n(di,"P",{});var Iy=s(An);VGr=r(Iy,"The model class to instantiate is selected based on the "),t6e=n(Iy,"CODE",{});var nUt=s(t6e);XGr=r(nUt,"model_type"),nUt.forEach(t),zGr=r(Iy,` property of the config object (either
passed as an argument or loaded from `),a6e=n(Iy,"CODE",{});var sUt=s(a6e);WGr=r(sUt,"pretrained_model_name_or_path"),sUt.forEach(t),QGr=r(Iy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n6e=n(Iy,"CODE",{});var lUt=s(n6e);UGr=r(lUt,"pretrained_model_name_or_path"),lUt.forEach(t),HGr=r(Iy,":"),Iy.forEach(t),JGr=i(di),s6e=n(di,"UL",{});var iUt=s(s6e);tw=n(iUt,"LI",{});var _ze=s(tw);l6e=n(_ze,"STRONG",{});var dUt=s(l6e);YGr=r(dUt,"tapas"),dUt.forEach(t),KGr=r(_ze," \u2014 "),coe=n(_ze,"A",{href:!0});var cUt=s(coe);ZGr=r(cUt,"TFTapasForQuestionAnswering"),cUt.forEach(t),eOr=r(_ze," (TAPAS model)"),_ze.forEach(t),iUt.forEach(t),oOr=i(di),T(aw.$$.fragment,di),di.forEach(t),ii.forEach(t),GHe=i(m),rm=n(m,"H2",{class:!0});var oKe=s(rm);nw=n(oKe,"A",{id:!0,class:!0,href:!0});var mUt=s(nw);i6e=n(mUt,"SPAN",{});var fUt=s(i6e);T(gk.$$.fragment,fUt),fUt.forEach(t),mUt.forEach(t),rOr=i(oKe),d6e=n(oKe,"SPAN",{});var gUt=s(d6e);tOr=r(gUt,"TFAutoModelForTokenClassification"),gUt.forEach(t),oKe.forEach(t),OHe=i(m),ur=n(m,"DIV",{class:!0});var ci=s(ur);T(hk.$$.fragment,ci),aOr=i(ci),tm=n(ci,"P",{});var pse=s(tm);nOr=r(pse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),moe=n(pse,"A",{href:!0});var hUt=s(moe);sOr=r(hUt,"from_pretrained()"),hUt.forEach(t),lOr=r(pse," class method or the "),foe=n(pse,"A",{href:!0});var uUt=s(foe);iOr=r(uUt,"from_config()"),uUt.forEach(t),dOr=r(pse,` class
method.`),pse.forEach(t),cOr=i(ci),uk=n(ci,"P",{});var rKe=s(uk);mOr=r(rKe,"This class cannot be instantiated directly using "),c6e=n(rKe,"CODE",{});var pUt=s(c6e);fOr=r(pUt,"__init__()"),pUt.forEach(t),gOr=r(rKe," (throws an error)."),rKe.forEach(t),hOr=i(ci),Ht=n(ci,"DIV",{class:!0});var Ny=s(Ht);T(pk.$$.fragment,Ny),uOr=i(Ny),m6e=n(Ny,"P",{});var _Ut=s(m6e);pOr=r(_Ut,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),_Ut.forEach(t),_Or=i(Ny),am=n(Ny,"P",{});var _se=s(am);bOr=r(_se,`Note:
Loading a model from its configuration file does `),f6e=n(_se,"STRONG",{});var bUt=s(f6e);vOr=r(bUt,"not"),bUt.forEach(t),FOr=r(_se,` load the model weights. It only affects the
model\u2019s configuration. Use `),goe=n(_se,"A",{href:!0});var vUt=s(goe);TOr=r(vUt,"from_pretrained()"),vUt.forEach(t),MOr=r(_se," to load the model weights."),_se.forEach(t),EOr=i(Ny),T(sw.$$.fragment,Ny),Ny.forEach(t),COr=i(ci),Xr=n(ci,"DIV",{class:!0});var mi=s(Xr);T(_k.$$.fragment,mi),wOr=i(mi),g6e=n(mi,"P",{});var FUt=s(g6e);AOr=r(FUt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),FUt.forEach(t),LOr=i(mi),Ln=n(mi,"P",{});var qy=s(Ln);yOr=r(qy,"The model class to instantiate is selected based on the "),h6e=n(qy,"CODE",{});var TUt=s(h6e);xOr=r(TUt,"model_type"),TUt.forEach(t),$Or=r(qy,` property of the config object (either
passed as an argument or loaded from `),u6e=n(qy,"CODE",{});var MUt=s(u6e);kOr=r(MUt,"pretrained_model_name_or_path"),MUt.forEach(t),SOr=r(qy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p6e=n(qy,"CODE",{});var EUt=s(p6e);ROr=r(EUt,"pretrained_model_name_or_path"),EUt.forEach(t),POr=r(qy,":"),qy.forEach(t),BOr=i(mi),ie=n(mi,"UL",{});var fe=s(ie);lw=n(fe,"LI",{});var bze=s(lw);_6e=n(bze,"STRONG",{});var CUt=s(_6e);IOr=r(CUt,"albert"),CUt.forEach(t),NOr=r(bze," \u2014 "),hoe=n(bze,"A",{href:!0});var wUt=s(hoe);qOr=r(wUt,"TFAlbertForTokenClassification"),wUt.forEach(t),jOr=r(bze," (ALBERT model)"),bze.forEach(t),DOr=i(fe),iw=n(fe,"LI",{});var vze=s(iw);b6e=n(vze,"STRONG",{});var AUt=s(b6e);GOr=r(AUt,"bert"),AUt.forEach(t),OOr=r(vze," \u2014 "),uoe=n(vze,"A",{href:!0});var LUt=s(uoe);VOr=r(LUt,"TFBertForTokenClassification"),LUt.forEach(t),XOr=r(vze," (BERT model)"),vze.forEach(t),zOr=i(fe),dw=n(fe,"LI",{});var Fze=s(dw);v6e=n(Fze,"STRONG",{});var yUt=s(v6e);WOr=r(yUt,"camembert"),yUt.forEach(t),QOr=r(Fze," \u2014 "),poe=n(Fze,"A",{href:!0});var xUt=s(poe);UOr=r(xUt,"TFCamembertForTokenClassification"),xUt.forEach(t),HOr=r(Fze," (CamemBERT model)"),Fze.forEach(t),JOr=i(fe),cw=n(fe,"LI",{});var Tze=s(cw);F6e=n(Tze,"STRONG",{});var $Ut=s(F6e);YOr=r($Ut,"convbert"),$Ut.forEach(t),KOr=r(Tze," \u2014 "),_oe=n(Tze,"A",{href:!0});var kUt=s(_oe);ZOr=r(kUt,"TFConvBertForTokenClassification"),kUt.forEach(t),eVr=r(Tze," (ConvBERT model)"),Tze.forEach(t),oVr=i(fe),mw=n(fe,"LI",{});var Mze=s(mw);T6e=n(Mze,"STRONG",{});var SUt=s(T6e);rVr=r(SUt,"deberta"),SUt.forEach(t),tVr=r(Mze," \u2014 "),boe=n(Mze,"A",{href:!0});var RUt=s(boe);aVr=r(RUt,"TFDebertaForTokenClassification"),RUt.forEach(t),nVr=r(Mze," (DeBERTa model)"),Mze.forEach(t),sVr=i(fe),fw=n(fe,"LI",{});var Eze=s(fw);M6e=n(Eze,"STRONG",{});var PUt=s(M6e);lVr=r(PUt,"deberta-v2"),PUt.forEach(t),iVr=r(Eze," \u2014 "),voe=n(Eze,"A",{href:!0});var BUt=s(voe);dVr=r(BUt,"TFDebertaV2ForTokenClassification"),BUt.forEach(t),cVr=r(Eze," (DeBERTa-v2 model)"),Eze.forEach(t),mVr=i(fe),gw=n(fe,"LI",{});var Cze=s(gw);E6e=n(Cze,"STRONG",{});var IUt=s(E6e);fVr=r(IUt,"distilbert"),IUt.forEach(t),gVr=r(Cze," \u2014 "),Foe=n(Cze,"A",{href:!0});var NUt=s(Foe);hVr=r(NUt,"TFDistilBertForTokenClassification"),NUt.forEach(t),uVr=r(Cze," (DistilBERT model)"),Cze.forEach(t),pVr=i(fe),hw=n(fe,"LI",{});var wze=s(hw);C6e=n(wze,"STRONG",{});var qUt=s(C6e);_Vr=r(qUt,"electra"),qUt.forEach(t),bVr=r(wze," \u2014 "),Toe=n(wze,"A",{href:!0});var jUt=s(Toe);vVr=r(jUt,"TFElectraForTokenClassification"),jUt.forEach(t),FVr=r(wze," (ELECTRA model)"),wze.forEach(t),TVr=i(fe),uw=n(fe,"LI",{});var Aze=s(uw);w6e=n(Aze,"STRONG",{});var DUt=s(w6e);MVr=r(DUt,"flaubert"),DUt.forEach(t),EVr=r(Aze," \u2014 "),Moe=n(Aze,"A",{href:!0});var GUt=s(Moe);CVr=r(GUt,"TFFlaubertForTokenClassification"),GUt.forEach(t),wVr=r(Aze," (FlauBERT model)"),Aze.forEach(t),AVr=i(fe),pw=n(fe,"LI",{});var Lze=s(pw);A6e=n(Lze,"STRONG",{});var OUt=s(A6e);LVr=r(OUt,"funnel"),OUt.forEach(t),yVr=r(Lze," \u2014 "),Eoe=n(Lze,"A",{href:!0});var VUt=s(Eoe);xVr=r(VUt,"TFFunnelForTokenClassification"),VUt.forEach(t),$Vr=r(Lze," (Funnel Transformer model)"),Lze.forEach(t),kVr=i(fe),_w=n(fe,"LI",{});var yze=s(_w);L6e=n(yze,"STRONG",{});var XUt=s(L6e);SVr=r(XUt,"layoutlm"),XUt.forEach(t),RVr=r(yze," \u2014 "),Coe=n(yze,"A",{href:!0});var zUt=s(Coe);PVr=r(zUt,"TFLayoutLMForTokenClassification"),zUt.forEach(t),BVr=r(yze," (LayoutLM model)"),yze.forEach(t),IVr=i(fe),bw=n(fe,"LI",{});var xze=s(bw);y6e=n(xze,"STRONG",{});var WUt=s(y6e);NVr=r(WUt,"layoutlmv3"),WUt.forEach(t),qVr=r(xze," \u2014 "),woe=n(xze,"A",{href:!0});var QUt=s(woe);jVr=r(QUt,"TFLayoutLMv3ForTokenClassification"),QUt.forEach(t),DVr=r(xze," (LayoutLMv3 model)"),xze.forEach(t),GVr=i(fe),vw=n(fe,"LI",{});var $ze=s(vw);x6e=n($ze,"STRONG",{});var UUt=s(x6e);OVr=r(UUt,"longformer"),UUt.forEach(t),VVr=r($ze," \u2014 "),Aoe=n($ze,"A",{href:!0});var HUt=s(Aoe);XVr=r(HUt,"TFLongformerForTokenClassification"),HUt.forEach(t),zVr=r($ze," (Longformer model)"),$ze.forEach(t),WVr=i(fe),Fw=n(fe,"LI",{});var kze=s(Fw);$6e=n(kze,"STRONG",{});var JUt=s($6e);QVr=r(JUt,"mobilebert"),JUt.forEach(t),UVr=r(kze," \u2014 "),Loe=n(kze,"A",{href:!0});var YUt=s(Loe);HVr=r(YUt,"TFMobileBertForTokenClassification"),YUt.forEach(t),JVr=r(kze," (MobileBERT model)"),kze.forEach(t),YVr=i(fe),Tw=n(fe,"LI",{});var Sze=s(Tw);k6e=n(Sze,"STRONG",{});var KUt=s(k6e);KVr=r(KUt,"mpnet"),KUt.forEach(t),ZVr=r(Sze," \u2014 "),yoe=n(Sze,"A",{href:!0});var ZUt=s(yoe);eXr=r(ZUt,"TFMPNetForTokenClassification"),ZUt.forEach(t),oXr=r(Sze," (MPNet model)"),Sze.forEach(t),rXr=i(fe),Mw=n(fe,"LI",{});var Rze=s(Mw);S6e=n(Rze,"STRONG",{});var eHt=s(S6e);tXr=r(eHt,"rembert"),eHt.forEach(t),aXr=r(Rze," \u2014 "),xoe=n(Rze,"A",{href:!0});var oHt=s(xoe);nXr=r(oHt,"TFRemBertForTokenClassification"),oHt.forEach(t),sXr=r(Rze," (RemBERT model)"),Rze.forEach(t),lXr=i(fe),Ew=n(fe,"LI",{});var Pze=s(Ew);R6e=n(Pze,"STRONG",{});var rHt=s(R6e);iXr=r(rHt,"roberta"),rHt.forEach(t),dXr=r(Pze," \u2014 "),$oe=n(Pze,"A",{href:!0});var tHt=s($oe);cXr=r(tHt,"TFRobertaForTokenClassification"),tHt.forEach(t),mXr=r(Pze," (RoBERTa model)"),Pze.forEach(t),fXr=i(fe),Cw=n(fe,"LI",{});var Bze=s(Cw);P6e=n(Bze,"STRONG",{});var aHt=s(P6e);gXr=r(aHt,"roformer"),aHt.forEach(t),hXr=r(Bze," \u2014 "),koe=n(Bze,"A",{href:!0});var nHt=s(koe);uXr=r(nHt,"TFRoFormerForTokenClassification"),nHt.forEach(t),pXr=r(Bze," (RoFormer model)"),Bze.forEach(t),_Xr=i(fe),ww=n(fe,"LI",{});var Ize=s(ww);B6e=n(Ize,"STRONG",{});var sHt=s(B6e);bXr=r(sHt,"xlm"),sHt.forEach(t),vXr=r(Ize," \u2014 "),Soe=n(Ize,"A",{href:!0});var lHt=s(Soe);FXr=r(lHt,"TFXLMForTokenClassification"),lHt.forEach(t),TXr=r(Ize," (XLM model)"),Ize.forEach(t),MXr=i(fe),Aw=n(fe,"LI",{});var Nze=s(Aw);I6e=n(Nze,"STRONG",{});var iHt=s(I6e);EXr=r(iHt,"xlm-roberta"),iHt.forEach(t),CXr=r(Nze," \u2014 "),Roe=n(Nze,"A",{href:!0});var dHt=s(Roe);wXr=r(dHt,"TFXLMRobertaForTokenClassification"),dHt.forEach(t),AXr=r(Nze," (XLM-RoBERTa model)"),Nze.forEach(t),LXr=i(fe),Lw=n(fe,"LI",{});var qze=s(Lw);N6e=n(qze,"STRONG",{});var cHt=s(N6e);yXr=r(cHt,"xlnet"),cHt.forEach(t),xXr=r(qze," \u2014 "),Poe=n(qze,"A",{href:!0});var mHt=s(Poe);$Xr=r(mHt,"TFXLNetForTokenClassification"),mHt.forEach(t),kXr=r(qze," (XLNet model)"),qze.forEach(t),fe.forEach(t),SXr=i(mi),T(yw.$$.fragment,mi),mi.forEach(t),ci.forEach(t),VHe=i(m),nm=n(m,"H2",{class:!0});var tKe=s(nm);xw=n(tKe,"A",{id:!0,class:!0,href:!0});var fHt=s(xw);q6e=n(fHt,"SPAN",{});var gHt=s(q6e);T(bk.$$.fragment,gHt),gHt.forEach(t),fHt.forEach(t),RXr=i(tKe),j6e=n(tKe,"SPAN",{});var hHt=s(j6e);PXr=r(hHt,"TFAutoModelForQuestionAnswering"),hHt.forEach(t),tKe.forEach(t),XHe=i(m),pr=n(m,"DIV",{class:!0});var fi=s(pr);T(vk.$$.fragment,fi),BXr=i(fi),sm=n(fi,"P",{});var bse=s(sm);IXr=r(bse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Boe=n(bse,"A",{href:!0});var uHt=s(Boe);NXr=r(uHt,"from_pretrained()"),uHt.forEach(t),qXr=r(bse," class method or the "),Ioe=n(bse,"A",{href:!0});var pHt=s(Ioe);jXr=r(pHt,"from_config()"),pHt.forEach(t),DXr=r(bse,` class
method.`),bse.forEach(t),GXr=i(fi),Fk=n(fi,"P",{});var aKe=s(Fk);OXr=r(aKe,"This class cannot be instantiated directly using "),D6e=n(aKe,"CODE",{});var _Ht=s(D6e);VXr=r(_Ht,"__init__()"),_Ht.forEach(t),XXr=r(aKe," (throws an error)."),aKe.forEach(t),zXr=i(fi),Jt=n(fi,"DIV",{class:!0});var jy=s(Jt);T(Tk.$$.fragment,jy),WXr=i(jy),G6e=n(jy,"P",{});var bHt=s(G6e);QXr=r(bHt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),bHt.forEach(t),UXr=i(jy),lm=n(jy,"P",{});var vse=s(lm);HXr=r(vse,`Note:
Loading a model from its configuration file does `),O6e=n(vse,"STRONG",{});var vHt=s(O6e);JXr=r(vHt,"not"),vHt.forEach(t),YXr=r(vse,` load the model weights. It only affects the
model\u2019s configuration. Use `),Noe=n(vse,"A",{href:!0});var FHt=s(Noe);KXr=r(FHt,"from_pretrained()"),FHt.forEach(t),ZXr=r(vse," to load the model weights."),vse.forEach(t),ezr=i(jy),T($w.$$.fragment,jy),jy.forEach(t),ozr=i(fi),zr=n(fi,"DIV",{class:!0});var gi=s(zr);T(Mk.$$.fragment,gi),rzr=i(gi),V6e=n(gi,"P",{});var THt=s(V6e);tzr=r(THt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),THt.forEach(t),azr=i(gi),yn=n(gi,"P",{});var Dy=s(yn);nzr=r(Dy,"The model class to instantiate is selected based on the "),X6e=n(Dy,"CODE",{});var MHt=s(X6e);szr=r(MHt,"model_type"),MHt.forEach(t),lzr=r(Dy,` property of the config object (either
passed as an argument or loaded from `),z6e=n(Dy,"CODE",{});var EHt=s(z6e);izr=r(EHt,"pretrained_model_name_or_path"),EHt.forEach(t),dzr=r(Dy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W6e=n(Dy,"CODE",{});var CHt=s(W6e);czr=r(CHt,"pretrained_model_name_or_path"),CHt.forEach(t),mzr=r(Dy,":"),Dy.forEach(t),fzr=i(gi),de=n(gi,"UL",{});var ge=s(de);kw=n(ge,"LI",{});var jze=s(kw);Q6e=n(jze,"STRONG",{});var wHt=s(Q6e);gzr=r(wHt,"albert"),wHt.forEach(t),hzr=r(jze," \u2014 "),qoe=n(jze,"A",{href:!0});var AHt=s(qoe);uzr=r(AHt,"TFAlbertForQuestionAnswering"),AHt.forEach(t),pzr=r(jze," (ALBERT model)"),jze.forEach(t),_zr=i(ge),Sw=n(ge,"LI",{});var Dze=s(Sw);U6e=n(Dze,"STRONG",{});var LHt=s(U6e);bzr=r(LHt,"bert"),LHt.forEach(t),vzr=r(Dze," \u2014 "),joe=n(Dze,"A",{href:!0});var yHt=s(joe);Fzr=r(yHt,"TFBertForQuestionAnswering"),yHt.forEach(t),Tzr=r(Dze," (BERT model)"),Dze.forEach(t),Mzr=i(ge),Rw=n(ge,"LI",{});var Gze=s(Rw);H6e=n(Gze,"STRONG",{});var xHt=s(H6e);Ezr=r(xHt,"camembert"),xHt.forEach(t),Czr=r(Gze," \u2014 "),Doe=n(Gze,"A",{href:!0});var $Ht=s(Doe);wzr=r($Ht,"TFCamembertForQuestionAnswering"),$Ht.forEach(t),Azr=r(Gze," (CamemBERT model)"),Gze.forEach(t),Lzr=i(ge),Pw=n(ge,"LI",{});var Oze=s(Pw);J6e=n(Oze,"STRONG",{});var kHt=s(J6e);yzr=r(kHt,"convbert"),kHt.forEach(t),xzr=r(Oze," \u2014 "),Goe=n(Oze,"A",{href:!0});var SHt=s(Goe);$zr=r(SHt,"TFConvBertForQuestionAnswering"),SHt.forEach(t),kzr=r(Oze," (ConvBERT model)"),Oze.forEach(t),Szr=i(ge),Bw=n(ge,"LI",{});var Vze=s(Bw);Y6e=n(Vze,"STRONG",{});var RHt=s(Y6e);Rzr=r(RHt,"deberta"),RHt.forEach(t),Pzr=r(Vze," \u2014 "),Ooe=n(Vze,"A",{href:!0});var PHt=s(Ooe);Bzr=r(PHt,"TFDebertaForQuestionAnswering"),PHt.forEach(t),Izr=r(Vze," (DeBERTa model)"),Vze.forEach(t),Nzr=i(ge),Iw=n(ge,"LI",{});var Xze=s(Iw);K6e=n(Xze,"STRONG",{});var BHt=s(K6e);qzr=r(BHt,"deberta-v2"),BHt.forEach(t),jzr=r(Xze," \u2014 "),Voe=n(Xze,"A",{href:!0});var IHt=s(Voe);Dzr=r(IHt,"TFDebertaV2ForQuestionAnswering"),IHt.forEach(t),Gzr=r(Xze," (DeBERTa-v2 model)"),Xze.forEach(t),Ozr=i(ge),Nw=n(ge,"LI",{});var zze=s(Nw);Z6e=n(zze,"STRONG",{});var NHt=s(Z6e);Vzr=r(NHt,"distilbert"),NHt.forEach(t),Xzr=r(zze," \u2014 "),Xoe=n(zze,"A",{href:!0});var qHt=s(Xoe);zzr=r(qHt,"TFDistilBertForQuestionAnswering"),qHt.forEach(t),Wzr=r(zze," (DistilBERT model)"),zze.forEach(t),Qzr=i(ge),qw=n(ge,"LI",{});var Wze=s(qw);eAe=n(Wze,"STRONG",{});var jHt=s(eAe);Uzr=r(jHt,"electra"),jHt.forEach(t),Hzr=r(Wze," \u2014 "),zoe=n(Wze,"A",{href:!0});var DHt=s(zoe);Jzr=r(DHt,"TFElectraForQuestionAnswering"),DHt.forEach(t),Yzr=r(Wze," (ELECTRA model)"),Wze.forEach(t),Kzr=i(ge),jw=n(ge,"LI",{});var Qze=s(jw);oAe=n(Qze,"STRONG",{});var GHt=s(oAe);Zzr=r(GHt,"flaubert"),GHt.forEach(t),eWr=r(Qze," \u2014 "),Woe=n(Qze,"A",{href:!0});var OHt=s(Woe);oWr=r(OHt,"TFFlaubertForQuestionAnsweringSimple"),OHt.forEach(t),rWr=r(Qze," (FlauBERT model)"),Qze.forEach(t),tWr=i(ge),Dw=n(ge,"LI",{});var Uze=s(Dw);rAe=n(Uze,"STRONG",{});var VHt=s(rAe);aWr=r(VHt,"funnel"),VHt.forEach(t),nWr=r(Uze," \u2014 "),Qoe=n(Uze,"A",{href:!0});var XHt=s(Qoe);sWr=r(XHt,"TFFunnelForQuestionAnswering"),XHt.forEach(t),lWr=r(Uze," (Funnel Transformer model)"),Uze.forEach(t),iWr=i(ge),Gw=n(ge,"LI",{});var Hze=s(Gw);tAe=n(Hze,"STRONG",{});var zHt=s(tAe);dWr=r(zHt,"gptj"),zHt.forEach(t),cWr=r(Hze," \u2014 "),Uoe=n(Hze,"A",{href:!0});var WHt=s(Uoe);mWr=r(WHt,"TFGPTJForQuestionAnswering"),WHt.forEach(t),fWr=r(Hze," (GPT-J model)"),Hze.forEach(t),gWr=i(ge),Ow=n(ge,"LI",{});var Jze=s(Ow);aAe=n(Jze,"STRONG",{});var QHt=s(aAe);hWr=r(QHt,"layoutlmv3"),QHt.forEach(t),uWr=r(Jze," \u2014 "),Hoe=n(Jze,"A",{href:!0});var UHt=s(Hoe);pWr=r(UHt,"TFLayoutLMv3ForQuestionAnswering"),UHt.forEach(t),_Wr=r(Jze," (LayoutLMv3 model)"),Jze.forEach(t),bWr=i(ge),Vw=n(ge,"LI",{});var Yze=s(Vw);nAe=n(Yze,"STRONG",{});var HHt=s(nAe);vWr=r(HHt,"longformer"),HHt.forEach(t),FWr=r(Yze," \u2014 "),Joe=n(Yze,"A",{href:!0});var JHt=s(Joe);TWr=r(JHt,"TFLongformerForQuestionAnswering"),JHt.forEach(t),MWr=r(Yze," (Longformer model)"),Yze.forEach(t),EWr=i(ge),Xw=n(ge,"LI",{});var Kze=s(Xw);sAe=n(Kze,"STRONG",{});var YHt=s(sAe);CWr=r(YHt,"mobilebert"),YHt.forEach(t),wWr=r(Kze," \u2014 "),Yoe=n(Kze,"A",{href:!0});var KHt=s(Yoe);AWr=r(KHt,"TFMobileBertForQuestionAnswering"),KHt.forEach(t),LWr=r(Kze," (MobileBERT model)"),Kze.forEach(t),yWr=i(ge),zw=n(ge,"LI",{});var Zze=s(zw);lAe=n(Zze,"STRONG",{});var ZHt=s(lAe);xWr=r(ZHt,"mpnet"),ZHt.forEach(t),$Wr=r(Zze," \u2014 "),Koe=n(Zze,"A",{href:!0});var eJt=s(Koe);kWr=r(eJt,"TFMPNetForQuestionAnswering"),eJt.forEach(t),SWr=r(Zze," (MPNet model)"),Zze.forEach(t),RWr=i(ge),Ww=n(ge,"LI",{});var eWe=s(Ww);iAe=n(eWe,"STRONG",{});var oJt=s(iAe);PWr=r(oJt,"rembert"),oJt.forEach(t),BWr=r(eWe," \u2014 "),Zoe=n(eWe,"A",{href:!0});var rJt=s(Zoe);IWr=r(rJt,"TFRemBertForQuestionAnswering"),rJt.forEach(t),NWr=r(eWe," (RemBERT model)"),eWe.forEach(t),qWr=i(ge),Qw=n(ge,"LI",{});var oWe=s(Qw);dAe=n(oWe,"STRONG",{});var tJt=s(dAe);jWr=r(tJt,"roberta"),tJt.forEach(t),DWr=r(oWe," \u2014 "),ere=n(oWe,"A",{href:!0});var aJt=s(ere);GWr=r(aJt,"TFRobertaForQuestionAnswering"),aJt.forEach(t),OWr=r(oWe," (RoBERTa model)"),oWe.forEach(t),VWr=i(ge),Uw=n(ge,"LI",{});var rWe=s(Uw);cAe=n(rWe,"STRONG",{});var nJt=s(cAe);XWr=r(nJt,"roformer"),nJt.forEach(t),zWr=r(rWe," \u2014 "),ore=n(rWe,"A",{href:!0});var sJt=s(ore);WWr=r(sJt,"TFRoFormerForQuestionAnswering"),sJt.forEach(t),QWr=r(rWe," (RoFormer model)"),rWe.forEach(t),UWr=i(ge),Hw=n(ge,"LI",{});var tWe=s(Hw);mAe=n(tWe,"STRONG",{});var lJt=s(mAe);HWr=r(lJt,"xlm"),lJt.forEach(t),JWr=r(tWe," \u2014 "),rre=n(tWe,"A",{href:!0});var iJt=s(rre);YWr=r(iJt,"TFXLMForQuestionAnsweringSimple"),iJt.forEach(t),KWr=r(tWe," (XLM model)"),tWe.forEach(t),ZWr=i(ge),Jw=n(ge,"LI",{});var aWe=s(Jw);fAe=n(aWe,"STRONG",{});var dJt=s(fAe);eQr=r(dJt,"xlm-roberta"),dJt.forEach(t),oQr=r(aWe," \u2014 "),tre=n(aWe,"A",{href:!0});var cJt=s(tre);rQr=r(cJt,"TFXLMRobertaForQuestionAnswering"),cJt.forEach(t),tQr=r(aWe," (XLM-RoBERTa model)"),aWe.forEach(t),aQr=i(ge),Yw=n(ge,"LI",{});var nWe=s(Yw);gAe=n(nWe,"STRONG",{});var mJt=s(gAe);nQr=r(mJt,"xlnet"),mJt.forEach(t),sQr=r(nWe," \u2014 "),are=n(nWe,"A",{href:!0});var fJt=s(are);lQr=r(fJt,"TFXLNetForQuestionAnsweringSimple"),fJt.forEach(t),iQr=r(nWe," (XLNet model)"),nWe.forEach(t),ge.forEach(t),dQr=i(gi),T(Kw.$$.fragment,gi),gi.forEach(t),fi.forEach(t),zHe=i(m),im=n(m,"H2",{class:!0});var nKe=s(im);Zw=n(nKe,"A",{id:!0,class:!0,href:!0});var gJt=s(Zw);hAe=n(gJt,"SPAN",{});var hJt=s(hAe);T(Ek.$$.fragment,hJt),hJt.forEach(t),gJt.forEach(t),cQr=i(nKe),uAe=n(nKe,"SPAN",{});var uJt=s(uAe);mQr=r(uJt,"TFAutoModelForVision2Seq"),uJt.forEach(t),nKe.forEach(t),WHe=i(m),_r=n(m,"DIV",{class:!0});var hi=s(_r);T(Ck.$$.fragment,hi),fQr=i(hi),dm=n(hi,"P",{});var Fse=s(dm);gQr=r(Fse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),nre=n(Fse,"A",{href:!0});var pJt=s(nre);hQr=r(pJt,"from_pretrained()"),pJt.forEach(t),uQr=r(Fse," class method or the "),sre=n(Fse,"A",{href:!0});var _Jt=s(sre);pQr=r(_Jt,"from_config()"),_Jt.forEach(t),_Qr=r(Fse,` class
method.`),Fse.forEach(t),bQr=i(hi),wk=n(hi,"P",{});var sKe=s(wk);vQr=r(sKe,"This class cannot be instantiated directly using "),pAe=n(sKe,"CODE",{});var bJt=s(pAe);FQr=r(bJt,"__init__()"),bJt.forEach(t),TQr=r(sKe," (throws an error)."),sKe.forEach(t),MQr=i(hi),Yt=n(hi,"DIV",{class:!0});var Gy=s(Yt);T(Ak.$$.fragment,Gy),EQr=i(Gy),_Ae=n(Gy,"P",{});var vJt=s(_Ae);CQr=r(vJt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),vJt.forEach(t),wQr=i(Gy),cm=n(Gy,"P",{});var Tse=s(cm);AQr=r(Tse,`Note:
Loading a model from its configuration file does `),bAe=n(Tse,"STRONG",{});var FJt=s(bAe);LQr=r(FJt,"not"),FJt.forEach(t),yQr=r(Tse,` load the model weights. It only affects the
model\u2019s configuration. Use `),lre=n(Tse,"A",{href:!0});var TJt=s(lre);xQr=r(TJt,"from_pretrained()"),TJt.forEach(t),$Qr=r(Tse," to load the model weights."),Tse.forEach(t),kQr=i(Gy),T(e6.$$.fragment,Gy),Gy.forEach(t),SQr=i(hi),Wr=n(hi,"DIV",{class:!0});var ui=s(Wr);T(Lk.$$.fragment,ui),RQr=i(ui),vAe=n(ui,"P",{});var MJt=s(vAe);PQr=r(MJt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),MJt.forEach(t),BQr=i(ui),xn=n(ui,"P",{});var Oy=s(xn);IQr=r(Oy,"The model class to instantiate is selected based on the "),FAe=n(Oy,"CODE",{});var EJt=s(FAe);NQr=r(EJt,"model_type"),EJt.forEach(t),qQr=r(Oy,` property of the config object (either
passed as an argument or loaded from `),TAe=n(Oy,"CODE",{});var CJt=s(TAe);jQr=r(CJt,"pretrained_model_name_or_path"),CJt.forEach(t),DQr=r(Oy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),MAe=n(Oy,"CODE",{});var wJt=s(MAe);GQr=r(wJt,"pretrained_model_name_or_path"),wJt.forEach(t),OQr=r(Oy,":"),Oy.forEach(t),VQr=i(ui),EAe=n(ui,"UL",{});var AJt=s(EAe);o6=n(AJt,"LI",{});var sWe=s(o6);CAe=n(sWe,"STRONG",{});var LJt=s(CAe);XQr=r(LJt,"vision-encoder-decoder"),LJt.forEach(t),zQr=r(sWe," \u2014 "),ire=n(sWe,"A",{href:!0});var yJt=s(ire);WQr=r(yJt,"TFVisionEncoderDecoderModel"),yJt.forEach(t),QQr=r(sWe," (Vision Encoder decoder model)"),sWe.forEach(t),AJt.forEach(t),UQr=i(ui),T(r6.$$.fragment,ui),ui.forEach(t),hi.forEach(t),QHe=i(m),mm=n(m,"H2",{class:!0});var lKe=s(mm);t6=n(lKe,"A",{id:!0,class:!0,href:!0});var xJt=s(t6);wAe=n(xJt,"SPAN",{});var $Jt=s(wAe);T(yk.$$.fragment,$Jt),$Jt.forEach(t),xJt.forEach(t),HQr=i(lKe),AAe=n(lKe,"SPAN",{});var kJt=s(AAe);JQr=r(kJt,"TFAutoModelForSpeechSeq2Seq"),kJt.forEach(t),lKe.forEach(t),UHe=i(m),br=n(m,"DIV",{class:!0});var pi=s(br);T(xk.$$.fragment,pi),YQr=i(pi),fm=n(pi,"P",{});var Mse=s(fm);KQr=r(Mse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),dre=n(Mse,"A",{href:!0});var SJt=s(dre);ZQr=r(SJt,"from_pretrained()"),SJt.forEach(t),eUr=r(Mse," class method or the "),cre=n(Mse,"A",{href:!0});var RJt=s(cre);oUr=r(RJt,"from_config()"),RJt.forEach(t),rUr=r(Mse,` class
method.`),Mse.forEach(t),tUr=i(pi),$k=n(pi,"P",{});var iKe=s($k);aUr=r(iKe,"This class cannot be instantiated directly using "),LAe=n(iKe,"CODE",{});var PJt=s(LAe);nUr=r(PJt,"__init__()"),PJt.forEach(t),sUr=r(iKe," (throws an error)."),iKe.forEach(t),lUr=i(pi),Kt=n(pi,"DIV",{class:!0});var Vy=s(Kt);T(kk.$$.fragment,Vy),iUr=i(Vy),yAe=n(Vy,"P",{});var BJt=s(yAe);dUr=r(BJt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),BJt.forEach(t),cUr=i(Vy),gm=n(Vy,"P",{});var Ese=s(gm);mUr=r(Ese,`Note:
Loading a model from its configuration file does `),xAe=n(Ese,"STRONG",{});var IJt=s(xAe);fUr=r(IJt,"not"),IJt.forEach(t),gUr=r(Ese,` load the model weights. It only affects the
model\u2019s configuration. Use `),mre=n(Ese,"A",{href:!0});var NJt=s(mre);hUr=r(NJt,"from_pretrained()"),NJt.forEach(t),uUr=r(Ese," to load the model weights."),Ese.forEach(t),pUr=i(Vy),T(a6.$$.fragment,Vy),Vy.forEach(t),_Ur=i(pi),Qr=n(pi,"DIV",{class:!0});var _i=s(Qr);T(Sk.$$.fragment,_i),bUr=i(_i),$Ae=n(_i,"P",{});var qJt=s($Ae);vUr=r(qJt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),qJt.forEach(t),FUr=i(_i),$n=n(_i,"P",{});var Xy=s($n);TUr=r(Xy,"The model class to instantiate is selected based on the "),kAe=n(Xy,"CODE",{});var jJt=s(kAe);MUr=r(jJt,"model_type"),jJt.forEach(t),EUr=r(Xy,` property of the config object (either
passed as an argument or loaded from `),SAe=n(Xy,"CODE",{});var DJt=s(SAe);CUr=r(DJt,"pretrained_model_name_or_path"),DJt.forEach(t),wUr=r(Xy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),RAe=n(Xy,"CODE",{});var GJt=s(RAe);AUr=r(GJt,"pretrained_model_name_or_path"),GJt.forEach(t),LUr=r(Xy,":"),Xy.forEach(t),yUr=i(_i),PAe=n(_i,"UL",{});var OJt=s(PAe);n6=n(OJt,"LI",{});var lWe=s(n6);BAe=n(lWe,"STRONG",{});var VJt=s(BAe);xUr=r(VJt,"speech_to_text"),VJt.forEach(t),$Ur=r(lWe," \u2014 "),fre=n(lWe,"A",{href:!0});var XJt=s(fre);kUr=r(XJt,"TFSpeech2TextForConditionalGeneration"),XJt.forEach(t),SUr=r(lWe," (Speech2Text model)"),lWe.forEach(t),OJt.forEach(t),RUr=i(_i),T(s6.$$.fragment,_i),_i.forEach(t),pi.forEach(t),HHe=i(m),hm=n(m,"H2",{class:!0});var dKe=s(hm);l6=n(dKe,"A",{id:!0,class:!0,href:!0});var zJt=s(l6);IAe=n(zJt,"SPAN",{});var WJt=s(IAe);T(Rk.$$.fragment,WJt),WJt.forEach(t),zJt.forEach(t),PUr=i(dKe),NAe=n(dKe,"SPAN",{});var QJt=s(NAe);BUr=r(QJt,"FlaxAutoModel"),QJt.forEach(t),dKe.forEach(t),JHe=i(m),vr=n(m,"DIV",{class:!0});var bi=s(vr);T(Pk.$$.fragment,bi),IUr=i(bi),um=n(bi,"P",{});var Cse=s(um);NUr=r(Cse,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),gre=n(Cse,"A",{href:!0});var UJt=s(gre);qUr=r(UJt,"from_pretrained()"),UJt.forEach(t),jUr=r(Cse," class method or the "),hre=n(Cse,"A",{href:!0});var HJt=s(hre);DUr=r(HJt,"from_config()"),HJt.forEach(t),GUr=r(Cse,` class
method.`),Cse.forEach(t),OUr=i(bi),Bk=n(bi,"P",{});var cKe=s(Bk);VUr=r(cKe,"This class cannot be instantiated directly using "),qAe=n(cKe,"CODE",{});var JJt=s(qAe);XUr=r(JJt,"__init__()"),JJt.forEach(t),zUr=r(cKe," (throws an error)."),cKe.forEach(t),WUr=i(bi),Zt=n(bi,"DIV",{class:!0});var zy=s(Zt);T(Ik.$$.fragment,zy),QUr=i(zy),jAe=n(zy,"P",{});var YJt=s(jAe);UUr=r(YJt,"Instantiates one of the base model classes of the library from a configuration."),YJt.forEach(t),HUr=i(zy),pm=n(zy,"P",{});var wse=s(pm);JUr=r(wse,`Note:
Loading a model from its configuration file does `),DAe=n(wse,"STRONG",{});var KJt=s(DAe);YUr=r(KJt,"not"),KJt.forEach(t),KUr=r(wse,` load the model weights. It only affects the
model\u2019s configuration. Use `),ure=n(wse,"A",{href:!0});var ZJt=s(ure);ZUr=r(ZJt,"from_pretrained()"),ZJt.forEach(t),eHr=r(wse," to load the model weights."),wse.forEach(t),oHr=i(zy),T(i6.$$.fragment,zy),zy.forEach(t),rHr=i(bi),Ur=n(bi,"DIV",{class:!0});var vi=s(Ur);T(Nk.$$.fragment,vi),tHr=i(vi),GAe=n(vi,"P",{});var eYt=s(GAe);aHr=r(eYt,"Instantiate one of the base model classes of the library from a pretrained model."),eYt.forEach(t),nHr=i(vi),kn=n(vi,"P",{});var Wy=s(kn);sHr=r(Wy,"The model class to instantiate is selected based on the "),OAe=n(Wy,"CODE",{});var oYt=s(OAe);lHr=r(oYt,"model_type"),oYt.forEach(t),iHr=r(Wy,` property of the config object (either
passed as an argument or loaded from `),VAe=n(Wy,"CODE",{});var rYt=s(VAe);dHr=r(rYt,"pretrained_model_name_or_path"),rYt.forEach(t),cHr=r(Wy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),XAe=n(Wy,"CODE",{});var tYt=s(XAe);mHr=r(tYt,"pretrained_model_name_or_path"),tYt.forEach(t),fHr=r(Wy,":"),Wy.forEach(t),gHr=i(vi),te=n(vi,"UL",{});var ne=s(te);d6=n(ne,"LI",{});var iWe=s(d6);zAe=n(iWe,"STRONG",{});var aYt=s(zAe);hHr=r(aYt,"albert"),aYt.forEach(t),uHr=r(iWe," \u2014 "),pre=n(iWe,"A",{href:!0});var nYt=s(pre);pHr=r(nYt,"FlaxAlbertModel"),nYt.forEach(t),_Hr=r(iWe," (ALBERT model)"),iWe.forEach(t),bHr=i(ne),c6=n(ne,"LI",{});var dWe=s(c6);WAe=n(dWe,"STRONG",{});var sYt=s(WAe);vHr=r(sYt,"bart"),sYt.forEach(t),FHr=r(dWe," \u2014 "),_re=n(dWe,"A",{href:!0});var lYt=s(_re);THr=r(lYt,"FlaxBartModel"),lYt.forEach(t),MHr=r(dWe," (BART model)"),dWe.forEach(t),EHr=i(ne),m6=n(ne,"LI",{});var cWe=s(m6);QAe=n(cWe,"STRONG",{});var iYt=s(QAe);CHr=r(iYt,"beit"),iYt.forEach(t),wHr=r(cWe," \u2014 "),bre=n(cWe,"A",{href:!0});var dYt=s(bre);AHr=r(dYt,"FlaxBeitModel"),dYt.forEach(t),LHr=r(cWe," (BEiT model)"),cWe.forEach(t),yHr=i(ne),f6=n(ne,"LI",{});var mWe=s(f6);UAe=n(mWe,"STRONG",{});var cYt=s(UAe);xHr=r(cYt,"bert"),cYt.forEach(t),$Hr=r(mWe," \u2014 "),vre=n(mWe,"A",{href:!0});var mYt=s(vre);kHr=r(mYt,"FlaxBertModel"),mYt.forEach(t),SHr=r(mWe," (BERT model)"),mWe.forEach(t),RHr=i(ne),g6=n(ne,"LI",{});var fWe=s(g6);HAe=n(fWe,"STRONG",{});var fYt=s(HAe);PHr=r(fYt,"big_bird"),fYt.forEach(t),BHr=r(fWe," \u2014 "),Fre=n(fWe,"A",{href:!0});var gYt=s(Fre);IHr=r(gYt,"FlaxBigBirdModel"),gYt.forEach(t),NHr=r(fWe," (BigBird model)"),fWe.forEach(t),qHr=i(ne),h6=n(ne,"LI",{});var gWe=s(h6);JAe=n(gWe,"STRONG",{});var hYt=s(JAe);jHr=r(hYt,"blenderbot"),hYt.forEach(t),DHr=r(gWe," \u2014 "),Tre=n(gWe,"A",{href:!0});var uYt=s(Tre);GHr=r(uYt,"FlaxBlenderbotModel"),uYt.forEach(t),OHr=r(gWe," (Blenderbot model)"),gWe.forEach(t),VHr=i(ne),u6=n(ne,"LI",{});var hWe=s(u6);YAe=n(hWe,"STRONG",{});var pYt=s(YAe);XHr=r(pYt,"blenderbot-small"),pYt.forEach(t),zHr=r(hWe," \u2014 "),Mre=n(hWe,"A",{href:!0});var _Yt=s(Mre);WHr=r(_Yt,"FlaxBlenderbotSmallModel"),_Yt.forEach(t),QHr=r(hWe," (BlenderbotSmall model)"),hWe.forEach(t),UHr=i(ne),p6=n(ne,"LI",{});var uWe=s(p6);KAe=n(uWe,"STRONG",{});var bYt=s(KAe);HHr=r(bYt,"clip"),bYt.forEach(t),JHr=r(uWe," \u2014 "),Ere=n(uWe,"A",{href:!0});var vYt=s(Ere);YHr=r(vYt,"FlaxCLIPModel"),vYt.forEach(t),KHr=r(uWe," (CLIP model)"),uWe.forEach(t),ZHr=i(ne),_6=n(ne,"LI",{});var pWe=s(_6);ZAe=n(pWe,"STRONG",{});var FYt=s(ZAe);eJr=r(FYt,"distilbert"),FYt.forEach(t),oJr=r(pWe," \u2014 "),Cre=n(pWe,"A",{href:!0});var TYt=s(Cre);rJr=r(TYt,"FlaxDistilBertModel"),TYt.forEach(t),tJr=r(pWe," (DistilBERT model)"),pWe.forEach(t),aJr=i(ne),b6=n(ne,"LI",{});var _We=s(b6);e7e=n(_We,"STRONG",{});var MYt=s(e7e);nJr=r(MYt,"electra"),MYt.forEach(t),sJr=r(_We," \u2014 "),wre=n(_We,"A",{href:!0});var EYt=s(wre);lJr=r(EYt,"FlaxElectraModel"),EYt.forEach(t),iJr=r(_We," (ELECTRA model)"),_We.forEach(t),dJr=i(ne),v6=n(ne,"LI",{});var bWe=s(v6);o7e=n(bWe,"STRONG",{});var CYt=s(o7e);cJr=r(CYt,"gpt2"),CYt.forEach(t),mJr=r(bWe," \u2014 "),Are=n(bWe,"A",{href:!0});var wYt=s(Are);fJr=r(wYt,"FlaxGPT2Model"),wYt.forEach(t),gJr=r(bWe," (OpenAI GPT-2 model)"),bWe.forEach(t),hJr=i(ne),F6=n(ne,"LI",{});var vWe=s(F6);r7e=n(vWe,"STRONG",{});var AYt=s(r7e);uJr=r(AYt,"gpt_neo"),AYt.forEach(t),pJr=r(vWe," \u2014 "),Lre=n(vWe,"A",{href:!0});var LYt=s(Lre);_Jr=r(LYt,"FlaxGPTNeoModel"),LYt.forEach(t),bJr=r(vWe," (GPT Neo model)"),vWe.forEach(t),vJr=i(ne),T6=n(ne,"LI",{});var FWe=s(T6);t7e=n(FWe,"STRONG",{});var yYt=s(t7e);FJr=r(yYt,"gptj"),yYt.forEach(t),TJr=r(FWe," \u2014 "),yre=n(FWe,"A",{href:!0});var xYt=s(yre);MJr=r(xYt,"FlaxGPTJModel"),xYt.forEach(t),EJr=r(FWe," (GPT-J model)"),FWe.forEach(t),CJr=i(ne),M6=n(ne,"LI",{});var TWe=s(M6);a7e=n(TWe,"STRONG",{});var $Yt=s(a7e);wJr=r($Yt,"longt5"),$Yt.forEach(t),AJr=r(TWe," \u2014 "),xre=n(TWe,"A",{href:!0});var kYt=s(xre);LJr=r(kYt,"FlaxLongT5Model"),kYt.forEach(t),yJr=r(TWe," (LongT5 model)"),TWe.forEach(t),xJr=i(ne),E6=n(ne,"LI",{});var MWe=s(E6);n7e=n(MWe,"STRONG",{});var SYt=s(n7e);$Jr=r(SYt,"marian"),SYt.forEach(t),kJr=r(MWe," \u2014 "),$re=n(MWe,"A",{href:!0});var RYt=s($re);SJr=r(RYt,"FlaxMarianModel"),RYt.forEach(t),RJr=r(MWe," (Marian model)"),MWe.forEach(t),PJr=i(ne),C6=n(ne,"LI",{});var EWe=s(C6);s7e=n(EWe,"STRONG",{});var PYt=s(s7e);BJr=r(PYt,"mbart"),PYt.forEach(t),IJr=r(EWe," \u2014 "),kre=n(EWe,"A",{href:!0});var BYt=s(kre);NJr=r(BYt,"FlaxMBartModel"),BYt.forEach(t),qJr=r(EWe," (mBART model)"),EWe.forEach(t),jJr=i(ne),w6=n(ne,"LI",{});var CWe=s(w6);l7e=n(CWe,"STRONG",{});var IYt=s(l7e);DJr=r(IYt,"mt5"),IYt.forEach(t),GJr=r(CWe," \u2014 "),Sre=n(CWe,"A",{href:!0});var NYt=s(Sre);OJr=r(NYt,"FlaxMT5Model"),NYt.forEach(t),VJr=r(CWe," (MT5 model)"),CWe.forEach(t),XJr=i(ne),A6=n(ne,"LI",{});var wWe=s(A6);i7e=n(wWe,"STRONG",{});var qYt=s(i7e);zJr=r(qYt,"opt"),qYt.forEach(t),WJr=r(wWe," \u2014 "),Rre=n(wWe,"A",{href:!0});var jYt=s(Rre);QJr=r(jYt,"FlaxOPTModel"),jYt.forEach(t),UJr=r(wWe," (OPT model)"),wWe.forEach(t),HJr=i(ne),L6=n(ne,"LI",{});var AWe=s(L6);d7e=n(AWe,"STRONG",{});var DYt=s(d7e);JJr=r(DYt,"pegasus"),DYt.forEach(t),YJr=r(AWe," \u2014 "),Pre=n(AWe,"A",{href:!0});var GYt=s(Pre);KJr=r(GYt,"FlaxPegasusModel"),GYt.forEach(t),ZJr=r(AWe," (Pegasus model)"),AWe.forEach(t),eYr=i(ne),y6=n(ne,"LI",{});var LWe=s(y6);c7e=n(LWe,"STRONG",{});var OYt=s(c7e);oYr=r(OYt,"roberta"),OYt.forEach(t),rYr=r(LWe," \u2014 "),Bre=n(LWe,"A",{href:!0});var VYt=s(Bre);tYr=r(VYt,"FlaxRobertaModel"),VYt.forEach(t),aYr=r(LWe," (RoBERTa model)"),LWe.forEach(t),nYr=i(ne),x6=n(ne,"LI",{});var yWe=s(x6);m7e=n(yWe,"STRONG",{});var XYt=s(m7e);sYr=r(XYt,"roformer"),XYt.forEach(t),lYr=r(yWe," \u2014 "),Ire=n(yWe,"A",{href:!0});var zYt=s(Ire);iYr=r(zYt,"FlaxRoFormerModel"),zYt.forEach(t),dYr=r(yWe," (RoFormer model)"),yWe.forEach(t),cYr=i(ne),$6=n(ne,"LI",{});var xWe=s($6);f7e=n(xWe,"STRONG",{});var WYt=s(f7e);mYr=r(WYt,"t5"),WYt.forEach(t),fYr=r(xWe," \u2014 "),Nre=n(xWe,"A",{href:!0});var QYt=s(Nre);gYr=r(QYt,"FlaxT5Model"),QYt.forEach(t),hYr=r(xWe," (T5 model)"),xWe.forEach(t),uYr=i(ne),k6=n(ne,"LI",{});var $We=s(k6);g7e=n($We,"STRONG",{});var UYt=s(g7e);pYr=r(UYt,"vision-text-dual-encoder"),UYt.forEach(t),_Yr=r($We," \u2014 "),qre=n($We,"A",{href:!0});var HYt=s(qre);bYr=r(HYt,"FlaxVisionTextDualEncoderModel"),HYt.forEach(t),vYr=r($We," (VisionTextDualEncoder model)"),$We.forEach(t),FYr=i(ne),S6=n(ne,"LI",{});var kWe=s(S6);h7e=n(kWe,"STRONG",{});var JYt=s(h7e);TYr=r(JYt,"vit"),JYt.forEach(t),MYr=r(kWe," \u2014 "),jre=n(kWe,"A",{href:!0});var YYt=s(jre);EYr=r(YYt,"FlaxViTModel"),YYt.forEach(t),CYr=r(kWe," (ViT model)"),kWe.forEach(t),wYr=i(ne),R6=n(ne,"LI",{});var SWe=s(R6);u7e=n(SWe,"STRONG",{});var KYt=s(u7e);AYr=r(KYt,"wav2vec2"),KYt.forEach(t),LYr=r(SWe," \u2014 "),Dre=n(SWe,"A",{href:!0});var ZYt=s(Dre);yYr=r(ZYt,"FlaxWav2Vec2Model"),ZYt.forEach(t),xYr=r(SWe," (Wav2Vec2 model)"),SWe.forEach(t),$Yr=i(ne),P6=n(ne,"LI",{});var RWe=s(P6);p7e=n(RWe,"STRONG",{});var eKt=s(p7e);kYr=r(eKt,"xglm"),eKt.forEach(t),SYr=r(RWe," \u2014 "),Gre=n(RWe,"A",{href:!0});var oKt=s(Gre);RYr=r(oKt,"FlaxXGLMModel"),oKt.forEach(t),PYr=r(RWe," (XGLM model)"),RWe.forEach(t),BYr=i(ne),B6=n(ne,"LI",{});var PWe=s(B6);_7e=n(PWe,"STRONG",{});var rKt=s(_7e);IYr=r(rKt,"xlm-roberta"),rKt.forEach(t),NYr=r(PWe," \u2014 "),Ore=n(PWe,"A",{href:!0});var tKt=s(Ore);qYr=r(tKt,"FlaxXLMRobertaModel"),tKt.forEach(t),jYr=r(PWe," (XLM-RoBERTa model)"),PWe.forEach(t),ne.forEach(t),DYr=i(vi),T(I6.$$.fragment,vi),vi.forEach(t),bi.forEach(t),YHe=i(m),_m=n(m,"H2",{class:!0});var mKe=s(_m);N6=n(mKe,"A",{id:!0,class:!0,href:!0});var aKt=s(N6);b7e=n(aKt,"SPAN",{});var nKt=s(b7e);T(qk.$$.fragment,nKt),nKt.forEach(t),aKt.forEach(t),GYr=i(mKe),v7e=n(mKe,"SPAN",{});var sKt=s(v7e);OYr=r(sKt,"FlaxAutoModelForCausalLM"),sKt.forEach(t),mKe.forEach(t),KHe=i(m),Fr=n(m,"DIV",{class:!0});var Fi=s(Fr);T(jk.$$.fragment,Fi),VYr=i(Fi),bm=n(Fi,"P",{});var Ase=s(bm);XYr=r(Ase,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),Vre=n(Ase,"A",{href:!0});var lKt=s(Vre);zYr=r(lKt,"from_pretrained()"),lKt.forEach(t),WYr=r(Ase," class method or the "),Xre=n(Ase,"A",{href:!0});var iKt=s(Xre);QYr=r(iKt,"from_config()"),iKt.forEach(t),UYr=r(Ase,` class
method.`),Ase.forEach(t),HYr=i(Fi),Dk=n(Fi,"P",{});var fKe=s(Dk);JYr=r(fKe,"This class cannot be instantiated directly using "),F7e=n(fKe,"CODE",{});var dKt=s(F7e);YYr=r(dKt,"__init__()"),dKt.forEach(t),KYr=r(fKe," (throws an error)."),fKe.forEach(t),ZYr=i(Fi),ea=n(Fi,"DIV",{class:!0});var Qy=s(ea);T(Gk.$$.fragment,Qy),eKr=i(Qy),T7e=n(Qy,"P",{});var cKt=s(T7e);oKr=r(cKt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),cKt.forEach(t),rKr=i(Qy),vm=n(Qy,"P",{});var Lse=s(vm);tKr=r(Lse,`Note:
Loading a model from its configuration file does `),M7e=n(Lse,"STRONG",{});var mKt=s(M7e);aKr=r(mKt,"not"),mKt.forEach(t),nKr=r(Lse,` load the model weights. It only affects the
model\u2019s configuration. Use `),zre=n(Lse,"A",{href:!0});var fKt=s(zre);sKr=r(fKt,"from_pretrained()"),fKt.forEach(t),lKr=r(Lse," to load the model weights."),Lse.forEach(t),iKr=i(Qy),T(q6.$$.fragment,Qy),Qy.forEach(t),dKr=i(Fi),Hr=n(Fi,"DIV",{class:!0});var Ti=s(Hr);T(Ok.$$.fragment,Ti),cKr=i(Ti),E7e=n(Ti,"P",{});var gKt=s(E7e);mKr=r(gKt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),gKt.forEach(t),fKr=i(Ti),Sn=n(Ti,"P",{});var Uy=s(Sn);gKr=r(Uy,"The model class to instantiate is selected based on the "),C7e=n(Uy,"CODE",{});var hKt=s(C7e);hKr=r(hKt,"model_type"),hKt.forEach(t),uKr=r(Uy,` property of the config object (either
passed as an argument or loaded from `),w7e=n(Uy,"CODE",{});var uKt=s(w7e);pKr=r(uKt,"pretrained_model_name_or_path"),uKt.forEach(t),_Kr=r(Uy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A7e=n(Uy,"CODE",{});var pKt=s(A7e);bKr=r(pKt,"pretrained_model_name_or_path"),pKt.forEach(t),vKr=r(Uy,":"),Uy.forEach(t),FKr=i(Ti),xe=n(Ti,"UL",{});var Ne=s(xe);j6=n(Ne,"LI",{});var BWe=s(j6);L7e=n(BWe,"STRONG",{});var _Kt=s(L7e);TKr=r(_Kt,"bart"),_Kt.forEach(t),MKr=r(BWe," \u2014 "),Wre=n(BWe,"A",{href:!0});var bKt=s(Wre);EKr=r(bKt,"FlaxBartForCausalLM"),bKt.forEach(t),CKr=r(BWe," (BART model)"),BWe.forEach(t),wKr=i(Ne),D6=n(Ne,"LI",{});var IWe=s(D6);y7e=n(IWe,"STRONG",{});var vKt=s(y7e);AKr=r(vKt,"bert"),vKt.forEach(t),LKr=r(IWe," \u2014 "),Qre=n(IWe,"A",{href:!0});var FKt=s(Qre);yKr=r(FKt,"FlaxBertForCausalLM"),FKt.forEach(t),xKr=r(IWe," (BERT model)"),IWe.forEach(t),$Kr=i(Ne),G6=n(Ne,"LI",{});var NWe=s(G6);x7e=n(NWe,"STRONG",{});var TKt=s(x7e);kKr=r(TKt,"big_bird"),TKt.forEach(t),SKr=r(NWe," \u2014 "),Ure=n(NWe,"A",{href:!0});var MKt=s(Ure);RKr=r(MKt,"FlaxBigBirdForCausalLM"),MKt.forEach(t),PKr=r(NWe," (BigBird model)"),NWe.forEach(t),BKr=i(Ne),O6=n(Ne,"LI",{});var qWe=s(O6);$7e=n(qWe,"STRONG",{});var EKt=s($7e);IKr=r(EKt,"electra"),EKt.forEach(t),NKr=r(qWe," \u2014 "),Hre=n(qWe,"A",{href:!0});var CKt=s(Hre);qKr=r(CKt,"FlaxElectraForCausalLM"),CKt.forEach(t),jKr=r(qWe," (ELECTRA model)"),qWe.forEach(t),DKr=i(Ne),V6=n(Ne,"LI",{});var jWe=s(V6);k7e=n(jWe,"STRONG",{});var wKt=s(k7e);GKr=r(wKt,"gpt2"),wKt.forEach(t),OKr=r(jWe," \u2014 "),Jre=n(jWe,"A",{href:!0});var AKt=s(Jre);VKr=r(AKt,"FlaxGPT2LMHeadModel"),AKt.forEach(t),XKr=r(jWe," (OpenAI GPT-2 model)"),jWe.forEach(t),zKr=i(Ne),X6=n(Ne,"LI",{});var DWe=s(X6);S7e=n(DWe,"STRONG",{});var LKt=s(S7e);WKr=r(LKt,"gpt_neo"),LKt.forEach(t),QKr=r(DWe," \u2014 "),Yre=n(DWe,"A",{href:!0});var yKt=s(Yre);UKr=r(yKt,"FlaxGPTNeoForCausalLM"),yKt.forEach(t),HKr=r(DWe," (GPT Neo model)"),DWe.forEach(t),JKr=i(Ne),z6=n(Ne,"LI",{});var GWe=s(z6);R7e=n(GWe,"STRONG",{});var xKt=s(R7e);YKr=r(xKt,"gptj"),xKt.forEach(t),KKr=r(GWe," \u2014 "),Kre=n(GWe,"A",{href:!0});var $Kt=s(Kre);ZKr=r($Kt,"FlaxGPTJForCausalLM"),$Kt.forEach(t),eZr=r(GWe," (GPT-J model)"),GWe.forEach(t),oZr=i(Ne),W6=n(Ne,"LI",{});var OWe=s(W6);P7e=n(OWe,"STRONG",{});var kKt=s(P7e);rZr=r(kKt,"opt"),kKt.forEach(t),tZr=r(OWe," \u2014 "),Zre=n(OWe,"A",{href:!0});var SKt=s(Zre);aZr=r(SKt,"FlaxOPTForCausalLM"),SKt.forEach(t),nZr=r(OWe," (OPT model)"),OWe.forEach(t),sZr=i(Ne),Q6=n(Ne,"LI",{});var VWe=s(Q6);B7e=n(VWe,"STRONG",{});var RKt=s(B7e);lZr=r(RKt,"roberta"),RKt.forEach(t),iZr=r(VWe," \u2014 "),ete=n(VWe,"A",{href:!0});var PKt=s(ete);dZr=r(PKt,"FlaxRobertaForCausalLM"),PKt.forEach(t),cZr=r(VWe," (RoBERTa model)"),VWe.forEach(t),mZr=i(Ne),U6=n(Ne,"LI",{});var XWe=s(U6);I7e=n(XWe,"STRONG",{});var BKt=s(I7e);fZr=r(BKt,"xglm"),BKt.forEach(t),gZr=r(XWe," \u2014 "),ote=n(XWe,"A",{href:!0});var IKt=s(ote);hZr=r(IKt,"FlaxXGLMForCausalLM"),IKt.forEach(t),uZr=r(XWe," (XGLM model)"),XWe.forEach(t),Ne.forEach(t),pZr=i(Ti),T(H6.$$.fragment,Ti),Ti.forEach(t),Fi.forEach(t),ZHe=i(m),Fm=n(m,"H2",{class:!0});var gKe=s(Fm);J6=n(gKe,"A",{id:!0,class:!0,href:!0});var NKt=s(J6);N7e=n(NKt,"SPAN",{});var qKt=s(N7e);T(Vk.$$.fragment,qKt),qKt.forEach(t),NKt.forEach(t),_Zr=i(gKe),q7e=n(gKe,"SPAN",{});var jKt=s(q7e);bZr=r(jKt,"FlaxAutoModelForPreTraining"),jKt.forEach(t),gKe.forEach(t),eJe=i(m),Tr=n(m,"DIV",{class:!0});var Mi=s(Tr);T(Xk.$$.fragment,Mi),vZr=i(Mi),Tm=n(Mi,"P",{});var yse=s(Tm);FZr=r(yse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),rte=n(yse,"A",{href:!0});var DKt=s(rte);TZr=r(DKt,"from_pretrained()"),DKt.forEach(t),MZr=r(yse," class method or the "),tte=n(yse,"A",{href:!0});var GKt=s(tte);EZr=r(GKt,"from_config()"),GKt.forEach(t),CZr=r(yse,` class
method.`),yse.forEach(t),wZr=i(Mi),zk=n(Mi,"P",{});var hKe=s(zk);AZr=r(hKe,"This class cannot be instantiated directly using "),j7e=n(hKe,"CODE",{});var OKt=s(j7e);LZr=r(OKt,"__init__()"),OKt.forEach(t),yZr=r(hKe," (throws an error)."),hKe.forEach(t),xZr=i(Mi),oa=n(Mi,"DIV",{class:!0});var Hy=s(oa);T(Wk.$$.fragment,Hy),$Zr=i(Hy),D7e=n(Hy,"P",{});var VKt=s(D7e);kZr=r(VKt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),VKt.forEach(t),SZr=i(Hy),Mm=n(Hy,"P",{});var xse=s(Mm);RZr=r(xse,`Note:
Loading a model from its configuration file does `),G7e=n(xse,"STRONG",{});var XKt=s(G7e);PZr=r(XKt,"not"),XKt.forEach(t),BZr=r(xse,` load the model weights. It only affects the
model\u2019s configuration. Use `),ate=n(xse,"A",{href:!0});var zKt=s(ate);IZr=r(zKt,"from_pretrained()"),zKt.forEach(t),NZr=r(xse," to load the model weights."),xse.forEach(t),qZr=i(Hy),T(Y6.$$.fragment,Hy),Hy.forEach(t),jZr=i(Mi),Jr=n(Mi,"DIV",{class:!0});var Ei=s(Jr);T(Qk.$$.fragment,Ei),DZr=i(Ei),O7e=n(Ei,"P",{});var WKt=s(O7e);GZr=r(WKt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),WKt.forEach(t),OZr=i(Ei),Rn=n(Ei,"P",{});var Jy=s(Rn);VZr=r(Jy,"The model class to instantiate is selected based on the "),V7e=n(Jy,"CODE",{});var QKt=s(V7e);XZr=r(QKt,"model_type"),QKt.forEach(t),zZr=r(Jy,` property of the config object (either
passed as an argument or loaded from `),X7e=n(Jy,"CODE",{});var UKt=s(X7e);WZr=r(UKt,"pretrained_model_name_or_path"),UKt.forEach(t),QZr=r(Jy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z7e=n(Jy,"CODE",{});var HKt=s(z7e);UZr=r(HKt,"pretrained_model_name_or_path"),HKt.forEach(t),HZr=r(Jy,":"),Jy.forEach(t),JZr=i(Ei),Ee=n(Ei,"UL",{});var we=s(Ee);K6=n(we,"LI",{});var zWe=s(K6);W7e=n(zWe,"STRONG",{});var JKt=s(W7e);YZr=r(JKt,"albert"),JKt.forEach(t),KZr=r(zWe," \u2014 "),nte=n(zWe,"A",{href:!0});var YKt=s(nte);ZZr=r(YKt,"FlaxAlbertForPreTraining"),YKt.forEach(t),eet=r(zWe," (ALBERT model)"),zWe.forEach(t),oet=i(we),Z6=n(we,"LI",{});var WWe=s(Z6);Q7e=n(WWe,"STRONG",{});var KKt=s(Q7e);ret=r(KKt,"bart"),KKt.forEach(t),tet=r(WWe," \u2014 "),ste=n(WWe,"A",{href:!0});var ZKt=s(ste);aet=r(ZKt,"FlaxBartForConditionalGeneration"),ZKt.forEach(t),net=r(WWe," (BART model)"),WWe.forEach(t),set=i(we),eA=n(we,"LI",{});var QWe=s(eA);U7e=n(QWe,"STRONG",{});var eZt=s(U7e);iet=r(eZt,"bert"),eZt.forEach(t),det=r(QWe," \u2014 "),lte=n(QWe,"A",{href:!0});var oZt=s(lte);cet=r(oZt,"FlaxBertForPreTraining"),oZt.forEach(t),met=r(QWe," (BERT model)"),QWe.forEach(t),fet=i(we),oA=n(we,"LI",{});var UWe=s(oA);H7e=n(UWe,"STRONG",{});var rZt=s(H7e);get=r(rZt,"big_bird"),rZt.forEach(t),het=r(UWe," \u2014 "),ite=n(UWe,"A",{href:!0});var tZt=s(ite);uet=r(tZt,"FlaxBigBirdForPreTraining"),tZt.forEach(t),pet=r(UWe," (BigBird model)"),UWe.forEach(t),_et=i(we),rA=n(we,"LI",{});var HWe=s(rA);J7e=n(HWe,"STRONG",{});var aZt=s(J7e);bet=r(aZt,"electra"),aZt.forEach(t),vet=r(HWe," \u2014 "),dte=n(HWe,"A",{href:!0});var nZt=s(dte);Fet=r(nZt,"FlaxElectraForPreTraining"),nZt.forEach(t),Tet=r(HWe," (ELECTRA model)"),HWe.forEach(t),Met=i(we),tA=n(we,"LI",{});var JWe=s(tA);Y7e=n(JWe,"STRONG",{});var sZt=s(Y7e);Eet=r(sZt,"longt5"),sZt.forEach(t),Cet=r(JWe," \u2014 "),cte=n(JWe,"A",{href:!0});var lZt=s(cte);wet=r(lZt,"FlaxLongT5ForConditionalGeneration"),lZt.forEach(t),Aet=r(JWe," (LongT5 model)"),JWe.forEach(t),Let=i(we),aA=n(we,"LI",{});var YWe=s(aA);K7e=n(YWe,"STRONG",{});var iZt=s(K7e);yet=r(iZt,"mbart"),iZt.forEach(t),xet=r(YWe," \u2014 "),mte=n(YWe,"A",{href:!0});var dZt=s(mte);$et=r(dZt,"FlaxMBartForConditionalGeneration"),dZt.forEach(t),ket=r(YWe," (mBART model)"),YWe.forEach(t),Set=i(we),nA=n(we,"LI",{});var KWe=s(nA);Z7e=n(KWe,"STRONG",{});var cZt=s(Z7e);Ret=r(cZt,"mt5"),cZt.forEach(t),Pet=r(KWe," \u2014 "),fte=n(KWe,"A",{href:!0});var mZt=s(fte);Bet=r(mZt,"FlaxMT5ForConditionalGeneration"),mZt.forEach(t),Iet=r(KWe," (MT5 model)"),KWe.forEach(t),Net=i(we),sA=n(we,"LI",{});var ZWe=s(sA);eLe=n(ZWe,"STRONG",{});var fZt=s(eLe);qet=r(fZt,"roberta"),fZt.forEach(t),jet=r(ZWe," \u2014 "),gte=n(ZWe,"A",{href:!0});var gZt=s(gte);Det=r(gZt,"FlaxRobertaForMaskedLM"),gZt.forEach(t),Get=r(ZWe," (RoBERTa model)"),ZWe.forEach(t),Oet=i(we),lA=n(we,"LI",{});var eQe=s(lA);oLe=n(eQe,"STRONG",{});var hZt=s(oLe);Vet=r(hZt,"roformer"),hZt.forEach(t),Xet=r(eQe," \u2014 "),hte=n(eQe,"A",{href:!0});var uZt=s(hte);zet=r(uZt,"FlaxRoFormerForMaskedLM"),uZt.forEach(t),Wet=r(eQe," (RoFormer model)"),eQe.forEach(t),Qet=i(we),iA=n(we,"LI",{});var oQe=s(iA);rLe=n(oQe,"STRONG",{});var pZt=s(rLe);Uet=r(pZt,"t5"),pZt.forEach(t),Het=r(oQe," \u2014 "),ute=n(oQe,"A",{href:!0});var _Zt=s(ute);Jet=r(_Zt,"FlaxT5ForConditionalGeneration"),_Zt.forEach(t),Yet=r(oQe," (T5 model)"),oQe.forEach(t),Ket=i(we),dA=n(we,"LI",{});var rQe=s(dA);tLe=n(rQe,"STRONG",{});var bZt=s(tLe);Zet=r(bZt,"wav2vec2"),bZt.forEach(t),eot=r(rQe," \u2014 "),pte=n(rQe,"A",{href:!0});var vZt=s(pte);oot=r(vZt,"FlaxWav2Vec2ForPreTraining"),vZt.forEach(t),rot=r(rQe," (Wav2Vec2 model)"),rQe.forEach(t),tot=i(we),cA=n(we,"LI",{});var tQe=s(cA);aLe=n(tQe,"STRONG",{});var FZt=s(aLe);aot=r(FZt,"xlm-roberta"),FZt.forEach(t),not=r(tQe," \u2014 "),_te=n(tQe,"A",{href:!0});var TZt=s(_te);sot=r(TZt,"FlaxXLMRobertaForMaskedLM"),TZt.forEach(t),lot=r(tQe," (XLM-RoBERTa model)"),tQe.forEach(t),we.forEach(t),iot=i(Ei),T(mA.$$.fragment,Ei),Ei.forEach(t),Mi.forEach(t),oJe=i(m),Em=n(m,"H2",{class:!0});var uKe=s(Em);fA=n(uKe,"A",{id:!0,class:!0,href:!0});var MZt=s(fA);nLe=n(MZt,"SPAN",{});var EZt=s(nLe);T(Uk.$$.fragment,EZt),EZt.forEach(t),MZt.forEach(t),dot=i(uKe),sLe=n(uKe,"SPAN",{});var CZt=s(sLe);cot=r(CZt,"FlaxAutoModelForMaskedLM"),CZt.forEach(t),uKe.forEach(t),rJe=i(m),Mr=n(m,"DIV",{class:!0});var Ci=s(Mr);T(Hk.$$.fragment,Ci),mot=i(Ci),Cm=n(Ci,"P",{});var $se=s(Cm);fot=r($se,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),bte=n($se,"A",{href:!0});var wZt=s(bte);got=r(wZt,"from_pretrained()"),wZt.forEach(t),hot=r($se," class method or the "),vte=n($se,"A",{href:!0});var AZt=s(vte);uot=r(AZt,"from_config()"),AZt.forEach(t),pot=r($se,` class
method.`),$se.forEach(t),_ot=i(Ci),Jk=n(Ci,"P",{});var pKe=s(Jk);bot=r(pKe,"This class cannot be instantiated directly using "),lLe=n(pKe,"CODE",{});var LZt=s(lLe);vot=r(LZt,"__init__()"),LZt.forEach(t),Fot=r(pKe," (throws an error)."),pKe.forEach(t),Tot=i(Ci),ra=n(Ci,"DIV",{class:!0});var Yy=s(ra);T(Yk.$$.fragment,Yy),Mot=i(Yy),iLe=n(Yy,"P",{});var yZt=s(iLe);Eot=r(yZt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),yZt.forEach(t),Cot=i(Yy),wm=n(Yy,"P",{});var kse=s(wm);wot=r(kse,`Note:
Loading a model from its configuration file does `),dLe=n(kse,"STRONG",{});var xZt=s(dLe);Aot=r(xZt,"not"),xZt.forEach(t),Lot=r(kse,` load the model weights. It only affects the
model\u2019s configuration. Use `),Fte=n(kse,"A",{href:!0});var $Zt=s(Fte);yot=r($Zt,"from_pretrained()"),$Zt.forEach(t),xot=r(kse," to load the model weights."),kse.forEach(t),$ot=i(Yy),T(gA.$$.fragment,Yy),Yy.forEach(t),kot=i(Ci),Yr=n(Ci,"DIV",{class:!0});var wi=s(Yr);T(Kk.$$.fragment,wi),Sot=i(wi),cLe=n(wi,"P",{});var kZt=s(cLe);Rot=r(kZt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),kZt.forEach(t),Pot=i(wi),Pn=n(wi,"P",{});var Ky=s(Pn);Bot=r(Ky,"The model class to instantiate is selected based on the "),mLe=n(Ky,"CODE",{});var SZt=s(mLe);Iot=r(SZt,"model_type"),SZt.forEach(t),Not=r(Ky,` property of the config object (either
passed as an argument or loaded from `),fLe=n(Ky,"CODE",{});var RZt=s(fLe);qot=r(RZt,"pretrained_model_name_or_path"),RZt.forEach(t),jot=r(Ky,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gLe=n(Ky,"CODE",{});var PZt=s(gLe);Dot=r(PZt,"pretrained_model_name_or_path"),PZt.forEach(t),Got=r(Ky,":"),Ky.forEach(t),Oot=i(wi),$e=n(wi,"UL",{});var qe=s($e);hA=n(qe,"LI",{});var aQe=s(hA);hLe=n(aQe,"STRONG",{});var BZt=s(hLe);Vot=r(BZt,"albert"),BZt.forEach(t),Xot=r(aQe," \u2014 "),Tte=n(aQe,"A",{href:!0});var IZt=s(Tte);zot=r(IZt,"FlaxAlbertForMaskedLM"),IZt.forEach(t),Wot=r(aQe," (ALBERT model)"),aQe.forEach(t),Qot=i(qe),uA=n(qe,"LI",{});var nQe=s(uA);uLe=n(nQe,"STRONG",{});var NZt=s(uLe);Uot=r(NZt,"bart"),NZt.forEach(t),Hot=r(nQe," \u2014 "),Mte=n(nQe,"A",{href:!0});var qZt=s(Mte);Jot=r(qZt,"FlaxBartForConditionalGeneration"),qZt.forEach(t),Yot=r(nQe," (BART model)"),nQe.forEach(t),Kot=i(qe),pA=n(qe,"LI",{});var sQe=s(pA);pLe=n(sQe,"STRONG",{});var jZt=s(pLe);Zot=r(jZt,"bert"),jZt.forEach(t),ert=r(sQe," \u2014 "),Ete=n(sQe,"A",{href:!0});var DZt=s(Ete);ort=r(DZt,"FlaxBertForMaskedLM"),DZt.forEach(t),rrt=r(sQe," (BERT model)"),sQe.forEach(t),trt=i(qe),_A=n(qe,"LI",{});var lQe=s(_A);_Le=n(lQe,"STRONG",{});var GZt=s(_Le);art=r(GZt,"big_bird"),GZt.forEach(t),nrt=r(lQe," \u2014 "),Cte=n(lQe,"A",{href:!0});var OZt=s(Cte);srt=r(OZt,"FlaxBigBirdForMaskedLM"),OZt.forEach(t),lrt=r(lQe," (BigBird model)"),lQe.forEach(t),irt=i(qe),bA=n(qe,"LI",{});var iQe=s(bA);bLe=n(iQe,"STRONG",{});var VZt=s(bLe);drt=r(VZt,"distilbert"),VZt.forEach(t),crt=r(iQe," \u2014 "),wte=n(iQe,"A",{href:!0});var XZt=s(wte);mrt=r(XZt,"FlaxDistilBertForMaskedLM"),XZt.forEach(t),frt=r(iQe," (DistilBERT model)"),iQe.forEach(t),grt=i(qe),vA=n(qe,"LI",{});var dQe=s(vA);vLe=n(dQe,"STRONG",{});var zZt=s(vLe);hrt=r(zZt,"electra"),zZt.forEach(t),urt=r(dQe," \u2014 "),Ate=n(dQe,"A",{href:!0});var WZt=s(Ate);prt=r(WZt,"FlaxElectraForMaskedLM"),WZt.forEach(t),_rt=r(dQe," (ELECTRA model)"),dQe.forEach(t),brt=i(qe),FA=n(qe,"LI",{});var cQe=s(FA);FLe=n(cQe,"STRONG",{});var QZt=s(FLe);vrt=r(QZt,"mbart"),QZt.forEach(t),Frt=r(cQe," \u2014 "),Lte=n(cQe,"A",{href:!0});var UZt=s(Lte);Trt=r(UZt,"FlaxMBartForConditionalGeneration"),UZt.forEach(t),Mrt=r(cQe," (mBART model)"),cQe.forEach(t),Ert=i(qe),TA=n(qe,"LI",{});var mQe=s(TA);TLe=n(mQe,"STRONG",{});var HZt=s(TLe);Crt=r(HZt,"roberta"),HZt.forEach(t),wrt=r(mQe," \u2014 "),yte=n(mQe,"A",{href:!0});var JZt=s(yte);Art=r(JZt,"FlaxRobertaForMaskedLM"),JZt.forEach(t),Lrt=r(mQe," (RoBERTa model)"),mQe.forEach(t),yrt=i(qe),MA=n(qe,"LI",{});var fQe=s(MA);MLe=n(fQe,"STRONG",{});var YZt=s(MLe);xrt=r(YZt,"roformer"),YZt.forEach(t),$rt=r(fQe," \u2014 "),xte=n(fQe,"A",{href:!0});var KZt=s(xte);krt=r(KZt,"FlaxRoFormerForMaskedLM"),KZt.forEach(t),Srt=r(fQe," (RoFormer model)"),fQe.forEach(t),Rrt=i(qe),EA=n(qe,"LI",{});var gQe=s(EA);ELe=n(gQe,"STRONG",{});var ZZt=s(ELe);Prt=r(ZZt,"xlm-roberta"),ZZt.forEach(t),Brt=r(gQe," \u2014 "),$te=n(gQe,"A",{href:!0});var eea=s($te);Irt=r(eea,"FlaxXLMRobertaForMaskedLM"),eea.forEach(t),Nrt=r(gQe," (XLM-RoBERTa model)"),gQe.forEach(t),qe.forEach(t),qrt=i(wi),T(CA.$$.fragment,wi),wi.forEach(t),Ci.forEach(t),tJe=i(m),Am=n(m,"H2",{class:!0});var _Ke=s(Am);wA=n(_Ke,"A",{id:!0,class:!0,href:!0});var oea=s(wA);CLe=n(oea,"SPAN",{});var rea=s(CLe);T(Zk.$$.fragment,rea),rea.forEach(t),oea.forEach(t),jrt=i(_Ke),wLe=n(_Ke,"SPAN",{});var tea=s(wLe);Drt=r(tea,"FlaxAutoModelForSeq2SeqLM"),tea.forEach(t),_Ke.forEach(t),aJe=i(m),Er=n(m,"DIV",{class:!0});var Ai=s(Er);T(eS.$$.fragment,Ai),Grt=i(Ai),Lm=n(Ai,"P",{});var Sse=s(Lm);Ort=r(Sse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),kte=n(Sse,"A",{href:!0});var aea=s(kte);Vrt=r(aea,"from_pretrained()"),aea.forEach(t),Xrt=r(Sse," class method or the "),Ste=n(Sse,"A",{href:!0});var nea=s(Ste);zrt=r(nea,"from_config()"),nea.forEach(t),Wrt=r(Sse,` class
method.`),Sse.forEach(t),Qrt=i(Ai),oS=n(Ai,"P",{});var bKe=s(oS);Urt=r(bKe,"This class cannot be instantiated directly using "),ALe=n(bKe,"CODE",{});var sea=s(ALe);Hrt=r(sea,"__init__()"),sea.forEach(t),Jrt=r(bKe," (throws an error)."),bKe.forEach(t),Yrt=i(Ai),ta=n(Ai,"DIV",{class:!0});var Zy=s(ta);T(rS.$$.fragment,Zy),Krt=i(Zy),LLe=n(Zy,"P",{});var lea=s(LLe);Zrt=r(lea,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),lea.forEach(t),ett=i(Zy),ym=n(Zy,"P",{});var Rse=s(ym);ott=r(Rse,`Note:
Loading a model from its configuration file does `),yLe=n(Rse,"STRONG",{});var iea=s(yLe);rtt=r(iea,"not"),iea.forEach(t),ttt=r(Rse,` load the model weights. It only affects the
model\u2019s configuration. Use `),Rte=n(Rse,"A",{href:!0});var dea=s(Rte);att=r(dea,"from_pretrained()"),dea.forEach(t),ntt=r(Rse," to load the model weights."),Rse.forEach(t),stt=i(Zy),T(AA.$$.fragment,Zy),Zy.forEach(t),ltt=i(Ai),Kr=n(Ai,"DIV",{class:!0});var Li=s(Kr);T(tS.$$.fragment,Li),itt=i(Li),xLe=n(Li,"P",{});var cea=s(xLe);dtt=r(cea,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),cea.forEach(t),ctt=i(Li),Bn=n(Li,"P",{});var e8=s(Bn);mtt=r(e8,"The model class to instantiate is selected based on the "),$Le=n(e8,"CODE",{});var mea=s($Le);ftt=r(mea,"model_type"),mea.forEach(t),gtt=r(e8,` property of the config object (either
passed as an argument or loaded from `),kLe=n(e8,"CODE",{});var fea=s(kLe);htt=r(fea,"pretrained_model_name_or_path"),fea.forEach(t),utt=r(e8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),SLe=n(e8,"CODE",{});var gea=s(SLe);ptt=r(gea,"pretrained_model_name_or_path"),gea.forEach(t),_tt=r(e8,":"),e8.forEach(t),btt=i(Li),ke=n(Li,"UL",{});var je=s(ke);LA=n(je,"LI",{});var hQe=s(LA);RLe=n(hQe,"STRONG",{});var hea=s(RLe);vtt=r(hea,"bart"),hea.forEach(t),Ftt=r(hQe," \u2014 "),Pte=n(hQe,"A",{href:!0});var uea=s(Pte);Ttt=r(uea,"FlaxBartForConditionalGeneration"),uea.forEach(t),Mtt=r(hQe," (BART model)"),hQe.forEach(t),Ett=i(je),yA=n(je,"LI",{});var uQe=s(yA);PLe=n(uQe,"STRONG",{});var pea=s(PLe);Ctt=r(pea,"blenderbot"),pea.forEach(t),wtt=r(uQe," \u2014 "),Bte=n(uQe,"A",{href:!0});var _ea=s(Bte);Att=r(_ea,"FlaxBlenderbotForConditionalGeneration"),_ea.forEach(t),Ltt=r(uQe," (Blenderbot model)"),uQe.forEach(t),ytt=i(je),xA=n(je,"LI",{});var pQe=s(xA);BLe=n(pQe,"STRONG",{});var bea=s(BLe);xtt=r(bea,"blenderbot-small"),bea.forEach(t),$tt=r(pQe," \u2014 "),Ite=n(pQe,"A",{href:!0});var vea=s(Ite);ktt=r(vea,"FlaxBlenderbotSmallForConditionalGeneration"),vea.forEach(t),Stt=r(pQe," (BlenderbotSmall model)"),pQe.forEach(t),Rtt=i(je),$A=n(je,"LI",{});var _Qe=s($A);ILe=n(_Qe,"STRONG",{});var Fea=s(ILe);Ptt=r(Fea,"encoder-decoder"),Fea.forEach(t),Btt=r(_Qe," \u2014 "),Nte=n(_Qe,"A",{href:!0});var Tea=s(Nte);Itt=r(Tea,"FlaxEncoderDecoderModel"),Tea.forEach(t),Ntt=r(_Qe," (Encoder decoder model)"),_Qe.forEach(t),qtt=i(je),kA=n(je,"LI",{});var bQe=s(kA);NLe=n(bQe,"STRONG",{});var Mea=s(NLe);jtt=r(Mea,"longt5"),Mea.forEach(t),Dtt=r(bQe," \u2014 "),qte=n(bQe,"A",{href:!0});var Eea=s(qte);Gtt=r(Eea,"FlaxLongT5ForConditionalGeneration"),Eea.forEach(t),Ott=r(bQe," (LongT5 model)"),bQe.forEach(t),Vtt=i(je),SA=n(je,"LI",{});var vQe=s(SA);qLe=n(vQe,"STRONG",{});var Cea=s(qLe);Xtt=r(Cea,"marian"),Cea.forEach(t),ztt=r(vQe," \u2014 "),jte=n(vQe,"A",{href:!0});var wea=s(jte);Wtt=r(wea,"FlaxMarianMTModel"),wea.forEach(t),Qtt=r(vQe," (Marian model)"),vQe.forEach(t),Utt=i(je),RA=n(je,"LI",{});var FQe=s(RA);jLe=n(FQe,"STRONG",{});var Aea=s(jLe);Htt=r(Aea,"mbart"),Aea.forEach(t),Jtt=r(FQe," \u2014 "),Dte=n(FQe,"A",{href:!0});var Lea=s(Dte);Ytt=r(Lea,"FlaxMBartForConditionalGeneration"),Lea.forEach(t),Ktt=r(FQe," (mBART model)"),FQe.forEach(t),Ztt=i(je),PA=n(je,"LI",{});var TQe=s(PA);DLe=n(TQe,"STRONG",{});var yea=s(DLe);eat=r(yea,"mt5"),yea.forEach(t),oat=r(TQe," \u2014 "),Gte=n(TQe,"A",{href:!0});var xea=s(Gte);rat=r(xea,"FlaxMT5ForConditionalGeneration"),xea.forEach(t),tat=r(TQe," (MT5 model)"),TQe.forEach(t),aat=i(je),BA=n(je,"LI",{});var MQe=s(BA);GLe=n(MQe,"STRONG",{});var $ea=s(GLe);nat=r($ea,"pegasus"),$ea.forEach(t),sat=r(MQe," \u2014 "),Ote=n(MQe,"A",{href:!0});var kea=s(Ote);lat=r(kea,"FlaxPegasusForConditionalGeneration"),kea.forEach(t),iat=r(MQe," (Pegasus model)"),MQe.forEach(t),dat=i(je),IA=n(je,"LI",{});var EQe=s(IA);OLe=n(EQe,"STRONG",{});var Sea=s(OLe);cat=r(Sea,"t5"),Sea.forEach(t),mat=r(EQe," \u2014 "),Vte=n(EQe,"A",{href:!0});var Rea=s(Vte);fat=r(Rea,"FlaxT5ForConditionalGeneration"),Rea.forEach(t),gat=r(EQe," (T5 model)"),EQe.forEach(t),je.forEach(t),hat=i(Li),T(NA.$$.fragment,Li),Li.forEach(t),Ai.forEach(t),nJe=i(m),xm=n(m,"H2",{class:!0});var vKe=s(xm);qA=n(vKe,"A",{id:!0,class:!0,href:!0});var Pea=s(qA);VLe=n(Pea,"SPAN",{});var Bea=s(VLe);T(aS.$$.fragment,Bea),Bea.forEach(t),Pea.forEach(t),uat=i(vKe),XLe=n(vKe,"SPAN",{});var Iea=s(XLe);pat=r(Iea,"FlaxAutoModelForSequenceClassification"),Iea.forEach(t),vKe.forEach(t),sJe=i(m),Cr=n(m,"DIV",{class:!0});var yi=s(Cr);T(nS.$$.fragment,yi),_at=i(yi),$m=n(yi,"P",{});var Pse=s($m);bat=r(Pse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Xte=n(Pse,"A",{href:!0});var Nea=s(Xte);vat=r(Nea,"from_pretrained()"),Nea.forEach(t),Fat=r(Pse," class method or the "),zte=n(Pse,"A",{href:!0});var qea=s(zte);Tat=r(qea,"from_config()"),qea.forEach(t),Mat=r(Pse,` class
method.`),Pse.forEach(t),Eat=i(yi),sS=n(yi,"P",{});var FKe=s(sS);Cat=r(FKe,"This class cannot be instantiated directly using "),zLe=n(FKe,"CODE",{});var jea=s(zLe);wat=r(jea,"__init__()"),jea.forEach(t),Aat=r(FKe," (throws an error)."),FKe.forEach(t),Lat=i(yi),aa=n(yi,"DIV",{class:!0});var o8=s(aa);T(lS.$$.fragment,o8),yat=i(o8),WLe=n(o8,"P",{});var Dea=s(WLe);xat=r(Dea,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Dea.forEach(t),$at=i(o8),km=n(o8,"P",{});var Bse=s(km);kat=r(Bse,`Note:
Loading a model from its configuration file does `),QLe=n(Bse,"STRONG",{});var Gea=s(QLe);Sat=r(Gea,"not"),Gea.forEach(t),Rat=r(Bse,` load the model weights. It only affects the
model\u2019s configuration. Use `),Wte=n(Bse,"A",{href:!0});var Oea=s(Wte);Pat=r(Oea,"from_pretrained()"),Oea.forEach(t),Bat=r(Bse," to load the model weights."),Bse.forEach(t),Iat=i(o8),T(jA.$$.fragment,o8),o8.forEach(t),Nat=i(yi),Zr=n(yi,"DIV",{class:!0});var xi=s(Zr);T(iS.$$.fragment,xi),qat=i(xi),ULe=n(xi,"P",{});var Vea=s(ULe);jat=r(Vea,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Vea.forEach(t),Dat=i(xi),In=n(xi,"P",{});var r8=s(In);Gat=r(r8,"The model class to instantiate is selected based on the "),HLe=n(r8,"CODE",{});var Xea=s(HLe);Oat=r(Xea,"model_type"),Xea.forEach(t),Vat=r(r8,` property of the config object (either
passed as an argument or loaded from `),JLe=n(r8,"CODE",{});var zea=s(JLe);Xat=r(zea,"pretrained_model_name_or_path"),zea.forEach(t),zat=r(r8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),YLe=n(r8,"CODE",{});var Wea=s(YLe);Wat=r(Wea,"pretrained_model_name_or_path"),Wea.forEach(t),Qat=r(r8,":"),r8.forEach(t),Uat=i(xi),Se=n(xi,"UL",{});var De=s(Se);DA=n(De,"LI",{});var CQe=s(DA);KLe=n(CQe,"STRONG",{});var Qea=s(KLe);Hat=r(Qea,"albert"),Qea.forEach(t),Jat=r(CQe," \u2014 "),Qte=n(CQe,"A",{href:!0});var Uea=s(Qte);Yat=r(Uea,"FlaxAlbertForSequenceClassification"),Uea.forEach(t),Kat=r(CQe," (ALBERT model)"),CQe.forEach(t),Zat=i(De),GA=n(De,"LI",{});var wQe=s(GA);ZLe=n(wQe,"STRONG",{});var Hea=s(ZLe);ent=r(Hea,"bart"),Hea.forEach(t),ont=r(wQe," \u2014 "),Ute=n(wQe,"A",{href:!0});var Jea=s(Ute);rnt=r(Jea,"FlaxBartForSequenceClassification"),Jea.forEach(t),tnt=r(wQe," (BART model)"),wQe.forEach(t),ant=i(De),OA=n(De,"LI",{});var AQe=s(OA);eye=n(AQe,"STRONG",{});var Yea=s(eye);nnt=r(Yea,"bert"),Yea.forEach(t),snt=r(AQe," \u2014 "),Hte=n(AQe,"A",{href:!0});var Kea=s(Hte);lnt=r(Kea,"FlaxBertForSequenceClassification"),Kea.forEach(t),int=r(AQe," (BERT model)"),AQe.forEach(t),dnt=i(De),VA=n(De,"LI",{});var LQe=s(VA);oye=n(LQe,"STRONG",{});var Zea=s(oye);cnt=r(Zea,"big_bird"),Zea.forEach(t),mnt=r(LQe," \u2014 "),Jte=n(LQe,"A",{href:!0});var eoa=s(Jte);fnt=r(eoa,"FlaxBigBirdForSequenceClassification"),eoa.forEach(t),gnt=r(LQe," (BigBird model)"),LQe.forEach(t),hnt=i(De),XA=n(De,"LI",{});var yQe=s(XA);rye=n(yQe,"STRONG",{});var ooa=s(rye);unt=r(ooa,"distilbert"),ooa.forEach(t),pnt=r(yQe," \u2014 "),Yte=n(yQe,"A",{href:!0});var roa=s(Yte);_nt=r(roa,"FlaxDistilBertForSequenceClassification"),roa.forEach(t),bnt=r(yQe," (DistilBERT model)"),yQe.forEach(t),vnt=i(De),zA=n(De,"LI",{});var xQe=s(zA);tye=n(xQe,"STRONG",{});var toa=s(tye);Fnt=r(toa,"electra"),toa.forEach(t),Tnt=r(xQe," \u2014 "),Kte=n(xQe,"A",{href:!0});var aoa=s(Kte);Mnt=r(aoa,"FlaxElectraForSequenceClassification"),aoa.forEach(t),Ent=r(xQe," (ELECTRA model)"),xQe.forEach(t),Cnt=i(De),WA=n(De,"LI",{});var $Qe=s(WA);aye=n($Qe,"STRONG",{});var noa=s(aye);wnt=r(noa,"mbart"),noa.forEach(t),Ant=r($Qe," \u2014 "),Zte=n($Qe,"A",{href:!0});var soa=s(Zte);Lnt=r(soa,"FlaxMBartForSequenceClassification"),soa.forEach(t),ynt=r($Qe," (mBART model)"),$Qe.forEach(t),xnt=i(De),QA=n(De,"LI",{});var kQe=s(QA);nye=n(kQe,"STRONG",{});var loa=s(nye);$nt=r(loa,"roberta"),loa.forEach(t),knt=r(kQe," \u2014 "),eae=n(kQe,"A",{href:!0});var ioa=s(eae);Snt=r(ioa,"FlaxRobertaForSequenceClassification"),ioa.forEach(t),Rnt=r(kQe," (RoBERTa model)"),kQe.forEach(t),Pnt=i(De),UA=n(De,"LI",{});var SQe=s(UA);sye=n(SQe,"STRONG",{});var doa=s(sye);Bnt=r(doa,"roformer"),doa.forEach(t),Int=r(SQe," \u2014 "),oae=n(SQe,"A",{href:!0});var coa=s(oae);Nnt=r(coa,"FlaxRoFormerForSequenceClassification"),coa.forEach(t),qnt=r(SQe," (RoFormer model)"),SQe.forEach(t),jnt=i(De),HA=n(De,"LI",{});var RQe=s(HA);lye=n(RQe,"STRONG",{});var moa=s(lye);Dnt=r(moa,"xlm-roberta"),moa.forEach(t),Gnt=r(RQe," \u2014 "),rae=n(RQe,"A",{href:!0});var foa=s(rae);Ont=r(foa,"FlaxXLMRobertaForSequenceClassification"),foa.forEach(t),Vnt=r(RQe," (XLM-RoBERTa model)"),RQe.forEach(t),De.forEach(t),Xnt=i(xi),T(JA.$$.fragment,xi),xi.forEach(t),yi.forEach(t),lJe=i(m),Sm=n(m,"H2",{class:!0});var TKe=s(Sm);YA=n(TKe,"A",{id:!0,class:!0,href:!0});var goa=s(YA);iye=n(goa,"SPAN",{});var hoa=s(iye);T(dS.$$.fragment,hoa),hoa.forEach(t),goa.forEach(t),znt=i(TKe),dye=n(TKe,"SPAN",{});var uoa=s(dye);Wnt=r(uoa,"FlaxAutoModelForQuestionAnswering"),uoa.forEach(t),TKe.forEach(t),iJe=i(m),wr=n(m,"DIV",{class:!0});var $i=s(wr);T(cS.$$.fragment,$i),Qnt=i($i),Rm=n($i,"P",{});var Ise=s(Rm);Unt=r(Ise,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),tae=n(Ise,"A",{href:!0});var poa=s(tae);Hnt=r(poa,"from_pretrained()"),poa.forEach(t),Jnt=r(Ise," class method or the "),aae=n(Ise,"A",{href:!0});var _oa=s(aae);Ynt=r(_oa,"from_config()"),_oa.forEach(t),Knt=r(Ise,` class
method.`),Ise.forEach(t),Znt=i($i),mS=n($i,"P",{});var MKe=s(mS);est=r(MKe,"This class cannot be instantiated directly using "),cye=n(MKe,"CODE",{});var boa=s(cye);ost=r(boa,"__init__()"),boa.forEach(t),rst=r(MKe," (throws an error)."),MKe.forEach(t),tst=i($i),na=n($i,"DIV",{class:!0});var t8=s(na);T(fS.$$.fragment,t8),ast=i(t8),mye=n(t8,"P",{});var voa=s(mye);nst=r(voa,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),voa.forEach(t),sst=i(t8),Pm=n(t8,"P",{});var Nse=s(Pm);lst=r(Nse,`Note:
Loading a model from its configuration file does `),fye=n(Nse,"STRONG",{});var Foa=s(fye);ist=r(Foa,"not"),Foa.forEach(t),dst=r(Nse,` load the model weights. It only affects the
model\u2019s configuration. Use `),nae=n(Nse,"A",{href:!0});var Toa=s(nae);cst=r(Toa,"from_pretrained()"),Toa.forEach(t),mst=r(Nse," to load the model weights."),Nse.forEach(t),fst=i(t8),T(KA.$$.fragment,t8),t8.forEach(t),gst=i($i),et=n($i,"DIV",{class:!0});var ki=s(et);T(gS.$$.fragment,ki),hst=i(ki),gye=n(ki,"P",{});var Moa=s(gye);ust=r(Moa,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Moa.forEach(t),pst=i(ki),Nn=n(ki,"P",{});var a8=s(Nn);_st=r(a8,"The model class to instantiate is selected based on the "),hye=n(a8,"CODE",{});var Eoa=s(hye);bst=r(Eoa,"model_type"),Eoa.forEach(t),vst=r(a8,` property of the config object (either
passed as an argument or loaded from `),uye=n(a8,"CODE",{});var Coa=s(uye);Fst=r(Coa,"pretrained_model_name_or_path"),Coa.forEach(t),Tst=r(a8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pye=n(a8,"CODE",{});var woa=s(pye);Mst=r(woa,"pretrained_model_name_or_path"),woa.forEach(t),Est=r(a8,":"),a8.forEach(t),Cst=i(ki),Re=n(ki,"UL",{});var Ge=s(Re);ZA=n(Ge,"LI",{});var PQe=s(ZA);_ye=n(PQe,"STRONG",{});var Aoa=s(_ye);wst=r(Aoa,"albert"),Aoa.forEach(t),Ast=r(PQe," \u2014 "),sae=n(PQe,"A",{href:!0});var Loa=s(sae);Lst=r(Loa,"FlaxAlbertForQuestionAnswering"),Loa.forEach(t),yst=r(PQe," (ALBERT model)"),PQe.forEach(t),xst=i(Ge),e7=n(Ge,"LI",{});var BQe=s(e7);bye=n(BQe,"STRONG",{});var yoa=s(bye);$st=r(yoa,"bart"),yoa.forEach(t),kst=r(BQe," \u2014 "),lae=n(BQe,"A",{href:!0});var xoa=s(lae);Sst=r(xoa,"FlaxBartForQuestionAnswering"),xoa.forEach(t),Rst=r(BQe," (BART model)"),BQe.forEach(t),Pst=i(Ge),o7=n(Ge,"LI",{});var IQe=s(o7);vye=n(IQe,"STRONG",{});var $oa=s(vye);Bst=r($oa,"bert"),$oa.forEach(t),Ist=r(IQe," \u2014 "),iae=n(IQe,"A",{href:!0});var koa=s(iae);Nst=r(koa,"FlaxBertForQuestionAnswering"),koa.forEach(t),qst=r(IQe," (BERT model)"),IQe.forEach(t),jst=i(Ge),r7=n(Ge,"LI",{});var NQe=s(r7);Fye=n(NQe,"STRONG",{});var Soa=s(Fye);Dst=r(Soa,"big_bird"),Soa.forEach(t),Gst=r(NQe," \u2014 "),dae=n(NQe,"A",{href:!0});var Roa=s(dae);Ost=r(Roa,"FlaxBigBirdForQuestionAnswering"),Roa.forEach(t),Vst=r(NQe," (BigBird model)"),NQe.forEach(t),Xst=i(Ge),t7=n(Ge,"LI",{});var qQe=s(t7);Tye=n(qQe,"STRONG",{});var Poa=s(Tye);zst=r(Poa,"distilbert"),Poa.forEach(t),Wst=r(qQe," \u2014 "),cae=n(qQe,"A",{href:!0});var Boa=s(cae);Qst=r(Boa,"FlaxDistilBertForQuestionAnswering"),Boa.forEach(t),Ust=r(qQe," (DistilBERT model)"),qQe.forEach(t),Hst=i(Ge),a7=n(Ge,"LI",{});var jQe=s(a7);Mye=n(jQe,"STRONG",{});var Ioa=s(Mye);Jst=r(Ioa,"electra"),Ioa.forEach(t),Yst=r(jQe," \u2014 "),mae=n(jQe,"A",{href:!0});var Noa=s(mae);Kst=r(Noa,"FlaxElectraForQuestionAnswering"),Noa.forEach(t),Zst=r(jQe," (ELECTRA model)"),jQe.forEach(t),elt=i(Ge),n7=n(Ge,"LI",{});var DQe=s(n7);Eye=n(DQe,"STRONG",{});var qoa=s(Eye);olt=r(qoa,"mbart"),qoa.forEach(t),rlt=r(DQe," \u2014 "),fae=n(DQe,"A",{href:!0});var joa=s(fae);tlt=r(joa,"FlaxMBartForQuestionAnswering"),joa.forEach(t),alt=r(DQe," (mBART model)"),DQe.forEach(t),nlt=i(Ge),s7=n(Ge,"LI",{});var GQe=s(s7);Cye=n(GQe,"STRONG",{});var Doa=s(Cye);slt=r(Doa,"roberta"),Doa.forEach(t),llt=r(GQe," \u2014 "),gae=n(GQe,"A",{href:!0});var Goa=s(gae);ilt=r(Goa,"FlaxRobertaForQuestionAnswering"),Goa.forEach(t),dlt=r(GQe," (RoBERTa model)"),GQe.forEach(t),clt=i(Ge),l7=n(Ge,"LI",{});var OQe=s(l7);wye=n(OQe,"STRONG",{});var Ooa=s(wye);mlt=r(Ooa,"roformer"),Ooa.forEach(t),flt=r(OQe," \u2014 "),hae=n(OQe,"A",{href:!0});var Voa=s(hae);glt=r(Voa,"FlaxRoFormerForQuestionAnswering"),Voa.forEach(t),hlt=r(OQe," (RoFormer model)"),OQe.forEach(t),ult=i(Ge),i7=n(Ge,"LI",{});var VQe=s(i7);Aye=n(VQe,"STRONG",{});var Xoa=s(Aye);plt=r(Xoa,"xlm-roberta"),Xoa.forEach(t),_lt=r(VQe," \u2014 "),uae=n(VQe,"A",{href:!0});var zoa=s(uae);blt=r(zoa,"FlaxXLMRobertaForQuestionAnswering"),zoa.forEach(t),vlt=r(VQe," (XLM-RoBERTa model)"),VQe.forEach(t),Ge.forEach(t),Flt=i(ki),T(d7.$$.fragment,ki),ki.forEach(t),$i.forEach(t),dJe=i(m),Bm=n(m,"H2",{class:!0});var EKe=s(Bm);c7=n(EKe,"A",{id:!0,class:!0,href:!0});var Woa=s(c7);Lye=n(Woa,"SPAN",{});var Qoa=s(Lye);T(hS.$$.fragment,Qoa),Qoa.forEach(t),Woa.forEach(t),Tlt=i(EKe),yye=n(EKe,"SPAN",{});var Uoa=s(yye);Mlt=r(Uoa,"FlaxAutoModelForTokenClassification"),Uoa.forEach(t),EKe.forEach(t),cJe=i(m),Ar=n(m,"DIV",{class:!0});var Si=s(Ar);T(uS.$$.fragment,Si),Elt=i(Si),Im=n(Si,"P",{});var qse=s(Im);Clt=r(qse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),pae=n(qse,"A",{href:!0});var Hoa=s(pae);wlt=r(Hoa,"from_pretrained()"),Hoa.forEach(t),Alt=r(qse," class method or the "),_ae=n(qse,"A",{href:!0});var Joa=s(_ae);Llt=r(Joa,"from_config()"),Joa.forEach(t),ylt=r(qse,` class
method.`),qse.forEach(t),xlt=i(Si),pS=n(Si,"P",{});var CKe=s(pS);$lt=r(CKe,"This class cannot be instantiated directly using "),xye=n(CKe,"CODE",{});var Yoa=s(xye);klt=r(Yoa,"__init__()"),Yoa.forEach(t),Slt=r(CKe," (throws an error)."),CKe.forEach(t),Rlt=i(Si),sa=n(Si,"DIV",{class:!0});var n8=s(sa);T(_S.$$.fragment,n8),Plt=i(n8),$ye=n(n8,"P",{});var Koa=s($ye);Blt=r(Koa,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Koa.forEach(t),Ilt=i(n8),Nm=n(n8,"P",{});var jse=s(Nm);Nlt=r(jse,`Note:
Loading a model from its configuration file does `),kye=n(jse,"STRONG",{});var Zoa=s(kye);qlt=r(Zoa,"not"),Zoa.forEach(t),jlt=r(jse,` load the model weights. It only affects the
model\u2019s configuration. Use `),bae=n(jse,"A",{href:!0});var era=s(bae);Dlt=r(era,"from_pretrained()"),era.forEach(t),Glt=r(jse," to load the model weights."),jse.forEach(t),Olt=i(n8),T(m7.$$.fragment,n8),n8.forEach(t),Vlt=i(Si),ot=n(Si,"DIV",{class:!0});var Ri=s(ot);T(bS.$$.fragment,Ri),Xlt=i(Ri),Sye=n(Ri,"P",{});var ora=s(Sye);zlt=r(ora,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),ora.forEach(t),Wlt=i(Ri),qn=n(Ri,"P",{});var s8=s(qn);Qlt=r(s8,"The model class to instantiate is selected based on the "),Rye=n(s8,"CODE",{});var rra=s(Rye);Ult=r(rra,"model_type"),rra.forEach(t),Hlt=r(s8,` property of the config object (either
passed as an argument or loaded from `),Pye=n(s8,"CODE",{});var tra=s(Pye);Jlt=r(tra,"pretrained_model_name_or_path"),tra.forEach(t),Ylt=r(s8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bye=n(s8,"CODE",{});var ara=s(Bye);Klt=r(ara,"pretrained_model_name_or_path"),ara.forEach(t),Zlt=r(s8,":"),s8.forEach(t),eit=i(Ri),Xe=n(Ri,"UL",{});var Co=s(Xe);f7=n(Co,"LI",{});var XQe=s(f7);Iye=n(XQe,"STRONG",{});var nra=s(Iye);oit=r(nra,"albert"),nra.forEach(t),rit=r(XQe," \u2014 "),vae=n(XQe,"A",{href:!0});var sra=s(vae);tit=r(sra,"FlaxAlbertForTokenClassification"),sra.forEach(t),ait=r(XQe," (ALBERT model)"),XQe.forEach(t),nit=i(Co),g7=n(Co,"LI",{});var zQe=s(g7);Nye=n(zQe,"STRONG",{});var lra=s(Nye);sit=r(lra,"bert"),lra.forEach(t),lit=r(zQe," \u2014 "),Fae=n(zQe,"A",{href:!0});var ira=s(Fae);iit=r(ira,"FlaxBertForTokenClassification"),ira.forEach(t),dit=r(zQe," (BERT model)"),zQe.forEach(t),cit=i(Co),h7=n(Co,"LI",{});var WQe=s(h7);qye=n(WQe,"STRONG",{});var dra=s(qye);mit=r(dra,"big_bird"),dra.forEach(t),fit=r(WQe," \u2014 "),Tae=n(WQe,"A",{href:!0});var cra=s(Tae);git=r(cra,"FlaxBigBirdForTokenClassification"),cra.forEach(t),hit=r(WQe," (BigBird model)"),WQe.forEach(t),uit=i(Co),u7=n(Co,"LI",{});var QQe=s(u7);jye=n(QQe,"STRONG",{});var mra=s(jye);pit=r(mra,"distilbert"),mra.forEach(t),_it=r(QQe," \u2014 "),Mae=n(QQe,"A",{href:!0});var fra=s(Mae);bit=r(fra,"FlaxDistilBertForTokenClassification"),fra.forEach(t),vit=r(QQe," (DistilBERT model)"),QQe.forEach(t),Fit=i(Co),p7=n(Co,"LI",{});var UQe=s(p7);Dye=n(UQe,"STRONG",{});var gra=s(Dye);Tit=r(gra,"electra"),gra.forEach(t),Mit=r(UQe," \u2014 "),Eae=n(UQe,"A",{href:!0});var hra=s(Eae);Eit=r(hra,"FlaxElectraForTokenClassification"),hra.forEach(t),Cit=r(UQe," (ELECTRA model)"),UQe.forEach(t),wit=i(Co),_7=n(Co,"LI",{});var HQe=s(_7);Gye=n(HQe,"STRONG",{});var ura=s(Gye);Ait=r(ura,"roberta"),ura.forEach(t),Lit=r(HQe," \u2014 "),Cae=n(HQe,"A",{href:!0});var pra=s(Cae);yit=r(pra,"FlaxRobertaForTokenClassification"),pra.forEach(t),xit=r(HQe," (RoBERTa model)"),HQe.forEach(t),$it=i(Co),b7=n(Co,"LI",{});var JQe=s(b7);Oye=n(JQe,"STRONG",{});var _ra=s(Oye);kit=r(_ra,"roformer"),_ra.forEach(t),Sit=r(JQe," \u2014 "),wae=n(JQe,"A",{href:!0});var bra=s(wae);Rit=r(bra,"FlaxRoFormerForTokenClassification"),bra.forEach(t),Pit=r(JQe," (RoFormer model)"),JQe.forEach(t),Bit=i(Co),v7=n(Co,"LI",{});var YQe=s(v7);Vye=n(YQe,"STRONG",{});var vra=s(Vye);Iit=r(vra,"xlm-roberta"),vra.forEach(t),Nit=r(YQe," \u2014 "),Aae=n(YQe,"A",{href:!0});var Fra=s(Aae);qit=r(Fra,"FlaxXLMRobertaForTokenClassification"),Fra.forEach(t),jit=r(YQe," (XLM-RoBERTa model)"),YQe.forEach(t),Co.forEach(t),Dit=i(Ri),T(F7.$$.fragment,Ri),Ri.forEach(t),Si.forEach(t),mJe=i(m),qm=n(m,"H2",{class:!0});var wKe=s(qm);T7=n(wKe,"A",{id:!0,class:!0,href:!0});var Tra=s(T7);Xye=n(Tra,"SPAN",{});var Mra=s(Xye);T(vS.$$.fragment,Mra),Mra.forEach(t),Tra.forEach(t),Git=i(wKe),zye=n(wKe,"SPAN",{});var Era=s(zye);Oit=r(Era,"FlaxAutoModelForMultipleChoice"),Era.forEach(t),wKe.forEach(t),fJe=i(m),Lr=n(m,"DIV",{class:!0});var Pi=s(Lr);T(FS.$$.fragment,Pi),Vit=i(Pi),jm=n(Pi,"P",{});var Dse=s(jm);Xit=r(Dse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Lae=n(Dse,"A",{href:!0});var Cra=s(Lae);zit=r(Cra,"from_pretrained()"),Cra.forEach(t),Wit=r(Dse," class method or the "),yae=n(Dse,"A",{href:!0});var wra=s(yae);Qit=r(wra,"from_config()"),wra.forEach(t),Uit=r(Dse,` class
method.`),Dse.forEach(t),Hit=i(Pi),TS=n(Pi,"P",{});var AKe=s(TS);Jit=r(AKe,"This class cannot be instantiated directly using "),Wye=n(AKe,"CODE",{});var Ara=s(Wye);Yit=r(Ara,"__init__()"),Ara.forEach(t),Kit=r(AKe," (throws an error)."),AKe.forEach(t),Zit=i(Pi),la=n(Pi,"DIV",{class:!0});var l8=s(la);T(MS.$$.fragment,l8),edt=i(l8),Qye=n(l8,"P",{});var Lra=s(Qye);odt=r(Lra,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Lra.forEach(t),rdt=i(l8),Dm=n(l8,"P",{});var Gse=s(Dm);tdt=r(Gse,`Note:
Loading a model from its configuration file does `),Uye=n(Gse,"STRONG",{});var yra=s(Uye);adt=r(yra,"not"),yra.forEach(t),ndt=r(Gse,` load the model weights. It only affects the
model\u2019s configuration. Use `),xae=n(Gse,"A",{href:!0});var xra=s(xae);sdt=r(xra,"from_pretrained()"),xra.forEach(t),ldt=r(Gse," to load the model weights."),Gse.forEach(t),idt=i(l8),T(M7.$$.fragment,l8),l8.forEach(t),ddt=i(Pi),rt=n(Pi,"DIV",{class:!0});var Bi=s(rt);T(ES.$$.fragment,Bi),cdt=i(Bi),Hye=n(Bi,"P",{});var $ra=s(Hye);mdt=r($ra,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),$ra.forEach(t),fdt=i(Bi),jn=n(Bi,"P",{});var i8=s(jn);gdt=r(i8,"The model class to instantiate is selected based on the "),Jye=n(i8,"CODE",{});var kra=s(Jye);hdt=r(kra,"model_type"),kra.forEach(t),udt=r(i8,` property of the config object (either
passed as an argument or loaded from `),Yye=n(i8,"CODE",{});var Sra=s(Yye);pdt=r(Sra,"pretrained_model_name_or_path"),Sra.forEach(t),_dt=r(i8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kye=n(i8,"CODE",{});var Rra=s(Kye);bdt=r(Rra,"pretrained_model_name_or_path"),Rra.forEach(t),vdt=r(i8,":"),i8.forEach(t),Fdt=i(Bi),ze=n(Bi,"UL",{});var wo=s(ze);E7=n(wo,"LI",{});var KQe=s(E7);Zye=n(KQe,"STRONG",{});var Pra=s(Zye);Tdt=r(Pra,"albert"),Pra.forEach(t),Mdt=r(KQe," \u2014 "),$ae=n(KQe,"A",{href:!0});var Bra=s($ae);Edt=r(Bra,"FlaxAlbertForMultipleChoice"),Bra.forEach(t),Cdt=r(KQe," (ALBERT model)"),KQe.forEach(t),wdt=i(wo),C7=n(wo,"LI",{});var ZQe=s(C7);e8e=n(ZQe,"STRONG",{});var Ira=s(e8e);Adt=r(Ira,"bert"),Ira.forEach(t),Ldt=r(ZQe," \u2014 "),kae=n(ZQe,"A",{href:!0});var Nra=s(kae);ydt=r(Nra,"FlaxBertForMultipleChoice"),Nra.forEach(t),xdt=r(ZQe," (BERT model)"),ZQe.forEach(t),$dt=i(wo),w7=n(wo,"LI",{});var eUe=s(w7);o8e=n(eUe,"STRONG",{});var qra=s(o8e);kdt=r(qra,"big_bird"),qra.forEach(t),Sdt=r(eUe," \u2014 "),Sae=n(eUe,"A",{href:!0});var jra=s(Sae);Rdt=r(jra,"FlaxBigBirdForMultipleChoice"),jra.forEach(t),Pdt=r(eUe," (BigBird model)"),eUe.forEach(t),Bdt=i(wo),A7=n(wo,"LI",{});var oUe=s(A7);r8e=n(oUe,"STRONG",{});var Dra=s(r8e);Idt=r(Dra,"distilbert"),Dra.forEach(t),Ndt=r(oUe," \u2014 "),Rae=n(oUe,"A",{href:!0});var Gra=s(Rae);qdt=r(Gra,"FlaxDistilBertForMultipleChoice"),Gra.forEach(t),jdt=r(oUe," (DistilBERT model)"),oUe.forEach(t),Ddt=i(wo),L7=n(wo,"LI",{});var rUe=s(L7);t8e=n(rUe,"STRONG",{});var Ora=s(t8e);Gdt=r(Ora,"electra"),Ora.forEach(t),Odt=r(rUe," \u2014 "),Pae=n(rUe,"A",{href:!0});var Vra=s(Pae);Vdt=r(Vra,"FlaxElectraForMultipleChoice"),Vra.forEach(t),Xdt=r(rUe," (ELECTRA model)"),rUe.forEach(t),zdt=i(wo),y7=n(wo,"LI",{});var tUe=s(y7);a8e=n(tUe,"STRONG",{});var Xra=s(a8e);Wdt=r(Xra,"roberta"),Xra.forEach(t),Qdt=r(tUe," \u2014 "),Bae=n(tUe,"A",{href:!0});var zra=s(Bae);Udt=r(zra,"FlaxRobertaForMultipleChoice"),zra.forEach(t),Hdt=r(tUe," (RoBERTa model)"),tUe.forEach(t),Jdt=i(wo),x7=n(wo,"LI",{});var aUe=s(x7);n8e=n(aUe,"STRONG",{});var Wra=s(n8e);Ydt=r(Wra,"roformer"),Wra.forEach(t),Kdt=r(aUe," \u2014 "),Iae=n(aUe,"A",{href:!0});var Qra=s(Iae);Zdt=r(Qra,"FlaxRoFormerForMultipleChoice"),Qra.forEach(t),ect=r(aUe," (RoFormer model)"),aUe.forEach(t),oct=i(wo),$7=n(wo,"LI",{});var nUe=s($7);s8e=n(nUe,"STRONG",{});var Ura=s(s8e);rct=r(Ura,"xlm-roberta"),Ura.forEach(t),tct=r(nUe," \u2014 "),Nae=n(nUe,"A",{href:!0});var Hra=s(Nae);act=r(Hra,"FlaxXLMRobertaForMultipleChoice"),Hra.forEach(t),nct=r(nUe," (XLM-RoBERTa model)"),nUe.forEach(t),wo.forEach(t),sct=i(Bi),T(k7.$$.fragment,Bi),Bi.forEach(t),Pi.forEach(t),gJe=i(m),Gm=n(m,"H2",{class:!0});var LKe=s(Gm);S7=n(LKe,"A",{id:!0,class:!0,href:!0});var Jra=s(S7);l8e=n(Jra,"SPAN",{});var Yra=s(l8e);T(CS.$$.fragment,Yra),Yra.forEach(t),Jra.forEach(t),lct=i(LKe),i8e=n(LKe,"SPAN",{});var Kra=s(i8e);ict=r(Kra,"FlaxAutoModelForNextSentencePrediction"),Kra.forEach(t),LKe.forEach(t),hJe=i(m),yr=n(m,"DIV",{class:!0});var Ii=s(yr);T(wS.$$.fragment,Ii),dct=i(Ii),Om=n(Ii,"P",{});var Ose=s(Om);cct=r(Ose,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),qae=n(Ose,"A",{href:!0});var Zra=s(qae);mct=r(Zra,"from_pretrained()"),Zra.forEach(t),fct=r(Ose," class method or the "),jae=n(Ose,"A",{href:!0});var eta=s(jae);gct=r(eta,"from_config()"),eta.forEach(t),hct=r(Ose,` class
method.`),Ose.forEach(t),uct=i(Ii),AS=n(Ii,"P",{});var yKe=s(AS);pct=r(yKe,"This class cannot be instantiated directly using "),d8e=n(yKe,"CODE",{});var ota=s(d8e);_ct=r(ota,"__init__()"),ota.forEach(t),bct=r(yKe," (throws an error)."),yKe.forEach(t),vct=i(Ii),ia=n(Ii,"DIV",{class:!0});var d8=s(ia);T(LS.$$.fragment,d8),Fct=i(d8),c8e=n(d8,"P",{});var rta=s(c8e);Tct=r(rta,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),rta.forEach(t),Mct=i(d8),Vm=n(d8,"P",{});var Vse=s(Vm);Ect=r(Vse,`Note:
Loading a model from its configuration file does `),m8e=n(Vse,"STRONG",{});var tta=s(m8e);Cct=r(tta,"not"),tta.forEach(t),wct=r(Vse,` load the model weights. It only affects the
model\u2019s configuration. Use `),Dae=n(Vse,"A",{href:!0});var ata=s(Dae);Act=r(ata,"from_pretrained()"),ata.forEach(t),Lct=r(Vse," to load the model weights."),Vse.forEach(t),yct=i(d8),T(R7.$$.fragment,d8),d8.forEach(t),xct=i(Ii),tt=n(Ii,"DIV",{class:!0});var Ni=s(tt);T(yS.$$.fragment,Ni),$ct=i(Ni),f8e=n(Ni,"P",{});var nta=s(f8e);kct=r(nta,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),nta.forEach(t),Sct=i(Ni),Dn=n(Ni,"P",{});var c8=s(Dn);Rct=r(c8,"The model class to instantiate is selected based on the "),g8e=n(c8,"CODE",{});var sta=s(g8e);Pct=r(sta,"model_type"),sta.forEach(t),Bct=r(c8,` property of the config object (either
passed as an argument or loaded from `),h8e=n(c8,"CODE",{});var lta=s(h8e);Ict=r(lta,"pretrained_model_name_or_path"),lta.forEach(t),Nct=r(c8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u8e=n(c8,"CODE",{});var ita=s(u8e);qct=r(ita,"pretrained_model_name_or_path"),ita.forEach(t),jct=r(c8,":"),c8.forEach(t),Dct=i(Ni),p8e=n(Ni,"UL",{});var dta=s(p8e);P7=n(dta,"LI",{});var sUe=s(P7);_8e=n(sUe,"STRONG",{});var cta=s(_8e);Gct=r(cta,"bert"),cta.forEach(t),Oct=r(sUe," \u2014 "),Gae=n(sUe,"A",{href:!0});var mta=s(Gae);Vct=r(mta,"FlaxBertForNextSentencePrediction"),mta.forEach(t),Xct=r(sUe," (BERT model)"),sUe.forEach(t),dta.forEach(t),zct=i(Ni),T(B7.$$.fragment,Ni),Ni.forEach(t),Ii.forEach(t),uJe=i(m),Xm=n(m,"H2",{class:!0});var xKe=s(Xm);I7=n(xKe,"A",{id:!0,class:!0,href:!0});var fta=s(I7);b8e=n(fta,"SPAN",{});var gta=s(b8e);T(xS.$$.fragment,gta),gta.forEach(t),fta.forEach(t),Wct=i(xKe),v8e=n(xKe,"SPAN",{});var hta=s(v8e);Qct=r(hta,"FlaxAutoModelForImageClassification"),hta.forEach(t),xKe.forEach(t),pJe=i(m),xr=n(m,"DIV",{class:!0});var qi=s(xr);T($S.$$.fragment,qi),Uct=i(qi),zm=n(qi,"P",{});var Xse=s(zm);Hct=r(Xse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Oae=n(Xse,"A",{href:!0});var uta=s(Oae);Jct=r(uta,"from_pretrained()"),uta.forEach(t),Yct=r(Xse," class method or the "),Vae=n(Xse,"A",{href:!0});var pta=s(Vae);Kct=r(pta,"from_config()"),pta.forEach(t),Zct=r(Xse,` class
method.`),Xse.forEach(t),emt=i(qi),kS=n(qi,"P",{});var $Ke=s(kS);omt=r($Ke,"This class cannot be instantiated directly using "),F8e=n($Ke,"CODE",{});var _ta=s(F8e);rmt=r(_ta,"__init__()"),_ta.forEach(t),tmt=r($Ke," (throws an error)."),$Ke.forEach(t),amt=i(qi),da=n(qi,"DIV",{class:!0});var m8=s(da);T(SS.$$.fragment,m8),nmt=i(m8),T8e=n(m8,"P",{});var bta=s(T8e);smt=r(bta,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),bta.forEach(t),lmt=i(m8),Wm=n(m8,"P",{});var zse=s(Wm);imt=r(zse,`Note:
Loading a model from its configuration file does `),M8e=n(zse,"STRONG",{});var vta=s(M8e);dmt=r(vta,"not"),vta.forEach(t),cmt=r(zse,` load the model weights. It only affects the
model\u2019s configuration. Use `),Xae=n(zse,"A",{href:!0});var Fta=s(Xae);mmt=r(Fta,"from_pretrained()"),Fta.forEach(t),fmt=r(zse," to load the model weights."),zse.forEach(t),gmt=i(m8),T(N7.$$.fragment,m8),m8.forEach(t),hmt=i(qi),at=n(qi,"DIV",{class:!0});var ji=s(at);T(RS.$$.fragment,ji),umt=i(ji),E8e=n(ji,"P",{});var Tta=s(E8e);pmt=r(Tta,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Tta.forEach(t),_mt=i(ji),Gn=n(ji,"P",{});var f8=s(Gn);bmt=r(f8,"The model class to instantiate is selected based on the "),C8e=n(f8,"CODE",{});var Mta=s(C8e);vmt=r(Mta,"model_type"),Mta.forEach(t),Fmt=r(f8,` property of the config object (either
passed as an argument or loaded from `),w8e=n(f8,"CODE",{});var Eta=s(w8e);Tmt=r(Eta,"pretrained_model_name_or_path"),Eta.forEach(t),Mmt=r(f8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A8e=n(f8,"CODE",{});var Cta=s(A8e);Emt=r(Cta,"pretrained_model_name_or_path"),Cta.forEach(t),Cmt=r(f8,":"),f8.forEach(t),wmt=i(ji),PS=n(ji,"UL",{});var kKe=s(PS);q7=n(kKe,"LI",{});var lUe=s(q7);L8e=n(lUe,"STRONG",{});var wta=s(L8e);Amt=r(wta,"beit"),wta.forEach(t),Lmt=r(lUe," \u2014 "),zae=n(lUe,"A",{href:!0});var Ata=s(zae);ymt=r(Ata,"FlaxBeitForImageClassification"),Ata.forEach(t),xmt=r(lUe," (BEiT model)"),lUe.forEach(t),$mt=i(kKe),j7=n(kKe,"LI",{});var iUe=s(j7);y8e=n(iUe,"STRONG",{});var Lta=s(y8e);kmt=r(Lta,"vit"),Lta.forEach(t),Smt=r(iUe," \u2014 "),Wae=n(iUe,"A",{href:!0});var yta=s(Wae);Rmt=r(yta,"FlaxViTForImageClassification"),yta.forEach(t),Pmt=r(iUe," (ViT model)"),iUe.forEach(t),kKe.forEach(t),Bmt=i(ji),T(D7.$$.fragment,ji),ji.forEach(t),qi.forEach(t),_Je=i(m),Qm=n(m,"H2",{class:!0});var SKe=s(Qm);G7=n(SKe,"A",{id:!0,class:!0,href:!0});var xta=s(G7);x8e=n(xta,"SPAN",{});var $ta=s(x8e);T(BS.$$.fragment,$ta),$ta.forEach(t),xta.forEach(t),Imt=i(SKe),$8e=n(SKe,"SPAN",{});var kta=s($8e);Nmt=r(kta,"FlaxAutoModelForVision2Seq"),kta.forEach(t),SKe.forEach(t),bJe=i(m),$r=n(m,"DIV",{class:!0});var Di=s($r);T(IS.$$.fragment,Di),qmt=i(Di),Um=n(Di,"P",{});var Wse=s(Um);jmt=r(Wse,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Qae=n(Wse,"A",{href:!0});var Sta=s(Qae);Dmt=r(Sta,"from_pretrained()"),Sta.forEach(t),Gmt=r(Wse," class method or the "),Uae=n(Wse,"A",{href:!0});var Rta=s(Uae);Omt=r(Rta,"from_config()"),Rta.forEach(t),Vmt=r(Wse,` class
method.`),Wse.forEach(t),Xmt=i(Di),NS=n(Di,"P",{});var RKe=s(NS);zmt=r(RKe,"This class cannot be instantiated directly using "),k8e=n(RKe,"CODE",{});var Pta=s(k8e);Wmt=r(Pta,"__init__()"),Pta.forEach(t),Qmt=r(RKe," (throws an error)."),RKe.forEach(t),Umt=i(Di),ca=n(Di,"DIV",{class:!0});var g8=s(ca);T(qS.$$.fragment,g8),Hmt=i(g8),S8e=n(g8,"P",{});var Bta=s(S8e);Jmt=r(Bta,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Bta.forEach(t),Ymt=i(g8),Hm=n(g8,"P",{});var Qse=s(Hm);Kmt=r(Qse,`Note:
Loading a model from its configuration file does `),R8e=n(Qse,"STRONG",{});var Ita=s(R8e);Zmt=r(Ita,"not"),Ita.forEach(t),eft=r(Qse,` load the model weights. It only affects the
model\u2019s configuration. Use `),Hae=n(Qse,"A",{href:!0});var Nta=s(Hae);oft=r(Nta,"from_pretrained()"),Nta.forEach(t),rft=r(Qse," to load the model weights."),Qse.forEach(t),tft=i(g8),T(O7.$$.fragment,g8),g8.forEach(t),aft=i(Di),nt=n(Di,"DIV",{class:!0});var Gi=s(nt);T(jS.$$.fragment,Gi),nft=i(Gi),P8e=n(Gi,"P",{});var qta=s(P8e);sft=r(qta,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),qta.forEach(t),lft=i(Gi),On=n(Gi,"P",{});var h8=s(On);ift=r(h8,"The model class to instantiate is selected based on the "),B8e=n(h8,"CODE",{});var jta=s(B8e);dft=r(jta,"model_type"),jta.forEach(t),cft=r(h8,` property of the config object (either
passed as an argument or loaded from `),I8e=n(h8,"CODE",{});var Dta=s(I8e);mft=r(Dta,"pretrained_model_name_or_path"),Dta.forEach(t),fft=r(h8,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N8e=n(h8,"CODE",{});var Gta=s(N8e);gft=r(Gta,"pretrained_model_name_or_path"),Gta.forEach(t),hft=r(h8,":"),h8.forEach(t),uft=i(Gi),q8e=n(Gi,"UL",{});var Ota=s(q8e);V7=n(Ota,"LI",{});var dUe=s(V7);j8e=n(dUe,"STRONG",{});var Vta=s(j8e);pft=r(Vta,"vision-encoder-decoder"),Vta.forEach(t),_ft=r(dUe," \u2014 "),Jae=n(dUe,"A",{href:!0});var Xta=s(Jae);bft=r(Xta,"FlaxVisionEncoderDecoderModel"),Xta.forEach(t),vft=r(dUe," (Vision Encoder decoder model)"),dUe.forEach(t),Ota.forEach(t),Fft=i(Gi),T(X7.$$.fragment,Gi),Gi.forEach(t),Di.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(esa)),c(f,"id","auto-classes"),c(f,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(f,"href","#auto-classes"),c(u,"class","relative group"),c(Xn,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoConfig"),c(Wn,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoModel"),c(Qn,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoTokenizer"),c(Ui,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertModel"),c(tf,"id","extending-the-auto-classes"),c(tf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(tf,"href","#extending-the-auto-classes"),c(Hi,"class","relative group"),c(nf,"id","transformers.AutoConfig"),c(nf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(nf,"href","#transformers.AutoConfig"),c(Ji,"class","relative group"),c(uP,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(pP,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig"),c(_P,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartConfig"),c(bP,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig"),c(vP,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertConfig"),c(FP,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(TP,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig"),c(MP,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(EP,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(CP,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(wP,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig"),c(AP,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig"),c(LP,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig"),c(yP,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig"),c(xP,"href","/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenConfig"),c($P,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig"),c(kP,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig"),c(SP,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig"),c(RP,"href","/docs/transformers/main/en/model_doc/cvt#transformers.CvtConfig"),c(PP,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(BP,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(IP,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(NP,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig"),c(qP,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(jP,"href","/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(DP,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig"),c(GP,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig"),c(OP,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig"),c(VP,"href","/docs/transformers/main/en/model_doc/donut#transformers.DonutSwinConfig"),c(XP,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRConfig"),c(zP,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTConfig"),c(WP,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig"),c(QP,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(UP,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig"),c(HP,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaConfig"),c(JP,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig"),c(YP,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig"),c(KP,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig"),c(ZP,"href","/docs/transformers/main/en/model_doc/glpn#transformers.GLPNConfig"),c(eB,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config"),c(oB,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(rB,"href","/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXConfig"),c(tB,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig"),c(aB,"href","/docs/transformers/main/en/model_doc/groupvit#transformers.GroupViTConfig"),c(nB,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig"),c(sB,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig"),c(lB,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(iB,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(dB,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(cB,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config"),c(mB,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDConfig"),c(fB,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitConfig"),c(gB,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig"),c(hB,"href","/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config"),c(uB,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig"),c(pB,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig"),c(_B,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Config"),c(bB,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig"),c(vB,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(FB,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig"),c(TB,"href","/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTConfig"),c(MB,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(EB,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(CB,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTConfig"),c(wB,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig"),c(AB,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config"),c(LB,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpConfig"),c(yB,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaConfig"),c(xB,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig"),c($B,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(kB,"href","/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig"),c(SB,"href","/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTConfig"),c(RB,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig"),c(PB,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig"),c(BB,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig"),c(IB,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(NB,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(qB,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(jB,"href","/docs/transformers/main/en/model_doc/rag#transformers.RagConfig"),c(DB,"href","/docs/transformers/main/en/model_doc/realm#transformers.RealmConfig"),c(GB,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig"),c(OB,"href","/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig"),c(VB,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig"),c(XB,"href","/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig"),c(zB,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertConfig"),c(WB,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig"),c(QB,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig"),c(UB,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig"),c(HB,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig"),c(JB,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig"),c(YB,"href","/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(KB,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(ZB,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(eI,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig"),c(oI,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(rI,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig"),c(tI,"href","/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2Config"),c(aI,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Config"),c(nI,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig"),c(sI,"href","/docs/transformers/main/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),c(lI,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(iI,"href","/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRConfig"),c(dI,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(cI,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(mI,"href","/docs/transformers/main/en/model_doc/van#transformers.VanConfig"),c(fI,"href","/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEConfig"),c(gI,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltConfig"),c(hI,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(uI,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(pI,"href","/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(_I,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig"),c(bI,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(vI,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(FI,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(TI,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig"),c(MI,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig"),c(EI,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig"),c(CI,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(wI,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(AI,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(LI,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig"),c(yI,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosConfig"),c(xI,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Eh,"id","transformers.AutoTokenizer"),c(Eh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Eh,"href","#transformers.AutoTokenizer"),c(Ki,"class","relative group"),c($I,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(kI,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizer"),c(SI,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(RI,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartTokenizer"),c(PI,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartTokenizerFast"),c(BI,"href","/docs/transformers/main/en/model_doc/barthez#transformers.BarthezTokenizer"),c(II,"href","/docs/transformers/main/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(NI,"href","/docs/transformers/main/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(qI,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(jI,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(DI,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(GI,"href","/docs/transformers/main/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(OI,"href","/docs/transformers/main/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(VI,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(XI,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(zI,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(WI,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(QI,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(UI,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(HI,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(JI,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomTokenizerFast"),c(YI,"href","/docs/transformers/main/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(KI,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertTokenizer"),c(ZI,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(eN,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineTokenizer"),c(oN,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizer"),c(rN,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(tN,"href","/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenTokenizer"),c(aN,"href","/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenTokenizerFast"),c(nN,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(sN,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(lN,"href","/docs/transformers/main/en/model_doc/cpm#transformers.CpmTokenizer"),c(iN,"href","/docs/transformers/main/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(dN,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(cN,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),c(mN,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(fN,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaTokenizer"),c(gN,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(hN,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(uN,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(pN,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(_N,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(bN,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(vN,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(FN,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraTokenizer"),c(TN,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(MN,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(EN,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetTokenizer"),c(CN,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(wN,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(AN,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelTokenizer"),c(LN,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(yN,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(xN,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c($N,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(kN,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(SN,"href","/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXTokenizerFast"),c(RN,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(PN,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(BN,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizer"),c(IN,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(NN,"href","/docs/transformers/main/en/model_doc/herbert#transformers.HerbertTokenizer"),c(qN,"href","/docs/transformers/main/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(jN,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(DN,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),c(GN,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(ON,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(VN,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(XN,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(zN,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(WN,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),c(QN,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),c(UN,"href","/docs/transformers/main/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(HN,"href","/docs/transformers/main/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(JN,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDTokenizer"),c(YN,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDTokenizerFast"),c(KN,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerTokenizer"),c(ZN,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(eq,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Tokenizer"),c(oq,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5TokenizerFast"),c(rq,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeTokenizer"),c(tq,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(aq,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(nq,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(sq,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianTokenizer"),c(lq,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartTokenizer"),c(iq,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(dq,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(cq,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(mq,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(fq,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(gq,"href","/docs/transformers/main/en/model_doc/mluke#transformers.MLukeTokenizer"),c(hq,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(uq,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(pq,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(_q,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(bq,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Tokenizer"),c(vq,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5TokenizerFast"),c(Fq,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpTokenizer"),c(Tq,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpTokenizerFast"),c(Mq,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(Eq,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(Cq,"href","/docs/transformers/main/en/model_doc/nllb#transformers.NllbTokenizer"),c(wq,"href","/docs/transformers/main/en/model_doc/nllb#transformers.NllbTokenizerFast"),c(Aq,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizer"),c(Lq,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(yq,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(xq,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c($q,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(kq,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizer"),c(Sq,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(Rq,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(Pq,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(Bq,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(Iq,"href","/docs/transformers/main/en/model_doc/phobert#transformers.PhobertTokenizer"),c(Nq,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartTokenizer"),c(qq,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(jq,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(Dq,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(Gq,"href","/docs/transformers/main/en/model_doc/rag#transformers.RagTokenizer"),c(Oq,"href","/docs/transformers/main/en/model_doc/realm#transformers.RealmTokenizer"),c(Vq,"href","/docs/transformers/main/en/model_doc/realm#transformers.RealmTokenizerFast"),c(Xq,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerTokenizer"),c(zq,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(Wq,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertTokenizer"),c(Qq,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(Uq,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(Hq,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(Jq,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),c(Yq,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(Kq,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(Zq,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(ej,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(oj,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(rj,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterTokenizer"),c(tj,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(aj,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(nj,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(sj,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Tokenizer"),c(lj,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5TokenizerFast"),c(ij,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasTokenizer"),c(dj,"href","/docs/transformers/main/en/model_doc/tapex#transformers.TapexTokenizer"),c(cj,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(mj,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(fj,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(gj,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(hj,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(uj,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(pj,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(_j,"href","/docs/transformers/main/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(bj,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMTokenizer"),c(vj,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(Fj,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMTokenizer"),c(Tj,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(Mj,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(Ej,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(Cj,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),c(wj,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(Aj,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(Lj,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(yj,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizer"),c(xj,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(au,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nu,"id","transformers.AutoFeatureExtractor"),c(nu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(nu,"href","#transformers.AutoFeatureExtractor"),c(Zi,"class","relative group"),c($j,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(kj,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(Sj,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(Rj,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(Pj,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(Bj,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(Ij,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(Nj,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(qj,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(jj,"href","/docs/transformers/main/en/model_doc/donut#transformers.DonutFeatureExtractor"),c(Dj,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(Gj,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(Oj,"href","/docs/transformers/main/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(Vj,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(Xj,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(zj,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTFeatureExtractor"),c(Wj,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(Qj,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3FeatureExtractor"),c(Uj,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitFeatureExtractor"),c(Hj,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(Jj,"href","/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTFeatureExtractor"),c(Yj,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTFeatureExtractor"),c(Kj,"href","/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTFeatureExtractor"),c(Zj,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(eD,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(oD,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(rD,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(tD,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(aD,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(nD,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(sD,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(lD,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(iD,"href","/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEFeatureExtractor"),c(dD,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltFeatureExtractor"),c(cD,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(mD,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(fD,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(gD,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(hD,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wu,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qu,"id","transformers.AutoProcessor"),c(Qu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Qu,"href","#transformers.AutoProcessor"),c(ed,"class","relative group"),c(uD,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(pD,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPProcessor"),c(_D,"href","/docs/transformers/main/en/model_doc/donut#transformers.DonutProcessor"),c(bD,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaProcessor"),c(vD,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPProcessor"),c(FD,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(TD,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Processor"),c(MD,"href","/docs/transformers/main/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(ED,"href","/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTProcessor"),c(CD,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(wD,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(AD,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(LD,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(yD,"href","/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRProcessor"),c(xD,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c($D,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(kD,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltProcessor"),c(SD,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(RD,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(PD,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(BD,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_p,"id","transformers.AutoModel"),c(_p,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_p,"href","#transformers.AutoModel"),c(rd,"class","relative group"),c(ID,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ND,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qD,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jD,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertModel"),c(DD,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartModel"),c(GD,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitModel"),c(OD,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertModel"),c(VD,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(XD,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdModel"),c(zD,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(WD,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(QD,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(UD,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomModel"),c(HD,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertModel"),c(JD,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineModel"),c(YD,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPModel"),c(KD,"href","/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenModel"),c(ZD,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertModel"),c(eG,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextModel"),c(oG,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLModel"),c(rG,"href","/docs/transformers/main/en/model_doc/cvt#transformers.CvtModel"),c(tG,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(aG,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(nG,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(sG,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaModel"),c(lG,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(iG,"href","/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(dG,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTModel"),c(cG,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrModel"),c(mG,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertModel"),c(fG,"href","/docs/transformers/main/en/model_doc/donut#transformers.DonutSwinModel"),c(gG,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(hG,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTModel"),c(uG,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraModel"),c(pG,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertModel"),c(_G,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaModel"),c(bG,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetModel"),c(vG,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTModel"),c(FG,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelModel"),c(TG,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelBaseModel"),c(MG,"href","/docs/transformers/main/en/model_doc/glpn#transformers.GLPNModel"),c(EG,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Model"),c(CG,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(wG,"href","/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXModel"),c(AG,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJModel"),c(LG,"href","/docs/transformers/main/en/model_doc/groupvit#transformers.GroupViTModel"),c(yG,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertModel"),c(xG,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertModel"),c($G,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(kG,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(SG,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(RG,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model"),c(PG,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDModel"),c(BG,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitModel"),c(IG,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerModel"),c(NG,"href","/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Model"),c(qG,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeModel"),c(jG,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertModel"),c(DG,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Model"),c(GG,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianModel"),c(OG,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerModel"),c(VG,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartModel"),c(XG,"href","/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTModel"),c(zG,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(WG,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertModel"),c(QG,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTModel"),c(UG,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetModel"),c(HG,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5Model"),c(JG,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpModel"),c(YG,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaModel"),c(KG,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Model"),c(ZG,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerModel"),c(eO,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(oO,"href","/docs/transformers/main/en/model_doc/opt#transformers.OPTModel"),c(rO,"href","/docs/transformers/main/en/model_doc/owlvit#transformers.OwlViTModel"),c(tO,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusModel"),c(aO,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverModel"),c(nO,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartModel"),c(sO,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerModel"),c(lO,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(iO,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertModel"),c(dO,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModel"),c(cO,"href","/docs/transformers/main/en/model_doc/regnet#transformers.RegNetModel"),c(mO,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertModel"),c(fO,"href","/docs/transformers/main/en/model_doc/resnet#transformers.ResNetModel"),c(gO,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel"),c(hO,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaModel"),c(uO,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerModel"),c(pO,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerModel"),c(_O,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWModel"),c(bO,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDModel"),c(vO,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(FO,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterModel"),c(TO,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(MO,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinModel"),c(EO,"href","/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2Model"),c(CO,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Model"),c(wO,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasModel"),c(AO,"href","/docs/transformers/main/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),c(LO,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(yO,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechModel"),c(xO,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c($O,"href","/docs/transformers/main/en/model_doc/van#transformers.VanModel"),c(kO,"href","/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEModel"),c(SO,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltModel"),c(RO,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(PO,"href","/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertModel"),c(BO,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTModel"),c(IO,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(NO,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(qO,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(jO,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMModel"),c(DO,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMModel"),c(GO,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMModel"),c(OO,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(VO,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(XO,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(zO,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetModel"),c(WO,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosModel"),c(QO,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoModel"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(y2,"id","transformers.AutoModelForPreTraining"),c(y2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(y2,"href","#transformers.AutoModelForPreTraining"),c(nd,"class","relative group"),c(UO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YO,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForPreTraining"),c(KO,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(ZO,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForPreTraining"),c(eV,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(oV,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomForCausalLM"),c(rV,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(tV,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(aV,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(nV,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(sV,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(lV,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(iV,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForPreTraining"),c(dV,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(cV,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaForPreTraining"),c(mV,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForPreTraining"),c(fV,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(gV,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(hV,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(uV,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(pV,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(_V,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(bV,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeForMaskedLM"),c(vV,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(FV,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(TV,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(MV,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(EV,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(CV,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForPreTraining"),c(wV,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(AV,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel"),c(LV,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(yV,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(xV,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c($V,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(kV,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(SV,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(RV,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(PV,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(BV,"href","/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEForPreTraining"),c(IV,"href","/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(NV,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(qV,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(jV,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(DV,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(GV,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(OV,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(VV,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wb,"id","transformers.AutoModelForCausalLM"),c(wb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(wb,"href","#transformers.AutoModelForCausalLM"),c(id,"class","relative group"),c(XV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(WV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QV,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForCausalLM"),c(UV,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertLMHeadModel"),c(HV,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(JV,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(YV,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(KV,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(ZV,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(eX,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomForCausalLM"),c(oX,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(rX,"href","/docs/transformers/main/en/model_doc/codegen#transformers.CodeGenForCausalLM"),c(tX,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(aX,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(nX,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForCausalLM"),c(sX,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(lX,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(iX,"href","/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM"),c(dX,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(cX,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianForCausalLM"),c(mX,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForCausalLM"),c(fX,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(gX,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpForCausalLM"),c(hX,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(uX,"href","/docs/transformers/main/en/model_doc/opt#transformers.OPTForCausalLM"),c(pX,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(_X,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(bX,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(vX,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(FX,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(TX,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(MX,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(EX,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(CX,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(wX,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(AX,"href","/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(LX,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(yX,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(xX,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c($X,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(kX,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(SX,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uv,"id","transformers.AutoModelForMaskedLM"),c(uv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(uv,"href","#transformers.AutoModelForMaskedLM"),c(md,"class","relative group"),c(RX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(PX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(BX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IX,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(NX,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(qX,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForMaskedLM"),c(jX,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(DX,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(GX,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(OX,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(VX,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(XX,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(zX,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(WX,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(QX,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(UX,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(HX,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(JX,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(YX,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(KX,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(ZX,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeForMaskedLM"),c(ez,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(oz,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(rz,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(tz,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(az,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(nz,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForMaskedLM"),c(sz,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(lz,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(iz,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(dz,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(cz,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(mz,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(fz,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(gz,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(hz,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(uz,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(pz,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(_z,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(bz,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(t1,"id","transformers.AutoModelForSeq2SeqLM"),c(t1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(t1,"href","#transformers.AutoModelForSeq2SeqLM"),c(hd,"class","relative group"),c(vz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Fz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Tz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mz,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(Ez,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(Cz,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(wz,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(Az,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(Lz,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(yz,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(xz,"href","/docs/transformers/main/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration"),c($z,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(kz,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianMTModel"),c(Sz,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(Rz,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(Pz,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpForConditionalGeneration"),c(Bz,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(Iz,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(Nz,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(qz,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(jz,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(Dz,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(A1,"id","transformers.AutoModelForSequenceClassification"),c(A1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(A1,"href","#transformers.AutoModelForSequenceClassification"),c(_d,"class","relative group"),c(Gz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Oz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Vz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xz,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(zz,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForSequenceClassification"),c(Wz,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForSequenceClassification"),c(Qz,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(Uz,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(Hz,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomForSequenceClassification"),c(Jz,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(Yz,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(Kz,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(Zz,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(eW,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(oW,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(rW,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(tW,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(aW,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(nW,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(sW,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(lW,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(iW,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(dW,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(cW,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(mW,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(fW,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(gW,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(hW,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification"),c(uW,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDForSequenceClassification"),c(pW,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(_W,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeForSequenceClassification"),c(bW,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(vW,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(FW,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(TW,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(MW,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpForSequenceClassification"),c(EW,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForSequenceClassification"),c(CW,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(wW,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(AW,"href","/docs/transformers/main/en/model_doc/opt#transformers.OPTForSequenceClassification"),c(LW,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(yW,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(xW,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c($W,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(kW,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(SW,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(RW,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(PW,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(BW,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(IW,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(NW,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(qW,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(jW,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(DW,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(GW,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yF,"id","transformers.AutoModelForMultipleChoice"),c(yF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yF,"href","#transformers.AutoModelForMultipleChoice"),c(Fd,"class","relative group"),c(OW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zW,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(WW,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForMultipleChoice"),c(QW,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(UW,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(HW,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(JW,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(YW,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(KW,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(ZW,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(eQ,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(oQ,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(rQ,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(tQ,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(aQ,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(nQ,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(sQ,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeForMultipleChoice"),c(lQ,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(iQ,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(dQ,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(cQ,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForMultipleChoice"),c(mQ,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(fQ,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(gQ,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(hQ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(uQ,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(pQ,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(_Q,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(bQ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(vQ,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(FQ,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(TQ,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dT,"id","transformers.AutoModelForNextSentencePrediction"),c(dT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(dT,"href","#transformers.AutoModelForNextSentencePrediction"),c(Ed,"class","relative group"),c(MQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(EQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(CQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wQ,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(AQ,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(LQ,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(yQ,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(xQ,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForNextSentencePrediction"),c($Q,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vT,"id","transformers.AutoModelForTokenClassification"),c(vT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vT,"href","#transformers.AutoModelForTokenClassification"),c(Ad,"class","relative group"),c(kQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PQ,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(BQ,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForTokenClassification"),c(IQ,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(NQ,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomForTokenClassification"),c(qQ,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(jQ,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForTokenClassification"),c(DQ,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(GQ,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(OQ,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(VQ,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(XQ,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(zQ,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(WQ,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(QQ,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(UQ,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(HQ,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(JQ,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(YQ,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(KQ,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(ZQ,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification"),c(eU,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(oU,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeForTokenClassification"),c(rU,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(tU,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(aU,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(nU,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForTokenClassification"),c(sU,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(lU,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(iU,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(dU,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(cU,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(mU,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(fU,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(gU,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(hU,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(uU,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(pU,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sM,"id","transformers.AutoModelForQuestionAnswering"),c(sM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sM,"href","#transformers.AutoModelForQuestionAnswering"),c(xd,"class","relative group"),c(_U,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FU,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(TU,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(MU,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(EU,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(CU,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(wU,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(AU,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(LU,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(yU,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(xU,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c($U,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(kU,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(SU,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(RU,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(PU,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(BU,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(IU,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(NU,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(qU,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(jU,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),c(DU,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(GU,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(OU,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeForQuestionAnswering"),c(VU,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(XU,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(zU,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(WU,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(QU,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(UU,"href","/docs/transformers/main/en/model_doc/mvp#transformers.MvpForQuestionAnswering"),c(HU,"href","/docs/transformers/main/en/model_doc/nezha#transformers.NezhaForQuestionAnswering"),c(JU,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(YU,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(KU,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(ZU,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(eH,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(oH,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(rH,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(tH,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(aH,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(nH,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(sH,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(lH,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(iH,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZM,"id","transformers.AutoModelForTableQuestionAnswering"),c(ZM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ZM,"href","#transformers.AutoModelForTableQuestionAnswering"),c(Sd,"class","relative group"),c(dH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fH,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aE,"id","transformers.AutoModelForImageClassification"),c(aE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(aE,"href","#transformers.AutoModelForImageClassification"),c(Bd,"class","relative group"),c(gH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pH,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitForImageClassification"),c(_H,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(bH,"href","/docs/transformers/main/en/model_doc/cvt#transformers.CvtForImageClassification"),c(vH,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(FH,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassification"),c(TH,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(MH,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(EH,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitForImageClassification"),c(CH,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher"),c(wH,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTForImageClassification"),c(AH,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(LH,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(yH,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(xH,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c($H,"href","/docs/transformers/main/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(kH,"href","/docs/transformers/main/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(SH,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(RH,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinForImageClassification"),c(PH,"href","/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2ForImageClassification"),c(BH,"href","/docs/transformers/main/en/model_doc/van#transformers.VanForImageClassification"),c(IH,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTForImageClassification"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ME,"id","transformers.AutoModelForVideoClassification"),c(ME,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ME,"href","#transformers.AutoModelForVideoClassification"),c(qd,"class","relative group"),c(NH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DH,"href","/docs/transformers/main/en/model_doc/videomae#transformers.VideoMAEForVideoClassification"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LE,"id","transformers.AutoModelForVision2Seq"),c(LE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(LE,"href","#transformers.AutoModelForVision2Seq"),c(Gd,"class","relative group"),c(GH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XH,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SE,"id","transformers.AutoModelForVisualQuestionAnswering"),c(SE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(SE,"href","#transformers.AutoModelForVisualQuestionAnswering"),c(Xd,"class","relative group"),c(zH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UH,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltForQuestionAnswering"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NE,"id","transformers.AutoModelForAudioClassification"),c(NE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(NE,"href","#transformers.AutoModelForAudioClassification"),c(Qd,"class","relative group"),c(HH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KH,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(ZH,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(eJ,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(oJ,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(rJ,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(tJ,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(aJ,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(nJ,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(sJ,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JE,"id","transformers.AutoModelForAudioFrameClassification"),c(JE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(JE,"href","#transformers.AutoModelForAudioFrameClassification"),c(Jd,"class","relative group"),c(lJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cJ,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(mJ,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(fJ,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(gJ,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(hJ,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(n4,"id","transformers.AutoModelForCTC"),c(n4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(n4,"href","#transformers.AutoModelForCTC"),c(Zd,"class","relative group"),c(uJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_J,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bJ,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(vJ,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertForCTC"),c(FJ,"href","/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTForCTC"),c(TJ,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWForCTC"),c(MJ,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForCTC"),c(EJ,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(CJ,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(wJ,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(AJ,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(LJ,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForCTC"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(v4,"id","transformers.AutoModelForSpeechSeq2Seq"),c(v4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(v4,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(rc,"class","relative group"),c(yJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c($J,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kJ,"href","/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(SJ,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(w4,"id","transformers.AutoModelForAudioXVector"),c(w4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(w4,"href","#transformers.AutoModelForAudioXVector"),c(nc,"class","relative group"),c(RJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(PJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(BJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IJ,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(NJ,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(qJ,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(jJ,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(DJ,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForXVector"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(P4,"id","transformers.AutoModelForMaskedImageModeling"),c(P4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(P4,"href","#transformers.AutoModelForMaskedImageModeling"),c(ic,"class","relative group"),c(GJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XJ,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(zJ,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(WJ,"href","/docs/transformers/main/en/model_doc/swinv2#transformers.Swinv2ForMaskedImageModeling"),c(QJ,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(O4,"id","transformers.AutoModelForObjectDetection"),c(O4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(O4,"href","#transformers.AutoModelForObjectDetection"),c(mc,"class","relative group"),c(UJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YJ,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrForObjectDetection"),c(KJ,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(U4,"id","transformers.AutoModelForImageSegmentation"),c(U4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(U4,"href","#transformers.AutoModelForImageSegmentation"),c(hc,"class","relative group"),c(ZJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rY,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrForSegmentation"),c(Fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Z4,"id","transformers.AutoModelForSemanticSegmentation"),c(Z4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Z4,"href","#transformers.AutoModelForSemanticSegmentation"),c(_c,"class","relative group"),c(tY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sY,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(lY,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(iY,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(dY,"href","/docs/transformers/main/en/model_doc/mobilevit#transformers.MobileViTForSemanticSegmentation"),c(cY,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(To,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iC,"id","transformers.AutoModelForInstanceSegmentation"),c(iC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(iC,"href","#transformers.AutoModelForInstanceSegmentation"),c(Fc,"class","relative group"),c(mY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hY,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(Mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gC,"id","transformers.TFAutoModel"),c(gC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gC,"href","#transformers.TFAutoModel"),c(Ec,"class","relative group"),c(uY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_Y,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bY,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertModel"),c(vY,"href","/docs/transformers/main/en/model_doc/bart#transformers.TFBartModel"),c(FY,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertModel"),c(TY,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(MY,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(EY,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertModel"),c(CY,"href","/docs/transformers/main/en/model_doc/clip#transformers.TFCLIPModel"),c(wY,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertModel"),c(AY,"href","/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextModel"),c(LY,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLModel"),c(yY,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(xY,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaModel"),c($Y,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(kY,"href","/docs/transformers/main/en/model_doc/deit#transformers.TFDeiTModel"),c(SY,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(RY,"href","/docs/transformers/main/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(PY,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraModel"),c(BY,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(IY,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelModel"),c(NY,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(qY,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2Model"),c(jY,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJModel"),c(DY,"href","/docs/transformers/main/en/model_doc/hubert#transformers.TFHubertModel"),c(GY,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(OY,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.TFLayoutLMv3Model"),c(VY,"href","/docs/transformers/main/en/model_doc/led#transformers.TFLEDModel"),c(XY,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerModel"),c(zY,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertModel"),c(WY,"href","/docs/transformers/main/en/model_doc/marian#transformers.TFMarianModel"),c(QY,"href","/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartModel"),c(UY,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(HY,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetModel"),c(JY,"href","/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5Model"),c(YY,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(KY,"href","/docs/transformers/main/en/model_doc/opt#transformers.TFOPTModel"),c(ZY,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusModel"),c(eK,"href","/docs/transformers/main/en/model_doc/regnet#transformers.TFRegNetModel"),c(oK,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertModel"),c(rK,"href","/docs/transformers/main/en/model_doc/resnet#transformers.TFResNetModel"),c(tK,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaModel"),c(aK,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerModel"),c(nK,"href","/docs/transformers/main/en/model_doc/segformer#transformers.TFSegformerModel"),c(sK,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(lK,"href","/docs/transformers/main/en/model_doc/swin#transformers.TFSwinModel"),c(iK,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5Model"),c(dK,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasModel"),c(cK,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(mK,"href","/docs/transformers/main/en/model_doc/vit#transformers.TFViTModel"),c(fK,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(gK,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(hK,"href","/docs/transformers/main/en/model_doc/xglm#transformers.TFXGLMModel"),c(uK,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMModel"),c(pK,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(_K,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetModel"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(h3,"id","transformers.TFAutoModelForPreTraining"),c(h3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(h3,"href","#transformers.TFAutoModelForPreTraining"),c(Ac,"class","relative group"),c(bK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TK,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(MK,"href","/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(EK,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForPreTraining"),c(CK,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(wK,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(AK,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(LK,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(yK,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(xK,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c($K,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(kK,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(SK,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(RK,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(PK,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(BK,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(IK,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(NK,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(qK,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(jK,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(DK,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(GK,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(OK,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(VK,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(D3,"id","transformers.TFAutoModelForCausalLM"),c(D3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(D3,"href","#transformers.TFAutoModelForCausalLM"),c(xc,"class","relative group"),c(XK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(WK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QK,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(UK,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(HK,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(JK,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(YK,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(KK,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(ZK,"href","/docs/transformers/main/en/model_doc/opt#transformers.TFOPTForCausalLM"),c(eZ,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(oZ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(rZ,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(tZ,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(aZ,"href","/docs/transformers/main/en/model_doc/xglm#transformers.TFXGLMForCausalLM"),c(nZ,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(sZ,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(t5,"id","transformers.TFAutoModelForImageClassification"),c(t5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(t5,"href","#transformers.TFAutoModelForImageClassification"),c(Sc,"class","relative group"),c(lZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cZ,"href","/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(mZ,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(fZ,"href","/docs/transformers/main/en/model_doc/deit#transformers.TFDeiTForImageClassification"),c(gZ,"href","/docs/transformers/main/en/model_doc/deit#transformers.TFDeiTForImageClassificationWithTeacher"),c(hZ,"href","/docs/transformers/main/en/model_doc/regnet#transformers.TFRegNetForImageClassification"),c(uZ,"href","/docs/transformers/main/en/model_doc/resnet#transformers.TFResNetForImageClassification"),c(pZ,"href","/docs/transformers/main/en/model_doc/segformer#transformers.TFSegformerForImageClassification"),c(_Z,"href","/docs/transformers/main/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(bZ,"href","/docs/transformers/main/en/model_doc/vit#transformers.TFViTForImageClassification"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(g5,"id","transformers.TFAutoModelForSemanticSegmentation"),c(g5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(g5,"href","#transformers.TFAutoModelForSemanticSegmentation"),c(Bc,"class","relative group"),c(vZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MZ,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionForSemanticSegmentation"),c(EZ,"href","/docs/transformers/main/en/model_doc/segformer#transformers.TFSegformerForSemanticSegmentation"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(b5,"id","transformers.TFAutoModelForMaskedLM"),c(b5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(b5,"href","#transformers.TFAutoModelForMaskedLM"),c(qc,"class","relative group"),c(CZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(AZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LZ,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(yZ,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(xZ,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c($Z,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(kZ,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(SZ,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(RZ,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(PZ,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(BZ,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(IZ,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(NZ,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(qZ,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(jZ,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(DZ,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(GZ,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(OZ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(VZ,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(XZ,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(zZ,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(WZ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(G5,"id","transformers.TFAutoModelForSeq2SeqLM"),c(G5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(G5,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(Gc,"class","relative group"),c(QZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JZ,"href","/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(YZ,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(KZ,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(ZZ,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(eee,"href","/docs/transformers/main/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(oee,"href","/docs/transformers/main/en/model_doc/marian#transformers.TFMarianMTModel"),c(ree,"href","/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(tee,"href","/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(aee,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(nee,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(e0,"id","transformers.TFAutoModelForSequenceClassification"),c(e0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(e0,"href","#transformers.TFAutoModelForSequenceClassification"),c(Xc,"class","relative group"),c(see,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dee,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(cee,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(mee,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(fee,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(gee,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(hee,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(uee,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(pee,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(_ee,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(bee,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(vee,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(Fee,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(Tee,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(Mee,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(Eee,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.TFLayoutLMv3ForSequenceClassification"),c(Cee,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(wee,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(Aee,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(Lee,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(yee,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(xee,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c($ee,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(kee,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(See,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(Ree,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(Pee,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(Bee,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($0,"id","transformers.TFAutoModelForMultipleChoice"),c($0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($0,"href","#transformers.TFAutoModelForMultipleChoice"),c(Qc,"class","relative group"),c(Iee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jee,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(Dee,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(Gee,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(Oee,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(Vee,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(Xee,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(zee,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(Wee,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(Qee,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(Uee,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(Hee,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(Jee,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(Yee,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(Kee,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(Zee,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(eoe,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(ooe,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(J0,"id","transformers.TFAutoModelForNextSentencePrediction"),c(J0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(J0,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(Jc,"class","relative group"),c(roe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(toe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aoe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(noe,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(soe,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ow,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(ow,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ow,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(Zc,"class","relative group"),c(loe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ioe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(doe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(coe,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nw,"id","transformers.TFAutoModelForTokenClassification"),c(nw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(nw,"href","#transformers.TFAutoModelForTokenClassification"),c(rm,"class","relative group"),c(moe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(foe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(goe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hoe,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(uoe,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(poe,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(_oe,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(boe,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(voe,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(Foe,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(Toe,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(Moe,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(Eoe,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(Coe,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(woe,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.TFLayoutLMv3ForTokenClassification"),c(Aoe,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(Loe,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(yoe,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(xoe,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c($oe,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(koe,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(Soe,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(Roe,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(Poe,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xw,"id","transformers.TFAutoModelForQuestionAnswering"),c(xw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(xw,"href","#transformers.TFAutoModelForQuestionAnswering"),c(nm,"class","relative group"),c(Boe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ioe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Noe,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qoe,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(joe,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(Doe,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(Goe,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(Ooe,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(Voe,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(Xoe,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(zoe,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(Woe,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(Qoe,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(Uoe,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(Hoe,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.TFLayoutLMv3ForQuestionAnswering"),c(Joe,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(Yoe,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(Koe,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(Zoe,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(ere,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(ore,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(rre,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(tre,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(are,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zw,"id","transformers.TFAutoModelForVision2Seq"),c(Zw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Zw,"href","#transformers.TFAutoModelForVision2Seq"),c(im,"class","relative group"),c(nre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ire,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(t6,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(t6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(t6,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(mm,"class","relative group"),c(dre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fre,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(l6,"id","transformers.FlaxAutoModel"),c(l6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(l6,"href","#transformers.FlaxAutoModel"),c(hm,"class","relative group"),c(gre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ure,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pre,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertModel"),c(_re,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartModel"),c(bre,"href","/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitModel"),c(vre,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertModel"),c(Fre,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(Tre,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(Mre,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(Ere,"href","/docs/transformers/main/en/model_doc/clip#transformers.FlaxCLIPModel"),c(Cre,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(wre,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraModel"),c(Are,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(Lre,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(yre,"href","/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(xre,"href","/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5Model"),c($re,"href","/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianModel"),c(kre,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartModel"),c(Sre,"href","/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5Model"),c(Rre,"href","/docs/transformers/main/en/model_doc/opt#transformers.FlaxOPTModel"),c(Pre,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(Bre,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(Ire,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(Nre,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5Model"),c(qre,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(jre,"href","/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTModel"),c(Dre,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(Gre,"href","/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(Ore,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(N6,"id","transformers.FlaxAutoModelForCausalLM"),c(N6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(N6,"href","#transformers.FlaxAutoModelForCausalLM"),c(_m,"class","relative group"),c(Vre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zre,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ea,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wre,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(Qre,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(Ure,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(Hre,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(Jre,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(Yre,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(Kre,"href","/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(Zre,"href","/docs/transformers/main/en/model_doc/opt#transformers.FlaxOPTForCausalLM"),c(ete,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(ote,"href","/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(J6,"id","transformers.FlaxAutoModelForPreTraining"),c(J6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(J6,"href","#transformers.FlaxAutoModelForPreTraining"),c(Fm,"class","relative group"),c(rte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ate,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nte,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(ste,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(lte,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(ite,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(dte,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(cte,"href","/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(mte,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(fte,"href","/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(gte,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(hte,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(ute,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(pte,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(_te,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fA,"id","transformers.FlaxAutoModelForMaskedLM"),c(fA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(fA,"href","#transformers.FlaxAutoModelForMaskedLM"),c(Em,"class","relative group"),c(bte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Fte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ra,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tte,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(Mte,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(Ete,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(Cte,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(wte,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(Ate,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(Lte,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(yte,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(xte,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c($te,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wA,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(wA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(wA,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(Am,"class","relative group"),c(kte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ste,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Rte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ta,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Pte,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(Bte,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(Ite,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(Nte,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(qte,"href","/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(jte,"href","/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(Dte,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(Gte,"href","/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(Ote,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(Vte,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qA,"id","transformers.FlaxAutoModelForSequenceClassification"),c(qA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(qA,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(xm,"class","relative group"),c(Xte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Wte,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qte,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(Ute,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(Hte,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(Jte,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(Yte,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(Kte,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(Zte,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(eae,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(oae,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(rae,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YA,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(YA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(YA,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(Sm,"class","relative group"),c(tae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(na,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sae,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(lae,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(iae,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(dae,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(cae,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(mae,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(fae,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(gae,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(hae,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(uae,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(c7,"id","transformers.FlaxAutoModelForTokenClassification"),c(c7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(c7,"href","#transformers.FlaxAutoModelForTokenClassification"),c(Bm,"class","relative group"),c(pae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_ae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vae,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(Fae,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(Tae,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(Mae,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(Eae,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(Cae,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(wae,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(Aae,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(T7,"id","transformers.FlaxAutoModelForMultipleChoice"),c(T7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(T7,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(qm,"class","relative group"),c(Lae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(la,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($ae,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(kae,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(Sae,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(Rae,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(Pae,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(Bae,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(Iae,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(Nae,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(S7,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(S7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(S7,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(Gm,"class","relative group"),c(qae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Dae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ia,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Gae,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(I7,"id","transformers.FlaxAutoModelForImageClassification"),c(I7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(I7,"href","#transformers.FlaxAutoModelForImageClassification"),c(Xm,"class","relative group"),c(Oae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Xae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(da,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zae,"href","/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(Wae,"href","/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(G7,"id","transformers.FlaxAutoModelForVision2Seq"),c(G7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(G7,"href","#transformers.FlaxAutoModelForVision2Seq"),c(Qm,"class","relative group"),c(Qae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Uae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Hae,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ca,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jae,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(m,_){e(document.head,g),b(m,v,_),b(m,u,_),e(u,f),e(f,p),M(d,p,null),e(u,h),e(u,Ao),e(Ao,Oi),b(m,Zm,_),b(m,mt,_),e(mt,Vi),e(mt,Xi),e(Xi,u8),e(mt,ef),b(m,Oe,_),b(m,Qe,_),e(Qe,zi),e(Qe,Xn),e(Xn,p8),e(Qe,zn),e(Qe,Wn),e(Wn,_8),e(Qe,Wi),e(Qe,Qn),e(Qn,b8),e(Qe,Qi),b(m,of,_),M(ja,m,_),b(m,Ue,_),b(m,Ae,_),e(Ae,dP),e(Ae,Ui),e(Ui,cP),e(Ae,mP),b(m,Lo,_),b(m,Da,_),e(Da,fP),e(Da,rf),e(rf,gP),e(Da,PKe),b(m,cUe,_),b(m,Hi,_),e(Hi,tf),e(tf,Use),M(v8,Use,null),e(Hi,BKe),e(Hi,Hse),e(Hse,IKe),b(m,mUe,_),b(m,Un,_),e(Un,NKe),e(Un,Jse),e(Jse,qKe),e(Un,jKe),e(Un,Yse),e(Yse,DKe),e(Un,GKe),b(m,fUe,_),M(F8,m,_),b(m,gUe,_),b(m,hP,_),e(hP,OKe),b(m,hUe,_),M(af,m,_),b(m,uUe,_),b(m,Ji,_),e(Ji,nf),e(nf,Kse),M(T8,Kse,null),e(Ji,VKe),e(Ji,Zse),e(Zse,XKe),b(m,pUe,_),b(m,yo,_),M(M8,yo,null),e(yo,zKe),e(yo,E8),e(E8,WKe),e(E8,uP),e(uP,QKe),e(E8,UKe),e(yo,HKe),e(yo,C8),e(C8,JKe),e(C8,ele),e(ele,YKe),e(C8,KKe),e(yo,ZKe),e(yo,kr),M(w8,kr,null),e(kr,eZe),e(kr,ole),e(ole,oZe),e(kr,rZe),e(kr,Yi),e(Yi,tZe),e(Yi,rle),e(rle,aZe),e(Yi,nZe),e(Yi,tle),e(tle,sZe),e(Yi,lZe),e(kr,iZe),e(kr,A),e(A,sf),e(sf,ale),e(ale,dZe),e(sf,cZe),e(sf,pP),e(pP,mZe),e(sf,fZe),e(A,gZe),e(A,lf),e(lf,nle),e(nle,hZe),e(lf,uZe),e(lf,_P),e(_P,pZe),e(lf,_Ze),e(A,bZe),e(A,df),e(df,sle),e(sle,vZe),e(df,FZe),e(df,bP),e(bP,TZe),e(df,MZe),e(A,EZe),e(A,cf),e(cf,lle),e(lle,CZe),e(cf,wZe),e(cf,vP),e(vP,AZe),e(cf,LZe),e(A,yZe),e(A,mf),e(mf,ile),e(ile,xZe),e(mf,$Ze),e(mf,FP),e(FP,kZe),e(mf,SZe),e(A,RZe),e(A,ff),e(ff,dle),e(dle,PZe),e(ff,BZe),e(ff,TP),e(TP,IZe),e(ff,NZe),e(A,qZe),e(A,gf),e(gf,cle),e(cle,jZe),e(gf,DZe),e(gf,MP),e(MP,GZe),e(gf,OZe),e(A,VZe),e(A,hf),e(hf,mle),e(mle,XZe),e(hf,zZe),e(hf,EP),e(EP,WZe),e(hf,QZe),e(A,UZe),e(A,uf),e(uf,fle),e(fle,HZe),e(uf,JZe),e(uf,CP),e(CP,YZe),e(uf,KZe),e(A,ZZe),e(A,pf),e(pf,gle),e(gle,eeo),e(pf,oeo),e(pf,wP),e(wP,reo),e(pf,teo),e(A,aeo),e(A,_f),e(_f,hle),e(hle,neo),e(_f,seo),e(_f,AP),e(AP,leo),e(_f,ieo),e(A,deo),e(A,bf),e(bf,ule),e(ule,ceo),e(bf,meo),e(bf,LP),e(LP,feo),e(bf,geo),e(A,heo),e(A,vf),e(vf,ple),e(ple,ueo),e(vf,peo),e(vf,yP),e(yP,_eo),e(vf,beo),e(A,veo),e(A,Ff),e(Ff,_le),e(_le,Feo),e(Ff,Teo),e(Ff,xP),e(xP,Meo),e(Ff,Eeo),e(A,Ceo),e(A,Tf),e(Tf,ble),e(ble,weo),e(Tf,Aeo),e(Tf,$P),e($P,Leo),e(Tf,yeo),e(A,xeo),e(A,Mf),e(Mf,vle),e(vle,$eo),e(Mf,keo),e(Mf,kP),e(kP,Seo),e(Mf,Reo),e(A,Peo),e(A,Ef),e(Ef,Fle),e(Fle,Beo),e(Ef,Ieo),e(Ef,SP),e(SP,Neo),e(Ef,qeo),e(A,jeo),e(A,Cf),e(Cf,Tle),e(Tle,Deo),e(Cf,Geo),e(Cf,RP),e(RP,Oeo),e(Cf,Veo),e(A,Xeo),e(A,wf),e(wf,Mle),e(Mle,zeo),e(wf,Weo),e(wf,PP),e(PP,Qeo),e(wf,Ueo),e(A,Heo),e(A,Af),e(Af,Ele),e(Ele,Jeo),e(Af,Yeo),e(Af,BP),e(BP,Keo),e(Af,Zeo),e(A,eoo),e(A,Lf),e(Lf,Cle),e(Cle,ooo),e(Lf,roo),e(Lf,IP),e(IP,too),e(Lf,aoo),e(A,noo),e(A,yf),e(yf,wle),e(wle,soo),e(yf,loo),e(yf,NP),e(NP,ioo),e(yf,doo),e(A,coo),e(A,xf),e(xf,Ale),e(Ale,moo),e(xf,foo),e(xf,qP),e(qP,goo),e(xf,hoo),e(A,uoo),e(A,$f),e($f,Lle),e(Lle,poo),e($f,_oo),e($f,jP),e(jP,boo),e($f,voo),e(A,Foo),e(A,kf),e(kf,yle),e(yle,Too),e(kf,Moo),e(kf,DP),e(DP,Eoo),e(kf,Coo),e(A,woo),e(A,Sf),e(Sf,xle),e(xle,Aoo),e(Sf,Loo),e(Sf,GP),e(GP,yoo),e(Sf,xoo),e(A,$oo),e(A,Rf),e(Rf,$le),e($le,koo),e(Rf,Soo),e(Rf,OP),e(OP,Roo),e(Rf,Poo),e(A,Boo),e(A,Pf),e(Pf,kle),e(kle,Ioo),e(Pf,Noo),e(Pf,VP),e(VP,qoo),e(Pf,joo),e(A,Doo),e(A,Bf),e(Bf,Sle),e(Sle,Goo),e(Bf,Ooo),e(Bf,XP),e(XP,Voo),e(Bf,Xoo),e(A,zoo),e(A,If),e(If,Rle),e(Rle,Woo),e(If,Qoo),e(If,zP),e(zP,Uoo),e(If,Hoo),e(A,Joo),e(A,Nf),e(Nf,Ple),e(Ple,Yoo),e(Nf,Koo),e(Nf,WP),e(WP,Zoo),e(Nf,ero),e(A,oro),e(A,qf),e(qf,Ble),e(Ble,rro),e(qf,tro),e(qf,QP),e(QP,aro),e(qf,nro),e(A,sro),e(A,jf),e(jf,Ile),e(Ile,lro),e(jf,iro),e(jf,UP),e(UP,dro),e(jf,cro),e(A,mro),e(A,Df),e(Df,Nle),e(Nle,fro),e(Df,gro),e(Df,HP),e(HP,hro),e(Df,uro),e(A,pro),e(A,Gf),e(Gf,qle),e(qle,_ro),e(Gf,bro),e(Gf,JP),e(JP,vro),e(Gf,Fro),e(A,Tro),e(A,Of),e(Of,jle),e(jle,Mro),e(Of,Ero),e(Of,YP),e(YP,Cro),e(Of,wro),e(A,Aro),e(A,Vf),e(Vf,Dle),e(Dle,Lro),e(Vf,yro),e(Vf,KP),e(KP,xro),e(Vf,$ro),e(A,kro),e(A,Xf),e(Xf,Gle),e(Gle,Sro),e(Xf,Rro),e(Xf,ZP),e(ZP,Pro),e(Xf,Bro),e(A,Iro),e(A,zf),e(zf,Ole),e(Ole,Nro),e(zf,qro),e(zf,eB),e(eB,jro),e(zf,Dro),e(A,Gro),e(A,Wf),e(Wf,Vle),e(Vle,Oro),e(Wf,Vro),e(Wf,oB),e(oB,Xro),e(Wf,zro),e(A,Wro),e(A,Qf),e(Qf,Xle),e(Xle,Qro),e(Qf,Uro),e(Qf,rB),e(rB,Hro),e(Qf,Jro),e(A,Yro),e(A,Uf),e(Uf,zle),e(zle,Kro),e(Uf,Zro),e(Uf,tB),e(tB,eto),e(Uf,oto),e(A,rto),e(A,Hf),e(Hf,Wle),e(Wle,tto),e(Hf,ato),e(Hf,aB),e(aB,nto),e(Hf,sto),e(A,lto),e(A,Jf),e(Jf,Qle),e(Qle,ito),e(Jf,dto),e(Jf,nB),e(nB,cto),e(Jf,mto),e(A,fto),e(A,Yf),e(Yf,Ule),e(Ule,gto),e(Yf,hto),e(Yf,sB),e(sB,uto),e(Yf,pto),e(A,_to),e(A,Kf),e(Kf,Hle),e(Hle,bto),e(Kf,vto),e(Kf,lB),e(lB,Fto),e(Kf,Tto),e(A,Mto),e(A,Zf),e(Zf,Jle),e(Jle,Eto),e(Zf,Cto),e(Zf,iB),e(iB,wto),e(Zf,Ato),e(A,Lto),e(A,eg),e(eg,Yle),e(Yle,yto),e(eg,xto),e(eg,dB),e(dB,$to),e(eg,kto),e(A,Sto),e(A,og),e(og,Kle),e(Kle,Rto),e(og,Pto),e(og,cB),e(cB,Bto),e(og,Ito),e(A,Nto),e(A,rg),e(rg,Zle),e(Zle,qto),e(rg,jto),e(rg,mB),e(mB,Dto),e(rg,Gto),e(A,Oto),e(A,tg),e(tg,eie),e(eie,Vto),e(tg,Xto),e(tg,fB),e(fB,zto),e(tg,Wto),e(A,Qto),e(A,ag),e(ag,oie),e(oie,Uto),e(ag,Hto),e(ag,gB),e(gB,Jto),e(ag,Yto),e(A,Kto),e(A,ng),e(ng,rie),e(rie,Zto),e(ng,eao),e(ng,hB),e(hB,oao),e(ng,rao),e(A,tao),e(A,sg),e(sg,tie),e(tie,aao),e(sg,nao),e(sg,uB),e(uB,sao),e(sg,lao),e(A,iao),e(A,lg),e(lg,aie),e(aie,dao),e(lg,cao),e(lg,pB),e(pB,mao),e(lg,fao),e(A,gao),e(A,ig),e(ig,nie),e(nie,hao),e(ig,uao),e(ig,_B),e(_B,pao),e(ig,_ao),e(A,bao),e(A,dg),e(dg,sie),e(sie,vao),e(dg,Fao),e(dg,bB),e(bB,Tao),e(dg,Mao),e(A,Eao),e(A,cg),e(cg,lie),e(lie,Cao),e(cg,wao),e(cg,vB),e(vB,Aao),e(cg,Lao),e(A,yao),e(A,mg),e(mg,iie),e(iie,xao),e(mg,$ao),e(mg,FB),e(FB,kao),e(mg,Sao),e(A,Rao),e(A,fg),e(fg,die),e(die,Pao),e(fg,Bao),e(fg,TB),e(TB,Iao),e(fg,Nao),e(A,qao),e(A,gg),e(gg,cie),e(cie,jao),e(gg,Dao),e(gg,MB),e(MB,Gao),e(gg,Oao),e(A,Vao),e(A,hg),e(hg,mie),e(mie,Xao),e(hg,zao),e(hg,EB),e(EB,Wao),e(hg,Qao),e(A,Uao),e(A,ug),e(ug,fie),e(fie,Hao),e(ug,Jao),e(ug,CB),e(CB,Yao),e(ug,Kao),e(A,Zao),e(A,pg),e(pg,gie),e(gie,eno),e(pg,ono),e(pg,wB),e(wB,rno),e(pg,tno),e(A,ano),e(A,_g),e(_g,hie),e(hie,nno),e(_g,sno),e(_g,AB),e(AB,lno),e(_g,ino),e(A,dno),e(A,bg),e(bg,uie),e(uie,cno),e(bg,mno),e(bg,LB),e(LB,fno),e(bg,gno),e(A,hno),e(A,vg),e(vg,pie),e(pie,uno),e(vg,pno),e(vg,yB),e(yB,_no),e(vg,bno),e(A,vno),e(A,Fg),e(Fg,_ie),e(_ie,Fno),e(Fg,Tno),e(Fg,xB),e(xB,Mno),e(Fg,Eno),e(A,Cno),e(A,Tg),e(Tg,bie),e(bie,wno),e(Tg,Ano),e(Tg,$B),e($B,Lno),e(Tg,yno),e(A,xno),e(A,Mg),e(Mg,vie),e(vie,$no),e(Mg,kno),e(Mg,kB),e(kB,Sno),e(Mg,Rno),e(A,Pno),e(A,Eg),e(Eg,Fie),e(Fie,Bno),e(Eg,Ino),e(Eg,SB),e(SB,Nno),e(Eg,qno),e(A,jno),e(A,Cg),e(Cg,Tie),e(Tie,Dno),e(Cg,Gno),e(Cg,RB),e(RB,Ono),e(Cg,Vno),e(A,Xno),e(A,wg),e(wg,Mie),e(Mie,zno),e(wg,Wno),e(wg,PB),e(PB,Qno),e(wg,Uno),e(A,Hno),e(A,Ag),e(Ag,Eie),e(Eie,Jno),e(Ag,Yno),e(Ag,BB),e(BB,Kno),e(Ag,Zno),e(A,eso),e(A,Lg),e(Lg,Cie),e(Cie,oso),e(Lg,rso),e(Lg,IB),e(IB,tso),e(Lg,aso),e(A,nso),e(A,yg),e(yg,wie),e(wie,sso),e(yg,lso),e(yg,NB),e(NB,iso),e(yg,dso),e(A,cso),e(A,xg),e(xg,Aie),e(Aie,mso),e(xg,fso),e(xg,qB),e(qB,gso),e(xg,hso),e(A,uso),e(A,$g),e($g,Lie),e(Lie,pso),e($g,_so),e($g,jB),e(jB,bso),e($g,vso),e(A,Fso),e(A,kg),e(kg,yie),e(yie,Tso),e(kg,Mso),e(kg,DB),e(DB,Eso),e(kg,Cso),e(A,wso),e(A,Sg),e(Sg,xie),e(xie,Aso),e(Sg,Lso),e(Sg,GB),e(GB,yso),e(Sg,xso),e(A,$so),e(A,Rg),e(Rg,$ie),e($ie,kso),e(Rg,Sso),e(Rg,OB),e(OB,Rso),e(Rg,Pso),e(A,Bso),e(A,Pg),e(Pg,kie),e(kie,Iso),e(Pg,Nso),e(Pg,VB),e(VB,qso),e(Pg,jso),e(A,Dso),e(A,Bg),e(Bg,Sie),e(Sie,Gso),e(Bg,Oso),e(Bg,XB),e(XB,Vso),e(Bg,Xso),e(A,zso),e(A,Ig),e(Ig,Rie),e(Rie,Wso),e(Ig,Qso),e(Ig,zB),e(zB,Uso),e(Ig,Hso),e(A,Jso),e(A,Ng),e(Ng,Pie),e(Pie,Yso),e(Ng,Kso),e(Ng,WB),e(WB,Zso),e(Ng,elo),e(A,olo),e(A,qg),e(qg,Bie),e(Bie,rlo),e(qg,tlo),e(qg,QB),e(QB,alo),e(qg,nlo),e(A,slo),e(A,jg),e(jg,Iie),e(Iie,llo),e(jg,ilo),e(jg,UB),e(UB,dlo),e(jg,clo),e(A,mlo),e(A,Dg),e(Dg,Nie),e(Nie,flo),e(Dg,glo),e(Dg,HB),e(HB,hlo),e(Dg,ulo),e(A,plo),e(A,Gg),e(Gg,qie),e(qie,_lo),e(Gg,blo),e(Gg,JB),e(JB,vlo),e(Gg,Flo),e(A,Tlo),e(A,Og),e(Og,jie),e(jie,Mlo),e(Og,Elo),e(Og,YB),e(YB,Clo),e(Og,wlo),e(A,Alo),e(A,Vg),e(Vg,Die),e(Die,Llo),e(Vg,ylo),e(Vg,KB),e(KB,xlo),e(Vg,$lo),e(A,klo),e(A,Xg),e(Xg,Gie),e(Gie,Slo),e(Xg,Rlo),e(Xg,ZB),e(ZB,Plo),e(Xg,Blo),e(A,Ilo),e(A,zg),e(zg,Oie),e(Oie,Nlo),e(zg,qlo),e(zg,eI),e(eI,jlo),e(zg,Dlo),e(A,Glo),e(A,Wg),e(Wg,Vie),e(Vie,Olo),e(Wg,Vlo),e(Wg,oI),e(oI,Xlo),e(Wg,zlo),e(A,Wlo),e(A,Qg),e(Qg,Xie),e(Xie,Qlo),e(Qg,Ulo),e(Qg,rI),e(rI,Hlo),e(Qg,Jlo),e(A,Ylo),e(A,Ug),e(Ug,zie),e(zie,Klo),e(Ug,Zlo),e(Ug,tI),e(tI,eio),e(Ug,oio),e(A,rio),e(A,Hg),e(Hg,Wie),e(Wie,tio),e(Hg,aio),e(Hg,aI),e(aI,nio),e(Hg,sio),e(A,lio),e(A,Jg),e(Jg,Qie),e(Qie,iio),e(Jg,dio),e(Jg,nI),e(nI,cio),e(Jg,mio),e(A,fio),e(A,Yg),e(Yg,Uie),e(Uie,gio),e(Yg,hio),e(Yg,sI),e(sI,uio),e(Yg,pio),e(A,_io),e(A,Kg),e(Kg,Hie),e(Hie,bio),e(Kg,vio),e(Kg,lI),e(lI,Fio),e(Kg,Tio),e(A,Mio),e(A,Zg),e(Zg,Jie),e(Jie,Eio),e(Zg,Cio),e(Zg,iI),e(iI,wio),e(Zg,Aio),e(A,Lio),e(A,eh),e(eh,Yie),e(Yie,yio),e(eh,xio),e(eh,dI),e(dI,$io),e(eh,kio),e(A,Sio),e(A,oh),e(oh,Kie),e(Kie,Rio),e(oh,Pio),e(oh,cI),e(cI,Bio),e(oh,Iio),e(A,Nio),e(A,rh),e(rh,Zie),e(Zie,qio),e(rh,jio),e(rh,mI),e(mI,Dio),e(rh,Gio),e(A,Oio),e(A,th),e(th,ede),e(ede,Vio),e(th,Xio),e(th,fI),e(fI,zio),e(th,Wio),e(A,Qio),e(A,ah),e(ah,ode),e(ode,Uio),e(ah,Hio),e(ah,gI),e(gI,Jio),e(ah,Yio),e(A,Kio),e(A,nh),e(nh,rde),e(rde,Zio),e(nh,edo),e(nh,hI),e(hI,odo),e(nh,rdo),e(A,tdo),e(A,sh),e(sh,tde),e(tde,ado),e(sh,ndo),e(sh,uI),e(uI,sdo),e(sh,ldo),e(A,ido),e(A,lh),e(lh,ade),e(ade,ddo),e(lh,cdo),e(lh,pI),e(pI,mdo),e(lh,fdo),e(A,gdo),e(A,ih),e(ih,nde),e(nde,hdo),e(ih,udo),e(ih,_I),e(_I,pdo),e(ih,_do),e(A,bdo),e(A,dh),e(dh,sde),e(sde,vdo),e(dh,Fdo),e(dh,bI),e(bI,Tdo),e(dh,Mdo),e(A,Edo),e(A,ch),e(ch,lde),e(lde,Cdo),e(ch,wdo),e(ch,vI),e(vI,Ado),e(ch,Ldo),e(A,ydo),e(A,mh),e(mh,ide),e(ide,xdo),e(mh,$do),e(mh,FI),e(FI,kdo),e(mh,Sdo),e(A,Rdo),e(A,fh),e(fh,dde),e(dde,Pdo),e(fh,Bdo),e(fh,TI),e(TI,Ido),e(fh,Ndo),e(A,qdo),e(A,gh),e(gh,cde),e(cde,jdo),e(gh,Ddo),e(gh,MI),e(MI,Gdo),e(gh,Odo),e(A,Vdo),e(A,hh),e(hh,mde),e(mde,Xdo),e(hh,zdo),e(hh,EI),e(EI,Wdo),e(hh,Qdo),e(A,Udo),e(A,uh),e(uh,fde),e(fde,Hdo),e(uh,Jdo),e(uh,CI),e(CI,Ydo),e(uh,Kdo),e(A,Zdo),e(A,ph),e(ph,gde),e(gde,eco),e(ph,oco),e(ph,wI),e(wI,rco),e(ph,tco),e(A,aco),e(A,_h),e(_h,hde),e(hde,nco),e(_h,sco),e(_h,AI),e(AI,lco),e(_h,ico),e(A,dco),e(A,bh),e(bh,ude),e(ude,cco),e(bh,mco),e(bh,LI),e(LI,fco),e(bh,gco),e(A,hco),e(A,vh),e(vh,pde),e(pde,uco),e(vh,pco),e(vh,yI),e(yI,_co),e(vh,bco),e(A,vco),e(A,Fh),e(Fh,_de),e(_de,Fco),e(Fh,Tco),e(Fh,xI),e(xI,Mco),e(Fh,Eco),e(kr,Cco),M(Th,kr,null),e(yo,wco),e(yo,Mh),M(A8,Mh,null),e(Mh,Aco),e(Mh,bde),e(bde,Lco),b(m,_Ue,_),b(m,Ki,_),e(Ki,Eh),e(Eh,vde),M(L8,vde,null),e(Ki,yco),e(Ki,Fde),e(Fde,xco),b(m,bUe,_),b(m,xo,_),M(y8,xo,null),e(xo,$co),e(xo,x8),e(x8,kco),e(x8,$I),e($I,Sco),e(x8,Rco),e(xo,Pco),e(xo,$8),e($8,Bco),e($8,Tde),e(Tde,Ico),e($8,Nco),e(xo,qco),e(xo,Sr),M(k8,Sr,null),e(Sr,jco),e(Sr,Mde),e(Mde,Dco),e(Sr,Gco),e(Sr,Ga),e(Ga,Oco),e(Ga,Ede),e(Ede,Vco),e(Ga,Xco),e(Ga,Cde),e(Cde,zco),e(Ga,Wco),e(Ga,wde),e(wde,Qco),e(Ga,Uco),e(Sr,Hco),e(Sr,k),e(k,Hn),e(Hn,Ade),e(Ade,Jco),e(Hn,Yco),e(Hn,kI),e(kI,Kco),e(Hn,Zco),e(Hn,SI),e(SI,emo),e(Hn,omo),e(k,rmo),e(k,Jn),e(Jn,Lde),e(Lde,tmo),e(Jn,amo),e(Jn,RI),e(RI,nmo),e(Jn,smo),e(Jn,PI),e(PI,lmo),e(Jn,imo),e(k,dmo),e(k,Yn),e(Yn,yde),e(yde,cmo),e(Yn,mmo),e(Yn,BI),e(BI,fmo),e(Yn,gmo),e(Yn,II),e(II,hmo),e(Yn,umo),e(k,pmo),e(k,Ch),e(Ch,xde),e(xde,_mo),e(Ch,bmo),e(Ch,NI),e(NI,vmo),e(Ch,Fmo),e(k,Tmo),e(k,Kn),e(Kn,$de),e($de,Mmo),e(Kn,Emo),e(Kn,qI),e(qI,Cmo),e(Kn,wmo),e(Kn,jI),e(jI,Amo),e(Kn,Lmo),e(k,ymo),e(k,wh),e(wh,kde),e(kde,xmo),e(wh,$mo),e(wh,DI),e(DI,kmo),e(wh,Smo),e(k,Rmo),e(k,Ah),e(Ah,Sde),e(Sde,Pmo),e(Ah,Bmo),e(Ah,GI),e(GI,Imo),e(Ah,Nmo),e(k,qmo),e(k,Lh),e(Lh,Rde),e(Rde,jmo),e(Lh,Dmo),e(Lh,OI),e(OI,Gmo),e(Lh,Omo),e(k,Vmo),e(k,Zn),e(Zn,Pde),e(Pde,Xmo),e(Zn,zmo),e(Zn,VI),e(VI,Wmo),e(Zn,Qmo),e(Zn,XI),e(XI,Umo),e(Zn,Hmo),e(k,Jmo),e(k,es),e(es,Bde),e(Bde,Ymo),e(es,Kmo),e(es,zI),e(zI,Zmo),e(es,efo),e(es,WI),e(WI,ofo),e(es,rfo),e(k,tfo),e(k,os),e(os,Ide),e(Ide,afo),e(os,nfo),e(os,QI),e(QI,sfo),e(os,lfo),e(os,UI),e(UI,ifo),e(os,dfo),e(k,cfo),e(k,yh),e(yh,Nde),e(Nde,mfo),e(yh,ffo),e(yh,HI),e(HI,gfo),e(yh,hfo),e(k,ufo),e(k,xh),e(xh,qde),e(qde,pfo),e(xh,_fo),e(xh,JI),e(JI,bfo),e(xh,vfo),e(k,Ffo),e(k,$h),e($h,jde),e(jde,Tfo),e($h,Mfo),e($h,YI),e(YI,Efo),e($h,Cfo),e(k,wfo),e(k,rs),e(rs,Dde),e(Dde,Afo),e(rs,Lfo),e(rs,KI),e(KI,yfo),e(rs,xfo),e(rs,ZI),e(ZI,$fo),e(rs,kfo),e(k,Sfo),e(k,kh),e(kh,Gde),e(Gde,Rfo),e(kh,Pfo),e(kh,eN),e(eN,Bfo),e(kh,Ifo),e(k,Nfo),e(k,ts),e(ts,Ode),e(Ode,qfo),e(ts,jfo),e(ts,oN),e(oN,Dfo),e(ts,Gfo),e(ts,rN),e(rN,Ofo),e(ts,Vfo),e(k,Xfo),e(k,as),e(as,Vde),e(Vde,zfo),e(as,Wfo),e(as,tN),e(tN,Qfo),e(as,Ufo),e(as,aN),e(aN,Hfo),e(as,Jfo),e(k,Yfo),e(k,ns),e(ns,Xde),e(Xde,Kfo),e(ns,Zfo),e(ns,nN),e(nN,ego),e(ns,ogo),e(ns,sN),e(sN,rgo),e(ns,tgo),e(k,ago),e(k,ss),e(ss,zde),e(zde,ngo),e(ss,sgo),e(ss,lN),e(lN,lgo),e(ss,igo),e(ss,iN),e(iN,dgo),e(ss,cgo),e(k,mgo),e(k,Sh),e(Sh,Wde),e(Wde,fgo),e(Sh,ggo),e(Sh,dN),e(dN,hgo),e(Sh,ugo),e(k,pgo),e(k,ls),e(ls,Qde),e(Qde,_go),e(ls,bgo),e(ls,cN),e(cN,vgo),e(ls,Fgo),e(ls,mN),e(mN,Tgo),e(ls,Mgo),e(k,Ego),e(k,is),e(is,Ude),e(Ude,Cgo),e(is,wgo),e(is,fN),e(fN,Ago),e(is,Lgo),e(is,gN),e(gN,ygo),e(is,xgo),e(k,$go),e(k,ds),e(ds,Hde),e(Hde,kgo),e(ds,Sgo),e(ds,hN),e(hN,Rgo),e(ds,Pgo),e(ds,uN),e(uN,Bgo),e(ds,Igo),e(k,Ngo),e(k,cs),e(cs,Jde),e(Jde,qgo),e(cs,jgo),e(cs,pN),e(pN,Dgo),e(cs,Ggo),e(cs,_N),e(_N,Ogo),e(cs,Vgo),e(k,Xgo),e(k,ms),e(ms,Yde),e(Yde,zgo),e(ms,Wgo),e(ms,bN),e(bN,Qgo),e(ms,Ugo),e(ms,vN),e(vN,Hgo),e(ms,Jgo),e(k,Ygo),e(k,fs),e(fs,Kde),e(Kde,Kgo),e(fs,Zgo),e(fs,FN),e(FN,eho),e(fs,oho),e(fs,TN),e(TN,rho),e(fs,tho),e(k,aho),e(k,Rh),e(Rh,Zde),e(Zde,nho),e(Rh,sho),e(Rh,MN),e(MN,lho),e(Rh,iho),e(k,dho),e(k,gs),e(gs,ece),e(ece,cho),e(gs,mho),e(gs,EN),e(EN,fho),e(gs,gho),e(gs,CN),e(CN,hho),e(gs,uho),e(k,pho),e(k,Ph),e(Ph,oce),e(oce,_ho),e(Ph,bho),e(Ph,wN),e(wN,vho),e(Ph,Fho),e(k,Tho),e(k,hs),e(hs,rce),e(rce,Mho),e(hs,Eho),e(hs,AN),e(AN,Cho),e(hs,who),e(hs,LN),e(LN,Aho),e(hs,Lho),e(k,yho),e(k,us),e(us,tce),e(tce,xho),e(us,$ho),e(us,yN),e(yN,kho),e(us,Sho),e(us,xN),e(xN,Rho),e(us,Pho),e(k,Bho),e(k,ps),e(ps,ace),e(ace,Iho),e(ps,Nho),e(ps,$N),e($N,qho),e(ps,jho),e(ps,kN),e(kN,Dho),e(ps,Gho),e(k,Oho),e(k,Bh),e(Bh,nce),e(nce,Vho),e(Bh,Xho),e(Bh,SN),e(SN,zho),e(Bh,Who),e(k,Qho),e(k,_s),e(_s,sce),e(sce,Uho),e(_s,Hho),e(_s,RN),e(RN,Jho),e(_s,Yho),e(_s,PN),e(PN,Kho),e(_s,Zho),e(k,euo),e(k,bs),e(bs,lce),e(lce,ouo),e(bs,ruo),e(bs,BN),e(BN,tuo),e(bs,auo),e(bs,IN),e(IN,nuo),e(bs,suo),e(k,luo),e(k,vs),e(vs,ice),e(ice,iuo),e(vs,duo),e(vs,NN),e(NN,cuo),e(vs,muo),e(vs,qN),e(qN,fuo),e(vs,guo),e(k,huo),e(k,Ih),e(Ih,dce),e(dce,uuo),e(Ih,puo),e(Ih,jN),e(jN,_uo),e(Ih,buo),e(k,vuo),e(k,Fs),e(Fs,cce),e(cce,Fuo),e(Fs,Tuo),e(Fs,DN),e(DN,Muo),e(Fs,Euo),e(Fs,GN),e(GN,Cuo),e(Fs,wuo),e(k,Auo),e(k,Ts),e(Ts,mce),e(mce,Luo),e(Ts,yuo),e(Ts,ON),e(ON,xuo),e(Ts,$uo),e(Ts,VN),e(VN,kuo),e(Ts,Suo),e(k,Ruo),e(k,Ms),e(Ms,fce),e(fce,Puo),e(Ms,Buo),e(Ms,XN),e(XN,Iuo),e(Ms,Nuo),e(Ms,zN),e(zN,quo),e(Ms,juo),e(k,Duo),e(k,Es),e(Es,gce),e(gce,Guo),e(Es,Ouo),e(Es,WN),e(WN,Vuo),e(Es,Xuo),e(Es,QN),e(QN,zuo),e(Es,Wuo),e(k,Quo),e(k,Cs),e(Cs,hce),e(hce,Uuo),e(Cs,Huo),e(Cs,UN),e(UN,Juo),e(Cs,Yuo),e(Cs,HN),e(HN,Kuo),e(Cs,Zuo),e(k,epo),e(k,ws),e(ws,uce),e(uce,opo),e(ws,rpo),e(ws,JN),e(JN,tpo),e(ws,apo),e(ws,YN),e(YN,npo),e(ws,spo),e(k,lpo),e(k,As),e(As,pce),e(pce,ipo),e(As,dpo),e(As,KN),e(KN,cpo),e(As,mpo),e(As,ZN),e(ZN,fpo),e(As,gpo),e(k,hpo),e(k,Ls),e(Ls,_ce),e(_ce,upo),e(Ls,ppo),e(Ls,eq),e(eq,_po),e(Ls,bpo),e(Ls,oq),e(oq,vpo),e(Ls,Fpo),e(k,Tpo),e(k,Nh),e(Nh,bce),e(bce,Mpo),e(Nh,Epo),e(Nh,rq),e(rq,Cpo),e(Nh,wpo),e(k,Apo),e(k,ys),e(ys,vce),e(vce,Lpo),e(ys,ypo),e(ys,tq),e(tq,xpo),e(ys,$po),e(ys,aq),e(aq,kpo),e(ys,Spo),e(k,Rpo),e(k,qh),e(qh,Fce),e(Fce,Ppo),e(qh,Bpo),e(qh,nq),e(nq,Ipo),e(qh,Npo),e(k,qpo),e(k,jh),e(jh,Tce),e(Tce,jpo),e(jh,Dpo),e(jh,sq),e(sq,Gpo),e(jh,Opo),e(k,Vpo),e(k,xs),e(xs,Mce),e(Mce,Xpo),e(xs,zpo),e(xs,lq),e(lq,Wpo),e(xs,Qpo),e(xs,iq),e(iq,Upo),e(xs,Hpo),e(k,Jpo),e(k,$s),e($s,Ece),e(Ece,Ypo),e($s,Kpo),e($s,dq),e(dq,Zpo),e($s,e_o),e($s,cq),e(cq,o_o),e($s,r_o),e(k,t_o),e(k,ks),e(ks,Cce),e(Cce,a_o),e(ks,n_o),e(ks,mq),e(mq,s_o),e(ks,l_o),e(ks,fq),e(fq,i_o),e(ks,d_o),e(k,c_o),e(k,Dh),e(Dh,wce),e(wce,m_o),e(Dh,f_o),e(Dh,gq),e(gq,g_o),e(Dh,h_o),e(k,u_o),e(k,Ss),e(Ss,Ace),e(Ace,p_o),e(Ss,__o),e(Ss,hq),e(hq,b_o),e(Ss,v_o),e(Ss,uq),e(uq,F_o),e(Ss,T_o),e(k,M_o),e(k,Rs),e(Rs,Lce),e(Lce,E_o),e(Rs,C_o),e(Rs,pq),e(pq,w_o),e(Rs,A_o),e(Rs,_q),e(_q,L_o),e(Rs,y_o),e(k,x_o),e(k,Ps),e(Ps,yce),e(yce,$_o),e(Ps,k_o),e(Ps,bq),e(bq,S_o),e(Ps,R_o),e(Ps,vq),e(vq,P_o),e(Ps,B_o),e(k,I_o),e(k,Bs),e(Bs,xce),e(xce,N_o),e(Bs,q_o),e(Bs,Fq),e(Fq,j_o),e(Bs,D_o),e(Bs,Tq),e(Tq,G_o),e(Bs,O_o),e(k,V_o),e(k,Is),e(Is,$ce),e($ce,X_o),e(Is,z_o),e(Is,Mq),e(Mq,W_o),e(Is,Q_o),e(Is,Eq),e(Eq,U_o),e(Is,H_o),e(k,J_o),e(k,Ns),e(Ns,kce),e(kce,Y_o),e(Ns,K_o),e(Ns,Cq),e(Cq,Z_o),e(Ns,e2o),e(Ns,wq),e(wq,o2o),e(Ns,r2o),e(k,t2o),e(k,qs),e(qs,Sce),e(Sce,a2o),e(qs,n2o),e(qs,Aq),e(Aq,s2o),e(qs,l2o),e(qs,Lq),e(Lq,i2o),e(qs,d2o),e(k,c2o),e(k,js),e(js,Rce),e(Rce,m2o),e(js,f2o),e(js,yq),e(yq,g2o),e(js,h2o),e(js,xq),e(xq,u2o),e(js,p2o),e(k,_2o),e(k,Gh),e(Gh,Pce),e(Pce,b2o),e(Gh,v2o),e(Gh,$q),e($q,F2o),e(Gh,T2o),e(k,M2o),e(k,Ds),e(Ds,Bce),e(Bce,E2o),e(Ds,C2o),e(Ds,kq),e(kq,w2o),e(Ds,A2o),e(Ds,Sq),e(Sq,L2o),e(Ds,y2o),e(k,x2o),e(k,Gs),e(Gs,Ice),e(Ice,$2o),e(Gs,k2o),e(Gs,Rq),e(Rq,S2o),e(Gs,R2o),e(Gs,Pq),e(Pq,P2o),e(Gs,B2o),e(k,I2o),e(k,Oh),e(Oh,Nce),e(Nce,N2o),e(Oh,q2o),e(Oh,Bq),e(Bq,j2o),e(Oh,D2o),e(k,G2o),e(k,Vh),e(Vh,qce),e(qce,O2o),e(Vh,V2o),e(Vh,Iq),e(Iq,X2o),e(Vh,z2o),e(k,W2o),e(k,Xh),e(Xh,jce),e(jce,Q2o),e(Xh,U2o),e(Xh,Nq),e(Nq,H2o),e(Xh,J2o),e(k,Y2o),e(k,zh),e(zh,Dce),e(Dce,K2o),e(zh,Z2o),e(zh,qq),e(qq,ebo),e(zh,obo),e(k,rbo),e(k,Os),e(Os,Gce),e(Gce,tbo),e(Os,abo),e(Os,jq),e(jq,nbo),e(Os,sbo),e(Os,Dq),e(Dq,lbo),e(Os,ibo),e(k,dbo),e(k,Wh),e(Wh,Oce),e(Oce,cbo),e(Wh,mbo),e(Wh,Gq),e(Gq,fbo),e(Wh,gbo),e(k,hbo),e(k,Vs),e(Vs,Vce),e(Vce,ubo),e(Vs,pbo),e(Vs,Oq),e(Oq,_bo),e(Vs,bbo),e(Vs,Vq),e(Vq,vbo),e(Vs,Fbo),e(k,Tbo),e(k,Xs),e(Xs,Xce),e(Xce,Mbo),e(Xs,Ebo),e(Xs,Xq),e(Xq,Cbo),e(Xs,wbo),e(Xs,zq),e(zq,Abo),e(Xs,Lbo),e(k,ybo),e(k,zs),e(zs,zce),e(zce,xbo),e(zs,$bo),e(zs,Wq),e(Wq,kbo),e(zs,Sbo),e(zs,Qq),e(Qq,Rbo),e(zs,Pbo),e(k,Bbo),e(k,Ws),e(Ws,Wce),e(Wce,Ibo),e(Ws,Nbo),e(Ws,Uq),e(Uq,qbo),e(Ws,jbo),e(Ws,Hq),e(Hq,Dbo),e(Ws,Gbo),e(k,Obo),e(k,Qs),e(Qs,Qce),e(Qce,Vbo),e(Qs,Xbo),e(Qs,Jq),e(Jq,zbo),e(Qs,Wbo),e(Qs,Yq),e(Yq,Qbo),e(Qs,Ubo),e(k,Hbo),e(k,Us),e(Us,Uce),e(Uce,Jbo),e(Us,Ybo),e(Us,Kq),e(Kq,Kbo),e(Us,Zbo),e(Us,Zq),e(Zq,evo),e(Us,ovo),e(k,rvo),e(k,Qh),e(Qh,Hce),e(Hce,tvo),e(Qh,avo),e(Qh,ej),e(ej,nvo),e(Qh,svo),e(k,lvo),e(k,Uh),e(Uh,Jce),e(Jce,ivo),e(Uh,dvo),e(Uh,oj),e(oj,cvo),e(Uh,mvo),e(k,fvo),e(k,Hs),e(Hs,Yce),e(Yce,gvo),e(Hs,hvo),e(Hs,rj),e(rj,uvo),e(Hs,pvo),e(Hs,tj),e(tj,_vo),e(Hs,bvo),e(k,vvo),e(k,Js),e(Js,Kce),e(Kce,Fvo),e(Js,Tvo),e(Js,aj),e(aj,Mvo),e(Js,Evo),e(Js,nj),e(nj,Cvo),e(Js,wvo),e(k,Avo),e(k,Ys),e(Ys,Zce),e(Zce,Lvo),e(Ys,yvo),e(Ys,sj),e(sj,xvo),e(Ys,$vo),e(Ys,lj),e(lj,kvo),e(Ys,Svo),e(k,Rvo),e(k,Hh),e(Hh,eme),e(eme,Pvo),e(Hh,Bvo),e(Hh,ij),e(ij,Ivo),e(Hh,Nvo),e(k,qvo),e(k,Jh),e(Jh,ome),e(ome,jvo),e(Jh,Dvo),e(Jh,dj),e(dj,Gvo),e(Jh,Ovo),e(k,Vvo),e(k,Yh),e(Yh,rme),e(rme,Xvo),e(Yh,zvo),e(Yh,cj),e(cj,Wvo),e(Yh,Qvo),e(k,Uvo),e(k,Ks),e(Ks,tme),e(tme,Hvo),e(Ks,Jvo),e(Ks,mj),e(mj,Yvo),e(Ks,Kvo),e(Ks,fj),e(fj,Zvo),e(Ks,e1o),e(k,o1o),e(k,Zs),e(Zs,ame),e(ame,r1o),e(Zs,t1o),e(Zs,gj),e(gj,a1o),e(Zs,n1o),e(Zs,hj),e(hj,s1o),e(Zs,l1o),e(k,i1o),e(k,Kh),e(Kh,nme),e(nme,d1o),e(Kh,c1o),e(Kh,uj),e(uj,m1o),e(Kh,f1o),e(k,g1o),e(k,Zh),e(Zh,sme),e(sme,h1o),e(Zh,u1o),e(Zh,pj),e(pj,p1o),e(Zh,_1o),e(k,b1o),e(k,eu),e(eu,lme),e(lme,v1o),e(eu,F1o),e(eu,_j),e(_j,T1o),e(eu,M1o),e(k,E1o),e(k,el),e(el,ime),e(ime,C1o),e(el,w1o),e(el,bj),e(bj,A1o),e(el,L1o),e(el,vj),e(vj,y1o),e(el,x1o),e(k,$1o),e(k,ou),e(ou,dme),e(dme,k1o),e(ou,S1o),e(ou,Fj),e(Fj,R1o),e(ou,P1o),e(k,B1o),e(k,ru),e(ru,cme),e(cme,I1o),e(ru,N1o),e(ru,Tj),e(Tj,q1o),e(ru,j1o),e(k,D1o),e(k,ol),e(ol,mme),e(mme,G1o),e(ol,O1o),e(ol,Mj),e(Mj,V1o),e(ol,X1o),e(ol,Ej),e(Ej,z1o),e(ol,W1o),e(k,Q1o),e(k,rl),e(rl,fme),e(fme,U1o),e(rl,H1o),e(rl,Cj),e(Cj,J1o),e(rl,Y1o),e(rl,wj),e(wj,K1o),e(rl,Z1o),e(k,eFo),e(k,tl),e(tl,gme),e(gme,oFo),e(tl,rFo),e(tl,Aj),e(Aj,tFo),e(tl,aFo),e(tl,Lj),e(Lj,nFo),e(tl,sFo),e(k,lFo),e(k,al),e(al,hme),e(hme,iFo),e(al,dFo),e(al,yj),e(yj,cFo),e(al,mFo),e(al,xj),e(xj,fFo),e(al,gFo),e(Sr,hFo),M(tu,Sr,null),e(xo,uFo),e(xo,au),M(S8,au,null),e(au,pFo),e(au,ume),e(ume,_Fo),b(m,vUe,_),b(m,Zi,_),e(Zi,nu),e(nu,pme),M(R8,pme,null),e(Zi,bFo),e(Zi,_me),e(_me,vFo),b(m,FUe,_),b(m,$o,_),M(P8,$o,null),e($o,FFo),e($o,B8),e(B8,TFo),e(B8,$j),e($j,MFo),e(B8,EFo),e($o,CFo),e($o,I8),e(I8,wFo),e(I8,bme),e(bme,AFo),e(I8,LFo),e($o,yFo),e($o,He),M(N8,He,null),e(He,xFo),e(He,vme),e(vme,$Fo),e(He,kFo),e(He,Oa),e(Oa,SFo),e(Oa,Fme),e(Fme,RFo),e(Oa,PFo),e(Oa,Tme),e(Tme,BFo),e(Oa,IFo),e(Oa,Mme),e(Mme,NFo),e(Oa,qFo),e(He,jFo),e(He,Q),e(Q,su),e(su,Eme),e(Eme,DFo),e(su,GFo),e(su,kj),e(kj,OFo),e(su,VFo),e(Q,XFo),e(Q,lu),e(lu,Cme),e(Cme,zFo),e(lu,WFo),e(lu,Sj),e(Sj,QFo),e(lu,UFo),e(Q,HFo),e(Q,iu),e(iu,wme),e(wme,JFo),e(iu,YFo),e(iu,Rj),e(Rj,KFo),e(iu,ZFo),e(Q,eTo),e(Q,du),e(du,Ame),e(Ame,oTo),e(du,rTo),e(du,Pj),e(Pj,tTo),e(du,aTo),e(Q,nTo),e(Q,cu),e(cu,Lme),e(Lme,sTo),e(cu,lTo),e(cu,Bj),e(Bj,iTo),e(cu,dTo),e(Q,cTo),e(Q,mu),e(mu,yme),e(yme,mTo),e(mu,fTo),e(mu,Ij),e(Ij,gTo),e(mu,hTo),e(Q,uTo),e(Q,fu),e(fu,xme),e(xme,pTo),e(fu,_To),e(fu,Nj),e(Nj,bTo),e(fu,vTo),e(Q,FTo),e(Q,gu),e(gu,$me),e($me,TTo),e(gu,MTo),e(gu,qj),e(qj,ETo),e(gu,CTo),e(Q,wTo),e(Q,hu),e(hu,kme),e(kme,ATo),e(hu,LTo),e(hu,jj),e(jj,yTo),e(hu,xTo),e(Q,$To),e(Q,uu),e(uu,Sme),e(Sme,kTo),e(uu,STo),e(uu,Dj),e(Dj,RTo),e(uu,PTo),e(Q,BTo),e(Q,pu),e(pu,Rme),e(Rme,ITo),e(pu,NTo),e(pu,Gj),e(Gj,qTo),e(pu,jTo),e(Q,DTo),e(Q,_u),e(_u,Pme),e(Pme,GTo),e(_u,OTo),e(_u,Oj),e(Oj,VTo),e(_u,XTo),e(Q,zTo),e(Q,bu),e(bu,Bme),e(Bme,WTo),e(bu,QTo),e(bu,Vj),e(Vj,UTo),e(bu,HTo),e(Q,JTo),e(Q,vu),e(vu,Ime),e(Ime,YTo),e(vu,KTo),e(vu,Xj),e(Xj,ZTo),e(vu,eMo),e(Q,oMo),e(Q,Fu),e(Fu,Nme),e(Nme,rMo),e(Fu,tMo),e(Fu,zj),e(zj,aMo),e(Fu,nMo),e(Q,sMo),e(Q,Tu),e(Tu,qme),e(qme,lMo),e(Tu,iMo),e(Tu,Wj),e(Wj,dMo),e(Tu,cMo),e(Q,mMo),e(Q,Mu),e(Mu,jme),e(jme,fMo),e(Mu,gMo),e(Mu,Qj),e(Qj,hMo),e(Mu,uMo),e(Q,pMo),e(Q,Eu),e(Eu,Dme),e(Dme,_Mo),e(Eu,bMo),e(Eu,Uj),e(Uj,vMo),e(Eu,FMo),e(Q,TMo),e(Q,Cu),e(Cu,Gme),e(Gme,MMo),e(Cu,EMo),e(Cu,Hj),e(Hj,CMo),e(Cu,wMo),e(Q,AMo),e(Q,wu),e(wu,Ome),e(Ome,LMo),e(wu,yMo),e(wu,Jj),e(Jj,xMo),e(wu,$Mo),e(Q,kMo),e(Q,Au),e(Au,Vme),e(Vme,SMo),e(Au,RMo),e(Au,Yj),e(Yj,PMo),e(Au,BMo),e(Q,IMo),e(Q,Lu),e(Lu,Xme),e(Xme,NMo),e(Lu,qMo),e(Lu,Kj),e(Kj,jMo),e(Lu,DMo),e(Q,GMo),e(Q,yu),e(yu,zme),e(zme,OMo),e(yu,VMo),e(yu,Zj),e(Zj,XMo),e(yu,zMo),e(Q,WMo),e(Q,xu),e(xu,Wme),e(Wme,QMo),e(xu,UMo),e(xu,eD),e(eD,HMo),e(xu,JMo),e(Q,YMo),e(Q,$u),e($u,Qme),e(Qme,KMo),e($u,ZMo),e($u,oD),e(oD,eEo),e($u,oEo),e(Q,rEo),e(Q,ku),e(ku,Ume),e(Ume,tEo),e(ku,aEo),e(ku,rD),e(rD,nEo),e(ku,sEo),e(Q,lEo),e(Q,Su),e(Su,Hme),e(Hme,iEo),e(Su,dEo),e(Su,tD),e(tD,cEo),e(Su,mEo),e(Q,fEo),e(Q,Ru),e(Ru,Jme),e(Jme,gEo),e(Ru,hEo),e(Ru,aD),e(aD,uEo),e(Ru,pEo),e(Q,_Eo),e(Q,Pu),e(Pu,Yme),e(Yme,bEo),e(Pu,vEo),e(Pu,nD),e(nD,FEo),e(Pu,TEo),e(Q,MEo),e(Q,Bu),e(Bu,Kme),e(Kme,EEo),e(Bu,CEo),e(Bu,sD),e(sD,wEo),e(Bu,AEo),e(Q,LEo),e(Q,Iu),e(Iu,Zme),e(Zme,yEo),e(Iu,xEo),e(Iu,lD),e(lD,$Eo),e(Iu,kEo),e(Q,SEo),e(Q,Nu),e(Nu,efe),e(efe,REo),e(Nu,PEo),e(Nu,iD),e(iD,BEo),e(Nu,IEo),e(Q,NEo),e(Q,qu),e(qu,ofe),e(ofe,qEo),e(qu,jEo),e(qu,dD),e(dD,DEo),e(qu,GEo),e(Q,OEo),e(Q,ju),e(ju,rfe),e(rfe,VEo),e(ju,XEo),e(ju,cD),e(cD,zEo),e(ju,WEo),e(Q,QEo),e(Q,Du),e(Du,tfe),e(tfe,UEo),e(Du,HEo),e(Du,mD),e(mD,JEo),e(Du,YEo),e(Q,KEo),e(Q,Gu),e(Gu,afe),e(afe,ZEo),e(Gu,e4o),e(Gu,fD),e(fD,o4o),e(Gu,r4o),e(Q,t4o),e(Q,Ou),e(Ou,nfe),e(nfe,a4o),e(Ou,n4o),e(Ou,gD),e(gD,s4o),e(Ou,l4o),e(Q,i4o),e(Q,Vu),e(Vu,sfe),e(sfe,d4o),e(Vu,c4o),e(Vu,hD),e(hD,m4o),e(Vu,f4o),e(He,g4o),M(Xu,He,null),e(He,h4o),M(zu,He,null),e($o,u4o),e($o,Wu),M(q8,Wu,null),e(Wu,p4o),e(Wu,lfe),e(lfe,_4o),b(m,TUe,_),b(m,ed,_),e(ed,Qu),e(Qu,ife),M(j8,ife,null),e(ed,b4o),e(ed,dfe),e(dfe,v4o),b(m,MUe,_),b(m,ko,_),M(D8,ko,null),e(ko,F4o),e(ko,G8),e(G8,T4o),e(G8,uD),e(uD,M4o),e(G8,E4o),e(ko,C4o),e(ko,O8),e(O8,w4o),e(O8,cfe),e(cfe,A4o),e(O8,L4o),e(ko,y4o),e(ko,Je),M(V8,Je,null),e(Je,x4o),e(Je,mfe),e(mfe,$4o),e(Je,k4o),e(Je,od),e(od,S4o),e(od,ffe),e(ffe,R4o),e(od,P4o),e(od,gfe),e(gfe,B4o),e(od,I4o),e(Je,N4o),e(Je,ce),e(ce,Uu),e(Uu,hfe),e(hfe,q4o),e(Uu,j4o),e(Uu,pD),e(pD,D4o),e(Uu,G4o),e(ce,O4o),e(ce,Hu),e(Hu,ufe),e(ufe,V4o),e(Hu,X4o),e(Hu,_D),e(_D,z4o),e(Hu,W4o),e(ce,Q4o),e(ce,Ju),e(Ju,pfe),e(pfe,U4o),e(Ju,H4o),e(Ju,bD),e(bD,J4o),e(Ju,Y4o),e(ce,K4o),e(ce,Yu),e(Yu,_fe),e(_fe,Z4o),e(Yu,eCo),e(Yu,vD),e(vD,oCo),e(Yu,rCo),e(ce,tCo),e(ce,Ku),e(Ku,bfe),e(bfe,aCo),e(Ku,nCo),e(Ku,FD),e(FD,sCo),e(Ku,lCo),e(ce,iCo),e(ce,Zu),e(Zu,vfe),e(vfe,dCo),e(Zu,cCo),e(Zu,TD),e(TD,mCo),e(Zu,fCo),e(ce,gCo),e(ce,ep),e(ep,Ffe),e(Ffe,hCo),e(ep,uCo),e(ep,MD),e(MD,pCo),e(ep,_Co),e(ce,bCo),e(ce,op),e(op,Tfe),e(Tfe,vCo),e(op,FCo),e(op,ED),e(ED,TCo),e(op,MCo),e(ce,ECo),e(ce,rp),e(rp,Mfe),e(Mfe,CCo),e(rp,wCo),e(rp,CD),e(CD,ACo),e(rp,LCo),e(ce,yCo),e(ce,tp),e(tp,Efe),e(Efe,xCo),e(tp,$Co),e(tp,wD),e(wD,kCo),e(tp,SCo),e(ce,RCo),e(ce,ap),e(ap,Cfe),e(Cfe,PCo),e(ap,BCo),e(ap,AD),e(AD,ICo),e(ap,NCo),e(ce,qCo),e(ce,np),e(np,wfe),e(wfe,jCo),e(np,DCo),e(np,LD),e(LD,GCo),e(np,OCo),e(ce,VCo),e(ce,sp),e(sp,Afe),e(Afe,XCo),e(sp,zCo),e(sp,yD),e(yD,WCo),e(sp,QCo),e(ce,UCo),e(ce,lp),e(lp,Lfe),e(Lfe,HCo),e(lp,JCo),e(lp,xD),e(xD,YCo),e(lp,KCo),e(ce,ZCo),e(ce,ip),e(ip,yfe),e(yfe,e3o),e(ip,o3o),e(ip,$D),e($D,r3o),e(ip,t3o),e(ce,a3o),e(ce,dp),e(dp,xfe),e(xfe,n3o),e(dp,s3o),e(dp,kD),e(kD,l3o),e(dp,i3o),e(ce,d3o),e(ce,cp),e(cp,$fe),e($fe,c3o),e(cp,m3o),e(cp,SD),e(SD,f3o),e(cp,g3o),e(ce,h3o),e(ce,mp),e(mp,kfe),e(kfe,u3o),e(mp,p3o),e(mp,RD),e(RD,_3o),e(mp,b3o),e(ce,v3o),e(ce,fp),e(fp,Sfe),e(Sfe,F3o),e(fp,T3o),e(fp,PD),e(PD,M3o),e(fp,E3o),e(ce,C3o),e(ce,gp),e(gp,Rfe),e(Rfe,w3o),e(gp,A3o),e(gp,BD),e(BD,L3o),e(gp,y3o),e(Je,x3o),M(hp,Je,null),e(Je,$3o),M(up,Je,null),e(ko,k3o),e(ko,pp),M(X8,pp,null),e(pp,S3o),e(pp,Pfe),e(Pfe,R3o),b(m,EUe,_),b(m,rd,_),e(rd,_p),e(_p,Bfe),M(z8,Bfe,null),e(rd,P3o),e(rd,Ife),e(Ife,B3o),b(m,CUe,_),b(m,So,_),M(W8,So,null),e(So,I3o),e(So,td),e(td,N3o),e(td,ID),e(ID,q3o),e(td,j3o),e(td,ND),e(ND,D3o),e(td,G3o),e(So,O3o),e(So,Q8),e(Q8,V3o),e(Q8,Nfe),e(Nfe,X3o),e(Q8,z3o),e(So,W3o),e(So,ft),M(U8,ft,null),e(ft,Q3o),e(ft,qfe),e(qfe,U3o),e(ft,H3o),e(ft,ad),e(ad,J3o),e(ad,jfe),e(jfe,Y3o),e(ad,K3o),e(ad,qD),e(qD,Z3o),e(ad,e5o),e(ft,o5o),M(bp,ft,null),e(So,r5o),e(So,Ye),M(H8,Ye,null),e(Ye,t5o),e(Ye,Dfe),e(Dfe,a5o),e(Ye,n5o),e(Ye,Va),e(Va,s5o),e(Va,Gfe),e(Gfe,l5o),e(Va,i5o),e(Va,Ofe),e(Ofe,d5o),e(Va,c5o),e(Va,Vfe),e(Vfe,m5o),e(Va,f5o),e(Ye,g5o),e(Ye,y),e(y,vp),e(vp,Xfe),e(Xfe,h5o),e(vp,u5o),e(vp,jD),e(jD,p5o),e(vp,_5o),e(y,b5o),e(y,Fp),e(Fp,zfe),e(zfe,v5o),e(Fp,F5o),e(Fp,DD),e(DD,T5o),e(Fp,M5o),e(y,E5o),e(y,Tp),e(Tp,Wfe),e(Wfe,C5o),e(Tp,w5o),e(Tp,GD),e(GD,A5o),e(Tp,L5o),e(y,y5o),e(y,Mp),e(Mp,Qfe),e(Qfe,x5o),e(Mp,$5o),e(Mp,OD),e(OD,k5o),e(Mp,S5o),e(y,R5o),e(y,Ep),e(Ep,Ufe),e(Ufe,P5o),e(Ep,B5o),e(Ep,VD),e(VD,I5o),e(Ep,N5o),e(y,q5o),e(y,Cp),e(Cp,Hfe),e(Hfe,j5o),e(Cp,D5o),e(Cp,XD),e(XD,G5o),e(Cp,O5o),e(y,V5o),e(y,wp),e(wp,Jfe),e(Jfe,X5o),e(wp,z5o),e(wp,zD),e(zD,W5o),e(wp,Q5o),e(y,U5o),e(y,Ap),e(Ap,Yfe),e(Yfe,H5o),e(Ap,J5o),e(Ap,WD),e(WD,Y5o),e(Ap,K5o),e(y,Z5o),e(y,Lp),e(Lp,Kfe),e(Kfe,e0o),e(Lp,o0o),e(Lp,QD),e(QD,r0o),e(Lp,t0o),e(y,a0o),e(y,yp),e(yp,Zfe),e(Zfe,n0o),e(yp,s0o),e(yp,UD),e(UD,l0o),e(yp,i0o),e(y,d0o),e(y,xp),e(xp,ege),e(ege,c0o),e(xp,m0o),e(xp,HD),e(HD,f0o),e(xp,g0o),e(y,h0o),e(y,$p),e($p,oge),e(oge,u0o),e($p,p0o),e($p,JD),e(JD,_0o),e($p,b0o),e(y,v0o),e(y,kp),e(kp,rge),e(rge,F0o),e(kp,T0o),e(kp,YD),e(YD,M0o),e(kp,E0o),e(y,C0o),e(y,Sp),e(Sp,tge),e(tge,w0o),e(Sp,A0o),e(Sp,KD),e(KD,L0o),e(Sp,y0o),e(y,x0o),e(y,Rp),e(Rp,age),e(age,$0o),e(Rp,k0o),e(Rp,ZD),e(ZD,S0o),e(Rp,R0o),e(y,P0o),e(y,Pp),e(Pp,nge),e(nge,B0o),e(Pp,I0o),e(Pp,eG),e(eG,N0o),e(Pp,q0o),e(y,j0o),e(y,Bp),e(Bp,sge),e(sge,D0o),e(Bp,G0o),e(Bp,oG),e(oG,O0o),e(Bp,V0o),e(y,X0o),e(y,Ip),e(Ip,lge),e(lge,z0o),e(Ip,W0o),e(Ip,rG),e(rG,Q0o),e(Ip,U0o),e(y,H0o),e(y,Np),e(Np,ige),e(ige,J0o),e(Np,Y0o),e(Np,tG),e(tG,K0o),e(Np,Z0o),e(y,ewo),e(y,qp),e(qp,dge),e(dge,owo),e(qp,rwo),e(qp,aG),e(aG,two),e(qp,awo),e(y,nwo),e(y,jp),e(jp,cge),e(cge,swo),e(jp,lwo),e(jp,nG),e(nG,iwo),e(jp,dwo),e(y,cwo),e(y,Dp),e(Dp,mge),e(mge,mwo),e(Dp,fwo),e(Dp,sG),e(sG,gwo),e(Dp,hwo),e(y,uwo),e(y,Gp),e(Gp,fge),e(fge,pwo),e(Gp,_wo),e(Gp,lG),e(lG,bwo),e(Gp,vwo),e(y,Fwo),e(y,Op),e(Op,gge),e(gge,Two),e(Op,Mwo),e(Op,iG),e(iG,Ewo),e(Op,Cwo),e(y,wwo),e(y,Vp),e(Vp,hge),e(hge,Awo),e(Vp,Lwo),e(Vp,dG),e(dG,ywo),e(Vp,xwo),e(y,$wo),e(y,Xp),e(Xp,uge),e(uge,kwo),e(Xp,Swo),e(Xp,cG),e(cG,Rwo),e(Xp,Pwo),e(y,Bwo),e(y,zp),e(zp,pge),e(pge,Iwo),e(zp,Nwo),e(zp,mG),e(mG,qwo),e(zp,jwo),e(y,Dwo),e(y,Wp),e(Wp,_ge),e(_ge,Gwo),e(Wp,Owo),e(Wp,fG),e(fG,Vwo),e(Wp,Xwo),e(y,zwo),e(y,Qp),e(Qp,bge),e(bge,Wwo),e(Qp,Qwo),e(Qp,gG),e(gG,Uwo),e(Qp,Hwo),e(y,Jwo),e(y,Up),e(Up,vge),e(vge,Ywo),e(Up,Kwo),e(Up,hG),e(hG,Zwo),e(Up,e6o),e(y,o6o),e(y,Hp),e(Hp,Fge),e(Fge,r6o),e(Hp,t6o),e(Hp,uG),e(uG,a6o),e(Hp,n6o),e(y,s6o),e(y,Jp),e(Jp,Tge),e(Tge,l6o),e(Jp,i6o),e(Jp,pG),e(pG,d6o),e(Jp,c6o),e(y,m6o),e(y,Yp),e(Yp,Mge),e(Mge,f6o),e(Yp,g6o),e(Yp,_G),e(_G,h6o),e(Yp,u6o),e(y,p6o),e(y,Kp),e(Kp,Ege),e(Ege,_6o),e(Kp,b6o),e(Kp,bG),e(bG,v6o),e(Kp,F6o),e(y,T6o),e(y,Zp),e(Zp,Cge),e(Cge,M6o),e(Zp,E6o),e(Zp,vG),e(vG,C6o),e(Zp,w6o),e(y,A6o),e(y,nl),e(nl,wge),e(wge,L6o),e(nl,y6o),e(nl,FG),e(FG,x6o),e(nl,$6o),e(nl,TG),e(TG,k6o),e(nl,S6o),e(y,R6o),e(y,e_),e(e_,Age),e(Age,P6o),e(e_,B6o),e(e_,MG),e(MG,I6o),e(e_,N6o),e(y,q6o),e(y,o_),e(o_,Lge),e(Lge,j6o),e(o_,D6o),e(o_,EG),e(EG,G6o),e(o_,O6o),e(y,V6o),e(y,r_),e(r_,yge),e(yge,X6o),e(r_,z6o),e(r_,CG),e(CG,W6o),e(r_,Q6o),e(y,U6o),e(y,t_),e(t_,xge),e(xge,H6o),e(t_,J6o),e(t_,wG),e(wG,Y6o),e(t_,K6o),e(y,Z6o),e(y,a_),e(a_,$ge),e($ge,eAo),e(a_,oAo),e(a_,AG),e(AG,rAo),e(a_,tAo),e(y,aAo),e(y,n_),e(n_,kge),e(kge,nAo),e(n_,sAo),e(n_,LG),e(LG,lAo),e(n_,iAo),e(y,dAo),e(y,s_),e(s_,Sge),e(Sge,cAo),e(s_,mAo),e(s_,yG),e(yG,fAo),e(s_,gAo),e(y,hAo),e(y,l_),e(l_,Rge),e(Rge,uAo),e(l_,pAo),e(l_,xG),e(xG,_Ao),e(l_,bAo),e(y,vAo),e(y,i_),e(i_,Pge),e(Pge,FAo),e(i_,TAo),e(i_,$G),e($G,MAo),e(i_,EAo),e(y,CAo),e(y,d_),e(d_,Bge),e(Bge,wAo),e(d_,AAo),e(d_,kG),e(kG,LAo),e(d_,yAo),e(y,xAo),e(y,c_),e(c_,Ige),e(Ige,$Ao),e(c_,kAo),e(c_,SG),e(SG,SAo),e(c_,RAo),e(y,PAo),e(y,m_),e(m_,Nge),e(Nge,BAo),e(m_,IAo),e(m_,RG),e(RG,NAo),e(m_,qAo),e(y,jAo),e(y,f_),e(f_,qge),e(qge,DAo),e(f_,GAo),e(f_,PG),e(PG,OAo),e(f_,VAo),e(y,XAo),e(y,g_),e(g_,jge),e(jge,zAo),e(g_,WAo),e(g_,BG),e(BG,QAo),e(g_,UAo),e(y,HAo),e(y,h_),e(h_,Dge),e(Dge,JAo),e(h_,YAo),e(h_,IG),e(IG,KAo),e(h_,ZAo),e(y,e7o),e(y,u_),e(u_,Gge),e(Gge,o7o),e(u_,r7o),e(u_,NG),e(NG,t7o),e(u_,a7o),e(y,n7o),e(y,p_),e(p_,Oge),e(Oge,s7o),e(p_,l7o),e(p_,qG),e(qG,i7o),e(p_,d7o),e(y,c7o),e(y,__),e(__,Vge),e(Vge,m7o),e(__,f7o),e(__,jG),e(jG,g7o),e(__,h7o),e(y,u7o),e(y,b_),e(b_,Xge),e(Xge,p7o),e(b_,_7o),e(b_,DG),e(DG,b7o),e(b_,v7o),e(y,F7o),e(y,v_),e(v_,zge),e(zge,T7o),e(v_,M7o),e(v_,GG),e(GG,E7o),e(v_,C7o),e(y,w7o),e(y,F_),e(F_,Wge),e(Wge,A7o),e(F_,L7o),e(F_,OG),e(OG,y7o),e(F_,x7o),e(y,$7o),e(y,T_),e(T_,Qge),e(Qge,k7o),e(T_,S7o),e(T_,VG),e(VG,R7o),e(T_,P7o),e(y,B7o),e(y,M_),e(M_,Uge),e(Uge,I7o),e(M_,N7o),e(M_,XG),e(XG,q7o),e(M_,j7o),e(y,D7o),e(y,E_),e(E_,Hge),e(Hge,G7o),e(E_,O7o),e(E_,zG),e(zG,V7o),e(E_,X7o),e(y,z7o),e(y,C_),e(C_,Jge),e(Jge,W7o),e(C_,Q7o),e(C_,WG),e(WG,U7o),e(C_,H7o),e(y,J7o),e(y,w_),e(w_,Yge),e(Yge,Y7o),e(w_,K7o),e(w_,QG),e(QG,Z7o),e(w_,eLo),e(y,oLo),e(y,A_),e(A_,Kge),e(Kge,rLo),e(A_,tLo),e(A_,UG),e(UG,aLo),e(A_,nLo),e(y,sLo),e(y,L_),e(L_,Zge),e(Zge,lLo),e(L_,iLo),e(L_,HG),e(HG,dLo),e(L_,cLo),e(y,mLo),e(y,y_),e(y_,ehe),e(ehe,fLo),e(y_,gLo),e(y_,JG),e(JG,hLo),e(y_,uLo),e(y,pLo),e(y,x_),e(x_,ohe),e(ohe,_Lo),e(x_,bLo),e(x_,YG),e(YG,vLo),e(x_,FLo),e(y,TLo),e(y,$_),e($_,rhe),e(rhe,MLo),e($_,ELo),e($_,KG),e(KG,CLo),e($_,wLo),e(y,ALo),e(y,k_),e(k_,the),e(the,LLo),e(k_,yLo),e(k_,ZG),e(ZG,xLo),e(k_,$Lo),e(y,kLo),e(y,S_),e(S_,ahe),e(ahe,SLo),e(S_,RLo),e(S_,eO),e(eO,PLo),e(S_,BLo),e(y,ILo),e(y,R_),e(R_,nhe),e(nhe,NLo),e(R_,qLo),e(R_,oO),e(oO,jLo),e(R_,DLo),e(y,GLo),e(y,P_),e(P_,she),e(she,OLo),e(P_,VLo),e(P_,rO),e(rO,XLo),e(P_,zLo),e(y,WLo),e(y,B_),e(B_,lhe),e(lhe,QLo),e(B_,ULo),e(B_,tO),e(tO,HLo),e(B_,JLo),e(y,YLo),e(y,I_),e(I_,ihe),e(ihe,KLo),e(I_,ZLo),e(I_,aO),e(aO,eyo),e(I_,oyo),e(y,ryo),e(y,N_),e(N_,dhe),e(dhe,tyo),e(N_,ayo),e(N_,nO),e(nO,nyo),e(N_,syo),e(y,lyo),e(y,q_),e(q_,che),e(che,iyo),e(q_,dyo),e(q_,sO),e(sO,cyo),e(q_,myo),e(y,fyo),e(y,j_),e(j_,mhe),e(mhe,gyo),e(j_,hyo),e(j_,lO),e(lO,uyo),e(j_,pyo),e(y,_yo),e(y,D_),e(D_,fhe),e(fhe,byo),e(D_,vyo),e(D_,iO),e(iO,Fyo),e(D_,Tyo),e(y,Myo),e(y,G_),e(G_,ghe),e(ghe,Eyo),e(G_,Cyo),e(G_,dO),e(dO,wyo),e(G_,Ayo),e(y,Lyo),e(y,O_),e(O_,hhe),e(hhe,yyo),e(O_,xyo),e(O_,cO),e(cO,$yo),e(O_,kyo),e(y,Syo),e(y,V_),e(V_,uhe),e(uhe,Ryo),e(V_,Pyo),e(V_,mO),e(mO,Byo),e(V_,Iyo),e(y,Nyo),e(y,X_),e(X_,phe),e(phe,qyo),e(X_,jyo),e(X_,fO),e(fO,Dyo),e(X_,Gyo),e(y,Oyo),e(y,z_),e(z_,_he),e(_he,Vyo),e(z_,Xyo),e(z_,gO),e(gO,zyo),e(z_,Wyo),e(y,Qyo),e(y,W_),e(W_,bhe),e(bhe,Uyo),e(W_,Hyo),e(W_,hO),e(hO,Jyo),e(W_,Yyo),e(y,Kyo),e(y,Q_),e(Q_,vhe),e(vhe,Zyo),e(Q_,e8o),e(Q_,uO),e(uO,o8o),e(Q_,r8o),e(y,t8o),e(y,U_),e(U_,Fhe),e(Fhe,a8o),e(U_,n8o),e(U_,pO),e(pO,s8o),e(U_,l8o),e(y,i8o),e(y,H_),e(H_,The),e(The,d8o),e(H_,c8o),e(H_,_O),e(_O,m8o),e(H_,f8o),e(y,g8o),e(y,J_),e(J_,Mhe),e(Mhe,h8o),e(J_,u8o),e(J_,bO),e(bO,p8o),e(J_,_8o),e(y,b8o),e(y,Y_),e(Y_,Ehe),e(Ehe,v8o),e(Y_,F8o),e(Y_,vO),e(vO,T8o),e(Y_,M8o),e(y,E8o),e(y,K_),e(K_,Che),e(Che,C8o),e(K_,w8o),e(K_,FO),e(FO,A8o),e(K_,L8o),e(y,y8o),e(y,Z_),e(Z_,whe),e(whe,x8o),e(Z_,$8o),e(Z_,TO),e(TO,k8o),e(Z_,S8o),e(y,R8o),e(y,e2),e(e2,Ahe),e(Ahe,P8o),e(e2,B8o),e(e2,MO),e(MO,I8o),e(e2,N8o),e(y,q8o),e(y,o2),e(o2,Lhe),e(Lhe,j8o),e(o2,D8o),e(o2,EO),e(EO,G8o),e(o2,O8o),e(y,V8o),e(y,r2),e(r2,yhe),e(yhe,X8o),e(r2,z8o),e(r2,CO),e(CO,W8o),e(r2,Q8o),e(y,U8o),e(y,t2),e(t2,xhe),e(xhe,H8o),e(t2,J8o),e(t2,wO),e(wO,Y8o),e(t2,K8o),e(y,Z8o),e(y,a2),e(a2,$he),e($he,e9o),e(a2,o9o),e(a2,AO),e(AO,r9o),e(a2,t9o),e(y,a9o),e(y,n2),e(n2,khe),e(khe,n9o),e(n2,s9o),e(n2,LO),e(LO,l9o),e(n2,i9o),e(y,d9o),e(y,s2),e(s2,She),e(She,c9o),e(s2,m9o),e(s2,yO),e(yO,f9o),e(s2,g9o),e(y,h9o),e(y,l2),e(l2,Rhe),e(Rhe,u9o),e(l2,p9o),e(l2,xO),e(xO,_9o),e(l2,b9o),e(y,v9o),e(y,i2),e(i2,Phe),e(Phe,F9o),e(i2,T9o),e(i2,$O),e($O,M9o),e(i2,E9o),e(y,C9o),e(y,d2),e(d2,Bhe),e(Bhe,w9o),e(d2,A9o),e(d2,kO),e(kO,L9o),e(d2,y9o),e(y,x9o),e(y,c2),e(c2,Ihe),e(Ihe,$9o),e(c2,k9o),e(c2,SO),e(SO,S9o),e(c2,R9o),e(y,P9o),e(y,m2),e(m2,Nhe),e(Nhe,B9o),e(m2,I9o),e(m2,RO),e(RO,N9o),e(m2,q9o),e(y,j9o),e(y,f2),e(f2,qhe),e(qhe,D9o),e(f2,G9o),e(f2,PO),e(PO,O9o),e(f2,V9o),e(y,X9o),e(y,g2),e(g2,jhe),e(jhe,z9o),e(g2,W9o),e(g2,BO),e(BO,Q9o),e(g2,U9o),e(y,H9o),e(y,h2),e(h2,Dhe),e(Dhe,J9o),e(h2,Y9o),e(h2,IO),e(IO,K9o),e(h2,Z9o),e(y,exo),e(y,u2),e(u2,Ghe),e(Ghe,oxo),e(u2,rxo),e(u2,NO),e(NO,txo),e(u2,axo),e(y,nxo),e(y,p2),e(p2,Ohe),e(Ohe,sxo),e(p2,lxo),e(p2,qO),e(qO,ixo),e(p2,dxo),e(y,cxo),e(y,_2),e(_2,Vhe),e(Vhe,mxo),e(_2,fxo),e(_2,jO),e(jO,gxo),e(_2,hxo),e(y,uxo),e(y,b2),e(b2,Xhe),e(Xhe,pxo),e(b2,_xo),e(b2,DO),e(DO,bxo),e(b2,vxo),e(y,Fxo),e(y,v2),e(v2,zhe),e(zhe,Txo),e(v2,Mxo),e(v2,GO),e(GO,Exo),e(v2,Cxo),e(y,wxo),e(y,F2),e(F2,Whe),e(Whe,Axo),e(F2,Lxo),e(F2,OO),e(OO,yxo),e(F2,xxo),e(y,$xo),e(y,T2),e(T2,Qhe),e(Qhe,kxo),e(T2,Sxo),e(T2,VO),e(VO,Rxo),e(T2,Pxo),e(y,Bxo),e(y,M2),e(M2,Uhe),e(Uhe,Ixo),e(M2,Nxo),e(M2,XO),e(XO,qxo),e(M2,jxo),e(y,Dxo),e(y,E2),e(E2,Hhe),e(Hhe,Gxo),e(E2,Oxo),e(E2,zO),e(zO,Vxo),e(E2,Xxo),e(y,zxo),e(y,C2),e(C2,Jhe),e(Jhe,Wxo),e(C2,Qxo),e(C2,WO),e(WO,Uxo),e(C2,Hxo),e(y,Jxo),e(y,w2),e(w2,Yhe),e(Yhe,Yxo),e(w2,Kxo),e(w2,QO),e(QO,Zxo),e(w2,e$o),e(Ye,o$o),e(Ye,A2),e(A2,r$o),e(A2,Khe),e(Khe,t$o),e(A2,a$o),e(A2,Zhe),e(Zhe,n$o),e(Ye,s$o),M(L2,Ye,null),b(m,wUe,_),b(m,nd,_),e(nd,y2),e(y2,eue),M(J8,eue,null),e(nd,l$o),e(nd,oue),e(oue,i$o),b(m,AUe,_),b(m,Ro,_),M(Y8,Ro,null),e(Ro,d$o),e(Ro,sd),e(sd,c$o),e(sd,UO),e(UO,m$o),e(sd,f$o),e(sd,HO),e(HO,g$o),e(sd,h$o),e(Ro,u$o),e(Ro,K8),e(K8,p$o),e(K8,rue),e(rue,_$o),e(K8,b$o),e(Ro,v$o),e(Ro,gt),M(Z8,gt,null),e(gt,F$o),e(gt,tue),e(tue,T$o),e(gt,M$o),e(gt,ld),e(ld,E$o),e(ld,aue),e(aue,C$o),e(ld,w$o),e(ld,JO),e(JO,A$o),e(ld,L$o),e(gt,y$o),M(x2,gt,null),e(Ro,x$o),e(Ro,Ke),M(e9,Ke,null),e(Ke,$$o),e(Ke,nue),e(nue,k$o),e(Ke,S$o),e(Ke,Xa),e(Xa,R$o),e(Xa,sue),e(sue,P$o),e(Xa,B$o),e(Xa,lue),e(lue,I$o),e(Xa,N$o),e(Xa,iue),e(iue,q$o),e(Xa,j$o),e(Ke,D$o),e(Ke,G),e(G,$2),e($2,due),e(due,G$o),e($2,O$o),e($2,YO),e(YO,V$o),e($2,X$o),e(G,z$o),e(G,k2),e(k2,cue),e(cue,W$o),e(k2,Q$o),e(k2,KO),e(KO,U$o),e(k2,H$o),e(G,J$o),e(G,S2),e(S2,mue),e(mue,Y$o),e(S2,K$o),e(S2,ZO),e(ZO,Z$o),e(S2,eko),e(G,oko),e(G,R2),e(R2,fue),e(fue,rko),e(R2,tko),e(R2,eV),e(eV,ako),e(R2,nko),e(G,sko),e(G,P2),e(P2,gue),e(gue,lko),e(P2,iko),e(P2,oV),e(oV,dko),e(P2,cko),e(G,mko),e(G,B2),e(B2,hue),e(hue,fko),e(B2,gko),e(B2,rV),e(rV,hko),e(B2,uko),e(G,pko),e(G,I2),e(I2,uue),e(uue,_ko),e(I2,bko),e(I2,tV),e(tV,vko),e(I2,Fko),e(G,Tko),e(G,N2),e(N2,pue),e(pue,Mko),e(N2,Eko),e(N2,aV),e(aV,Cko),e(N2,wko),e(G,Ako),e(G,q2),e(q2,_ue),e(_ue,Lko),e(q2,yko),e(q2,nV),e(nV,xko),e(q2,$ko),e(G,kko),e(G,j2),e(j2,bue),e(bue,Sko),e(j2,Rko),e(j2,sV),e(sV,Pko),e(j2,Bko),e(G,Iko),e(G,D2),e(D2,vue),e(vue,Nko),e(D2,qko),e(D2,lV),e(lV,jko),e(D2,Dko),e(G,Gko),e(G,G2),e(G2,Fue),e(Fue,Oko),e(G2,Vko),e(G2,iV),e(iV,Xko),e(G2,zko),e(G,Wko),e(G,O2),e(O2,Tue),e(Tue,Qko),e(O2,Uko),e(O2,dV),e(dV,Hko),e(O2,Jko),e(G,Yko),e(G,V2),e(V2,Mue),e(Mue,Kko),e(V2,Zko),e(V2,cV),e(cV,eSo),e(V2,oSo),e(G,rSo),e(G,X2),e(X2,Eue),e(Eue,tSo),e(X2,aSo),e(X2,mV),e(mV,nSo),e(X2,sSo),e(G,lSo),e(G,z2),e(z2,Cue),e(Cue,iSo),e(z2,dSo),e(z2,fV),e(fV,cSo),e(z2,mSo),e(G,fSo),e(G,W2),e(W2,wue),e(wue,gSo),e(W2,hSo),e(W2,gV),e(gV,uSo),e(W2,pSo),e(G,_So),e(G,Q2),e(Q2,Aue),e(Aue,bSo),e(Q2,vSo),e(Q2,hV),e(hV,FSo),e(Q2,TSo),e(G,MSo),e(G,U2),e(U2,Lue),e(Lue,ESo),e(U2,CSo),e(U2,uV),e(uV,wSo),e(U2,ASo),e(G,LSo),e(G,H2),e(H2,yue),e(yue,ySo),e(H2,xSo),e(H2,pV),e(pV,$So),e(H2,kSo),e(G,SSo),e(G,J2),e(J2,xue),e(xue,RSo),e(J2,PSo),e(J2,_V),e(_V,BSo),e(J2,ISo),e(G,NSo),e(G,Y2),e(Y2,$ue),e($ue,qSo),e(Y2,jSo),e(Y2,bV),e(bV,DSo),e(Y2,GSo),e(G,OSo),e(G,K2),e(K2,kue),e(kue,VSo),e(K2,XSo),e(K2,vV),e(vV,zSo),e(K2,WSo),e(G,QSo),e(G,Z2),e(Z2,Sue),e(Sue,USo),e(Z2,HSo),e(Z2,FV),e(FV,JSo),e(Z2,YSo),e(G,KSo),e(G,eb),e(eb,Rue),e(Rue,ZSo),e(eb,eRo),e(eb,TV),e(TV,oRo),e(eb,rRo),e(G,tRo),e(G,ob),e(ob,Pue),e(Pue,aRo),e(ob,nRo),e(ob,MV),e(MV,sRo),e(ob,lRo),e(G,iRo),e(G,rb),e(rb,Bue),e(Bue,dRo),e(rb,cRo),e(rb,EV),e(EV,mRo),e(rb,fRo),e(G,gRo),e(G,tb),e(tb,Iue),e(Iue,hRo),e(tb,uRo),e(tb,CV),e(CV,pRo),e(tb,_Ro),e(G,bRo),e(G,ab),e(ab,Nue),e(Nue,vRo),e(ab,FRo),e(ab,wV),e(wV,TRo),e(ab,MRo),e(G,ERo),e(G,nb),e(nb,que),e(que,CRo),e(nb,wRo),e(nb,AV),e(AV,ARo),e(nb,LRo),e(G,yRo),e(G,sb),e(sb,jue),e(jue,xRo),e(sb,$Ro),e(sb,LV),e(LV,kRo),e(sb,SRo),e(G,RRo),e(G,lb),e(lb,Due),e(Due,PRo),e(lb,BRo),e(lb,yV),e(yV,IRo),e(lb,NRo),e(G,qRo),e(G,ib),e(ib,Gue),e(Gue,jRo),e(ib,DRo),e(ib,xV),e(xV,GRo),e(ib,ORo),e(G,VRo),e(G,db),e(db,Oue),e(Oue,XRo),e(db,zRo),e(db,$V),e($V,WRo),e(db,QRo),e(G,URo),e(G,cb),e(cb,Vue),e(Vue,HRo),e(cb,JRo),e(cb,kV),e(kV,YRo),e(cb,KRo),e(G,ZRo),e(G,mb),e(mb,Xue),e(Xue,ePo),e(mb,oPo),e(mb,SV),e(SV,rPo),e(mb,tPo),e(G,aPo),e(G,fb),e(fb,zue),e(zue,nPo),e(fb,sPo),e(fb,RV),e(RV,lPo),e(fb,iPo),e(G,dPo),e(G,gb),e(gb,Wue),e(Wue,cPo),e(gb,mPo),e(gb,PV),e(PV,fPo),e(gb,gPo),e(G,hPo),e(G,hb),e(hb,Que),e(Que,uPo),e(hb,pPo),e(hb,BV),e(BV,_Po),e(hb,bPo),e(G,vPo),e(G,ub),e(ub,Uue),e(Uue,FPo),e(ub,TPo),e(ub,IV),e(IV,MPo),e(ub,EPo),e(G,CPo),e(G,pb),e(pb,Hue),e(Hue,wPo),e(pb,APo),e(pb,NV),e(NV,LPo),e(pb,yPo),e(G,xPo),e(G,_b),e(_b,Jue),e(Jue,$Po),e(_b,kPo),e(_b,qV),e(qV,SPo),e(_b,RPo),e(G,PPo),e(G,bb),e(bb,Yue),e(Yue,BPo),e(bb,IPo),e(bb,jV),e(jV,NPo),e(bb,qPo),e(G,jPo),e(G,vb),e(vb,Kue),e(Kue,DPo),e(vb,GPo),e(vb,DV),e(DV,OPo),e(vb,VPo),e(G,XPo),e(G,Fb),e(Fb,Zue),e(Zue,zPo),e(Fb,WPo),e(Fb,GV),e(GV,QPo),e(Fb,UPo),e(G,HPo),e(G,Tb),e(Tb,epe),e(epe,JPo),e(Tb,YPo),e(Tb,OV),e(OV,KPo),e(Tb,ZPo),e(G,eBo),e(G,Mb),e(Mb,ope),e(ope,oBo),e(Mb,rBo),e(Mb,VV),e(VV,tBo),e(Mb,aBo),e(Ke,nBo),e(Ke,Eb),e(Eb,sBo),e(Eb,rpe),e(rpe,lBo),e(Eb,iBo),e(Eb,tpe),e(tpe,dBo),e(Ke,cBo),M(Cb,Ke,null),b(m,LUe,_),b(m,id,_),e(id,wb),e(wb,ape),M(o9,ape,null),e(id,mBo),e(id,npe),e(npe,fBo),b(m,yUe,_),b(m,Po,_),M(r9,Po,null),e(Po,gBo),e(Po,dd),e(dd,hBo),e(dd,XV),e(XV,uBo),e(dd,pBo),e(dd,zV),e(zV,_Bo),e(dd,bBo),e(Po,vBo),e(Po,t9),e(t9,FBo),e(t9,spe),e(spe,TBo),e(t9,MBo),e(Po,EBo),e(Po,ht),M(a9,ht,null),e(ht,CBo),e(ht,lpe),e(lpe,wBo),e(ht,ABo),e(ht,cd),e(cd,LBo),e(cd,ipe),e(ipe,yBo),e(cd,xBo),e(cd,WV),e(WV,$Bo),e(cd,kBo),e(ht,SBo),M(Ab,ht,null),e(Po,RBo),e(Po,Ze),M(n9,Ze,null),e(Ze,PBo),e(Ze,dpe),e(dpe,BBo),e(Ze,IBo),e(Ze,za),e(za,NBo),e(za,cpe),e(cpe,qBo),e(za,jBo),e(za,mpe),e(mpe,DBo),e(za,GBo),e(za,fpe),e(fpe,OBo),e(za,VBo),e(Ze,XBo),e(Ze,z),e(z,Lb),e(Lb,gpe),e(gpe,zBo),e(Lb,WBo),e(Lb,QV),e(QV,QBo),e(Lb,UBo),e(z,HBo),e(z,yb),e(yb,hpe),e(hpe,JBo),e(yb,YBo),e(yb,UV),e(UV,KBo),e(yb,ZBo),e(z,eIo),e(z,xb),e(xb,upe),e(upe,oIo),e(xb,rIo),e(xb,HV),e(HV,tIo),e(xb,aIo),e(z,nIo),e(z,$b),e($b,ppe),e(ppe,sIo),e($b,lIo),e($b,JV),e(JV,iIo),e($b,dIo),e(z,cIo),e(z,kb),e(kb,_pe),e(_pe,mIo),e(kb,fIo),e(kb,YV),e(YV,gIo),e(kb,hIo),e(z,uIo),e(z,Sb),e(Sb,bpe),e(bpe,pIo),e(Sb,_Io),e(Sb,KV),e(KV,bIo),e(Sb,vIo),e(z,FIo),e(z,Rb),e(Rb,vpe),e(vpe,TIo),e(Rb,MIo),e(Rb,ZV),e(ZV,EIo),e(Rb,CIo),e(z,wIo),e(z,Pb),e(Pb,Fpe),e(Fpe,AIo),e(Pb,LIo),e(Pb,eX),e(eX,yIo),e(Pb,xIo),e(z,$Io),e(z,Bb),e(Bb,Tpe),e(Tpe,kIo),e(Bb,SIo),e(Bb,oX),e(oX,RIo),e(Bb,PIo),e(z,BIo),e(z,Ib),e(Ib,Mpe),e(Mpe,IIo),e(Ib,NIo),e(Ib,rX),e(rX,qIo),e(Ib,jIo),e(z,DIo),e(z,Nb),e(Nb,Epe),e(Epe,GIo),e(Nb,OIo),e(Nb,tX),e(tX,VIo),e(Nb,XIo),e(z,zIo),e(z,qb),e(qb,Cpe),e(Cpe,WIo),e(qb,QIo),e(qb,aX),e(aX,UIo),e(qb,HIo),e(z,JIo),e(z,jb),e(jb,wpe),e(wpe,YIo),e(jb,KIo),e(jb,nX),e(nX,ZIo),e(jb,eNo),e(z,oNo),e(z,Db),e(Db,Ape),e(Ape,rNo),e(Db,tNo),e(Db,sX),e(sX,aNo),e(Db,nNo),e(z,sNo),e(z,Gb),e(Gb,Lpe),e(Lpe,lNo),e(Gb,iNo),e(Gb,lX),e(lX,dNo),e(Gb,cNo),e(z,mNo),e(z,Ob),e(Ob,ype),e(ype,fNo),e(Ob,gNo),e(Ob,iX),e(iX,hNo),e(Ob,uNo),e(z,pNo),e(z,Vb),e(Vb,xpe),e(xpe,_No),e(Vb,bNo),e(Vb,dX),e(dX,vNo),e(Vb,FNo),e(z,TNo),e(z,Xb),e(Xb,$pe),e($pe,MNo),e(Xb,ENo),e(Xb,cX),e(cX,CNo),e(Xb,wNo),e(z,ANo),e(z,zb),e(zb,kpe),e(kpe,LNo),e(zb,yNo),e(zb,mX),e(mX,xNo),e(zb,$No),e(z,kNo),e(z,Wb),e(Wb,Spe),e(Spe,SNo),e(Wb,RNo),e(Wb,fX),e(fX,PNo),e(Wb,BNo),e(z,INo),e(z,Qb),e(Qb,Rpe),e(Rpe,NNo),e(Qb,qNo),e(Qb,gX),e(gX,jNo),e(Qb,DNo),e(z,GNo),e(z,Ub),e(Ub,Ppe),e(Ppe,ONo),e(Ub,VNo),e(Ub,hX),e(hX,XNo),e(Ub,zNo),e(z,WNo),e(z,Hb),e(Hb,Bpe),e(Bpe,QNo),e(Hb,UNo),e(Hb,uX),e(uX,HNo),e(Hb,JNo),e(z,YNo),e(z,Jb),e(Jb,Ipe),e(Ipe,KNo),e(Jb,ZNo),e(Jb,pX),e(pX,eqo),e(Jb,oqo),e(z,rqo),e(z,Yb),e(Yb,Npe),e(Npe,tqo),e(Yb,aqo),e(Yb,_X),e(_X,nqo),e(Yb,sqo),e(z,lqo),e(z,Kb),e(Kb,qpe),e(qpe,iqo),e(Kb,dqo),e(Kb,bX),e(bX,cqo),e(Kb,mqo),e(z,fqo),e(z,Zb),e(Zb,jpe),e(jpe,gqo),e(Zb,hqo),e(Zb,vX),e(vX,uqo),e(Zb,pqo),e(z,_qo),e(z,ev),e(ev,Dpe),e(Dpe,bqo),e(ev,vqo),e(ev,FX),e(FX,Fqo),e(ev,Tqo),e(z,Mqo),e(z,ov),e(ov,Gpe),e(Gpe,Eqo),e(ov,Cqo),e(ov,TX),e(TX,wqo),e(ov,Aqo),e(z,Lqo),e(z,rv),e(rv,Ope),e(Ope,yqo),e(rv,xqo),e(rv,MX),e(MX,$qo),e(rv,kqo),e(z,Sqo),e(z,tv),e(tv,Vpe),e(Vpe,Rqo),e(tv,Pqo),e(tv,EX),e(EX,Bqo),e(tv,Iqo),e(z,Nqo),e(z,av),e(av,Xpe),e(Xpe,qqo),e(av,jqo),e(av,CX),e(CX,Dqo),e(av,Gqo),e(z,Oqo),e(z,nv),e(nv,zpe),e(zpe,Vqo),e(nv,Xqo),e(nv,wX),e(wX,zqo),e(nv,Wqo),e(z,Qqo),e(z,sv),e(sv,Wpe),e(Wpe,Uqo),e(sv,Hqo),e(sv,AX),e(AX,Jqo),e(sv,Yqo),e(z,Kqo),e(z,lv),e(lv,Qpe),e(Qpe,Zqo),e(lv,ejo),e(lv,LX),e(LX,ojo),e(lv,rjo),e(z,tjo),e(z,iv),e(iv,Upe),e(Upe,ajo),e(iv,njo),e(iv,yX),e(yX,sjo),e(iv,ljo),e(z,ijo),e(z,dv),e(dv,Hpe),e(Hpe,djo),e(dv,cjo),e(dv,xX),e(xX,mjo),e(dv,fjo),e(z,gjo),e(z,cv),e(cv,Jpe),e(Jpe,hjo),e(cv,ujo),e(cv,$X),e($X,pjo),e(cv,_jo),e(z,bjo),e(z,mv),e(mv,Ype),e(Ype,vjo),e(mv,Fjo),e(mv,kX),e(kX,Tjo),e(mv,Mjo),e(z,Ejo),e(z,fv),e(fv,Kpe),e(Kpe,Cjo),e(fv,wjo),e(fv,SX),e(SX,Ajo),e(fv,Ljo),e(Ze,yjo),e(Ze,gv),e(gv,xjo),e(gv,Zpe),e(Zpe,$jo),e(gv,kjo),e(gv,e_e),e(e_e,Sjo),e(Ze,Rjo),M(hv,Ze,null),b(m,xUe,_),b(m,md,_),e(md,uv),e(uv,o_e),M(s9,o_e,null),e(md,Pjo),e(md,r_e),e(r_e,Bjo),b(m,$Ue,_),b(m,Bo,_),M(l9,Bo,null),e(Bo,Ijo),e(Bo,fd),e(fd,Njo),e(fd,RX),e(RX,qjo),e(fd,jjo),e(fd,PX),e(PX,Djo),e(fd,Gjo),e(Bo,Ojo),e(Bo,i9),e(i9,Vjo),e(i9,t_e),e(t_e,Xjo),e(i9,zjo),e(Bo,Wjo),e(Bo,ut),M(d9,ut,null),e(ut,Qjo),e(ut,a_e),e(a_e,Ujo),e(ut,Hjo),e(ut,gd),e(gd,Jjo),e(gd,n_e),e(n_e,Yjo),e(gd,Kjo),e(gd,BX),e(BX,Zjo),e(gd,eDo),e(ut,oDo),M(pv,ut,null),e(Bo,rDo),e(Bo,eo),M(c9,eo,null),e(eo,tDo),e(eo,s_e),e(s_e,aDo),e(eo,nDo),e(eo,Wa),e(Wa,sDo),e(Wa,l_e),e(l_e,lDo),e(Wa,iDo),e(Wa,i_e),e(i_e,dDo),e(Wa,cDo),e(Wa,d_e),e(d_e,mDo),e(Wa,fDo),e(eo,gDo),e(eo,U),e(U,_v),e(_v,c_e),e(c_e,hDo),e(_v,uDo),e(_v,IX),e(IX,pDo),e(_v,_Do),e(U,bDo),e(U,bv),e(bv,m_e),e(m_e,vDo),e(bv,FDo),e(bv,NX),e(NX,TDo),e(bv,MDo),e(U,EDo),e(U,vv),e(vv,f_e),e(f_e,CDo),e(vv,wDo),e(vv,qX),e(qX,ADo),e(vv,LDo),e(U,yDo),e(U,Fv),e(Fv,g_e),e(g_e,xDo),e(Fv,$Do),e(Fv,jX),e(jX,kDo),e(Fv,SDo),e(U,RDo),e(U,Tv),e(Tv,h_e),e(h_e,PDo),e(Tv,BDo),e(Tv,DX),e(DX,IDo),e(Tv,NDo),e(U,qDo),e(U,Mv),e(Mv,u_e),e(u_e,jDo),e(Mv,DDo),e(Mv,GX),e(GX,GDo),e(Mv,ODo),e(U,VDo),e(U,Ev),e(Ev,p_e),e(p_e,XDo),e(Ev,zDo),e(Ev,OX),e(OX,WDo),e(Ev,QDo),e(U,UDo),e(U,Cv),e(Cv,__e),e(__e,HDo),e(Cv,JDo),e(Cv,VX),e(VX,YDo),e(Cv,KDo),e(U,ZDo),e(U,wv),e(wv,b_e),e(b_e,eGo),e(wv,oGo),e(wv,XX),e(XX,rGo),e(wv,tGo),e(U,aGo),e(U,Av),e(Av,v_e),e(v_e,nGo),e(Av,sGo),e(Av,zX),e(zX,lGo),e(Av,iGo),e(U,dGo),e(U,Lv),e(Lv,F_e),e(F_e,cGo),e(Lv,mGo),e(Lv,WX),e(WX,fGo),e(Lv,gGo),e(U,hGo),e(U,yv),e(yv,T_e),e(T_e,uGo),e(yv,pGo),e(yv,QX),e(QX,_Go),e(yv,bGo),e(U,vGo),e(U,xv),e(xv,M_e),e(M_e,FGo),e(xv,TGo),e(xv,UX),e(UX,MGo),e(xv,EGo),e(U,CGo),e(U,$v),e($v,E_e),e(E_e,wGo),e($v,AGo),e($v,HX),e(HX,LGo),e($v,yGo),e(U,xGo),e(U,kv),e(kv,C_e),e(C_e,$Go),e(kv,kGo),e(kv,JX),e(JX,SGo),e(kv,RGo),e(U,PGo),e(U,Sv),e(Sv,w_e),e(w_e,BGo),e(Sv,IGo),e(Sv,YX),e(YX,NGo),e(Sv,qGo),e(U,jGo),e(U,Rv),e(Rv,A_e),e(A_e,DGo),e(Rv,GGo),e(Rv,KX),e(KX,OGo),e(Rv,VGo),e(U,XGo),e(U,Pv),e(Pv,L_e),e(L_e,zGo),e(Pv,WGo),e(Pv,ZX),e(ZX,QGo),e(Pv,UGo),e(U,HGo),e(U,Bv),e(Bv,y_e),e(y_e,JGo),e(Bv,YGo),e(Bv,ez),e(ez,KGo),e(Bv,ZGo),e(U,eOo),e(U,Iv),e(Iv,x_e),e(x_e,oOo),e(Iv,rOo),e(Iv,oz),e(oz,tOo),e(Iv,aOo),e(U,nOo),e(U,Nv),e(Nv,$_e),e($_e,sOo),e(Nv,lOo),e(Nv,rz),e(rz,iOo),e(Nv,dOo),e(U,cOo),e(U,qv),e(qv,k_e),e(k_e,mOo),e(qv,fOo),e(qv,tz),e(tz,gOo),e(qv,hOo),e(U,uOo),e(U,jv),e(jv,S_e),e(S_e,pOo),e(jv,_Oo),e(jv,az),e(az,bOo),e(jv,vOo),e(U,FOo),e(U,Dv),e(Dv,R_e),e(R_e,TOo),e(Dv,MOo),e(Dv,nz),e(nz,EOo),e(Dv,COo),e(U,wOo),e(U,Gv),e(Gv,P_e),e(P_e,AOo),e(Gv,LOo),e(Gv,sz),e(sz,yOo),e(Gv,xOo),e(U,$Oo),e(U,Ov),e(Ov,B_e),e(B_e,kOo),e(Ov,SOo),e(Ov,lz),e(lz,ROo),e(Ov,POo),e(U,BOo),e(U,Vv),e(Vv,I_e),e(I_e,IOo),e(Vv,NOo),e(Vv,iz),e(iz,qOo),e(Vv,jOo),e(U,DOo),e(U,Xv),e(Xv,N_e),e(N_e,GOo),e(Xv,OOo),e(Xv,dz),e(dz,VOo),e(Xv,XOo),e(U,zOo),e(U,zv),e(zv,q_e),e(q_e,WOo),e(zv,QOo),e(zv,cz),e(cz,UOo),e(zv,HOo),e(U,JOo),e(U,Wv),e(Wv,j_e),e(j_e,YOo),e(Wv,KOo),e(Wv,mz),e(mz,ZOo),e(Wv,eVo),e(U,oVo),e(U,Qv),e(Qv,D_e),e(D_e,rVo),e(Qv,tVo),e(Qv,fz),e(fz,aVo),e(Qv,nVo),e(U,sVo),e(U,Uv),e(Uv,G_e),e(G_e,lVo),e(Uv,iVo),e(Uv,gz),e(gz,dVo),e(Uv,cVo),e(U,mVo),e(U,Hv),e(Hv,O_e),e(O_e,fVo),e(Hv,gVo),e(Hv,hz),e(hz,hVo),e(Hv,uVo),e(U,pVo),e(U,Jv),e(Jv,V_e),e(V_e,_Vo),e(Jv,bVo),e(Jv,X_e),e(X_e,vVo),e(Jv,FVo),e(U,TVo),e(U,Yv),e(Yv,z_e),e(z_e,MVo),e(Yv,EVo),e(Yv,uz),e(uz,CVo),e(Yv,wVo),e(U,AVo),e(U,Kv),e(Kv,W_e),e(W_e,LVo),e(Kv,yVo),e(Kv,pz),e(pz,xVo),e(Kv,$Vo),e(U,kVo),e(U,Zv),e(Zv,Q_e),e(Q_e,SVo),e(Zv,RVo),e(Zv,_z),e(_z,PVo),e(Zv,BVo),e(U,IVo),e(U,e1),e(e1,U_e),e(U_e,NVo),e(e1,qVo),e(e1,bz),e(bz,jVo),e(e1,DVo),e(eo,GVo),e(eo,o1),e(o1,OVo),e(o1,H_e),e(H_e,VVo),e(o1,XVo),e(o1,J_e),e(J_e,zVo),e(eo,WVo),M(r1,eo,null),b(m,kUe,_),b(m,hd,_),e(hd,t1),e(t1,Y_e),M(m9,Y_e,null),e(hd,QVo),e(hd,K_e),e(K_e,UVo),b(m,SUe,_),b(m,Io,_),M(f9,Io,null),e(Io,HVo),e(Io,ud),e(ud,JVo),e(ud,vz),e(vz,YVo),e(ud,KVo),e(ud,Fz),e(Fz,ZVo),e(ud,eXo),e(Io,oXo),e(Io,g9),e(g9,rXo),e(g9,Z_e),e(Z_e,tXo),e(g9,aXo),e(Io,nXo),e(Io,pt),M(h9,pt,null),e(pt,sXo),e(pt,e2e),e(e2e,lXo),e(pt,iXo),e(pt,pd),e(pd,dXo),e(pd,o2e),e(o2e,cXo),e(pd,mXo),e(pd,Tz),e(Tz,fXo),e(pd,gXo),e(pt,hXo),M(a1,pt,null),e(Io,uXo),e(Io,oo),M(u9,oo,null),e(oo,pXo),e(oo,r2e),e(r2e,_Xo),e(oo,bXo),e(oo,Qa),e(Qa,vXo),e(Qa,t2e),e(t2e,FXo),e(Qa,TXo),e(Qa,a2e),e(a2e,MXo),e(Qa,EXo),e(Qa,n2e),e(n2e,CXo),e(Qa,wXo),e(oo,AXo),e(oo,he),e(he,n1),e(n1,s2e),e(s2e,LXo),e(n1,yXo),e(n1,Mz),e(Mz,xXo),e(n1,$Xo),e(he,kXo),e(he,s1),e(s1,l2e),e(l2e,SXo),e(s1,RXo),e(s1,Ez),e(Ez,PXo),e(s1,BXo),e(he,IXo),e(he,l1),e(l1,i2e),e(i2e,NXo),e(l1,qXo),e(l1,Cz),e(Cz,jXo),e(l1,DXo),e(he,GXo),e(he,i1),e(i1,d2e),e(d2e,OXo),e(i1,VXo),e(i1,wz),e(wz,XXo),e(i1,zXo),e(he,WXo),e(he,d1),e(d1,c2e),e(c2e,QXo),e(d1,UXo),e(d1,Az),e(Az,HXo),e(d1,JXo),e(he,YXo),e(he,c1),e(c1,m2e),e(m2e,KXo),e(c1,ZXo),e(c1,Lz),e(Lz,ezo),e(c1,ozo),e(he,rzo),e(he,m1),e(m1,f2e),e(f2e,tzo),e(m1,azo),e(m1,yz),e(yz,nzo),e(m1,szo),e(he,lzo),e(he,f1),e(f1,g2e),e(g2e,izo),e(f1,dzo),e(f1,xz),e(xz,czo),e(f1,mzo),e(he,fzo),e(he,g1),e(g1,h2e),e(h2e,gzo),e(g1,hzo),e(g1,$z),e($z,uzo),e(g1,pzo),e(he,_zo),e(he,h1),e(h1,u2e),e(u2e,bzo),e(h1,vzo),e(h1,kz),e(kz,Fzo),e(h1,Tzo),e(he,Mzo),e(he,u1),e(u1,p2e),e(p2e,Ezo),e(u1,Czo),e(u1,Sz),e(Sz,wzo),e(u1,Azo),e(he,Lzo),e(he,p1),e(p1,_2e),e(_2e,yzo),e(p1,xzo),e(p1,Rz),e(Rz,$zo),e(p1,kzo),e(he,Szo),e(he,_1),e(_1,b2e),e(b2e,Rzo),e(_1,Pzo),e(_1,Pz),e(Pz,Bzo),e(_1,Izo),e(he,Nzo),e(he,b1),e(b1,v2e),e(v2e,qzo),e(b1,jzo),e(b1,Bz),e(Bz,Dzo),e(b1,Gzo),e(he,Ozo),e(he,v1),e(v1,F2e),e(F2e,Vzo),e(v1,Xzo),e(v1,Iz),e(Iz,zzo),e(v1,Wzo),e(he,Qzo),e(he,F1),e(F1,T2e),e(T2e,Uzo),e(F1,Hzo),e(F1,Nz),e(Nz,Jzo),e(F1,Yzo),e(he,Kzo),e(he,T1),e(T1,M2e),e(M2e,Zzo),e(T1,eWo),e(T1,qz),e(qz,oWo),e(T1,rWo),e(he,tWo),e(he,M1),e(M1,E2e),e(E2e,aWo),e(M1,nWo),e(M1,jz),e(jz,sWo),e(M1,lWo),e(he,iWo),e(he,E1),e(E1,C2e),e(C2e,dWo),e(E1,cWo),e(E1,Dz),e(Dz,mWo),e(E1,fWo),e(oo,gWo),e(oo,C1),e(C1,hWo),e(C1,w2e),e(w2e,uWo),e(C1,pWo),e(C1,A2e),e(A2e,_Wo),e(oo,bWo),M(w1,oo,null),b(m,RUe,_),b(m,_d,_),e(_d,A1),e(A1,L2e),M(p9,L2e,null),e(_d,vWo),e(_d,y2e),e(y2e,FWo),b(m,PUe,_),b(m,No,_),M(_9,No,null),e(No,TWo),e(No,bd),e(bd,MWo),e(bd,Gz),e(Gz,EWo),e(bd,CWo),e(bd,Oz),e(Oz,wWo),e(bd,AWo),e(No,LWo),e(No,b9),e(b9,yWo),e(b9,x2e),e(x2e,xWo),e(b9,$Wo),e(No,kWo),e(No,_t),M(v9,_t,null),e(_t,SWo),e(_t,$2e),e($2e,RWo),e(_t,PWo),e(_t,vd),e(vd,BWo),e(vd,k2e),e(k2e,IWo),e(vd,NWo),e(vd,Vz),e(Vz,qWo),e(vd,jWo),e(_t,DWo),M(L1,_t,null),e(No,GWo),e(No,ro),M(F9,ro,null),e(ro,OWo),e(ro,S2e),e(S2e,VWo),e(ro,XWo),e(ro,Ua),e(Ua,zWo),e(Ua,R2e),e(R2e,WWo),e(Ua,QWo),e(Ua,P2e),e(P2e,UWo),e(Ua,HWo),e(Ua,B2e),e(B2e,JWo),e(Ua,YWo),e(ro,KWo),e(ro,q),e(q,y1),e(y1,I2e),e(I2e,ZWo),e(y1,eQo),e(y1,Xz),e(Xz,oQo),e(y1,rQo),e(q,tQo),e(q,x1),e(x1,N2e),e(N2e,aQo),e(x1,nQo),e(x1,zz),e(zz,sQo),e(x1,lQo),e(q,iQo),e(q,$1),e($1,q2e),e(q2e,dQo),e($1,cQo),e($1,Wz),e(Wz,mQo),e($1,fQo),e(q,gQo),e(q,k1),e(k1,j2e),e(j2e,hQo),e(k1,uQo),e(k1,Qz),e(Qz,pQo),e(k1,_Qo),e(q,bQo),e(q,S1),e(S1,D2e),e(D2e,vQo),e(S1,FQo),e(S1,Uz),e(Uz,TQo),e(S1,MQo),e(q,EQo),e(q,R1),e(R1,G2e),e(G2e,CQo),e(R1,wQo),e(R1,Hz),e(Hz,AQo),e(R1,LQo),e(q,yQo),e(q,P1),e(P1,O2e),e(O2e,xQo),e(P1,$Qo),e(P1,Jz),e(Jz,kQo),e(P1,SQo),e(q,RQo),e(q,B1),e(B1,V2e),e(V2e,PQo),e(B1,BQo),e(B1,Yz),e(Yz,IQo),e(B1,NQo),e(q,qQo),e(q,I1),e(I1,X2e),e(X2e,jQo),e(I1,DQo),e(I1,Kz),e(Kz,GQo),e(I1,OQo),e(q,VQo),e(q,N1),e(N1,z2e),e(z2e,XQo),e(N1,zQo),e(N1,Zz),e(Zz,WQo),e(N1,QQo),e(q,UQo),e(q,q1),e(q1,W2e),e(W2e,HQo),e(q1,JQo),e(q1,eW),e(eW,YQo),e(q1,KQo),e(q,ZQo),e(q,j1),e(j1,Q2e),e(Q2e,eUo),e(j1,oUo),e(j1,oW),e(oW,rUo),e(j1,tUo),e(q,aUo),e(q,D1),e(D1,U2e),e(U2e,nUo),e(D1,sUo),e(D1,rW),e(rW,lUo),e(D1,iUo),e(q,dUo),e(q,G1),e(G1,H2e),e(H2e,cUo),e(G1,mUo),e(G1,tW),e(tW,fUo),e(G1,gUo),e(q,hUo),e(q,O1),e(O1,J2e),e(J2e,uUo),e(O1,pUo),e(O1,aW),e(aW,_Uo),e(O1,bUo),e(q,vUo),e(q,V1),e(V1,Y2e),e(Y2e,FUo),e(V1,TUo),e(V1,nW),e(nW,MUo),e(V1,EUo),e(q,CUo),e(q,X1),e(X1,K2e),e(K2e,wUo),e(X1,AUo),e(X1,sW),e(sW,LUo),e(X1,yUo),e(q,xUo),e(q,z1),e(z1,Z2e),e(Z2e,$Uo),e(z1,kUo),e(z1,lW),e(lW,SUo),e(z1,RUo),e(q,PUo),e(q,W1),e(W1,ebe),e(ebe,BUo),e(W1,IUo),e(W1,iW),e(iW,NUo),e(W1,qUo),e(q,jUo),e(q,Q1),e(Q1,obe),e(obe,DUo),e(Q1,GUo),e(Q1,dW),e(dW,OUo),e(Q1,VUo),e(q,XUo),e(q,U1),e(U1,rbe),e(rbe,zUo),e(U1,WUo),e(U1,cW),e(cW,QUo),e(U1,UUo),e(q,HUo),e(q,H1),e(H1,tbe),e(tbe,JUo),e(H1,YUo),e(H1,mW),e(mW,KUo),e(H1,ZUo),e(q,eHo),e(q,J1),e(J1,abe),e(abe,oHo),e(J1,rHo),e(J1,fW),e(fW,tHo),e(J1,aHo),e(q,nHo),e(q,Y1),e(Y1,nbe),e(nbe,sHo),e(Y1,lHo),e(Y1,gW),e(gW,iHo),e(Y1,dHo),e(q,cHo),e(q,K1),e(K1,sbe),e(sbe,mHo),e(K1,fHo),e(K1,hW),e(hW,gHo),e(K1,hHo),e(q,uHo),e(q,Z1),e(Z1,lbe),e(lbe,pHo),e(Z1,_Ho),e(Z1,uW),e(uW,bHo),e(Z1,vHo),e(q,FHo),e(q,eF),e(eF,ibe),e(ibe,THo),e(eF,MHo),e(eF,pW),e(pW,EHo),e(eF,CHo),e(q,wHo),e(q,oF),e(oF,dbe),e(dbe,AHo),e(oF,LHo),e(oF,_W),e(_W,yHo),e(oF,xHo),e(q,$Ho),e(q,rF),e(rF,cbe),e(cbe,kHo),e(rF,SHo),e(rF,bW),e(bW,RHo),e(rF,PHo),e(q,BHo),e(q,tF),e(tF,mbe),e(mbe,IHo),e(tF,NHo),e(tF,vW),e(vW,qHo),e(tF,jHo),e(q,DHo),e(q,aF),e(aF,fbe),e(fbe,GHo),e(aF,OHo),e(aF,FW),e(FW,VHo),e(aF,XHo),e(q,zHo),e(q,nF),e(nF,gbe),e(gbe,WHo),e(nF,QHo),e(nF,TW),e(TW,UHo),e(nF,HHo),e(q,JHo),e(q,sF),e(sF,hbe),e(hbe,YHo),e(sF,KHo),e(sF,MW),e(MW,ZHo),e(sF,eJo),e(q,oJo),e(q,lF),e(lF,ube),e(ube,rJo),e(lF,tJo),e(lF,EW),e(EW,aJo),e(lF,nJo),e(q,sJo),e(q,iF),e(iF,pbe),e(pbe,lJo),e(iF,iJo),e(iF,CW),e(CW,dJo),e(iF,cJo),e(q,mJo),e(q,dF),e(dF,_be),e(_be,fJo),e(dF,gJo),e(dF,wW),e(wW,hJo),e(dF,uJo),e(q,pJo),e(q,cF),e(cF,bbe),e(bbe,_Jo),e(cF,bJo),e(cF,AW),e(AW,vJo),e(cF,FJo),e(q,TJo),e(q,mF),e(mF,vbe),e(vbe,MJo),e(mF,EJo),e(mF,LW),e(LW,CJo),e(mF,wJo),e(q,AJo),e(q,fF),e(fF,Fbe),e(Fbe,LJo),e(fF,yJo),e(fF,yW),e(yW,xJo),e(fF,$Jo),e(q,kJo),e(q,gF),e(gF,Tbe),e(Tbe,SJo),e(gF,RJo),e(gF,xW),e(xW,PJo),e(gF,BJo),e(q,IJo),e(q,hF),e(hF,Mbe),e(Mbe,NJo),e(hF,qJo),e(hF,$W),e($W,jJo),e(hF,DJo),e(q,GJo),e(q,uF),e(uF,Ebe),e(Ebe,OJo),e(uF,VJo),e(uF,kW),e(kW,XJo),e(uF,zJo),e(q,WJo),e(q,pF),e(pF,Cbe),e(Cbe,QJo),e(pF,UJo),e(pF,SW),e(SW,HJo),e(pF,JJo),e(q,YJo),e(q,_F),e(_F,wbe),e(wbe,KJo),e(_F,ZJo),e(_F,RW),e(RW,eYo),e(_F,oYo),e(q,rYo),e(q,bF),e(bF,Abe),e(Abe,tYo),e(bF,aYo),e(bF,PW),e(PW,nYo),e(bF,sYo),e(q,lYo),e(q,vF),e(vF,Lbe),e(Lbe,iYo),e(vF,dYo),e(vF,BW),e(BW,cYo),e(vF,mYo),e(q,fYo),e(q,FF),e(FF,ybe),e(ybe,gYo),e(FF,hYo),e(FF,IW),e(IW,uYo),e(FF,pYo),e(q,_Yo),e(q,TF),e(TF,xbe),e(xbe,bYo),e(TF,vYo),e(TF,NW),e(NW,FYo),e(TF,TYo),e(q,MYo),e(q,MF),e(MF,$be),e($be,EYo),e(MF,CYo),e(MF,qW),e(qW,wYo),e(MF,AYo),e(q,LYo),e(q,EF),e(EF,kbe),e(kbe,yYo),e(EF,xYo),e(EF,jW),e(jW,$Yo),e(EF,kYo),e(q,SYo),e(q,CF),e(CF,Sbe),e(Sbe,RYo),e(CF,PYo),e(CF,DW),e(DW,BYo),e(CF,IYo),e(q,NYo),e(q,wF),e(wF,Rbe),e(Rbe,qYo),e(wF,jYo),e(wF,GW),e(GW,DYo),e(wF,GYo),e(ro,OYo),e(ro,AF),e(AF,VYo),e(AF,Pbe),e(Pbe,XYo),e(AF,zYo),e(AF,Bbe),e(Bbe,WYo),e(ro,QYo),M(LF,ro,null),b(m,BUe,_),b(m,Fd,_),e(Fd,yF),e(yF,Ibe),M(T9,Ibe,null),e(Fd,UYo),e(Fd,Nbe),e(Nbe,HYo),b(m,IUe,_),b(m,qo,_),M(M9,qo,null),e(qo,JYo),e(qo,Td),e(Td,YYo),e(Td,OW),e(OW,KYo),e(Td,ZYo),e(Td,VW),e(VW,eKo),e(Td,oKo),e(qo,rKo),e(qo,E9),e(E9,tKo),e(E9,qbe),e(qbe,aKo),e(E9,nKo),e(qo,sKo),e(qo,bt),M(C9,bt,null),e(bt,lKo),e(bt,jbe),e(jbe,iKo),e(bt,dKo),e(bt,Md),e(Md,cKo),e(Md,Dbe),e(Dbe,mKo),e(Md,fKo),e(Md,XW),e(XW,gKo),e(Md,hKo),e(bt,uKo),M(xF,bt,null),e(qo,pKo),e(qo,to),M(w9,to,null),e(to,_Ko),e(to,Gbe),e(Gbe,bKo),e(to,vKo),e(to,Ha),e(Ha,FKo),e(Ha,Obe),e(Obe,TKo),e(Ha,MKo),e(Ha,Vbe),e(Vbe,EKo),e(Ha,CKo),e(Ha,Xbe),e(Xbe,wKo),e(Ha,AKo),e(to,LKo),e(to,Z),e(Z,$F),e($F,zbe),e(zbe,yKo),e($F,xKo),e($F,zW),e(zW,$Ko),e($F,kKo),e(Z,SKo),e(Z,kF),e(kF,Wbe),e(Wbe,RKo),e(kF,PKo),e(kF,WW),e(WW,BKo),e(kF,IKo),e(Z,NKo),e(Z,SF),e(SF,Qbe),e(Qbe,qKo),e(SF,jKo),e(SF,QW),e(QW,DKo),e(SF,GKo),e(Z,OKo),e(Z,RF),e(RF,Ube),e(Ube,VKo),e(RF,XKo),e(RF,UW),e(UW,zKo),e(RF,WKo),e(Z,QKo),e(Z,PF),e(PF,Hbe),e(Hbe,UKo),e(PF,HKo),e(PF,HW),e(HW,JKo),e(PF,YKo),e(Z,KKo),e(Z,BF),e(BF,Jbe),e(Jbe,ZKo),e(BF,eZo),e(BF,JW),e(JW,oZo),e(BF,rZo),e(Z,tZo),e(Z,IF),e(IF,Ybe),e(Ybe,aZo),e(IF,nZo),e(IF,YW),e(YW,sZo),e(IF,lZo),e(Z,iZo),e(Z,NF),e(NF,Kbe),e(Kbe,dZo),e(NF,cZo),e(NF,KW),e(KW,mZo),e(NF,fZo),e(Z,gZo),e(Z,qF),e(qF,Zbe),e(Zbe,hZo),e(qF,uZo),e(qF,ZW),e(ZW,pZo),e(qF,_Zo),e(Z,bZo),e(Z,jF),e(jF,eve),e(eve,vZo),e(jF,FZo),e(jF,eQ),e(eQ,TZo),e(jF,MZo),e(Z,EZo),e(Z,DF),e(DF,ove),e(ove,CZo),e(DF,wZo),e(DF,oQ),e(oQ,AZo),e(DF,LZo),e(Z,yZo),e(Z,GF),e(GF,rve),e(rve,xZo),e(GF,$Zo),e(GF,rQ),e(rQ,kZo),e(GF,SZo),e(Z,RZo),e(Z,OF),e(OF,tve),e(tve,PZo),e(OF,BZo),e(OF,tQ),e(tQ,IZo),e(OF,NZo),e(Z,qZo),e(Z,VF),e(VF,ave),e(ave,jZo),e(VF,DZo),e(VF,aQ),e(aQ,GZo),e(VF,OZo),e(Z,VZo),e(Z,XF),e(XF,nve),e(nve,XZo),e(XF,zZo),e(XF,nQ),e(nQ,WZo),e(XF,QZo),e(Z,UZo),e(Z,zF),e(zF,sve),e(sve,HZo),e(zF,JZo),e(zF,sQ),e(sQ,YZo),e(zF,KZo),e(Z,ZZo),e(Z,WF),e(WF,lve),e(lve,eer),e(WF,oer),e(WF,lQ),e(lQ,rer),e(WF,ter),e(Z,aer),e(Z,QF),e(QF,ive),e(ive,ner),e(QF,ser),e(QF,iQ),e(iQ,ler),e(QF,ier),e(Z,der),e(Z,UF),e(UF,dve),e(dve,cer),e(UF,mer),e(UF,dQ),e(dQ,fer),e(UF,ger),e(Z,her),e(Z,HF),e(HF,cve),e(cve,uer),e(HF,per),e(HF,cQ),e(cQ,_er),e(HF,ber),e(Z,ver),e(Z,JF),e(JF,mve),e(mve,Fer),e(JF,Ter),e(JF,mQ),e(mQ,Mer),e(JF,Eer),e(Z,Cer),e(Z,YF),e(YF,fve),e(fve,wer),e(YF,Aer),e(YF,fQ),e(fQ,Ler),e(YF,yer),e(Z,xer),e(Z,KF),e(KF,gve),e(gve,$er),e(KF,ker),e(KF,gQ),e(gQ,Ser),e(KF,Rer),e(Z,Per),e(Z,ZF),e(ZF,hve),e(hve,Ber),e(ZF,Ier),e(ZF,hQ),e(hQ,Ner),e(ZF,qer),e(Z,jer),e(Z,eT),e(eT,uve),e(uve,Der),e(eT,Ger),e(eT,uQ),e(uQ,Oer),e(eT,Ver),e(Z,Xer),e(Z,oT),e(oT,pve),e(pve,zer),e(oT,Wer),e(oT,pQ),e(pQ,Qer),e(oT,Uer),e(Z,Her),e(Z,rT),e(rT,_ve),e(_ve,Jer),e(rT,Yer),e(rT,_Q),e(_Q,Ker),e(rT,Zer),e(Z,eor),e(Z,tT),e(tT,bve),e(bve,oor),e(tT,ror),e(tT,bQ),e(bQ,tor),e(tT,aor),e(Z,nor),e(Z,aT),e(aT,vve),e(vve,sor),e(aT,lor),e(aT,vQ),e(vQ,ior),e(aT,dor),e(Z,cor),e(Z,nT),e(nT,Fve),e(Fve,mor),e(nT,gor),e(nT,FQ),e(FQ,hor),e(nT,uor),e(Z,por),e(Z,sT),e(sT,Tve),e(Tve,_or),e(sT,bor),e(sT,TQ),e(TQ,vor),e(sT,For),e(to,Tor),e(to,lT),e(lT,Mor),e(lT,Mve),e(Mve,Eor),e(lT,Cor),e(lT,Eve),e(Eve,wor),e(to,Aor),M(iT,to,null),b(m,NUe,_),b(m,Ed,_),e(Ed,dT),e(dT,Cve),M(A9,Cve,null),e(Ed,Lor),e(Ed,wve),e(wve,yor),b(m,qUe,_),b(m,jo,_),M(L9,jo,null),e(jo,xor),e(jo,Cd),e(Cd,$or),e(Cd,MQ),e(MQ,kor),e(Cd,Sor),e(Cd,EQ),e(EQ,Ror),e(Cd,Por),e(jo,Bor),e(jo,y9),e(y9,Ior),e(y9,Ave),e(Ave,Nor),e(y9,qor),e(jo,jor),e(jo,vt),M(x9,vt,null),e(vt,Dor),e(vt,Lve),e(Lve,Gor),e(vt,Oor),e(vt,wd),e(wd,Vor),e(wd,yve),e(yve,Xor),e(wd,zor),e(wd,CQ),e(CQ,Wor),e(wd,Qor),e(vt,Uor),M(cT,vt,null),e(jo,Hor),e(jo,ao),M($9,ao,null),e(ao,Jor),e(ao,xve),e(xve,Yor),e(ao,Kor),e(ao,Ja),e(Ja,Zor),e(Ja,$ve),e($ve,err),e(Ja,orr),e(Ja,kve),e(kve,rrr),e(Ja,trr),e(Ja,Sve),e(Sve,arr),e(Ja,nrr),e(ao,srr),e(ao,Do),e(Do,mT),e(mT,Rve),e(Rve,lrr),e(mT,irr),e(mT,wQ),e(wQ,drr),e(mT,crr),e(Do,mrr),e(Do,fT),e(fT,Pve),e(Pve,frr),e(fT,grr),e(fT,AQ),e(AQ,hrr),e(fT,urr),e(Do,prr),e(Do,gT),e(gT,Bve),e(Bve,_rr),e(gT,brr),e(gT,LQ),e(LQ,vrr),e(gT,Frr),e(Do,Trr),e(Do,hT),e(hT,Ive),e(Ive,Mrr),e(hT,Err),e(hT,yQ),e(yQ,Crr),e(hT,wrr),e(Do,Arr),e(Do,uT),e(uT,Nve),e(Nve,Lrr),e(uT,yrr),e(uT,xQ),e(xQ,xrr),e(uT,$rr),e(Do,krr),e(Do,pT),e(pT,qve),e(qve,Srr),e(pT,Rrr),e(pT,$Q),e($Q,Prr),e(pT,Brr),e(ao,Irr),e(ao,_T),e(_T,Nrr),e(_T,jve),e(jve,qrr),e(_T,jrr),e(_T,Dve),e(Dve,Drr),e(ao,Grr),M(bT,ao,null),b(m,jUe,_),b(m,Ad,_),e(Ad,vT),e(vT,Gve),M(k9,Gve,null),e(Ad,Orr),e(Ad,Ove),e(Ove,Vrr),b(m,DUe,_),b(m,Go,_),M(S9,Go,null),e(Go,Xrr),e(Go,Ld),e(Ld,zrr),e(Ld,kQ),e(kQ,Wrr),e(Ld,Qrr),e(Ld,SQ),e(SQ,Urr),e(Ld,Hrr),e(Go,Jrr),e(Go,R9),e(R9,Yrr),e(R9,Vve),e(Vve,Krr),e(R9,Zrr),e(Go,etr),e(Go,Ft),M(P9,Ft,null),e(Ft,otr),e(Ft,Xve),e(Xve,rtr),e(Ft,ttr),e(Ft,yd),e(yd,atr),e(yd,zve),e(zve,ntr),e(yd,str),e(yd,RQ),e(RQ,ltr),e(yd,itr),e(Ft,dtr),M(FT,Ft,null),e(Go,ctr),e(Go,no),M(B9,no,null),e(no,mtr),e(no,Wve),e(Wve,ftr),e(no,gtr),e(no,Ya),e(Ya,htr),e(Ya,Qve),e(Qve,utr),e(Ya,ptr),e(Ya,Uve),e(Uve,_tr),e(Ya,btr),e(Ya,Hve),e(Hve,vtr),e(Ya,Ftr),e(no,Ttr),e(no,H),e(H,TT),e(TT,Jve),e(Jve,Mtr),e(TT,Etr),e(TT,PQ),e(PQ,Ctr),e(TT,wtr),e(H,Atr),e(H,MT),e(MT,Yve),e(Yve,Ltr),e(MT,ytr),e(MT,BQ),e(BQ,xtr),e(MT,$tr),e(H,ktr),e(H,ET),e(ET,Kve),e(Kve,Str),e(ET,Rtr),e(ET,IQ),e(IQ,Ptr),e(ET,Btr),e(H,Itr),e(H,CT),e(CT,Zve),e(Zve,Ntr),e(CT,qtr),e(CT,NQ),e(NQ,jtr),e(CT,Dtr),e(H,Gtr),e(H,wT),e(wT,e1e),e(e1e,Otr),e(wT,Vtr),e(wT,qQ),e(qQ,Xtr),e(wT,ztr),e(H,Wtr),e(H,AT),e(AT,o1e),e(o1e,Qtr),e(AT,Utr),e(AT,jQ),e(jQ,Htr),e(AT,Jtr),e(H,Ytr),e(H,LT),e(LT,r1e),e(r1e,Ktr),e(LT,Ztr),e(LT,DQ),e(DQ,ear),e(LT,oar),e(H,rar),e(H,yT),e(yT,t1e),e(t1e,tar),e(yT,aar),e(yT,GQ),e(GQ,nar),e(yT,sar),e(H,lar),e(H,xT),e(xT,a1e),e(a1e,iar),e(xT,dar),e(xT,OQ),e(OQ,car),e(xT,mar),e(H,far),e(H,$T),e($T,n1e),e(n1e,gar),e($T,har),e($T,VQ),e(VQ,uar),e($T,par),e(H,_ar),e(H,kT),e(kT,s1e),e(s1e,bar),e(kT,Far),e(kT,XQ),e(XQ,Tar),e(kT,Mar),e(H,Ear),e(H,ST),e(ST,l1e),e(l1e,Car),e(ST,war),e(ST,zQ),e(zQ,Aar),e(ST,Lar),e(H,yar),e(H,RT),e(RT,i1e),e(i1e,xar),e(RT,$ar),e(RT,WQ),e(WQ,kar),e(RT,Sar),e(H,Rar),e(H,PT),e(PT,d1e),e(d1e,Par),e(PT,Bar),e(PT,QQ),e(QQ,Iar),e(PT,Nar),e(H,qar),e(H,BT),e(BT,c1e),e(c1e,jar),e(BT,Dar),e(BT,UQ),e(UQ,Gar),e(BT,Oar),e(H,Var),e(H,IT),e(IT,m1e),e(m1e,Xar),e(IT,zar),e(IT,HQ),e(HQ,War),e(IT,Qar),e(H,Uar),e(H,NT),e(NT,f1e),e(f1e,Har),e(NT,Jar),e(NT,JQ),e(JQ,Yar),e(NT,Kar),e(H,Zar),e(H,qT),e(qT,g1e),e(g1e,enr),e(qT,onr),e(qT,YQ),e(YQ,rnr),e(qT,tnr),e(H,anr),e(H,jT),e(jT,h1e),e(h1e,nnr),e(jT,snr),e(jT,KQ),e(KQ,lnr),e(jT,inr),e(H,dnr),e(H,DT),e(DT,u1e),e(u1e,cnr),e(DT,mnr),e(DT,ZQ),e(ZQ,fnr),e(DT,gnr),e(H,hnr),e(H,GT),e(GT,p1e),e(p1e,unr),e(GT,pnr),e(GT,eU),e(eU,_nr),e(GT,bnr),e(H,vnr),e(H,OT),e(OT,_1e),e(_1e,Fnr),e(OT,Tnr),e(OT,oU),e(oU,Mnr),e(OT,Enr),e(H,Cnr),e(H,VT),e(VT,b1e),e(b1e,wnr),e(VT,Anr),e(VT,rU),e(rU,Lnr),e(VT,ynr),e(H,xnr),e(H,XT),e(XT,v1e),e(v1e,$nr),e(XT,knr),e(XT,tU),e(tU,Snr),e(XT,Rnr),e(H,Pnr),e(H,zT),e(zT,F1e),e(F1e,Bnr),e(zT,Inr),e(zT,aU),e(aU,Nnr),e(zT,qnr),e(H,jnr),e(H,WT),e(WT,T1e),e(T1e,Dnr),e(WT,Gnr),e(WT,nU),e(nU,Onr),e(WT,Vnr),e(H,Xnr),e(H,QT),e(QT,M1e),e(M1e,znr),e(QT,Wnr),e(QT,sU),e(sU,Qnr),e(QT,Unr),e(H,Hnr),e(H,UT),e(UT,E1e),e(E1e,Jnr),e(UT,Ynr),e(UT,lU),e(lU,Knr),e(UT,Znr),e(H,esr),e(H,HT),e(HT,C1e),e(C1e,osr),e(HT,rsr),e(HT,iU),e(iU,tsr),e(HT,asr),e(H,nsr),e(H,JT),e(JT,w1e),e(w1e,ssr),e(JT,lsr),e(JT,dU),e(dU,isr),e(JT,dsr),e(H,csr),e(H,YT),e(YT,A1e),e(A1e,msr),e(YT,fsr),e(YT,cU),e(cU,gsr),e(YT,hsr),e(H,usr),e(H,KT),e(KT,L1e),e(L1e,psr),e(KT,_sr),e(KT,mU),e(mU,bsr),e(KT,vsr),e(H,Fsr),e(H,ZT),e(ZT,y1e),e(y1e,Tsr),e(ZT,Msr),e(ZT,fU),e(fU,Esr),e(ZT,Csr),e(H,wsr),e(H,eM),e(eM,x1e),e(x1e,Asr),e(eM,Lsr),e(eM,gU),e(gU,ysr),e(eM,xsr),e(H,$sr),e(H,oM),e(oM,$1e),e($1e,ksr),e(oM,Ssr),e(oM,hU),e(hU,Rsr),e(oM,Psr),e(H,Bsr),e(H,rM),e(rM,k1e),e(k1e,Isr),e(rM,Nsr),e(rM,uU),e(uU,qsr),e(rM,jsr),e(H,Dsr),e(H,tM),e(tM,S1e),e(S1e,Gsr),e(tM,Osr),e(tM,pU),e(pU,Vsr),e(tM,Xsr),e(no,zsr),e(no,aM),e(aM,Wsr),e(aM,R1e),e(R1e,Qsr),e(aM,Usr),e(aM,P1e),e(P1e,Hsr),e(no,Jsr),M(nM,no,null),b(m,GUe,_),b(m,xd,_),e(xd,sM),e(sM,B1e),M(I9,B1e,null),e(xd,Ysr),e(xd,I1e),e(I1e,Ksr),b(m,OUe,_),b(m,Oo,_),M(N9,Oo,null),e(Oo,Zsr),e(Oo,$d),e($d,elr),e($d,_U),e(_U,olr),e($d,rlr),e($d,bU),e(bU,tlr),e($d,alr),e(Oo,nlr),e(Oo,q9),e(q9,slr),e(q9,N1e),e(N1e,llr),e(q9,ilr),e(Oo,dlr),e(Oo,Tt),M(j9,Tt,null),e(Tt,clr),e(Tt,q1e),e(q1e,mlr),e(Tt,flr),e(Tt,kd),e(kd,glr),e(kd,j1e),e(j1e,hlr),e(kd,ulr),e(kd,vU),e(vU,plr),e(kd,_lr),e(Tt,blr),M(lM,Tt,null),e(Oo,vlr),e(Oo,so),M(D9,so,null),e(so,Flr),e(so,D1e),e(D1e,Tlr),e(so,Mlr),e(so,Ka),e(Ka,Elr),e(Ka,G1e),e(G1e,Clr),e(Ka,wlr),e(Ka,O1e),e(O1e,Alr),e(Ka,Llr),e(Ka,V1e),e(V1e,ylr),e(Ka,xlr),e(so,$lr),e(so,V),e(V,iM),e(iM,X1e),e(X1e,klr),e(iM,Slr),e(iM,FU),e(FU,Rlr),e(iM,Plr),e(V,Blr),e(V,dM),e(dM,z1e),e(z1e,Ilr),e(dM,Nlr),e(dM,TU),e(TU,qlr),e(dM,jlr),e(V,Dlr),e(V,cM),e(cM,W1e),e(W1e,Glr),e(cM,Olr),e(cM,MU),e(MU,Vlr),e(cM,Xlr),e(V,zlr),e(V,mM),e(mM,Q1e),e(Q1e,Wlr),e(mM,Qlr),e(mM,EU),e(EU,Ulr),e(mM,Hlr),e(V,Jlr),e(V,fM),e(fM,U1e),e(U1e,Ylr),e(fM,Klr),e(fM,CU),e(CU,Zlr),e(fM,eir),e(V,oir),e(V,gM),e(gM,H1e),e(H1e,rir),e(gM,tir),e(gM,wU),e(wU,air),e(gM,nir),e(V,sir),e(V,hM),e(hM,J1e),e(J1e,lir),e(hM,iir),e(hM,AU),e(AU,dir),e(hM,cir),e(V,mir),e(V,uM),e(uM,Y1e),e(Y1e,fir),e(uM,gir),e(uM,LU),e(LU,hir),e(uM,uir),e(V,pir),e(V,pM),e(pM,K1e),e(K1e,_ir),e(pM,bir),e(pM,yU),e(yU,vir),e(pM,Fir),e(V,Tir),e(V,_M),e(_M,Z1e),e(Z1e,Mir),e(_M,Eir),e(_M,xU),e(xU,Cir),e(_M,wir),e(V,Air),e(V,bM),e(bM,eFe),e(eFe,Lir),e(bM,yir),e(bM,$U),e($U,xir),e(bM,$ir),e(V,kir),e(V,vM),e(vM,oFe),e(oFe,Sir),e(vM,Rir),e(vM,kU),e(kU,Pir),e(vM,Bir),e(V,Iir),e(V,FM),e(FM,rFe),e(rFe,Nir),e(FM,qir),e(FM,SU),e(SU,jir),e(FM,Dir),e(V,Gir),e(V,TM),e(TM,tFe),e(tFe,Oir),e(TM,Vir),e(TM,RU),e(RU,Xir),e(TM,zir),e(V,Wir),e(V,MM),e(MM,aFe),e(aFe,Qir),e(MM,Uir),e(MM,PU),e(PU,Hir),e(MM,Jir),e(V,Yir),e(V,EM),e(EM,nFe),e(nFe,Kir),e(EM,Zir),e(EM,BU),e(BU,edr),e(EM,odr),e(V,rdr),e(V,CM),e(CM,sFe),e(sFe,tdr),e(CM,adr),e(CM,IU),e(IU,ndr),e(CM,sdr),e(V,ldr),e(V,wM),e(wM,lFe),e(lFe,idr),e(wM,ddr),e(wM,NU),e(NU,cdr),e(wM,mdr),e(V,fdr),e(V,AM),e(AM,iFe),e(iFe,gdr),e(AM,hdr),e(AM,qU),e(qU,udr),e(AM,pdr),e(V,_dr),e(V,LM),e(LM,dFe),e(dFe,bdr),e(LM,vdr),e(LM,jU),e(jU,Fdr),e(LM,Tdr),e(V,Mdr),e(V,yM),e(yM,cFe),e(cFe,Edr),e(yM,Cdr),e(yM,DU),e(DU,wdr),e(yM,Adr),e(V,Ldr),e(V,xM),e(xM,mFe),e(mFe,ydr),e(xM,xdr),e(xM,GU),e(GU,$dr),e(xM,kdr),e(V,Sdr),e(V,$M),e($M,fFe),e(fFe,Rdr),e($M,Pdr),e($M,OU),e(OU,Bdr),e($M,Idr),e(V,Ndr),e(V,kM),e(kM,gFe),e(gFe,qdr),e(kM,jdr),e(kM,VU),e(VU,Ddr),e(kM,Gdr),e(V,Odr),e(V,SM),e(SM,hFe),e(hFe,Vdr),e(SM,Xdr),e(SM,XU),e(XU,zdr),e(SM,Wdr),e(V,Qdr),e(V,RM),e(RM,uFe),e(uFe,Udr),e(RM,Hdr),e(RM,zU),e(zU,Jdr),e(RM,Ydr),e(V,Kdr),e(V,PM),e(PM,pFe),e(pFe,Zdr),e(PM,ecr),e(PM,WU),e(WU,ocr),e(PM,rcr),e(V,tcr),e(V,BM),e(BM,_Fe),e(_Fe,acr),e(BM,ncr),e(BM,QU),e(QU,scr),e(BM,lcr),e(V,icr),e(V,IM),e(IM,bFe),e(bFe,dcr),e(IM,ccr),e(IM,UU),e(UU,mcr),e(IM,fcr),e(V,gcr),e(V,NM),e(NM,vFe),e(vFe,hcr),e(NM,ucr),e(NM,HU),e(HU,pcr),e(NM,_cr),e(V,bcr),e(V,qM),e(qM,FFe),e(FFe,vcr),e(qM,Fcr),e(qM,JU),e(JU,Tcr),e(qM,Mcr),e(V,Ecr),e(V,jM),e(jM,TFe),e(TFe,Ccr),e(jM,wcr),e(jM,YU),e(YU,Acr),e(jM,Lcr),e(V,ycr),e(V,DM),e(DM,MFe),e(MFe,xcr),e(DM,$cr),e(DM,KU),e(KU,kcr),e(DM,Scr),e(V,Rcr),e(V,GM),e(GM,EFe),e(EFe,Pcr),e(GM,Bcr),e(GM,ZU),e(ZU,Icr),e(GM,Ncr),e(V,qcr),e(V,OM),e(OM,CFe),e(CFe,jcr),e(OM,Dcr),e(OM,eH),e(eH,Gcr),e(OM,Ocr),e(V,Vcr),e(V,VM),e(VM,wFe),e(wFe,Xcr),e(VM,zcr),e(VM,oH),e(oH,Wcr),e(VM,Qcr),e(V,Ucr),e(V,XM),e(XM,AFe),e(AFe,Hcr),e(XM,Jcr),e(XM,rH),e(rH,Ycr),e(XM,Kcr),e(V,Zcr),e(V,zM),e(zM,LFe),e(LFe,emr),e(zM,omr),e(zM,tH),e(tH,rmr),e(zM,tmr),e(V,amr),e(V,WM),e(WM,yFe),e(yFe,nmr),e(WM,smr),e(WM,aH),e(aH,lmr),e(WM,imr),e(V,dmr),e(V,QM),e(QM,xFe),e(xFe,cmr),e(QM,mmr),e(QM,nH),e(nH,fmr),e(QM,gmr),e(V,hmr),e(V,UM),e(UM,$Fe),e($Fe,umr),e(UM,pmr),e(UM,sH),e(sH,_mr),e(UM,bmr),e(V,vmr),e(V,HM),e(HM,kFe),e(kFe,Fmr),e(HM,Tmr),e(HM,lH),e(lH,Mmr),e(HM,Emr),e(V,Cmr),e(V,JM),e(JM,SFe),e(SFe,wmr),e(JM,Amr),e(JM,iH),e(iH,Lmr),e(JM,ymr),e(so,xmr),e(so,YM),e(YM,$mr),e(YM,RFe),e(RFe,kmr),e(YM,Smr),e(YM,PFe),e(PFe,Rmr),e(so,Pmr),M(KM,so,null),b(m,VUe,_),b(m,Sd,_),e(Sd,ZM),e(ZM,BFe),M(G9,BFe,null),e(Sd,Bmr),e(Sd,IFe),e(IFe,Imr),b(m,XUe,_),b(m,Vo,_),M(O9,Vo,null),e(Vo,Nmr),e(Vo,Rd),e(Rd,qmr),e(Rd,dH),e(dH,jmr),e(Rd,Dmr),e(Rd,cH),e(cH,Gmr),e(Rd,Omr),e(Vo,Vmr),e(Vo,V9),e(V9,Xmr),e(V9,NFe),e(NFe,zmr),e(V9,Wmr),e(Vo,Qmr),e(Vo,Mt),M(X9,Mt,null),e(Mt,Umr),e(Mt,qFe),e(qFe,Hmr),e(Mt,Jmr),e(Mt,Pd),e(Pd,Ymr),e(Pd,jFe),e(jFe,Kmr),e(Pd,Zmr),e(Pd,mH),e(mH,efr),e(Pd,ofr),e(Mt,rfr),M(eE,Mt,null),e(Vo,tfr),e(Vo,lo),M(z9,lo,null),e(lo,afr),e(lo,DFe),e(DFe,nfr),e(lo,sfr),e(lo,Za),e(Za,lfr),e(Za,GFe),e(GFe,ifr),e(Za,dfr),e(Za,OFe),e(OFe,cfr),e(Za,mfr),e(Za,VFe),e(VFe,ffr),e(Za,gfr),e(lo,hfr),e(lo,XFe),e(XFe,oE),e(oE,zFe),e(zFe,ufr),e(oE,pfr),e(oE,fH),e(fH,_fr),e(oE,bfr),e(lo,vfr),e(lo,rE),e(rE,Ffr),e(rE,WFe),e(WFe,Tfr),e(rE,Mfr),e(rE,QFe),e(QFe,Efr),e(lo,Cfr),M(tE,lo,null),b(m,zUe,_),b(m,Bd,_),e(Bd,aE),e(aE,UFe),M(W9,UFe,null),e(Bd,wfr),e(Bd,HFe),e(HFe,Afr),b(m,WUe,_),b(m,Xo,_),M(Q9,Xo,null),e(Xo,Lfr),e(Xo,Id),e(Id,yfr),e(Id,gH),e(gH,xfr),e(Id,$fr),e(Id,hH),e(hH,kfr),e(Id,Sfr),e(Xo,Rfr),e(Xo,U9),e(U9,Pfr),e(U9,JFe),e(JFe,Bfr),e(U9,Ifr),e(Xo,Nfr),e(Xo,Et),M(H9,Et,null),e(Et,qfr),e(Et,YFe),e(YFe,jfr),e(Et,Dfr),e(Et,Nd),e(Nd,Gfr),e(Nd,KFe),e(KFe,Ofr),e(Nd,Vfr),e(Nd,uH),e(uH,Xfr),e(Nd,zfr),e(Et,Wfr),M(nE,Et,null),e(Xo,Qfr),e(Xo,io),M(J9,io,null),e(io,Ufr),e(io,ZFe),e(ZFe,Hfr),e(io,Jfr),e(io,en),e(en,Yfr),e(en,eTe),e(eTe,Kfr),e(en,Zfr),e(en,oTe),e(oTe,egr),e(en,ogr),e(en,rTe),e(rTe,rgr),e(en,tgr),e(io,agr),e(io,be),e(be,sE),e(sE,tTe),e(tTe,ngr),e(sE,sgr),e(sE,pH),e(pH,lgr),e(sE,igr),e(be,dgr),e(be,lE),e(lE,aTe),e(aTe,cgr),e(lE,mgr),e(lE,_H),e(_H,fgr),e(lE,ggr),e(be,hgr),e(be,iE),e(iE,nTe),e(nTe,ugr),e(iE,pgr),e(iE,bH),e(bH,_gr),e(iE,bgr),e(be,vgr),e(be,dE),e(dE,sTe),e(sTe,Fgr),e(dE,Tgr),e(dE,vH),e(vH,Mgr),e(dE,Egr),e(be,Cgr),e(be,sl),e(sl,lTe),e(lTe,wgr),e(sl,Agr),e(sl,FH),e(FH,Lgr),e(sl,ygr),e(sl,TH),e(TH,xgr),e(sl,$gr),e(be,kgr),e(be,cE),e(cE,iTe),e(iTe,Sgr),e(cE,Rgr),e(cE,MH),e(MH,Pgr),e(cE,Bgr),e(be,Igr),e(be,ll),e(ll,dTe),e(dTe,Ngr),e(ll,qgr),e(ll,EH),e(EH,jgr),e(ll,Dgr),e(ll,CH),e(CH,Ggr),e(ll,Ogr),e(be,Vgr),e(be,mE),e(mE,cTe),e(cTe,Xgr),e(mE,zgr),e(mE,wH),e(wH,Wgr),e(mE,Qgr),e(be,Ugr),e(be,Ct),e(Ct,mTe),e(mTe,Hgr),e(Ct,Jgr),e(Ct,AH),e(AH,Ygr),e(Ct,Kgr),e(Ct,LH),e(LH,Zgr),e(Ct,ehr),e(Ct,yH),e(yH,ohr),e(Ct,rhr),e(be,thr),e(be,fE),e(fE,fTe),e(fTe,ahr),e(fE,nhr),e(fE,xH),e(xH,shr),e(fE,lhr),e(be,ihr),e(be,gE),e(gE,gTe),e(gTe,dhr),e(gE,chr),e(gE,$H),e($H,mhr),e(gE,fhr),e(be,ghr),e(be,hE),e(hE,hTe),e(hTe,hhr),e(hE,uhr),e(hE,kH),e(kH,phr),e(hE,_hr),e(be,bhr),e(be,uE),e(uE,uTe),e(uTe,vhr),e(uE,Fhr),e(uE,SH),e(SH,Thr),e(uE,Mhr),e(be,Ehr),e(be,pE),e(pE,pTe),e(pTe,Chr),e(pE,whr),e(pE,RH),e(RH,Ahr),e(pE,Lhr),e(be,yhr),e(be,_E),e(_E,_Te),e(_Te,xhr),e(_E,$hr),e(_E,PH),e(PH,khr),e(_E,Shr),e(be,Rhr),e(be,bE),e(bE,bTe),e(bTe,Phr),e(bE,Bhr),e(bE,BH),e(BH,Ihr),e(bE,Nhr),e(be,qhr),e(be,vE),e(vE,vTe),e(vTe,jhr),e(vE,Dhr),e(vE,IH),e(IH,Ghr),e(vE,Ohr),e(io,Vhr),e(io,FE),e(FE,Xhr),e(FE,FTe),e(FTe,zhr),e(FE,Whr),e(FE,TTe),e(TTe,Qhr),e(io,Uhr),M(TE,io,null),b(m,QUe,_),b(m,qd,_),e(qd,ME),e(ME,MTe),M(Y9,MTe,null),e(qd,Hhr),e(qd,ETe),e(ETe,Jhr),b(m,UUe,_),b(m,zo,_),M(K9,zo,null),e(zo,Yhr),e(zo,jd),e(jd,Khr),e(jd,NH),e(NH,Zhr),e(jd,eur),e(jd,qH),e(qH,our),e(jd,rur),e(zo,tur),e(zo,Z9),e(Z9,aur),e(Z9,CTe),e(CTe,nur),e(Z9,sur),e(zo,lur),e(zo,wt),M(ex,wt,null),e(wt,iur),e(wt,wTe),e(wTe,dur),e(wt,cur),e(wt,Dd),e(Dd,mur),e(Dd,ATe),e(ATe,fur),e(Dd,gur),e(Dd,jH),e(jH,hur),e(Dd,uur),e(wt,pur),M(EE,wt,null),e(zo,_ur),e(zo,co),M(ox,co,null),e(co,bur),e(co,LTe),e(LTe,vur),e(co,Fur),e(co,on),e(on,Tur),e(on,yTe),e(yTe,Mur),e(on,Eur),e(on,xTe),e(xTe,Cur),e(on,wur),e(on,$Te),e($Te,Aur),e(on,Lur),e(co,yur),e(co,kTe),e(kTe,CE),e(CE,STe),e(STe,xur),e(CE,$ur),e(CE,DH),e(DH,kur),e(CE,Sur),e(co,Rur),e(co,wE),e(wE,Pur),e(wE,RTe),e(RTe,Bur),e(wE,Iur),e(wE,PTe),e(PTe,Nur),e(co,qur),M(AE,co,null),b(m,HUe,_),b(m,Gd,_),e(Gd,LE),e(LE,BTe),M(rx,BTe,null),e(Gd,jur),e(Gd,ITe),e(ITe,Dur),b(m,JUe,_),b(m,Wo,_),M(tx,Wo,null),e(Wo,Gur),e(Wo,Od),e(Od,Our),e(Od,GH),e(GH,Vur),e(Od,Xur),e(Od,OH),e(OH,zur),e(Od,Wur),e(Wo,Qur),e(Wo,ax),e(ax,Uur),e(ax,NTe),e(NTe,Hur),e(ax,Jur),e(Wo,Yur),e(Wo,At),M(nx,At,null),e(At,Kur),e(At,qTe),e(qTe,Zur),e(At,epr),e(At,Vd),e(Vd,opr),e(Vd,jTe),e(jTe,rpr),e(Vd,tpr),e(Vd,VH),e(VH,apr),e(Vd,npr),e(At,spr),M(yE,At,null),e(Wo,lpr),e(Wo,mo),M(sx,mo,null),e(mo,ipr),e(mo,DTe),e(DTe,dpr),e(mo,cpr),e(mo,rn),e(rn,mpr),e(rn,GTe),e(GTe,fpr),e(rn,gpr),e(rn,OTe),e(OTe,hpr),e(rn,upr),e(rn,VTe),e(VTe,ppr),e(rn,_pr),e(mo,bpr),e(mo,XTe),e(XTe,xE),e(xE,zTe),e(zTe,vpr),e(xE,Fpr),e(xE,XH),e(XH,Tpr),e(xE,Mpr),e(mo,Epr),e(mo,$E),e($E,Cpr),e($E,WTe),e(WTe,wpr),e($E,Apr),e($E,QTe),e(QTe,Lpr),e(mo,ypr),M(kE,mo,null),b(m,YUe,_),b(m,Xd,_),e(Xd,SE),e(SE,UTe),M(lx,UTe,null),e(Xd,xpr),e(Xd,HTe),e(HTe,$pr),b(m,KUe,_),b(m,Qo,_),M(ix,Qo,null),e(Qo,kpr),e(Qo,zd),e(zd,Spr),e(zd,zH),e(zH,Rpr),e(zd,Ppr),e(zd,WH),e(WH,Bpr),e(zd,Ipr),e(Qo,Npr),e(Qo,dx),e(dx,qpr),e(dx,JTe),e(JTe,jpr),e(dx,Dpr),e(Qo,Gpr),e(Qo,Lt),M(cx,Lt,null),e(Lt,Opr),e(Lt,YTe),e(YTe,Vpr),e(Lt,Xpr),e(Lt,Wd),e(Wd,zpr),e(Wd,KTe),e(KTe,Wpr),e(Wd,Qpr),e(Wd,QH),e(QH,Upr),e(Wd,Hpr),e(Lt,Jpr),M(RE,Lt,null),e(Qo,Ypr),e(Qo,fo),M(mx,fo,null),e(fo,Kpr),e(fo,ZTe),e(ZTe,Zpr),e(fo,e_r),e(fo,tn),e(tn,o_r),e(tn,eMe),e(eMe,r_r),e(tn,t_r),e(tn,oMe),e(oMe,a_r),e(tn,n_r),e(tn,rMe),e(rMe,s_r),e(tn,l_r),e(fo,i_r),e(fo,tMe),e(tMe,PE),e(PE,aMe),e(aMe,d_r),e(PE,c_r),e(PE,UH),e(UH,m_r),e(PE,f_r),e(fo,g_r),e(fo,BE),e(BE,h_r),e(BE,nMe),e(nMe,u_r),e(BE,p_r),e(BE,sMe),e(sMe,__r),e(fo,b_r),M(IE,fo,null),b(m,ZUe,_),b(m,Qd,_),e(Qd,NE),e(NE,lMe),M(fx,lMe,null),e(Qd,v_r),e(Qd,iMe),e(iMe,F_r),b(m,eHe,_),b(m,Uo,_),M(gx,Uo,null),e(Uo,T_r),e(Uo,Ud),e(Ud,M_r),e(Ud,HH),e(HH,E_r),e(Ud,C_r),e(Ud,JH),e(JH,w_r),e(Ud,A_r),e(Uo,L_r),e(Uo,hx),e(hx,y_r),e(hx,dMe),e(dMe,x_r),e(hx,$_r),e(Uo,k_r),e(Uo,yt),M(ux,yt,null),e(yt,S_r),e(yt,cMe),e(cMe,R_r),e(yt,P_r),e(yt,Hd),e(Hd,B_r),e(Hd,mMe),e(mMe,I_r),e(Hd,N_r),e(Hd,YH),e(YH,q_r),e(Hd,j_r),e(yt,D_r),M(qE,yt,null),e(Uo,G_r),e(Uo,go),M(px,go,null),e(go,O_r),e(go,fMe),e(fMe,V_r),e(go,X_r),e(go,an),e(an,z_r),e(an,gMe),e(gMe,W_r),e(an,Q_r),e(an,hMe),e(hMe,U_r),e(an,H_r),e(an,uMe),e(uMe,J_r),e(an,Y_r),e(go,K_r),e(go,Pe),e(Pe,jE),e(jE,pMe),e(pMe,Z_r),e(jE,e2r),e(jE,KH),e(KH,o2r),e(jE,r2r),e(Pe,t2r),e(Pe,DE),e(DE,_Me),e(_Me,a2r),e(DE,n2r),e(DE,ZH),e(ZH,s2r),e(DE,l2r),e(Pe,i2r),e(Pe,GE),e(GE,bMe),e(bMe,d2r),e(GE,c2r),e(GE,eJ),e(eJ,m2r),e(GE,f2r),e(Pe,g2r),e(Pe,OE),e(OE,vMe),e(vMe,h2r),e(OE,u2r),e(OE,oJ),e(oJ,p2r),e(OE,_2r),e(Pe,b2r),e(Pe,VE),e(VE,FMe),e(FMe,v2r),e(VE,F2r),e(VE,rJ),e(rJ,T2r),e(VE,M2r),e(Pe,E2r),e(Pe,XE),e(XE,TMe),e(TMe,C2r),e(XE,w2r),e(XE,tJ),e(tJ,A2r),e(XE,L2r),e(Pe,y2r),e(Pe,zE),e(zE,MMe),e(MMe,x2r),e(zE,$2r),e(zE,aJ),e(aJ,k2r),e(zE,S2r),e(Pe,R2r),e(Pe,WE),e(WE,EMe),e(EMe,P2r),e(WE,B2r),e(WE,nJ),e(nJ,I2r),e(WE,N2r),e(Pe,q2r),e(Pe,QE),e(QE,CMe),e(CMe,j2r),e(QE,D2r),e(QE,sJ),e(sJ,G2r),e(QE,O2r),e(go,V2r),e(go,UE),e(UE,X2r),e(UE,wMe),e(wMe,z2r),e(UE,W2r),e(UE,AMe),e(AMe,Q2r),e(go,U2r),M(HE,go,null),b(m,oHe,_),b(m,Jd,_),e(Jd,JE),e(JE,LMe),M(_x,LMe,null),e(Jd,H2r),e(Jd,yMe),e(yMe,J2r),b(m,rHe,_),b(m,Ho,_),M(bx,Ho,null),e(Ho,Y2r),e(Ho,Yd),e(Yd,K2r),e(Yd,lJ),e(lJ,Z2r),e(Yd,ebr),e(Yd,iJ),e(iJ,obr),e(Yd,rbr),e(Ho,tbr),e(Ho,vx),e(vx,abr),e(vx,xMe),e(xMe,nbr),e(vx,sbr),e(Ho,lbr),e(Ho,xt),M(Fx,xt,null),e(xt,ibr),e(xt,$Me),e($Me,dbr),e(xt,cbr),e(xt,Kd),e(Kd,mbr),e(Kd,kMe),e(kMe,fbr),e(Kd,gbr),e(Kd,dJ),e(dJ,hbr),e(Kd,ubr),e(xt,pbr),M(YE,xt,null),e(Ho,_br),e(Ho,ho),M(Tx,ho,null),e(ho,bbr),e(ho,SMe),e(SMe,vbr),e(ho,Fbr),e(ho,nn),e(nn,Tbr),e(nn,RMe),e(RMe,Mbr),e(nn,Ebr),e(nn,PMe),e(PMe,Cbr),e(nn,wbr),e(nn,BMe),e(BMe,Abr),e(nn,Lbr),e(ho,ybr),e(ho,st),e(st,KE),e(KE,IMe),e(IMe,xbr),e(KE,$br),e(KE,cJ),e(cJ,kbr),e(KE,Sbr),e(st,Rbr),e(st,ZE),e(ZE,NMe),e(NMe,Pbr),e(ZE,Bbr),e(ZE,mJ),e(mJ,Ibr),e(ZE,Nbr),e(st,qbr),e(st,e4),e(e4,qMe),e(qMe,jbr),e(e4,Dbr),e(e4,fJ),e(fJ,Gbr),e(e4,Obr),e(st,Vbr),e(st,o4),e(o4,jMe),e(jMe,Xbr),e(o4,zbr),e(o4,gJ),e(gJ,Wbr),e(o4,Qbr),e(st,Ubr),e(st,r4),e(r4,DMe),e(DMe,Hbr),e(r4,Jbr),e(r4,hJ),e(hJ,Ybr),e(r4,Kbr),e(ho,Zbr),e(ho,t4),e(t4,evr),e(t4,GMe),e(GMe,ovr),e(t4,rvr),e(t4,OMe),e(OMe,tvr),e(ho,avr),M(a4,ho,null),b(m,tHe,_),b(m,Zd,_),e(Zd,n4),e(n4,VMe),M(Mx,VMe,null),e(Zd,nvr),e(Zd,XMe),e(XMe,svr),b(m,aHe,_),b(m,Jo,_),M(Ex,Jo,null),e(Jo,lvr),e(Jo,ec),e(ec,ivr),e(ec,uJ),e(uJ,dvr),e(ec,cvr),e(ec,pJ),e(pJ,mvr),e(ec,fvr),e(Jo,gvr),e(Jo,Cx),e(Cx,hvr),e(Cx,zMe),e(zMe,uvr),e(Cx,pvr),e(Jo,_vr),e(Jo,$t),M(wx,$t,null),e($t,bvr),e($t,WMe),e(WMe,vvr),e($t,Fvr),e($t,oc),e(oc,Tvr),e(oc,QMe),e(QMe,Mvr),e(oc,Evr),e(oc,_J),e(_J,Cvr),e(oc,wvr),e($t,Avr),M(s4,$t,null),e(Jo,Lvr),e(Jo,uo),M(Ax,uo,null),e(uo,yvr),e(uo,UMe),e(UMe,xvr),e(uo,$vr),e(uo,sn),e(sn,kvr),e(sn,HMe),e(HMe,Svr),e(sn,Rvr),e(sn,JMe),e(JMe,Pvr),e(sn,Bvr),e(sn,YMe),e(YMe,Ivr),e(sn,Nvr),e(uo,qvr),e(uo,Le),e(Le,l4),e(l4,KMe),e(KMe,jvr),e(l4,Dvr),e(l4,bJ),e(bJ,Gvr),e(l4,Ovr),e(Le,Vvr),e(Le,i4),e(i4,ZMe),e(ZMe,Xvr),e(i4,zvr),e(i4,vJ),e(vJ,Wvr),e(i4,Qvr),e(Le,Uvr),e(Le,d4),e(d4,eEe),e(eEe,Hvr),e(d4,Jvr),e(d4,FJ),e(FJ,Yvr),e(d4,Kvr),e(Le,Zvr),e(Le,c4),e(c4,oEe),e(oEe,e1r),e(c4,o1r),e(c4,TJ),e(TJ,r1r),e(c4,t1r),e(Le,a1r),e(Le,m4),e(m4,rEe),e(rEe,n1r),e(m4,s1r),e(m4,MJ),e(MJ,l1r),e(m4,i1r),e(Le,d1r),e(Le,f4),e(f4,tEe),e(tEe,c1r),e(f4,m1r),e(f4,EJ),e(EJ,f1r),e(f4,g1r),e(Le,h1r),e(Le,g4),e(g4,aEe),e(aEe,u1r),e(g4,p1r),e(g4,CJ),e(CJ,_1r),e(g4,b1r),e(Le,v1r),e(Le,h4),e(h4,nEe),e(nEe,F1r),e(h4,T1r),e(h4,wJ),e(wJ,M1r),e(h4,E1r),e(Le,C1r),e(Le,u4),e(u4,sEe),e(sEe,w1r),e(u4,A1r),e(u4,AJ),e(AJ,L1r),e(u4,y1r),e(Le,x1r),e(Le,p4),e(p4,lEe),e(lEe,$1r),e(p4,k1r),e(p4,LJ),e(LJ,S1r),e(p4,R1r),e(uo,P1r),e(uo,_4),e(_4,B1r),e(_4,iEe),e(iEe,I1r),e(_4,N1r),e(_4,dEe),e(dEe,q1r),e(uo,j1r),M(b4,uo,null),b(m,nHe,_),b(m,rc,_),e(rc,v4),e(v4,cEe),M(Lx,cEe,null),e(rc,D1r),e(rc,mEe),e(mEe,G1r),b(m,sHe,_),b(m,Yo,_),M(yx,Yo,null),e(Yo,O1r),e(Yo,tc),e(tc,V1r),e(tc,yJ),e(yJ,X1r),e(tc,z1r),e(tc,xJ),e(xJ,W1r),e(tc,Q1r),e(Yo,U1r),e(Yo,xx),e(xx,H1r),e(xx,fEe),e(fEe,J1r),e(xx,Y1r),e(Yo,K1r),e(Yo,kt),M($x,kt,null),e(kt,Z1r),e(kt,gEe),e(gEe,eFr),e(kt,oFr),e(kt,ac),e(ac,rFr),e(ac,hEe),e(hEe,tFr),e(ac,aFr),e(ac,$J),e($J,nFr),e(ac,sFr),e(kt,lFr),M(F4,kt,null),e(Yo,iFr),e(Yo,po),M(kx,po,null),e(po,dFr),e(po,uEe),e(uEe,cFr),e(po,mFr),e(po,ln),e(ln,fFr),e(ln,pEe),e(pEe,gFr),e(ln,hFr),e(ln,_Ee),e(_Ee,uFr),e(ln,pFr),e(ln,bEe),e(bEe,_Fr),e(ln,bFr),e(po,vFr),e(po,Sx),e(Sx,T4),e(T4,vEe),e(vEe,FFr),e(T4,TFr),e(T4,kJ),e(kJ,MFr),e(T4,EFr),e(Sx,CFr),e(Sx,M4),e(M4,FEe),e(FEe,wFr),e(M4,AFr),e(M4,SJ),e(SJ,LFr),e(M4,yFr),e(po,xFr),e(po,E4),e(E4,$Fr),e(E4,TEe),e(TEe,kFr),e(E4,SFr),e(E4,MEe),e(MEe,RFr),e(po,PFr),M(C4,po,null),b(m,lHe,_),b(m,nc,_),e(nc,w4),e(w4,EEe),M(Rx,EEe,null),e(nc,BFr),e(nc,CEe),e(CEe,IFr),b(m,iHe,_),b(m,Ko,_),M(Px,Ko,null),e(Ko,NFr),e(Ko,sc),e(sc,qFr),e(sc,RJ),e(RJ,jFr),e(sc,DFr),e(sc,PJ),e(PJ,GFr),e(sc,OFr),e(Ko,VFr),e(Ko,Bx),e(Bx,XFr),e(Bx,wEe),e(wEe,zFr),e(Bx,WFr),e(Ko,QFr),e(Ko,St),M(Ix,St,null),e(St,UFr),e(St,AEe),e(AEe,HFr),e(St,JFr),e(St,lc),e(lc,YFr),e(lc,LEe),e(LEe,KFr),e(lc,ZFr),e(lc,BJ),e(BJ,eTr),e(lc,oTr),e(St,rTr),M(A4,St,null),e(Ko,tTr),e(Ko,_o),M(Nx,_o,null),e(_o,aTr),e(_o,yEe),e(yEe,nTr),e(_o,sTr),e(_o,dn),e(dn,lTr),e(dn,xEe),e(xEe,iTr),e(dn,dTr),e(dn,$Ee),e($Ee,cTr),e(dn,mTr),e(dn,kEe),e(kEe,fTr),e(dn,gTr),e(_o,hTr),e(_o,lt),e(lt,L4),e(L4,SEe),e(SEe,uTr),e(L4,pTr),e(L4,IJ),e(IJ,_Tr),e(L4,bTr),e(lt,vTr),e(lt,y4),e(y4,REe),e(REe,FTr),e(y4,TTr),e(y4,NJ),e(NJ,MTr),e(y4,ETr),e(lt,CTr),e(lt,x4),e(x4,PEe),e(PEe,wTr),e(x4,ATr),e(x4,qJ),e(qJ,LTr),e(x4,yTr),e(lt,xTr),e(lt,$4),e($4,BEe),e(BEe,$Tr),e($4,kTr),e($4,jJ),e(jJ,STr),e($4,RTr),e(lt,PTr),e(lt,k4),e(k4,IEe),e(IEe,BTr),e(k4,ITr),e(k4,DJ),e(DJ,NTr),e(k4,qTr),e(_o,jTr),e(_o,S4),e(S4,DTr),e(S4,NEe),e(NEe,GTr),e(S4,OTr),e(S4,qEe),e(qEe,VTr),e(_o,XTr),M(R4,_o,null),b(m,dHe,_),b(m,ic,_),e(ic,P4),e(P4,jEe),M(qx,jEe,null),e(ic,zTr),e(ic,DEe),e(DEe,WTr),b(m,cHe,_),b(m,Zo,_),M(jx,Zo,null),e(Zo,QTr),e(Zo,dc),e(dc,UTr),e(dc,GJ),e(GJ,HTr),e(dc,JTr),e(dc,OJ),e(OJ,YTr),e(dc,KTr),e(Zo,ZTr),e(Zo,Dx),e(Dx,eMr),e(Dx,GEe),e(GEe,oMr),e(Dx,rMr),e(Zo,tMr),e(Zo,Rt),M(Gx,Rt,null),e(Rt,aMr),e(Rt,OEe),e(OEe,nMr),e(Rt,sMr),e(Rt,cc),e(cc,lMr),e(cc,VEe),e(VEe,iMr),e(cc,dMr),e(cc,VJ),e(VJ,cMr),e(cc,mMr),e(Rt,fMr),M(B4,Rt,null),e(Zo,gMr),e(Zo,bo),M(Ox,bo,null),e(bo,hMr),e(bo,XEe),e(XEe,uMr),e(bo,pMr),e(bo,cn),e(cn,_Mr),e(cn,zEe),e(zEe,bMr),e(cn,vMr),e(cn,WEe),e(WEe,FMr),e(cn,TMr),e(cn,QEe),e(QEe,MMr),e(cn,EMr),e(bo,CMr),e(bo,mn),e(mn,I4),e(I4,UEe),e(UEe,wMr),e(I4,AMr),e(I4,XJ),e(XJ,LMr),e(I4,yMr),e(mn,xMr),e(mn,N4),e(N4,HEe),e(HEe,$Mr),e(N4,kMr),e(N4,zJ),e(zJ,SMr),e(N4,RMr),e(mn,PMr),e(mn,q4),e(q4,JEe),e(JEe,BMr),e(q4,IMr),e(q4,WJ),e(WJ,NMr),e(q4,qMr),e(mn,jMr),e(mn,j4),e(j4,YEe),e(YEe,DMr),e(j4,GMr),e(j4,QJ),e(QJ,OMr),e(j4,VMr),e(bo,XMr),e(bo,D4),e(D4,zMr),e(D4,KEe),e(KEe,WMr),e(D4,QMr),e(D4,ZEe),e(ZEe,UMr),e(bo,HMr),M(G4,bo,null),b(m,mHe,_),b(m,mc,_),e(mc,O4),e(O4,e4e),M(Vx,e4e,null),e(mc,JMr),e(mc,o4e),e(o4e,YMr),b(m,fHe,_),b(m,er,_),M(Xx,er,null),e(er,KMr),e(er,fc),e(fc,ZMr),e(fc,UJ),e(UJ,eEr),e(fc,oEr),e(fc,HJ),e(HJ,rEr),e(fc,tEr),e(er,aEr),e(er,zx),e(zx,nEr),e(zx,r4e),e(r4e,sEr),e(zx,lEr),e(er,iEr),e(er,Pt),M(Wx,Pt,null),e(Pt,dEr),e(Pt,t4e),e(t4e,cEr),e(Pt,mEr),e(Pt,gc),e(gc,fEr),e(gc,a4e),e(a4e,gEr),e(gc,hEr),e(gc,JJ),e(JJ,uEr),e(gc,pEr),e(Pt,_Er),M(V4,Pt,null),e(er,bEr),e(er,vo),M(Qx,vo,null),e(vo,vEr),e(vo,n4e),e(n4e,FEr),e(vo,TEr),e(vo,fn),e(fn,MEr),e(fn,s4e),e(s4e,EEr),e(fn,CEr),e(fn,l4e),e(l4e,wEr),e(fn,AEr),e(fn,i4e),e(i4e,LEr),e(fn,yEr),e(vo,xEr),e(vo,Ux),e(Ux,X4),e(X4,d4e),e(d4e,$Er),e(X4,kEr),e(X4,YJ),e(YJ,SEr),e(X4,REr),e(Ux,PEr),e(Ux,z4),e(z4,c4e),e(c4e,BEr),e(z4,IEr),e(z4,KJ),e(KJ,NEr),e(z4,qEr),e(vo,jEr),e(vo,W4),e(W4,DEr),e(W4,m4e),e(m4e,GEr),e(W4,OEr),e(W4,f4e),e(f4e,VEr),e(vo,XEr),M(Q4,vo,null),b(m,gHe,_),b(m,hc,_),e(hc,U4),e(U4,g4e),M(Hx,g4e,null),e(hc,zEr),e(hc,h4e),e(h4e,WEr),b(m,hHe,_),b(m,or,_),M(Jx,or,null),e(or,QEr),e(or,uc),e(uc,UEr),e(uc,ZJ),e(ZJ,HEr),e(uc,JEr),e(uc,eY),e(eY,YEr),e(uc,KEr),e(or,ZEr),e(or,Yx),e(Yx,e4r),e(Yx,u4e),e(u4e,o4r),e(Yx,r4r),e(or,t4r),e(or,Bt),M(Kx,Bt,null),e(Bt,a4r),e(Bt,p4e),e(p4e,n4r),e(Bt,s4r),e(Bt,pc),e(pc,l4r),e(pc,_4e),e(_4e,i4r),e(pc,d4r),e(pc,oY),e(oY,c4r),e(pc,m4r),e(Bt,f4r),M(H4,Bt,null),e(or,g4r),e(or,Fo),M(Zx,Fo,null),e(Fo,h4r),e(Fo,b4e),e(b4e,u4r),e(Fo,p4r),e(Fo,gn),e(gn,_4r),e(gn,v4e),e(v4e,b4r),e(gn,v4r),e(gn,F4e),e(F4e,F4r),e(gn,T4r),e(gn,T4e),e(T4e,M4r),e(gn,E4r),e(Fo,C4r),e(Fo,M4e),e(M4e,J4),e(J4,E4e),e(E4e,w4r),e(J4,A4r),e(J4,rY),e(rY,L4r),e(J4,y4r),e(Fo,x4r),e(Fo,Y4),e(Y4,$4r),e(Y4,C4e),e(C4e,k4r),e(Y4,S4r),e(Y4,w4e),e(w4e,R4r),e(Fo,P4r),M(K4,Fo,null),b(m,uHe,_),b(m,_c,_),e(_c,Z4),e(Z4,A4e),M(e$,A4e,null),e(_c,B4r),e(_c,L4e),e(L4e,I4r),b(m,pHe,_),b(m,rr,_),M(o$,rr,null),e(rr,N4r),e(rr,bc),e(bc,q4r),e(bc,tY),e(tY,j4r),e(bc,D4r),e(bc,aY),e(aY,G4r),e(bc,O4r),e(rr,V4r),e(rr,r$),e(r$,X4r),e(r$,y4e),e(y4e,z4r),e(r$,W4r),e(rr,Q4r),e(rr,It),M(t$,It,null),e(It,U4r),e(It,x4e),e(x4e,H4r),e(It,J4r),e(It,vc),e(vc,Y4r),e(vc,$4e),e($4e,K4r),e(vc,Z4r),e(vc,nY),e(nY,eCr),e(vc,oCr),e(It,rCr),M(eC,It,null),e(rr,tCr),e(rr,To),M(a$,To,null),e(To,aCr),e(To,k4e),e(k4e,nCr),e(To,sCr),e(To,hn),e(hn,lCr),e(hn,S4e),e(S4e,iCr),e(hn,dCr),e(hn,R4e),e(R4e,cCr),e(hn,mCr),e(hn,P4e),e(P4e,fCr),e(hn,gCr),e(To,hCr),e(To,it),e(it,oC),e(oC,B4e),e(B4e,uCr),e(oC,pCr),e(oC,sY),e(sY,_Cr),e(oC,bCr),e(it,vCr),e(it,rC),e(rC,I4e),e(I4e,FCr),e(rC,TCr),e(rC,lY),e(lY,MCr),e(rC,ECr),e(it,CCr),e(it,tC),e(tC,N4e),e(N4e,wCr),e(tC,ACr),e(tC,iY),e(iY,LCr),e(tC,yCr),e(it,xCr),e(it,aC),e(aC,q4e),e(q4e,$Cr),e(aC,kCr),e(aC,dY),e(dY,SCr),e(aC,RCr),e(it,PCr),e(it,nC),e(nC,j4e),e(j4e,BCr),e(nC,ICr),e(nC,cY),e(cY,NCr),e(nC,qCr),e(To,jCr),e(To,sC),e(sC,DCr),e(sC,D4e),e(D4e,GCr),e(sC,OCr),e(sC,G4e),e(G4e,VCr),e(To,XCr),M(lC,To,null),b(m,_He,_),b(m,Fc,_),e(Fc,iC),e(iC,O4e),M(n$,O4e,null),e(Fc,zCr),e(Fc,V4e),e(V4e,WCr),b(m,bHe,_),b(m,tr,_),M(s$,tr,null),e(tr,QCr),e(tr,Tc),e(Tc,UCr),e(Tc,mY),e(mY,HCr),e(Tc,JCr),e(Tc,fY),e(fY,YCr),e(Tc,KCr),e(tr,ZCr),e(tr,l$),e(l$,e3r),e(l$,X4e),e(X4e,o3r),e(l$,r3r),e(tr,t3r),e(tr,Nt),M(i$,Nt,null),e(Nt,a3r),e(Nt,z4e),e(z4e,n3r),e(Nt,s3r),e(Nt,Mc),e(Mc,l3r),e(Mc,W4e),e(W4e,i3r),e(Mc,d3r),e(Mc,gY),e(gY,c3r),e(Mc,m3r),e(Nt,f3r),M(dC,Nt,null),e(tr,g3r),e(tr,Mo),M(d$,Mo,null),e(Mo,h3r),e(Mo,Q4e),e(Q4e,u3r),e(Mo,p3r),e(Mo,un),e(un,_3r),e(un,U4e),e(U4e,b3r),e(un,v3r),e(un,H4e),e(H4e,F3r),e(un,T3r),e(un,J4e),e(J4e,M3r),e(un,E3r),e(Mo,C3r),e(Mo,Y4e),e(Y4e,cC),e(cC,K4e),e(K4e,w3r),e(cC,A3r),e(cC,hY),e(hY,L3r),e(cC,y3r),e(Mo,x3r),e(Mo,mC),e(mC,$3r),e(mC,Z4e),e(Z4e,k3r),e(mC,S3r),e(mC,eCe),e(eCe,R3r),e(Mo,P3r),M(fC,Mo,null),b(m,vHe,_),b(m,Ec,_),e(Ec,gC),e(gC,oCe),M(c$,oCe,null),e(Ec,B3r),e(Ec,rCe),e(rCe,I3r),b(m,FHe,_),b(m,ar,_),M(m$,ar,null),e(ar,N3r),e(ar,Cc),e(Cc,q3r),e(Cc,uY),e(uY,j3r),e(Cc,D3r),e(Cc,pY),e(pY,G3r),e(Cc,O3r),e(ar,V3r),e(ar,f$),e(f$,X3r),e(f$,tCe),e(tCe,z3r),e(f$,W3r),e(ar,Q3r),e(ar,qt),M(g$,qt,null),e(qt,U3r),e(qt,aCe),e(aCe,H3r),e(qt,J3r),e(qt,wc),e(wc,Y3r),e(wc,nCe),e(nCe,K3r),e(wc,Z3r),e(wc,_Y),e(_Y,e5r),e(wc,o5r),e(qt,r5r),M(hC,qt,null),e(ar,t5r),e(ar,Rr),M(h$,Rr,null),e(Rr,a5r),e(Rr,sCe),e(sCe,n5r),e(Rr,s5r),e(Rr,pn),e(pn,l5r),e(pn,lCe),e(lCe,i5r),e(pn,d5r),e(pn,iCe),e(iCe,c5r),e(pn,m5r),e(pn,dCe),e(dCe,f5r),e(pn,g5r),e(Rr,h5r),e(Rr,B),e(B,uC),e(uC,cCe),e(cCe,u5r),e(uC,p5r),e(uC,bY),e(bY,_5r),e(uC,b5r),e(B,v5r),e(B,pC),e(pC,mCe),e(mCe,F5r),e(pC,T5r),e(pC,vY),e(vY,M5r),e(pC,E5r),e(B,C5r),e(B,_C),e(_C,fCe),e(fCe,w5r),e(_C,A5r),e(_C,FY),e(FY,L5r),e(_C,y5r),e(B,x5r),e(B,bC),e(bC,gCe),e(gCe,$5r),e(bC,k5r),e(bC,TY),e(TY,S5r),e(bC,R5r),e(B,P5r),e(B,vC),e(vC,hCe),e(hCe,B5r),e(vC,I5r),e(vC,MY),e(MY,N5r),e(vC,q5r),e(B,j5r),e(B,FC),e(FC,uCe),e(uCe,D5r),e(FC,G5r),e(FC,EY),e(EY,O5r),e(FC,V5r),e(B,X5r),e(B,TC),e(TC,pCe),e(pCe,z5r),e(TC,W5r),e(TC,CY),e(CY,Q5r),e(TC,U5r),e(B,H5r),e(B,MC),e(MC,_Ce),e(_Ce,J5r),e(MC,Y5r),e(MC,wY),e(wY,K5r),e(MC,Z5r),e(B,e0r),e(B,EC),e(EC,bCe),e(bCe,o0r),e(EC,r0r),e(EC,AY),e(AY,t0r),e(EC,a0r),e(B,n0r),e(B,CC),e(CC,vCe),e(vCe,s0r),e(CC,l0r),e(CC,LY),e(LY,i0r),e(CC,d0r),e(B,c0r),e(B,wC),e(wC,FCe),e(FCe,m0r),e(wC,f0r),e(wC,yY),e(yY,g0r),e(wC,h0r),e(B,u0r),e(B,AC),e(AC,TCe),e(TCe,p0r),e(AC,_0r),e(AC,xY),e(xY,b0r),e(AC,v0r),e(B,F0r),e(B,LC),e(LC,MCe),e(MCe,T0r),e(LC,M0r),e(LC,$Y),e($Y,E0r),e(LC,C0r),e(B,w0r),e(B,yC),e(yC,ECe),e(ECe,A0r),e(yC,L0r),e(yC,kY),e(kY,y0r),e(yC,x0r),e(B,$0r),e(B,xC),e(xC,CCe),e(CCe,k0r),e(xC,S0r),e(xC,SY),e(SY,R0r),e(xC,P0r),e(B,B0r),e(B,$C),e($C,wCe),e(wCe,I0r),e($C,N0r),e($C,RY),e(RY,q0r),e($C,j0r),e(B,D0r),e(B,kC),e(kC,ACe),e(ACe,G0r),e(kC,O0r),e(kC,PY),e(PY,V0r),e(kC,X0r),e(B,z0r),e(B,SC),e(SC,LCe),e(LCe,W0r),e(SC,Q0r),e(SC,BY),e(BY,U0r),e(SC,H0r),e(B,J0r),e(B,il),e(il,yCe),e(yCe,Y0r),e(il,K0r),e(il,IY),e(IY,Z0r),e(il,ewr),e(il,NY),e(NY,owr),e(il,rwr),e(B,twr),e(B,RC),e(RC,xCe),e(xCe,awr),e(RC,nwr),e(RC,qY),e(qY,swr),e(RC,lwr),e(B,iwr),e(B,PC),e(PC,$Ce),e($Ce,dwr),e(PC,cwr),e(PC,jY),e(jY,mwr),e(PC,fwr),e(B,gwr),e(B,BC),e(BC,kCe),e(kCe,hwr),e(BC,uwr),e(BC,DY),e(DY,pwr),e(BC,_wr),e(B,bwr),e(B,IC),e(IC,SCe),e(SCe,vwr),e(IC,Fwr),e(IC,GY),e(GY,Twr),e(IC,Mwr),e(B,Ewr),e(B,NC),e(NC,RCe),e(RCe,Cwr),e(NC,wwr),e(NC,OY),e(OY,Awr),e(NC,Lwr),e(B,ywr),e(B,qC),e(qC,PCe),e(PCe,xwr),e(qC,$wr),e(qC,VY),e(VY,kwr),e(qC,Swr),e(B,Rwr),e(B,jC),e(jC,BCe),e(BCe,Pwr),e(jC,Bwr),e(jC,XY),e(XY,Iwr),e(jC,Nwr),e(B,qwr),e(B,DC),e(DC,ICe),e(ICe,jwr),e(DC,Dwr),e(DC,zY),e(zY,Gwr),e(DC,Owr),e(B,Vwr),e(B,GC),e(GC,NCe),e(NCe,Xwr),e(GC,zwr),e(GC,WY),e(WY,Wwr),e(GC,Qwr),e(B,Uwr),e(B,OC),e(OC,qCe),e(qCe,Hwr),e(OC,Jwr),e(OC,QY),e(QY,Ywr),e(OC,Kwr),e(B,Zwr),e(B,VC),e(VC,jCe),e(jCe,e6r),e(VC,o6r),e(VC,UY),e(UY,r6r),e(VC,t6r),e(B,a6r),e(B,XC),e(XC,DCe),e(DCe,n6r),e(XC,s6r),e(XC,HY),e(HY,l6r),e(XC,i6r),e(B,d6r),e(B,zC),e(zC,GCe),e(GCe,c6r),e(zC,m6r),e(zC,JY),e(JY,f6r),e(zC,g6r),e(B,h6r),e(B,WC),e(WC,OCe),e(OCe,u6r),e(WC,p6r),e(WC,YY),e(YY,_6r),e(WC,b6r),e(B,v6r),e(B,QC),e(QC,VCe),e(VCe,F6r),e(QC,T6r),e(QC,KY),e(KY,M6r),e(QC,E6r),e(B,C6r),e(B,UC),e(UC,XCe),e(XCe,w6r),e(UC,A6r),e(UC,ZY),e(ZY,L6r),e(UC,y6r),e(B,x6r),e(B,HC),e(HC,zCe),e(zCe,$6r),e(HC,k6r),e(HC,eK),e(eK,S6r),e(HC,R6r),e(B,P6r),e(B,JC),e(JC,WCe),e(WCe,B6r),e(JC,I6r),e(JC,oK),e(oK,N6r),e(JC,q6r),e(B,j6r),e(B,YC),e(YC,QCe),e(QCe,D6r),e(YC,G6r),e(YC,rK),e(rK,O6r),e(YC,V6r),e(B,X6r),e(B,KC),e(KC,UCe),e(UCe,z6r),e(KC,W6r),e(KC,tK),e(tK,Q6r),e(KC,U6r),e(B,H6r),e(B,ZC),e(ZC,HCe),e(HCe,J6r),e(ZC,Y6r),e(ZC,aK),e(aK,K6r),e(ZC,Z6r),e(B,eAr),e(B,e3),e(e3,JCe),e(JCe,oAr),e(e3,rAr),e(e3,nK),e(nK,tAr),e(e3,aAr),e(B,nAr),e(B,o3),e(o3,YCe),e(YCe,sAr),e(o3,lAr),e(o3,sK),e(sK,iAr),e(o3,dAr),e(B,cAr),e(B,r3),e(r3,KCe),e(KCe,mAr),e(r3,fAr),e(r3,lK),e(lK,gAr),e(r3,hAr),e(B,uAr),e(B,t3),e(t3,ZCe),e(ZCe,pAr),e(t3,_Ar),e(t3,iK),e(iK,bAr),e(t3,vAr),e(B,FAr),e(B,a3),e(a3,e3e),e(e3e,TAr),e(a3,MAr),e(a3,dK),e(dK,EAr),e(a3,CAr),e(B,wAr),e(B,n3),e(n3,o3e),e(o3e,AAr),e(n3,LAr),e(n3,cK),e(cK,yAr),e(n3,xAr),e(B,$Ar),e(B,s3),e(s3,r3e),e(r3e,kAr),e(s3,SAr),e(s3,mK),e(mK,RAr),e(s3,PAr),e(B,BAr),e(B,l3),e(l3,t3e),e(t3e,IAr),e(l3,NAr),e(l3,fK),e(fK,qAr),e(l3,jAr),e(B,DAr),e(B,i3),e(i3,a3e),e(a3e,GAr),e(i3,OAr),e(i3,gK),e(gK,VAr),e(i3,XAr),e(B,zAr),e(B,d3),e(d3,n3e),e(n3e,WAr),e(d3,QAr),e(d3,hK),e(hK,UAr),e(d3,HAr),e(B,JAr),e(B,c3),e(c3,s3e),e(s3e,YAr),e(c3,KAr),e(c3,uK),e(uK,ZAr),e(c3,e7r),e(B,o7r),e(B,m3),e(m3,l3e),e(l3e,r7r),e(m3,t7r),e(m3,pK),e(pK,a7r),e(m3,n7r),e(B,s7r),e(B,f3),e(f3,i3e),e(i3e,l7r),e(f3,i7r),e(f3,_K),e(_K,d7r),e(f3,c7r),e(Rr,m7r),M(g3,Rr,null),b(m,THe,_),b(m,Ac,_),e(Ac,h3),e(h3,d3e),M(u$,d3e,null),e(Ac,f7r),e(Ac,c3e),e(c3e,g7r),b(m,MHe,_),b(m,nr,_),M(p$,nr,null),e(nr,h7r),e(nr,Lc),e(Lc,u7r),e(Lc,bK),e(bK,p7r),e(Lc,_7r),e(Lc,vK),e(vK,b7r),e(Lc,v7r),e(nr,F7r),e(nr,_$),e(_$,T7r),e(_$,m3e),e(m3e,M7r),e(_$,E7r),e(nr,C7r),e(nr,jt),M(b$,jt,null),e(jt,w7r),e(jt,f3e),e(f3e,A7r),e(jt,L7r),e(jt,yc),e(yc,y7r),e(yc,g3e),e(g3e,x7r),e(yc,$7r),e(yc,FK),e(FK,k7r),e(yc,S7r),e(jt,R7r),M(u3,jt,null),e(nr,P7r),e(nr,Pr),M(v$,Pr,null),e(Pr,B7r),e(Pr,h3e),e(h3e,I7r),e(Pr,N7r),e(Pr,_n),e(_n,q7r),e(_n,u3e),e(u3e,j7r),e(_n,D7r),e(_n,p3e),e(p3e,G7r),e(_n,O7r),e(_n,_3e),e(_3e,V7r),e(_n,X7r),e(Pr,z7r),e(Pr,se),e(se,p3),e(p3,b3e),e(b3e,W7r),e(p3,Q7r),e(p3,TK),e(TK,U7r),e(p3,H7r),e(se,J7r),e(se,_3),e(_3,v3e),e(v3e,Y7r),e(_3,K7r),e(_3,MK),e(MK,Z7r),e(_3,eLr),e(se,oLr),e(se,b3),e(b3,F3e),e(F3e,rLr),e(b3,tLr),e(b3,EK),e(EK,aLr),e(b3,nLr),e(se,sLr),e(se,v3),e(v3,T3e),e(T3e,lLr),e(v3,iLr),e(v3,CK),e(CK,dLr),e(v3,cLr),e(se,mLr),e(se,F3),e(F3,M3e),e(M3e,fLr),e(F3,gLr),e(F3,wK),e(wK,hLr),e(F3,uLr),e(se,pLr),e(se,T3),e(T3,E3e),e(E3e,_Lr),e(T3,bLr),e(T3,AK),e(AK,vLr),e(T3,FLr),e(se,TLr),e(se,M3),e(M3,C3e),e(C3e,MLr),e(M3,ELr),e(M3,LK),e(LK,CLr),e(M3,wLr),e(se,ALr),e(se,E3),e(E3,w3e),e(w3e,LLr),e(E3,yLr),e(E3,yK),e(yK,xLr),e(E3,$Lr),e(se,kLr),e(se,C3),e(C3,A3e),e(A3e,SLr),e(C3,RLr),e(C3,xK),e(xK,PLr),e(C3,BLr),e(se,ILr),e(se,w3),e(w3,L3e),e(L3e,NLr),e(w3,qLr),e(w3,$K),e($K,jLr),e(w3,DLr),e(se,GLr),e(se,A3),e(A3,y3e),e(y3e,OLr),e(A3,VLr),e(A3,kK),e(kK,XLr),e(A3,zLr),e(se,WLr),e(se,L3),e(L3,x3e),e(x3e,QLr),e(L3,ULr),e(L3,SK),e(SK,HLr),e(L3,JLr),e(se,YLr),e(se,y3),e(y3,$3e),e($3e,KLr),e(y3,ZLr),e(y3,RK),e(RK,eyr),e(y3,oyr),e(se,ryr),e(se,x3),e(x3,k3e),e(k3e,tyr),e(x3,ayr),e(x3,PK),e(PK,nyr),e(x3,syr),e(se,lyr),e(se,$3),e($3,S3e),e(S3e,iyr),e($3,dyr),e($3,BK),e(BK,cyr),e($3,myr),e(se,fyr),e(se,k3),e(k3,R3e),e(R3e,gyr),e(k3,hyr),e(k3,IK),e(IK,uyr),e(k3,pyr),e(se,_yr),e(se,S3),e(S3,P3e),e(P3e,byr),e(S3,vyr),e(S3,NK),e(NK,Fyr),e(S3,Tyr),e(se,Myr),e(se,R3),e(R3,B3e),e(B3e,Eyr),e(R3,Cyr),e(R3,qK),e(qK,wyr),e(R3,Ayr),e(se,Lyr),e(se,P3),e(P3,I3e),e(I3e,yyr),e(P3,xyr),e(P3,jK),e(jK,$yr),e(P3,kyr),e(se,Syr),e(se,B3),e(B3,N3e),e(N3e,Ryr),e(B3,Pyr),e(B3,DK),e(DK,Byr),e(B3,Iyr),e(se,Nyr),e(se,I3),e(I3,q3e),e(q3e,qyr),e(I3,jyr),e(I3,GK),e(GK,Dyr),e(I3,Gyr),e(se,Oyr),e(se,N3),e(N3,j3e),e(j3e,Vyr),e(N3,Xyr),e(N3,OK),e(OK,zyr),e(N3,Wyr),e(se,Qyr),e(se,q3),e(q3,D3e),e(D3e,Uyr),e(q3,Hyr),e(q3,VK),e(VK,Jyr),e(q3,Yyr),e(Pr,Kyr),M(j3,Pr,null),b(m,EHe,_),b(m,xc,_),e(xc,D3),e(D3,G3e),M(F$,G3e,null),e(xc,Zyr),e(xc,O3e),e(O3e,e8r),b(m,CHe,_),b(m,sr,_),M(T$,sr,null),e(sr,o8r),e(sr,$c),e($c,r8r),e($c,XK),e(XK,t8r),e($c,a8r),e($c,zK),e(zK,n8r),e($c,s8r),e(sr,l8r),e(sr,M$),e(M$,i8r),e(M$,V3e),e(V3e,d8r),e(M$,c8r),e(sr,m8r),e(sr,Dt),M(E$,Dt,null),e(Dt,f8r),e(Dt,X3e),e(X3e,g8r),e(Dt,h8r),e(Dt,kc),e(kc,u8r),e(kc,z3e),e(z3e,p8r),e(kc,_8r),e(kc,WK),e(WK,b8r),e(kc,v8r),e(Dt,F8r),M(G3,Dt,null),e(sr,T8r),e(sr,Br),M(C$,Br,null),e(Br,M8r),e(Br,W3e),e(W3e,E8r),e(Br,C8r),e(Br,bn),e(bn,w8r),e(bn,Q3e),e(Q3e,A8r),e(bn,L8r),e(bn,U3e),e(U3e,y8r),e(bn,x8r),e(bn,H3e),e(H3e,$8r),e(bn,k8r),e(Br,S8r),e(Br,Me),e(Me,O3),e(O3,J3e),e(J3e,R8r),e(O3,P8r),e(O3,QK),e(QK,B8r),e(O3,I8r),e(Me,N8r),e(Me,V3),e(V3,Y3e),e(Y3e,q8r),e(V3,j8r),e(V3,UK),e(UK,D8r),e(V3,G8r),e(Me,O8r),e(Me,X3),e(X3,K3e),e(K3e,V8r),e(X3,X8r),e(X3,HK),e(HK,z8r),e(X3,W8r),e(Me,Q8r),e(Me,z3),e(z3,Z3e),e(Z3e,U8r),e(z3,H8r),e(z3,JK),e(JK,J8r),e(z3,Y8r),e(Me,K8r),e(Me,W3),e(W3,e5e),e(e5e,Z8r),e(W3,e9r),e(W3,YK),e(YK,o9r),e(W3,r9r),e(Me,t9r),e(Me,Q3),e(Q3,o5e),e(o5e,a9r),e(Q3,n9r),e(Q3,KK),e(KK,s9r),e(Q3,l9r),e(Me,i9r),e(Me,U3),e(U3,r5e),e(r5e,d9r),e(U3,c9r),e(U3,ZK),e(ZK,m9r),e(U3,f9r),e(Me,g9r),e(Me,H3),e(H3,t5e),e(t5e,h9r),e(H3,u9r),e(H3,eZ),e(eZ,p9r),e(H3,_9r),e(Me,b9r),e(Me,J3),e(J3,a5e),e(a5e,v9r),e(J3,F9r),e(J3,oZ),e(oZ,T9r),e(J3,M9r),e(Me,E9r),e(Me,Y3),e(Y3,n5e),e(n5e,C9r),e(Y3,w9r),e(Y3,rZ),e(rZ,A9r),e(Y3,L9r),e(Me,y9r),e(Me,K3),e(K3,s5e),e(s5e,x9r),e(K3,$9r),e(K3,tZ),e(tZ,k9r),e(K3,S9r),e(Me,R9r),e(Me,Z3),e(Z3,l5e),e(l5e,P9r),e(Z3,B9r),e(Z3,aZ),e(aZ,I9r),e(Z3,N9r),e(Me,q9r),e(Me,e5),e(e5,i5e),e(i5e,j9r),e(e5,D9r),e(e5,nZ),e(nZ,G9r),e(e5,O9r),e(Me,V9r),e(Me,o5),e(o5,d5e),e(d5e,X9r),e(o5,z9r),e(o5,sZ),e(sZ,W9r),e(o5,Q9r),e(Br,U9r),M(r5,Br,null),b(m,wHe,_),b(m,Sc,_),e(Sc,t5),e(t5,c5e),M(w$,c5e,null),e(Sc,H9r),e(Sc,m5e),e(m5e,J9r),b(m,AHe,_),b(m,lr,_),M(A$,lr,null),e(lr,Y9r),e(lr,Rc),e(Rc,K9r),e(Rc,lZ),e(lZ,Z9r),e(Rc,exr),e(Rc,iZ),e(iZ,oxr),e(Rc,rxr),e(lr,txr),e(lr,L$),e(L$,axr),e(L$,f5e),e(f5e,nxr),e(L$,sxr),e(lr,lxr),e(lr,Gt),M(y$,Gt,null),e(Gt,ixr),e(Gt,g5e),e(g5e,dxr),e(Gt,cxr),e(Gt,Pc),e(Pc,mxr),e(Pc,h5e),e(h5e,fxr),e(Pc,gxr),e(Pc,dZ),e(dZ,hxr),e(Pc,uxr),e(Gt,pxr),M(a5,Gt,null),e(lr,_xr),e(lr,Ir),M(x$,Ir,null),e(Ir,bxr),e(Ir,u5e),e(u5e,vxr),e(Ir,Fxr),e(Ir,vn),e(vn,Txr),e(vn,p5e),e(p5e,Mxr),e(vn,Exr),e(vn,_5e),e(_5e,Cxr),e(vn,wxr),e(vn,b5e),e(b5e,Axr),e(vn,Lxr),e(Ir,yxr),e(Ir,Ve),e(Ve,n5),e(n5,v5e),e(v5e,xxr),e(n5,$xr),e(n5,cZ),e(cZ,kxr),e(n5,Sxr),e(Ve,Rxr),e(Ve,s5),e(s5,F5e),e(F5e,Pxr),e(s5,Bxr),e(s5,mZ),e(mZ,Ixr),e(s5,Nxr),e(Ve,qxr),e(Ve,dl),e(dl,T5e),e(T5e,jxr),e(dl,Dxr),e(dl,fZ),e(fZ,Gxr),e(dl,Oxr),e(dl,gZ),e(gZ,Vxr),e(dl,Xxr),e(Ve,zxr),e(Ve,l5),e(l5,M5e),e(M5e,Wxr),e(l5,Qxr),e(l5,hZ),e(hZ,Uxr),e(l5,Hxr),e(Ve,Jxr),e(Ve,i5),e(i5,E5e),e(E5e,Yxr),e(i5,Kxr),e(i5,uZ),e(uZ,Zxr),e(i5,e$r),e(Ve,o$r),e(Ve,d5),e(d5,C5e),e(C5e,r$r),e(d5,t$r),e(d5,pZ),e(pZ,a$r),e(d5,n$r),e(Ve,s$r),e(Ve,c5),e(c5,w5e),e(w5e,l$r),e(c5,i$r),e(c5,_Z),e(_Z,d$r),e(c5,c$r),e(Ve,m$r),e(Ve,m5),e(m5,A5e),e(A5e,f$r),e(m5,g$r),e(m5,bZ),e(bZ,h$r),e(m5,u$r),e(Ir,p$r),M(f5,Ir,null),b(m,LHe,_),b(m,Bc,_),e(Bc,g5),e(g5,L5e),M($$,L5e,null),e(Bc,_$r),e(Bc,y5e),e(y5e,b$r),b(m,yHe,_),b(m,ir,_),M(k$,ir,null),e(ir,v$r),e(ir,Ic),e(Ic,F$r),e(Ic,vZ),e(vZ,T$r),e(Ic,M$r),e(Ic,FZ),e(FZ,E$r),e(Ic,C$r),e(ir,w$r),e(ir,S$),e(S$,A$r),e(S$,x5e),e(x5e,L$r),e(S$,y$r),e(ir,x$r),e(ir,Ot),M(R$,Ot,null),e(Ot,$$r),e(Ot,$5e),e($5e,k$r),e(Ot,S$r),e(Ot,Nc),e(Nc,R$r),e(Nc,k5e),e(k5e,P$r),e(Nc,B$r),e(Nc,TZ),e(TZ,I$r),e(Nc,N$r),e(Ot,q$r),M(h5,Ot,null),e(ir,j$r),e(ir,Nr),M(P$,Nr,null),e(Nr,D$r),e(Nr,S5e),e(S5e,G$r),e(Nr,O$r),e(Nr,Fn),e(Fn,V$r),e(Fn,R5e),e(R5e,X$r),e(Fn,z$r),e(Fn,P5e),e(P5e,W$r),e(Fn,Q$r),e(Fn,B5e),e(B5e,U$r),e(Fn,H$r),e(Nr,J$r),e(Nr,B$),e(B$,u5),e(u5,I5e),e(I5e,Y$r),e(u5,K$r),e(u5,MZ),e(MZ,Z$r),e(u5,ekr),e(B$,okr),e(B$,p5),e(p5,N5e),e(N5e,rkr),e(p5,tkr),e(p5,EZ),e(EZ,akr),e(p5,nkr),e(Nr,skr),M(_5,Nr,null),b(m,xHe,_),b(m,qc,_),e(qc,b5),e(b5,q5e),M(I$,q5e,null),e(qc,lkr),e(qc,j5e),e(j5e,ikr),b(m,$He,_),b(m,dr,_),M(N$,dr,null),e(dr,dkr),e(dr,jc),e(jc,ckr),e(jc,CZ),e(CZ,mkr),e(jc,fkr),e(jc,wZ),e(wZ,gkr),e(jc,hkr),e(dr,ukr),e(dr,q$),e(q$,pkr),e(q$,D5e),e(D5e,_kr),e(q$,bkr),e(dr,vkr),e(dr,Vt),M(j$,Vt,null),e(Vt,Fkr),e(Vt,G5e),e(G5e,Tkr),e(Vt,Mkr),e(Vt,Dc),e(Dc,Ekr),e(Dc,O5e),e(O5e,Ckr),e(Dc,wkr),e(Dc,AZ),e(AZ,Akr),e(Dc,Lkr),e(Vt,ykr),M(v5,Vt,null),e(dr,xkr),e(dr,qr),M(D$,qr,null),e(qr,$kr),e(qr,V5e),e(V5e,kkr),e(qr,Skr),e(qr,Tn),e(Tn,Rkr),e(Tn,X5e),e(X5e,Pkr),e(Tn,Bkr),e(Tn,z5e),e(z5e,Ikr),e(Tn,Nkr),e(Tn,W5e),e(W5e,qkr),e(Tn,jkr),e(qr,Dkr),e(qr,me),e(me,F5),e(F5,Q5e),e(Q5e,Gkr),e(F5,Okr),e(F5,LZ),e(LZ,Vkr),e(F5,Xkr),e(me,zkr),e(me,T5),e(T5,U5e),e(U5e,Wkr),e(T5,Qkr),e(T5,yZ),e(yZ,Ukr),e(T5,Hkr),e(me,Jkr),e(me,M5),e(M5,H5e),e(H5e,Ykr),e(M5,Kkr),e(M5,xZ),e(xZ,Zkr),e(M5,eSr),e(me,oSr),e(me,E5),e(E5,J5e),e(J5e,rSr),e(E5,tSr),e(E5,$Z),e($Z,aSr),e(E5,nSr),e(me,sSr),e(me,C5),e(C5,Y5e),e(Y5e,lSr),e(C5,iSr),e(C5,kZ),e(kZ,dSr),e(C5,cSr),e(me,mSr),e(me,w5),e(w5,K5e),e(K5e,fSr),e(w5,gSr),e(w5,SZ),e(SZ,hSr),e(w5,uSr),e(me,pSr),e(me,A5),e(A5,Z5e),e(Z5e,_Sr),e(A5,bSr),e(A5,RZ),e(RZ,vSr),e(A5,FSr),e(me,TSr),e(me,L5),e(L5,e0e),e(e0e,MSr),e(L5,ESr),e(L5,PZ),e(PZ,CSr),e(L5,wSr),e(me,ASr),e(me,y5),e(y5,o0e),e(o0e,LSr),e(y5,ySr),e(y5,BZ),e(BZ,xSr),e(y5,$Sr),e(me,kSr),e(me,x5),e(x5,r0e),e(r0e,SSr),e(x5,RSr),e(x5,IZ),e(IZ,PSr),e(x5,BSr),e(me,ISr),e(me,$5),e($5,t0e),e(t0e,NSr),e($5,qSr),e($5,NZ),e(NZ,jSr),e($5,DSr),e(me,GSr),e(me,k5),e(k5,a0e),e(a0e,OSr),e(k5,VSr),e(k5,qZ),e(qZ,XSr),e(k5,zSr),e(me,WSr),e(me,S5),e(S5,n0e),e(n0e,QSr),e(S5,USr),e(S5,jZ),e(jZ,HSr),e(S5,JSr),e(me,YSr),e(me,R5),e(R5,s0e),e(s0e,KSr),e(R5,ZSr),e(R5,DZ),e(DZ,eRr),e(R5,oRr),e(me,rRr),e(me,P5),e(P5,l0e),e(l0e,tRr),e(P5,aRr),e(P5,GZ),e(GZ,nRr),e(P5,sRr),e(me,lRr),e(me,B5),e(B5,i0e),e(i0e,iRr),e(B5,dRr),e(B5,OZ),e(OZ,cRr),e(B5,mRr),e(me,fRr),e(me,I5),e(I5,d0e),e(d0e,gRr),e(I5,hRr),e(I5,VZ),e(VZ,uRr),e(I5,pRr),e(me,_Rr),e(me,N5),e(N5,c0e),e(c0e,bRr),e(N5,vRr),e(N5,XZ),e(XZ,FRr),e(N5,TRr),e(me,MRr),e(me,q5),e(q5,m0e),e(m0e,ERr),e(q5,CRr),e(q5,zZ),e(zZ,wRr),e(q5,ARr),e(me,LRr),e(me,j5),e(j5,f0e),e(f0e,yRr),e(j5,xRr),e(j5,WZ),e(WZ,$Rr),e(j5,kRr),e(qr,SRr),M(D5,qr,null),b(m,kHe,_),b(m,Gc,_),e(Gc,G5),e(G5,g0e),M(G$,g0e,null),e(Gc,RRr),e(Gc,h0e),e(h0e,PRr),b(m,SHe,_),b(m,cr,_),M(O$,cr,null),e(cr,BRr),e(cr,Oc),e(Oc,IRr),e(Oc,QZ),e(QZ,NRr),e(Oc,qRr),e(Oc,UZ),e(UZ,jRr),e(Oc,DRr),e(cr,GRr),e(cr,V$),e(V$,ORr),e(V$,u0e),e(u0e,VRr),e(V$,XRr),e(cr,zRr),e(cr,Xt),M(X$,Xt,null),e(Xt,WRr),e(Xt,p0e),e(p0e,QRr),e(Xt,URr),e(Xt,Vc),e(Vc,HRr),e(Vc,_0e),e(_0e,JRr),e(Vc,YRr),e(Vc,HZ),e(HZ,KRr),e(Vc,ZRr),e(Xt,ePr),M(O5,Xt,null),e(cr,oPr),e(cr,jr),M(z$,jr,null),e(jr,rPr),e(jr,b0e),e(b0e,tPr),e(jr,aPr),e(jr,Mn),e(Mn,nPr),e(Mn,v0e),e(v0e,sPr),e(Mn,lPr),e(Mn,F0e),e(F0e,iPr),e(Mn,dPr),e(Mn,T0e),e(T0e,cPr),e(Mn,mPr),e(jr,fPr),e(jr,ye),e(ye,V5),e(V5,M0e),e(M0e,gPr),e(V5,hPr),e(V5,JZ),e(JZ,uPr),e(V5,pPr),e(ye,_Pr),e(ye,X5),e(X5,E0e),e(E0e,bPr),e(X5,vPr),e(X5,YZ),e(YZ,FPr),e(X5,TPr),e(ye,MPr),e(ye,z5),e(z5,C0e),e(C0e,EPr),e(z5,CPr),e(z5,KZ),e(KZ,wPr),e(z5,APr),e(ye,LPr),e(ye,W5),e(W5,w0e),e(w0e,yPr),e(W5,xPr),e(W5,ZZ),e(ZZ,$Pr),e(W5,kPr),e(ye,SPr),e(ye,Q5),e(Q5,A0e),e(A0e,RPr),e(Q5,PPr),e(Q5,eee),e(eee,BPr),e(Q5,IPr),e(ye,NPr),e(ye,U5),e(U5,L0e),e(L0e,qPr),e(U5,jPr),e(U5,oee),e(oee,DPr),e(U5,GPr),e(ye,OPr),e(ye,H5),e(H5,y0e),e(y0e,VPr),e(H5,XPr),e(H5,ree),e(ree,zPr),e(H5,WPr),e(ye,QPr),e(ye,J5),e(J5,x0e),e(x0e,UPr),e(J5,HPr),e(J5,tee),e(tee,JPr),e(J5,YPr),e(ye,KPr),e(ye,Y5),e(Y5,$0e),e($0e,ZPr),e(Y5,eBr),e(Y5,aee),e(aee,oBr),e(Y5,rBr),e(ye,tBr),e(ye,K5),e(K5,k0e),e(k0e,aBr),e(K5,nBr),e(K5,nee),e(nee,sBr),e(K5,lBr),e(jr,iBr),M(Z5,jr,null),b(m,RHe,_),b(m,Xc,_),e(Xc,e0),e(e0,S0e),M(W$,S0e,null),e(Xc,dBr),e(Xc,R0e),e(R0e,cBr),b(m,PHe,_),b(m,mr,_),M(Q$,mr,null),e(mr,mBr),e(mr,zc),e(zc,fBr),e(zc,see),e(see,gBr),e(zc,hBr),e(zc,lee),e(lee,uBr),e(zc,pBr),e(mr,_Br),e(mr,U$),e(U$,bBr),e(U$,P0e),e(P0e,vBr),e(U$,FBr),e(mr,TBr),e(mr,zt),M(H$,zt,null),e(zt,MBr),e(zt,B0e),e(B0e,EBr),e(zt,CBr),e(zt,Wc),e(Wc,wBr),e(Wc,I0e),e(I0e,ABr),e(Wc,LBr),e(Wc,iee),e(iee,yBr),e(Wc,xBr),e(zt,$Br),M(o0,zt,null),e(mr,kBr),e(mr,Dr),M(J$,Dr,null),e(Dr,SBr),e(Dr,N0e),e(N0e,RBr),e(Dr,PBr),e(Dr,En),e(En,BBr),e(En,q0e),e(q0e,IBr),e(En,NBr),e(En,j0e),e(j0e,qBr),e(En,jBr),e(En,D0e),e(D0e,DBr),e(En,GBr),e(Dr,OBr),e(Dr,re),e(re,r0),e(r0,G0e),e(G0e,VBr),e(r0,XBr),e(r0,dee),e(dee,zBr),e(r0,WBr),e(re,QBr),e(re,t0),e(t0,O0e),e(O0e,UBr),e(t0,HBr),e(t0,cee),e(cee,JBr),e(t0,YBr),e(re,KBr),e(re,a0),e(a0,V0e),e(V0e,ZBr),e(a0,eIr),e(a0,mee),e(mee,oIr),e(a0,rIr),e(re,tIr),e(re,n0),e(n0,X0e),e(X0e,aIr),e(n0,nIr),e(n0,fee),e(fee,sIr),e(n0,lIr),e(re,iIr),e(re,s0),e(s0,z0e),e(z0e,dIr),e(s0,cIr),e(s0,gee),e(gee,mIr),e(s0,fIr),e(re,gIr),e(re,l0),e(l0,W0e),e(W0e,hIr),e(l0,uIr),e(l0,hee),e(hee,pIr),e(l0,_Ir),e(re,bIr),e(re,i0),e(i0,Q0e),e(Q0e,vIr),e(i0,FIr),e(i0,uee),e(uee,TIr),e(i0,MIr),e(re,EIr),e(re,d0),e(d0,U0e),e(U0e,CIr),e(d0,wIr),e(d0,pee),e(pee,AIr),e(d0,LIr),e(re,yIr),e(re,c0),e(c0,H0e),e(H0e,xIr),e(c0,$Ir),e(c0,_ee),e(_ee,kIr),e(c0,SIr),e(re,RIr),e(re,m0),e(m0,J0e),e(J0e,PIr),e(m0,BIr),e(m0,bee),e(bee,IIr),e(m0,NIr),e(re,qIr),e(re,f0),e(f0,Y0e),e(Y0e,jIr),e(f0,DIr),e(f0,vee),e(vee,GIr),e(f0,OIr),e(re,VIr),e(re,g0),e(g0,K0e),e(K0e,XIr),e(g0,zIr),e(g0,Fee),e(Fee,WIr),e(g0,QIr),e(re,UIr),e(re,h0),e(h0,Z0e),e(Z0e,HIr),e(h0,JIr),e(h0,Tee),e(Tee,YIr),e(h0,KIr),e(re,ZIr),e(re,u0),e(u0,ewe),e(ewe,eNr),e(u0,oNr),e(u0,Mee),e(Mee,rNr),e(u0,tNr),e(re,aNr),e(re,p0),e(p0,owe),e(owe,nNr),e(p0,sNr),e(p0,Eee),e(Eee,lNr),e(p0,iNr),e(re,dNr),e(re,_0),e(_0,rwe),e(rwe,cNr),e(_0,mNr),e(_0,Cee),e(Cee,fNr),e(_0,gNr),e(re,hNr),e(re,b0),e(b0,twe),e(twe,uNr),e(b0,pNr),e(b0,wee),e(wee,_Nr),e(b0,bNr),e(re,vNr),e(re,v0),e(v0,awe),e(awe,FNr),e(v0,TNr),e(v0,Aee),e(Aee,MNr),e(v0,ENr),e(re,CNr),e(re,F0),e(F0,nwe),e(nwe,wNr),e(F0,ANr),e(F0,Lee),e(Lee,LNr),e(F0,yNr),e(re,xNr),e(re,T0),e(T0,swe),e(swe,$Nr),e(T0,kNr),e(T0,yee),e(yee,SNr),e(T0,RNr),e(re,PNr),e(re,M0),e(M0,lwe),e(lwe,BNr),e(M0,INr),e(M0,xee),e(xee,NNr),e(M0,qNr),e(re,jNr),e(re,E0),e(E0,iwe),e(iwe,DNr),e(E0,GNr),e(E0,$ee),e($ee,ONr),e(E0,VNr),e(re,XNr),e(re,C0),e(C0,dwe),e(dwe,zNr),e(C0,WNr),e(C0,kee),e(kee,QNr),e(C0,UNr),e(re,HNr),e(re,w0),e(w0,cwe),e(cwe,JNr),e(w0,YNr),e(w0,See),e(See,KNr),e(w0,ZNr),e(re,eqr),e(re,A0),e(A0,mwe),e(mwe,oqr),e(A0,rqr),e(A0,Ree),e(Ree,tqr),e(A0,aqr),e(re,nqr),e(re,L0),e(L0,fwe),e(fwe,sqr),e(L0,lqr),e(L0,Pee),e(Pee,iqr),e(L0,dqr),e(re,cqr),e(re,y0),e(y0,gwe),e(gwe,mqr),e(y0,fqr),e(y0,Bee),e(Bee,gqr),e(y0,hqr),e(Dr,uqr),M(x0,Dr,null),b(m,BHe,_),b(m,Qc,_),e(Qc,$0),e($0,hwe),M(Y$,hwe,null),e(Qc,pqr),e(Qc,uwe),e(uwe,_qr),b(m,IHe,_),b(m,fr,_),M(K$,fr,null),e(fr,bqr),e(fr,Uc),e(Uc,vqr),e(Uc,Iee),e(Iee,Fqr),e(Uc,Tqr),e(Uc,Nee),e(Nee,Mqr),e(Uc,Eqr),e(fr,Cqr),e(fr,Z$),e(Z$,wqr),e(Z$,pwe),e(pwe,Aqr),e(Z$,Lqr),e(fr,yqr),e(fr,Wt),M(ek,Wt,null),e(Wt,xqr),e(Wt,_we),e(_we,$qr),e(Wt,kqr),e(Wt,Hc),e(Hc,Sqr),e(Hc,bwe),e(bwe,Rqr),e(Hc,Pqr),e(Hc,qee),e(qee,Bqr),e(Hc,Iqr),e(Wt,Nqr),M(k0,Wt,null),e(fr,qqr),e(fr,Gr),M(ok,Gr,null),e(Gr,jqr),e(Gr,vwe),e(vwe,Dqr),e(Gr,Gqr),e(Gr,Cn),e(Cn,Oqr),e(Cn,Fwe),e(Fwe,Vqr),e(Cn,Xqr),e(Cn,Twe),e(Twe,zqr),e(Cn,Wqr),e(Cn,Mwe),e(Mwe,Qqr),e(Cn,Uqr),e(Gr,Hqr),e(Gr,ve),e(ve,S0),e(S0,Ewe),e(Ewe,Jqr),e(S0,Yqr),e(S0,jee),e(jee,Kqr),e(S0,Zqr),e(ve,ejr),e(ve,R0),e(R0,Cwe),e(Cwe,ojr),e(R0,rjr),e(R0,Dee),e(Dee,tjr),e(R0,ajr),e(ve,njr),e(ve,P0),e(P0,wwe),e(wwe,sjr),e(P0,ljr),e(P0,Gee),e(Gee,ijr),e(P0,djr),e(ve,cjr),e(ve,B0),e(B0,Awe),e(Awe,mjr),e(B0,fjr),e(B0,Oee),e(Oee,gjr),e(B0,hjr),e(ve,ujr),e(ve,I0),e(I0,Lwe),e(Lwe,pjr),e(I0,_jr),e(I0,Vee),e(Vee,bjr),e(I0,vjr),e(ve,Fjr),e(ve,N0),e(N0,ywe),e(ywe,Tjr),e(N0,Mjr),e(N0,Xee),e(Xee,Ejr),e(N0,Cjr),e(ve,wjr),e(ve,q0),e(q0,xwe),e(xwe,Ajr),e(q0,Ljr),e(q0,zee),e(zee,yjr),e(q0,xjr),e(ve,$jr),e(ve,j0),e(j0,$we),e($we,kjr),e(j0,Sjr),e(j0,Wee),e(Wee,Rjr),e(j0,Pjr),e(ve,Bjr),e(ve,D0),e(D0,kwe),e(kwe,Ijr),e(D0,Njr),e(D0,Qee),e(Qee,qjr),e(D0,jjr),e(ve,Djr),e(ve,G0),e(G0,Swe),e(Swe,Gjr),e(G0,Ojr),e(G0,Uee),e(Uee,Vjr),e(G0,Xjr),e(ve,zjr),e(ve,O0),e(O0,Rwe),e(Rwe,Wjr),e(O0,Qjr),e(O0,Hee),e(Hee,Ujr),e(O0,Hjr),e(ve,Jjr),e(ve,V0),e(V0,Pwe),e(Pwe,Yjr),e(V0,Kjr),e(V0,Jee),e(Jee,Zjr),e(V0,eDr),e(ve,oDr),e(ve,X0),e(X0,Bwe),e(Bwe,rDr),e(X0,tDr),e(X0,Yee),e(Yee,aDr),e(X0,nDr),e(ve,sDr),e(ve,z0),e(z0,Iwe),e(Iwe,lDr),e(z0,iDr),e(z0,Kee),e(Kee,dDr),e(z0,cDr),e(ve,mDr),e(ve,W0),e(W0,Nwe),e(Nwe,fDr),e(W0,gDr),e(W0,Zee),e(Zee,hDr),e(W0,uDr),e(ve,pDr),e(ve,Q0),e(Q0,qwe),e(qwe,_Dr),e(Q0,bDr),e(Q0,eoe),e(eoe,vDr),e(Q0,FDr),e(ve,TDr),e(ve,U0),e(U0,jwe),e(jwe,MDr),e(U0,EDr),e(U0,ooe),e(ooe,CDr),e(U0,wDr),e(Gr,ADr),M(H0,Gr,null),b(m,NHe,_),b(m,Jc,_),e(Jc,J0),e(J0,Dwe),M(rk,Dwe,null),e(Jc,LDr),e(Jc,Gwe),e(Gwe,yDr),b(m,qHe,_),b(m,gr,_),M(tk,gr,null),e(gr,xDr),e(gr,Yc),e(Yc,$Dr),e(Yc,roe),e(roe,kDr),e(Yc,SDr),e(Yc,toe),e(toe,RDr),e(Yc,PDr),e(gr,BDr),e(gr,ak),e(ak,IDr),e(ak,Owe),e(Owe,NDr),e(ak,qDr),e(gr,jDr),e(gr,Qt),M(nk,Qt,null),e(Qt,DDr),e(Qt,Vwe),e(Vwe,GDr),e(Qt,ODr),e(Qt,Kc),e(Kc,VDr),e(Kc,Xwe),e(Xwe,XDr),e(Kc,zDr),e(Kc,aoe),e(aoe,WDr),e(Kc,QDr),e(Qt,UDr),M(Y0,Qt,null),e(gr,HDr),e(gr,Or),M(sk,Or,null),e(Or,JDr),e(Or,zwe),e(zwe,YDr),e(Or,KDr),e(Or,wn),e(wn,ZDr),e(wn,Wwe),e(Wwe,eGr),e(wn,oGr),e(wn,Qwe),e(Qwe,rGr),e(wn,tGr),e(wn,Uwe),e(Uwe,aGr),e(wn,nGr),e(Or,sGr),e(Or,lk),e(lk,K0),e(K0,Hwe),e(Hwe,lGr),e(K0,iGr),e(K0,noe),e(noe,dGr),e(K0,cGr),e(lk,mGr),e(lk,Z0),e(Z0,Jwe),e(Jwe,fGr),e(Z0,gGr),e(Z0,soe),e(soe,hGr),e(Z0,uGr),e(Or,pGr),M(ew,Or,null),b(m,jHe,_),b(m,Zc,_),e(Zc,ow),e(ow,Ywe),M(ik,Ywe,null),e(Zc,_Gr),e(Zc,Kwe),e(Kwe,bGr),b(m,DHe,_),b(m,hr,_),M(dk,hr,null),e(hr,vGr),e(hr,em),e(em,FGr),e(em,loe),e(loe,TGr),e(em,MGr),e(em,ioe),e(ioe,EGr),e(em,CGr),e(hr,wGr),e(hr,ck),e(ck,AGr),e(ck,Zwe),e(Zwe,LGr),e(ck,yGr),e(hr,xGr),e(hr,Ut),M(mk,Ut,null),e(Ut,$Gr),e(Ut,e6e),e(e6e,kGr),e(Ut,SGr),e(Ut,om),e(om,RGr),e(om,o6e),e(o6e,PGr),e(om,BGr),e(om,doe),e(doe,IGr),e(om,NGr),e(Ut,qGr),M(rw,Ut,null),e(hr,jGr),e(hr,Vr),M(fk,Vr,null),e(Vr,DGr),e(Vr,r6e),e(r6e,GGr),e(Vr,OGr),e(Vr,An),e(An,VGr),e(An,t6e),e(t6e,XGr),e(An,zGr),e(An,a6e),e(a6e,WGr),e(An,QGr),e(An,n6e),e(n6e,UGr),e(An,HGr),e(Vr,JGr),e(Vr,s6e),e(s6e,tw),e(tw,l6e),e(l6e,YGr),e(tw,KGr),e(tw,coe),e(coe,ZGr),e(tw,eOr),e(Vr,oOr),M(aw,Vr,null),b(m,GHe,_),b(m,rm,_),e(rm,nw),e(nw,i6e),M(gk,i6e,null),e(rm,rOr),e(rm,d6e),e(d6e,tOr),b(m,OHe,_),b(m,ur,_),M(hk,ur,null),e(ur,aOr),e(ur,tm),e(tm,nOr),e(tm,moe),e(moe,sOr),e(tm,lOr),e(tm,foe),e(foe,iOr),e(tm,dOr),e(ur,cOr),e(ur,uk),e(uk,mOr),e(uk,c6e),e(c6e,fOr),e(uk,gOr),e(ur,hOr),e(ur,Ht),M(pk,Ht,null),e(Ht,uOr),e(Ht,m6e),e(m6e,pOr),e(Ht,_Or),e(Ht,am),e(am,bOr),e(am,f6e),e(f6e,vOr),e(am,FOr),e(am,goe),e(goe,TOr),e(am,MOr),e(Ht,EOr),M(sw,Ht,null),e(ur,COr),e(ur,Xr),M(_k,Xr,null),e(Xr,wOr),e(Xr,g6e),e(g6e,AOr),e(Xr,LOr),e(Xr,Ln),e(Ln,yOr),e(Ln,h6e),e(h6e,xOr),e(Ln,$Or),e(Ln,u6e),e(u6e,kOr),e(Ln,SOr),e(Ln,p6e),e(p6e,ROr),e(Ln,POr),e(Xr,BOr),e(Xr,ie),e(ie,lw),e(lw,_6e),e(_6e,IOr),e(lw,NOr),e(lw,hoe),e(hoe,qOr),e(lw,jOr),e(ie,DOr),e(ie,iw),e(iw,b6e),e(b6e,GOr),e(iw,OOr),e(iw,uoe),e(uoe,VOr),e(iw,XOr),e(ie,zOr),e(ie,dw),e(dw,v6e),e(v6e,WOr),e(dw,QOr),e(dw,poe),e(poe,UOr),e(dw,HOr),e(ie,JOr),e(ie,cw),e(cw,F6e),e(F6e,YOr),e(cw,KOr),e(cw,_oe),e(_oe,ZOr),e(cw,eVr),e(ie,oVr),e(ie,mw),e(mw,T6e),e(T6e,rVr),e(mw,tVr),e(mw,boe),e(boe,aVr),e(mw,nVr),e(ie,sVr),e(ie,fw),e(fw,M6e),e(M6e,lVr),e(fw,iVr),e(fw,voe),e(voe,dVr),e(fw,cVr),e(ie,mVr),e(ie,gw),e(gw,E6e),e(E6e,fVr),e(gw,gVr),e(gw,Foe),e(Foe,hVr),e(gw,uVr),e(ie,pVr),e(ie,hw),e(hw,C6e),e(C6e,_Vr),e(hw,bVr),e(hw,Toe),e(Toe,vVr),e(hw,FVr),e(ie,TVr),e(ie,uw),e(uw,w6e),e(w6e,MVr),e(uw,EVr),e(uw,Moe),e(Moe,CVr),e(uw,wVr),e(ie,AVr),e(ie,pw),e(pw,A6e),e(A6e,LVr),e(pw,yVr),e(pw,Eoe),e(Eoe,xVr),e(pw,$Vr),e(ie,kVr),e(ie,_w),e(_w,L6e),e(L6e,SVr),e(_w,RVr),e(_w,Coe),e(Coe,PVr),e(_w,BVr),e(ie,IVr),e(ie,bw),e(bw,y6e),e(y6e,NVr),e(bw,qVr),e(bw,woe),e(woe,jVr),e(bw,DVr),e(ie,GVr),e(ie,vw),e(vw,x6e),e(x6e,OVr),e(vw,VVr),e(vw,Aoe),e(Aoe,XVr),e(vw,zVr),e(ie,WVr),e(ie,Fw),e(Fw,$6e),e($6e,QVr),e(Fw,UVr),e(Fw,Loe),e(Loe,HVr),e(Fw,JVr),e(ie,YVr),e(ie,Tw),e(Tw,k6e),e(k6e,KVr),e(Tw,ZVr),e(Tw,yoe),e(yoe,eXr),e(Tw,oXr),e(ie,rXr),e(ie,Mw),e(Mw,S6e),e(S6e,tXr),e(Mw,aXr),e(Mw,xoe),e(xoe,nXr),e(Mw,sXr),e(ie,lXr),e(ie,Ew),e(Ew,R6e),e(R6e,iXr),e(Ew,dXr),e(Ew,$oe),e($oe,cXr),e(Ew,mXr),e(ie,fXr),e(ie,Cw),e(Cw,P6e),e(P6e,gXr),e(Cw,hXr),e(Cw,koe),e(koe,uXr),e(Cw,pXr),e(ie,_Xr),e(ie,ww),e(ww,B6e),e(B6e,bXr),e(ww,vXr),e(ww,Soe),e(Soe,FXr),e(ww,TXr),e(ie,MXr),e(ie,Aw),e(Aw,I6e),e(I6e,EXr),e(Aw,CXr),e(Aw,Roe),e(Roe,wXr),e(Aw,AXr),e(ie,LXr),e(ie,Lw),e(Lw,N6e),e(N6e,yXr),e(Lw,xXr),e(Lw,Poe),e(Poe,$Xr),e(Lw,kXr),e(Xr,SXr),M(yw,Xr,null),b(m,VHe,_),b(m,nm,_),e(nm,xw),e(xw,q6e),M(bk,q6e,null),e(nm,RXr),e(nm,j6e),e(j6e,PXr),b(m,XHe,_),b(m,pr,_),M(vk,pr,null),e(pr,BXr),e(pr,sm),e(sm,IXr),e(sm,Boe),e(Boe,NXr),e(sm,qXr),e(sm,Ioe),e(Ioe,jXr),e(sm,DXr),e(pr,GXr),e(pr,Fk),e(Fk,OXr),e(Fk,D6e),e(D6e,VXr),e(Fk,XXr),e(pr,zXr),e(pr,Jt),M(Tk,Jt,null),e(Jt,WXr),e(Jt,G6e),e(G6e,QXr),e(Jt,UXr),e(Jt,lm),e(lm,HXr),e(lm,O6e),e(O6e,JXr),e(lm,YXr),e(lm,Noe),e(Noe,KXr),e(lm,ZXr),e(Jt,ezr),M($w,Jt,null),e(pr,ozr),e(pr,zr),M(Mk,zr,null),e(zr,rzr),e(zr,V6e),e(V6e,tzr),e(zr,azr),e(zr,yn),e(yn,nzr),e(yn,X6e),e(X6e,szr),e(yn,lzr),e(yn,z6e),e(z6e,izr),e(yn,dzr),e(yn,W6e),e(W6e,czr),e(yn,mzr),e(zr,fzr),e(zr,de),e(de,kw),e(kw,Q6e),e(Q6e,gzr),e(kw,hzr),e(kw,qoe),e(qoe,uzr),e(kw,pzr),e(de,_zr),e(de,Sw),e(Sw,U6e),e(U6e,bzr),e(Sw,vzr),e(Sw,joe),e(joe,Fzr),e(Sw,Tzr),e(de,Mzr),e(de,Rw),e(Rw,H6e),e(H6e,Ezr),e(Rw,Czr),e(Rw,Doe),e(Doe,wzr),e(Rw,Azr),e(de,Lzr),e(de,Pw),e(Pw,J6e),e(J6e,yzr),e(Pw,xzr),e(Pw,Goe),e(Goe,$zr),e(Pw,kzr),e(de,Szr),e(de,Bw),e(Bw,Y6e),e(Y6e,Rzr),e(Bw,Pzr),e(Bw,Ooe),e(Ooe,Bzr),e(Bw,Izr),e(de,Nzr),e(de,Iw),e(Iw,K6e),e(K6e,qzr),e(Iw,jzr),e(Iw,Voe),e(Voe,Dzr),e(Iw,Gzr),e(de,Ozr),e(de,Nw),e(Nw,Z6e),e(Z6e,Vzr),e(Nw,Xzr),e(Nw,Xoe),e(Xoe,zzr),e(Nw,Wzr),e(de,Qzr),e(de,qw),e(qw,eAe),e(eAe,Uzr),e(qw,Hzr),e(qw,zoe),e(zoe,Jzr),e(qw,Yzr),e(de,Kzr),e(de,jw),e(jw,oAe),e(oAe,Zzr),e(jw,eWr),e(jw,Woe),e(Woe,oWr),e(jw,rWr),e(de,tWr),e(de,Dw),e(Dw,rAe),e(rAe,aWr),e(Dw,nWr),e(Dw,Qoe),e(Qoe,sWr),e(Dw,lWr),e(de,iWr),e(de,Gw),e(Gw,tAe),e(tAe,dWr),e(Gw,cWr),e(Gw,Uoe),e(Uoe,mWr),e(Gw,fWr),e(de,gWr),e(de,Ow),e(Ow,aAe),e(aAe,hWr),e(Ow,uWr),e(Ow,Hoe),e(Hoe,pWr),e(Ow,_Wr),e(de,bWr),e(de,Vw),e(Vw,nAe),e(nAe,vWr),e(Vw,FWr),e(Vw,Joe),e(Joe,TWr),e(Vw,MWr),e(de,EWr),e(de,Xw),e(Xw,sAe),e(sAe,CWr),e(Xw,wWr),e(Xw,Yoe),e(Yoe,AWr),e(Xw,LWr),e(de,yWr),e(de,zw),e(zw,lAe),e(lAe,xWr),e(zw,$Wr),e(zw,Koe),e(Koe,kWr),e(zw,SWr),e(de,RWr),e(de,Ww),e(Ww,iAe),e(iAe,PWr),e(Ww,BWr),e(Ww,Zoe),e(Zoe,IWr),e(Ww,NWr),e(de,qWr),e(de,Qw),e(Qw,dAe),e(dAe,jWr),e(Qw,DWr),e(Qw,ere),e(ere,GWr),e(Qw,OWr),e(de,VWr),e(de,Uw),e(Uw,cAe),e(cAe,XWr),e(Uw,zWr),e(Uw,ore),e(ore,WWr),e(Uw,QWr),e(de,UWr),e(de,Hw),e(Hw,mAe),e(mAe,HWr),e(Hw,JWr),e(Hw,rre),e(rre,YWr),e(Hw,KWr),e(de,ZWr),e(de,Jw),e(Jw,fAe),e(fAe,eQr),e(Jw,oQr),e(Jw,tre),e(tre,rQr),e(Jw,tQr),e(de,aQr),e(de,Yw),e(Yw,gAe),e(gAe,nQr),e(Yw,sQr),e(Yw,are),e(are,lQr),e(Yw,iQr),e(zr,dQr),M(Kw,zr,null),b(m,zHe,_),b(m,im,_),e(im,Zw),e(Zw,hAe),M(Ek,hAe,null),e(im,cQr),e(im,uAe),e(uAe,mQr),b(m,WHe,_),b(m,_r,_),M(Ck,_r,null),e(_r,fQr),e(_r,dm),e(dm,gQr),e(dm,nre),e(nre,hQr),e(dm,uQr),e(dm,sre),e(sre,pQr),e(dm,_Qr),e(_r,bQr),e(_r,wk),e(wk,vQr),e(wk,pAe),e(pAe,FQr),e(wk,TQr),e(_r,MQr),e(_r,Yt),M(Ak,Yt,null),e(Yt,EQr),e(Yt,_Ae),e(_Ae,CQr),e(Yt,wQr),e(Yt,cm),e(cm,AQr),e(cm,bAe),e(bAe,LQr),e(cm,yQr),e(cm,lre),e(lre,xQr),e(cm,$Qr),e(Yt,kQr),M(e6,Yt,null),e(_r,SQr),e(_r,Wr),M(Lk,Wr,null),e(Wr,RQr),e(Wr,vAe),e(vAe,PQr),e(Wr,BQr),e(Wr,xn),e(xn,IQr),e(xn,FAe),e(FAe,NQr),e(xn,qQr),e(xn,TAe),e(TAe,jQr),e(xn,DQr),e(xn,MAe),e(MAe,GQr),e(xn,OQr),e(Wr,VQr),e(Wr,EAe),e(EAe,o6),e(o6,CAe),e(CAe,XQr),e(o6,zQr),e(o6,ire),e(ire,WQr),e(o6,QQr),e(Wr,UQr),M(r6,Wr,null),b(m,QHe,_),b(m,mm,_),e(mm,t6),e(t6,wAe),M(yk,wAe,null),e(mm,HQr),e(mm,AAe),e(AAe,JQr),b(m,UHe,_),b(m,br,_),M(xk,br,null),e(br,YQr),e(br,fm),e(fm,KQr),e(fm,dre),e(dre,ZQr),e(fm,eUr),e(fm,cre),e(cre,oUr),e(fm,rUr),e(br,tUr),e(br,$k),e($k,aUr),e($k,LAe),e(LAe,nUr),e($k,sUr),e(br,lUr),e(br,Kt),M(kk,Kt,null),e(Kt,iUr),e(Kt,yAe),e(yAe,dUr),e(Kt,cUr),e(Kt,gm),e(gm,mUr),e(gm,xAe),e(xAe,fUr),e(gm,gUr),e(gm,mre),e(mre,hUr),e(gm,uUr),e(Kt,pUr),M(a6,Kt,null),e(br,_Ur),e(br,Qr),M(Sk,Qr,null),e(Qr,bUr),e(Qr,$Ae),e($Ae,vUr),e(Qr,FUr),e(Qr,$n),e($n,TUr),e($n,kAe),e(kAe,MUr),e($n,EUr),e($n,SAe),e(SAe,CUr),e($n,wUr),e($n,RAe),e(RAe,AUr),e($n,LUr),e(Qr,yUr),e(Qr,PAe),e(PAe,n6),e(n6,BAe),e(BAe,xUr),e(n6,$Ur),e(n6,fre),e(fre,kUr),e(n6,SUr),e(Qr,RUr),M(s6,Qr,null),b(m,HHe,_),b(m,hm,_),e(hm,l6),e(l6,IAe),M(Rk,IAe,null),e(hm,PUr),e(hm,NAe),e(NAe,BUr),b(m,JHe,_),b(m,vr,_),M(Pk,vr,null),e(vr,IUr),e(vr,um),e(um,NUr),e(um,gre),e(gre,qUr),e(um,jUr),e(um,hre),e(hre,DUr),e(um,GUr),e(vr,OUr),e(vr,Bk),e(Bk,VUr),e(Bk,qAe),e(qAe,XUr),e(Bk,zUr),e(vr,WUr),e(vr,Zt),M(Ik,Zt,null),e(Zt,QUr),e(Zt,jAe),e(jAe,UUr),e(Zt,HUr),e(Zt,pm),e(pm,JUr),e(pm,DAe),e(DAe,YUr),e(pm,KUr),e(pm,ure),e(ure,ZUr),e(pm,eHr),e(Zt,oHr),M(i6,Zt,null),e(vr,rHr),e(vr,Ur),M(Nk,Ur,null),e(Ur,tHr),e(Ur,GAe),e(GAe,aHr),e(Ur,nHr),e(Ur,kn),e(kn,sHr),e(kn,OAe),e(OAe,lHr),e(kn,iHr),e(kn,VAe),e(VAe,dHr),e(kn,cHr),e(kn,XAe),e(XAe,mHr),e(kn,fHr),e(Ur,gHr),e(Ur,te),e(te,d6),e(d6,zAe),e(zAe,hHr),e(d6,uHr),e(d6,pre),e(pre,pHr),e(d6,_Hr),e(te,bHr),e(te,c6),e(c6,WAe),e(WAe,vHr),e(c6,FHr),e(c6,_re),e(_re,THr),e(c6,MHr),e(te,EHr),e(te,m6),e(m6,QAe),e(QAe,CHr),e(m6,wHr),e(m6,bre),e(bre,AHr),e(m6,LHr),e(te,yHr),e(te,f6),e(f6,UAe),e(UAe,xHr),e(f6,$Hr),e(f6,vre),e(vre,kHr),e(f6,SHr),e(te,RHr),e(te,g6),e(g6,HAe),e(HAe,PHr),e(g6,BHr),e(g6,Fre),e(Fre,IHr),e(g6,NHr),e(te,qHr),e(te,h6),e(h6,JAe),e(JAe,jHr),e(h6,DHr),e(h6,Tre),e(Tre,GHr),e(h6,OHr),e(te,VHr),e(te,u6),e(u6,YAe),e(YAe,XHr),e(u6,zHr),e(u6,Mre),e(Mre,WHr),e(u6,QHr),e(te,UHr),e(te,p6),e(p6,KAe),e(KAe,HHr),e(p6,JHr),e(p6,Ere),e(Ere,YHr),e(p6,KHr),e(te,ZHr),e(te,_6),e(_6,ZAe),e(ZAe,eJr),e(_6,oJr),e(_6,Cre),e(Cre,rJr),e(_6,tJr),e(te,aJr),e(te,b6),e(b6,e7e),e(e7e,nJr),e(b6,sJr),e(b6,wre),e(wre,lJr),e(b6,iJr),e(te,dJr),e(te,v6),e(v6,o7e),e(o7e,cJr),e(v6,mJr),e(v6,Are),e(Are,fJr),e(v6,gJr),e(te,hJr),e(te,F6),e(F6,r7e),e(r7e,uJr),e(F6,pJr),e(F6,Lre),e(Lre,_Jr),e(F6,bJr),e(te,vJr),e(te,T6),e(T6,t7e),e(t7e,FJr),e(T6,TJr),e(T6,yre),e(yre,MJr),e(T6,EJr),e(te,CJr),e(te,M6),e(M6,a7e),e(a7e,wJr),e(M6,AJr),e(M6,xre),e(xre,LJr),e(M6,yJr),e(te,xJr),e(te,E6),e(E6,n7e),e(n7e,$Jr),e(E6,kJr),e(E6,$re),e($re,SJr),e(E6,RJr),e(te,PJr),e(te,C6),e(C6,s7e),e(s7e,BJr),e(C6,IJr),e(C6,kre),e(kre,NJr),e(C6,qJr),e(te,jJr),e(te,w6),e(w6,l7e),e(l7e,DJr),e(w6,GJr),e(w6,Sre),e(Sre,OJr),e(w6,VJr),e(te,XJr),e(te,A6),e(A6,i7e),e(i7e,zJr),e(A6,WJr),e(A6,Rre),e(Rre,QJr),e(A6,UJr),e(te,HJr),e(te,L6),e(L6,d7e),e(d7e,JJr),e(L6,YJr),e(L6,Pre),e(Pre,KJr),e(L6,ZJr),e(te,eYr),e(te,y6),e(y6,c7e),e(c7e,oYr),e(y6,rYr),e(y6,Bre),e(Bre,tYr),e(y6,aYr),e(te,nYr),e(te,x6),e(x6,m7e),e(m7e,sYr),e(x6,lYr),e(x6,Ire),e(Ire,iYr),e(x6,dYr),e(te,cYr),e(te,$6),e($6,f7e),e(f7e,mYr),e($6,fYr),e($6,Nre),e(Nre,gYr),e($6,hYr),e(te,uYr),e(te,k6),e(k6,g7e),e(g7e,pYr),e(k6,_Yr),e(k6,qre),e(qre,bYr),e(k6,vYr),e(te,FYr),e(te,S6),e(S6,h7e),e(h7e,TYr),e(S6,MYr),e(S6,jre),e(jre,EYr),e(S6,CYr),e(te,wYr),e(te,R6),e(R6,u7e),e(u7e,AYr),e(R6,LYr),e(R6,Dre),e(Dre,yYr),e(R6,xYr),e(te,$Yr),e(te,P6),e(P6,p7e),e(p7e,kYr),e(P6,SYr),e(P6,Gre),e(Gre,RYr),e(P6,PYr),e(te,BYr),e(te,B6),e(B6,_7e),e(_7e,IYr),e(B6,NYr),e(B6,Ore),e(Ore,qYr),e(B6,jYr),e(Ur,DYr),M(I6,Ur,null),b(m,YHe,_),b(m,_m,_),e(_m,N6),e(N6,b7e),M(qk,b7e,null),e(_m,GYr),e(_m,v7e),e(v7e,OYr),b(m,KHe,_),b(m,Fr,_),M(jk,Fr,null),e(Fr,VYr),e(Fr,bm),e(bm,XYr),e(bm,Vre),e(Vre,zYr),e(bm,WYr),e(bm,Xre),e(Xre,QYr),e(bm,UYr),e(Fr,HYr),e(Fr,Dk),e(Dk,JYr),e(Dk,F7e),e(F7e,YYr),e(Dk,KYr),e(Fr,ZYr),e(Fr,ea),M(Gk,ea,null),e(ea,eKr),e(ea,T7e),e(T7e,oKr),e(ea,rKr),e(ea,vm),e(vm,tKr),e(vm,M7e),e(M7e,aKr),e(vm,nKr),e(vm,zre),e(zre,sKr),e(vm,lKr),e(ea,iKr),M(q6,ea,null),e(Fr,dKr),e(Fr,Hr),M(Ok,Hr,null),e(Hr,cKr),e(Hr,E7e),e(E7e,mKr),e(Hr,fKr),e(Hr,Sn),e(Sn,gKr),e(Sn,C7e),e(C7e,hKr),e(Sn,uKr),e(Sn,w7e),e(w7e,pKr),e(Sn,_Kr),e(Sn,A7e),e(A7e,bKr),e(Sn,vKr),e(Hr,FKr),e(Hr,xe),e(xe,j6),e(j6,L7e),e(L7e,TKr),e(j6,MKr),e(j6,Wre),e(Wre,EKr),e(j6,CKr),e(xe,wKr),e(xe,D6),e(D6,y7e),e(y7e,AKr),e(D6,LKr),e(D6,Qre),e(Qre,yKr),e(D6,xKr),e(xe,$Kr),e(xe,G6),e(G6,x7e),e(x7e,kKr),e(G6,SKr),e(G6,Ure),e(Ure,RKr),e(G6,PKr),e(xe,BKr),e(xe,O6),e(O6,$7e),e($7e,IKr),e(O6,NKr),e(O6,Hre),e(Hre,qKr),e(O6,jKr),e(xe,DKr),e(xe,V6),e(V6,k7e),e(k7e,GKr),e(V6,OKr),e(V6,Jre),e(Jre,VKr),e(V6,XKr),e(xe,zKr),e(xe,X6),e(X6,S7e),e(S7e,WKr),e(X6,QKr),e(X6,Yre),e(Yre,UKr),e(X6,HKr),e(xe,JKr),e(xe,z6),e(z6,R7e),e(R7e,YKr),e(z6,KKr),e(z6,Kre),e(Kre,ZKr),e(z6,eZr),e(xe,oZr),e(xe,W6),e(W6,P7e),e(P7e,rZr),e(W6,tZr),e(W6,Zre),e(Zre,aZr),e(W6,nZr),e(xe,sZr),e(xe,Q6),e(Q6,B7e),e(B7e,lZr),e(Q6,iZr),e(Q6,ete),e(ete,dZr),e(Q6,cZr),e(xe,mZr),e(xe,U6),e(U6,I7e),e(I7e,fZr),e(U6,gZr),e(U6,ote),e(ote,hZr),e(U6,uZr),e(Hr,pZr),M(H6,Hr,null),b(m,ZHe,_),b(m,Fm,_),e(Fm,J6),e(J6,N7e),M(Vk,N7e,null),e(Fm,_Zr),e(Fm,q7e),e(q7e,bZr),b(m,eJe,_),b(m,Tr,_),M(Xk,Tr,null),e(Tr,vZr),e(Tr,Tm),e(Tm,FZr),e(Tm,rte),e(rte,TZr),e(Tm,MZr),e(Tm,tte),e(tte,EZr),e(Tm,CZr),e(Tr,wZr),e(Tr,zk),e(zk,AZr),e(zk,j7e),e(j7e,LZr),e(zk,yZr),e(Tr,xZr),e(Tr,oa),M(Wk,oa,null),e(oa,$Zr),e(oa,D7e),e(D7e,kZr),e(oa,SZr),e(oa,Mm),e(Mm,RZr),e(Mm,G7e),e(G7e,PZr),e(Mm,BZr),e(Mm,ate),e(ate,IZr),e(Mm,NZr),e(oa,qZr),M(Y6,oa,null),e(Tr,jZr),e(Tr,Jr),M(Qk,Jr,null),e(Jr,DZr),e(Jr,O7e),e(O7e,GZr),e(Jr,OZr),e(Jr,Rn),e(Rn,VZr),e(Rn,V7e),e(V7e,XZr),e(Rn,zZr),e(Rn,X7e),e(X7e,WZr),e(Rn,QZr),e(Rn,z7e),e(z7e,UZr),e(Rn,HZr),e(Jr,JZr),e(Jr,Ee),e(Ee,K6),e(K6,W7e),e(W7e,YZr),e(K6,KZr),e(K6,nte),e(nte,ZZr),e(K6,eet),e(Ee,oet),e(Ee,Z6),e(Z6,Q7e),e(Q7e,ret),e(Z6,tet),e(Z6,ste),e(ste,aet),e(Z6,net),e(Ee,set),e(Ee,eA),e(eA,U7e),e(U7e,iet),e(eA,det),e(eA,lte),e(lte,cet),e(eA,met),e(Ee,fet),e(Ee,oA),e(oA,H7e),e(H7e,get),e(oA,het),e(oA,ite),e(ite,uet),e(oA,pet),e(Ee,_et),e(Ee,rA),e(rA,J7e),e(J7e,bet),e(rA,vet),e(rA,dte),e(dte,Fet),e(rA,Tet),e(Ee,Met),e(Ee,tA),e(tA,Y7e),e(Y7e,Eet),e(tA,Cet),e(tA,cte),e(cte,wet),e(tA,Aet),e(Ee,Let),e(Ee,aA),e(aA,K7e),e(K7e,yet),e(aA,xet),e(aA,mte),e(mte,$et),e(aA,ket),e(Ee,Set),e(Ee,nA),e(nA,Z7e),e(Z7e,Ret),e(nA,Pet),e(nA,fte),e(fte,Bet),e(nA,Iet),e(Ee,Net),e(Ee,sA),e(sA,eLe),e(eLe,qet),e(sA,jet),e(sA,gte),e(gte,Det),e(sA,Get),e(Ee,Oet),e(Ee,lA),e(lA,oLe),e(oLe,Vet),e(lA,Xet),e(lA,hte),e(hte,zet),e(lA,Wet),e(Ee,Qet),e(Ee,iA),e(iA,rLe),e(rLe,Uet),e(iA,Het),e(iA,ute),e(ute,Jet),e(iA,Yet),e(Ee,Ket),e(Ee,dA),e(dA,tLe),e(tLe,Zet),e(dA,eot),e(dA,pte),e(pte,oot),e(dA,rot),e(Ee,tot),e(Ee,cA),e(cA,aLe),e(aLe,aot),e(cA,not),e(cA,_te),e(_te,sot),e(cA,lot),e(Jr,iot),M(mA,Jr,null),b(m,oJe,_),b(m,Em,_),e(Em,fA),e(fA,nLe),M(Uk,nLe,null),e(Em,dot),e(Em,sLe),e(sLe,cot),b(m,rJe,_),b(m,Mr,_),M(Hk,Mr,null),e(Mr,mot),e(Mr,Cm),e(Cm,fot),e(Cm,bte),e(bte,got),e(Cm,hot),e(Cm,vte),e(vte,uot),e(Cm,pot),e(Mr,_ot),e(Mr,Jk),e(Jk,bot),e(Jk,lLe),e(lLe,vot),e(Jk,Fot),e(Mr,Tot),e(Mr,ra),M(Yk,ra,null),e(ra,Mot),e(ra,iLe),e(iLe,Eot),e(ra,Cot),e(ra,wm),e(wm,wot),e(wm,dLe),e(dLe,Aot),e(wm,Lot),e(wm,Fte),e(Fte,yot),e(wm,xot),e(ra,$ot),M(gA,ra,null),e(Mr,kot),e(Mr,Yr),M(Kk,Yr,null),e(Yr,Sot),e(Yr,cLe),e(cLe,Rot),e(Yr,Pot),e(Yr,Pn),e(Pn,Bot),e(Pn,mLe),e(mLe,Iot),e(Pn,Not),e(Pn,fLe),e(fLe,qot),e(Pn,jot),e(Pn,gLe),e(gLe,Dot),e(Pn,Got),e(Yr,Oot),e(Yr,$e),e($e,hA),e(hA,hLe),e(hLe,Vot),e(hA,Xot),e(hA,Tte),e(Tte,zot),e(hA,Wot),e($e,Qot),e($e,uA),e(uA,uLe),e(uLe,Uot),e(uA,Hot),e(uA,Mte),e(Mte,Jot),e(uA,Yot),e($e,Kot),e($e,pA),e(pA,pLe),e(pLe,Zot),e(pA,ert),e(pA,Ete),e(Ete,ort),e(pA,rrt),e($e,trt),e($e,_A),e(_A,_Le),e(_Le,art),e(_A,nrt),e(_A,Cte),e(Cte,srt),e(_A,lrt),e($e,irt),e($e,bA),e(bA,bLe),e(bLe,drt),e(bA,crt),e(bA,wte),e(wte,mrt),e(bA,frt),e($e,grt),e($e,vA),e(vA,vLe),e(vLe,hrt),e(vA,urt),e(vA,Ate),e(Ate,prt),e(vA,_rt),e($e,brt),e($e,FA),e(FA,FLe),e(FLe,vrt),e(FA,Frt),e(FA,Lte),e(Lte,Trt),e(FA,Mrt),e($e,Ert),e($e,TA),e(TA,TLe),e(TLe,Crt),e(TA,wrt),e(TA,yte),e(yte,Art),e(TA,Lrt),e($e,yrt),e($e,MA),e(MA,MLe),e(MLe,xrt),e(MA,$rt),e(MA,xte),e(xte,krt),e(MA,Srt),e($e,Rrt),e($e,EA),e(EA,ELe),e(ELe,Prt),e(EA,Brt),e(EA,$te),e($te,Irt),e(EA,Nrt),e(Yr,qrt),M(CA,Yr,null),b(m,tJe,_),b(m,Am,_),e(Am,wA),e(wA,CLe),M(Zk,CLe,null),e(Am,jrt),e(Am,wLe),e(wLe,Drt),b(m,aJe,_),b(m,Er,_),M(eS,Er,null),e(Er,Grt),e(Er,Lm),e(Lm,Ort),e(Lm,kte),e(kte,Vrt),e(Lm,Xrt),e(Lm,Ste),e(Ste,zrt),e(Lm,Wrt),e(Er,Qrt),e(Er,oS),e(oS,Urt),e(oS,ALe),e(ALe,Hrt),e(oS,Jrt),e(Er,Yrt),e(Er,ta),M(rS,ta,null),e(ta,Krt),e(ta,LLe),e(LLe,Zrt),e(ta,ett),e(ta,ym),e(ym,ott),e(ym,yLe),e(yLe,rtt),e(ym,ttt),e(ym,Rte),e(Rte,att),e(ym,ntt),e(ta,stt),M(AA,ta,null),e(Er,ltt),e(Er,Kr),M(tS,Kr,null),e(Kr,itt),e(Kr,xLe),e(xLe,dtt),e(Kr,ctt),e(Kr,Bn),e(Bn,mtt),e(Bn,$Le),e($Le,ftt),e(Bn,gtt),e(Bn,kLe),e(kLe,htt),e(Bn,utt),e(Bn,SLe),e(SLe,ptt),e(Bn,_tt),e(Kr,btt),e(Kr,ke),e(ke,LA),e(LA,RLe),e(RLe,vtt),e(LA,Ftt),e(LA,Pte),e(Pte,Ttt),e(LA,Mtt),e(ke,Ett),e(ke,yA),e(yA,PLe),e(PLe,Ctt),e(yA,wtt),e(yA,Bte),e(Bte,Att),e(yA,Ltt),e(ke,ytt),e(ke,xA),e(xA,BLe),e(BLe,xtt),e(xA,$tt),e(xA,Ite),e(Ite,ktt),e(xA,Stt),e(ke,Rtt),e(ke,$A),e($A,ILe),e(ILe,Ptt),e($A,Btt),e($A,Nte),e(Nte,Itt),e($A,Ntt),e(ke,qtt),e(ke,kA),e(kA,NLe),e(NLe,jtt),e(kA,Dtt),e(kA,qte),e(qte,Gtt),e(kA,Ott),e(ke,Vtt),e(ke,SA),e(SA,qLe),e(qLe,Xtt),e(SA,ztt),e(SA,jte),e(jte,Wtt),e(SA,Qtt),e(ke,Utt),e(ke,RA),e(RA,jLe),e(jLe,Htt),e(RA,Jtt),e(RA,Dte),e(Dte,Ytt),e(RA,Ktt),e(ke,Ztt),e(ke,PA),e(PA,DLe),e(DLe,eat),e(PA,oat),e(PA,Gte),e(Gte,rat),e(PA,tat),e(ke,aat),e(ke,BA),e(BA,GLe),e(GLe,nat),e(BA,sat),e(BA,Ote),e(Ote,lat),e(BA,iat),e(ke,dat),e(ke,IA),e(IA,OLe),e(OLe,cat),e(IA,mat),e(IA,Vte),e(Vte,fat),e(IA,gat),e(Kr,hat),M(NA,Kr,null),b(m,nJe,_),b(m,xm,_),e(xm,qA),e(qA,VLe),M(aS,VLe,null),e(xm,uat),e(xm,XLe),e(XLe,pat),b(m,sJe,_),b(m,Cr,_),M(nS,Cr,null),e(Cr,_at),e(Cr,$m),e($m,bat),e($m,Xte),e(Xte,vat),e($m,Fat),e($m,zte),e(zte,Tat),e($m,Mat),e(Cr,Eat),e(Cr,sS),e(sS,Cat),e(sS,zLe),e(zLe,wat),e(sS,Aat),e(Cr,Lat),e(Cr,aa),M(lS,aa,null),e(aa,yat),e(aa,WLe),e(WLe,xat),e(aa,$at),e(aa,km),e(km,kat),e(km,QLe),e(QLe,Sat),e(km,Rat),e(km,Wte),e(Wte,Pat),e(km,Bat),e(aa,Iat),M(jA,aa,null),e(Cr,Nat),e(Cr,Zr),M(iS,Zr,null),e(Zr,qat),e(Zr,ULe),e(ULe,jat),e(Zr,Dat),e(Zr,In),e(In,Gat),e(In,HLe),e(HLe,Oat),e(In,Vat),e(In,JLe),e(JLe,Xat),e(In,zat),e(In,YLe),e(YLe,Wat),e(In,Qat),e(Zr,Uat),e(Zr,Se),e(Se,DA),e(DA,KLe),e(KLe,Hat),e(DA,Jat),e(DA,Qte),e(Qte,Yat),e(DA,Kat),e(Se,Zat),e(Se,GA),e(GA,ZLe),e(ZLe,ent),e(GA,ont),e(GA,Ute),e(Ute,rnt),e(GA,tnt),e(Se,ant),e(Se,OA),e(OA,eye),e(eye,nnt),e(OA,snt),e(OA,Hte),e(Hte,lnt),e(OA,int),e(Se,dnt),e(Se,VA),e(VA,oye),e(oye,cnt),e(VA,mnt),e(VA,Jte),e(Jte,fnt),e(VA,gnt),e(Se,hnt),e(Se,XA),e(XA,rye),e(rye,unt),e(XA,pnt),e(XA,Yte),e(Yte,_nt),e(XA,bnt),e(Se,vnt),e(Se,zA),e(zA,tye),e(tye,Fnt),e(zA,Tnt),e(zA,Kte),e(Kte,Mnt),e(zA,Ent),e(Se,Cnt),e(Se,WA),e(WA,aye),e(aye,wnt),e(WA,Ant),e(WA,Zte),e(Zte,Lnt),e(WA,ynt),e(Se,xnt),e(Se,QA),e(QA,nye),e(nye,$nt),e(QA,knt),e(QA,eae),e(eae,Snt),e(QA,Rnt),e(Se,Pnt),e(Se,UA),e(UA,sye),e(sye,Bnt),e(UA,Int),e(UA,oae),e(oae,Nnt),e(UA,qnt),e(Se,jnt),e(Se,HA),e(HA,lye),e(lye,Dnt),e(HA,Gnt),e(HA,rae),e(rae,Ont),e(HA,Vnt),e(Zr,Xnt),M(JA,Zr,null),b(m,lJe,_),b(m,Sm,_),e(Sm,YA),e(YA,iye),M(dS,iye,null),e(Sm,znt),e(Sm,dye),e(dye,Wnt),b(m,iJe,_),b(m,wr,_),M(cS,wr,null),e(wr,Qnt),e(wr,Rm),e(Rm,Unt),e(Rm,tae),e(tae,Hnt),e(Rm,Jnt),e(Rm,aae),e(aae,Ynt),e(Rm,Knt),e(wr,Znt),e(wr,mS),e(mS,est),e(mS,cye),e(cye,ost),e(mS,rst),e(wr,tst),e(wr,na),M(fS,na,null),e(na,ast),e(na,mye),e(mye,nst),e(na,sst),e(na,Pm),e(Pm,lst),e(Pm,fye),e(fye,ist),e(Pm,dst),e(Pm,nae),e(nae,cst),e(Pm,mst),e(na,fst),M(KA,na,null),e(wr,gst),e(wr,et),M(gS,et,null),e(et,hst),e(et,gye),e(gye,ust),e(et,pst),e(et,Nn),e(Nn,_st),e(Nn,hye),e(hye,bst),e(Nn,vst),e(Nn,uye),e(uye,Fst),e(Nn,Tst),e(Nn,pye),e(pye,Mst),e(Nn,Est),e(et,Cst),e(et,Re),e(Re,ZA),e(ZA,_ye),e(_ye,wst),e(ZA,Ast),e(ZA,sae),e(sae,Lst),e(ZA,yst),e(Re,xst),e(Re,e7),e(e7,bye),e(bye,$st),e(e7,kst),e(e7,lae),e(lae,Sst),e(e7,Rst),e(Re,Pst),e(Re,o7),e(o7,vye),e(vye,Bst),e(o7,Ist),e(o7,iae),e(iae,Nst),e(o7,qst),e(Re,jst),e(Re,r7),e(r7,Fye),e(Fye,Dst),e(r7,Gst),e(r7,dae),e(dae,Ost),e(r7,Vst),e(Re,Xst),e(Re,t7),e(t7,Tye),e(Tye,zst),e(t7,Wst),e(t7,cae),e(cae,Qst),e(t7,Ust),e(Re,Hst),e(Re,a7),e(a7,Mye),e(Mye,Jst),e(a7,Yst),e(a7,mae),e(mae,Kst),e(a7,Zst),e(Re,elt),e(Re,n7),e(n7,Eye),e(Eye,olt),e(n7,rlt),e(n7,fae),e(fae,tlt),e(n7,alt),e(Re,nlt),e(Re,s7),e(s7,Cye),e(Cye,slt),e(s7,llt),e(s7,gae),e(gae,ilt),e(s7,dlt),e(Re,clt),e(Re,l7),e(l7,wye),e(wye,mlt),e(l7,flt),e(l7,hae),e(hae,glt),e(l7,hlt),e(Re,ult),e(Re,i7),e(i7,Aye),e(Aye,plt),e(i7,_lt),e(i7,uae),e(uae,blt),e(i7,vlt),e(et,Flt),M(d7,et,null),b(m,dJe,_),b(m,Bm,_),e(Bm,c7),e(c7,Lye),M(hS,Lye,null),e(Bm,Tlt),e(Bm,yye),e(yye,Mlt),b(m,cJe,_),b(m,Ar,_),M(uS,Ar,null),e(Ar,Elt),e(Ar,Im),e(Im,Clt),e(Im,pae),e(pae,wlt),e(Im,Alt),e(Im,_ae),e(_ae,Llt),e(Im,ylt),e(Ar,xlt),e(Ar,pS),e(pS,$lt),e(pS,xye),e(xye,klt),e(pS,Slt),e(Ar,Rlt),e(Ar,sa),M(_S,sa,null),e(sa,Plt),e(sa,$ye),e($ye,Blt),e(sa,Ilt),e(sa,Nm),e(Nm,Nlt),e(Nm,kye),e(kye,qlt),e(Nm,jlt),e(Nm,bae),e(bae,Dlt),e(Nm,Glt),e(sa,Olt),M(m7,sa,null),e(Ar,Vlt),e(Ar,ot),M(bS,ot,null),e(ot,Xlt),e(ot,Sye),e(Sye,zlt),e(ot,Wlt),e(ot,qn),e(qn,Qlt),e(qn,Rye),e(Rye,Ult),e(qn,Hlt),e(qn,Pye),e(Pye,Jlt),e(qn,Ylt),e(qn,Bye),e(Bye,Klt),e(qn,Zlt),e(ot,eit),e(ot,Xe),e(Xe,f7),e(f7,Iye),e(Iye,oit),e(f7,rit),e(f7,vae),e(vae,tit),e(f7,ait),e(Xe,nit),e(Xe,g7),e(g7,Nye),e(Nye,sit),e(g7,lit),e(g7,Fae),e(Fae,iit),e(g7,dit),e(Xe,cit),e(Xe,h7),e(h7,qye),e(qye,mit),e(h7,fit),e(h7,Tae),e(Tae,git),e(h7,hit),e(Xe,uit),e(Xe,u7),e(u7,jye),e(jye,pit),e(u7,_it),e(u7,Mae),e(Mae,bit),e(u7,vit),e(Xe,Fit),e(Xe,p7),e(p7,Dye),e(Dye,Tit),e(p7,Mit),e(p7,Eae),e(Eae,Eit),e(p7,Cit),e(Xe,wit),e(Xe,_7),e(_7,Gye),e(Gye,Ait),e(_7,Lit),e(_7,Cae),e(Cae,yit),e(_7,xit),e(Xe,$it),e(Xe,b7),e(b7,Oye),e(Oye,kit),e(b7,Sit),e(b7,wae),e(wae,Rit),e(b7,Pit),e(Xe,Bit),e(Xe,v7),e(v7,Vye),e(Vye,Iit),e(v7,Nit),e(v7,Aae),e(Aae,qit),e(v7,jit),e(ot,Dit),M(F7,ot,null),b(m,mJe,_),b(m,qm,_),e(qm,T7),e(T7,Xye),M(vS,Xye,null),e(qm,Git),e(qm,zye),e(zye,Oit),b(m,fJe,_),b(m,Lr,_),M(FS,Lr,null),e(Lr,Vit),e(Lr,jm),e(jm,Xit),e(jm,Lae),e(Lae,zit),e(jm,Wit),e(jm,yae),e(yae,Qit),e(jm,Uit),e(Lr,Hit),e(Lr,TS),e(TS,Jit),e(TS,Wye),e(Wye,Yit),e(TS,Kit),e(Lr,Zit),e(Lr,la),M(MS,la,null),e(la,edt),e(la,Qye),e(Qye,odt),e(la,rdt),e(la,Dm),e(Dm,tdt),e(Dm,Uye),e(Uye,adt),e(Dm,ndt),e(Dm,xae),e(xae,sdt),e(Dm,ldt),e(la,idt),M(M7,la,null),e(Lr,ddt),e(Lr,rt),M(ES,rt,null),e(rt,cdt),e(rt,Hye),e(Hye,mdt),e(rt,fdt),e(rt,jn),e(jn,gdt),e(jn,Jye),e(Jye,hdt),e(jn,udt),e(jn,Yye),e(Yye,pdt),e(jn,_dt),e(jn,Kye),e(Kye,bdt),e(jn,vdt),e(rt,Fdt),e(rt,ze),e(ze,E7),e(E7,Zye),e(Zye,Tdt),e(E7,Mdt),e(E7,$ae),e($ae,Edt),e(E7,Cdt),e(ze,wdt),e(ze,C7),e(C7,e8e),e(e8e,Adt),e(C7,Ldt),e(C7,kae),e(kae,ydt),e(C7,xdt),e(ze,$dt),e(ze,w7),e(w7,o8e),e(o8e,kdt),e(w7,Sdt),e(w7,Sae),e(Sae,Rdt),e(w7,Pdt),e(ze,Bdt),e(ze,A7),e(A7,r8e),e(r8e,Idt),e(A7,Ndt),e(A7,Rae),e(Rae,qdt),e(A7,jdt),e(ze,Ddt),e(ze,L7),e(L7,t8e),e(t8e,Gdt),e(L7,Odt),e(L7,Pae),e(Pae,Vdt),e(L7,Xdt),e(ze,zdt),e(ze,y7),e(y7,a8e),e(a8e,Wdt),e(y7,Qdt),e(y7,Bae),e(Bae,Udt),e(y7,Hdt),e(ze,Jdt),e(ze,x7),e(x7,n8e),e(n8e,Ydt),e(x7,Kdt),e(x7,Iae),e(Iae,Zdt),e(x7,ect),e(ze,oct),e(ze,$7),e($7,s8e),e(s8e,rct),e($7,tct),e($7,Nae),e(Nae,act),e($7,nct),e(rt,sct),M(k7,rt,null),b(m,gJe,_),b(m,Gm,_),e(Gm,S7),e(S7,l8e),M(CS,l8e,null),e(Gm,lct),e(Gm,i8e),e(i8e,ict),b(m,hJe,_),b(m,yr,_),M(wS,yr,null),e(yr,dct),e(yr,Om),e(Om,cct),e(Om,qae),e(qae,mct),e(Om,fct),e(Om,jae),e(jae,gct),e(Om,hct),e(yr,uct),e(yr,AS),e(AS,pct),e(AS,d8e),e(d8e,_ct),e(AS,bct),e(yr,vct),e(yr,ia),M(LS,ia,null),e(ia,Fct),e(ia,c8e),e(c8e,Tct),e(ia,Mct),e(ia,Vm),e(Vm,Ect),e(Vm,m8e),e(m8e,Cct),e(Vm,wct),e(Vm,Dae),e(Dae,Act),e(Vm,Lct),e(ia,yct),M(R7,ia,null),e(yr,xct),e(yr,tt),M(yS,tt,null),e(tt,$ct),e(tt,f8e),e(f8e,kct),e(tt,Sct),e(tt,Dn),e(Dn,Rct),e(Dn,g8e),e(g8e,Pct),e(Dn,Bct),e(Dn,h8e),e(h8e,Ict),e(Dn,Nct),e(Dn,u8e),e(u8e,qct),e(Dn,jct),e(tt,Dct),e(tt,p8e),e(p8e,P7),e(P7,_8e),e(_8e,Gct),e(P7,Oct),e(P7,Gae),e(Gae,Vct),e(P7,Xct),e(tt,zct),M(B7,tt,null),b(m,uJe,_),b(m,Xm,_),e(Xm,I7),e(I7,b8e),M(xS,b8e,null),e(Xm,Wct),e(Xm,v8e),e(v8e,Qct),b(m,pJe,_),b(m,xr,_),M($S,xr,null),e(xr,Uct),e(xr,zm),e(zm,Hct),e(zm,Oae),e(Oae,Jct),e(zm,Yct),e(zm,Vae),e(Vae,Kct),e(zm,Zct),e(xr,emt),e(xr,kS),e(kS,omt),e(kS,F8e),e(F8e,rmt),e(kS,tmt),e(xr,amt),e(xr,da),M(SS,da,null),e(da,nmt),e(da,T8e),e(T8e,smt),e(da,lmt),e(da,Wm),e(Wm,imt),e(Wm,M8e),e(M8e,dmt),e(Wm,cmt),e(Wm,Xae),e(Xae,mmt),e(Wm,fmt),e(da,gmt),M(N7,da,null),e(xr,hmt),e(xr,at),M(RS,at,null),e(at,umt),e(at,E8e),e(E8e,pmt),e(at,_mt),e(at,Gn),e(Gn,bmt),e(Gn,C8e),e(C8e,vmt),e(Gn,Fmt),e(Gn,w8e),e(w8e,Tmt),e(Gn,Mmt),e(Gn,A8e),e(A8e,Emt),e(Gn,Cmt),e(at,wmt),e(at,PS),e(PS,q7),e(q7,L8e),e(L8e,Amt),e(q7,Lmt),e(q7,zae),e(zae,ymt),e(q7,xmt),e(PS,$mt),e(PS,j7),e(j7,y8e),e(y8e,kmt),e(j7,Smt),e(j7,Wae),e(Wae,Rmt),e(j7,Pmt),e(at,Bmt),M(D7,at,null),b(m,_Je,_),b(m,Qm,_),e(Qm,G7),e(G7,x8e),M(BS,x8e,null),e(Qm,Imt),e(Qm,$8e),e($8e,Nmt),b(m,bJe,_),b(m,$r,_),M(IS,$r,null),e($r,qmt),e($r,Um),e(Um,jmt),e(Um,Qae),e(Qae,Dmt),e(Um,Gmt),e(Um,Uae),e(Uae,Omt),e(Um,Vmt),e($r,Xmt),e($r,NS),e(NS,zmt),e(NS,k8e),e(k8e,Wmt),e(NS,Qmt),e($r,Umt),e($r,ca),M(qS,ca,null),e(ca,Hmt),e(ca,S8e),e(S8e,Jmt),e(ca,Ymt),e(ca,Hm),e(Hm,Kmt),e(Hm,R8e),e(R8e,Zmt),e(Hm,eft),e(Hm,Hae),e(Hae,oft),e(Hm,rft),e(ca,tft),M(O7,ca,null),e($r,aft),e($r,nt),M(jS,nt,null),e(nt,nft),e(nt,P8e),e(P8e,sft),e(nt,lft),e(nt,On),e(On,ift),e(On,B8e),e(B8e,dft),e(On,cft),e(On,I8e),e(I8e,mft),e(On,fft),e(On,N8e),e(N8e,gft),e(On,hft),e(nt,uft),e(nt,q8e),e(q8e,V7),e(V7,j8e),e(j8e,pft),e(V7,_ft),e(V7,Jae),e(Jae,bft),e(V7,vft),e(nt,Fft),M(X7,nt,null),vJe=!0},p(m,[_]){const DS={};_&2&&(DS.$$scope={dirty:_,ctx:m}),af.$set(DS);const D8e={};_&2&&(D8e.$$scope={dirty:_,ctx:m}),Th.$set(D8e);const G8e={};_&2&&(G8e.$$scope={dirty:_,ctx:m}),tu.$set(G8e);const O8e={};_&2&&(O8e.$$scope={dirty:_,ctx:m}),Xu.$set(O8e);const GS={};_&2&&(GS.$$scope={dirty:_,ctx:m}),zu.$set(GS);const V8e={};_&2&&(V8e.$$scope={dirty:_,ctx:m}),hp.$set(V8e);const Vn={};_&2&&(Vn.$$scope={dirty:_,ctx:m}),up.$set(Vn);const X8e={};_&2&&(X8e.$$scope={dirty:_,ctx:m}),bp.$set(X8e);const z8e={};_&2&&(z8e.$$scope={dirty:_,ctx:m}),L2.$set(z8e);const W8e={};_&2&&(W8e.$$scope={dirty:_,ctx:m}),x2.$set(W8e);const OS={};_&2&&(OS.$$scope={dirty:_,ctx:m}),Cb.$set(OS);const Q8e={};_&2&&(Q8e.$$scope={dirty:_,ctx:m}),Ab.$set(Q8e);const VS={};_&2&&(VS.$$scope={dirty:_,ctx:m}),hv.$set(VS);const U8e={};_&2&&(U8e.$$scope={dirty:_,ctx:m}),pv.$set(U8e);const XS={};_&2&&(XS.$$scope={dirty:_,ctx:m}),r1.$set(XS);const H8e={};_&2&&(H8e.$$scope={dirty:_,ctx:m}),a1.$set(H8e);const J8e={};_&2&&(J8e.$$scope={dirty:_,ctx:m}),w1.$set(J8e);const Y8e={};_&2&&(Y8e.$$scope={dirty:_,ctx:m}),L1.$set(Y8e);const Jm={};_&2&&(Jm.$$scope={dirty:_,ctx:m}),LF.$set(Jm);const K8e={};_&2&&(K8e.$$scope={dirty:_,ctx:m}),xF.$set(K8e);const Z8e={};_&2&&(Z8e.$$scope={dirty:_,ctx:m}),iT.$set(Z8e);const e9e={};_&2&&(e9e.$$scope={dirty:_,ctx:m}),cT.$set(e9e);const zS={};_&2&&(zS.$$scope={dirty:_,ctx:m}),bT.$set(zS);const o9e={};_&2&&(o9e.$$scope={dirty:_,ctx:m}),FT.$set(o9e);const r9e={};_&2&&(r9e.$$scope={dirty:_,ctx:m}),nM.$set(r9e);const t9e={};_&2&&(t9e.$$scope={dirty:_,ctx:m}),lM.$set(t9e);const dt={};_&2&&(dt.$$scope={dirty:_,ctx:m}),KM.$set(dt);const WS={};_&2&&(WS.$$scope={dirty:_,ctx:m}),eE.$set(WS);const a9e={};_&2&&(a9e.$$scope={dirty:_,ctx:m}),tE.$set(a9e);const QS={};_&2&&(QS.$$scope={dirty:_,ctx:m}),nE.$set(QS);const n9e={};_&2&&(n9e.$$scope={dirty:_,ctx:m}),TE.$set(n9e);const ct={};_&2&&(ct.$$scope={dirty:_,ctx:m}),EE.$set(ct);const s9e={};_&2&&(s9e.$$scope={dirty:_,ctx:m}),AE.$set(s9e);const Ym={};_&2&&(Ym.$$scope={dirty:_,ctx:m}),yE.$set(Ym);const l9e={};_&2&&(l9e.$$scope={dirty:_,ctx:m}),kE.$set(l9e);const i9e={};_&2&&(i9e.$$scope={dirty:_,ctx:m}),RE.$set(i9e);const L={};_&2&&(L.$$scope={dirty:_,ctx:m}),IE.$set(L);const z7={};_&2&&(z7.$$scope={dirty:_,ctx:m}),qE.$set(z7);const d9e={};_&2&&(d9e.$$scope={dirty:_,ctx:m}),HE.$set(d9e);const c9e={};_&2&&(c9e.$$scope={dirty:_,ctx:m}),YE.$set(c9e);const W7={};_&2&&(W7.$$scope={dirty:_,ctx:m}),a4.$set(W7);const m9e={};_&2&&(m9e.$$scope={dirty:_,ctx:m}),s4.$set(m9e);const f9e={};_&2&&(f9e.$$scope={dirty:_,ctx:m}),b4.$set(f9e);const Q7={};_&2&&(Q7.$$scope={dirty:_,ctx:m}),F4.$set(Q7);const g9e={};_&2&&(g9e.$$scope={dirty:_,ctx:m}),C4.$set(g9e);const h9e={};_&2&&(h9e.$$scope={dirty:_,ctx:m}),A4.$set(h9e);const U7={};_&2&&(U7.$$scope={dirty:_,ctx:m}),R4.$set(U7);const u9e={};_&2&&(u9e.$$scope={dirty:_,ctx:m}),B4.$set(u9e);const p9e={};_&2&&(p9e.$$scope={dirty:_,ctx:m}),G4.$set(p9e);const H7={};_&2&&(H7.$$scope={dirty:_,ctx:m}),V4.$set(H7);const _9e={};_&2&&(_9e.$$scope={dirty:_,ctx:m}),Q4.$set(_9e);const b9e={};_&2&&(b9e.$$scope={dirty:_,ctx:m}),H4.$set(b9e);const J7={};_&2&&(J7.$$scope={dirty:_,ctx:m}),K4.$set(J7);const v9e={};_&2&&(v9e.$$scope={dirty:_,ctx:m}),eC.$set(v9e);const F9e={};_&2&&(F9e.$$scope={dirty:_,ctx:m}),lC.$set(F9e);const Y7={};_&2&&(Y7.$$scope={dirty:_,ctx:m}),dC.$set(Y7);const T9e={};_&2&&(T9e.$$scope={dirty:_,ctx:m}),fC.$set(T9e);const M9e={};_&2&&(M9e.$$scope={dirty:_,ctx:m}),hC.$set(M9e);const K7={};_&2&&(K7.$$scope={dirty:_,ctx:m}),g3.$set(K7);const E9e={};_&2&&(E9e.$$scope={dirty:_,ctx:m}),u3.$set(E9e);const C9e={};_&2&&(C9e.$$scope={dirty:_,ctx:m}),j3.$set(C9e);const Z7={};_&2&&(Z7.$$scope={dirty:_,ctx:m}),G3.$set(Z7);const w9e={};_&2&&(w9e.$$scope={dirty:_,ctx:m}),r5.$set(w9e);const A9e={};_&2&&(A9e.$$scope={dirty:_,ctx:m}),a5.$set(A9e);const eL={};_&2&&(eL.$$scope={dirty:_,ctx:m}),f5.$set(eL);const L9e={};_&2&&(L9e.$$scope={dirty:_,ctx:m}),h5.$set(L9e);const y9e={};_&2&&(y9e.$$scope={dirty:_,ctx:m}),_5.$set(y9e);const oL={};_&2&&(oL.$$scope={dirty:_,ctx:m}),v5.$set(oL);const x9e={};_&2&&(x9e.$$scope={dirty:_,ctx:m}),D5.$set(x9e);const $9e={};_&2&&($9e.$$scope={dirty:_,ctx:m}),O5.$set($9e);const rL={};_&2&&(rL.$$scope={dirty:_,ctx:m}),Z5.$set(rL);const k9e={};_&2&&(k9e.$$scope={dirty:_,ctx:m}),o0.$set(k9e);const S9e={};_&2&&(S9e.$$scope={dirty:_,ctx:m}),x0.$set(S9e);const tL={};_&2&&(tL.$$scope={dirty:_,ctx:m}),k0.$set(tL);const R9e={};_&2&&(R9e.$$scope={dirty:_,ctx:m}),H0.$set(R9e);const P9e={};_&2&&(P9e.$$scope={dirty:_,ctx:m}),Y0.$set(P9e);const aL={};_&2&&(aL.$$scope={dirty:_,ctx:m}),ew.$set(aL);const B9e={};_&2&&(B9e.$$scope={dirty:_,ctx:m}),rw.$set(B9e);const I9e={};_&2&&(I9e.$$scope={dirty:_,ctx:m}),aw.$set(I9e);const nL={};_&2&&(nL.$$scope={dirty:_,ctx:m}),sw.$set(nL);const N9e={};_&2&&(N9e.$$scope={dirty:_,ctx:m}),yw.$set(N9e);const q9e={};_&2&&(q9e.$$scope={dirty:_,ctx:m}),$w.$set(q9e);const sL={};_&2&&(sL.$$scope={dirty:_,ctx:m}),Kw.$set(sL);const j9e={};_&2&&(j9e.$$scope={dirty:_,ctx:m}),e6.$set(j9e);const D9e={};_&2&&(D9e.$$scope={dirty:_,ctx:m}),r6.$set(D9e);const lL={};_&2&&(lL.$$scope={dirty:_,ctx:m}),a6.$set(lL);const G9e={};_&2&&(G9e.$$scope={dirty:_,ctx:m}),s6.$set(G9e);const O9e={};_&2&&(O9e.$$scope={dirty:_,ctx:m}),i6.$set(O9e);const iL={};_&2&&(iL.$$scope={dirty:_,ctx:m}),I6.$set(iL);const V9e={};_&2&&(V9e.$$scope={dirty:_,ctx:m}),q6.$set(V9e);const X9e={};_&2&&(X9e.$$scope={dirty:_,ctx:m}),H6.$set(X9e);const dL={};_&2&&(dL.$$scope={dirty:_,ctx:m}),Y6.$set(dL);const z9e={};_&2&&(z9e.$$scope={dirty:_,ctx:m}),mA.$set(z9e);const W9e={};_&2&&(W9e.$$scope={dirty:_,ctx:m}),gA.$set(W9e);const cL={};_&2&&(cL.$$scope={dirty:_,ctx:m}),CA.$set(cL);const Q9e={};_&2&&(Q9e.$$scope={dirty:_,ctx:m}),AA.$set(Q9e);const U9e={};_&2&&(U9e.$$scope={dirty:_,ctx:m}),NA.$set(U9e);const mL={};_&2&&(mL.$$scope={dirty:_,ctx:m}),jA.$set(mL);const H9e={};_&2&&(H9e.$$scope={dirty:_,ctx:m}),JA.$set(H9e);const J9e={};_&2&&(J9e.$$scope={dirty:_,ctx:m}),KA.$set(J9e);const fL={};_&2&&(fL.$$scope={dirty:_,ctx:m}),d7.$set(fL);const Y9e={};_&2&&(Y9e.$$scope={dirty:_,ctx:m}),m7.$set(Y9e);const K9e={};_&2&&(K9e.$$scope={dirty:_,ctx:m}),F7.$set(K9e);const gL={};_&2&&(gL.$$scope={dirty:_,ctx:m}),M7.$set(gL);const Z9e={};_&2&&(Z9e.$$scope={dirty:_,ctx:m}),k7.$set(Z9e);const exe={};_&2&&(exe.$$scope={dirty:_,ctx:m}),R7.$set(exe);const hL={};_&2&&(hL.$$scope={dirty:_,ctx:m}),B7.$set(hL);const oxe={};_&2&&(oxe.$$scope={dirty:_,ctx:m}),N7.$set(oxe);const rxe={};_&2&&(rxe.$$scope={dirty:_,ctx:m}),D7.$set(rxe);const uL={};_&2&&(uL.$$scope={dirty:_,ctx:m}),O7.$set(uL);const txe={};_&2&&(txe.$$scope={dirty:_,ctx:m}),X7.$set(txe)},i(m){vJe||(E(d.$$.fragment,m),E(ja.$$.fragment,m),E(v8.$$.fragment,m),E(F8.$$.fragment,m),E(af.$$.fragment,m),E(T8.$$.fragment,m),E(M8.$$.fragment,m),E(w8.$$.fragment,m),E(Th.$$.fragment,m),E(A8.$$.fragment,m),E(L8.$$.fragment,m),E(y8.$$.fragment,m),E(k8.$$.fragment,m),E(tu.$$.fragment,m),E(S8.$$.fragment,m),E(R8.$$.fragment,m),E(P8.$$.fragment,m),E(N8.$$.fragment,m),E(Xu.$$.fragment,m),E(zu.$$.fragment,m),E(q8.$$.fragment,m),E(j8.$$.fragment,m),E(D8.$$.fragment,m),E(V8.$$.fragment,m),E(hp.$$.fragment,m),E(up.$$.fragment,m),E(X8.$$.fragment,m),E(z8.$$.fragment,m),E(W8.$$.fragment,m),E(U8.$$.fragment,m),E(bp.$$.fragment,m),E(H8.$$.fragment,m),E(L2.$$.fragment,m),E(J8.$$.fragment,m),E(Y8.$$.fragment,m),E(Z8.$$.fragment,m),E(x2.$$.fragment,m),E(e9.$$.fragment,m),E(Cb.$$.fragment,m),E(o9.$$.fragment,m),E(r9.$$.fragment,m),E(a9.$$.fragment,m),E(Ab.$$.fragment,m),E(n9.$$.fragment,m),E(hv.$$.fragment,m),E(s9.$$.fragment,m),E(l9.$$.fragment,m),E(d9.$$.fragment,m),E(pv.$$.fragment,m),E(c9.$$.fragment,m),E(r1.$$.fragment,m),E(m9.$$.fragment,m),E(f9.$$.fragment,m),E(h9.$$.fragment,m),E(a1.$$.fragment,m),E(u9.$$.fragment,m),E(w1.$$.fragment,m),E(p9.$$.fragment,m),E(_9.$$.fragment,m),E(v9.$$.fragment,m),E(L1.$$.fragment,m),E(F9.$$.fragment,m),E(LF.$$.fragment,m),E(T9.$$.fragment,m),E(M9.$$.fragment,m),E(C9.$$.fragment,m),E(xF.$$.fragment,m),E(w9.$$.fragment,m),E(iT.$$.fragment,m),E(A9.$$.fragment,m),E(L9.$$.fragment,m),E(x9.$$.fragment,m),E(cT.$$.fragment,m),E($9.$$.fragment,m),E(bT.$$.fragment,m),E(k9.$$.fragment,m),E(S9.$$.fragment,m),E(P9.$$.fragment,m),E(FT.$$.fragment,m),E(B9.$$.fragment,m),E(nM.$$.fragment,m),E(I9.$$.fragment,m),E(N9.$$.fragment,m),E(j9.$$.fragment,m),E(lM.$$.fragment,m),E(D9.$$.fragment,m),E(KM.$$.fragment,m),E(G9.$$.fragment,m),E(O9.$$.fragment,m),E(X9.$$.fragment,m),E(eE.$$.fragment,m),E(z9.$$.fragment,m),E(tE.$$.fragment,m),E(W9.$$.fragment,m),E(Q9.$$.fragment,m),E(H9.$$.fragment,m),E(nE.$$.fragment,m),E(J9.$$.fragment,m),E(TE.$$.fragment,m),E(Y9.$$.fragment,m),E(K9.$$.fragment,m),E(ex.$$.fragment,m),E(EE.$$.fragment,m),E(ox.$$.fragment,m),E(AE.$$.fragment,m),E(rx.$$.fragment,m),E(tx.$$.fragment,m),E(nx.$$.fragment,m),E(yE.$$.fragment,m),E(sx.$$.fragment,m),E(kE.$$.fragment,m),E(lx.$$.fragment,m),E(ix.$$.fragment,m),E(cx.$$.fragment,m),E(RE.$$.fragment,m),E(mx.$$.fragment,m),E(IE.$$.fragment,m),E(fx.$$.fragment,m),E(gx.$$.fragment,m),E(ux.$$.fragment,m),E(qE.$$.fragment,m),E(px.$$.fragment,m),E(HE.$$.fragment,m),E(_x.$$.fragment,m),E(bx.$$.fragment,m),E(Fx.$$.fragment,m),E(YE.$$.fragment,m),E(Tx.$$.fragment,m),E(a4.$$.fragment,m),E(Mx.$$.fragment,m),E(Ex.$$.fragment,m),E(wx.$$.fragment,m),E(s4.$$.fragment,m),E(Ax.$$.fragment,m),E(b4.$$.fragment,m),E(Lx.$$.fragment,m),E(yx.$$.fragment,m),E($x.$$.fragment,m),E(F4.$$.fragment,m),E(kx.$$.fragment,m),E(C4.$$.fragment,m),E(Rx.$$.fragment,m),E(Px.$$.fragment,m),E(Ix.$$.fragment,m),E(A4.$$.fragment,m),E(Nx.$$.fragment,m),E(R4.$$.fragment,m),E(qx.$$.fragment,m),E(jx.$$.fragment,m),E(Gx.$$.fragment,m),E(B4.$$.fragment,m),E(Ox.$$.fragment,m),E(G4.$$.fragment,m),E(Vx.$$.fragment,m),E(Xx.$$.fragment,m),E(Wx.$$.fragment,m),E(V4.$$.fragment,m),E(Qx.$$.fragment,m),E(Q4.$$.fragment,m),E(Hx.$$.fragment,m),E(Jx.$$.fragment,m),E(Kx.$$.fragment,m),E(H4.$$.fragment,m),E(Zx.$$.fragment,m),E(K4.$$.fragment,m),E(e$.$$.fragment,m),E(o$.$$.fragment,m),E(t$.$$.fragment,m),E(eC.$$.fragment,m),E(a$.$$.fragment,m),E(lC.$$.fragment,m),E(n$.$$.fragment,m),E(s$.$$.fragment,m),E(i$.$$.fragment,m),E(dC.$$.fragment,m),E(d$.$$.fragment,m),E(fC.$$.fragment,m),E(c$.$$.fragment,m),E(m$.$$.fragment,m),E(g$.$$.fragment,m),E(hC.$$.fragment,m),E(h$.$$.fragment,m),E(g3.$$.fragment,m),E(u$.$$.fragment,m),E(p$.$$.fragment,m),E(b$.$$.fragment,m),E(u3.$$.fragment,m),E(v$.$$.fragment,m),E(j3.$$.fragment,m),E(F$.$$.fragment,m),E(T$.$$.fragment,m),E(E$.$$.fragment,m),E(G3.$$.fragment,m),E(C$.$$.fragment,m),E(r5.$$.fragment,m),E(w$.$$.fragment,m),E(A$.$$.fragment,m),E(y$.$$.fragment,m),E(a5.$$.fragment,m),E(x$.$$.fragment,m),E(f5.$$.fragment,m),E($$.$$.fragment,m),E(k$.$$.fragment,m),E(R$.$$.fragment,m),E(h5.$$.fragment,m),E(P$.$$.fragment,m),E(_5.$$.fragment,m),E(I$.$$.fragment,m),E(N$.$$.fragment,m),E(j$.$$.fragment,m),E(v5.$$.fragment,m),E(D$.$$.fragment,m),E(D5.$$.fragment,m),E(G$.$$.fragment,m),E(O$.$$.fragment,m),E(X$.$$.fragment,m),E(O5.$$.fragment,m),E(z$.$$.fragment,m),E(Z5.$$.fragment,m),E(W$.$$.fragment,m),E(Q$.$$.fragment,m),E(H$.$$.fragment,m),E(o0.$$.fragment,m),E(J$.$$.fragment,m),E(x0.$$.fragment,m),E(Y$.$$.fragment,m),E(K$.$$.fragment,m),E(ek.$$.fragment,m),E(k0.$$.fragment,m),E(ok.$$.fragment,m),E(H0.$$.fragment,m),E(rk.$$.fragment,m),E(tk.$$.fragment,m),E(nk.$$.fragment,m),E(Y0.$$.fragment,m),E(sk.$$.fragment,m),E(ew.$$.fragment,m),E(ik.$$.fragment,m),E(dk.$$.fragment,m),E(mk.$$.fragment,m),E(rw.$$.fragment,m),E(fk.$$.fragment,m),E(aw.$$.fragment,m),E(gk.$$.fragment,m),E(hk.$$.fragment,m),E(pk.$$.fragment,m),E(sw.$$.fragment,m),E(_k.$$.fragment,m),E(yw.$$.fragment,m),E(bk.$$.fragment,m),E(vk.$$.fragment,m),E(Tk.$$.fragment,m),E($w.$$.fragment,m),E(Mk.$$.fragment,m),E(Kw.$$.fragment,m),E(Ek.$$.fragment,m),E(Ck.$$.fragment,m),E(Ak.$$.fragment,m),E(e6.$$.fragment,m),E(Lk.$$.fragment,m),E(r6.$$.fragment,m),E(yk.$$.fragment,m),E(xk.$$.fragment,m),E(kk.$$.fragment,m),E(a6.$$.fragment,m),E(Sk.$$.fragment,m),E(s6.$$.fragment,m),E(Rk.$$.fragment,m),E(Pk.$$.fragment,m),E(Ik.$$.fragment,m),E(i6.$$.fragment,m),E(Nk.$$.fragment,m),E(I6.$$.fragment,m),E(qk.$$.fragment,m),E(jk.$$.fragment,m),E(Gk.$$.fragment,m),E(q6.$$.fragment,m),E(Ok.$$.fragment,m),E(H6.$$.fragment,m),E(Vk.$$.fragment,m),E(Xk.$$.fragment,m),E(Wk.$$.fragment,m),E(Y6.$$.fragment,m),E(Qk.$$.fragment,m),E(mA.$$.fragment,m),E(Uk.$$.fragment,m),E(Hk.$$.fragment,m),E(Yk.$$.fragment,m),E(gA.$$.fragment,m),E(Kk.$$.fragment,m),E(CA.$$.fragment,m),E(Zk.$$.fragment,m),E(eS.$$.fragment,m),E(rS.$$.fragment,m),E(AA.$$.fragment,m),E(tS.$$.fragment,m),E(NA.$$.fragment,m),E(aS.$$.fragment,m),E(nS.$$.fragment,m),E(lS.$$.fragment,m),E(jA.$$.fragment,m),E(iS.$$.fragment,m),E(JA.$$.fragment,m),E(dS.$$.fragment,m),E(cS.$$.fragment,m),E(fS.$$.fragment,m),E(KA.$$.fragment,m),E(gS.$$.fragment,m),E(d7.$$.fragment,m),E(hS.$$.fragment,m),E(uS.$$.fragment,m),E(_S.$$.fragment,m),E(m7.$$.fragment,m),E(bS.$$.fragment,m),E(F7.$$.fragment,m),E(vS.$$.fragment,m),E(FS.$$.fragment,m),E(MS.$$.fragment,m),E(M7.$$.fragment,m),E(ES.$$.fragment,m),E(k7.$$.fragment,m),E(CS.$$.fragment,m),E(wS.$$.fragment,m),E(LS.$$.fragment,m),E(R7.$$.fragment,m),E(yS.$$.fragment,m),E(B7.$$.fragment,m),E(xS.$$.fragment,m),E($S.$$.fragment,m),E(SS.$$.fragment,m),E(N7.$$.fragment,m),E(RS.$$.fragment,m),E(D7.$$.fragment,m),E(BS.$$.fragment,m),E(IS.$$.fragment,m),E(qS.$$.fragment,m),E(O7.$$.fragment,m),E(jS.$$.fragment,m),E(X7.$$.fragment,m),vJe=!0)},o(m){C(d.$$.fragment,m),C(ja.$$.fragment,m),C(v8.$$.fragment,m),C(F8.$$.fragment,m),C(af.$$.fragment,m),C(T8.$$.fragment,m),C(M8.$$.fragment,m),C(w8.$$.fragment,m),C(Th.$$.fragment,m),C(A8.$$.fragment,m),C(L8.$$.fragment,m),C(y8.$$.fragment,m),C(k8.$$.fragment,m),C(tu.$$.fragment,m),C(S8.$$.fragment,m),C(R8.$$.fragment,m),C(P8.$$.fragment,m),C(N8.$$.fragment,m),C(Xu.$$.fragment,m),C(zu.$$.fragment,m),C(q8.$$.fragment,m),C(j8.$$.fragment,m),C(D8.$$.fragment,m),C(V8.$$.fragment,m),C(hp.$$.fragment,m),C(up.$$.fragment,m),C(X8.$$.fragment,m),C(z8.$$.fragment,m),C(W8.$$.fragment,m),C(U8.$$.fragment,m),C(bp.$$.fragment,m),C(H8.$$.fragment,m),C(L2.$$.fragment,m),C(J8.$$.fragment,m),C(Y8.$$.fragment,m),C(Z8.$$.fragment,m),C(x2.$$.fragment,m),C(e9.$$.fragment,m),C(Cb.$$.fragment,m),C(o9.$$.fragment,m),C(r9.$$.fragment,m),C(a9.$$.fragment,m),C(Ab.$$.fragment,m),C(n9.$$.fragment,m),C(hv.$$.fragment,m),C(s9.$$.fragment,m),C(l9.$$.fragment,m),C(d9.$$.fragment,m),C(pv.$$.fragment,m),C(c9.$$.fragment,m),C(r1.$$.fragment,m),C(m9.$$.fragment,m),C(f9.$$.fragment,m),C(h9.$$.fragment,m),C(a1.$$.fragment,m),C(u9.$$.fragment,m),C(w1.$$.fragment,m),C(p9.$$.fragment,m),C(_9.$$.fragment,m),C(v9.$$.fragment,m),C(L1.$$.fragment,m),C(F9.$$.fragment,m),C(LF.$$.fragment,m),C(T9.$$.fragment,m),C(M9.$$.fragment,m),C(C9.$$.fragment,m),C(xF.$$.fragment,m),C(w9.$$.fragment,m),C(iT.$$.fragment,m),C(A9.$$.fragment,m),C(L9.$$.fragment,m),C(x9.$$.fragment,m),C(cT.$$.fragment,m),C($9.$$.fragment,m),C(bT.$$.fragment,m),C(k9.$$.fragment,m),C(S9.$$.fragment,m),C(P9.$$.fragment,m),C(FT.$$.fragment,m),C(B9.$$.fragment,m),C(nM.$$.fragment,m),C(I9.$$.fragment,m),C(N9.$$.fragment,m),C(j9.$$.fragment,m),C(lM.$$.fragment,m),C(D9.$$.fragment,m),C(KM.$$.fragment,m),C(G9.$$.fragment,m),C(O9.$$.fragment,m),C(X9.$$.fragment,m),C(eE.$$.fragment,m),C(z9.$$.fragment,m),C(tE.$$.fragment,m),C(W9.$$.fragment,m),C(Q9.$$.fragment,m),C(H9.$$.fragment,m),C(nE.$$.fragment,m),C(J9.$$.fragment,m),C(TE.$$.fragment,m),C(Y9.$$.fragment,m),C(K9.$$.fragment,m),C(ex.$$.fragment,m),C(EE.$$.fragment,m),C(ox.$$.fragment,m),C(AE.$$.fragment,m),C(rx.$$.fragment,m),C(tx.$$.fragment,m),C(nx.$$.fragment,m),C(yE.$$.fragment,m),C(sx.$$.fragment,m),C(kE.$$.fragment,m),C(lx.$$.fragment,m),C(ix.$$.fragment,m),C(cx.$$.fragment,m),C(RE.$$.fragment,m),C(mx.$$.fragment,m),C(IE.$$.fragment,m),C(fx.$$.fragment,m),C(gx.$$.fragment,m),C(ux.$$.fragment,m),C(qE.$$.fragment,m),C(px.$$.fragment,m),C(HE.$$.fragment,m),C(_x.$$.fragment,m),C(bx.$$.fragment,m),C(Fx.$$.fragment,m),C(YE.$$.fragment,m),C(Tx.$$.fragment,m),C(a4.$$.fragment,m),C(Mx.$$.fragment,m),C(Ex.$$.fragment,m),C(wx.$$.fragment,m),C(s4.$$.fragment,m),C(Ax.$$.fragment,m),C(b4.$$.fragment,m),C(Lx.$$.fragment,m),C(yx.$$.fragment,m),C($x.$$.fragment,m),C(F4.$$.fragment,m),C(kx.$$.fragment,m),C(C4.$$.fragment,m),C(Rx.$$.fragment,m),C(Px.$$.fragment,m),C(Ix.$$.fragment,m),C(A4.$$.fragment,m),C(Nx.$$.fragment,m),C(R4.$$.fragment,m),C(qx.$$.fragment,m),C(jx.$$.fragment,m),C(Gx.$$.fragment,m),C(B4.$$.fragment,m),C(Ox.$$.fragment,m),C(G4.$$.fragment,m),C(Vx.$$.fragment,m),C(Xx.$$.fragment,m),C(Wx.$$.fragment,m),C(V4.$$.fragment,m),C(Qx.$$.fragment,m),C(Q4.$$.fragment,m),C(Hx.$$.fragment,m),C(Jx.$$.fragment,m),C(Kx.$$.fragment,m),C(H4.$$.fragment,m),C(Zx.$$.fragment,m),C(K4.$$.fragment,m),C(e$.$$.fragment,m),C(o$.$$.fragment,m),C(t$.$$.fragment,m),C(eC.$$.fragment,m),C(a$.$$.fragment,m),C(lC.$$.fragment,m),C(n$.$$.fragment,m),C(s$.$$.fragment,m),C(i$.$$.fragment,m),C(dC.$$.fragment,m),C(d$.$$.fragment,m),C(fC.$$.fragment,m),C(c$.$$.fragment,m),C(m$.$$.fragment,m),C(g$.$$.fragment,m),C(hC.$$.fragment,m),C(h$.$$.fragment,m),C(g3.$$.fragment,m),C(u$.$$.fragment,m),C(p$.$$.fragment,m),C(b$.$$.fragment,m),C(u3.$$.fragment,m),C(v$.$$.fragment,m),C(j3.$$.fragment,m),C(F$.$$.fragment,m),C(T$.$$.fragment,m),C(E$.$$.fragment,m),C(G3.$$.fragment,m),C(C$.$$.fragment,m),C(r5.$$.fragment,m),C(w$.$$.fragment,m),C(A$.$$.fragment,m),C(y$.$$.fragment,m),C(a5.$$.fragment,m),C(x$.$$.fragment,m),C(f5.$$.fragment,m),C($$.$$.fragment,m),C(k$.$$.fragment,m),C(R$.$$.fragment,m),C(h5.$$.fragment,m),C(P$.$$.fragment,m),C(_5.$$.fragment,m),C(I$.$$.fragment,m),C(N$.$$.fragment,m),C(j$.$$.fragment,m),C(v5.$$.fragment,m),C(D$.$$.fragment,m),C(D5.$$.fragment,m),C(G$.$$.fragment,m),C(O$.$$.fragment,m),C(X$.$$.fragment,m),C(O5.$$.fragment,m),C(z$.$$.fragment,m),C(Z5.$$.fragment,m),C(W$.$$.fragment,m),C(Q$.$$.fragment,m),C(H$.$$.fragment,m),C(o0.$$.fragment,m),C(J$.$$.fragment,m),C(x0.$$.fragment,m),C(Y$.$$.fragment,m),C(K$.$$.fragment,m),C(ek.$$.fragment,m),C(k0.$$.fragment,m),C(ok.$$.fragment,m),C(H0.$$.fragment,m),C(rk.$$.fragment,m),C(tk.$$.fragment,m),C(nk.$$.fragment,m),C(Y0.$$.fragment,m),C(sk.$$.fragment,m),C(ew.$$.fragment,m),C(ik.$$.fragment,m),C(dk.$$.fragment,m),C(mk.$$.fragment,m),C(rw.$$.fragment,m),C(fk.$$.fragment,m),C(aw.$$.fragment,m),C(gk.$$.fragment,m),C(hk.$$.fragment,m),C(pk.$$.fragment,m),C(sw.$$.fragment,m),C(_k.$$.fragment,m),C(yw.$$.fragment,m),C(bk.$$.fragment,m),C(vk.$$.fragment,m),C(Tk.$$.fragment,m),C($w.$$.fragment,m),C(Mk.$$.fragment,m),C(Kw.$$.fragment,m),C(Ek.$$.fragment,m),C(Ck.$$.fragment,m),C(Ak.$$.fragment,m),C(e6.$$.fragment,m),C(Lk.$$.fragment,m),C(r6.$$.fragment,m),C(yk.$$.fragment,m),C(xk.$$.fragment,m),C(kk.$$.fragment,m),C(a6.$$.fragment,m),C(Sk.$$.fragment,m),C(s6.$$.fragment,m),C(Rk.$$.fragment,m),C(Pk.$$.fragment,m),C(Ik.$$.fragment,m),C(i6.$$.fragment,m),C(Nk.$$.fragment,m),C(I6.$$.fragment,m),C(qk.$$.fragment,m),C(jk.$$.fragment,m),C(Gk.$$.fragment,m),C(q6.$$.fragment,m),C(Ok.$$.fragment,m),C(H6.$$.fragment,m),C(Vk.$$.fragment,m),C(Xk.$$.fragment,m),C(Wk.$$.fragment,m),C(Y6.$$.fragment,m),C(Qk.$$.fragment,m),C(mA.$$.fragment,m),C(Uk.$$.fragment,m),C(Hk.$$.fragment,m),C(Yk.$$.fragment,m),C(gA.$$.fragment,m),C(Kk.$$.fragment,m),C(CA.$$.fragment,m),C(Zk.$$.fragment,m),C(eS.$$.fragment,m),C(rS.$$.fragment,m),C(AA.$$.fragment,m),C(tS.$$.fragment,m),C(NA.$$.fragment,m),C(aS.$$.fragment,m),C(nS.$$.fragment,m),C(lS.$$.fragment,m),C(jA.$$.fragment,m),C(iS.$$.fragment,m),C(JA.$$.fragment,m),C(dS.$$.fragment,m),C(cS.$$.fragment,m),C(fS.$$.fragment,m),C(KA.$$.fragment,m),C(gS.$$.fragment,m),C(d7.$$.fragment,m),C(hS.$$.fragment,m),C(uS.$$.fragment,m),C(_S.$$.fragment,m),C(m7.$$.fragment,m),C(bS.$$.fragment,m),C(F7.$$.fragment,m),C(vS.$$.fragment,m),C(FS.$$.fragment,m),C(MS.$$.fragment,m),C(M7.$$.fragment,m),C(ES.$$.fragment,m),C(k7.$$.fragment,m),C(CS.$$.fragment,m),C(wS.$$.fragment,m),C(LS.$$.fragment,m),C(R7.$$.fragment,m),C(yS.$$.fragment,m),C(B7.$$.fragment,m),C(xS.$$.fragment,m),C($S.$$.fragment,m),C(SS.$$.fragment,m),C(N7.$$.fragment,m),C(RS.$$.fragment,m),C(D7.$$.fragment,m),C(BS.$$.fragment,m),C(IS.$$.fragment,m),C(qS.$$.fragment,m),C(O7.$$.fragment,m),C(jS.$$.fragment,m),C(X7.$$.fragment,m),vJe=!1},d(m){t(g),m&&t(v),m&&t(u),w(d),m&&t(Zm),m&&t(mt),m&&t(Oe),m&&t(Qe),m&&t(of),w(ja,m),m&&t(Ue),m&&t(Ae),m&&t(Lo),m&&t(Da),m&&t(cUe),m&&t(Hi),w(v8),m&&t(mUe),m&&t(Un),m&&t(fUe),w(F8,m),m&&t(gUe),m&&t(hP),m&&t(hUe),w(af,m),m&&t(uUe),m&&t(Ji),w(T8),m&&t(pUe),m&&t(yo),w(M8),w(w8),w(Th),w(A8),m&&t(_Ue),m&&t(Ki),w(L8),m&&t(bUe),m&&t(xo),w(y8),w(k8),w(tu),w(S8),m&&t(vUe),m&&t(Zi),w(R8),m&&t(FUe),m&&t($o),w(P8),w(N8),w(Xu),w(zu),w(q8),m&&t(TUe),m&&t(ed),w(j8),m&&t(MUe),m&&t(ko),w(D8),w(V8),w(hp),w(up),w(X8),m&&t(EUe),m&&t(rd),w(z8),m&&t(CUe),m&&t(So),w(W8),w(U8),w(bp),w(H8),w(L2),m&&t(wUe),m&&t(nd),w(J8),m&&t(AUe),m&&t(Ro),w(Y8),w(Z8),w(x2),w(e9),w(Cb),m&&t(LUe),m&&t(id),w(o9),m&&t(yUe),m&&t(Po),w(r9),w(a9),w(Ab),w(n9),w(hv),m&&t(xUe),m&&t(md),w(s9),m&&t($Ue),m&&t(Bo),w(l9),w(d9),w(pv),w(c9),w(r1),m&&t(kUe),m&&t(hd),w(m9),m&&t(SUe),m&&t(Io),w(f9),w(h9),w(a1),w(u9),w(w1),m&&t(RUe),m&&t(_d),w(p9),m&&t(PUe),m&&t(No),w(_9),w(v9),w(L1),w(F9),w(LF),m&&t(BUe),m&&t(Fd),w(T9),m&&t(IUe),m&&t(qo),w(M9),w(C9),w(xF),w(w9),w(iT),m&&t(NUe),m&&t(Ed),w(A9),m&&t(qUe),m&&t(jo),w(L9),w(x9),w(cT),w($9),w(bT),m&&t(jUe),m&&t(Ad),w(k9),m&&t(DUe),m&&t(Go),w(S9),w(P9),w(FT),w(B9),w(nM),m&&t(GUe),m&&t(xd),w(I9),m&&t(OUe),m&&t(Oo),w(N9),w(j9),w(lM),w(D9),w(KM),m&&t(VUe),m&&t(Sd),w(G9),m&&t(XUe),m&&t(Vo),w(O9),w(X9),w(eE),w(z9),w(tE),m&&t(zUe),m&&t(Bd),w(W9),m&&t(WUe),m&&t(Xo),w(Q9),w(H9),w(nE),w(J9),w(TE),m&&t(QUe),m&&t(qd),w(Y9),m&&t(UUe),m&&t(zo),w(K9),w(ex),w(EE),w(ox),w(AE),m&&t(HUe),m&&t(Gd),w(rx),m&&t(JUe),m&&t(Wo),w(tx),w(nx),w(yE),w(sx),w(kE),m&&t(YUe),m&&t(Xd),w(lx),m&&t(KUe),m&&t(Qo),w(ix),w(cx),w(RE),w(mx),w(IE),m&&t(ZUe),m&&t(Qd),w(fx),m&&t(eHe),m&&t(Uo),w(gx),w(ux),w(qE),w(px),w(HE),m&&t(oHe),m&&t(Jd),w(_x),m&&t(rHe),m&&t(Ho),w(bx),w(Fx),w(YE),w(Tx),w(a4),m&&t(tHe),m&&t(Zd),w(Mx),m&&t(aHe),m&&t(Jo),w(Ex),w(wx),w(s4),w(Ax),w(b4),m&&t(nHe),m&&t(rc),w(Lx),m&&t(sHe),m&&t(Yo),w(yx),w($x),w(F4),w(kx),w(C4),m&&t(lHe),m&&t(nc),w(Rx),m&&t(iHe),m&&t(Ko),w(Px),w(Ix),w(A4),w(Nx),w(R4),m&&t(dHe),m&&t(ic),w(qx),m&&t(cHe),m&&t(Zo),w(jx),w(Gx),w(B4),w(Ox),w(G4),m&&t(mHe),m&&t(mc),w(Vx),m&&t(fHe),m&&t(er),w(Xx),w(Wx),w(V4),w(Qx),w(Q4),m&&t(gHe),m&&t(hc),w(Hx),m&&t(hHe),m&&t(or),w(Jx),w(Kx),w(H4),w(Zx),w(K4),m&&t(uHe),m&&t(_c),w(e$),m&&t(pHe),m&&t(rr),w(o$),w(t$),w(eC),w(a$),w(lC),m&&t(_He),m&&t(Fc),w(n$),m&&t(bHe),m&&t(tr),w(s$),w(i$),w(dC),w(d$),w(fC),m&&t(vHe),m&&t(Ec),w(c$),m&&t(FHe),m&&t(ar),w(m$),w(g$),w(hC),w(h$),w(g3),m&&t(THe),m&&t(Ac),w(u$),m&&t(MHe),m&&t(nr),w(p$),w(b$),w(u3),w(v$),w(j3),m&&t(EHe),m&&t(xc),w(F$),m&&t(CHe),m&&t(sr),w(T$),w(E$),w(G3),w(C$),w(r5),m&&t(wHe),m&&t(Sc),w(w$),m&&t(AHe),m&&t(lr),w(A$),w(y$),w(a5),w(x$),w(f5),m&&t(LHe),m&&t(Bc),w($$),m&&t(yHe),m&&t(ir),w(k$),w(R$),w(h5),w(P$),w(_5),m&&t(xHe),m&&t(qc),w(I$),m&&t($He),m&&t(dr),w(N$),w(j$),w(v5),w(D$),w(D5),m&&t(kHe),m&&t(Gc),w(G$),m&&t(SHe),m&&t(cr),w(O$),w(X$),w(O5),w(z$),w(Z5),m&&t(RHe),m&&t(Xc),w(W$),m&&t(PHe),m&&t(mr),w(Q$),w(H$),w(o0),w(J$),w(x0),m&&t(BHe),m&&t(Qc),w(Y$),m&&t(IHe),m&&t(fr),w(K$),w(ek),w(k0),w(ok),w(H0),m&&t(NHe),m&&t(Jc),w(rk),m&&t(qHe),m&&t(gr),w(tk),w(nk),w(Y0),w(sk),w(ew),m&&t(jHe),m&&t(Zc),w(ik),m&&t(DHe),m&&t(hr),w(dk),w(mk),w(rw),w(fk),w(aw),m&&t(GHe),m&&t(rm),w(gk),m&&t(OHe),m&&t(ur),w(hk),w(pk),w(sw),w(_k),w(yw),m&&t(VHe),m&&t(nm),w(bk),m&&t(XHe),m&&t(pr),w(vk),w(Tk),w($w),w(Mk),w(Kw),m&&t(zHe),m&&t(im),w(Ek),m&&t(WHe),m&&t(_r),w(Ck),w(Ak),w(e6),w(Lk),w(r6),m&&t(QHe),m&&t(mm),w(yk),m&&t(UHe),m&&t(br),w(xk),w(kk),w(a6),w(Sk),w(s6),m&&t(HHe),m&&t(hm),w(Rk),m&&t(JHe),m&&t(vr),w(Pk),w(Ik),w(i6),w(Nk),w(I6),m&&t(YHe),m&&t(_m),w(qk),m&&t(KHe),m&&t(Fr),w(jk),w(Gk),w(q6),w(Ok),w(H6),m&&t(ZHe),m&&t(Fm),w(Vk),m&&t(eJe),m&&t(Tr),w(Xk),w(Wk),w(Y6),w(Qk),w(mA),m&&t(oJe),m&&t(Em),w(Uk),m&&t(rJe),m&&t(Mr),w(Hk),w(Yk),w(gA),w(Kk),w(CA),m&&t(tJe),m&&t(Am),w(Zk),m&&t(aJe),m&&t(Er),w(eS),w(rS),w(AA),w(tS),w(NA),m&&t(nJe),m&&t(xm),w(aS),m&&t(sJe),m&&t(Cr),w(nS),w(lS),w(jA),w(iS),w(JA),m&&t(lJe),m&&t(Sm),w(dS),m&&t(iJe),m&&t(wr),w(cS),w(fS),w(KA),w(gS),w(d7),m&&t(dJe),m&&t(Bm),w(hS),m&&t(cJe),m&&t(Ar),w(uS),w(_S),w(m7),w(bS),w(F7),m&&t(mJe),m&&t(qm),w(vS),m&&t(fJe),m&&t(Lr),w(FS),w(MS),w(M7),w(ES),w(k7),m&&t(gJe),m&&t(Gm),w(CS),m&&t(hJe),m&&t(yr),w(wS),w(LS),w(R7),w(yS),w(B7),m&&t(uJe),m&&t(Xm),w(xS),m&&t(pJe),m&&t(xr),w($S),w(SS),w(N7),w(RS),w(D7),m&&t(_Je),m&&t(Qm),w(BS),m&&t(bJe),m&&t($r),w(IS),w(qS),w(O7),w(jS),w(X7)}}}const esa={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVideoClassification",title:"AutoModelForVideoClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForVisualQuestionAnswering",title:"AutoModelForVisualQuestionAnswering"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForSemanticSegmentation",title:"TFAutoModelForSemanticSegmentation"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function osa($){return Hta(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class isa extends zta{constructor(g){super();Wta(this,g,osa,Zna,Qta,{})}}export{isa as default,esa as metadata};
