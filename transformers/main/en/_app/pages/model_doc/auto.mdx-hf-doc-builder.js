import{S as zNt,i as WNt,s as QNt,e as a,k as l,w as F,t as o,M as HNt,c as n,d as t,m as i,a as s,x as T,h as r,b as c,G as e,g as b,y as M,q as E,o as C,B as w,v as UNt,L as I}from"../../chunks/vendor-hf-doc-builder.js";import{T as UUr}from"../../chunks/Tip-hf-doc-builder.js";import{D as R}from"../../chunks/Docstring-hf-doc-builder.js";import{C as P}from"../../chunks/CodeBlock-hf-doc-builder.js";import{I as re}from"../../chunks/IconCopyLink-hf-doc-builder.js";import{E as B}from"../../chunks/ExampleCodeBlock-hf-doc-builder.js";function JNt(y){let g,v,u,f,p,d,h,Eo,Fi,Am,at,Ti,Mi,gy,Lm,Oe,We,Ei,Sn,hy,Rn,Pn,uy,Ci,Bn,py,wi,ym,ya;return{c(){g=a("p"),v=o("If your "),u=a("code"),f=o("NewModelConfig"),p=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Eo=o(`, make sure its
`),Fi=a("code"),Am=o("model_type"),at=o(" attribute is set to the same key you use when registering the config (here "),Ti=a("code"),Mi=o('"new-model"'),gy=o(")."),Lm=l(),Oe=a("p"),We=o("Likewise, if your "),Ei=a("code"),Sn=o("NewModel"),hy=o(" is a subclass of "),Rn=a("a"),Pn=o("PreTrainedModel"),uy=o(`, make sure its
`),Ci=a("code"),Bn=o("config_class"),py=o(` attribute is set to the same class you use when registering the model (here
`),wi=a("code"),ym=o("NewModelConfig"),ya=o(")."),this.h()},l(Qe){g=n(Qe,"P",{});var Ae=s(g);v=r(Ae,"If your "),u=n(Ae,"CODE",{});var Vk=s(u);f=r(Vk,"NewModelConfig"),Vk.forEach(t),p=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var Ai=s(d);h=r(Ai,"PretrainedConfig"),Ai.forEach(t),Eo=r(Ae,`, make sure its
`),Fi=n(Ae,"CODE",{});var Xk=s(Fi);Am=r(Xk,"model_type"),Xk.forEach(t),at=r(Ae," attribute is set to the same key you use when registering the config (here "),Ti=n(Ae,"CODE",{});var zk=s(Ti);Mi=r(zk,'"new-model"'),zk.forEach(t),gy=r(Ae,")."),Ae.forEach(t),Lm=i(Qe),Oe=n(Qe,"P",{});var Co=s(Oe);We=r(Co,"Likewise, if your "),Ei=n(Co,"CODE",{});var xa=s(Ei);Sn=r(xa,"NewModel"),xa.forEach(t),hy=r(Co," is a subclass of "),Rn=n(Co,"A",{href:!0});var Wk=s(Rn);Pn=r(Wk,"PreTrainedModel"),Wk.forEach(t),uy=r(Co,`, make sure its
`),Ci=n(Co,"CODE",{});var xm=s(Ci);Bn=r(xm,"config_class"),xm.forEach(t),py=r(Co,` attribute is set to the same class you use when registering the model (here
`),wi=n(Co,"CODE",{});var Qk=s(wi);ym=r(Qk,"NewModelConfig"),Qk.forEach(t),ya=r(Co,")."),Co.forEach(t),this.h()},h(){c(Rn,"href","/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel")},m(Qe,Ae){b(Qe,g,Ae),e(g,v),e(g,u),e(u,f),e(g,p),e(g,d),e(d,h),e(g,Eo),e(g,Fi),e(Fi,Am),e(g,at),e(g,Ti),e(Ti,Mi),e(g,gy),b(Qe,Lm,Ae),b(Qe,Oe,Ae),e(Oe,We),e(Oe,Ei),e(Ei,Sn),e(Oe,hy),e(Oe,Rn),e(Rn,Pn),e(Oe,uy),e(Oe,Ci),e(Ci,Bn),e(Oe,py),e(Oe,wi),e(wi,ym),e(Oe,ya)},d(Qe){Qe&&t(g),Qe&&t(Lm),Qe&&t(Oe)}}}function YNt(y){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function KNt(y){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")

# Download vocabulary from huggingface.co and define model-specific arguments
tokenizer = AutoTokenizer.from_pretrained("roberta-base", add_prefix_space=True)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and define model-specific arguments</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;roberta-base&quot;</span>, add_prefix_space=<span class="hljs-literal">True</span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function ZNt(y){let g,v,u,f,p;return{c(){g=a("p"),v=o("Passing "),u=a("code"),f=o("use_auth_token=True"),p=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),u=n(h,"CODE",{});var Eo=s(u);f=r(Eo,"use_auth_token=True"),Eo.forEach(t),p=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,u),e(u,f),e(g,p)},d(d){d&&t(g)}}}function eqt(y){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function oqt(y){let g,v,u,f,p;return{c(){g=a("p"),v=o("Passing "),u=a("code"),f=o("use_auth_token=True"),p=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),u=n(h,"CODE",{});var Eo=s(u);f=r(Eo,"use_auth_token=True"),Eo.forEach(t),p=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,u),e(u,f),e(g,p)},d(d){d&&t(g)}}}function rqt(y){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function tqt(y){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function aqt(y){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function nqt(y){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function sqt(y){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function lqt(y){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function iqt(y){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function dqt(y){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function cqt(y){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function mqt(y){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function fqt(y){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function gqt(y){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function hqt(y){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function uqt(y){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function pqt(y){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function _qt(y){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function bqt(y){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function vqt(y){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Fqt(y){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Tqt(y){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Mqt(y){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Eqt(y){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Cqt(y){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function wqt(y){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Aqt(y){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Lqt(y){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function yqt(y){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function xqt(y){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("dandelin/vilt-b32-finetuned-vqa")
model = AutoModelForVisualQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function $qt(y){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForVisualQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa")

# Update configuration during loading
model = AutoModelForVisualQuestionAnswering.from_pretrained("dandelin/vilt-b32-finetuned-vqa", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/vilt_tf_model_config.json")
model = AutoModelForVisualQuestionAnswering.from_pretrained(
    "./tf_model/vilt_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVisualQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;dandelin/vilt-b32-finetuned-vqa&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/vilt_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVisualQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/vilt_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function kqt(y){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Sqt(y){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Rqt(y){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Pqt(y){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Bqt(y){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Iqt(y){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Nqt(y){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function qqt(y){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function jqt(y){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Dqt(y){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Gqt(y){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Oqt(y){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Vqt(y){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Xqt(y){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function zqt(y){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Wqt(y){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Qqt(y){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Hqt(y){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Uqt(y){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Jqt(y){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Yqt(y){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Kqt(y){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Zqt(y){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function ejt(y){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function ojt(y){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function rjt(y){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function tjt(y){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function ajt(y){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function njt(y){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function sjt(y){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function ljt(y){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function ijt(y){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function djt(y){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function cjt(y){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function mjt(y){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function fjt(y){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function gjt(y){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function hjt(y){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function ujt(y){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function pjt(y){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function _jt(y){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function bjt(y){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function vjt(y){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Fjt(y){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Tjt(y){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Mjt(y){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Ejt(y){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Cjt(y){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function wjt(y){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Ajt(y){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Ljt(y){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function yjt(y){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function xjt(y){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function $jt(y){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function kjt(y){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Sjt(y){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Rjt(y){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Pjt(y){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Bjt(y){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Ijt(y){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Njt(y){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function qjt(y){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function jjt(y){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Djt(y){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Gjt(y){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Ojt(y){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Vjt(y){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Xjt(y){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function zjt(y){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Wjt(y){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Qjt(y){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Hjt(y){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Ujt(y){let g,v,u,f,p,d,h,Eo,Fi,Am,at,Ti,Mi,gy,Lm,Oe,We,Ei,Sn,hy,Rn,Pn,uy,Ci,Bn,py,wi,ym,ya,Qe,Ae,Vk,Ai,Xk,zk,Co,xa,Wk,xm,Qk,nze,XDe,Li,$m,Dre,_y,sze,Gre,lze,zDe,In,ize,Ore,dze,cze,Vre,mze,fze,WDe,by,QDe,Hk,gze,HDe,km,UDe,yi,Sm,Xre,vy,hze,zre,uze,JDe,wo,Fy,pze,Ty,_ze,Uk,bze,vze,Fze,My,Tze,Wre,Mze,Eze,Cze,wr,Ey,wze,Qre,Aze,Lze,xi,yze,Hre,xze,$ze,Ure,kze,Sze,Rze,A,Rm,Jre,Pze,Bze,Jk,Ize,Nze,qze,Pm,Yre,jze,Dze,Yk,Gze,Oze,Vze,Bm,Kre,Xze,zze,Kk,Wze,Qze,Hze,Im,Zre,Uze,Jze,Zk,Yze,Kze,Zze,Nm,ete,eWe,oWe,eS,rWe,tWe,aWe,qm,ote,nWe,sWe,oS,lWe,iWe,dWe,jm,rte,cWe,mWe,rS,fWe,gWe,hWe,Dm,tte,uWe,pWe,tS,_We,bWe,vWe,Gm,ate,FWe,TWe,aS,MWe,EWe,CWe,Om,nte,wWe,AWe,nS,LWe,yWe,xWe,Vm,ste,$We,kWe,sS,SWe,RWe,PWe,Xm,lte,BWe,IWe,lS,NWe,qWe,jWe,zm,ite,DWe,GWe,iS,OWe,VWe,XWe,Wm,dte,zWe,WWe,dS,QWe,HWe,UWe,Qm,cte,JWe,YWe,cS,KWe,ZWe,eQe,Hm,mte,oQe,rQe,mS,tQe,aQe,nQe,Um,fte,sQe,lQe,fS,iQe,dQe,cQe,Jm,gte,mQe,fQe,gS,gQe,hQe,uQe,Ym,hte,pQe,_Qe,hS,bQe,vQe,FQe,Km,ute,TQe,MQe,uS,EQe,CQe,wQe,Zm,pte,AQe,LQe,pS,yQe,xQe,$Qe,ef,_te,kQe,SQe,_S,RQe,PQe,BQe,of,bte,IQe,NQe,bS,qQe,jQe,DQe,rf,vte,GQe,OQe,vS,VQe,XQe,zQe,tf,Fte,WQe,QQe,FS,HQe,UQe,JQe,af,Tte,YQe,KQe,TS,ZQe,eHe,oHe,nf,Mte,rHe,tHe,MS,aHe,nHe,sHe,sf,Ete,lHe,iHe,ES,dHe,cHe,mHe,lf,Cte,fHe,gHe,CS,hHe,uHe,pHe,df,wte,_He,bHe,wS,vHe,FHe,THe,cf,Ate,MHe,EHe,AS,CHe,wHe,AHe,mf,Lte,LHe,yHe,LS,xHe,$He,kHe,ff,yte,SHe,RHe,yS,PHe,BHe,IHe,gf,xte,NHe,qHe,xS,jHe,DHe,GHe,hf,$te,OHe,VHe,$S,XHe,zHe,WHe,uf,kte,QHe,HHe,kS,UHe,JHe,YHe,pf,Ste,KHe,ZHe,SS,eUe,oUe,rUe,_f,Rte,tUe,aUe,RS,nUe,sUe,lUe,bf,Pte,iUe,dUe,PS,cUe,mUe,fUe,vf,Bte,gUe,hUe,BS,uUe,pUe,_Ue,Ff,Ite,bUe,vUe,IS,FUe,TUe,MUe,Tf,Nte,EUe,CUe,NS,wUe,AUe,LUe,Mf,qte,yUe,xUe,qS,$Ue,kUe,SUe,Ef,jte,RUe,PUe,jS,BUe,IUe,NUe,Cf,Dte,qUe,jUe,DS,DUe,GUe,OUe,wf,Gte,VUe,XUe,GS,zUe,WUe,QUe,Af,Ote,HUe,UUe,OS,JUe,YUe,KUe,Lf,Vte,ZUe,eJe,VS,oJe,rJe,tJe,yf,Xte,aJe,nJe,XS,sJe,lJe,iJe,xf,zte,dJe,cJe,zS,mJe,fJe,gJe,$f,Wte,hJe,uJe,WS,pJe,_Je,bJe,kf,Qte,vJe,FJe,QS,TJe,MJe,EJe,Sf,Hte,CJe,wJe,HS,AJe,LJe,yJe,Rf,Ute,xJe,$Je,US,kJe,SJe,RJe,Pf,Jte,PJe,BJe,JS,IJe,NJe,qJe,Bf,Yte,jJe,DJe,YS,GJe,OJe,VJe,If,Kte,XJe,zJe,KS,WJe,QJe,HJe,Nf,Zte,UJe,JJe,ZS,YJe,KJe,ZJe,qf,eae,eYe,oYe,eR,rYe,tYe,aYe,jf,oae,nYe,sYe,oR,lYe,iYe,dYe,Df,rae,cYe,mYe,rR,fYe,gYe,hYe,Gf,tae,uYe,pYe,tR,_Ye,bYe,vYe,Of,aae,FYe,TYe,aR,MYe,EYe,CYe,Vf,nae,wYe,AYe,nR,LYe,yYe,xYe,Xf,sae,$Ye,kYe,sR,SYe,RYe,PYe,zf,lae,BYe,IYe,lR,NYe,qYe,jYe,Wf,iae,DYe,GYe,iR,OYe,VYe,XYe,Qf,dae,zYe,WYe,dR,QYe,HYe,UYe,Hf,cae,JYe,YYe,cR,KYe,ZYe,eKe,Uf,mae,oKe,rKe,mR,tKe,aKe,nKe,Jf,fae,sKe,lKe,fR,iKe,dKe,cKe,Yf,gae,mKe,fKe,gR,gKe,hKe,uKe,Kf,hae,pKe,_Ke,hR,bKe,vKe,FKe,Zf,uae,TKe,MKe,uR,EKe,CKe,wKe,eg,pae,AKe,LKe,pR,yKe,xKe,$Ke,og,_ae,kKe,SKe,_R,RKe,PKe,BKe,rg,bae,IKe,NKe,bR,qKe,jKe,DKe,tg,vae,GKe,OKe,vR,VKe,XKe,zKe,ag,Fae,WKe,QKe,FR,HKe,UKe,JKe,ng,Tae,YKe,KKe,TR,ZKe,eZe,oZe,sg,Mae,rZe,tZe,MR,aZe,nZe,sZe,lg,Eae,lZe,iZe,ER,dZe,cZe,mZe,ig,Cae,fZe,gZe,CR,hZe,uZe,pZe,dg,wae,_Ze,bZe,wR,vZe,FZe,TZe,cg,Aae,MZe,EZe,AR,CZe,wZe,AZe,mg,Lae,LZe,yZe,LR,xZe,$Ze,kZe,fg,yae,SZe,RZe,yR,PZe,BZe,IZe,gg,xae,NZe,qZe,xR,jZe,DZe,GZe,hg,$ae,OZe,VZe,$R,XZe,zZe,WZe,ug,kae,QZe,HZe,kR,UZe,JZe,YZe,pg,Sae,KZe,ZZe,SR,eeo,oeo,reo,_g,Rae,teo,aeo,RR,neo,seo,leo,bg,Pae,ieo,deo,PR,ceo,meo,feo,vg,Bae,geo,heo,BR,ueo,peo,_eo,Fg,Iae,beo,veo,IR,Feo,Teo,Meo,Tg,Nae,Eeo,Ceo,NR,weo,Aeo,Leo,Mg,qae,yeo,xeo,qR,$eo,keo,Seo,Eg,jae,Reo,Peo,jR,Beo,Ieo,Neo,Cg,Dae,qeo,jeo,DR,Deo,Geo,Oeo,wg,Gae,Veo,Xeo,GR,zeo,Weo,Qeo,Ag,Oae,Heo,Ueo,OR,Jeo,Yeo,Keo,Lg,Vae,Zeo,eoo,VR,ooo,roo,too,yg,Xae,aoo,noo,XR,soo,loo,ioo,xg,zae,doo,coo,zR,moo,foo,goo,$g,Wae,hoo,uoo,WR,poo,_oo,boo,kg,Qae,voo,Foo,QR,Too,Moo,Eoo,Sg,Hae,Coo,woo,HR,Aoo,Loo,yoo,Rg,Uae,xoo,$oo,UR,koo,Soo,Roo,Pg,Jae,Poo,Boo,JR,Ioo,Noo,qoo,Bg,Yae,joo,Doo,YR,Goo,Ooo,Voo,Ig,Kae,Xoo,zoo,KR,Woo,Qoo,Hoo,Ng,Zae,Uoo,Joo,ZR,Yoo,Koo,Zoo,qg,ene,ero,oro,eP,rro,tro,aro,jg,nro,Dg,Cy,sro,one,lro,YDe,$i,Gg,rne,wy,iro,tne,dro,KDe,Ao,Ay,cro,Ly,mro,oP,fro,gro,hro,yy,uro,ane,pro,_ro,bro,Ar,xy,vro,nne,Fro,Tro,$a,Mro,sne,Ero,Cro,lne,wro,Aro,ine,Lro,yro,xro,k,Nn,dne,$ro,kro,rP,Sro,Rro,tP,Pro,Bro,Iro,qn,cne,Nro,qro,aP,jro,Dro,nP,Gro,Oro,Vro,jn,mne,Xro,zro,sP,Wro,Qro,lP,Hro,Uro,Jro,Og,fne,Yro,Kro,iP,Zro,eto,oto,Dn,gne,rto,tto,dP,ato,nto,cP,sto,lto,ito,Vg,hne,dto,cto,mP,mto,fto,gto,Xg,une,hto,uto,fP,pto,_to,bto,zg,pne,vto,Fto,gP,Tto,Mto,Eto,Gn,_ne,Cto,wto,hP,Ato,Lto,uP,yto,xto,$to,On,bne,kto,Sto,pP,Rto,Pto,_P,Bto,Ito,Nto,Vn,vne,qto,jto,bP,Dto,Gto,vP,Oto,Vto,Xto,Wg,Fne,zto,Wto,FP,Qto,Hto,Uto,Qg,Tne,Jto,Yto,TP,Kto,Zto,eao,Hg,Mne,oao,rao,MP,tao,aao,nao,Xn,Ene,sao,lao,EP,iao,dao,CP,cao,mao,fao,Ug,Cne,gao,hao,wP,uao,pao,_ao,zn,wne,bao,vao,AP,Fao,Tao,LP,Mao,Eao,Cao,Wn,Ane,wao,Aao,yP,Lao,yao,xP,xao,$ao,kao,Qn,Lne,Sao,Rao,$P,Pao,Bao,kP,Iao,Nao,qao,Jg,yne,jao,Dao,SP,Gao,Oao,Vao,Hn,xne,Xao,zao,RP,Wao,Qao,PP,Hao,Uao,Jao,Un,$ne,Yao,Kao,BP,Zao,eno,IP,ono,rno,tno,Jn,kne,ano,nno,NP,sno,lno,qP,ino,dno,cno,Yn,Sne,mno,fno,jP,gno,hno,DP,uno,pno,_no,Kn,Rne,bno,vno,GP,Fno,Tno,OP,Mno,Eno,Cno,Zn,Pne,wno,Ano,VP,Lno,yno,XP,xno,$no,kno,Yg,Bne,Sno,Rno,zP,Pno,Bno,Ino,es,Ine,Nno,qno,WP,jno,Dno,QP,Gno,Ono,Vno,Kg,Nne,Xno,zno,HP,Wno,Qno,Hno,os,qne,Uno,Jno,UP,Yno,Kno,JP,Zno,eso,oso,rs,jne,rso,tso,YP,aso,nso,KP,sso,lso,iso,ts,Dne,dso,cso,ZP,mso,fso,eB,gso,hso,uso,Zg,Gne,pso,_so,oB,bso,vso,Fso,as,One,Tso,Mso,rB,Eso,Cso,tB,wso,Aso,Lso,ns,Vne,yso,xso,aB,$so,kso,nB,Sso,Rso,Pso,eh,Xne,Bso,Iso,sB,Nso,qso,jso,ss,zne,Dso,Gso,lB,Oso,Vso,iB,Xso,zso,Wso,ls,Wne,Qso,Hso,dB,Uso,Jso,cB,Yso,Kso,Zso,is,Qne,elo,olo,mB,rlo,tlo,fB,alo,nlo,slo,ds,Hne,llo,ilo,gB,dlo,clo,hB,mlo,flo,glo,cs,Une,hlo,ulo,uB,plo,_lo,pB,blo,vlo,Flo,ms,Jne,Tlo,Mlo,_B,Elo,Clo,bB,wlo,Alo,Llo,fs,Yne,ylo,xlo,vB,$lo,klo,FB,Slo,Rlo,Plo,gs,Kne,Blo,Ilo,TB,Nlo,qlo,MB,jlo,Dlo,Glo,oh,Zne,Olo,Vlo,EB,Xlo,zlo,Wlo,hs,ese,Qlo,Hlo,CB,Ulo,Jlo,wB,Ylo,Klo,Zlo,rh,ose,eio,oio,AB,rio,tio,aio,th,rse,nio,sio,LB,lio,iio,dio,us,tse,cio,mio,yB,fio,gio,xB,hio,uio,pio,ps,ase,_io,bio,$B,vio,Fio,kB,Tio,Mio,Eio,_s,nse,Cio,wio,SB,Aio,Lio,RB,yio,xio,$io,ah,sse,kio,Sio,PB,Rio,Pio,Bio,bs,lse,Iio,Nio,BB,qio,jio,IB,Dio,Gio,Oio,vs,ise,Vio,Xio,NB,zio,Wio,qB,Qio,Hio,Uio,Fs,dse,Jio,Yio,jB,Kio,Zio,DB,edo,odo,rdo,Ts,cse,tdo,ado,GB,ndo,sdo,OB,ldo,ido,ddo,Ms,mse,cdo,mdo,VB,fdo,gdo,XB,hdo,udo,pdo,nh,fse,_do,bdo,zB,vdo,Fdo,Tdo,Es,gse,Mdo,Edo,WB,Cdo,wdo,QB,Ado,Ldo,ydo,sh,hse,xdo,$do,HB,kdo,Sdo,Rdo,lh,use,Pdo,Bdo,UB,Ido,Ndo,qdo,ih,pse,jdo,Ddo,JB,Gdo,Odo,Vdo,dh,_se,Xdo,zdo,YB,Wdo,Qdo,Hdo,Cs,bse,Udo,Jdo,KB,Ydo,Kdo,ZB,Zdo,eco,oco,ch,vse,rco,tco,eI,aco,nco,sco,ws,Fse,lco,ico,oI,dco,cco,rI,mco,fco,gco,As,Tse,hco,uco,tI,pco,_co,aI,bco,vco,Fco,Ls,Mse,Tco,Mco,nI,Eco,Cco,sI,wco,Aco,Lco,ys,Ese,yco,xco,lI,$co,kco,iI,Sco,Rco,Pco,xs,Cse,Bco,Ico,dI,Nco,qco,cI,jco,Dco,Gco,$s,wse,Oco,Vco,mI,Xco,zco,fI,Wco,Qco,Hco,mh,Ase,Uco,Jco,gI,Yco,Kco,Zco,fh,Lse,emo,omo,hI,rmo,tmo,amo,ks,yse,nmo,smo,uI,lmo,imo,pI,dmo,cmo,mmo,Ss,xse,fmo,gmo,_I,hmo,umo,bI,pmo,_mo,bmo,Rs,$se,vmo,Fmo,vI,Tmo,Mmo,FI,Emo,Cmo,wmo,gh,kse,Amo,Lmo,TI,ymo,xmo,$mo,hh,Sse,kmo,Smo,MI,Rmo,Pmo,Bmo,uh,Rse,Imo,Nmo,EI,qmo,jmo,Dmo,Ps,Pse,Gmo,Omo,CI,Vmo,Xmo,wI,zmo,Wmo,Qmo,Bs,Bse,Hmo,Umo,AI,Jmo,Ymo,LI,Kmo,Zmo,efo,ph,Ise,ofo,rfo,yI,tfo,afo,nfo,_h,Nse,sfo,lfo,xI,ifo,dfo,cfo,bh,qse,mfo,ffo,$I,gfo,hfo,ufo,Is,jse,pfo,_fo,kI,bfo,vfo,SI,Ffo,Tfo,Mfo,vh,Dse,Efo,Cfo,RI,wfo,Afo,Lfo,Fh,Gse,yfo,xfo,PI,$fo,kfo,Sfo,Ns,Ose,Rfo,Pfo,BI,Bfo,Ifo,II,Nfo,qfo,jfo,qs,Vse,Dfo,Gfo,NI,Ofo,Vfo,qI,Xfo,zfo,Wfo,js,Xse,Qfo,Hfo,jI,Ufo,Jfo,DI,Yfo,Kfo,Zfo,Ds,zse,ego,ogo,GI,rgo,tgo,OI,ago,ngo,sgo,Th,lgo,Mh,$y,igo,Wse,dgo,ZDe,ki,Eh,Qse,ky,cgo,Hse,mgo,eGe,Lo,Sy,fgo,Ry,ggo,VI,hgo,ugo,pgo,Py,_go,Use,bgo,vgo,Fgo,He,By,Tgo,Jse,Mgo,Ego,ka,Cgo,Yse,wgo,Ago,Kse,Lgo,ygo,Zse,xgo,$go,kgo,Y,Ch,ele,Sgo,Rgo,XI,Pgo,Bgo,Igo,wh,ole,Ngo,qgo,zI,jgo,Dgo,Ggo,Ah,rle,Ogo,Vgo,WI,Xgo,zgo,Wgo,Lh,tle,Qgo,Hgo,QI,Ugo,Jgo,Ygo,yh,ale,Kgo,Zgo,HI,eho,oho,rho,xh,nle,tho,aho,UI,nho,sho,lho,$h,sle,iho,dho,JI,cho,mho,fho,kh,lle,gho,hho,YI,uho,pho,_ho,Sh,ile,bho,vho,KI,Fho,Tho,Mho,Rh,dle,Eho,Cho,ZI,who,Aho,Lho,Ph,cle,yho,xho,eN,$ho,kho,Sho,Bh,mle,Rho,Pho,oN,Bho,Iho,Nho,Ih,fle,qho,jho,rN,Dho,Gho,Oho,Nh,gle,Vho,Xho,tN,zho,Who,Qho,qh,hle,Hho,Uho,aN,Jho,Yho,Kho,jh,ule,Zho,euo,nN,ouo,ruo,tuo,Dh,ple,auo,nuo,sN,suo,luo,iuo,Gh,_le,duo,cuo,lN,muo,fuo,guo,Oh,ble,huo,uuo,iN,puo,_uo,buo,Vh,vle,vuo,Fuo,dN,Tuo,Muo,Euo,Xh,Fle,Cuo,wuo,cN,Auo,Luo,yuo,zh,Tle,xuo,$uo,mN,kuo,Suo,Ruo,Wh,Mle,Puo,Buo,fN,Iuo,Nuo,quo,Qh,Ele,juo,Duo,gN,Guo,Ouo,Vuo,Hh,Cle,Xuo,zuo,hN,Wuo,Quo,Huo,Uh,wle,Uuo,Juo,uN,Yuo,Kuo,Zuo,Jh,Ale,epo,opo,pN,rpo,tpo,apo,Yh,Lle,npo,spo,_N,lpo,ipo,dpo,Kh,yle,cpo,mpo,bN,fpo,gpo,hpo,Zh,xle,upo,ppo,vN,_po,bpo,vpo,eu,$le,Fpo,Tpo,FN,Mpo,Epo,Cpo,ou,kle,wpo,Apo,TN,Lpo,ypo,xpo,ru,$po,tu,kpo,au,Iy,Spo,Sle,Rpo,oGe,Si,nu,Rle,Ny,Ppo,Ple,Bpo,rGe,yo,qy,Ipo,jy,Npo,MN,qpo,jpo,Dpo,Dy,Gpo,Ble,Opo,Vpo,Xpo,Ue,Gy,zpo,Ile,Wpo,Qpo,Ri,Hpo,Nle,Upo,Jpo,qle,Ypo,Kpo,Zpo,he,su,jle,e_o,o_o,EN,r_o,t_o,a_o,lu,Dle,n_o,s_o,Gle,l_o,i_o,d_o,iu,Ole,c_o,m_o,CN,f_o,g_o,h_o,du,Vle,u_o,p_o,wN,__o,b_o,v_o,cu,Xle,F_o,T_o,AN,M_o,E_o,C_o,mu,zle,w_o,A_o,LN,L_o,y_o,x_o,fu,Wle,$_o,k_o,yN,S_o,R_o,P_o,gu,Qle,B_o,I_o,xN,N_o,q_o,j_o,hu,Hle,D_o,G_o,$N,O_o,V_o,X_o,uu,Ule,z_o,W_o,kN,Q_o,H_o,U_o,pu,Jle,J_o,Y_o,SN,K_o,Z_o,e2o,_u,Yle,o2o,r2o,RN,t2o,a2o,n2o,bu,Kle,s2o,l2o,PN,i2o,d2o,c2o,vu,Zle,m2o,f2o,BN,g2o,h2o,u2o,Fu,eie,p2o,_2o,IN,b2o,v2o,F2o,Tu,oie,T2o,M2o,NN,E2o,C2o,w2o,Mu,rie,A2o,L2o,qN,y2o,x2o,$2o,Eu,k2o,Cu,S2o,wu,Oy,R2o,tie,P2o,tGe,Pi,Au,aie,Vy,B2o,nie,I2o,aGe,xo,Xy,N2o,Bi,q2o,jN,j2o,D2o,DN,G2o,O2o,V2o,zy,X2o,sie,z2o,W2o,Q2o,nt,Wy,H2o,lie,U2o,J2o,Ii,Y2o,iie,K2o,Z2o,GN,ebo,obo,rbo,Lu,tbo,Je,Qy,abo,die,nbo,sbo,Sa,lbo,cie,ibo,dbo,mie,cbo,mbo,fie,fbo,gbo,hbo,x,yu,gie,ubo,pbo,ON,_bo,bbo,vbo,xu,hie,Fbo,Tbo,VN,Mbo,Ebo,Cbo,$u,uie,wbo,Abo,XN,Lbo,ybo,xbo,ku,pie,$bo,kbo,zN,Sbo,Rbo,Pbo,Su,_ie,Bbo,Ibo,WN,Nbo,qbo,jbo,Ru,bie,Dbo,Gbo,QN,Obo,Vbo,Xbo,Pu,vie,zbo,Wbo,HN,Qbo,Hbo,Ubo,Bu,Fie,Jbo,Ybo,UN,Kbo,Zbo,evo,Iu,Tie,ovo,rvo,JN,tvo,avo,nvo,Nu,Mie,svo,lvo,YN,ivo,dvo,cvo,qu,Eie,mvo,fvo,KN,gvo,hvo,uvo,ju,Cie,pvo,_vo,ZN,bvo,vvo,Fvo,Du,wie,Tvo,Mvo,eq,Evo,Cvo,wvo,Gu,Aie,Avo,Lvo,oq,yvo,xvo,$vo,Ou,Lie,kvo,Svo,rq,Rvo,Pvo,Bvo,Vu,yie,Ivo,Nvo,tq,qvo,jvo,Dvo,Xu,xie,Gvo,Ovo,aq,Vvo,Xvo,zvo,zu,$ie,Wvo,Qvo,nq,Hvo,Uvo,Jvo,Wu,kie,Yvo,Kvo,sq,Zvo,eFo,oFo,Qu,Sie,rFo,tFo,lq,aFo,nFo,sFo,Hu,Rie,lFo,iFo,iq,dFo,cFo,mFo,Uu,Pie,fFo,gFo,dq,hFo,uFo,pFo,Ju,Bie,_Fo,bFo,cq,vFo,FFo,TFo,Yu,Iie,MFo,EFo,mq,CFo,wFo,AFo,Ku,Nie,LFo,yFo,fq,xFo,$Fo,kFo,Zu,qie,SFo,RFo,gq,PFo,BFo,IFo,ep,jie,NFo,qFo,hq,jFo,DFo,GFo,op,Die,OFo,VFo,uq,XFo,zFo,WFo,rp,Gie,QFo,HFo,pq,UFo,JFo,YFo,tp,Oie,KFo,ZFo,_q,e1o,o1o,r1o,ap,Vie,t1o,a1o,bq,n1o,s1o,l1o,np,Xie,i1o,d1o,vq,c1o,m1o,f1o,sp,zie,g1o,h1o,Fq,u1o,p1o,_1o,Gs,Wie,b1o,v1o,Tq,F1o,T1o,Mq,M1o,E1o,C1o,lp,Qie,w1o,A1o,Eq,L1o,y1o,x1o,ip,Hie,$1o,k1o,Cq,S1o,R1o,P1o,dp,Uie,B1o,I1o,wq,N1o,q1o,j1o,cp,Jie,D1o,G1o,Aq,O1o,V1o,X1o,mp,Yie,z1o,W1o,Lq,Q1o,H1o,U1o,fp,Kie,J1o,Y1o,yq,K1o,Z1o,eTo,gp,Zie,oTo,rTo,xq,tTo,aTo,nTo,hp,ede,sTo,lTo,$q,iTo,dTo,cTo,up,ode,mTo,fTo,kq,gTo,hTo,uTo,pp,rde,pTo,_To,Sq,bTo,vTo,FTo,_p,tde,TTo,MTo,Rq,ETo,CTo,wTo,bp,ade,ATo,LTo,Pq,yTo,xTo,$To,vp,nde,kTo,STo,Bq,RTo,PTo,BTo,Fp,sde,ITo,NTo,Iq,qTo,jTo,DTo,Tp,lde,GTo,OTo,Nq,VTo,XTo,zTo,Mp,ide,WTo,QTo,qq,HTo,UTo,JTo,Ep,dde,YTo,KTo,jq,ZTo,eMo,oMo,Cp,cde,rMo,tMo,Dq,aMo,nMo,sMo,wp,mde,lMo,iMo,Gq,dMo,cMo,mMo,Ap,fde,fMo,gMo,Oq,hMo,uMo,pMo,Lp,gde,_Mo,bMo,Vq,vMo,FMo,TMo,yp,hde,MMo,EMo,Xq,CMo,wMo,AMo,xp,ude,LMo,yMo,zq,xMo,$Mo,kMo,$p,pde,SMo,RMo,Wq,PMo,BMo,IMo,kp,_de,NMo,qMo,Qq,jMo,DMo,GMo,Sp,bde,OMo,VMo,Hq,XMo,zMo,WMo,Rp,vde,QMo,HMo,Uq,UMo,JMo,YMo,Pp,Fde,KMo,ZMo,Jq,e4o,o4o,r4o,Bp,Tde,t4o,a4o,Yq,n4o,s4o,l4o,Ip,Mde,i4o,d4o,Kq,c4o,m4o,f4o,Np,Ede,g4o,h4o,Zq,u4o,p4o,_4o,qp,Cde,b4o,v4o,ej,F4o,T4o,M4o,jp,wde,E4o,C4o,oj,w4o,A4o,L4o,Dp,Ade,y4o,x4o,rj,$4o,k4o,S4o,Gp,Lde,R4o,P4o,tj,B4o,I4o,N4o,Op,yde,q4o,j4o,aj,D4o,G4o,O4o,Vp,xde,V4o,X4o,nj,z4o,W4o,Q4o,Xp,$de,H4o,U4o,sj,J4o,Y4o,K4o,zp,kde,Z4o,eEo,lj,oEo,rEo,tEo,Wp,Sde,aEo,nEo,ij,sEo,lEo,iEo,Qp,Rde,dEo,cEo,dj,mEo,fEo,gEo,Hp,Pde,hEo,uEo,cj,pEo,_Eo,bEo,Up,Bde,vEo,FEo,mj,TEo,MEo,EEo,Jp,Ide,CEo,wEo,fj,AEo,LEo,yEo,Yp,Nde,xEo,$Eo,gj,kEo,SEo,REo,Kp,qde,PEo,BEo,hj,IEo,NEo,qEo,Zp,jde,jEo,DEo,uj,GEo,OEo,VEo,e_,Dde,XEo,zEo,pj,WEo,QEo,HEo,o_,Gde,UEo,JEo,_j,YEo,KEo,ZEo,r_,Ode,eCo,oCo,bj,rCo,tCo,aCo,t_,Vde,nCo,sCo,vj,lCo,iCo,dCo,a_,Xde,cCo,mCo,Fj,fCo,gCo,hCo,n_,zde,uCo,pCo,Tj,_Co,bCo,vCo,s_,Wde,FCo,TCo,Mj,MCo,ECo,CCo,l_,Qde,wCo,ACo,Ej,LCo,yCo,xCo,i_,Hde,$Co,kCo,Cj,SCo,RCo,PCo,d_,Ude,BCo,ICo,wj,NCo,qCo,jCo,c_,Jde,DCo,GCo,Aj,OCo,VCo,XCo,m_,Yde,zCo,WCo,Lj,QCo,HCo,UCo,f_,Kde,JCo,YCo,yj,KCo,ZCo,e5o,g_,Zde,o5o,r5o,xj,t5o,a5o,n5o,h_,ece,s5o,l5o,$j,i5o,d5o,c5o,u_,oce,m5o,f5o,kj,g5o,h5o,u5o,p_,rce,p5o,_5o,Sj,b5o,v5o,F5o,__,tce,T5o,M5o,Rj,E5o,C5o,w5o,b_,ace,A5o,L5o,Pj,y5o,x5o,$5o,v_,nce,k5o,S5o,Bj,R5o,P5o,B5o,F_,sce,I5o,N5o,Ij,q5o,j5o,D5o,T_,lce,G5o,O5o,Nj,V5o,X5o,z5o,M_,ice,W5o,Q5o,qj,H5o,U5o,J5o,E_,dce,Y5o,K5o,jj,Z5o,e3o,o3o,C_,cce,r3o,t3o,Dj,a3o,n3o,s3o,w_,l3o,mce,i3o,d3o,fce,c3o,m3o,A_,nGe,Ni,L_,gce,Hy,f3o,hce,g3o,sGe,$o,Uy,h3o,qi,u3o,Gj,p3o,_3o,Oj,b3o,v3o,F3o,Jy,T3o,uce,M3o,E3o,C3o,st,Yy,w3o,pce,A3o,L3o,ji,y3o,_ce,x3o,$3o,Vj,k3o,S3o,R3o,y_,P3o,Ye,Ky,B3o,bce,I3o,N3o,Ra,q3o,vce,j3o,D3o,Fce,G3o,O3o,Tce,V3o,X3o,z3o,G,x_,Mce,W3o,Q3o,Xj,H3o,U3o,J3o,$_,Ece,Y3o,K3o,zj,Z3o,e0o,o0o,k_,Cce,r0o,t0o,Wj,a0o,n0o,s0o,S_,wce,l0o,i0o,Qj,d0o,c0o,m0o,R_,Ace,f0o,g0o,Hj,h0o,u0o,p0o,P_,Lce,_0o,b0o,Uj,v0o,F0o,T0o,B_,yce,M0o,E0o,Jj,C0o,w0o,A0o,I_,xce,L0o,y0o,Yj,x0o,$0o,k0o,N_,$ce,S0o,R0o,Kj,P0o,B0o,I0o,q_,kce,N0o,q0o,Zj,j0o,D0o,G0o,j_,Sce,O0o,V0o,eD,X0o,z0o,W0o,D_,Rce,Q0o,H0o,oD,U0o,J0o,Y0o,G_,Pce,K0o,Z0o,rD,ewo,owo,rwo,O_,Bce,two,awo,tD,nwo,swo,lwo,V_,Ice,iwo,dwo,aD,cwo,mwo,fwo,X_,Nce,gwo,hwo,nD,uwo,pwo,_wo,z_,qce,bwo,vwo,sD,Fwo,Two,Mwo,W_,jce,Ewo,Cwo,lD,wwo,Awo,Lwo,Q_,Dce,ywo,xwo,iD,$wo,kwo,Swo,H_,Gce,Rwo,Pwo,dD,Bwo,Iwo,Nwo,U_,Oce,qwo,jwo,cD,Dwo,Gwo,Owo,J_,Vce,Vwo,Xwo,mD,zwo,Wwo,Qwo,Y_,Xce,Hwo,Uwo,fD,Jwo,Ywo,Kwo,K_,zce,Zwo,eAo,gD,oAo,rAo,tAo,Z_,Wce,aAo,nAo,hD,sAo,lAo,iAo,e2,Qce,dAo,cAo,uD,mAo,fAo,gAo,o2,Hce,hAo,uAo,pD,pAo,_Ao,bAo,r2,Uce,vAo,FAo,_D,TAo,MAo,EAo,t2,Jce,CAo,wAo,bD,AAo,LAo,yAo,a2,Yce,xAo,$Ao,vD,kAo,SAo,RAo,n2,Kce,PAo,BAo,FD,IAo,NAo,qAo,s2,Zce,jAo,DAo,TD,GAo,OAo,VAo,l2,eme,XAo,zAo,MD,WAo,QAo,HAo,i2,ome,UAo,JAo,ED,YAo,KAo,ZAo,d2,rme,e6o,o6o,CD,r6o,t6o,a6o,c2,tme,n6o,s6o,wD,l6o,i6o,d6o,m2,ame,c6o,m6o,AD,f6o,g6o,h6o,f2,nme,u6o,p6o,LD,_6o,b6o,v6o,g2,sme,F6o,T6o,yD,M6o,E6o,C6o,h2,lme,w6o,A6o,xD,L6o,y6o,x6o,u2,ime,$6o,k6o,$D,S6o,R6o,P6o,p2,dme,B6o,I6o,kD,N6o,q6o,j6o,_2,cme,D6o,G6o,SD,O6o,V6o,X6o,b2,z6o,mme,W6o,Q6o,fme,H6o,U6o,v2,lGe,Di,F2,gme,Zy,J6o,hme,Y6o,iGe,ko,e7,K6o,Gi,Z6o,RD,eLo,oLo,PD,rLo,tLo,aLo,o7,nLo,ume,sLo,lLo,iLo,lt,r7,dLo,pme,cLo,mLo,Oi,fLo,_me,gLo,hLo,BD,uLo,pLo,_Lo,T2,bLo,Ke,t7,vLo,bme,FLo,TLo,Pa,MLo,vme,ELo,CLo,Fme,wLo,ALo,Tme,LLo,yLo,xLo,z,M2,Mme,$Lo,kLo,ID,SLo,RLo,PLo,E2,Eme,BLo,ILo,ND,NLo,qLo,jLo,C2,Cme,DLo,GLo,qD,OLo,VLo,XLo,w2,wme,zLo,WLo,jD,QLo,HLo,ULo,A2,Ame,JLo,YLo,DD,KLo,ZLo,eyo,L2,Lme,oyo,ryo,GD,tyo,ayo,nyo,y2,yme,syo,lyo,OD,iyo,dyo,cyo,x2,xme,myo,fyo,VD,gyo,hyo,uyo,$2,$me,pyo,_yo,XD,byo,vyo,Fyo,k2,kme,Tyo,Myo,zD,Eyo,Cyo,wyo,S2,Sme,Ayo,Lyo,WD,yyo,xyo,$yo,R2,Rme,kyo,Syo,QD,Ryo,Pyo,Byo,P2,Pme,Iyo,Nyo,HD,qyo,jyo,Dyo,B2,Bme,Gyo,Oyo,UD,Vyo,Xyo,zyo,I2,Ime,Wyo,Qyo,JD,Hyo,Uyo,Jyo,N2,Nme,Yyo,Kyo,YD,Zyo,e7o,o7o,q2,qme,r7o,t7o,KD,a7o,n7o,s7o,j2,jme,l7o,i7o,ZD,d7o,c7o,m7o,D2,Dme,f7o,g7o,eG,h7o,u7o,p7o,G2,Gme,_7o,b7o,oG,v7o,F7o,T7o,O2,Ome,M7o,E7o,rG,C7o,w7o,A7o,V2,Vme,L7o,y7o,tG,x7o,$7o,k7o,X2,Xme,S7o,R7o,aG,P7o,B7o,I7o,z2,zme,N7o,q7o,nG,j7o,D7o,G7o,W2,Wme,O7o,V7o,sG,X7o,z7o,W7o,Q2,Qme,Q7o,H7o,lG,U7o,J7o,Y7o,H2,Hme,K7o,Z7o,iG,e8o,o8o,r8o,U2,Ume,t8o,a8o,dG,n8o,s8o,l8o,J2,Jme,i8o,d8o,cG,c8o,m8o,f8o,Y2,Yme,g8o,h8o,mG,u8o,p8o,_8o,K2,Kme,b8o,v8o,fG,F8o,T8o,M8o,Z2,Zme,E8o,C8o,gG,w8o,A8o,L8o,eb,efe,y8o,x8o,hG,$8o,k8o,S8o,ob,ofe,R8o,P8o,uG,B8o,I8o,N8o,rb,rfe,q8o,j8o,pG,D8o,G8o,O8o,tb,tfe,V8o,X8o,_G,z8o,W8o,Q8o,ab,afe,H8o,U8o,bG,J8o,Y8o,K8o,nb,nfe,Z8o,e9o,vG,o9o,r9o,t9o,sb,a9o,sfe,n9o,s9o,lfe,l9o,i9o,lb,dGe,Vi,ib,ife,a7,d9o,dfe,c9o,cGe,So,n7,m9o,Xi,f9o,FG,g9o,h9o,TG,u9o,p9o,_9o,s7,b9o,cfe,v9o,F9o,T9o,it,l7,M9o,mfe,E9o,C9o,zi,w9o,ffe,A9o,L9o,MG,y9o,x9o,$9o,db,k9o,Ze,i7,S9o,gfe,R9o,P9o,Ba,B9o,hfe,I9o,N9o,ufe,q9o,j9o,pfe,D9o,G9o,O9o,Q,cb,_fe,V9o,X9o,EG,z9o,W9o,Q9o,mb,bfe,H9o,U9o,CG,J9o,Y9o,K9o,fb,vfe,Z9o,exo,wG,oxo,rxo,txo,gb,Ffe,axo,nxo,AG,sxo,lxo,ixo,hb,Tfe,dxo,cxo,LG,mxo,fxo,gxo,ub,Mfe,hxo,uxo,yG,pxo,_xo,bxo,pb,Efe,vxo,Fxo,xG,Txo,Mxo,Exo,_b,Cfe,Cxo,wxo,$G,Axo,Lxo,yxo,bb,wfe,xxo,$xo,kG,kxo,Sxo,Rxo,vb,Afe,Pxo,Bxo,SG,Ixo,Nxo,qxo,Fb,Lfe,jxo,Dxo,RG,Gxo,Oxo,Vxo,Tb,yfe,Xxo,zxo,PG,Wxo,Qxo,Hxo,Mb,xfe,Uxo,Jxo,BG,Yxo,Kxo,Zxo,Eb,$fe,e$o,o$o,IG,r$o,t$o,a$o,Cb,kfe,n$o,s$o,NG,l$o,i$o,d$o,wb,Sfe,c$o,m$o,qG,f$o,g$o,h$o,Ab,Rfe,u$o,p$o,jG,_$o,b$o,v$o,Lb,Pfe,F$o,T$o,DG,M$o,E$o,C$o,yb,Bfe,w$o,A$o,GG,L$o,y$o,x$o,xb,Ife,$$o,k$o,OG,S$o,R$o,P$o,$b,Nfe,B$o,I$o,VG,N$o,q$o,j$o,kb,qfe,D$o,G$o,XG,O$o,V$o,X$o,Sb,jfe,z$o,W$o,zG,Q$o,H$o,U$o,Rb,Dfe,J$o,Y$o,WG,K$o,Z$o,eko,Pb,Gfe,oko,rko,QG,tko,ako,nko,Bb,Ofe,sko,lko,HG,iko,dko,cko,Ib,Vfe,mko,fko,UG,gko,hko,uko,Nb,Xfe,pko,_ko,JG,bko,vko,Fko,qb,zfe,Tko,Mko,YG,Eko,Cko,wko,jb,Wfe,Ako,Lko,KG,yko,xko,$ko,Db,Qfe,kko,Sko,ZG,Rko,Pko,Bko,Gb,Hfe,Iko,Nko,Ufe,qko,jko,Dko,Ob,Jfe,Gko,Oko,eO,Vko,Xko,zko,Vb,Yfe,Wko,Qko,oO,Hko,Uko,Jko,Xb,Kfe,Yko,Kko,rO,Zko,eSo,oSo,zb,Zfe,rSo,tSo,tO,aSo,nSo,sSo,Wb,lSo,ege,iSo,dSo,oge,cSo,mSo,Qb,mGe,Wi,Hb,rge,d7,fSo,tge,gSo,fGe,Ro,c7,hSo,Qi,uSo,aO,pSo,_So,nO,bSo,vSo,FSo,m7,TSo,age,MSo,ESo,CSo,dt,f7,wSo,nge,ASo,LSo,Hi,ySo,sge,xSo,$So,sO,kSo,SSo,RSo,Ub,PSo,eo,g7,BSo,lge,ISo,NSo,Ia,qSo,ige,jSo,DSo,dge,GSo,OSo,cge,VSo,XSo,zSo,ue,Jb,mge,WSo,QSo,lO,HSo,USo,JSo,Yb,fge,YSo,KSo,iO,ZSo,eRo,oRo,Kb,gge,rRo,tRo,dO,aRo,nRo,sRo,Zb,hge,lRo,iRo,cO,dRo,cRo,mRo,ev,uge,fRo,gRo,mO,hRo,uRo,pRo,ov,pge,_Ro,bRo,fO,vRo,FRo,TRo,rv,_ge,MRo,ERo,gO,CRo,wRo,ARo,tv,bge,LRo,yRo,hO,xRo,$Ro,kRo,av,vge,SRo,RRo,uO,PRo,BRo,IRo,nv,Fge,NRo,qRo,pO,jRo,DRo,GRo,sv,Tge,ORo,VRo,_O,XRo,zRo,WRo,lv,Mge,QRo,HRo,bO,URo,JRo,YRo,iv,Ege,KRo,ZRo,vO,ePo,oPo,rPo,dv,Cge,tPo,aPo,FO,nPo,sPo,lPo,cv,wge,iPo,dPo,TO,cPo,mPo,fPo,mv,Age,gPo,hPo,MO,uPo,pPo,_Po,fv,Lge,bPo,vPo,EO,FPo,TPo,MPo,gv,EPo,yge,CPo,wPo,xge,APo,LPo,hv,gGe,Ui,uv,$ge,h7,yPo,kge,xPo,hGe,Po,u7,$Po,Ji,kPo,CO,SPo,RPo,wO,PPo,BPo,IPo,p7,NPo,Sge,qPo,jPo,DPo,ct,_7,GPo,Rge,OPo,VPo,Yi,XPo,Pge,zPo,WPo,AO,QPo,HPo,UPo,pv,JPo,oo,b7,YPo,Bge,KPo,ZPo,Na,eBo,Ige,oBo,rBo,Nge,tBo,aBo,qge,nBo,sBo,lBo,N,_v,jge,iBo,dBo,LO,cBo,mBo,fBo,bv,Dge,gBo,hBo,yO,uBo,pBo,_Bo,vv,Gge,bBo,vBo,xO,FBo,TBo,MBo,Fv,Oge,EBo,CBo,$O,wBo,ABo,LBo,Tv,Vge,yBo,xBo,kO,$Bo,kBo,SBo,Mv,Xge,RBo,PBo,SO,BBo,IBo,NBo,Ev,zge,qBo,jBo,RO,DBo,GBo,OBo,Cv,Wge,VBo,XBo,PO,zBo,WBo,QBo,wv,Qge,HBo,UBo,BO,JBo,YBo,KBo,Av,Hge,ZBo,eIo,IO,oIo,rIo,tIo,Lv,Uge,aIo,nIo,NO,sIo,lIo,iIo,yv,Jge,dIo,cIo,qO,mIo,fIo,gIo,xv,Yge,hIo,uIo,jO,pIo,_Io,bIo,$v,Kge,vIo,FIo,DO,TIo,MIo,EIo,kv,Zge,CIo,wIo,GO,AIo,LIo,yIo,Sv,ehe,xIo,$Io,OO,kIo,SIo,RIo,Rv,ohe,PIo,BIo,VO,IIo,NIo,qIo,Pv,rhe,jIo,DIo,XO,GIo,OIo,VIo,Bv,the,XIo,zIo,zO,WIo,QIo,HIo,Iv,ahe,UIo,JIo,WO,YIo,KIo,ZIo,Nv,nhe,eNo,oNo,QO,rNo,tNo,aNo,qv,she,nNo,sNo,HO,lNo,iNo,dNo,jv,lhe,cNo,mNo,UO,fNo,gNo,hNo,Dv,ihe,uNo,pNo,JO,_No,bNo,vNo,Gv,dhe,FNo,TNo,YO,MNo,ENo,CNo,Ov,che,wNo,ANo,KO,LNo,yNo,xNo,Vv,mhe,$No,kNo,ZO,SNo,RNo,PNo,Xv,fhe,BNo,INo,eV,NNo,qNo,jNo,zv,ghe,DNo,GNo,oV,ONo,VNo,XNo,Wv,hhe,zNo,WNo,rV,QNo,HNo,UNo,Qv,uhe,JNo,YNo,tV,KNo,ZNo,eqo,Hv,phe,oqo,rqo,aV,tqo,aqo,nqo,Uv,_he,sqo,lqo,nV,iqo,dqo,cqo,Jv,bhe,mqo,fqo,sV,gqo,hqo,uqo,Yv,vhe,pqo,_qo,lV,bqo,vqo,Fqo,Kv,Fhe,Tqo,Mqo,iV,Eqo,Cqo,wqo,Zv,The,Aqo,Lqo,dV,yqo,xqo,$qo,eF,Mhe,kqo,Sqo,cV,Rqo,Pqo,Bqo,oF,Ehe,Iqo,Nqo,mV,qqo,jqo,Dqo,rF,Che,Gqo,Oqo,fV,Vqo,Xqo,zqo,tF,whe,Wqo,Qqo,gV,Hqo,Uqo,Jqo,aF,Ahe,Yqo,Kqo,hV,Zqo,ejo,ojo,nF,Lhe,rjo,tjo,uV,ajo,njo,sjo,sF,yhe,ljo,ijo,pV,djo,cjo,mjo,lF,xhe,fjo,gjo,_V,hjo,ujo,pjo,iF,$he,_jo,bjo,bV,vjo,Fjo,Tjo,dF,khe,Mjo,Ejo,vV,Cjo,wjo,Ajo,cF,Ljo,She,yjo,xjo,Rhe,$jo,kjo,mF,uGe,Ki,fF,Phe,v7,Sjo,Bhe,Rjo,pGe,Bo,F7,Pjo,Zi,Bjo,FV,Ijo,Njo,TV,qjo,jjo,Djo,T7,Gjo,Ihe,Ojo,Vjo,Xjo,mt,M7,zjo,Nhe,Wjo,Qjo,ed,Hjo,qhe,Ujo,Jjo,MV,Yjo,Kjo,Zjo,gF,eDo,ro,E7,oDo,jhe,rDo,tDo,qa,aDo,Dhe,nDo,sDo,Ghe,lDo,iDo,Ohe,dDo,cDo,mDo,Z,hF,Vhe,fDo,gDo,EV,hDo,uDo,pDo,uF,Xhe,_Do,bDo,CV,vDo,FDo,TDo,pF,zhe,MDo,EDo,wV,CDo,wDo,ADo,_F,Whe,LDo,yDo,AV,xDo,$Do,kDo,bF,Qhe,SDo,RDo,LV,PDo,BDo,IDo,vF,Hhe,NDo,qDo,yV,jDo,DDo,GDo,FF,Uhe,ODo,VDo,xV,XDo,zDo,WDo,TF,Jhe,QDo,HDo,$V,UDo,JDo,YDo,MF,Yhe,KDo,ZDo,kV,eGo,oGo,rGo,EF,Khe,tGo,aGo,SV,nGo,sGo,lGo,CF,Zhe,iGo,dGo,RV,cGo,mGo,fGo,wF,eue,gGo,hGo,PV,uGo,pGo,_Go,AF,oue,bGo,vGo,BV,FGo,TGo,MGo,LF,rue,EGo,CGo,IV,wGo,AGo,LGo,yF,tue,yGo,xGo,NV,$Go,kGo,SGo,xF,aue,RGo,PGo,qV,BGo,IGo,NGo,$F,nue,qGo,jGo,jV,DGo,GGo,OGo,kF,sue,VGo,XGo,DV,zGo,WGo,QGo,SF,lue,HGo,UGo,GV,JGo,YGo,KGo,RF,iue,ZGo,eOo,OV,oOo,rOo,tOo,PF,due,aOo,nOo,VV,sOo,lOo,iOo,BF,cue,dOo,cOo,XV,mOo,fOo,gOo,IF,mue,hOo,uOo,zV,pOo,_Oo,bOo,NF,fue,vOo,FOo,WV,TOo,MOo,EOo,qF,gue,COo,wOo,QV,AOo,LOo,yOo,jF,hue,xOo,$Oo,HV,kOo,SOo,ROo,DF,uue,POo,BOo,UV,IOo,NOo,qOo,GF,pue,jOo,DOo,JV,GOo,OOo,VOo,OF,_ue,XOo,zOo,YV,WOo,QOo,HOo,VF,UOo,bue,JOo,YOo,vue,KOo,ZOo,XF,_Ge,od,zF,Fue,C7,eVo,Tue,oVo,bGe,Io,w7,rVo,rd,tVo,KV,aVo,nVo,ZV,sVo,lVo,iVo,A7,dVo,Mue,cVo,mVo,fVo,ft,L7,gVo,Eue,hVo,uVo,td,pVo,Cue,_Vo,bVo,eX,vVo,FVo,TVo,WF,MVo,to,y7,EVo,wue,CVo,wVo,ja,AVo,Aue,LVo,yVo,Lue,xVo,$Vo,yue,kVo,SVo,RVo,Zr,QF,xue,PVo,BVo,oX,IVo,NVo,qVo,HF,$ue,jVo,DVo,rX,GVo,OVo,VVo,UF,kue,XVo,zVo,tX,WVo,QVo,HVo,JF,Sue,UVo,JVo,aX,YVo,KVo,ZVo,YF,Rue,eXo,oXo,nX,rXo,tXo,aXo,KF,nXo,Pue,sXo,lXo,Bue,iXo,dXo,ZF,vGe,ad,e1,Iue,x7,cXo,Nue,mXo,FGe,No,$7,fXo,nd,gXo,sX,hXo,uXo,lX,pXo,_Xo,bXo,k7,vXo,que,FXo,TXo,MXo,gt,S7,EXo,jue,CXo,wXo,sd,AXo,Due,LXo,yXo,iX,xXo,$Xo,kXo,o1,SXo,ao,R7,RXo,Gue,PXo,BXo,Da,IXo,Oue,NXo,qXo,Vue,jXo,DXo,Xue,GXo,OXo,VXo,U,r1,zue,XXo,zXo,dX,WXo,QXo,HXo,t1,Wue,UXo,JXo,cX,YXo,KXo,ZXo,a1,Que,ezo,ozo,mX,rzo,tzo,azo,n1,Hue,nzo,szo,fX,lzo,izo,dzo,s1,Uue,czo,mzo,gX,fzo,gzo,hzo,l1,Jue,uzo,pzo,hX,_zo,bzo,vzo,i1,Yue,Fzo,Tzo,uX,Mzo,Ezo,Czo,d1,Kue,wzo,Azo,pX,Lzo,yzo,xzo,c1,Zue,$zo,kzo,_X,Szo,Rzo,Pzo,m1,epe,Bzo,Izo,bX,Nzo,qzo,jzo,f1,ope,Dzo,Gzo,vX,Ozo,Vzo,Xzo,g1,rpe,zzo,Wzo,FX,Qzo,Hzo,Uzo,h1,tpe,Jzo,Yzo,TX,Kzo,Zzo,eWo,u1,ape,oWo,rWo,MX,tWo,aWo,nWo,p1,npe,sWo,lWo,EX,iWo,dWo,cWo,_1,spe,mWo,fWo,CX,gWo,hWo,uWo,b1,lpe,pWo,_Wo,wX,bWo,vWo,FWo,v1,ipe,TWo,MWo,AX,EWo,CWo,wWo,F1,dpe,AWo,LWo,LX,yWo,xWo,$Wo,T1,cpe,kWo,SWo,yX,RWo,PWo,BWo,M1,mpe,IWo,NWo,xX,qWo,jWo,DWo,E1,fpe,GWo,OWo,$X,VWo,XWo,zWo,C1,gpe,WWo,QWo,kX,HWo,UWo,JWo,w1,hpe,YWo,KWo,SX,ZWo,eQo,oQo,A1,upe,rQo,tQo,RX,aQo,nQo,sQo,L1,ppe,lQo,iQo,PX,dQo,cQo,mQo,y1,_pe,fQo,gQo,BX,hQo,uQo,pQo,x1,bpe,_Qo,bQo,IX,vQo,FQo,TQo,$1,vpe,MQo,EQo,NX,CQo,wQo,AQo,k1,Fpe,LQo,yQo,qX,xQo,$Qo,kQo,S1,Tpe,SQo,RQo,jX,PQo,BQo,IQo,R1,Mpe,NQo,qQo,DX,jQo,DQo,GQo,P1,Epe,OQo,VQo,GX,XQo,zQo,WQo,B1,Cpe,QQo,HQo,OX,UQo,JQo,YQo,I1,KQo,wpe,ZQo,eHo,Ape,oHo,rHo,N1,TGe,ld,q1,Lpe,P7,tHo,ype,aHo,MGe,qo,B7,nHo,id,sHo,VX,lHo,iHo,XX,dHo,cHo,mHo,I7,fHo,xpe,gHo,hHo,uHo,ht,N7,pHo,$pe,_Ho,bHo,dd,vHo,kpe,FHo,THo,zX,MHo,EHo,CHo,j1,wHo,no,q7,AHo,Spe,LHo,yHo,Ga,xHo,Rpe,$Ho,kHo,Ppe,SHo,RHo,Bpe,PHo,BHo,IHo,V,D1,Ipe,NHo,qHo,WX,jHo,DHo,GHo,G1,Npe,OHo,VHo,QX,XHo,zHo,WHo,O1,qpe,QHo,HHo,HX,UHo,JHo,YHo,V1,jpe,KHo,ZHo,UX,eUo,oUo,rUo,X1,Dpe,tUo,aUo,JX,nUo,sUo,lUo,z1,Gpe,iUo,dUo,YX,cUo,mUo,fUo,W1,Ope,gUo,hUo,KX,uUo,pUo,_Uo,Q1,Vpe,bUo,vUo,ZX,FUo,TUo,MUo,H1,Xpe,EUo,CUo,ez,wUo,AUo,LUo,U1,zpe,yUo,xUo,oz,$Uo,kUo,SUo,J1,Wpe,RUo,PUo,rz,BUo,IUo,NUo,Y1,Qpe,qUo,jUo,tz,DUo,GUo,OUo,K1,Hpe,VUo,XUo,az,zUo,WUo,QUo,Z1,Upe,HUo,UUo,nz,JUo,YUo,KUo,eT,Jpe,ZUo,eJo,sz,oJo,rJo,tJo,oT,Ype,aJo,nJo,lz,sJo,lJo,iJo,rT,Kpe,dJo,cJo,iz,mJo,fJo,gJo,tT,Zpe,hJo,uJo,dz,pJo,_Jo,bJo,aT,e_e,vJo,FJo,cz,TJo,MJo,EJo,nT,o_e,CJo,wJo,mz,AJo,LJo,yJo,sT,r_e,xJo,$Jo,fz,kJo,SJo,RJo,lT,t_e,PJo,BJo,gz,IJo,NJo,qJo,iT,a_e,jJo,DJo,hz,GJo,OJo,VJo,dT,n_e,XJo,zJo,uz,WJo,QJo,HJo,cT,s_e,UJo,JJo,pz,YJo,KJo,ZJo,mT,l_e,eYo,oYo,_z,rYo,tYo,aYo,fT,i_e,nYo,sYo,bz,lYo,iYo,dYo,gT,d_e,cYo,mYo,vz,fYo,gYo,hYo,hT,c_e,uYo,pYo,Fz,_Yo,bYo,vYo,uT,m_e,FYo,TYo,Tz,MYo,EYo,CYo,pT,f_e,wYo,AYo,Mz,LYo,yYo,xYo,_T,g_e,$Yo,kYo,Ez,SYo,RYo,PYo,bT,h_e,BYo,IYo,Cz,NYo,qYo,jYo,vT,u_e,DYo,GYo,wz,OYo,VYo,XYo,FT,p_e,zYo,WYo,Az,QYo,HYo,UYo,TT,__e,JYo,YYo,Lz,KYo,ZYo,eKo,MT,b_e,oKo,rKo,yz,tKo,aKo,nKo,ET,v_e,sKo,lKo,xz,iKo,dKo,cKo,CT,F_e,mKo,fKo,$z,gKo,hKo,uKo,wT,T_e,pKo,_Ko,kz,bKo,vKo,FKo,AT,TKo,M_e,MKo,EKo,E_e,CKo,wKo,LT,EGe,cd,yT,C_e,j7,AKo,w_e,LKo,CGe,jo,D7,yKo,md,xKo,Sz,$Ko,kKo,Rz,SKo,RKo,PKo,G7,BKo,A_e,IKo,NKo,qKo,ut,O7,jKo,L_e,DKo,GKo,fd,OKo,y_e,VKo,XKo,Pz,zKo,WKo,QKo,xT,HKo,so,V7,UKo,x_e,JKo,YKo,Oa,KKo,$_e,ZKo,eZo,k_e,oZo,rZo,S_e,tZo,aZo,nZo,R_e,$T,P_e,sZo,lZo,Bz,iZo,dZo,cZo,kT,mZo,B_e,fZo,gZo,I_e,hZo,uZo,ST,wGe,gd,RT,N_e,X7,pZo,q_e,_Zo,AGe,Do,z7,bZo,hd,vZo,Iz,FZo,TZo,Nz,MZo,EZo,CZo,W7,wZo,j_e,AZo,LZo,yZo,pt,Q7,xZo,D_e,$Zo,kZo,ud,SZo,G_e,RZo,PZo,qz,BZo,IZo,NZo,PT,qZo,lo,H7,jZo,O_e,DZo,GZo,Va,OZo,V_e,VZo,XZo,X_e,zZo,WZo,z_e,QZo,HZo,UZo,Fe,BT,W_e,JZo,YZo,jz,KZo,ZZo,eer,IT,Q_e,oer,rer,Dz,ter,aer,ner,NT,H_e,ser,ler,Gz,ier,der,cer,qT,U_e,mer,fer,Oz,ger,her,uer,Os,J_e,per,_er,Vz,ber,ver,Xz,Fer,Ter,Mer,jT,Y_e,Eer,Cer,zz,wer,Aer,Ler,Vs,K_e,yer,xer,Wz,$er,ker,Qz,Ser,Rer,Per,_t,Z_e,Ber,Ier,Hz,Ner,qer,Uz,jer,Der,Jz,Ger,Oer,Ver,DT,e2e,Xer,zer,Yz,Wer,Qer,Her,GT,o2e,Uer,Jer,Kz,Yer,Ker,Zer,OT,r2e,eor,oor,Zz,ror,tor,aor,VT,t2e,nor,sor,eW,lor,ior,dor,XT,a2e,cor,mor,oW,gor,hor,uor,zT,n2e,por,_or,rW,bor,vor,For,WT,s2e,Tor,Mor,tW,Eor,Cor,wor,QT,Aor,l2e,Lor,yor,i2e,xor,$or,HT,LGe,pd,UT,d2e,U7,kor,c2e,Sor,yGe,Go,J7,Ror,_d,Por,aW,Bor,Ior,nW,Nor,qor,jor,Y7,Dor,m2e,Gor,Oor,Vor,bt,K7,Xor,f2e,zor,Wor,bd,Qor,g2e,Hor,Uor,sW,Jor,Yor,Kor,JT,Zor,io,Z7,err,h2e,orr,rrr,Xa,trr,u2e,arr,nrr,p2e,srr,lrr,_2e,irr,drr,crr,b2e,YT,v2e,mrr,frr,lW,grr,hrr,urr,KT,prr,F2e,_rr,brr,T2e,vrr,Frr,ZT,xGe,vd,eM,M2e,e8,Trr,E2e,Mrr,$Ge,Oo,o8,Err,Fd,Crr,iW,wrr,Arr,dW,Lrr,yrr,xrr,r8,$rr,C2e,krr,Srr,Rrr,vt,t8,Prr,w2e,Brr,Irr,Td,Nrr,A2e,qrr,jrr,cW,Drr,Grr,Orr,oM,Vrr,co,a8,Xrr,L2e,zrr,Wrr,za,Qrr,y2e,Hrr,Urr,x2e,Jrr,Yrr,$2e,Krr,Zrr,etr,k2e,rM,S2e,otr,rtr,mW,ttr,atr,ntr,tM,str,R2e,ltr,itr,P2e,dtr,ctr,aM,kGe,Md,nM,B2e,n8,mtr,I2e,ftr,SGe,Vo,s8,gtr,Ed,htr,fW,utr,ptr,gW,_tr,btr,vtr,l8,Ftr,N2e,Ttr,Mtr,Etr,Ft,i8,Ctr,q2e,wtr,Atr,Cd,Ltr,j2e,ytr,xtr,hW,$tr,ktr,Str,sM,Rtr,mo,d8,Ptr,D2e,Btr,Itr,Wa,Ntr,G2e,qtr,jtr,O2e,Dtr,Gtr,V2e,Otr,Vtr,Xtr,Pe,lM,X2e,ztr,Wtr,uW,Qtr,Htr,Utr,iM,z2e,Jtr,Ytr,pW,Ktr,Ztr,ear,dM,W2e,oar,rar,_W,tar,aar,nar,cM,Q2e,sar,lar,bW,iar,dar,car,mM,H2e,mar,far,vW,gar,har,uar,fM,U2e,par,_ar,FW,bar,Far,Tar,gM,J2e,Mar,Ear,TW,Car,war,Aar,hM,Y2e,Lar,yar,MW,xar,$ar,kar,uM,K2e,Sar,Rar,EW,Par,Bar,Iar,pM,Nar,Z2e,qar,jar,ebe,Dar,Gar,_M,RGe,wd,bM,obe,c8,Oar,rbe,Var,PGe,Xo,m8,Xar,Ad,zar,CW,War,Qar,wW,Har,Uar,Jar,f8,Yar,tbe,Kar,Zar,enr,Tt,g8,onr,abe,rnr,tnr,Ld,anr,nbe,nnr,snr,AW,lnr,inr,dnr,vM,cnr,fo,h8,mnr,sbe,fnr,gnr,Qa,hnr,lbe,unr,pnr,ibe,_nr,bnr,dbe,vnr,Fnr,Tnr,et,FM,cbe,Mnr,Enr,LW,Cnr,wnr,Anr,TM,mbe,Lnr,ynr,yW,xnr,$nr,knr,MM,fbe,Snr,Rnr,xW,Pnr,Bnr,Inr,EM,gbe,Nnr,qnr,$W,jnr,Dnr,Gnr,CM,hbe,Onr,Vnr,kW,Xnr,znr,Wnr,wM,Qnr,ube,Hnr,Unr,pbe,Jnr,Ynr,AM,BGe,yd,LM,_be,u8,Knr,bbe,Znr,IGe,zo,p8,esr,xd,osr,SW,rsr,tsr,RW,asr,nsr,ssr,_8,lsr,vbe,isr,dsr,csr,Mt,b8,msr,Fbe,fsr,gsr,$d,hsr,Tbe,usr,psr,PW,_sr,bsr,vsr,yM,Fsr,go,v8,Tsr,Mbe,Msr,Esr,Ha,Csr,Ebe,wsr,Asr,Cbe,Lsr,ysr,wbe,xsr,$sr,ksr,Le,xM,Abe,Ssr,Rsr,BW,Psr,Bsr,Isr,$M,Lbe,Nsr,qsr,IW,jsr,Dsr,Gsr,kM,ybe,Osr,Vsr,NW,Xsr,zsr,Wsr,SM,xbe,Qsr,Hsr,qW,Usr,Jsr,Ysr,RM,$be,Ksr,Zsr,jW,elr,olr,rlr,PM,kbe,tlr,alr,DW,nlr,slr,llr,BM,Sbe,ilr,dlr,GW,clr,mlr,flr,IM,Rbe,glr,hlr,OW,ulr,plr,_lr,NM,Pbe,blr,vlr,VW,Flr,Tlr,Mlr,qM,Bbe,Elr,Clr,XW,wlr,Alr,Llr,jM,ylr,Ibe,xlr,$lr,Nbe,klr,Slr,DM,NGe,kd,GM,qbe,F8,Rlr,jbe,Plr,qGe,Wo,T8,Blr,Sd,Ilr,zW,Nlr,qlr,WW,jlr,Dlr,Glr,M8,Olr,Dbe,Vlr,Xlr,zlr,Et,E8,Wlr,Gbe,Qlr,Hlr,Rd,Ulr,Obe,Jlr,Ylr,QW,Klr,Zlr,eir,OM,oir,ho,C8,rir,Vbe,tir,air,Ua,nir,Xbe,sir,lir,zbe,iir,dir,Wbe,cir,mir,fir,w8,VM,Qbe,gir,hir,HW,uir,pir,_ir,XM,Hbe,bir,vir,UW,Fir,Tir,Mir,zM,Eir,Ube,Cir,wir,Jbe,Air,Lir,WM,jGe,Pd,QM,Ybe,A8,yir,Kbe,xir,DGe,Qo,L8,$ir,Bd,kir,JW,Sir,Rir,YW,Pir,Bir,Iir,y8,Nir,Zbe,qir,jir,Dir,Ct,x8,Gir,eve,Oir,Vir,Id,Xir,ove,zir,Wir,KW,Qir,Hir,Uir,HM,Jir,uo,$8,Yir,rve,Kir,Zir,Ja,edr,tve,odr,rdr,ave,tdr,adr,nve,ndr,sdr,ldr,ot,UM,sve,idr,ddr,ZW,cdr,mdr,fdr,JM,lve,gdr,hdr,eQ,udr,pdr,_dr,YM,ive,bdr,vdr,oQ,Fdr,Tdr,Mdr,KM,dve,Edr,Cdr,rQ,wdr,Adr,Ldr,ZM,cve,ydr,xdr,tQ,$dr,kdr,Sdr,e4,Rdr,mve,Pdr,Bdr,fve,Idr,Ndr,o4,GGe,Nd,r4,gve,k8,qdr,hve,jdr,OGe,Ho,S8,Ddr,qd,Gdr,aQ,Odr,Vdr,nQ,Xdr,zdr,Wdr,R8,Qdr,uve,Hdr,Udr,Jdr,wt,P8,Ydr,pve,Kdr,Zdr,jd,ecr,_ve,ocr,rcr,sQ,tcr,acr,ncr,t4,scr,po,B8,lcr,bve,icr,dcr,Ya,ccr,vve,mcr,fcr,Fve,gcr,hcr,Tve,ucr,pcr,_cr,Dd,a4,Mve,bcr,vcr,lQ,Fcr,Tcr,Mcr,n4,Eve,Ecr,Ccr,iQ,wcr,Acr,Lcr,s4,Cve,ycr,xcr,dQ,$cr,kcr,Scr,l4,Rcr,wve,Pcr,Bcr,Ave,Icr,Ncr,i4,VGe,Gd,d4,Lve,I8,qcr,yve,jcr,XGe,Uo,N8,Dcr,Od,Gcr,cQ,Ocr,Vcr,mQ,Xcr,zcr,Wcr,q8,Qcr,xve,Hcr,Ucr,Jcr,At,j8,Ycr,$ve,Kcr,Zcr,Vd,emr,kve,omr,rmr,fQ,tmr,amr,nmr,c4,smr,_o,D8,lmr,Sve,imr,dmr,Ka,cmr,Rve,mmr,fmr,Pve,gmr,hmr,Bve,umr,pmr,_mr,G8,m4,Ive,bmr,vmr,gQ,Fmr,Tmr,Mmr,f4,Nve,Emr,Cmr,hQ,wmr,Amr,Lmr,g4,ymr,qve,xmr,$mr,jve,kmr,Smr,h4,zGe,Xd,u4,Dve,O8,Rmr,Gve,Pmr,WGe,Jo,V8,Bmr,zd,Imr,uQ,Nmr,qmr,pQ,jmr,Dmr,Gmr,X8,Omr,Ove,Vmr,Xmr,zmr,Lt,z8,Wmr,Vve,Qmr,Hmr,Wd,Umr,Xve,Jmr,Ymr,_Q,Kmr,Zmr,efr,p4,ofr,bo,W8,rfr,zve,tfr,afr,Za,nfr,Wve,sfr,lfr,Qve,ifr,dfr,Hve,cfr,mfr,ffr,Uve,_4,Jve,gfr,hfr,bQ,ufr,pfr,_fr,b4,bfr,Yve,vfr,Ffr,Kve,Tfr,Mfr,v4,QGe,Qd,F4,Zve,Q8,Efr,eFe,Cfr,HGe,Yo,H8,wfr,Hd,Afr,vQ,Lfr,yfr,FQ,xfr,$fr,kfr,U8,Sfr,oFe,Rfr,Pfr,Bfr,yt,J8,Ifr,rFe,Nfr,qfr,Ud,jfr,tFe,Dfr,Gfr,TQ,Ofr,Vfr,Xfr,T4,zfr,vo,Y8,Wfr,aFe,Qfr,Hfr,en,Ufr,nFe,Jfr,Yfr,sFe,Kfr,Zfr,lFe,egr,ogr,rgr,on,M4,iFe,tgr,agr,MQ,ngr,sgr,lgr,E4,dFe,igr,dgr,EQ,cgr,mgr,fgr,C4,cFe,ggr,hgr,CQ,ugr,pgr,_gr,w4,mFe,bgr,vgr,wQ,Fgr,Tgr,Mgr,A4,Egr,fFe,Cgr,wgr,gFe,Agr,Lgr,L4,UGe,Jd,y4,hFe,K8,ygr,uFe,xgr,JGe,Ko,Z8,$gr,Yd,kgr,AQ,Sgr,Rgr,LQ,Pgr,Bgr,Igr,e9,Ngr,pFe,qgr,jgr,Dgr,xt,o9,Ggr,_Fe,Ogr,Vgr,Kd,Xgr,bFe,zgr,Wgr,yQ,Qgr,Hgr,Ugr,x4,Jgr,Fo,r9,Ygr,vFe,Kgr,Zgr,rn,ehr,FFe,ohr,rhr,TFe,thr,ahr,MFe,nhr,shr,lhr,EFe,$4,CFe,ihr,dhr,xQ,chr,mhr,fhr,k4,ghr,wFe,hhr,uhr,AFe,phr,_hr,S4,YGe,Zd,R4,LFe,t9,bhr,yFe,vhr,KGe,Zo,a9,Fhr,ec,Thr,$Q,Mhr,Ehr,kQ,Chr,whr,Ahr,n9,Lhr,xFe,yhr,xhr,$hr,$t,s9,khr,$Fe,Shr,Rhr,oc,Phr,kFe,Bhr,Ihr,SQ,Nhr,qhr,jhr,P4,Dhr,Lr,l9,Ghr,SFe,Ohr,Vhr,tn,Xhr,RFe,zhr,Whr,PFe,Qhr,Hhr,BFe,Uhr,Jhr,Yhr,q,B4,IFe,Khr,Zhr,RQ,eur,our,rur,I4,NFe,tur,aur,PQ,nur,sur,lur,N4,qFe,iur,dur,BQ,cur,mur,fur,q4,jFe,gur,hur,IQ,uur,pur,_ur,j4,DFe,bur,vur,NQ,Fur,Tur,Mur,D4,GFe,Eur,Cur,qQ,wur,Aur,Lur,G4,OFe,yur,xur,jQ,$ur,kur,Sur,O4,VFe,Rur,Pur,DQ,Bur,Iur,Nur,V4,XFe,qur,jur,GQ,Dur,Gur,Our,X4,zFe,Vur,Xur,OQ,zur,Wur,Qur,z4,WFe,Hur,Uur,VQ,Jur,Yur,Kur,W4,QFe,Zur,epr,XQ,opr,rpr,tpr,Q4,HFe,apr,npr,zQ,spr,lpr,ipr,H4,UFe,dpr,cpr,WQ,mpr,fpr,gpr,U4,JFe,hpr,upr,QQ,ppr,_pr,bpr,J4,YFe,vpr,Fpr,HQ,Tpr,Mpr,Epr,Y4,KFe,Cpr,wpr,UQ,Apr,Lpr,ypr,Xs,ZFe,xpr,$pr,JQ,kpr,Spr,YQ,Rpr,Ppr,Bpr,K4,e1e,Ipr,Npr,KQ,qpr,jpr,Dpr,Z4,o1e,Gpr,Opr,ZQ,Vpr,Xpr,zpr,eE,r1e,Wpr,Qpr,eH,Hpr,Upr,Jpr,oE,t1e,Ypr,Kpr,oH,Zpr,e_r,o_r,rE,a1e,r_r,t_r,rH,a_r,n_r,s_r,tE,n1e,l_r,i_r,tH,d_r,c_r,m_r,aE,s1e,f_r,g_r,aH,h_r,u_r,p_r,nE,l1e,__r,b_r,nH,v_r,F_r,T_r,sE,i1e,M_r,E_r,sH,C_r,w_r,A_r,lE,d1e,L_r,y_r,lH,x_r,$_r,k_r,iE,c1e,S_r,R_r,iH,P_r,B_r,I_r,dE,m1e,N_r,q_r,dH,j_r,D_r,G_r,cE,f1e,O_r,V_r,cH,X_r,z_r,W_r,mE,g1e,Q_r,H_r,mH,U_r,J_r,Y_r,fE,h1e,K_r,Z_r,fH,e2r,o2r,r2r,gE,u1e,t2r,a2r,gH,n2r,s2r,l2r,hE,p1e,i2r,d2r,hH,c2r,m2r,f2r,uE,_1e,g2r,h2r,uH,u2r,p2r,_2r,pE,b1e,b2r,v2r,pH,F2r,T2r,M2r,_E,v1e,E2r,C2r,_H,w2r,A2r,L2r,bE,F1e,y2r,x2r,bH,$2r,k2r,S2r,vE,T1e,R2r,P2r,vH,B2r,I2r,N2r,FE,M1e,q2r,j2r,FH,D2r,G2r,O2r,TE,E1e,V2r,X2r,TH,z2r,W2r,Q2r,ME,C1e,H2r,U2r,MH,J2r,Y2r,K2r,EE,w1e,Z2r,ebr,EH,obr,rbr,tbr,CE,A1e,abr,nbr,CH,sbr,lbr,ibr,wE,L1e,dbr,cbr,wH,mbr,fbr,gbr,AE,y1e,hbr,ubr,AH,pbr,_br,bbr,LE,ZGe,rc,yE,x1e,i9,vbr,$1e,Fbr,eOe,er,d9,Tbr,tc,Mbr,LH,Ebr,Cbr,yH,wbr,Abr,Lbr,c9,ybr,k1e,xbr,$br,kbr,kt,m9,Sbr,S1e,Rbr,Pbr,ac,Bbr,R1e,Ibr,Nbr,xH,qbr,jbr,Dbr,xE,Gbr,yr,f9,Obr,P1e,Vbr,Xbr,an,zbr,B1e,Wbr,Qbr,I1e,Hbr,Ubr,N1e,Jbr,Ybr,Kbr,se,$E,q1e,Zbr,evr,$H,ovr,rvr,tvr,kE,j1e,avr,nvr,kH,svr,lvr,ivr,SE,D1e,dvr,cvr,SH,mvr,fvr,gvr,RE,G1e,hvr,uvr,RH,pvr,_vr,bvr,PE,O1e,vvr,Fvr,PH,Tvr,Mvr,Evr,BE,V1e,Cvr,wvr,BH,Avr,Lvr,yvr,IE,X1e,xvr,$vr,IH,kvr,Svr,Rvr,NE,z1e,Pvr,Bvr,NH,Ivr,Nvr,qvr,qE,W1e,jvr,Dvr,qH,Gvr,Ovr,Vvr,jE,Q1e,Xvr,zvr,jH,Wvr,Qvr,Hvr,DE,H1e,Uvr,Jvr,DH,Yvr,Kvr,Zvr,GE,U1e,eFr,oFr,GH,rFr,tFr,aFr,OE,J1e,nFr,sFr,OH,lFr,iFr,dFr,VE,Y1e,cFr,mFr,VH,fFr,gFr,hFr,XE,K1e,uFr,pFr,XH,_Fr,bFr,vFr,zE,Z1e,FFr,TFr,zH,MFr,EFr,CFr,WE,eTe,wFr,AFr,WH,LFr,yFr,xFr,QE,oTe,$Fr,kFr,QH,SFr,RFr,PFr,HE,rTe,BFr,IFr,HH,NFr,qFr,jFr,UE,tTe,DFr,GFr,UH,OFr,VFr,XFr,JE,aTe,zFr,WFr,JH,QFr,HFr,UFr,YE,nTe,JFr,YFr,YH,KFr,ZFr,e1r,KE,sTe,o1r,r1r,KH,t1r,a1r,n1r,ZE,oOe,nc,eC,lTe,g9,s1r,iTe,l1r,rOe,or,h9,i1r,sc,d1r,ZH,c1r,m1r,eU,f1r,g1r,h1r,u9,u1r,dTe,p1r,_1r,b1r,St,p9,v1r,cTe,F1r,T1r,lc,M1r,mTe,E1r,C1r,oU,w1r,A1r,L1r,oC,y1r,xr,_9,x1r,fTe,$1r,k1r,nn,S1r,gTe,R1r,P1r,hTe,B1r,I1r,uTe,N1r,q1r,j1r,Me,rC,pTe,D1r,G1r,rU,O1r,V1r,X1r,tC,_Te,z1r,W1r,tU,Q1r,H1r,U1r,aC,bTe,J1r,Y1r,aU,K1r,Z1r,eTr,nC,vTe,oTr,rTr,nU,tTr,aTr,nTr,sC,FTe,sTr,lTr,sU,iTr,dTr,cTr,lC,TTe,mTr,fTr,lU,gTr,hTr,uTr,iC,MTe,pTr,_Tr,iU,bTr,vTr,FTr,dC,ETe,TTr,MTr,dU,ETr,CTr,wTr,cC,CTe,ATr,LTr,cU,yTr,xTr,$Tr,mC,wTe,kTr,STr,mU,RTr,PTr,BTr,fC,ATe,ITr,NTr,fU,qTr,jTr,DTr,gC,LTe,GTr,OTr,gU,VTr,XTr,zTr,hC,yTe,WTr,QTr,hU,HTr,UTr,JTr,uC,tOe,ic,pC,xTe,b9,YTr,$Te,KTr,aOe,rr,v9,ZTr,dc,eMr,uU,oMr,rMr,pU,tMr,aMr,nMr,F9,sMr,kTe,lMr,iMr,dMr,Rt,T9,cMr,STe,mMr,fMr,cc,gMr,RTe,hMr,uMr,_U,pMr,_Mr,bMr,_C,vMr,$r,M9,FMr,PTe,TMr,MMr,sn,EMr,BTe,CMr,wMr,ITe,AMr,LMr,NTe,yMr,xMr,$Mr,ln,bC,qTe,kMr,SMr,bU,RMr,PMr,BMr,vC,jTe,IMr,NMr,vU,qMr,jMr,DMr,FC,DTe,GMr,OMr,FU,VMr,XMr,zMr,TC,GTe,WMr,QMr,TU,HMr,UMr,JMr,MC,nOe,mc,EC,OTe,E9,YMr,VTe,KMr,sOe,tr,C9,ZMr,fc,e4r,MU,o4r,r4r,EU,t4r,a4r,n4r,w9,s4r,XTe,l4r,i4r,d4r,Pt,A9,c4r,zTe,m4r,f4r,gc,g4r,WTe,h4r,u4r,CU,p4r,_4r,b4r,CC,v4r,kr,L9,F4r,QTe,T4r,M4r,dn,E4r,HTe,C4r,w4r,UTe,A4r,L4r,JTe,y4r,x4r,$4r,ie,wC,YTe,k4r,S4r,wU,R4r,P4r,B4r,AC,KTe,I4r,N4r,AU,q4r,j4r,D4r,LC,ZTe,G4r,O4r,LU,V4r,X4r,z4r,yC,eMe,W4r,Q4r,yU,H4r,U4r,J4r,xC,oMe,Y4r,K4r,xU,Z4r,eEr,oEr,$C,rMe,rEr,tEr,$U,aEr,nEr,sEr,kC,tMe,lEr,iEr,kU,dEr,cEr,mEr,SC,aMe,fEr,gEr,SU,hEr,uEr,pEr,RC,nMe,_Er,bEr,RU,vEr,FEr,TEr,PC,sMe,MEr,EEr,PU,CEr,wEr,AEr,BC,lMe,LEr,yEr,BU,xEr,$Er,kEr,IC,iMe,SEr,REr,IU,PEr,BEr,IEr,NC,dMe,NEr,qEr,NU,jEr,DEr,GEr,qC,cMe,OEr,VEr,qU,XEr,zEr,WEr,jC,mMe,QEr,HEr,jU,UEr,JEr,YEr,DC,fMe,KEr,ZEr,DU,eCr,oCr,rCr,GC,gMe,tCr,aCr,GU,nCr,sCr,lCr,OC,hMe,iCr,dCr,OU,cCr,mCr,fCr,VC,uMe,gCr,hCr,VU,uCr,pCr,_Cr,XC,pMe,bCr,vCr,XU,FCr,TCr,MCr,zC,lOe,hc,WC,_Me,y9,ECr,bMe,CCr,iOe,ar,x9,wCr,uc,ACr,zU,LCr,yCr,WU,xCr,$Cr,kCr,$9,SCr,vMe,RCr,PCr,BCr,Bt,k9,ICr,FMe,NCr,qCr,pc,jCr,TMe,DCr,GCr,QU,OCr,VCr,XCr,QC,zCr,Sr,S9,WCr,MMe,QCr,HCr,cn,UCr,EMe,JCr,YCr,CMe,KCr,ZCr,wMe,e5r,o5r,r5r,ye,HC,AMe,t5r,a5r,HU,n5r,s5r,l5r,UC,LMe,i5r,d5r,UU,c5r,m5r,f5r,JC,yMe,g5r,h5r,JU,u5r,p5r,_5r,YC,xMe,b5r,v5r,YU,F5r,T5r,M5r,KC,$Me,E5r,C5r,KU,w5r,A5r,L5r,ZC,kMe,y5r,x5r,ZU,$5r,k5r,S5r,e5,SMe,R5r,P5r,eJ,B5r,I5r,N5r,o5,RMe,q5r,j5r,oJ,D5r,G5r,O5r,r5,PMe,V5r,X5r,rJ,z5r,W5r,Q5r,t5,BMe,H5r,U5r,tJ,J5r,Y5r,K5r,a5,dOe,_c,n5,IMe,R9,Z5r,NMe,e3r,cOe,nr,P9,o3r,bc,r3r,aJ,t3r,a3r,nJ,n3r,s3r,l3r,B9,i3r,qMe,d3r,c3r,m3r,It,I9,f3r,jMe,g3r,h3r,vc,u3r,DMe,p3r,_3r,sJ,b3r,v3r,F3r,s5,T3r,Rr,N9,M3r,GMe,E3r,C3r,mn,w3r,OMe,A3r,L3r,VMe,y3r,x3r,XMe,$3r,k3r,S3r,te,l5,zMe,R3r,P3r,lJ,B3r,I3r,N3r,i5,WMe,q3r,j3r,iJ,D3r,G3r,O3r,d5,QMe,V3r,X3r,dJ,z3r,W3r,Q3r,c5,HMe,H3r,U3r,cJ,J3r,Y3r,K3r,m5,UMe,Z3r,e0r,mJ,o0r,r0r,t0r,f5,JMe,a0r,n0r,fJ,s0r,l0r,i0r,g5,YMe,d0r,c0r,gJ,m0r,f0r,g0r,h5,KMe,h0r,u0r,hJ,p0r,_0r,b0r,u5,ZMe,v0r,F0r,uJ,T0r,M0r,E0r,p5,e4e,C0r,w0r,pJ,A0r,L0r,y0r,_5,o4e,x0r,$0r,_J,k0r,S0r,R0r,b5,r4e,P0r,B0r,bJ,I0r,N0r,q0r,v5,t4e,j0r,D0r,vJ,G0r,O0r,V0r,F5,a4e,X0r,z0r,FJ,W0r,Q0r,H0r,T5,n4e,U0r,J0r,TJ,Y0r,K0r,Z0r,M5,s4e,ewr,owr,MJ,rwr,twr,awr,E5,l4e,nwr,swr,EJ,lwr,iwr,dwr,C5,i4e,cwr,mwr,CJ,fwr,gwr,hwr,w5,d4e,uwr,pwr,wJ,_wr,bwr,vwr,A5,c4e,Fwr,Twr,AJ,Mwr,Ewr,Cwr,L5,m4e,wwr,Awr,LJ,Lwr,ywr,xwr,y5,f4e,$wr,kwr,yJ,Swr,Rwr,Pwr,x5,g4e,Bwr,Iwr,xJ,Nwr,qwr,jwr,$5,h4e,Dwr,Gwr,$J,Owr,Vwr,Xwr,k5,u4e,zwr,Wwr,kJ,Qwr,Hwr,Uwr,S5,p4e,Jwr,Ywr,SJ,Kwr,Zwr,eAr,R5,mOe,Fc,P5,_4e,q9,oAr,b4e,rAr,fOe,sr,j9,tAr,Tc,aAr,RJ,nAr,sAr,PJ,lAr,iAr,dAr,D9,cAr,v4e,mAr,fAr,gAr,Nt,G9,hAr,F4e,uAr,pAr,Mc,_Ar,T4e,bAr,vAr,BJ,FAr,TAr,MAr,B5,EAr,Pr,O9,CAr,M4e,wAr,AAr,fn,LAr,E4e,yAr,xAr,C4e,$Ar,kAr,w4e,SAr,RAr,PAr,pe,I5,A4e,BAr,IAr,IJ,NAr,qAr,jAr,N5,L4e,DAr,GAr,NJ,OAr,VAr,XAr,q5,y4e,zAr,WAr,qJ,QAr,HAr,UAr,j5,x4e,JAr,YAr,jJ,KAr,ZAr,e6r,D5,$4e,o6r,r6r,DJ,t6r,a6r,n6r,G5,k4e,s6r,l6r,GJ,i6r,d6r,c6r,O5,S4e,m6r,f6r,OJ,g6r,h6r,u6r,V5,R4e,p6r,_6r,VJ,b6r,v6r,F6r,X5,P4e,T6r,M6r,XJ,E6r,C6r,w6r,z5,B4e,A6r,L6r,zJ,y6r,x6r,$6r,W5,I4e,k6r,S6r,WJ,R6r,P6r,B6r,Q5,N4e,I6r,N6r,QJ,q6r,j6r,D6r,H5,q4e,G6r,O6r,HJ,V6r,X6r,z6r,U5,j4e,W6r,Q6r,UJ,H6r,U6r,J6r,J5,D4e,Y6r,K6r,JJ,Z6r,eLr,oLr,Y5,G4e,rLr,tLr,YJ,aLr,nLr,sLr,K5,O4e,lLr,iLr,KJ,dLr,cLr,mLr,Z5,gOe,Ec,e3,V4e,V9,fLr,X4e,gLr,hOe,lr,X9,hLr,Cc,uLr,ZJ,pLr,_Lr,eY,bLr,vLr,FLr,z9,TLr,z4e,MLr,ELr,CLr,qt,W9,wLr,W4e,ALr,LLr,wc,yLr,Q4e,xLr,$Lr,oY,kLr,SLr,RLr,o3,PLr,Br,Q9,BLr,H4e,ILr,NLr,gn,qLr,U4e,jLr,DLr,J4e,GLr,OLr,Y4e,VLr,XLr,zLr,H9,r3,K4e,WLr,QLr,rY,HLr,ULr,JLr,t3,Z4e,YLr,KLr,tY,ZLr,eyr,oyr,a3,uOe,Ac,n3,eEe,U9,ryr,oEe,tyr,pOe,ir,J9,ayr,Lc,nyr,aY,syr,lyr,nY,iyr,dyr,cyr,Y9,myr,rEe,fyr,gyr,hyr,jt,K9,uyr,tEe,pyr,_yr,yc,byr,aEe,vyr,Fyr,sY,Tyr,Myr,Eyr,s3,Cyr,Ir,Z9,wyr,nEe,Ayr,Lyr,hn,yyr,sEe,xyr,$yr,lEe,kyr,Syr,iEe,Ryr,Pyr,Byr,dEe,l3,cEe,Iyr,Nyr,lY,qyr,jyr,Dyr,i3,_Oe,xc,d3,mEe,ex,Gyr,fEe,Oyr,bOe,dr,ox,Vyr,$c,Xyr,iY,zyr,Wyr,dY,Qyr,Hyr,Uyr,rx,Jyr,gEe,Yyr,Kyr,Zyr,Dt,tx,e7r,hEe,o7r,r7r,kc,t7r,uEe,a7r,n7r,cY,s7r,l7r,i7r,c3,d7r,Nr,ax,c7r,pEe,m7r,f7r,un,g7r,_Ee,h7r,u7r,bEe,p7r,_7r,vEe,b7r,v7r,F7r,de,m3,FEe,T7r,M7r,mY,E7r,C7r,w7r,f3,TEe,A7r,L7r,fY,y7r,x7r,$7r,g3,MEe,k7r,S7r,gY,R7r,P7r,B7r,h3,EEe,I7r,N7r,hY,q7r,j7r,D7r,u3,CEe,G7r,O7r,uY,V7r,X7r,z7r,p3,wEe,W7r,Q7r,pY,H7r,U7r,J7r,_3,AEe,Y7r,K7r,_Y,Z7r,e8r,o8r,b3,LEe,r8r,t8r,bY,a8r,n8r,s8r,v3,yEe,l8r,i8r,vY,d8r,c8r,m8r,F3,xEe,f8r,g8r,FY,h8r,u8r,p8r,T3,$Ee,_8r,b8r,TY,v8r,F8r,T8r,M3,kEe,M8r,E8r,MY,C8r,w8r,A8r,E3,SEe,L8r,y8r,EY,x8r,$8r,k8r,C3,REe,S8r,R8r,CY,P8r,B8r,I8r,w3,PEe,N8r,q8r,wY,j8r,D8r,G8r,A3,BEe,O8r,V8r,AY,X8r,z8r,W8r,L3,IEe,Q8r,H8r,LY,U8r,J8r,Y8r,y3,NEe,K8r,Z8r,yY,e9r,o9r,r9r,x3,qEe,t9r,a9r,xY,n9r,s9r,l9r,$3,jEe,i9r,d9r,$Y,c9r,m9r,f9r,k3,vOe,Sc,S3,DEe,nx,g9r,GEe,h9r,FOe,cr,sx,u9r,Rc,p9r,kY,_9r,b9r,SY,v9r,F9r,T9r,lx,M9r,OEe,E9r,C9r,w9r,Gt,ix,A9r,VEe,L9r,y9r,Pc,x9r,XEe,$9r,k9r,RY,S9r,R9r,P9r,R3,B9r,qr,dx,I9r,zEe,N9r,q9r,pn,j9r,WEe,D9r,G9r,QEe,O9r,V9r,HEe,X9r,z9r,W9r,ce,P3,UEe,Q9r,H9r,PY,U9r,J9r,Y9r,B3,JEe,K9r,Z9r,BY,exr,oxr,rxr,I3,YEe,txr,axr,IY,nxr,sxr,lxr,N3,KEe,ixr,dxr,NY,cxr,mxr,fxr,q3,ZEe,gxr,hxr,qY,uxr,pxr,_xr,j3,eCe,bxr,vxr,jY,Fxr,Txr,Mxr,D3,oCe,Exr,Cxr,DY,wxr,Axr,Lxr,G3,rCe,yxr,xxr,GY,$xr,kxr,Sxr,O3,tCe,Rxr,Pxr,OY,Bxr,Ixr,Nxr,V3,aCe,qxr,jxr,VY,Dxr,Gxr,Oxr,X3,nCe,Vxr,Xxr,XY,zxr,Wxr,Qxr,z3,sCe,Hxr,Uxr,zY,Jxr,Yxr,Kxr,W3,lCe,Zxr,e$r,WY,o$r,r$r,t$r,Q3,iCe,a$r,n$r,QY,s$r,l$r,i$r,H3,dCe,d$r,c$r,HY,m$r,f$r,g$r,U3,cCe,h$r,u$r,UY,p$r,_$r,b$r,J3,mCe,v$r,F$r,JY,T$r,M$r,E$r,Y3,fCe,C$r,w$r,YY,A$r,L$r,y$r,K3,gCe,x$r,$$r,KY,k$r,S$r,R$r,Z3,hCe,P$r,B$r,ZY,I$r,N$r,q$r,e0,TOe,Bc,o0,uCe,cx,j$r,pCe,D$r,MOe,mr,mx,G$r,Ic,O$r,eK,V$r,X$r,oK,z$r,W$r,Q$r,fx,H$r,_Ce,U$r,J$r,Y$r,Ot,gx,K$r,bCe,Z$r,ekr,Nc,okr,vCe,rkr,tkr,rK,akr,nkr,skr,r0,lkr,jr,hx,ikr,FCe,dkr,ckr,_n,mkr,TCe,fkr,gkr,MCe,hkr,ukr,ECe,pkr,_kr,bkr,CCe,t0,wCe,vkr,Fkr,tK,Tkr,Mkr,Ekr,a0,EOe,qc,n0,ACe,ux,Ckr,LCe,wkr,COe,fr,px,Akr,jc,Lkr,aK,ykr,xkr,nK,$kr,kkr,Skr,_x,Rkr,yCe,Pkr,Bkr,Ikr,Vt,bx,Nkr,xCe,qkr,jkr,Dc,Dkr,$Ce,Gkr,Okr,sK,Vkr,Xkr,zkr,s0,Wkr,Dr,vx,Qkr,kCe,Hkr,Ukr,bn,Jkr,SCe,Ykr,Kkr,RCe,Zkr,eSr,PCe,oSr,rSr,tSr,BCe,l0,ICe,aSr,nSr,lK,sSr,lSr,iSr,i0,wOe,Gc,d0,NCe,Fx,dSr,qCe,cSr,AOe,gr,Tx,mSr,Oc,fSr,iK,gSr,hSr,dK,uSr,pSr,_Sr,Mx,bSr,jCe,vSr,FSr,TSr,Xt,Ex,MSr,DCe,ESr,CSr,Vc,wSr,GCe,ASr,LSr,cK,ySr,xSr,$Sr,c0,kSr,Gr,Cx,SSr,OCe,RSr,PSr,vn,BSr,VCe,ISr,NSr,XCe,qSr,jSr,zCe,DSr,GSr,OSr,oe,m0,WCe,VSr,XSr,mK,zSr,WSr,QSr,f0,QCe,HSr,USr,fK,JSr,YSr,KSr,g0,HCe,ZSr,eRr,gK,oRr,rRr,tRr,h0,UCe,aRr,nRr,hK,sRr,lRr,iRr,u0,JCe,dRr,cRr,uK,mRr,fRr,gRr,p0,YCe,hRr,uRr,pK,pRr,_Rr,bRr,_0,KCe,vRr,FRr,_K,TRr,MRr,ERr,b0,ZCe,CRr,wRr,bK,ARr,LRr,yRr,v0,e5e,xRr,$Rr,vK,kRr,SRr,RRr,F0,o5e,PRr,BRr,FK,IRr,NRr,qRr,T0,r5e,jRr,DRr,TK,GRr,ORr,VRr,M0,t5e,XRr,zRr,MK,WRr,QRr,HRr,E0,a5e,URr,JRr,EK,YRr,KRr,ZRr,C0,n5e,ePr,oPr,CK,rPr,tPr,aPr,w0,s5e,nPr,sPr,wK,lPr,iPr,dPr,A0,l5e,cPr,mPr,AK,fPr,gPr,hPr,L0,i5e,uPr,pPr,LK,_Pr,bPr,vPr,y0,d5e,FPr,TPr,yK,MPr,EPr,CPr,x0,c5e,wPr,APr,xK,LPr,yPr,xPr,$0,m5e,$Pr,kPr,$K,SPr,RPr,PPr,k0,f5e,BPr,IPr,kK,NPr,qPr,jPr,S0,g5e,DPr,GPr,SK,OPr,VPr,XPr,R0,h5e,zPr,WPr,RK,QPr,HPr,UPr,P0,u5e,JPr,YPr,PK,KPr,ZPr,eBr,B0,p5e,oBr,rBr,BK,tBr,aBr,nBr,I0,_5e,sBr,lBr,IK,iBr,dBr,cBr,N0,b5e,mBr,fBr,NK,gBr,hBr,uBr,q0,LOe,Xc,j0,v5e,wx,pBr,F5e,_Br,yOe,hr,Ax,bBr,zc,vBr,qK,FBr,TBr,jK,MBr,EBr,CBr,Lx,wBr,T5e,ABr,LBr,yBr,zt,yx,xBr,M5e,$Br,kBr,Wc,SBr,E5e,RBr,PBr,DK,BBr,IBr,NBr,D0,qBr,Or,xx,jBr,C5e,DBr,GBr,Fn,OBr,w5e,VBr,XBr,A5e,zBr,WBr,L5e,QBr,HBr,UBr,xe,G0,y5e,JBr,YBr,GK,KBr,ZBr,eIr,O0,x5e,oIr,rIr,OK,tIr,aIr,nIr,V0,$5e,sIr,lIr,VK,iIr,dIr,cIr,X0,k5e,mIr,fIr,XK,gIr,hIr,uIr,z0,S5e,pIr,_Ir,zK,bIr,vIr,FIr,W0,R5e,TIr,MIr,WK,EIr,CIr,wIr,Q0,P5e,AIr,LIr,QK,yIr,xIr,$Ir,H0,B5e,kIr,SIr,HK,RIr,PIr,BIr,U0,I5e,IIr,NIr,UK,qIr,jIr,DIr,J0,N5e,GIr,OIr,JK,VIr,XIr,zIr,Y0,xOe,Qc,K0,q5e,$x,WIr,j5e,QIr,$Oe,ur,kx,HIr,Hc,UIr,YK,JIr,YIr,KK,KIr,ZIr,eNr,Sx,oNr,D5e,rNr,tNr,aNr,Wt,Rx,nNr,G5e,sNr,lNr,Uc,iNr,O5e,dNr,cNr,ZK,mNr,fNr,gNr,Z0,hNr,Vr,Px,uNr,V5e,pNr,_Nr,Tn,bNr,X5e,vNr,FNr,z5e,TNr,MNr,W5e,ENr,CNr,wNr,Ee,ew,Q5e,ANr,LNr,eZ,yNr,xNr,$Nr,ow,H5e,kNr,SNr,oZ,RNr,PNr,BNr,rw,U5e,INr,NNr,rZ,qNr,jNr,DNr,tw,J5e,GNr,ONr,tZ,VNr,XNr,zNr,aw,Y5e,WNr,QNr,aZ,HNr,UNr,JNr,nw,K5e,YNr,KNr,nZ,ZNr,eqr,oqr,sw,Z5e,rqr,tqr,sZ,aqr,nqr,sqr,lw,e3e,lqr,iqr,lZ,dqr,cqr,mqr,iw,o3e,fqr,gqr,iZ,hqr,uqr,pqr,dw,r3e,_qr,bqr,dZ,vqr,Fqr,Tqr,cw,t3e,Mqr,Eqr,cZ,Cqr,wqr,Aqr,mw,a3e,Lqr,yqr,mZ,xqr,$qr,kqr,fw,n3e,Sqr,Rqr,fZ,Pqr,Bqr,Iqr,gw,kOe,Jc,hw,s3e,Bx,Nqr,l3e,qqr,SOe,pr,Ix,jqr,Yc,Dqr,gZ,Gqr,Oqr,hZ,Vqr,Xqr,zqr,Nx,Wqr,i3e,Qqr,Hqr,Uqr,Qt,qx,Jqr,d3e,Yqr,Kqr,Kc,Zqr,c3e,ejr,ojr,uZ,rjr,tjr,ajr,uw,njr,Xr,jx,sjr,m3e,ljr,ijr,Mn,djr,f3e,cjr,mjr,g3e,fjr,gjr,h3e,hjr,ujr,pjr,$e,pw,u3e,_jr,bjr,pZ,vjr,Fjr,Tjr,_w,p3e,Mjr,Ejr,_Z,Cjr,wjr,Ajr,bw,_3e,Ljr,yjr,bZ,xjr,$jr,kjr,vw,b3e,Sjr,Rjr,vZ,Pjr,Bjr,Ijr,Fw,v3e,Njr,qjr,FZ,jjr,Djr,Gjr,Tw,F3e,Ojr,Vjr,TZ,Xjr,zjr,Wjr,Mw,T3e,Qjr,Hjr,MZ,Ujr,Jjr,Yjr,Ew,M3e,Kjr,Zjr,EZ,eDr,oDr,rDr,Cw,E3e,tDr,aDr,CZ,nDr,sDr,lDr,ww,C3e,iDr,dDr,wZ,cDr,mDr,fDr,Aw,ROe,Zc,Lw,w3e,Dx,gDr,A3e,hDr,POe,_r,Gx,uDr,em,pDr,AZ,_Dr,bDr,LZ,vDr,FDr,TDr,Ox,MDr,L3e,EDr,CDr,wDr,Ht,Vx,ADr,y3e,LDr,yDr,om,xDr,x3e,$Dr,kDr,yZ,SDr,RDr,PDr,yw,BDr,zr,Xx,IDr,$3e,NDr,qDr,En,jDr,k3e,DDr,GDr,S3e,ODr,VDr,R3e,XDr,zDr,WDr,ke,xw,P3e,QDr,HDr,xZ,UDr,JDr,YDr,$w,B3e,KDr,ZDr,$Z,eGr,oGr,rGr,kw,I3e,tGr,aGr,kZ,nGr,sGr,lGr,Sw,N3e,iGr,dGr,SZ,cGr,mGr,fGr,Rw,q3e,gGr,hGr,RZ,uGr,pGr,_Gr,Pw,j3e,bGr,vGr,PZ,FGr,TGr,MGr,Bw,D3e,EGr,CGr,BZ,wGr,AGr,LGr,Iw,G3e,yGr,xGr,IZ,$Gr,kGr,SGr,Nw,O3e,RGr,PGr,NZ,BGr,IGr,NGr,qw,V3e,qGr,jGr,qZ,DGr,GGr,OGr,jw,BOe,rm,Dw,X3e,zx,VGr,z3e,XGr,IOe,br,Wx,zGr,tm,WGr,jZ,QGr,HGr,DZ,UGr,JGr,YGr,Qx,KGr,W3e,ZGr,eOr,oOr,Ut,Hx,rOr,Q3e,tOr,aOr,am,nOr,H3e,sOr,lOr,GZ,iOr,dOr,cOr,Gw,mOr,Wr,Ux,fOr,U3e,gOr,hOr,Cn,uOr,J3e,pOr,_Or,Y3e,bOr,vOr,K3e,FOr,TOr,MOr,Se,Ow,Z3e,EOr,COr,OZ,wOr,AOr,LOr,Vw,e0e,yOr,xOr,VZ,$Or,kOr,SOr,Xw,o0e,ROr,POr,XZ,BOr,IOr,NOr,zw,r0e,qOr,jOr,zZ,DOr,GOr,OOr,Ww,t0e,VOr,XOr,WZ,zOr,WOr,QOr,Qw,a0e,HOr,UOr,QZ,JOr,YOr,KOr,Hw,n0e,ZOr,eVr,HZ,oVr,rVr,tVr,Uw,s0e,aVr,nVr,UZ,sVr,lVr,iVr,Jw,l0e,dVr,cVr,JZ,mVr,fVr,gVr,Yw,i0e,hVr,uVr,YZ,pVr,_Vr,bVr,Kw,NOe,nm,Zw,d0e,Jx,vVr,c0e,FVr,qOe,vr,Yx,TVr,sm,MVr,KZ,EVr,CVr,ZZ,wVr,AVr,LVr,Kx,yVr,m0e,xVr,$Vr,kVr,Jt,Zx,SVr,f0e,RVr,PVr,lm,BVr,g0e,IVr,NVr,eee,qVr,jVr,DVr,eA,GVr,Qr,e$,OVr,h0e,VVr,XVr,wn,zVr,u0e,WVr,QVr,p0e,HVr,UVr,_0e,JVr,YVr,KVr,Re,oA,b0e,ZVr,eXr,oee,oXr,rXr,tXr,rA,v0e,aXr,nXr,ree,sXr,lXr,iXr,tA,F0e,dXr,cXr,tee,mXr,fXr,gXr,aA,T0e,hXr,uXr,aee,pXr,_Xr,bXr,nA,M0e,vXr,FXr,nee,TXr,MXr,EXr,sA,E0e,CXr,wXr,see,AXr,LXr,yXr,lA,C0e,xXr,$Xr,lee,kXr,SXr,RXr,iA,w0e,PXr,BXr,iee,IXr,NXr,qXr,dA,A0e,jXr,DXr,dee,GXr,OXr,VXr,cA,L0e,XXr,zXr,cee,WXr,QXr,HXr,mA,jOe,im,fA,y0e,o$,UXr,x0e,JXr,DOe,Fr,r$,YXr,dm,KXr,mee,ZXr,ezr,fee,ozr,rzr,tzr,t$,azr,$0e,nzr,szr,lzr,Yt,a$,izr,k0e,dzr,czr,cm,mzr,S0e,fzr,gzr,gee,hzr,uzr,pzr,gA,_zr,Hr,n$,bzr,R0e,vzr,Fzr,An,Tzr,P0e,Mzr,Ezr,B0e,Czr,wzr,I0e,Azr,Lzr,yzr,Ve,hA,N0e,xzr,$zr,hee,kzr,Szr,Rzr,uA,q0e,Pzr,Bzr,uee,Izr,Nzr,qzr,pA,j0e,jzr,Dzr,pee,Gzr,Ozr,Vzr,_A,D0e,Xzr,zzr,_ee,Wzr,Qzr,Hzr,bA,G0e,Uzr,Jzr,bee,Yzr,Kzr,Zzr,vA,O0e,eWr,oWr,vee,rWr,tWr,aWr,FA,V0e,nWr,sWr,Fee,lWr,iWr,dWr,TA,X0e,cWr,mWr,Tee,fWr,gWr,hWr,MA,GOe,mm,EA,z0e,s$,uWr,W0e,pWr,OOe,Tr,l$,_Wr,fm,bWr,Mee,vWr,FWr,Eee,TWr,MWr,EWr,i$,CWr,Q0e,wWr,AWr,LWr,Kt,d$,yWr,H0e,xWr,$Wr,gm,kWr,U0e,SWr,RWr,Cee,PWr,BWr,IWr,CA,NWr,Ur,c$,qWr,J0e,jWr,DWr,Ln,GWr,Y0e,OWr,VWr,K0e,XWr,zWr,Z0e,WWr,QWr,HWr,Xe,wA,ewe,UWr,JWr,wee,YWr,KWr,ZWr,AA,owe,eQr,oQr,Aee,rQr,tQr,aQr,LA,rwe,nQr,sQr,Lee,lQr,iQr,dQr,yA,twe,cQr,mQr,yee,fQr,gQr,hQr,xA,awe,uQr,pQr,xee,_Qr,bQr,vQr,$A,nwe,FQr,TQr,$ee,MQr,EQr,CQr,kA,swe,wQr,AQr,kee,LQr,yQr,xQr,SA,lwe,$Qr,kQr,See,SQr,RQr,PQr,RA,VOe,hm,PA,iwe,m$,BQr,dwe,IQr,XOe,Mr,f$,NQr,um,qQr,Ree,jQr,DQr,Pee,GQr,OQr,VQr,g$,XQr,cwe,zQr,WQr,QQr,Zt,h$,HQr,mwe,UQr,JQr,pm,YQr,fwe,KQr,ZQr,Bee,eHr,oHr,rHr,BA,tHr,Jr,u$,aHr,gwe,nHr,sHr,yn,lHr,hwe,iHr,dHr,uwe,cHr,mHr,pwe,fHr,gHr,hHr,_we,IA,bwe,uHr,pHr,Iee,_Hr,bHr,vHr,NA,zOe,_m,qA,vwe,p$,FHr,Fwe,THr,WOe,Er,_$,MHr,bm,EHr,Nee,CHr,wHr,qee,AHr,LHr,yHr,b$,xHr,Twe,$Hr,kHr,SHr,ea,v$,RHr,Mwe,PHr,BHr,vm,IHr,Ewe,NHr,qHr,jee,jHr,DHr,GHr,jA,OHr,Yr,F$,VHr,Cwe,XHr,zHr,xn,WHr,wwe,QHr,HHr,Awe,UHr,JHr,Lwe,YHr,KHr,ZHr,T$,DA,ywe,eUr,oUr,Dee,rUr,tUr,aUr,GA,xwe,nUr,sUr,Gee,lUr,iUr,dUr,OA,QOe,Fm,VA,$we,M$,cUr,kwe,mUr,HOe,Cr,E$,fUr,Tm,gUr,Oee,hUr,uUr,Vee,pUr,_Ur,bUr,C$,vUr,Swe,FUr,TUr,MUr,oa,w$,EUr,Rwe,CUr,wUr,Mm,AUr,Pwe,LUr,yUr,Xee,xUr,$Ur,kUr,XA,SUr,Kr,A$,RUr,Bwe,PUr,BUr,$n,IUr,Iwe,NUr,qUr,Nwe,jUr,DUr,qwe,GUr,OUr,VUr,jwe,zA,Dwe,XUr,zUr,zee,WUr,QUr,HUr,WA,UOe;return d=new re({}),ya=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),_y=new re({}),by=new P({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),km=new UUr({props:{warning:!0,$$slots:{default:[JNt]},$$scope:{ctx:y}}}),vy=new re({}),Fy=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/configuration_auto.py#L594"}}),Ey=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/configuration_auto.py#L617"}}),jg=new B({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[YNt]},$$scope:{ctx:y}}}),Cy=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/configuration_auto.py#L740"}}),wy=new re({}),Ay=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/tokenization_auto.py#L399"}}),xy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/tokenization_auto.py#L413"}}),Th=new B({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[KNt]},$$scope:{ctx:y}}}),$y=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/tokenization_auto.py#L612"}}),ky=new re({}),Sy=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/feature_extraction_auto.py#L193"}}),By=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/main/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/feature_extraction_auto.py#L207"}}),ru=new UUr({props:{$$slots:{default:[ZNt]},$$scope:{ctx:y}}}),tu=new B({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[eqt]},$$scope:{ctx:y}}}),Iy=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/feature_extraction_auto.py#L334"}}),Ny=new re({}),qy=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/processing_auto.py#L88"}}),Gy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/processing_auto.py#L102"}}),Eu=new UUr({props:{$$slots:{default:[oqt]},$$scope:{ctx:y}}}),Cu=new B({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[rqt]},$$scope:{ctx:y}}}),Oy=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/processing_auto.py#L255"}}),Vy=new re({}),Xy=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L756"}}),Wy=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomModel">BloomModel</a> (BLOOM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (CANINE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/cvt#transformers.CvtModel">CvtModel</a> (CvT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (FLAVA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXModel">GPTNeoXModel</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model">LayoutLMv3Model</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/levit#transformers.LevitModel">LevitModel</a> (LeViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Model">LongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTModel">MCTCTModel</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig">TrajectoryTransformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel">TrajectoryTransformerModel</a> (Trajectory Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Lu=new B({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[tqt]},$$scope:{ctx:y}}}),Qy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),A_=new B({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[aqt]},$$scope:{ctx:y}}}),Hy=new re({}),Uy=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L763"}}),Yy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (FLAVA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),y_=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[nqt]},$$scope:{ctx:y}}}),Ky=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),v2=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[sqt]},$$scope:{ctx:y}}}),Zy=new re({}),e7=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L778"}}),r7=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig">BloomConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bloom#transformers.BloomForCausalLM">BloomForCausalLM</a> (BLOOM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXConfig">GPTNeoXConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM">GPTNeoXForCausalLM</a> (GPT NeoX model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLM-ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),T2=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[lqt]},$$scope:{ctx:y}}}),t7=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),lb=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[iqt]},$$scope:{ctx:y}}}),a7=new re({}),n7=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L785"}}),l7=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeForMaskedLM">LukeForMaskedLM</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),db=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[dqt]},$$scope:{ctx:y}}}),i7=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Qb=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[cqt]},$$scope:{ctx:y}}}),d7=new re({}),c7=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L792"}}),f7=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration">LongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLM-ProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Ub=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[mqt]},$$scope:{ctx:y}}}),g7=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),hv=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[fqt]},$$scope:{ctx:y}}}),h7=new re({}),u7=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L801"}}),_7=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification">LayoutLMv3ForSequenceClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),pv=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[gqt]},$$scope:{ctx:y}}}),b7=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),mF=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[hqt]},$$scope:{ctx:y}}}),v7=new re({}),F7=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L846"}}),M7=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (CANINE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),gF=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[uqt]},$$scope:{ctx:y}}}),E7=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),XF=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[pqt]},$$scope:{ctx:y}}}),C7=new re({}),w7=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L853"}}),L7=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),WF=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[_qt]},$$scope:{ctx:y}}}),y7=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),ZF=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[bqt]},$$scope:{ctx:y}}}),x7=new re({}),$7=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L839"}}),S7=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (CANINE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification">LayoutLMv3ForTokenClassification</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),o1=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[vqt]},$$scope:{ctx:y}}}),R7=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),N1=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[Fqt]},$$scope:{ctx:y}}}),P7=new re({}),B7=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L810"}}),N7=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBird-Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (CANINE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config">LayoutLMv3Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering">LayoutLMv3ForQuestionAnswering</a> (LayoutLMv3 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (Megatron-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystr&#xF6;mformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),j1=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[Tqt]},$$scope:{ctx:y}}}),q7=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),LT=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[Mqt]},$$scope:{ctx:y}}}),j7=new re({}),D7=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L817"}}),O7=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),xT=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[Eqt]},$$scope:{ctx:y}}}),V7=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),ST=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[Cqt]},$$scope:{ctx:y}}}),X7=new re({}),z7=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L862"}}),Q7=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/cvt#transformers.CvtConfig">CvtConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/cvt#transformers.CvtForImageClassification">CvtForImageClassification</a> (CvT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/levit#transformers.LevitConfig">LevitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/levit#transformers.LevitForImageClassification">LevitForImageClassification</a> or <a href="/docs/transformers/main/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher">LevitForImageClassificationWithTeacher</a> (LeViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),PT=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[wqt]},$$scope:{ctx:y}}}),H7=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),HT=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[Aqt]},$$scope:{ctx:y}}}),U7=new re({}),J7=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L901"}}),K7=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),JT=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[Lqt]},$$scope:{ctx:y}}}),Z7=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),ZT=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[yqt]},$$scope:{ctx:y}}}),e8=new re({}),o8=new R({props:{name:"class transformers.AutoModelForVisualQuestionAnswering",anchor:"transformers.AutoModelForVisualQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L828"}}),t8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltForQuestionAnswering">ViltForQuestionAnswering</a> (ViLT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),oM=new B({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_config.example",$$slots:{default:[xqt]},$$scope:{ctx:y}}}),a8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),aM=new B({props:{anchor:"transformers.AutoModelForVisualQuestionAnswering.from_pretrained.example",$$slots:{default:[$qt]},$$scope:{ctx:y}}}),n8=new re({}),s8=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L908"}}),i8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),sM=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[kqt]},$$scope:{ctx:y}}}),d8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),_M=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[Sqt]},$$scope:{ctx:y}}}),c8=new re({}),m8=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L931"}}),g8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),vM=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[Rqt]},$$scope:{ctx:y}}}),h8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),AM=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[Pqt]},$$scope:{ctx:y}}}),u8=new re({}),p8=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L915"}}),b8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTConfig">MCTCTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTForCTC">MCTCTForCTC</a> (M-CTC-T model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),yM=new B({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[Bqt]},$$scope:{ctx:y}}}),v8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),DM=new B({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[Iqt]},$$scope:{ctx:y}}}),F8=new re({}),T8=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L922"}}),E8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),OM=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[Nqt]},$$scope:{ctx:y}}}),C8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),WM=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[qqt]},$$scope:{ctx:y}}}),A8=new re({}),L8=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L940"}}),x8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),HM=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[jqt]},$$scope:{ctx:y}}}),$8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),o4=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[Dqt]},$$scope:{ctx:y}}}),k8=new re({}),S8=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L947"}}),P8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),t4=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[Gqt]},$$scope:{ctx:y}}}),B8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),i4=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[Oqt]},$$scope:{ctx:y}}}),I8=new re({}),N8=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L894"}}),j8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),c4=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[Vqt]},$$scope:{ctx:y}}}),D8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),h4=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[Xqt]},$$scope:{ctx:y}}}),O8=new re({}),V8=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L869"}}),z8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),p4=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[zqt]},$$scope:{ctx:y}}}),W8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),v4=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[Wqt]},$$scope:{ctx:y}}}),Q8=new re({}),H8=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L876"}}),J8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),T4=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[Qqt]},$$scope:{ctx:y}}}),Y8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),L4=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[Hqt]},$$scope:{ctx:y}}}),K8=new re({}),Z8=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L885"}}),o9=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),x4=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[Uqt]},$$scope:{ctx:y}}}),r9=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),S4=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[Jqt]},$$scope:{ctx:y}}}),t9=new re({}),a9=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L406"}}),s9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.TFOPTModel">TFOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),P4=new B({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[Yqt]},$$scope:{ctx:y}}}),l9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),LE=new B({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[Kqt]},$$scope:{ctx:y}}}),i9=new re({}),d9=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L413"}}),m9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),xE=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[Zqt]},$$scope:{ctx:y}}}),f9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),ZE=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[ejt]},$$scope:{ctx:y}}}),g9=new re({}),h9=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L428"}}),p9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.TFOPTForCausalLM">TFOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),oC=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[ojt]},$$scope:{ctx:y}}}),_9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),uC=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[rjt]},$$scope:{ctx:y}}}),b9=new re({}),v9=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L444"}}),T9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNeXT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),_C=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[tjt]},$$scope:{ctx:y}}}),M9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),MC=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[ajt]},$$scope:{ctx:y}}}),E9=new re({}),C9=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L469"}}),A9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),CC=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[njt]},$$scope:{ctx:y}}}),L9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),zC=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[sjt]},$$scope:{ctx:y}}}),y9=new re({}),x9=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L476"}}),k9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),QC=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[ljt]},$$scope:{ctx:y}}}),S9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),a5=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[ijt]},$$scope:{ctx:y}}}),R9=new re({}),P9=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L485"}}),I9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),s5=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[djt]},$$scope:{ctx:y}}}),N9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),R5=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[cjt]},$$scope:{ctx:y}}}),q9=new re({}),j9=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L521"}}),G9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),B5=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[mjt]},$$scope:{ctx:y}}}),O9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Z5=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[fjt]},$$scope:{ctx:y}}}),V9=new re({}),X9=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L528"}}),W9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),o3=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[gjt]},$$scope:{ctx:y}}}),Q9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),a3=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[hjt]},$$scope:{ctx:y}}}),U9=new re({}),J9=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L501"}}),K9=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),s3=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[ujt]},$$scope:{ctx:y}}}),Z9=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),i3=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[pjt]},$$scope:{ctx:y}}}),ex=new re({}),ox=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L512"}}),tx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),c3=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[_jt]},$$scope:{ctx:y}}}),ax=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),k3=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[bjt]},$$scope:{ctx:y}}}),nx=new re({}),sx=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L494"}}),ix=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),R3=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[vjt]},$$scope:{ctx:y}}}),dx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),e0=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[Fjt]},$$scope:{ctx:y}}}),cx=new re({}),mx=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L462"}}),gx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),r0=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[Tjt]},$$scope:{ctx:y}}}),hx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),a0=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[Mjt]},$$scope:{ctx:y}}}),ux=new re({}),px=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L537"}}),bx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),s0=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[Ejt]},$$scope:{ctx:y}}}),vx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),i0=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[Cjt]},$$scope:{ctx:y}}}),Fx=new re({}),Tx=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L246"}}),Ex=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5Model">FlaxLongT5Model</a> (LongT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.FlaxOPTModel">FlaxOPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),c0=new B({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[wjt]},$$scope:{ctx:y}}}),Cx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),q0=new B({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[Ajt]},$$scope:{ctx:y}}}),wx=new re({}),Ax=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L260"}}),yx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.FlaxOPTForCausalLM">FlaxOPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),D0=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[Ljt]},$$scope:{ctx:y}}}),xx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Y0=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[yjt]},$$scope:{ctx:y}}}),$x=new re({}),kx=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L253"}}),Rx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Z0=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[xjt]},$$scope:{ctx:y}}}),Px=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),gw=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[$jt]},$$scope:{ctx:y}}}),Bx=new re({}),Ix=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L267"}}),qx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),uw=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[kjt]},$$scope:{ctx:y}}}),jx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Aw=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[Sjt]},$$scope:{ctx:y}}}),Dx=new re({}),Gx=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),Vx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config">LongT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration">FlaxLongT5ForConditionalGeneration</a> (LongT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (MT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),yw=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[Rjt]},$$scope:{ctx:y}}}),Xx=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),jw=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[Pjt]},$$scope:{ctx:y}}}),zx=new re({}),Wx=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),Hx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Gw=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[Bjt]},$$scope:{ctx:y}}}),Ux=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Kw=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[Ijt]},$$scope:{ctx:y}}}),Jx=new re({}),Yx=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L292"}}),Zx=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),eA=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[Njt]},$$scope:{ctx:y}}}),e$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),mA=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[qjt]},$$scope:{ctx:y}}}),o$=new re({}),r$=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),a$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),gA=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[jjt]},$$scope:{ctx:y}}}),n$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),MA=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[Djt]},$$scope:{ctx:y}}}),s$=new re({}),l$=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L308"}}),d$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),CA=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[Gjt]},$$scope:{ctx:y}}}),c$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),RA=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[Ojt]},$$scope:{ctx:y}}}),m$=new re({}),f$=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),h$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),BA=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[Vjt]},$$scope:{ctx:y}}}),u$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),NA=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[Xjt]},$$scope:{ctx:y}}}),p$=new re({}),_$=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),v$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),jA=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[zjt]},$$scope:{ctx:y}}}),F$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),OA=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[Wjt]},$$scope:{ctx:y}}}),M$=new re({}),E$=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L333"}}),w$=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),XA=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[Qjt]},$$scope:{ctx:y}}}),A$=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),WA=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[Hjt]},$$scope:{ctx:y}}}),{c(){g=a("meta"),v=l(),u=a("h1"),f=a("a"),p=a("span"),F(d.$$.fragment),h=l(),Eo=a("span"),Fi=o("Auto Classes"),Am=l(),at=a("p"),Ti=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Mi=a("code"),gy=o("from_pretrained()"),Lm=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Oe=l(),We=a("p"),Ei=o("Instantiating one of "),Sn=a("a"),hy=o("AutoConfig"),Rn=o(", "),Pn=a("a"),uy=o("AutoModel"),Ci=o(`, and
`),Bn=a("a"),py=o("AutoTokenizer"),wi=o(" will directly create a class of the relevant architecture. For instance"),ym=l(),F(ya.$$.fragment),Qe=l(),Ae=a("p"),Vk=o("will create a model that is an instance of "),Ai=a("a"),Xk=o("BertModel"),zk=o("."),Co=l(),xa=a("p"),Wk=o("There is one class of "),xm=a("code"),Qk=o("AutoModel"),nze=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),XDe=l(),Li=a("h2"),$m=a("a"),Dre=a("span"),F(_y.$$.fragment),sze=l(),Gre=a("span"),lze=o("Extending the Auto Classes"),zDe=l(),In=a("p"),ize=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Ore=a("code"),dze=o("NewModel"),cze=o(", make sure you have a "),Vre=a("code"),mze=o("NewModelConfig"),fze=o(` then you can add those to the auto
classes like this:`),WDe=l(),F(by.$$.fragment),QDe=l(),Hk=a("p"),gze=o("You will then be able to use the auto classes like you would usually do!"),HDe=l(),F(km.$$.fragment),UDe=l(),yi=a("h2"),Sm=a("a"),Xre=a("span"),F(vy.$$.fragment),hze=l(),zre=a("span"),uze=o("AutoConfig"),JDe=l(),wo=a("div"),F(Fy.$$.fragment),pze=l(),Ty=a("p"),_ze=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),Uk=a("a"),bze=o("from_pretrained()"),vze=o(" class method."),Fze=l(),My=a("p"),Tze=o("This class cannot be instantiated directly using "),Wre=a("code"),Mze=o("__init__()"),Eze=o(" (throws an error)."),Cze=l(),wr=a("div"),F(Ey.$$.fragment),wze=l(),Qre=a("p"),Aze=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),Lze=l(),xi=a("p"),yze=o("The configuration class to instantiate is selected based on the "),Hre=a("code"),xze=o("model_type"),$ze=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Ure=a("code"),kze=o("pretrained_model_name_or_path"),Sze=o(":"),Rze=l(),A=a("ul"),Rm=a("li"),Jre=a("strong"),Pze=o("albert"),Bze=o(" \u2014 "),Jk=a("a"),Ize=o("AlbertConfig"),Nze=o(" (ALBERT model)"),qze=l(),Pm=a("li"),Yre=a("strong"),jze=o("bart"),Dze=o(" \u2014 "),Yk=a("a"),Gze=o("BartConfig"),Oze=o(" (BART model)"),Vze=l(),Bm=a("li"),Kre=a("strong"),Xze=o("beit"),zze=o(" \u2014 "),Kk=a("a"),Wze=o("BeitConfig"),Qze=o(" (BEiT model)"),Hze=l(),Im=a("li"),Zre=a("strong"),Uze=o("bert"),Jze=o(" \u2014 "),Zk=a("a"),Yze=o("BertConfig"),Kze=o(" (BERT model)"),Zze=l(),Nm=a("li"),ete=a("strong"),eWe=o("bert-generation"),oWe=o(" \u2014 "),eS=a("a"),rWe=o("BertGenerationConfig"),tWe=o(" (Bert Generation model)"),aWe=l(),qm=a("li"),ote=a("strong"),nWe=o("big_bird"),sWe=o(" \u2014 "),oS=a("a"),lWe=o("BigBirdConfig"),iWe=o(" (BigBird model)"),dWe=l(),jm=a("li"),rte=a("strong"),cWe=o("bigbird_pegasus"),mWe=o(" \u2014 "),rS=a("a"),fWe=o("BigBirdPegasusConfig"),gWe=o(" (BigBird-Pegasus model)"),hWe=l(),Dm=a("li"),tte=a("strong"),uWe=o("blenderbot"),pWe=o(" \u2014 "),tS=a("a"),_We=o("BlenderbotConfig"),bWe=o(" (Blenderbot model)"),vWe=l(),Gm=a("li"),ate=a("strong"),FWe=o("blenderbot-small"),TWe=o(" \u2014 "),aS=a("a"),MWe=o("BlenderbotSmallConfig"),EWe=o(" (BlenderbotSmall model)"),CWe=l(),Om=a("li"),nte=a("strong"),wWe=o("bloom"),AWe=o(" \u2014 "),nS=a("a"),LWe=o("BloomConfig"),yWe=o(" (BLOOM model)"),xWe=l(),Vm=a("li"),ste=a("strong"),$We=o("camembert"),kWe=o(" \u2014 "),sS=a("a"),SWe=o("CamembertConfig"),RWe=o(" (CamemBERT model)"),PWe=l(),Xm=a("li"),lte=a("strong"),BWe=o("canine"),IWe=o(" \u2014 "),lS=a("a"),NWe=o("CanineConfig"),qWe=o(" (CANINE model)"),jWe=l(),zm=a("li"),ite=a("strong"),DWe=o("clip"),GWe=o(" \u2014 "),iS=a("a"),OWe=o("CLIPConfig"),VWe=o(" (CLIP model)"),XWe=l(),Wm=a("li"),dte=a("strong"),zWe=o("convbert"),WWe=o(" \u2014 "),dS=a("a"),QWe=o("ConvBertConfig"),HWe=o(" (ConvBERT model)"),UWe=l(),Qm=a("li"),cte=a("strong"),JWe=o("convnext"),YWe=o(" \u2014 "),cS=a("a"),KWe=o("ConvNextConfig"),ZWe=o(" (ConvNeXT model)"),eQe=l(),Hm=a("li"),mte=a("strong"),oQe=o("ctrl"),rQe=o(" \u2014 "),mS=a("a"),tQe=o("CTRLConfig"),aQe=o(" (CTRL model)"),nQe=l(),Um=a("li"),fte=a("strong"),sQe=o("cvt"),lQe=o(" \u2014 "),fS=a("a"),iQe=o("CvtConfig"),dQe=o(" (CvT model)"),cQe=l(),Jm=a("li"),gte=a("strong"),mQe=o("data2vec-audio"),fQe=o(" \u2014 "),gS=a("a"),gQe=o("Data2VecAudioConfig"),hQe=o(" (Data2VecAudio model)"),uQe=l(),Ym=a("li"),hte=a("strong"),pQe=o("data2vec-text"),_Qe=o(" \u2014 "),hS=a("a"),bQe=o("Data2VecTextConfig"),vQe=o(" (Data2VecText model)"),FQe=l(),Km=a("li"),ute=a("strong"),TQe=o("data2vec-vision"),MQe=o(" \u2014 "),uS=a("a"),EQe=o("Data2VecVisionConfig"),CQe=o(" (Data2VecVision model)"),wQe=l(),Zm=a("li"),pte=a("strong"),AQe=o("deberta"),LQe=o(" \u2014 "),pS=a("a"),yQe=o("DebertaConfig"),xQe=o(" (DeBERTa model)"),$Qe=l(),ef=a("li"),_te=a("strong"),kQe=o("deberta-v2"),SQe=o(" \u2014 "),_S=a("a"),RQe=o("DebertaV2Config"),PQe=o(" (DeBERTa-v2 model)"),BQe=l(),of=a("li"),bte=a("strong"),IQe=o("decision_transformer"),NQe=o(" \u2014 "),bS=a("a"),qQe=o("DecisionTransformerConfig"),jQe=o(" (Decision Transformer model)"),DQe=l(),rf=a("li"),vte=a("strong"),GQe=o("deit"),OQe=o(" \u2014 "),vS=a("a"),VQe=o("DeiTConfig"),XQe=o(" (DeiT model)"),zQe=l(),tf=a("li"),Fte=a("strong"),WQe=o("detr"),QQe=o(" \u2014 "),FS=a("a"),HQe=o("DetrConfig"),UQe=o(" (DETR model)"),JQe=l(),af=a("li"),Tte=a("strong"),YQe=o("distilbert"),KQe=o(" \u2014 "),TS=a("a"),ZQe=o("DistilBertConfig"),eHe=o(" (DistilBERT model)"),oHe=l(),nf=a("li"),Mte=a("strong"),rHe=o("dpr"),tHe=o(" \u2014 "),MS=a("a"),aHe=o("DPRConfig"),nHe=o(" (DPR model)"),sHe=l(),sf=a("li"),Ete=a("strong"),lHe=o("dpt"),iHe=o(" \u2014 "),ES=a("a"),dHe=o("DPTConfig"),cHe=o(" (DPT model)"),mHe=l(),lf=a("li"),Cte=a("strong"),fHe=o("electra"),gHe=o(" \u2014 "),CS=a("a"),hHe=o("ElectraConfig"),uHe=o(" (ELECTRA model)"),pHe=l(),df=a("li"),wte=a("strong"),_He=o("encoder-decoder"),bHe=o(" \u2014 "),wS=a("a"),vHe=o("EncoderDecoderConfig"),FHe=o(" (Encoder decoder model)"),THe=l(),cf=a("li"),Ate=a("strong"),MHe=o("flaubert"),EHe=o(" \u2014 "),AS=a("a"),CHe=o("FlaubertConfig"),wHe=o(" (FlauBERT model)"),AHe=l(),mf=a("li"),Lte=a("strong"),LHe=o("flava"),yHe=o(" \u2014 "),LS=a("a"),xHe=o("FlavaConfig"),$He=o(" (FLAVA model)"),kHe=l(),ff=a("li"),yte=a("strong"),SHe=o("fnet"),RHe=o(" \u2014 "),yS=a("a"),PHe=o("FNetConfig"),BHe=o(" (FNet model)"),IHe=l(),gf=a("li"),xte=a("strong"),NHe=o("fsmt"),qHe=o(" \u2014 "),xS=a("a"),jHe=o("FSMTConfig"),DHe=o(" (FairSeq Machine-Translation model)"),GHe=l(),hf=a("li"),$te=a("strong"),OHe=o("funnel"),VHe=o(" \u2014 "),$S=a("a"),XHe=o("FunnelConfig"),zHe=o(" (Funnel Transformer model)"),WHe=l(),uf=a("li"),kte=a("strong"),QHe=o("glpn"),HHe=o(" \u2014 "),kS=a("a"),UHe=o("GLPNConfig"),JHe=o(" (GLPN model)"),YHe=l(),pf=a("li"),Ste=a("strong"),KHe=o("gpt2"),ZHe=o(" \u2014 "),SS=a("a"),eUe=o("GPT2Config"),oUe=o(" (OpenAI GPT-2 model)"),rUe=l(),_f=a("li"),Rte=a("strong"),tUe=o("gpt_neo"),aUe=o(" \u2014 "),RS=a("a"),nUe=o("GPTNeoConfig"),sUe=o(" (GPT Neo model)"),lUe=l(),bf=a("li"),Pte=a("strong"),iUe=o("gpt_neox"),dUe=o(" \u2014 "),PS=a("a"),cUe=o("GPTNeoXConfig"),mUe=o(" (GPT NeoX model)"),fUe=l(),vf=a("li"),Bte=a("strong"),gUe=o("gptj"),hUe=o(" \u2014 "),BS=a("a"),uUe=o("GPTJConfig"),pUe=o(" (GPT-J model)"),_Ue=l(),Ff=a("li"),Ite=a("strong"),bUe=o("hubert"),vUe=o(" \u2014 "),IS=a("a"),FUe=o("HubertConfig"),TUe=o(" (Hubert model)"),MUe=l(),Tf=a("li"),Nte=a("strong"),EUe=o("ibert"),CUe=o(" \u2014 "),NS=a("a"),wUe=o("IBertConfig"),AUe=o(" (I-BERT model)"),LUe=l(),Mf=a("li"),qte=a("strong"),yUe=o("imagegpt"),xUe=o(" \u2014 "),qS=a("a"),$Ue=o("ImageGPTConfig"),kUe=o(" (ImageGPT model)"),SUe=l(),Ef=a("li"),jte=a("strong"),RUe=o("layoutlm"),PUe=o(" \u2014 "),jS=a("a"),BUe=o("LayoutLMConfig"),IUe=o(" (LayoutLM model)"),NUe=l(),Cf=a("li"),Dte=a("strong"),qUe=o("layoutlmv2"),jUe=o(" \u2014 "),DS=a("a"),DUe=o("LayoutLMv2Config"),GUe=o(" (LayoutLMv2 model)"),OUe=l(),wf=a("li"),Gte=a("strong"),VUe=o("layoutlmv3"),XUe=o(" \u2014 "),GS=a("a"),zUe=o("LayoutLMv3Config"),WUe=o(" (LayoutLMv3 model)"),QUe=l(),Af=a("li"),Ote=a("strong"),HUe=o("led"),UUe=o(" \u2014 "),OS=a("a"),JUe=o("LEDConfig"),YUe=o(" (LED model)"),KUe=l(),Lf=a("li"),Vte=a("strong"),ZUe=o("levit"),eJe=o(" \u2014 "),VS=a("a"),oJe=o("LevitConfig"),rJe=o(" (LeViT model)"),tJe=l(),yf=a("li"),Xte=a("strong"),aJe=o("longformer"),nJe=o(" \u2014 "),XS=a("a"),sJe=o("LongformerConfig"),lJe=o(" (Longformer model)"),iJe=l(),xf=a("li"),zte=a("strong"),dJe=o("longt5"),cJe=o(" \u2014 "),zS=a("a"),mJe=o("LongT5Config"),fJe=o(" (LongT5 model)"),gJe=l(),$f=a("li"),Wte=a("strong"),hJe=o("luke"),uJe=o(" \u2014 "),WS=a("a"),pJe=o("LukeConfig"),_Je=o(" (LUKE model)"),bJe=l(),kf=a("li"),Qte=a("strong"),vJe=o("lxmert"),FJe=o(" \u2014 "),QS=a("a"),TJe=o("LxmertConfig"),MJe=o(" (LXMERT model)"),EJe=l(),Sf=a("li"),Hte=a("strong"),CJe=o("m2m_100"),wJe=o(" \u2014 "),HS=a("a"),AJe=o("M2M100Config"),LJe=o(" (M2M100 model)"),yJe=l(),Rf=a("li"),Ute=a("strong"),xJe=o("marian"),$Je=o(" \u2014 "),US=a("a"),kJe=o("MarianConfig"),SJe=o(" (Marian model)"),RJe=l(),Pf=a("li"),Jte=a("strong"),PJe=o("maskformer"),BJe=o(" \u2014 "),JS=a("a"),IJe=o("MaskFormerConfig"),NJe=o(" (MaskFormer model)"),qJe=l(),Bf=a("li"),Yte=a("strong"),jJe=o("mbart"),DJe=o(" \u2014 "),YS=a("a"),GJe=o("MBartConfig"),OJe=o(" (mBART model)"),VJe=l(),If=a("li"),Kte=a("strong"),XJe=o("mctct"),zJe=o(" \u2014 "),KS=a("a"),WJe=o("MCTCTConfig"),QJe=o(" (M-CTC-T model)"),HJe=l(),Nf=a("li"),Zte=a("strong"),UJe=o("megatron-bert"),JJe=o(" \u2014 "),ZS=a("a"),YJe=o("MegatronBertConfig"),KJe=o(" (Megatron-BERT model)"),ZJe=l(),qf=a("li"),eae=a("strong"),eYe=o("mobilebert"),oYe=o(" \u2014 "),eR=a("a"),rYe=o("MobileBertConfig"),tYe=o(" (MobileBERT model)"),aYe=l(),jf=a("li"),oae=a("strong"),nYe=o("mpnet"),sYe=o(" \u2014 "),oR=a("a"),lYe=o("MPNetConfig"),iYe=o(" (MPNet model)"),dYe=l(),Df=a("li"),rae=a("strong"),cYe=o("mt5"),mYe=o(" \u2014 "),rR=a("a"),fYe=o("MT5Config"),gYe=o(" (MT5 model)"),hYe=l(),Gf=a("li"),tae=a("strong"),uYe=o("nystromformer"),pYe=o(" \u2014 "),tR=a("a"),_Ye=o("NystromformerConfig"),bYe=o(" (Nystr\xF6mformer model)"),vYe=l(),Of=a("li"),aae=a("strong"),FYe=o("openai-gpt"),TYe=o(" \u2014 "),aR=a("a"),MYe=o("OpenAIGPTConfig"),EYe=o(" (OpenAI GPT model)"),CYe=l(),Vf=a("li"),nae=a("strong"),wYe=o("opt"),AYe=o(" \u2014 "),nR=a("a"),LYe=o("OPTConfig"),yYe=o(" (OPT model)"),xYe=l(),Xf=a("li"),sae=a("strong"),$Ye=o("pegasus"),kYe=o(" \u2014 "),sR=a("a"),SYe=o("PegasusConfig"),RYe=o(" (Pegasus model)"),PYe=l(),zf=a("li"),lae=a("strong"),BYe=o("perceiver"),IYe=o(" \u2014 "),lR=a("a"),NYe=o("PerceiverConfig"),qYe=o(" (Perceiver model)"),jYe=l(),Wf=a("li"),iae=a("strong"),DYe=o("plbart"),GYe=o(" \u2014 "),iR=a("a"),OYe=o("PLBartConfig"),VYe=o(" (PLBart model)"),XYe=l(),Qf=a("li"),dae=a("strong"),zYe=o("poolformer"),WYe=o(" \u2014 "),dR=a("a"),QYe=o("PoolFormerConfig"),HYe=o(" (PoolFormer model)"),UYe=l(),Hf=a("li"),cae=a("strong"),JYe=o("prophetnet"),YYe=o(" \u2014 "),cR=a("a"),KYe=o("ProphetNetConfig"),ZYe=o(" (ProphetNet model)"),eKe=l(),Uf=a("li"),mae=a("strong"),oKe=o("qdqbert"),rKe=o(" \u2014 "),mR=a("a"),tKe=o("QDQBertConfig"),aKe=o(" (QDQBert model)"),nKe=l(),Jf=a("li"),fae=a("strong"),sKe=o("rag"),lKe=o(" \u2014 "),fR=a("a"),iKe=o("RagConfig"),dKe=o(" (RAG model)"),cKe=l(),Yf=a("li"),gae=a("strong"),mKe=o("realm"),fKe=o(" \u2014 "),gR=a("a"),gKe=o("RealmConfig"),hKe=o(" (REALM model)"),uKe=l(),Kf=a("li"),hae=a("strong"),pKe=o("reformer"),_Ke=o(" \u2014 "),hR=a("a"),bKe=o("ReformerConfig"),vKe=o(" (Reformer model)"),FKe=l(),Zf=a("li"),uae=a("strong"),TKe=o("regnet"),MKe=o(" \u2014 "),uR=a("a"),EKe=o("RegNetConfig"),CKe=o(" (RegNet model)"),wKe=l(),eg=a("li"),pae=a("strong"),AKe=o("rembert"),LKe=o(" \u2014 "),pR=a("a"),yKe=o("RemBertConfig"),xKe=o(" (RemBERT model)"),$Ke=l(),og=a("li"),_ae=a("strong"),kKe=o("resnet"),SKe=o(" \u2014 "),_R=a("a"),RKe=o("ResNetConfig"),PKe=o(" (ResNet model)"),BKe=l(),rg=a("li"),bae=a("strong"),IKe=o("retribert"),NKe=o(" \u2014 "),bR=a("a"),qKe=o("RetriBertConfig"),jKe=o(" (RetriBERT model)"),DKe=l(),tg=a("li"),vae=a("strong"),GKe=o("roberta"),OKe=o(" \u2014 "),vR=a("a"),VKe=o("RobertaConfig"),XKe=o(" (RoBERTa model)"),zKe=l(),ag=a("li"),Fae=a("strong"),WKe=o("roformer"),QKe=o(" \u2014 "),FR=a("a"),HKe=o("RoFormerConfig"),UKe=o(" (RoFormer model)"),JKe=l(),ng=a("li"),Tae=a("strong"),YKe=o("segformer"),KKe=o(" \u2014 "),TR=a("a"),ZKe=o("SegformerConfig"),eZe=o(" (SegFormer model)"),oZe=l(),sg=a("li"),Mae=a("strong"),rZe=o("sew"),tZe=o(" \u2014 "),MR=a("a"),aZe=o("SEWConfig"),nZe=o(" (SEW model)"),sZe=l(),lg=a("li"),Eae=a("strong"),lZe=o("sew-d"),iZe=o(" \u2014 "),ER=a("a"),dZe=o("SEWDConfig"),cZe=o(" (SEW-D model)"),mZe=l(),ig=a("li"),Cae=a("strong"),fZe=o("speech-encoder-decoder"),gZe=o(" \u2014 "),CR=a("a"),hZe=o("SpeechEncoderDecoderConfig"),uZe=o(" (Speech Encoder decoder model)"),pZe=l(),dg=a("li"),wae=a("strong"),_Ze=o("speech_to_text"),bZe=o(" \u2014 "),wR=a("a"),vZe=o("Speech2TextConfig"),FZe=o(" (Speech2Text model)"),TZe=l(),cg=a("li"),Aae=a("strong"),MZe=o("speech_to_text_2"),EZe=o(" \u2014 "),AR=a("a"),CZe=o("Speech2Text2Config"),wZe=o(" (Speech2Text2 model)"),AZe=l(),mg=a("li"),Lae=a("strong"),LZe=o("splinter"),yZe=o(" \u2014 "),LR=a("a"),xZe=o("SplinterConfig"),$Ze=o(" (Splinter model)"),kZe=l(),fg=a("li"),yae=a("strong"),SZe=o("squeezebert"),RZe=o(" \u2014 "),yR=a("a"),PZe=o("SqueezeBertConfig"),BZe=o(" (SqueezeBERT model)"),IZe=l(),gg=a("li"),xae=a("strong"),NZe=o("swin"),qZe=o(" \u2014 "),xR=a("a"),jZe=o("SwinConfig"),DZe=o(" (Swin Transformer model)"),GZe=l(),hg=a("li"),$ae=a("strong"),OZe=o("t5"),VZe=o(" \u2014 "),$R=a("a"),XZe=o("T5Config"),zZe=o(" (T5 model)"),WZe=l(),ug=a("li"),kae=a("strong"),QZe=o("tapas"),HZe=o(" \u2014 "),kR=a("a"),UZe=o("TapasConfig"),JZe=o(" (TAPAS model)"),YZe=l(),pg=a("li"),Sae=a("strong"),KZe=o("trajectory_transformer"),ZZe=o(" \u2014 "),SR=a("a"),eeo=o("TrajectoryTransformerConfig"),oeo=o(" (Trajectory Transformer model)"),reo=l(),_g=a("li"),Rae=a("strong"),teo=o("transfo-xl"),aeo=o(" \u2014 "),RR=a("a"),neo=o("TransfoXLConfig"),seo=o(" (Transformer-XL model)"),leo=l(),bg=a("li"),Pae=a("strong"),ieo=o("trocr"),deo=o(" \u2014 "),PR=a("a"),ceo=o("TrOCRConfig"),meo=o(" (TrOCR model)"),feo=l(),vg=a("li"),Bae=a("strong"),geo=o("unispeech"),heo=o(" \u2014 "),BR=a("a"),ueo=o("UniSpeechConfig"),peo=o(" (UniSpeech model)"),_eo=l(),Fg=a("li"),Iae=a("strong"),beo=o("unispeech-sat"),veo=o(" \u2014 "),IR=a("a"),Feo=o("UniSpeechSatConfig"),Teo=o(" (UniSpeechSat model)"),Meo=l(),Tg=a("li"),Nae=a("strong"),Eeo=o("van"),Ceo=o(" \u2014 "),NR=a("a"),weo=o("VanConfig"),Aeo=o(" (VAN model)"),Leo=l(),Mg=a("li"),qae=a("strong"),yeo=o("vilt"),xeo=o(" \u2014 "),qR=a("a"),$eo=o("ViltConfig"),keo=o(" (ViLT model)"),Seo=l(),Eg=a("li"),jae=a("strong"),Reo=o("vision-encoder-decoder"),Peo=o(" \u2014 "),jR=a("a"),Beo=o("VisionEncoderDecoderConfig"),Ieo=o(" (Vision Encoder decoder model)"),Neo=l(),Cg=a("li"),Dae=a("strong"),qeo=o("vision-text-dual-encoder"),jeo=o(" \u2014 "),DR=a("a"),Deo=o("VisionTextDualEncoderConfig"),Geo=o(" (VisionTextDualEncoder model)"),Oeo=l(),wg=a("li"),Gae=a("strong"),Veo=o("visual_bert"),Xeo=o(" \u2014 "),GR=a("a"),zeo=o("VisualBertConfig"),Weo=o(" (VisualBERT model)"),Qeo=l(),Ag=a("li"),Oae=a("strong"),Heo=o("vit"),Ueo=o(" \u2014 "),OR=a("a"),Jeo=o("ViTConfig"),Yeo=o(" (ViT model)"),Keo=l(),Lg=a("li"),Vae=a("strong"),Zeo=o("vit_mae"),eoo=o(" \u2014 "),VR=a("a"),ooo=o("ViTMAEConfig"),roo=o(" (ViTMAE model)"),too=l(),yg=a("li"),Xae=a("strong"),aoo=o("wav2vec2"),noo=o(" \u2014 "),XR=a("a"),soo=o("Wav2Vec2Config"),loo=o(" (Wav2Vec2 model)"),ioo=l(),xg=a("li"),zae=a("strong"),doo=o("wav2vec2-conformer"),coo=o(" \u2014 "),zR=a("a"),moo=o("Wav2Vec2ConformerConfig"),foo=o(" (Wav2Vec2-Conformer model)"),goo=l(),$g=a("li"),Wae=a("strong"),hoo=o("wavlm"),uoo=o(" \u2014 "),WR=a("a"),poo=o("WavLMConfig"),_oo=o(" (WavLM model)"),boo=l(),kg=a("li"),Qae=a("strong"),voo=o("xglm"),Foo=o(" \u2014 "),QR=a("a"),Too=o("XGLMConfig"),Moo=o(" (XGLM model)"),Eoo=l(),Sg=a("li"),Hae=a("strong"),Coo=o("xlm"),woo=o(" \u2014 "),HR=a("a"),Aoo=o("XLMConfig"),Loo=o(" (XLM model)"),yoo=l(),Rg=a("li"),Uae=a("strong"),xoo=o("xlm-prophetnet"),$oo=o(" \u2014 "),UR=a("a"),koo=o("XLMProphetNetConfig"),Soo=o(" (XLM-ProphetNet model)"),Roo=l(),Pg=a("li"),Jae=a("strong"),Poo=o("xlm-roberta"),Boo=o(" \u2014 "),JR=a("a"),Ioo=o("XLMRobertaConfig"),Noo=o(" (XLM-RoBERTa model)"),qoo=l(),Bg=a("li"),Yae=a("strong"),joo=o("xlm-roberta-xl"),Doo=o(" \u2014 "),YR=a("a"),Goo=o("XLMRobertaXLConfig"),Ooo=o(" (XLM-RoBERTa-XL model)"),Voo=l(),Ig=a("li"),Kae=a("strong"),Xoo=o("xlnet"),zoo=o(" \u2014 "),KR=a("a"),Woo=o("XLNetConfig"),Qoo=o(" (XLNet model)"),Hoo=l(),Ng=a("li"),Zae=a("strong"),Uoo=o("yolos"),Joo=o(" \u2014 "),ZR=a("a"),Yoo=o("YolosConfig"),Koo=o(" (YOLOS model)"),Zoo=l(),qg=a("li"),ene=a("strong"),ero=o("yoso"),oro=o(" \u2014 "),eP=a("a"),rro=o("YosoConfig"),tro=o(" (YOSO model)"),aro=l(),F(jg.$$.fragment),nro=l(),Dg=a("div"),F(Cy.$$.fragment),sro=l(),one=a("p"),lro=o("Register a new configuration for this class."),YDe=l(),$i=a("h2"),Gg=a("a"),rne=a("span"),F(wy.$$.fragment),iro=l(),tne=a("span"),dro=o("AutoTokenizer"),KDe=l(),Ao=a("div"),F(Ay.$$.fragment),cro=l(),Ly=a("p"),mro=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),oP=a("a"),fro=o("AutoTokenizer.from_pretrained()"),gro=o(" class method."),hro=l(),yy=a("p"),uro=o("This class cannot be instantiated directly using "),ane=a("code"),pro=o("__init__()"),_ro=o(" (throws an error)."),bro=l(),Ar=a("div"),F(xy.$$.fragment),vro=l(),nne=a("p"),Fro=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),Tro=l(),$a=a("p"),Mro=o("The tokenizer class to instantiate is selected based on the "),sne=a("code"),Ero=o("model_type"),Cro=o(` property of the config object (either
passed as an argument or loaded from `),lne=a("code"),wro=o("pretrained_model_name_or_path"),Aro=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ine=a("code"),Lro=o("pretrained_model_name_or_path"),yro=o(":"),xro=l(),k=a("ul"),Nn=a("li"),dne=a("strong"),$ro=o("albert"),kro=o(" \u2014 "),rP=a("a"),Sro=o("AlbertTokenizer"),Rro=o(" or "),tP=a("a"),Pro=o("AlbertTokenizerFast"),Bro=o(" (ALBERT model)"),Iro=l(),qn=a("li"),cne=a("strong"),Nro=o("bart"),qro=o(" \u2014 "),aP=a("a"),jro=o("BartTokenizer"),Dro=o(" or "),nP=a("a"),Gro=o("BartTokenizerFast"),Oro=o(" (BART model)"),Vro=l(),jn=a("li"),mne=a("strong"),Xro=o("barthez"),zro=o(" \u2014 "),sP=a("a"),Wro=o("BarthezTokenizer"),Qro=o(" or "),lP=a("a"),Hro=o("BarthezTokenizerFast"),Uro=o(" (BARThez model)"),Jro=l(),Og=a("li"),fne=a("strong"),Yro=o("bartpho"),Kro=o(" \u2014 "),iP=a("a"),Zro=o("BartphoTokenizer"),eto=o(" (BARTpho model)"),oto=l(),Dn=a("li"),gne=a("strong"),rto=o("bert"),tto=o(" \u2014 "),dP=a("a"),ato=o("BertTokenizer"),nto=o(" or "),cP=a("a"),sto=o("BertTokenizerFast"),lto=o(" (BERT model)"),ito=l(),Vg=a("li"),hne=a("strong"),dto=o("bert-generation"),cto=o(" \u2014 "),mP=a("a"),mto=o("BertGenerationTokenizer"),fto=o(" (Bert Generation model)"),gto=l(),Xg=a("li"),une=a("strong"),hto=o("bert-japanese"),uto=o(" \u2014 "),fP=a("a"),pto=o("BertJapaneseTokenizer"),_to=o(" (BertJapanese model)"),bto=l(),zg=a("li"),pne=a("strong"),vto=o("bertweet"),Fto=o(" \u2014 "),gP=a("a"),Tto=o("BertweetTokenizer"),Mto=o(" (BERTweet model)"),Eto=l(),Gn=a("li"),_ne=a("strong"),Cto=o("big_bird"),wto=o(" \u2014 "),hP=a("a"),Ato=o("BigBirdTokenizer"),Lto=o(" or "),uP=a("a"),yto=o("BigBirdTokenizerFast"),xto=o(" (BigBird model)"),$to=l(),On=a("li"),bne=a("strong"),kto=o("bigbird_pegasus"),Sto=o(" \u2014 "),pP=a("a"),Rto=o("PegasusTokenizer"),Pto=o(" or "),_P=a("a"),Bto=o("PegasusTokenizerFast"),Ito=o(" (BigBird-Pegasus model)"),Nto=l(),Vn=a("li"),vne=a("strong"),qto=o("blenderbot"),jto=o(" \u2014 "),bP=a("a"),Dto=o("BlenderbotTokenizer"),Gto=o(" or "),vP=a("a"),Oto=o("BlenderbotTokenizerFast"),Vto=o(" (Blenderbot model)"),Xto=l(),Wg=a("li"),Fne=a("strong"),zto=o("blenderbot-small"),Wto=o(" \u2014 "),FP=a("a"),Qto=o("BlenderbotSmallTokenizer"),Hto=o(" (BlenderbotSmall model)"),Uto=l(),Qg=a("li"),Tne=a("strong"),Jto=o("bloom"),Yto=o(" \u2014 "),TP=a("a"),Kto=o("BloomTokenizerFast"),Zto=o(" (BLOOM model)"),eao=l(),Hg=a("li"),Mne=a("strong"),oao=o("byt5"),rao=o(" \u2014 "),MP=a("a"),tao=o("ByT5Tokenizer"),aao=o(" (ByT5 model)"),nao=l(),Xn=a("li"),Ene=a("strong"),sao=o("camembert"),lao=o(" \u2014 "),EP=a("a"),iao=o("CamembertTokenizer"),dao=o(" or "),CP=a("a"),cao=o("CamembertTokenizerFast"),mao=o(" (CamemBERT model)"),fao=l(),Ug=a("li"),Cne=a("strong"),gao=o("canine"),hao=o(" \u2014 "),wP=a("a"),uao=o("CanineTokenizer"),pao=o(" (CANINE model)"),_ao=l(),zn=a("li"),wne=a("strong"),bao=o("clip"),vao=o(" \u2014 "),AP=a("a"),Fao=o("CLIPTokenizer"),Tao=o(" or "),LP=a("a"),Mao=o("CLIPTokenizerFast"),Eao=o(" (CLIP model)"),Cao=l(),Wn=a("li"),Ane=a("strong"),wao=o("convbert"),Aao=o(" \u2014 "),yP=a("a"),Lao=o("ConvBertTokenizer"),yao=o(" or "),xP=a("a"),xao=o("ConvBertTokenizerFast"),$ao=o(" (ConvBERT model)"),kao=l(),Qn=a("li"),Lne=a("strong"),Sao=o("cpm"),Rao=o(" \u2014 "),$P=a("a"),Pao=o("CpmTokenizer"),Bao=o(" or "),kP=a("a"),Iao=o("CpmTokenizerFast"),Nao=o(" (CPM model)"),qao=l(),Jg=a("li"),yne=a("strong"),jao=o("ctrl"),Dao=o(" \u2014 "),SP=a("a"),Gao=o("CTRLTokenizer"),Oao=o(" (CTRL model)"),Vao=l(),Hn=a("li"),xne=a("strong"),Xao=o("data2vec-text"),zao=o(" \u2014 "),RP=a("a"),Wao=o("RobertaTokenizer"),Qao=o(" or "),PP=a("a"),Hao=o("RobertaTokenizerFast"),Uao=o(" (Data2VecText model)"),Jao=l(),Un=a("li"),$ne=a("strong"),Yao=o("deberta"),Kao=o(" \u2014 "),BP=a("a"),Zao=o("DebertaTokenizer"),eno=o(" or "),IP=a("a"),ono=o("DebertaTokenizerFast"),rno=o(" (DeBERTa model)"),tno=l(),Jn=a("li"),kne=a("strong"),ano=o("deberta-v2"),nno=o(" \u2014 "),NP=a("a"),sno=o("DebertaV2Tokenizer"),lno=o(" or "),qP=a("a"),ino=o("DebertaV2TokenizerFast"),dno=o(" (DeBERTa-v2 model)"),cno=l(),Yn=a("li"),Sne=a("strong"),mno=o("distilbert"),fno=o(" \u2014 "),jP=a("a"),gno=o("DistilBertTokenizer"),hno=o(" or "),DP=a("a"),uno=o("DistilBertTokenizerFast"),pno=o(" (DistilBERT model)"),_no=l(),Kn=a("li"),Rne=a("strong"),bno=o("dpr"),vno=o(" \u2014 "),GP=a("a"),Fno=o("DPRQuestionEncoderTokenizer"),Tno=o(" or "),OP=a("a"),Mno=o("DPRQuestionEncoderTokenizerFast"),Eno=o(" (DPR model)"),Cno=l(),Zn=a("li"),Pne=a("strong"),wno=o("electra"),Ano=o(" \u2014 "),VP=a("a"),Lno=o("ElectraTokenizer"),yno=o(" or "),XP=a("a"),xno=o("ElectraTokenizerFast"),$no=o(" (ELECTRA model)"),kno=l(),Yg=a("li"),Bne=a("strong"),Sno=o("flaubert"),Rno=o(" \u2014 "),zP=a("a"),Pno=o("FlaubertTokenizer"),Bno=o(" (FlauBERT model)"),Ino=l(),es=a("li"),Ine=a("strong"),Nno=o("fnet"),qno=o(" \u2014 "),WP=a("a"),jno=o("FNetTokenizer"),Dno=o(" or "),QP=a("a"),Gno=o("FNetTokenizerFast"),Ono=o(" (FNet model)"),Vno=l(),Kg=a("li"),Nne=a("strong"),Xno=o("fsmt"),zno=o(" \u2014 "),HP=a("a"),Wno=o("FSMTTokenizer"),Qno=o(" (FairSeq Machine-Translation model)"),Hno=l(),os=a("li"),qne=a("strong"),Uno=o("funnel"),Jno=o(" \u2014 "),UP=a("a"),Yno=o("FunnelTokenizer"),Kno=o(" or "),JP=a("a"),Zno=o("FunnelTokenizerFast"),eso=o(" (Funnel Transformer model)"),oso=l(),rs=a("li"),jne=a("strong"),rso=o("gpt2"),tso=o(" \u2014 "),YP=a("a"),aso=o("GPT2Tokenizer"),nso=o(" or "),KP=a("a"),sso=o("GPT2TokenizerFast"),lso=o(" (OpenAI GPT-2 model)"),iso=l(),ts=a("li"),Dne=a("strong"),dso=o("gpt_neo"),cso=o(" \u2014 "),ZP=a("a"),mso=o("GPT2Tokenizer"),fso=o(" or "),eB=a("a"),gso=o("GPT2TokenizerFast"),hso=o(" (GPT Neo model)"),uso=l(),Zg=a("li"),Gne=a("strong"),pso=o("gpt_neox"),_so=o(" \u2014 "),oB=a("a"),bso=o("GPTNeoXTokenizerFast"),vso=o(" (GPT NeoX model)"),Fso=l(),as=a("li"),One=a("strong"),Tso=o("gptj"),Mso=o(" \u2014 "),rB=a("a"),Eso=o("GPT2Tokenizer"),Cso=o(" or "),tB=a("a"),wso=o("GPT2TokenizerFast"),Aso=o(" (GPT-J model)"),Lso=l(),ns=a("li"),Vne=a("strong"),yso=o("herbert"),xso=o(" \u2014 "),aB=a("a"),$so=o("HerbertTokenizer"),kso=o(" or "),nB=a("a"),Sso=o("HerbertTokenizerFast"),Rso=o(" (HerBERT model)"),Pso=l(),eh=a("li"),Xne=a("strong"),Bso=o("hubert"),Iso=o(" \u2014 "),sB=a("a"),Nso=o("Wav2Vec2CTCTokenizer"),qso=o(" (Hubert model)"),jso=l(),ss=a("li"),zne=a("strong"),Dso=o("ibert"),Gso=o(" \u2014 "),lB=a("a"),Oso=o("RobertaTokenizer"),Vso=o(" or "),iB=a("a"),Xso=o("RobertaTokenizerFast"),zso=o(" (I-BERT model)"),Wso=l(),ls=a("li"),Wne=a("strong"),Qso=o("layoutlm"),Hso=o(" \u2014 "),dB=a("a"),Uso=o("LayoutLMTokenizer"),Jso=o(" or "),cB=a("a"),Yso=o("LayoutLMTokenizerFast"),Kso=o(" (LayoutLM model)"),Zso=l(),is=a("li"),Qne=a("strong"),elo=o("layoutlmv2"),olo=o(" \u2014 "),mB=a("a"),rlo=o("LayoutLMv2Tokenizer"),tlo=o(" or "),fB=a("a"),alo=o("LayoutLMv2TokenizerFast"),nlo=o(" (LayoutLMv2 model)"),slo=l(),ds=a("li"),Hne=a("strong"),llo=o("layoutlmv3"),ilo=o(" \u2014 "),gB=a("a"),dlo=o("LayoutLMv3Tokenizer"),clo=o(" or "),hB=a("a"),mlo=o("LayoutLMv3TokenizerFast"),flo=o(" (LayoutLMv3 model)"),glo=l(),cs=a("li"),Une=a("strong"),hlo=o("layoutxlm"),ulo=o(" \u2014 "),uB=a("a"),plo=o("LayoutXLMTokenizer"),_lo=o(" or "),pB=a("a"),blo=o("LayoutXLMTokenizerFast"),vlo=o(" (LayoutXLM model)"),Flo=l(),ms=a("li"),Jne=a("strong"),Tlo=o("led"),Mlo=o(" \u2014 "),_B=a("a"),Elo=o("LEDTokenizer"),Clo=o(" or "),bB=a("a"),wlo=o("LEDTokenizerFast"),Alo=o(" (LED model)"),Llo=l(),fs=a("li"),Yne=a("strong"),ylo=o("longformer"),xlo=o(" \u2014 "),vB=a("a"),$lo=o("LongformerTokenizer"),klo=o(" or "),FB=a("a"),Slo=o("LongformerTokenizerFast"),Rlo=o(" (Longformer model)"),Plo=l(),gs=a("li"),Kne=a("strong"),Blo=o("longt5"),Ilo=o(" \u2014 "),TB=a("a"),Nlo=o("T5Tokenizer"),qlo=o(" or "),MB=a("a"),jlo=o("T5TokenizerFast"),Dlo=o(" (LongT5 model)"),Glo=l(),oh=a("li"),Zne=a("strong"),Olo=o("luke"),Vlo=o(" \u2014 "),EB=a("a"),Xlo=o("LukeTokenizer"),zlo=o(" (LUKE model)"),Wlo=l(),hs=a("li"),ese=a("strong"),Qlo=o("lxmert"),Hlo=o(" \u2014 "),CB=a("a"),Ulo=o("LxmertTokenizer"),Jlo=o(" or "),wB=a("a"),Ylo=o("LxmertTokenizerFast"),Klo=o(" (LXMERT model)"),Zlo=l(),rh=a("li"),ose=a("strong"),eio=o("m2m_100"),oio=o(" \u2014 "),AB=a("a"),rio=o("M2M100Tokenizer"),tio=o(" (M2M100 model)"),aio=l(),th=a("li"),rse=a("strong"),nio=o("marian"),sio=o(" \u2014 "),LB=a("a"),lio=o("MarianTokenizer"),iio=o(" (Marian model)"),dio=l(),us=a("li"),tse=a("strong"),cio=o("mbart"),mio=o(" \u2014 "),yB=a("a"),fio=o("MBartTokenizer"),gio=o(" or "),xB=a("a"),hio=o("MBartTokenizerFast"),uio=o(" (mBART model)"),pio=l(),ps=a("li"),ase=a("strong"),_io=o("mbart50"),bio=o(" \u2014 "),$B=a("a"),vio=o("MBart50Tokenizer"),Fio=o(" or "),kB=a("a"),Tio=o("MBart50TokenizerFast"),Mio=o(" (mBART-50 model)"),Eio=l(),_s=a("li"),nse=a("strong"),Cio=o("megatron-bert"),wio=o(" \u2014 "),SB=a("a"),Aio=o("BertTokenizer"),Lio=o(" or "),RB=a("a"),yio=o("BertTokenizerFast"),xio=o(" (Megatron-BERT model)"),$io=l(),ah=a("li"),sse=a("strong"),kio=o("mluke"),Sio=o(" \u2014 "),PB=a("a"),Rio=o("MLukeTokenizer"),Pio=o(" (mLUKE model)"),Bio=l(),bs=a("li"),lse=a("strong"),Iio=o("mobilebert"),Nio=o(" \u2014 "),BB=a("a"),qio=o("MobileBertTokenizer"),jio=o(" or "),IB=a("a"),Dio=o("MobileBertTokenizerFast"),Gio=o(" (MobileBERT model)"),Oio=l(),vs=a("li"),ise=a("strong"),Vio=o("mpnet"),Xio=o(" \u2014 "),NB=a("a"),zio=o("MPNetTokenizer"),Wio=o(" or "),qB=a("a"),Qio=o("MPNetTokenizerFast"),Hio=o(" (MPNet model)"),Uio=l(),Fs=a("li"),dse=a("strong"),Jio=o("mt5"),Yio=o(" \u2014 "),jB=a("a"),Kio=o("MT5Tokenizer"),Zio=o(" or "),DB=a("a"),edo=o("MT5TokenizerFast"),odo=o(" (MT5 model)"),rdo=l(),Ts=a("li"),cse=a("strong"),tdo=o("nystromformer"),ado=o(" \u2014 "),GB=a("a"),ndo=o("AlbertTokenizer"),sdo=o(" or "),OB=a("a"),ldo=o("AlbertTokenizerFast"),ido=o(" (Nystr\xF6mformer model)"),ddo=l(),Ms=a("li"),mse=a("strong"),cdo=o("openai-gpt"),mdo=o(" \u2014 "),VB=a("a"),fdo=o("OpenAIGPTTokenizer"),gdo=o(" or "),XB=a("a"),hdo=o("OpenAIGPTTokenizerFast"),udo=o(" (OpenAI GPT model)"),pdo=l(),nh=a("li"),fse=a("strong"),_do=o("opt"),bdo=o(" \u2014 "),zB=a("a"),vdo=o("GPT2Tokenizer"),Fdo=o(" (OPT model)"),Tdo=l(),Es=a("li"),gse=a("strong"),Mdo=o("pegasus"),Edo=o(" \u2014 "),WB=a("a"),Cdo=o("PegasusTokenizer"),wdo=o(" or "),QB=a("a"),Ado=o("PegasusTokenizerFast"),Ldo=o(" (Pegasus model)"),ydo=l(),sh=a("li"),hse=a("strong"),xdo=o("perceiver"),$do=o(" \u2014 "),HB=a("a"),kdo=o("PerceiverTokenizer"),Sdo=o(" (Perceiver model)"),Rdo=l(),lh=a("li"),use=a("strong"),Pdo=o("phobert"),Bdo=o(" \u2014 "),UB=a("a"),Ido=o("PhobertTokenizer"),Ndo=o(" (PhoBERT model)"),qdo=l(),ih=a("li"),pse=a("strong"),jdo=o("plbart"),Ddo=o(" \u2014 "),JB=a("a"),Gdo=o("PLBartTokenizer"),Odo=o(" (PLBart model)"),Vdo=l(),dh=a("li"),_se=a("strong"),Xdo=o("prophetnet"),zdo=o(" \u2014 "),YB=a("a"),Wdo=o("ProphetNetTokenizer"),Qdo=o(" (ProphetNet model)"),Hdo=l(),Cs=a("li"),bse=a("strong"),Udo=o("qdqbert"),Jdo=o(" \u2014 "),KB=a("a"),Ydo=o("BertTokenizer"),Kdo=o(" or "),ZB=a("a"),Zdo=o("BertTokenizerFast"),eco=o(" (QDQBert model)"),oco=l(),ch=a("li"),vse=a("strong"),rco=o("rag"),tco=o(" \u2014 "),eI=a("a"),aco=o("RagTokenizer"),nco=o(" (RAG model)"),sco=l(),ws=a("li"),Fse=a("strong"),lco=o("realm"),ico=o(" \u2014 "),oI=a("a"),dco=o("RealmTokenizer"),cco=o(" or "),rI=a("a"),mco=o("RealmTokenizerFast"),fco=o(" (REALM model)"),gco=l(),As=a("li"),Tse=a("strong"),hco=o("reformer"),uco=o(" \u2014 "),tI=a("a"),pco=o("ReformerTokenizer"),_co=o(" or "),aI=a("a"),bco=o("ReformerTokenizerFast"),vco=o(" (Reformer model)"),Fco=l(),Ls=a("li"),Mse=a("strong"),Tco=o("rembert"),Mco=o(" \u2014 "),nI=a("a"),Eco=o("RemBertTokenizer"),Cco=o(" or "),sI=a("a"),wco=o("RemBertTokenizerFast"),Aco=o(" (RemBERT model)"),Lco=l(),ys=a("li"),Ese=a("strong"),yco=o("retribert"),xco=o(" \u2014 "),lI=a("a"),$co=o("RetriBertTokenizer"),kco=o(" or "),iI=a("a"),Sco=o("RetriBertTokenizerFast"),Rco=o(" (RetriBERT model)"),Pco=l(),xs=a("li"),Cse=a("strong"),Bco=o("roberta"),Ico=o(" \u2014 "),dI=a("a"),Nco=o("RobertaTokenizer"),qco=o(" or "),cI=a("a"),jco=o("RobertaTokenizerFast"),Dco=o(" (RoBERTa model)"),Gco=l(),$s=a("li"),wse=a("strong"),Oco=o("roformer"),Vco=o(" \u2014 "),mI=a("a"),Xco=o("RoFormerTokenizer"),zco=o(" or "),fI=a("a"),Wco=o("RoFormerTokenizerFast"),Qco=o(" (RoFormer model)"),Hco=l(),mh=a("li"),Ase=a("strong"),Uco=o("speech_to_text"),Jco=o(" \u2014 "),gI=a("a"),Yco=o("Speech2TextTokenizer"),Kco=o(" (Speech2Text model)"),Zco=l(),fh=a("li"),Lse=a("strong"),emo=o("speech_to_text_2"),omo=o(" \u2014 "),hI=a("a"),rmo=o("Speech2Text2Tokenizer"),tmo=o(" (Speech2Text2 model)"),amo=l(),ks=a("li"),yse=a("strong"),nmo=o("splinter"),smo=o(" \u2014 "),uI=a("a"),lmo=o("SplinterTokenizer"),imo=o(" or "),pI=a("a"),dmo=o("SplinterTokenizerFast"),cmo=o(" (Splinter model)"),mmo=l(),Ss=a("li"),xse=a("strong"),fmo=o("squeezebert"),gmo=o(" \u2014 "),_I=a("a"),hmo=o("SqueezeBertTokenizer"),umo=o(" or "),bI=a("a"),pmo=o("SqueezeBertTokenizerFast"),_mo=o(" (SqueezeBERT model)"),bmo=l(),Rs=a("li"),$se=a("strong"),vmo=o("t5"),Fmo=o(" \u2014 "),vI=a("a"),Tmo=o("T5Tokenizer"),Mmo=o(" or "),FI=a("a"),Emo=o("T5TokenizerFast"),Cmo=o(" (T5 model)"),wmo=l(),gh=a("li"),kse=a("strong"),Amo=o("tapas"),Lmo=o(" \u2014 "),TI=a("a"),ymo=o("TapasTokenizer"),xmo=o(" (TAPAS model)"),$mo=l(),hh=a("li"),Sse=a("strong"),kmo=o("tapex"),Smo=o(" \u2014 "),MI=a("a"),Rmo=o("TapexTokenizer"),Pmo=o(" (TAPEX model)"),Bmo=l(),uh=a("li"),Rse=a("strong"),Imo=o("transfo-xl"),Nmo=o(" \u2014 "),EI=a("a"),qmo=o("TransfoXLTokenizer"),jmo=o(" (Transformer-XL model)"),Dmo=l(),Ps=a("li"),Pse=a("strong"),Gmo=o("vilt"),Omo=o(" \u2014 "),CI=a("a"),Vmo=o("BertTokenizer"),Xmo=o(" or "),wI=a("a"),zmo=o("BertTokenizerFast"),Wmo=o(" (ViLT model)"),Qmo=l(),Bs=a("li"),Bse=a("strong"),Hmo=o("visual_bert"),Umo=o(" \u2014 "),AI=a("a"),Jmo=o("BertTokenizer"),Ymo=o(" or "),LI=a("a"),Kmo=o("BertTokenizerFast"),Zmo=o(" (VisualBERT model)"),efo=l(),ph=a("li"),Ise=a("strong"),ofo=o("wav2vec2"),rfo=o(" \u2014 "),yI=a("a"),tfo=o("Wav2Vec2CTCTokenizer"),afo=o(" (Wav2Vec2 model)"),nfo=l(),_h=a("li"),Nse=a("strong"),sfo=o("wav2vec2-conformer"),lfo=o(" \u2014 "),xI=a("a"),ifo=o("Wav2Vec2CTCTokenizer"),dfo=o(" (Wav2Vec2-Conformer model)"),cfo=l(),bh=a("li"),qse=a("strong"),mfo=o("wav2vec2_phoneme"),ffo=o(" \u2014 "),$I=a("a"),gfo=o("Wav2Vec2PhonemeCTCTokenizer"),hfo=o(" (Wav2Vec2Phoneme model)"),ufo=l(),Is=a("li"),jse=a("strong"),pfo=o("xglm"),_fo=o(" \u2014 "),kI=a("a"),bfo=o("XGLMTokenizer"),vfo=o(" or "),SI=a("a"),Ffo=o("XGLMTokenizerFast"),Tfo=o(" (XGLM model)"),Mfo=l(),vh=a("li"),Dse=a("strong"),Efo=o("xlm"),Cfo=o(" \u2014 "),RI=a("a"),wfo=o("XLMTokenizer"),Afo=o(" (XLM model)"),Lfo=l(),Fh=a("li"),Gse=a("strong"),yfo=o("xlm-prophetnet"),xfo=o(" \u2014 "),PI=a("a"),$fo=o("XLMProphetNetTokenizer"),kfo=o(" (XLM-ProphetNet model)"),Sfo=l(),Ns=a("li"),Ose=a("strong"),Rfo=o("xlm-roberta"),Pfo=o(" \u2014 "),BI=a("a"),Bfo=o("XLMRobertaTokenizer"),Ifo=o(" or "),II=a("a"),Nfo=o("XLMRobertaTokenizerFast"),qfo=o(" (XLM-RoBERTa model)"),jfo=l(),qs=a("li"),Vse=a("strong"),Dfo=o("xlm-roberta-xl"),Gfo=o(" \u2014 "),NI=a("a"),Ofo=o("RobertaTokenizer"),Vfo=o(" or "),qI=a("a"),Xfo=o("RobertaTokenizerFast"),zfo=o(" (XLM-RoBERTa-XL model)"),Wfo=l(),js=a("li"),Xse=a("strong"),Qfo=o("xlnet"),Hfo=o(" \u2014 "),jI=a("a"),Ufo=o("XLNetTokenizer"),Jfo=o(" or "),DI=a("a"),Yfo=o("XLNetTokenizerFast"),Kfo=o(" (XLNet model)"),Zfo=l(),Ds=a("li"),zse=a("strong"),ego=o("yoso"),ogo=o(" \u2014 "),GI=a("a"),rgo=o("AlbertTokenizer"),tgo=o(" or "),OI=a("a"),ago=o("AlbertTokenizerFast"),ngo=o(" (YOSO model)"),sgo=l(),F(Th.$$.fragment),lgo=l(),Mh=a("div"),F($y.$$.fragment),igo=l(),Wse=a("p"),dgo=o("Register a new tokenizer in this mapping."),ZDe=l(),ki=a("h2"),Eh=a("a"),Qse=a("span"),F(ky.$$.fragment),cgo=l(),Hse=a("span"),mgo=o("AutoFeatureExtractor"),eGe=l(),Lo=a("div"),F(Sy.$$.fragment),fgo=l(),Ry=a("p"),ggo=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),VI=a("a"),hgo=o("AutoFeatureExtractor.from_pretrained()"),ugo=o(" class method."),pgo=l(),Py=a("p"),_go=o("This class cannot be instantiated directly using "),Use=a("code"),bgo=o("__init__()"),vgo=o(" (throws an error)."),Fgo=l(),He=a("div"),F(By.$$.fragment),Tgo=l(),Jse=a("p"),Mgo=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Ego=l(),ka=a("p"),Cgo=o("The feature extractor class to instantiate is selected based on the "),Yse=a("code"),wgo=o("model_type"),Ago=o(` property of the config object
(either passed as an argument or loaded from `),Kse=a("code"),Lgo=o("pretrained_model_name_or_path"),ygo=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Zse=a("code"),xgo=o("pretrained_model_name_or_path"),$go=o(":"),kgo=l(),Y=a("ul"),Ch=a("li"),ele=a("strong"),Sgo=o("beit"),Rgo=o(" \u2014 "),XI=a("a"),Pgo=o("BeitFeatureExtractor"),Bgo=o(" (BEiT model)"),Igo=l(),wh=a("li"),ole=a("strong"),Ngo=o("clip"),qgo=o(" \u2014 "),zI=a("a"),jgo=o("CLIPFeatureExtractor"),Dgo=o(" (CLIP model)"),Ggo=l(),Ah=a("li"),rle=a("strong"),Ogo=o("convnext"),Vgo=o(" \u2014 "),WI=a("a"),Xgo=o("ConvNextFeatureExtractor"),zgo=o(" (ConvNeXT model)"),Wgo=l(),Lh=a("li"),tle=a("strong"),Qgo=o("cvt"),Hgo=o(" \u2014 "),QI=a("a"),Ugo=o("ConvNextFeatureExtractor"),Jgo=o(" (CvT model)"),Ygo=l(),yh=a("li"),ale=a("strong"),Kgo=o("data2vec-audio"),Zgo=o(" \u2014 "),HI=a("a"),eho=o("Wav2Vec2FeatureExtractor"),oho=o(" (Data2VecAudio model)"),rho=l(),xh=a("li"),nle=a("strong"),tho=o("data2vec-vision"),aho=o(" \u2014 "),UI=a("a"),nho=o("BeitFeatureExtractor"),sho=o(" (Data2VecVision model)"),lho=l(),$h=a("li"),sle=a("strong"),iho=o("deit"),dho=o(" \u2014 "),JI=a("a"),cho=o("DeiTFeatureExtractor"),mho=o(" (DeiT model)"),fho=l(),kh=a("li"),lle=a("strong"),gho=o("detr"),hho=o(" \u2014 "),YI=a("a"),uho=o("DetrFeatureExtractor"),pho=o(" (DETR model)"),_ho=l(),Sh=a("li"),ile=a("strong"),bho=o("dpt"),vho=o(" \u2014 "),KI=a("a"),Fho=o("DPTFeatureExtractor"),Tho=o(" (DPT model)"),Mho=l(),Rh=a("li"),dle=a("strong"),Eho=o("flava"),Cho=o(" \u2014 "),ZI=a("a"),who=o("FlavaFeatureExtractor"),Aho=o(" (FLAVA model)"),Lho=l(),Ph=a("li"),cle=a("strong"),yho=o("glpn"),xho=o(" \u2014 "),eN=a("a"),$ho=o("GLPNFeatureExtractor"),kho=o(" (GLPN model)"),Sho=l(),Bh=a("li"),mle=a("strong"),Rho=o("hubert"),Pho=o(" \u2014 "),oN=a("a"),Bho=o("Wav2Vec2FeatureExtractor"),Iho=o(" (Hubert model)"),Nho=l(),Ih=a("li"),fle=a("strong"),qho=o("imagegpt"),jho=o(" \u2014 "),rN=a("a"),Dho=o("ImageGPTFeatureExtractor"),Gho=o(" (ImageGPT model)"),Oho=l(),Nh=a("li"),gle=a("strong"),Vho=o("layoutlmv2"),Xho=o(" \u2014 "),tN=a("a"),zho=o("LayoutLMv2FeatureExtractor"),Who=o(" (LayoutLMv2 model)"),Qho=l(),qh=a("li"),hle=a("strong"),Hho=o("layoutlmv3"),Uho=o(" \u2014 "),aN=a("a"),Jho=o("LayoutLMv3FeatureExtractor"),Yho=o(" (LayoutLMv3 model)"),Kho=l(),jh=a("li"),ule=a("strong"),Zho=o("levit"),euo=o(" \u2014 "),nN=a("a"),ouo=o("LevitFeatureExtractor"),ruo=o(" (LeViT model)"),tuo=l(),Dh=a("li"),ple=a("strong"),auo=o("maskformer"),nuo=o(" \u2014 "),sN=a("a"),suo=o("MaskFormerFeatureExtractor"),luo=o(" (MaskFormer model)"),iuo=l(),Gh=a("li"),_le=a("strong"),duo=o("mctct"),cuo=o(" \u2014 "),lN=a("a"),muo=o("MCTCTFeatureExtractor"),fuo=o(" (M-CTC-T model)"),guo=l(),Oh=a("li"),ble=a("strong"),huo=o("perceiver"),uuo=o(" \u2014 "),iN=a("a"),puo=o("PerceiverFeatureExtractor"),_uo=o(" (Perceiver model)"),buo=l(),Vh=a("li"),vle=a("strong"),vuo=o("poolformer"),Fuo=o(" \u2014 "),dN=a("a"),Tuo=o("PoolFormerFeatureExtractor"),Muo=o(" (PoolFormer model)"),Euo=l(),Xh=a("li"),Fle=a("strong"),Cuo=o("regnet"),wuo=o(" \u2014 "),cN=a("a"),Auo=o("ConvNextFeatureExtractor"),Luo=o(" (RegNet model)"),yuo=l(),zh=a("li"),Tle=a("strong"),xuo=o("resnet"),$uo=o(" \u2014 "),mN=a("a"),kuo=o("ConvNextFeatureExtractor"),Suo=o(" (ResNet model)"),Ruo=l(),Wh=a("li"),Mle=a("strong"),Puo=o("segformer"),Buo=o(" \u2014 "),fN=a("a"),Iuo=o("SegformerFeatureExtractor"),Nuo=o(" (SegFormer model)"),quo=l(),Qh=a("li"),Ele=a("strong"),juo=o("speech_to_text"),Duo=o(" \u2014 "),gN=a("a"),Guo=o("Speech2TextFeatureExtractor"),Ouo=o(" (Speech2Text model)"),Vuo=l(),Hh=a("li"),Cle=a("strong"),Xuo=o("swin"),zuo=o(" \u2014 "),hN=a("a"),Wuo=o("ViTFeatureExtractor"),Quo=o(" (Swin Transformer model)"),Huo=l(),Uh=a("li"),wle=a("strong"),Uuo=o("van"),Juo=o(" \u2014 "),uN=a("a"),Yuo=o("ConvNextFeatureExtractor"),Kuo=o(" (VAN model)"),Zuo=l(),Jh=a("li"),Ale=a("strong"),epo=o("vilt"),opo=o(" \u2014 "),pN=a("a"),rpo=o("ViltFeatureExtractor"),tpo=o(" (ViLT model)"),apo=l(),Yh=a("li"),Lle=a("strong"),npo=o("vit"),spo=o(" \u2014 "),_N=a("a"),lpo=o("ViTFeatureExtractor"),ipo=o(" (ViT model)"),dpo=l(),Kh=a("li"),yle=a("strong"),cpo=o("vit_mae"),mpo=o(" \u2014 "),bN=a("a"),fpo=o("ViTFeatureExtractor"),gpo=o(" (ViTMAE model)"),hpo=l(),Zh=a("li"),xle=a("strong"),upo=o("wav2vec2"),ppo=o(" \u2014 "),vN=a("a"),_po=o("Wav2Vec2FeatureExtractor"),bpo=o(" (Wav2Vec2 model)"),vpo=l(),eu=a("li"),$le=a("strong"),Fpo=o("wav2vec2-conformer"),Tpo=o(" \u2014 "),FN=a("a"),Mpo=o("Wav2Vec2FeatureExtractor"),Epo=o(" (Wav2Vec2-Conformer model)"),Cpo=l(),ou=a("li"),kle=a("strong"),wpo=o("yolos"),Apo=o(" \u2014 "),TN=a("a"),Lpo=o("YolosFeatureExtractor"),ypo=o(" (YOLOS model)"),xpo=l(),F(ru.$$.fragment),$po=l(),F(tu.$$.fragment),kpo=l(),au=a("div"),F(Iy.$$.fragment),Spo=l(),Sle=a("p"),Rpo=o("Register a new feature extractor for this class."),oGe=l(),Si=a("h2"),nu=a("a"),Rle=a("span"),F(Ny.$$.fragment),Ppo=l(),Ple=a("span"),Bpo=o("AutoProcessor"),rGe=l(),yo=a("div"),F(qy.$$.fragment),Ipo=l(),jy=a("p"),Npo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),MN=a("a"),qpo=o("AutoProcessor.from_pretrained()"),jpo=o(" class method."),Dpo=l(),Dy=a("p"),Gpo=o("This class cannot be instantiated directly using "),Ble=a("code"),Opo=o("__init__()"),Vpo=o(" (throws an error)."),Xpo=l(),Ue=a("div"),F(Gy.$$.fragment),zpo=l(),Ile=a("p"),Wpo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Qpo=l(),Ri=a("p"),Hpo=o("The processor class to instantiate is selected based on the "),Nle=a("code"),Upo=o("model_type"),Jpo=o(` property of the config object (either
passed as an argument or loaded from `),qle=a("code"),Ypo=o("pretrained_model_name_or_path"),Kpo=o(" if possible):"),Zpo=l(),he=a("ul"),su=a("li"),jle=a("strong"),e_o=o("clip"),o_o=o(" \u2014 "),EN=a("a"),r_o=o("CLIPProcessor"),t_o=o(" (CLIP model)"),a_o=l(),lu=a("li"),Dle=a("strong"),n_o=o("flava"),s_o=o(" \u2014 "),Gle=a("code"),l_o=o("FLAVAProcessor"),i_o=o(" (FLAVA model)"),d_o=l(),iu=a("li"),Ole=a("strong"),c_o=o("layoutlmv2"),m_o=o(" \u2014 "),CN=a("a"),f_o=o("LayoutLMv2Processor"),g_o=o(" (LayoutLMv2 model)"),h_o=l(),du=a("li"),Vle=a("strong"),u_o=o("layoutlmv3"),p_o=o(" \u2014 "),wN=a("a"),__o=o("LayoutLMv3Processor"),b_o=o(" (LayoutLMv3 model)"),v_o=l(),cu=a("li"),Xle=a("strong"),F_o=o("layoutxlm"),T_o=o(" \u2014 "),AN=a("a"),M_o=o("LayoutXLMProcessor"),E_o=o(" (LayoutXLM model)"),C_o=l(),mu=a("li"),zle=a("strong"),w_o=o("sew"),A_o=o(" \u2014 "),LN=a("a"),L_o=o("Wav2Vec2Processor"),y_o=o(" (SEW model)"),x_o=l(),fu=a("li"),Wle=a("strong"),$_o=o("sew-d"),k_o=o(" \u2014 "),yN=a("a"),S_o=o("Wav2Vec2Processor"),R_o=o(" (SEW-D model)"),P_o=l(),gu=a("li"),Qle=a("strong"),B_o=o("speech_to_text"),I_o=o(" \u2014 "),xN=a("a"),N_o=o("Speech2TextProcessor"),q_o=o(" (Speech2Text model)"),j_o=l(),hu=a("li"),Hle=a("strong"),D_o=o("speech_to_text_2"),G_o=o(" \u2014 "),$N=a("a"),O_o=o("Speech2Text2Processor"),V_o=o(" (Speech2Text2 model)"),X_o=l(),uu=a("li"),Ule=a("strong"),z_o=o("trocr"),W_o=o(" \u2014 "),kN=a("a"),Q_o=o("TrOCRProcessor"),H_o=o(" (TrOCR model)"),U_o=l(),pu=a("li"),Jle=a("strong"),J_o=o("unispeech"),Y_o=o(" \u2014 "),SN=a("a"),K_o=o("Wav2Vec2Processor"),Z_o=o(" (UniSpeech model)"),e2o=l(),_u=a("li"),Yle=a("strong"),o2o=o("unispeech-sat"),r2o=o(" \u2014 "),RN=a("a"),t2o=o("Wav2Vec2Processor"),a2o=o(" (UniSpeechSat model)"),n2o=l(),bu=a("li"),Kle=a("strong"),s2o=o("vilt"),l2o=o(" \u2014 "),PN=a("a"),i2o=o("ViltProcessor"),d2o=o(" (ViLT model)"),c2o=l(),vu=a("li"),Zle=a("strong"),m2o=o("vision-text-dual-encoder"),f2o=o(" \u2014 "),BN=a("a"),g2o=o("VisionTextDualEncoderProcessor"),h2o=o(" (VisionTextDualEncoder model)"),u2o=l(),Fu=a("li"),eie=a("strong"),p2o=o("wav2vec2"),_2o=o(" \u2014 "),IN=a("a"),b2o=o("Wav2Vec2Processor"),v2o=o(" (Wav2Vec2 model)"),F2o=l(),Tu=a("li"),oie=a("strong"),T2o=o("wav2vec2-conformer"),M2o=o(" \u2014 "),NN=a("a"),E2o=o("Wav2Vec2Processor"),C2o=o(" (Wav2Vec2-Conformer model)"),w2o=l(),Mu=a("li"),rie=a("strong"),A2o=o("wavlm"),L2o=o(" \u2014 "),qN=a("a"),y2o=o("Wav2Vec2Processor"),x2o=o(" (WavLM model)"),$2o=l(),F(Eu.$$.fragment),k2o=l(),F(Cu.$$.fragment),S2o=l(),wu=a("div"),F(Oy.$$.fragment),R2o=l(),tie=a("p"),P2o=o("Register a new processor for this class."),tGe=l(),Pi=a("h2"),Au=a("a"),aie=a("span"),F(Vy.$$.fragment),B2o=l(),nie=a("span"),I2o=o("AutoModel"),aGe=l(),xo=a("div"),F(Xy.$$.fragment),N2o=l(),Bi=a("p"),q2o=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),jN=a("a"),j2o=o("from_pretrained()"),D2o=o(" class method or the "),DN=a("a"),G2o=o("from_config()"),O2o=o(` class
method.`),V2o=l(),zy=a("p"),X2o=o("This class cannot be instantiated directly using "),sie=a("code"),z2o=o("__init__()"),W2o=o(" (throws an error)."),Q2o=l(),nt=a("div"),F(Wy.$$.fragment),H2o=l(),lie=a("p"),U2o=o("Instantiates one of the base model classes of the library from a configuration."),J2o=l(),Ii=a("p"),Y2o=o(`Note:
Loading a model from its configuration file does `),iie=a("strong"),K2o=o("not"),Z2o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GN=a("a"),ebo=o("from_pretrained()"),obo=o(" to load the model weights."),rbo=l(),F(Lu.$$.fragment),tbo=l(),Je=a("div"),F(Qy.$$.fragment),abo=l(),die=a("p"),nbo=o("Instantiate one of the base model classes of the library from a pretrained model."),sbo=l(),Sa=a("p"),lbo=o("The model class to instantiate is selected based on the "),cie=a("code"),ibo=o("model_type"),dbo=o(` property of the config object (either
passed as an argument or loaded from `),mie=a("code"),cbo=o("pretrained_model_name_or_path"),mbo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fie=a("code"),fbo=o("pretrained_model_name_or_path"),gbo=o(":"),hbo=l(),x=a("ul"),yu=a("li"),gie=a("strong"),ubo=o("albert"),pbo=o(" \u2014 "),ON=a("a"),_bo=o("AlbertModel"),bbo=o(" (ALBERT model)"),vbo=l(),xu=a("li"),hie=a("strong"),Fbo=o("bart"),Tbo=o(" \u2014 "),VN=a("a"),Mbo=o("BartModel"),Ebo=o(" (BART model)"),Cbo=l(),$u=a("li"),uie=a("strong"),wbo=o("beit"),Abo=o(" \u2014 "),XN=a("a"),Lbo=o("BeitModel"),ybo=o(" (BEiT model)"),xbo=l(),ku=a("li"),pie=a("strong"),$bo=o("bert"),kbo=o(" \u2014 "),zN=a("a"),Sbo=o("BertModel"),Rbo=o(" (BERT model)"),Pbo=l(),Su=a("li"),_ie=a("strong"),Bbo=o("bert-generation"),Ibo=o(" \u2014 "),WN=a("a"),Nbo=o("BertGenerationEncoder"),qbo=o(" (Bert Generation model)"),jbo=l(),Ru=a("li"),bie=a("strong"),Dbo=o("big_bird"),Gbo=o(" \u2014 "),QN=a("a"),Obo=o("BigBirdModel"),Vbo=o(" (BigBird model)"),Xbo=l(),Pu=a("li"),vie=a("strong"),zbo=o("bigbird_pegasus"),Wbo=o(" \u2014 "),HN=a("a"),Qbo=o("BigBirdPegasusModel"),Hbo=o(" (BigBird-Pegasus model)"),Ubo=l(),Bu=a("li"),Fie=a("strong"),Jbo=o("blenderbot"),Ybo=o(" \u2014 "),UN=a("a"),Kbo=o("BlenderbotModel"),Zbo=o(" (Blenderbot model)"),evo=l(),Iu=a("li"),Tie=a("strong"),ovo=o("blenderbot-small"),rvo=o(" \u2014 "),JN=a("a"),tvo=o("BlenderbotSmallModel"),avo=o(" (BlenderbotSmall model)"),nvo=l(),Nu=a("li"),Mie=a("strong"),svo=o("bloom"),lvo=o(" \u2014 "),YN=a("a"),ivo=o("BloomModel"),dvo=o(" (BLOOM model)"),cvo=l(),qu=a("li"),Eie=a("strong"),mvo=o("camembert"),fvo=o(" \u2014 "),KN=a("a"),gvo=o("CamembertModel"),hvo=o(" (CamemBERT model)"),uvo=l(),ju=a("li"),Cie=a("strong"),pvo=o("canine"),_vo=o(" \u2014 "),ZN=a("a"),bvo=o("CanineModel"),vvo=o(" (CANINE model)"),Fvo=l(),Du=a("li"),wie=a("strong"),Tvo=o("clip"),Mvo=o(" \u2014 "),eq=a("a"),Evo=o("CLIPModel"),Cvo=o(" (CLIP model)"),wvo=l(),Gu=a("li"),Aie=a("strong"),Avo=o("convbert"),Lvo=o(" \u2014 "),oq=a("a"),yvo=o("ConvBertModel"),xvo=o(" (ConvBERT model)"),$vo=l(),Ou=a("li"),Lie=a("strong"),kvo=o("convnext"),Svo=o(" \u2014 "),rq=a("a"),Rvo=o("ConvNextModel"),Pvo=o(" (ConvNeXT model)"),Bvo=l(),Vu=a("li"),yie=a("strong"),Ivo=o("ctrl"),Nvo=o(" \u2014 "),tq=a("a"),qvo=o("CTRLModel"),jvo=o(" (CTRL model)"),Dvo=l(),Xu=a("li"),xie=a("strong"),Gvo=o("cvt"),Ovo=o(" \u2014 "),aq=a("a"),Vvo=o("CvtModel"),Xvo=o(" (CvT model)"),zvo=l(),zu=a("li"),$ie=a("strong"),Wvo=o("data2vec-audio"),Qvo=o(" \u2014 "),nq=a("a"),Hvo=o("Data2VecAudioModel"),Uvo=o(" (Data2VecAudio model)"),Jvo=l(),Wu=a("li"),kie=a("strong"),Yvo=o("data2vec-text"),Kvo=o(" \u2014 "),sq=a("a"),Zvo=o("Data2VecTextModel"),eFo=o(" (Data2VecText model)"),oFo=l(),Qu=a("li"),Sie=a("strong"),rFo=o("data2vec-vision"),tFo=o(" \u2014 "),lq=a("a"),aFo=o("Data2VecVisionModel"),nFo=o(" (Data2VecVision model)"),sFo=l(),Hu=a("li"),Rie=a("strong"),lFo=o("deberta"),iFo=o(" \u2014 "),iq=a("a"),dFo=o("DebertaModel"),cFo=o(" (DeBERTa model)"),mFo=l(),Uu=a("li"),Pie=a("strong"),fFo=o("deberta-v2"),gFo=o(" \u2014 "),dq=a("a"),hFo=o("DebertaV2Model"),uFo=o(" (DeBERTa-v2 model)"),pFo=l(),Ju=a("li"),Bie=a("strong"),_Fo=o("decision_transformer"),bFo=o(" \u2014 "),cq=a("a"),vFo=o("DecisionTransformerModel"),FFo=o(" (Decision Transformer model)"),TFo=l(),Yu=a("li"),Iie=a("strong"),MFo=o("deit"),EFo=o(" \u2014 "),mq=a("a"),CFo=o("DeiTModel"),wFo=o(" (DeiT model)"),AFo=l(),Ku=a("li"),Nie=a("strong"),LFo=o("detr"),yFo=o(" \u2014 "),fq=a("a"),xFo=o("DetrModel"),$Fo=o(" (DETR model)"),kFo=l(),Zu=a("li"),qie=a("strong"),SFo=o("distilbert"),RFo=o(" \u2014 "),gq=a("a"),PFo=o("DistilBertModel"),BFo=o(" (DistilBERT model)"),IFo=l(),ep=a("li"),jie=a("strong"),NFo=o("dpr"),qFo=o(" \u2014 "),hq=a("a"),jFo=o("DPRQuestionEncoder"),DFo=o(" (DPR model)"),GFo=l(),op=a("li"),Die=a("strong"),OFo=o("dpt"),VFo=o(" \u2014 "),uq=a("a"),XFo=o("DPTModel"),zFo=o(" (DPT model)"),WFo=l(),rp=a("li"),Gie=a("strong"),QFo=o("electra"),HFo=o(" \u2014 "),pq=a("a"),UFo=o("ElectraModel"),JFo=o(" (ELECTRA model)"),YFo=l(),tp=a("li"),Oie=a("strong"),KFo=o("flaubert"),ZFo=o(" \u2014 "),_q=a("a"),e1o=o("FlaubertModel"),o1o=o(" (FlauBERT model)"),r1o=l(),ap=a("li"),Vie=a("strong"),t1o=o("flava"),a1o=o(" \u2014 "),bq=a("a"),n1o=o("FlavaModel"),s1o=o(" (FLAVA model)"),l1o=l(),np=a("li"),Xie=a("strong"),i1o=o("fnet"),d1o=o(" \u2014 "),vq=a("a"),c1o=o("FNetModel"),m1o=o(" (FNet model)"),f1o=l(),sp=a("li"),zie=a("strong"),g1o=o("fsmt"),h1o=o(" \u2014 "),Fq=a("a"),u1o=o("FSMTModel"),p1o=o(" (FairSeq Machine-Translation model)"),_1o=l(),Gs=a("li"),Wie=a("strong"),b1o=o("funnel"),v1o=o(" \u2014 "),Tq=a("a"),F1o=o("FunnelModel"),T1o=o(" or "),Mq=a("a"),M1o=o("FunnelBaseModel"),E1o=o(" (Funnel Transformer model)"),C1o=l(),lp=a("li"),Qie=a("strong"),w1o=o("glpn"),A1o=o(" \u2014 "),Eq=a("a"),L1o=o("GLPNModel"),y1o=o(" (GLPN model)"),x1o=l(),ip=a("li"),Hie=a("strong"),$1o=o("gpt2"),k1o=o(" \u2014 "),Cq=a("a"),S1o=o("GPT2Model"),R1o=o(" (OpenAI GPT-2 model)"),P1o=l(),dp=a("li"),Uie=a("strong"),B1o=o("gpt_neo"),I1o=o(" \u2014 "),wq=a("a"),N1o=o("GPTNeoModel"),q1o=o(" (GPT Neo model)"),j1o=l(),cp=a("li"),Jie=a("strong"),D1o=o("gpt_neox"),G1o=o(" \u2014 "),Aq=a("a"),O1o=o("GPTNeoXModel"),V1o=o(" (GPT NeoX model)"),X1o=l(),mp=a("li"),Yie=a("strong"),z1o=o("gptj"),W1o=o(" \u2014 "),Lq=a("a"),Q1o=o("GPTJModel"),H1o=o(" (GPT-J model)"),U1o=l(),fp=a("li"),Kie=a("strong"),J1o=o("hubert"),Y1o=o(" \u2014 "),yq=a("a"),K1o=o("HubertModel"),Z1o=o(" (Hubert model)"),eTo=l(),gp=a("li"),Zie=a("strong"),oTo=o("ibert"),rTo=o(" \u2014 "),xq=a("a"),tTo=o("IBertModel"),aTo=o(" (I-BERT model)"),nTo=l(),hp=a("li"),ede=a("strong"),sTo=o("imagegpt"),lTo=o(" \u2014 "),$q=a("a"),iTo=o("ImageGPTModel"),dTo=o(" (ImageGPT model)"),cTo=l(),up=a("li"),ode=a("strong"),mTo=o("layoutlm"),fTo=o(" \u2014 "),kq=a("a"),gTo=o("LayoutLMModel"),hTo=o(" (LayoutLM model)"),uTo=l(),pp=a("li"),rde=a("strong"),pTo=o("layoutlmv2"),_To=o(" \u2014 "),Sq=a("a"),bTo=o("LayoutLMv2Model"),vTo=o(" (LayoutLMv2 model)"),FTo=l(),_p=a("li"),tde=a("strong"),TTo=o("layoutlmv3"),MTo=o(" \u2014 "),Rq=a("a"),ETo=o("LayoutLMv3Model"),CTo=o(" (LayoutLMv3 model)"),wTo=l(),bp=a("li"),ade=a("strong"),ATo=o("led"),LTo=o(" \u2014 "),Pq=a("a"),yTo=o("LEDModel"),xTo=o(" (LED model)"),$To=l(),vp=a("li"),nde=a("strong"),kTo=o("levit"),STo=o(" \u2014 "),Bq=a("a"),RTo=o("LevitModel"),PTo=o(" (LeViT model)"),BTo=l(),Fp=a("li"),sde=a("strong"),ITo=o("longformer"),NTo=o(" \u2014 "),Iq=a("a"),qTo=o("LongformerModel"),jTo=o(" (Longformer model)"),DTo=l(),Tp=a("li"),lde=a("strong"),GTo=o("longt5"),OTo=o(" \u2014 "),Nq=a("a"),VTo=o("LongT5Model"),XTo=o(" (LongT5 model)"),zTo=l(),Mp=a("li"),ide=a("strong"),WTo=o("luke"),QTo=o(" \u2014 "),qq=a("a"),HTo=o("LukeModel"),UTo=o(" (LUKE model)"),JTo=l(),Ep=a("li"),dde=a("strong"),YTo=o("lxmert"),KTo=o(" \u2014 "),jq=a("a"),ZTo=o("LxmertModel"),eMo=o(" (LXMERT model)"),oMo=l(),Cp=a("li"),cde=a("strong"),rMo=o("m2m_100"),tMo=o(" \u2014 "),Dq=a("a"),aMo=o("M2M100Model"),nMo=o(" (M2M100 model)"),sMo=l(),wp=a("li"),mde=a("strong"),lMo=o("marian"),iMo=o(" \u2014 "),Gq=a("a"),dMo=o("MarianModel"),cMo=o(" (Marian model)"),mMo=l(),Ap=a("li"),fde=a("strong"),fMo=o("maskformer"),gMo=o(" \u2014 "),Oq=a("a"),hMo=o("MaskFormerModel"),uMo=o(" (MaskFormer model)"),pMo=l(),Lp=a("li"),gde=a("strong"),_Mo=o("mbart"),bMo=o(" \u2014 "),Vq=a("a"),vMo=o("MBartModel"),FMo=o(" (mBART model)"),TMo=l(),yp=a("li"),hde=a("strong"),MMo=o("mctct"),EMo=o(" \u2014 "),Xq=a("a"),CMo=o("MCTCTModel"),wMo=o(" (M-CTC-T model)"),AMo=l(),xp=a("li"),ude=a("strong"),LMo=o("megatron-bert"),yMo=o(" \u2014 "),zq=a("a"),xMo=o("MegatronBertModel"),$Mo=o(" (Megatron-BERT model)"),kMo=l(),$p=a("li"),pde=a("strong"),SMo=o("mobilebert"),RMo=o(" \u2014 "),Wq=a("a"),PMo=o("MobileBertModel"),BMo=o(" (MobileBERT model)"),IMo=l(),kp=a("li"),_de=a("strong"),NMo=o("mpnet"),qMo=o(" \u2014 "),Qq=a("a"),jMo=o("MPNetModel"),DMo=o(" (MPNet model)"),GMo=l(),Sp=a("li"),bde=a("strong"),OMo=o("mt5"),VMo=o(" \u2014 "),Hq=a("a"),XMo=o("MT5Model"),zMo=o(" (MT5 model)"),WMo=l(),Rp=a("li"),vde=a("strong"),QMo=o("nystromformer"),HMo=o(" \u2014 "),Uq=a("a"),UMo=o("NystromformerModel"),JMo=o(" (Nystr\xF6mformer model)"),YMo=l(),Pp=a("li"),Fde=a("strong"),KMo=o("openai-gpt"),ZMo=o(" \u2014 "),Jq=a("a"),e4o=o("OpenAIGPTModel"),o4o=o(" (OpenAI GPT model)"),r4o=l(),Bp=a("li"),Tde=a("strong"),t4o=o("opt"),a4o=o(" \u2014 "),Yq=a("a"),n4o=o("OPTModel"),s4o=o(" (OPT model)"),l4o=l(),Ip=a("li"),Mde=a("strong"),i4o=o("pegasus"),d4o=o(" \u2014 "),Kq=a("a"),c4o=o("PegasusModel"),m4o=o(" (Pegasus model)"),f4o=l(),Np=a("li"),Ede=a("strong"),g4o=o("perceiver"),h4o=o(" \u2014 "),Zq=a("a"),u4o=o("PerceiverModel"),p4o=o(" (Perceiver model)"),_4o=l(),qp=a("li"),Cde=a("strong"),b4o=o("plbart"),v4o=o(" \u2014 "),ej=a("a"),F4o=o("PLBartModel"),T4o=o(" (PLBart model)"),M4o=l(),jp=a("li"),wde=a("strong"),E4o=o("poolformer"),C4o=o(" \u2014 "),oj=a("a"),w4o=o("PoolFormerModel"),A4o=o(" (PoolFormer model)"),L4o=l(),Dp=a("li"),Ade=a("strong"),y4o=o("prophetnet"),x4o=o(" \u2014 "),rj=a("a"),$4o=o("ProphetNetModel"),k4o=o(" (ProphetNet model)"),S4o=l(),Gp=a("li"),Lde=a("strong"),R4o=o("qdqbert"),P4o=o(" \u2014 "),tj=a("a"),B4o=o("QDQBertModel"),I4o=o(" (QDQBert model)"),N4o=l(),Op=a("li"),yde=a("strong"),q4o=o("reformer"),j4o=o(" \u2014 "),aj=a("a"),D4o=o("ReformerModel"),G4o=o(" (Reformer model)"),O4o=l(),Vp=a("li"),xde=a("strong"),V4o=o("regnet"),X4o=o(" \u2014 "),nj=a("a"),z4o=o("RegNetModel"),W4o=o(" (RegNet model)"),Q4o=l(),Xp=a("li"),$de=a("strong"),H4o=o("rembert"),U4o=o(" \u2014 "),sj=a("a"),J4o=o("RemBertModel"),Y4o=o(" (RemBERT model)"),K4o=l(),zp=a("li"),kde=a("strong"),Z4o=o("resnet"),eEo=o(" \u2014 "),lj=a("a"),oEo=o("ResNetModel"),rEo=o(" (ResNet model)"),tEo=l(),Wp=a("li"),Sde=a("strong"),aEo=o("retribert"),nEo=o(" \u2014 "),ij=a("a"),sEo=o("RetriBertModel"),lEo=o(" (RetriBERT model)"),iEo=l(),Qp=a("li"),Rde=a("strong"),dEo=o("roberta"),cEo=o(" \u2014 "),dj=a("a"),mEo=o("RobertaModel"),fEo=o(" (RoBERTa model)"),gEo=l(),Hp=a("li"),Pde=a("strong"),hEo=o("roformer"),uEo=o(" \u2014 "),cj=a("a"),pEo=o("RoFormerModel"),_Eo=o(" (RoFormer model)"),bEo=l(),Up=a("li"),Bde=a("strong"),vEo=o("segformer"),FEo=o(" \u2014 "),mj=a("a"),TEo=o("SegformerModel"),MEo=o(" (SegFormer model)"),EEo=l(),Jp=a("li"),Ide=a("strong"),CEo=o("sew"),wEo=o(" \u2014 "),fj=a("a"),AEo=o("SEWModel"),LEo=o(" (SEW model)"),yEo=l(),Yp=a("li"),Nde=a("strong"),xEo=o("sew-d"),$Eo=o(" \u2014 "),gj=a("a"),kEo=o("SEWDModel"),SEo=o(" (SEW-D model)"),REo=l(),Kp=a("li"),qde=a("strong"),PEo=o("speech_to_text"),BEo=o(" \u2014 "),hj=a("a"),IEo=o("Speech2TextModel"),NEo=o(" (Speech2Text model)"),qEo=l(),Zp=a("li"),jde=a("strong"),jEo=o("splinter"),DEo=o(" \u2014 "),uj=a("a"),GEo=o("SplinterModel"),OEo=o(" (Splinter model)"),VEo=l(),e_=a("li"),Dde=a("strong"),XEo=o("squeezebert"),zEo=o(" \u2014 "),pj=a("a"),WEo=o("SqueezeBertModel"),QEo=o(" (SqueezeBERT model)"),HEo=l(),o_=a("li"),Gde=a("strong"),UEo=o("swin"),JEo=o(" \u2014 "),_j=a("a"),YEo=o("SwinModel"),KEo=o(" (Swin Transformer model)"),ZEo=l(),r_=a("li"),Ode=a("strong"),eCo=o("t5"),oCo=o(" \u2014 "),bj=a("a"),rCo=o("T5Model"),tCo=o(" (T5 model)"),aCo=l(),t_=a("li"),Vde=a("strong"),nCo=o("tapas"),sCo=o(" \u2014 "),vj=a("a"),lCo=o("TapasModel"),iCo=o(" (TAPAS model)"),dCo=l(),a_=a("li"),Xde=a("strong"),cCo=o("trajectory_transformer"),mCo=o(" \u2014 "),Fj=a("a"),fCo=o("TrajectoryTransformerModel"),gCo=o(" (Trajectory Transformer model)"),hCo=l(),n_=a("li"),zde=a("strong"),uCo=o("transfo-xl"),pCo=o(" \u2014 "),Tj=a("a"),_Co=o("TransfoXLModel"),bCo=o(" (Transformer-XL model)"),vCo=l(),s_=a("li"),Wde=a("strong"),FCo=o("unispeech"),TCo=o(" \u2014 "),Mj=a("a"),MCo=o("UniSpeechModel"),ECo=o(" (UniSpeech model)"),CCo=l(),l_=a("li"),Qde=a("strong"),wCo=o("unispeech-sat"),ACo=o(" \u2014 "),Ej=a("a"),LCo=o("UniSpeechSatModel"),yCo=o(" (UniSpeechSat model)"),xCo=l(),i_=a("li"),Hde=a("strong"),$Co=o("van"),kCo=o(" \u2014 "),Cj=a("a"),SCo=o("VanModel"),RCo=o(" (VAN model)"),PCo=l(),d_=a("li"),Ude=a("strong"),BCo=o("vilt"),ICo=o(" \u2014 "),wj=a("a"),NCo=o("ViltModel"),qCo=o(" (ViLT model)"),jCo=l(),c_=a("li"),Jde=a("strong"),DCo=o("vision-text-dual-encoder"),GCo=o(" \u2014 "),Aj=a("a"),OCo=o("VisionTextDualEncoderModel"),VCo=o(" (VisionTextDualEncoder model)"),XCo=l(),m_=a("li"),Yde=a("strong"),zCo=o("visual_bert"),WCo=o(" \u2014 "),Lj=a("a"),QCo=o("VisualBertModel"),HCo=o(" (VisualBERT model)"),UCo=l(),f_=a("li"),Kde=a("strong"),JCo=o("vit"),YCo=o(" \u2014 "),yj=a("a"),KCo=o("ViTModel"),ZCo=o(" (ViT model)"),e5o=l(),g_=a("li"),Zde=a("strong"),o5o=o("vit_mae"),r5o=o(" \u2014 "),xj=a("a"),t5o=o("ViTMAEModel"),a5o=o(" (ViTMAE model)"),n5o=l(),h_=a("li"),ece=a("strong"),s5o=o("wav2vec2"),l5o=o(" \u2014 "),$j=a("a"),i5o=o("Wav2Vec2Model"),d5o=o(" (Wav2Vec2 model)"),c5o=l(),u_=a("li"),oce=a("strong"),m5o=o("wav2vec2-conformer"),f5o=o(" \u2014 "),kj=a("a"),g5o=o("Wav2Vec2ConformerModel"),h5o=o(" (Wav2Vec2-Conformer model)"),u5o=l(),p_=a("li"),rce=a("strong"),p5o=o("wavlm"),_5o=o(" \u2014 "),Sj=a("a"),b5o=o("WavLMModel"),v5o=o(" (WavLM model)"),F5o=l(),__=a("li"),tce=a("strong"),T5o=o("xglm"),M5o=o(" \u2014 "),Rj=a("a"),E5o=o("XGLMModel"),C5o=o(" (XGLM model)"),w5o=l(),b_=a("li"),ace=a("strong"),A5o=o("xlm"),L5o=o(" \u2014 "),Pj=a("a"),y5o=o("XLMModel"),x5o=o(" (XLM model)"),$5o=l(),v_=a("li"),nce=a("strong"),k5o=o("xlm-prophetnet"),S5o=o(" \u2014 "),Bj=a("a"),R5o=o("XLMProphetNetModel"),P5o=o(" (XLM-ProphetNet model)"),B5o=l(),F_=a("li"),sce=a("strong"),I5o=o("xlm-roberta"),N5o=o(" \u2014 "),Ij=a("a"),q5o=o("XLMRobertaModel"),j5o=o(" (XLM-RoBERTa model)"),D5o=l(),T_=a("li"),lce=a("strong"),G5o=o("xlm-roberta-xl"),O5o=o(" \u2014 "),Nj=a("a"),V5o=o("XLMRobertaXLModel"),X5o=o(" (XLM-RoBERTa-XL model)"),z5o=l(),M_=a("li"),ice=a("strong"),W5o=o("xlnet"),Q5o=o(" \u2014 "),qj=a("a"),H5o=o("XLNetModel"),U5o=o(" (XLNet model)"),J5o=l(),E_=a("li"),dce=a("strong"),Y5o=o("yolos"),K5o=o(" \u2014 "),jj=a("a"),Z5o=o("YolosModel"),e3o=o(" (YOLOS model)"),o3o=l(),C_=a("li"),cce=a("strong"),r3o=o("yoso"),t3o=o(" \u2014 "),Dj=a("a"),a3o=o("YosoModel"),n3o=o(" (YOSO model)"),s3o=l(),w_=a("p"),l3o=o("The model is set in evaluation mode by default using "),mce=a("code"),i3o=o("model.eval()"),d3o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fce=a("code"),c3o=o("model.train()"),m3o=l(),F(A_.$$.fragment),nGe=l(),Ni=a("h2"),L_=a("a"),gce=a("span"),F(Hy.$$.fragment),f3o=l(),hce=a("span"),g3o=o("AutoModelForPreTraining"),sGe=l(),$o=a("div"),F(Uy.$$.fragment),h3o=l(),qi=a("p"),u3o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Gj=a("a"),p3o=o("from_pretrained()"),_3o=o(" class method or the "),Oj=a("a"),b3o=o("from_config()"),v3o=o(` class
method.`),F3o=l(),Jy=a("p"),T3o=o("This class cannot be instantiated directly using "),uce=a("code"),M3o=o("__init__()"),E3o=o(" (throws an error)."),C3o=l(),st=a("div"),F(Yy.$$.fragment),w3o=l(),pce=a("p"),A3o=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),L3o=l(),ji=a("p"),y3o=o(`Note:
Loading a model from its configuration file does `),_ce=a("strong"),x3o=o("not"),$3o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Vj=a("a"),k3o=o("from_pretrained()"),S3o=o(" to load the model weights."),R3o=l(),F(y_.$$.fragment),P3o=l(),Ye=a("div"),F(Ky.$$.fragment),B3o=l(),bce=a("p"),I3o=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),N3o=l(),Ra=a("p"),q3o=o("The model class to instantiate is selected based on the "),vce=a("code"),j3o=o("model_type"),D3o=o(` property of the config object (either
passed as an argument or loaded from `),Fce=a("code"),G3o=o("pretrained_model_name_or_path"),O3o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tce=a("code"),V3o=o("pretrained_model_name_or_path"),X3o=o(":"),z3o=l(),G=a("ul"),x_=a("li"),Mce=a("strong"),W3o=o("albert"),Q3o=o(" \u2014 "),Xj=a("a"),H3o=o("AlbertForPreTraining"),U3o=o(" (ALBERT model)"),J3o=l(),$_=a("li"),Ece=a("strong"),Y3o=o("bart"),K3o=o(" \u2014 "),zj=a("a"),Z3o=o("BartForConditionalGeneration"),e0o=o(" (BART model)"),o0o=l(),k_=a("li"),Cce=a("strong"),r0o=o("bert"),t0o=o(" \u2014 "),Wj=a("a"),a0o=o("BertForPreTraining"),n0o=o(" (BERT model)"),s0o=l(),S_=a("li"),wce=a("strong"),l0o=o("big_bird"),i0o=o(" \u2014 "),Qj=a("a"),d0o=o("BigBirdForPreTraining"),c0o=o(" (BigBird model)"),m0o=l(),R_=a("li"),Ace=a("strong"),f0o=o("bloom"),g0o=o(" \u2014 "),Hj=a("a"),h0o=o("BloomForCausalLM"),u0o=o(" (BLOOM model)"),p0o=l(),P_=a("li"),Lce=a("strong"),_0o=o("camembert"),b0o=o(" \u2014 "),Uj=a("a"),v0o=o("CamembertForMaskedLM"),F0o=o(" (CamemBERT model)"),T0o=l(),B_=a("li"),yce=a("strong"),M0o=o("ctrl"),E0o=o(" \u2014 "),Jj=a("a"),C0o=o("CTRLLMHeadModel"),w0o=o(" (CTRL model)"),A0o=l(),I_=a("li"),xce=a("strong"),L0o=o("data2vec-text"),y0o=o(" \u2014 "),Yj=a("a"),x0o=o("Data2VecTextForMaskedLM"),$0o=o(" (Data2VecText model)"),k0o=l(),N_=a("li"),$ce=a("strong"),S0o=o("deberta"),R0o=o(" \u2014 "),Kj=a("a"),P0o=o("DebertaForMaskedLM"),B0o=o(" (DeBERTa model)"),I0o=l(),q_=a("li"),kce=a("strong"),N0o=o("deberta-v2"),q0o=o(" \u2014 "),Zj=a("a"),j0o=o("DebertaV2ForMaskedLM"),D0o=o(" (DeBERTa-v2 model)"),G0o=l(),j_=a("li"),Sce=a("strong"),O0o=o("distilbert"),V0o=o(" \u2014 "),eD=a("a"),X0o=o("DistilBertForMaskedLM"),z0o=o(" (DistilBERT model)"),W0o=l(),D_=a("li"),Rce=a("strong"),Q0o=o("electra"),H0o=o(" \u2014 "),oD=a("a"),U0o=o("ElectraForPreTraining"),J0o=o(" (ELECTRA model)"),Y0o=l(),G_=a("li"),Pce=a("strong"),K0o=o("flaubert"),Z0o=o(" \u2014 "),rD=a("a"),ewo=o("FlaubertWithLMHeadModel"),owo=o(" (FlauBERT model)"),rwo=l(),O_=a("li"),Bce=a("strong"),two=o("flava"),awo=o(" \u2014 "),tD=a("a"),nwo=o("FlavaForPreTraining"),swo=o(" (FLAVA model)"),lwo=l(),V_=a("li"),Ice=a("strong"),iwo=o("fnet"),dwo=o(" \u2014 "),aD=a("a"),cwo=o("FNetForPreTraining"),mwo=o(" (FNet model)"),fwo=l(),X_=a("li"),Nce=a("strong"),gwo=o("fsmt"),hwo=o(" \u2014 "),nD=a("a"),uwo=o("FSMTForConditionalGeneration"),pwo=o(" (FairSeq Machine-Translation model)"),_wo=l(),z_=a("li"),qce=a("strong"),bwo=o("funnel"),vwo=o(" \u2014 "),sD=a("a"),Fwo=o("FunnelForPreTraining"),Two=o(" (Funnel Transformer model)"),Mwo=l(),W_=a("li"),jce=a("strong"),Ewo=o("gpt2"),Cwo=o(" \u2014 "),lD=a("a"),wwo=o("GPT2LMHeadModel"),Awo=o(" (OpenAI GPT-2 model)"),Lwo=l(),Q_=a("li"),Dce=a("strong"),ywo=o("ibert"),xwo=o(" \u2014 "),iD=a("a"),$wo=o("IBertForMaskedLM"),kwo=o(" (I-BERT model)"),Swo=l(),H_=a("li"),Gce=a("strong"),Rwo=o("layoutlm"),Pwo=o(" \u2014 "),dD=a("a"),Bwo=o("LayoutLMForMaskedLM"),Iwo=o(" (LayoutLM model)"),Nwo=l(),U_=a("li"),Oce=a("strong"),qwo=o("longformer"),jwo=o(" \u2014 "),cD=a("a"),Dwo=o("LongformerForMaskedLM"),Gwo=o(" (Longformer model)"),Owo=l(),J_=a("li"),Vce=a("strong"),Vwo=o("lxmert"),Xwo=o(" \u2014 "),mD=a("a"),zwo=o("LxmertForPreTraining"),Wwo=o(" (LXMERT model)"),Qwo=l(),Y_=a("li"),Xce=a("strong"),Hwo=o("megatron-bert"),Uwo=o(" \u2014 "),fD=a("a"),Jwo=o("MegatronBertForPreTraining"),Ywo=o(" (Megatron-BERT model)"),Kwo=l(),K_=a("li"),zce=a("strong"),Zwo=o("mobilebert"),eAo=o(" \u2014 "),gD=a("a"),oAo=o("MobileBertForPreTraining"),rAo=o(" (MobileBERT model)"),tAo=l(),Z_=a("li"),Wce=a("strong"),aAo=o("mpnet"),nAo=o(" \u2014 "),hD=a("a"),sAo=o("MPNetForMaskedLM"),lAo=o(" (MPNet model)"),iAo=l(),e2=a("li"),Qce=a("strong"),dAo=o("openai-gpt"),cAo=o(" \u2014 "),uD=a("a"),mAo=o("OpenAIGPTLMHeadModel"),fAo=o(" (OpenAI GPT model)"),gAo=l(),o2=a("li"),Hce=a("strong"),hAo=o("retribert"),uAo=o(" \u2014 "),pD=a("a"),pAo=o("RetriBertModel"),_Ao=o(" (RetriBERT model)"),bAo=l(),r2=a("li"),Uce=a("strong"),vAo=o("roberta"),FAo=o(" \u2014 "),_D=a("a"),TAo=o("RobertaForMaskedLM"),MAo=o(" (RoBERTa model)"),EAo=l(),t2=a("li"),Jce=a("strong"),CAo=o("splinter"),wAo=o(" \u2014 "),bD=a("a"),AAo=o("SplinterForPreTraining"),LAo=o(" (Splinter model)"),yAo=l(),a2=a("li"),Yce=a("strong"),xAo=o("squeezebert"),$Ao=o(" \u2014 "),vD=a("a"),kAo=o("SqueezeBertForMaskedLM"),SAo=o(" (SqueezeBERT model)"),RAo=l(),n2=a("li"),Kce=a("strong"),PAo=o("t5"),BAo=o(" \u2014 "),FD=a("a"),IAo=o("T5ForConditionalGeneration"),NAo=o(" (T5 model)"),qAo=l(),s2=a("li"),Zce=a("strong"),jAo=o("tapas"),DAo=o(" \u2014 "),TD=a("a"),GAo=o("TapasForMaskedLM"),OAo=o(" (TAPAS model)"),VAo=l(),l2=a("li"),eme=a("strong"),XAo=o("transfo-xl"),zAo=o(" \u2014 "),MD=a("a"),WAo=o("TransfoXLLMHeadModel"),QAo=o(" (Transformer-XL model)"),HAo=l(),i2=a("li"),ome=a("strong"),UAo=o("unispeech"),JAo=o(" \u2014 "),ED=a("a"),YAo=o("UniSpeechForPreTraining"),KAo=o(" (UniSpeech model)"),ZAo=l(),d2=a("li"),rme=a("strong"),e6o=o("unispeech-sat"),o6o=o(" \u2014 "),CD=a("a"),r6o=o("UniSpeechSatForPreTraining"),t6o=o(" (UniSpeechSat model)"),a6o=l(),c2=a("li"),tme=a("strong"),n6o=o("visual_bert"),s6o=o(" \u2014 "),wD=a("a"),l6o=o("VisualBertForPreTraining"),i6o=o(" (VisualBERT model)"),d6o=l(),m2=a("li"),ame=a("strong"),c6o=o("vit_mae"),m6o=o(" \u2014 "),AD=a("a"),f6o=o("ViTMAEForPreTraining"),g6o=o(" (ViTMAE model)"),h6o=l(),f2=a("li"),nme=a("strong"),u6o=o("wav2vec2"),p6o=o(" \u2014 "),LD=a("a"),_6o=o("Wav2Vec2ForPreTraining"),b6o=o(" (Wav2Vec2 model)"),v6o=l(),g2=a("li"),sme=a("strong"),F6o=o("wav2vec2-conformer"),T6o=o(" \u2014 "),yD=a("a"),M6o=o("Wav2Vec2ConformerForPreTraining"),E6o=o(" (Wav2Vec2-Conformer model)"),C6o=l(),h2=a("li"),lme=a("strong"),w6o=o("xlm"),A6o=o(" \u2014 "),xD=a("a"),L6o=o("XLMWithLMHeadModel"),y6o=o(" (XLM model)"),x6o=l(),u2=a("li"),ime=a("strong"),$6o=o("xlm-roberta"),k6o=o(" \u2014 "),$D=a("a"),S6o=o("XLMRobertaForMaskedLM"),R6o=o(" (XLM-RoBERTa model)"),P6o=l(),p2=a("li"),dme=a("strong"),B6o=o("xlm-roberta-xl"),I6o=o(" \u2014 "),kD=a("a"),N6o=o("XLMRobertaXLForMaskedLM"),q6o=o(" (XLM-RoBERTa-XL model)"),j6o=l(),_2=a("li"),cme=a("strong"),D6o=o("xlnet"),G6o=o(" \u2014 "),SD=a("a"),O6o=o("XLNetLMHeadModel"),V6o=o(" (XLNet model)"),X6o=l(),b2=a("p"),z6o=o("The model is set in evaluation mode by default using "),mme=a("code"),W6o=o("model.eval()"),Q6o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fme=a("code"),H6o=o("model.train()"),U6o=l(),F(v2.$$.fragment),lGe=l(),Di=a("h2"),F2=a("a"),gme=a("span"),F(Zy.$$.fragment),J6o=l(),hme=a("span"),Y6o=o("AutoModelForCausalLM"),iGe=l(),ko=a("div"),F(e7.$$.fragment),K6o=l(),Gi=a("p"),Z6o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),RD=a("a"),eLo=o("from_pretrained()"),oLo=o(" class method or the "),PD=a("a"),rLo=o("from_config()"),tLo=o(` class
method.`),aLo=l(),o7=a("p"),nLo=o("This class cannot be instantiated directly using "),ume=a("code"),sLo=o("__init__()"),lLo=o(" (throws an error)."),iLo=l(),lt=a("div"),F(r7.$$.fragment),dLo=l(),pme=a("p"),cLo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),mLo=l(),Oi=a("p"),fLo=o(`Note:
Loading a model from its configuration file does `),_me=a("strong"),gLo=o("not"),hLo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BD=a("a"),uLo=o("from_pretrained()"),pLo=o(" to load the model weights."),_Lo=l(),F(T2.$$.fragment),bLo=l(),Ke=a("div"),F(t7.$$.fragment),vLo=l(),bme=a("p"),FLo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),TLo=l(),Pa=a("p"),MLo=o("The model class to instantiate is selected based on the "),vme=a("code"),ELo=o("model_type"),CLo=o(` property of the config object (either
passed as an argument or loaded from `),Fme=a("code"),wLo=o("pretrained_model_name_or_path"),ALo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tme=a("code"),LLo=o("pretrained_model_name_or_path"),yLo=o(":"),xLo=l(),z=a("ul"),M2=a("li"),Mme=a("strong"),$Lo=o("bart"),kLo=o(" \u2014 "),ID=a("a"),SLo=o("BartForCausalLM"),RLo=o(" (BART model)"),PLo=l(),E2=a("li"),Eme=a("strong"),BLo=o("bert"),ILo=o(" \u2014 "),ND=a("a"),NLo=o("BertLMHeadModel"),qLo=o(" (BERT model)"),jLo=l(),C2=a("li"),Cme=a("strong"),DLo=o("bert-generation"),GLo=o(" \u2014 "),qD=a("a"),OLo=o("BertGenerationDecoder"),VLo=o(" (Bert Generation model)"),XLo=l(),w2=a("li"),wme=a("strong"),zLo=o("big_bird"),WLo=o(" \u2014 "),jD=a("a"),QLo=o("BigBirdForCausalLM"),HLo=o(" (BigBird model)"),ULo=l(),A2=a("li"),Ame=a("strong"),JLo=o("bigbird_pegasus"),YLo=o(" \u2014 "),DD=a("a"),KLo=o("BigBirdPegasusForCausalLM"),ZLo=o(" (BigBird-Pegasus model)"),eyo=l(),L2=a("li"),Lme=a("strong"),oyo=o("blenderbot"),ryo=o(" \u2014 "),GD=a("a"),tyo=o("BlenderbotForCausalLM"),ayo=o(" (Blenderbot model)"),nyo=l(),y2=a("li"),yme=a("strong"),syo=o("blenderbot-small"),lyo=o(" \u2014 "),OD=a("a"),iyo=o("BlenderbotSmallForCausalLM"),dyo=o(" (BlenderbotSmall model)"),cyo=l(),x2=a("li"),xme=a("strong"),myo=o("bloom"),fyo=o(" \u2014 "),VD=a("a"),gyo=o("BloomForCausalLM"),hyo=o(" (BLOOM model)"),uyo=l(),$2=a("li"),$me=a("strong"),pyo=o("camembert"),_yo=o(" \u2014 "),XD=a("a"),byo=o("CamembertForCausalLM"),vyo=o(" (CamemBERT model)"),Fyo=l(),k2=a("li"),kme=a("strong"),Tyo=o("ctrl"),Myo=o(" \u2014 "),zD=a("a"),Eyo=o("CTRLLMHeadModel"),Cyo=o(" (CTRL model)"),wyo=l(),S2=a("li"),Sme=a("strong"),Ayo=o("data2vec-text"),Lyo=o(" \u2014 "),WD=a("a"),yyo=o("Data2VecTextForCausalLM"),xyo=o(" (Data2VecText model)"),$yo=l(),R2=a("li"),Rme=a("strong"),kyo=o("electra"),Syo=o(" \u2014 "),QD=a("a"),Ryo=o("ElectraForCausalLM"),Pyo=o(" (ELECTRA model)"),Byo=l(),P2=a("li"),Pme=a("strong"),Iyo=o("gpt2"),Nyo=o(" \u2014 "),HD=a("a"),qyo=o("GPT2LMHeadModel"),jyo=o(" (OpenAI GPT-2 model)"),Dyo=l(),B2=a("li"),Bme=a("strong"),Gyo=o("gpt_neo"),Oyo=o(" \u2014 "),UD=a("a"),Vyo=o("GPTNeoForCausalLM"),Xyo=o(" (GPT Neo model)"),zyo=l(),I2=a("li"),Ime=a("strong"),Wyo=o("gpt_neox"),Qyo=o(" \u2014 "),JD=a("a"),Hyo=o("GPTNeoXForCausalLM"),Uyo=o(" (GPT NeoX model)"),Jyo=l(),N2=a("li"),Nme=a("strong"),Yyo=o("gptj"),Kyo=o(" \u2014 "),YD=a("a"),Zyo=o("GPTJForCausalLM"),e7o=o(" (GPT-J model)"),o7o=l(),q2=a("li"),qme=a("strong"),r7o=o("marian"),t7o=o(" \u2014 "),KD=a("a"),a7o=o("MarianForCausalLM"),n7o=o(" (Marian model)"),s7o=l(),j2=a("li"),jme=a("strong"),l7o=o("mbart"),i7o=o(" \u2014 "),ZD=a("a"),d7o=o("MBartForCausalLM"),c7o=o(" (mBART model)"),m7o=l(),D2=a("li"),Dme=a("strong"),f7o=o("megatron-bert"),g7o=o(" \u2014 "),eG=a("a"),h7o=o("MegatronBertForCausalLM"),u7o=o(" (Megatron-BERT model)"),p7o=l(),G2=a("li"),Gme=a("strong"),_7o=o("openai-gpt"),b7o=o(" \u2014 "),oG=a("a"),v7o=o("OpenAIGPTLMHeadModel"),F7o=o(" (OpenAI GPT model)"),T7o=l(),O2=a("li"),Ome=a("strong"),M7o=o("opt"),E7o=o(" \u2014 "),rG=a("a"),C7o=o("OPTForCausalLM"),w7o=o(" (OPT model)"),A7o=l(),V2=a("li"),Vme=a("strong"),L7o=o("pegasus"),y7o=o(" \u2014 "),tG=a("a"),x7o=o("PegasusForCausalLM"),$7o=o(" (Pegasus model)"),k7o=l(),X2=a("li"),Xme=a("strong"),S7o=o("plbart"),R7o=o(" \u2014 "),aG=a("a"),P7o=o("PLBartForCausalLM"),B7o=o(" (PLBart model)"),I7o=l(),z2=a("li"),zme=a("strong"),N7o=o("prophetnet"),q7o=o(" \u2014 "),nG=a("a"),j7o=o("ProphetNetForCausalLM"),D7o=o(" (ProphetNet model)"),G7o=l(),W2=a("li"),Wme=a("strong"),O7o=o("qdqbert"),V7o=o(" \u2014 "),sG=a("a"),X7o=o("QDQBertLMHeadModel"),z7o=o(" (QDQBert model)"),W7o=l(),Q2=a("li"),Qme=a("strong"),Q7o=o("reformer"),H7o=o(" \u2014 "),lG=a("a"),U7o=o("ReformerModelWithLMHead"),J7o=o(" (Reformer model)"),Y7o=l(),H2=a("li"),Hme=a("strong"),K7o=o("rembert"),Z7o=o(" \u2014 "),iG=a("a"),e8o=o("RemBertForCausalLM"),o8o=o(" (RemBERT model)"),r8o=l(),U2=a("li"),Ume=a("strong"),t8o=o("roberta"),a8o=o(" \u2014 "),dG=a("a"),n8o=o("RobertaForCausalLM"),s8o=o(" (RoBERTa model)"),l8o=l(),J2=a("li"),Jme=a("strong"),i8o=o("roformer"),d8o=o(" \u2014 "),cG=a("a"),c8o=o("RoFormerForCausalLM"),m8o=o(" (RoFormer model)"),f8o=l(),Y2=a("li"),Yme=a("strong"),g8o=o("speech_to_text_2"),h8o=o(" \u2014 "),mG=a("a"),u8o=o("Speech2Text2ForCausalLM"),p8o=o(" (Speech2Text2 model)"),_8o=l(),K2=a("li"),Kme=a("strong"),b8o=o("transfo-xl"),v8o=o(" \u2014 "),fG=a("a"),F8o=o("TransfoXLLMHeadModel"),T8o=o(" (Transformer-XL model)"),M8o=l(),Z2=a("li"),Zme=a("strong"),E8o=o("trocr"),C8o=o(" \u2014 "),gG=a("a"),w8o=o("TrOCRForCausalLM"),A8o=o(" (TrOCR model)"),L8o=l(),eb=a("li"),efe=a("strong"),y8o=o("xglm"),x8o=o(" \u2014 "),hG=a("a"),$8o=o("XGLMForCausalLM"),k8o=o(" (XGLM model)"),S8o=l(),ob=a("li"),ofe=a("strong"),R8o=o("xlm"),P8o=o(" \u2014 "),uG=a("a"),B8o=o("XLMWithLMHeadModel"),I8o=o(" (XLM model)"),N8o=l(),rb=a("li"),rfe=a("strong"),q8o=o("xlm-prophetnet"),j8o=o(" \u2014 "),pG=a("a"),D8o=o("XLMProphetNetForCausalLM"),G8o=o(" (XLM-ProphetNet model)"),O8o=l(),tb=a("li"),tfe=a("strong"),V8o=o("xlm-roberta"),X8o=o(" \u2014 "),_G=a("a"),z8o=o("XLMRobertaForCausalLM"),W8o=o(" (XLM-RoBERTa model)"),Q8o=l(),ab=a("li"),afe=a("strong"),H8o=o("xlm-roberta-xl"),U8o=o(" \u2014 "),bG=a("a"),J8o=o("XLMRobertaXLForCausalLM"),Y8o=o(" (XLM-RoBERTa-XL model)"),K8o=l(),nb=a("li"),nfe=a("strong"),Z8o=o("xlnet"),e9o=o(" \u2014 "),vG=a("a"),o9o=o("XLNetLMHeadModel"),r9o=o(" (XLNet model)"),t9o=l(),sb=a("p"),a9o=o("The model is set in evaluation mode by default using "),sfe=a("code"),n9o=o("model.eval()"),s9o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lfe=a("code"),l9o=o("model.train()"),i9o=l(),F(lb.$$.fragment),dGe=l(),Vi=a("h2"),ib=a("a"),ife=a("span"),F(a7.$$.fragment),d9o=l(),dfe=a("span"),c9o=o("AutoModelForMaskedLM"),cGe=l(),So=a("div"),F(n7.$$.fragment),m9o=l(),Xi=a("p"),f9o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),FG=a("a"),g9o=o("from_pretrained()"),h9o=o(" class method or the "),TG=a("a"),u9o=o("from_config()"),p9o=o(` class
method.`),_9o=l(),s7=a("p"),b9o=o("This class cannot be instantiated directly using "),cfe=a("code"),v9o=o("__init__()"),F9o=o(" (throws an error)."),T9o=l(),it=a("div"),F(l7.$$.fragment),M9o=l(),mfe=a("p"),E9o=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),C9o=l(),zi=a("p"),w9o=o(`Note:
Loading a model from its configuration file does `),ffe=a("strong"),A9o=o("not"),L9o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MG=a("a"),y9o=o("from_pretrained()"),x9o=o(" to load the model weights."),$9o=l(),F(db.$$.fragment),k9o=l(),Ze=a("div"),F(i7.$$.fragment),S9o=l(),gfe=a("p"),R9o=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),P9o=l(),Ba=a("p"),B9o=o("The model class to instantiate is selected based on the "),hfe=a("code"),I9o=o("model_type"),N9o=o(` property of the config object (either
passed as an argument or loaded from `),ufe=a("code"),q9o=o("pretrained_model_name_or_path"),j9o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pfe=a("code"),D9o=o("pretrained_model_name_or_path"),G9o=o(":"),O9o=l(),Q=a("ul"),cb=a("li"),_fe=a("strong"),V9o=o("albert"),X9o=o(" \u2014 "),EG=a("a"),z9o=o("AlbertForMaskedLM"),W9o=o(" (ALBERT model)"),Q9o=l(),mb=a("li"),bfe=a("strong"),H9o=o("bart"),U9o=o(" \u2014 "),CG=a("a"),J9o=o("BartForConditionalGeneration"),Y9o=o(" (BART model)"),K9o=l(),fb=a("li"),vfe=a("strong"),Z9o=o("bert"),exo=o(" \u2014 "),wG=a("a"),oxo=o("BertForMaskedLM"),rxo=o(" (BERT model)"),txo=l(),gb=a("li"),Ffe=a("strong"),axo=o("big_bird"),nxo=o(" \u2014 "),AG=a("a"),sxo=o("BigBirdForMaskedLM"),lxo=o(" (BigBird model)"),ixo=l(),hb=a("li"),Tfe=a("strong"),dxo=o("camembert"),cxo=o(" \u2014 "),LG=a("a"),mxo=o("CamembertForMaskedLM"),fxo=o(" (CamemBERT model)"),gxo=l(),ub=a("li"),Mfe=a("strong"),hxo=o("convbert"),uxo=o(" \u2014 "),yG=a("a"),pxo=o("ConvBertForMaskedLM"),_xo=o(" (ConvBERT model)"),bxo=l(),pb=a("li"),Efe=a("strong"),vxo=o("data2vec-text"),Fxo=o(" \u2014 "),xG=a("a"),Txo=o("Data2VecTextForMaskedLM"),Mxo=o(" (Data2VecText model)"),Exo=l(),_b=a("li"),Cfe=a("strong"),Cxo=o("deberta"),wxo=o(" \u2014 "),$G=a("a"),Axo=o("DebertaForMaskedLM"),Lxo=o(" (DeBERTa model)"),yxo=l(),bb=a("li"),wfe=a("strong"),xxo=o("deberta-v2"),$xo=o(" \u2014 "),kG=a("a"),kxo=o("DebertaV2ForMaskedLM"),Sxo=o(" (DeBERTa-v2 model)"),Rxo=l(),vb=a("li"),Afe=a("strong"),Pxo=o("distilbert"),Bxo=o(" \u2014 "),SG=a("a"),Ixo=o("DistilBertForMaskedLM"),Nxo=o(" (DistilBERT model)"),qxo=l(),Fb=a("li"),Lfe=a("strong"),jxo=o("electra"),Dxo=o(" \u2014 "),RG=a("a"),Gxo=o("ElectraForMaskedLM"),Oxo=o(" (ELECTRA model)"),Vxo=l(),Tb=a("li"),yfe=a("strong"),Xxo=o("flaubert"),zxo=o(" \u2014 "),PG=a("a"),Wxo=o("FlaubertWithLMHeadModel"),Qxo=o(" (FlauBERT model)"),Hxo=l(),Mb=a("li"),xfe=a("strong"),Uxo=o("fnet"),Jxo=o(" \u2014 "),BG=a("a"),Yxo=o("FNetForMaskedLM"),Kxo=o(" (FNet model)"),Zxo=l(),Eb=a("li"),$fe=a("strong"),e$o=o("funnel"),o$o=o(" \u2014 "),IG=a("a"),r$o=o("FunnelForMaskedLM"),t$o=o(" (Funnel Transformer model)"),a$o=l(),Cb=a("li"),kfe=a("strong"),n$o=o("ibert"),s$o=o(" \u2014 "),NG=a("a"),l$o=o("IBertForMaskedLM"),i$o=o(" (I-BERT model)"),d$o=l(),wb=a("li"),Sfe=a("strong"),c$o=o("layoutlm"),m$o=o(" \u2014 "),qG=a("a"),f$o=o("LayoutLMForMaskedLM"),g$o=o(" (LayoutLM model)"),h$o=l(),Ab=a("li"),Rfe=a("strong"),u$o=o("longformer"),p$o=o(" \u2014 "),jG=a("a"),_$o=o("LongformerForMaskedLM"),b$o=o(" (Longformer model)"),v$o=l(),Lb=a("li"),Pfe=a("strong"),F$o=o("luke"),T$o=o(" \u2014 "),DG=a("a"),M$o=o("LukeForMaskedLM"),E$o=o(" (LUKE model)"),C$o=l(),yb=a("li"),Bfe=a("strong"),w$o=o("mbart"),A$o=o(" \u2014 "),GG=a("a"),L$o=o("MBartForConditionalGeneration"),y$o=o(" (mBART model)"),x$o=l(),xb=a("li"),Ife=a("strong"),$$o=o("megatron-bert"),k$o=o(" \u2014 "),OG=a("a"),S$o=o("MegatronBertForMaskedLM"),R$o=o(" (Megatron-BERT model)"),P$o=l(),$b=a("li"),Nfe=a("strong"),B$o=o("mobilebert"),I$o=o(" \u2014 "),VG=a("a"),N$o=o("MobileBertForMaskedLM"),q$o=o(" (MobileBERT model)"),j$o=l(),kb=a("li"),qfe=a("strong"),D$o=o("mpnet"),G$o=o(" \u2014 "),XG=a("a"),O$o=o("MPNetForMaskedLM"),V$o=o(" (MPNet model)"),X$o=l(),Sb=a("li"),jfe=a("strong"),z$o=o("nystromformer"),W$o=o(" \u2014 "),zG=a("a"),Q$o=o("NystromformerForMaskedLM"),H$o=o(" (Nystr\xF6mformer model)"),U$o=l(),Rb=a("li"),Dfe=a("strong"),J$o=o("perceiver"),Y$o=o(" \u2014 "),WG=a("a"),K$o=o("PerceiverForMaskedLM"),Z$o=o(" (Perceiver model)"),eko=l(),Pb=a("li"),Gfe=a("strong"),oko=o("qdqbert"),rko=o(" \u2014 "),QG=a("a"),tko=o("QDQBertForMaskedLM"),ako=o(" (QDQBert model)"),nko=l(),Bb=a("li"),Ofe=a("strong"),sko=o("reformer"),lko=o(" \u2014 "),HG=a("a"),iko=o("ReformerForMaskedLM"),dko=o(" (Reformer model)"),cko=l(),Ib=a("li"),Vfe=a("strong"),mko=o("rembert"),fko=o(" \u2014 "),UG=a("a"),gko=o("RemBertForMaskedLM"),hko=o(" (RemBERT model)"),uko=l(),Nb=a("li"),Xfe=a("strong"),pko=o("roberta"),_ko=o(" \u2014 "),JG=a("a"),bko=o("RobertaForMaskedLM"),vko=o(" (RoBERTa model)"),Fko=l(),qb=a("li"),zfe=a("strong"),Tko=o("roformer"),Mko=o(" \u2014 "),YG=a("a"),Eko=o("RoFormerForMaskedLM"),Cko=o(" (RoFormer model)"),wko=l(),jb=a("li"),Wfe=a("strong"),Ako=o("squeezebert"),Lko=o(" \u2014 "),KG=a("a"),yko=o("SqueezeBertForMaskedLM"),xko=o(" (SqueezeBERT model)"),$ko=l(),Db=a("li"),Qfe=a("strong"),kko=o("tapas"),Sko=o(" \u2014 "),ZG=a("a"),Rko=o("TapasForMaskedLM"),Pko=o(" (TAPAS model)"),Bko=l(),Gb=a("li"),Hfe=a("strong"),Iko=o("wav2vec2"),Nko=o(" \u2014 "),Ufe=a("code"),qko=o("Wav2Vec2ForMaskedLM"),jko=o(" (Wav2Vec2 model)"),Dko=l(),Ob=a("li"),Jfe=a("strong"),Gko=o("xlm"),Oko=o(" \u2014 "),eO=a("a"),Vko=o("XLMWithLMHeadModel"),Xko=o(" (XLM model)"),zko=l(),Vb=a("li"),Yfe=a("strong"),Wko=o("xlm-roberta"),Qko=o(" \u2014 "),oO=a("a"),Hko=o("XLMRobertaForMaskedLM"),Uko=o(" (XLM-RoBERTa model)"),Jko=l(),Xb=a("li"),Kfe=a("strong"),Yko=o("xlm-roberta-xl"),Kko=o(" \u2014 "),rO=a("a"),Zko=o("XLMRobertaXLForMaskedLM"),eSo=o(" (XLM-RoBERTa-XL model)"),oSo=l(),zb=a("li"),Zfe=a("strong"),rSo=o("yoso"),tSo=o(" \u2014 "),tO=a("a"),aSo=o("YosoForMaskedLM"),nSo=o(" (YOSO model)"),sSo=l(),Wb=a("p"),lSo=o("The model is set in evaluation mode by default using "),ege=a("code"),iSo=o("model.eval()"),dSo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),oge=a("code"),cSo=o("model.train()"),mSo=l(),F(Qb.$$.fragment),mGe=l(),Wi=a("h2"),Hb=a("a"),rge=a("span"),F(d7.$$.fragment),fSo=l(),tge=a("span"),gSo=o("AutoModelForSeq2SeqLM"),fGe=l(),Ro=a("div"),F(c7.$$.fragment),hSo=l(),Qi=a("p"),uSo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),aO=a("a"),pSo=o("from_pretrained()"),_So=o(" class method or the "),nO=a("a"),bSo=o("from_config()"),vSo=o(` class
method.`),FSo=l(),m7=a("p"),TSo=o("This class cannot be instantiated directly using "),age=a("code"),MSo=o("__init__()"),ESo=o(" (throws an error)."),CSo=l(),dt=a("div"),F(f7.$$.fragment),wSo=l(),nge=a("p"),ASo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),LSo=l(),Hi=a("p"),ySo=o(`Note:
Loading a model from its configuration file does `),sge=a("strong"),xSo=o("not"),$So=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sO=a("a"),kSo=o("from_pretrained()"),SSo=o(" to load the model weights."),RSo=l(),F(Ub.$$.fragment),PSo=l(),eo=a("div"),F(g7.$$.fragment),BSo=l(),lge=a("p"),ISo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),NSo=l(),Ia=a("p"),qSo=o("The model class to instantiate is selected based on the "),ige=a("code"),jSo=o("model_type"),DSo=o(` property of the config object (either
passed as an argument or loaded from `),dge=a("code"),GSo=o("pretrained_model_name_or_path"),OSo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cge=a("code"),VSo=o("pretrained_model_name_or_path"),XSo=o(":"),zSo=l(),ue=a("ul"),Jb=a("li"),mge=a("strong"),WSo=o("bart"),QSo=o(" \u2014 "),lO=a("a"),HSo=o("BartForConditionalGeneration"),USo=o(" (BART model)"),JSo=l(),Yb=a("li"),fge=a("strong"),YSo=o("bigbird_pegasus"),KSo=o(" \u2014 "),iO=a("a"),ZSo=o("BigBirdPegasusForConditionalGeneration"),eRo=o(" (BigBird-Pegasus model)"),oRo=l(),Kb=a("li"),gge=a("strong"),rRo=o("blenderbot"),tRo=o(" \u2014 "),dO=a("a"),aRo=o("BlenderbotForConditionalGeneration"),nRo=o(" (Blenderbot model)"),sRo=l(),Zb=a("li"),hge=a("strong"),lRo=o("blenderbot-small"),iRo=o(" \u2014 "),cO=a("a"),dRo=o("BlenderbotSmallForConditionalGeneration"),cRo=o(" (BlenderbotSmall model)"),mRo=l(),ev=a("li"),uge=a("strong"),fRo=o("encoder-decoder"),gRo=o(" \u2014 "),mO=a("a"),hRo=o("EncoderDecoderModel"),uRo=o(" (Encoder decoder model)"),pRo=l(),ov=a("li"),pge=a("strong"),_Ro=o("fsmt"),bRo=o(" \u2014 "),fO=a("a"),vRo=o("FSMTForConditionalGeneration"),FRo=o(" (FairSeq Machine-Translation model)"),TRo=l(),rv=a("li"),_ge=a("strong"),MRo=o("led"),ERo=o(" \u2014 "),gO=a("a"),CRo=o("LEDForConditionalGeneration"),wRo=o(" (LED model)"),ARo=l(),tv=a("li"),bge=a("strong"),LRo=o("longt5"),yRo=o(" \u2014 "),hO=a("a"),xRo=o("LongT5ForConditionalGeneration"),$Ro=o(" (LongT5 model)"),kRo=l(),av=a("li"),vge=a("strong"),SRo=o("m2m_100"),RRo=o(" \u2014 "),uO=a("a"),PRo=o("M2M100ForConditionalGeneration"),BRo=o(" (M2M100 model)"),IRo=l(),nv=a("li"),Fge=a("strong"),NRo=o("marian"),qRo=o(" \u2014 "),pO=a("a"),jRo=o("MarianMTModel"),DRo=o(" (Marian model)"),GRo=l(),sv=a("li"),Tge=a("strong"),ORo=o("mbart"),VRo=o(" \u2014 "),_O=a("a"),XRo=o("MBartForConditionalGeneration"),zRo=o(" (mBART model)"),WRo=l(),lv=a("li"),Mge=a("strong"),QRo=o("mt5"),HRo=o(" \u2014 "),bO=a("a"),URo=o("MT5ForConditionalGeneration"),JRo=o(" (MT5 model)"),YRo=l(),iv=a("li"),Ege=a("strong"),KRo=o("pegasus"),ZRo=o(" \u2014 "),vO=a("a"),ePo=o("PegasusForConditionalGeneration"),oPo=o(" (Pegasus model)"),rPo=l(),dv=a("li"),Cge=a("strong"),tPo=o("plbart"),aPo=o(" \u2014 "),FO=a("a"),nPo=o("PLBartForConditionalGeneration"),sPo=o(" (PLBart model)"),lPo=l(),cv=a("li"),wge=a("strong"),iPo=o("prophetnet"),dPo=o(" \u2014 "),TO=a("a"),cPo=o("ProphetNetForConditionalGeneration"),mPo=o(" (ProphetNet model)"),fPo=l(),mv=a("li"),Age=a("strong"),gPo=o("t5"),hPo=o(" \u2014 "),MO=a("a"),uPo=o("T5ForConditionalGeneration"),pPo=o(" (T5 model)"),_Po=l(),fv=a("li"),Lge=a("strong"),bPo=o("xlm-prophetnet"),vPo=o(" \u2014 "),EO=a("a"),FPo=o("XLMProphetNetForConditionalGeneration"),TPo=o(" (XLM-ProphetNet model)"),MPo=l(),gv=a("p"),EPo=o("The model is set in evaluation mode by default using "),yge=a("code"),CPo=o("model.eval()"),wPo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xge=a("code"),APo=o("model.train()"),LPo=l(),F(hv.$$.fragment),gGe=l(),Ui=a("h2"),uv=a("a"),$ge=a("span"),F(h7.$$.fragment),yPo=l(),kge=a("span"),xPo=o("AutoModelForSequenceClassification"),hGe=l(),Po=a("div"),F(u7.$$.fragment),$Po=l(),Ji=a("p"),kPo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),CO=a("a"),SPo=o("from_pretrained()"),RPo=o(" class method or the "),wO=a("a"),PPo=o("from_config()"),BPo=o(` class
method.`),IPo=l(),p7=a("p"),NPo=o("This class cannot be instantiated directly using "),Sge=a("code"),qPo=o("__init__()"),jPo=o(" (throws an error)."),DPo=l(),ct=a("div"),F(_7.$$.fragment),GPo=l(),Rge=a("p"),OPo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),VPo=l(),Yi=a("p"),XPo=o(`Note:
Loading a model from its configuration file does `),Pge=a("strong"),zPo=o("not"),WPo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),AO=a("a"),QPo=o("from_pretrained()"),HPo=o(" to load the model weights."),UPo=l(),F(pv.$$.fragment),JPo=l(),oo=a("div"),F(b7.$$.fragment),YPo=l(),Bge=a("p"),KPo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),ZPo=l(),Na=a("p"),eBo=o("The model class to instantiate is selected based on the "),Ige=a("code"),oBo=o("model_type"),rBo=o(` property of the config object (either
passed as an argument or loaded from `),Nge=a("code"),tBo=o("pretrained_model_name_or_path"),aBo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qge=a("code"),nBo=o("pretrained_model_name_or_path"),sBo=o(":"),lBo=l(),N=a("ul"),_v=a("li"),jge=a("strong"),iBo=o("albert"),dBo=o(" \u2014 "),LO=a("a"),cBo=o("AlbertForSequenceClassification"),mBo=o(" (ALBERT model)"),fBo=l(),bv=a("li"),Dge=a("strong"),gBo=o("bart"),hBo=o(" \u2014 "),yO=a("a"),uBo=o("BartForSequenceClassification"),pBo=o(" (BART model)"),_Bo=l(),vv=a("li"),Gge=a("strong"),bBo=o("bert"),vBo=o(" \u2014 "),xO=a("a"),FBo=o("BertForSequenceClassification"),TBo=o(" (BERT model)"),MBo=l(),Fv=a("li"),Oge=a("strong"),EBo=o("big_bird"),CBo=o(" \u2014 "),$O=a("a"),wBo=o("BigBirdForSequenceClassification"),ABo=o(" (BigBird model)"),LBo=l(),Tv=a("li"),Vge=a("strong"),yBo=o("bigbird_pegasus"),xBo=o(" \u2014 "),kO=a("a"),$Bo=o("BigBirdPegasusForSequenceClassification"),kBo=o(" (BigBird-Pegasus model)"),SBo=l(),Mv=a("li"),Xge=a("strong"),RBo=o("camembert"),PBo=o(" \u2014 "),SO=a("a"),BBo=o("CamembertForSequenceClassification"),IBo=o(" (CamemBERT model)"),NBo=l(),Ev=a("li"),zge=a("strong"),qBo=o("canine"),jBo=o(" \u2014 "),RO=a("a"),DBo=o("CanineForSequenceClassification"),GBo=o(" (CANINE model)"),OBo=l(),Cv=a("li"),Wge=a("strong"),VBo=o("convbert"),XBo=o(" \u2014 "),PO=a("a"),zBo=o("ConvBertForSequenceClassification"),WBo=o(" (ConvBERT model)"),QBo=l(),wv=a("li"),Qge=a("strong"),HBo=o("ctrl"),UBo=o(" \u2014 "),BO=a("a"),JBo=o("CTRLForSequenceClassification"),YBo=o(" (CTRL model)"),KBo=l(),Av=a("li"),Hge=a("strong"),ZBo=o("data2vec-text"),eIo=o(" \u2014 "),IO=a("a"),oIo=o("Data2VecTextForSequenceClassification"),rIo=o(" (Data2VecText model)"),tIo=l(),Lv=a("li"),Uge=a("strong"),aIo=o("deberta"),nIo=o(" \u2014 "),NO=a("a"),sIo=o("DebertaForSequenceClassification"),lIo=o(" (DeBERTa model)"),iIo=l(),yv=a("li"),Jge=a("strong"),dIo=o("deberta-v2"),cIo=o(" \u2014 "),qO=a("a"),mIo=o("DebertaV2ForSequenceClassification"),fIo=o(" (DeBERTa-v2 model)"),gIo=l(),xv=a("li"),Yge=a("strong"),hIo=o("distilbert"),uIo=o(" \u2014 "),jO=a("a"),pIo=o("DistilBertForSequenceClassification"),_Io=o(" (DistilBERT model)"),bIo=l(),$v=a("li"),Kge=a("strong"),vIo=o("electra"),FIo=o(" \u2014 "),DO=a("a"),TIo=o("ElectraForSequenceClassification"),MIo=o(" (ELECTRA model)"),EIo=l(),kv=a("li"),Zge=a("strong"),CIo=o("flaubert"),wIo=o(" \u2014 "),GO=a("a"),AIo=o("FlaubertForSequenceClassification"),LIo=o(" (FlauBERT model)"),yIo=l(),Sv=a("li"),ehe=a("strong"),xIo=o("fnet"),$Io=o(" \u2014 "),OO=a("a"),kIo=o("FNetForSequenceClassification"),SIo=o(" (FNet model)"),RIo=l(),Rv=a("li"),ohe=a("strong"),PIo=o("funnel"),BIo=o(" \u2014 "),VO=a("a"),IIo=o("FunnelForSequenceClassification"),NIo=o(" (Funnel Transformer model)"),qIo=l(),Pv=a("li"),rhe=a("strong"),jIo=o("gpt2"),DIo=o(" \u2014 "),XO=a("a"),GIo=o("GPT2ForSequenceClassification"),OIo=o(" (OpenAI GPT-2 model)"),VIo=l(),Bv=a("li"),the=a("strong"),XIo=o("gpt_neo"),zIo=o(" \u2014 "),zO=a("a"),WIo=o("GPTNeoForSequenceClassification"),QIo=o(" (GPT Neo model)"),HIo=l(),Iv=a("li"),ahe=a("strong"),UIo=o("gptj"),JIo=o(" \u2014 "),WO=a("a"),YIo=o("GPTJForSequenceClassification"),KIo=o(" (GPT-J model)"),ZIo=l(),Nv=a("li"),nhe=a("strong"),eNo=o("ibert"),oNo=o(" \u2014 "),QO=a("a"),rNo=o("IBertForSequenceClassification"),tNo=o(" (I-BERT model)"),aNo=l(),qv=a("li"),she=a("strong"),nNo=o("layoutlm"),sNo=o(" \u2014 "),HO=a("a"),lNo=o("LayoutLMForSequenceClassification"),iNo=o(" (LayoutLM model)"),dNo=l(),jv=a("li"),lhe=a("strong"),cNo=o("layoutlmv2"),mNo=o(" \u2014 "),UO=a("a"),fNo=o("LayoutLMv2ForSequenceClassification"),gNo=o(" (LayoutLMv2 model)"),hNo=l(),Dv=a("li"),ihe=a("strong"),uNo=o("layoutlmv3"),pNo=o(" \u2014 "),JO=a("a"),_No=o("LayoutLMv3ForSequenceClassification"),bNo=o(" (LayoutLMv3 model)"),vNo=l(),Gv=a("li"),dhe=a("strong"),FNo=o("led"),TNo=o(" \u2014 "),YO=a("a"),MNo=o("LEDForSequenceClassification"),ENo=o(" (LED model)"),CNo=l(),Ov=a("li"),che=a("strong"),wNo=o("longformer"),ANo=o(" \u2014 "),KO=a("a"),LNo=o("LongformerForSequenceClassification"),yNo=o(" (Longformer model)"),xNo=l(),Vv=a("li"),mhe=a("strong"),$No=o("mbart"),kNo=o(" \u2014 "),ZO=a("a"),SNo=o("MBartForSequenceClassification"),RNo=o(" (mBART model)"),PNo=l(),Xv=a("li"),fhe=a("strong"),BNo=o("megatron-bert"),INo=o(" \u2014 "),eV=a("a"),NNo=o("MegatronBertForSequenceClassification"),qNo=o(" (Megatron-BERT model)"),jNo=l(),zv=a("li"),ghe=a("strong"),DNo=o("mobilebert"),GNo=o(" \u2014 "),oV=a("a"),ONo=o("MobileBertForSequenceClassification"),VNo=o(" (MobileBERT model)"),XNo=l(),Wv=a("li"),hhe=a("strong"),zNo=o("mpnet"),WNo=o(" \u2014 "),rV=a("a"),QNo=o("MPNetForSequenceClassification"),HNo=o(" (MPNet model)"),UNo=l(),Qv=a("li"),uhe=a("strong"),JNo=o("nystromformer"),YNo=o(" \u2014 "),tV=a("a"),KNo=o("NystromformerForSequenceClassification"),ZNo=o(" (Nystr\xF6mformer model)"),eqo=l(),Hv=a("li"),phe=a("strong"),oqo=o("openai-gpt"),rqo=o(" \u2014 "),aV=a("a"),tqo=o("OpenAIGPTForSequenceClassification"),aqo=o(" (OpenAI GPT model)"),nqo=l(),Uv=a("li"),_he=a("strong"),sqo=o("perceiver"),lqo=o(" \u2014 "),nV=a("a"),iqo=o("PerceiverForSequenceClassification"),dqo=o(" (Perceiver model)"),cqo=l(),Jv=a("li"),bhe=a("strong"),mqo=o("plbart"),fqo=o(" \u2014 "),sV=a("a"),gqo=o("PLBartForSequenceClassification"),hqo=o(" (PLBart model)"),uqo=l(),Yv=a("li"),vhe=a("strong"),pqo=o("qdqbert"),_qo=o(" \u2014 "),lV=a("a"),bqo=o("QDQBertForSequenceClassification"),vqo=o(" (QDQBert model)"),Fqo=l(),Kv=a("li"),Fhe=a("strong"),Tqo=o("reformer"),Mqo=o(" \u2014 "),iV=a("a"),Eqo=o("ReformerForSequenceClassification"),Cqo=o(" (Reformer model)"),wqo=l(),Zv=a("li"),The=a("strong"),Aqo=o("rembert"),Lqo=o(" \u2014 "),dV=a("a"),yqo=o("RemBertForSequenceClassification"),xqo=o(" (RemBERT model)"),$qo=l(),eF=a("li"),Mhe=a("strong"),kqo=o("roberta"),Sqo=o(" \u2014 "),cV=a("a"),Rqo=o("RobertaForSequenceClassification"),Pqo=o(" (RoBERTa model)"),Bqo=l(),oF=a("li"),Ehe=a("strong"),Iqo=o("roformer"),Nqo=o(" \u2014 "),mV=a("a"),qqo=o("RoFormerForSequenceClassification"),jqo=o(" (RoFormer model)"),Dqo=l(),rF=a("li"),Che=a("strong"),Gqo=o("squeezebert"),Oqo=o(" \u2014 "),fV=a("a"),Vqo=o("SqueezeBertForSequenceClassification"),Xqo=o(" (SqueezeBERT model)"),zqo=l(),tF=a("li"),whe=a("strong"),Wqo=o("tapas"),Qqo=o(" \u2014 "),gV=a("a"),Hqo=o("TapasForSequenceClassification"),Uqo=o(" (TAPAS model)"),Jqo=l(),aF=a("li"),Ahe=a("strong"),Yqo=o("transfo-xl"),Kqo=o(" \u2014 "),hV=a("a"),Zqo=o("TransfoXLForSequenceClassification"),ejo=o(" (Transformer-XL model)"),ojo=l(),nF=a("li"),Lhe=a("strong"),rjo=o("xlm"),tjo=o(" \u2014 "),uV=a("a"),ajo=o("XLMForSequenceClassification"),njo=o(" (XLM model)"),sjo=l(),sF=a("li"),yhe=a("strong"),ljo=o("xlm-roberta"),ijo=o(" \u2014 "),pV=a("a"),djo=o("XLMRobertaForSequenceClassification"),cjo=o(" (XLM-RoBERTa model)"),mjo=l(),lF=a("li"),xhe=a("strong"),fjo=o("xlm-roberta-xl"),gjo=o(" \u2014 "),_V=a("a"),hjo=o("XLMRobertaXLForSequenceClassification"),ujo=o(" (XLM-RoBERTa-XL model)"),pjo=l(),iF=a("li"),$he=a("strong"),_jo=o("xlnet"),bjo=o(" \u2014 "),bV=a("a"),vjo=o("XLNetForSequenceClassification"),Fjo=o(" (XLNet model)"),Tjo=l(),dF=a("li"),khe=a("strong"),Mjo=o("yoso"),Ejo=o(" \u2014 "),vV=a("a"),Cjo=o("YosoForSequenceClassification"),wjo=o(" (YOSO model)"),Ajo=l(),cF=a("p"),Ljo=o("The model is set in evaluation mode by default using "),She=a("code"),yjo=o("model.eval()"),xjo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rhe=a("code"),$jo=o("model.train()"),kjo=l(),F(mF.$$.fragment),uGe=l(),Ki=a("h2"),fF=a("a"),Phe=a("span"),F(v7.$$.fragment),Sjo=l(),Bhe=a("span"),Rjo=o("AutoModelForMultipleChoice"),pGe=l(),Bo=a("div"),F(F7.$$.fragment),Pjo=l(),Zi=a("p"),Bjo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),FV=a("a"),Ijo=o("from_pretrained()"),Njo=o(" class method or the "),TV=a("a"),qjo=o("from_config()"),jjo=o(` class
method.`),Djo=l(),T7=a("p"),Gjo=o("This class cannot be instantiated directly using "),Ihe=a("code"),Ojo=o("__init__()"),Vjo=o(" (throws an error)."),Xjo=l(),mt=a("div"),F(M7.$$.fragment),zjo=l(),Nhe=a("p"),Wjo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Qjo=l(),ed=a("p"),Hjo=o(`Note:
Loading a model from its configuration file does `),qhe=a("strong"),Ujo=o("not"),Jjo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MV=a("a"),Yjo=o("from_pretrained()"),Kjo=o(" to load the model weights."),Zjo=l(),F(gF.$$.fragment),eDo=l(),ro=a("div"),F(E7.$$.fragment),oDo=l(),jhe=a("p"),rDo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),tDo=l(),qa=a("p"),aDo=o("The model class to instantiate is selected based on the "),Dhe=a("code"),nDo=o("model_type"),sDo=o(` property of the config object (either
passed as an argument or loaded from `),Ghe=a("code"),lDo=o("pretrained_model_name_or_path"),iDo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ohe=a("code"),dDo=o("pretrained_model_name_or_path"),cDo=o(":"),mDo=l(),Z=a("ul"),hF=a("li"),Vhe=a("strong"),fDo=o("albert"),gDo=o(" \u2014 "),EV=a("a"),hDo=o("AlbertForMultipleChoice"),uDo=o(" (ALBERT model)"),pDo=l(),uF=a("li"),Xhe=a("strong"),_Do=o("bert"),bDo=o(" \u2014 "),CV=a("a"),vDo=o("BertForMultipleChoice"),FDo=o(" (BERT model)"),TDo=l(),pF=a("li"),zhe=a("strong"),MDo=o("big_bird"),EDo=o(" \u2014 "),wV=a("a"),CDo=o("BigBirdForMultipleChoice"),wDo=o(" (BigBird model)"),ADo=l(),_F=a("li"),Whe=a("strong"),LDo=o("camembert"),yDo=o(" \u2014 "),AV=a("a"),xDo=o("CamembertForMultipleChoice"),$Do=o(" (CamemBERT model)"),kDo=l(),bF=a("li"),Qhe=a("strong"),SDo=o("canine"),RDo=o(" \u2014 "),LV=a("a"),PDo=o("CanineForMultipleChoice"),BDo=o(" (CANINE model)"),IDo=l(),vF=a("li"),Hhe=a("strong"),NDo=o("convbert"),qDo=o(" \u2014 "),yV=a("a"),jDo=o("ConvBertForMultipleChoice"),DDo=o(" (ConvBERT model)"),GDo=l(),FF=a("li"),Uhe=a("strong"),ODo=o("data2vec-text"),VDo=o(" \u2014 "),xV=a("a"),XDo=o("Data2VecTextForMultipleChoice"),zDo=o(" (Data2VecText model)"),WDo=l(),TF=a("li"),Jhe=a("strong"),QDo=o("deberta-v2"),HDo=o(" \u2014 "),$V=a("a"),UDo=o("DebertaV2ForMultipleChoice"),JDo=o(" (DeBERTa-v2 model)"),YDo=l(),MF=a("li"),Yhe=a("strong"),KDo=o("distilbert"),ZDo=o(" \u2014 "),kV=a("a"),eGo=o("DistilBertForMultipleChoice"),oGo=o(" (DistilBERT model)"),rGo=l(),EF=a("li"),Khe=a("strong"),tGo=o("electra"),aGo=o(" \u2014 "),SV=a("a"),nGo=o("ElectraForMultipleChoice"),sGo=o(" (ELECTRA model)"),lGo=l(),CF=a("li"),Zhe=a("strong"),iGo=o("flaubert"),dGo=o(" \u2014 "),RV=a("a"),cGo=o("FlaubertForMultipleChoice"),mGo=o(" (FlauBERT model)"),fGo=l(),wF=a("li"),eue=a("strong"),gGo=o("fnet"),hGo=o(" \u2014 "),PV=a("a"),uGo=o("FNetForMultipleChoice"),pGo=o(" (FNet model)"),_Go=l(),AF=a("li"),oue=a("strong"),bGo=o("funnel"),vGo=o(" \u2014 "),BV=a("a"),FGo=o("FunnelForMultipleChoice"),TGo=o(" (Funnel Transformer model)"),MGo=l(),LF=a("li"),rue=a("strong"),EGo=o("ibert"),CGo=o(" \u2014 "),IV=a("a"),wGo=o("IBertForMultipleChoice"),AGo=o(" (I-BERT model)"),LGo=l(),yF=a("li"),tue=a("strong"),yGo=o("longformer"),xGo=o(" \u2014 "),NV=a("a"),$Go=o("LongformerForMultipleChoice"),kGo=o(" (Longformer model)"),SGo=l(),xF=a("li"),aue=a("strong"),RGo=o("megatron-bert"),PGo=o(" \u2014 "),qV=a("a"),BGo=o("MegatronBertForMultipleChoice"),IGo=o(" (Megatron-BERT model)"),NGo=l(),$F=a("li"),nue=a("strong"),qGo=o("mobilebert"),jGo=o(" \u2014 "),jV=a("a"),DGo=o("MobileBertForMultipleChoice"),GGo=o(" (MobileBERT model)"),OGo=l(),kF=a("li"),sue=a("strong"),VGo=o("mpnet"),XGo=o(" \u2014 "),DV=a("a"),zGo=o("MPNetForMultipleChoice"),WGo=o(" (MPNet model)"),QGo=l(),SF=a("li"),lue=a("strong"),HGo=o("nystromformer"),UGo=o(" \u2014 "),GV=a("a"),JGo=o("NystromformerForMultipleChoice"),YGo=o(" (Nystr\xF6mformer model)"),KGo=l(),RF=a("li"),iue=a("strong"),ZGo=o("qdqbert"),eOo=o(" \u2014 "),OV=a("a"),oOo=o("QDQBertForMultipleChoice"),rOo=o(" (QDQBert model)"),tOo=l(),PF=a("li"),due=a("strong"),aOo=o("rembert"),nOo=o(" \u2014 "),VV=a("a"),sOo=o("RemBertForMultipleChoice"),lOo=o(" (RemBERT model)"),iOo=l(),BF=a("li"),cue=a("strong"),dOo=o("roberta"),cOo=o(" \u2014 "),XV=a("a"),mOo=o("RobertaForMultipleChoice"),fOo=o(" (RoBERTa model)"),gOo=l(),IF=a("li"),mue=a("strong"),hOo=o("roformer"),uOo=o(" \u2014 "),zV=a("a"),pOo=o("RoFormerForMultipleChoice"),_Oo=o(" (RoFormer model)"),bOo=l(),NF=a("li"),fue=a("strong"),vOo=o("squeezebert"),FOo=o(" \u2014 "),WV=a("a"),TOo=o("SqueezeBertForMultipleChoice"),MOo=o(" (SqueezeBERT model)"),EOo=l(),qF=a("li"),gue=a("strong"),COo=o("xlm"),wOo=o(" \u2014 "),QV=a("a"),AOo=o("XLMForMultipleChoice"),LOo=o(" (XLM model)"),yOo=l(),jF=a("li"),hue=a("strong"),xOo=o("xlm-roberta"),$Oo=o(" \u2014 "),HV=a("a"),kOo=o("XLMRobertaForMultipleChoice"),SOo=o(" (XLM-RoBERTa model)"),ROo=l(),DF=a("li"),uue=a("strong"),POo=o("xlm-roberta-xl"),BOo=o(" \u2014 "),UV=a("a"),IOo=o("XLMRobertaXLForMultipleChoice"),NOo=o(" (XLM-RoBERTa-XL model)"),qOo=l(),GF=a("li"),pue=a("strong"),jOo=o("xlnet"),DOo=o(" \u2014 "),JV=a("a"),GOo=o("XLNetForMultipleChoice"),OOo=o(" (XLNet model)"),VOo=l(),OF=a("li"),_ue=a("strong"),XOo=o("yoso"),zOo=o(" \u2014 "),YV=a("a"),WOo=o("YosoForMultipleChoice"),QOo=o(" (YOSO model)"),HOo=l(),VF=a("p"),UOo=o("The model is set in evaluation mode by default using "),bue=a("code"),JOo=o("model.eval()"),YOo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vue=a("code"),KOo=o("model.train()"),ZOo=l(),F(XF.$$.fragment),_Ge=l(),od=a("h2"),zF=a("a"),Fue=a("span"),F(C7.$$.fragment),eVo=l(),Tue=a("span"),oVo=o("AutoModelForNextSentencePrediction"),bGe=l(),Io=a("div"),F(w7.$$.fragment),rVo=l(),rd=a("p"),tVo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),KV=a("a"),aVo=o("from_pretrained()"),nVo=o(" class method or the "),ZV=a("a"),sVo=o("from_config()"),lVo=o(` class
method.`),iVo=l(),A7=a("p"),dVo=o("This class cannot be instantiated directly using "),Mue=a("code"),cVo=o("__init__()"),mVo=o(" (throws an error)."),fVo=l(),ft=a("div"),F(L7.$$.fragment),gVo=l(),Eue=a("p"),hVo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),uVo=l(),td=a("p"),pVo=o(`Note:
Loading a model from its configuration file does `),Cue=a("strong"),_Vo=o("not"),bVo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eX=a("a"),vVo=o("from_pretrained()"),FVo=o(" to load the model weights."),TVo=l(),F(WF.$$.fragment),MVo=l(),to=a("div"),F(y7.$$.fragment),EVo=l(),wue=a("p"),CVo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),wVo=l(),ja=a("p"),AVo=o("The model class to instantiate is selected based on the "),Aue=a("code"),LVo=o("model_type"),yVo=o(` property of the config object (either
passed as an argument or loaded from `),Lue=a("code"),xVo=o("pretrained_model_name_or_path"),$Vo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yue=a("code"),kVo=o("pretrained_model_name_or_path"),SVo=o(":"),RVo=l(),Zr=a("ul"),QF=a("li"),xue=a("strong"),PVo=o("bert"),BVo=o(" \u2014 "),oX=a("a"),IVo=o("BertForNextSentencePrediction"),NVo=o(" (BERT model)"),qVo=l(),HF=a("li"),$ue=a("strong"),jVo=o("fnet"),DVo=o(" \u2014 "),rX=a("a"),GVo=o("FNetForNextSentencePrediction"),OVo=o(" (FNet model)"),VVo=l(),UF=a("li"),kue=a("strong"),XVo=o("megatron-bert"),zVo=o(" \u2014 "),tX=a("a"),WVo=o("MegatronBertForNextSentencePrediction"),QVo=o(" (Megatron-BERT model)"),HVo=l(),JF=a("li"),Sue=a("strong"),UVo=o("mobilebert"),JVo=o(" \u2014 "),aX=a("a"),YVo=o("MobileBertForNextSentencePrediction"),KVo=o(" (MobileBERT model)"),ZVo=l(),YF=a("li"),Rue=a("strong"),eXo=o("qdqbert"),oXo=o(" \u2014 "),nX=a("a"),rXo=o("QDQBertForNextSentencePrediction"),tXo=o(" (QDQBert model)"),aXo=l(),KF=a("p"),nXo=o("The model is set in evaluation mode by default using "),Pue=a("code"),sXo=o("model.eval()"),lXo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Bue=a("code"),iXo=o("model.train()"),dXo=l(),F(ZF.$$.fragment),vGe=l(),ad=a("h2"),e1=a("a"),Iue=a("span"),F(x7.$$.fragment),cXo=l(),Nue=a("span"),mXo=o("AutoModelForTokenClassification"),FGe=l(),No=a("div"),F($7.$$.fragment),fXo=l(),nd=a("p"),gXo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),sX=a("a"),hXo=o("from_pretrained()"),uXo=o(" class method or the "),lX=a("a"),pXo=o("from_config()"),_Xo=o(` class
method.`),bXo=l(),k7=a("p"),vXo=o("This class cannot be instantiated directly using "),que=a("code"),FXo=o("__init__()"),TXo=o(" (throws an error)."),MXo=l(),gt=a("div"),F(S7.$$.fragment),EXo=l(),jue=a("p"),CXo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),wXo=l(),sd=a("p"),AXo=o(`Note:
Loading a model from its configuration file does `),Due=a("strong"),LXo=o("not"),yXo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iX=a("a"),xXo=o("from_pretrained()"),$Xo=o(" to load the model weights."),kXo=l(),F(o1.$$.fragment),SXo=l(),ao=a("div"),F(R7.$$.fragment),RXo=l(),Gue=a("p"),PXo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),BXo=l(),Da=a("p"),IXo=o("The model class to instantiate is selected based on the "),Oue=a("code"),NXo=o("model_type"),qXo=o(` property of the config object (either
passed as an argument or loaded from `),Vue=a("code"),jXo=o("pretrained_model_name_or_path"),DXo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xue=a("code"),GXo=o("pretrained_model_name_or_path"),OXo=o(":"),VXo=l(),U=a("ul"),r1=a("li"),zue=a("strong"),XXo=o("albert"),zXo=o(" \u2014 "),dX=a("a"),WXo=o("AlbertForTokenClassification"),QXo=o(" (ALBERT model)"),HXo=l(),t1=a("li"),Wue=a("strong"),UXo=o("bert"),JXo=o(" \u2014 "),cX=a("a"),YXo=o("BertForTokenClassification"),KXo=o(" (BERT model)"),ZXo=l(),a1=a("li"),Que=a("strong"),ezo=o("big_bird"),ozo=o(" \u2014 "),mX=a("a"),rzo=o("BigBirdForTokenClassification"),tzo=o(" (BigBird model)"),azo=l(),n1=a("li"),Hue=a("strong"),nzo=o("camembert"),szo=o(" \u2014 "),fX=a("a"),lzo=o("CamembertForTokenClassification"),izo=o(" (CamemBERT model)"),dzo=l(),s1=a("li"),Uue=a("strong"),czo=o("canine"),mzo=o(" \u2014 "),gX=a("a"),fzo=o("CanineForTokenClassification"),gzo=o(" (CANINE model)"),hzo=l(),l1=a("li"),Jue=a("strong"),uzo=o("convbert"),pzo=o(" \u2014 "),hX=a("a"),_zo=o("ConvBertForTokenClassification"),bzo=o(" (ConvBERT model)"),vzo=l(),i1=a("li"),Yue=a("strong"),Fzo=o("data2vec-text"),Tzo=o(" \u2014 "),uX=a("a"),Mzo=o("Data2VecTextForTokenClassification"),Ezo=o(" (Data2VecText model)"),Czo=l(),d1=a("li"),Kue=a("strong"),wzo=o("deberta"),Azo=o(" \u2014 "),pX=a("a"),Lzo=o("DebertaForTokenClassification"),yzo=o(" (DeBERTa model)"),xzo=l(),c1=a("li"),Zue=a("strong"),$zo=o("deberta-v2"),kzo=o(" \u2014 "),_X=a("a"),Szo=o("DebertaV2ForTokenClassification"),Rzo=o(" (DeBERTa-v2 model)"),Pzo=l(),m1=a("li"),epe=a("strong"),Bzo=o("distilbert"),Izo=o(" \u2014 "),bX=a("a"),Nzo=o("DistilBertForTokenClassification"),qzo=o(" (DistilBERT model)"),jzo=l(),f1=a("li"),ope=a("strong"),Dzo=o("electra"),Gzo=o(" \u2014 "),vX=a("a"),Ozo=o("ElectraForTokenClassification"),Vzo=o(" (ELECTRA model)"),Xzo=l(),g1=a("li"),rpe=a("strong"),zzo=o("flaubert"),Wzo=o(" \u2014 "),FX=a("a"),Qzo=o("FlaubertForTokenClassification"),Hzo=o(" (FlauBERT model)"),Uzo=l(),h1=a("li"),tpe=a("strong"),Jzo=o("fnet"),Yzo=o(" \u2014 "),TX=a("a"),Kzo=o("FNetForTokenClassification"),Zzo=o(" (FNet model)"),eWo=l(),u1=a("li"),ape=a("strong"),oWo=o("funnel"),rWo=o(" \u2014 "),MX=a("a"),tWo=o("FunnelForTokenClassification"),aWo=o(" (Funnel Transformer model)"),nWo=l(),p1=a("li"),npe=a("strong"),sWo=o("gpt2"),lWo=o(" \u2014 "),EX=a("a"),iWo=o("GPT2ForTokenClassification"),dWo=o(" (OpenAI GPT-2 model)"),cWo=l(),_1=a("li"),spe=a("strong"),mWo=o("ibert"),fWo=o(" \u2014 "),CX=a("a"),gWo=o("IBertForTokenClassification"),hWo=o(" (I-BERT model)"),uWo=l(),b1=a("li"),lpe=a("strong"),pWo=o("layoutlm"),_Wo=o(" \u2014 "),wX=a("a"),bWo=o("LayoutLMForTokenClassification"),vWo=o(" (LayoutLM model)"),FWo=l(),v1=a("li"),ipe=a("strong"),TWo=o("layoutlmv2"),MWo=o(" \u2014 "),AX=a("a"),EWo=o("LayoutLMv2ForTokenClassification"),CWo=o(" (LayoutLMv2 model)"),wWo=l(),F1=a("li"),dpe=a("strong"),AWo=o("layoutlmv3"),LWo=o(" \u2014 "),LX=a("a"),yWo=o("LayoutLMv3ForTokenClassification"),xWo=o(" (LayoutLMv3 model)"),$Wo=l(),T1=a("li"),cpe=a("strong"),kWo=o("longformer"),SWo=o(" \u2014 "),yX=a("a"),RWo=o("LongformerForTokenClassification"),PWo=o(" (Longformer model)"),BWo=l(),M1=a("li"),mpe=a("strong"),IWo=o("megatron-bert"),NWo=o(" \u2014 "),xX=a("a"),qWo=o("MegatronBertForTokenClassification"),jWo=o(" (Megatron-BERT model)"),DWo=l(),E1=a("li"),fpe=a("strong"),GWo=o("mobilebert"),OWo=o(" \u2014 "),$X=a("a"),VWo=o("MobileBertForTokenClassification"),XWo=o(" (MobileBERT model)"),zWo=l(),C1=a("li"),gpe=a("strong"),WWo=o("mpnet"),QWo=o(" \u2014 "),kX=a("a"),HWo=o("MPNetForTokenClassification"),UWo=o(" (MPNet model)"),JWo=l(),w1=a("li"),hpe=a("strong"),YWo=o("nystromformer"),KWo=o(" \u2014 "),SX=a("a"),ZWo=o("NystromformerForTokenClassification"),eQo=o(" (Nystr\xF6mformer model)"),oQo=l(),A1=a("li"),upe=a("strong"),rQo=o("qdqbert"),tQo=o(" \u2014 "),RX=a("a"),aQo=o("QDQBertForTokenClassification"),nQo=o(" (QDQBert model)"),sQo=l(),L1=a("li"),ppe=a("strong"),lQo=o("rembert"),iQo=o(" \u2014 "),PX=a("a"),dQo=o("RemBertForTokenClassification"),cQo=o(" (RemBERT model)"),mQo=l(),y1=a("li"),_pe=a("strong"),fQo=o("roberta"),gQo=o(" \u2014 "),BX=a("a"),hQo=o("RobertaForTokenClassification"),uQo=o(" (RoBERTa model)"),pQo=l(),x1=a("li"),bpe=a("strong"),_Qo=o("roformer"),bQo=o(" \u2014 "),IX=a("a"),vQo=o("RoFormerForTokenClassification"),FQo=o(" (RoFormer model)"),TQo=l(),$1=a("li"),vpe=a("strong"),MQo=o("squeezebert"),EQo=o(" \u2014 "),NX=a("a"),CQo=o("SqueezeBertForTokenClassification"),wQo=o(" (SqueezeBERT model)"),AQo=l(),k1=a("li"),Fpe=a("strong"),LQo=o("xlm"),yQo=o(" \u2014 "),qX=a("a"),xQo=o("XLMForTokenClassification"),$Qo=o(" (XLM model)"),kQo=l(),S1=a("li"),Tpe=a("strong"),SQo=o("xlm-roberta"),RQo=o(" \u2014 "),jX=a("a"),PQo=o("XLMRobertaForTokenClassification"),BQo=o(" (XLM-RoBERTa model)"),IQo=l(),R1=a("li"),Mpe=a("strong"),NQo=o("xlm-roberta-xl"),qQo=o(" \u2014 "),DX=a("a"),jQo=o("XLMRobertaXLForTokenClassification"),DQo=o(" (XLM-RoBERTa-XL model)"),GQo=l(),P1=a("li"),Epe=a("strong"),OQo=o("xlnet"),VQo=o(" \u2014 "),GX=a("a"),XQo=o("XLNetForTokenClassification"),zQo=o(" (XLNet model)"),WQo=l(),B1=a("li"),Cpe=a("strong"),QQo=o("yoso"),HQo=o(" \u2014 "),OX=a("a"),UQo=o("YosoForTokenClassification"),JQo=o(" (YOSO model)"),YQo=l(),I1=a("p"),KQo=o("The model is set in evaluation mode by default using "),wpe=a("code"),ZQo=o("model.eval()"),eHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ape=a("code"),oHo=o("model.train()"),rHo=l(),F(N1.$$.fragment),TGe=l(),ld=a("h2"),q1=a("a"),Lpe=a("span"),F(P7.$$.fragment),tHo=l(),ype=a("span"),aHo=o("AutoModelForQuestionAnswering"),MGe=l(),qo=a("div"),F(B7.$$.fragment),nHo=l(),id=a("p"),sHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),VX=a("a"),lHo=o("from_pretrained()"),iHo=o(" class method or the "),XX=a("a"),dHo=o("from_config()"),cHo=o(` class
method.`),mHo=l(),I7=a("p"),fHo=o("This class cannot be instantiated directly using "),xpe=a("code"),gHo=o("__init__()"),hHo=o(" (throws an error)."),uHo=l(),ht=a("div"),F(N7.$$.fragment),pHo=l(),$pe=a("p"),_Ho=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),bHo=l(),dd=a("p"),vHo=o(`Note:
Loading a model from its configuration file does `),kpe=a("strong"),FHo=o("not"),THo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zX=a("a"),MHo=o("from_pretrained()"),EHo=o(" to load the model weights."),CHo=l(),F(j1.$$.fragment),wHo=l(),no=a("div"),F(q7.$$.fragment),AHo=l(),Spe=a("p"),LHo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),yHo=l(),Ga=a("p"),xHo=o("The model class to instantiate is selected based on the "),Rpe=a("code"),$Ho=o("model_type"),kHo=o(` property of the config object (either
passed as an argument or loaded from `),Ppe=a("code"),SHo=o("pretrained_model_name_or_path"),RHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bpe=a("code"),PHo=o("pretrained_model_name_or_path"),BHo=o(":"),IHo=l(),V=a("ul"),D1=a("li"),Ipe=a("strong"),NHo=o("albert"),qHo=o(" \u2014 "),WX=a("a"),jHo=o("AlbertForQuestionAnswering"),DHo=o(" (ALBERT model)"),GHo=l(),G1=a("li"),Npe=a("strong"),OHo=o("bart"),VHo=o(" \u2014 "),QX=a("a"),XHo=o("BartForQuestionAnswering"),zHo=o(" (BART model)"),WHo=l(),O1=a("li"),qpe=a("strong"),QHo=o("bert"),HHo=o(" \u2014 "),HX=a("a"),UHo=o("BertForQuestionAnswering"),JHo=o(" (BERT model)"),YHo=l(),V1=a("li"),jpe=a("strong"),KHo=o("big_bird"),ZHo=o(" \u2014 "),UX=a("a"),eUo=o("BigBirdForQuestionAnswering"),oUo=o(" (BigBird model)"),rUo=l(),X1=a("li"),Dpe=a("strong"),tUo=o("bigbird_pegasus"),aUo=o(" \u2014 "),JX=a("a"),nUo=o("BigBirdPegasusForQuestionAnswering"),sUo=o(" (BigBird-Pegasus model)"),lUo=l(),z1=a("li"),Gpe=a("strong"),iUo=o("camembert"),dUo=o(" \u2014 "),YX=a("a"),cUo=o("CamembertForQuestionAnswering"),mUo=o(" (CamemBERT model)"),fUo=l(),W1=a("li"),Ope=a("strong"),gUo=o("canine"),hUo=o(" \u2014 "),KX=a("a"),uUo=o("CanineForQuestionAnswering"),pUo=o(" (CANINE model)"),_Uo=l(),Q1=a("li"),Vpe=a("strong"),bUo=o("convbert"),vUo=o(" \u2014 "),ZX=a("a"),FUo=o("ConvBertForQuestionAnswering"),TUo=o(" (ConvBERT model)"),MUo=l(),H1=a("li"),Xpe=a("strong"),EUo=o("data2vec-text"),CUo=o(" \u2014 "),ez=a("a"),wUo=o("Data2VecTextForQuestionAnswering"),AUo=o(" (Data2VecText model)"),LUo=l(),U1=a("li"),zpe=a("strong"),yUo=o("deberta"),xUo=o(" \u2014 "),oz=a("a"),$Uo=o("DebertaForQuestionAnswering"),kUo=o(" (DeBERTa model)"),SUo=l(),J1=a("li"),Wpe=a("strong"),RUo=o("deberta-v2"),PUo=o(" \u2014 "),rz=a("a"),BUo=o("DebertaV2ForQuestionAnswering"),IUo=o(" (DeBERTa-v2 model)"),NUo=l(),Y1=a("li"),Qpe=a("strong"),qUo=o("distilbert"),jUo=o(" \u2014 "),tz=a("a"),DUo=o("DistilBertForQuestionAnswering"),GUo=o(" (DistilBERT model)"),OUo=l(),K1=a("li"),Hpe=a("strong"),VUo=o("electra"),XUo=o(" \u2014 "),az=a("a"),zUo=o("ElectraForQuestionAnswering"),WUo=o(" (ELECTRA model)"),QUo=l(),Z1=a("li"),Upe=a("strong"),HUo=o("flaubert"),UUo=o(" \u2014 "),nz=a("a"),JUo=o("FlaubertForQuestionAnsweringSimple"),YUo=o(" (FlauBERT model)"),KUo=l(),eT=a("li"),Jpe=a("strong"),ZUo=o("fnet"),eJo=o(" \u2014 "),sz=a("a"),oJo=o("FNetForQuestionAnswering"),rJo=o(" (FNet model)"),tJo=l(),oT=a("li"),Ype=a("strong"),aJo=o("funnel"),nJo=o(" \u2014 "),lz=a("a"),sJo=o("FunnelForQuestionAnswering"),lJo=o(" (Funnel Transformer model)"),iJo=l(),rT=a("li"),Kpe=a("strong"),dJo=o("gptj"),cJo=o(" \u2014 "),iz=a("a"),mJo=o("GPTJForQuestionAnswering"),fJo=o(" (GPT-J model)"),gJo=l(),tT=a("li"),Zpe=a("strong"),hJo=o("ibert"),uJo=o(" \u2014 "),dz=a("a"),pJo=o("IBertForQuestionAnswering"),_Jo=o(" (I-BERT model)"),bJo=l(),aT=a("li"),e_e=a("strong"),vJo=o("layoutlmv2"),FJo=o(" \u2014 "),cz=a("a"),TJo=o("LayoutLMv2ForQuestionAnswering"),MJo=o(" (LayoutLMv2 model)"),EJo=l(),nT=a("li"),o_e=a("strong"),CJo=o("layoutlmv3"),wJo=o(" \u2014 "),mz=a("a"),AJo=o("LayoutLMv3ForQuestionAnswering"),LJo=o(" (LayoutLMv3 model)"),yJo=l(),sT=a("li"),r_e=a("strong"),xJo=o("led"),$Jo=o(" \u2014 "),fz=a("a"),kJo=o("LEDForQuestionAnswering"),SJo=o(" (LED model)"),RJo=l(),lT=a("li"),t_e=a("strong"),PJo=o("longformer"),BJo=o(" \u2014 "),gz=a("a"),IJo=o("LongformerForQuestionAnswering"),NJo=o(" (Longformer model)"),qJo=l(),iT=a("li"),a_e=a("strong"),jJo=o("lxmert"),DJo=o(" \u2014 "),hz=a("a"),GJo=o("LxmertForQuestionAnswering"),OJo=o(" (LXMERT model)"),VJo=l(),dT=a("li"),n_e=a("strong"),XJo=o("mbart"),zJo=o(" \u2014 "),uz=a("a"),WJo=o("MBartForQuestionAnswering"),QJo=o(" (mBART model)"),HJo=l(),cT=a("li"),s_e=a("strong"),UJo=o("megatron-bert"),JJo=o(" \u2014 "),pz=a("a"),YJo=o("MegatronBertForQuestionAnswering"),KJo=o(" (Megatron-BERT model)"),ZJo=l(),mT=a("li"),l_e=a("strong"),eYo=o("mobilebert"),oYo=o(" \u2014 "),_z=a("a"),rYo=o("MobileBertForQuestionAnswering"),tYo=o(" (MobileBERT model)"),aYo=l(),fT=a("li"),i_e=a("strong"),nYo=o("mpnet"),sYo=o(" \u2014 "),bz=a("a"),lYo=o("MPNetForQuestionAnswering"),iYo=o(" (MPNet model)"),dYo=l(),gT=a("li"),d_e=a("strong"),cYo=o("nystromformer"),mYo=o(" \u2014 "),vz=a("a"),fYo=o("NystromformerForQuestionAnswering"),gYo=o(" (Nystr\xF6mformer model)"),hYo=l(),hT=a("li"),c_e=a("strong"),uYo=o("qdqbert"),pYo=o(" \u2014 "),Fz=a("a"),_Yo=o("QDQBertForQuestionAnswering"),bYo=o(" (QDQBert model)"),vYo=l(),uT=a("li"),m_e=a("strong"),FYo=o("reformer"),TYo=o(" \u2014 "),Tz=a("a"),MYo=o("ReformerForQuestionAnswering"),EYo=o(" (Reformer model)"),CYo=l(),pT=a("li"),f_e=a("strong"),wYo=o("rembert"),AYo=o(" \u2014 "),Mz=a("a"),LYo=o("RemBertForQuestionAnswering"),yYo=o(" (RemBERT model)"),xYo=l(),_T=a("li"),g_e=a("strong"),$Yo=o("roberta"),kYo=o(" \u2014 "),Ez=a("a"),SYo=o("RobertaForQuestionAnswering"),RYo=o(" (RoBERTa model)"),PYo=l(),bT=a("li"),h_e=a("strong"),BYo=o("roformer"),IYo=o(" \u2014 "),Cz=a("a"),NYo=o("RoFormerForQuestionAnswering"),qYo=o(" (RoFormer model)"),jYo=l(),vT=a("li"),u_e=a("strong"),DYo=o("splinter"),GYo=o(" \u2014 "),wz=a("a"),OYo=o("SplinterForQuestionAnswering"),VYo=o(" (Splinter model)"),XYo=l(),FT=a("li"),p_e=a("strong"),zYo=o("squeezebert"),WYo=o(" \u2014 "),Az=a("a"),QYo=o("SqueezeBertForQuestionAnswering"),HYo=o(" (SqueezeBERT model)"),UYo=l(),TT=a("li"),__e=a("strong"),JYo=o("xlm"),YYo=o(" \u2014 "),Lz=a("a"),KYo=o("XLMForQuestionAnsweringSimple"),ZYo=o(" (XLM model)"),eKo=l(),MT=a("li"),b_e=a("strong"),oKo=o("xlm-roberta"),rKo=o(" \u2014 "),yz=a("a"),tKo=o("XLMRobertaForQuestionAnswering"),aKo=o(" (XLM-RoBERTa model)"),nKo=l(),ET=a("li"),v_e=a("strong"),sKo=o("xlm-roberta-xl"),lKo=o(" \u2014 "),xz=a("a"),iKo=o("XLMRobertaXLForQuestionAnswering"),dKo=o(" (XLM-RoBERTa-XL model)"),cKo=l(),CT=a("li"),F_e=a("strong"),mKo=o("xlnet"),fKo=o(" \u2014 "),$z=a("a"),gKo=o("XLNetForQuestionAnsweringSimple"),hKo=o(" (XLNet model)"),uKo=l(),wT=a("li"),T_e=a("strong"),pKo=o("yoso"),_Ko=o(" \u2014 "),kz=a("a"),bKo=o("YosoForQuestionAnswering"),vKo=o(" (YOSO model)"),FKo=l(),AT=a("p"),TKo=o("The model is set in evaluation mode by default using "),M_e=a("code"),MKo=o("model.eval()"),EKo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),E_e=a("code"),CKo=o("model.train()"),wKo=l(),F(LT.$$.fragment),EGe=l(),cd=a("h2"),yT=a("a"),C_e=a("span"),F(j7.$$.fragment),AKo=l(),w_e=a("span"),LKo=o("AutoModelForTableQuestionAnswering"),CGe=l(),jo=a("div"),F(D7.$$.fragment),yKo=l(),md=a("p"),xKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Sz=a("a"),$Ko=o("from_pretrained()"),kKo=o(" class method or the "),Rz=a("a"),SKo=o("from_config()"),RKo=o(` class
method.`),PKo=l(),G7=a("p"),BKo=o("This class cannot be instantiated directly using "),A_e=a("code"),IKo=o("__init__()"),NKo=o(" (throws an error)."),qKo=l(),ut=a("div"),F(O7.$$.fragment),jKo=l(),L_e=a("p"),DKo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),GKo=l(),fd=a("p"),OKo=o(`Note:
Loading a model from its configuration file does `),y_e=a("strong"),VKo=o("not"),XKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Pz=a("a"),zKo=o("from_pretrained()"),WKo=o(" to load the model weights."),QKo=l(),F(xT.$$.fragment),HKo=l(),so=a("div"),F(V7.$$.fragment),UKo=l(),x_e=a("p"),JKo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),YKo=l(),Oa=a("p"),KKo=o("The model class to instantiate is selected based on the "),$_e=a("code"),ZKo=o("model_type"),eZo=o(` property of the config object (either
passed as an argument or loaded from `),k_e=a("code"),oZo=o("pretrained_model_name_or_path"),rZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S_e=a("code"),tZo=o("pretrained_model_name_or_path"),aZo=o(":"),nZo=l(),R_e=a("ul"),$T=a("li"),P_e=a("strong"),sZo=o("tapas"),lZo=o(" \u2014 "),Bz=a("a"),iZo=o("TapasForQuestionAnswering"),dZo=o(" (TAPAS model)"),cZo=l(),kT=a("p"),mZo=o("The model is set in evaluation mode by default using "),B_e=a("code"),fZo=o("model.eval()"),gZo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),I_e=a("code"),hZo=o("model.train()"),uZo=l(),F(ST.$$.fragment),wGe=l(),gd=a("h2"),RT=a("a"),N_e=a("span"),F(X7.$$.fragment),pZo=l(),q_e=a("span"),_Zo=o("AutoModelForImageClassification"),AGe=l(),Do=a("div"),F(z7.$$.fragment),bZo=l(),hd=a("p"),vZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Iz=a("a"),FZo=o("from_pretrained()"),TZo=o(" class method or the "),Nz=a("a"),MZo=o("from_config()"),EZo=o(` class
method.`),CZo=l(),W7=a("p"),wZo=o("This class cannot be instantiated directly using "),j_e=a("code"),AZo=o("__init__()"),LZo=o(" (throws an error)."),yZo=l(),pt=a("div"),F(Q7.$$.fragment),xZo=l(),D_e=a("p"),$Zo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),kZo=l(),ud=a("p"),SZo=o(`Note:
Loading a model from its configuration file does `),G_e=a("strong"),RZo=o("not"),PZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qz=a("a"),BZo=o("from_pretrained()"),IZo=o(" to load the model weights."),NZo=l(),F(PT.$$.fragment),qZo=l(),lo=a("div"),F(H7.$$.fragment),jZo=l(),O_e=a("p"),DZo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),GZo=l(),Va=a("p"),OZo=o("The model class to instantiate is selected based on the "),V_e=a("code"),VZo=o("model_type"),XZo=o(` property of the config object (either
passed as an argument or loaded from `),X_e=a("code"),zZo=o("pretrained_model_name_or_path"),WZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z_e=a("code"),QZo=o("pretrained_model_name_or_path"),HZo=o(":"),UZo=l(),Fe=a("ul"),BT=a("li"),W_e=a("strong"),JZo=o("beit"),YZo=o(" \u2014 "),jz=a("a"),KZo=o("BeitForImageClassification"),ZZo=o(" (BEiT model)"),eer=l(),IT=a("li"),Q_e=a("strong"),oer=o("convnext"),rer=o(" \u2014 "),Dz=a("a"),ter=o("ConvNextForImageClassification"),aer=o(" (ConvNeXT model)"),ner=l(),NT=a("li"),H_e=a("strong"),ser=o("cvt"),ler=o(" \u2014 "),Gz=a("a"),ier=o("CvtForImageClassification"),der=o(" (CvT model)"),cer=l(),qT=a("li"),U_e=a("strong"),mer=o("data2vec-vision"),fer=o(" \u2014 "),Oz=a("a"),ger=o("Data2VecVisionForImageClassification"),her=o(" (Data2VecVision model)"),uer=l(),Os=a("li"),J_e=a("strong"),per=o("deit"),_er=o(" \u2014 "),Vz=a("a"),ber=o("DeiTForImageClassification"),ver=o(" or "),Xz=a("a"),Fer=o("DeiTForImageClassificationWithTeacher"),Ter=o(" (DeiT model)"),Mer=l(),jT=a("li"),Y_e=a("strong"),Eer=o("imagegpt"),Cer=o(" \u2014 "),zz=a("a"),wer=o("ImageGPTForImageClassification"),Aer=o(" (ImageGPT model)"),Ler=l(),Vs=a("li"),K_e=a("strong"),yer=o("levit"),xer=o(" \u2014 "),Wz=a("a"),$er=o("LevitForImageClassification"),ker=o(" or "),Qz=a("a"),Ser=o("LevitForImageClassificationWithTeacher"),Rer=o(" (LeViT model)"),Per=l(),_t=a("li"),Z_e=a("strong"),Ber=o("perceiver"),Ier=o(" \u2014 "),Hz=a("a"),Ner=o("PerceiverForImageClassificationLearned"),qer=o(" or "),Uz=a("a"),jer=o("PerceiverForImageClassificationFourier"),Der=o(" or "),Jz=a("a"),Ger=o("PerceiverForImageClassificationConvProcessing"),Oer=o(" (Perceiver model)"),Ver=l(),DT=a("li"),e2e=a("strong"),Xer=o("poolformer"),zer=o(" \u2014 "),Yz=a("a"),Wer=o("PoolFormerForImageClassification"),Qer=o(" (PoolFormer model)"),Her=l(),GT=a("li"),o2e=a("strong"),Uer=o("regnet"),Jer=o(" \u2014 "),Kz=a("a"),Yer=o("RegNetForImageClassification"),Ker=o(" (RegNet model)"),Zer=l(),OT=a("li"),r2e=a("strong"),eor=o("resnet"),oor=o(" \u2014 "),Zz=a("a"),ror=o("ResNetForImageClassification"),tor=o(" (ResNet model)"),aor=l(),VT=a("li"),t2e=a("strong"),nor=o("segformer"),sor=o(" \u2014 "),eW=a("a"),lor=o("SegformerForImageClassification"),ior=o(" (SegFormer model)"),dor=l(),XT=a("li"),a2e=a("strong"),cor=o("swin"),mor=o(" \u2014 "),oW=a("a"),gor=o("SwinForImageClassification"),hor=o(" (Swin Transformer model)"),uor=l(),zT=a("li"),n2e=a("strong"),por=o("van"),_or=o(" \u2014 "),rW=a("a"),bor=o("VanForImageClassification"),vor=o(" (VAN model)"),For=l(),WT=a("li"),s2e=a("strong"),Tor=o("vit"),Mor=o(" \u2014 "),tW=a("a"),Eor=o("ViTForImageClassification"),Cor=o(" (ViT model)"),wor=l(),QT=a("p"),Aor=o("The model is set in evaluation mode by default using "),l2e=a("code"),Lor=o("model.eval()"),yor=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),i2e=a("code"),xor=o("model.train()"),$or=l(),F(HT.$$.fragment),LGe=l(),pd=a("h2"),UT=a("a"),d2e=a("span"),F(U7.$$.fragment),kor=l(),c2e=a("span"),Sor=o("AutoModelForVision2Seq"),yGe=l(),Go=a("div"),F(J7.$$.fragment),Ror=l(),_d=a("p"),Por=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),aW=a("a"),Bor=o("from_pretrained()"),Ior=o(" class method or the "),nW=a("a"),Nor=o("from_config()"),qor=o(` class
method.`),jor=l(),Y7=a("p"),Dor=o("This class cannot be instantiated directly using "),m2e=a("code"),Gor=o("__init__()"),Oor=o(" (throws an error)."),Vor=l(),bt=a("div"),F(K7.$$.fragment),Xor=l(),f2e=a("p"),zor=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Wor=l(),bd=a("p"),Qor=o(`Note:
Loading a model from its configuration file does `),g2e=a("strong"),Hor=o("not"),Uor=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sW=a("a"),Jor=o("from_pretrained()"),Yor=o(" to load the model weights."),Kor=l(),F(JT.$$.fragment),Zor=l(),io=a("div"),F(Z7.$$.fragment),err=l(),h2e=a("p"),orr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),rrr=l(),Xa=a("p"),trr=o("The model class to instantiate is selected based on the "),u2e=a("code"),arr=o("model_type"),nrr=o(` property of the config object (either
passed as an argument or loaded from `),p2e=a("code"),srr=o("pretrained_model_name_or_path"),lrr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_2e=a("code"),irr=o("pretrained_model_name_or_path"),drr=o(":"),crr=l(),b2e=a("ul"),YT=a("li"),v2e=a("strong"),mrr=o("vision-encoder-decoder"),frr=o(" \u2014 "),lW=a("a"),grr=o("VisionEncoderDecoderModel"),hrr=o(" (Vision Encoder decoder model)"),urr=l(),KT=a("p"),prr=o("The model is set in evaluation mode by default using "),F2e=a("code"),_rr=o("model.eval()"),brr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),T2e=a("code"),vrr=o("model.train()"),Frr=l(),F(ZT.$$.fragment),xGe=l(),vd=a("h2"),eM=a("a"),M2e=a("span"),F(e8.$$.fragment),Trr=l(),E2e=a("span"),Mrr=o("AutoModelForVisualQuestionAnswering"),$Ge=l(),Oo=a("div"),F(o8.$$.fragment),Err=l(),Fd=a("p"),Crr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),iW=a("a"),wrr=o("from_pretrained()"),Arr=o(" class method or the "),dW=a("a"),Lrr=o("from_config()"),yrr=o(` class
method.`),xrr=l(),r8=a("p"),$rr=o("This class cannot be instantiated directly using "),C2e=a("code"),krr=o("__init__()"),Srr=o(" (throws an error)."),Rrr=l(),vt=a("div"),F(t8.$$.fragment),Prr=l(),w2e=a("p"),Brr=o("Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),Irr=l(),Td=a("p"),Nrr=o(`Note:
Loading a model from its configuration file does `),A2e=a("strong"),qrr=o("not"),jrr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cW=a("a"),Drr=o("from_pretrained()"),Grr=o(" to load the model weights."),Orr=l(),F(oM.$$.fragment),Vrr=l(),co=a("div"),F(a8.$$.fragment),Xrr=l(),L2e=a("p"),zrr=o("Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),Wrr=l(),za=a("p"),Qrr=o("The model class to instantiate is selected based on the "),y2e=a("code"),Hrr=o("model_type"),Urr=o(` property of the config object (either
passed as an argument or loaded from `),x2e=a("code"),Jrr=o("pretrained_model_name_or_path"),Yrr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$2e=a("code"),Krr=o("pretrained_model_name_or_path"),Zrr=o(":"),etr=l(),k2e=a("ul"),rM=a("li"),S2e=a("strong"),otr=o("vilt"),rtr=o(" \u2014 "),mW=a("a"),ttr=o("ViltForQuestionAnswering"),atr=o(" (ViLT model)"),ntr=l(),tM=a("p"),str=o("The model is set in evaluation mode by default using "),R2e=a("code"),ltr=o("model.eval()"),itr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),P2e=a("code"),dtr=o("model.train()"),ctr=l(),F(aM.$$.fragment),kGe=l(),Md=a("h2"),nM=a("a"),B2e=a("span"),F(n8.$$.fragment),mtr=l(),I2e=a("span"),ftr=o("AutoModelForAudioClassification"),SGe=l(),Vo=a("div"),F(s8.$$.fragment),gtr=l(),Ed=a("p"),htr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),fW=a("a"),utr=o("from_pretrained()"),ptr=o(" class method or the "),gW=a("a"),_tr=o("from_config()"),btr=o(` class
method.`),vtr=l(),l8=a("p"),Ftr=o("This class cannot be instantiated directly using "),N2e=a("code"),Ttr=o("__init__()"),Mtr=o(" (throws an error)."),Etr=l(),Ft=a("div"),F(i8.$$.fragment),Ctr=l(),q2e=a("p"),wtr=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Atr=l(),Cd=a("p"),Ltr=o(`Note:
Loading a model from its configuration file does `),j2e=a("strong"),ytr=o("not"),xtr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hW=a("a"),$tr=o("from_pretrained()"),ktr=o(" to load the model weights."),Str=l(),F(sM.$$.fragment),Rtr=l(),mo=a("div"),F(d8.$$.fragment),Ptr=l(),D2e=a("p"),Btr=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),Itr=l(),Wa=a("p"),Ntr=o("The model class to instantiate is selected based on the "),G2e=a("code"),qtr=o("model_type"),jtr=o(` property of the config object (either
passed as an argument or loaded from `),O2e=a("code"),Dtr=o("pretrained_model_name_or_path"),Gtr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V2e=a("code"),Otr=o("pretrained_model_name_or_path"),Vtr=o(":"),Xtr=l(),Pe=a("ul"),lM=a("li"),X2e=a("strong"),ztr=o("data2vec-audio"),Wtr=o(" \u2014 "),uW=a("a"),Qtr=o("Data2VecAudioForSequenceClassification"),Htr=o(" (Data2VecAudio model)"),Utr=l(),iM=a("li"),z2e=a("strong"),Jtr=o("hubert"),Ytr=o(" \u2014 "),pW=a("a"),Ktr=o("HubertForSequenceClassification"),Ztr=o(" (Hubert model)"),ear=l(),dM=a("li"),W2e=a("strong"),oar=o("sew"),rar=o(" \u2014 "),_W=a("a"),tar=o("SEWForSequenceClassification"),aar=o(" (SEW model)"),nar=l(),cM=a("li"),Q2e=a("strong"),sar=o("sew-d"),lar=o(" \u2014 "),bW=a("a"),iar=o("SEWDForSequenceClassification"),dar=o(" (SEW-D model)"),car=l(),mM=a("li"),H2e=a("strong"),mar=o("unispeech"),far=o(" \u2014 "),vW=a("a"),gar=o("UniSpeechForSequenceClassification"),har=o(" (UniSpeech model)"),uar=l(),fM=a("li"),U2e=a("strong"),par=o("unispeech-sat"),_ar=o(" \u2014 "),FW=a("a"),bar=o("UniSpeechSatForSequenceClassification"),Far=o(" (UniSpeechSat model)"),Tar=l(),gM=a("li"),J2e=a("strong"),Mar=o("wav2vec2"),Ear=o(" \u2014 "),TW=a("a"),Car=o("Wav2Vec2ForSequenceClassification"),war=o(" (Wav2Vec2 model)"),Aar=l(),hM=a("li"),Y2e=a("strong"),Lar=o("wav2vec2-conformer"),yar=o(" \u2014 "),MW=a("a"),xar=o("Wav2Vec2ConformerForSequenceClassification"),$ar=o(" (Wav2Vec2-Conformer model)"),kar=l(),uM=a("li"),K2e=a("strong"),Sar=o("wavlm"),Rar=o(" \u2014 "),EW=a("a"),Par=o("WavLMForSequenceClassification"),Bar=o(" (WavLM model)"),Iar=l(),pM=a("p"),Nar=o("The model is set in evaluation mode by default using "),Z2e=a("code"),qar=o("model.eval()"),jar=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ebe=a("code"),Dar=o("model.train()"),Gar=l(),F(_M.$$.fragment),RGe=l(),wd=a("h2"),bM=a("a"),obe=a("span"),F(c8.$$.fragment),Oar=l(),rbe=a("span"),Var=o("AutoModelForAudioFrameClassification"),PGe=l(),Xo=a("div"),F(m8.$$.fragment),Xar=l(),Ad=a("p"),zar=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),CW=a("a"),War=o("from_pretrained()"),Qar=o(" class method or the "),wW=a("a"),Har=o("from_config()"),Uar=o(` class
method.`),Jar=l(),f8=a("p"),Yar=o("This class cannot be instantiated directly using "),tbe=a("code"),Kar=o("__init__()"),Zar=o(" (throws an error)."),enr=l(),Tt=a("div"),F(g8.$$.fragment),onr=l(),abe=a("p"),rnr=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),tnr=l(),Ld=a("p"),anr=o(`Note:
Loading a model from its configuration file does `),nbe=a("strong"),nnr=o("not"),snr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),AW=a("a"),lnr=o("from_pretrained()"),inr=o(" to load the model weights."),dnr=l(),F(vM.$$.fragment),cnr=l(),fo=a("div"),F(h8.$$.fragment),mnr=l(),sbe=a("p"),fnr=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),gnr=l(),Qa=a("p"),hnr=o("The model class to instantiate is selected based on the "),lbe=a("code"),unr=o("model_type"),pnr=o(` property of the config object (either
passed as an argument or loaded from `),ibe=a("code"),_nr=o("pretrained_model_name_or_path"),bnr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dbe=a("code"),vnr=o("pretrained_model_name_or_path"),Fnr=o(":"),Tnr=l(),et=a("ul"),FM=a("li"),cbe=a("strong"),Mnr=o("data2vec-audio"),Enr=o(" \u2014 "),LW=a("a"),Cnr=o("Data2VecAudioForAudioFrameClassification"),wnr=o(" (Data2VecAudio model)"),Anr=l(),TM=a("li"),mbe=a("strong"),Lnr=o("unispeech-sat"),ynr=o(" \u2014 "),yW=a("a"),xnr=o("UniSpeechSatForAudioFrameClassification"),$nr=o(" (UniSpeechSat model)"),knr=l(),MM=a("li"),fbe=a("strong"),Snr=o("wav2vec2"),Rnr=o(" \u2014 "),xW=a("a"),Pnr=o("Wav2Vec2ForAudioFrameClassification"),Bnr=o(" (Wav2Vec2 model)"),Inr=l(),EM=a("li"),gbe=a("strong"),Nnr=o("wav2vec2-conformer"),qnr=o(" \u2014 "),$W=a("a"),jnr=o("Wav2Vec2ConformerForAudioFrameClassification"),Dnr=o(" (Wav2Vec2-Conformer model)"),Gnr=l(),CM=a("li"),hbe=a("strong"),Onr=o("wavlm"),Vnr=o(" \u2014 "),kW=a("a"),Xnr=o("WavLMForAudioFrameClassification"),znr=o(" (WavLM model)"),Wnr=l(),wM=a("p"),Qnr=o("The model is set in evaluation mode by default using "),ube=a("code"),Hnr=o("model.eval()"),Unr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pbe=a("code"),Jnr=o("model.train()"),Ynr=l(),F(AM.$$.fragment),BGe=l(),yd=a("h2"),LM=a("a"),_be=a("span"),F(u8.$$.fragment),Knr=l(),bbe=a("span"),Znr=o("AutoModelForCTC"),IGe=l(),zo=a("div"),F(p8.$$.fragment),esr=l(),xd=a("p"),osr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),SW=a("a"),rsr=o("from_pretrained()"),tsr=o(" class method or the "),RW=a("a"),asr=o("from_config()"),nsr=o(` class
method.`),ssr=l(),_8=a("p"),lsr=o("This class cannot be instantiated directly using "),vbe=a("code"),isr=o("__init__()"),dsr=o(" (throws an error)."),csr=l(),Mt=a("div"),F(b8.$$.fragment),msr=l(),Fbe=a("p"),fsr=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),gsr=l(),$d=a("p"),hsr=o(`Note:
Loading a model from its configuration file does `),Tbe=a("strong"),usr=o("not"),psr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PW=a("a"),_sr=o("from_pretrained()"),bsr=o(" to load the model weights."),vsr=l(),F(yM.$$.fragment),Fsr=l(),go=a("div"),F(v8.$$.fragment),Tsr=l(),Mbe=a("p"),Msr=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),Esr=l(),Ha=a("p"),Csr=o("The model class to instantiate is selected based on the "),Ebe=a("code"),wsr=o("model_type"),Asr=o(` property of the config object (either
passed as an argument or loaded from `),Cbe=a("code"),Lsr=o("pretrained_model_name_or_path"),ysr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wbe=a("code"),xsr=o("pretrained_model_name_or_path"),$sr=o(":"),ksr=l(),Le=a("ul"),xM=a("li"),Abe=a("strong"),Ssr=o("data2vec-audio"),Rsr=o(" \u2014 "),BW=a("a"),Psr=o("Data2VecAudioForCTC"),Bsr=o(" (Data2VecAudio model)"),Isr=l(),$M=a("li"),Lbe=a("strong"),Nsr=o("hubert"),qsr=o(" \u2014 "),IW=a("a"),jsr=o("HubertForCTC"),Dsr=o(" (Hubert model)"),Gsr=l(),kM=a("li"),ybe=a("strong"),Osr=o("mctct"),Vsr=o(" \u2014 "),NW=a("a"),Xsr=o("MCTCTForCTC"),zsr=o(" (M-CTC-T model)"),Wsr=l(),SM=a("li"),xbe=a("strong"),Qsr=o("sew"),Hsr=o(" \u2014 "),qW=a("a"),Usr=o("SEWForCTC"),Jsr=o(" (SEW model)"),Ysr=l(),RM=a("li"),$be=a("strong"),Ksr=o("sew-d"),Zsr=o(" \u2014 "),jW=a("a"),elr=o("SEWDForCTC"),olr=o(" (SEW-D model)"),rlr=l(),PM=a("li"),kbe=a("strong"),tlr=o("unispeech"),alr=o(" \u2014 "),DW=a("a"),nlr=o("UniSpeechForCTC"),slr=o(" (UniSpeech model)"),llr=l(),BM=a("li"),Sbe=a("strong"),ilr=o("unispeech-sat"),dlr=o(" \u2014 "),GW=a("a"),clr=o("UniSpeechSatForCTC"),mlr=o(" (UniSpeechSat model)"),flr=l(),IM=a("li"),Rbe=a("strong"),glr=o("wav2vec2"),hlr=o(" \u2014 "),OW=a("a"),ulr=o("Wav2Vec2ForCTC"),plr=o(" (Wav2Vec2 model)"),_lr=l(),NM=a("li"),Pbe=a("strong"),blr=o("wav2vec2-conformer"),vlr=o(" \u2014 "),VW=a("a"),Flr=o("Wav2Vec2ConformerForCTC"),Tlr=o(" (Wav2Vec2-Conformer model)"),Mlr=l(),qM=a("li"),Bbe=a("strong"),Elr=o("wavlm"),Clr=o(" \u2014 "),XW=a("a"),wlr=o("WavLMForCTC"),Alr=o(" (WavLM model)"),Llr=l(),jM=a("p"),ylr=o("The model is set in evaluation mode by default using "),Ibe=a("code"),xlr=o("model.eval()"),$lr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nbe=a("code"),klr=o("model.train()"),Slr=l(),F(DM.$$.fragment),NGe=l(),kd=a("h2"),GM=a("a"),qbe=a("span"),F(F8.$$.fragment),Rlr=l(),jbe=a("span"),Plr=o("AutoModelForSpeechSeq2Seq"),qGe=l(),Wo=a("div"),F(T8.$$.fragment),Blr=l(),Sd=a("p"),Ilr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),zW=a("a"),Nlr=o("from_pretrained()"),qlr=o(" class method or the "),WW=a("a"),jlr=o("from_config()"),Dlr=o(` class
method.`),Glr=l(),M8=a("p"),Olr=o("This class cannot be instantiated directly using "),Dbe=a("code"),Vlr=o("__init__()"),Xlr=o(" (throws an error)."),zlr=l(),Et=a("div"),F(E8.$$.fragment),Wlr=l(),Gbe=a("p"),Qlr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Hlr=l(),Rd=a("p"),Ulr=o(`Note:
Loading a model from its configuration file does `),Obe=a("strong"),Jlr=o("not"),Ylr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QW=a("a"),Klr=o("from_pretrained()"),Zlr=o(" to load the model weights."),eir=l(),F(OM.$$.fragment),oir=l(),ho=a("div"),F(C8.$$.fragment),rir=l(),Vbe=a("p"),tir=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),air=l(),Ua=a("p"),nir=o("The model class to instantiate is selected based on the "),Xbe=a("code"),sir=o("model_type"),lir=o(` property of the config object (either
passed as an argument or loaded from `),zbe=a("code"),iir=o("pretrained_model_name_or_path"),dir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wbe=a("code"),cir=o("pretrained_model_name_or_path"),mir=o(":"),fir=l(),w8=a("ul"),VM=a("li"),Qbe=a("strong"),gir=o("speech-encoder-decoder"),hir=o(" \u2014 "),HW=a("a"),uir=o("SpeechEncoderDecoderModel"),pir=o(" (Speech Encoder decoder model)"),_ir=l(),XM=a("li"),Hbe=a("strong"),bir=o("speech_to_text"),vir=o(" \u2014 "),UW=a("a"),Fir=o("Speech2TextForConditionalGeneration"),Tir=o(" (Speech2Text model)"),Mir=l(),zM=a("p"),Eir=o("The model is set in evaluation mode by default using "),Ube=a("code"),Cir=o("model.eval()"),wir=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jbe=a("code"),Air=o("model.train()"),Lir=l(),F(WM.$$.fragment),jGe=l(),Pd=a("h2"),QM=a("a"),Ybe=a("span"),F(A8.$$.fragment),yir=l(),Kbe=a("span"),xir=o("AutoModelForAudioXVector"),DGe=l(),Qo=a("div"),F(L8.$$.fragment),$ir=l(),Bd=a("p"),kir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),JW=a("a"),Sir=o("from_pretrained()"),Rir=o(" class method or the "),YW=a("a"),Pir=o("from_config()"),Bir=o(` class
method.`),Iir=l(),y8=a("p"),Nir=o("This class cannot be instantiated directly using "),Zbe=a("code"),qir=o("__init__()"),jir=o(" (throws an error)."),Dir=l(),Ct=a("div"),F(x8.$$.fragment),Gir=l(),eve=a("p"),Oir=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),Vir=l(),Id=a("p"),Xir=o(`Note:
Loading a model from its configuration file does `),ove=a("strong"),zir=o("not"),Wir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KW=a("a"),Qir=o("from_pretrained()"),Hir=o(" to load the model weights."),Uir=l(),F(HM.$$.fragment),Jir=l(),uo=a("div"),F($8.$$.fragment),Yir=l(),rve=a("p"),Kir=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Zir=l(),Ja=a("p"),edr=o("The model class to instantiate is selected based on the "),tve=a("code"),odr=o("model_type"),rdr=o(` property of the config object (either
passed as an argument or loaded from `),ave=a("code"),tdr=o("pretrained_model_name_or_path"),adr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nve=a("code"),ndr=o("pretrained_model_name_or_path"),sdr=o(":"),ldr=l(),ot=a("ul"),UM=a("li"),sve=a("strong"),idr=o("data2vec-audio"),ddr=o(" \u2014 "),ZW=a("a"),cdr=o("Data2VecAudioForXVector"),mdr=o(" (Data2VecAudio model)"),fdr=l(),JM=a("li"),lve=a("strong"),gdr=o("unispeech-sat"),hdr=o(" \u2014 "),eQ=a("a"),udr=o("UniSpeechSatForXVector"),pdr=o(" (UniSpeechSat model)"),_dr=l(),YM=a("li"),ive=a("strong"),bdr=o("wav2vec2"),vdr=o(" \u2014 "),oQ=a("a"),Fdr=o("Wav2Vec2ForXVector"),Tdr=o(" (Wav2Vec2 model)"),Mdr=l(),KM=a("li"),dve=a("strong"),Edr=o("wav2vec2-conformer"),Cdr=o(" \u2014 "),rQ=a("a"),wdr=o("Wav2Vec2ConformerForXVector"),Adr=o(" (Wav2Vec2-Conformer model)"),Ldr=l(),ZM=a("li"),cve=a("strong"),ydr=o("wavlm"),xdr=o(" \u2014 "),tQ=a("a"),$dr=o("WavLMForXVector"),kdr=o(" (WavLM model)"),Sdr=l(),e4=a("p"),Rdr=o("The model is set in evaluation mode by default using "),mve=a("code"),Pdr=o("model.eval()"),Bdr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fve=a("code"),Idr=o("model.train()"),Ndr=l(),F(o4.$$.fragment),GGe=l(),Nd=a("h2"),r4=a("a"),gve=a("span"),F(k8.$$.fragment),qdr=l(),hve=a("span"),jdr=o("AutoModelForMaskedImageModeling"),OGe=l(),Ho=a("div"),F(S8.$$.fragment),Ddr=l(),qd=a("p"),Gdr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),aQ=a("a"),Odr=o("from_pretrained()"),Vdr=o(" class method or the "),nQ=a("a"),Xdr=o("from_config()"),zdr=o(` class
method.`),Wdr=l(),R8=a("p"),Qdr=o("This class cannot be instantiated directly using "),uve=a("code"),Hdr=o("__init__()"),Udr=o(" (throws an error)."),Jdr=l(),wt=a("div"),F(P8.$$.fragment),Ydr=l(),pve=a("p"),Kdr=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Zdr=l(),jd=a("p"),ecr=o(`Note:
Loading a model from its configuration file does `),_ve=a("strong"),ocr=o("not"),rcr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sQ=a("a"),tcr=o("from_pretrained()"),acr=o(" to load the model weights."),ncr=l(),F(t4.$$.fragment),scr=l(),po=a("div"),F(B8.$$.fragment),lcr=l(),bve=a("p"),icr=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),dcr=l(),Ya=a("p"),ccr=o("The model class to instantiate is selected based on the "),vve=a("code"),mcr=o("model_type"),fcr=o(` property of the config object (either
passed as an argument or loaded from `),Fve=a("code"),gcr=o("pretrained_model_name_or_path"),hcr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tve=a("code"),ucr=o("pretrained_model_name_or_path"),pcr=o(":"),_cr=l(),Dd=a("ul"),a4=a("li"),Mve=a("strong"),bcr=o("deit"),vcr=o(" \u2014 "),lQ=a("a"),Fcr=o("DeiTForMaskedImageModeling"),Tcr=o(" (DeiT model)"),Mcr=l(),n4=a("li"),Eve=a("strong"),Ecr=o("swin"),Ccr=o(" \u2014 "),iQ=a("a"),wcr=o("SwinForMaskedImageModeling"),Acr=o(" (Swin Transformer model)"),Lcr=l(),s4=a("li"),Cve=a("strong"),ycr=o("vit"),xcr=o(" \u2014 "),dQ=a("a"),$cr=o("ViTForMaskedImageModeling"),kcr=o(" (ViT model)"),Scr=l(),l4=a("p"),Rcr=o("The model is set in evaluation mode by default using "),wve=a("code"),Pcr=o("model.eval()"),Bcr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ave=a("code"),Icr=o("model.train()"),Ncr=l(),F(i4.$$.fragment),VGe=l(),Gd=a("h2"),d4=a("a"),Lve=a("span"),F(I8.$$.fragment),qcr=l(),yve=a("span"),jcr=o("AutoModelForObjectDetection"),XGe=l(),Uo=a("div"),F(N8.$$.fragment),Dcr=l(),Od=a("p"),Gcr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),cQ=a("a"),Ocr=o("from_pretrained()"),Vcr=o(" class method or the "),mQ=a("a"),Xcr=o("from_config()"),zcr=o(` class
method.`),Wcr=l(),q8=a("p"),Qcr=o("This class cannot be instantiated directly using "),xve=a("code"),Hcr=o("__init__()"),Ucr=o(" (throws an error)."),Jcr=l(),At=a("div"),F(j8.$$.fragment),Ycr=l(),$ve=a("p"),Kcr=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Zcr=l(),Vd=a("p"),emr=o(`Note:
Loading a model from its configuration file does `),kve=a("strong"),omr=o("not"),rmr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fQ=a("a"),tmr=o("from_pretrained()"),amr=o(" to load the model weights."),nmr=l(),F(c4.$$.fragment),smr=l(),_o=a("div"),F(D8.$$.fragment),lmr=l(),Sve=a("p"),imr=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),dmr=l(),Ka=a("p"),cmr=o("The model class to instantiate is selected based on the "),Rve=a("code"),mmr=o("model_type"),fmr=o(` property of the config object (either
passed as an argument or loaded from `),Pve=a("code"),gmr=o("pretrained_model_name_or_path"),hmr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bve=a("code"),umr=o("pretrained_model_name_or_path"),pmr=o(":"),_mr=l(),G8=a("ul"),m4=a("li"),Ive=a("strong"),bmr=o("detr"),vmr=o(" \u2014 "),gQ=a("a"),Fmr=o("DetrForObjectDetection"),Tmr=o(" (DETR model)"),Mmr=l(),f4=a("li"),Nve=a("strong"),Emr=o("yolos"),Cmr=o(" \u2014 "),hQ=a("a"),wmr=o("YolosForObjectDetection"),Amr=o(" (YOLOS model)"),Lmr=l(),g4=a("p"),ymr=o("The model is set in evaluation mode by default using "),qve=a("code"),xmr=o("model.eval()"),$mr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jve=a("code"),kmr=o("model.train()"),Smr=l(),F(h4.$$.fragment),zGe=l(),Xd=a("h2"),u4=a("a"),Dve=a("span"),F(O8.$$.fragment),Rmr=l(),Gve=a("span"),Pmr=o("AutoModelForImageSegmentation"),WGe=l(),Jo=a("div"),F(V8.$$.fragment),Bmr=l(),zd=a("p"),Imr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),uQ=a("a"),Nmr=o("from_pretrained()"),qmr=o(" class method or the "),pQ=a("a"),jmr=o("from_config()"),Dmr=o(` class
method.`),Gmr=l(),X8=a("p"),Omr=o("This class cannot be instantiated directly using "),Ove=a("code"),Vmr=o("__init__()"),Xmr=o(" (throws an error)."),zmr=l(),Lt=a("div"),F(z8.$$.fragment),Wmr=l(),Vve=a("p"),Qmr=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Hmr=l(),Wd=a("p"),Umr=o(`Note:
Loading a model from its configuration file does `),Xve=a("strong"),Jmr=o("not"),Ymr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_Q=a("a"),Kmr=o("from_pretrained()"),Zmr=o(" to load the model weights."),efr=l(),F(p4.$$.fragment),ofr=l(),bo=a("div"),F(W8.$$.fragment),rfr=l(),zve=a("p"),tfr=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),afr=l(),Za=a("p"),nfr=o("The model class to instantiate is selected based on the "),Wve=a("code"),sfr=o("model_type"),lfr=o(` property of the config object (either
passed as an argument or loaded from `),Qve=a("code"),ifr=o("pretrained_model_name_or_path"),dfr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hve=a("code"),cfr=o("pretrained_model_name_or_path"),mfr=o(":"),ffr=l(),Uve=a("ul"),_4=a("li"),Jve=a("strong"),gfr=o("detr"),hfr=o(" \u2014 "),bQ=a("a"),ufr=o("DetrForSegmentation"),pfr=o(" (DETR model)"),_fr=l(),b4=a("p"),bfr=o("The model is set in evaluation mode by default using "),Yve=a("code"),vfr=o("model.eval()"),Ffr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Kve=a("code"),Tfr=o("model.train()"),Mfr=l(),F(v4.$$.fragment),QGe=l(),Qd=a("h2"),F4=a("a"),Zve=a("span"),F(Q8.$$.fragment),Efr=l(),eFe=a("span"),Cfr=o("AutoModelForSemanticSegmentation"),HGe=l(),Yo=a("div"),F(H8.$$.fragment),wfr=l(),Hd=a("p"),Afr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),vQ=a("a"),Lfr=o("from_pretrained()"),yfr=o(" class method or the "),FQ=a("a"),xfr=o("from_config()"),$fr=o(` class
method.`),kfr=l(),U8=a("p"),Sfr=o("This class cannot be instantiated directly using "),oFe=a("code"),Rfr=o("__init__()"),Pfr=o(" (throws an error)."),Bfr=l(),yt=a("div"),F(J8.$$.fragment),Ifr=l(),rFe=a("p"),Nfr=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),qfr=l(),Ud=a("p"),jfr=o(`Note:
Loading a model from its configuration file does `),tFe=a("strong"),Dfr=o("not"),Gfr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TQ=a("a"),Ofr=o("from_pretrained()"),Vfr=o(" to load the model weights."),Xfr=l(),F(T4.$$.fragment),zfr=l(),vo=a("div"),F(Y8.$$.fragment),Wfr=l(),aFe=a("p"),Qfr=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Hfr=l(),en=a("p"),Ufr=o("The model class to instantiate is selected based on the "),nFe=a("code"),Jfr=o("model_type"),Yfr=o(` property of the config object (either
passed as an argument or loaded from `),sFe=a("code"),Kfr=o("pretrained_model_name_or_path"),Zfr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lFe=a("code"),egr=o("pretrained_model_name_or_path"),ogr=o(":"),rgr=l(),on=a("ul"),M4=a("li"),iFe=a("strong"),tgr=o("beit"),agr=o(" \u2014 "),MQ=a("a"),ngr=o("BeitForSemanticSegmentation"),sgr=o(" (BEiT model)"),lgr=l(),E4=a("li"),dFe=a("strong"),igr=o("data2vec-vision"),dgr=o(" \u2014 "),EQ=a("a"),cgr=o("Data2VecVisionForSemanticSegmentation"),mgr=o(" (Data2VecVision model)"),fgr=l(),C4=a("li"),cFe=a("strong"),ggr=o("dpt"),hgr=o(" \u2014 "),CQ=a("a"),ugr=o("DPTForSemanticSegmentation"),pgr=o(" (DPT model)"),_gr=l(),w4=a("li"),mFe=a("strong"),bgr=o("segformer"),vgr=o(" \u2014 "),wQ=a("a"),Fgr=o("SegformerForSemanticSegmentation"),Tgr=o(" (SegFormer model)"),Mgr=l(),A4=a("p"),Egr=o("The model is set in evaluation mode by default using "),fFe=a("code"),Cgr=o("model.eval()"),wgr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gFe=a("code"),Agr=o("model.train()"),Lgr=l(),F(L4.$$.fragment),UGe=l(),Jd=a("h2"),y4=a("a"),hFe=a("span"),F(K8.$$.fragment),ygr=l(),uFe=a("span"),xgr=o("AutoModelForInstanceSegmentation"),JGe=l(),Ko=a("div"),F(Z8.$$.fragment),$gr=l(),Yd=a("p"),kgr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),AQ=a("a"),Sgr=o("from_pretrained()"),Rgr=o(" class method or the "),LQ=a("a"),Pgr=o("from_config()"),Bgr=o(` class
method.`),Igr=l(),e9=a("p"),Ngr=o("This class cannot be instantiated directly using "),pFe=a("code"),qgr=o("__init__()"),jgr=o(" (throws an error)."),Dgr=l(),xt=a("div"),F(o9.$$.fragment),Ggr=l(),_Fe=a("p"),Ogr=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Vgr=l(),Kd=a("p"),Xgr=o(`Note:
Loading a model from its configuration file does `),bFe=a("strong"),zgr=o("not"),Wgr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yQ=a("a"),Qgr=o("from_pretrained()"),Hgr=o(" to load the model weights."),Ugr=l(),F(x4.$$.fragment),Jgr=l(),Fo=a("div"),F(r9.$$.fragment),Ygr=l(),vFe=a("p"),Kgr=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),Zgr=l(),rn=a("p"),ehr=o("The model class to instantiate is selected based on the "),FFe=a("code"),ohr=o("model_type"),rhr=o(` property of the config object (either
passed as an argument or loaded from `),TFe=a("code"),thr=o("pretrained_model_name_or_path"),ahr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),MFe=a("code"),nhr=o("pretrained_model_name_or_path"),shr=o(":"),lhr=l(),EFe=a("ul"),$4=a("li"),CFe=a("strong"),ihr=o("maskformer"),dhr=o(" \u2014 "),xQ=a("a"),chr=o("MaskFormerForInstanceSegmentation"),mhr=o(" (MaskFormer model)"),fhr=l(),k4=a("p"),ghr=o("The model is set in evaluation mode by default using "),wFe=a("code"),hhr=o("model.eval()"),uhr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),AFe=a("code"),phr=o("model.train()"),_hr=l(),F(S4.$$.fragment),YGe=l(),Zd=a("h2"),R4=a("a"),LFe=a("span"),F(t9.$$.fragment),bhr=l(),yFe=a("span"),vhr=o("TFAutoModel"),KGe=l(),Zo=a("div"),F(a9.$$.fragment),Fhr=l(),ec=a("p"),Thr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),$Q=a("a"),Mhr=o("from_pretrained()"),Ehr=o(" class method or the "),kQ=a("a"),Chr=o("from_config()"),whr=o(` class
method.`),Ahr=l(),n9=a("p"),Lhr=o("This class cannot be instantiated directly using "),xFe=a("code"),yhr=o("__init__()"),xhr=o(" (throws an error)."),$hr=l(),$t=a("div"),F(s9.$$.fragment),khr=l(),$Fe=a("p"),Shr=o("Instantiates one of the base model classes of the library from a configuration."),Rhr=l(),oc=a("p"),Phr=o(`Note:
Loading a model from its configuration file does `),kFe=a("strong"),Bhr=o("not"),Ihr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SQ=a("a"),Nhr=o("from_pretrained()"),qhr=o(" to load the model weights."),jhr=l(),F(P4.$$.fragment),Dhr=l(),Lr=a("div"),F(l9.$$.fragment),Ghr=l(),SFe=a("p"),Ohr=o("Instantiate one of the base model classes of the library from a pretrained model."),Vhr=l(),tn=a("p"),Xhr=o("The model class to instantiate is selected based on the "),RFe=a("code"),zhr=o("model_type"),Whr=o(` property of the config object (either
passed as an argument or loaded from `),PFe=a("code"),Qhr=o("pretrained_model_name_or_path"),Hhr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),BFe=a("code"),Uhr=o("pretrained_model_name_or_path"),Jhr=o(":"),Yhr=l(),q=a("ul"),B4=a("li"),IFe=a("strong"),Khr=o("albert"),Zhr=o(" \u2014 "),RQ=a("a"),eur=o("TFAlbertModel"),our=o(" (ALBERT model)"),rur=l(),I4=a("li"),NFe=a("strong"),tur=o("bart"),aur=o(" \u2014 "),PQ=a("a"),nur=o("TFBartModel"),sur=o(" (BART model)"),lur=l(),N4=a("li"),qFe=a("strong"),iur=o("bert"),dur=o(" \u2014 "),BQ=a("a"),cur=o("TFBertModel"),mur=o(" (BERT model)"),fur=l(),q4=a("li"),jFe=a("strong"),gur=o("blenderbot"),hur=o(" \u2014 "),IQ=a("a"),uur=o("TFBlenderbotModel"),pur=o(" (Blenderbot model)"),_ur=l(),j4=a("li"),DFe=a("strong"),bur=o("blenderbot-small"),vur=o(" \u2014 "),NQ=a("a"),Fur=o("TFBlenderbotSmallModel"),Tur=o(" (BlenderbotSmall model)"),Mur=l(),D4=a("li"),GFe=a("strong"),Eur=o("camembert"),Cur=o(" \u2014 "),qQ=a("a"),wur=o("TFCamembertModel"),Aur=o(" (CamemBERT model)"),Lur=l(),G4=a("li"),OFe=a("strong"),yur=o("clip"),xur=o(" \u2014 "),jQ=a("a"),$ur=o("TFCLIPModel"),kur=o(" (CLIP model)"),Sur=l(),O4=a("li"),VFe=a("strong"),Rur=o("convbert"),Pur=o(" \u2014 "),DQ=a("a"),Bur=o("TFConvBertModel"),Iur=o(" (ConvBERT model)"),Nur=l(),V4=a("li"),XFe=a("strong"),qur=o("convnext"),jur=o(" \u2014 "),GQ=a("a"),Dur=o("TFConvNextModel"),Gur=o(" (ConvNeXT model)"),Our=l(),X4=a("li"),zFe=a("strong"),Vur=o("ctrl"),Xur=o(" \u2014 "),OQ=a("a"),zur=o("TFCTRLModel"),Wur=o(" (CTRL model)"),Qur=l(),z4=a("li"),WFe=a("strong"),Hur=o("data2vec-vision"),Uur=o(" \u2014 "),VQ=a("a"),Jur=o("TFData2VecVisionModel"),Yur=o(" (Data2VecVision model)"),Kur=l(),W4=a("li"),QFe=a("strong"),Zur=o("deberta"),epr=o(" \u2014 "),XQ=a("a"),opr=o("TFDebertaModel"),rpr=o(" (DeBERTa model)"),tpr=l(),Q4=a("li"),HFe=a("strong"),apr=o("deberta-v2"),npr=o(" \u2014 "),zQ=a("a"),spr=o("TFDebertaV2Model"),lpr=o(" (DeBERTa-v2 model)"),ipr=l(),H4=a("li"),UFe=a("strong"),dpr=o("distilbert"),cpr=o(" \u2014 "),WQ=a("a"),mpr=o("TFDistilBertModel"),fpr=o(" (DistilBERT model)"),gpr=l(),U4=a("li"),JFe=a("strong"),hpr=o("dpr"),upr=o(" \u2014 "),QQ=a("a"),ppr=o("TFDPRQuestionEncoder"),_pr=o(" (DPR model)"),bpr=l(),J4=a("li"),YFe=a("strong"),vpr=o("electra"),Fpr=o(" \u2014 "),HQ=a("a"),Tpr=o("TFElectraModel"),Mpr=o(" (ELECTRA model)"),Epr=l(),Y4=a("li"),KFe=a("strong"),Cpr=o("flaubert"),wpr=o(" \u2014 "),UQ=a("a"),Apr=o("TFFlaubertModel"),Lpr=o(" (FlauBERT model)"),ypr=l(),Xs=a("li"),ZFe=a("strong"),xpr=o("funnel"),$pr=o(" \u2014 "),JQ=a("a"),kpr=o("TFFunnelModel"),Spr=o(" or "),YQ=a("a"),Rpr=o("TFFunnelBaseModel"),Ppr=o(" (Funnel Transformer model)"),Bpr=l(),K4=a("li"),e1e=a("strong"),Ipr=o("gpt2"),Npr=o(" \u2014 "),KQ=a("a"),qpr=o("TFGPT2Model"),jpr=o(" (OpenAI GPT-2 model)"),Dpr=l(),Z4=a("li"),o1e=a("strong"),Gpr=o("gptj"),Opr=o(" \u2014 "),ZQ=a("a"),Vpr=o("TFGPTJModel"),Xpr=o(" (GPT-J model)"),zpr=l(),eE=a("li"),r1e=a("strong"),Wpr=o("hubert"),Qpr=o(" \u2014 "),eH=a("a"),Hpr=o("TFHubertModel"),Upr=o(" (Hubert model)"),Jpr=l(),oE=a("li"),t1e=a("strong"),Ypr=o("layoutlm"),Kpr=o(" \u2014 "),oH=a("a"),Zpr=o("TFLayoutLMModel"),e_r=o(" (LayoutLM model)"),o_r=l(),rE=a("li"),a1e=a("strong"),r_r=o("led"),t_r=o(" \u2014 "),rH=a("a"),a_r=o("TFLEDModel"),n_r=o(" (LED model)"),s_r=l(),tE=a("li"),n1e=a("strong"),l_r=o("longformer"),i_r=o(" \u2014 "),tH=a("a"),d_r=o("TFLongformerModel"),c_r=o(" (Longformer model)"),m_r=l(),aE=a("li"),s1e=a("strong"),f_r=o("lxmert"),g_r=o(" \u2014 "),aH=a("a"),h_r=o("TFLxmertModel"),u_r=o(" (LXMERT model)"),p_r=l(),nE=a("li"),l1e=a("strong"),__r=o("marian"),b_r=o(" \u2014 "),nH=a("a"),v_r=o("TFMarianModel"),F_r=o(" (Marian model)"),T_r=l(),sE=a("li"),i1e=a("strong"),M_r=o("mbart"),E_r=o(" \u2014 "),sH=a("a"),C_r=o("TFMBartModel"),w_r=o(" (mBART model)"),A_r=l(),lE=a("li"),d1e=a("strong"),L_r=o("mobilebert"),y_r=o(" \u2014 "),lH=a("a"),x_r=o("TFMobileBertModel"),$_r=o(" (MobileBERT model)"),k_r=l(),iE=a("li"),c1e=a("strong"),S_r=o("mpnet"),R_r=o(" \u2014 "),iH=a("a"),P_r=o("TFMPNetModel"),B_r=o(" (MPNet model)"),I_r=l(),dE=a("li"),m1e=a("strong"),N_r=o("mt5"),q_r=o(" \u2014 "),dH=a("a"),j_r=o("TFMT5Model"),D_r=o(" (MT5 model)"),G_r=l(),cE=a("li"),f1e=a("strong"),O_r=o("openai-gpt"),V_r=o(" \u2014 "),cH=a("a"),X_r=o("TFOpenAIGPTModel"),z_r=o(" (OpenAI GPT model)"),W_r=l(),mE=a("li"),g1e=a("strong"),Q_r=o("opt"),H_r=o(" \u2014 "),mH=a("a"),U_r=o("TFOPTModel"),J_r=o(" (OPT model)"),Y_r=l(),fE=a("li"),h1e=a("strong"),K_r=o("pegasus"),Z_r=o(" \u2014 "),fH=a("a"),e2r=o("TFPegasusModel"),o2r=o(" (Pegasus model)"),r2r=l(),gE=a("li"),u1e=a("strong"),t2r=o("rembert"),a2r=o(" \u2014 "),gH=a("a"),n2r=o("TFRemBertModel"),s2r=o(" (RemBERT model)"),l2r=l(),hE=a("li"),p1e=a("strong"),i2r=o("roberta"),d2r=o(" \u2014 "),hH=a("a"),c2r=o("TFRobertaModel"),m2r=o(" (RoBERTa model)"),f2r=l(),uE=a("li"),_1e=a("strong"),g2r=o("roformer"),h2r=o(" \u2014 "),uH=a("a"),u2r=o("TFRoFormerModel"),p2r=o(" (RoFormer model)"),_2r=l(),pE=a("li"),b1e=a("strong"),b2r=o("speech_to_text"),v2r=o(" \u2014 "),pH=a("a"),F2r=o("TFSpeech2TextModel"),T2r=o(" (Speech2Text model)"),M2r=l(),_E=a("li"),v1e=a("strong"),E2r=o("swin"),C2r=o(" \u2014 "),_H=a("a"),w2r=o("TFSwinModel"),A2r=o(" (Swin Transformer model)"),L2r=l(),bE=a("li"),F1e=a("strong"),y2r=o("t5"),x2r=o(" \u2014 "),bH=a("a"),$2r=o("TFT5Model"),k2r=o(" (T5 model)"),S2r=l(),vE=a("li"),T1e=a("strong"),R2r=o("tapas"),P2r=o(" \u2014 "),vH=a("a"),B2r=o("TFTapasModel"),I2r=o(" (TAPAS model)"),N2r=l(),FE=a("li"),M1e=a("strong"),q2r=o("transfo-xl"),j2r=o(" \u2014 "),FH=a("a"),D2r=o("TFTransfoXLModel"),G2r=o(" (Transformer-XL model)"),O2r=l(),TE=a("li"),E1e=a("strong"),V2r=o("vit"),X2r=o(" \u2014 "),TH=a("a"),z2r=o("TFViTModel"),W2r=o(" (ViT model)"),Q2r=l(),ME=a("li"),C1e=a("strong"),H2r=o("vit_mae"),U2r=o(" \u2014 "),MH=a("a"),J2r=o("TFViTMAEModel"),Y2r=o(" (ViTMAE model)"),K2r=l(),EE=a("li"),w1e=a("strong"),Z2r=o("wav2vec2"),ebr=o(" \u2014 "),EH=a("a"),obr=o("TFWav2Vec2Model"),rbr=o(" (Wav2Vec2 model)"),tbr=l(),CE=a("li"),A1e=a("strong"),abr=o("xlm"),nbr=o(" \u2014 "),CH=a("a"),sbr=o("TFXLMModel"),lbr=o(" (XLM model)"),ibr=l(),wE=a("li"),L1e=a("strong"),dbr=o("xlm-roberta"),cbr=o(" \u2014 "),wH=a("a"),mbr=o("TFXLMRobertaModel"),fbr=o(" (XLM-RoBERTa model)"),gbr=l(),AE=a("li"),y1e=a("strong"),hbr=o("xlnet"),ubr=o(" \u2014 "),AH=a("a"),pbr=o("TFXLNetModel"),_br=o(" (XLNet model)"),bbr=l(),F(LE.$$.fragment),ZGe=l(),rc=a("h2"),yE=a("a"),x1e=a("span"),F(i9.$$.fragment),vbr=l(),$1e=a("span"),Fbr=o("TFAutoModelForPreTraining"),eOe=l(),er=a("div"),F(d9.$$.fragment),Tbr=l(),tc=a("p"),Mbr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),LH=a("a"),Ebr=o("from_pretrained()"),Cbr=o(" class method or the "),yH=a("a"),wbr=o("from_config()"),Abr=o(` class
method.`),Lbr=l(),c9=a("p"),ybr=o("This class cannot be instantiated directly using "),k1e=a("code"),xbr=o("__init__()"),$br=o(" (throws an error)."),kbr=l(),kt=a("div"),F(m9.$$.fragment),Sbr=l(),S1e=a("p"),Rbr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Pbr=l(),ac=a("p"),Bbr=o(`Note:
Loading a model from its configuration file does `),R1e=a("strong"),Ibr=o("not"),Nbr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xH=a("a"),qbr=o("from_pretrained()"),jbr=o(" to load the model weights."),Dbr=l(),F(xE.$$.fragment),Gbr=l(),yr=a("div"),F(f9.$$.fragment),Obr=l(),P1e=a("p"),Vbr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Xbr=l(),an=a("p"),zbr=o("The model class to instantiate is selected based on the "),B1e=a("code"),Wbr=o("model_type"),Qbr=o(` property of the config object (either
passed as an argument or loaded from `),I1e=a("code"),Hbr=o("pretrained_model_name_or_path"),Ubr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N1e=a("code"),Jbr=o("pretrained_model_name_or_path"),Ybr=o(":"),Kbr=l(),se=a("ul"),$E=a("li"),q1e=a("strong"),Zbr=o("albert"),evr=o(" \u2014 "),$H=a("a"),ovr=o("TFAlbertForPreTraining"),rvr=o(" (ALBERT model)"),tvr=l(),kE=a("li"),j1e=a("strong"),avr=o("bart"),nvr=o(" \u2014 "),kH=a("a"),svr=o("TFBartForConditionalGeneration"),lvr=o(" (BART model)"),ivr=l(),SE=a("li"),D1e=a("strong"),dvr=o("bert"),cvr=o(" \u2014 "),SH=a("a"),mvr=o("TFBertForPreTraining"),fvr=o(" (BERT model)"),gvr=l(),RE=a("li"),G1e=a("strong"),hvr=o("camembert"),uvr=o(" \u2014 "),RH=a("a"),pvr=o("TFCamembertForMaskedLM"),_vr=o(" (CamemBERT model)"),bvr=l(),PE=a("li"),O1e=a("strong"),vvr=o("ctrl"),Fvr=o(" \u2014 "),PH=a("a"),Tvr=o("TFCTRLLMHeadModel"),Mvr=o(" (CTRL model)"),Evr=l(),BE=a("li"),V1e=a("strong"),Cvr=o("distilbert"),wvr=o(" \u2014 "),BH=a("a"),Avr=o("TFDistilBertForMaskedLM"),Lvr=o(" (DistilBERT model)"),yvr=l(),IE=a("li"),X1e=a("strong"),xvr=o("electra"),$vr=o(" \u2014 "),IH=a("a"),kvr=o("TFElectraForPreTraining"),Svr=o(" (ELECTRA model)"),Rvr=l(),NE=a("li"),z1e=a("strong"),Pvr=o("flaubert"),Bvr=o(" \u2014 "),NH=a("a"),Ivr=o("TFFlaubertWithLMHeadModel"),Nvr=o(" (FlauBERT model)"),qvr=l(),qE=a("li"),W1e=a("strong"),jvr=o("funnel"),Dvr=o(" \u2014 "),qH=a("a"),Gvr=o("TFFunnelForPreTraining"),Ovr=o(" (Funnel Transformer model)"),Vvr=l(),jE=a("li"),Q1e=a("strong"),Xvr=o("gpt2"),zvr=o(" \u2014 "),jH=a("a"),Wvr=o("TFGPT2LMHeadModel"),Qvr=o(" (OpenAI GPT-2 model)"),Hvr=l(),DE=a("li"),H1e=a("strong"),Uvr=o("layoutlm"),Jvr=o(" \u2014 "),DH=a("a"),Yvr=o("TFLayoutLMForMaskedLM"),Kvr=o(" (LayoutLM model)"),Zvr=l(),GE=a("li"),U1e=a("strong"),eFr=o("lxmert"),oFr=o(" \u2014 "),GH=a("a"),rFr=o("TFLxmertForPreTraining"),tFr=o(" (LXMERT model)"),aFr=l(),OE=a("li"),J1e=a("strong"),nFr=o("mobilebert"),sFr=o(" \u2014 "),OH=a("a"),lFr=o("TFMobileBertForPreTraining"),iFr=o(" (MobileBERT model)"),dFr=l(),VE=a("li"),Y1e=a("strong"),cFr=o("mpnet"),mFr=o(" \u2014 "),VH=a("a"),fFr=o("TFMPNetForMaskedLM"),gFr=o(" (MPNet model)"),hFr=l(),XE=a("li"),K1e=a("strong"),uFr=o("openai-gpt"),pFr=o(" \u2014 "),XH=a("a"),_Fr=o("TFOpenAIGPTLMHeadModel"),bFr=o(" (OpenAI GPT model)"),vFr=l(),zE=a("li"),Z1e=a("strong"),FFr=o("roberta"),TFr=o(" \u2014 "),zH=a("a"),MFr=o("TFRobertaForMaskedLM"),EFr=o(" (RoBERTa model)"),CFr=l(),WE=a("li"),eTe=a("strong"),wFr=o("t5"),AFr=o(" \u2014 "),WH=a("a"),LFr=o("TFT5ForConditionalGeneration"),yFr=o(" (T5 model)"),xFr=l(),QE=a("li"),oTe=a("strong"),$Fr=o("tapas"),kFr=o(" \u2014 "),QH=a("a"),SFr=o("TFTapasForMaskedLM"),RFr=o(" (TAPAS model)"),PFr=l(),HE=a("li"),rTe=a("strong"),BFr=o("transfo-xl"),IFr=o(" \u2014 "),HH=a("a"),NFr=o("TFTransfoXLLMHeadModel"),qFr=o(" (Transformer-XL model)"),jFr=l(),UE=a("li"),tTe=a("strong"),DFr=o("vit_mae"),GFr=o(" \u2014 "),UH=a("a"),OFr=o("TFViTMAEForPreTraining"),VFr=o(" (ViTMAE model)"),XFr=l(),JE=a("li"),aTe=a("strong"),zFr=o("xlm"),WFr=o(" \u2014 "),JH=a("a"),QFr=o("TFXLMWithLMHeadModel"),HFr=o(" (XLM model)"),UFr=l(),YE=a("li"),nTe=a("strong"),JFr=o("xlm-roberta"),YFr=o(" \u2014 "),YH=a("a"),KFr=o("TFXLMRobertaForMaskedLM"),ZFr=o(" (XLM-RoBERTa model)"),e1r=l(),KE=a("li"),sTe=a("strong"),o1r=o("xlnet"),r1r=o(" \u2014 "),KH=a("a"),t1r=o("TFXLNetLMHeadModel"),a1r=o(" (XLNet model)"),n1r=l(),F(ZE.$$.fragment),oOe=l(),nc=a("h2"),eC=a("a"),lTe=a("span"),F(g9.$$.fragment),s1r=l(),iTe=a("span"),l1r=o("TFAutoModelForCausalLM"),rOe=l(),or=a("div"),F(h9.$$.fragment),i1r=l(),sc=a("p"),d1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),ZH=a("a"),c1r=o("from_pretrained()"),m1r=o(" class method or the "),eU=a("a"),f1r=o("from_config()"),g1r=o(` class
method.`),h1r=l(),u9=a("p"),u1r=o("This class cannot be instantiated directly using "),dTe=a("code"),p1r=o("__init__()"),_1r=o(" (throws an error)."),b1r=l(),St=a("div"),F(p9.$$.fragment),v1r=l(),cTe=a("p"),F1r=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),T1r=l(),lc=a("p"),M1r=o(`Note:
Loading a model from its configuration file does `),mTe=a("strong"),E1r=o("not"),C1r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oU=a("a"),w1r=o("from_pretrained()"),A1r=o(" to load the model weights."),L1r=l(),F(oC.$$.fragment),y1r=l(),xr=a("div"),F(_9.$$.fragment),x1r=l(),fTe=a("p"),$1r=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),k1r=l(),nn=a("p"),S1r=o("The model class to instantiate is selected based on the "),gTe=a("code"),R1r=o("model_type"),P1r=o(` property of the config object (either
passed as an argument or loaded from `),hTe=a("code"),B1r=o("pretrained_model_name_or_path"),I1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uTe=a("code"),N1r=o("pretrained_model_name_or_path"),q1r=o(":"),j1r=l(),Me=a("ul"),rC=a("li"),pTe=a("strong"),D1r=o("bert"),G1r=o(" \u2014 "),rU=a("a"),O1r=o("TFBertLMHeadModel"),V1r=o(" (BERT model)"),X1r=l(),tC=a("li"),_Te=a("strong"),z1r=o("camembert"),W1r=o(" \u2014 "),tU=a("a"),Q1r=o("TFCamembertForCausalLM"),H1r=o(" (CamemBERT model)"),U1r=l(),aC=a("li"),bTe=a("strong"),J1r=o("ctrl"),Y1r=o(" \u2014 "),aU=a("a"),K1r=o("TFCTRLLMHeadModel"),Z1r=o(" (CTRL model)"),eTr=l(),nC=a("li"),vTe=a("strong"),oTr=o("gpt2"),rTr=o(" \u2014 "),nU=a("a"),tTr=o("TFGPT2LMHeadModel"),aTr=o(" (OpenAI GPT-2 model)"),nTr=l(),sC=a("li"),FTe=a("strong"),sTr=o("gptj"),lTr=o(" \u2014 "),sU=a("a"),iTr=o("TFGPTJForCausalLM"),dTr=o(" (GPT-J model)"),cTr=l(),lC=a("li"),TTe=a("strong"),mTr=o("openai-gpt"),fTr=o(" \u2014 "),lU=a("a"),gTr=o("TFOpenAIGPTLMHeadModel"),hTr=o(" (OpenAI GPT model)"),uTr=l(),iC=a("li"),MTe=a("strong"),pTr=o("opt"),_Tr=o(" \u2014 "),iU=a("a"),bTr=o("TFOPTForCausalLM"),vTr=o(" (OPT model)"),FTr=l(),dC=a("li"),ETe=a("strong"),TTr=o("rembert"),MTr=o(" \u2014 "),dU=a("a"),ETr=o("TFRemBertForCausalLM"),CTr=o(" (RemBERT model)"),wTr=l(),cC=a("li"),CTe=a("strong"),ATr=o("roberta"),LTr=o(" \u2014 "),cU=a("a"),yTr=o("TFRobertaForCausalLM"),xTr=o(" (RoBERTa model)"),$Tr=l(),mC=a("li"),wTe=a("strong"),kTr=o("roformer"),STr=o(" \u2014 "),mU=a("a"),RTr=o("TFRoFormerForCausalLM"),PTr=o(" (RoFormer model)"),BTr=l(),fC=a("li"),ATe=a("strong"),ITr=o("transfo-xl"),NTr=o(" \u2014 "),fU=a("a"),qTr=o("TFTransfoXLLMHeadModel"),jTr=o(" (Transformer-XL model)"),DTr=l(),gC=a("li"),LTe=a("strong"),GTr=o("xlm"),OTr=o(" \u2014 "),gU=a("a"),VTr=o("TFXLMWithLMHeadModel"),XTr=o(" (XLM model)"),zTr=l(),hC=a("li"),yTe=a("strong"),WTr=o("xlnet"),QTr=o(" \u2014 "),hU=a("a"),HTr=o("TFXLNetLMHeadModel"),UTr=o(" (XLNet model)"),JTr=l(),F(uC.$$.fragment),tOe=l(),ic=a("h2"),pC=a("a"),xTe=a("span"),F(b9.$$.fragment),YTr=l(),$Te=a("span"),KTr=o("TFAutoModelForImageClassification"),aOe=l(),rr=a("div"),F(v9.$$.fragment),ZTr=l(),dc=a("p"),eMr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),uU=a("a"),oMr=o("from_pretrained()"),rMr=o(" class method or the "),pU=a("a"),tMr=o("from_config()"),aMr=o(` class
method.`),nMr=l(),F9=a("p"),sMr=o("This class cannot be instantiated directly using "),kTe=a("code"),lMr=o("__init__()"),iMr=o(" (throws an error)."),dMr=l(),Rt=a("div"),F(T9.$$.fragment),cMr=l(),STe=a("p"),mMr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),fMr=l(),cc=a("p"),gMr=o(`Note:
Loading a model from its configuration file does `),RTe=a("strong"),hMr=o("not"),uMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_U=a("a"),pMr=o("from_pretrained()"),_Mr=o(" to load the model weights."),bMr=l(),F(_C.$$.fragment),vMr=l(),$r=a("div"),F(M9.$$.fragment),FMr=l(),PTe=a("p"),TMr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),MMr=l(),sn=a("p"),EMr=o("The model class to instantiate is selected based on the "),BTe=a("code"),CMr=o("model_type"),wMr=o(` property of the config object (either
passed as an argument or loaded from `),ITe=a("code"),AMr=o("pretrained_model_name_or_path"),LMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),NTe=a("code"),yMr=o("pretrained_model_name_or_path"),xMr=o(":"),$Mr=l(),ln=a("ul"),bC=a("li"),qTe=a("strong"),kMr=o("convnext"),SMr=o(" \u2014 "),bU=a("a"),RMr=o("TFConvNextForImageClassification"),PMr=o(" (ConvNeXT model)"),BMr=l(),vC=a("li"),jTe=a("strong"),IMr=o("data2vec-vision"),NMr=o(" \u2014 "),vU=a("a"),qMr=o("TFData2VecVisionForImageClassification"),jMr=o(" (Data2VecVision model)"),DMr=l(),FC=a("li"),DTe=a("strong"),GMr=o("swin"),OMr=o(" \u2014 "),FU=a("a"),VMr=o("TFSwinForImageClassification"),XMr=o(" (Swin Transformer model)"),zMr=l(),TC=a("li"),GTe=a("strong"),WMr=o("vit"),QMr=o(" \u2014 "),TU=a("a"),HMr=o("TFViTForImageClassification"),UMr=o(" (ViT model)"),JMr=l(),F(MC.$$.fragment),nOe=l(),mc=a("h2"),EC=a("a"),OTe=a("span"),F(E9.$$.fragment),YMr=l(),VTe=a("span"),KMr=o("TFAutoModelForMaskedLM"),sOe=l(),tr=a("div"),F(C9.$$.fragment),ZMr=l(),fc=a("p"),e4r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),MU=a("a"),o4r=o("from_pretrained()"),r4r=o(" class method or the "),EU=a("a"),t4r=o("from_config()"),a4r=o(` class
method.`),n4r=l(),w9=a("p"),s4r=o("This class cannot be instantiated directly using "),XTe=a("code"),l4r=o("__init__()"),i4r=o(" (throws an error)."),d4r=l(),Pt=a("div"),F(A9.$$.fragment),c4r=l(),zTe=a("p"),m4r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),f4r=l(),gc=a("p"),g4r=o(`Note:
Loading a model from its configuration file does `),WTe=a("strong"),h4r=o("not"),u4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CU=a("a"),p4r=o("from_pretrained()"),_4r=o(" to load the model weights."),b4r=l(),F(CC.$$.fragment),v4r=l(),kr=a("div"),F(L9.$$.fragment),F4r=l(),QTe=a("p"),T4r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),M4r=l(),dn=a("p"),E4r=o("The model class to instantiate is selected based on the "),HTe=a("code"),C4r=o("model_type"),w4r=o(` property of the config object (either
passed as an argument or loaded from `),UTe=a("code"),A4r=o("pretrained_model_name_or_path"),L4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),JTe=a("code"),y4r=o("pretrained_model_name_or_path"),x4r=o(":"),$4r=l(),ie=a("ul"),wC=a("li"),YTe=a("strong"),k4r=o("albert"),S4r=o(" \u2014 "),wU=a("a"),R4r=o("TFAlbertForMaskedLM"),P4r=o(" (ALBERT model)"),B4r=l(),AC=a("li"),KTe=a("strong"),I4r=o("bert"),N4r=o(" \u2014 "),AU=a("a"),q4r=o("TFBertForMaskedLM"),j4r=o(" (BERT model)"),D4r=l(),LC=a("li"),ZTe=a("strong"),G4r=o("camembert"),O4r=o(" \u2014 "),LU=a("a"),V4r=o("TFCamembertForMaskedLM"),X4r=o(" (CamemBERT model)"),z4r=l(),yC=a("li"),eMe=a("strong"),W4r=o("convbert"),Q4r=o(" \u2014 "),yU=a("a"),H4r=o("TFConvBertForMaskedLM"),U4r=o(" (ConvBERT model)"),J4r=l(),xC=a("li"),oMe=a("strong"),Y4r=o("deberta"),K4r=o(" \u2014 "),xU=a("a"),Z4r=o("TFDebertaForMaskedLM"),eEr=o(" (DeBERTa model)"),oEr=l(),$C=a("li"),rMe=a("strong"),rEr=o("deberta-v2"),tEr=o(" \u2014 "),$U=a("a"),aEr=o("TFDebertaV2ForMaskedLM"),nEr=o(" (DeBERTa-v2 model)"),sEr=l(),kC=a("li"),tMe=a("strong"),lEr=o("distilbert"),iEr=o(" \u2014 "),kU=a("a"),dEr=o("TFDistilBertForMaskedLM"),cEr=o(" (DistilBERT model)"),mEr=l(),SC=a("li"),aMe=a("strong"),fEr=o("electra"),gEr=o(" \u2014 "),SU=a("a"),hEr=o("TFElectraForMaskedLM"),uEr=o(" (ELECTRA model)"),pEr=l(),RC=a("li"),nMe=a("strong"),_Er=o("flaubert"),bEr=o(" \u2014 "),RU=a("a"),vEr=o("TFFlaubertWithLMHeadModel"),FEr=o(" (FlauBERT model)"),TEr=l(),PC=a("li"),sMe=a("strong"),MEr=o("funnel"),EEr=o(" \u2014 "),PU=a("a"),CEr=o("TFFunnelForMaskedLM"),wEr=o(" (Funnel Transformer model)"),AEr=l(),BC=a("li"),lMe=a("strong"),LEr=o("layoutlm"),yEr=o(" \u2014 "),BU=a("a"),xEr=o("TFLayoutLMForMaskedLM"),$Er=o(" (LayoutLM model)"),kEr=l(),IC=a("li"),iMe=a("strong"),SEr=o("longformer"),REr=o(" \u2014 "),IU=a("a"),PEr=o("TFLongformerForMaskedLM"),BEr=o(" (Longformer model)"),IEr=l(),NC=a("li"),dMe=a("strong"),NEr=o("mobilebert"),qEr=o(" \u2014 "),NU=a("a"),jEr=o("TFMobileBertForMaskedLM"),DEr=o(" (MobileBERT model)"),GEr=l(),qC=a("li"),cMe=a("strong"),OEr=o("mpnet"),VEr=o(" \u2014 "),qU=a("a"),XEr=o("TFMPNetForMaskedLM"),zEr=o(" (MPNet model)"),WEr=l(),jC=a("li"),mMe=a("strong"),QEr=o("rembert"),HEr=o(" \u2014 "),jU=a("a"),UEr=o("TFRemBertForMaskedLM"),JEr=o(" (RemBERT model)"),YEr=l(),DC=a("li"),fMe=a("strong"),KEr=o("roberta"),ZEr=o(" \u2014 "),DU=a("a"),eCr=o("TFRobertaForMaskedLM"),oCr=o(" (RoBERTa model)"),rCr=l(),GC=a("li"),gMe=a("strong"),tCr=o("roformer"),aCr=o(" \u2014 "),GU=a("a"),nCr=o("TFRoFormerForMaskedLM"),sCr=o(" (RoFormer model)"),lCr=l(),OC=a("li"),hMe=a("strong"),iCr=o("tapas"),dCr=o(" \u2014 "),OU=a("a"),cCr=o("TFTapasForMaskedLM"),mCr=o(" (TAPAS model)"),fCr=l(),VC=a("li"),uMe=a("strong"),gCr=o("xlm"),hCr=o(" \u2014 "),VU=a("a"),uCr=o("TFXLMWithLMHeadModel"),pCr=o(" (XLM model)"),_Cr=l(),XC=a("li"),pMe=a("strong"),bCr=o("xlm-roberta"),vCr=o(" \u2014 "),XU=a("a"),FCr=o("TFXLMRobertaForMaskedLM"),TCr=o(" (XLM-RoBERTa model)"),MCr=l(),F(zC.$$.fragment),lOe=l(),hc=a("h2"),WC=a("a"),_Me=a("span"),F(y9.$$.fragment),ECr=l(),bMe=a("span"),CCr=o("TFAutoModelForSeq2SeqLM"),iOe=l(),ar=a("div"),F(x9.$$.fragment),wCr=l(),uc=a("p"),ACr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),zU=a("a"),LCr=o("from_pretrained()"),yCr=o(" class method or the "),WU=a("a"),xCr=o("from_config()"),$Cr=o(` class
method.`),kCr=l(),$9=a("p"),SCr=o("This class cannot be instantiated directly using "),vMe=a("code"),RCr=o("__init__()"),PCr=o(" (throws an error)."),BCr=l(),Bt=a("div"),F(k9.$$.fragment),ICr=l(),FMe=a("p"),NCr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),qCr=l(),pc=a("p"),jCr=o(`Note:
Loading a model from its configuration file does `),TMe=a("strong"),DCr=o("not"),GCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QU=a("a"),OCr=o("from_pretrained()"),VCr=o(" to load the model weights."),XCr=l(),F(QC.$$.fragment),zCr=l(),Sr=a("div"),F(S9.$$.fragment),WCr=l(),MMe=a("p"),QCr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),HCr=l(),cn=a("p"),UCr=o("The model class to instantiate is selected based on the "),EMe=a("code"),JCr=o("model_type"),YCr=o(` property of the config object (either
passed as an argument or loaded from `),CMe=a("code"),KCr=o("pretrained_model_name_or_path"),ZCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wMe=a("code"),e5r=o("pretrained_model_name_or_path"),o5r=o(":"),r5r=l(),ye=a("ul"),HC=a("li"),AMe=a("strong"),t5r=o("bart"),a5r=o(" \u2014 "),HU=a("a"),n5r=o("TFBartForConditionalGeneration"),s5r=o(" (BART model)"),l5r=l(),UC=a("li"),LMe=a("strong"),i5r=o("blenderbot"),d5r=o(" \u2014 "),UU=a("a"),c5r=o("TFBlenderbotForConditionalGeneration"),m5r=o(" (Blenderbot model)"),f5r=l(),JC=a("li"),yMe=a("strong"),g5r=o("blenderbot-small"),h5r=o(" \u2014 "),JU=a("a"),u5r=o("TFBlenderbotSmallForConditionalGeneration"),p5r=o(" (BlenderbotSmall model)"),_5r=l(),YC=a("li"),xMe=a("strong"),b5r=o("encoder-decoder"),v5r=o(" \u2014 "),YU=a("a"),F5r=o("TFEncoderDecoderModel"),T5r=o(" (Encoder decoder model)"),M5r=l(),KC=a("li"),$Me=a("strong"),E5r=o("led"),C5r=o(" \u2014 "),KU=a("a"),w5r=o("TFLEDForConditionalGeneration"),A5r=o(" (LED model)"),L5r=l(),ZC=a("li"),kMe=a("strong"),y5r=o("marian"),x5r=o(" \u2014 "),ZU=a("a"),$5r=o("TFMarianMTModel"),k5r=o(" (Marian model)"),S5r=l(),e5=a("li"),SMe=a("strong"),R5r=o("mbart"),P5r=o(" \u2014 "),eJ=a("a"),B5r=o("TFMBartForConditionalGeneration"),I5r=o(" (mBART model)"),N5r=l(),o5=a("li"),RMe=a("strong"),q5r=o("mt5"),j5r=o(" \u2014 "),oJ=a("a"),D5r=o("TFMT5ForConditionalGeneration"),G5r=o(" (MT5 model)"),O5r=l(),r5=a("li"),PMe=a("strong"),V5r=o("pegasus"),X5r=o(" \u2014 "),rJ=a("a"),z5r=o("TFPegasusForConditionalGeneration"),W5r=o(" (Pegasus model)"),Q5r=l(),t5=a("li"),BMe=a("strong"),H5r=o("t5"),U5r=o(" \u2014 "),tJ=a("a"),J5r=o("TFT5ForConditionalGeneration"),Y5r=o(" (T5 model)"),K5r=l(),F(a5.$$.fragment),dOe=l(),_c=a("h2"),n5=a("a"),IMe=a("span"),F(R9.$$.fragment),Z5r=l(),NMe=a("span"),e3r=o("TFAutoModelForSequenceClassification"),cOe=l(),nr=a("div"),F(P9.$$.fragment),o3r=l(),bc=a("p"),r3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),aJ=a("a"),t3r=o("from_pretrained()"),a3r=o(" class method or the "),nJ=a("a"),n3r=o("from_config()"),s3r=o(` class
method.`),l3r=l(),B9=a("p"),i3r=o("This class cannot be instantiated directly using "),qMe=a("code"),d3r=o("__init__()"),c3r=o(" (throws an error)."),m3r=l(),It=a("div"),F(I9.$$.fragment),f3r=l(),jMe=a("p"),g3r=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),h3r=l(),vc=a("p"),u3r=o(`Note:
Loading a model from its configuration file does `),DMe=a("strong"),p3r=o("not"),_3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sJ=a("a"),b3r=o("from_pretrained()"),v3r=o(" to load the model weights."),F3r=l(),F(s5.$$.fragment),T3r=l(),Rr=a("div"),F(N9.$$.fragment),M3r=l(),GMe=a("p"),E3r=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),C3r=l(),mn=a("p"),w3r=o("The model class to instantiate is selected based on the "),OMe=a("code"),A3r=o("model_type"),L3r=o(` property of the config object (either
passed as an argument or loaded from `),VMe=a("code"),y3r=o("pretrained_model_name_or_path"),x3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),XMe=a("code"),$3r=o("pretrained_model_name_or_path"),k3r=o(":"),S3r=l(),te=a("ul"),l5=a("li"),zMe=a("strong"),R3r=o("albert"),P3r=o(" \u2014 "),lJ=a("a"),B3r=o("TFAlbertForSequenceClassification"),I3r=o(" (ALBERT model)"),N3r=l(),i5=a("li"),WMe=a("strong"),q3r=o("bert"),j3r=o(" \u2014 "),iJ=a("a"),D3r=o("TFBertForSequenceClassification"),G3r=o(" (BERT model)"),O3r=l(),d5=a("li"),QMe=a("strong"),V3r=o("camembert"),X3r=o(" \u2014 "),dJ=a("a"),z3r=o("TFCamembertForSequenceClassification"),W3r=o(" (CamemBERT model)"),Q3r=l(),c5=a("li"),HMe=a("strong"),H3r=o("convbert"),U3r=o(" \u2014 "),cJ=a("a"),J3r=o("TFConvBertForSequenceClassification"),Y3r=o(" (ConvBERT model)"),K3r=l(),m5=a("li"),UMe=a("strong"),Z3r=o("ctrl"),e0r=o(" \u2014 "),mJ=a("a"),o0r=o("TFCTRLForSequenceClassification"),r0r=o(" (CTRL model)"),t0r=l(),f5=a("li"),JMe=a("strong"),a0r=o("deberta"),n0r=o(" \u2014 "),fJ=a("a"),s0r=o("TFDebertaForSequenceClassification"),l0r=o(" (DeBERTa model)"),i0r=l(),g5=a("li"),YMe=a("strong"),d0r=o("deberta-v2"),c0r=o(" \u2014 "),gJ=a("a"),m0r=o("TFDebertaV2ForSequenceClassification"),f0r=o(" (DeBERTa-v2 model)"),g0r=l(),h5=a("li"),KMe=a("strong"),h0r=o("distilbert"),u0r=o(" \u2014 "),hJ=a("a"),p0r=o("TFDistilBertForSequenceClassification"),_0r=o(" (DistilBERT model)"),b0r=l(),u5=a("li"),ZMe=a("strong"),v0r=o("electra"),F0r=o(" \u2014 "),uJ=a("a"),T0r=o("TFElectraForSequenceClassification"),M0r=o(" (ELECTRA model)"),E0r=l(),p5=a("li"),e4e=a("strong"),C0r=o("flaubert"),w0r=o(" \u2014 "),pJ=a("a"),A0r=o("TFFlaubertForSequenceClassification"),L0r=o(" (FlauBERT model)"),y0r=l(),_5=a("li"),o4e=a("strong"),x0r=o("funnel"),$0r=o(" \u2014 "),_J=a("a"),k0r=o("TFFunnelForSequenceClassification"),S0r=o(" (Funnel Transformer model)"),R0r=l(),b5=a("li"),r4e=a("strong"),P0r=o("gpt2"),B0r=o(" \u2014 "),bJ=a("a"),I0r=o("TFGPT2ForSequenceClassification"),N0r=o(" (OpenAI GPT-2 model)"),q0r=l(),v5=a("li"),t4e=a("strong"),j0r=o("gptj"),D0r=o(" \u2014 "),vJ=a("a"),G0r=o("TFGPTJForSequenceClassification"),O0r=o(" (GPT-J model)"),V0r=l(),F5=a("li"),a4e=a("strong"),X0r=o("layoutlm"),z0r=o(" \u2014 "),FJ=a("a"),W0r=o("TFLayoutLMForSequenceClassification"),Q0r=o(" (LayoutLM model)"),H0r=l(),T5=a("li"),n4e=a("strong"),U0r=o("longformer"),J0r=o(" \u2014 "),TJ=a("a"),Y0r=o("TFLongformerForSequenceClassification"),K0r=o(" (Longformer model)"),Z0r=l(),M5=a("li"),s4e=a("strong"),ewr=o("mobilebert"),owr=o(" \u2014 "),MJ=a("a"),rwr=o("TFMobileBertForSequenceClassification"),twr=o(" (MobileBERT model)"),awr=l(),E5=a("li"),l4e=a("strong"),nwr=o("mpnet"),swr=o(" \u2014 "),EJ=a("a"),lwr=o("TFMPNetForSequenceClassification"),iwr=o(" (MPNet model)"),dwr=l(),C5=a("li"),i4e=a("strong"),cwr=o("openai-gpt"),mwr=o(" \u2014 "),CJ=a("a"),fwr=o("TFOpenAIGPTForSequenceClassification"),gwr=o(" (OpenAI GPT model)"),hwr=l(),w5=a("li"),d4e=a("strong"),uwr=o("rembert"),pwr=o(" \u2014 "),wJ=a("a"),_wr=o("TFRemBertForSequenceClassification"),bwr=o(" (RemBERT model)"),vwr=l(),A5=a("li"),c4e=a("strong"),Fwr=o("roberta"),Twr=o(" \u2014 "),AJ=a("a"),Mwr=o("TFRobertaForSequenceClassification"),Ewr=o(" (RoBERTa model)"),Cwr=l(),L5=a("li"),m4e=a("strong"),wwr=o("roformer"),Awr=o(" \u2014 "),LJ=a("a"),Lwr=o("TFRoFormerForSequenceClassification"),ywr=o(" (RoFormer model)"),xwr=l(),y5=a("li"),f4e=a("strong"),$wr=o("tapas"),kwr=o(" \u2014 "),yJ=a("a"),Swr=o("TFTapasForSequenceClassification"),Rwr=o(" (TAPAS model)"),Pwr=l(),x5=a("li"),g4e=a("strong"),Bwr=o("transfo-xl"),Iwr=o(" \u2014 "),xJ=a("a"),Nwr=o("TFTransfoXLForSequenceClassification"),qwr=o(" (Transformer-XL model)"),jwr=l(),$5=a("li"),h4e=a("strong"),Dwr=o("xlm"),Gwr=o(" \u2014 "),$J=a("a"),Owr=o("TFXLMForSequenceClassification"),Vwr=o(" (XLM model)"),Xwr=l(),k5=a("li"),u4e=a("strong"),zwr=o("xlm-roberta"),Wwr=o(" \u2014 "),kJ=a("a"),Qwr=o("TFXLMRobertaForSequenceClassification"),Hwr=o(" (XLM-RoBERTa model)"),Uwr=l(),S5=a("li"),p4e=a("strong"),Jwr=o("xlnet"),Ywr=o(" \u2014 "),SJ=a("a"),Kwr=o("TFXLNetForSequenceClassification"),Zwr=o(" (XLNet model)"),eAr=l(),F(R5.$$.fragment),mOe=l(),Fc=a("h2"),P5=a("a"),_4e=a("span"),F(q9.$$.fragment),oAr=l(),b4e=a("span"),rAr=o("TFAutoModelForMultipleChoice"),fOe=l(),sr=a("div"),F(j9.$$.fragment),tAr=l(),Tc=a("p"),aAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),RJ=a("a"),nAr=o("from_pretrained()"),sAr=o(" class method or the "),PJ=a("a"),lAr=o("from_config()"),iAr=o(` class
method.`),dAr=l(),D9=a("p"),cAr=o("This class cannot be instantiated directly using "),v4e=a("code"),mAr=o("__init__()"),fAr=o(" (throws an error)."),gAr=l(),Nt=a("div"),F(G9.$$.fragment),hAr=l(),F4e=a("p"),uAr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),pAr=l(),Mc=a("p"),_Ar=o(`Note:
Loading a model from its configuration file does `),T4e=a("strong"),bAr=o("not"),vAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BJ=a("a"),FAr=o("from_pretrained()"),TAr=o(" to load the model weights."),MAr=l(),F(B5.$$.fragment),EAr=l(),Pr=a("div"),F(O9.$$.fragment),CAr=l(),M4e=a("p"),wAr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),AAr=l(),fn=a("p"),LAr=o("The model class to instantiate is selected based on the "),E4e=a("code"),yAr=o("model_type"),xAr=o(` property of the config object (either
passed as an argument or loaded from `),C4e=a("code"),$Ar=o("pretrained_model_name_or_path"),kAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w4e=a("code"),SAr=o("pretrained_model_name_or_path"),RAr=o(":"),PAr=l(),pe=a("ul"),I5=a("li"),A4e=a("strong"),BAr=o("albert"),IAr=o(" \u2014 "),IJ=a("a"),NAr=o("TFAlbertForMultipleChoice"),qAr=o(" (ALBERT model)"),jAr=l(),N5=a("li"),L4e=a("strong"),DAr=o("bert"),GAr=o(" \u2014 "),NJ=a("a"),OAr=o("TFBertForMultipleChoice"),VAr=o(" (BERT model)"),XAr=l(),q5=a("li"),y4e=a("strong"),zAr=o("camembert"),WAr=o(" \u2014 "),qJ=a("a"),QAr=o("TFCamembertForMultipleChoice"),HAr=o(" (CamemBERT model)"),UAr=l(),j5=a("li"),x4e=a("strong"),JAr=o("convbert"),YAr=o(" \u2014 "),jJ=a("a"),KAr=o("TFConvBertForMultipleChoice"),ZAr=o(" (ConvBERT model)"),e6r=l(),D5=a("li"),$4e=a("strong"),o6r=o("distilbert"),r6r=o(" \u2014 "),DJ=a("a"),t6r=o("TFDistilBertForMultipleChoice"),a6r=o(" (DistilBERT model)"),n6r=l(),G5=a("li"),k4e=a("strong"),s6r=o("electra"),l6r=o(" \u2014 "),GJ=a("a"),i6r=o("TFElectraForMultipleChoice"),d6r=o(" (ELECTRA model)"),c6r=l(),O5=a("li"),S4e=a("strong"),m6r=o("flaubert"),f6r=o(" \u2014 "),OJ=a("a"),g6r=o("TFFlaubertForMultipleChoice"),h6r=o(" (FlauBERT model)"),u6r=l(),V5=a("li"),R4e=a("strong"),p6r=o("funnel"),_6r=o(" \u2014 "),VJ=a("a"),b6r=o("TFFunnelForMultipleChoice"),v6r=o(" (Funnel Transformer model)"),F6r=l(),X5=a("li"),P4e=a("strong"),T6r=o("longformer"),M6r=o(" \u2014 "),XJ=a("a"),E6r=o("TFLongformerForMultipleChoice"),C6r=o(" (Longformer model)"),w6r=l(),z5=a("li"),B4e=a("strong"),A6r=o("mobilebert"),L6r=o(" \u2014 "),zJ=a("a"),y6r=o("TFMobileBertForMultipleChoice"),x6r=o(" (MobileBERT model)"),$6r=l(),W5=a("li"),I4e=a("strong"),k6r=o("mpnet"),S6r=o(" \u2014 "),WJ=a("a"),R6r=o("TFMPNetForMultipleChoice"),P6r=o(" (MPNet model)"),B6r=l(),Q5=a("li"),N4e=a("strong"),I6r=o("rembert"),N6r=o(" \u2014 "),QJ=a("a"),q6r=o("TFRemBertForMultipleChoice"),j6r=o(" (RemBERT model)"),D6r=l(),H5=a("li"),q4e=a("strong"),G6r=o("roberta"),O6r=o(" \u2014 "),HJ=a("a"),V6r=o("TFRobertaForMultipleChoice"),X6r=o(" (RoBERTa model)"),z6r=l(),U5=a("li"),j4e=a("strong"),W6r=o("roformer"),Q6r=o(" \u2014 "),UJ=a("a"),H6r=o("TFRoFormerForMultipleChoice"),U6r=o(" (RoFormer model)"),J6r=l(),J5=a("li"),D4e=a("strong"),Y6r=o("xlm"),K6r=o(" \u2014 "),JJ=a("a"),Z6r=o("TFXLMForMultipleChoice"),eLr=o(" (XLM model)"),oLr=l(),Y5=a("li"),G4e=a("strong"),rLr=o("xlm-roberta"),tLr=o(" \u2014 "),YJ=a("a"),aLr=o("TFXLMRobertaForMultipleChoice"),nLr=o(" (XLM-RoBERTa model)"),sLr=l(),K5=a("li"),O4e=a("strong"),lLr=o("xlnet"),iLr=o(" \u2014 "),KJ=a("a"),dLr=o("TFXLNetForMultipleChoice"),cLr=o(" (XLNet model)"),mLr=l(),F(Z5.$$.fragment),gOe=l(),Ec=a("h2"),e3=a("a"),V4e=a("span"),F(V9.$$.fragment),fLr=l(),X4e=a("span"),gLr=o("TFAutoModelForNextSentencePrediction"),hOe=l(),lr=a("div"),F(X9.$$.fragment),hLr=l(),Cc=a("p"),uLr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),ZJ=a("a"),pLr=o("from_pretrained()"),_Lr=o(" class method or the "),eY=a("a"),bLr=o("from_config()"),vLr=o(` class
method.`),FLr=l(),z9=a("p"),TLr=o("This class cannot be instantiated directly using "),z4e=a("code"),MLr=o("__init__()"),ELr=o(" (throws an error)."),CLr=l(),qt=a("div"),F(W9.$$.fragment),wLr=l(),W4e=a("p"),ALr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),LLr=l(),wc=a("p"),yLr=o(`Note:
Loading a model from its configuration file does `),Q4e=a("strong"),xLr=o("not"),$Lr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oY=a("a"),kLr=o("from_pretrained()"),SLr=o(" to load the model weights."),RLr=l(),F(o3.$$.fragment),PLr=l(),Br=a("div"),F(Q9.$$.fragment),BLr=l(),H4e=a("p"),ILr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),NLr=l(),gn=a("p"),qLr=o("The model class to instantiate is selected based on the "),U4e=a("code"),jLr=o("model_type"),DLr=o(` property of the config object (either
passed as an argument or loaded from `),J4e=a("code"),GLr=o("pretrained_model_name_or_path"),OLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y4e=a("code"),VLr=o("pretrained_model_name_or_path"),XLr=o(":"),zLr=l(),H9=a("ul"),r3=a("li"),K4e=a("strong"),WLr=o("bert"),QLr=o(" \u2014 "),rY=a("a"),HLr=o("TFBertForNextSentencePrediction"),ULr=o(" (BERT model)"),JLr=l(),t3=a("li"),Z4e=a("strong"),YLr=o("mobilebert"),KLr=o(" \u2014 "),tY=a("a"),ZLr=o("TFMobileBertForNextSentencePrediction"),eyr=o(" (MobileBERT model)"),oyr=l(),F(a3.$$.fragment),uOe=l(),Ac=a("h2"),n3=a("a"),eEe=a("span"),F(U9.$$.fragment),ryr=l(),oEe=a("span"),tyr=o("TFAutoModelForTableQuestionAnswering"),pOe=l(),ir=a("div"),F(J9.$$.fragment),ayr=l(),Lc=a("p"),nyr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),aY=a("a"),syr=o("from_pretrained()"),lyr=o(" class method or the "),nY=a("a"),iyr=o("from_config()"),dyr=o(` class
method.`),cyr=l(),Y9=a("p"),myr=o("This class cannot be instantiated directly using "),rEe=a("code"),fyr=o("__init__()"),gyr=o(" (throws an error)."),hyr=l(),jt=a("div"),F(K9.$$.fragment),uyr=l(),tEe=a("p"),pyr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),_yr=l(),yc=a("p"),byr=o(`Note:
Loading a model from its configuration file does `),aEe=a("strong"),vyr=o("not"),Fyr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sY=a("a"),Tyr=o("from_pretrained()"),Myr=o(" to load the model weights."),Eyr=l(),F(s3.$$.fragment),Cyr=l(),Ir=a("div"),F(Z9.$$.fragment),wyr=l(),nEe=a("p"),Ayr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Lyr=l(),hn=a("p"),yyr=o("The model class to instantiate is selected based on the "),sEe=a("code"),xyr=o("model_type"),$yr=o(` property of the config object (either
passed as an argument or loaded from `),lEe=a("code"),kyr=o("pretrained_model_name_or_path"),Syr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iEe=a("code"),Ryr=o("pretrained_model_name_or_path"),Pyr=o(":"),Byr=l(),dEe=a("ul"),l3=a("li"),cEe=a("strong"),Iyr=o("tapas"),Nyr=o(" \u2014 "),lY=a("a"),qyr=o("TFTapasForQuestionAnswering"),jyr=o(" (TAPAS model)"),Dyr=l(),F(i3.$$.fragment),_Oe=l(),xc=a("h2"),d3=a("a"),mEe=a("span"),F(ex.$$.fragment),Gyr=l(),fEe=a("span"),Oyr=o("TFAutoModelForTokenClassification"),bOe=l(),dr=a("div"),F(ox.$$.fragment),Vyr=l(),$c=a("p"),Xyr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),iY=a("a"),zyr=o("from_pretrained()"),Wyr=o(" class method or the "),dY=a("a"),Qyr=o("from_config()"),Hyr=o(` class
method.`),Uyr=l(),rx=a("p"),Jyr=o("This class cannot be instantiated directly using "),gEe=a("code"),Yyr=o("__init__()"),Kyr=o(" (throws an error)."),Zyr=l(),Dt=a("div"),F(tx.$$.fragment),e7r=l(),hEe=a("p"),o7r=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),r7r=l(),kc=a("p"),t7r=o(`Note:
Loading a model from its configuration file does `),uEe=a("strong"),a7r=o("not"),n7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cY=a("a"),s7r=o("from_pretrained()"),l7r=o(" to load the model weights."),i7r=l(),F(c3.$$.fragment),d7r=l(),Nr=a("div"),F(ax.$$.fragment),c7r=l(),pEe=a("p"),m7r=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),f7r=l(),un=a("p"),g7r=o("The model class to instantiate is selected based on the "),_Ee=a("code"),h7r=o("model_type"),u7r=o(` property of the config object (either
passed as an argument or loaded from `),bEe=a("code"),p7r=o("pretrained_model_name_or_path"),_7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vEe=a("code"),b7r=o("pretrained_model_name_or_path"),v7r=o(":"),F7r=l(),de=a("ul"),m3=a("li"),FEe=a("strong"),T7r=o("albert"),M7r=o(" \u2014 "),mY=a("a"),E7r=o("TFAlbertForTokenClassification"),C7r=o(" (ALBERT model)"),w7r=l(),f3=a("li"),TEe=a("strong"),A7r=o("bert"),L7r=o(" \u2014 "),fY=a("a"),y7r=o("TFBertForTokenClassification"),x7r=o(" (BERT model)"),$7r=l(),g3=a("li"),MEe=a("strong"),k7r=o("camembert"),S7r=o(" \u2014 "),gY=a("a"),R7r=o("TFCamembertForTokenClassification"),P7r=o(" (CamemBERT model)"),B7r=l(),h3=a("li"),EEe=a("strong"),I7r=o("convbert"),N7r=o(" \u2014 "),hY=a("a"),q7r=o("TFConvBertForTokenClassification"),j7r=o(" (ConvBERT model)"),D7r=l(),u3=a("li"),CEe=a("strong"),G7r=o("deberta"),O7r=o(" \u2014 "),uY=a("a"),V7r=o("TFDebertaForTokenClassification"),X7r=o(" (DeBERTa model)"),z7r=l(),p3=a("li"),wEe=a("strong"),W7r=o("deberta-v2"),Q7r=o(" \u2014 "),pY=a("a"),H7r=o("TFDebertaV2ForTokenClassification"),U7r=o(" (DeBERTa-v2 model)"),J7r=l(),_3=a("li"),AEe=a("strong"),Y7r=o("distilbert"),K7r=o(" \u2014 "),_Y=a("a"),Z7r=o("TFDistilBertForTokenClassification"),e8r=o(" (DistilBERT model)"),o8r=l(),b3=a("li"),LEe=a("strong"),r8r=o("electra"),t8r=o(" \u2014 "),bY=a("a"),a8r=o("TFElectraForTokenClassification"),n8r=o(" (ELECTRA model)"),s8r=l(),v3=a("li"),yEe=a("strong"),l8r=o("flaubert"),i8r=o(" \u2014 "),vY=a("a"),d8r=o("TFFlaubertForTokenClassification"),c8r=o(" (FlauBERT model)"),m8r=l(),F3=a("li"),xEe=a("strong"),f8r=o("funnel"),g8r=o(" \u2014 "),FY=a("a"),h8r=o("TFFunnelForTokenClassification"),u8r=o(" (Funnel Transformer model)"),p8r=l(),T3=a("li"),$Ee=a("strong"),_8r=o("layoutlm"),b8r=o(" \u2014 "),TY=a("a"),v8r=o("TFLayoutLMForTokenClassification"),F8r=o(" (LayoutLM model)"),T8r=l(),M3=a("li"),kEe=a("strong"),M8r=o("longformer"),E8r=o(" \u2014 "),MY=a("a"),C8r=o("TFLongformerForTokenClassification"),w8r=o(" (Longformer model)"),A8r=l(),E3=a("li"),SEe=a("strong"),L8r=o("mobilebert"),y8r=o(" \u2014 "),EY=a("a"),x8r=o("TFMobileBertForTokenClassification"),$8r=o(" (MobileBERT model)"),k8r=l(),C3=a("li"),REe=a("strong"),S8r=o("mpnet"),R8r=o(" \u2014 "),CY=a("a"),P8r=o("TFMPNetForTokenClassification"),B8r=o(" (MPNet model)"),I8r=l(),w3=a("li"),PEe=a("strong"),N8r=o("rembert"),q8r=o(" \u2014 "),wY=a("a"),j8r=o("TFRemBertForTokenClassification"),D8r=o(" (RemBERT model)"),G8r=l(),A3=a("li"),BEe=a("strong"),O8r=o("roberta"),V8r=o(" \u2014 "),AY=a("a"),X8r=o("TFRobertaForTokenClassification"),z8r=o(" (RoBERTa model)"),W8r=l(),L3=a("li"),IEe=a("strong"),Q8r=o("roformer"),H8r=o(" \u2014 "),LY=a("a"),U8r=o("TFRoFormerForTokenClassification"),J8r=o(" (RoFormer model)"),Y8r=l(),y3=a("li"),NEe=a("strong"),K8r=o("xlm"),Z8r=o(" \u2014 "),yY=a("a"),e9r=o("TFXLMForTokenClassification"),o9r=o(" (XLM model)"),r9r=l(),x3=a("li"),qEe=a("strong"),t9r=o("xlm-roberta"),a9r=o(" \u2014 "),xY=a("a"),n9r=o("TFXLMRobertaForTokenClassification"),s9r=o(" (XLM-RoBERTa model)"),l9r=l(),$3=a("li"),jEe=a("strong"),i9r=o("xlnet"),d9r=o(" \u2014 "),$Y=a("a"),c9r=o("TFXLNetForTokenClassification"),m9r=o(" (XLNet model)"),f9r=l(),F(k3.$$.fragment),vOe=l(),Sc=a("h2"),S3=a("a"),DEe=a("span"),F(nx.$$.fragment),g9r=l(),GEe=a("span"),h9r=o("TFAutoModelForQuestionAnswering"),FOe=l(),cr=a("div"),F(sx.$$.fragment),u9r=l(),Rc=a("p"),p9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),kY=a("a"),_9r=o("from_pretrained()"),b9r=o(" class method or the "),SY=a("a"),v9r=o("from_config()"),F9r=o(` class
method.`),T9r=l(),lx=a("p"),M9r=o("This class cannot be instantiated directly using "),OEe=a("code"),E9r=o("__init__()"),C9r=o(" (throws an error)."),w9r=l(),Gt=a("div"),F(ix.$$.fragment),A9r=l(),VEe=a("p"),L9r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),y9r=l(),Pc=a("p"),x9r=o(`Note:
Loading a model from its configuration file does `),XEe=a("strong"),$9r=o("not"),k9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RY=a("a"),S9r=o("from_pretrained()"),R9r=o(" to load the model weights."),P9r=l(),F(R3.$$.fragment),B9r=l(),qr=a("div"),F(dx.$$.fragment),I9r=l(),zEe=a("p"),N9r=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),q9r=l(),pn=a("p"),j9r=o("The model class to instantiate is selected based on the "),WEe=a("code"),D9r=o("model_type"),G9r=o(` property of the config object (either
passed as an argument or loaded from `),QEe=a("code"),O9r=o("pretrained_model_name_or_path"),V9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),HEe=a("code"),X9r=o("pretrained_model_name_or_path"),z9r=o(":"),W9r=l(),ce=a("ul"),P3=a("li"),UEe=a("strong"),Q9r=o("albert"),H9r=o(" \u2014 "),PY=a("a"),U9r=o("TFAlbertForQuestionAnswering"),J9r=o(" (ALBERT model)"),Y9r=l(),B3=a("li"),JEe=a("strong"),K9r=o("bert"),Z9r=o(" \u2014 "),BY=a("a"),exr=o("TFBertForQuestionAnswering"),oxr=o(" (BERT model)"),rxr=l(),I3=a("li"),YEe=a("strong"),txr=o("camembert"),axr=o(" \u2014 "),IY=a("a"),nxr=o("TFCamembertForQuestionAnswering"),sxr=o(" (CamemBERT model)"),lxr=l(),N3=a("li"),KEe=a("strong"),ixr=o("convbert"),dxr=o(" \u2014 "),NY=a("a"),cxr=o("TFConvBertForQuestionAnswering"),mxr=o(" (ConvBERT model)"),fxr=l(),q3=a("li"),ZEe=a("strong"),gxr=o("deberta"),hxr=o(" \u2014 "),qY=a("a"),uxr=o("TFDebertaForQuestionAnswering"),pxr=o(" (DeBERTa model)"),_xr=l(),j3=a("li"),eCe=a("strong"),bxr=o("deberta-v2"),vxr=o(" \u2014 "),jY=a("a"),Fxr=o("TFDebertaV2ForQuestionAnswering"),Txr=o(" (DeBERTa-v2 model)"),Mxr=l(),D3=a("li"),oCe=a("strong"),Exr=o("distilbert"),Cxr=o(" \u2014 "),DY=a("a"),wxr=o("TFDistilBertForQuestionAnswering"),Axr=o(" (DistilBERT model)"),Lxr=l(),G3=a("li"),rCe=a("strong"),yxr=o("electra"),xxr=o(" \u2014 "),GY=a("a"),$xr=o("TFElectraForQuestionAnswering"),kxr=o(" (ELECTRA model)"),Sxr=l(),O3=a("li"),tCe=a("strong"),Rxr=o("flaubert"),Pxr=o(" \u2014 "),OY=a("a"),Bxr=o("TFFlaubertForQuestionAnsweringSimple"),Ixr=o(" (FlauBERT model)"),Nxr=l(),V3=a("li"),aCe=a("strong"),qxr=o("funnel"),jxr=o(" \u2014 "),VY=a("a"),Dxr=o("TFFunnelForQuestionAnswering"),Gxr=o(" (Funnel Transformer model)"),Oxr=l(),X3=a("li"),nCe=a("strong"),Vxr=o("gptj"),Xxr=o(" \u2014 "),XY=a("a"),zxr=o("TFGPTJForQuestionAnswering"),Wxr=o(" (GPT-J model)"),Qxr=l(),z3=a("li"),sCe=a("strong"),Hxr=o("longformer"),Uxr=o(" \u2014 "),zY=a("a"),Jxr=o("TFLongformerForQuestionAnswering"),Yxr=o(" (Longformer model)"),Kxr=l(),W3=a("li"),lCe=a("strong"),Zxr=o("mobilebert"),e$r=o(" \u2014 "),WY=a("a"),o$r=o("TFMobileBertForQuestionAnswering"),r$r=o(" (MobileBERT model)"),t$r=l(),Q3=a("li"),iCe=a("strong"),a$r=o("mpnet"),n$r=o(" \u2014 "),QY=a("a"),s$r=o("TFMPNetForQuestionAnswering"),l$r=o(" (MPNet model)"),i$r=l(),H3=a("li"),dCe=a("strong"),d$r=o("rembert"),c$r=o(" \u2014 "),HY=a("a"),m$r=o("TFRemBertForQuestionAnswering"),f$r=o(" (RemBERT model)"),g$r=l(),U3=a("li"),cCe=a("strong"),h$r=o("roberta"),u$r=o(" \u2014 "),UY=a("a"),p$r=o("TFRobertaForQuestionAnswering"),_$r=o(" (RoBERTa model)"),b$r=l(),J3=a("li"),mCe=a("strong"),v$r=o("roformer"),F$r=o(" \u2014 "),JY=a("a"),T$r=o("TFRoFormerForQuestionAnswering"),M$r=o(" (RoFormer model)"),E$r=l(),Y3=a("li"),fCe=a("strong"),C$r=o("xlm"),w$r=o(" \u2014 "),YY=a("a"),A$r=o("TFXLMForQuestionAnsweringSimple"),L$r=o(" (XLM model)"),y$r=l(),K3=a("li"),gCe=a("strong"),x$r=o("xlm-roberta"),$$r=o(" \u2014 "),KY=a("a"),k$r=o("TFXLMRobertaForQuestionAnswering"),S$r=o(" (XLM-RoBERTa model)"),R$r=l(),Z3=a("li"),hCe=a("strong"),P$r=o("xlnet"),B$r=o(" \u2014 "),ZY=a("a"),I$r=o("TFXLNetForQuestionAnsweringSimple"),N$r=o(" (XLNet model)"),q$r=l(),F(e0.$$.fragment),TOe=l(),Bc=a("h2"),o0=a("a"),uCe=a("span"),F(cx.$$.fragment),j$r=l(),pCe=a("span"),D$r=o("TFAutoModelForVision2Seq"),MOe=l(),mr=a("div"),F(mx.$$.fragment),G$r=l(),Ic=a("p"),O$r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),eK=a("a"),V$r=o("from_pretrained()"),X$r=o(" class method or the "),oK=a("a"),z$r=o("from_config()"),W$r=o(` class
method.`),Q$r=l(),fx=a("p"),H$r=o("This class cannot be instantiated directly using "),_Ce=a("code"),U$r=o("__init__()"),J$r=o(" (throws an error)."),Y$r=l(),Ot=a("div"),F(gx.$$.fragment),K$r=l(),bCe=a("p"),Z$r=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),ekr=l(),Nc=a("p"),okr=o(`Note:
Loading a model from its configuration file does `),vCe=a("strong"),rkr=o("not"),tkr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rK=a("a"),akr=o("from_pretrained()"),nkr=o(" to load the model weights."),skr=l(),F(r0.$$.fragment),lkr=l(),jr=a("div"),F(hx.$$.fragment),ikr=l(),FCe=a("p"),dkr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),ckr=l(),_n=a("p"),mkr=o("The model class to instantiate is selected based on the "),TCe=a("code"),fkr=o("model_type"),gkr=o(` property of the config object (either
passed as an argument or loaded from `),MCe=a("code"),hkr=o("pretrained_model_name_or_path"),ukr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ECe=a("code"),pkr=o("pretrained_model_name_or_path"),_kr=o(":"),bkr=l(),CCe=a("ul"),t0=a("li"),wCe=a("strong"),vkr=o("vision-encoder-decoder"),Fkr=o(" \u2014 "),tK=a("a"),Tkr=o("TFVisionEncoderDecoderModel"),Mkr=o(" (Vision Encoder decoder model)"),Ekr=l(),F(a0.$$.fragment),EOe=l(),qc=a("h2"),n0=a("a"),ACe=a("span"),F(ux.$$.fragment),Ckr=l(),LCe=a("span"),wkr=o("TFAutoModelForSpeechSeq2Seq"),COe=l(),fr=a("div"),F(px.$$.fragment),Akr=l(),jc=a("p"),Lkr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),aK=a("a"),ykr=o("from_pretrained()"),xkr=o(" class method or the "),nK=a("a"),$kr=o("from_config()"),kkr=o(` class
method.`),Skr=l(),_x=a("p"),Rkr=o("This class cannot be instantiated directly using "),yCe=a("code"),Pkr=o("__init__()"),Bkr=o(" (throws an error)."),Ikr=l(),Vt=a("div"),F(bx.$$.fragment),Nkr=l(),xCe=a("p"),qkr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),jkr=l(),Dc=a("p"),Dkr=o(`Note:
Loading a model from its configuration file does `),$Ce=a("strong"),Gkr=o("not"),Okr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sK=a("a"),Vkr=o("from_pretrained()"),Xkr=o(" to load the model weights."),zkr=l(),F(s0.$$.fragment),Wkr=l(),Dr=a("div"),F(vx.$$.fragment),Qkr=l(),kCe=a("p"),Hkr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Ukr=l(),bn=a("p"),Jkr=o("The model class to instantiate is selected based on the "),SCe=a("code"),Ykr=o("model_type"),Kkr=o(` property of the config object (either
passed as an argument or loaded from `),RCe=a("code"),Zkr=o("pretrained_model_name_or_path"),eSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PCe=a("code"),oSr=o("pretrained_model_name_or_path"),rSr=o(":"),tSr=l(),BCe=a("ul"),l0=a("li"),ICe=a("strong"),aSr=o("speech_to_text"),nSr=o(" \u2014 "),lK=a("a"),sSr=o("TFSpeech2TextForConditionalGeneration"),lSr=o(" (Speech2Text model)"),iSr=l(),F(i0.$$.fragment),wOe=l(),Gc=a("h2"),d0=a("a"),NCe=a("span"),F(Fx.$$.fragment),dSr=l(),qCe=a("span"),cSr=o("FlaxAutoModel"),AOe=l(),gr=a("div"),F(Tx.$$.fragment),mSr=l(),Oc=a("p"),fSr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),iK=a("a"),gSr=o("from_pretrained()"),hSr=o(" class method or the "),dK=a("a"),uSr=o("from_config()"),pSr=o(` class
method.`),_Sr=l(),Mx=a("p"),bSr=o("This class cannot be instantiated directly using "),jCe=a("code"),vSr=o("__init__()"),FSr=o(" (throws an error)."),TSr=l(),Xt=a("div"),F(Ex.$$.fragment),MSr=l(),DCe=a("p"),ESr=o("Instantiates one of the base model classes of the library from a configuration."),CSr=l(),Vc=a("p"),wSr=o(`Note:
Loading a model from its configuration file does `),GCe=a("strong"),ASr=o("not"),LSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cK=a("a"),ySr=o("from_pretrained()"),xSr=o(" to load the model weights."),$Sr=l(),F(c0.$$.fragment),kSr=l(),Gr=a("div"),F(Cx.$$.fragment),SSr=l(),OCe=a("p"),RSr=o("Instantiate one of the base model classes of the library from a pretrained model."),PSr=l(),vn=a("p"),BSr=o("The model class to instantiate is selected based on the "),VCe=a("code"),ISr=o("model_type"),NSr=o(` property of the config object (either
passed as an argument or loaded from `),XCe=a("code"),qSr=o("pretrained_model_name_or_path"),jSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zCe=a("code"),DSr=o("pretrained_model_name_or_path"),GSr=o(":"),OSr=l(),oe=a("ul"),m0=a("li"),WCe=a("strong"),VSr=o("albert"),XSr=o(" \u2014 "),mK=a("a"),zSr=o("FlaxAlbertModel"),WSr=o(" (ALBERT model)"),QSr=l(),f0=a("li"),QCe=a("strong"),HSr=o("bart"),USr=o(" \u2014 "),fK=a("a"),JSr=o("FlaxBartModel"),YSr=o(" (BART model)"),KSr=l(),g0=a("li"),HCe=a("strong"),ZSr=o("beit"),eRr=o(" \u2014 "),gK=a("a"),oRr=o("FlaxBeitModel"),rRr=o(" (BEiT model)"),tRr=l(),h0=a("li"),UCe=a("strong"),aRr=o("bert"),nRr=o(" \u2014 "),hK=a("a"),sRr=o("FlaxBertModel"),lRr=o(" (BERT model)"),iRr=l(),u0=a("li"),JCe=a("strong"),dRr=o("big_bird"),cRr=o(" \u2014 "),uK=a("a"),mRr=o("FlaxBigBirdModel"),fRr=o(" (BigBird model)"),gRr=l(),p0=a("li"),YCe=a("strong"),hRr=o("blenderbot"),uRr=o(" \u2014 "),pK=a("a"),pRr=o("FlaxBlenderbotModel"),_Rr=o(" (Blenderbot model)"),bRr=l(),_0=a("li"),KCe=a("strong"),vRr=o("blenderbot-small"),FRr=o(" \u2014 "),_K=a("a"),TRr=o("FlaxBlenderbotSmallModel"),MRr=o(" (BlenderbotSmall model)"),ERr=l(),b0=a("li"),ZCe=a("strong"),CRr=o("clip"),wRr=o(" \u2014 "),bK=a("a"),ARr=o("FlaxCLIPModel"),LRr=o(" (CLIP model)"),yRr=l(),v0=a("li"),e5e=a("strong"),xRr=o("distilbert"),$Rr=o(" \u2014 "),vK=a("a"),kRr=o("FlaxDistilBertModel"),SRr=o(" (DistilBERT model)"),RRr=l(),F0=a("li"),o5e=a("strong"),PRr=o("electra"),BRr=o(" \u2014 "),FK=a("a"),IRr=o("FlaxElectraModel"),NRr=o(" (ELECTRA model)"),qRr=l(),T0=a("li"),r5e=a("strong"),jRr=o("gpt2"),DRr=o(" \u2014 "),TK=a("a"),GRr=o("FlaxGPT2Model"),ORr=o(" (OpenAI GPT-2 model)"),VRr=l(),M0=a("li"),t5e=a("strong"),XRr=o("gpt_neo"),zRr=o(" \u2014 "),MK=a("a"),WRr=o("FlaxGPTNeoModel"),QRr=o(" (GPT Neo model)"),HRr=l(),E0=a("li"),a5e=a("strong"),URr=o("gptj"),JRr=o(" \u2014 "),EK=a("a"),YRr=o("FlaxGPTJModel"),KRr=o(" (GPT-J model)"),ZRr=l(),C0=a("li"),n5e=a("strong"),ePr=o("longt5"),oPr=o(" \u2014 "),CK=a("a"),rPr=o("FlaxLongT5Model"),tPr=o(" (LongT5 model)"),aPr=l(),w0=a("li"),s5e=a("strong"),nPr=o("marian"),sPr=o(" \u2014 "),wK=a("a"),lPr=o("FlaxMarianModel"),iPr=o(" (Marian model)"),dPr=l(),A0=a("li"),l5e=a("strong"),cPr=o("mbart"),mPr=o(" \u2014 "),AK=a("a"),fPr=o("FlaxMBartModel"),gPr=o(" (mBART model)"),hPr=l(),L0=a("li"),i5e=a("strong"),uPr=o("mt5"),pPr=o(" \u2014 "),LK=a("a"),_Pr=o("FlaxMT5Model"),bPr=o(" (MT5 model)"),vPr=l(),y0=a("li"),d5e=a("strong"),FPr=o("opt"),TPr=o(" \u2014 "),yK=a("a"),MPr=o("FlaxOPTModel"),EPr=o(" (OPT model)"),CPr=l(),x0=a("li"),c5e=a("strong"),wPr=o("pegasus"),APr=o(" \u2014 "),xK=a("a"),LPr=o("FlaxPegasusModel"),yPr=o(" (Pegasus model)"),xPr=l(),$0=a("li"),m5e=a("strong"),$Pr=o("roberta"),kPr=o(" \u2014 "),$K=a("a"),SPr=o("FlaxRobertaModel"),RPr=o(" (RoBERTa model)"),PPr=l(),k0=a("li"),f5e=a("strong"),BPr=o("roformer"),IPr=o(" \u2014 "),kK=a("a"),NPr=o("FlaxRoFormerModel"),qPr=o(" (RoFormer model)"),jPr=l(),S0=a("li"),g5e=a("strong"),DPr=o("t5"),GPr=o(" \u2014 "),SK=a("a"),OPr=o("FlaxT5Model"),VPr=o(" (T5 model)"),XPr=l(),R0=a("li"),h5e=a("strong"),zPr=o("vision-text-dual-encoder"),WPr=o(" \u2014 "),RK=a("a"),QPr=o("FlaxVisionTextDualEncoderModel"),HPr=o(" (VisionTextDualEncoder model)"),UPr=l(),P0=a("li"),u5e=a("strong"),JPr=o("vit"),YPr=o(" \u2014 "),PK=a("a"),KPr=o("FlaxViTModel"),ZPr=o(" (ViT model)"),eBr=l(),B0=a("li"),p5e=a("strong"),oBr=o("wav2vec2"),rBr=o(" \u2014 "),BK=a("a"),tBr=o("FlaxWav2Vec2Model"),aBr=o(" (Wav2Vec2 model)"),nBr=l(),I0=a("li"),_5e=a("strong"),sBr=o("xglm"),lBr=o(" \u2014 "),IK=a("a"),iBr=o("FlaxXGLMModel"),dBr=o(" (XGLM model)"),cBr=l(),N0=a("li"),b5e=a("strong"),mBr=o("xlm-roberta"),fBr=o(" \u2014 "),NK=a("a"),gBr=o("FlaxXLMRobertaModel"),hBr=o(" (XLM-RoBERTa model)"),uBr=l(),F(q0.$$.fragment),LOe=l(),Xc=a("h2"),j0=a("a"),v5e=a("span"),F(wx.$$.fragment),pBr=l(),F5e=a("span"),_Br=o("FlaxAutoModelForCausalLM"),yOe=l(),hr=a("div"),F(Ax.$$.fragment),bBr=l(),zc=a("p"),vBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),qK=a("a"),FBr=o("from_pretrained()"),TBr=o(" class method or the "),jK=a("a"),MBr=o("from_config()"),EBr=o(` class
method.`),CBr=l(),Lx=a("p"),wBr=o("This class cannot be instantiated directly using "),T5e=a("code"),ABr=o("__init__()"),LBr=o(" (throws an error)."),yBr=l(),zt=a("div"),F(yx.$$.fragment),xBr=l(),M5e=a("p"),$Br=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),kBr=l(),Wc=a("p"),SBr=o(`Note:
Loading a model from its configuration file does `),E5e=a("strong"),RBr=o("not"),PBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DK=a("a"),BBr=o("from_pretrained()"),IBr=o(" to load the model weights."),NBr=l(),F(D0.$$.fragment),qBr=l(),Or=a("div"),F(xx.$$.fragment),jBr=l(),C5e=a("p"),DBr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),GBr=l(),Fn=a("p"),OBr=o("The model class to instantiate is selected based on the "),w5e=a("code"),VBr=o("model_type"),XBr=o(` property of the config object (either
passed as an argument or loaded from `),A5e=a("code"),zBr=o("pretrained_model_name_or_path"),WBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L5e=a("code"),QBr=o("pretrained_model_name_or_path"),HBr=o(":"),UBr=l(),xe=a("ul"),G0=a("li"),y5e=a("strong"),JBr=o("bart"),YBr=o(" \u2014 "),GK=a("a"),KBr=o("FlaxBartForCausalLM"),ZBr=o(" (BART model)"),eIr=l(),O0=a("li"),x5e=a("strong"),oIr=o("bert"),rIr=o(" \u2014 "),OK=a("a"),tIr=o("FlaxBertForCausalLM"),aIr=o(" (BERT model)"),nIr=l(),V0=a("li"),$5e=a("strong"),sIr=o("big_bird"),lIr=o(" \u2014 "),VK=a("a"),iIr=o("FlaxBigBirdForCausalLM"),dIr=o(" (BigBird model)"),cIr=l(),X0=a("li"),k5e=a("strong"),mIr=o("electra"),fIr=o(" \u2014 "),XK=a("a"),gIr=o("FlaxElectraForCausalLM"),hIr=o(" (ELECTRA model)"),uIr=l(),z0=a("li"),S5e=a("strong"),pIr=o("gpt2"),_Ir=o(" \u2014 "),zK=a("a"),bIr=o("FlaxGPT2LMHeadModel"),vIr=o(" (OpenAI GPT-2 model)"),FIr=l(),W0=a("li"),R5e=a("strong"),TIr=o("gpt_neo"),MIr=o(" \u2014 "),WK=a("a"),EIr=o("FlaxGPTNeoForCausalLM"),CIr=o(" (GPT Neo model)"),wIr=l(),Q0=a("li"),P5e=a("strong"),AIr=o("gptj"),LIr=o(" \u2014 "),QK=a("a"),yIr=o("FlaxGPTJForCausalLM"),xIr=o(" (GPT-J model)"),$Ir=l(),H0=a("li"),B5e=a("strong"),kIr=o("opt"),SIr=o(" \u2014 "),HK=a("a"),RIr=o("FlaxOPTForCausalLM"),PIr=o(" (OPT model)"),BIr=l(),U0=a("li"),I5e=a("strong"),IIr=o("roberta"),NIr=o(" \u2014 "),UK=a("a"),qIr=o("FlaxRobertaForCausalLM"),jIr=o(" (RoBERTa model)"),DIr=l(),J0=a("li"),N5e=a("strong"),GIr=o("xglm"),OIr=o(" \u2014 "),JK=a("a"),VIr=o("FlaxXGLMForCausalLM"),XIr=o(" (XGLM model)"),zIr=l(),F(Y0.$$.fragment),xOe=l(),Qc=a("h2"),K0=a("a"),q5e=a("span"),F($x.$$.fragment),WIr=l(),j5e=a("span"),QIr=o("FlaxAutoModelForPreTraining"),$Oe=l(),ur=a("div"),F(kx.$$.fragment),HIr=l(),Hc=a("p"),UIr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),YK=a("a"),JIr=o("from_pretrained()"),YIr=o(" class method or the "),KK=a("a"),KIr=o("from_config()"),ZIr=o(` class
method.`),eNr=l(),Sx=a("p"),oNr=o("This class cannot be instantiated directly using "),D5e=a("code"),rNr=o("__init__()"),tNr=o(" (throws an error)."),aNr=l(),Wt=a("div"),F(Rx.$$.fragment),nNr=l(),G5e=a("p"),sNr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),lNr=l(),Uc=a("p"),iNr=o(`Note:
Loading a model from its configuration file does `),O5e=a("strong"),dNr=o("not"),cNr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZK=a("a"),mNr=o("from_pretrained()"),fNr=o(" to load the model weights."),gNr=l(),F(Z0.$$.fragment),hNr=l(),Vr=a("div"),F(Px.$$.fragment),uNr=l(),V5e=a("p"),pNr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),_Nr=l(),Tn=a("p"),bNr=o("The model class to instantiate is selected based on the "),X5e=a("code"),vNr=o("model_type"),FNr=o(` property of the config object (either
passed as an argument or loaded from `),z5e=a("code"),TNr=o("pretrained_model_name_or_path"),MNr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W5e=a("code"),ENr=o("pretrained_model_name_or_path"),CNr=o(":"),wNr=l(),Ee=a("ul"),ew=a("li"),Q5e=a("strong"),ANr=o("albert"),LNr=o(" \u2014 "),eZ=a("a"),yNr=o("FlaxAlbertForPreTraining"),xNr=o(" (ALBERT model)"),$Nr=l(),ow=a("li"),H5e=a("strong"),kNr=o("bart"),SNr=o(" \u2014 "),oZ=a("a"),RNr=o("FlaxBartForConditionalGeneration"),PNr=o(" (BART model)"),BNr=l(),rw=a("li"),U5e=a("strong"),INr=o("bert"),NNr=o(" \u2014 "),rZ=a("a"),qNr=o("FlaxBertForPreTraining"),jNr=o(" (BERT model)"),DNr=l(),tw=a("li"),J5e=a("strong"),GNr=o("big_bird"),ONr=o(" \u2014 "),tZ=a("a"),VNr=o("FlaxBigBirdForPreTraining"),XNr=o(" (BigBird model)"),zNr=l(),aw=a("li"),Y5e=a("strong"),WNr=o("electra"),QNr=o(" \u2014 "),aZ=a("a"),HNr=o("FlaxElectraForPreTraining"),UNr=o(" (ELECTRA model)"),JNr=l(),nw=a("li"),K5e=a("strong"),YNr=o("longt5"),KNr=o(" \u2014 "),nZ=a("a"),ZNr=o("FlaxLongT5ForConditionalGeneration"),eqr=o(" (LongT5 model)"),oqr=l(),sw=a("li"),Z5e=a("strong"),rqr=o("mbart"),tqr=o(" \u2014 "),sZ=a("a"),aqr=o("FlaxMBartForConditionalGeneration"),nqr=o(" (mBART model)"),sqr=l(),lw=a("li"),e3e=a("strong"),lqr=o("mt5"),iqr=o(" \u2014 "),lZ=a("a"),dqr=o("FlaxMT5ForConditionalGeneration"),cqr=o(" (MT5 model)"),mqr=l(),iw=a("li"),o3e=a("strong"),fqr=o("roberta"),gqr=o(" \u2014 "),iZ=a("a"),hqr=o("FlaxRobertaForMaskedLM"),uqr=o(" (RoBERTa model)"),pqr=l(),dw=a("li"),r3e=a("strong"),_qr=o("roformer"),bqr=o(" \u2014 "),dZ=a("a"),vqr=o("FlaxRoFormerForMaskedLM"),Fqr=o(" (RoFormer model)"),Tqr=l(),cw=a("li"),t3e=a("strong"),Mqr=o("t5"),Eqr=o(" \u2014 "),cZ=a("a"),Cqr=o("FlaxT5ForConditionalGeneration"),wqr=o(" (T5 model)"),Aqr=l(),mw=a("li"),a3e=a("strong"),Lqr=o("wav2vec2"),yqr=o(" \u2014 "),mZ=a("a"),xqr=o("FlaxWav2Vec2ForPreTraining"),$qr=o(" (Wav2Vec2 model)"),kqr=l(),fw=a("li"),n3e=a("strong"),Sqr=o("xlm-roberta"),Rqr=o(" \u2014 "),fZ=a("a"),Pqr=o("FlaxXLMRobertaForMaskedLM"),Bqr=o(" (XLM-RoBERTa model)"),Iqr=l(),F(gw.$$.fragment),kOe=l(),Jc=a("h2"),hw=a("a"),s3e=a("span"),F(Bx.$$.fragment),Nqr=l(),l3e=a("span"),qqr=o("FlaxAutoModelForMaskedLM"),SOe=l(),pr=a("div"),F(Ix.$$.fragment),jqr=l(),Yc=a("p"),Dqr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),gZ=a("a"),Gqr=o("from_pretrained()"),Oqr=o(" class method or the "),hZ=a("a"),Vqr=o("from_config()"),Xqr=o(` class
method.`),zqr=l(),Nx=a("p"),Wqr=o("This class cannot be instantiated directly using "),i3e=a("code"),Qqr=o("__init__()"),Hqr=o(" (throws an error)."),Uqr=l(),Qt=a("div"),F(qx.$$.fragment),Jqr=l(),d3e=a("p"),Yqr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Kqr=l(),Kc=a("p"),Zqr=o(`Note:
Loading a model from its configuration file does `),c3e=a("strong"),ejr=o("not"),ojr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uZ=a("a"),rjr=o("from_pretrained()"),tjr=o(" to load the model weights."),ajr=l(),F(uw.$$.fragment),njr=l(),Xr=a("div"),F(jx.$$.fragment),sjr=l(),m3e=a("p"),ljr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),ijr=l(),Mn=a("p"),djr=o("The model class to instantiate is selected based on the "),f3e=a("code"),cjr=o("model_type"),mjr=o(` property of the config object (either
passed as an argument or loaded from `),g3e=a("code"),fjr=o("pretrained_model_name_or_path"),gjr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h3e=a("code"),hjr=o("pretrained_model_name_or_path"),ujr=o(":"),pjr=l(),$e=a("ul"),pw=a("li"),u3e=a("strong"),_jr=o("albert"),bjr=o(" \u2014 "),pZ=a("a"),vjr=o("FlaxAlbertForMaskedLM"),Fjr=o(" (ALBERT model)"),Tjr=l(),_w=a("li"),p3e=a("strong"),Mjr=o("bart"),Ejr=o(" \u2014 "),_Z=a("a"),Cjr=o("FlaxBartForConditionalGeneration"),wjr=o(" (BART model)"),Ajr=l(),bw=a("li"),_3e=a("strong"),Ljr=o("bert"),yjr=o(" \u2014 "),bZ=a("a"),xjr=o("FlaxBertForMaskedLM"),$jr=o(" (BERT model)"),kjr=l(),vw=a("li"),b3e=a("strong"),Sjr=o("big_bird"),Rjr=o(" \u2014 "),vZ=a("a"),Pjr=o("FlaxBigBirdForMaskedLM"),Bjr=o(" (BigBird model)"),Ijr=l(),Fw=a("li"),v3e=a("strong"),Njr=o("distilbert"),qjr=o(" \u2014 "),FZ=a("a"),jjr=o("FlaxDistilBertForMaskedLM"),Djr=o(" (DistilBERT model)"),Gjr=l(),Tw=a("li"),F3e=a("strong"),Ojr=o("electra"),Vjr=o(" \u2014 "),TZ=a("a"),Xjr=o("FlaxElectraForMaskedLM"),zjr=o(" (ELECTRA model)"),Wjr=l(),Mw=a("li"),T3e=a("strong"),Qjr=o("mbart"),Hjr=o(" \u2014 "),MZ=a("a"),Ujr=o("FlaxMBartForConditionalGeneration"),Jjr=o(" (mBART model)"),Yjr=l(),Ew=a("li"),M3e=a("strong"),Kjr=o("roberta"),Zjr=o(" \u2014 "),EZ=a("a"),eDr=o("FlaxRobertaForMaskedLM"),oDr=o(" (RoBERTa model)"),rDr=l(),Cw=a("li"),E3e=a("strong"),tDr=o("roformer"),aDr=o(" \u2014 "),CZ=a("a"),nDr=o("FlaxRoFormerForMaskedLM"),sDr=o(" (RoFormer model)"),lDr=l(),ww=a("li"),C3e=a("strong"),iDr=o("xlm-roberta"),dDr=o(" \u2014 "),wZ=a("a"),cDr=o("FlaxXLMRobertaForMaskedLM"),mDr=o(" (XLM-RoBERTa model)"),fDr=l(),F(Aw.$$.fragment),ROe=l(),Zc=a("h2"),Lw=a("a"),w3e=a("span"),F(Dx.$$.fragment),gDr=l(),A3e=a("span"),hDr=o("FlaxAutoModelForSeq2SeqLM"),POe=l(),_r=a("div"),F(Gx.$$.fragment),uDr=l(),em=a("p"),pDr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),AZ=a("a"),_Dr=o("from_pretrained()"),bDr=o(" class method or the "),LZ=a("a"),vDr=o("from_config()"),FDr=o(` class
method.`),TDr=l(),Ox=a("p"),MDr=o("This class cannot be instantiated directly using "),L3e=a("code"),EDr=o("__init__()"),CDr=o(" (throws an error)."),wDr=l(),Ht=a("div"),F(Vx.$$.fragment),ADr=l(),y3e=a("p"),LDr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),yDr=l(),om=a("p"),xDr=o(`Note:
Loading a model from its configuration file does `),x3e=a("strong"),$Dr=o("not"),kDr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yZ=a("a"),SDr=o("from_pretrained()"),RDr=o(" to load the model weights."),PDr=l(),F(yw.$$.fragment),BDr=l(),zr=a("div"),F(Xx.$$.fragment),IDr=l(),$3e=a("p"),NDr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),qDr=l(),En=a("p"),jDr=o("The model class to instantiate is selected based on the "),k3e=a("code"),DDr=o("model_type"),GDr=o(` property of the config object (either
passed as an argument or loaded from `),S3e=a("code"),ODr=o("pretrained_model_name_or_path"),VDr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R3e=a("code"),XDr=o("pretrained_model_name_or_path"),zDr=o(":"),WDr=l(),ke=a("ul"),xw=a("li"),P3e=a("strong"),QDr=o("bart"),HDr=o(" \u2014 "),xZ=a("a"),UDr=o("FlaxBartForConditionalGeneration"),JDr=o(" (BART model)"),YDr=l(),$w=a("li"),B3e=a("strong"),KDr=o("blenderbot"),ZDr=o(" \u2014 "),$Z=a("a"),eGr=o("FlaxBlenderbotForConditionalGeneration"),oGr=o(" (Blenderbot model)"),rGr=l(),kw=a("li"),I3e=a("strong"),tGr=o("blenderbot-small"),aGr=o(" \u2014 "),kZ=a("a"),nGr=o("FlaxBlenderbotSmallForConditionalGeneration"),sGr=o(" (BlenderbotSmall model)"),lGr=l(),Sw=a("li"),N3e=a("strong"),iGr=o("encoder-decoder"),dGr=o(" \u2014 "),SZ=a("a"),cGr=o("FlaxEncoderDecoderModel"),mGr=o(" (Encoder decoder model)"),fGr=l(),Rw=a("li"),q3e=a("strong"),gGr=o("longt5"),hGr=o(" \u2014 "),RZ=a("a"),uGr=o("FlaxLongT5ForConditionalGeneration"),pGr=o(" (LongT5 model)"),_Gr=l(),Pw=a("li"),j3e=a("strong"),bGr=o("marian"),vGr=o(" \u2014 "),PZ=a("a"),FGr=o("FlaxMarianMTModel"),TGr=o(" (Marian model)"),MGr=l(),Bw=a("li"),D3e=a("strong"),EGr=o("mbart"),CGr=o(" \u2014 "),BZ=a("a"),wGr=o("FlaxMBartForConditionalGeneration"),AGr=o(" (mBART model)"),LGr=l(),Iw=a("li"),G3e=a("strong"),yGr=o("mt5"),xGr=o(" \u2014 "),IZ=a("a"),$Gr=o("FlaxMT5ForConditionalGeneration"),kGr=o(" (MT5 model)"),SGr=l(),Nw=a("li"),O3e=a("strong"),RGr=o("pegasus"),PGr=o(" \u2014 "),NZ=a("a"),BGr=o("FlaxPegasusForConditionalGeneration"),IGr=o(" (Pegasus model)"),NGr=l(),qw=a("li"),V3e=a("strong"),qGr=o("t5"),jGr=o(" \u2014 "),qZ=a("a"),DGr=o("FlaxT5ForConditionalGeneration"),GGr=o(" (T5 model)"),OGr=l(),F(jw.$$.fragment),BOe=l(),rm=a("h2"),Dw=a("a"),X3e=a("span"),F(zx.$$.fragment),VGr=l(),z3e=a("span"),XGr=o("FlaxAutoModelForSequenceClassification"),IOe=l(),br=a("div"),F(Wx.$$.fragment),zGr=l(),tm=a("p"),WGr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),jZ=a("a"),QGr=o("from_pretrained()"),HGr=o(" class method or the "),DZ=a("a"),UGr=o("from_config()"),JGr=o(` class
method.`),YGr=l(),Qx=a("p"),KGr=o("This class cannot be instantiated directly using "),W3e=a("code"),ZGr=o("__init__()"),eOr=o(" (throws an error)."),oOr=l(),Ut=a("div"),F(Hx.$$.fragment),rOr=l(),Q3e=a("p"),tOr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),aOr=l(),am=a("p"),nOr=o(`Note:
Loading a model from its configuration file does `),H3e=a("strong"),sOr=o("not"),lOr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GZ=a("a"),iOr=o("from_pretrained()"),dOr=o(" to load the model weights."),cOr=l(),F(Gw.$$.fragment),mOr=l(),Wr=a("div"),F(Ux.$$.fragment),fOr=l(),U3e=a("p"),gOr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),hOr=l(),Cn=a("p"),uOr=o("The model class to instantiate is selected based on the "),J3e=a("code"),pOr=o("model_type"),_Or=o(` property of the config object (either
passed as an argument or loaded from `),Y3e=a("code"),bOr=o("pretrained_model_name_or_path"),vOr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K3e=a("code"),FOr=o("pretrained_model_name_or_path"),TOr=o(":"),MOr=l(),Se=a("ul"),Ow=a("li"),Z3e=a("strong"),EOr=o("albert"),COr=o(" \u2014 "),OZ=a("a"),wOr=o("FlaxAlbertForSequenceClassification"),AOr=o(" (ALBERT model)"),LOr=l(),Vw=a("li"),e0e=a("strong"),yOr=o("bart"),xOr=o(" \u2014 "),VZ=a("a"),$Or=o("FlaxBartForSequenceClassification"),kOr=o(" (BART model)"),SOr=l(),Xw=a("li"),o0e=a("strong"),ROr=o("bert"),POr=o(" \u2014 "),XZ=a("a"),BOr=o("FlaxBertForSequenceClassification"),IOr=o(" (BERT model)"),NOr=l(),zw=a("li"),r0e=a("strong"),qOr=o("big_bird"),jOr=o(" \u2014 "),zZ=a("a"),DOr=o("FlaxBigBirdForSequenceClassification"),GOr=o(" (BigBird model)"),OOr=l(),Ww=a("li"),t0e=a("strong"),VOr=o("distilbert"),XOr=o(" \u2014 "),WZ=a("a"),zOr=o("FlaxDistilBertForSequenceClassification"),WOr=o(" (DistilBERT model)"),QOr=l(),Qw=a("li"),a0e=a("strong"),HOr=o("electra"),UOr=o(" \u2014 "),QZ=a("a"),JOr=o("FlaxElectraForSequenceClassification"),YOr=o(" (ELECTRA model)"),KOr=l(),Hw=a("li"),n0e=a("strong"),ZOr=o("mbart"),eVr=o(" \u2014 "),HZ=a("a"),oVr=o("FlaxMBartForSequenceClassification"),rVr=o(" (mBART model)"),tVr=l(),Uw=a("li"),s0e=a("strong"),aVr=o("roberta"),nVr=o(" \u2014 "),UZ=a("a"),sVr=o("FlaxRobertaForSequenceClassification"),lVr=o(" (RoBERTa model)"),iVr=l(),Jw=a("li"),l0e=a("strong"),dVr=o("roformer"),cVr=o(" \u2014 "),JZ=a("a"),mVr=o("FlaxRoFormerForSequenceClassification"),fVr=o(" (RoFormer model)"),gVr=l(),Yw=a("li"),i0e=a("strong"),hVr=o("xlm-roberta"),uVr=o(" \u2014 "),YZ=a("a"),pVr=o("FlaxXLMRobertaForSequenceClassification"),_Vr=o(" (XLM-RoBERTa model)"),bVr=l(),F(Kw.$$.fragment),NOe=l(),nm=a("h2"),Zw=a("a"),d0e=a("span"),F(Jx.$$.fragment),vVr=l(),c0e=a("span"),FVr=o("FlaxAutoModelForQuestionAnswering"),qOe=l(),vr=a("div"),F(Yx.$$.fragment),TVr=l(),sm=a("p"),MVr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),KZ=a("a"),EVr=o("from_pretrained()"),CVr=o(" class method or the "),ZZ=a("a"),wVr=o("from_config()"),AVr=o(` class
method.`),LVr=l(),Kx=a("p"),yVr=o("This class cannot be instantiated directly using "),m0e=a("code"),xVr=o("__init__()"),$Vr=o(" (throws an error)."),kVr=l(),Jt=a("div"),F(Zx.$$.fragment),SVr=l(),f0e=a("p"),RVr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),PVr=l(),lm=a("p"),BVr=o(`Note:
Loading a model from its configuration file does `),g0e=a("strong"),IVr=o("not"),NVr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eee=a("a"),qVr=o("from_pretrained()"),jVr=o(" to load the model weights."),DVr=l(),F(eA.$$.fragment),GVr=l(),Qr=a("div"),F(e$.$$.fragment),OVr=l(),h0e=a("p"),VVr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),XVr=l(),wn=a("p"),zVr=o("The model class to instantiate is selected based on the "),u0e=a("code"),WVr=o("model_type"),QVr=o(` property of the config object (either
passed as an argument or loaded from `),p0e=a("code"),HVr=o("pretrained_model_name_or_path"),UVr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_0e=a("code"),JVr=o("pretrained_model_name_or_path"),YVr=o(":"),KVr=l(),Re=a("ul"),oA=a("li"),b0e=a("strong"),ZVr=o("albert"),eXr=o(" \u2014 "),oee=a("a"),oXr=o("FlaxAlbertForQuestionAnswering"),rXr=o(" (ALBERT model)"),tXr=l(),rA=a("li"),v0e=a("strong"),aXr=o("bart"),nXr=o(" \u2014 "),ree=a("a"),sXr=o("FlaxBartForQuestionAnswering"),lXr=o(" (BART model)"),iXr=l(),tA=a("li"),F0e=a("strong"),dXr=o("bert"),cXr=o(" \u2014 "),tee=a("a"),mXr=o("FlaxBertForQuestionAnswering"),fXr=o(" (BERT model)"),gXr=l(),aA=a("li"),T0e=a("strong"),hXr=o("big_bird"),uXr=o(" \u2014 "),aee=a("a"),pXr=o("FlaxBigBirdForQuestionAnswering"),_Xr=o(" (BigBird model)"),bXr=l(),nA=a("li"),M0e=a("strong"),vXr=o("distilbert"),FXr=o(" \u2014 "),nee=a("a"),TXr=o("FlaxDistilBertForQuestionAnswering"),MXr=o(" (DistilBERT model)"),EXr=l(),sA=a("li"),E0e=a("strong"),CXr=o("electra"),wXr=o(" \u2014 "),see=a("a"),AXr=o("FlaxElectraForQuestionAnswering"),LXr=o(" (ELECTRA model)"),yXr=l(),lA=a("li"),C0e=a("strong"),xXr=o("mbart"),$Xr=o(" \u2014 "),lee=a("a"),kXr=o("FlaxMBartForQuestionAnswering"),SXr=o(" (mBART model)"),RXr=l(),iA=a("li"),w0e=a("strong"),PXr=o("roberta"),BXr=o(" \u2014 "),iee=a("a"),IXr=o("FlaxRobertaForQuestionAnswering"),NXr=o(" (RoBERTa model)"),qXr=l(),dA=a("li"),A0e=a("strong"),jXr=o("roformer"),DXr=o(" \u2014 "),dee=a("a"),GXr=o("FlaxRoFormerForQuestionAnswering"),OXr=o(" (RoFormer model)"),VXr=l(),cA=a("li"),L0e=a("strong"),XXr=o("xlm-roberta"),zXr=o(" \u2014 "),cee=a("a"),WXr=o("FlaxXLMRobertaForQuestionAnswering"),QXr=o(" (XLM-RoBERTa model)"),HXr=l(),F(mA.$$.fragment),jOe=l(),im=a("h2"),fA=a("a"),y0e=a("span"),F(o$.$$.fragment),UXr=l(),x0e=a("span"),JXr=o("FlaxAutoModelForTokenClassification"),DOe=l(),Fr=a("div"),F(r$.$$.fragment),YXr=l(),dm=a("p"),KXr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),mee=a("a"),ZXr=o("from_pretrained()"),ezr=o(" class method or the "),fee=a("a"),ozr=o("from_config()"),rzr=o(` class
method.`),tzr=l(),t$=a("p"),azr=o("This class cannot be instantiated directly using "),$0e=a("code"),nzr=o("__init__()"),szr=o(" (throws an error)."),lzr=l(),Yt=a("div"),F(a$.$$.fragment),izr=l(),k0e=a("p"),dzr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),czr=l(),cm=a("p"),mzr=o(`Note:
Loading a model from its configuration file does `),S0e=a("strong"),fzr=o("not"),gzr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gee=a("a"),hzr=o("from_pretrained()"),uzr=o(" to load the model weights."),pzr=l(),F(gA.$$.fragment),_zr=l(),Hr=a("div"),F(n$.$$.fragment),bzr=l(),R0e=a("p"),vzr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Fzr=l(),An=a("p"),Tzr=o("The model class to instantiate is selected based on the "),P0e=a("code"),Mzr=o("model_type"),Ezr=o(` property of the config object (either
passed as an argument or loaded from `),B0e=a("code"),Czr=o("pretrained_model_name_or_path"),wzr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I0e=a("code"),Azr=o("pretrained_model_name_or_path"),Lzr=o(":"),yzr=l(),Ve=a("ul"),hA=a("li"),N0e=a("strong"),xzr=o("albert"),$zr=o(" \u2014 "),hee=a("a"),kzr=o("FlaxAlbertForTokenClassification"),Szr=o(" (ALBERT model)"),Rzr=l(),uA=a("li"),q0e=a("strong"),Pzr=o("bert"),Bzr=o(" \u2014 "),uee=a("a"),Izr=o("FlaxBertForTokenClassification"),Nzr=o(" (BERT model)"),qzr=l(),pA=a("li"),j0e=a("strong"),jzr=o("big_bird"),Dzr=o(" \u2014 "),pee=a("a"),Gzr=o("FlaxBigBirdForTokenClassification"),Ozr=o(" (BigBird model)"),Vzr=l(),_A=a("li"),D0e=a("strong"),Xzr=o("distilbert"),zzr=o(" \u2014 "),_ee=a("a"),Wzr=o("FlaxDistilBertForTokenClassification"),Qzr=o(" (DistilBERT model)"),Hzr=l(),bA=a("li"),G0e=a("strong"),Uzr=o("electra"),Jzr=o(" \u2014 "),bee=a("a"),Yzr=o("FlaxElectraForTokenClassification"),Kzr=o(" (ELECTRA model)"),Zzr=l(),vA=a("li"),O0e=a("strong"),eWr=o("roberta"),oWr=o(" \u2014 "),vee=a("a"),rWr=o("FlaxRobertaForTokenClassification"),tWr=o(" (RoBERTa model)"),aWr=l(),FA=a("li"),V0e=a("strong"),nWr=o("roformer"),sWr=o(" \u2014 "),Fee=a("a"),lWr=o("FlaxRoFormerForTokenClassification"),iWr=o(" (RoFormer model)"),dWr=l(),TA=a("li"),X0e=a("strong"),cWr=o("xlm-roberta"),mWr=o(" \u2014 "),Tee=a("a"),fWr=o("FlaxXLMRobertaForTokenClassification"),gWr=o(" (XLM-RoBERTa model)"),hWr=l(),F(MA.$$.fragment),GOe=l(),mm=a("h2"),EA=a("a"),z0e=a("span"),F(s$.$$.fragment),uWr=l(),W0e=a("span"),pWr=o("FlaxAutoModelForMultipleChoice"),OOe=l(),Tr=a("div"),F(l$.$$.fragment),_Wr=l(),fm=a("p"),bWr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Mee=a("a"),vWr=o("from_pretrained()"),FWr=o(" class method or the "),Eee=a("a"),TWr=o("from_config()"),MWr=o(` class
method.`),EWr=l(),i$=a("p"),CWr=o("This class cannot be instantiated directly using "),Q0e=a("code"),wWr=o("__init__()"),AWr=o(" (throws an error)."),LWr=l(),Kt=a("div"),F(d$.$$.fragment),yWr=l(),H0e=a("p"),xWr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),$Wr=l(),gm=a("p"),kWr=o(`Note:
Loading a model from its configuration file does `),U0e=a("strong"),SWr=o("not"),RWr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Cee=a("a"),PWr=o("from_pretrained()"),BWr=o(" to load the model weights."),IWr=l(),F(CA.$$.fragment),NWr=l(),Ur=a("div"),F(c$.$$.fragment),qWr=l(),J0e=a("p"),jWr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),DWr=l(),Ln=a("p"),GWr=o("The model class to instantiate is selected based on the "),Y0e=a("code"),OWr=o("model_type"),VWr=o(` property of the config object (either
passed as an argument or loaded from `),K0e=a("code"),XWr=o("pretrained_model_name_or_path"),zWr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z0e=a("code"),WWr=o("pretrained_model_name_or_path"),QWr=o(":"),HWr=l(),Xe=a("ul"),wA=a("li"),ewe=a("strong"),UWr=o("albert"),JWr=o(" \u2014 "),wee=a("a"),YWr=o("FlaxAlbertForMultipleChoice"),KWr=o(" (ALBERT model)"),ZWr=l(),AA=a("li"),owe=a("strong"),eQr=o("bert"),oQr=o(" \u2014 "),Aee=a("a"),rQr=o("FlaxBertForMultipleChoice"),tQr=o(" (BERT model)"),aQr=l(),LA=a("li"),rwe=a("strong"),nQr=o("big_bird"),sQr=o(" \u2014 "),Lee=a("a"),lQr=o("FlaxBigBirdForMultipleChoice"),iQr=o(" (BigBird model)"),dQr=l(),yA=a("li"),twe=a("strong"),cQr=o("distilbert"),mQr=o(" \u2014 "),yee=a("a"),fQr=o("FlaxDistilBertForMultipleChoice"),gQr=o(" (DistilBERT model)"),hQr=l(),xA=a("li"),awe=a("strong"),uQr=o("electra"),pQr=o(" \u2014 "),xee=a("a"),_Qr=o("FlaxElectraForMultipleChoice"),bQr=o(" (ELECTRA model)"),vQr=l(),$A=a("li"),nwe=a("strong"),FQr=o("roberta"),TQr=o(" \u2014 "),$ee=a("a"),MQr=o("FlaxRobertaForMultipleChoice"),EQr=o(" (RoBERTa model)"),CQr=l(),kA=a("li"),swe=a("strong"),wQr=o("roformer"),AQr=o(" \u2014 "),kee=a("a"),LQr=o("FlaxRoFormerForMultipleChoice"),yQr=o(" (RoFormer model)"),xQr=l(),SA=a("li"),lwe=a("strong"),$Qr=o("xlm-roberta"),kQr=o(" \u2014 "),See=a("a"),SQr=o("FlaxXLMRobertaForMultipleChoice"),RQr=o(" (XLM-RoBERTa model)"),PQr=l(),F(RA.$$.fragment),VOe=l(),hm=a("h2"),PA=a("a"),iwe=a("span"),F(m$.$$.fragment),BQr=l(),dwe=a("span"),IQr=o("FlaxAutoModelForNextSentencePrediction"),XOe=l(),Mr=a("div"),F(f$.$$.fragment),NQr=l(),um=a("p"),qQr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Ree=a("a"),jQr=o("from_pretrained()"),DQr=o(" class method or the "),Pee=a("a"),GQr=o("from_config()"),OQr=o(` class
method.`),VQr=l(),g$=a("p"),XQr=o("This class cannot be instantiated directly using "),cwe=a("code"),zQr=o("__init__()"),WQr=o(" (throws an error)."),QQr=l(),Zt=a("div"),F(h$.$$.fragment),HQr=l(),mwe=a("p"),UQr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),JQr=l(),pm=a("p"),YQr=o(`Note:
Loading a model from its configuration file does `),fwe=a("strong"),KQr=o("not"),ZQr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Bee=a("a"),eHr=o("from_pretrained()"),oHr=o(" to load the model weights."),rHr=l(),F(BA.$$.fragment),tHr=l(),Jr=a("div"),F(u$.$$.fragment),aHr=l(),gwe=a("p"),nHr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),sHr=l(),yn=a("p"),lHr=o("The model class to instantiate is selected based on the "),hwe=a("code"),iHr=o("model_type"),dHr=o(` property of the config object (either
passed as an argument or loaded from `),uwe=a("code"),cHr=o("pretrained_model_name_or_path"),mHr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pwe=a("code"),fHr=o("pretrained_model_name_or_path"),gHr=o(":"),hHr=l(),_we=a("ul"),IA=a("li"),bwe=a("strong"),uHr=o("bert"),pHr=o(" \u2014 "),Iee=a("a"),_Hr=o("FlaxBertForNextSentencePrediction"),bHr=o(" (BERT model)"),vHr=l(),F(NA.$$.fragment),zOe=l(),_m=a("h2"),qA=a("a"),vwe=a("span"),F(p$.$$.fragment),FHr=l(),Fwe=a("span"),THr=o("FlaxAutoModelForImageClassification"),WOe=l(),Er=a("div"),F(_$.$$.fragment),MHr=l(),bm=a("p"),EHr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Nee=a("a"),CHr=o("from_pretrained()"),wHr=o(" class method or the "),qee=a("a"),AHr=o("from_config()"),LHr=o(` class
method.`),yHr=l(),b$=a("p"),xHr=o("This class cannot be instantiated directly using "),Twe=a("code"),$Hr=o("__init__()"),kHr=o(" (throws an error)."),SHr=l(),ea=a("div"),F(v$.$$.fragment),RHr=l(),Mwe=a("p"),PHr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),BHr=l(),vm=a("p"),IHr=o(`Note:
Loading a model from its configuration file does `),Ewe=a("strong"),NHr=o("not"),qHr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jee=a("a"),jHr=o("from_pretrained()"),DHr=o(" to load the model weights."),GHr=l(),F(jA.$$.fragment),OHr=l(),Yr=a("div"),F(F$.$$.fragment),VHr=l(),Cwe=a("p"),XHr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),zHr=l(),xn=a("p"),WHr=o("The model class to instantiate is selected based on the "),wwe=a("code"),QHr=o("model_type"),HHr=o(` property of the config object (either
passed as an argument or loaded from `),Awe=a("code"),UHr=o("pretrained_model_name_or_path"),JHr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lwe=a("code"),YHr=o("pretrained_model_name_or_path"),KHr=o(":"),ZHr=l(),T$=a("ul"),DA=a("li"),ywe=a("strong"),eUr=o("beit"),oUr=o(" \u2014 "),Dee=a("a"),rUr=o("FlaxBeitForImageClassification"),tUr=o(" (BEiT model)"),aUr=l(),GA=a("li"),xwe=a("strong"),nUr=o("vit"),sUr=o(" \u2014 "),Gee=a("a"),lUr=o("FlaxViTForImageClassification"),iUr=o(" (ViT model)"),dUr=l(),F(OA.$$.fragment),QOe=l(),Fm=a("h2"),VA=a("a"),$we=a("span"),F(M$.$$.fragment),cUr=l(),kwe=a("span"),mUr=o("FlaxAutoModelForVision2Seq"),HOe=l(),Cr=a("div"),F(E$.$$.fragment),fUr=l(),Tm=a("p"),gUr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Oee=a("a"),hUr=o("from_pretrained()"),uUr=o(" class method or the "),Vee=a("a"),pUr=o("from_config()"),_Ur=o(` class
method.`),bUr=l(),C$=a("p"),vUr=o("This class cannot be instantiated directly using "),Swe=a("code"),FUr=o("__init__()"),TUr=o(" (throws an error)."),MUr=l(),oa=a("div"),F(w$.$$.fragment),EUr=l(),Rwe=a("p"),CUr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),wUr=l(),Mm=a("p"),AUr=o(`Note:
Loading a model from its configuration file does `),Pwe=a("strong"),LUr=o("not"),yUr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Xee=a("a"),xUr=o("from_pretrained()"),$Ur=o(" to load the model weights."),kUr=l(),F(XA.$$.fragment),SUr=l(),Kr=a("div"),F(A$.$$.fragment),RUr=l(),Bwe=a("p"),PUr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),BUr=l(),$n=a("p"),IUr=o("The model class to instantiate is selected based on the "),Iwe=a("code"),NUr=o("model_type"),qUr=o(` property of the config object (either
passed as an argument or loaded from `),Nwe=a("code"),jUr=o("pretrained_model_name_or_path"),DUr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qwe=a("code"),GUr=o("pretrained_model_name_or_path"),OUr=o(":"),VUr=l(),jwe=a("ul"),zA=a("li"),Dwe=a("strong"),XUr=o("vision-encoder-decoder"),zUr=o(" \u2014 "),zee=a("a"),WUr=o("FlaxVisionEncoderDecoderModel"),QUr=o(" (Vision Encoder decoder model)"),HUr=l(),F(WA.$$.fragment),this.h()},l(m){const _=HNt('[data-svelte="svelte-1phssyn"]',document.head);g=n(_,"META",{name:!0,content:!0}),_.forEach(t),v=i(m),u=n(m,"H1",{class:!0});var L$=s(u);f=n(L$,"A",{id:!0,class:!0,href:!0});var Gwe=s(f);p=n(Gwe,"SPAN",{});var Owe=s(p);T(d.$$.fragment,Owe),Owe.forEach(t),Gwe.forEach(t),h=i(L$),Eo=n(L$,"SPAN",{});var Vwe=s(Eo);Fi=r(Vwe,"Auto Classes"),Vwe.forEach(t),L$.forEach(t),Am=i(m),at=n(m,"P",{});var y$=s(at);Ti=r(y$,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Mi=n(y$,"CODE",{});var Xwe=s(Mi);gy=r(Xwe,"from_pretrained()"),Xwe.forEach(t),Lm=r(y$,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),y$.forEach(t),Oe=i(m),We=n(m,"P",{});var kn=s(We);Ei=r(kn,"Instantiating one of "),Sn=n(kn,"A",{href:!0});var zwe=s(Sn);hy=r(zwe,"AutoConfig"),zwe.forEach(t),Rn=r(kn,", "),Pn=n(kn,"A",{href:!0});var Wwe=s(Pn);uy=r(Wwe,"AutoModel"),Wwe.forEach(t),Ci=r(kn,`, and
`),Bn=n(kn,"A",{href:!0});var Qwe=s(Bn);py=r(Qwe,"AutoTokenizer"),Qwe.forEach(t),wi=r(kn," will directly create a class of the relevant architecture. For instance"),kn.forEach(t),ym=i(m),T(ya.$$.fragment,m),Qe=i(m),Ae=n(m,"P",{});var x$=s(Ae);Vk=r(x$,"will create a model that is an instance of "),Ai=n(x$,"A",{href:!0});var Hwe=s(Ai);Xk=r(Hwe,"BertModel"),Hwe.forEach(t),zk=r(x$,"."),x$.forEach(t),Co=i(m),xa=n(m,"P",{});var $$=s(xa);Wk=r($$,"There is one class of "),xm=n($$,"CODE",{});var Uwe=s(xm);Qk=r(Uwe,"AutoModel"),Uwe.forEach(t),nze=r($$," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),$$.forEach(t),XDe=i(m),Li=n(m,"H2",{class:!0});var k$=s(Li);$m=n(k$,"A",{id:!0,class:!0,href:!0});var Jwe=s($m);Dre=n(Jwe,"SPAN",{});var Ywe=s(Dre);T(_y.$$.fragment,Ywe),Ywe.forEach(t),Jwe.forEach(t),sze=i(k$),Gre=n(k$,"SPAN",{});var Kwe=s(Gre);lze=r(Kwe,"Extending the Auto Classes"),Kwe.forEach(t),k$.forEach(t),zDe=i(m),In=n(m,"P",{});var Em=s(In);ize=r(Em,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Ore=n(Em,"CODE",{});var Zwe=s(Ore);dze=r(Zwe,"NewModel"),Zwe.forEach(t),cze=r(Em,", make sure you have a "),Vre=n(Em,"CODE",{});var eAe=s(Vre);mze=r(eAe,"NewModelConfig"),eAe.forEach(t),fze=r(Em,` then you can add those to the auto
classes like this:`),Em.forEach(t),WDe=i(m),T(by.$$.fragment,m),QDe=i(m),Hk=n(m,"P",{});var oAe=s(Hk);gze=r(oAe,"You will then be able to use the auto classes like you would usually do!"),oAe.forEach(t),HDe=i(m),T(km.$$.fragment,m),UDe=i(m),yi=n(m,"H2",{class:!0});var S$=s(yi);Sm=n(S$,"A",{id:!0,class:!0,href:!0});var rAe=s(Sm);Xre=n(rAe,"SPAN",{});var tAe=s(Xre);T(vy.$$.fragment,tAe),tAe.forEach(t),rAe.forEach(t),hze=i(S$),zre=n(S$,"SPAN",{});var aAe=s(zre);uze=r(aAe,"AutoConfig"),aAe.forEach(t),S$.forEach(t),JDe=i(m),wo=n(m,"DIV",{class:!0});var rt=s(wo);T(Fy.$$.fragment,rt),pze=i(rt),Ty=n(rt,"P",{});var R$=s(Ty);_ze=r(R$,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),Uk=n(R$,"A",{href:!0});var nAe=s(Uk);bze=r(nAe,"from_pretrained()"),nAe.forEach(t),vze=r(R$," class method."),R$.forEach(t),Fze=i(rt),My=n(rt,"P",{});var P$=s(My);Tze=r(P$,"This class cannot be instantiated directly using "),Wre=n(P$,"CODE",{});var sAe=s(Wre);Mze=r(sAe,"__init__()"),sAe.forEach(t),Eze=r(P$," (throws an error)."),P$.forEach(t),Cze=i(rt),wr=n(rt,"DIV",{class:!0});var tt=s(wr);T(Ey.$$.fragment,tt),wze=i(tt),Qre=n(tt,"P",{});var lAe=s(Qre);Aze=r(lAe,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),lAe.forEach(t),Lze=i(tt),xi=n(tt,"P",{});var Cm=s(xi);yze=r(Cm,"The configuration class to instantiate is selected based on the "),Hre=n(Cm,"CODE",{});var iAe=s(Hre);xze=r(iAe,"model_type"),iAe.forEach(t),$ze=r(Cm,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),Ure=n(Cm,"CODE",{});var dAe=s(Ure);kze=r(dAe,"pretrained_model_name_or_path"),dAe.forEach(t),Sze=r(Cm,":"),Cm.forEach(t),Rze=i(tt),A=n(tt,"UL",{});var L=s(A);Rm=n(L,"LI",{});var QA=s(Rm);Jre=n(QA,"STRONG",{});var cAe=s(Jre);Pze=r(cAe,"albert"),cAe.forEach(t),Bze=r(QA," \u2014 "),Jk=n(QA,"A",{href:!0});var mAe=s(Jk);Ize=r(mAe,"AlbertConfig"),mAe.forEach(t),Nze=r(QA," (ALBERT model)"),QA.forEach(t),qze=i(L),Pm=n(L,"LI",{});var HA=s(Pm);Yre=n(HA,"STRONG",{});var fAe=s(Yre);jze=r(fAe,"bart"),fAe.forEach(t),Dze=r(HA," \u2014 "),Yk=n(HA,"A",{href:!0});var gAe=s(Yk);Gze=r(gAe,"BartConfig"),gAe.forEach(t),Oze=r(HA," (BART model)"),HA.forEach(t),Vze=i(L),Bm=n(L,"LI",{});var UA=s(Bm);Kre=n(UA,"STRONG",{});var hAe=s(Kre);Xze=r(hAe,"beit"),hAe.forEach(t),zze=r(UA," \u2014 "),Kk=n(UA,"A",{href:!0});var uAe=s(Kk);Wze=r(uAe,"BeitConfig"),uAe.forEach(t),Qze=r(UA," (BEiT model)"),UA.forEach(t),Hze=i(L),Im=n(L,"LI",{});var JA=s(Im);Zre=n(JA,"STRONG",{});var pAe=s(Zre);Uze=r(pAe,"bert"),pAe.forEach(t),Jze=r(JA," \u2014 "),Zk=n(JA,"A",{href:!0});var _Ae=s(Zk);Yze=r(_Ae,"BertConfig"),_Ae.forEach(t),Kze=r(JA," (BERT model)"),JA.forEach(t),Zze=i(L),Nm=n(L,"LI",{});var YA=s(Nm);ete=n(YA,"STRONG",{});var bAe=s(ete);eWe=r(bAe,"bert-generation"),bAe.forEach(t),oWe=r(YA," \u2014 "),eS=n(YA,"A",{href:!0});var vAe=s(eS);rWe=r(vAe,"BertGenerationConfig"),vAe.forEach(t),tWe=r(YA," (Bert Generation model)"),YA.forEach(t),aWe=i(L),qm=n(L,"LI",{});var KA=s(qm);ote=n(KA,"STRONG",{});var FAe=s(ote);nWe=r(FAe,"big_bird"),FAe.forEach(t),sWe=r(KA," \u2014 "),oS=n(KA,"A",{href:!0});var TAe=s(oS);lWe=r(TAe,"BigBirdConfig"),TAe.forEach(t),iWe=r(KA," (BigBird model)"),KA.forEach(t),dWe=i(L),jm=n(L,"LI",{});var ZA=s(jm);rte=n(ZA,"STRONG",{});var MAe=s(rte);cWe=r(MAe,"bigbird_pegasus"),MAe.forEach(t),mWe=r(ZA," \u2014 "),rS=n(ZA,"A",{href:!0});var EAe=s(rS);fWe=r(EAe,"BigBirdPegasusConfig"),EAe.forEach(t),gWe=r(ZA," (BigBird-Pegasus model)"),ZA.forEach(t),hWe=i(L),Dm=n(L,"LI",{});var e6=s(Dm);tte=n(e6,"STRONG",{});var CAe=s(tte);uWe=r(CAe,"blenderbot"),CAe.forEach(t),pWe=r(e6," \u2014 "),tS=n(e6,"A",{href:!0});var wAe=s(tS);_We=r(wAe,"BlenderbotConfig"),wAe.forEach(t),bWe=r(e6," (Blenderbot model)"),e6.forEach(t),vWe=i(L),Gm=n(L,"LI",{});var o6=s(Gm);ate=n(o6,"STRONG",{});var AAe=s(ate);FWe=r(AAe,"blenderbot-small"),AAe.forEach(t),TWe=r(o6," \u2014 "),aS=n(o6,"A",{href:!0});var LAe=s(aS);MWe=r(LAe,"BlenderbotSmallConfig"),LAe.forEach(t),EWe=r(o6," (BlenderbotSmall model)"),o6.forEach(t),CWe=i(L),Om=n(L,"LI",{});var r6=s(Om);nte=n(r6,"STRONG",{});var yAe=s(nte);wWe=r(yAe,"bloom"),yAe.forEach(t),AWe=r(r6," \u2014 "),nS=n(r6,"A",{href:!0});var xAe=s(nS);LWe=r(xAe,"BloomConfig"),xAe.forEach(t),yWe=r(r6," (BLOOM model)"),r6.forEach(t),xWe=i(L),Vm=n(L,"LI",{});var t6=s(Vm);ste=n(t6,"STRONG",{});var $Ae=s(ste);$We=r($Ae,"camembert"),$Ae.forEach(t),kWe=r(t6," \u2014 "),sS=n(t6,"A",{href:!0});var kAe=s(sS);SWe=r(kAe,"CamembertConfig"),kAe.forEach(t),RWe=r(t6," (CamemBERT model)"),t6.forEach(t),PWe=i(L),Xm=n(L,"LI",{});var a6=s(Xm);lte=n(a6,"STRONG",{});var SAe=s(lte);BWe=r(SAe,"canine"),SAe.forEach(t),IWe=r(a6," \u2014 "),lS=n(a6,"A",{href:!0});var RAe=s(lS);NWe=r(RAe,"CanineConfig"),RAe.forEach(t),qWe=r(a6," (CANINE model)"),a6.forEach(t),jWe=i(L),zm=n(L,"LI",{});var n6=s(zm);ite=n(n6,"STRONG",{});var PAe=s(ite);DWe=r(PAe,"clip"),PAe.forEach(t),GWe=r(n6," \u2014 "),iS=n(n6,"A",{href:!0});var BAe=s(iS);OWe=r(BAe,"CLIPConfig"),BAe.forEach(t),VWe=r(n6," (CLIP model)"),n6.forEach(t),XWe=i(L),Wm=n(L,"LI",{});var s6=s(Wm);dte=n(s6,"STRONG",{});var IAe=s(dte);zWe=r(IAe,"convbert"),IAe.forEach(t),WWe=r(s6," \u2014 "),dS=n(s6,"A",{href:!0});var NAe=s(dS);QWe=r(NAe,"ConvBertConfig"),NAe.forEach(t),HWe=r(s6," (ConvBERT model)"),s6.forEach(t),UWe=i(L),Qm=n(L,"LI",{});var l6=s(Qm);cte=n(l6,"STRONG",{});var qAe=s(cte);JWe=r(qAe,"convnext"),qAe.forEach(t),YWe=r(l6," \u2014 "),cS=n(l6,"A",{href:!0});var jAe=s(cS);KWe=r(jAe,"ConvNextConfig"),jAe.forEach(t),ZWe=r(l6," (ConvNeXT model)"),l6.forEach(t),eQe=i(L),Hm=n(L,"LI",{});var i6=s(Hm);mte=n(i6,"STRONG",{});var DAe=s(mte);oQe=r(DAe,"ctrl"),DAe.forEach(t),rQe=r(i6," \u2014 "),mS=n(i6,"A",{href:!0});var GAe=s(mS);tQe=r(GAe,"CTRLConfig"),GAe.forEach(t),aQe=r(i6," (CTRL model)"),i6.forEach(t),nQe=i(L),Um=n(L,"LI",{});var d6=s(Um);fte=n(d6,"STRONG",{});var OAe=s(fte);sQe=r(OAe,"cvt"),OAe.forEach(t),lQe=r(d6," \u2014 "),fS=n(d6,"A",{href:!0});var VAe=s(fS);iQe=r(VAe,"CvtConfig"),VAe.forEach(t),dQe=r(d6," (CvT model)"),d6.forEach(t),cQe=i(L),Jm=n(L,"LI",{});var c6=s(Jm);gte=n(c6,"STRONG",{});var XAe=s(gte);mQe=r(XAe,"data2vec-audio"),XAe.forEach(t),fQe=r(c6," \u2014 "),gS=n(c6,"A",{href:!0});var zAe=s(gS);gQe=r(zAe,"Data2VecAudioConfig"),zAe.forEach(t),hQe=r(c6," (Data2VecAudio model)"),c6.forEach(t),uQe=i(L),Ym=n(L,"LI",{});var m6=s(Ym);hte=n(m6,"STRONG",{});var WAe=s(hte);pQe=r(WAe,"data2vec-text"),WAe.forEach(t),_Qe=r(m6," \u2014 "),hS=n(m6,"A",{href:!0});var QAe=s(hS);bQe=r(QAe,"Data2VecTextConfig"),QAe.forEach(t),vQe=r(m6," (Data2VecText model)"),m6.forEach(t),FQe=i(L),Km=n(L,"LI",{});var f6=s(Km);ute=n(f6,"STRONG",{});var HAe=s(ute);TQe=r(HAe,"data2vec-vision"),HAe.forEach(t),MQe=r(f6," \u2014 "),uS=n(f6,"A",{href:!0});var UAe=s(uS);EQe=r(UAe,"Data2VecVisionConfig"),UAe.forEach(t),CQe=r(f6," (Data2VecVision model)"),f6.forEach(t),wQe=i(L),Zm=n(L,"LI",{});var g6=s(Zm);pte=n(g6,"STRONG",{});var JAe=s(pte);AQe=r(JAe,"deberta"),JAe.forEach(t),LQe=r(g6," \u2014 "),pS=n(g6,"A",{href:!0});var YAe=s(pS);yQe=r(YAe,"DebertaConfig"),YAe.forEach(t),xQe=r(g6," (DeBERTa model)"),g6.forEach(t),$Qe=i(L),ef=n(L,"LI",{});var h6=s(ef);_te=n(h6,"STRONG",{});var KAe=s(_te);kQe=r(KAe,"deberta-v2"),KAe.forEach(t),SQe=r(h6," \u2014 "),_S=n(h6,"A",{href:!0});var ZAe=s(_S);RQe=r(ZAe,"DebertaV2Config"),ZAe.forEach(t),PQe=r(h6," (DeBERTa-v2 model)"),h6.forEach(t),BQe=i(L),of=n(L,"LI",{});var u6=s(of);bte=n(u6,"STRONG",{});var e6e=s(bte);IQe=r(e6e,"decision_transformer"),e6e.forEach(t),NQe=r(u6," \u2014 "),bS=n(u6,"A",{href:!0});var o6e=s(bS);qQe=r(o6e,"DecisionTransformerConfig"),o6e.forEach(t),jQe=r(u6," (Decision Transformer model)"),u6.forEach(t),DQe=i(L),rf=n(L,"LI",{});var p6=s(rf);vte=n(p6,"STRONG",{});var JUr=s(vte);GQe=r(JUr,"deit"),JUr.forEach(t),OQe=r(p6," \u2014 "),vS=n(p6,"A",{href:!0});var YUr=s(vS);VQe=r(YUr,"DeiTConfig"),YUr.forEach(t),XQe=r(p6," (DeiT model)"),p6.forEach(t),zQe=i(L),tf=n(L,"LI",{});var r6e=s(tf);Fte=n(r6e,"STRONG",{});var KUr=s(Fte);WQe=r(KUr,"detr"),KUr.forEach(t),QQe=r(r6e," \u2014 "),FS=n(r6e,"A",{href:!0});var ZUr=s(FS);HQe=r(ZUr,"DetrConfig"),ZUr.forEach(t),UQe=r(r6e," (DETR model)"),r6e.forEach(t),JQe=i(L),af=n(L,"LI",{});var t6e=s(af);Tte=n(t6e,"STRONG",{});var eJr=s(Tte);YQe=r(eJr,"distilbert"),eJr.forEach(t),KQe=r(t6e," \u2014 "),TS=n(t6e,"A",{href:!0});var oJr=s(TS);ZQe=r(oJr,"DistilBertConfig"),oJr.forEach(t),eHe=r(t6e," (DistilBERT model)"),t6e.forEach(t),oHe=i(L),nf=n(L,"LI",{});var a6e=s(nf);Mte=n(a6e,"STRONG",{});var rJr=s(Mte);rHe=r(rJr,"dpr"),rJr.forEach(t),tHe=r(a6e," \u2014 "),MS=n(a6e,"A",{href:!0});var tJr=s(MS);aHe=r(tJr,"DPRConfig"),tJr.forEach(t),nHe=r(a6e," (DPR model)"),a6e.forEach(t),sHe=i(L),sf=n(L,"LI",{});var n6e=s(sf);Ete=n(n6e,"STRONG",{});var aJr=s(Ete);lHe=r(aJr,"dpt"),aJr.forEach(t),iHe=r(n6e," \u2014 "),ES=n(n6e,"A",{href:!0});var nJr=s(ES);dHe=r(nJr,"DPTConfig"),nJr.forEach(t),cHe=r(n6e," (DPT model)"),n6e.forEach(t),mHe=i(L),lf=n(L,"LI",{});var s6e=s(lf);Cte=n(s6e,"STRONG",{});var sJr=s(Cte);fHe=r(sJr,"electra"),sJr.forEach(t),gHe=r(s6e," \u2014 "),CS=n(s6e,"A",{href:!0});var lJr=s(CS);hHe=r(lJr,"ElectraConfig"),lJr.forEach(t),uHe=r(s6e," (ELECTRA model)"),s6e.forEach(t),pHe=i(L),df=n(L,"LI",{});var l6e=s(df);wte=n(l6e,"STRONG",{});var iJr=s(wte);_He=r(iJr,"encoder-decoder"),iJr.forEach(t),bHe=r(l6e," \u2014 "),wS=n(l6e,"A",{href:!0});var dJr=s(wS);vHe=r(dJr,"EncoderDecoderConfig"),dJr.forEach(t),FHe=r(l6e," (Encoder decoder model)"),l6e.forEach(t),THe=i(L),cf=n(L,"LI",{});var i6e=s(cf);Ate=n(i6e,"STRONG",{});var cJr=s(Ate);MHe=r(cJr,"flaubert"),cJr.forEach(t),EHe=r(i6e," \u2014 "),AS=n(i6e,"A",{href:!0});var mJr=s(AS);CHe=r(mJr,"FlaubertConfig"),mJr.forEach(t),wHe=r(i6e," (FlauBERT model)"),i6e.forEach(t),AHe=i(L),mf=n(L,"LI",{});var d6e=s(mf);Lte=n(d6e,"STRONG",{});var fJr=s(Lte);LHe=r(fJr,"flava"),fJr.forEach(t),yHe=r(d6e," \u2014 "),LS=n(d6e,"A",{href:!0});var gJr=s(LS);xHe=r(gJr,"FlavaConfig"),gJr.forEach(t),$He=r(d6e," (FLAVA model)"),d6e.forEach(t),kHe=i(L),ff=n(L,"LI",{});var c6e=s(ff);yte=n(c6e,"STRONG",{});var hJr=s(yte);SHe=r(hJr,"fnet"),hJr.forEach(t),RHe=r(c6e," \u2014 "),yS=n(c6e,"A",{href:!0});var uJr=s(yS);PHe=r(uJr,"FNetConfig"),uJr.forEach(t),BHe=r(c6e," (FNet model)"),c6e.forEach(t),IHe=i(L),gf=n(L,"LI",{});var m6e=s(gf);xte=n(m6e,"STRONG",{});var pJr=s(xte);NHe=r(pJr,"fsmt"),pJr.forEach(t),qHe=r(m6e," \u2014 "),xS=n(m6e,"A",{href:!0});var _Jr=s(xS);jHe=r(_Jr,"FSMTConfig"),_Jr.forEach(t),DHe=r(m6e," (FairSeq Machine-Translation model)"),m6e.forEach(t),GHe=i(L),hf=n(L,"LI",{});var f6e=s(hf);$te=n(f6e,"STRONG",{});var bJr=s($te);OHe=r(bJr,"funnel"),bJr.forEach(t),VHe=r(f6e," \u2014 "),$S=n(f6e,"A",{href:!0});var vJr=s($S);XHe=r(vJr,"FunnelConfig"),vJr.forEach(t),zHe=r(f6e," (Funnel Transformer model)"),f6e.forEach(t),WHe=i(L),uf=n(L,"LI",{});var g6e=s(uf);kte=n(g6e,"STRONG",{});var FJr=s(kte);QHe=r(FJr,"glpn"),FJr.forEach(t),HHe=r(g6e," \u2014 "),kS=n(g6e,"A",{href:!0});var TJr=s(kS);UHe=r(TJr,"GLPNConfig"),TJr.forEach(t),JHe=r(g6e," (GLPN model)"),g6e.forEach(t),YHe=i(L),pf=n(L,"LI",{});var h6e=s(pf);Ste=n(h6e,"STRONG",{});var MJr=s(Ste);KHe=r(MJr,"gpt2"),MJr.forEach(t),ZHe=r(h6e," \u2014 "),SS=n(h6e,"A",{href:!0});var EJr=s(SS);eUe=r(EJr,"GPT2Config"),EJr.forEach(t),oUe=r(h6e," (OpenAI GPT-2 model)"),h6e.forEach(t),rUe=i(L),_f=n(L,"LI",{});var u6e=s(_f);Rte=n(u6e,"STRONG",{});var CJr=s(Rte);tUe=r(CJr,"gpt_neo"),CJr.forEach(t),aUe=r(u6e," \u2014 "),RS=n(u6e,"A",{href:!0});var wJr=s(RS);nUe=r(wJr,"GPTNeoConfig"),wJr.forEach(t),sUe=r(u6e," (GPT Neo model)"),u6e.forEach(t),lUe=i(L),bf=n(L,"LI",{});var p6e=s(bf);Pte=n(p6e,"STRONG",{});var AJr=s(Pte);iUe=r(AJr,"gpt_neox"),AJr.forEach(t),dUe=r(p6e," \u2014 "),PS=n(p6e,"A",{href:!0});var LJr=s(PS);cUe=r(LJr,"GPTNeoXConfig"),LJr.forEach(t),mUe=r(p6e," (GPT NeoX model)"),p6e.forEach(t),fUe=i(L),vf=n(L,"LI",{});var _6e=s(vf);Bte=n(_6e,"STRONG",{});var yJr=s(Bte);gUe=r(yJr,"gptj"),yJr.forEach(t),hUe=r(_6e," \u2014 "),BS=n(_6e,"A",{href:!0});var xJr=s(BS);uUe=r(xJr,"GPTJConfig"),xJr.forEach(t),pUe=r(_6e," (GPT-J model)"),_6e.forEach(t),_Ue=i(L),Ff=n(L,"LI",{});var b6e=s(Ff);Ite=n(b6e,"STRONG",{});var $Jr=s(Ite);bUe=r($Jr,"hubert"),$Jr.forEach(t),vUe=r(b6e," \u2014 "),IS=n(b6e,"A",{href:!0});var kJr=s(IS);FUe=r(kJr,"HubertConfig"),kJr.forEach(t),TUe=r(b6e," (Hubert model)"),b6e.forEach(t),MUe=i(L),Tf=n(L,"LI",{});var v6e=s(Tf);Nte=n(v6e,"STRONG",{});var SJr=s(Nte);EUe=r(SJr,"ibert"),SJr.forEach(t),CUe=r(v6e," \u2014 "),NS=n(v6e,"A",{href:!0});var RJr=s(NS);wUe=r(RJr,"IBertConfig"),RJr.forEach(t),AUe=r(v6e," (I-BERT model)"),v6e.forEach(t),LUe=i(L),Mf=n(L,"LI",{});var F6e=s(Mf);qte=n(F6e,"STRONG",{});var PJr=s(qte);yUe=r(PJr,"imagegpt"),PJr.forEach(t),xUe=r(F6e," \u2014 "),qS=n(F6e,"A",{href:!0});var BJr=s(qS);$Ue=r(BJr,"ImageGPTConfig"),BJr.forEach(t),kUe=r(F6e," (ImageGPT model)"),F6e.forEach(t),SUe=i(L),Ef=n(L,"LI",{});var T6e=s(Ef);jte=n(T6e,"STRONG",{});var IJr=s(jte);RUe=r(IJr,"layoutlm"),IJr.forEach(t),PUe=r(T6e," \u2014 "),jS=n(T6e,"A",{href:!0});var NJr=s(jS);BUe=r(NJr,"LayoutLMConfig"),NJr.forEach(t),IUe=r(T6e," (LayoutLM model)"),T6e.forEach(t),NUe=i(L),Cf=n(L,"LI",{});var M6e=s(Cf);Dte=n(M6e,"STRONG",{});var qJr=s(Dte);qUe=r(qJr,"layoutlmv2"),qJr.forEach(t),jUe=r(M6e," \u2014 "),DS=n(M6e,"A",{href:!0});var jJr=s(DS);DUe=r(jJr,"LayoutLMv2Config"),jJr.forEach(t),GUe=r(M6e," (LayoutLMv2 model)"),M6e.forEach(t),OUe=i(L),wf=n(L,"LI",{});var E6e=s(wf);Gte=n(E6e,"STRONG",{});var DJr=s(Gte);VUe=r(DJr,"layoutlmv3"),DJr.forEach(t),XUe=r(E6e," \u2014 "),GS=n(E6e,"A",{href:!0});var GJr=s(GS);zUe=r(GJr,"LayoutLMv3Config"),GJr.forEach(t),WUe=r(E6e," (LayoutLMv3 model)"),E6e.forEach(t),QUe=i(L),Af=n(L,"LI",{});var C6e=s(Af);Ote=n(C6e,"STRONG",{});var OJr=s(Ote);HUe=r(OJr,"led"),OJr.forEach(t),UUe=r(C6e," \u2014 "),OS=n(C6e,"A",{href:!0});var VJr=s(OS);JUe=r(VJr,"LEDConfig"),VJr.forEach(t),YUe=r(C6e," (LED model)"),C6e.forEach(t),KUe=i(L),Lf=n(L,"LI",{});var w6e=s(Lf);Vte=n(w6e,"STRONG",{});var XJr=s(Vte);ZUe=r(XJr,"levit"),XJr.forEach(t),eJe=r(w6e," \u2014 "),VS=n(w6e,"A",{href:!0});var zJr=s(VS);oJe=r(zJr,"LevitConfig"),zJr.forEach(t),rJe=r(w6e," (LeViT model)"),w6e.forEach(t),tJe=i(L),yf=n(L,"LI",{});var A6e=s(yf);Xte=n(A6e,"STRONG",{});var WJr=s(Xte);aJe=r(WJr,"longformer"),WJr.forEach(t),nJe=r(A6e," \u2014 "),XS=n(A6e,"A",{href:!0});var QJr=s(XS);sJe=r(QJr,"LongformerConfig"),QJr.forEach(t),lJe=r(A6e," (Longformer model)"),A6e.forEach(t),iJe=i(L),xf=n(L,"LI",{});var L6e=s(xf);zte=n(L6e,"STRONG",{});var HJr=s(zte);dJe=r(HJr,"longt5"),HJr.forEach(t),cJe=r(L6e," \u2014 "),zS=n(L6e,"A",{href:!0});var UJr=s(zS);mJe=r(UJr,"LongT5Config"),UJr.forEach(t),fJe=r(L6e," (LongT5 model)"),L6e.forEach(t),gJe=i(L),$f=n(L,"LI",{});var y6e=s($f);Wte=n(y6e,"STRONG",{});var JJr=s(Wte);hJe=r(JJr,"luke"),JJr.forEach(t),uJe=r(y6e," \u2014 "),WS=n(y6e,"A",{href:!0});var YJr=s(WS);pJe=r(YJr,"LukeConfig"),YJr.forEach(t),_Je=r(y6e," (LUKE model)"),y6e.forEach(t),bJe=i(L),kf=n(L,"LI",{});var x6e=s(kf);Qte=n(x6e,"STRONG",{});var KJr=s(Qte);vJe=r(KJr,"lxmert"),KJr.forEach(t),FJe=r(x6e," \u2014 "),QS=n(x6e,"A",{href:!0});var ZJr=s(QS);TJe=r(ZJr,"LxmertConfig"),ZJr.forEach(t),MJe=r(x6e," (LXMERT model)"),x6e.forEach(t),EJe=i(L),Sf=n(L,"LI",{});var $6e=s(Sf);Hte=n($6e,"STRONG",{});var eYr=s(Hte);CJe=r(eYr,"m2m_100"),eYr.forEach(t),wJe=r($6e," \u2014 "),HS=n($6e,"A",{href:!0});var oYr=s(HS);AJe=r(oYr,"M2M100Config"),oYr.forEach(t),LJe=r($6e," (M2M100 model)"),$6e.forEach(t),yJe=i(L),Rf=n(L,"LI",{});var k6e=s(Rf);Ute=n(k6e,"STRONG",{});var rYr=s(Ute);xJe=r(rYr,"marian"),rYr.forEach(t),$Je=r(k6e," \u2014 "),US=n(k6e,"A",{href:!0});var tYr=s(US);kJe=r(tYr,"MarianConfig"),tYr.forEach(t),SJe=r(k6e," (Marian model)"),k6e.forEach(t),RJe=i(L),Pf=n(L,"LI",{});var S6e=s(Pf);Jte=n(S6e,"STRONG",{});var aYr=s(Jte);PJe=r(aYr,"maskformer"),aYr.forEach(t),BJe=r(S6e," \u2014 "),JS=n(S6e,"A",{href:!0});var nYr=s(JS);IJe=r(nYr,"MaskFormerConfig"),nYr.forEach(t),NJe=r(S6e," (MaskFormer model)"),S6e.forEach(t),qJe=i(L),Bf=n(L,"LI",{});var R6e=s(Bf);Yte=n(R6e,"STRONG",{});var sYr=s(Yte);jJe=r(sYr,"mbart"),sYr.forEach(t),DJe=r(R6e," \u2014 "),YS=n(R6e,"A",{href:!0});var lYr=s(YS);GJe=r(lYr,"MBartConfig"),lYr.forEach(t),OJe=r(R6e," (mBART model)"),R6e.forEach(t),VJe=i(L),If=n(L,"LI",{});var P6e=s(If);Kte=n(P6e,"STRONG",{});var iYr=s(Kte);XJe=r(iYr,"mctct"),iYr.forEach(t),zJe=r(P6e," \u2014 "),KS=n(P6e,"A",{href:!0});var dYr=s(KS);WJe=r(dYr,"MCTCTConfig"),dYr.forEach(t),QJe=r(P6e," (M-CTC-T model)"),P6e.forEach(t),HJe=i(L),Nf=n(L,"LI",{});var B6e=s(Nf);Zte=n(B6e,"STRONG",{});var cYr=s(Zte);UJe=r(cYr,"megatron-bert"),cYr.forEach(t),JJe=r(B6e," \u2014 "),ZS=n(B6e,"A",{href:!0});var mYr=s(ZS);YJe=r(mYr,"MegatronBertConfig"),mYr.forEach(t),KJe=r(B6e," (Megatron-BERT model)"),B6e.forEach(t),ZJe=i(L),qf=n(L,"LI",{});var I6e=s(qf);eae=n(I6e,"STRONG",{});var fYr=s(eae);eYe=r(fYr,"mobilebert"),fYr.forEach(t),oYe=r(I6e," \u2014 "),eR=n(I6e,"A",{href:!0});var gYr=s(eR);rYe=r(gYr,"MobileBertConfig"),gYr.forEach(t),tYe=r(I6e," (MobileBERT model)"),I6e.forEach(t),aYe=i(L),jf=n(L,"LI",{});var N6e=s(jf);oae=n(N6e,"STRONG",{});var hYr=s(oae);nYe=r(hYr,"mpnet"),hYr.forEach(t),sYe=r(N6e," \u2014 "),oR=n(N6e,"A",{href:!0});var uYr=s(oR);lYe=r(uYr,"MPNetConfig"),uYr.forEach(t),iYe=r(N6e," (MPNet model)"),N6e.forEach(t),dYe=i(L),Df=n(L,"LI",{});var q6e=s(Df);rae=n(q6e,"STRONG",{});var pYr=s(rae);cYe=r(pYr,"mt5"),pYr.forEach(t),mYe=r(q6e," \u2014 "),rR=n(q6e,"A",{href:!0});var _Yr=s(rR);fYe=r(_Yr,"MT5Config"),_Yr.forEach(t),gYe=r(q6e," (MT5 model)"),q6e.forEach(t),hYe=i(L),Gf=n(L,"LI",{});var j6e=s(Gf);tae=n(j6e,"STRONG",{});var bYr=s(tae);uYe=r(bYr,"nystromformer"),bYr.forEach(t),pYe=r(j6e," \u2014 "),tR=n(j6e,"A",{href:!0});var vYr=s(tR);_Ye=r(vYr,"NystromformerConfig"),vYr.forEach(t),bYe=r(j6e," (Nystr\xF6mformer model)"),j6e.forEach(t),vYe=i(L),Of=n(L,"LI",{});var D6e=s(Of);aae=n(D6e,"STRONG",{});var FYr=s(aae);FYe=r(FYr,"openai-gpt"),FYr.forEach(t),TYe=r(D6e," \u2014 "),aR=n(D6e,"A",{href:!0});var TYr=s(aR);MYe=r(TYr,"OpenAIGPTConfig"),TYr.forEach(t),EYe=r(D6e," (OpenAI GPT model)"),D6e.forEach(t),CYe=i(L),Vf=n(L,"LI",{});var G6e=s(Vf);nae=n(G6e,"STRONG",{});var MYr=s(nae);wYe=r(MYr,"opt"),MYr.forEach(t),AYe=r(G6e," \u2014 "),nR=n(G6e,"A",{href:!0});var EYr=s(nR);LYe=r(EYr,"OPTConfig"),EYr.forEach(t),yYe=r(G6e," (OPT model)"),G6e.forEach(t),xYe=i(L),Xf=n(L,"LI",{});var O6e=s(Xf);sae=n(O6e,"STRONG",{});var CYr=s(sae);$Ye=r(CYr,"pegasus"),CYr.forEach(t),kYe=r(O6e," \u2014 "),sR=n(O6e,"A",{href:!0});var wYr=s(sR);SYe=r(wYr,"PegasusConfig"),wYr.forEach(t),RYe=r(O6e," (Pegasus model)"),O6e.forEach(t),PYe=i(L),zf=n(L,"LI",{});var V6e=s(zf);lae=n(V6e,"STRONG",{});var AYr=s(lae);BYe=r(AYr,"perceiver"),AYr.forEach(t),IYe=r(V6e," \u2014 "),lR=n(V6e,"A",{href:!0});var LYr=s(lR);NYe=r(LYr,"PerceiverConfig"),LYr.forEach(t),qYe=r(V6e," (Perceiver model)"),V6e.forEach(t),jYe=i(L),Wf=n(L,"LI",{});var X6e=s(Wf);iae=n(X6e,"STRONG",{});var yYr=s(iae);DYe=r(yYr,"plbart"),yYr.forEach(t),GYe=r(X6e," \u2014 "),iR=n(X6e,"A",{href:!0});var xYr=s(iR);OYe=r(xYr,"PLBartConfig"),xYr.forEach(t),VYe=r(X6e," (PLBart model)"),X6e.forEach(t),XYe=i(L),Qf=n(L,"LI",{});var z6e=s(Qf);dae=n(z6e,"STRONG",{});var $Yr=s(dae);zYe=r($Yr,"poolformer"),$Yr.forEach(t),WYe=r(z6e," \u2014 "),dR=n(z6e,"A",{href:!0});var kYr=s(dR);QYe=r(kYr,"PoolFormerConfig"),kYr.forEach(t),HYe=r(z6e," (PoolFormer model)"),z6e.forEach(t),UYe=i(L),Hf=n(L,"LI",{});var W6e=s(Hf);cae=n(W6e,"STRONG",{});var SYr=s(cae);JYe=r(SYr,"prophetnet"),SYr.forEach(t),YYe=r(W6e," \u2014 "),cR=n(W6e,"A",{href:!0});var RYr=s(cR);KYe=r(RYr,"ProphetNetConfig"),RYr.forEach(t),ZYe=r(W6e," (ProphetNet model)"),W6e.forEach(t),eKe=i(L),Uf=n(L,"LI",{});var Q6e=s(Uf);mae=n(Q6e,"STRONG",{});var PYr=s(mae);oKe=r(PYr,"qdqbert"),PYr.forEach(t),rKe=r(Q6e," \u2014 "),mR=n(Q6e,"A",{href:!0});var BYr=s(mR);tKe=r(BYr,"QDQBertConfig"),BYr.forEach(t),aKe=r(Q6e," (QDQBert model)"),Q6e.forEach(t),nKe=i(L),Jf=n(L,"LI",{});var H6e=s(Jf);fae=n(H6e,"STRONG",{});var IYr=s(fae);sKe=r(IYr,"rag"),IYr.forEach(t),lKe=r(H6e," \u2014 "),fR=n(H6e,"A",{href:!0});var NYr=s(fR);iKe=r(NYr,"RagConfig"),NYr.forEach(t),dKe=r(H6e," (RAG model)"),H6e.forEach(t),cKe=i(L),Yf=n(L,"LI",{});var U6e=s(Yf);gae=n(U6e,"STRONG",{});var qYr=s(gae);mKe=r(qYr,"realm"),qYr.forEach(t),fKe=r(U6e," \u2014 "),gR=n(U6e,"A",{href:!0});var jYr=s(gR);gKe=r(jYr,"RealmConfig"),jYr.forEach(t),hKe=r(U6e," (REALM model)"),U6e.forEach(t),uKe=i(L),Kf=n(L,"LI",{});var J6e=s(Kf);hae=n(J6e,"STRONG",{});var DYr=s(hae);pKe=r(DYr,"reformer"),DYr.forEach(t),_Ke=r(J6e," \u2014 "),hR=n(J6e,"A",{href:!0});var GYr=s(hR);bKe=r(GYr,"ReformerConfig"),GYr.forEach(t),vKe=r(J6e," (Reformer model)"),J6e.forEach(t),FKe=i(L),Zf=n(L,"LI",{});var Y6e=s(Zf);uae=n(Y6e,"STRONG",{});var OYr=s(uae);TKe=r(OYr,"regnet"),OYr.forEach(t),MKe=r(Y6e," \u2014 "),uR=n(Y6e,"A",{href:!0});var VYr=s(uR);EKe=r(VYr,"RegNetConfig"),VYr.forEach(t),CKe=r(Y6e," (RegNet model)"),Y6e.forEach(t),wKe=i(L),eg=n(L,"LI",{});var K6e=s(eg);pae=n(K6e,"STRONG",{});var XYr=s(pae);AKe=r(XYr,"rembert"),XYr.forEach(t),LKe=r(K6e," \u2014 "),pR=n(K6e,"A",{href:!0});var zYr=s(pR);yKe=r(zYr,"RemBertConfig"),zYr.forEach(t),xKe=r(K6e," (RemBERT model)"),K6e.forEach(t),$Ke=i(L),og=n(L,"LI",{});var Z6e=s(og);_ae=n(Z6e,"STRONG",{});var WYr=s(_ae);kKe=r(WYr,"resnet"),WYr.forEach(t),SKe=r(Z6e," \u2014 "),_R=n(Z6e,"A",{href:!0});var QYr=s(_R);RKe=r(QYr,"ResNetConfig"),QYr.forEach(t),PKe=r(Z6e," (ResNet model)"),Z6e.forEach(t),BKe=i(L),rg=n(L,"LI",{});var eLe=s(rg);bae=n(eLe,"STRONG",{});var HYr=s(bae);IKe=r(HYr,"retribert"),HYr.forEach(t),NKe=r(eLe," \u2014 "),bR=n(eLe,"A",{href:!0});var UYr=s(bR);qKe=r(UYr,"RetriBertConfig"),UYr.forEach(t),jKe=r(eLe," (RetriBERT model)"),eLe.forEach(t),DKe=i(L),tg=n(L,"LI",{});var oLe=s(tg);vae=n(oLe,"STRONG",{});var JYr=s(vae);GKe=r(JYr,"roberta"),JYr.forEach(t),OKe=r(oLe," \u2014 "),vR=n(oLe,"A",{href:!0});var YYr=s(vR);VKe=r(YYr,"RobertaConfig"),YYr.forEach(t),XKe=r(oLe," (RoBERTa model)"),oLe.forEach(t),zKe=i(L),ag=n(L,"LI",{});var rLe=s(ag);Fae=n(rLe,"STRONG",{});var KYr=s(Fae);WKe=r(KYr,"roformer"),KYr.forEach(t),QKe=r(rLe," \u2014 "),FR=n(rLe,"A",{href:!0});var ZYr=s(FR);HKe=r(ZYr,"RoFormerConfig"),ZYr.forEach(t),UKe=r(rLe," (RoFormer model)"),rLe.forEach(t),JKe=i(L),ng=n(L,"LI",{});var tLe=s(ng);Tae=n(tLe,"STRONG",{});var eKr=s(Tae);YKe=r(eKr,"segformer"),eKr.forEach(t),KKe=r(tLe," \u2014 "),TR=n(tLe,"A",{href:!0});var oKr=s(TR);ZKe=r(oKr,"SegformerConfig"),oKr.forEach(t),eZe=r(tLe," (SegFormer model)"),tLe.forEach(t),oZe=i(L),sg=n(L,"LI",{});var aLe=s(sg);Mae=n(aLe,"STRONG",{});var rKr=s(Mae);rZe=r(rKr,"sew"),rKr.forEach(t),tZe=r(aLe," \u2014 "),MR=n(aLe,"A",{href:!0});var tKr=s(MR);aZe=r(tKr,"SEWConfig"),tKr.forEach(t),nZe=r(aLe," (SEW model)"),aLe.forEach(t),sZe=i(L),lg=n(L,"LI",{});var nLe=s(lg);Eae=n(nLe,"STRONG",{});var aKr=s(Eae);lZe=r(aKr,"sew-d"),aKr.forEach(t),iZe=r(nLe," \u2014 "),ER=n(nLe,"A",{href:!0});var nKr=s(ER);dZe=r(nKr,"SEWDConfig"),nKr.forEach(t),cZe=r(nLe," (SEW-D model)"),nLe.forEach(t),mZe=i(L),ig=n(L,"LI",{});var sLe=s(ig);Cae=n(sLe,"STRONG",{});var sKr=s(Cae);fZe=r(sKr,"speech-encoder-decoder"),sKr.forEach(t),gZe=r(sLe," \u2014 "),CR=n(sLe,"A",{href:!0});var lKr=s(CR);hZe=r(lKr,"SpeechEncoderDecoderConfig"),lKr.forEach(t),uZe=r(sLe," (Speech Encoder decoder model)"),sLe.forEach(t),pZe=i(L),dg=n(L,"LI",{});var lLe=s(dg);wae=n(lLe,"STRONG",{});var iKr=s(wae);_Ze=r(iKr,"speech_to_text"),iKr.forEach(t),bZe=r(lLe," \u2014 "),wR=n(lLe,"A",{href:!0});var dKr=s(wR);vZe=r(dKr,"Speech2TextConfig"),dKr.forEach(t),FZe=r(lLe," (Speech2Text model)"),lLe.forEach(t),TZe=i(L),cg=n(L,"LI",{});var iLe=s(cg);Aae=n(iLe,"STRONG",{});var cKr=s(Aae);MZe=r(cKr,"speech_to_text_2"),cKr.forEach(t),EZe=r(iLe," \u2014 "),AR=n(iLe,"A",{href:!0});var mKr=s(AR);CZe=r(mKr,"Speech2Text2Config"),mKr.forEach(t),wZe=r(iLe," (Speech2Text2 model)"),iLe.forEach(t),AZe=i(L),mg=n(L,"LI",{});var dLe=s(mg);Lae=n(dLe,"STRONG",{});var fKr=s(Lae);LZe=r(fKr,"splinter"),fKr.forEach(t),yZe=r(dLe," \u2014 "),LR=n(dLe,"A",{href:!0});var gKr=s(LR);xZe=r(gKr,"SplinterConfig"),gKr.forEach(t),$Ze=r(dLe," (Splinter model)"),dLe.forEach(t),kZe=i(L),fg=n(L,"LI",{});var cLe=s(fg);yae=n(cLe,"STRONG",{});var hKr=s(yae);SZe=r(hKr,"squeezebert"),hKr.forEach(t),RZe=r(cLe," \u2014 "),yR=n(cLe,"A",{href:!0});var uKr=s(yR);PZe=r(uKr,"SqueezeBertConfig"),uKr.forEach(t),BZe=r(cLe," (SqueezeBERT model)"),cLe.forEach(t),IZe=i(L),gg=n(L,"LI",{});var mLe=s(gg);xae=n(mLe,"STRONG",{});var pKr=s(xae);NZe=r(pKr,"swin"),pKr.forEach(t),qZe=r(mLe," \u2014 "),xR=n(mLe,"A",{href:!0});var _Kr=s(xR);jZe=r(_Kr,"SwinConfig"),_Kr.forEach(t),DZe=r(mLe," (Swin Transformer model)"),mLe.forEach(t),GZe=i(L),hg=n(L,"LI",{});var fLe=s(hg);$ae=n(fLe,"STRONG",{});var bKr=s($ae);OZe=r(bKr,"t5"),bKr.forEach(t),VZe=r(fLe," \u2014 "),$R=n(fLe,"A",{href:!0});var vKr=s($R);XZe=r(vKr,"T5Config"),vKr.forEach(t),zZe=r(fLe," (T5 model)"),fLe.forEach(t),WZe=i(L),ug=n(L,"LI",{});var gLe=s(ug);kae=n(gLe,"STRONG",{});var FKr=s(kae);QZe=r(FKr,"tapas"),FKr.forEach(t),HZe=r(gLe," \u2014 "),kR=n(gLe,"A",{href:!0});var TKr=s(kR);UZe=r(TKr,"TapasConfig"),TKr.forEach(t),JZe=r(gLe," (TAPAS model)"),gLe.forEach(t),YZe=i(L),pg=n(L,"LI",{});var hLe=s(pg);Sae=n(hLe,"STRONG",{});var MKr=s(Sae);KZe=r(MKr,"trajectory_transformer"),MKr.forEach(t),ZZe=r(hLe," \u2014 "),SR=n(hLe,"A",{href:!0});var EKr=s(SR);eeo=r(EKr,"TrajectoryTransformerConfig"),EKr.forEach(t),oeo=r(hLe," (Trajectory Transformer model)"),hLe.forEach(t),reo=i(L),_g=n(L,"LI",{});var uLe=s(_g);Rae=n(uLe,"STRONG",{});var CKr=s(Rae);teo=r(CKr,"transfo-xl"),CKr.forEach(t),aeo=r(uLe," \u2014 "),RR=n(uLe,"A",{href:!0});var wKr=s(RR);neo=r(wKr,"TransfoXLConfig"),wKr.forEach(t),seo=r(uLe," (Transformer-XL model)"),uLe.forEach(t),leo=i(L),bg=n(L,"LI",{});var pLe=s(bg);Pae=n(pLe,"STRONG",{});var AKr=s(Pae);ieo=r(AKr,"trocr"),AKr.forEach(t),deo=r(pLe," \u2014 "),PR=n(pLe,"A",{href:!0});var LKr=s(PR);ceo=r(LKr,"TrOCRConfig"),LKr.forEach(t),meo=r(pLe," (TrOCR model)"),pLe.forEach(t),feo=i(L),vg=n(L,"LI",{});var _Le=s(vg);Bae=n(_Le,"STRONG",{});var yKr=s(Bae);geo=r(yKr,"unispeech"),yKr.forEach(t),heo=r(_Le," \u2014 "),BR=n(_Le,"A",{href:!0});var xKr=s(BR);ueo=r(xKr,"UniSpeechConfig"),xKr.forEach(t),peo=r(_Le," (UniSpeech model)"),_Le.forEach(t),_eo=i(L),Fg=n(L,"LI",{});var bLe=s(Fg);Iae=n(bLe,"STRONG",{});var $Kr=s(Iae);beo=r($Kr,"unispeech-sat"),$Kr.forEach(t),veo=r(bLe," \u2014 "),IR=n(bLe,"A",{href:!0});var kKr=s(IR);Feo=r(kKr,"UniSpeechSatConfig"),kKr.forEach(t),Teo=r(bLe," (UniSpeechSat model)"),bLe.forEach(t),Meo=i(L),Tg=n(L,"LI",{});var vLe=s(Tg);Nae=n(vLe,"STRONG",{});var SKr=s(Nae);Eeo=r(SKr,"van"),SKr.forEach(t),Ceo=r(vLe," \u2014 "),NR=n(vLe,"A",{href:!0});var RKr=s(NR);weo=r(RKr,"VanConfig"),RKr.forEach(t),Aeo=r(vLe," (VAN model)"),vLe.forEach(t),Leo=i(L),Mg=n(L,"LI",{});var FLe=s(Mg);qae=n(FLe,"STRONG",{});var PKr=s(qae);yeo=r(PKr,"vilt"),PKr.forEach(t),xeo=r(FLe," \u2014 "),qR=n(FLe,"A",{href:!0});var BKr=s(qR);$eo=r(BKr,"ViltConfig"),BKr.forEach(t),keo=r(FLe," (ViLT model)"),FLe.forEach(t),Seo=i(L),Eg=n(L,"LI",{});var TLe=s(Eg);jae=n(TLe,"STRONG",{});var IKr=s(jae);Reo=r(IKr,"vision-encoder-decoder"),IKr.forEach(t),Peo=r(TLe," \u2014 "),jR=n(TLe,"A",{href:!0});var NKr=s(jR);Beo=r(NKr,"VisionEncoderDecoderConfig"),NKr.forEach(t),Ieo=r(TLe," (Vision Encoder decoder model)"),TLe.forEach(t),Neo=i(L),Cg=n(L,"LI",{});var MLe=s(Cg);Dae=n(MLe,"STRONG",{});var qKr=s(Dae);qeo=r(qKr,"vision-text-dual-encoder"),qKr.forEach(t),jeo=r(MLe," \u2014 "),DR=n(MLe,"A",{href:!0});var jKr=s(DR);Deo=r(jKr,"VisionTextDualEncoderConfig"),jKr.forEach(t),Geo=r(MLe," (VisionTextDualEncoder model)"),MLe.forEach(t),Oeo=i(L),wg=n(L,"LI",{});var ELe=s(wg);Gae=n(ELe,"STRONG",{});var DKr=s(Gae);Veo=r(DKr,"visual_bert"),DKr.forEach(t),Xeo=r(ELe," \u2014 "),GR=n(ELe,"A",{href:!0});var GKr=s(GR);zeo=r(GKr,"VisualBertConfig"),GKr.forEach(t),Weo=r(ELe," (VisualBERT model)"),ELe.forEach(t),Qeo=i(L),Ag=n(L,"LI",{});var CLe=s(Ag);Oae=n(CLe,"STRONG",{});var OKr=s(Oae);Heo=r(OKr,"vit"),OKr.forEach(t),Ueo=r(CLe," \u2014 "),OR=n(CLe,"A",{href:!0});var VKr=s(OR);Jeo=r(VKr,"ViTConfig"),VKr.forEach(t),Yeo=r(CLe," (ViT model)"),CLe.forEach(t),Keo=i(L),Lg=n(L,"LI",{});var wLe=s(Lg);Vae=n(wLe,"STRONG",{});var XKr=s(Vae);Zeo=r(XKr,"vit_mae"),XKr.forEach(t),eoo=r(wLe," \u2014 "),VR=n(wLe,"A",{href:!0});var zKr=s(VR);ooo=r(zKr,"ViTMAEConfig"),zKr.forEach(t),roo=r(wLe," (ViTMAE model)"),wLe.forEach(t),too=i(L),yg=n(L,"LI",{});var ALe=s(yg);Xae=n(ALe,"STRONG",{});var WKr=s(Xae);aoo=r(WKr,"wav2vec2"),WKr.forEach(t),noo=r(ALe," \u2014 "),XR=n(ALe,"A",{href:!0});var QKr=s(XR);soo=r(QKr,"Wav2Vec2Config"),QKr.forEach(t),loo=r(ALe," (Wav2Vec2 model)"),ALe.forEach(t),ioo=i(L),xg=n(L,"LI",{});var LLe=s(xg);zae=n(LLe,"STRONG",{});var HKr=s(zae);doo=r(HKr,"wav2vec2-conformer"),HKr.forEach(t),coo=r(LLe," \u2014 "),zR=n(LLe,"A",{href:!0});var UKr=s(zR);moo=r(UKr,"Wav2Vec2ConformerConfig"),UKr.forEach(t),foo=r(LLe," (Wav2Vec2-Conformer model)"),LLe.forEach(t),goo=i(L),$g=n(L,"LI",{});var yLe=s($g);Wae=n(yLe,"STRONG",{});var JKr=s(Wae);hoo=r(JKr,"wavlm"),JKr.forEach(t),uoo=r(yLe," \u2014 "),WR=n(yLe,"A",{href:!0});var YKr=s(WR);poo=r(YKr,"WavLMConfig"),YKr.forEach(t),_oo=r(yLe," (WavLM model)"),yLe.forEach(t),boo=i(L),kg=n(L,"LI",{});var xLe=s(kg);Qae=n(xLe,"STRONG",{});var KKr=s(Qae);voo=r(KKr,"xglm"),KKr.forEach(t),Foo=r(xLe," \u2014 "),QR=n(xLe,"A",{href:!0});var ZKr=s(QR);Too=r(ZKr,"XGLMConfig"),ZKr.forEach(t),Moo=r(xLe," (XGLM model)"),xLe.forEach(t),Eoo=i(L),Sg=n(L,"LI",{});var $Le=s(Sg);Hae=n($Le,"STRONG",{});var eZr=s(Hae);Coo=r(eZr,"xlm"),eZr.forEach(t),woo=r($Le," \u2014 "),HR=n($Le,"A",{href:!0});var oZr=s(HR);Aoo=r(oZr,"XLMConfig"),oZr.forEach(t),Loo=r($Le," (XLM model)"),$Le.forEach(t),yoo=i(L),Rg=n(L,"LI",{});var kLe=s(Rg);Uae=n(kLe,"STRONG",{});var rZr=s(Uae);xoo=r(rZr,"xlm-prophetnet"),rZr.forEach(t),$oo=r(kLe," \u2014 "),UR=n(kLe,"A",{href:!0});var tZr=s(UR);koo=r(tZr,"XLMProphetNetConfig"),tZr.forEach(t),Soo=r(kLe," (XLM-ProphetNet model)"),kLe.forEach(t),Roo=i(L),Pg=n(L,"LI",{});var SLe=s(Pg);Jae=n(SLe,"STRONG",{});var aZr=s(Jae);Poo=r(aZr,"xlm-roberta"),aZr.forEach(t),Boo=r(SLe," \u2014 "),JR=n(SLe,"A",{href:!0});var nZr=s(JR);Ioo=r(nZr,"XLMRobertaConfig"),nZr.forEach(t),Noo=r(SLe," (XLM-RoBERTa model)"),SLe.forEach(t),qoo=i(L),Bg=n(L,"LI",{});var RLe=s(Bg);Yae=n(RLe,"STRONG",{});var sZr=s(Yae);joo=r(sZr,"xlm-roberta-xl"),sZr.forEach(t),Doo=r(RLe," \u2014 "),YR=n(RLe,"A",{href:!0});var lZr=s(YR);Goo=r(lZr,"XLMRobertaXLConfig"),lZr.forEach(t),Ooo=r(RLe," (XLM-RoBERTa-XL model)"),RLe.forEach(t),Voo=i(L),Ig=n(L,"LI",{});var PLe=s(Ig);Kae=n(PLe,"STRONG",{});var iZr=s(Kae);Xoo=r(iZr,"xlnet"),iZr.forEach(t),zoo=r(PLe," \u2014 "),KR=n(PLe,"A",{href:!0});var dZr=s(KR);Woo=r(dZr,"XLNetConfig"),dZr.forEach(t),Qoo=r(PLe," (XLNet model)"),PLe.forEach(t),Hoo=i(L),Ng=n(L,"LI",{});var BLe=s(Ng);Zae=n(BLe,"STRONG",{});var cZr=s(Zae);Uoo=r(cZr,"yolos"),cZr.forEach(t),Joo=r(BLe," \u2014 "),ZR=n(BLe,"A",{href:!0});var mZr=s(ZR);Yoo=r(mZr,"YolosConfig"),mZr.forEach(t),Koo=r(BLe," (YOLOS model)"),BLe.forEach(t),Zoo=i(L),qg=n(L,"LI",{});var ILe=s(qg);ene=n(ILe,"STRONG",{});var fZr=s(ene);ero=r(fZr,"yoso"),fZr.forEach(t),oro=r(ILe," \u2014 "),eP=n(ILe,"A",{href:!0});var gZr=s(eP);rro=r(gZr,"YosoConfig"),gZr.forEach(t),tro=r(ILe," (YOSO model)"),ILe.forEach(t),L.forEach(t),aro=i(tt),T(jg.$$.fragment,tt),tt.forEach(t),nro=i(rt),Dg=n(rt,"DIV",{class:!0});var JOe=s(Dg);T(Cy.$$.fragment,JOe),sro=i(JOe),one=n(JOe,"P",{});var hZr=s(one);lro=r(hZr,"Register a new configuration for this class."),hZr.forEach(t),JOe.forEach(t),rt.forEach(t),YDe=i(m),$i=n(m,"H2",{class:!0});var YOe=s($i);Gg=n(YOe,"A",{id:!0,class:!0,href:!0});var uZr=s(Gg);rne=n(uZr,"SPAN",{});var pZr=s(rne);T(wy.$$.fragment,pZr),pZr.forEach(t),uZr.forEach(t),iro=i(YOe),tne=n(YOe,"SPAN",{});var _Zr=s(tne);dro=r(_Zr,"AutoTokenizer"),_Zr.forEach(t),YOe.forEach(t),KDe=i(m),Ao=n(m,"DIV",{class:!0});var zs=s(Ao);T(Ay.$$.fragment,zs),cro=i(zs),Ly=n(zs,"P",{});var KOe=s(Ly);mro=r(KOe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),oP=n(KOe,"A",{href:!0});var bZr=s(oP);fro=r(bZr,"AutoTokenizer.from_pretrained()"),bZr.forEach(t),gro=r(KOe," class method."),KOe.forEach(t),hro=i(zs),yy=n(zs,"P",{});var ZOe=s(yy);uro=r(ZOe,"This class cannot be instantiated directly using "),ane=n(ZOe,"CODE",{});var vZr=s(ane);pro=r(vZr,"__init__()"),vZr.forEach(t),_ro=r(ZOe," (throws an error)."),ZOe.forEach(t),bro=i(zs),Ar=n(zs,"DIV",{class:!0});var Ws=s(Ar);T(xy.$$.fragment,Ws),vro=i(Ws),nne=n(Ws,"P",{});var FZr=s(nne);Fro=r(FZr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),FZr.forEach(t),Tro=i(Ws),$a=n(Ws,"P",{});var _6=s($a);Mro=r(_6,"The tokenizer class to instantiate is selected based on the "),sne=n(_6,"CODE",{});var TZr=s(sne);Ero=r(TZr,"model_type"),TZr.forEach(t),Cro=r(_6,` property of the config object (either
passed as an argument or loaded from `),lne=n(_6,"CODE",{});var MZr=s(lne);wro=r(MZr,"pretrained_model_name_or_path"),MZr.forEach(t),Aro=r(_6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ine=n(_6,"CODE",{});var EZr=s(ine);Lro=r(EZr,"pretrained_model_name_or_path"),EZr.forEach(t),yro=r(_6,":"),_6.forEach(t),xro=i(Ws),k=n(Ws,"UL",{});var S=s(k);Nn=n(S,"LI",{});var B$=s(Nn);dne=n(B$,"STRONG",{});var CZr=s(dne);$ro=r(CZr,"albert"),CZr.forEach(t),kro=r(B$," \u2014 "),rP=n(B$,"A",{href:!0});var wZr=s(rP);Sro=r(wZr,"AlbertTokenizer"),wZr.forEach(t),Rro=r(B$," or "),tP=n(B$,"A",{href:!0});var AZr=s(tP);Pro=r(AZr,"AlbertTokenizerFast"),AZr.forEach(t),Bro=r(B$," (ALBERT model)"),B$.forEach(t),Iro=i(S),qn=n(S,"LI",{});var I$=s(qn);cne=n(I$,"STRONG",{});var LZr=s(cne);Nro=r(LZr,"bart"),LZr.forEach(t),qro=r(I$," \u2014 "),aP=n(I$,"A",{href:!0});var yZr=s(aP);jro=r(yZr,"BartTokenizer"),yZr.forEach(t),Dro=r(I$," or "),nP=n(I$,"A",{href:!0});var xZr=s(nP);Gro=r(xZr,"BartTokenizerFast"),xZr.forEach(t),Oro=r(I$," (BART model)"),I$.forEach(t),Vro=i(S),jn=n(S,"LI",{});var N$=s(jn);mne=n(N$,"STRONG",{});var $Zr=s(mne);Xro=r($Zr,"barthez"),$Zr.forEach(t),zro=r(N$," \u2014 "),sP=n(N$,"A",{href:!0});var kZr=s(sP);Wro=r(kZr,"BarthezTokenizer"),kZr.forEach(t),Qro=r(N$," or "),lP=n(N$,"A",{href:!0});var SZr=s(lP);Hro=r(SZr,"BarthezTokenizerFast"),SZr.forEach(t),Uro=r(N$," (BARThez model)"),N$.forEach(t),Jro=i(S),Og=n(S,"LI",{});var NLe=s(Og);fne=n(NLe,"STRONG",{});var RZr=s(fne);Yro=r(RZr,"bartpho"),RZr.forEach(t),Kro=r(NLe," \u2014 "),iP=n(NLe,"A",{href:!0});var PZr=s(iP);Zro=r(PZr,"BartphoTokenizer"),PZr.forEach(t),eto=r(NLe," (BARTpho model)"),NLe.forEach(t),oto=i(S),Dn=n(S,"LI",{});var q$=s(Dn);gne=n(q$,"STRONG",{});var BZr=s(gne);rto=r(BZr,"bert"),BZr.forEach(t),tto=r(q$," \u2014 "),dP=n(q$,"A",{href:!0});var IZr=s(dP);ato=r(IZr,"BertTokenizer"),IZr.forEach(t),nto=r(q$," or "),cP=n(q$,"A",{href:!0});var NZr=s(cP);sto=r(NZr,"BertTokenizerFast"),NZr.forEach(t),lto=r(q$," (BERT model)"),q$.forEach(t),ito=i(S),Vg=n(S,"LI",{});var qLe=s(Vg);hne=n(qLe,"STRONG",{});var qZr=s(hne);dto=r(qZr,"bert-generation"),qZr.forEach(t),cto=r(qLe," \u2014 "),mP=n(qLe,"A",{href:!0});var jZr=s(mP);mto=r(jZr,"BertGenerationTokenizer"),jZr.forEach(t),fto=r(qLe," (Bert Generation model)"),qLe.forEach(t),gto=i(S),Xg=n(S,"LI",{});var jLe=s(Xg);une=n(jLe,"STRONG",{});var DZr=s(une);hto=r(DZr,"bert-japanese"),DZr.forEach(t),uto=r(jLe," \u2014 "),fP=n(jLe,"A",{href:!0});var GZr=s(fP);pto=r(GZr,"BertJapaneseTokenizer"),GZr.forEach(t),_to=r(jLe," (BertJapanese model)"),jLe.forEach(t),bto=i(S),zg=n(S,"LI",{});var DLe=s(zg);pne=n(DLe,"STRONG",{});var OZr=s(pne);vto=r(OZr,"bertweet"),OZr.forEach(t),Fto=r(DLe," \u2014 "),gP=n(DLe,"A",{href:!0});var VZr=s(gP);Tto=r(VZr,"BertweetTokenizer"),VZr.forEach(t),Mto=r(DLe," (BERTweet model)"),DLe.forEach(t),Eto=i(S),Gn=n(S,"LI",{});var j$=s(Gn);_ne=n(j$,"STRONG",{});var XZr=s(_ne);Cto=r(XZr,"big_bird"),XZr.forEach(t),wto=r(j$," \u2014 "),hP=n(j$,"A",{href:!0});var zZr=s(hP);Ato=r(zZr,"BigBirdTokenizer"),zZr.forEach(t),Lto=r(j$," or "),uP=n(j$,"A",{href:!0});var WZr=s(uP);yto=r(WZr,"BigBirdTokenizerFast"),WZr.forEach(t),xto=r(j$," (BigBird model)"),j$.forEach(t),$to=i(S),On=n(S,"LI",{});var D$=s(On);bne=n(D$,"STRONG",{});var QZr=s(bne);kto=r(QZr,"bigbird_pegasus"),QZr.forEach(t),Sto=r(D$," \u2014 "),pP=n(D$,"A",{href:!0});var HZr=s(pP);Rto=r(HZr,"PegasusTokenizer"),HZr.forEach(t),Pto=r(D$," or "),_P=n(D$,"A",{href:!0});var UZr=s(_P);Bto=r(UZr,"PegasusTokenizerFast"),UZr.forEach(t),Ito=r(D$," (BigBird-Pegasus model)"),D$.forEach(t),Nto=i(S),Vn=n(S,"LI",{});var G$=s(Vn);vne=n(G$,"STRONG",{});var JZr=s(vne);qto=r(JZr,"blenderbot"),JZr.forEach(t),jto=r(G$," \u2014 "),bP=n(G$,"A",{href:!0});var YZr=s(bP);Dto=r(YZr,"BlenderbotTokenizer"),YZr.forEach(t),Gto=r(G$," or "),vP=n(G$,"A",{href:!0});var KZr=s(vP);Oto=r(KZr,"BlenderbotTokenizerFast"),KZr.forEach(t),Vto=r(G$," (Blenderbot model)"),G$.forEach(t),Xto=i(S),Wg=n(S,"LI",{});var GLe=s(Wg);Fne=n(GLe,"STRONG",{});var ZZr=s(Fne);zto=r(ZZr,"blenderbot-small"),ZZr.forEach(t),Wto=r(GLe," \u2014 "),FP=n(GLe,"A",{href:!0});var eet=s(FP);Qto=r(eet,"BlenderbotSmallTokenizer"),eet.forEach(t),Hto=r(GLe," (BlenderbotSmall model)"),GLe.forEach(t),Uto=i(S),Qg=n(S,"LI",{});var OLe=s(Qg);Tne=n(OLe,"STRONG",{});var oet=s(Tne);Jto=r(oet,"bloom"),oet.forEach(t),Yto=r(OLe," \u2014 "),TP=n(OLe,"A",{href:!0});var ret=s(TP);Kto=r(ret,"BloomTokenizerFast"),ret.forEach(t),Zto=r(OLe," (BLOOM model)"),OLe.forEach(t),eao=i(S),Hg=n(S,"LI",{});var VLe=s(Hg);Mne=n(VLe,"STRONG",{});var tet=s(Mne);oao=r(tet,"byt5"),tet.forEach(t),rao=r(VLe," \u2014 "),MP=n(VLe,"A",{href:!0});var aet=s(MP);tao=r(aet,"ByT5Tokenizer"),aet.forEach(t),aao=r(VLe," (ByT5 model)"),VLe.forEach(t),nao=i(S),Xn=n(S,"LI",{});var O$=s(Xn);Ene=n(O$,"STRONG",{});var net=s(Ene);sao=r(net,"camembert"),net.forEach(t),lao=r(O$," \u2014 "),EP=n(O$,"A",{href:!0});var set=s(EP);iao=r(set,"CamembertTokenizer"),set.forEach(t),dao=r(O$," or "),CP=n(O$,"A",{href:!0});var iet=s(CP);cao=r(iet,"CamembertTokenizerFast"),iet.forEach(t),mao=r(O$," (CamemBERT model)"),O$.forEach(t),fao=i(S),Ug=n(S,"LI",{});var XLe=s(Ug);Cne=n(XLe,"STRONG",{});var det=s(Cne);gao=r(det,"canine"),det.forEach(t),hao=r(XLe," \u2014 "),wP=n(XLe,"A",{href:!0});var cet=s(wP);uao=r(cet,"CanineTokenizer"),cet.forEach(t),pao=r(XLe," (CANINE model)"),XLe.forEach(t),_ao=i(S),zn=n(S,"LI",{});var V$=s(zn);wne=n(V$,"STRONG",{});var met=s(wne);bao=r(met,"clip"),met.forEach(t),vao=r(V$," \u2014 "),AP=n(V$,"A",{href:!0});var fet=s(AP);Fao=r(fet,"CLIPTokenizer"),fet.forEach(t),Tao=r(V$," or "),LP=n(V$,"A",{href:!0});var get=s(LP);Mao=r(get,"CLIPTokenizerFast"),get.forEach(t),Eao=r(V$," (CLIP model)"),V$.forEach(t),Cao=i(S),Wn=n(S,"LI",{});var X$=s(Wn);Ane=n(X$,"STRONG",{});var het=s(Ane);wao=r(het,"convbert"),het.forEach(t),Aao=r(X$," \u2014 "),yP=n(X$,"A",{href:!0});var uet=s(yP);Lao=r(uet,"ConvBertTokenizer"),uet.forEach(t),yao=r(X$," or "),xP=n(X$,"A",{href:!0});var pet=s(xP);xao=r(pet,"ConvBertTokenizerFast"),pet.forEach(t),$ao=r(X$," (ConvBERT model)"),X$.forEach(t),kao=i(S),Qn=n(S,"LI",{});var z$=s(Qn);Lne=n(z$,"STRONG",{});var _et=s(Lne);Sao=r(_et,"cpm"),_et.forEach(t),Rao=r(z$," \u2014 "),$P=n(z$,"A",{href:!0});var bet=s($P);Pao=r(bet,"CpmTokenizer"),bet.forEach(t),Bao=r(z$," or "),kP=n(z$,"A",{href:!0});var vet=s(kP);Iao=r(vet,"CpmTokenizerFast"),vet.forEach(t),Nao=r(z$," (CPM model)"),z$.forEach(t),qao=i(S),Jg=n(S,"LI",{});var zLe=s(Jg);yne=n(zLe,"STRONG",{});var Fet=s(yne);jao=r(Fet,"ctrl"),Fet.forEach(t),Dao=r(zLe," \u2014 "),SP=n(zLe,"A",{href:!0});var Tet=s(SP);Gao=r(Tet,"CTRLTokenizer"),Tet.forEach(t),Oao=r(zLe," (CTRL model)"),zLe.forEach(t),Vao=i(S),Hn=n(S,"LI",{});var W$=s(Hn);xne=n(W$,"STRONG",{});var Met=s(xne);Xao=r(Met,"data2vec-text"),Met.forEach(t),zao=r(W$," \u2014 "),RP=n(W$,"A",{href:!0});var Eet=s(RP);Wao=r(Eet,"RobertaTokenizer"),Eet.forEach(t),Qao=r(W$," or "),PP=n(W$,"A",{href:!0});var Cet=s(PP);Hao=r(Cet,"RobertaTokenizerFast"),Cet.forEach(t),Uao=r(W$," (Data2VecText model)"),W$.forEach(t),Jao=i(S),Un=n(S,"LI",{});var Q$=s(Un);$ne=n(Q$,"STRONG",{});var wet=s($ne);Yao=r(wet,"deberta"),wet.forEach(t),Kao=r(Q$," \u2014 "),BP=n(Q$,"A",{href:!0});var Aet=s(BP);Zao=r(Aet,"DebertaTokenizer"),Aet.forEach(t),eno=r(Q$," or "),IP=n(Q$,"A",{href:!0});var Let=s(IP);ono=r(Let,"DebertaTokenizerFast"),Let.forEach(t),rno=r(Q$," (DeBERTa model)"),Q$.forEach(t),tno=i(S),Jn=n(S,"LI",{});var H$=s(Jn);kne=n(H$,"STRONG",{});var yet=s(kne);ano=r(yet,"deberta-v2"),yet.forEach(t),nno=r(H$," \u2014 "),NP=n(H$,"A",{href:!0});var xet=s(NP);sno=r(xet,"DebertaV2Tokenizer"),xet.forEach(t),lno=r(H$," or "),qP=n(H$,"A",{href:!0});var $et=s(qP);ino=r($et,"DebertaV2TokenizerFast"),$et.forEach(t),dno=r(H$," (DeBERTa-v2 model)"),H$.forEach(t),cno=i(S),Yn=n(S,"LI",{});var U$=s(Yn);Sne=n(U$,"STRONG",{});var ket=s(Sne);mno=r(ket,"distilbert"),ket.forEach(t),fno=r(U$," \u2014 "),jP=n(U$,"A",{href:!0});var Set=s(jP);gno=r(Set,"DistilBertTokenizer"),Set.forEach(t),hno=r(U$," or "),DP=n(U$,"A",{href:!0});var Ret=s(DP);uno=r(Ret,"DistilBertTokenizerFast"),Ret.forEach(t),pno=r(U$," (DistilBERT model)"),U$.forEach(t),_no=i(S),Kn=n(S,"LI",{});var J$=s(Kn);Rne=n(J$,"STRONG",{});var Pet=s(Rne);bno=r(Pet,"dpr"),Pet.forEach(t),vno=r(J$," \u2014 "),GP=n(J$,"A",{href:!0});var Bet=s(GP);Fno=r(Bet,"DPRQuestionEncoderTokenizer"),Bet.forEach(t),Tno=r(J$," or "),OP=n(J$,"A",{href:!0});var Iet=s(OP);Mno=r(Iet,"DPRQuestionEncoderTokenizerFast"),Iet.forEach(t),Eno=r(J$," (DPR model)"),J$.forEach(t),Cno=i(S),Zn=n(S,"LI",{});var Y$=s(Zn);Pne=n(Y$,"STRONG",{});var Net=s(Pne);wno=r(Net,"electra"),Net.forEach(t),Ano=r(Y$," \u2014 "),VP=n(Y$,"A",{href:!0});var qet=s(VP);Lno=r(qet,"ElectraTokenizer"),qet.forEach(t),yno=r(Y$," or "),XP=n(Y$,"A",{href:!0});var jet=s(XP);xno=r(jet,"ElectraTokenizerFast"),jet.forEach(t),$no=r(Y$," (ELECTRA model)"),Y$.forEach(t),kno=i(S),Yg=n(S,"LI",{});var WLe=s(Yg);Bne=n(WLe,"STRONG",{});var Det=s(Bne);Sno=r(Det,"flaubert"),Det.forEach(t),Rno=r(WLe," \u2014 "),zP=n(WLe,"A",{href:!0});var Get=s(zP);Pno=r(Get,"FlaubertTokenizer"),Get.forEach(t),Bno=r(WLe," (FlauBERT model)"),WLe.forEach(t),Ino=i(S),es=n(S,"LI",{});var K$=s(es);Ine=n(K$,"STRONG",{});var Oet=s(Ine);Nno=r(Oet,"fnet"),Oet.forEach(t),qno=r(K$," \u2014 "),WP=n(K$,"A",{href:!0});var Vet=s(WP);jno=r(Vet,"FNetTokenizer"),Vet.forEach(t),Dno=r(K$," or "),QP=n(K$,"A",{href:!0});var Xet=s(QP);Gno=r(Xet,"FNetTokenizerFast"),Xet.forEach(t),Ono=r(K$," (FNet model)"),K$.forEach(t),Vno=i(S),Kg=n(S,"LI",{});var QLe=s(Kg);Nne=n(QLe,"STRONG",{});var zet=s(Nne);Xno=r(zet,"fsmt"),zet.forEach(t),zno=r(QLe," \u2014 "),HP=n(QLe,"A",{href:!0});var Wet=s(HP);Wno=r(Wet,"FSMTTokenizer"),Wet.forEach(t),Qno=r(QLe," (FairSeq Machine-Translation model)"),QLe.forEach(t),Hno=i(S),os=n(S,"LI",{});var Z$=s(os);qne=n(Z$,"STRONG",{});var Qet=s(qne);Uno=r(Qet,"funnel"),Qet.forEach(t),Jno=r(Z$," \u2014 "),UP=n(Z$,"A",{href:!0});var Het=s(UP);Yno=r(Het,"FunnelTokenizer"),Het.forEach(t),Kno=r(Z$," or "),JP=n(Z$,"A",{href:!0});var Uet=s(JP);Zno=r(Uet,"FunnelTokenizerFast"),Uet.forEach(t),eso=r(Z$," (Funnel Transformer model)"),Z$.forEach(t),oso=i(S),rs=n(S,"LI",{});var ek=s(rs);jne=n(ek,"STRONG",{});var Jet=s(jne);rso=r(Jet,"gpt2"),Jet.forEach(t),tso=r(ek," \u2014 "),YP=n(ek,"A",{href:!0});var Yet=s(YP);aso=r(Yet,"GPT2Tokenizer"),Yet.forEach(t),nso=r(ek," or "),KP=n(ek,"A",{href:!0});var Ket=s(KP);sso=r(Ket,"GPT2TokenizerFast"),Ket.forEach(t),lso=r(ek," (OpenAI GPT-2 model)"),ek.forEach(t),iso=i(S),ts=n(S,"LI",{});var ok=s(ts);Dne=n(ok,"STRONG",{});var Zet=s(Dne);dso=r(Zet,"gpt_neo"),Zet.forEach(t),cso=r(ok," \u2014 "),ZP=n(ok,"A",{href:!0});var eot=s(ZP);mso=r(eot,"GPT2Tokenizer"),eot.forEach(t),fso=r(ok," or "),eB=n(ok,"A",{href:!0});var oot=s(eB);gso=r(oot,"GPT2TokenizerFast"),oot.forEach(t),hso=r(ok," (GPT Neo model)"),ok.forEach(t),uso=i(S),Zg=n(S,"LI",{});var HLe=s(Zg);Gne=n(HLe,"STRONG",{});var rot=s(Gne);pso=r(rot,"gpt_neox"),rot.forEach(t),_so=r(HLe," \u2014 "),oB=n(HLe,"A",{href:!0});var tot=s(oB);bso=r(tot,"GPTNeoXTokenizerFast"),tot.forEach(t),vso=r(HLe," (GPT NeoX model)"),HLe.forEach(t),Fso=i(S),as=n(S,"LI",{});var rk=s(as);One=n(rk,"STRONG",{});var aot=s(One);Tso=r(aot,"gptj"),aot.forEach(t),Mso=r(rk," \u2014 "),rB=n(rk,"A",{href:!0});var not=s(rB);Eso=r(not,"GPT2Tokenizer"),not.forEach(t),Cso=r(rk," or "),tB=n(rk,"A",{href:!0});var sot=s(tB);wso=r(sot,"GPT2TokenizerFast"),sot.forEach(t),Aso=r(rk," (GPT-J model)"),rk.forEach(t),Lso=i(S),ns=n(S,"LI",{});var tk=s(ns);Vne=n(tk,"STRONG",{});var lot=s(Vne);yso=r(lot,"herbert"),lot.forEach(t),xso=r(tk," \u2014 "),aB=n(tk,"A",{href:!0});var iot=s(aB);$so=r(iot,"HerbertTokenizer"),iot.forEach(t),kso=r(tk," or "),nB=n(tk,"A",{href:!0});var dot=s(nB);Sso=r(dot,"HerbertTokenizerFast"),dot.forEach(t),Rso=r(tk," (HerBERT model)"),tk.forEach(t),Pso=i(S),eh=n(S,"LI",{});var ULe=s(eh);Xne=n(ULe,"STRONG",{});var cot=s(Xne);Bso=r(cot,"hubert"),cot.forEach(t),Iso=r(ULe," \u2014 "),sB=n(ULe,"A",{href:!0});var mot=s(sB);Nso=r(mot,"Wav2Vec2CTCTokenizer"),mot.forEach(t),qso=r(ULe," (Hubert model)"),ULe.forEach(t),jso=i(S),ss=n(S,"LI",{});var ak=s(ss);zne=n(ak,"STRONG",{});var fot=s(zne);Dso=r(fot,"ibert"),fot.forEach(t),Gso=r(ak," \u2014 "),lB=n(ak,"A",{href:!0});var got=s(lB);Oso=r(got,"RobertaTokenizer"),got.forEach(t),Vso=r(ak," or "),iB=n(ak,"A",{href:!0});var hot=s(iB);Xso=r(hot,"RobertaTokenizerFast"),hot.forEach(t),zso=r(ak," (I-BERT model)"),ak.forEach(t),Wso=i(S),ls=n(S,"LI",{});var nk=s(ls);Wne=n(nk,"STRONG",{});var uot=s(Wne);Qso=r(uot,"layoutlm"),uot.forEach(t),Hso=r(nk," \u2014 "),dB=n(nk,"A",{href:!0});var pot=s(dB);Uso=r(pot,"LayoutLMTokenizer"),pot.forEach(t),Jso=r(nk," or "),cB=n(nk,"A",{href:!0});var _ot=s(cB);Yso=r(_ot,"LayoutLMTokenizerFast"),_ot.forEach(t),Kso=r(nk," (LayoutLM model)"),nk.forEach(t),Zso=i(S),is=n(S,"LI",{});var sk=s(is);Qne=n(sk,"STRONG",{});var bot=s(Qne);elo=r(bot,"layoutlmv2"),bot.forEach(t),olo=r(sk," \u2014 "),mB=n(sk,"A",{href:!0});var vot=s(mB);rlo=r(vot,"LayoutLMv2Tokenizer"),vot.forEach(t),tlo=r(sk," or "),fB=n(sk,"A",{href:!0});var Fot=s(fB);alo=r(Fot,"LayoutLMv2TokenizerFast"),Fot.forEach(t),nlo=r(sk," (LayoutLMv2 model)"),sk.forEach(t),slo=i(S),ds=n(S,"LI",{});var lk=s(ds);Hne=n(lk,"STRONG",{});var Tot=s(Hne);llo=r(Tot,"layoutlmv3"),Tot.forEach(t),ilo=r(lk," \u2014 "),gB=n(lk,"A",{href:!0});var Mot=s(gB);dlo=r(Mot,"LayoutLMv3Tokenizer"),Mot.forEach(t),clo=r(lk," or "),hB=n(lk,"A",{href:!0});var Eot=s(hB);mlo=r(Eot,"LayoutLMv3TokenizerFast"),Eot.forEach(t),flo=r(lk," (LayoutLMv3 model)"),lk.forEach(t),glo=i(S),cs=n(S,"LI",{});var ik=s(cs);Une=n(ik,"STRONG",{});var Cot=s(Une);hlo=r(Cot,"layoutxlm"),Cot.forEach(t),ulo=r(ik," \u2014 "),uB=n(ik,"A",{href:!0});var wot=s(uB);plo=r(wot,"LayoutXLMTokenizer"),wot.forEach(t),_lo=r(ik," or "),pB=n(ik,"A",{href:!0});var Aot=s(pB);blo=r(Aot,"LayoutXLMTokenizerFast"),Aot.forEach(t),vlo=r(ik," (LayoutXLM model)"),ik.forEach(t),Flo=i(S),ms=n(S,"LI",{});var dk=s(ms);Jne=n(dk,"STRONG",{});var Lot=s(Jne);Tlo=r(Lot,"led"),Lot.forEach(t),Mlo=r(dk," \u2014 "),_B=n(dk,"A",{href:!0});var yot=s(_B);Elo=r(yot,"LEDTokenizer"),yot.forEach(t),Clo=r(dk," or "),bB=n(dk,"A",{href:!0});var xot=s(bB);wlo=r(xot,"LEDTokenizerFast"),xot.forEach(t),Alo=r(dk," (LED model)"),dk.forEach(t),Llo=i(S),fs=n(S,"LI",{});var ck=s(fs);Yne=n(ck,"STRONG",{});var $ot=s(Yne);ylo=r($ot,"longformer"),$ot.forEach(t),xlo=r(ck," \u2014 "),vB=n(ck,"A",{href:!0});var kot=s(vB);$lo=r(kot,"LongformerTokenizer"),kot.forEach(t),klo=r(ck," or "),FB=n(ck,"A",{href:!0});var Sot=s(FB);Slo=r(Sot,"LongformerTokenizerFast"),Sot.forEach(t),Rlo=r(ck," (Longformer model)"),ck.forEach(t),Plo=i(S),gs=n(S,"LI",{});var mk=s(gs);Kne=n(mk,"STRONG",{});var Rot=s(Kne);Blo=r(Rot,"longt5"),Rot.forEach(t),Ilo=r(mk," \u2014 "),TB=n(mk,"A",{href:!0});var Pot=s(TB);Nlo=r(Pot,"T5Tokenizer"),Pot.forEach(t),qlo=r(mk," or "),MB=n(mk,"A",{href:!0});var Bot=s(MB);jlo=r(Bot,"T5TokenizerFast"),Bot.forEach(t),Dlo=r(mk," (LongT5 model)"),mk.forEach(t),Glo=i(S),oh=n(S,"LI",{});var JLe=s(oh);Zne=n(JLe,"STRONG",{});var Iot=s(Zne);Olo=r(Iot,"luke"),Iot.forEach(t),Vlo=r(JLe," \u2014 "),EB=n(JLe,"A",{href:!0});var Not=s(EB);Xlo=r(Not,"LukeTokenizer"),Not.forEach(t),zlo=r(JLe," (LUKE model)"),JLe.forEach(t),Wlo=i(S),hs=n(S,"LI",{});var fk=s(hs);ese=n(fk,"STRONG",{});var qot=s(ese);Qlo=r(qot,"lxmert"),qot.forEach(t),Hlo=r(fk," \u2014 "),CB=n(fk,"A",{href:!0});var jot=s(CB);Ulo=r(jot,"LxmertTokenizer"),jot.forEach(t),Jlo=r(fk," or "),wB=n(fk,"A",{href:!0});var Dot=s(wB);Ylo=r(Dot,"LxmertTokenizerFast"),Dot.forEach(t),Klo=r(fk," (LXMERT model)"),fk.forEach(t),Zlo=i(S),rh=n(S,"LI",{});var YLe=s(rh);ose=n(YLe,"STRONG",{});var Got=s(ose);eio=r(Got,"m2m_100"),Got.forEach(t),oio=r(YLe," \u2014 "),AB=n(YLe,"A",{href:!0});var Oot=s(AB);rio=r(Oot,"M2M100Tokenizer"),Oot.forEach(t),tio=r(YLe," (M2M100 model)"),YLe.forEach(t),aio=i(S),th=n(S,"LI",{});var KLe=s(th);rse=n(KLe,"STRONG",{});var Vot=s(rse);nio=r(Vot,"marian"),Vot.forEach(t),sio=r(KLe," \u2014 "),LB=n(KLe,"A",{href:!0});var Xot=s(LB);lio=r(Xot,"MarianTokenizer"),Xot.forEach(t),iio=r(KLe," (Marian model)"),KLe.forEach(t),dio=i(S),us=n(S,"LI",{});var gk=s(us);tse=n(gk,"STRONG",{});var zot=s(tse);cio=r(zot,"mbart"),zot.forEach(t),mio=r(gk," \u2014 "),yB=n(gk,"A",{href:!0});var Wot=s(yB);fio=r(Wot,"MBartTokenizer"),Wot.forEach(t),gio=r(gk," or "),xB=n(gk,"A",{href:!0});var Qot=s(xB);hio=r(Qot,"MBartTokenizerFast"),Qot.forEach(t),uio=r(gk," (mBART model)"),gk.forEach(t),pio=i(S),ps=n(S,"LI",{});var hk=s(ps);ase=n(hk,"STRONG",{});var Hot=s(ase);_io=r(Hot,"mbart50"),Hot.forEach(t),bio=r(hk," \u2014 "),$B=n(hk,"A",{href:!0});var Uot=s($B);vio=r(Uot,"MBart50Tokenizer"),Uot.forEach(t),Fio=r(hk," or "),kB=n(hk,"A",{href:!0});var Jot=s(kB);Tio=r(Jot,"MBart50TokenizerFast"),Jot.forEach(t),Mio=r(hk," (mBART-50 model)"),hk.forEach(t),Eio=i(S),_s=n(S,"LI",{});var uk=s(_s);nse=n(uk,"STRONG",{});var Yot=s(nse);Cio=r(Yot,"megatron-bert"),Yot.forEach(t),wio=r(uk," \u2014 "),SB=n(uk,"A",{href:!0});var Kot=s(SB);Aio=r(Kot,"BertTokenizer"),Kot.forEach(t),Lio=r(uk," or "),RB=n(uk,"A",{href:!0});var Zot=s(RB);yio=r(Zot,"BertTokenizerFast"),Zot.forEach(t),xio=r(uk," (Megatron-BERT model)"),uk.forEach(t),$io=i(S),ah=n(S,"LI",{});var ZLe=s(ah);sse=n(ZLe,"STRONG",{});var ert=s(sse);kio=r(ert,"mluke"),ert.forEach(t),Sio=r(ZLe," \u2014 "),PB=n(ZLe,"A",{href:!0});var ort=s(PB);Rio=r(ort,"MLukeTokenizer"),ort.forEach(t),Pio=r(ZLe," (mLUKE model)"),ZLe.forEach(t),Bio=i(S),bs=n(S,"LI",{});var pk=s(bs);lse=n(pk,"STRONG",{});var rrt=s(lse);Iio=r(rrt,"mobilebert"),rrt.forEach(t),Nio=r(pk," \u2014 "),BB=n(pk,"A",{href:!0});var trt=s(BB);qio=r(trt,"MobileBertTokenizer"),trt.forEach(t),jio=r(pk," or "),IB=n(pk,"A",{href:!0});var art=s(IB);Dio=r(art,"MobileBertTokenizerFast"),art.forEach(t),Gio=r(pk," (MobileBERT model)"),pk.forEach(t),Oio=i(S),vs=n(S,"LI",{});var _k=s(vs);ise=n(_k,"STRONG",{});var nrt=s(ise);Vio=r(nrt,"mpnet"),nrt.forEach(t),Xio=r(_k," \u2014 "),NB=n(_k,"A",{href:!0});var srt=s(NB);zio=r(srt,"MPNetTokenizer"),srt.forEach(t),Wio=r(_k," or "),qB=n(_k,"A",{href:!0});var lrt=s(qB);Qio=r(lrt,"MPNetTokenizerFast"),lrt.forEach(t),Hio=r(_k," (MPNet model)"),_k.forEach(t),Uio=i(S),Fs=n(S,"LI",{});var bk=s(Fs);dse=n(bk,"STRONG",{});var irt=s(dse);Jio=r(irt,"mt5"),irt.forEach(t),Yio=r(bk," \u2014 "),jB=n(bk,"A",{href:!0});var drt=s(jB);Kio=r(drt,"MT5Tokenizer"),drt.forEach(t),Zio=r(bk," or "),DB=n(bk,"A",{href:!0});var crt=s(DB);edo=r(crt,"MT5TokenizerFast"),crt.forEach(t),odo=r(bk," (MT5 model)"),bk.forEach(t),rdo=i(S),Ts=n(S,"LI",{});var vk=s(Ts);cse=n(vk,"STRONG",{});var mrt=s(cse);tdo=r(mrt,"nystromformer"),mrt.forEach(t),ado=r(vk," \u2014 "),GB=n(vk,"A",{href:!0});var frt=s(GB);ndo=r(frt,"AlbertTokenizer"),frt.forEach(t),sdo=r(vk," or "),OB=n(vk,"A",{href:!0});var grt=s(OB);ldo=r(grt,"AlbertTokenizerFast"),grt.forEach(t),ido=r(vk," (Nystr\xF6mformer model)"),vk.forEach(t),ddo=i(S),Ms=n(S,"LI",{});var Fk=s(Ms);mse=n(Fk,"STRONG",{});var hrt=s(mse);cdo=r(hrt,"openai-gpt"),hrt.forEach(t),mdo=r(Fk," \u2014 "),VB=n(Fk,"A",{href:!0});var urt=s(VB);fdo=r(urt,"OpenAIGPTTokenizer"),urt.forEach(t),gdo=r(Fk," or "),XB=n(Fk,"A",{href:!0});var prt=s(XB);hdo=r(prt,"OpenAIGPTTokenizerFast"),prt.forEach(t),udo=r(Fk," (OpenAI GPT model)"),Fk.forEach(t),pdo=i(S),nh=n(S,"LI",{});var eye=s(nh);fse=n(eye,"STRONG",{});var _rt=s(fse);_do=r(_rt,"opt"),_rt.forEach(t),bdo=r(eye," \u2014 "),zB=n(eye,"A",{href:!0});var brt=s(zB);vdo=r(brt,"GPT2Tokenizer"),brt.forEach(t),Fdo=r(eye," (OPT model)"),eye.forEach(t),Tdo=i(S),Es=n(S,"LI",{});var Tk=s(Es);gse=n(Tk,"STRONG",{});var vrt=s(gse);Mdo=r(vrt,"pegasus"),vrt.forEach(t),Edo=r(Tk," \u2014 "),WB=n(Tk,"A",{href:!0});var Frt=s(WB);Cdo=r(Frt,"PegasusTokenizer"),Frt.forEach(t),wdo=r(Tk," or "),QB=n(Tk,"A",{href:!0});var Trt=s(QB);Ado=r(Trt,"PegasusTokenizerFast"),Trt.forEach(t),Ldo=r(Tk," (Pegasus model)"),Tk.forEach(t),ydo=i(S),sh=n(S,"LI",{});var oye=s(sh);hse=n(oye,"STRONG",{});var Mrt=s(hse);xdo=r(Mrt,"perceiver"),Mrt.forEach(t),$do=r(oye," \u2014 "),HB=n(oye,"A",{href:!0});var Ert=s(HB);kdo=r(Ert,"PerceiverTokenizer"),Ert.forEach(t),Sdo=r(oye," (Perceiver model)"),oye.forEach(t),Rdo=i(S),lh=n(S,"LI",{});var rye=s(lh);use=n(rye,"STRONG",{});var Crt=s(use);Pdo=r(Crt,"phobert"),Crt.forEach(t),Bdo=r(rye," \u2014 "),UB=n(rye,"A",{href:!0});var wrt=s(UB);Ido=r(wrt,"PhobertTokenizer"),wrt.forEach(t),Ndo=r(rye," (PhoBERT model)"),rye.forEach(t),qdo=i(S),ih=n(S,"LI",{});var tye=s(ih);pse=n(tye,"STRONG",{});var Art=s(pse);jdo=r(Art,"plbart"),Art.forEach(t),Ddo=r(tye," \u2014 "),JB=n(tye,"A",{href:!0});var Lrt=s(JB);Gdo=r(Lrt,"PLBartTokenizer"),Lrt.forEach(t),Odo=r(tye," (PLBart model)"),tye.forEach(t),Vdo=i(S),dh=n(S,"LI",{});var aye=s(dh);_se=n(aye,"STRONG",{});var yrt=s(_se);Xdo=r(yrt,"prophetnet"),yrt.forEach(t),zdo=r(aye," \u2014 "),YB=n(aye,"A",{href:!0});var xrt=s(YB);Wdo=r(xrt,"ProphetNetTokenizer"),xrt.forEach(t),Qdo=r(aye," (ProphetNet model)"),aye.forEach(t),Hdo=i(S),Cs=n(S,"LI",{});var Mk=s(Cs);bse=n(Mk,"STRONG",{});var $rt=s(bse);Udo=r($rt,"qdqbert"),$rt.forEach(t),Jdo=r(Mk," \u2014 "),KB=n(Mk,"A",{href:!0});var krt=s(KB);Ydo=r(krt,"BertTokenizer"),krt.forEach(t),Kdo=r(Mk," or "),ZB=n(Mk,"A",{href:!0});var Srt=s(ZB);Zdo=r(Srt,"BertTokenizerFast"),Srt.forEach(t),eco=r(Mk," (QDQBert model)"),Mk.forEach(t),oco=i(S),ch=n(S,"LI",{});var nye=s(ch);vse=n(nye,"STRONG",{});var Rrt=s(vse);rco=r(Rrt,"rag"),Rrt.forEach(t),tco=r(nye," \u2014 "),eI=n(nye,"A",{href:!0});var Prt=s(eI);aco=r(Prt,"RagTokenizer"),Prt.forEach(t),nco=r(nye," (RAG model)"),nye.forEach(t),sco=i(S),ws=n(S,"LI",{});var Ek=s(ws);Fse=n(Ek,"STRONG",{});var Brt=s(Fse);lco=r(Brt,"realm"),Brt.forEach(t),ico=r(Ek," \u2014 "),oI=n(Ek,"A",{href:!0});var Irt=s(oI);dco=r(Irt,"RealmTokenizer"),Irt.forEach(t),cco=r(Ek," or "),rI=n(Ek,"A",{href:!0});var Nrt=s(rI);mco=r(Nrt,"RealmTokenizerFast"),Nrt.forEach(t),fco=r(Ek," (REALM model)"),Ek.forEach(t),gco=i(S),As=n(S,"LI",{});var Ck=s(As);Tse=n(Ck,"STRONG",{});var qrt=s(Tse);hco=r(qrt,"reformer"),qrt.forEach(t),uco=r(Ck," \u2014 "),tI=n(Ck,"A",{href:!0});var jrt=s(tI);pco=r(jrt,"ReformerTokenizer"),jrt.forEach(t),_co=r(Ck," or "),aI=n(Ck,"A",{href:!0});var Drt=s(aI);bco=r(Drt,"ReformerTokenizerFast"),Drt.forEach(t),vco=r(Ck," (Reformer model)"),Ck.forEach(t),Fco=i(S),Ls=n(S,"LI",{});var wk=s(Ls);Mse=n(wk,"STRONG",{});var Grt=s(Mse);Tco=r(Grt,"rembert"),Grt.forEach(t),Mco=r(wk," \u2014 "),nI=n(wk,"A",{href:!0});var Ort=s(nI);Eco=r(Ort,"RemBertTokenizer"),Ort.forEach(t),Cco=r(wk," or "),sI=n(wk,"A",{href:!0});var Vrt=s(sI);wco=r(Vrt,"RemBertTokenizerFast"),Vrt.forEach(t),Aco=r(wk," (RemBERT model)"),wk.forEach(t),Lco=i(S),ys=n(S,"LI",{});var Ak=s(ys);Ese=n(Ak,"STRONG",{});var Xrt=s(Ese);yco=r(Xrt,"retribert"),Xrt.forEach(t),xco=r(Ak," \u2014 "),lI=n(Ak,"A",{href:!0});var zrt=s(lI);$co=r(zrt,"RetriBertTokenizer"),zrt.forEach(t),kco=r(Ak," or "),iI=n(Ak,"A",{href:!0});var Wrt=s(iI);Sco=r(Wrt,"RetriBertTokenizerFast"),Wrt.forEach(t),Rco=r(Ak," (RetriBERT model)"),Ak.forEach(t),Pco=i(S),xs=n(S,"LI",{});var Lk=s(xs);Cse=n(Lk,"STRONG",{});var Qrt=s(Cse);Bco=r(Qrt,"roberta"),Qrt.forEach(t),Ico=r(Lk," \u2014 "),dI=n(Lk,"A",{href:!0});var Hrt=s(dI);Nco=r(Hrt,"RobertaTokenizer"),Hrt.forEach(t),qco=r(Lk," or "),cI=n(Lk,"A",{href:!0});var Urt=s(cI);jco=r(Urt,"RobertaTokenizerFast"),Urt.forEach(t),Dco=r(Lk," (RoBERTa model)"),Lk.forEach(t),Gco=i(S),$s=n(S,"LI",{});var yk=s($s);wse=n(yk,"STRONG",{});var Jrt=s(wse);Oco=r(Jrt,"roformer"),Jrt.forEach(t),Vco=r(yk," \u2014 "),mI=n(yk,"A",{href:!0});var Yrt=s(mI);Xco=r(Yrt,"RoFormerTokenizer"),Yrt.forEach(t),zco=r(yk," or "),fI=n(yk,"A",{href:!0});var Krt=s(fI);Wco=r(Krt,"RoFormerTokenizerFast"),Krt.forEach(t),Qco=r(yk," (RoFormer model)"),yk.forEach(t),Hco=i(S),mh=n(S,"LI",{});var sye=s(mh);Ase=n(sye,"STRONG",{});var Zrt=s(Ase);Uco=r(Zrt,"speech_to_text"),Zrt.forEach(t),Jco=r(sye," \u2014 "),gI=n(sye,"A",{href:!0});var ett=s(gI);Yco=r(ett,"Speech2TextTokenizer"),ett.forEach(t),Kco=r(sye," (Speech2Text model)"),sye.forEach(t),Zco=i(S),fh=n(S,"LI",{});var lye=s(fh);Lse=n(lye,"STRONG",{});var ott=s(Lse);emo=r(ott,"speech_to_text_2"),ott.forEach(t),omo=r(lye," \u2014 "),hI=n(lye,"A",{href:!0});var rtt=s(hI);rmo=r(rtt,"Speech2Text2Tokenizer"),rtt.forEach(t),tmo=r(lye," (Speech2Text2 model)"),lye.forEach(t),amo=i(S),ks=n(S,"LI",{});var xk=s(ks);yse=n(xk,"STRONG",{});var ttt=s(yse);nmo=r(ttt,"splinter"),ttt.forEach(t),smo=r(xk," \u2014 "),uI=n(xk,"A",{href:!0});var att=s(uI);lmo=r(att,"SplinterTokenizer"),att.forEach(t),imo=r(xk," or "),pI=n(xk,"A",{href:!0});var ntt=s(pI);dmo=r(ntt,"SplinterTokenizerFast"),ntt.forEach(t),cmo=r(xk," (Splinter model)"),xk.forEach(t),mmo=i(S),Ss=n(S,"LI",{});var $k=s(Ss);xse=n($k,"STRONG",{});var stt=s(xse);fmo=r(stt,"squeezebert"),stt.forEach(t),gmo=r($k," \u2014 "),_I=n($k,"A",{href:!0});var ltt=s(_I);hmo=r(ltt,"SqueezeBertTokenizer"),ltt.forEach(t),umo=r($k," or "),bI=n($k,"A",{href:!0});var itt=s(bI);pmo=r(itt,"SqueezeBertTokenizerFast"),itt.forEach(t),_mo=r($k," (SqueezeBERT model)"),$k.forEach(t),bmo=i(S),Rs=n(S,"LI",{});var kk=s(Rs);$se=n(kk,"STRONG",{});var dtt=s($se);vmo=r(dtt,"t5"),dtt.forEach(t),Fmo=r(kk," \u2014 "),vI=n(kk,"A",{href:!0});var ctt=s(vI);Tmo=r(ctt,"T5Tokenizer"),ctt.forEach(t),Mmo=r(kk," or "),FI=n(kk,"A",{href:!0});var mtt=s(FI);Emo=r(mtt,"T5TokenizerFast"),mtt.forEach(t),Cmo=r(kk," (T5 model)"),kk.forEach(t),wmo=i(S),gh=n(S,"LI",{});var iye=s(gh);kse=n(iye,"STRONG",{});var ftt=s(kse);Amo=r(ftt,"tapas"),ftt.forEach(t),Lmo=r(iye," \u2014 "),TI=n(iye,"A",{href:!0});var gtt=s(TI);ymo=r(gtt,"TapasTokenizer"),gtt.forEach(t),xmo=r(iye," (TAPAS model)"),iye.forEach(t),$mo=i(S),hh=n(S,"LI",{});var dye=s(hh);Sse=n(dye,"STRONG",{});var htt=s(Sse);kmo=r(htt,"tapex"),htt.forEach(t),Smo=r(dye," \u2014 "),MI=n(dye,"A",{href:!0});var utt=s(MI);Rmo=r(utt,"TapexTokenizer"),utt.forEach(t),Pmo=r(dye," (TAPEX model)"),dye.forEach(t),Bmo=i(S),uh=n(S,"LI",{});var cye=s(uh);Rse=n(cye,"STRONG",{});var ptt=s(Rse);Imo=r(ptt,"transfo-xl"),ptt.forEach(t),Nmo=r(cye," \u2014 "),EI=n(cye,"A",{href:!0});var _tt=s(EI);qmo=r(_tt,"TransfoXLTokenizer"),_tt.forEach(t),jmo=r(cye," (Transformer-XL model)"),cye.forEach(t),Dmo=i(S),Ps=n(S,"LI",{});var Sk=s(Ps);Pse=n(Sk,"STRONG",{});var btt=s(Pse);Gmo=r(btt,"vilt"),btt.forEach(t),Omo=r(Sk," \u2014 "),CI=n(Sk,"A",{href:!0});var vtt=s(CI);Vmo=r(vtt,"BertTokenizer"),vtt.forEach(t),Xmo=r(Sk," or "),wI=n(Sk,"A",{href:!0});var Ftt=s(wI);zmo=r(Ftt,"BertTokenizerFast"),Ftt.forEach(t),Wmo=r(Sk," (ViLT model)"),Sk.forEach(t),Qmo=i(S),Bs=n(S,"LI",{});var Rk=s(Bs);Bse=n(Rk,"STRONG",{});var Ttt=s(Bse);Hmo=r(Ttt,"visual_bert"),Ttt.forEach(t),Umo=r(Rk," \u2014 "),AI=n(Rk,"A",{href:!0});var Mtt=s(AI);Jmo=r(Mtt,"BertTokenizer"),Mtt.forEach(t),Ymo=r(Rk," or "),LI=n(Rk,"A",{href:!0});var Ett=s(LI);Kmo=r(Ett,"BertTokenizerFast"),Ett.forEach(t),Zmo=r(Rk," (VisualBERT model)"),Rk.forEach(t),efo=i(S),ph=n(S,"LI",{});var mye=s(ph);Ise=n(mye,"STRONG",{});var Ctt=s(Ise);ofo=r(Ctt,"wav2vec2"),Ctt.forEach(t),rfo=r(mye," \u2014 "),yI=n(mye,"A",{href:!0});var wtt=s(yI);tfo=r(wtt,"Wav2Vec2CTCTokenizer"),wtt.forEach(t),afo=r(mye," (Wav2Vec2 model)"),mye.forEach(t),nfo=i(S),_h=n(S,"LI",{});var fye=s(_h);Nse=n(fye,"STRONG",{});var Att=s(Nse);sfo=r(Att,"wav2vec2-conformer"),Att.forEach(t),lfo=r(fye," \u2014 "),xI=n(fye,"A",{href:!0});var Ltt=s(xI);ifo=r(Ltt,"Wav2Vec2CTCTokenizer"),Ltt.forEach(t),dfo=r(fye," (Wav2Vec2-Conformer model)"),fye.forEach(t),cfo=i(S),bh=n(S,"LI",{});var gye=s(bh);qse=n(gye,"STRONG",{});var ytt=s(qse);mfo=r(ytt,"wav2vec2_phoneme"),ytt.forEach(t),ffo=r(gye," \u2014 "),$I=n(gye,"A",{href:!0});var xtt=s($I);gfo=r(xtt,"Wav2Vec2PhonemeCTCTokenizer"),xtt.forEach(t),hfo=r(gye," (Wav2Vec2Phoneme model)"),gye.forEach(t),ufo=i(S),Is=n(S,"LI",{});var Pk=s(Is);jse=n(Pk,"STRONG",{});var $tt=s(jse);pfo=r($tt,"xglm"),$tt.forEach(t),_fo=r(Pk," \u2014 "),kI=n(Pk,"A",{href:!0});var ktt=s(kI);bfo=r(ktt,"XGLMTokenizer"),ktt.forEach(t),vfo=r(Pk," or "),SI=n(Pk,"A",{href:!0});var Stt=s(SI);Ffo=r(Stt,"XGLMTokenizerFast"),Stt.forEach(t),Tfo=r(Pk," (XGLM model)"),Pk.forEach(t),Mfo=i(S),vh=n(S,"LI",{});var hye=s(vh);Dse=n(hye,"STRONG",{});var Rtt=s(Dse);Efo=r(Rtt,"xlm"),Rtt.forEach(t),Cfo=r(hye," \u2014 "),RI=n(hye,"A",{href:!0});var Ptt=s(RI);wfo=r(Ptt,"XLMTokenizer"),Ptt.forEach(t),Afo=r(hye," (XLM model)"),hye.forEach(t),Lfo=i(S),Fh=n(S,"LI",{});var uye=s(Fh);Gse=n(uye,"STRONG",{});var Btt=s(Gse);yfo=r(Btt,"xlm-prophetnet"),Btt.forEach(t),xfo=r(uye," \u2014 "),PI=n(uye,"A",{href:!0});var Itt=s(PI);$fo=r(Itt,"XLMProphetNetTokenizer"),Itt.forEach(t),kfo=r(uye," (XLM-ProphetNet model)"),uye.forEach(t),Sfo=i(S),Ns=n(S,"LI",{});var Bk=s(Ns);Ose=n(Bk,"STRONG",{});var Ntt=s(Ose);Rfo=r(Ntt,"xlm-roberta"),Ntt.forEach(t),Pfo=r(Bk," \u2014 "),BI=n(Bk,"A",{href:!0});var qtt=s(BI);Bfo=r(qtt,"XLMRobertaTokenizer"),qtt.forEach(t),Ifo=r(Bk," or "),II=n(Bk,"A",{href:!0});var jtt=s(II);Nfo=r(jtt,"XLMRobertaTokenizerFast"),jtt.forEach(t),qfo=r(Bk," (XLM-RoBERTa model)"),Bk.forEach(t),jfo=i(S),qs=n(S,"LI",{});var Ik=s(qs);Vse=n(Ik,"STRONG",{});var Dtt=s(Vse);Dfo=r(Dtt,"xlm-roberta-xl"),Dtt.forEach(t),Gfo=r(Ik," \u2014 "),NI=n(Ik,"A",{href:!0});var Gtt=s(NI);Ofo=r(Gtt,"RobertaTokenizer"),Gtt.forEach(t),Vfo=r(Ik," or "),qI=n(Ik,"A",{href:!0});var Ott=s(qI);Xfo=r(Ott,"RobertaTokenizerFast"),Ott.forEach(t),zfo=r(Ik," (XLM-RoBERTa-XL model)"),Ik.forEach(t),Wfo=i(S),js=n(S,"LI",{});var Nk=s(js);Xse=n(Nk,"STRONG",{});var Vtt=s(Xse);Qfo=r(Vtt,"xlnet"),Vtt.forEach(t),Hfo=r(Nk," \u2014 "),jI=n(Nk,"A",{href:!0});var Xtt=s(jI);Ufo=r(Xtt,"XLNetTokenizer"),Xtt.forEach(t),Jfo=r(Nk," or "),DI=n(Nk,"A",{href:!0});var ztt=s(DI);Yfo=r(ztt,"XLNetTokenizerFast"),ztt.forEach(t),Kfo=r(Nk," (XLNet model)"),Nk.forEach(t),Zfo=i(S),Ds=n(S,"LI",{});var qk=s(Ds);zse=n(qk,"STRONG",{});var Wtt=s(zse);ego=r(Wtt,"yoso"),Wtt.forEach(t),ogo=r(qk," \u2014 "),GI=n(qk,"A",{href:!0});var Qtt=s(GI);rgo=r(Qtt,"AlbertTokenizer"),Qtt.forEach(t),tgo=r(qk," or "),OI=n(qk,"A",{href:!0});var Htt=s(OI);ago=r(Htt,"AlbertTokenizerFast"),Htt.forEach(t),ngo=r(qk," (YOSO model)"),qk.forEach(t),S.forEach(t),sgo=i(Ws),T(Th.$$.fragment,Ws),Ws.forEach(t),lgo=i(zs),Mh=n(zs,"DIV",{class:!0});var eVe=s(Mh);T($y.$$.fragment,eVe),igo=i(eVe),Wse=n(eVe,"P",{});var Utt=s(Wse);dgo=r(Utt,"Register a new tokenizer in this mapping."),Utt.forEach(t),eVe.forEach(t),zs.forEach(t),ZDe=i(m),ki=n(m,"H2",{class:!0});var oVe=s(ki);Eh=n(oVe,"A",{id:!0,class:!0,href:!0});var Jtt=s(Eh);Qse=n(Jtt,"SPAN",{});var Ytt=s(Qse);T(ky.$$.fragment,Ytt),Ytt.forEach(t),Jtt.forEach(t),cgo=i(oVe),Hse=n(oVe,"SPAN",{});var Ktt=s(Hse);mgo=r(Ktt,"AutoFeatureExtractor"),Ktt.forEach(t),oVe.forEach(t),eGe=i(m),Lo=n(m,"DIV",{class:!0});var Qs=s(Lo);T(Sy.$$.fragment,Qs),fgo=i(Qs),Ry=n(Qs,"P",{});var rVe=s(Ry);ggo=r(rVe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),VI=n(rVe,"A",{href:!0});var Ztt=s(VI);hgo=r(Ztt,"AutoFeatureExtractor.from_pretrained()"),Ztt.forEach(t),ugo=r(rVe," class method."),rVe.forEach(t),pgo=i(Qs),Py=n(Qs,"P",{});var tVe=s(Py);_go=r(tVe,"This class cannot be instantiated directly using "),Use=n(tVe,"CODE",{});var eat=s(Use);bgo=r(eat,"__init__()"),eat.forEach(t),vgo=r(tVe," (throws an error)."),tVe.forEach(t),Fgo=i(Qs),He=n(Qs,"DIV",{class:!0});var ra=s(He);T(By.$$.fragment,ra),Tgo=i(ra),Jse=n(ra,"P",{});var oat=s(Jse);Mgo=r(oat,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),oat.forEach(t),Ego=i(ra),ka=n(ra,"P",{});var b6=s(ka);Cgo=r(b6,"The feature extractor class to instantiate is selected based on the "),Yse=n(b6,"CODE",{});var rat=s(Yse);wgo=r(rat,"model_type"),rat.forEach(t),Ago=r(b6,` property of the config object
(either passed as an argument or loaded from `),Kse=n(b6,"CODE",{});var tat=s(Kse);Lgo=r(tat,"pretrained_model_name_or_path"),tat.forEach(t),ygo=r(b6,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Zse=n(b6,"CODE",{});var aat=s(Zse);xgo=r(aat,"pretrained_model_name_or_path"),aat.forEach(t),$go=r(b6,":"),b6.forEach(t),kgo=i(ra),Y=n(ra,"UL",{});var K=s(Y);Ch=n(K,"LI",{});var pye=s(Ch);ele=n(pye,"STRONG",{});var nat=s(ele);Sgo=r(nat,"beit"),nat.forEach(t),Rgo=r(pye," \u2014 "),XI=n(pye,"A",{href:!0});var sat=s(XI);Pgo=r(sat,"BeitFeatureExtractor"),sat.forEach(t),Bgo=r(pye," (BEiT model)"),pye.forEach(t),Igo=i(K),wh=n(K,"LI",{});var _ye=s(wh);ole=n(_ye,"STRONG",{});var lat=s(ole);Ngo=r(lat,"clip"),lat.forEach(t),qgo=r(_ye," \u2014 "),zI=n(_ye,"A",{href:!0});var iat=s(zI);jgo=r(iat,"CLIPFeatureExtractor"),iat.forEach(t),Dgo=r(_ye," (CLIP model)"),_ye.forEach(t),Ggo=i(K),Ah=n(K,"LI",{});var bye=s(Ah);rle=n(bye,"STRONG",{});var dat=s(rle);Ogo=r(dat,"convnext"),dat.forEach(t),Vgo=r(bye," \u2014 "),WI=n(bye,"A",{href:!0});var cat=s(WI);Xgo=r(cat,"ConvNextFeatureExtractor"),cat.forEach(t),zgo=r(bye," (ConvNeXT model)"),bye.forEach(t),Wgo=i(K),Lh=n(K,"LI",{});var vye=s(Lh);tle=n(vye,"STRONG",{});var mat=s(tle);Qgo=r(mat,"cvt"),mat.forEach(t),Hgo=r(vye," \u2014 "),QI=n(vye,"A",{href:!0});var fat=s(QI);Ugo=r(fat,"ConvNextFeatureExtractor"),fat.forEach(t),Jgo=r(vye," (CvT model)"),vye.forEach(t),Ygo=i(K),yh=n(K,"LI",{});var Fye=s(yh);ale=n(Fye,"STRONG",{});var gat=s(ale);Kgo=r(gat,"data2vec-audio"),gat.forEach(t),Zgo=r(Fye," \u2014 "),HI=n(Fye,"A",{href:!0});var hat=s(HI);eho=r(hat,"Wav2Vec2FeatureExtractor"),hat.forEach(t),oho=r(Fye," (Data2VecAudio model)"),Fye.forEach(t),rho=i(K),xh=n(K,"LI",{});var Tye=s(xh);nle=n(Tye,"STRONG",{});var uat=s(nle);tho=r(uat,"data2vec-vision"),uat.forEach(t),aho=r(Tye," \u2014 "),UI=n(Tye,"A",{href:!0});var pat=s(UI);nho=r(pat,"BeitFeatureExtractor"),pat.forEach(t),sho=r(Tye," (Data2VecVision model)"),Tye.forEach(t),lho=i(K),$h=n(K,"LI",{});var Mye=s($h);sle=n(Mye,"STRONG",{});var _at=s(sle);iho=r(_at,"deit"),_at.forEach(t),dho=r(Mye," \u2014 "),JI=n(Mye,"A",{href:!0});var bat=s(JI);cho=r(bat,"DeiTFeatureExtractor"),bat.forEach(t),mho=r(Mye," (DeiT model)"),Mye.forEach(t),fho=i(K),kh=n(K,"LI",{});var Eye=s(kh);lle=n(Eye,"STRONG",{});var vat=s(lle);gho=r(vat,"detr"),vat.forEach(t),hho=r(Eye," \u2014 "),YI=n(Eye,"A",{href:!0});var Fat=s(YI);uho=r(Fat,"DetrFeatureExtractor"),Fat.forEach(t),pho=r(Eye," (DETR model)"),Eye.forEach(t),_ho=i(K),Sh=n(K,"LI",{});var Cye=s(Sh);ile=n(Cye,"STRONG",{});var Tat=s(ile);bho=r(Tat,"dpt"),Tat.forEach(t),vho=r(Cye," \u2014 "),KI=n(Cye,"A",{href:!0});var Mat=s(KI);Fho=r(Mat,"DPTFeatureExtractor"),Mat.forEach(t),Tho=r(Cye," (DPT model)"),Cye.forEach(t),Mho=i(K),Rh=n(K,"LI",{});var wye=s(Rh);dle=n(wye,"STRONG",{});var Eat=s(dle);Eho=r(Eat,"flava"),Eat.forEach(t),Cho=r(wye," \u2014 "),ZI=n(wye,"A",{href:!0});var Cat=s(ZI);who=r(Cat,"FlavaFeatureExtractor"),Cat.forEach(t),Aho=r(wye," (FLAVA model)"),wye.forEach(t),Lho=i(K),Ph=n(K,"LI",{});var Aye=s(Ph);cle=n(Aye,"STRONG",{});var wat=s(cle);yho=r(wat,"glpn"),wat.forEach(t),xho=r(Aye," \u2014 "),eN=n(Aye,"A",{href:!0});var Aat=s(eN);$ho=r(Aat,"GLPNFeatureExtractor"),Aat.forEach(t),kho=r(Aye," (GLPN model)"),Aye.forEach(t),Sho=i(K),Bh=n(K,"LI",{});var Lye=s(Bh);mle=n(Lye,"STRONG",{});var Lat=s(mle);Rho=r(Lat,"hubert"),Lat.forEach(t),Pho=r(Lye," \u2014 "),oN=n(Lye,"A",{href:!0});var yat=s(oN);Bho=r(yat,"Wav2Vec2FeatureExtractor"),yat.forEach(t),Iho=r(Lye," (Hubert model)"),Lye.forEach(t),Nho=i(K),Ih=n(K,"LI",{});var yye=s(Ih);fle=n(yye,"STRONG",{});var xat=s(fle);qho=r(xat,"imagegpt"),xat.forEach(t),jho=r(yye," \u2014 "),rN=n(yye,"A",{href:!0});var $at=s(rN);Dho=r($at,"ImageGPTFeatureExtractor"),$at.forEach(t),Gho=r(yye," (ImageGPT model)"),yye.forEach(t),Oho=i(K),Nh=n(K,"LI",{});var xye=s(Nh);gle=n(xye,"STRONG",{});var kat=s(gle);Vho=r(kat,"layoutlmv2"),kat.forEach(t),Xho=r(xye," \u2014 "),tN=n(xye,"A",{href:!0});var Sat=s(tN);zho=r(Sat,"LayoutLMv2FeatureExtractor"),Sat.forEach(t),Who=r(xye," (LayoutLMv2 model)"),xye.forEach(t),Qho=i(K),qh=n(K,"LI",{});var $ye=s(qh);hle=n($ye,"STRONG",{});var Rat=s(hle);Hho=r(Rat,"layoutlmv3"),Rat.forEach(t),Uho=r($ye," \u2014 "),aN=n($ye,"A",{href:!0});var Pat=s(aN);Jho=r(Pat,"LayoutLMv3FeatureExtractor"),Pat.forEach(t),Yho=r($ye," (LayoutLMv3 model)"),$ye.forEach(t),Kho=i(K),jh=n(K,"LI",{});var kye=s(jh);ule=n(kye,"STRONG",{});var Bat=s(ule);Zho=r(Bat,"levit"),Bat.forEach(t),euo=r(kye," \u2014 "),nN=n(kye,"A",{href:!0});var Iat=s(nN);ouo=r(Iat,"LevitFeatureExtractor"),Iat.forEach(t),ruo=r(kye," (LeViT model)"),kye.forEach(t),tuo=i(K),Dh=n(K,"LI",{});var Sye=s(Dh);ple=n(Sye,"STRONG",{});var Nat=s(ple);auo=r(Nat,"maskformer"),Nat.forEach(t),nuo=r(Sye," \u2014 "),sN=n(Sye,"A",{href:!0});var qat=s(sN);suo=r(qat,"MaskFormerFeatureExtractor"),qat.forEach(t),luo=r(Sye," (MaskFormer model)"),Sye.forEach(t),iuo=i(K),Gh=n(K,"LI",{});var Rye=s(Gh);_le=n(Rye,"STRONG",{});var jat=s(_le);duo=r(jat,"mctct"),jat.forEach(t),cuo=r(Rye," \u2014 "),lN=n(Rye,"A",{href:!0});var Dat=s(lN);muo=r(Dat,"MCTCTFeatureExtractor"),Dat.forEach(t),fuo=r(Rye," (M-CTC-T model)"),Rye.forEach(t),guo=i(K),Oh=n(K,"LI",{});var Pye=s(Oh);ble=n(Pye,"STRONG",{});var Gat=s(ble);huo=r(Gat,"perceiver"),Gat.forEach(t),uuo=r(Pye," \u2014 "),iN=n(Pye,"A",{href:!0});var Oat=s(iN);puo=r(Oat,"PerceiverFeatureExtractor"),Oat.forEach(t),_uo=r(Pye," (Perceiver model)"),Pye.forEach(t),buo=i(K),Vh=n(K,"LI",{});var Bye=s(Vh);vle=n(Bye,"STRONG",{});var Vat=s(vle);vuo=r(Vat,"poolformer"),Vat.forEach(t),Fuo=r(Bye," \u2014 "),dN=n(Bye,"A",{href:!0});var Xat=s(dN);Tuo=r(Xat,"PoolFormerFeatureExtractor"),Xat.forEach(t),Muo=r(Bye," (PoolFormer model)"),Bye.forEach(t),Euo=i(K),Xh=n(K,"LI",{});var Iye=s(Xh);Fle=n(Iye,"STRONG",{});var zat=s(Fle);Cuo=r(zat,"regnet"),zat.forEach(t),wuo=r(Iye," \u2014 "),cN=n(Iye,"A",{href:!0});var Wat=s(cN);Auo=r(Wat,"ConvNextFeatureExtractor"),Wat.forEach(t),Luo=r(Iye," (RegNet model)"),Iye.forEach(t),yuo=i(K),zh=n(K,"LI",{});var Nye=s(zh);Tle=n(Nye,"STRONG",{});var Qat=s(Tle);xuo=r(Qat,"resnet"),Qat.forEach(t),$uo=r(Nye," \u2014 "),mN=n(Nye,"A",{href:!0});var Hat=s(mN);kuo=r(Hat,"ConvNextFeatureExtractor"),Hat.forEach(t),Suo=r(Nye," (ResNet model)"),Nye.forEach(t),Ruo=i(K),Wh=n(K,"LI",{});var qye=s(Wh);Mle=n(qye,"STRONG",{});var Uat=s(Mle);Puo=r(Uat,"segformer"),Uat.forEach(t),Buo=r(qye," \u2014 "),fN=n(qye,"A",{href:!0});var Jat=s(fN);Iuo=r(Jat,"SegformerFeatureExtractor"),Jat.forEach(t),Nuo=r(qye," (SegFormer model)"),qye.forEach(t),quo=i(K),Qh=n(K,"LI",{});var jye=s(Qh);Ele=n(jye,"STRONG",{});var Yat=s(Ele);juo=r(Yat,"speech_to_text"),Yat.forEach(t),Duo=r(jye," \u2014 "),gN=n(jye,"A",{href:!0});var Kat=s(gN);Guo=r(Kat,"Speech2TextFeatureExtractor"),Kat.forEach(t),Ouo=r(jye," (Speech2Text model)"),jye.forEach(t),Vuo=i(K),Hh=n(K,"LI",{});var Dye=s(Hh);Cle=n(Dye,"STRONG",{});var Zat=s(Cle);Xuo=r(Zat,"swin"),Zat.forEach(t),zuo=r(Dye," \u2014 "),hN=n(Dye,"A",{href:!0});var ent=s(hN);Wuo=r(ent,"ViTFeatureExtractor"),ent.forEach(t),Quo=r(Dye," (Swin Transformer model)"),Dye.forEach(t),Huo=i(K),Uh=n(K,"LI",{});var Gye=s(Uh);wle=n(Gye,"STRONG",{});var ont=s(wle);Uuo=r(ont,"van"),ont.forEach(t),Juo=r(Gye," \u2014 "),uN=n(Gye,"A",{href:!0});var rnt=s(uN);Yuo=r(rnt,"ConvNextFeatureExtractor"),rnt.forEach(t),Kuo=r(Gye," (VAN model)"),Gye.forEach(t),Zuo=i(K),Jh=n(K,"LI",{});var Oye=s(Jh);Ale=n(Oye,"STRONG",{});var tnt=s(Ale);epo=r(tnt,"vilt"),tnt.forEach(t),opo=r(Oye," \u2014 "),pN=n(Oye,"A",{href:!0});var ant=s(pN);rpo=r(ant,"ViltFeatureExtractor"),ant.forEach(t),tpo=r(Oye," (ViLT model)"),Oye.forEach(t),apo=i(K),Yh=n(K,"LI",{});var Vye=s(Yh);Lle=n(Vye,"STRONG",{});var nnt=s(Lle);npo=r(nnt,"vit"),nnt.forEach(t),spo=r(Vye," \u2014 "),_N=n(Vye,"A",{href:!0});var snt=s(_N);lpo=r(snt,"ViTFeatureExtractor"),snt.forEach(t),ipo=r(Vye," (ViT model)"),Vye.forEach(t),dpo=i(K),Kh=n(K,"LI",{});var Xye=s(Kh);yle=n(Xye,"STRONG",{});var lnt=s(yle);cpo=r(lnt,"vit_mae"),lnt.forEach(t),mpo=r(Xye," \u2014 "),bN=n(Xye,"A",{href:!0});var int=s(bN);fpo=r(int,"ViTFeatureExtractor"),int.forEach(t),gpo=r(Xye," (ViTMAE model)"),Xye.forEach(t),hpo=i(K),Zh=n(K,"LI",{});var zye=s(Zh);xle=n(zye,"STRONG",{});var dnt=s(xle);upo=r(dnt,"wav2vec2"),dnt.forEach(t),ppo=r(zye," \u2014 "),vN=n(zye,"A",{href:!0});var cnt=s(vN);_po=r(cnt,"Wav2Vec2FeatureExtractor"),cnt.forEach(t),bpo=r(zye," (Wav2Vec2 model)"),zye.forEach(t),vpo=i(K),eu=n(K,"LI",{});var Wye=s(eu);$le=n(Wye,"STRONG",{});var mnt=s($le);Fpo=r(mnt,"wav2vec2-conformer"),mnt.forEach(t),Tpo=r(Wye," \u2014 "),FN=n(Wye,"A",{href:!0});var fnt=s(FN);Mpo=r(fnt,"Wav2Vec2FeatureExtractor"),fnt.forEach(t),Epo=r(Wye," (Wav2Vec2-Conformer model)"),Wye.forEach(t),Cpo=i(K),ou=n(K,"LI",{});var Qye=s(ou);kle=n(Qye,"STRONG",{});var gnt=s(kle);wpo=r(gnt,"yolos"),gnt.forEach(t),Apo=r(Qye," \u2014 "),TN=n(Qye,"A",{href:!0});var hnt=s(TN);Lpo=r(hnt,"YolosFeatureExtractor"),hnt.forEach(t),ypo=r(Qye," (YOLOS model)"),Qye.forEach(t),K.forEach(t),xpo=i(ra),T(ru.$$.fragment,ra),$po=i(ra),T(tu.$$.fragment,ra),ra.forEach(t),kpo=i(Qs),au=n(Qs,"DIV",{class:!0});var aVe=s(au);T(Iy.$$.fragment,aVe),Spo=i(aVe),Sle=n(aVe,"P",{});var unt=s(Sle);Rpo=r(unt,"Register a new feature extractor for this class."),unt.forEach(t),aVe.forEach(t),Qs.forEach(t),oGe=i(m),Si=n(m,"H2",{class:!0});var nVe=s(Si);nu=n(nVe,"A",{id:!0,class:!0,href:!0});var pnt=s(nu);Rle=n(pnt,"SPAN",{});var _nt=s(Rle);T(Ny.$$.fragment,_nt),_nt.forEach(t),pnt.forEach(t),Ppo=i(nVe),Ple=n(nVe,"SPAN",{});var bnt=s(Ple);Bpo=r(bnt,"AutoProcessor"),bnt.forEach(t),nVe.forEach(t),rGe=i(m),yo=n(m,"DIV",{class:!0});var Hs=s(yo);T(qy.$$.fragment,Hs),Ipo=i(Hs),jy=n(Hs,"P",{});var sVe=s(jy);Npo=r(sVe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),MN=n(sVe,"A",{href:!0});var vnt=s(MN);qpo=r(vnt,"AutoProcessor.from_pretrained()"),vnt.forEach(t),jpo=r(sVe," class method."),sVe.forEach(t),Dpo=i(Hs),Dy=n(Hs,"P",{});var lVe=s(Dy);Gpo=r(lVe,"This class cannot be instantiated directly using "),Ble=n(lVe,"CODE",{});var Fnt=s(Ble);Opo=r(Fnt,"__init__()"),Fnt.forEach(t),Vpo=r(lVe," (throws an error)."),lVe.forEach(t),Xpo=i(Hs),Ue=n(Hs,"DIV",{class:!0});var ta=s(Ue);T(Gy.$$.fragment,ta),zpo=i(ta),Ile=n(ta,"P",{});var Tnt=s(Ile);Wpo=r(Tnt,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Tnt.forEach(t),Qpo=i(ta),Ri=n(ta,"P",{});var Wee=s(Ri);Hpo=r(Wee,"The processor class to instantiate is selected based on the "),Nle=n(Wee,"CODE",{});var Mnt=s(Nle);Upo=r(Mnt,"model_type"),Mnt.forEach(t),Jpo=r(Wee,` property of the config object (either
passed as an argument or loaded from `),qle=n(Wee,"CODE",{});var Ent=s(qle);Ypo=r(Ent,"pretrained_model_name_or_path"),Ent.forEach(t),Kpo=r(Wee," if possible):"),Wee.forEach(t),Zpo=i(ta),he=n(ta,"UL",{});var _e=s(he);su=n(_e,"LI",{});var Hye=s(su);jle=n(Hye,"STRONG",{});var Cnt=s(jle);e_o=r(Cnt,"clip"),Cnt.forEach(t),o_o=r(Hye," \u2014 "),EN=n(Hye,"A",{href:!0});var wnt=s(EN);r_o=r(wnt,"CLIPProcessor"),wnt.forEach(t),t_o=r(Hye," (CLIP model)"),Hye.forEach(t),a_o=i(_e),lu=n(_e,"LI",{});var Uye=s(lu);Dle=n(Uye,"STRONG",{});var Ant=s(Dle);n_o=r(Ant,"flava"),Ant.forEach(t),s_o=r(Uye," \u2014 "),Gle=n(Uye,"CODE",{});var Lnt=s(Gle);l_o=r(Lnt,"FLAVAProcessor"),Lnt.forEach(t),i_o=r(Uye," (FLAVA model)"),Uye.forEach(t),d_o=i(_e),iu=n(_e,"LI",{});var Jye=s(iu);Ole=n(Jye,"STRONG",{});var ynt=s(Ole);c_o=r(ynt,"layoutlmv2"),ynt.forEach(t),m_o=r(Jye," \u2014 "),CN=n(Jye,"A",{href:!0});var xnt=s(CN);f_o=r(xnt,"LayoutLMv2Processor"),xnt.forEach(t),g_o=r(Jye," (LayoutLMv2 model)"),Jye.forEach(t),h_o=i(_e),du=n(_e,"LI",{});var Yye=s(du);Vle=n(Yye,"STRONG",{});var $nt=s(Vle);u_o=r($nt,"layoutlmv3"),$nt.forEach(t),p_o=r(Yye," \u2014 "),wN=n(Yye,"A",{href:!0});var knt=s(wN);__o=r(knt,"LayoutLMv3Processor"),knt.forEach(t),b_o=r(Yye," (LayoutLMv3 model)"),Yye.forEach(t),v_o=i(_e),cu=n(_e,"LI",{});var Kye=s(cu);Xle=n(Kye,"STRONG",{});var Snt=s(Xle);F_o=r(Snt,"layoutxlm"),Snt.forEach(t),T_o=r(Kye," \u2014 "),AN=n(Kye,"A",{href:!0});var Rnt=s(AN);M_o=r(Rnt,"LayoutXLMProcessor"),Rnt.forEach(t),E_o=r(Kye," (LayoutXLM model)"),Kye.forEach(t),C_o=i(_e),mu=n(_e,"LI",{});var Zye=s(mu);zle=n(Zye,"STRONG",{});var Pnt=s(zle);w_o=r(Pnt,"sew"),Pnt.forEach(t),A_o=r(Zye," \u2014 "),LN=n(Zye,"A",{href:!0});var Bnt=s(LN);L_o=r(Bnt,"Wav2Vec2Processor"),Bnt.forEach(t),y_o=r(Zye," (SEW model)"),Zye.forEach(t),x_o=i(_e),fu=n(_e,"LI",{});var e7e=s(fu);Wle=n(e7e,"STRONG",{});var Int=s(Wle);$_o=r(Int,"sew-d"),Int.forEach(t),k_o=r(e7e," \u2014 "),yN=n(e7e,"A",{href:!0});var Nnt=s(yN);S_o=r(Nnt,"Wav2Vec2Processor"),Nnt.forEach(t),R_o=r(e7e," (SEW-D model)"),e7e.forEach(t),P_o=i(_e),gu=n(_e,"LI",{});var o7e=s(gu);Qle=n(o7e,"STRONG",{});var qnt=s(Qle);B_o=r(qnt,"speech_to_text"),qnt.forEach(t),I_o=r(o7e," \u2014 "),xN=n(o7e,"A",{href:!0});var jnt=s(xN);N_o=r(jnt,"Speech2TextProcessor"),jnt.forEach(t),q_o=r(o7e," (Speech2Text model)"),o7e.forEach(t),j_o=i(_e),hu=n(_e,"LI",{});var r7e=s(hu);Hle=n(r7e,"STRONG",{});var Dnt=s(Hle);D_o=r(Dnt,"speech_to_text_2"),Dnt.forEach(t),G_o=r(r7e," \u2014 "),$N=n(r7e,"A",{href:!0});var Gnt=s($N);O_o=r(Gnt,"Speech2Text2Processor"),Gnt.forEach(t),V_o=r(r7e," (Speech2Text2 model)"),r7e.forEach(t),X_o=i(_e),uu=n(_e,"LI",{});var t7e=s(uu);Ule=n(t7e,"STRONG",{});var Ont=s(Ule);z_o=r(Ont,"trocr"),Ont.forEach(t),W_o=r(t7e," \u2014 "),kN=n(t7e,"A",{href:!0});var Vnt=s(kN);Q_o=r(Vnt,"TrOCRProcessor"),Vnt.forEach(t),H_o=r(t7e," (TrOCR model)"),t7e.forEach(t),U_o=i(_e),pu=n(_e,"LI",{});var a7e=s(pu);Jle=n(a7e,"STRONG",{});var Xnt=s(Jle);J_o=r(Xnt,"unispeech"),Xnt.forEach(t),Y_o=r(a7e," \u2014 "),SN=n(a7e,"A",{href:!0});var znt=s(SN);K_o=r(znt,"Wav2Vec2Processor"),znt.forEach(t),Z_o=r(a7e," (UniSpeech model)"),a7e.forEach(t),e2o=i(_e),_u=n(_e,"LI",{});var n7e=s(_u);Yle=n(n7e,"STRONG",{});var Wnt=s(Yle);o2o=r(Wnt,"unispeech-sat"),Wnt.forEach(t),r2o=r(n7e," \u2014 "),RN=n(n7e,"A",{href:!0});var Qnt=s(RN);t2o=r(Qnt,"Wav2Vec2Processor"),Qnt.forEach(t),a2o=r(n7e," (UniSpeechSat model)"),n7e.forEach(t),n2o=i(_e),bu=n(_e,"LI",{});var s7e=s(bu);Kle=n(s7e,"STRONG",{});var Hnt=s(Kle);s2o=r(Hnt,"vilt"),Hnt.forEach(t),l2o=r(s7e," \u2014 "),PN=n(s7e,"A",{href:!0});var Unt=s(PN);i2o=r(Unt,"ViltProcessor"),Unt.forEach(t),d2o=r(s7e," (ViLT model)"),s7e.forEach(t),c2o=i(_e),vu=n(_e,"LI",{});var l7e=s(vu);Zle=n(l7e,"STRONG",{});var Jnt=s(Zle);m2o=r(Jnt,"vision-text-dual-encoder"),Jnt.forEach(t),f2o=r(l7e," \u2014 "),BN=n(l7e,"A",{href:!0});var Ynt=s(BN);g2o=r(Ynt,"VisionTextDualEncoderProcessor"),Ynt.forEach(t),h2o=r(l7e," (VisionTextDualEncoder model)"),l7e.forEach(t),u2o=i(_e),Fu=n(_e,"LI",{});var i7e=s(Fu);eie=n(i7e,"STRONG",{});var Knt=s(eie);p2o=r(Knt,"wav2vec2"),Knt.forEach(t),_2o=r(i7e," \u2014 "),IN=n(i7e,"A",{href:!0});var Znt=s(IN);b2o=r(Znt,"Wav2Vec2Processor"),Znt.forEach(t),v2o=r(i7e," (Wav2Vec2 model)"),i7e.forEach(t),F2o=i(_e),Tu=n(_e,"LI",{});var d7e=s(Tu);oie=n(d7e,"STRONG",{});var est=s(oie);T2o=r(est,"wav2vec2-conformer"),est.forEach(t),M2o=r(d7e," \u2014 "),NN=n(d7e,"A",{href:!0});var ost=s(NN);E2o=r(ost,"Wav2Vec2Processor"),ost.forEach(t),C2o=r(d7e," (Wav2Vec2-Conformer model)"),d7e.forEach(t),w2o=i(_e),Mu=n(_e,"LI",{});var c7e=s(Mu);rie=n(c7e,"STRONG",{});var rst=s(rie);A2o=r(rst,"wavlm"),rst.forEach(t),L2o=r(c7e," \u2014 "),qN=n(c7e,"A",{href:!0});var tst=s(qN);y2o=r(tst,"Wav2Vec2Processor"),tst.forEach(t),x2o=r(c7e," (WavLM model)"),c7e.forEach(t),_e.forEach(t),$2o=i(ta),T(Eu.$$.fragment,ta),k2o=i(ta),T(Cu.$$.fragment,ta),ta.forEach(t),S2o=i(Hs),wu=n(Hs,"DIV",{class:!0});var iVe=s(wu);T(Oy.$$.fragment,iVe),R2o=i(iVe),tie=n(iVe,"P",{});var ast=s(tie);P2o=r(ast,"Register a new processor for this class."),ast.forEach(t),iVe.forEach(t),Hs.forEach(t),tGe=i(m),Pi=n(m,"H2",{class:!0});var dVe=s(Pi);Au=n(dVe,"A",{id:!0,class:!0,href:!0});var nst=s(Au);aie=n(nst,"SPAN",{});var sst=s(aie);T(Vy.$$.fragment,sst),sst.forEach(t),nst.forEach(t),B2o=i(dVe),nie=n(dVe,"SPAN",{});var lst=s(nie);I2o=r(lst,"AutoModel"),lst.forEach(t),dVe.forEach(t),aGe=i(m),xo=n(m,"DIV",{class:!0});var Us=s(xo);T(Xy.$$.fragment,Us),N2o=i(Us),Bi=n(Us,"P",{});var Qee=s(Bi);q2o=r(Qee,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),jN=n(Qee,"A",{href:!0});var ist=s(jN);j2o=r(ist,"from_pretrained()"),ist.forEach(t),D2o=r(Qee," class method or the "),DN=n(Qee,"A",{href:!0});var dst=s(DN);G2o=r(dst,"from_config()"),dst.forEach(t),O2o=r(Qee,` class
method.`),Qee.forEach(t),V2o=i(Us),zy=n(Us,"P",{});var cVe=s(zy);X2o=r(cVe,"This class cannot be instantiated directly using "),sie=n(cVe,"CODE",{});var cst=s(sie);z2o=r(cst,"__init__()"),cst.forEach(t),W2o=r(cVe," (throws an error)."),cVe.forEach(t),Q2o=i(Us),nt=n(Us,"DIV",{class:!0});var v6=s(nt);T(Wy.$$.fragment,v6),H2o=i(v6),lie=n(v6,"P",{});var mst=s(lie);U2o=r(mst,"Instantiates one of the base model classes of the library from a configuration."),mst.forEach(t),J2o=i(v6),Ii=n(v6,"P",{});var Hee=s(Ii);Y2o=r(Hee,`Note:
Loading a model from its configuration file does `),iie=n(Hee,"STRONG",{});var fst=s(iie);K2o=r(fst,"not"),fst.forEach(t),Z2o=r(Hee,` load the model weights. It only affects the
model\u2019s configuration. Use `),GN=n(Hee,"A",{href:!0});var gst=s(GN);ebo=r(gst,"from_pretrained()"),gst.forEach(t),obo=r(Hee," to load the model weights."),Hee.forEach(t),rbo=i(v6),T(Lu.$$.fragment,v6),v6.forEach(t),tbo=i(Us),Je=n(Us,"DIV",{class:!0});var aa=s(Je);T(Qy.$$.fragment,aa),abo=i(aa),die=n(aa,"P",{});var hst=s(die);nbo=r(hst,"Instantiate one of the base model classes of the library from a pretrained model."),hst.forEach(t),sbo=i(aa),Sa=n(aa,"P",{});var F6=s(Sa);lbo=r(F6,"The model class to instantiate is selected based on the "),cie=n(F6,"CODE",{});var ust=s(cie);ibo=r(ust,"model_type"),ust.forEach(t),dbo=r(F6,` property of the config object (either
passed as an argument or loaded from `),mie=n(F6,"CODE",{});var pst=s(mie);cbo=r(pst,"pretrained_model_name_or_path"),pst.forEach(t),mbo=r(F6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fie=n(F6,"CODE",{});var _st=s(fie);fbo=r(_st,"pretrained_model_name_or_path"),_st.forEach(t),gbo=r(F6,":"),F6.forEach(t),hbo=i(aa),x=n(aa,"UL",{});var $=s(x);yu=n($,"LI",{});var m7e=s(yu);gie=n(m7e,"STRONG",{});var bst=s(gie);ubo=r(bst,"albert"),bst.forEach(t),pbo=r(m7e," \u2014 "),ON=n(m7e,"A",{href:!0});var vst=s(ON);_bo=r(vst,"AlbertModel"),vst.forEach(t),bbo=r(m7e," (ALBERT model)"),m7e.forEach(t),vbo=i($),xu=n($,"LI",{});var f7e=s(xu);hie=n(f7e,"STRONG",{});var Fst=s(hie);Fbo=r(Fst,"bart"),Fst.forEach(t),Tbo=r(f7e," \u2014 "),VN=n(f7e,"A",{href:!0});var Tst=s(VN);Mbo=r(Tst,"BartModel"),Tst.forEach(t),Ebo=r(f7e," (BART model)"),f7e.forEach(t),Cbo=i($),$u=n($,"LI",{});var g7e=s($u);uie=n(g7e,"STRONG",{});var Mst=s(uie);wbo=r(Mst,"beit"),Mst.forEach(t),Abo=r(g7e," \u2014 "),XN=n(g7e,"A",{href:!0});var Est=s(XN);Lbo=r(Est,"BeitModel"),Est.forEach(t),ybo=r(g7e," (BEiT model)"),g7e.forEach(t),xbo=i($),ku=n($,"LI",{});var h7e=s(ku);pie=n(h7e,"STRONG",{});var Cst=s(pie);$bo=r(Cst,"bert"),Cst.forEach(t),kbo=r(h7e," \u2014 "),zN=n(h7e,"A",{href:!0});var wst=s(zN);Sbo=r(wst,"BertModel"),wst.forEach(t),Rbo=r(h7e," (BERT model)"),h7e.forEach(t),Pbo=i($),Su=n($,"LI",{});var u7e=s(Su);_ie=n(u7e,"STRONG",{});var Ast=s(_ie);Bbo=r(Ast,"bert-generation"),Ast.forEach(t),Ibo=r(u7e," \u2014 "),WN=n(u7e,"A",{href:!0});var Lst=s(WN);Nbo=r(Lst,"BertGenerationEncoder"),Lst.forEach(t),qbo=r(u7e," (Bert Generation model)"),u7e.forEach(t),jbo=i($),Ru=n($,"LI",{});var p7e=s(Ru);bie=n(p7e,"STRONG",{});var yst=s(bie);Dbo=r(yst,"big_bird"),yst.forEach(t),Gbo=r(p7e," \u2014 "),QN=n(p7e,"A",{href:!0});var xst=s(QN);Obo=r(xst,"BigBirdModel"),xst.forEach(t),Vbo=r(p7e," (BigBird model)"),p7e.forEach(t),Xbo=i($),Pu=n($,"LI",{});var _7e=s(Pu);vie=n(_7e,"STRONG",{});var $st=s(vie);zbo=r($st,"bigbird_pegasus"),$st.forEach(t),Wbo=r(_7e," \u2014 "),HN=n(_7e,"A",{href:!0});var kst=s(HN);Qbo=r(kst,"BigBirdPegasusModel"),kst.forEach(t),Hbo=r(_7e," (BigBird-Pegasus model)"),_7e.forEach(t),Ubo=i($),Bu=n($,"LI",{});var b7e=s(Bu);Fie=n(b7e,"STRONG",{});var Sst=s(Fie);Jbo=r(Sst,"blenderbot"),Sst.forEach(t),Ybo=r(b7e," \u2014 "),UN=n(b7e,"A",{href:!0});var Rst=s(UN);Kbo=r(Rst,"BlenderbotModel"),Rst.forEach(t),Zbo=r(b7e," (Blenderbot model)"),b7e.forEach(t),evo=i($),Iu=n($,"LI",{});var v7e=s(Iu);Tie=n(v7e,"STRONG",{});var Pst=s(Tie);ovo=r(Pst,"blenderbot-small"),Pst.forEach(t),rvo=r(v7e," \u2014 "),JN=n(v7e,"A",{href:!0});var Bst=s(JN);tvo=r(Bst,"BlenderbotSmallModel"),Bst.forEach(t),avo=r(v7e," (BlenderbotSmall model)"),v7e.forEach(t),nvo=i($),Nu=n($,"LI",{});var F7e=s(Nu);Mie=n(F7e,"STRONG",{});var Ist=s(Mie);svo=r(Ist,"bloom"),Ist.forEach(t),lvo=r(F7e," \u2014 "),YN=n(F7e,"A",{href:!0});var Nst=s(YN);ivo=r(Nst,"BloomModel"),Nst.forEach(t),dvo=r(F7e," (BLOOM model)"),F7e.forEach(t),cvo=i($),qu=n($,"LI",{});var T7e=s(qu);Eie=n(T7e,"STRONG",{});var qst=s(Eie);mvo=r(qst,"camembert"),qst.forEach(t),fvo=r(T7e," \u2014 "),KN=n(T7e,"A",{href:!0});var jst=s(KN);gvo=r(jst,"CamembertModel"),jst.forEach(t),hvo=r(T7e," (CamemBERT model)"),T7e.forEach(t),uvo=i($),ju=n($,"LI",{});var M7e=s(ju);Cie=n(M7e,"STRONG",{});var Dst=s(Cie);pvo=r(Dst,"canine"),Dst.forEach(t),_vo=r(M7e," \u2014 "),ZN=n(M7e,"A",{href:!0});var Gst=s(ZN);bvo=r(Gst,"CanineModel"),Gst.forEach(t),vvo=r(M7e," (CANINE model)"),M7e.forEach(t),Fvo=i($),Du=n($,"LI",{});var E7e=s(Du);wie=n(E7e,"STRONG",{});var Ost=s(wie);Tvo=r(Ost,"clip"),Ost.forEach(t),Mvo=r(E7e," \u2014 "),eq=n(E7e,"A",{href:!0});var Vst=s(eq);Evo=r(Vst,"CLIPModel"),Vst.forEach(t),Cvo=r(E7e," (CLIP model)"),E7e.forEach(t),wvo=i($),Gu=n($,"LI",{});var C7e=s(Gu);Aie=n(C7e,"STRONG",{});var Xst=s(Aie);Avo=r(Xst,"convbert"),Xst.forEach(t),Lvo=r(C7e," \u2014 "),oq=n(C7e,"A",{href:!0});var zst=s(oq);yvo=r(zst,"ConvBertModel"),zst.forEach(t),xvo=r(C7e," (ConvBERT model)"),C7e.forEach(t),$vo=i($),Ou=n($,"LI",{});var w7e=s(Ou);Lie=n(w7e,"STRONG",{});var Wst=s(Lie);kvo=r(Wst,"convnext"),Wst.forEach(t),Svo=r(w7e," \u2014 "),rq=n(w7e,"A",{href:!0});var Qst=s(rq);Rvo=r(Qst,"ConvNextModel"),Qst.forEach(t),Pvo=r(w7e," (ConvNeXT model)"),w7e.forEach(t),Bvo=i($),Vu=n($,"LI",{});var A7e=s(Vu);yie=n(A7e,"STRONG",{});var Hst=s(yie);Ivo=r(Hst,"ctrl"),Hst.forEach(t),Nvo=r(A7e," \u2014 "),tq=n(A7e,"A",{href:!0});var Ust=s(tq);qvo=r(Ust,"CTRLModel"),Ust.forEach(t),jvo=r(A7e," (CTRL model)"),A7e.forEach(t),Dvo=i($),Xu=n($,"LI",{});var L7e=s(Xu);xie=n(L7e,"STRONG",{});var Jst=s(xie);Gvo=r(Jst,"cvt"),Jst.forEach(t),Ovo=r(L7e," \u2014 "),aq=n(L7e,"A",{href:!0});var Yst=s(aq);Vvo=r(Yst,"CvtModel"),Yst.forEach(t),Xvo=r(L7e," (CvT model)"),L7e.forEach(t),zvo=i($),zu=n($,"LI",{});var y7e=s(zu);$ie=n(y7e,"STRONG",{});var Kst=s($ie);Wvo=r(Kst,"data2vec-audio"),Kst.forEach(t),Qvo=r(y7e," \u2014 "),nq=n(y7e,"A",{href:!0});var Zst=s(nq);Hvo=r(Zst,"Data2VecAudioModel"),Zst.forEach(t),Uvo=r(y7e," (Data2VecAudio model)"),y7e.forEach(t),Jvo=i($),Wu=n($,"LI",{});var x7e=s(Wu);kie=n(x7e,"STRONG",{});var elt=s(kie);Yvo=r(elt,"data2vec-text"),elt.forEach(t),Kvo=r(x7e," \u2014 "),sq=n(x7e,"A",{href:!0});var olt=s(sq);Zvo=r(olt,"Data2VecTextModel"),olt.forEach(t),eFo=r(x7e," (Data2VecText model)"),x7e.forEach(t),oFo=i($),Qu=n($,"LI",{});var $7e=s(Qu);Sie=n($7e,"STRONG",{});var rlt=s(Sie);rFo=r(rlt,"data2vec-vision"),rlt.forEach(t),tFo=r($7e," \u2014 "),lq=n($7e,"A",{href:!0});var tlt=s(lq);aFo=r(tlt,"Data2VecVisionModel"),tlt.forEach(t),nFo=r($7e," (Data2VecVision model)"),$7e.forEach(t),sFo=i($),Hu=n($,"LI",{});var k7e=s(Hu);Rie=n(k7e,"STRONG",{});var alt=s(Rie);lFo=r(alt,"deberta"),alt.forEach(t),iFo=r(k7e," \u2014 "),iq=n(k7e,"A",{href:!0});var nlt=s(iq);dFo=r(nlt,"DebertaModel"),nlt.forEach(t),cFo=r(k7e," (DeBERTa model)"),k7e.forEach(t),mFo=i($),Uu=n($,"LI",{});var S7e=s(Uu);Pie=n(S7e,"STRONG",{});var slt=s(Pie);fFo=r(slt,"deberta-v2"),slt.forEach(t),gFo=r(S7e," \u2014 "),dq=n(S7e,"A",{href:!0});var llt=s(dq);hFo=r(llt,"DebertaV2Model"),llt.forEach(t),uFo=r(S7e," (DeBERTa-v2 model)"),S7e.forEach(t),pFo=i($),Ju=n($,"LI",{});var R7e=s(Ju);Bie=n(R7e,"STRONG",{});var ilt=s(Bie);_Fo=r(ilt,"decision_transformer"),ilt.forEach(t),bFo=r(R7e," \u2014 "),cq=n(R7e,"A",{href:!0});var dlt=s(cq);vFo=r(dlt,"DecisionTransformerModel"),dlt.forEach(t),FFo=r(R7e," (Decision Transformer model)"),R7e.forEach(t),TFo=i($),Yu=n($,"LI",{});var P7e=s(Yu);Iie=n(P7e,"STRONG",{});var clt=s(Iie);MFo=r(clt,"deit"),clt.forEach(t),EFo=r(P7e," \u2014 "),mq=n(P7e,"A",{href:!0});var mlt=s(mq);CFo=r(mlt,"DeiTModel"),mlt.forEach(t),wFo=r(P7e," (DeiT model)"),P7e.forEach(t),AFo=i($),Ku=n($,"LI",{});var B7e=s(Ku);Nie=n(B7e,"STRONG",{});var flt=s(Nie);LFo=r(flt,"detr"),flt.forEach(t),yFo=r(B7e," \u2014 "),fq=n(B7e,"A",{href:!0});var glt=s(fq);xFo=r(glt,"DetrModel"),glt.forEach(t),$Fo=r(B7e," (DETR model)"),B7e.forEach(t),kFo=i($),Zu=n($,"LI",{});var I7e=s(Zu);qie=n(I7e,"STRONG",{});var hlt=s(qie);SFo=r(hlt,"distilbert"),hlt.forEach(t),RFo=r(I7e," \u2014 "),gq=n(I7e,"A",{href:!0});var ult=s(gq);PFo=r(ult,"DistilBertModel"),ult.forEach(t),BFo=r(I7e," (DistilBERT model)"),I7e.forEach(t),IFo=i($),ep=n($,"LI",{});var N7e=s(ep);jie=n(N7e,"STRONG",{});var plt=s(jie);NFo=r(plt,"dpr"),plt.forEach(t),qFo=r(N7e," \u2014 "),hq=n(N7e,"A",{href:!0});var _lt=s(hq);jFo=r(_lt,"DPRQuestionEncoder"),_lt.forEach(t),DFo=r(N7e," (DPR model)"),N7e.forEach(t),GFo=i($),op=n($,"LI",{});var q7e=s(op);Die=n(q7e,"STRONG",{});var blt=s(Die);OFo=r(blt,"dpt"),blt.forEach(t),VFo=r(q7e," \u2014 "),uq=n(q7e,"A",{href:!0});var vlt=s(uq);XFo=r(vlt,"DPTModel"),vlt.forEach(t),zFo=r(q7e," (DPT model)"),q7e.forEach(t),WFo=i($),rp=n($,"LI",{});var j7e=s(rp);Gie=n(j7e,"STRONG",{});var Flt=s(Gie);QFo=r(Flt,"electra"),Flt.forEach(t),HFo=r(j7e," \u2014 "),pq=n(j7e,"A",{href:!0});var Tlt=s(pq);UFo=r(Tlt,"ElectraModel"),Tlt.forEach(t),JFo=r(j7e," (ELECTRA model)"),j7e.forEach(t),YFo=i($),tp=n($,"LI",{});var D7e=s(tp);Oie=n(D7e,"STRONG",{});var Mlt=s(Oie);KFo=r(Mlt,"flaubert"),Mlt.forEach(t),ZFo=r(D7e," \u2014 "),_q=n(D7e,"A",{href:!0});var Elt=s(_q);e1o=r(Elt,"FlaubertModel"),Elt.forEach(t),o1o=r(D7e," (FlauBERT model)"),D7e.forEach(t),r1o=i($),ap=n($,"LI",{});var G7e=s(ap);Vie=n(G7e,"STRONG",{});var Clt=s(Vie);t1o=r(Clt,"flava"),Clt.forEach(t),a1o=r(G7e," \u2014 "),bq=n(G7e,"A",{href:!0});var wlt=s(bq);n1o=r(wlt,"FlavaModel"),wlt.forEach(t),s1o=r(G7e," (FLAVA model)"),G7e.forEach(t),l1o=i($),np=n($,"LI",{});var O7e=s(np);Xie=n(O7e,"STRONG",{});var Alt=s(Xie);i1o=r(Alt,"fnet"),Alt.forEach(t),d1o=r(O7e," \u2014 "),vq=n(O7e,"A",{href:!0});var Llt=s(vq);c1o=r(Llt,"FNetModel"),Llt.forEach(t),m1o=r(O7e," (FNet model)"),O7e.forEach(t),f1o=i($),sp=n($,"LI",{});var V7e=s(sp);zie=n(V7e,"STRONG",{});var ylt=s(zie);g1o=r(ylt,"fsmt"),ylt.forEach(t),h1o=r(V7e," \u2014 "),Fq=n(V7e,"A",{href:!0});var xlt=s(Fq);u1o=r(xlt,"FSMTModel"),xlt.forEach(t),p1o=r(V7e," (FairSeq Machine-Translation model)"),V7e.forEach(t),_1o=i($),Gs=n($,"LI",{});var jk=s(Gs);Wie=n(jk,"STRONG",{});var $lt=s(Wie);b1o=r($lt,"funnel"),$lt.forEach(t),v1o=r(jk," \u2014 "),Tq=n(jk,"A",{href:!0});var klt=s(Tq);F1o=r(klt,"FunnelModel"),klt.forEach(t),T1o=r(jk," or "),Mq=n(jk,"A",{href:!0});var Slt=s(Mq);M1o=r(Slt,"FunnelBaseModel"),Slt.forEach(t),E1o=r(jk," (Funnel Transformer model)"),jk.forEach(t),C1o=i($),lp=n($,"LI",{});var X7e=s(lp);Qie=n(X7e,"STRONG",{});var Rlt=s(Qie);w1o=r(Rlt,"glpn"),Rlt.forEach(t),A1o=r(X7e," \u2014 "),Eq=n(X7e,"A",{href:!0});var Plt=s(Eq);L1o=r(Plt,"GLPNModel"),Plt.forEach(t),y1o=r(X7e," (GLPN model)"),X7e.forEach(t),x1o=i($),ip=n($,"LI",{});var z7e=s(ip);Hie=n(z7e,"STRONG",{});var Blt=s(Hie);$1o=r(Blt,"gpt2"),Blt.forEach(t),k1o=r(z7e," \u2014 "),Cq=n(z7e,"A",{href:!0});var Ilt=s(Cq);S1o=r(Ilt,"GPT2Model"),Ilt.forEach(t),R1o=r(z7e," (OpenAI GPT-2 model)"),z7e.forEach(t),P1o=i($),dp=n($,"LI",{});var W7e=s(dp);Uie=n(W7e,"STRONG",{});var Nlt=s(Uie);B1o=r(Nlt,"gpt_neo"),Nlt.forEach(t),I1o=r(W7e," \u2014 "),wq=n(W7e,"A",{href:!0});var qlt=s(wq);N1o=r(qlt,"GPTNeoModel"),qlt.forEach(t),q1o=r(W7e," (GPT Neo model)"),W7e.forEach(t),j1o=i($),cp=n($,"LI",{});var Q7e=s(cp);Jie=n(Q7e,"STRONG",{});var jlt=s(Jie);D1o=r(jlt,"gpt_neox"),jlt.forEach(t),G1o=r(Q7e," \u2014 "),Aq=n(Q7e,"A",{href:!0});var Dlt=s(Aq);O1o=r(Dlt,"GPTNeoXModel"),Dlt.forEach(t),V1o=r(Q7e," (GPT NeoX model)"),Q7e.forEach(t),X1o=i($),mp=n($,"LI",{});var H7e=s(mp);Yie=n(H7e,"STRONG",{});var Glt=s(Yie);z1o=r(Glt,"gptj"),Glt.forEach(t),W1o=r(H7e," \u2014 "),Lq=n(H7e,"A",{href:!0});var Olt=s(Lq);Q1o=r(Olt,"GPTJModel"),Olt.forEach(t),H1o=r(H7e," (GPT-J model)"),H7e.forEach(t),U1o=i($),fp=n($,"LI",{});var U7e=s(fp);Kie=n(U7e,"STRONG",{});var Vlt=s(Kie);J1o=r(Vlt,"hubert"),Vlt.forEach(t),Y1o=r(U7e," \u2014 "),yq=n(U7e,"A",{href:!0});var Xlt=s(yq);K1o=r(Xlt,"HubertModel"),Xlt.forEach(t),Z1o=r(U7e," (Hubert model)"),U7e.forEach(t),eTo=i($),gp=n($,"LI",{});var J7e=s(gp);Zie=n(J7e,"STRONG",{});var zlt=s(Zie);oTo=r(zlt,"ibert"),zlt.forEach(t),rTo=r(J7e," \u2014 "),xq=n(J7e,"A",{href:!0});var Wlt=s(xq);tTo=r(Wlt,"IBertModel"),Wlt.forEach(t),aTo=r(J7e," (I-BERT model)"),J7e.forEach(t),nTo=i($),hp=n($,"LI",{});var Y7e=s(hp);ede=n(Y7e,"STRONG",{});var Qlt=s(ede);sTo=r(Qlt,"imagegpt"),Qlt.forEach(t),lTo=r(Y7e," \u2014 "),$q=n(Y7e,"A",{href:!0});var Hlt=s($q);iTo=r(Hlt,"ImageGPTModel"),Hlt.forEach(t),dTo=r(Y7e," (ImageGPT model)"),Y7e.forEach(t),cTo=i($),up=n($,"LI",{});var K7e=s(up);ode=n(K7e,"STRONG",{});var Ult=s(ode);mTo=r(Ult,"layoutlm"),Ult.forEach(t),fTo=r(K7e," \u2014 "),kq=n(K7e,"A",{href:!0});var Jlt=s(kq);gTo=r(Jlt,"LayoutLMModel"),Jlt.forEach(t),hTo=r(K7e," (LayoutLM model)"),K7e.forEach(t),uTo=i($),pp=n($,"LI",{});var Z7e=s(pp);rde=n(Z7e,"STRONG",{});var Ylt=s(rde);pTo=r(Ylt,"layoutlmv2"),Ylt.forEach(t),_To=r(Z7e," \u2014 "),Sq=n(Z7e,"A",{href:!0});var Klt=s(Sq);bTo=r(Klt,"LayoutLMv2Model"),Klt.forEach(t),vTo=r(Z7e," (LayoutLMv2 model)"),Z7e.forEach(t),FTo=i($),_p=n($,"LI",{});var e8e=s(_p);tde=n(e8e,"STRONG",{});var Zlt=s(tde);TTo=r(Zlt,"layoutlmv3"),Zlt.forEach(t),MTo=r(e8e," \u2014 "),Rq=n(e8e,"A",{href:!0});var eit=s(Rq);ETo=r(eit,"LayoutLMv3Model"),eit.forEach(t),CTo=r(e8e," (LayoutLMv3 model)"),e8e.forEach(t),wTo=i($),bp=n($,"LI",{});var o8e=s(bp);ade=n(o8e,"STRONG",{});var oit=s(ade);ATo=r(oit,"led"),oit.forEach(t),LTo=r(o8e," \u2014 "),Pq=n(o8e,"A",{href:!0});var rit=s(Pq);yTo=r(rit,"LEDModel"),rit.forEach(t),xTo=r(o8e," (LED model)"),o8e.forEach(t),$To=i($),vp=n($,"LI",{});var r8e=s(vp);nde=n(r8e,"STRONG",{});var tit=s(nde);kTo=r(tit,"levit"),tit.forEach(t),STo=r(r8e," \u2014 "),Bq=n(r8e,"A",{href:!0});var ait=s(Bq);RTo=r(ait,"LevitModel"),ait.forEach(t),PTo=r(r8e," (LeViT model)"),r8e.forEach(t),BTo=i($),Fp=n($,"LI",{});var t8e=s(Fp);sde=n(t8e,"STRONG",{});var nit=s(sde);ITo=r(nit,"longformer"),nit.forEach(t),NTo=r(t8e," \u2014 "),Iq=n(t8e,"A",{href:!0});var sit=s(Iq);qTo=r(sit,"LongformerModel"),sit.forEach(t),jTo=r(t8e," (Longformer model)"),t8e.forEach(t),DTo=i($),Tp=n($,"LI",{});var a8e=s(Tp);lde=n(a8e,"STRONG",{});var lit=s(lde);GTo=r(lit,"longt5"),lit.forEach(t),OTo=r(a8e," \u2014 "),Nq=n(a8e,"A",{href:!0});var iit=s(Nq);VTo=r(iit,"LongT5Model"),iit.forEach(t),XTo=r(a8e," (LongT5 model)"),a8e.forEach(t),zTo=i($),Mp=n($,"LI",{});var n8e=s(Mp);ide=n(n8e,"STRONG",{});var dit=s(ide);WTo=r(dit,"luke"),dit.forEach(t),QTo=r(n8e," \u2014 "),qq=n(n8e,"A",{href:!0});var cit=s(qq);HTo=r(cit,"LukeModel"),cit.forEach(t),UTo=r(n8e," (LUKE model)"),n8e.forEach(t),JTo=i($),Ep=n($,"LI",{});var s8e=s(Ep);dde=n(s8e,"STRONG",{});var mit=s(dde);YTo=r(mit,"lxmert"),mit.forEach(t),KTo=r(s8e," \u2014 "),jq=n(s8e,"A",{href:!0});var fit=s(jq);ZTo=r(fit,"LxmertModel"),fit.forEach(t),eMo=r(s8e," (LXMERT model)"),s8e.forEach(t),oMo=i($),Cp=n($,"LI",{});var l8e=s(Cp);cde=n(l8e,"STRONG",{});var git=s(cde);rMo=r(git,"m2m_100"),git.forEach(t),tMo=r(l8e," \u2014 "),Dq=n(l8e,"A",{href:!0});var hit=s(Dq);aMo=r(hit,"M2M100Model"),hit.forEach(t),nMo=r(l8e," (M2M100 model)"),l8e.forEach(t),sMo=i($),wp=n($,"LI",{});var i8e=s(wp);mde=n(i8e,"STRONG",{});var uit=s(mde);lMo=r(uit,"marian"),uit.forEach(t),iMo=r(i8e," \u2014 "),Gq=n(i8e,"A",{href:!0});var pit=s(Gq);dMo=r(pit,"MarianModel"),pit.forEach(t),cMo=r(i8e," (Marian model)"),i8e.forEach(t),mMo=i($),Ap=n($,"LI",{});var d8e=s(Ap);fde=n(d8e,"STRONG",{});var _it=s(fde);fMo=r(_it,"maskformer"),_it.forEach(t),gMo=r(d8e," \u2014 "),Oq=n(d8e,"A",{href:!0});var bit=s(Oq);hMo=r(bit,"MaskFormerModel"),bit.forEach(t),uMo=r(d8e," (MaskFormer model)"),d8e.forEach(t),pMo=i($),Lp=n($,"LI",{});var c8e=s(Lp);gde=n(c8e,"STRONG",{});var vit=s(gde);_Mo=r(vit,"mbart"),vit.forEach(t),bMo=r(c8e," \u2014 "),Vq=n(c8e,"A",{href:!0});var Fit=s(Vq);vMo=r(Fit,"MBartModel"),Fit.forEach(t),FMo=r(c8e," (mBART model)"),c8e.forEach(t),TMo=i($),yp=n($,"LI",{});var m8e=s(yp);hde=n(m8e,"STRONG",{});var Tit=s(hde);MMo=r(Tit,"mctct"),Tit.forEach(t),EMo=r(m8e," \u2014 "),Xq=n(m8e,"A",{href:!0});var Mit=s(Xq);CMo=r(Mit,"MCTCTModel"),Mit.forEach(t),wMo=r(m8e," (M-CTC-T model)"),m8e.forEach(t),AMo=i($),xp=n($,"LI",{});var f8e=s(xp);ude=n(f8e,"STRONG",{});var Eit=s(ude);LMo=r(Eit,"megatron-bert"),Eit.forEach(t),yMo=r(f8e," \u2014 "),zq=n(f8e,"A",{href:!0});var Cit=s(zq);xMo=r(Cit,"MegatronBertModel"),Cit.forEach(t),$Mo=r(f8e," (Megatron-BERT model)"),f8e.forEach(t),kMo=i($),$p=n($,"LI",{});var g8e=s($p);pde=n(g8e,"STRONG",{});var wit=s(pde);SMo=r(wit,"mobilebert"),wit.forEach(t),RMo=r(g8e," \u2014 "),Wq=n(g8e,"A",{href:!0});var Ait=s(Wq);PMo=r(Ait,"MobileBertModel"),Ait.forEach(t),BMo=r(g8e," (MobileBERT model)"),g8e.forEach(t),IMo=i($),kp=n($,"LI",{});var h8e=s(kp);_de=n(h8e,"STRONG",{});var Lit=s(_de);NMo=r(Lit,"mpnet"),Lit.forEach(t),qMo=r(h8e," \u2014 "),Qq=n(h8e,"A",{href:!0});var yit=s(Qq);jMo=r(yit,"MPNetModel"),yit.forEach(t),DMo=r(h8e," (MPNet model)"),h8e.forEach(t),GMo=i($),Sp=n($,"LI",{});var u8e=s(Sp);bde=n(u8e,"STRONG",{});var xit=s(bde);OMo=r(xit,"mt5"),xit.forEach(t),VMo=r(u8e," \u2014 "),Hq=n(u8e,"A",{href:!0});var $it=s(Hq);XMo=r($it,"MT5Model"),$it.forEach(t),zMo=r(u8e," (MT5 model)"),u8e.forEach(t),WMo=i($),Rp=n($,"LI",{});var p8e=s(Rp);vde=n(p8e,"STRONG",{});var kit=s(vde);QMo=r(kit,"nystromformer"),kit.forEach(t),HMo=r(p8e," \u2014 "),Uq=n(p8e,"A",{href:!0});var Sit=s(Uq);UMo=r(Sit,"NystromformerModel"),Sit.forEach(t),JMo=r(p8e," (Nystr\xF6mformer model)"),p8e.forEach(t),YMo=i($),Pp=n($,"LI",{});var _8e=s(Pp);Fde=n(_8e,"STRONG",{});var Rit=s(Fde);KMo=r(Rit,"openai-gpt"),Rit.forEach(t),ZMo=r(_8e," \u2014 "),Jq=n(_8e,"A",{href:!0});var Pit=s(Jq);e4o=r(Pit,"OpenAIGPTModel"),Pit.forEach(t),o4o=r(_8e," (OpenAI GPT model)"),_8e.forEach(t),r4o=i($),Bp=n($,"LI",{});var b8e=s(Bp);Tde=n(b8e,"STRONG",{});var Bit=s(Tde);t4o=r(Bit,"opt"),Bit.forEach(t),a4o=r(b8e," \u2014 "),Yq=n(b8e,"A",{href:!0});var Iit=s(Yq);n4o=r(Iit,"OPTModel"),Iit.forEach(t),s4o=r(b8e," (OPT model)"),b8e.forEach(t),l4o=i($),Ip=n($,"LI",{});var v8e=s(Ip);Mde=n(v8e,"STRONG",{});var Nit=s(Mde);i4o=r(Nit,"pegasus"),Nit.forEach(t),d4o=r(v8e," \u2014 "),Kq=n(v8e,"A",{href:!0});var qit=s(Kq);c4o=r(qit,"PegasusModel"),qit.forEach(t),m4o=r(v8e," (Pegasus model)"),v8e.forEach(t),f4o=i($),Np=n($,"LI",{});var F8e=s(Np);Ede=n(F8e,"STRONG",{});var jit=s(Ede);g4o=r(jit,"perceiver"),jit.forEach(t),h4o=r(F8e," \u2014 "),Zq=n(F8e,"A",{href:!0});var Dit=s(Zq);u4o=r(Dit,"PerceiverModel"),Dit.forEach(t),p4o=r(F8e," (Perceiver model)"),F8e.forEach(t),_4o=i($),qp=n($,"LI",{});var T8e=s(qp);Cde=n(T8e,"STRONG",{});var Git=s(Cde);b4o=r(Git,"plbart"),Git.forEach(t),v4o=r(T8e," \u2014 "),ej=n(T8e,"A",{href:!0});var Oit=s(ej);F4o=r(Oit,"PLBartModel"),Oit.forEach(t),T4o=r(T8e," (PLBart model)"),T8e.forEach(t),M4o=i($),jp=n($,"LI",{});var M8e=s(jp);wde=n(M8e,"STRONG",{});var Vit=s(wde);E4o=r(Vit,"poolformer"),Vit.forEach(t),C4o=r(M8e," \u2014 "),oj=n(M8e,"A",{href:!0});var Xit=s(oj);w4o=r(Xit,"PoolFormerModel"),Xit.forEach(t),A4o=r(M8e," (PoolFormer model)"),M8e.forEach(t),L4o=i($),Dp=n($,"LI",{});var E8e=s(Dp);Ade=n(E8e,"STRONG",{});var zit=s(Ade);y4o=r(zit,"prophetnet"),zit.forEach(t),x4o=r(E8e," \u2014 "),rj=n(E8e,"A",{href:!0});var Wit=s(rj);$4o=r(Wit,"ProphetNetModel"),Wit.forEach(t),k4o=r(E8e," (ProphetNet model)"),E8e.forEach(t),S4o=i($),Gp=n($,"LI",{});var C8e=s(Gp);Lde=n(C8e,"STRONG",{});var Qit=s(Lde);R4o=r(Qit,"qdqbert"),Qit.forEach(t),P4o=r(C8e," \u2014 "),tj=n(C8e,"A",{href:!0});var Hit=s(tj);B4o=r(Hit,"QDQBertModel"),Hit.forEach(t),I4o=r(C8e," (QDQBert model)"),C8e.forEach(t),N4o=i($),Op=n($,"LI",{});var w8e=s(Op);yde=n(w8e,"STRONG",{});var Uit=s(yde);q4o=r(Uit,"reformer"),Uit.forEach(t),j4o=r(w8e," \u2014 "),aj=n(w8e,"A",{href:!0});var Jit=s(aj);D4o=r(Jit,"ReformerModel"),Jit.forEach(t),G4o=r(w8e," (Reformer model)"),w8e.forEach(t),O4o=i($),Vp=n($,"LI",{});var A8e=s(Vp);xde=n(A8e,"STRONG",{});var Yit=s(xde);V4o=r(Yit,"regnet"),Yit.forEach(t),X4o=r(A8e," \u2014 "),nj=n(A8e,"A",{href:!0});var Kit=s(nj);z4o=r(Kit,"RegNetModel"),Kit.forEach(t),W4o=r(A8e," (RegNet model)"),A8e.forEach(t),Q4o=i($),Xp=n($,"LI",{});var L8e=s(Xp);$de=n(L8e,"STRONG",{});var Zit=s($de);H4o=r(Zit,"rembert"),Zit.forEach(t),U4o=r(L8e," \u2014 "),sj=n(L8e,"A",{href:!0});var edt=s(sj);J4o=r(edt,"RemBertModel"),edt.forEach(t),Y4o=r(L8e," (RemBERT model)"),L8e.forEach(t),K4o=i($),zp=n($,"LI",{});var y8e=s(zp);kde=n(y8e,"STRONG",{});var odt=s(kde);Z4o=r(odt,"resnet"),odt.forEach(t),eEo=r(y8e," \u2014 "),lj=n(y8e,"A",{href:!0});var rdt=s(lj);oEo=r(rdt,"ResNetModel"),rdt.forEach(t),rEo=r(y8e," (ResNet model)"),y8e.forEach(t),tEo=i($),Wp=n($,"LI",{});var x8e=s(Wp);Sde=n(x8e,"STRONG",{});var tdt=s(Sde);aEo=r(tdt,"retribert"),tdt.forEach(t),nEo=r(x8e," \u2014 "),ij=n(x8e,"A",{href:!0});var adt=s(ij);sEo=r(adt,"RetriBertModel"),adt.forEach(t),lEo=r(x8e," (RetriBERT model)"),x8e.forEach(t),iEo=i($),Qp=n($,"LI",{});var $8e=s(Qp);Rde=n($8e,"STRONG",{});var ndt=s(Rde);dEo=r(ndt,"roberta"),ndt.forEach(t),cEo=r($8e," \u2014 "),dj=n($8e,"A",{href:!0});var sdt=s(dj);mEo=r(sdt,"RobertaModel"),sdt.forEach(t),fEo=r($8e," (RoBERTa model)"),$8e.forEach(t),gEo=i($),Hp=n($,"LI",{});var k8e=s(Hp);Pde=n(k8e,"STRONG",{});var ldt=s(Pde);hEo=r(ldt,"roformer"),ldt.forEach(t),uEo=r(k8e," \u2014 "),cj=n(k8e,"A",{href:!0});var idt=s(cj);pEo=r(idt,"RoFormerModel"),idt.forEach(t),_Eo=r(k8e," (RoFormer model)"),k8e.forEach(t),bEo=i($),Up=n($,"LI",{});var S8e=s(Up);Bde=n(S8e,"STRONG",{});var ddt=s(Bde);vEo=r(ddt,"segformer"),ddt.forEach(t),FEo=r(S8e," \u2014 "),mj=n(S8e,"A",{href:!0});var cdt=s(mj);TEo=r(cdt,"SegformerModel"),cdt.forEach(t),MEo=r(S8e," (SegFormer model)"),S8e.forEach(t),EEo=i($),Jp=n($,"LI",{});var R8e=s(Jp);Ide=n(R8e,"STRONG",{});var mdt=s(Ide);CEo=r(mdt,"sew"),mdt.forEach(t),wEo=r(R8e," \u2014 "),fj=n(R8e,"A",{href:!0});var fdt=s(fj);AEo=r(fdt,"SEWModel"),fdt.forEach(t),LEo=r(R8e," (SEW model)"),R8e.forEach(t),yEo=i($),Yp=n($,"LI",{});var P8e=s(Yp);Nde=n(P8e,"STRONG",{});var gdt=s(Nde);xEo=r(gdt,"sew-d"),gdt.forEach(t),$Eo=r(P8e," \u2014 "),gj=n(P8e,"A",{href:!0});var hdt=s(gj);kEo=r(hdt,"SEWDModel"),hdt.forEach(t),SEo=r(P8e," (SEW-D model)"),P8e.forEach(t),REo=i($),Kp=n($,"LI",{});var B8e=s(Kp);qde=n(B8e,"STRONG",{});var udt=s(qde);PEo=r(udt,"speech_to_text"),udt.forEach(t),BEo=r(B8e," \u2014 "),hj=n(B8e,"A",{href:!0});var pdt=s(hj);IEo=r(pdt,"Speech2TextModel"),pdt.forEach(t),NEo=r(B8e," (Speech2Text model)"),B8e.forEach(t),qEo=i($),Zp=n($,"LI",{});var I8e=s(Zp);jde=n(I8e,"STRONG",{});var _dt=s(jde);jEo=r(_dt,"splinter"),_dt.forEach(t),DEo=r(I8e," \u2014 "),uj=n(I8e,"A",{href:!0});var bdt=s(uj);GEo=r(bdt,"SplinterModel"),bdt.forEach(t),OEo=r(I8e," (Splinter model)"),I8e.forEach(t),VEo=i($),e_=n($,"LI",{});var N8e=s(e_);Dde=n(N8e,"STRONG",{});var vdt=s(Dde);XEo=r(vdt,"squeezebert"),vdt.forEach(t),zEo=r(N8e," \u2014 "),pj=n(N8e,"A",{href:!0});var Fdt=s(pj);WEo=r(Fdt,"SqueezeBertModel"),Fdt.forEach(t),QEo=r(N8e," (SqueezeBERT model)"),N8e.forEach(t),HEo=i($),o_=n($,"LI",{});var q8e=s(o_);Gde=n(q8e,"STRONG",{});var Tdt=s(Gde);UEo=r(Tdt,"swin"),Tdt.forEach(t),JEo=r(q8e," \u2014 "),_j=n(q8e,"A",{href:!0});var Mdt=s(_j);YEo=r(Mdt,"SwinModel"),Mdt.forEach(t),KEo=r(q8e," (Swin Transformer model)"),q8e.forEach(t),ZEo=i($),r_=n($,"LI",{});var j8e=s(r_);Ode=n(j8e,"STRONG",{});var Edt=s(Ode);eCo=r(Edt,"t5"),Edt.forEach(t),oCo=r(j8e," \u2014 "),bj=n(j8e,"A",{href:!0});var Cdt=s(bj);rCo=r(Cdt,"T5Model"),Cdt.forEach(t),tCo=r(j8e," (T5 model)"),j8e.forEach(t),aCo=i($),t_=n($,"LI",{});var D8e=s(t_);Vde=n(D8e,"STRONG",{});var wdt=s(Vde);nCo=r(wdt,"tapas"),wdt.forEach(t),sCo=r(D8e," \u2014 "),vj=n(D8e,"A",{href:!0});var Adt=s(vj);lCo=r(Adt,"TapasModel"),Adt.forEach(t),iCo=r(D8e," (TAPAS model)"),D8e.forEach(t),dCo=i($),a_=n($,"LI",{});var G8e=s(a_);Xde=n(G8e,"STRONG",{});var Ldt=s(Xde);cCo=r(Ldt,"trajectory_transformer"),Ldt.forEach(t),mCo=r(G8e," \u2014 "),Fj=n(G8e,"A",{href:!0});var ydt=s(Fj);fCo=r(ydt,"TrajectoryTransformerModel"),ydt.forEach(t),gCo=r(G8e," (Trajectory Transformer model)"),G8e.forEach(t),hCo=i($),n_=n($,"LI",{});var O8e=s(n_);zde=n(O8e,"STRONG",{});var xdt=s(zde);uCo=r(xdt,"transfo-xl"),xdt.forEach(t),pCo=r(O8e," \u2014 "),Tj=n(O8e,"A",{href:!0});var $dt=s(Tj);_Co=r($dt,"TransfoXLModel"),$dt.forEach(t),bCo=r(O8e," (Transformer-XL model)"),O8e.forEach(t),vCo=i($),s_=n($,"LI",{});var V8e=s(s_);Wde=n(V8e,"STRONG",{});var kdt=s(Wde);FCo=r(kdt,"unispeech"),kdt.forEach(t),TCo=r(V8e," \u2014 "),Mj=n(V8e,"A",{href:!0});var Sdt=s(Mj);MCo=r(Sdt,"UniSpeechModel"),Sdt.forEach(t),ECo=r(V8e," (UniSpeech model)"),V8e.forEach(t),CCo=i($),l_=n($,"LI",{});var X8e=s(l_);Qde=n(X8e,"STRONG",{});var Rdt=s(Qde);wCo=r(Rdt,"unispeech-sat"),Rdt.forEach(t),ACo=r(X8e," \u2014 "),Ej=n(X8e,"A",{href:!0});var Pdt=s(Ej);LCo=r(Pdt,"UniSpeechSatModel"),Pdt.forEach(t),yCo=r(X8e," (UniSpeechSat model)"),X8e.forEach(t),xCo=i($),i_=n($,"LI",{});var z8e=s(i_);Hde=n(z8e,"STRONG",{});var Bdt=s(Hde);$Co=r(Bdt,"van"),Bdt.forEach(t),kCo=r(z8e," \u2014 "),Cj=n(z8e,"A",{href:!0});var Idt=s(Cj);SCo=r(Idt,"VanModel"),Idt.forEach(t),RCo=r(z8e," (VAN model)"),z8e.forEach(t),PCo=i($),d_=n($,"LI",{});var W8e=s(d_);Ude=n(W8e,"STRONG",{});var Ndt=s(Ude);BCo=r(Ndt,"vilt"),Ndt.forEach(t),ICo=r(W8e," \u2014 "),wj=n(W8e,"A",{href:!0});var qdt=s(wj);NCo=r(qdt,"ViltModel"),qdt.forEach(t),qCo=r(W8e," (ViLT model)"),W8e.forEach(t),jCo=i($),c_=n($,"LI",{});var Q8e=s(c_);Jde=n(Q8e,"STRONG",{});var jdt=s(Jde);DCo=r(jdt,"vision-text-dual-encoder"),jdt.forEach(t),GCo=r(Q8e," \u2014 "),Aj=n(Q8e,"A",{href:!0});var Ddt=s(Aj);OCo=r(Ddt,"VisionTextDualEncoderModel"),Ddt.forEach(t),VCo=r(Q8e," (VisionTextDualEncoder model)"),Q8e.forEach(t),XCo=i($),m_=n($,"LI",{});var H8e=s(m_);Yde=n(H8e,"STRONG",{});var Gdt=s(Yde);zCo=r(Gdt,"visual_bert"),Gdt.forEach(t),WCo=r(H8e," \u2014 "),Lj=n(H8e,"A",{href:!0});var Odt=s(Lj);QCo=r(Odt,"VisualBertModel"),Odt.forEach(t),HCo=r(H8e," (VisualBERT model)"),H8e.forEach(t),UCo=i($),f_=n($,"LI",{});var U8e=s(f_);Kde=n(U8e,"STRONG",{});var Vdt=s(Kde);JCo=r(Vdt,"vit"),Vdt.forEach(t),YCo=r(U8e," \u2014 "),yj=n(U8e,"A",{href:!0});var Xdt=s(yj);KCo=r(Xdt,"ViTModel"),Xdt.forEach(t),ZCo=r(U8e," (ViT model)"),U8e.forEach(t),e5o=i($),g_=n($,"LI",{});var J8e=s(g_);Zde=n(J8e,"STRONG",{});var zdt=s(Zde);o5o=r(zdt,"vit_mae"),zdt.forEach(t),r5o=r(J8e," \u2014 "),xj=n(J8e,"A",{href:!0});var Wdt=s(xj);t5o=r(Wdt,"ViTMAEModel"),Wdt.forEach(t),a5o=r(J8e," (ViTMAE model)"),J8e.forEach(t),n5o=i($),h_=n($,"LI",{});var Y8e=s(h_);ece=n(Y8e,"STRONG",{});var Qdt=s(ece);s5o=r(Qdt,"wav2vec2"),Qdt.forEach(t),l5o=r(Y8e," \u2014 "),$j=n(Y8e,"A",{href:!0});var Hdt=s($j);i5o=r(Hdt,"Wav2Vec2Model"),Hdt.forEach(t),d5o=r(Y8e," (Wav2Vec2 model)"),Y8e.forEach(t),c5o=i($),u_=n($,"LI",{});var K8e=s(u_);oce=n(K8e,"STRONG",{});var Udt=s(oce);m5o=r(Udt,"wav2vec2-conformer"),Udt.forEach(t),f5o=r(K8e," \u2014 "),kj=n(K8e,"A",{href:!0});var Jdt=s(kj);g5o=r(Jdt,"Wav2Vec2ConformerModel"),Jdt.forEach(t),h5o=r(K8e," (Wav2Vec2-Conformer model)"),K8e.forEach(t),u5o=i($),p_=n($,"LI",{});var Z8e=s(p_);rce=n(Z8e,"STRONG",{});var Ydt=s(rce);p5o=r(Ydt,"wavlm"),Ydt.forEach(t),_5o=r(Z8e," \u2014 "),Sj=n(Z8e,"A",{href:!0});var Kdt=s(Sj);b5o=r(Kdt,"WavLMModel"),Kdt.forEach(t),v5o=r(Z8e," (WavLM model)"),Z8e.forEach(t),F5o=i($),__=n($,"LI",{});var e9e=s(__);tce=n(e9e,"STRONG",{});var Zdt=s(tce);T5o=r(Zdt,"xglm"),Zdt.forEach(t),M5o=r(e9e," \u2014 "),Rj=n(e9e,"A",{href:!0});var ect=s(Rj);E5o=r(ect,"XGLMModel"),ect.forEach(t),C5o=r(e9e," (XGLM model)"),e9e.forEach(t),w5o=i($),b_=n($,"LI",{});var o9e=s(b_);ace=n(o9e,"STRONG",{});var oct=s(ace);A5o=r(oct,"xlm"),oct.forEach(t),L5o=r(o9e," \u2014 "),Pj=n(o9e,"A",{href:!0});var rct=s(Pj);y5o=r(rct,"XLMModel"),rct.forEach(t),x5o=r(o9e," (XLM model)"),o9e.forEach(t),$5o=i($),v_=n($,"LI",{});var r9e=s(v_);nce=n(r9e,"STRONG",{});var tct=s(nce);k5o=r(tct,"xlm-prophetnet"),tct.forEach(t),S5o=r(r9e," \u2014 "),Bj=n(r9e,"A",{href:!0});var act=s(Bj);R5o=r(act,"XLMProphetNetModel"),act.forEach(t),P5o=r(r9e," (XLM-ProphetNet model)"),r9e.forEach(t),B5o=i($),F_=n($,"LI",{});var t9e=s(F_);sce=n(t9e,"STRONG",{});var nct=s(sce);I5o=r(nct,"xlm-roberta"),nct.forEach(t),N5o=r(t9e," \u2014 "),Ij=n(t9e,"A",{href:!0});var sct=s(Ij);q5o=r(sct,"XLMRobertaModel"),sct.forEach(t),j5o=r(t9e," (XLM-RoBERTa model)"),t9e.forEach(t),D5o=i($),T_=n($,"LI",{});var a9e=s(T_);lce=n(a9e,"STRONG",{});var lct=s(lce);G5o=r(lct,"xlm-roberta-xl"),lct.forEach(t),O5o=r(a9e," \u2014 "),Nj=n(a9e,"A",{href:!0});var ict=s(Nj);V5o=r(ict,"XLMRobertaXLModel"),ict.forEach(t),X5o=r(a9e," (XLM-RoBERTa-XL model)"),a9e.forEach(t),z5o=i($),M_=n($,"LI",{});var n9e=s(M_);ice=n(n9e,"STRONG",{});var dct=s(ice);W5o=r(dct,"xlnet"),dct.forEach(t),Q5o=r(n9e," \u2014 "),qj=n(n9e,"A",{href:!0});var cct=s(qj);H5o=r(cct,"XLNetModel"),cct.forEach(t),U5o=r(n9e," (XLNet model)"),n9e.forEach(t),J5o=i($),E_=n($,"LI",{});var s9e=s(E_);dce=n(s9e,"STRONG",{});var mct=s(dce);Y5o=r(mct,"yolos"),mct.forEach(t),K5o=r(s9e," \u2014 "),jj=n(s9e,"A",{href:!0});var fct=s(jj);Z5o=r(fct,"YolosModel"),fct.forEach(t),e3o=r(s9e," (YOLOS model)"),s9e.forEach(t),o3o=i($),C_=n($,"LI",{});var l9e=s(C_);cce=n(l9e,"STRONG",{});var gct=s(cce);r3o=r(gct,"yoso"),gct.forEach(t),t3o=r(l9e," \u2014 "),Dj=n(l9e,"A",{href:!0});var hct=s(Dj);a3o=r(hct,"YosoModel"),hct.forEach(t),n3o=r(l9e," (YOSO model)"),l9e.forEach(t),$.forEach(t),s3o=i(aa),w_=n(aa,"P",{});var i9e=s(w_);l3o=r(i9e,"The model is set in evaluation mode by default using "),mce=n(i9e,"CODE",{});var uct=s(mce);i3o=r(uct,"model.eval()"),uct.forEach(t),d3o=r(i9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fce=n(i9e,"CODE",{});var pct=s(fce);c3o=r(pct,"model.train()"),pct.forEach(t),i9e.forEach(t),m3o=i(aa),T(A_.$$.fragment,aa),aa.forEach(t),Us.forEach(t),nGe=i(m),Ni=n(m,"H2",{class:!0});var mVe=s(Ni);L_=n(mVe,"A",{id:!0,class:!0,href:!0});var _ct=s(L_);gce=n(_ct,"SPAN",{});var bct=s(gce);T(Hy.$$.fragment,bct),bct.forEach(t),_ct.forEach(t),f3o=i(mVe),hce=n(mVe,"SPAN",{});var vct=s(hce);g3o=r(vct,"AutoModelForPreTraining"),vct.forEach(t),mVe.forEach(t),sGe=i(m),$o=n(m,"DIV",{class:!0});var Js=s($o);T(Uy.$$.fragment,Js),h3o=i(Js),qi=n(Js,"P",{});var Uee=s(qi);u3o=r(Uee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Gj=n(Uee,"A",{href:!0});var Fct=s(Gj);p3o=r(Fct,"from_pretrained()"),Fct.forEach(t),_3o=r(Uee," class method or the "),Oj=n(Uee,"A",{href:!0});var Tct=s(Oj);b3o=r(Tct,"from_config()"),Tct.forEach(t),v3o=r(Uee,` class
method.`),Uee.forEach(t),F3o=i(Js),Jy=n(Js,"P",{});var fVe=s(Jy);T3o=r(fVe,"This class cannot be instantiated directly using "),uce=n(fVe,"CODE",{});var Mct=s(uce);M3o=r(Mct,"__init__()"),Mct.forEach(t),E3o=r(fVe," (throws an error)."),fVe.forEach(t),C3o=i(Js),st=n(Js,"DIV",{class:!0});var T6=s(st);T(Yy.$$.fragment,T6),w3o=i(T6),pce=n(T6,"P",{});var Ect=s(pce);A3o=r(Ect,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Ect.forEach(t),L3o=i(T6),ji=n(T6,"P",{});var Jee=s(ji);y3o=r(Jee,`Note:
Loading a model from its configuration file does `),_ce=n(Jee,"STRONG",{});var Cct=s(_ce);x3o=r(Cct,"not"),Cct.forEach(t),$3o=r(Jee,` load the model weights. It only affects the
model\u2019s configuration. Use `),Vj=n(Jee,"A",{href:!0});var wct=s(Vj);k3o=r(wct,"from_pretrained()"),wct.forEach(t),S3o=r(Jee," to load the model weights."),Jee.forEach(t),R3o=i(T6),T(y_.$$.fragment,T6),T6.forEach(t),P3o=i(Js),Ye=n(Js,"DIV",{class:!0});var na=s(Ye);T(Ky.$$.fragment,na),B3o=i(na),bce=n(na,"P",{});var Act=s(bce);I3o=r(Act,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Act.forEach(t),N3o=i(na),Ra=n(na,"P",{});var M6=s(Ra);q3o=r(M6,"The model class to instantiate is selected based on the "),vce=n(M6,"CODE",{});var Lct=s(vce);j3o=r(Lct,"model_type"),Lct.forEach(t),D3o=r(M6,` property of the config object (either
passed as an argument or loaded from `),Fce=n(M6,"CODE",{});var yct=s(Fce);G3o=r(yct,"pretrained_model_name_or_path"),yct.forEach(t),O3o=r(M6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tce=n(M6,"CODE",{});var xct=s(Tce);V3o=r(xct,"pretrained_model_name_or_path"),xct.forEach(t),X3o=r(M6,":"),M6.forEach(t),z3o=i(na),G=n(na,"UL",{});var O=s(G);x_=n(O,"LI",{});var d9e=s(x_);Mce=n(d9e,"STRONG",{});var $ct=s(Mce);W3o=r($ct,"albert"),$ct.forEach(t),Q3o=r(d9e," \u2014 "),Xj=n(d9e,"A",{href:!0});var kct=s(Xj);H3o=r(kct,"AlbertForPreTraining"),kct.forEach(t),U3o=r(d9e," (ALBERT model)"),d9e.forEach(t),J3o=i(O),$_=n(O,"LI",{});var c9e=s($_);Ece=n(c9e,"STRONG",{});var Sct=s(Ece);Y3o=r(Sct,"bart"),Sct.forEach(t),K3o=r(c9e," \u2014 "),zj=n(c9e,"A",{href:!0});var Rct=s(zj);Z3o=r(Rct,"BartForConditionalGeneration"),Rct.forEach(t),e0o=r(c9e," (BART model)"),c9e.forEach(t),o0o=i(O),k_=n(O,"LI",{});var m9e=s(k_);Cce=n(m9e,"STRONG",{});var Pct=s(Cce);r0o=r(Pct,"bert"),Pct.forEach(t),t0o=r(m9e," \u2014 "),Wj=n(m9e,"A",{href:!0});var Bct=s(Wj);a0o=r(Bct,"BertForPreTraining"),Bct.forEach(t),n0o=r(m9e," (BERT model)"),m9e.forEach(t),s0o=i(O),S_=n(O,"LI",{});var f9e=s(S_);wce=n(f9e,"STRONG",{});var Ict=s(wce);l0o=r(Ict,"big_bird"),Ict.forEach(t),i0o=r(f9e," \u2014 "),Qj=n(f9e,"A",{href:!0});var Nct=s(Qj);d0o=r(Nct,"BigBirdForPreTraining"),Nct.forEach(t),c0o=r(f9e," (BigBird model)"),f9e.forEach(t),m0o=i(O),R_=n(O,"LI",{});var g9e=s(R_);Ace=n(g9e,"STRONG",{});var qct=s(Ace);f0o=r(qct,"bloom"),qct.forEach(t),g0o=r(g9e," \u2014 "),Hj=n(g9e,"A",{href:!0});var jct=s(Hj);h0o=r(jct,"BloomForCausalLM"),jct.forEach(t),u0o=r(g9e," (BLOOM model)"),g9e.forEach(t),p0o=i(O),P_=n(O,"LI",{});var h9e=s(P_);Lce=n(h9e,"STRONG",{});var Dct=s(Lce);_0o=r(Dct,"camembert"),Dct.forEach(t),b0o=r(h9e," \u2014 "),Uj=n(h9e,"A",{href:!0});var Gct=s(Uj);v0o=r(Gct,"CamembertForMaskedLM"),Gct.forEach(t),F0o=r(h9e," (CamemBERT model)"),h9e.forEach(t),T0o=i(O),B_=n(O,"LI",{});var u9e=s(B_);yce=n(u9e,"STRONG",{});var Oct=s(yce);M0o=r(Oct,"ctrl"),Oct.forEach(t),E0o=r(u9e," \u2014 "),Jj=n(u9e,"A",{href:!0});var Vct=s(Jj);C0o=r(Vct,"CTRLLMHeadModel"),Vct.forEach(t),w0o=r(u9e," (CTRL model)"),u9e.forEach(t),A0o=i(O),I_=n(O,"LI",{});var p9e=s(I_);xce=n(p9e,"STRONG",{});var Xct=s(xce);L0o=r(Xct,"data2vec-text"),Xct.forEach(t),y0o=r(p9e," \u2014 "),Yj=n(p9e,"A",{href:!0});var zct=s(Yj);x0o=r(zct,"Data2VecTextForMaskedLM"),zct.forEach(t),$0o=r(p9e," (Data2VecText model)"),p9e.forEach(t),k0o=i(O),N_=n(O,"LI",{});var _9e=s(N_);$ce=n(_9e,"STRONG",{});var Wct=s($ce);S0o=r(Wct,"deberta"),Wct.forEach(t),R0o=r(_9e," \u2014 "),Kj=n(_9e,"A",{href:!0});var Qct=s(Kj);P0o=r(Qct,"DebertaForMaskedLM"),Qct.forEach(t),B0o=r(_9e," (DeBERTa model)"),_9e.forEach(t),I0o=i(O),q_=n(O,"LI",{});var b9e=s(q_);kce=n(b9e,"STRONG",{});var Hct=s(kce);N0o=r(Hct,"deberta-v2"),Hct.forEach(t),q0o=r(b9e," \u2014 "),Zj=n(b9e,"A",{href:!0});var Uct=s(Zj);j0o=r(Uct,"DebertaV2ForMaskedLM"),Uct.forEach(t),D0o=r(b9e," (DeBERTa-v2 model)"),b9e.forEach(t),G0o=i(O),j_=n(O,"LI",{});var v9e=s(j_);Sce=n(v9e,"STRONG",{});var Jct=s(Sce);O0o=r(Jct,"distilbert"),Jct.forEach(t),V0o=r(v9e," \u2014 "),eD=n(v9e,"A",{href:!0});var Yct=s(eD);X0o=r(Yct,"DistilBertForMaskedLM"),Yct.forEach(t),z0o=r(v9e," (DistilBERT model)"),v9e.forEach(t),W0o=i(O),D_=n(O,"LI",{});var F9e=s(D_);Rce=n(F9e,"STRONG",{});var Kct=s(Rce);Q0o=r(Kct,"electra"),Kct.forEach(t),H0o=r(F9e," \u2014 "),oD=n(F9e,"A",{href:!0});var Zct=s(oD);U0o=r(Zct,"ElectraForPreTraining"),Zct.forEach(t),J0o=r(F9e," (ELECTRA model)"),F9e.forEach(t),Y0o=i(O),G_=n(O,"LI",{});var T9e=s(G_);Pce=n(T9e,"STRONG",{});var emt=s(Pce);K0o=r(emt,"flaubert"),emt.forEach(t),Z0o=r(T9e," \u2014 "),rD=n(T9e,"A",{href:!0});var omt=s(rD);ewo=r(omt,"FlaubertWithLMHeadModel"),omt.forEach(t),owo=r(T9e," (FlauBERT model)"),T9e.forEach(t),rwo=i(O),O_=n(O,"LI",{});var M9e=s(O_);Bce=n(M9e,"STRONG",{});var rmt=s(Bce);two=r(rmt,"flava"),rmt.forEach(t),awo=r(M9e," \u2014 "),tD=n(M9e,"A",{href:!0});var tmt=s(tD);nwo=r(tmt,"FlavaForPreTraining"),tmt.forEach(t),swo=r(M9e," (FLAVA model)"),M9e.forEach(t),lwo=i(O),V_=n(O,"LI",{});var E9e=s(V_);Ice=n(E9e,"STRONG",{});var amt=s(Ice);iwo=r(amt,"fnet"),amt.forEach(t),dwo=r(E9e," \u2014 "),aD=n(E9e,"A",{href:!0});var nmt=s(aD);cwo=r(nmt,"FNetForPreTraining"),nmt.forEach(t),mwo=r(E9e," (FNet model)"),E9e.forEach(t),fwo=i(O),X_=n(O,"LI",{});var C9e=s(X_);Nce=n(C9e,"STRONG",{});var smt=s(Nce);gwo=r(smt,"fsmt"),smt.forEach(t),hwo=r(C9e," \u2014 "),nD=n(C9e,"A",{href:!0});var lmt=s(nD);uwo=r(lmt,"FSMTForConditionalGeneration"),lmt.forEach(t),pwo=r(C9e," (FairSeq Machine-Translation model)"),C9e.forEach(t),_wo=i(O),z_=n(O,"LI",{});var w9e=s(z_);qce=n(w9e,"STRONG",{});var imt=s(qce);bwo=r(imt,"funnel"),imt.forEach(t),vwo=r(w9e," \u2014 "),sD=n(w9e,"A",{href:!0});var dmt=s(sD);Fwo=r(dmt,"FunnelForPreTraining"),dmt.forEach(t),Two=r(w9e," (Funnel Transformer model)"),w9e.forEach(t),Mwo=i(O),W_=n(O,"LI",{});var A9e=s(W_);jce=n(A9e,"STRONG",{});var cmt=s(jce);Ewo=r(cmt,"gpt2"),cmt.forEach(t),Cwo=r(A9e," \u2014 "),lD=n(A9e,"A",{href:!0});var mmt=s(lD);wwo=r(mmt,"GPT2LMHeadModel"),mmt.forEach(t),Awo=r(A9e," (OpenAI GPT-2 model)"),A9e.forEach(t),Lwo=i(O),Q_=n(O,"LI",{});var L9e=s(Q_);Dce=n(L9e,"STRONG",{});var fmt=s(Dce);ywo=r(fmt,"ibert"),fmt.forEach(t),xwo=r(L9e," \u2014 "),iD=n(L9e,"A",{href:!0});var gmt=s(iD);$wo=r(gmt,"IBertForMaskedLM"),gmt.forEach(t),kwo=r(L9e," (I-BERT model)"),L9e.forEach(t),Swo=i(O),H_=n(O,"LI",{});var y9e=s(H_);Gce=n(y9e,"STRONG",{});var hmt=s(Gce);Rwo=r(hmt,"layoutlm"),hmt.forEach(t),Pwo=r(y9e," \u2014 "),dD=n(y9e,"A",{href:!0});var umt=s(dD);Bwo=r(umt,"LayoutLMForMaskedLM"),umt.forEach(t),Iwo=r(y9e," (LayoutLM model)"),y9e.forEach(t),Nwo=i(O),U_=n(O,"LI",{});var x9e=s(U_);Oce=n(x9e,"STRONG",{});var pmt=s(Oce);qwo=r(pmt,"longformer"),pmt.forEach(t),jwo=r(x9e," \u2014 "),cD=n(x9e,"A",{href:!0});var _mt=s(cD);Dwo=r(_mt,"LongformerForMaskedLM"),_mt.forEach(t),Gwo=r(x9e," (Longformer model)"),x9e.forEach(t),Owo=i(O),J_=n(O,"LI",{});var $9e=s(J_);Vce=n($9e,"STRONG",{});var bmt=s(Vce);Vwo=r(bmt,"lxmert"),bmt.forEach(t),Xwo=r($9e," \u2014 "),mD=n($9e,"A",{href:!0});var vmt=s(mD);zwo=r(vmt,"LxmertForPreTraining"),vmt.forEach(t),Wwo=r($9e," (LXMERT model)"),$9e.forEach(t),Qwo=i(O),Y_=n(O,"LI",{});var k9e=s(Y_);Xce=n(k9e,"STRONG",{});var Fmt=s(Xce);Hwo=r(Fmt,"megatron-bert"),Fmt.forEach(t),Uwo=r(k9e," \u2014 "),fD=n(k9e,"A",{href:!0});var Tmt=s(fD);Jwo=r(Tmt,"MegatronBertForPreTraining"),Tmt.forEach(t),Ywo=r(k9e," (Megatron-BERT model)"),k9e.forEach(t),Kwo=i(O),K_=n(O,"LI",{});var S9e=s(K_);zce=n(S9e,"STRONG",{});var Mmt=s(zce);Zwo=r(Mmt,"mobilebert"),Mmt.forEach(t),eAo=r(S9e," \u2014 "),gD=n(S9e,"A",{href:!0});var Emt=s(gD);oAo=r(Emt,"MobileBertForPreTraining"),Emt.forEach(t),rAo=r(S9e," (MobileBERT model)"),S9e.forEach(t),tAo=i(O),Z_=n(O,"LI",{});var R9e=s(Z_);Wce=n(R9e,"STRONG",{});var Cmt=s(Wce);aAo=r(Cmt,"mpnet"),Cmt.forEach(t),nAo=r(R9e," \u2014 "),hD=n(R9e,"A",{href:!0});var wmt=s(hD);sAo=r(wmt,"MPNetForMaskedLM"),wmt.forEach(t),lAo=r(R9e," (MPNet model)"),R9e.forEach(t),iAo=i(O),e2=n(O,"LI",{});var P9e=s(e2);Qce=n(P9e,"STRONG",{});var Amt=s(Qce);dAo=r(Amt,"openai-gpt"),Amt.forEach(t),cAo=r(P9e," \u2014 "),uD=n(P9e,"A",{href:!0});var Lmt=s(uD);mAo=r(Lmt,"OpenAIGPTLMHeadModel"),Lmt.forEach(t),fAo=r(P9e," (OpenAI GPT model)"),P9e.forEach(t),gAo=i(O),o2=n(O,"LI",{});var B9e=s(o2);Hce=n(B9e,"STRONG",{});var ymt=s(Hce);hAo=r(ymt,"retribert"),ymt.forEach(t),uAo=r(B9e," \u2014 "),pD=n(B9e,"A",{href:!0});var xmt=s(pD);pAo=r(xmt,"RetriBertModel"),xmt.forEach(t),_Ao=r(B9e," (RetriBERT model)"),B9e.forEach(t),bAo=i(O),r2=n(O,"LI",{});var I9e=s(r2);Uce=n(I9e,"STRONG",{});var $mt=s(Uce);vAo=r($mt,"roberta"),$mt.forEach(t),FAo=r(I9e," \u2014 "),_D=n(I9e,"A",{href:!0});var kmt=s(_D);TAo=r(kmt,"RobertaForMaskedLM"),kmt.forEach(t),MAo=r(I9e," (RoBERTa model)"),I9e.forEach(t),EAo=i(O),t2=n(O,"LI",{});var N9e=s(t2);Jce=n(N9e,"STRONG",{});var Smt=s(Jce);CAo=r(Smt,"splinter"),Smt.forEach(t),wAo=r(N9e," \u2014 "),bD=n(N9e,"A",{href:!0});var Rmt=s(bD);AAo=r(Rmt,"SplinterForPreTraining"),Rmt.forEach(t),LAo=r(N9e," (Splinter model)"),N9e.forEach(t),yAo=i(O),a2=n(O,"LI",{});var q9e=s(a2);Yce=n(q9e,"STRONG",{});var Pmt=s(Yce);xAo=r(Pmt,"squeezebert"),Pmt.forEach(t),$Ao=r(q9e," \u2014 "),vD=n(q9e,"A",{href:!0});var Bmt=s(vD);kAo=r(Bmt,"SqueezeBertForMaskedLM"),Bmt.forEach(t),SAo=r(q9e," (SqueezeBERT model)"),q9e.forEach(t),RAo=i(O),n2=n(O,"LI",{});var j9e=s(n2);Kce=n(j9e,"STRONG",{});var Imt=s(Kce);PAo=r(Imt,"t5"),Imt.forEach(t),BAo=r(j9e," \u2014 "),FD=n(j9e,"A",{href:!0});var Nmt=s(FD);IAo=r(Nmt,"T5ForConditionalGeneration"),Nmt.forEach(t),NAo=r(j9e," (T5 model)"),j9e.forEach(t),qAo=i(O),s2=n(O,"LI",{});var D9e=s(s2);Zce=n(D9e,"STRONG",{});var qmt=s(Zce);jAo=r(qmt,"tapas"),qmt.forEach(t),DAo=r(D9e," \u2014 "),TD=n(D9e,"A",{href:!0});var jmt=s(TD);GAo=r(jmt,"TapasForMaskedLM"),jmt.forEach(t),OAo=r(D9e," (TAPAS model)"),D9e.forEach(t),VAo=i(O),l2=n(O,"LI",{});var G9e=s(l2);eme=n(G9e,"STRONG",{});var Dmt=s(eme);XAo=r(Dmt,"transfo-xl"),Dmt.forEach(t),zAo=r(G9e," \u2014 "),MD=n(G9e,"A",{href:!0});var Gmt=s(MD);WAo=r(Gmt,"TransfoXLLMHeadModel"),Gmt.forEach(t),QAo=r(G9e," (Transformer-XL model)"),G9e.forEach(t),HAo=i(O),i2=n(O,"LI",{});var O9e=s(i2);ome=n(O9e,"STRONG",{});var Omt=s(ome);UAo=r(Omt,"unispeech"),Omt.forEach(t),JAo=r(O9e," \u2014 "),ED=n(O9e,"A",{href:!0});var Vmt=s(ED);YAo=r(Vmt,"UniSpeechForPreTraining"),Vmt.forEach(t),KAo=r(O9e," (UniSpeech model)"),O9e.forEach(t),ZAo=i(O),d2=n(O,"LI",{});var V9e=s(d2);rme=n(V9e,"STRONG",{});var Xmt=s(rme);e6o=r(Xmt,"unispeech-sat"),Xmt.forEach(t),o6o=r(V9e," \u2014 "),CD=n(V9e,"A",{href:!0});var zmt=s(CD);r6o=r(zmt,"UniSpeechSatForPreTraining"),zmt.forEach(t),t6o=r(V9e," (UniSpeechSat model)"),V9e.forEach(t),a6o=i(O),c2=n(O,"LI",{});var X9e=s(c2);tme=n(X9e,"STRONG",{});var Wmt=s(tme);n6o=r(Wmt,"visual_bert"),Wmt.forEach(t),s6o=r(X9e," \u2014 "),wD=n(X9e,"A",{href:!0});var Qmt=s(wD);l6o=r(Qmt,"VisualBertForPreTraining"),Qmt.forEach(t),i6o=r(X9e," (VisualBERT model)"),X9e.forEach(t),d6o=i(O),m2=n(O,"LI",{});var z9e=s(m2);ame=n(z9e,"STRONG",{});var Hmt=s(ame);c6o=r(Hmt,"vit_mae"),Hmt.forEach(t),m6o=r(z9e," \u2014 "),AD=n(z9e,"A",{href:!0});var Umt=s(AD);f6o=r(Umt,"ViTMAEForPreTraining"),Umt.forEach(t),g6o=r(z9e," (ViTMAE model)"),z9e.forEach(t),h6o=i(O),f2=n(O,"LI",{});var W9e=s(f2);nme=n(W9e,"STRONG",{});var Jmt=s(nme);u6o=r(Jmt,"wav2vec2"),Jmt.forEach(t),p6o=r(W9e," \u2014 "),LD=n(W9e,"A",{href:!0});var Ymt=s(LD);_6o=r(Ymt,"Wav2Vec2ForPreTraining"),Ymt.forEach(t),b6o=r(W9e," (Wav2Vec2 model)"),W9e.forEach(t),v6o=i(O),g2=n(O,"LI",{});var Q9e=s(g2);sme=n(Q9e,"STRONG",{});var Kmt=s(sme);F6o=r(Kmt,"wav2vec2-conformer"),Kmt.forEach(t),T6o=r(Q9e," \u2014 "),yD=n(Q9e,"A",{href:!0});var Zmt=s(yD);M6o=r(Zmt,"Wav2Vec2ConformerForPreTraining"),Zmt.forEach(t),E6o=r(Q9e," (Wav2Vec2-Conformer model)"),Q9e.forEach(t),C6o=i(O),h2=n(O,"LI",{});var H9e=s(h2);lme=n(H9e,"STRONG",{});var eft=s(lme);w6o=r(eft,"xlm"),eft.forEach(t),A6o=r(H9e," \u2014 "),xD=n(H9e,"A",{href:!0});var oft=s(xD);L6o=r(oft,"XLMWithLMHeadModel"),oft.forEach(t),y6o=r(H9e," (XLM model)"),H9e.forEach(t),x6o=i(O),u2=n(O,"LI",{});var U9e=s(u2);ime=n(U9e,"STRONG",{});var rft=s(ime);$6o=r(rft,"xlm-roberta"),rft.forEach(t),k6o=r(U9e," \u2014 "),$D=n(U9e,"A",{href:!0});var tft=s($D);S6o=r(tft,"XLMRobertaForMaskedLM"),tft.forEach(t),R6o=r(U9e," (XLM-RoBERTa model)"),U9e.forEach(t),P6o=i(O),p2=n(O,"LI",{});var J9e=s(p2);dme=n(J9e,"STRONG",{});var aft=s(dme);B6o=r(aft,"xlm-roberta-xl"),aft.forEach(t),I6o=r(J9e," \u2014 "),kD=n(J9e,"A",{href:!0});var nft=s(kD);N6o=r(nft,"XLMRobertaXLForMaskedLM"),nft.forEach(t),q6o=r(J9e," (XLM-RoBERTa-XL model)"),J9e.forEach(t),j6o=i(O),_2=n(O,"LI",{});var Y9e=s(_2);cme=n(Y9e,"STRONG",{});var sft=s(cme);D6o=r(sft,"xlnet"),sft.forEach(t),G6o=r(Y9e," \u2014 "),SD=n(Y9e,"A",{href:!0});var lft=s(SD);O6o=r(lft,"XLNetLMHeadModel"),lft.forEach(t),V6o=r(Y9e," (XLNet model)"),Y9e.forEach(t),O.forEach(t),X6o=i(na),b2=n(na,"P",{});var K9e=s(b2);z6o=r(K9e,"The model is set in evaluation mode by default using "),mme=n(K9e,"CODE",{});var ift=s(mme);W6o=r(ift,"model.eval()"),ift.forEach(t),Q6o=r(K9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fme=n(K9e,"CODE",{});var dft=s(fme);H6o=r(dft,"model.train()"),dft.forEach(t),K9e.forEach(t),U6o=i(na),T(v2.$$.fragment,na),na.forEach(t),Js.forEach(t),lGe=i(m),Di=n(m,"H2",{class:!0});var gVe=s(Di);F2=n(gVe,"A",{id:!0,class:!0,href:!0});var cft=s(F2);gme=n(cft,"SPAN",{});var mft=s(gme);T(Zy.$$.fragment,mft),mft.forEach(t),cft.forEach(t),J6o=i(gVe),hme=n(gVe,"SPAN",{});var fft=s(hme);Y6o=r(fft,"AutoModelForCausalLM"),fft.forEach(t),gVe.forEach(t),iGe=i(m),ko=n(m,"DIV",{class:!0});var Ys=s(ko);T(e7.$$.fragment,Ys),K6o=i(Ys),Gi=n(Ys,"P",{});var Yee=s(Gi);Z6o=r(Yee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),RD=n(Yee,"A",{href:!0});var gft=s(RD);eLo=r(gft,"from_pretrained()"),gft.forEach(t),oLo=r(Yee," class method or the "),PD=n(Yee,"A",{href:!0});var hft=s(PD);rLo=r(hft,"from_config()"),hft.forEach(t),tLo=r(Yee,` class
method.`),Yee.forEach(t),aLo=i(Ys),o7=n(Ys,"P",{});var hVe=s(o7);nLo=r(hVe,"This class cannot be instantiated directly using "),ume=n(hVe,"CODE",{});var uft=s(ume);sLo=r(uft,"__init__()"),uft.forEach(t),lLo=r(hVe," (throws an error)."),hVe.forEach(t),iLo=i(Ys),lt=n(Ys,"DIV",{class:!0});var E6=s(lt);T(r7.$$.fragment,E6),dLo=i(E6),pme=n(E6,"P",{});var pft=s(pme);cLo=r(pft,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),pft.forEach(t),mLo=i(E6),Oi=n(E6,"P",{});var Kee=s(Oi);fLo=r(Kee,`Note:
Loading a model from its configuration file does `),_me=n(Kee,"STRONG",{});var _ft=s(_me);gLo=r(_ft,"not"),_ft.forEach(t),hLo=r(Kee,` load the model weights. It only affects the
model\u2019s configuration. Use `),BD=n(Kee,"A",{href:!0});var bft=s(BD);uLo=r(bft,"from_pretrained()"),bft.forEach(t),pLo=r(Kee," to load the model weights."),Kee.forEach(t),_Lo=i(E6),T(T2.$$.fragment,E6),E6.forEach(t),bLo=i(Ys),Ke=n(Ys,"DIV",{class:!0});var sa=s(Ke);T(t7.$$.fragment,sa),vLo=i(sa),bme=n(sa,"P",{});var vft=s(bme);FLo=r(vft,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),vft.forEach(t),TLo=i(sa),Pa=n(sa,"P",{});var C6=s(Pa);MLo=r(C6,"The model class to instantiate is selected based on the "),vme=n(C6,"CODE",{});var Fft=s(vme);ELo=r(Fft,"model_type"),Fft.forEach(t),CLo=r(C6,` property of the config object (either
passed as an argument or loaded from `),Fme=n(C6,"CODE",{});var Tft=s(Fme);wLo=r(Tft,"pretrained_model_name_or_path"),Tft.forEach(t),ALo=r(C6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tme=n(C6,"CODE",{});var Mft=s(Tme);LLo=r(Mft,"pretrained_model_name_or_path"),Mft.forEach(t),yLo=r(C6,":"),C6.forEach(t),xLo=i(sa),z=n(sa,"UL",{});var W=s(z);M2=n(W,"LI",{});var Z9e=s(M2);Mme=n(Z9e,"STRONG",{});var Eft=s(Mme);$Lo=r(Eft,"bart"),Eft.forEach(t),kLo=r(Z9e," \u2014 "),ID=n(Z9e,"A",{href:!0});var Cft=s(ID);SLo=r(Cft,"BartForCausalLM"),Cft.forEach(t),RLo=r(Z9e," (BART model)"),Z9e.forEach(t),PLo=i(W),E2=n(W,"LI",{});var exe=s(E2);Eme=n(exe,"STRONG",{});var wft=s(Eme);BLo=r(wft,"bert"),wft.forEach(t),ILo=r(exe," \u2014 "),ND=n(exe,"A",{href:!0});var Aft=s(ND);NLo=r(Aft,"BertLMHeadModel"),Aft.forEach(t),qLo=r(exe," (BERT model)"),exe.forEach(t),jLo=i(W),C2=n(W,"LI",{});var oxe=s(C2);Cme=n(oxe,"STRONG",{});var Lft=s(Cme);DLo=r(Lft,"bert-generation"),Lft.forEach(t),GLo=r(oxe," \u2014 "),qD=n(oxe,"A",{href:!0});var yft=s(qD);OLo=r(yft,"BertGenerationDecoder"),yft.forEach(t),VLo=r(oxe," (Bert Generation model)"),oxe.forEach(t),XLo=i(W),w2=n(W,"LI",{});var rxe=s(w2);wme=n(rxe,"STRONG",{});var xft=s(wme);zLo=r(xft,"big_bird"),xft.forEach(t),WLo=r(rxe," \u2014 "),jD=n(rxe,"A",{href:!0});var $ft=s(jD);QLo=r($ft,"BigBirdForCausalLM"),$ft.forEach(t),HLo=r(rxe," (BigBird model)"),rxe.forEach(t),ULo=i(W),A2=n(W,"LI",{});var txe=s(A2);Ame=n(txe,"STRONG",{});var kft=s(Ame);JLo=r(kft,"bigbird_pegasus"),kft.forEach(t),YLo=r(txe," \u2014 "),DD=n(txe,"A",{href:!0});var Sft=s(DD);KLo=r(Sft,"BigBirdPegasusForCausalLM"),Sft.forEach(t),ZLo=r(txe," (BigBird-Pegasus model)"),txe.forEach(t),eyo=i(W),L2=n(W,"LI",{});var axe=s(L2);Lme=n(axe,"STRONG",{});var Rft=s(Lme);oyo=r(Rft,"blenderbot"),Rft.forEach(t),ryo=r(axe," \u2014 "),GD=n(axe,"A",{href:!0});var Pft=s(GD);tyo=r(Pft,"BlenderbotForCausalLM"),Pft.forEach(t),ayo=r(axe," (Blenderbot model)"),axe.forEach(t),nyo=i(W),y2=n(W,"LI",{});var nxe=s(y2);yme=n(nxe,"STRONG",{});var Bft=s(yme);syo=r(Bft,"blenderbot-small"),Bft.forEach(t),lyo=r(nxe," \u2014 "),OD=n(nxe,"A",{href:!0});var Ift=s(OD);iyo=r(Ift,"BlenderbotSmallForCausalLM"),Ift.forEach(t),dyo=r(nxe," (BlenderbotSmall model)"),nxe.forEach(t),cyo=i(W),x2=n(W,"LI",{});var sxe=s(x2);xme=n(sxe,"STRONG",{});var Nft=s(xme);myo=r(Nft,"bloom"),Nft.forEach(t),fyo=r(sxe," \u2014 "),VD=n(sxe,"A",{href:!0});var qft=s(VD);gyo=r(qft,"BloomForCausalLM"),qft.forEach(t),hyo=r(sxe," (BLOOM model)"),sxe.forEach(t),uyo=i(W),$2=n(W,"LI",{});var lxe=s($2);$me=n(lxe,"STRONG",{});var jft=s($me);pyo=r(jft,"camembert"),jft.forEach(t),_yo=r(lxe," \u2014 "),XD=n(lxe,"A",{href:!0});var Dft=s(XD);byo=r(Dft,"CamembertForCausalLM"),Dft.forEach(t),vyo=r(lxe," (CamemBERT model)"),lxe.forEach(t),Fyo=i(W),k2=n(W,"LI",{});var ixe=s(k2);kme=n(ixe,"STRONG",{});var Gft=s(kme);Tyo=r(Gft,"ctrl"),Gft.forEach(t),Myo=r(ixe," \u2014 "),zD=n(ixe,"A",{href:!0});var Oft=s(zD);Eyo=r(Oft,"CTRLLMHeadModel"),Oft.forEach(t),Cyo=r(ixe," (CTRL model)"),ixe.forEach(t),wyo=i(W),S2=n(W,"LI",{});var dxe=s(S2);Sme=n(dxe,"STRONG",{});var Vft=s(Sme);Ayo=r(Vft,"data2vec-text"),Vft.forEach(t),Lyo=r(dxe," \u2014 "),WD=n(dxe,"A",{href:!0});var Xft=s(WD);yyo=r(Xft,"Data2VecTextForCausalLM"),Xft.forEach(t),xyo=r(dxe," (Data2VecText model)"),dxe.forEach(t),$yo=i(W),R2=n(W,"LI",{});var cxe=s(R2);Rme=n(cxe,"STRONG",{});var zft=s(Rme);kyo=r(zft,"electra"),zft.forEach(t),Syo=r(cxe," \u2014 "),QD=n(cxe,"A",{href:!0});var Wft=s(QD);Ryo=r(Wft,"ElectraForCausalLM"),Wft.forEach(t),Pyo=r(cxe," (ELECTRA model)"),cxe.forEach(t),Byo=i(W),P2=n(W,"LI",{});var mxe=s(P2);Pme=n(mxe,"STRONG",{});var Qft=s(Pme);Iyo=r(Qft,"gpt2"),Qft.forEach(t),Nyo=r(mxe," \u2014 "),HD=n(mxe,"A",{href:!0});var Hft=s(HD);qyo=r(Hft,"GPT2LMHeadModel"),Hft.forEach(t),jyo=r(mxe," (OpenAI GPT-2 model)"),mxe.forEach(t),Dyo=i(W),B2=n(W,"LI",{});var fxe=s(B2);Bme=n(fxe,"STRONG",{});var Uft=s(Bme);Gyo=r(Uft,"gpt_neo"),Uft.forEach(t),Oyo=r(fxe," \u2014 "),UD=n(fxe,"A",{href:!0});var Jft=s(UD);Vyo=r(Jft,"GPTNeoForCausalLM"),Jft.forEach(t),Xyo=r(fxe," (GPT Neo model)"),fxe.forEach(t),zyo=i(W),I2=n(W,"LI",{});var gxe=s(I2);Ime=n(gxe,"STRONG",{});var Yft=s(Ime);Wyo=r(Yft,"gpt_neox"),Yft.forEach(t),Qyo=r(gxe," \u2014 "),JD=n(gxe,"A",{href:!0});var Kft=s(JD);Hyo=r(Kft,"GPTNeoXForCausalLM"),Kft.forEach(t),Uyo=r(gxe," (GPT NeoX model)"),gxe.forEach(t),Jyo=i(W),N2=n(W,"LI",{});var hxe=s(N2);Nme=n(hxe,"STRONG",{});var Zft=s(Nme);Yyo=r(Zft,"gptj"),Zft.forEach(t),Kyo=r(hxe," \u2014 "),YD=n(hxe,"A",{href:!0});var egt=s(YD);Zyo=r(egt,"GPTJForCausalLM"),egt.forEach(t),e7o=r(hxe," (GPT-J model)"),hxe.forEach(t),o7o=i(W),q2=n(W,"LI",{});var uxe=s(q2);qme=n(uxe,"STRONG",{});var ogt=s(qme);r7o=r(ogt,"marian"),ogt.forEach(t),t7o=r(uxe," \u2014 "),KD=n(uxe,"A",{href:!0});var rgt=s(KD);a7o=r(rgt,"MarianForCausalLM"),rgt.forEach(t),n7o=r(uxe," (Marian model)"),uxe.forEach(t),s7o=i(W),j2=n(W,"LI",{});var pxe=s(j2);jme=n(pxe,"STRONG",{});var tgt=s(jme);l7o=r(tgt,"mbart"),tgt.forEach(t),i7o=r(pxe," \u2014 "),ZD=n(pxe,"A",{href:!0});var agt=s(ZD);d7o=r(agt,"MBartForCausalLM"),agt.forEach(t),c7o=r(pxe," (mBART model)"),pxe.forEach(t),m7o=i(W),D2=n(W,"LI",{});var _xe=s(D2);Dme=n(_xe,"STRONG",{});var ngt=s(Dme);f7o=r(ngt,"megatron-bert"),ngt.forEach(t),g7o=r(_xe," \u2014 "),eG=n(_xe,"A",{href:!0});var sgt=s(eG);h7o=r(sgt,"MegatronBertForCausalLM"),sgt.forEach(t),u7o=r(_xe," (Megatron-BERT model)"),_xe.forEach(t),p7o=i(W),G2=n(W,"LI",{});var bxe=s(G2);Gme=n(bxe,"STRONG",{});var lgt=s(Gme);_7o=r(lgt,"openai-gpt"),lgt.forEach(t),b7o=r(bxe," \u2014 "),oG=n(bxe,"A",{href:!0});var igt=s(oG);v7o=r(igt,"OpenAIGPTLMHeadModel"),igt.forEach(t),F7o=r(bxe," (OpenAI GPT model)"),bxe.forEach(t),T7o=i(W),O2=n(W,"LI",{});var vxe=s(O2);Ome=n(vxe,"STRONG",{});var dgt=s(Ome);M7o=r(dgt,"opt"),dgt.forEach(t),E7o=r(vxe," \u2014 "),rG=n(vxe,"A",{href:!0});var cgt=s(rG);C7o=r(cgt,"OPTForCausalLM"),cgt.forEach(t),w7o=r(vxe," (OPT model)"),vxe.forEach(t),A7o=i(W),V2=n(W,"LI",{});var Fxe=s(V2);Vme=n(Fxe,"STRONG",{});var mgt=s(Vme);L7o=r(mgt,"pegasus"),mgt.forEach(t),y7o=r(Fxe," \u2014 "),tG=n(Fxe,"A",{href:!0});var fgt=s(tG);x7o=r(fgt,"PegasusForCausalLM"),fgt.forEach(t),$7o=r(Fxe," (Pegasus model)"),Fxe.forEach(t),k7o=i(W),X2=n(W,"LI",{});var Txe=s(X2);Xme=n(Txe,"STRONG",{});var ggt=s(Xme);S7o=r(ggt,"plbart"),ggt.forEach(t),R7o=r(Txe," \u2014 "),aG=n(Txe,"A",{href:!0});var hgt=s(aG);P7o=r(hgt,"PLBartForCausalLM"),hgt.forEach(t),B7o=r(Txe," (PLBart model)"),Txe.forEach(t),I7o=i(W),z2=n(W,"LI",{});var Mxe=s(z2);zme=n(Mxe,"STRONG",{});var ugt=s(zme);N7o=r(ugt,"prophetnet"),ugt.forEach(t),q7o=r(Mxe," \u2014 "),nG=n(Mxe,"A",{href:!0});var pgt=s(nG);j7o=r(pgt,"ProphetNetForCausalLM"),pgt.forEach(t),D7o=r(Mxe," (ProphetNet model)"),Mxe.forEach(t),G7o=i(W),W2=n(W,"LI",{});var Exe=s(W2);Wme=n(Exe,"STRONG",{});var _gt=s(Wme);O7o=r(_gt,"qdqbert"),_gt.forEach(t),V7o=r(Exe," \u2014 "),sG=n(Exe,"A",{href:!0});var bgt=s(sG);X7o=r(bgt,"QDQBertLMHeadModel"),bgt.forEach(t),z7o=r(Exe," (QDQBert model)"),Exe.forEach(t),W7o=i(W),Q2=n(W,"LI",{});var Cxe=s(Q2);Qme=n(Cxe,"STRONG",{});var vgt=s(Qme);Q7o=r(vgt,"reformer"),vgt.forEach(t),H7o=r(Cxe," \u2014 "),lG=n(Cxe,"A",{href:!0});var Fgt=s(lG);U7o=r(Fgt,"ReformerModelWithLMHead"),Fgt.forEach(t),J7o=r(Cxe," (Reformer model)"),Cxe.forEach(t),Y7o=i(W),H2=n(W,"LI",{});var wxe=s(H2);Hme=n(wxe,"STRONG",{});var Tgt=s(Hme);K7o=r(Tgt,"rembert"),Tgt.forEach(t),Z7o=r(wxe," \u2014 "),iG=n(wxe,"A",{href:!0});var Mgt=s(iG);e8o=r(Mgt,"RemBertForCausalLM"),Mgt.forEach(t),o8o=r(wxe," (RemBERT model)"),wxe.forEach(t),r8o=i(W),U2=n(W,"LI",{});var Axe=s(U2);Ume=n(Axe,"STRONG",{});var Egt=s(Ume);t8o=r(Egt,"roberta"),Egt.forEach(t),a8o=r(Axe," \u2014 "),dG=n(Axe,"A",{href:!0});var Cgt=s(dG);n8o=r(Cgt,"RobertaForCausalLM"),Cgt.forEach(t),s8o=r(Axe," (RoBERTa model)"),Axe.forEach(t),l8o=i(W),J2=n(W,"LI",{});var Lxe=s(J2);Jme=n(Lxe,"STRONG",{});var wgt=s(Jme);i8o=r(wgt,"roformer"),wgt.forEach(t),d8o=r(Lxe," \u2014 "),cG=n(Lxe,"A",{href:!0});var Agt=s(cG);c8o=r(Agt,"RoFormerForCausalLM"),Agt.forEach(t),m8o=r(Lxe," (RoFormer model)"),Lxe.forEach(t),f8o=i(W),Y2=n(W,"LI",{});var yxe=s(Y2);Yme=n(yxe,"STRONG",{});var Lgt=s(Yme);g8o=r(Lgt,"speech_to_text_2"),Lgt.forEach(t),h8o=r(yxe," \u2014 "),mG=n(yxe,"A",{href:!0});var ygt=s(mG);u8o=r(ygt,"Speech2Text2ForCausalLM"),ygt.forEach(t),p8o=r(yxe," (Speech2Text2 model)"),yxe.forEach(t),_8o=i(W),K2=n(W,"LI",{});var xxe=s(K2);Kme=n(xxe,"STRONG",{});var xgt=s(Kme);b8o=r(xgt,"transfo-xl"),xgt.forEach(t),v8o=r(xxe," \u2014 "),fG=n(xxe,"A",{href:!0});var $gt=s(fG);F8o=r($gt,"TransfoXLLMHeadModel"),$gt.forEach(t),T8o=r(xxe," (Transformer-XL model)"),xxe.forEach(t),M8o=i(W),Z2=n(W,"LI",{});var $xe=s(Z2);Zme=n($xe,"STRONG",{});var kgt=s(Zme);E8o=r(kgt,"trocr"),kgt.forEach(t),C8o=r($xe," \u2014 "),gG=n($xe,"A",{href:!0});var Sgt=s(gG);w8o=r(Sgt,"TrOCRForCausalLM"),Sgt.forEach(t),A8o=r($xe," (TrOCR model)"),$xe.forEach(t),L8o=i(W),eb=n(W,"LI",{});var kxe=s(eb);efe=n(kxe,"STRONG",{});var Rgt=s(efe);y8o=r(Rgt,"xglm"),Rgt.forEach(t),x8o=r(kxe," \u2014 "),hG=n(kxe,"A",{href:!0});var Pgt=s(hG);$8o=r(Pgt,"XGLMForCausalLM"),Pgt.forEach(t),k8o=r(kxe," (XGLM model)"),kxe.forEach(t),S8o=i(W),ob=n(W,"LI",{});var Sxe=s(ob);ofe=n(Sxe,"STRONG",{});var Bgt=s(ofe);R8o=r(Bgt,"xlm"),Bgt.forEach(t),P8o=r(Sxe," \u2014 "),uG=n(Sxe,"A",{href:!0});var Igt=s(uG);B8o=r(Igt,"XLMWithLMHeadModel"),Igt.forEach(t),I8o=r(Sxe," (XLM model)"),Sxe.forEach(t),N8o=i(W),rb=n(W,"LI",{});var Rxe=s(rb);rfe=n(Rxe,"STRONG",{});var Ngt=s(rfe);q8o=r(Ngt,"xlm-prophetnet"),Ngt.forEach(t),j8o=r(Rxe," \u2014 "),pG=n(Rxe,"A",{href:!0});var qgt=s(pG);D8o=r(qgt,"XLMProphetNetForCausalLM"),qgt.forEach(t),G8o=r(Rxe," (XLM-ProphetNet model)"),Rxe.forEach(t),O8o=i(W),tb=n(W,"LI",{});var Pxe=s(tb);tfe=n(Pxe,"STRONG",{});var jgt=s(tfe);V8o=r(jgt,"xlm-roberta"),jgt.forEach(t),X8o=r(Pxe," \u2014 "),_G=n(Pxe,"A",{href:!0});var Dgt=s(_G);z8o=r(Dgt,"XLMRobertaForCausalLM"),Dgt.forEach(t),W8o=r(Pxe," (XLM-RoBERTa model)"),Pxe.forEach(t),Q8o=i(W),ab=n(W,"LI",{});var Bxe=s(ab);afe=n(Bxe,"STRONG",{});var Ggt=s(afe);H8o=r(Ggt,"xlm-roberta-xl"),Ggt.forEach(t),U8o=r(Bxe," \u2014 "),bG=n(Bxe,"A",{href:!0});var Ogt=s(bG);J8o=r(Ogt,"XLMRobertaXLForCausalLM"),Ogt.forEach(t),Y8o=r(Bxe," (XLM-RoBERTa-XL model)"),Bxe.forEach(t),K8o=i(W),nb=n(W,"LI",{});var Ixe=s(nb);nfe=n(Ixe,"STRONG",{});var Vgt=s(nfe);Z8o=r(Vgt,"xlnet"),Vgt.forEach(t),e9o=r(Ixe," \u2014 "),vG=n(Ixe,"A",{href:!0});var Xgt=s(vG);o9o=r(Xgt,"XLNetLMHeadModel"),Xgt.forEach(t),r9o=r(Ixe," (XLNet model)"),Ixe.forEach(t),W.forEach(t),t9o=i(sa),sb=n(sa,"P",{});var Nxe=s(sb);a9o=r(Nxe,"The model is set in evaluation mode by default using "),sfe=n(Nxe,"CODE",{});var zgt=s(sfe);n9o=r(zgt,"model.eval()"),zgt.forEach(t),s9o=r(Nxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lfe=n(Nxe,"CODE",{});var Wgt=s(lfe);l9o=r(Wgt,"model.train()"),Wgt.forEach(t),Nxe.forEach(t),i9o=i(sa),T(lb.$$.fragment,sa),sa.forEach(t),Ys.forEach(t),dGe=i(m),Vi=n(m,"H2",{class:!0});var uVe=s(Vi);ib=n(uVe,"A",{id:!0,class:!0,href:!0});var Qgt=s(ib);ife=n(Qgt,"SPAN",{});var Hgt=s(ife);T(a7.$$.fragment,Hgt),Hgt.forEach(t),Qgt.forEach(t),d9o=i(uVe),dfe=n(uVe,"SPAN",{});var Ugt=s(dfe);c9o=r(Ugt,"AutoModelForMaskedLM"),Ugt.forEach(t),uVe.forEach(t),cGe=i(m),So=n(m,"DIV",{class:!0});var Ks=s(So);T(n7.$$.fragment,Ks),m9o=i(Ks),Xi=n(Ks,"P",{});var Zee=s(Xi);f9o=r(Zee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),FG=n(Zee,"A",{href:!0});var Jgt=s(FG);g9o=r(Jgt,"from_pretrained()"),Jgt.forEach(t),h9o=r(Zee," class method or the "),TG=n(Zee,"A",{href:!0});var Ygt=s(TG);u9o=r(Ygt,"from_config()"),Ygt.forEach(t),p9o=r(Zee,` class
method.`),Zee.forEach(t),_9o=i(Ks),s7=n(Ks,"P",{});var pVe=s(s7);b9o=r(pVe,"This class cannot be instantiated directly using "),cfe=n(pVe,"CODE",{});var Kgt=s(cfe);v9o=r(Kgt,"__init__()"),Kgt.forEach(t),F9o=r(pVe," (throws an error)."),pVe.forEach(t),T9o=i(Ks),it=n(Ks,"DIV",{class:!0});var w6=s(it);T(l7.$$.fragment,w6),M9o=i(w6),mfe=n(w6,"P",{});var Zgt=s(mfe);E9o=r(Zgt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Zgt.forEach(t),C9o=i(w6),zi=n(w6,"P",{});var eoe=s(zi);w9o=r(eoe,`Note:
Loading a model from its configuration file does `),ffe=n(eoe,"STRONG",{});var eht=s(ffe);A9o=r(eht,"not"),eht.forEach(t),L9o=r(eoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),MG=n(eoe,"A",{href:!0});var oht=s(MG);y9o=r(oht,"from_pretrained()"),oht.forEach(t),x9o=r(eoe," to load the model weights."),eoe.forEach(t),$9o=i(w6),T(db.$$.fragment,w6),w6.forEach(t),k9o=i(Ks),Ze=n(Ks,"DIV",{class:!0});var la=s(Ze);T(i7.$$.fragment,la),S9o=i(la),gfe=n(la,"P",{});var rht=s(gfe);R9o=r(rht,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),rht.forEach(t),P9o=i(la),Ba=n(la,"P",{});var A6=s(Ba);B9o=r(A6,"The model class to instantiate is selected based on the "),hfe=n(A6,"CODE",{});var tht=s(hfe);I9o=r(tht,"model_type"),tht.forEach(t),N9o=r(A6,` property of the config object (either
passed as an argument or loaded from `),ufe=n(A6,"CODE",{});var aht=s(ufe);q9o=r(aht,"pretrained_model_name_or_path"),aht.forEach(t),j9o=r(A6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pfe=n(A6,"CODE",{});var nht=s(pfe);D9o=r(nht,"pretrained_model_name_or_path"),nht.forEach(t),G9o=r(A6,":"),A6.forEach(t),O9o=i(la),Q=n(la,"UL",{});var H=s(Q);cb=n(H,"LI",{});var qxe=s(cb);_fe=n(qxe,"STRONG",{});var sht=s(_fe);V9o=r(sht,"albert"),sht.forEach(t),X9o=r(qxe," \u2014 "),EG=n(qxe,"A",{href:!0});var lht=s(EG);z9o=r(lht,"AlbertForMaskedLM"),lht.forEach(t),W9o=r(qxe," (ALBERT model)"),qxe.forEach(t),Q9o=i(H),mb=n(H,"LI",{});var jxe=s(mb);bfe=n(jxe,"STRONG",{});var iht=s(bfe);H9o=r(iht,"bart"),iht.forEach(t),U9o=r(jxe," \u2014 "),CG=n(jxe,"A",{href:!0});var dht=s(CG);J9o=r(dht,"BartForConditionalGeneration"),dht.forEach(t),Y9o=r(jxe," (BART model)"),jxe.forEach(t),K9o=i(H),fb=n(H,"LI",{});var Dxe=s(fb);vfe=n(Dxe,"STRONG",{});var cht=s(vfe);Z9o=r(cht,"bert"),cht.forEach(t),exo=r(Dxe," \u2014 "),wG=n(Dxe,"A",{href:!0});var mht=s(wG);oxo=r(mht,"BertForMaskedLM"),mht.forEach(t),rxo=r(Dxe," (BERT model)"),Dxe.forEach(t),txo=i(H),gb=n(H,"LI",{});var Gxe=s(gb);Ffe=n(Gxe,"STRONG",{});var fht=s(Ffe);axo=r(fht,"big_bird"),fht.forEach(t),nxo=r(Gxe," \u2014 "),AG=n(Gxe,"A",{href:!0});var ght=s(AG);sxo=r(ght,"BigBirdForMaskedLM"),ght.forEach(t),lxo=r(Gxe," (BigBird model)"),Gxe.forEach(t),ixo=i(H),hb=n(H,"LI",{});var Oxe=s(hb);Tfe=n(Oxe,"STRONG",{});var hht=s(Tfe);dxo=r(hht,"camembert"),hht.forEach(t),cxo=r(Oxe," \u2014 "),LG=n(Oxe,"A",{href:!0});var uht=s(LG);mxo=r(uht,"CamembertForMaskedLM"),uht.forEach(t),fxo=r(Oxe," (CamemBERT model)"),Oxe.forEach(t),gxo=i(H),ub=n(H,"LI",{});var Vxe=s(ub);Mfe=n(Vxe,"STRONG",{});var pht=s(Mfe);hxo=r(pht,"convbert"),pht.forEach(t),uxo=r(Vxe," \u2014 "),yG=n(Vxe,"A",{href:!0});var _ht=s(yG);pxo=r(_ht,"ConvBertForMaskedLM"),_ht.forEach(t),_xo=r(Vxe," (ConvBERT model)"),Vxe.forEach(t),bxo=i(H),pb=n(H,"LI",{});var Xxe=s(pb);Efe=n(Xxe,"STRONG",{});var bht=s(Efe);vxo=r(bht,"data2vec-text"),bht.forEach(t),Fxo=r(Xxe," \u2014 "),xG=n(Xxe,"A",{href:!0});var vht=s(xG);Txo=r(vht,"Data2VecTextForMaskedLM"),vht.forEach(t),Mxo=r(Xxe," (Data2VecText model)"),Xxe.forEach(t),Exo=i(H),_b=n(H,"LI",{});var zxe=s(_b);Cfe=n(zxe,"STRONG",{});var Fht=s(Cfe);Cxo=r(Fht,"deberta"),Fht.forEach(t),wxo=r(zxe," \u2014 "),$G=n(zxe,"A",{href:!0});var Tht=s($G);Axo=r(Tht,"DebertaForMaskedLM"),Tht.forEach(t),Lxo=r(zxe," (DeBERTa model)"),zxe.forEach(t),yxo=i(H),bb=n(H,"LI",{});var Wxe=s(bb);wfe=n(Wxe,"STRONG",{});var Mht=s(wfe);xxo=r(Mht,"deberta-v2"),Mht.forEach(t),$xo=r(Wxe," \u2014 "),kG=n(Wxe,"A",{href:!0});var Eht=s(kG);kxo=r(Eht,"DebertaV2ForMaskedLM"),Eht.forEach(t),Sxo=r(Wxe," (DeBERTa-v2 model)"),Wxe.forEach(t),Rxo=i(H),vb=n(H,"LI",{});var Qxe=s(vb);Afe=n(Qxe,"STRONG",{});var Cht=s(Afe);Pxo=r(Cht,"distilbert"),Cht.forEach(t),Bxo=r(Qxe," \u2014 "),SG=n(Qxe,"A",{href:!0});var wht=s(SG);Ixo=r(wht,"DistilBertForMaskedLM"),wht.forEach(t),Nxo=r(Qxe," (DistilBERT model)"),Qxe.forEach(t),qxo=i(H),Fb=n(H,"LI",{});var Hxe=s(Fb);Lfe=n(Hxe,"STRONG",{});var Aht=s(Lfe);jxo=r(Aht,"electra"),Aht.forEach(t),Dxo=r(Hxe," \u2014 "),RG=n(Hxe,"A",{href:!0});var Lht=s(RG);Gxo=r(Lht,"ElectraForMaskedLM"),Lht.forEach(t),Oxo=r(Hxe," (ELECTRA model)"),Hxe.forEach(t),Vxo=i(H),Tb=n(H,"LI",{});var Uxe=s(Tb);yfe=n(Uxe,"STRONG",{});var yht=s(yfe);Xxo=r(yht,"flaubert"),yht.forEach(t),zxo=r(Uxe," \u2014 "),PG=n(Uxe,"A",{href:!0});var xht=s(PG);Wxo=r(xht,"FlaubertWithLMHeadModel"),xht.forEach(t),Qxo=r(Uxe," (FlauBERT model)"),Uxe.forEach(t),Hxo=i(H),Mb=n(H,"LI",{});var Jxe=s(Mb);xfe=n(Jxe,"STRONG",{});var $ht=s(xfe);Uxo=r($ht,"fnet"),$ht.forEach(t),Jxo=r(Jxe," \u2014 "),BG=n(Jxe,"A",{href:!0});var kht=s(BG);Yxo=r(kht,"FNetForMaskedLM"),kht.forEach(t),Kxo=r(Jxe," (FNet model)"),Jxe.forEach(t),Zxo=i(H),Eb=n(H,"LI",{});var Yxe=s(Eb);$fe=n(Yxe,"STRONG",{});var Sht=s($fe);e$o=r(Sht,"funnel"),Sht.forEach(t),o$o=r(Yxe," \u2014 "),IG=n(Yxe,"A",{href:!0});var Rht=s(IG);r$o=r(Rht,"FunnelForMaskedLM"),Rht.forEach(t),t$o=r(Yxe," (Funnel Transformer model)"),Yxe.forEach(t),a$o=i(H),Cb=n(H,"LI",{});var Kxe=s(Cb);kfe=n(Kxe,"STRONG",{});var Pht=s(kfe);n$o=r(Pht,"ibert"),Pht.forEach(t),s$o=r(Kxe," \u2014 "),NG=n(Kxe,"A",{href:!0});var Bht=s(NG);l$o=r(Bht,"IBertForMaskedLM"),Bht.forEach(t),i$o=r(Kxe," (I-BERT model)"),Kxe.forEach(t),d$o=i(H),wb=n(H,"LI",{});var Zxe=s(wb);Sfe=n(Zxe,"STRONG",{});var Iht=s(Sfe);c$o=r(Iht,"layoutlm"),Iht.forEach(t),m$o=r(Zxe," \u2014 "),qG=n(Zxe,"A",{href:!0});var Nht=s(qG);f$o=r(Nht,"LayoutLMForMaskedLM"),Nht.forEach(t),g$o=r(Zxe," (LayoutLM model)"),Zxe.forEach(t),h$o=i(H),Ab=n(H,"LI",{});var e$e=s(Ab);Rfe=n(e$e,"STRONG",{});var qht=s(Rfe);u$o=r(qht,"longformer"),qht.forEach(t),p$o=r(e$e," \u2014 "),jG=n(e$e,"A",{href:!0});var jht=s(jG);_$o=r(jht,"LongformerForMaskedLM"),jht.forEach(t),b$o=r(e$e," (Longformer model)"),e$e.forEach(t),v$o=i(H),Lb=n(H,"LI",{});var o$e=s(Lb);Pfe=n(o$e,"STRONG",{});var Dht=s(Pfe);F$o=r(Dht,"luke"),Dht.forEach(t),T$o=r(o$e," \u2014 "),DG=n(o$e,"A",{href:!0});var Ght=s(DG);M$o=r(Ght,"LukeForMaskedLM"),Ght.forEach(t),E$o=r(o$e," (LUKE model)"),o$e.forEach(t),C$o=i(H),yb=n(H,"LI",{});var r$e=s(yb);Bfe=n(r$e,"STRONG",{});var Oht=s(Bfe);w$o=r(Oht,"mbart"),Oht.forEach(t),A$o=r(r$e," \u2014 "),GG=n(r$e,"A",{href:!0});var Vht=s(GG);L$o=r(Vht,"MBartForConditionalGeneration"),Vht.forEach(t),y$o=r(r$e," (mBART model)"),r$e.forEach(t),x$o=i(H),xb=n(H,"LI",{});var t$e=s(xb);Ife=n(t$e,"STRONG",{});var Xht=s(Ife);$$o=r(Xht,"megatron-bert"),Xht.forEach(t),k$o=r(t$e," \u2014 "),OG=n(t$e,"A",{href:!0});var zht=s(OG);S$o=r(zht,"MegatronBertForMaskedLM"),zht.forEach(t),R$o=r(t$e," (Megatron-BERT model)"),t$e.forEach(t),P$o=i(H),$b=n(H,"LI",{});var a$e=s($b);Nfe=n(a$e,"STRONG",{});var Wht=s(Nfe);B$o=r(Wht,"mobilebert"),Wht.forEach(t),I$o=r(a$e," \u2014 "),VG=n(a$e,"A",{href:!0});var Qht=s(VG);N$o=r(Qht,"MobileBertForMaskedLM"),Qht.forEach(t),q$o=r(a$e," (MobileBERT model)"),a$e.forEach(t),j$o=i(H),kb=n(H,"LI",{});var n$e=s(kb);qfe=n(n$e,"STRONG",{});var Hht=s(qfe);D$o=r(Hht,"mpnet"),Hht.forEach(t),G$o=r(n$e," \u2014 "),XG=n(n$e,"A",{href:!0});var Uht=s(XG);O$o=r(Uht,"MPNetForMaskedLM"),Uht.forEach(t),V$o=r(n$e," (MPNet model)"),n$e.forEach(t),X$o=i(H),Sb=n(H,"LI",{});var s$e=s(Sb);jfe=n(s$e,"STRONG",{});var Jht=s(jfe);z$o=r(Jht,"nystromformer"),Jht.forEach(t),W$o=r(s$e," \u2014 "),zG=n(s$e,"A",{href:!0});var Yht=s(zG);Q$o=r(Yht,"NystromformerForMaskedLM"),Yht.forEach(t),H$o=r(s$e," (Nystr\xF6mformer model)"),s$e.forEach(t),U$o=i(H),Rb=n(H,"LI",{});var l$e=s(Rb);Dfe=n(l$e,"STRONG",{});var Kht=s(Dfe);J$o=r(Kht,"perceiver"),Kht.forEach(t),Y$o=r(l$e," \u2014 "),WG=n(l$e,"A",{href:!0});var Zht=s(WG);K$o=r(Zht,"PerceiverForMaskedLM"),Zht.forEach(t),Z$o=r(l$e," (Perceiver model)"),l$e.forEach(t),eko=i(H),Pb=n(H,"LI",{});var i$e=s(Pb);Gfe=n(i$e,"STRONG",{});var eut=s(Gfe);oko=r(eut,"qdqbert"),eut.forEach(t),rko=r(i$e," \u2014 "),QG=n(i$e,"A",{href:!0});var out=s(QG);tko=r(out,"QDQBertForMaskedLM"),out.forEach(t),ako=r(i$e," (QDQBert model)"),i$e.forEach(t),nko=i(H),Bb=n(H,"LI",{});var d$e=s(Bb);Ofe=n(d$e,"STRONG",{});var rut=s(Ofe);sko=r(rut,"reformer"),rut.forEach(t),lko=r(d$e," \u2014 "),HG=n(d$e,"A",{href:!0});var tut=s(HG);iko=r(tut,"ReformerForMaskedLM"),tut.forEach(t),dko=r(d$e," (Reformer model)"),d$e.forEach(t),cko=i(H),Ib=n(H,"LI",{});var c$e=s(Ib);Vfe=n(c$e,"STRONG",{});var aut=s(Vfe);mko=r(aut,"rembert"),aut.forEach(t),fko=r(c$e," \u2014 "),UG=n(c$e,"A",{href:!0});var nut=s(UG);gko=r(nut,"RemBertForMaskedLM"),nut.forEach(t),hko=r(c$e," (RemBERT model)"),c$e.forEach(t),uko=i(H),Nb=n(H,"LI",{});var m$e=s(Nb);Xfe=n(m$e,"STRONG",{});var sut=s(Xfe);pko=r(sut,"roberta"),sut.forEach(t),_ko=r(m$e," \u2014 "),JG=n(m$e,"A",{href:!0});var lut=s(JG);bko=r(lut,"RobertaForMaskedLM"),lut.forEach(t),vko=r(m$e," (RoBERTa model)"),m$e.forEach(t),Fko=i(H),qb=n(H,"LI",{});var f$e=s(qb);zfe=n(f$e,"STRONG",{});var iut=s(zfe);Tko=r(iut,"roformer"),iut.forEach(t),Mko=r(f$e," \u2014 "),YG=n(f$e,"A",{href:!0});var dut=s(YG);Eko=r(dut,"RoFormerForMaskedLM"),dut.forEach(t),Cko=r(f$e," (RoFormer model)"),f$e.forEach(t),wko=i(H),jb=n(H,"LI",{});var g$e=s(jb);Wfe=n(g$e,"STRONG",{});var cut=s(Wfe);Ako=r(cut,"squeezebert"),cut.forEach(t),Lko=r(g$e," \u2014 "),KG=n(g$e,"A",{href:!0});var mut=s(KG);yko=r(mut,"SqueezeBertForMaskedLM"),mut.forEach(t),xko=r(g$e," (SqueezeBERT model)"),g$e.forEach(t),$ko=i(H),Db=n(H,"LI",{});var h$e=s(Db);Qfe=n(h$e,"STRONG",{});var fut=s(Qfe);kko=r(fut,"tapas"),fut.forEach(t),Sko=r(h$e," \u2014 "),ZG=n(h$e,"A",{href:!0});var gut=s(ZG);Rko=r(gut,"TapasForMaskedLM"),gut.forEach(t),Pko=r(h$e," (TAPAS model)"),h$e.forEach(t),Bko=i(H),Gb=n(H,"LI",{});var u$e=s(Gb);Hfe=n(u$e,"STRONG",{});var hut=s(Hfe);Iko=r(hut,"wav2vec2"),hut.forEach(t),Nko=r(u$e," \u2014 "),Ufe=n(u$e,"CODE",{});var uut=s(Ufe);qko=r(uut,"Wav2Vec2ForMaskedLM"),uut.forEach(t),jko=r(u$e," (Wav2Vec2 model)"),u$e.forEach(t),Dko=i(H),Ob=n(H,"LI",{});var p$e=s(Ob);Jfe=n(p$e,"STRONG",{});var put=s(Jfe);Gko=r(put,"xlm"),put.forEach(t),Oko=r(p$e," \u2014 "),eO=n(p$e,"A",{href:!0});var _ut=s(eO);Vko=r(_ut,"XLMWithLMHeadModel"),_ut.forEach(t),Xko=r(p$e," (XLM model)"),p$e.forEach(t),zko=i(H),Vb=n(H,"LI",{});var _$e=s(Vb);Yfe=n(_$e,"STRONG",{});var but=s(Yfe);Wko=r(but,"xlm-roberta"),but.forEach(t),Qko=r(_$e," \u2014 "),oO=n(_$e,"A",{href:!0});var vut=s(oO);Hko=r(vut,"XLMRobertaForMaskedLM"),vut.forEach(t),Uko=r(_$e," (XLM-RoBERTa model)"),_$e.forEach(t),Jko=i(H),Xb=n(H,"LI",{});var b$e=s(Xb);Kfe=n(b$e,"STRONG",{});var Fut=s(Kfe);Yko=r(Fut,"xlm-roberta-xl"),Fut.forEach(t),Kko=r(b$e," \u2014 "),rO=n(b$e,"A",{href:!0});var Tut=s(rO);Zko=r(Tut,"XLMRobertaXLForMaskedLM"),Tut.forEach(t),eSo=r(b$e," (XLM-RoBERTa-XL model)"),b$e.forEach(t),oSo=i(H),zb=n(H,"LI",{});var v$e=s(zb);Zfe=n(v$e,"STRONG",{});var Mut=s(Zfe);rSo=r(Mut,"yoso"),Mut.forEach(t),tSo=r(v$e," \u2014 "),tO=n(v$e,"A",{href:!0});var Eut=s(tO);aSo=r(Eut,"YosoForMaskedLM"),Eut.forEach(t),nSo=r(v$e," (YOSO model)"),v$e.forEach(t),H.forEach(t),sSo=i(la),Wb=n(la,"P",{});var F$e=s(Wb);lSo=r(F$e,"The model is set in evaluation mode by default using "),ege=n(F$e,"CODE",{});var Cut=s(ege);iSo=r(Cut,"model.eval()"),Cut.forEach(t),dSo=r(F$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),oge=n(F$e,"CODE",{});var wut=s(oge);cSo=r(wut,"model.train()"),wut.forEach(t),F$e.forEach(t),mSo=i(la),T(Qb.$$.fragment,la),la.forEach(t),Ks.forEach(t),mGe=i(m),Wi=n(m,"H2",{class:!0});var _Ve=s(Wi);Hb=n(_Ve,"A",{id:!0,class:!0,href:!0});var Aut=s(Hb);rge=n(Aut,"SPAN",{});var Lut=s(rge);T(d7.$$.fragment,Lut),Lut.forEach(t),Aut.forEach(t),fSo=i(_Ve),tge=n(_Ve,"SPAN",{});var yut=s(tge);gSo=r(yut,"AutoModelForSeq2SeqLM"),yut.forEach(t),_Ve.forEach(t),fGe=i(m),Ro=n(m,"DIV",{class:!0});var Zs=s(Ro);T(c7.$$.fragment,Zs),hSo=i(Zs),Qi=n(Zs,"P",{});var ooe=s(Qi);uSo=r(ooe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),aO=n(ooe,"A",{href:!0});var xut=s(aO);pSo=r(xut,"from_pretrained()"),xut.forEach(t),_So=r(ooe," class method or the "),nO=n(ooe,"A",{href:!0});var $ut=s(nO);bSo=r($ut,"from_config()"),$ut.forEach(t),vSo=r(ooe,` class
method.`),ooe.forEach(t),FSo=i(Zs),m7=n(Zs,"P",{});var bVe=s(m7);TSo=r(bVe,"This class cannot be instantiated directly using "),age=n(bVe,"CODE",{});var kut=s(age);MSo=r(kut,"__init__()"),kut.forEach(t),ESo=r(bVe," (throws an error)."),bVe.forEach(t),CSo=i(Zs),dt=n(Zs,"DIV",{class:!0});var L6=s(dt);T(f7.$$.fragment,L6),wSo=i(L6),nge=n(L6,"P",{});var Sut=s(nge);ASo=r(Sut,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Sut.forEach(t),LSo=i(L6),Hi=n(L6,"P",{});var roe=s(Hi);ySo=r(roe,`Note:
Loading a model from its configuration file does `),sge=n(roe,"STRONG",{});var Rut=s(sge);xSo=r(Rut,"not"),Rut.forEach(t),$So=r(roe,` load the model weights. It only affects the
model\u2019s configuration. Use `),sO=n(roe,"A",{href:!0});var Put=s(sO);kSo=r(Put,"from_pretrained()"),Put.forEach(t),SSo=r(roe," to load the model weights."),roe.forEach(t),RSo=i(L6),T(Ub.$$.fragment,L6),L6.forEach(t),PSo=i(Zs),eo=n(Zs,"DIV",{class:!0});var ia=s(eo);T(g7.$$.fragment,ia),BSo=i(ia),lge=n(ia,"P",{});var But=s(lge);ISo=r(But,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),But.forEach(t),NSo=i(ia),Ia=n(ia,"P",{});var y6=s(Ia);qSo=r(y6,"The model class to instantiate is selected based on the "),ige=n(y6,"CODE",{});var Iut=s(ige);jSo=r(Iut,"model_type"),Iut.forEach(t),DSo=r(y6,` property of the config object (either
passed as an argument or loaded from `),dge=n(y6,"CODE",{});var Nut=s(dge);GSo=r(Nut,"pretrained_model_name_or_path"),Nut.forEach(t),OSo=r(y6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cge=n(y6,"CODE",{});var qut=s(cge);VSo=r(qut,"pretrained_model_name_or_path"),qut.forEach(t),XSo=r(y6,":"),y6.forEach(t),zSo=i(ia),ue=n(ia,"UL",{});var be=s(ue);Jb=n(be,"LI",{});var T$e=s(Jb);mge=n(T$e,"STRONG",{});var jut=s(mge);WSo=r(jut,"bart"),jut.forEach(t),QSo=r(T$e," \u2014 "),lO=n(T$e,"A",{href:!0});var Dut=s(lO);HSo=r(Dut,"BartForConditionalGeneration"),Dut.forEach(t),USo=r(T$e," (BART model)"),T$e.forEach(t),JSo=i(be),Yb=n(be,"LI",{});var M$e=s(Yb);fge=n(M$e,"STRONG",{});var Gut=s(fge);YSo=r(Gut,"bigbird_pegasus"),Gut.forEach(t),KSo=r(M$e," \u2014 "),iO=n(M$e,"A",{href:!0});var Out=s(iO);ZSo=r(Out,"BigBirdPegasusForConditionalGeneration"),Out.forEach(t),eRo=r(M$e," (BigBird-Pegasus model)"),M$e.forEach(t),oRo=i(be),Kb=n(be,"LI",{});var E$e=s(Kb);gge=n(E$e,"STRONG",{});var Vut=s(gge);rRo=r(Vut,"blenderbot"),Vut.forEach(t),tRo=r(E$e," \u2014 "),dO=n(E$e,"A",{href:!0});var Xut=s(dO);aRo=r(Xut,"BlenderbotForConditionalGeneration"),Xut.forEach(t),nRo=r(E$e," (Blenderbot model)"),E$e.forEach(t),sRo=i(be),Zb=n(be,"LI",{});var C$e=s(Zb);hge=n(C$e,"STRONG",{});var zut=s(hge);lRo=r(zut,"blenderbot-small"),zut.forEach(t),iRo=r(C$e," \u2014 "),cO=n(C$e,"A",{href:!0});var Wut=s(cO);dRo=r(Wut,"BlenderbotSmallForConditionalGeneration"),Wut.forEach(t),cRo=r(C$e," (BlenderbotSmall model)"),C$e.forEach(t),mRo=i(be),ev=n(be,"LI",{});var w$e=s(ev);uge=n(w$e,"STRONG",{});var Qut=s(uge);fRo=r(Qut,"encoder-decoder"),Qut.forEach(t),gRo=r(w$e," \u2014 "),mO=n(w$e,"A",{href:!0});var Hut=s(mO);hRo=r(Hut,"EncoderDecoderModel"),Hut.forEach(t),uRo=r(w$e," (Encoder decoder model)"),w$e.forEach(t),pRo=i(be),ov=n(be,"LI",{});var A$e=s(ov);pge=n(A$e,"STRONG",{});var Uut=s(pge);_Ro=r(Uut,"fsmt"),Uut.forEach(t),bRo=r(A$e," \u2014 "),fO=n(A$e,"A",{href:!0});var Jut=s(fO);vRo=r(Jut,"FSMTForConditionalGeneration"),Jut.forEach(t),FRo=r(A$e," (FairSeq Machine-Translation model)"),A$e.forEach(t),TRo=i(be),rv=n(be,"LI",{});var L$e=s(rv);_ge=n(L$e,"STRONG",{});var Yut=s(_ge);MRo=r(Yut,"led"),Yut.forEach(t),ERo=r(L$e," \u2014 "),gO=n(L$e,"A",{href:!0});var Kut=s(gO);CRo=r(Kut,"LEDForConditionalGeneration"),Kut.forEach(t),wRo=r(L$e," (LED model)"),L$e.forEach(t),ARo=i(be),tv=n(be,"LI",{});var y$e=s(tv);bge=n(y$e,"STRONG",{});var Zut=s(bge);LRo=r(Zut,"longt5"),Zut.forEach(t),yRo=r(y$e," \u2014 "),hO=n(y$e,"A",{href:!0});var ept=s(hO);xRo=r(ept,"LongT5ForConditionalGeneration"),ept.forEach(t),$Ro=r(y$e," (LongT5 model)"),y$e.forEach(t),kRo=i(be),av=n(be,"LI",{});var x$e=s(av);vge=n(x$e,"STRONG",{});var opt=s(vge);SRo=r(opt,"m2m_100"),opt.forEach(t),RRo=r(x$e," \u2014 "),uO=n(x$e,"A",{href:!0});var rpt=s(uO);PRo=r(rpt,"M2M100ForConditionalGeneration"),rpt.forEach(t),BRo=r(x$e," (M2M100 model)"),x$e.forEach(t),IRo=i(be),nv=n(be,"LI",{});var $$e=s(nv);Fge=n($$e,"STRONG",{});var tpt=s(Fge);NRo=r(tpt,"marian"),tpt.forEach(t),qRo=r($$e," \u2014 "),pO=n($$e,"A",{href:!0});var apt=s(pO);jRo=r(apt,"MarianMTModel"),apt.forEach(t),DRo=r($$e," (Marian model)"),$$e.forEach(t),GRo=i(be),sv=n(be,"LI",{});var k$e=s(sv);Tge=n(k$e,"STRONG",{});var npt=s(Tge);ORo=r(npt,"mbart"),npt.forEach(t),VRo=r(k$e," \u2014 "),_O=n(k$e,"A",{href:!0});var spt=s(_O);XRo=r(spt,"MBartForConditionalGeneration"),spt.forEach(t),zRo=r(k$e," (mBART model)"),k$e.forEach(t),WRo=i(be),lv=n(be,"LI",{});var S$e=s(lv);Mge=n(S$e,"STRONG",{});var lpt=s(Mge);QRo=r(lpt,"mt5"),lpt.forEach(t),HRo=r(S$e," \u2014 "),bO=n(S$e,"A",{href:!0});var ipt=s(bO);URo=r(ipt,"MT5ForConditionalGeneration"),ipt.forEach(t),JRo=r(S$e," (MT5 model)"),S$e.forEach(t),YRo=i(be),iv=n(be,"LI",{});var R$e=s(iv);Ege=n(R$e,"STRONG",{});var dpt=s(Ege);KRo=r(dpt,"pegasus"),dpt.forEach(t),ZRo=r(R$e," \u2014 "),vO=n(R$e,"A",{href:!0});var cpt=s(vO);ePo=r(cpt,"PegasusForConditionalGeneration"),cpt.forEach(t),oPo=r(R$e," (Pegasus model)"),R$e.forEach(t),rPo=i(be),dv=n(be,"LI",{});var P$e=s(dv);Cge=n(P$e,"STRONG",{});var mpt=s(Cge);tPo=r(mpt,"plbart"),mpt.forEach(t),aPo=r(P$e," \u2014 "),FO=n(P$e,"A",{href:!0});var fpt=s(FO);nPo=r(fpt,"PLBartForConditionalGeneration"),fpt.forEach(t),sPo=r(P$e," (PLBart model)"),P$e.forEach(t),lPo=i(be),cv=n(be,"LI",{});var B$e=s(cv);wge=n(B$e,"STRONG",{});var gpt=s(wge);iPo=r(gpt,"prophetnet"),gpt.forEach(t),dPo=r(B$e," \u2014 "),TO=n(B$e,"A",{href:!0});var hpt=s(TO);cPo=r(hpt,"ProphetNetForConditionalGeneration"),hpt.forEach(t),mPo=r(B$e," (ProphetNet model)"),B$e.forEach(t),fPo=i(be),mv=n(be,"LI",{});var I$e=s(mv);Age=n(I$e,"STRONG",{});var upt=s(Age);gPo=r(upt,"t5"),upt.forEach(t),hPo=r(I$e," \u2014 "),MO=n(I$e,"A",{href:!0});var ppt=s(MO);uPo=r(ppt,"T5ForConditionalGeneration"),ppt.forEach(t),pPo=r(I$e," (T5 model)"),I$e.forEach(t),_Po=i(be),fv=n(be,"LI",{});var N$e=s(fv);Lge=n(N$e,"STRONG",{});var _pt=s(Lge);bPo=r(_pt,"xlm-prophetnet"),_pt.forEach(t),vPo=r(N$e," \u2014 "),EO=n(N$e,"A",{href:!0});var bpt=s(EO);FPo=r(bpt,"XLMProphetNetForConditionalGeneration"),bpt.forEach(t),TPo=r(N$e," (XLM-ProphetNet model)"),N$e.forEach(t),be.forEach(t),MPo=i(ia),gv=n(ia,"P",{});var q$e=s(gv);EPo=r(q$e,"The model is set in evaluation mode by default using "),yge=n(q$e,"CODE",{});var vpt=s(yge);CPo=r(vpt,"model.eval()"),vpt.forEach(t),wPo=r(q$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xge=n(q$e,"CODE",{});var Fpt=s(xge);APo=r(Fpt,"model.train()"),Fpt.forEach(t),q$e.forEach(t),LPo=i(ia),T(hv.$$.fragment,ia),ia.forEach(t),Zs.forEach(t),gGe=i(m),Ui=n(m,"H2",{class:!0});var vVe=s(Ui);uv=n(vVe,"A",{id:!0,class:!0,href:!0});var Tpt=s(uv);$ge=n(Tpt,"SPAN",{});var Mpt=s($ge);T(h7.$$.fragment,Mpt),Mpt.forEach(t),Tpt.forEach(t),yPo=i(vVe),kge=n(vVe,"SPAN",{});var Ept=s(kge);xPo=r(Ept,"AutoModelForSequenceClassification"),Ept.forEach(t),vVe.forEach(t),hGe=i(m),Po=n(m,"DIV",{class:!0});var el=s(Po);T(u7.$$.fragment,el),$Po=i(el),Ji=n(el,"P",{});var toe=s(Ji);kPo=r(toe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),CO=n(toe,"A",{href:!0});var Cpt=s(CO);SPo=r(Cpt,"from_pretrained()"),Cpt.forEach(t),RPo=r(toe," class method or the "),wO=n(toe,"A",{href:!0});var wpt=s(wO);PPo=r(wpt,"from_config()"),wpt.forEach(t),BPo=r(toe,` class
method.`),toe.forEach(t),IPo=i(el),p7=n(el,"P",{});var FVe=s(p7);NPo=r(FVe,"This class cannot be instantiated directly using "),Sge=n(FVe,"CODE",{});var Apt=s(Sge);qPo=r(Apt,"__init__()"),Apt.forEach(t),jPo=r(FVe," (throws an error)."),FVe.forEach(t),DPo=i(el),ct=n(el,"DIV",{class:!0});var x6=s(ct);T(_7.$$.fragment,x6),GPo=i(x6),Rge=n(x6,"P",{});var Lpt=s(Rge);OPo=r(Lpt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Lpt.forEach(t),VPo=i(x6),Yi=n(x6,"P",{});var aoe=s(Yi);XPo=r(aoe,`Note:
Loading a model from its configuration file does `),Pge=n(aoe,"STRONG",{});var ypt=s(Pge);zPo=r(ypt,"not"),ypt.forEach(t),WPo=r(aoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),AO=n(aoe,"A",{href:!0});var xpt=s(AO);QPo=r(xpt,"from_pretrained()"),xpt.forEach(t),HPo=r(aoe," to load the model weights."),aoe.forEach(t),UPo=i(x6),T(pv.$$.fragment,x6),x6.forEach(t),JPo=i(el),oo=n(el,"DIV",{class:!0});var da=s(oo);T(b7.$$.fragment,da),YPo=i(da),Bge=n(da,"P",{});var $pt=s(Bge);KPo=r($pt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),$pt.forEach(t),ZPo=i(da),Na=n(da,"P",{});var $6=s(Na);eBo=r($6,"The model class to instantiate is selected based on the "),Ige=n($6,"CODE",{});var kpt=s(Ige);oBo=r(kpt,"model_type"),kpt.forEach(t),rBo=r($6,` property of the config object (either
passed as an argument or loaded from `),Nge=n($6,"CODE",{});var Spt=s(Nge);tBo=r(Spt,"pretrained_model_name_or_path"),Spt.forEach(t),aBo=r($6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qge=n($6,"CODE",{});var Rpt=s(qge);nBo=r(Rpt,"pretrained_model_name_or_path"),Rpt.forEach(t),sBo=r($6,":"),$6.forEach(t),lBo=i(da),N=n(da,"UL",{});var j=s(N);_v=n(j,"LI",{});var j$e=s(_v);jge=n(j$e,"STRONG",{});var Ppt=s(jge);iBo=r(Ppt,"albert"),Ppt.forEach(t),dBo=r(j$e," \u2014 "),LO=n(j$e,"A",{href:!0});var Bpt=s(LO);cBo=r(Bpt,"AlbertForSequenceClassification"),Bpt.forEach(t),mBo=r(j$e," (ALBERT model)"),j$e.forEach(t),fBo=i(j),bv=n(j,"LI",{});var D$e=s(bv);Dge=n(D$e,"STRONG",{});var Ipt=s(Dge);gBo=r(Ipt,"bart"),Ipt.forEach(t),hBo=r(D$e," \u2014 "),yO=n(D$e,"A",{href:!0});var Npt=s(yO);uBo=r(Npt,"BartForSequenceClassification"),Npt.forEach(t),pBo=r(D$e," (BART model)"),D$e.forEach(t),_Bo=i(j),vv=n(j,"LI",{});var G$e=s(vv);Gge=n(G$e,"STRONG",{});var qpt=s(Gge);bBo=r(qpt,"bert"),qpt.forEach(t),vBo=r(G$e," \u2014 "),xO=n(G$e,"A",{href:!0});var jpt=s(xO);FBo=r(jpt,"BertForSequenceClassification"),jpt.forEach(t),TBo=r(G$e," (BERT model)"),G$e.forEach(t),MBo=i(j),Fv=n(j,"LI",{});var O$e=s(Fv);Oge=n(O$e,"STRONG",{});var Dpt=s(Oge);EBo=r(Dpt,"big_bird"),Dpt.forEach(t),CBo=r(O$e," \u2014 "),$O=n(O$e,"A",{href:!0});var Gpt=s($O);wBo=r(Gpt,"BigBirdForSequenceClassification"),Gpt.forEach(t),ABo=r(O$e," (BigBird model)"),O$e.forEach(t),LBo=i(j),Tv=n(j,"LI",{});var V$e=s(Tv);Vge=n(V$e,"STRONG",{});var Opt=s(Vge);yBo=r(Opt,"bigbird_pegasus"),Opt.forEach(t),xBo=r(V$e," \u2014 "),kO=n(V$e,"A",{href:!0});var Vpt=s(kO);$Bo=r(Vpt,"BigBirdPegasusForSequenceClassification"),Vpt.forEach(t),kBo=r(V$e," (BigBird-Pegasus model)"),V$e.forEach(t),SBo=i(j),Mv=n(j,"LI",{});var X$e=s(Mv);Xge=n(X$e,"STRONG",{});var Xpt=s(Xge);RBo=r(Xpt,"camembert"),Xpt.forEach(t),PBo=r(X$e," \u2014 "),SO=n(X$e,"A",{href:!0});var zpt=s(SO);BBo=r(zpt,"CamembertForSequenceClassification"),zpt.forEach(t),IBo=r(X$e," (CamemBERT model)"),X$e.forEach(t),NBo=i(j),Ev=n(j,"LI",{});var z$e=s(Ev);zge=n(z$e,"STRONG",{});var Wpt=s(zge);qBo=r(Wpt,"canine"),Wpt.forEach(t),jBo=r(z$e," \u2014 "),RO=n(z$e,"A",{href:!0});var Qpt=s(RO);DBo=r(Qpt,"CanineForSequenceClassification"),Qpt.forEach(t),GBo=r(z$e," (CANINE model)"),z$e.forEach(t),OBo=i(j),Cv=n(j,"LI",{});var W$e=s(Cv);Wge=n(W$e,"STRONG",{});var Hpt=s(Wge);VBo=r(Hpt,"convbert"),Hpt.forEach(t),XBo=r(W$e," \u2014 "),PO=n(W$e,"A",{href:!0});var Upt=s(PO);zBo=r(Upt,"ConvBertForSequenceClassification"),Upt.forEach(t),WBo=r(W$e," (ConvBERT model)"),W$e.forEach(t),QBo=i(j),wv=n(j,"LI",{});var Q$e=s(wv);Qge=n(Q$e,"STRONG",{});var Jpt=s(Qge);HBo=r(Jpt,"ctrl"),Jpt.forEach(t),UBo=r(Q$e," \u2014 "),BO=n(Q$e,"A",{href:!0});var Ypt=s(BO);JBo=r(Ypt,"CTRLForSequenceClassification"),Ypt.forEach(t),YBo=r(Q$e," (CTRL model)"),Q$e.forEach(t),KBo=i(j),Av=n(j,"LI",{});var H$e=s(Av);Hge=n(H$e,"STRONG",{});var Kpt=s(Hge);ZBo=r(Kpt,"data2vec-text"),Kpt.forEach(t),eIo=r(H$e," \u2014 "),IO=n(H$e,"A",{href:!0});var Zpt=s(IO);oIo=r(Zpt,"Data2VecTextForSequenceClassification"),Zpt.forEach(t),rIo=r(H$e," (Data2VecText model)"),H$e.forEach(t),tIo=i(j),Lv=n(j,"LI",{});var U$e=s(Lv);Uge=n(U$e,"STRONG",{});var e_t=s(Uge);aIo=r(e_t,"deberta"),e_t.forEach(t),nIo=r(U$e," \u2014 "),NO=n(U$e,"A",{href:!0});var o_t=s(NO);sIo=r(o_t,"DebertaForSequenceClassification"),o_t.forEach(t),lIo=r(U$e," (DeBERTa model)"),U$e.forEach(t),iIo=i(j),yv=n(j,"LI",{});var J$e=s(yv);Jge=n(J$e,"STRONG",{});var r_t=s(Jge);dIo=r(r_t,"deberta-v2"),r_t.forEach(t),cIo=r(J$e," \u2014 "),qO=n(J$e,"A",{href:!0});var t_t=s(qO);mIo=r(t_t,"DebertaV2ForSequenceClassification"),t_t.forEach(t),fIo=r(J$e," (DeBERTa-v2 model)"),J$e.forEach(t),gIo=i(j),xv=n(j,"LI",{});var Y$e=s(xv);Yge=n(Y$e,"STRONG",{});var a_t=s(Yge);hIo=r(a_t,"distilbert"),a_t.forEach(t),uIo=r(Y$e," \u2014 "),jO=n(Y$e,"A",{href:!0});var n_t=s(jO);pIo=r(n_t,"DistilBertForSequenceClassification"),n_t.forEach(t),_Io=r(Y$e," (DistilBERT model)"),Y$e.forEach(t),bIo=i(j),$v=n(j,"LI",{});var K$e=s($v);Kge=n(K$e,"STRONG",{});var s_t=s(Kge);vIo=r(s_t,"electra"),s_t.forEach(t),FIo=r(K$e," \u2014 "),DO=n(K$e,"A",{href:!0});var l_t=s(DO);TIo=r(l_t,"ElectraForSequenceClassification"),l_t.forEach(t),MIo=r(K$e," (ELECTRA model)"),K$e.forEach(t),EIo=i(j),kv=n(j,"LI",{});var Z$e=s(kv);Zge=n(Z$e,"STRONG",{});var i_t=s(Zge);CIo=r(i_t,"flaubert"),i_t.forEach(t),wIo=r(Z$e," \u2014 "),GO=n(Z$e,"A",{href:!0});var d_t=s(GO);AIo=r(d_t,"FlaubertForSequenceClassification"),d_t.forEach(t),LIo=r(Z$e," (FlauBERT model)"),Z$e.forEach(t),yIo=i(j),Sv=n(j,"LI",{});var eke=s(Sv);ehe=n(eke,"STRONG",{});var c_t=s(ehe);xIo=r(c_t,"fnet"),c_t.forEach(t),$Io=r(eke," \u2014 "),OO=n(eke,"A",{href:!0});var m_t=s(OO);kIo=r(m_t,"FNetForSequenceClassification"),m_t.forEach(t),SIo=r(eke," (FNet model)"),eke.forEach(t),RIo=i(j),Rv=n(j,"LI",{});var oke=s(Rv);ohe=n(oke,"STRONG",{});var f_t=s(ohe);PIo=r(f_t,"funnel"),f_t.forEach(t),BIo=r(oke," \u2014 "),VO=n(oke,"A",{href:!0});var g_t=s(VO);IIo=r(g_t,"FunnelForSequenceClassification"),g_t.forEach(t),NIo=r(oke," (Funnel Transformer model)"),oke.forEach(t),qIo=i(j),Pv=n(j,"LI",{});var rke=s(Pv);rhe=n(rke,"STRONG",{});var h_t=s(rhe);jIo=r(h_t,"gpt2"),h_t.forEach(t),DIo=r(rke," \u2014 "),XO=n(rke,"A",{href:!0});var u_t=s(XO);GIo=r(u_t,"GPT2ForSequenceClassification"),u_t.forEach(t),OIo=r(rke," (OpenAI GPT-2 model)"),rke.forEach(t),VIo=i(j),Bv=n(j,"LI",{});var tke=s(Bv);the=n(tke,"STRONG",{});var p_t=s(the);XIo=r(p_t,"gpt_neo"),p_t.forEach(t),zIo=r(tke," \u2014 "),zO=n(tke,"A",{href:!0});var __t=s(zO);WIo=r(__t,"GPTNeoForSequenceClassification"),__t.forEach(t),QIo=r(tke," (GPT Neo model)"),tke.forEach(t),HIo=i(j),Iv=n(j,"LI",{});var ake=s(Iv);ahe=n(ake,"STRONG",{});var b_t=s(ahe);UIo=r(b_t,"gptj"),b_t.forEach(t),JIo=r(ake," \u2014 "),WO=n(ake,"A",{href:!0});var v_t=s(WO);YIo=r(v_t,"GPTJForSequenceClassification"),v_t.forEach(t),KIo=r(ake," (GPT-J model)"),ake.forEach(t),ZIo=i(j),Nv=n(j,"LI",{});var nke=s(Nv);nhe=n(nke,"STRONG",{});var F_t=s(nhe);eNo=r(F_t,"ibert"),F_t.forEach(t),oNo=r(nke," \u2014 "),QO=n(nke,"A",{href:!0});var T_t=s(QO);rNo=r(T_t,"IBertForSequenceClassification"),T_t.forEach(t),tNo=r(nke," (I-BERT model)"),nke.forEach(t),aNo=i(j),qv=n(j,"LI",{});var ske=s(qv);she=n(ske,"STRONG",{});var M_t=s(she);nNo=r(M_t,"layoutlm"),M_t.forEach(t),sNo=r(ske," \u2014 "),HO=n(ske,"A",{href:!0});var E_t=s(HO);lNo=r(E_t,"LayoutLMForSequenceClassification"),E_t.forEach(t),iNo=r(ske," (LayoutLM model)"),ske.forEach(t),dNo=i(j),jv=n(j,"LI",{});var lke=s(jv);lhe=n(lke,"STRONG",{});var C_t=s(lhe);cNo=r(C_t,"layoutlmv2"),C_t.forEach(t),mNo=r(lke," \u2014 "),UO=n(lke,"A",{href:!0});var w_t=s(UO);fNo=r(w_t,"LayoutLMv2ForSequenceClassification"),w_t.forEach(t),gNo=r(lke," (LayoutLMv2 model)"),lke.forEach(t),hNo=i(j),Dv=n(j,"LI",{});var ike=s(Dv);ihe=n(ike,"STRONG",{});var A_t=s(ihe);uNo=r(A_t,"layoutlmv3"),A_t.forEach(t),pNo=r(ike," \u2014 "),JO=n(ike,"A",{href:!0});var L_t=s(JO);_No=r(L_t,"LayoutLMv3ForSequenceClassification"),L_t.forEach(t),bNo=r(ike," (LayoutLMv3 model)"),ike.forEach(t),vNo=i(j),Gv=n(j,"LI",{});var dke=s(Gv);dhe=n(dke,"STRONG",{});var y_t=s(dhe);FNo=r(y_t,"led"),y_t.forEach(t),TNo=r(dke," \u2014 "),YO=n(dke,"A",{href:!0});var x_t=s(YO);MNo=r(x_t,"LEDForSequenceClassification"),x_t.forEach(t),ENo=r(dke," (LED model)"),dke.forEach(t),CNo=i(j),Ov=n(j,"LI",{});var cke=s(Ov);che=n(cke,"STRONG",{});var $_t=s(che);wNo=r($_t,"longformer"),$_t.forEach(t),ANo=r(cke," \u2014 "),KO=n(cke,"A",{href:!0});var k_t=s(KO);LNo=r(k_t,"LongformerForSequenceClassification"),k_t.forEach(t),yNo=r(cke," (Longformer model)"),cke.forEach(t),xNo=i(j),Vv=n(j,"LI",{});var mke=s(Vv);mhe=n(mke,"STRONG",{});var S_t=s(mhe);$No=r(S_t,"mbart"),S_t.forEach(t),kNo=r(mke," \u2014 "),ZO=n(mke,"A",{href:!0});var R_t=s(ZO);SNo=r(R_t,"MBartForSequenceClassification"),R_t.forEach(t),RNo=r(mke," (mBART model)"),mke.forEach(t),PNo=i(j),Xv=n(j,"LI",{});var fke=s(Xv);fhe=n(fke,"STRONG",{});var P_t=s(fhe);BNo=r(P_t,"megatron-bert"),P_t.forEach(t),INo=r(fke," \u2014 "),eV=n(fke,"A",{href:!0});var B_t=s(eV);NNo=r(B_t,"MegatronBertForSequenceClassification"),B_t.forEach(t),qNo=r(fke," (Megatron-BERT model)"),fke.forEach(t),jNo=i(j),zv=n(j,"LI",{});var gke=s(zv);ghe=n(gke,"STRONG",{});var I_t=s(ghe);DNo=r(I_t,"mobilebert"),I_t.forEach(t),GNo=r(gke," \u2014 "),oV=n(gke,"A",{href:!0});var N_t=s(oV);ONo=r(N_t,"MobileBertForSequenceClassification"),N_t.forEach(t),VNo=r(gke," (MobileBERT model)"),gke.forEach(t),XNo=i(j),Wv=n(j,"LI",{});var hke=s(Wv);hhe=n(hke,"STRONG",{});var q_t=s(hhe);zNo=r(q_t,"mpnet"),q_t.forEach(t),WNo=r(hke," \u2014 "),rV=n(hke,"A",{href:!0});var j_t=s(rV);QNo=r(j_t,"MPNetForSequenceClassification"),j_t.forEach(t),HNo=r(hke," (MPNet model)"),hke.forEach(t),UNo=i(j),Qv=n(j,"LI",{});var uke=s(Qv);uhe=n(uke,"STRONG",{});var D_t=s(uhe);JNo=r(D_t,"nystromformer"),D_t.forEach(t),YNo=r(uke," \u2014 "),tV=n(uke,"A",{href:!0});var G_t=s(tV);KNo=r(G_t,"NystromformerForSequenceClassification"),G_t.forEach(t),ZNo=r(uke," (Nystr\xF6mformer model)"),uke.forEach(t),eqo=i(j),Hv=n(j,"LI",{});var pke=s(Hv);phe=n(pke,"STRONG",{});var O_t=s(phe);oqo=r(O_t,"openai-gpt"),O_t.forEach(t),rqo=r(pke," \u2014 "),aV=n(pke,"A",{href:!0});var V_t=s(aV);tqo=r(V_t,"OpenAIGPTForSequenceClassification"),V_t.forEach(t),aqo=r(pke," (OpenAI GPT model)"),pke.forEach(t),nqo=i(j),Uv=n(j,"LI",{});var _ke=s(Uv);_he=n(_ke,"STRONG",{});var X_t=s(_he);sqo=r(X_t,"perceiver"),X_t.forEach(t),lqo=r(_ke," \u2014 "),nV=n(_ke,"A",{href:!0});var z_t=s(nV);iqo=r(z_t,"PerceiverForSequenceClassification"),z_t.forEach(t),dqo=r(_ke," (Perceiver model)"),_ke.forEach(t),cqo=i(j),Jv=n(j,"LI",{});var bke=s(Jv);bhe=n(bke,"STRONG",{});var W_t=s(bhe);mqo=r(W_t,"plbart"),W_t.forEach(t),fqo=r(bke," \u2014 "),sV=n(bke,"A",{href:!0});var Q_t=s(sV);gqo=r(Q_t,"PLBartForSequenceClassification"),Q_t.forEach(t),hqo=r(bke," (PLBart model)"),bke.forEach(t),uqo=i(j),Yv=n(j,"LI",{});var vke=s(Yv);vhe=n(vke,"STRONG",{});var H_t=s(vhe);pqo=r(H_t,"qdqbert"),H_t.forEach(t),_qo=r(vke," \u2014 "),lV=n(vke,"A",{href:!0});var U_t=s(lV);bqo=r(U_t,"QDQBertForSequenceClassification"),U_t.forEach(t),vqo=r(vke," (QDQBert model)"),vke.forEach(t),Fqo=i(j),Kv=n(j,"LI",{});var Fke=s(Kv);Fhe=n(Fke,"STRONG",{});var J_t=s(Fhe);Tqo=r(J_t,"reformer"),J_t.forEach(t),Mqo=r(Fke," \u2014 "),iV=n(Fke,"A",{href:!0});var Y_t=s(iV);Eqo=r(Y_t,"ReformerForSequenceClassification"),Y_t.forEach(t),Cqo=r(Fke," (Reformer model)"),Fke.forEach(t),wqo=i(j),Zv=n(j,"LI",{});var Tke=s(Zv);The=n(Tke,"STRONG",{});var K_t=s(The);Aqo=r(K_t,"rembert"),K_t.forEach(t),Lqo=r(Tke," \u2014 "),dV=n(Tke,"A",{href:!0});var Z_t=s(dV);yqo=r(Z_t,"RemBertForSequenceClassification"),Z_t.forEach(t),xqo=r(Tke," (RemBERT model)"),Tke.forEach(t),$qo=i(j),eF=n(j,"LI",{});var Mke=s(eF);Mhe=n(Mke,"STRONG",{});var e2t=s(Mhe);kqo=r(e2t,"roberta"),e2t.forEach(t),Sqo=r(Mke," \u2014 "),cV=n(Mke,"A",{href:!0});var o2t=s(cV);Rqo=r(o2t,"RobertaForSequenceClassification"),o2t.forEach(t),Pqo=r(Mke," (RoBERTa model)"),Mke.forEach(t),Bqo=i(j),oF=n(j,"LI",{});var Eke=s(oF);Ehe=n(Eke,"STRONG",{});var r2t=s(Ehe);Iqo=r(r2t,"roformer"),r2t.forEach(t),Nqo=r(Eke," \u2014 "),mV=n(Eke,"A",{href:!0});var t2t=s(mV);qqo=r(t2t,"RoFormerForSequenceClassification"),t2t.forEach(t),jqo=r(Eke," (RoFormer model)"),Eke.forEach(t),Dqo=i(j),rF=n(j,"LI",{});var Cke=s(rF);Che=n(Cke,"STRONG",{});var a2t=s(Che);Gqo=r(a2t,"squeezebert"),a2t.forEach(t),Oqo=r(Cke," \u2014 "),fV=n(Cke,"A",{href:!0});var n2t=s(fV);Vqo=r(n2t,"SqueezeBertForSequenceClassification"),n2t.forEach(t),Xqo=r(Cke," (SqueezeBERT model)"),Cke.forEach(t),zqo=i(j),tF=n(j,"LI",{});var wke=s(tF);whe=n(wke,"STRONG",{});var s2t=s(whe);Wqo=r(s2t,"tapas"),s2t.forEach(t),Qqo=r(wke," \u2014 "),gV=n(wke,"A",{href:!0});var l2t=s(gV);Hqo=r(l2t,"TapasForSequenceClassification"),l2t.forEach(t),Uqo=r(wke," (TAPAS model)"),wke.forEach(t),Jqo=i(j),aF=n(j,"LI",{});var Ake=s(aF);Ahe=n(Ake,"STRONG",{});var i2t=s(Ahe);Yqo=r(i2t,"transfo-xl"),i2t.forEach(t),Kqo=r(Ake," \u2014 "),hV=n(Ake,"A",{href:!0});var d2t=s(hV);Zqo=r(d2t,"TransfoXLForSequenceClassification"),d2t.forEach(t),ejo=r(Ake," (Transformer-XL model)"),Ake.forEach(t),ojo=i(j),nF=n(j,"LI",{});var Lke=s(nF);Lhe=n(Lke,"STRONG",{});var c2t=s(Lhe);rjo=r(c2t,"xlm"),c2t.forEach(t),tjo=r(Lke," \u2014 "),uV=n(Lke,"A",{href:!0});var m2t=s(uV);ajo=r(m2t,"XLMForSequenceClassification"),m2t.forEach(t),njo=r(Lke," (XLM model)"),Lke.forEach(t),sjo=i(j),sF=n(j,"LI",{});var yke=s(sF);yhe=n(yke,"STRONG",{});var f2t=s(yhe);ljo=r(f2t,"xlm-roberta"),f2t.forEach(t),ijo=r(yke," \u2014 "),pV=n(yke,"A",{href:!0});var g2t=s(pV);djo=r(g2t,"XLMRobertaForSequenceClassification"),g2t.forEach(t),cjo=r(yke," (XLM-RoBERTa model)"),yke.forEach(t),mjo=i(j),lF=n(j,"LI",{});var xke=s(lF);xhe=n(xke,"STRONG",{});var h2t=s(xhe);fjo=r(h2t,"xlm-roberta-xl"),h2t.forEach(t),gjo=r(xke," \u2014 "),_V=n(xke,"A",{href:!0});var u2t=s(_V);hjo=r(u2t,"XLMRobertaXLForSequenceClassification"),u2t.forEach(t),ujo=r(xke," (XLM-RoBERTa-XL model)"),xke.forEach(t),pjo=i(j),iF=n(j,"LI",{});var $ke=s(iF);$he=n($ke,"STRONG",{});var p2t=s($he);_jo=r(p2t,"xlnet"),p2t.forEach(t),bjo=r($ke," \u2014 "),bV=n($ke,"A",{href:!0});var _2t=s(bV);vjo=r(_2t,"XLNetForSequenceClassification"),_2t.forEach(t),Fjo=r($ke," (XLNet model)"),$ke.forEach(t),Tjo=i(j),dF=n(j,"LI",{});var kke=s(dF);khe=n(kke,"STRONG",{});var b2t=s(khe);Mjo=r(b2t,"yoso"),b2t.forEach(t),Ejo=r(kke," \u2014 "),vV=n(kke,"A",{href:!0});var v2t=s(vV);Cjo=r(v2t,"YosoForSequenceClassification"),v2t.forEach(t),wjo=r(kke," (YOSO model)"),kke.forEach(t),j.forEach(t),Ajo=i(da),cF=n(da,"P",{});var Ske=s(cF);Ljo=r(Ske,"The model is set in evaluation mode by default using "),She=n(Ske,"CODE",{});var F2t=s(She);yjo=r(F2t,"model.eval()"),F2t.forEach(t),xjo=r(Ske,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rhe=n(Ske,"CODE",{});var T2t=s(Rhe);$jo=r(T2t,"model.train()"),T2t.forEach(t),Ske.forEach(t),kjo=i(da),T(mF.$$.fragment,da),da.forEach(t),el.forEach(t),uGe=i(m),Ki=n(m,"H2",{class:!0});var TVe=s(Ki);fF=n(TVe,"A",{id:!0,class:!0,href:!0});var M2t=s(fF);Phe=n(M2t,"SPAN",{});var E2t=s(Phe);T(v7.$$.fragment,E2t),E2t.forEach(t),M2t.forEach(t),Sjo=i(TVe),Bhe=n(TVe,"SPAN",{});var C2t=s(Bhe);Rjo=r(C2t,"AutoModelForMultipleChoice"),C2t.forEach(t),TVe.forEach(t),pGe=i(m),Bo=n(m,"DIV",{class:!0});var ol=s(Bo);T(F7.$$.fragment,ol),Pjo=i(ol),Zi=n(ol,"P",{});var noe=s(Zi);Bjo=r(noe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),FV=n(noe,"A",{href:!0});var w2t=s(FV);Ijo=r(w2t,"from_pretrained()"),w2t.forEach(t),Njo=r(noe," class method or the "),TV=n(noe,"A",{href:!0});var A2t=s(TV);qjo=r(A2t,"from_config()"),A2t.forEach(t),jjo=r(noe,` class
method.`),noe.forEach(t),Djo=i(ol),T7=n(ol,"P",{});var MVe=s(T7);Gjo=r(MVe,"This class cannot be instantiated directly using "),Ihe=n(MVe,"CODE",{});var L2t=s(Ihe);Ojo=r(L2t,"__init__()"),L2t.forEach(t),Vjo=r(MVe," (throws an error)."),MVe.forEach(t),Xjo=i(ol),mt=n(ol,"DIV",{class:!0});var k6=s(mt);T(M7.$$.fragment,k6),zjo=i(k6),Nhe=n(k6,"P",{});var y2t=s(Nhe);Wjo=r(y2t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),y2t.forEach(t),Qjo=i(k6),ed=n(k6,"P",{});var soe=s(ed);Hjo=r(soe,`Note:
Loading a model from its configuration file does `),qhe=n(soe,"STRONG",{});var x2t=s(qhe);Ujo=r(x2t,"not"),x2t.forEach(t),Jjo=r(soe,` load the model weights. It only affects the
model\u2019s configuration. Use `),MV=n(soe,"A",{href:!0});var $2t=s(MV);Yjo=r($2t,"from_pretrained()"),$2t.forEach(t),Kjo=r(soe," to load the model weights."),soe.forEach(t),Zjo=i(k6),T(gF.$$.fragment,k6),k6.forEach(t),eDo=i(ol),ro=n(ol,"DIV",{class:!0});var ca=s(ro);T(E7.$$.fragment,ca),oDo=i(ca),jhe=n(ca,"P",{});var k2t=s(jhe);rDo=r(k2t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),k2t.forEach(t),tDo=i(ca),qa=n(ca,"P",{});var S6=s(qa);aDo=r(S6,"The model class to instantiate is selected based on the "),Dhe=n(S6,"CODE",{});var S2t=s(Dhe);nDo=r(S2t,"model_type"),S2t.forEach(t),sDo=r(S6,` property of the config object (either
passed as an argument or loaded from `),Ghe=n(S6,"CODE",{});var R2t=s(Ghe);lDo=r(R2t,"pretrained_model_name_or_path"),R2t.forEach(t),iDo=r(S6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ohe=n(S6,"CODE",{});var P2t=s(Ohe);dDo=r(P2t,"pretrained_model_name_or_path"),P2t.forEach(t),cDo=r(S6,":"),S6.forEach(t),mDo=i(ca),Z=n(ca,"UL",{});var ee=s(Z);hF=n(ee,"LI",{});var Rke=s(hF);Vhe=n(Rke,"STRONG",{});var B2t=s(Vhe);fDo=r(B2t,"albert"),B2t.forEach(t),gDo=r(Rke," \u2014 "),EV=n(Rke,"A",{href:!0});var I2t=s(EV);hDo=r(I2t,"AlbertForMultipleChoice"),I2t.forEach(t),uDo=r(Rke," (ALBERT model)"),Rke.forEach(t),pDo=i(ee),uF=n(ee,"LI",{});var Pke=s(uF);Xhe=n(Pke,"STRONG",{});var N2t=s(Xhe);_Do=r(N2t,"bert"),N2t.forEach(t),bDo=r(Pke," \u2014 "),CV=n(Pke,"A",{href:!0});var q2t=s(CV);vDo=r(q2t,"BertForMultipleChoice"),q2t.forEach(t),FDo=r(Pke," (BERT model)"),Pke.forEach(t),TDo=i(ee),pF=n(ee,"LI",{});var Bke=s(pF);zhe=n(Bke,"STRONG",{});var j2t=s(zhe);MDo=r(j2t,"big_bird"),j2t.forEach(t),EDo=r(Bke," \u2014 "),wV=n(Bke,"A",{href:!0});var D2t=s(wV);CDo=r(D2t,"BigBirdForMultipleChoice"),D2t.forEach(t),wDo=r(Bke," (BigBird model)"),Bke.forEach(t),ADo=i(ee),_F=n(ee,"LI",{});var Ike=s(_F);Whe=n(Ike,"STRONG",{});var G2t=s(Whe);LDo=r(G2t,"camembert"),G2t.forEach(t),yDo=r(Ike," \u2014 "),AV=n(Ike,"A",{href:!0});var O2t=s(AV);xDo=r(O2t,"CamembertForMultipleChoice"),O2t.forEach(t),$Do=r(Ike," (CamemBERT model)"),Ike.forEach(t),kDo=i(ee),bF=n(ee,"LI",{});var Nke=s(bF);Qhe=n(Nke,"STRONG",{});var V2t=s(Qhe);SDo=r(V2t,"canine"),V2t.forEach(t),RDo=r(Nke," \u2014 "),LV=n(Nke,"A",{href:!0});var X2t=s(LV);PDo=r(X2t,"CanineForMultipleChoice"),X2t.forEach(t),BDo=r(Nke," (CANINE model)"),Nke.forEach(t),IDo=i(ee),vF=n(ee,"LI",{});var qke=s(vF);Hhe=n(qke,"STRONG",{});var z2t=s(Hhe);NDo=r(z2t,"convbert"),z2t.forEach(t),qDo=r(qke," \u2014 "),yV=n(qke,"A",{href:!0});var W2t=s(yV);jDo=r(W2t,"ConvBertForMultipleChoice"),W2t.forEach(t),DDo=r(qke," (ConvBERT model)"),qke.forEach(t),GDo=i(ee),FF=n(ee,"LI",{});var jke=s(FF);Uhe=n(jke,"STRONG",{});var Q2t=s(Uhe);ODo=r(Q2t,"data2vec-text"),Q2t.forEach(t),VDo=r(jke," \u2014 "),xV=n(jke,"A",{href:!0});var H2t=s(xV);XDo=r(H2t,"Data2VecTextForMultipleChoice"),H2t.forEach(t),zDo=r(jke," (Data2VecText model)"),jke.forEach(t),WDo=i(ee),TF=n(ee,"LI",{});var Dke=s(TF);Jhe=n(Dke,"STRONG",{});var U2t=s(Jhe);QDo=r(U2t,"deberta-v2"),U2t.forEach(t),HDo=r(Dke," \u2014 "),$V=n(Dke,"A",{href:!0});var J2t=s($V);UDo=r(J2t,"DebertaV2ForMultipleChoice"),J2t.forEach(t),JDo=r(Dke," (DeBERTa-v2 model)"),Dke.forEach(t),YDo=i(ee),MF=n(ee,"LI",{});var Gke=s(MF);Yhe=n(Gke,"STRONG",{});var Y2t=s(Yhe);KDo=r(Y2t,"distilbert"),Y2t.forEach(t),ZDo=r(Gke," \u2014 "),kV=n(Gke,"A",{href:!0});var K2t=s(kV);eGo=r(K2t,"DistilBertForMultipleChoice"),K2t.forEach(t),oGo=r(Gke," (DistilBERT model)"),Gke.forEach(t),rGo=i(ee),EF=n(ee,"LI",{});var Oke=s(EF);Khe=n(Oke,"STRONG",{});var Z2t=s(Khe);tGo=r(Z2t,"electra"),Z2t.forEach(t),aGo=r(Oke," \u2014 "),SV=n(Oke,"A",{href:!0});var ebt=s(SV);nGo=r(ebt,"ElectraForMultipleChoice"),ebt.forEach(t),sGo=r(Oke," (ELECTRA model)"),Oke.forEach(t),lGo=i(ee),CF=n(ee,"LI",{});var Vke=s(CF);Zhe=n(Vke,"STRONG",{});var obt=s(Zhe);iGo=r(obt,"flaubert"),obt.forEach(t),dGo=r(Vke," \u2014 "),RV=n(Vke,"A",{href:!0});var rbt=s(RV);cGo=r(rbt,"FlaubertForMultipleChoice"),rbt.forEach(t),mGo=r(Vke," (FlauBERT model)"),Vke.forEach(t),fGo=i(ee),wF=n(ee,"LI",{});var Xke=s(wF);eue=n(Xke,"STRONG",{});var tbt=s(eue);gGo=r(tbt,"fnet"),tbt.forEach(t),hGo=r(Xke," \u2014 "),PV=n(Xke,"A",{href:!0});var abt=s(PV);uGo=r(abt,"FNetForMultipleChoice"),abt.forEach(t),pGo=r(Xke," (FNet model)"),Xke.forEach(t),_Go=i(ee),AF=n(ee,"LI",{});var zke=s(AF);oue=n(zke,"STRONG",{});var nbt=s(oue);bGo=r(nbt,"funnel"),nbt.forEach(t),vGo=r(zke," \u2014 "),BV=n(zke,"A",{href:!0});var sbt=s(BV);FGo=r(sbt,"FunnelForMultipleChoice"),sbt.forEach(t),TGo=r(zke," (Funnel Transformer model)"),zke.forEach(t),MGo=i(ee),LF=n(ee,"LI",{});var Wke=s(LF);rue=n(Wke,"STRONG",{});var lbt=s(rue);EGo=r(lbt,"ibert"),lbt.forEach(t),CGo=r(Wke," \u2014 "),IV=n(Wke,"A",{href:!0});var ibt=s(IV);wGo=r(ibt,"IBertForMultipleChoice"),ibt.forEach(t),AGo=r(Wke," (I-BERT model)"),Wke.forEach(t),LGo=i(ee),yF=n(ee,"LI",{});var Qke=s(yF);tue=n(Qke,"STRONG",{});var dbt=s(tue);yGo=r(dbt,"longformer"),dbt.forEach(t),xGo=r(Qke," \u2014 "),NV=n(Qke,"A",{href:!0});var cbt=s(NV);$Go=r(cbt,"LongformerForMultipleChoice"),cbt.forEach(t),kGo=r(Qke," (Longformer model)"),Qke.forEach(t),SGo=i(ee),xF=n(ee,"LI",{});var Hke=s(xF);aue=n(Hke,"STRONG",{});var mbt=s(aue);RGo=r(mbt,"megatron-bert"),mbt.forEach(t),PGo=r(Hke," \u2014 "),qV=n(Hke,"A",{href:!0});var fbt=s(qV);BGo=r(fbt,"MegatronBertForMultipleChoice"),fbt.forEach(t),IGo=r(Hke," (Megatron-BERT model)"),Hke.forEach(t),NGo=i(ee),$F=n(ee,"LI",{});var Uke=s($F);nue=n(Uke,"STRONG",{});var gbt=s(nue);qGo=r(gbt,"mobilebert"),gbt.forEach(t),jGo=r(Uke," \u2014 "),jV=n(Uke,"A",{href:!0});var hbt=s(jV);DGo=r(hbt,"MobileBertForMultipleChoice"),hbt.forEach(t),GGo=r(Uke," (MobileBERT model)"),Uke.forEach(t),OGo=i(ee),kF=n(ee,"LI",{});var Jke=s(kF);sue=n(Jke,"STRONG",{});var ubt=s(sue);VGo=r(ubt,"mpnet"),ubt.forEach(t),XGo=r(Jke," \u2014 "),DV=n(Jke,"A",{href:!0});var pbt=s(DV);zGo=r(pbt,"MPNetForMultipleChoice"),pbt.forEach(t),WGo=r(Jke," (MPNet model)"),Jke.forEach(t),QGo=i(ee),SF=n(ee,"LI",{});var Yke=s(SF);lue=n(Yke,"STRONG",{});var _bt=s(lue);HGo=r(_bt,"nystromformer"),_bt.forEach(t),UGo=r(Yke," \u2014 "),GV=n(Yke,"A",{href:!0});var bbt=s(GV);JGo=r(bbt,"NystromformerForMultipleChoice"),bbt.forEach(t),YGo=r(Yke," (Nystr\xF6mformer model)"),Yke.forEach(t),KGo=i(ee),RF=n(ee,"LI",{});var Kke=s(RF);iue=n(Kke,"STRONG",{});var vbt=s(iue);ZGo=r(vbt,"qdqbert"),vbt.forEach(t),eOo=r(Kke," \u2014 "),OV=n(Kke,"A",{href:!0});var Fbt=s(OV);oOo=r(Fbt,"QDQBertForMultipleChoice"),Fbt.forEach(t),rOo=r(Kke," (QDQBert model)"),Kke.forEach(t),tOo=i(ee),PF=n(ee,"LI",{});var Zke=s(PF);due=n(Zke,"STRONG",{});var Tbt=s(due);aOo=r(Tbt,"rembert"),Tbt.forEach(t),nOo=r(Zke," \u2014 "),VV=n(Zke,"A",{href:!0});var Mbt=s(VV);sOo=r(Mbt,"RemBertForMultipleChoice"),Mbt.forEach(t),lOo=r(Zke," (RemBERT model)"),Zke.forEach(t),iOo=i(ee),BF=n(ee,"LI",{});var eSe=s(BF);cue=n(eSe,"STRONG",{});var Ebt=s(cue);dOo=r(Ebt,"roberta"),Ebt.forEach(t),cOo=r(eSe," \u2014 "),XV=n(eSe,"A",{href:!0});var Cbt=s(XV);mOo=r(Cbt,"RobertaForMultipleChoice"),Cbt.forEach(t),fOo=r(eSe," (RoBERTa model)"),eSe.forEach(t),gOo=i(ee),IF=n(ee,"LI",{});var oSe=s(IF);mue=n(oSe,"STRONG",{});var wbt=s(mue);hOo=r(wbt,"roformer"),wbt.forEach(t),uOo=r(oSe," \u2014 "),zV=n(oSe,"A",{href:!0});var Abt=s(zV);pOo=r(Abt,"RoFormerForMultipleChoice"),Abt.forEach(t),_Oo=r(oSe," (RoFormer model)"),oSe.forEach(t),bOo=i(ee),NF=n(ee,"LI",{});var rSe=s(NF);fue=n(rSe,"STRONG",{});var Lbt=s(fue);vOo=r(Lbt,"squeezebert"),Lbt.forEach(t),FOo=r(rSe," \u2014 "),WV=n(rSe,"A",{href:!0});var ybt=s(WV);TOo=r(ybt,"SqueezeBertForMultipleChoice"),ybt.forEach(t),MOo=r(rSe," (SqueezeBERT model)"),rSe.forEach(t),EOo=i(ee),qF=n(ee,"LI",{});var tSe=s(qF);gue=n(tSe,"STRONG",{});var xbt=s(gue);COo=r(xbt,"xlm"),xbt.forEach(t),wOo=r(tSe," \u2014 "),QV=n(tSe,"A",{href:!0});var $bt=s(QV);AOo=r($bt,"XLMForMultipleChoice"),$bt.forEach(t),LOo=r(tSe," (XLM model)"),tSe.forEach(t),yOo=i(ee),jF=n(ee,"LI",{});var aSe=s(jF);hue=n(aSe,"STRONG",{});var kbt=s(hue);xOo=r(kbt,"xlm-roberta"),kbt.forEach(t),$Oo=r(aSe," \u2014 "),HV=n(aSe,"A",{href:!0});var Sbt=s(HV);kOo=r(Sbt,"XLMRobertaForMultipleChoice"),Sbt.forEach(t),SOo=r(aSe," (XLM-RoBERTa model)"),aSe.forEach(t),ROo=i(ee),DF=n(ee,"LI",{});var nSe=s(DF);uue=n(nSe,"STRONG",{});var Rbt=s(uue);POo=r(Rbt,"xlm-roberta-xl"),Rbt.forEach(t),BOo=r(nSe," \u2014 "),UV=n(nSe,"A",{href:!0});var Pbt=s(UV);IOo=r(Pbt,"XLMRobertaXLForMultipleChoice"),Pbt.forEach(t),NOo=r(nSe," (XLM-RoBERTa-XL model)"),nSe.forEach(t),qOo=i(ee),GF=n(ee,"LI",{});var sSe=s(GF);pue=n(sSe,"STRONG",{});var Bbt=s(pue);jOo=r(Bbt,"xlnet"),Bbt.forEach(t),DOo=r(sSe," \u2014 "),JV=n(sSe,"A",{href:!0});var Ibt=s(JV);GOo=r(Ibt,"XLNetForMultipleChoice"),Ibt.forEach(t),OOo=r(sSe," (XLNet model)"),sSe.forEach(t),VOo=i(ee),OF=n(ee,"LI",{});var lSe=s(OF);_ue=n(lSe,"STRONG",{});var Nbt=s(_ue);XOo=r(Nbt,"yoso"),Nbt.forEach(t),zOo=r(lSe," \u2014 "),YV=n(lSe,"A",{href:!0});var qbt=s(YV);WOo=r(qbt,"YosoForMultipleChoice"),qbt.forEach(t),QOo=r(lSe," (YOSO model)"),lSe.forEach(t),ee.forEach(t),HOo=i(ca),VF=n(ca,"P",{});var iSe=s(VF);UOo=r(iSe,"The model is set in evaluation mode by default using "),bue=n(iSe,"CODE",{});var jbt=s(bue);JOo=r(jbt,"model.eval()"),jbt.forEach(t),YOo=r(iSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vue=n(iSe,"CODE",{});var Dbt=s(vue);KOo=r(Dbt,"model.train()"),Dbt.forEach(t),iSe.forEach(t),ZOo=i(ca),T(XF.$$.fragment,ca),ca.forEach(t),ol.forEach(t),_Ge=i(m),od=n(m,"H2",{class:!0});var EVe=s(od);zF=n(EVe,"A",{id:!0,class:!0,href:!0});var Gbt=s(zF);Fue=n(Gbt,"SPAN",{});var Obt=s(Fue);T(C7.$$.fragment,Obt),Obt.forEach(t),Gbt.forEach(t),eVo=i(EVe),Tue=n(EVe,"SPAN",{});var Vbt=s(Tue);oVo=r(Vbt,"AutoModelForNextSentencePrediction"),Vbt.forEach(t),EVe.forEach(t),bGe=i(m),Io=n(m,"DIV",{class:!0});var rl=s(Io);T(w7.$$.fragment,rl),rVo=i(rl),rd=n(rl,"P",{});var loe=s(rd);tVo=r(loe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),KV=n(loe,"A",{href:!0});var Xbt=s(KV);aVo=r(Xbt,"from_pretrained()"),Xbt.forEach(t),nVo=r(loe," class method or the "),ZV=n(loe,"A",{href:!0});var zbt=s(ZV);sVo=r(zbt,"from_config()"),zbt.forEach(t),lVo=r(loe,` class
method.`),loe.forEach(t),iVo=i(rl),A7=n(rl,"P",{});var CVe=s(A7);dVo=r(CVe,"This class cannot be instantiated directly using "),Mue=n(CVe,"CODE",{});var Wbt=s(Mue);cVo=r(Wbt,"__init__()"),Wbt.forEach(t),mVo=r(CVe," (throws an error)."),CVe.forEach(t),fVo=i(rl),ft=n(rl,"DIV",{class:!0});var R6=s(ft);T(L7.$$.fragment,R6),gVo=i(R6),Eue=n(R6,"P",{});var Qbt=s(Eue);hVo=r(Qbt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Qbt.forEach(t),uVo=i(R6),td=n(R6,"P",{});var ioe=s(td);pVo=r(ioe,`Note:
Loading a model from its configuration file does `),Cue=n(ioe,"STRONG",{});var Hbt=s(Cue);_Vo=r(Hbt,"not"),Hbt.forEach(t),bVo=r(ioe,` load the model weights. It only affects the
model\u2019s configuration. Use `),eX=n(ioe,"A",{href:!0});var Ubt=s(eX);vVo=r(Ubt,"from_pretrained()"),Ubt.forEach(t),FVo=r(ioe," to load the model weights."),ioe.forEach(t),TVo=i(R6),T(WF.$$.fragment,R6),R6.forEach(t),MVo=i(rl),to=n(rl,"DIV",{class:!0});var ma=s(to);T(y7.$$.fragment,ma),EVo=i(ma),wue=n(ma,"P",{});var Jbt=s(wue);CVo=r(Jbt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Jbt.forEach(t),wVo=i(ma),ja=n(ma,"P",{});var P6=s(ja);AVo=r(P6,"The model class to instantiate is selected based on the "),Aue=n(P6,"CODE",{});var Ybt=s(Aue);LVo=r(Ybt,"model_type"),Ybt.forEach(t),yVo=r(P6,` property of the config object (either
passed as an argument or loaded from `),Lue=n(P6,"CODE",{});var Kbt=s(Lue);xVo=r(Kbt,"pretrained_model_name_or_path"),Kbt.forEach(t),$Vo=r(P6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yue=n(P6,"CODE",{});var Zbt=s(yue);kVo=r(Zbt,"pretrained_model_name_or_path"),Zbt.forEach(t),SVo=r(P6,":"),P6.forEach(t),RVo=i(ma),Zr=n(ma,"UL",{});var tl=s(Zr);QF=n(tl,"LI",{});var dSe=s(QF);xue=n(dSe,"STRONG",{});var evt=s(xue);PVo=r(evt,"bert"),evt.forEach(t),BVo=r(dSe," \u2014 "),oX=n(dSe,"A",{href:!0});var ovt=s(oX);IVo=r(ovt,"BertForNextSentencePrediction"),ovt.forEach(t),NVo=r(dSe," (BERT model)"),dSe.forEach(t),qVo=i(tl),HF=n(tl,"LI",{});var cSe=s(HF);$ue=n(cSe,"STRONG",{});var rvt=s($ue);jVo=r(rvt,"fnet"),rvt.forEach(t),DVo=r(cSe," \u2014 "),rX=n(cSe,"A",{href:!0});var tvt=s(rX);GVo=r(tvt,"FNetForNextSentencePrediction"),tvt.forEach(t),OVo=r(cSe," (FNet model)"),cSe.forEach(t),VVo=i(tl),UF=n(tl,"LI",{});var mSe=s(UF);kue=n(mSe,"STRONG",{});var avt=s(kue);XVo=r(avt,"megatron-bert"),avt.forEach(t),zVo=r(mSe," \u2014 "),tX=n(mSe,"A",{href:!0});var nvt=s(tX);WVo=r(nvt,"MegatronBertForNextSentencePrediction"),nvt.forEach(t),QVo=r(mSe," (Megatron-BERT model)"),mSe.forEach(t),HVo=i(tl),JF=n(tl,"LI",{});var fSe=s(JF);Sue=n(fSe,"STRONG",{});var svt=s(Sue);UVo=r(svt,"mobilebert"),svt.forEach(t),JVo=r(fSe," \u2014 "),aX=n(fSe,"A",{href:!0});var lvt=s(aX);YVo=r(lvt,"MobileBertForNextSentencePrediction"),lvt.forEach(t),KVo=r(fSe," (MobileBERT model)"),fSe.forEach(t),ZVo=i(tl),YF=n(tl,"LI",{});var gSe=s(YF);Rue=n(gSe,"STRONG",{});var ivt=s(Rue);eXo=r(ivt,"qdqbert"),ivt.forEach(t),oXo=r(gSe," \u2014 "),nX=n(gSe,"A",{href:!0});var dvt=s(nX);rXo=r(dvt,"QDQBertForNextSentencePrediction"),dvt.forEach(t),tXo=r(gSe," (QDQBert model)"),gSe.forEach(t),tl.forEach(t),aXo=i(ma),KF=n(ma,"P",{});var hSe=s(KF);nXo=r(hSe,"The model is set in evaluation mode by default using "),Pue=n(hSe,"CODE",{});var cvt=s(Pue);sXo=r(cvt,"model.eval()"),cvt.forEach(t),lXo=r(hSe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Bue=n(hSe,"CODE",{});var mvt=s(Bue);iXo=r(mvt,"model.train()"),mvt.forEach(t),hSe.forEach(t),dXo=i(ma),T(ZF.$$.fragment,ma),ma.forEach(t),rl.forEach(t),vGe=i(m),ad=n(m,"H2",{class:!0});var wVe=s(ad);e1=n(wVe,"A",{id:!0,class:!0,href:!0});var fvt=s(e1);Iue=n(fvt,"SPAN",{});var gvt=s(Iue);T(x7.$$.fragment,gvt),gvt.forEach(t),fvt.forEach(t),cXo=i(wVe),Nue=n(wVe,"SPAN",{});var hvt=s(Nue);mXo=r(hvt,"AutoModelForTokenClassification"),hvt.forEach(t),wVe.forEach(t),FGe=i(m),No=n(m,"DIV",{class:!0});var al=s(No);T($7.$$.fragment,al),fXo=i(al),nd=n(al,"P",{});var doe=s(nd);gXo=r(doe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),sX=n(doe,"A",{href:!0});var uvt=s(sX);hXo=r(uvt,"from_pretrained()"),uvt.forEach(t),uXo=r(doe," class method or the "),lX=n(doe,"A",{href:!0});var pvt=s(lX);pXo=r(pvt,"from_config()"),pvt.forEach(t),_Xo=r(doe,` class
method.`),doe.forEach(t),bXo=i(al),k7=n(al,"P",{});var AVe=s(k7);vXo=r(AVe,"This class cannot be instantiated directly using "),que=n(AVe,"CODE",{});var _vt=s(que);FXo=r(_vt,"__init__()"),_vt.forEach(t),TXo=r(AVe," (throws an error)."),AVe.forEach(t),MXo=i(al),gt=n(al,"DIV",{class:!0});var B6=s(gt);T(S7.$$.fragment,B6),EXo=i(B6),jue=n(B6,"P",{});var bvt=s(jue);CXo=r(bvt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),bvt.forEach(t),wXo=i(B6),sd=n(B6,"P",{});var coe=s(sd);AXo=r(coe,`Note:
Loading a model from its configuration file does `),Due=n(coe,"STRONG",{});var vvt=s(Due);LXo=r(vvt,"not"),vvt.forEach(t),yXo=r(coe,` load the model weights. It only affects the
model\u2019s configuration. Use `),iX=n(coe,"A",{href:!0});var Fvt=s(iX);xXo=r(Fvt,"from_pretrained()"),Fvt.forEach(t),$Xo=r(coe," to load the model weights."),coe.forEach(t),kXo=i(B6),T(o1.$$.fragment,B6),B6.forEach(t),SXo=i(al),ao=n(al,"DIV",{class:!0});var fa=s(ao);T(R7.$$.fragment,fa),RXo=i(fa),Gue=n(fa,"P",{});var Tvt=s(Gue);PXo=r(Tvt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Tvt.forEach(t),BXo=i(fa),Da=n(fa,"P",{});var I6=s(Da);IXo=r(I6,"The model class to instantiate is selected based on the "),Oue=n(I6,"CODE",{});var Mvt=s(Oue);NXo=r(Mvt,"model_type"),Mvt.forEach(t),qXo=r(I6,` property of the config object (either
passed as an argument or loaded from `),Vue=n(I6,"CODE",{});var Evt=s(Vue);jXo=r(Evt,"pretrained_model_name_or_path"),Evt.forEach(t),DXo=r(I6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xue=n(I6,"CODE",{});var Cvt=s(Xue);GXo=r(Cvt,"pretrained_model_name_or_path"),Cvt.forEach(t),OXo=r(I6,":"),I6.forEach(t),VXo=i(fa),U=n(fa,"UL",{});var J=s(U);r1=n(J,"LI",{});var uSe=s(r1);zue=n(uSe,"STRONG",{});var wvt=s(zue);XXo=r(wvt,"albert"),wvt.forEach(t),zXo=r(uSe," \u2014 "),dX=n(uSe,"A",{href:!0});var Avt=s(dX);WXo=r(Avt,"AlbertForTokenClassification"),Avt.forEach(t),QXo=r(uSe," (ALBERT model)"),uSe.forEach(t),HXo=i(J),t1=n(J,"LI",{});var pSe=s(t1);Wue=n(pSe,"STRONG",{});var Lvt=s(Wue);UXo=r(Lvt,"bert"),Lvt.forEach(t),JXo=r(pSe," \u2014 "),cX=n(pSe,"A",{href:!0});var yvt=s(cX);YXo=r(yvt,"BertForTokenClassification"),yvt.forEach(t),KXo=r(pSe," (BERT model)"),pSe.forEach(t),ZXo=i(J),a1=n(J,"LI",{});var _Se=s(a1);Que=n(_Se,"STRONG",{});var xvt=s(Que);ezo=r(xvt,"big_bird"),xvt.forEach(t),ozo=r(_Se," \u2014 "),mX=n(_Se,"A",{href:!0});var $vt=s(mX);rzo=r($vt,"BigBirdForTokenClassification"),$vt.forEach(t),tzo=r(_Se," (BigBird model)"),_Se.forEach(t),azo=i(J),n1=n(J,"LI",{});var bSe=s(n1);Hue=n(bSe,"STRONG",{});var kvt=s(Hue);nzo=r(kvt,"camembert"),kvt.forEach(t),szo=r(bSe," \u2014 "),fX=n(bSe,"A",{href:!0});var Svt=s(fX);lzo=r(Svt,"CamembertForTokenClassification"),Svt.forEach(t),izo=r(bSe," (CamemBERT model)"),bSe.forEach(t),dzo=i(J),s1=n(J,"LI",{});var vSe=s(s1);Uue=n(vSe,"STRONG",{});var Rvt=s(Uue);czo=r(Rvt,"canine"),Rvt.forEach(t),mzo=r(vSe," \u2014 "),gX=n(vSe,"A",{href:!0});var Pvt=s(gX);fzo=r(Pvt,"CanineForTokenClassification"),Pvt.forEach(t),gzo=r(vSe," (CANINE model)"),vSe.forEach(t),hzo=i(J),l1=n(J,"LI",{});var FSe=s(l1);Jue=n(FSe,"STRONG",{});var Bvt=s(Jue);uzo=r(Bvt,"convbert"),Bvt.forEach(t),pzo=r(FSe," \u2014 "),hX=n(FSe,"A",{href:!0});var Ivt=s(hX);_zo=r(Ivt,"ConvBertForTokenClassification"),Ivt.forEach(t),bzo=r(FSe," (ConvBERT model)"),FSe.forEach(t),vzo=i(J),i1=n(J,"LI",{});var TSe=s(i1);Yue=n(TSe,"STRONG",{});var Nvt=s(Yue);Fzo=r(Nvt,"data2vec-text"),Nvt.forEach(t),Tzo=r(TSe," \u2014 "),uX=n(TSe,"A",{href:!0});var qvt=s(uX);Mzo=r(qvt,"Data2VecTextForTokenClassification"),qvt.forEach(t),Ezo=r(TSe," (Data2VecText model)"),TSe.forEach(t),Czo=i(J),d1=n(J,"LI",{});var MSe=s(d1);Kue=n(MSe,"STRONG",{});var jvt=s(Kue);wzo=r(jvt,"deberta"),jvt.forEach(t),Azo=r(MSe," \u2014 "),pX=n(MSe,"A",{href:!0});var Dvt=s(pX);Lzo=r(Dvt,"DebertaForTokenClassification"),Dvt.forEach(t),yzo=r(MSe," (DeBERTa model)"),MSe.forEach(t),xzo=i(J),c1=n(J,"LI",{});var ESe=s(c1);Zue=n(ESe,"STRONG",{});var Gvt=s(Zue);$zo=r(Gvt,"deberta-v2"),Gvt.forEach(t),kzo=r(ESe," \u2014 "),_X=n(ESe,"A",{href:!0});var Ovt=s(_X);Szo=r(Ovt,"DebertaV2ForTokenClassification"),Ovt.forEach(t),Rzo=r(ESe," (DeBERTa-v2 model)"),ESe.forEach(t),Pzo=i(J),m1=n(J,"LI",{});var CSe=s(m1);epe=n(CSe,"STRONG",{});var Vvt=s(epe);Bzo=r(Vvt,"distilbert"),Vvt.forEach(t),Izo=r(CSe," \u2014 "),bX=n(CSe,"A",{href:!0});var Xvt=s(bX);Nzo=r(Xvt,"DistilBertForTokenClassification"),Xvt.forEach(t),qzo=r(CSe," (DistilBERT model)"),CSe.forEach(t),jzo=i(J),f1=n(J,"LI",{});var wSe=s(f1);ope=n(wSe,"STRONG",{});var zvt=s(ope);Dzo=r(zvt,"electra"),zvt.forEach(t),Gzo=r(wSe," \u2014 "),vX=n(wSe,"A",{href:!0});var Wvt=s(vX);Ozo=r(Wvt,"ElectraForTokenClassification"),Wvt.forEach(t),Vzo=r(wSe," (ELECTRA model)"),wSe.forEach(t),Xzo=i(J),g1=n(J,"LI",{});var ASe=s(g1);rpe=n(ASe,"STRONG",{});var Qvt=s(rpe);zzo=r(Qvt,"flaubert"),Qvt.forEach(t),Wzo=r(ASe," \u2014 "),FX=n(ASe,"A",{href:!0});var Hvt=s(FX);Qzo=r(Hvt,"FlaubertForTokenClassification"),Hvt.forEach(t),Hzo=r(ASe," (FlauBERT model)"),ASe.forEach(t),Uzo=i(J),h1=n(J,"LI",{});var LSe=s(h1);tpe=n(LSe,"STRONG",{});var Uvt=s(tpe);Jzo=r(Uvt,"fnet"),Uvt.forEach(t),Yzo=r(LSe," \u2014 "),TX=n(LSe,"A",{href:!0});var Jvt=s(TX);Kzo=r(Jvt,"FNetForTokenClassification"),Jvt.forEach(t),Zzo=r(LSe," (FNet model)"),LSe.forEach(t),eWo=i(J),u1=n(J,"LI",{});var ySe=s(u1);ape=n(ySe,"STRONG",{});var Yvt=s(ape);oWo=r(Yvt,"funnel"),Yvt.forEach(t),rWo=r(ySe," \u2014 "),MX=n(ySe,"A",{href:!0});var Kvt=s(MX);tWo=r(Kvt,"FunnelForTokenClassification"),Kvt.forEach(t),aWo=r(ySe," (Funnel Transformer model)"),ySe.forEach(t),nWo=i(J),p1=n(J,"LI",{});var xSe=s(p1);npe=n(xSe,"STRONG",{});var Zvt=s(npe);sWo=r(Zvt,"gpt2"),Zvt.forEach(t),lWo=r(xSe," \u2014 "),EX=n(xSe,"A",{href:!0});var eFt=s(EX);iWo=r(eFt,"GPT2ForTokenClassification"),eFt.forEach(t),dWo=r(xSe," (OpenAI GPT-2 model)"),xSe.forEach(t),cWo=i(J),_1=n(J,"LI",{});var $Se=s(_1);spe=n($Se,"STRONG",{});var oFt=s(spe);mWo=r(oFt,"ibert"),oFt.forEach(t),fWo=r($Se," \u2014 "),CX=n($Se,"A",{href:!0});var rFt=s(CX);gWo=r(rFt,"IBertForTokenClassification"),rFt.forEach(t),hWo=r($Se," (I-BERT model)"),$Se.forEach(t),uWo=i(J),b1=n(J,"LI",{});var kSe=s(b1);lpe=n(kSe,"STRONG",{});var tFt=s(lpe);pWo=r(tFt,"layoutlm"),tFt.forEach(t),_Wo=r(kSe," \u2014 "),wX=n(kSe,"A",{href:!0});var aFt=s(wX);bWo=r(aFt,"LayoutLMForTokenClassification"),aFt.forEach(t),vWo=r(kSe," (LayoutLM model)"),kSe.forEach(t),FWo=i(J),v1=n(J,"LI",{});var SSe=s(v1);ipe=n(SSe,"STRONG",{});var nFt=s(ipe);TWo=r(nFt,"layoutlmv2"),nFt.forEach(t),MWo=r(SSe," \u2014 "),AX=n(SSe,"A",{href:!0});var sFt=s(AX);EWo=r(sFt,"LayoutLMv2ForTokenClassification"),sFt.forEach(t),CWo=r(SSe," (LayoutLMv2 model)"),SSe.forEach(t),wWo=i(J),F1=n(J,"LI",{});var RSe=s(F1);dpe=n(RSe,"STRONG",{});var lFt=s(dpe);AWo=r(lFt,"layoutlmv3"),lFt.forEach(t),LWo=r(RSe," \u2014 "),LX=n(RSe,"A",{href:!0});var iFt=s(LX);yWo=r(iFt,"LayoutLMv3ForTokenClassification"),iFt.forEach(t),xWo=r(RSe," (LayoutLMv3 model)"),RSe.forEach(t),$Wo=i(J),T1=n(J,"LI",{});var PSe=s(T1);cpe=n(PSe,"STRONG",{});var dFt=s(cpe);kWo=r(dFt,"longformer"),dFt.forEach(t),SWo=r(PSe," \u2014 "),yX=n(PSe,"A",{href:!0});var cFt=s(yX);RWo=r(cFt,"LongformerForTokenClassification"),cFt.forEach(t),PWo=r(PSe," (Longformer model)"),PSe.forEach(t),BWo=i(J),M1=n(J,"LI",{});var BSe=s(M1);mpe=n(BSe,"STRONG",{});var mFt=s(mpe);IWo=r(mFt,"megatron-bert"),mFt.forEach(t),NWo=r(BSe," \u2014 "),xX=n(BSe,"A",{href:!0});var fFt=s(xX);qWo=r(fFt,"MegatronBertForTokenClassification"),fFt.forEach(t),jWo=r(BSe," (Megatron-BERT model)"),BSe.forEach(t),DWo=i(J),E1=n(J,"LI",{});var ISe=s(E1);fpe=n(ISe,"STRONG",{});var gFt=s(fpe);GWo=r(gFt,"mobilebert"),gFt.forEach(t),OWo=r(ISe," \u2014 "),$X=n(ISe,"A",{href:!0});var hFt=s($X);VWo=r(hFt,"MobileBertForTokenClassification"),hFt.forEach(t),XWo=r(ISe," (MobileBERT model)"),ISe.forEach(t),zWo=i(J),C1=n(J,"LI",{});var NSe=s(C1);gpe=n(NSe,"STRONG",{});var uFt=s(gpe);WWo=r(uFt,"mpnet"),uFt.forEach(t),QWo=r(NSe," \u2014 "),kX=n(NSe,"A",{href:!0});var pFt=s(kX);HWo=r(pFt,"MPNetForTokenClassification"),pFt.forEach(t),UWo=r(NSe," (MPNet model)"),NSe.forEach(t),JWo=i(J),w1=n(J,"LI",{});var qSe=s(w1);hpe=n(qSe,"STRONG",{});var _Ft=s(hpe);YWo=r(_Ft,"nystromformer"),_Ft.forEach(t),KWo=r(qSe," \u2014 "),SX=n(qSe,"A",{href:!0});var bFt=s(SX);ZWo=r(bFt,"NystromformerForTokenClassification"),bFt.forEach(t),eQo=r(qSe," (Nystr\xF6mformer model)"),qSe.forEach(t),oQo=i(J),A1=n(J,"LI",{});var jSe=s(A1);upe=n(jSe,"STRONG",{});var vFt=s(upe);rQo=r(vFt,"qdqbert"),vFt.forEach(t),tQo=r(jSe," \u2014 "),RX=n(jSe,"A",{href:!0});var FFt=s(RX);aQo=r(FFt,"QDQBertForTokenClassification"),FFt.forEach(t),nQo=r(jSe," (QDQBert model)"),jSe.forEach(t),sQo=i(J),L1=n(J,"LI",{});var DSe=s(L1);ppe=n(DSe,"STRONG",{});var TFt=s(ppe);lQo=r(TFt,"rembert"),TFt.forEach(t),iQo=r(DSe," \u2014 "),PX=n(DSe,"A",{href:!0});var MFt=s(PX);dQo=r(MFt,"RemBertForTokenClassification"),MFt.forEach(t),cQo=r(DSe," (RemBERT model)"),DSe.forEach(t),mQo=i(J),y1=n(J,"LI",{});var GSe=s(y1);_pe=n(GSe,"STRONG",{});var EFt=s(_pe);fQo=r(EFt,"roberta"),EFt.forEach(t),gQo=r(GSe," \u2014 "),BX=n(GSe,"A",{href:!0});var CFt=s(BX);hQo=r(CFt,"RobertaForTokenClassification"),CFt.forEach(t),uQo=r(GSe," (RoBERTa model)"),GSe.forEach(t),pQo=i(J),x1=n(J,"LI",{});var OSe=s(x1);bpe=n(OSe,"STRONG",{});var wFt=s(bpe);_Qo=r(wFt,"roformer"),wFt.forEach(t),bQo=r(OSe," \u2014 "),IX=n(OSe,"A",{href:!0});var AFt=s(IX);vQo=r(AFt,"RoFormerForTokenClassification"),AFt.forEach(t),FQo=r(OSe," (RoFormer model)"),OSe.forEach(t),TQo=i(J),$1=n(J,"LI",{});var VSe=s($1);vpe=n(VSe,"STRONG",{});var LFt=s(vpe);MQo=r(LFt,"squeezebert"),LFt.forEach(t),EQo=r(VSe," \u2014 "),NX=n(VSe,"A",{href:!0});var yFt=s(NX);CQo=r(yFt,"SqueezeBertForTokenClassification"),yFt.forEach(t),wQo=r(VSe," (SqueezeBERT model)"),VSe.forEach(t),AQo=i(J),k1=n(J,"LI",{});var XSe=s(k1);Fpe=n(XSe,"STRONG",{});var xFt=s(Fpe);LQo=r(xFt,"xlm"),xFt.forEach(t),yQo=r(XSe," \u2014 "),qX=n(XSe,"A",{href:!0});var $Ft=s(qX);xQo=r($Ft,"XLMForTokenClassification"),$Ft.forEach(t),$Qo=r(XSe," (XLM model)"),XSe.forEach(t),kQo=i(J),S1=n(J,"LI",{});var zSe=s(S1);Tpe=n(zSe,"STRONG",{});var kFt=s(Tpe);SQo=r(kFt,"xlm-roberta"),kFt.forEach(t),RQo=r(zSe," \u2014 "),jX=n(zSe,"A",{href:!0});var SFt=s(jX);PQo=r(SFt,"XLMRobertaForTokenClassification"),SFt.forEach(t),BQo=r(zSe," (XLM-RoBERTa model)"),zSe.forEach(t),IQo=i(J),R1=n(J,"LI",{});var WSe=s(R1);Mpe=n(WSe,"STRONG",{});var RFt=s(Mpe);NQo=r(RFt,"xlm-roberta-xl"),RFt.forEach(t),qQo=r(WSe," \u2014 "),DX=n(WSe,"A",{href:!0});var PFt=s(DX);jQo=r(PFt,"XLMRobertaXLForTokenClassification"),PFt.forEach(t),DQo=r(WSe," (XLM-RoBERTa-XL model)"),WSe.forEach(t),GQo=i(J),P1=n(J,"LI",{});var QSe=s(P1);Epe=n(QSe,"STRONG",{});var BFt=s(Epe);OQo=r(BFt,"xlnet"),BFt.forEach(t),VQo=r(QSe," \u2014 "),GX=n(QSe,"A",{href:!0});var IFt=s(GX);XQo=r(IFt,"XLNetForTokenClassification"),IFt.forEach(t),zQo=r(QSe," (XLNet model)"),QSe.forEach(t),WQo=i(J),B1=n(J,"LI",{});var HSe=s(B1);Cpe=n(HSe,"STRONG",{});var NFt=s(Cpe);QQo=r(NFt,"yoso"),NFt.forEach(t),HQo=r(HSe," \u2014 "),OX=n(HSe,"A",{href:!0});var qFt=s(OX);UQo=r(qFt,"YosoForTokenClassification"),qFt.forEach(t),JQo=r(HSe," (YOSO model)"),HSe.forEach(t),J.forEach(t),YQo=i(fa),I1=n(fa,"P",{});var USe=s(I1);KQo=r(USe,"The model is set in evaluation mode by default using "),wpe=n(USe,"CODE",{});var jFt=s(wpe);ZQo=r(jFt,"model.eval()"),jFt.forEach(t),eHo=r(USe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ape=n(USe,"CODE",{});var DFt=s(Ape);oHo=r(DFt,"model.train()"),DFt.forEach(t),USe.forEach(t),rHo=i(fa),T(N1.$$.fragment,fa),fa.forEach(t),al.forEach(t),TGe=i(m),ld=n(m,"H2",{class:!0});var LVe=s(ld);q1=n(LVe,"A",{id:!0,class:!0,href:!0});var GFt=s(q1);Lpe=n(GFt,"SPAN",{});var OFt=s(Lpe);T(P7.$$.fragment,OFt),OFt.forEach(t),GFt.forEach(t),tHo=i(LVe),ype=n(LVe,"SPAN",{});var VFt=s(ype);aHo=r(VFt,"AutoModelForQuestionAnswering"),VFt.forEach(t),LVe.forEach(t),MGe=i(m),qo=n(m,"DIV",{class:!0});var nl=s(qo);T(B7.$$.fragment,nl),nHo=i(nl),id=n(nl,"P",{});var moe=s(id);sHo=r(moe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),VX=n(moe,"A",{href:!0});var XFt=s(VX);lHo=r(XFt,"from_pretrained()"),XFt.forEach(t),iHo=r(moe," class method or the "),XX=n(moe,"A",{href:!0});var zFt=s(XX);dHo=r(zFt,"from_config()"),zFt.forEach(t),cHo=r(moe,` class
method.`),moe.forEach(t),mHo=i(nl),I7=n(nl,"P",{});var yVe=s(I7);fHo=r(yVe,"This class cannot be instantiated directly using "),xpe=n(yVe,"CODE",{});var WFt=s(xpe);gHo=r(WFt,"__init__()"),WFt.forEach(t),hHo=r(yVe," (throws an error)."),yVe.forEach(t),uHo=i(nl),ht=n(nl,"DIV",{class:!0});var N6=s(ht);T(N7.$$.fragment,N6),pHo=i(N6),$pe=n(N6,"P",{});var QFt=s($pe);_Ho=r(QFt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),QFt.forEach(t),bHo=i(N6),dd=n(N6,"P",{});var foe=s(dd);vHo=r(foe,`Note:
Loading a model from its configuration file does `),kpe=n(foe,"STRONG",{});var HFt=s(kpe);FHo=r(HFt,"not"),HFt.forEach(t),THo=r(foe,` load the model weights. It only affects the
model\u2019s configuration. Use `),zX=n(foe,"A",{href:!0});var UFt=s(zX);MHo=r(UFt,"from_pretrained()"),UFt.forEach(t),EHo=r(foe," to load the model weights."),foe.forEach(t),CHo=i(N6),T(j1.$$.fragment,N6),N6.forEach(t),wHo=i(nl),no=n(nl,"DIV",{class:!0});var ga=s(no);T(q7.$$.fragment,ga),AHo=i(ga),Spe=n(ga,"P",{});var JFt=s(Spe);LHo=r(JFt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),JFt.forEach(t),yHo=i(ga),Ga=n(ga,"P",{});var q6=s(Ga);xHo=r(q6,"The model class to instantiate is selected based on the "),Rpe=n(q6,"CODE",{});var YFt=s(Rpe);$Ho=r(YFt,"model_type"),YFt.forEach(t),kHo=r(q6,` property of the config object (either
passed as an argument or loaded from `),Ppe=n(q6,"CODE",{});var KFt=s(Ppe);SHo=r(KFt,"pretrained_model_name_or_path"),KFt.forEach(t),RHo=r(q6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bpe=n(q6,"CODE",{});var ZFt=s(Bpe);PHo=r(ZFt,"pretrained_model_name_or_path"),ZFt.forEach(t),BHo=r(q6,":"),q6.forEach(t),IHo=i(ga),V=n(ga,"UL",{});var X=s(V);D1=n(X,"LI",{});var JSe=s(D1);Ipe=n(JSe,"STRONG",{});var e1t=s(Ipe);NHo=r(e1t,"albert"),e1t.forEach(t),qHo=r(JSe," \u2014 "),WX=n(JSe,"A",{href:!0});var o1t=s(WX);jHo=r(o1t,"AlbertForQuestionAnswering"),o1t.forEach(t),DHo=r(JSe," (ALBERT model)"),JSe.forEach(t),GHo=i(X),G1=n(X,"LI",{});var YSe=s(G1);Npe=n(YSe,"STRONG",{});var r1t=s(Npe);OHo=r(r1t,"bart"),r1t.forEach(t),VHo=r(YSe," \u2014 "),QX=n(YSe,"A",{href:!0});var t1t=s(QX);XHo=r(t1t,"BartForQuestionAnswering"),t1t.forEach(t),zHo=r(YSe," (BART model)"),YSe.forEach(t),WHo=i(X),O1=n(X,"LI",{});var KSe=s(O1);qpe=n(KSe,"STRONG",{});var a1t=s(qpe);QHo=r(a1t,"bert"),a1t.forEach(t),HHo=r(KSe," \u2014 "),HX=n(KSe,"A",{href:!0});var n1t=s(HX);UHo=r(n1t,"BertForQuestionAnswering"),n1t.forEach(t),JHo=r(KSe," (BERT model)"),KSe.forEach(t),YHo=i(X),V1=n(X,"LI",{});var ZSe=s(V1);jpe=n(ZSe,"STRONG",{});var s1t=s(jpe);KHo=r(s1t,"big_bird"),s1t.forEach(t),ZHo=r(ZSe," \u2014 "),UX=n(ZSe,"A",{href:!0});var l1t=s(UX);eUo=r(l1t,"BigBirdForQuestionAnswering"),l1t.forEach(t),oUo=r(ZSe," (BigBird model)"),ZSe.forEach(t),rUo=i(X),X1=n(X,"LI",{});var eRe=s(X1);Dpe=n(eRe,"STRONG",{});var i1t=s(Dpe);tUo=r(i1t,"bigbird_pegasus"),i1t.forEach(t),aUo=r(eRe," \u2014 "),JX=n(eRe,"A",{href:!0});var d1t=s(JX);nUo=r(d1t,"BigBirdPegasusForQuestionAnswering"),d1t.forEach(t),sUo=r(eRe," (BigBird-Pegasus model)"),eRe.forEach(t),lUo=i(X),z1=n(X,"LI",{});var oRe=s(z1);Gpe=n(oRe,"STRONG",{});var c1t=s(Gpe);iUo=r(c1t,"camembert"),c1t.forEach(t),dUo=r(oRe," \u2014 "),YX=n(oRe,"A",{href:!0});var m1t=s(YX);cUo=r(m1t,"CamembertForQuestionAnswering"),m1t.forEach(t),mUo=r(oRe," (CamemBERT model)"),oRe.forEach(t),fUo=i(X),W1=n(X,"LI",{});var rRe=s(W1);Ope=n(rRe,"STRONG",{});var f1t=s(Ope);gUo=r(f1t,"canine"),f1t.forEach(t),hUo=r(rRe," \u2014 "),KX=n(rRe,"A",{href:!0});var g1t=s(KX);uUo=r(g1t,"CanineForQuestionAnswering"),g1t.forEach(t),pUo=r(rRe," (CANINE model)"),rRe.forEach(t),_Uo=i(X),Q1=n(X,"LI",{});var tRe=s(Q1);Vpe=n(tRe,"STRONG",{});var h1t=s(Vpe);bUo=r(h1t,"convbert"),h1t.forEach(t),vUo=r(tRe," \u2014 "),ZX=n(tRe,"A",{href:!0});var u1t=s(ZX);FUo=r(u1t,"ConvBertForQuestionAnswering"),u1t.forEach(t),TUo=r(tRe," (ConvBERT model)"),tRe.forEach(t),MUo=i(X),H1=n(X,"LI",{});var aRe=s(H1);Xpe=n(aRe,"STRONG",{});var p1t=s(Xpe);EUo=r(p1t,"data2vec-text"),p1t.forEach(t),CUo=r(aRe," \u2014 "),ez=n(aRe,"A",{href:!0});var _1t=s(ez);wUo=r(_1t,"Data2VecTextForQuestionAnswering"),_1t.forEach(t),AUo=r(aRe," (Data2VecText model)"),aRe.forEach(t),LUo=i(X),U1=n(X,"LI",{});var nRe=s(U1);zpe=n(nRe,"STRONG",{});var b1t=s(zpe);yUo=r(b1t,"deberta"),b1t.forEach(t),xUo=r(nRe," \u2014 "),oz=n(nRe,"A",{href:!0});var v1t=s(oz);$Uo=r(v1t,"DebertaForQuestionAnswering"),v1t.forEach(t),kUo=r(nRe," (DeBERTa model)"),nRe.forEach(t),SUo=i(X),J1=n(X,"LI",{});var sRe=s(J1);Wpe=n(sRe,"STRONG",{});var F1t=s(Wpe);RUo=r(F1t,"deberta-v2"),F1t.forEach(t),PUo=r(sRe," \u2014 "),rz=n(sRe,"A",{href:!0});var T1t=s(rz);BUo=r(T1t,"DebertaV2ForQuestionAnswering"),T1t.forEach(t),IUo=r(sRe," (DeBERTa-v2 model)"),sRe.forEach(t),NUo=i(X),Y1=n(X,"LI",{});var lRe=s(Y1);Qpe=n(lRe,"STRONG",{});var M1t=s(Qpe);qUo=r(M1t,"distilbert"),M1t.forEach(t),jUo=r(lRe," \u2014 "),tz=n(lRe,"A",{href:!0});var E1t=s(tz);DUo=r(E1t,"DistilBertForQuestionAnswering"),E1t.forEach(t),GUo=r(lRe," (DistilBERT model)"),lRe.forEach(t),OUo=i(X),K1=n(X,"LI",{});var iRe=s(K1);Hpe=n(iRe,"STRONG",{});var C1t=s(Hpe);VUo=r(C1t,"electra"),C1t.forEach(t),XUo=r(iRe," \u2014 "),az=n(iRe,"A",{href:!0});var w1t=s(az);zUo=r(w1t,"ElectraForQuestionAnswering"),w1t.forEach(t),WUo=r(iRe," (ELECTRA model)"),iRe.forEach(t),QUo=i(X),Z1=n(X,"LI",{});var dRe=s(Z1);Upe=n(dRe,"STRONG",{});var A1t=s(Upe);HUo=r(A1t,"flaubert"),A1t.forEach(t),UUo=r(dRe," \u2014 "),nz=n(dRe,"A",{href:!0});var L1t=s(nz);JUo=r(L1t,"FlaubertForQuestionAnsweringSimple"),L1t.forEach(t),YUo=r(dRe," (FlauBERT model)"),dRe.forEach(t),KUo=i(X),eT=n(X,"LI",{});var cRe=s(eT);Jpe=n(cRe,"STRONG",{});var y1t=s(Jpe);ZUo=r(y1t,"fnet"),y1t.forEach(t),eJo=r(cRe," \u2014 "),sz=n(cRe,"A",{href:!0});var x1t=s(sz);oJo=r(x1t,"FNetForQuestionAnswering"),x1t.forEach(t),rJo=r(cRe," (FNet model)"),cRe.forEach(t),tJo=i(X),oT=n(X,"LI",{});var mRe=s(oT);Ype=n(mRe,"STRONG",{});var $1t=s(Ype);aJo=r($1t,"funnel"),$1t.forEach(t),nJo=r(mRe," \u2014 "),lz=n(mRe,"A",{href:!0});var k1t=s(lz);sJo=r(k1t,"FunnelForQuestionAnswering"),k1t.forEach(t),lJo=r(mRe," (Funnel Transformer model)"),mRe.forEach(t),iJo=i(X),rT=n(X,"LI",{});var fRe=s(rT);Kpe=n(fRe,"STRONG",{});var S1t=s(Kpe);dJo=r(S1t,"gptj"),S1t.forEach(t),cJo=r(fRe," \u2014 "),iz=n(fRe,"A",{href:!0});var R1t=s(iz);mJo=r(R1t,"GPTJForQuestionAnswering"),R1t.forEach(t),fJo=r(fRe," (GPT-J model)"),fRe.forEach(t),gJo=i(X),tT=n(X,"LI",{});var gRe=s(tT);Zpe=n(gRe,"STRONG",{});var P1t=s(Zpe);hJo=r(P1t,"ibert"),P1t.forEach(t),uJo=r(gRe," \u2014 "),dz=n(gRe,"A",{href:!0});var B1t=s(dz);pJo=r(B1t,"IBertForQuestionAnswering"),B1t.forEach(t),_Jo=r(gRe," (I-BERT model)"),gRe.forEach(t),bJo=i(X),aT=n(X,"LI",{});var hRe=s(aT);e_e=n(hRe,"STRONG",{});var I1t=s(e_e);vJo=r(I1t,"layoutlmv2"),I1t.forEach(t),FJo=r(hRe," \u2014 "),cz=n(hRe,"A",{href:!0});var N1t=s(cz);TJo=r(N1t,"LayoutLMv2ForQuestionAnswering"),N1t.forEach(t),MJo=r(hRe," (LayoutLMv2 model)"),hRe.forEach(t),EJo=i(X),nT=n(X,"LI",{});var uRe=s(nT);o_e=n(uRe,"STRONG",{});var q1t=s(o_e);CJo=r(q1t,"layoutlmv3"),q1t.forEach(t),wJo=r(uRe," \u2014 "),mz=n(uRe,"A",{href:!0});var j1t=s(mz);AJo=r(j1t,"LayoutLMv3ForQuestionAnswering"),j1t.forEach(t),LJo=r(uRe," (LayoutLMv3 model)"),uRe.forEach(t),yJo=i(X),sT=n(X,"LI",{});var pRe=s(sT);r_e=n(pRe,"STRONG",{});var D1t=s(r_e);xJo=r(D1t,"led"),D1t.forEach(t),$Jo=r(pRe," \u2014 "),fz=n(pRe,"A",{href:!0});var G1t=s(fz);kJo=r(G1t,"LEDForQuestionAnswering"),G1t.forEach(t),SJo=r(pRe," (LED model)"),pRe.forEach(t),RJo=i(X),lT=n(X,"LI",{});var _Re=s(lT);t_e=n(_Re,"STRONG",{});var O1t=s(t_e);PJo=r(O1t,"longformer"),O1t.forEach(t),BJo=r(_Re," \u2014 "),gz=n(_Re,"A",{href:!0});var V1t=s(gz);IJo=r(V1t,"LongformerForQuestionAnswering"),V1t.forEach(t),NJo=r(_Re," (Longformer model)"),_Re.forEach(t),qJo=i(X),iT=n(X,"LI",{});var bRe=s(iT);a_e=n(bRe,"STRONG",{});var X1t=s(a_e);jJo=r(X1t,"lxmert"),X1t.forEach(t),DJo=r(bRe," \u2014 "),hz=n(bRe,"A",{href:!0});var z1t=s(hz);GJo=r(z1t,"LxmertForQuestionAnswering"),z1t.forEach(t),OJo=r(bRe," (LXMERT model)"),bRe.forEach(t),VJo=i(X),dT=n(X,"LI",{});var vRe=s(dT);n_e=n(vRe,"STRONG",{});var W1t=s(n_e);XJo=r(W1t,"mbart"),W1t.forEach(t),zJo=r(vRe," \u2014 "),uz=n(vRe,"A",{href:!0});var Q1t=s(uz);WJo=r(Q1t,"MBartForQuestionAnswering"),Q1t.forEach(t),QJo=r(vRe," (mBART model)"),vRe.forEach(t),HJo=i(X),cT=n(X,"LI",{});var FRe=s(cT);s_e=n(FRe,"STRONG",{});var H1t=s(s_e);UJo=r(H1t,"megatron-bert"),H1t.forEach(t),JJo=r(FRe," \u2014 "),pz=n(FRe,"A",{href:!0});var U1t=s(pz);YJo=r(U1t,"MegatronBertForQuestionAnswering"),U1t.forEach(t),KJo=r(FRe," (Megatron-BERT model)"),FRe.forEach(t),ZJo=i(X),mT=n(X,"LI",{});var TRe=s(mT);l_e=n(TRe,"STRONG",{});var J1t=s(l_e);eYo=r(J1t,"mobilebert"),J1t.forEach(t),oYo=r(TRe," \u2014 "),_z=n(TRe,"A",{href:!0});var Y1t=s(_z);rYo=r(Y1t,"MobileBertForQuestionAnswering"),Y1t.forEach(t),tYo=r(TRe," (MobileBERT model)"),TRe.forEach(t),aYo=i(X),fT=n(X,"LI",{});var MRe=s(fT);i_e=n(MRe,"STRONG",{});var K1t=s(i_e);nYo=r(K1t,"mpnet"),K1t.forEach(t),sYo=r(MRe," \u2014 "),bz=n(MRe,"A",{href:!0});var Z1t=s(bz);lYo=r(Z1t,"MPNetForQuestionAnswering"),Z1t.forEach(t),iYo=r(MRe," (MPNet model)"),MRe.forEach(t),dYo=i(X),gT=n(X,"LI",{});var ERe=s(gT);d_e=n(ERe,"STRONG",{});var eTt=s(d_e);cYo=r(eTt,"nystromformer"),eTt.forEach(t),mYo=r(ERe," \u2014 "),vz=n(ERe,"A",{href:!0});var oTt=s(vz);fYo=r(oTt,"NystromformerForQuestionAnswering"),oTt.forEach(t),gYo=r(ERe," (Nystr\xF6mformer model)"),ERe.forEach(t),hYo=i(X),hT=n(X,"LI",{});var CRe=s(hT);c_e=n(CRe,"STRONG",{});var rTt=s(c_e);uYo=r(rTt,"qdqbert"),rTt.forEach(t),pYo=r(CRe," \u2014 "),Fz=n(CRe,"A",{href:!0});var tTt=s(Fz);_Yo=r(tTt,"QDQBertForQuestionAnswering"),tTt.forEach(t),bYo=r(CRe," (QDQBert model)"),CRe.forEach(t),vYo=i(X),uT=n(X,"LI",{});var wRe=s(uT);m_e=n(wRe,"STRONG",{});var aTt=s(m_e);FYo=r(aTt,"reformer"),aTt.forEach(t),TYo=r(wRe," \u2014 "),Tz=n(wRe,"A",{href:!0});var nTt=s(Tz);MYo=r(nTt,"ReformerForQuestionAnswering"),nTt.forEach(t),EYo=r(wRe," (Reformer model)"),wRe.forEach(t),CYo=i(X),pT=n(X,"LI",{});var ARe=s(pT);f_e=n(ARe,"STRONG",{});var sTt=s(f_e);wYo=r(sTt,"rembert"),sTt.forEach(t),AYo=r(ARe," \u2014 "),Mz=n(ARe,"A",{href:!0});var lTt=s(Mz);LYo=r(lTt,"RemBertForQuestionAnswering"),lTt.forEach(t),yYo=r(ARe," (RemBERT model)"),ARe.forEach(t),xYo=i(X),_T=n(X,"LI",{});var LRe=s(_T);g_e=n(LRe,"STRONG",{});var iTt=s(g_e);$Yo=r(iTt,"roberta"),iTt.forEach(t),kYo=r(LRe," \u2014 "),Ez=n(LRe,"A",{href:!0});var dTt=s(Ez);SYo=r(dTt,"RobertaForQuestionAnswering"),dTt.forEach(t),RYo=r(LRe," (RoBERTa model)"),LRe.forEach(t),PYo=i(X),bT=n(X,"LI",{});var yRe=s(bT);h_e=n(yRe,"STRONG",{});var cTt=s(h_e);BYo=r(cTt,"roformer"),cTt.forEach(t),IYo=r(yRe," \u2014 "),Cz=n(yRe,"A",{href:!0});var mTt=s(Cz);NYo=r(mTt,"RoFormerForQuestionAnswering"),mTt.forEach(t),qYo=r(yRe," (RoFormer model)"),yRe.forEach(t),jYo=i(X),vT=n(X,"LI",{});var xRe=s(vT);u_e=n(xRe,"STRONG",{});var fTt=s(u_e);DYo=r(fTt,"splinter"),fTt.forEach(t),GYo=r(xRe," \u2014 "),wz=n(xRe,"A",{href:!0});var gTt=s(wz);OYo=r(gTt,"SplinterForQuestionAnswering"),gTt.forEach(t),VYo=r(xRe," (Splinter model)"),xRe.forEach(t),XYo=i(X),FT=n(X,"LI",{});var $Re=s(FT);p_e=n($Re,"STRONG",{});var hTt=s(p_e);zYo=r(hTt,"squeezebert"),hTt.forEach(t),WYo=r($Re," \u2014 "),Az=n($Re,"A",{href:!0});var uTt=s(Az);QYo=r(uTt,"SqueezeBertForQuestionAnswering"),uTt.forEach(t),HYo=r($Re," (SqueezeBERT model)"),$Re.forEach(t),UYo=i(X),TT=n(X,"LI",{});var kRe=s(TT);__e=n(kRe,"STRONG",{});var pTt=s(__e);JYo=r(pTt,"xlm"),pTt.forEach(t),YYo=r(kRe," \u2014 "),Lz=n(kRe,"A",{href:!0});var _Tt=s(Lz);KYo=r(_Tt,"XLMForQuestionAnsweringSimple"),_Tt.forEach(t),ZYo=r(kRe," (XLM model)"),kRe.forEach(t),eKo=i(X),MT=n(X,"LI",{});var SRe=s(MT);b_e=n(SRe,"STRONG",{});var bTt=s(b_e);oKo=r(bTt,"xlm-roberta"),bTt.forEach(t),rKo=r(SRe," \u2014 "),yz=n(SRe,"A",{href:!0});var vTt=s(yz);tKo=r(vTt,"XLMRobertaForQuestionAnswering"),vTt.forEach(t),aKo=r(SRe," (XLM-RoBERTa model)"),SRe.forEach(t),nKo=i(X),ET=n(X,"LI",{});var RRe=s(ET);v_e=n(RRe,"STRONG",{});var FTt=s(v_e);sKo=r(FTt,"xlm-roberta-xl"),FTt.forEach(t),lKo=r(RRe," \u2014 "),xz=n(RRe,"A",{href:!0});var TTt=s(xz);iKo=r(TTt,"XLMRobertaXLForQuestionAnswering"),TTt.forEach(t),dKo=r(RRe," (XLM-RoBERTa-XL model)"),RRe.forEach(t),cKo=i(X),CT=n(X,"LI",{});var PRe=s(CT);F_e=n(PRe,"STRONG",{});var MTt=s(F_e);mKo=r(MTt,"xlnet"),MTt.forEach(t),fKo=r(PRe," \u2014 "),$z=n(PRe,"A",{href:!0});var ETt=s($z);gKo=r(ETt,"XLNetForQuestionAnsweringSimple"),ETt.forEach(t),hKo=r(PRe," (XLNet model)"),PRe.forEach(t),uKo=i(X),wT=n(X,"LI",{});var BRe=s(wT);T_e=n(BRe,"STRONG",{});var CTt=s(T_e);pKo=r(CTt,"yoso"),CTt.forEach(t),_Ko=r(BRe," \u2014 "),kz=n(BRe,"A",{href:!0});var wTt=s(kz);bKo=r(wTt,"YosoForQuestionAnswering"),wTt.forEach(t),vKo=r(BRe," (YOSO model)"),BRe.forEach(t),X.forEach(t),FKo=i(ga),AT=n(ga,"P",{});var IRe=s(AT);TKo=r(IRe,"The model is set in evaluation mode by default using "),M_e=n(IRe,"CODE",{});var ATt=s(M_e);MKo=r(ATt,"model.eval()"),ATt.forEach(t),EKo=r(IRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),E_e=n(IRe,"CODE",{});var LTt=s(E_e);CKo=r(LTt,"model.train()"),LTt.forEach(t),IRe.forEach(t),wKo=i(ga),T(LT.$$.fragment,ga),ga.forEach(t),nl.forEach(t),EGe=i(m),cd=n(m,"H2",{class:!0});var xVe=s(cd);yT=n(xVe,"A",{id:!0,class:!0,href:!0});var yTt=s(yT);C_e=n(yTt,"SPAN",{});var xTt=s(C_e);T(j7.$$.fragment,xTt),xTt.forEach(t),yTt.forEach(t),AKo=i(xVe),w_e=n(xVe,"SPAN",{});var $Tt=s(w_e);LKo=r($Tt,"AutoModelForTableQuestionAnswering"),$Tt.forEach(t),xVe.forEach(t),CGe=i(m),jo=n(m,"DIV",{class:!0});var sl=s(jo);T(D7.$$.fragment,sl),yKo=i(sl),md=n(sl,"P",{});var goe=s(md);xKo=r(goe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Sz=n(goe,"A",{href:!0});var kTt=s(Sz);$Ko=r(kTt,"from_pretrained()"),kTt.forEach(t),kKo=r(goe," class method or the "),Rz=n(goe,"A",{href:!0});var STt=s(Rz);SKo=r(STt,"from_config()"),STt.forEach(t),RKo=r(goe,` class
method.`),goe.forEach(t),PKo=i(sl),G7=n(sl,"P",{});var $Ve=s(G7);BKo=r($Ve,"This class cannot be instantiated directly using "),A_e=n($Ve,"CODE",{});var RTt=s(A_e);IKo=r(RTt,"__init__()"),RTt.forEach(t),NKo=r($Ve," (throws an error)."),$Ve.forEach(t),qKo=i(sl),ut=n(sl,"DIV",{class:!0});var j6=s(ut);T(O7.$$.fragment,j6),jKo=i(j6),L_e=n(j6,"P",{});var PTt=s(L_e);DKo=r(PTt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),PTt.forEach(t),GKo=i(j6),fd=n(j6,"P",{});var hoe=s(fd);OKo=r(hoe,`Note:
Loading a model from its configuration file does `),y_e=n(hoe,"STRONG",{});var BTt=s(y_e);VKo=r(BTt,"not"),BTt.forEach(t),XKo=r(hoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),Pz=n(hoe,"A",{href:!0});var ITt=s(Pz);zKo=r(ITt,"from_pretrained()"),ITt.forEach(t),WKo=r(hoe," to load the model weights."),hoe.forEach(t),QKo=i(j6),T(xT.$$.fragment,j6),j6.forEach(t),HKo=i(sl),so=n(sl,"DIV",{class:!0});var ha=s(so);T(V7.$$.fragment,ha),UKo=i(ha),x_e=n(ha,"P",{});var NTt=s(x_e);JKo=r(NTt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),NTt.forEach(t),YKo=i(ha),Oa=n(ha,"P",{});var D6=s(Oa);KKo=r(D6,"The model class to instantiate is selected based on the "),$_e=n(D6,"CODE",{});var qTt=s($_e);ZKo=r(qTt,"model_type"),qTt.forEach(t),eZo=r(D6,` property of the config object (either
passed as an argument or loaded from `),k_e=n(D6,"CODE",{});var jTt=s(k_e);oZo=r(jTt,"pretrained_model_name_or_path"),jTt.forEach(t),rZo=r(D6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S_e=n(D6,"CODE",{});var DTt=s(S_e);tZo=r(DTt,"pretrained_model_name_or_path"),DTt.forEach(t),aZo=r(D6,":"),D6.forEach(t),nZo=i(ha),R_e=n(ha,"UL",{});var GTt=s(R_e);$T=n(GTt,"LI",{});var NRe=s($T);P_e=n(NRe,"STRONG",{});var OTt=s(P_e);sZo=r(OTt,"tapas"),OTt.forEach(t),lZo=r(NRe," \u2014 "),Bz=n(NRe,"A",{href:!0});var VTt=s(Bz);iZo=r(VTt,"TapasForQuestionAnswering"),VTt.forEach(t),dZo=r(NRe," (TAPAS model)"),NRe.forEach(t),GTt.forEach(t),cZo=i(ha),kT=n(ha,"P",{});var qRe=s(kT);mZo=r(qRe,"The model is set in evaluation mode by default using "),B_e=n(qRe,"CODE",{});var XTt=s(B_e);fZo=r(XTt,"model.eval()"),XTt.forEach(t),gZo=r(qRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),I_e=n(qRe,"CODE",{});var zTt=s(I_e);hZo=r(zTt,"model.train()"),zTt.forEach(t),qRe.forEach(t),uZo=i(ha),T(ST.$$.fragment,ha),ha.forEach(t),sl.forEach(t),wGe=i(m),gd=n(m,"H2",{class:!0});var kVe=s(gd);RT=n(kVe,"A",{id:!0,class:!0,href:!0});var WTt=s(RT);N_e=n(WTt,"SPAN",{});var QTt=s(N_e);T(X7.$$.fragment,QTt),QTt.forEach(t),WTt.forEach(t),pZo=i(kVe),q_e=n(kVe,"SPAN",{});var HTt=s(q_e);_Zo=r(HTt,"AutoModelForImageClassification"),HTt.forEach(t),kVe.forEach(t),AGe=i(m),Do=n(m,"DIV",{class:!0});var ll=s(Do);T(z7.$$.fragment,ll),bZo=i(ll),hd=n(ll,"P",{});var uoe=s(hd);vZo=r(uoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Iz=n(uoe,"A",{href:!0});var UTt=s(Iz);FZo=r(UTt,"from_pretrained()"),UTt.forEach(t),TZo=r(uoe," class method or the "),Nz=n(uoe,"A",{href:!0});var JTt=s(Nz);MZo=r(JTt,"from_config()"),JTt.forEach(t),EZo=r(uoe,` class
method.`),uoe.forEach(t),CZo=i(ll),W7=n(ll,"P",{});var SVe=s(W7);wZo=r(SVe,"This class cannot be instantiated directly using "),j_e=n(SVe,"CODE",{});var YTt=s(j_e);AZo=r(YTt,"__init__()"),YTt.forEach(t),LZo=r(SVe," (throws an error)."),SVe.forEach(t),yZo=i(ll),pt=n(ll,"DIV",{class:!0});var G6=s(pt);T(Q7.$$.fragment,G6),xZo=i(G6),D_e=n(G6,"P",{});var KTt=s(D_e);$Zo=r(KTt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),KTt.forEach(t),kZo=i(G6),ud=n(G6,"P",{});var poe=s(ud);SZo=r(poe,`Note:
Loading a model from its configuration file does `),G_e=n(poe,"STRONG",{});var ZTt=s(G_e);RZo=r(ZTt,"not"),ZTt.forEach(t),PZo=r(poe,` load the model weights. It only affects the
model\u2019s configuration. Use `),qz=n(poe,"A",{href:!0});var eMt=s(qz);BZo=r(eMt,"from_pretrained()"),eMt.forEach(t),IZo=r(poe," to load the model weights."),poe.forEach(t),NZo=i(G6),T(PT.$$.fragment,G6),G6.forEach(t),qZo=i(ll),lo=n(ll,"DIV",{class:!0});var ua=s(lo);T(H7.$$.fragment,ua),jZo=i(ua),O_e=n(ua,"P",{});var oMt=s(O_e);DZo=r(oMt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),oMt.forEach(t),GZo=i(ua),Va=n(ua,"P",{});var O6=s(Va);OZo=r(O6,"The model class to instantiate is selected based on the "),V_e=n(O6,"CODE",{});var rMt=s(V_e);VZo=r(rMt,"model_type"),rMt.forEach(t),XZo=r(O6,` property of the config object (either
passed as an argument or loaded from `),X_e=n(O6,"CODE",{});var tMt=s(X_e);zZo=r(tMt,"pretrained_model_name_or_path"),tMt.forEach(t),WZo=r(O6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z_e=n(O6,"CODE",{});var aMt=s(z_e);QZo=r(aMt,"pretrained_model_name_or_path"),aMt.forEach(t),HZo=r(O6,":"),O6.forEach(t),UZo=i(ua),Fe=n(ua,"UL",{});var Te=s(Fe);BT=n(Te,"LI",{});var jRe=s(BT);W_e=n(jRe,"STRONG",{});var nMt=s(W_e);JZo=r(nMt,"beit"),nMt.forEach(t),YZo=r(jRe," \u2014 "),jz=n(jRe,"A",{href:!0});var sMt=s(jz);KZo=r(sMt,"BeitForImageClassification"),sMt.forEach(t),ZZo=r(jRe," (BEiT model)"),jRe.forEach(t),eer=i(Te),IT=n(Te,"LI",{});var DRe=s(IT);Q_e=n(DRe,"STRONG",{});var lMt=s(Q_e);oer=r(lMt,"convnext"),lMt.forEach(t),rer=r(DRe," \u2014 "),Dz=n(DRe,"A",{href:!0});var iMt=s(Dz);ter=r(iMt,"ConvNextForImageClassification"),iMt.forEach(t),aer=r(DRe," (ConvNeXT model)"),DRe.forEach(t),ner=i(Te),NT=n(Te,"LI",{});var GRe=s(NT);H_e=n(GRe,"STRONG",{});var dMt=s(H_e);ser=r(dMt,"cvt"),dMt.forEach(t),ler=r(GRe," \u2014 "),Gz=n(GRe,"A",{href:!0});var cMt=s(Gz);ier=r(cMt,"CvtForImageClassification"),cMt.forEach(t),der=r(GRe," (CvT model)"),GRe.forEach(t),cer=i(Te),qT=n(Te,"LI",{});var ORe=s(qT);U_e=n(ORe,"STRONG",{});var mMt=s(U_e);mer=r(mMt,"data2vec-vision"),mMt.forEach(t),fer=r(ORe," \u2014 "),Oz=n(ORe,"A",{href:!0});var fMt=s(Oz);ger=r(fMt,"Data2VecVisionForImageClassification"),fMt.forEach(t),her=r(ORe," (Data2VecVision model)"),ORe.forEach(t),uer=i(Te),Os=n(Te,"LI",{});var Dk=s(Os);J_e=n(Dk,"STRONG",{});var gMt=s(J_e);per=r(gMt,"deit"),gMt.forEach(t),_er=r(Dk," \u2014 "),Vz=n(Dk,"A",{href:!0});var hMt=s(Vz);ber=r(hMt,"DeiTForImageClassification"),hMt.forEach(t),ver=r(Dk," or "),Xz=n(Dk,"A",{href:!0});var uMt=s(Xz);Fer=r(uMt,"DeiTForImageClassificationWithTeacher"),uMt.forEach(t),Ter=r(Dk," (DeiT model)"),Dk.forEach(t),Mer=i(Te),jT=n(Te,"LI",{});var VRe=s(jT);Y_e=n(VRe,"STRONG",{});var pMt=s(Y_e);Eer=r(pMt,"imagegpt"),pMt.forEach(t),Cer=r(VRe," \u2014 "),zz=n(VRe,"A",{href:!0});var _Mt=s(zz);wer=r(_Mt,"ImageGPTForImageClassification"),_Mt.forEach(t),Aer=r(VRe," (ImageGPT model)"),VRe.forEach(t),Ler=i(Te),Vs=n(Te,"LI",{});var Gk=s(Vs);K_e=n(Gk,"STRONG",{});var bMt=s(K_e);yer=r(bMt,"levit"),bMt.forEach(t),xer=r(Gk," \u2014 "),Wz=n(Gk,"A",{href:!0});var vMt=s(Wz);$er=r(vMt,"LevitForImageClassification"),vMt.forEach(t),ker=r(Gk," or "),Qz=n(Gk,"A",{href:!0});var FMt=s(Qz);Ser=r(FMt,"LevitForImageClassificationWithTeacher"),FMt.forEach(t),Rer=r(Gk," (LeViT model)"),Gk.forEach(t),Per=i(Te),_t=n(Te,"LI",{});var wm=s(_t);Z_e=n(wm,"STRONG",{});var TMt=s(Z_e);Ber=r(TMt,"perceiver"),TMt.forEach(t),Ier=r(wm," \u2014 "),Hz=n(wm,"A",{href:!0});var MMt=s(Hz);Ner=r(MMt,"PerceiverForImageClassificationLearned"),MMt.forEach(t),qer=r(wm," or "),Uz=n(wm,"A",{href:!0});var EMt=s(Uz);jer=r(EMt,"PerceiverForImageClassificationFourier"),EMt.forEach(t),Der=r(wm," or "),Jz=n(wm,"A",{href:!0});var CMt=s(Jz);Ger=r(CMt,"PerceiverForImageClassificationConvProcessing"),CMt.forEach(t),Oer=r(wm," (Perceiver model)"),wm.forEach(t),Ver=i(Te),DT=n(Te,"LI",{});var XRe=s(DT);e2e=n(XRe,"STRONG",{});var wMt=s(e2e);Xer=r(wMt,"poolformer"),wMt.forEach(t),zer=r(XRe," \u2014 "),Yz=n(XRe,"A",{href:!0});var AMt=s(Yz);Wer=r(AMt,"PoolFormerForImageClassification"),AMt.forEach(t),Qer=r(XRe," (PoolFormer model)"),XRe.forEach(t),Her=i(Te),GT=n(Te,"LI",{});var zRe=s(GT);o2e=n(zRe,"STRONG",{});var LMt=s(o2e);Uer=r(LMt,"regnet"),LMt.forEach(t),Jer=r(zRe," \u2014 "),Kz=n(zRe,"A",{href:!0});var yMt=s(Kz);Yer=r(yMt,"RegNetForImageClassification"),yMt.forEach(t),Ker=r(zRe," (RegNet model)"),zRe.forEach(t),Zer=i(Te),OT=n(Te,"LI",{});var WRe=s(OT);r2e=n(WRe,"STRONG",{});var xMt=s(r2e);eor=r(xMt,"resnet"),xMt.forEach(t),oor=r(WRe," \u2014 "),Zz=n(WRe,"A",{href:!0});var $Mt=s(Zz);ror=r($Mt,"ResNetForImageClassification"),$Mt.forEach(t),tor=r(WRe," (ResNet model)"),WRe.forEach(t),aor=i(Te),VT=n(Te,"LI",{});var QRe=s(VT);t2e=n(QRe,"STRONG",{});var kMt=s(t2e);nor=r(kMt,"segformer"),kMt.forEach(t),sor=r(QRe," \u2014 "),eW=n(QRe,"A",{href:!0});var SMt=s(eW);lor=r(SMt,"SegformerForImageClassification"),SMt.forEach(t),ior=r(QRe," (SegFormer model)"),QRe.forEach(t),dor=i(Te),XT=n(Te,"LI",{});var HRe=s(XT);a2e=n(HRe,"STRONG",{});var RMt=s(a2e);cor=r(RMt,"swin"),RMt.forEach(t),mor=r(HRe," \u2014 "),oW=n(HRe,"A",{href:!0});var PMt=s(oW);gor=r(PMt,"SwinForImageClassification"),PMt.forEach(t),hor=r(HRe," (Swin Transformer model)"),HRe.forEach(t),uor=i(Te),zT=n(Te,"LI",{});var URe=s(zT);n2e=n(URe,"STRONG",{});var BMt=s(n2e);por=r(BMt,"van"),BMt.forEach(t),_or=r(URe," \u2014 "),rW=n(URe,"A",{href:!0});var IMt=s(rW);bor=r(IMt,"VanForImageClassification"),IMt.forEach(t),vor=r(URe," (VAN model)"),URe.forEach(t),For=i(Te),WT=n(Te,"LI",{});var JRe=s(WT);s2e=n(JRe,"STRONG",{});var NMt=s(s2e);Tor=r(NMt,"vit"),NMt.forEach(t),Mor=r(JRe," \u2014 "),tW=n(JRe,"A",{href:!0});var qMt=s(tW);Eor=r(qMt,"ViTForImageClassification"),qMt.forEach(t),Cor=r(JRe," (ViT model)"),JRe.forEach(t),Te.forEach(t),wor=i(ua),QT=n(ua,"P",{});var YRe=s(QT);Aor=r(YRe,"The model is set in evaluation mode by default using "),l2e=n(YRe,"CODE",{});var jMt=s(l2e);Lor=r(jMt,"model.eval()"),jMt.forEach(t),yor=r(YRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),i2e=n(YRe,"CODE",{});var DMt=s(i2e);xor=r(DMt,"model.train()"),DMt.forEach(t),YRe.forEach(t),$or=i(ua),T(HT.$$.fragment,ua),ua.forEach(t),ll.forEach(t),LGe=i(m),pd=n(m,"H2",{class:!0});var RVe=s(pd);UT=n(RVe,"A",{id:!0,class:!0,href:!0});var GMt=s(UT);d2e=n(GMt,"SPAN",{});var OMt=s(d2e);T(U7.$$.fragment,OMt),OMt.forEach(t),GMt.forEach(t),kor=i(RVe),c2e=n(RVe,"SPAN",{});var VMt=s(c2e);Sor=r(VMt,"AutoModelForVision2Seq"),VMt.forEach(t),RVe.forEach(t),yGe=i(m),Go=n(m,"DIV",{class:!0});var il=s(Go);T(J7.$$.fragment,il),Ror=i(il),_d=n(il,"P",{});var _oe=s(_d);Por=r(_oe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),aW=n(_oe,"A",{href:!0});var XMt=s(aW);Bor=r(XMt,"from_pretrained()"),XMt.forEach(t),Ior=r(_oe," class method or the "),nW=n(_oe,"A",{href:!0});var zMt=s(nW);Nor=r(zMt,"from_config()"),zMt.forEach(t),qor=r(_oe,` class
method.`),_oe.forEach(t),jor=i(il),Y7=n(il,"P",{});var PVe=s(Y7);Dor=r(PVe,"This class cannot be instantiated directly using "),m2e=n(PVe,"CODE",{});var WMt=s(m2e);Gor=r(WMt,"__init__()"),WMt.forEach(t),Oor=r(PVe," (throws an error)."),PVe.forEach(t),Vor=i(il),bt=n(il,"DIV",{class:!0});var V6=s(bt);T(K7.$$.fragment,V6),Xor=i(V6),f2e=n(V6,"P",{});var QMt=s(f2e);zor=r(QMt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),QMt.forEach(t),Wor=i(V6),bd=n(V6,"P",{});var boe=s(bd);Qor=r(boe,`Note:
Loading a model from its configuration file does `),g2e=n(boe,"STRONG",{});var HMt=s(g2e);Hor=r(HMt,"not"),HMt.forEach(t),Uor=r(boe,` load the model weights. It only affects the
model\u2019s configuration. Use `),sW=n(boe,"A",{href:!0});var UMt=s(sW);Jor=r(UMt,"from_pretrained()"),UMt.forEach(t),Yor=r(boe," to load the model weights."),boe.forEach(t),Kor=i(V6),T(JT.$$.fragment,V6),V6.forEach(t),Zor=i(il),io=n(il,"DIV",{class:!0});var pa=s(io);T(Z7.$$.fragment,pa),err=i(pa),h2e=n(pa,"P",{});var JMt=s(h2e);orr=r(JMt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),JMt.forEach(t),rrr=i(pa),Xa=n(pa,"P",{});var X6=s(Xa);trr=r(X6,"The model class to instantiate is selected based on the "),u2e=n(X6,"CODE",{});var YMt=s(u2e);arr=r(YMt,"model_type"),YMt.forEach(t),nrr=r(X6,` property of the config object (either
passed as an argument or loaded from `),p2e=n(X6,"CODE",{});var KMt=s(p2e);srr=r(KMt,"pretrained_model_name_or_path"),KMt.forEach(t),lrr=r(X6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_2e=n(X6,"CODE",{});var ZMt=s(_2e);irr=r(ZMt,"pretrained_model_name_or_path"),ZMt.forEach(t),drr=r(X6,":"),X6.forEach(t),crr=i(pa),b2e=n(pa,"UL",{});var e4t=s(b2e);YT=n(e4t,"LI",{});var KRe=s(YT);v2e=n(KRe,"STRONG",{});var o4t=s(v2e);mrr=r(o4t,"vision-encoder-decoder"),o4t.forEach(t),frr=r(KRe," \u2014 "),lW=n(KRe,"A",{href:!0});var r4t=s(lW);grr=r(r4t,"VisionEncoderDecoderModel"),r4t.forEach(t),hrr=r(KRe," (Vision Encoder decoder model)"),KRe.forEach(t),e4t.forEach(t),urr=i(pa),KT=n(pa,"P",{});var ZRe=s(KT);prr=r(ZRe,"The model is set in evaluation mode by default using "),F2e=n(ZRe,"CODE",{});var t4t=s(F2e);_rr=r(t4t,"model.eval()"),t4t.forEach(t),brr=r(ZRe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),T2e=n(ZRe,"CODE",{});var a4t=s(T2e);vrr=r(a4t,"model.train()"),a4t.forEach(t),ZRe.forEach(t),Frr=i(pa),T(ZT.$$.fragment,pa),pa.forEach(t),il.forEach(t),xGe=i(m),vd=n(m,"H2",{class:!0});var BVe=s(vd);eM=n(BVe,"A",{id:!0,class:!0,href:!0});var n4t=s(eM);M2e=n(n4t,"SPAN",{});var s4t=s(M2e);T(e8.$$.fragment,s4t),s4t.forEach(t),n4t.forEach(t),Trr=i(BVe),E2e=n(BVe,"SPAN",{});var l4t=s(E2e);Mrr=r(l4t,"AutoModelForVisualQuestionAnswering"),l4t.forEach(t),BVe.forEach(t),$Ge=i(m),Oo=n(m,"DIV",{class:!0});var dl=s(Oo);T(o8.$$.fragment,dl),Err=i(dl),Fd=n(dl,"P",{});var voe=s(Fd);Crr=r(voe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a visual question answering head) when created
with the `),iW=n(voe,"A",{href:!0});var i4t=s(iW);wrr=r(i4t,"from_pretrained()"),i4t.forEach(t),Arr=r(voe," class method or the "),dW=n(voe,"A",{href:!0});var d4t=s(dW);Lrr=r(d4t,"from_config()"),d4t.forEach(t),yrr=r(voe,` class
method.`),voe.forEach(t),xrr=i(dl),r8=n(dl,"P",{});var IVe=s(r8);$rr=r(IVe,"This class cannot be instantiated directly using "),C2e=n(IVe,"CODE",{});var c4t=s(C2e);krr=r(c4t,"__init__()"),c4t.forEach(t),Srr=r(IVe," (throws an error)."),IVe.forEach(t),Rrr=i(dl),vt=n(dl,"DIV",{class:!0});var z6=s(vt);T(t8.$$.fragment,z6),Prr=i(z6),w2e=n(z6,"P",{});var m4t=s(w2e);Brr=r(m4t,"Instantiates one of the model classes of the library (with a visual question answering head) from a configuration."),m4t.forEach(t),Irr=i(z6),Td=n(z6,"P",{});var Foe=s(Td);Nrr=r(Foe,`Note:
Loading a model from its configuration file does `),A2e=n(Foe,"STRONG",{});var f4t=s(A2e);qrr=r(f4t,"not"),f4t.forEach(t),jrr=r(Foe,` load the model weights. It only affects the
model\u2019s configuration. Use `),cW=n(Foe,"A",{href:!0});var g4t=s(cW);Drr=r(g4t,"from_pretrained()"),g4t.forEach(t),Grr=r(Foe," to load the model weights."),Foe.forEach(t),Orr=i(z6),T(oM.$$.fragment,z6),z6.forEach(t),Vrr=i(dl),co=n(dl,"DIV",{class:!0});var _a=s(co);T(a8.$$.fragment,_a),Xrr=i(_a),L2e=n(_a,"P",{});var h4t=s(L2e);zrr=r(h4t,"Instantiate one of the model classes of the library (with a visual question answering head) from a pretrained model."),h4t.forEach(t),Wrr=i(_a),za=n(_a,"P",{});var W6=s(za);Qrr=r(W6,"The model class to instantiate is selected based on the "),y2e=n(W6,"CODE",{});var u4t=s(y2e);Hrr=r(u4t,"model_type"),u4t.forEach(t),Urr=r(W6,` property of the config object (either
passed as an argument or loaded from `),x2e=n(W6,"CODE",{});var p4t=s(x2e);Jrr=r(p4t,"pretrained_model_name_or_path"),p4t.forEach(t),Yrr=r(W6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$2e=n(W6,"CODE",{});var _4t=s($2e);Krr=r(_4t,"pretrained_model_name_or_path"),_4t.forEach(t),Zrr=r(W6,":"),W6.forEach(t),etr=i(_a),k2e=n(_a,"UL",{});var b4t=s(k2e);rM=n(b4t,"LI",{});var ePe=s(rM);S2e=n(ePe,"STRONG",{});var v4t=s(S2e);otr=r(v4t,"vilt"),v4t.forEach(t),rtr=r(ePe," \u2014 "),mW=n(ePe,"A",{href:!0});var F4t=s(mW);ttr=r(F4t,"ViltForQuestionAnswering"),F4t.forEach(t),atr=r(ePe," (ViLT model)"),ePe.forEach(t),b4t.forEach(t),ntr=i(_a),tM=n(_a,"P",{});var oPe=s(tM);str=r(oPe,"The model is set in evaluation mode by default using "),R2e=n(oPe,"CODE",{});var T4t=s(R2e);ltr=r(T4t,"model.eval()"),T4t.forEach(t),itr=r(oPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),P2e=n(oPe,"CODE",{});var M4t=s(P2e);dtr=r(M4t,"model.train()"),M4t.forEach(t),oPe.forEach(t),ctr=i(_a),T(aM.$$.fragment,_a),_a.forEach(t),dl.forEach(t),kGe=i(m),Md=n(m,"H2",{class:!0});var NVe=s(Md);nM=n(NVe,"A",{id:!0,class:!0,href:!0});var E4t=s(nM);B2e=n(E4t,"SPAN",{});var C4t=s(B2e);T(n8.$$.fragment,C4t),C4t.forEach(t),E4t.forEach(t),mtr=i(NVe),I2e=n(NVe,"SPAN",{});var w4t=s(I2e);ftr=r(w4t,"AutoModelForAudioClassification"),w4t.forEach(t),NVe.forEach(t),SGe=i(m),Vo=n(m,"DIV",{class:!0});var cl=s(Vo);T(s8.$$.fragment,cl),gtr=i(cl),Ed=n(cl,"P",{});var Toe=s(Ed);htr=r(Toe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),fW=n(Toe,"A",{href:!0});var A4t=s(fW);utr=r(A4t,"from_pretrained()"),A4t.forEach(t),ptr=r(Toe," class method or the "),gW=n(Toe,"A",{href:!0});var L4t=s(gW);_tr=r(L4t,"from_config()"),L4t.forEach(t),btr=r(Toe,` class
method.`),Toe.forEach(t),vtr=i(cl),l8=n(cl,"P",{});var qVe=s(l8);Ftr=r(qVe,"This class cannot be instantiated directly using "),N2e=n(qVe,"CODE",{});var y4t=s(N2e);Ttr=r(y4t,"__init__()"),y4t.forEach(t),Mtr=r(qVe," (throws an error)."),qVe.forEach(t),Etr=i(cl),Ft=n(cl,"DIV",{class:!0});var Q6=s(Ft);T(i8.$$.fragment,Q6),Ctr=i(Q6),q2e=n(Q6,"P",{});var x4t=s(q2e);wtr=r(x4t,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),x4t.forEach(t),Atr=i(Q6),Cd=n(Q6,"P",{});var Moe=s(Cd);Ltr=r(Moe,`Note:
Loading a model from its configuration file does `),j2e=n(Moe,"STRONG",{});var $4t=s(j2e);ytr=r($4t,"not"),$4t.forEach(t),xtr=r(Moe,` load the model weights. It only affects the
model\u2019s configuration. Use `),hW=n(Moe,"A",{href:!0});var k4t=s(hW);$tr=r(k4t,"from_pretrained()"),k4t.forEach(t),ktr=r(Moe," to load the model weights."),Moe.forEach(t),Str=i(Q6),T(sM.$$.fragment,Q6),Q6.forEach(t),Rtr=i(cl),mo=n(cl,"DIV",{class:!0});var ba=s(mo);T(d8.$$.fragment,ba),Ptr=i(ba),D2e=n(ba,"P",{});var S4t=s(D2e);Btr=r(S4t,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),S4t.forEach(t),Itr=i(ba),Wa=n(ba,"P",{});var H6=s(Wa);Ntr=r(H6,"The model class to instantiate is selected based on the "),G2e=n(H6,"CODE",{});var R4t=s(G2e);qtr=r(R4t,"model_type"),R4t.forEach(t),jtr=r(H6,` property of the config object (either
passed as an argument or loaded from `),O2e=n(H6,"CODE",{});var P4t=s(O2e);Dtr=r(P4t,"pretrained_model_name_or_path"),P4t.forEach(t),Gtr=r(H6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V2e=n(H6,"CODE",{});var B4t=s(V2e);Otr=r(B4t,"pretrained_model_name_or_path"),B4t.forEach(t),Vtr=r(H6,":"),H6.forEach(t),Xtr=i(ba),Pe=n(ba,"UL",{});var ze=s(Pe);lM=n(ze,"LI",{});var rPe=s(lM);X2e=n(rPe,"STRONG",{});var I4t=s(X2e);ztr=r(I4t,"data2vec-audio"),I4t.forEach(t),Wtr=r(rPe," \u2014 "),uW=n(rPe,"A",{href:!0});var N4t=s(uW);Qtr=r(N4t,"Data2VecAudioForSequenceClassification"),N4t.forEach(t),Htr=r(rPe," (Data2VecAudio model)"),rPe.forEach(t),Utr=i(ze),iM=n(ze,"LI",{});var tPe=s(iM);z2e=n(tPe,"STRONG",{});var q4t=s(z2e);Jtr=r(q4t,"hubert"),q4t.forEach(t),Ytr=r(tPe," \u2014 "),pW=n(tPe,"A",{href:!0});var j4t=s(pW);Ktr=r(j4t,"HubertForSequenceClassification"),j4t.forEach(t),Ztr=r(tPe," (Hubert model)"),tPe.forEach(t),ear=i(ze),dM=n(ze,"LI",{});var aPe=s(dM);W2e=n(aPe,"STRONG",{});var D4t=s(W2e);oar=r(D4t,"sew"),D4t.forEach(t),rar=r(aPe," \u2014 "),_W=n(aPe,"A",{href:!0});var G4t=s(_W);tar=r(G4t,"SEWForSequenceClassification"),G4t.forEach(t),aar=r(aPe," (SEW model)"),aPe.forEach(t),nar=i(ze),cM=n(ze,"LI",{});var nPe=s(cM);Q2e=n(nPe,"STRONG",{});var O4t=s(Q2e);sar=r(O4t,"sew-d"),O4t.forEach(t),lar=r(nPe," \u2014 "),bW=n(nPe,"A",{href:!0});var V4t=s(bW);iar=r(V4t,"SEWDForSequenceClassification"),V4t.forEach(t),dar=r(nPe," (SEW-D model)"),nPe.forEach(t),car=i(ze),mM=n(ze,"LI",{});var sPe=s(mM);H2e=n(sPe,"STRONG",{});var X4t=s(H2e);mar=r(X4t,"unispeech"),X4t.forEach(t),far=r(sPe," \u2014 "),vW=n(sPe,"A",{href:!0});var z4t=s(vW);gar=r(z4t,"UniSpeechForSequenceClassification"),z4t.forEach(t),har=r(sPe," (UniSpeech model)"),sPe.forEach(t),uar=i(ze),fM=n(ze,"LI",{});var lPe=s(fM);U2e=n(lPe,"STRONG",{});var W4t=s(U2e);par=r(W4t,"unispeech-sat"),W4t.forEach(t),_ar=r(lPe," \u2014 "),FW=n(lPe,"A",{href:!0});var Q4t=s(FW);bar=r(Q4t,"UniSpeechSatForSequenceClassification"),Q4t.forEach(t),Far=r(lPe," (UniSpeechSat model)"),lPe.forEach(t),Tar=i(ze),gM=n(ze,"LI",{});var iPe=s(gM);J2e=n(iPe,"STRONG",{});var H4t=s(J2e);Mar=r(H4t,"wav2vec2"),H4t.forEach(t),Ear=r(iPe," \u2014 "),TW=n(iPe,"A",{href:!0});var U4t=s(TW);Car=r(U4t,"Wav2Vec2ForSequenceClassification"),U4t.forEach(t),war=r(iPe," (Wav2Vec2 model)"),iPe.forEach(t),Aar=i(ze),hM=n(ze,"LI",{});var dPe=s(hM);Y2e=n(dPe,"STRONG",{});var J4t=s(Y2e);Lar=r(J4t,"wav2vec2-conformer"),J4t.forEach(t),yar=r(dPe," \u2014 "),MW=n(dPe,"A",{href:!0});var Y4t=s(MW);xar=r(Y4t,"Wav2Vec2ConformerForSequenceClassification"),Y4t.forEach(t),$ar=r(dPe," (Wav2Vec2-Conformer model)"),dPe.forEach(t),kar=i(ze),uM=n(ze,"LI",{});var cPe=s(uM);K2e=n(cPe,"STRONG",{});var K4t=s(K2e);Sar=r(K4t,"wavlm"),K4t.forEach(t),Rar=r(cPe," \u2014 "),EW=n(cPe,"A",{href:!0});var Z4t=s(EW);Par=r(Z4t,"WavLMForSequenceClassification"),Z4t.forEach(t),Bar=r(cPe," (WavLM model)"),cPe.forEach(t),ze.forEach(t),Iar=i(ba),pM=n(ba,"P",{});var mPe=s(pM);Nar=r(mPe,"The model is set in evaluation mode by default using "),Z2e=n(mPe,"CODE",{});var eEt=s(Z2e);qar=r(eEt,"model.eval()"),eEt.forEach(t),jar=r(mPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ebe=n(mPe,"CODE",{});var oEt=s(ebe);Dar=r(oEt,"model.train()"),oEt.forEach(t),mPe.forEach(t),Gar=i(ba),T(_M.$$.fragment,ba),ba.forEach(t),cl.forEach(t),RGe=i(m),wd=n(m,"H2",{class:!0});var jVe=s(wd);bM=n(jVe,"A",{id:!0,class:!0,href:!0});var rEt=s(bM);obe=n(rEt,"SPAN",{});var tEt=s(obe);T(c8.$$.fragment,tEt),tEt.forEach(t),rEt.forEach(t),Oar=i(jVe),rbe=n(jVe,"SPAN",{});var aEt=s(rbe);Var=r(aEt,"AutoModelForAudioFrameClassification"),aEt.forEach(t),jVe.forEach(t),PGe=i(m),Xo=n(m,"DIV",{class:!0});var ml=s(Xo);T(m8.$$.fragment,ml),Xar=i(ml),Ad=n(ml,"P",{});var Eoe=s(Ad);zar=r(Eoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),CW=n(Eoe,"A",{href:!0});var nEt=s(CW);War=r(nEt,"from_pretrained()"),nEt.forEach(t),Qar=r(Eoe," class method or the "),wW=n(Eoe,"A",{href:!0});var sEt=s(wW);Har=r(sEt,"from_config()"),sEt.forEach(t),Uar=r(Eoe,` class
method.`),Eoe.forEach(t),Jar=i(ml),f8=n(ml,"P",{});var DVe=s(f8);Yar=r(DVe,"This class cannot be instantiated directly using "),tbe=n(DVe,"CODE",{});var lEt=s(tbe);Kar=r(lEt,"__init__()"),lEt.forEach(t),Zar=r(DVe," (throws an error)."),DVe.forEach(t),enr=i(ml),Tt=n(ml,"DIV",{class:!0});var U6=s(Tt);T(g8.$$.fragment,U6),onr=i(U6),abe=n(U6,"P",{});var iEt=s(abe);rnr=r(iEt,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),iEt.forEach(t),tnr=i(U6),Ld=n(U6,"P",{});var Coe=s(Ld);anr=r(Coe,`Note:
Loading a model from its configuration file does `),nbe=n(Coe,"STRONG",{});var dEt=s(nbe);nnr=r(dEt,"not"),dEt.forEach(t),snr=r(Coe,` load the model weights. It only affects the
model\u2019s configuration. Use `),AW=n(Coe,"A",{href:!0});var cEt=s(AW);lnr=r(cEt,"from_pretrained()"),cEt.forEach(t),inr=r(Coe," to load the model weights."),Coe.forEach(t),dnr=i(U6),T(vM.$$.fragment,U6),U6.forEach(t),cnr=i(ml),fo=n(ml,"DIV",{class:!0});var va=s(fo);T(h8.$$.fragment,va),mnr=i(va),sbe=n(va,"P",{});var mEt=s(sbe);fnr=r(mEt,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),mEt.forEach(t),gnr=i(va),Qa=n(va,"P",{});var J6=s(Qa);hnr=r(J6,"The model class to instantiate is selected based on the "),lbe=n(J6,"CODE",{});var fEt=s(lbe);unr=r(fEt,"model_type"),fEt.forEach(t),pnr=r(J6,` property of the config object (either
passed as an argument or loaded from `),ibe=n(J6,"CODE",{});var gEt=s(ibe);_nr=r(gEt,"pretrained_model_name_or_path"),gEt.forEach(t),bnr=r(J6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dbe=n(J6,"CODE",{});var hEt=s(dbe);vnr=r(hEt,"pretrained_model_name_or_path"),hEt.forEach(t),Fnr=r(J6,":"),J6.forEach(t),Tnr=i(va),et=n(va,"UL",{});var fl=s(et);FM=n(fl,"LI",{});var fPe=s(FM);cbe=n(fPe,"STRONG",{});var uEt=s(cbe);Mnr=r(uEt,"data2vec-audio"),uEt.forEach(t),Enr=r(fPe," \u2014 "),LW=n(fPe,"A",{href:!0});var pEt=s(LW);Cnr=r(pEt,"Data2VecAudioForAudioFrameClassification"),pEt.forEach(t),wnr=r(fPe," (Data2VecAudio model)"),fPe.forEach(t),Anr=i(fl),TM=n(fl,"LI",{});var gPe=s(TM);mbe=n(gPe,"STRONG",{});var _Et=s(mbe);Lnr=r(_Et,"unispeech-sat"),_Et.forEach(t),ynr=r(gPe," \u2014 "),yW=n(gPe,"A",{href:!0});var bEt=s(yW);xnr=r(bEt,"UniSpeechSatForAudioFrameClassification"),bEt.forEach(t),$nr=r(gPe," (UniSpeechSat model)"),gPe.forEach(t),knr=i(fl),MM=n(fl,"LI",{});var hPe=s(MM);fbe=n(hPe,"STRONG",{});var vEt=s(fbe);Snr=r(vEt,"wav2vec2"),vEt.forEach(t),Rnr=r(hPe," \u2014 "),xW=n(hPe,"A",{href:!0});var FEt=s(xW);Pnr=r(FEt,"Wav2Vec2ForAudioFrameClassification"),FEt.forEach(t),Bnr=r(hPe," (Wav2Vec2 model)"),hPe.forEach(t),Inr=i(fl),EM=n(fl,"LI",{});var uPe=s(EM);gbe=n(uPe,"STRONG",{});var TEt=s(gbe);Nnr=r(TEt,"wav2vec2-conformer"),TEt.forEach(t),qnr=r(uPe," \u2014 "),$W=n(uPe,"A",{href:!0});var MEt=s($W);jnr=r(MEt,"Wav2Vec2ConformerForAudioFrameClassification"),MEt.forEach(t),Dnr=r(uPe," (Wav2Vec2-Conformer model)"),uPe.forEach(t),Gnr=i(fl),CM=n(fl,"LI",{});var pPe=s(CM);hbe=n(pPe,"STRONG",{});var EEt=s(hbe);Onr=r(EEt,"wavlm"),EEt.forEach(t),Vnr=r(pPe," \u2014 "),kW=n(pPe,"A",{href:!0});var CEt=s(kW);Xnr=r(CEt,"WavLMForAudioFrameClassification"),CEt.forEach(t),znr=r(pPe," (WavLM model)"),pPe.forEach(t),fl.forEach(t),Wnr=i(va),wM=n(va,"P",{});var _Pe=s(wM);Qnr=r(_Pe,"The model is set in evaluation mode by default using "),ube=n(_Pe,"CODE",{});var wEt=s(ube);Hnr=r(wEt,"model.eval()"),wEt.forEach(t),Unr=r(_Pe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pbe=n(_Pe,"CODE",{});var AEt=s(pbe);Jnr=r(AEt,"model.train()"),AEt.forEach(t),_Pe.forEach(t),Ynr=i(va),T(AM.$$.fragment,va),va.forEach(t),ml.forEach(t),BGe=i(m),yd=n(m,"H2",{class:!0});var GVe=s(yd);LM=n(GVe,"A",{id:!0,class:!0,href:!0});var LEt=s(LM);_be=n(LEt,"SPAN",{});var yEt=s(_be);T(u8.$$.fragment,yEt),yEt.forEach(t),LEt.forEach(t),Knr=i(GVe),bbe=n(GVe,"SPAN",{});var xEt=s(bbe);Znr=r(xEt,"AutoModelForCTC"),xEt.forEach(t),GVe.forEach(t),IGe=i(m),zo=n(m,"DIV",{class:!0});var gl=s(zo);T(p8.$$.fragment,gl),esr=i(gl),xd=n(gl,"P",{});var woe=s(xd);osr=r(woe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),SW=n(woe,"A",{href:!0});var $Et=s(SW);rsr=r($Et,"from_pretrained()"),$Et.forEach(t),tsr=r(woe," class method or the "),RW=n(woe,"A",{href:!0});var kEt=s(RW);asr=r(kEt,"from_config()"),kEt.forEach(t),nsr=r(woe,` class
method.`),woe.forEach(t),ssr=i(gl),_8=n(gl,"P",{});var OVe=s(_8);lsr=r(OVe,"This class cannot be instantiated directly using "),vbe=n(OVe,"CODE",{});var SEt=s(vbe);isr=r(SEt,"__init__()"),SEt.forEach(t),dsr=r(OVe," (throws an error)."),OVe.forEach(t),csr=i(gl),Mt=n(gl,"DIV",{class:!0});var Y6=s(Mt);T(b8.$$.fragment,Y6),msr=i(Y6),Fbe=n(Y6,"P",{});var REt=s(Fbe);fsr=r(REt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),REt.forEach(t),gsr=i(Y6),$d=n(Y6,"P",{});var Aoe=s($d);hsr=r(Aoe,`Note:
Loading a model from its configuration file does `),Tbe=n(Aoe,"STRONG",{});var PEt=s(Tbe);usr=r(PEt,"not"),PEt.forEach(t),psr=r(Aoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),PW=n(Aoe,"A",{href:!0});var BEt=s(PW);_sr=r(BEt,"from_pretrained()"),BEt.forEach(t),bsr=r(Aoe," to load the model weights."),Aoe.forEach(t),vsr=i(Y6),T(yM.$$.fragment,Y6),Y6.forEach(t),Fsr=i(gl),go=n(gl,"DIV",{class:!0});var Fa=s(go);T(v8.$$.fragment,Fa),Tsr=i(Fa),Mbe=n(Fa,"P",{});var IEt=s(Mbe);Msr=r(IEt,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),IEt.forEach(t),Esr=i(Fa),Ha=n(Fa,"P",{});var K6=s(Ha);Csr=r(K6,"The model class to instantiate is selected based on the "),Ebe=n(K6,"CODE",{});var NEt=s(Ebe);wsr=r(NEt,"model_type"),NEt.forEach(t),Asr=r(K6,` property of the config object (either
passed as an argument or loaded from `),Cbe=n(K6,"CODE",{});var qEt=s(Cbe);Lsr=r(qEt,"pretrained_model_name_or_path"),qEt.forEach(t),ysr=r(K6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wbe=n(K6,"CODE",{});var jEt=s(wbe);xsr=r(jEt,"pretrained_model_name_or_path"),jEt.forEach(t),$sr=r(K6,":"),K6.forEach(t),ksr=i(Fa),Le=n(Fa,"UL",{});var Be=s(Le);xM=n(Be,"LI",{});var bPe=s(xM);Abe=n(bPe,"STRONG",{});var DEt=s(Abe);Ssr=r(DEt,"data2vec-audio"),DEt.forEach(t),Rsr=r(bPe," \u2014 "),BW=n(bPe,"A",{href:!0});var GEt=s(BW);Psr=r(GEt,"Data2VecAudioForCTC"),GEt.forEach(t),Bsr=r(bPe," (Data2VecAudio model)"),bPe.forEach(t),Isr=i(Be),$M=n(Be,"LI",{});var vPe=s($M);Lbe=n(vPe,"STRONG",{});var OEt=s(Lbe);Nsr=r(OEt,"hubert"),OEt.forEach(t),qsr=r(vPe," \u2014 "),IW=n(vPe,"A",{href:!0});var VEt=s(IW);jsr=r(VEt,"HubertForCTC"),VEt.forEach(t),Dsr=r(vPe," (Hubert model)"),vPe.forEach(t),Gsr=i(Be),kM=n(Be,"LI",{});var FPe=s(kM);ybe=n(FPe,"STRONG",{});var XEt=s(ybe);Osr=r(XEt,"mctct"),XEt.forEach(t),Vsr=r(FPe," \u2014 "),NW=n(FPe,"A",{href:!0});var zEt=s(NW);Xsr=r(zEt,"MCTCTForCTC"),zEt.forEach(t),zsr=r(FPe," (M-CTC-T model)"),FPe.forEach(t),Wsr=i(Be),SM=n(Be,"LI",{});var TPe=s(SM);xbe=n(TPe,"STRONG",{});var WEt=s(xbe);Qsr=r(WEt,"sew"),WEt.forEach(t),Hsr=r(TPe," \u2014 "),qW=n(TPe,"A",{href:!0});var QEt=s(qW);Usr=r(QEt,"SEWForCTC"),QEt.forEach(t),Jsr=r(TPe," (SEW model)"),TPe.forEach(t),Ysr=i(Be),RM=n(Be,"LI",{});var MPe=s(RM);$be=n(MPe,"STRONG",{});var HEt=s($be);Ksr=r(HEt,"sew-d"),HEt.forEach(t),Zsr=r(MPe," \u2014 "),jW=n(MPe,"A",{href:!0});var UEt=s(jW);elr=r(UEt,"SEWDForCTC"),UEt.forEach(t),olr=r(MPe," (SEW-D model)"),MPe.forEach(t),rlr=i(Be),PM=n(Be,"LI",{});var EPe=s(PM);kbe=n(EPe,"STRONG",{});var JEt=s(kbe);tlr=r(JEt,"unispeech"),JEt.forEach(t),alr=r(EPe," \u2014 "),DW=n(EPe,"A",{href:!0});var YEt=s(DW);nlr=r(YEt,"UniSpeechForCTC"),YEt.forEach(t),slr=r(EPe," (UniSpeech model)"),EPe.forEach(t),llr=i(Be),BM=n(Be,"LI",{});var CPe=s(BM);Sbe=n(CPe,"STRONG",{});var KEt=s(Sbe);ilr=r(KEt,"unispeech-sat"),KEt.forEach(t),dlr=r(CPe," \u2014 "),GW=n(CPe,"A",{href:!0});var ZEt=s(GW);clr=r(ZEt,"UniSpeechSatForCTC"),ZEt.forEach(t),mlr=r(CPe," (UniSpeechSat model)"),CPe.forEach(t),flr=i(Be),IM=n(Be,"LI",{});var wPe=s(IM);Rbe=n(wPe,"STRONG",{});var eCt=s(Rbe);glr=r(eCt,"wav2vec2"),eCt.forEach(t),hlr=r(wPe," \u2014 "),OW=n(wPe,"A",{href:!0});var oCt=s(OW);ulr=r(oCt,"Wav2Vec2ForCTC"),oCt.forEach(t),plr=r(wPe," (Wav2Vec2 model)"),wPe.forEach(t),_lr=i(Be),NM=n(Be,"LI",{});var APe=s(NM);Pbe=n(APe,"STRONG",{});var rCt=s(Pbe);blr=r(rCt,"wav2vec2-conformer"),rCt.forEach(t),vlr=r(APe," \u2014 "),VW=n(APe,"A",{href:!0});var tCt=s(VW);Flr=r(tCt,"Wav2Vec2ConformerForCTC"),tCt.forEach(t),Tlr=r(APe," (Wav2Vec2-Conformer model)"),APe.forEach(t),Mlr=i(Be),qM=n(Be,"LI",{});var LPe=s(qM);Bbe=n(LPe,"STRONG",{});var aCt=s(Bbe);Elr=r(aCt,"wavlm"),aCt.forEach(t),Clr=r(LPe," \u2014 "),XW=n(LPe,"A",{href:!0});var nCt=s(XW);wlr=r(nCt,"WavLMForCTC"),nCt.forEach(t),Alr=r(LPe," (WavLM model)"),LPe.forEach(t),Be.forEach(t),Llr=i(Fa),jM=n(Fa,"P",{});var yPe=s(jM);ylr=r(yPe,"The model is set in evaluation mode by default using "),Ibe=n(yPe,"CODE",{});var sCt=s(Ibe);xlr=r(sCt,"model.eval()"),sCt.forEach(t),$lr=r(yPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nbe=n(yPe,"CODE",{});var lCt=s(Nbe);klr=r(lCt,"model.train()"),lCt.forEach(t),yPe.forEach(t),Slr=i(Fa),T(DM.$$.fragment,Fa),Fa.forEach(t),gl.forEach(t),NGe=i(m),kd=n(m,"H2",{class:!0});var VVe=s(kd);GM=n(VVe,"A",{id:!0,class:!0,href:!0});var iCt=s(GM);qbe=n(iCt,"SPAN",{});var dCt=s(qbe);T(F8.$$.fragment,dCt),dCt.forEach(t),iCt.forEach(t),Rlr=i(VVe),jbe=n(VVe,"SPAN",{});var cCt=s(jbe);Plr=r(cCt,"AutoModelForSpeechSeq2Seq"),cCt.forEach(t),VVe.forEach(t),qGe=i(m),Wo=n(m,"DIV",{class:!0});var hl=s(Wo);T(T8.$$.fragment,hl),Blr=i(hl),Sd=n(hl,"P",{});var Loe=s(Sd);Ilr=r(Loe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),zW=n(Loe,"A",{href:!0});var mCt=s(zW);Nlr=r(mCt,"from_pretrained()"),mCt.forEach(t),qlr=r(Loe," class method or the "),WW=n(Loe,"A",{href:!0});var fCt=s(WW);jlr=r(fCt,"from_config()"),fCt.forEach(t),Dlr=r(Loe,` class
method.`),Loe.forEach(t),Glr=i(hl),M8=n(hl,"P",{});var XVe=s(M8);Olr=r(XVe,"This class cannot be instantiated directly using "),Dbe=n(XVe,"CODE",{});var gCt=s(Dbe);Vlr=r(gCt,"__init__()"),gCt.forEach(t),Xlr=r(XVe," (throws an error)."),XVe.forEach(t),zlr=i(hl),Et=n(hl,"DIV",{class:!0});var Z6=s(Et);T(E8.$$.fragment,Z6),Wlr=i(Z6),Gbe=n(Z6,"P",{});var hCt=s(Gbe);Qlr=r(hCt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),hCt.forEach(t),Hlr=i(Z6),Rd=n(Z6,"P",{});var yoe=s(Rd);Ulr=r(yoe,`Note:
Loading a model from its configuration file does `),Obe=n(yoe,"STRONG",{});var uCt=s(Obe);Jlr=r(uCt,"not"),uCt.forEach(t),Ylr=r(yoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),QW=n(yoe,"A",{href:!0});var pCt=s(QW);Klr=r(pCt,"from_pretrained()"),pCt.forEach(t),Zlr=r(yoe," to load the model weights."),yoe.forEach(t),eir=i(Z6),T(OM.$$.fragment,Z6),Z6.forEach(t),oir=i(hl),ho=n(hl,"DIV",{class:!0});var Ta=s(ho);T(C8.$$.fragment,Ta),rir=i(Ta),Vbe=n(Ta,"P",{});var _Ct=s(Vbe);tir=r(_Ct,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),_Ct.forEach(t),air=i(Ta),Ua=n(Ta,"P",{});var eL=s(Ua);nir=r(eL,"The model class to instantiate is selected based on the "),Xbe=n(eL,"CODE",{});var bCt=s(Xbe);sir=r(bCt,"model_type"),bCt.forEach(t),lir=r(eL,` property of the config object (either
passed as an argument or loaded from `),zbe=n(eL,"CODE",{});var vCt=s(zbe);iir=r(vCt,"pretrained_model_name_or_path"),vCt.forEach(t),dir=r(eL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wbe=n(eL,"CODE",{});var FCt=s(Wbe);cir=r(FCt,"pretrained_model_name_or_path"),FCt.forEach(t),mir=r(eL,":"),eL.forEach(t),fir=i(Ta),w8=n(Ta,"UL",{});var zVe=s(w8);VM=n(zVe,"LI",{});var xPe=s(VM);Qbe=n(xPe,"STRONG",{});var TCt=s(Qbe);gir=r(TCt,"speech-encoder-decoder"),TCt.forEach(t),hir=r(xPe," \u2014 "),HW=n(xPe,"A",{href:!0});var MCt=s(HW);uir=r(MCt,"SpeechEncoderDecoderModel"),MCt.forEach(t),pir=r(xPe," (Speech Encoder decoder model)"),xPe.forEach(t),_ir=i(zVe),XM=n(zVe,"LI",{});var $Pe=s(XM);Hbe=n($Pe,"STRONG",{});var ECt=s(Hbe);bir=r(ECt,"speech_to_text"),ECt.forEach(t),vir=r($Pe," \u2014 "),UW=n($Pe,"A",{href:!0});var CCt=s(UW);Fir=r(CCt,"Speech2TextForConditionalGeneration"),CCt.forEach(t),Tir=r($Pe," (Speech2Text model)"),$Pe.forEach(t),zVe.forEach(t),Mir=i(Ta),zM=n(Ta,"P",{});var kPe=s(zM);Eir=r(kPe,"The model is set in evaluation mode by default using "),Ube=n(kPe,"CODE",{});var wCt=s(Ube);Cir=r(wCt,"model.eval()"),wCt.forEach(t),wir=r(kPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jbe=n(kPe,"CODE",{});var ACt=s(Jbe);Air=r(ACt,"model.train()"),ACt.forEach(t),kPe.forEach(t),Lir=i(Ta),T(WM.$$.fragment,Ta),Ta.forEach(t),hl.forEach(t),jGe=i(m),Pd=n(m,"H2",{class:!0});var WVe=s(Pd);QM=n(WVe,"A",{id:!0,class:!0,href:!0});var LCt=s(QM);Ybe=n(LCt,"SPAN",{});var yCt=s(Ybe);T(A8.$$.fragment,yCt),yCt.forEach(t),LCt.forEach(t),yir=i(WVe),Kbe=n(WVe,"SPAN",{});var xCt=s(Kbe);xir=r(xCt,"AutoModelForAudioXVector"),xCt.forEach(t),WVe.forEach(t),DGe=i(m),Qo=n(m,"DIV",{class:!0});var ul=s(Qo);T(L8.$$.fragment,ul),$ir=i(ul),Bd=n(ul,"P",{});var xoe=s(Bd);kir=r(xoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),JW=n(xoe,"A",{href:!0});var $Ct=s(JW);Sir=r($Ct,"from_pretrained()"),$Ct.forEach(t),Rir=r(xoe," class method or the "),YW=n(xoe,"A",{href:!0});var kCt=s(YW);Pir=r(kCt,"from_config()"),kCt.forEach(t),Bir=r(xoe,` class
method.`),xoe.forEach(t),Iir=i(ul),y8=n(ul,"P",{});var QVe=s(y8);Nir=r(QVe,"This class cannot be instantiated directly using "),Zbe=n(QVe,"CODE",{});var SCt=s(Zbe);qir=r(SCt,"__init__()"),SCt.forEach(t),jir=r(QVe," (throws an error)."),QVe.forEach(t),Dir=i(ul),Ct=n(ul,"DIV",{class:!0});var oL=s(Ct);T(x8.$$.fragment,oL),Gir=i(oL),eve=n(oL,"P",{});var RCt=s(eve);Oir=r(RCt,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),RCt.forEach(t),Vir=i(oL),Id=n(oL,"P",{});var $oe=s(Id);Xir=r($oe,`Note:
Loading a model from its configuration file does `),ove=n($oe,"STRONG",{});var PCt=s(ove);zir=r(PCt,"not"),PCt.forEach(t),Wir=r($oe,` load the model weights. It only affects the
model\u2019s configuration. Use `),KW=n($oe,"A",{href:!0});var BCt=s(KW);Qir=r(BCt,"from_pretrained()"),BCt.forEach(t),Hir=r($oe," to load the model weights."),$oe.forEach(t),Uir=i(oL),T(HM.$$.fragment,oL),oL.forEach(t),Jir=i(ul),uo=n(ul,"DIV",{class:!0});var Ma=s(uo);T($8.$$.fragment,Ma),Yir=i(Ma),rve=n(Ma,"P",{});var ICt=s(rve);Kir=r(ICt,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),ICt.forEach(t),Zir=i(Ma),Ja=n(Ma,"P",{});var rL=s(Ja);edr=r(rL,"The model class to instantiate is selected based on the "),tve=n(rL,"CODE",{});var NCt=s(tve);odr=r(NCt,"model_type"),NCt.forEach(t),rdr=r(rL,` property of the config object (either
passed as an argument or loaded from `),ave=n(rL,"CODE",{});var qCt=s(ave);tdr=r(qCt,"pretrained_model_name_or_path"),qCt.forEach(t),adr=r(rL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nve=n(rL,"CODE",{});var jCt=s(nve);ndr=r(jCt,"pretrained_model_name_or_path"),jCt.forEach(t),sdr=r(rL,":"),rL.forEach(t),ldr=i(Ma),ot=n(Ma,"UL",{});var pl=s(ot);UM=n(pl,"LI",{});var SPe=s(UM);sve=n(SPe,"STRONG",{});var DCt=s(sve);idr=r(DCt,"data2vec-audio"),DCt.forEach(t),ddr=r(SPe," \u2014 "),ZW=n(SPe,"A",{href:!0});var GCt=s(ZW);cdr=r(GCt,"Data2VecAudioForXVector"),GCt.forEach(t),mdr=r(SPe," (Data2VecAudio model)"),SPe.forEach(t),fdr=i(pl),JM=n(pl,"LI",{});var RPe=s(JM);lve=n(RPe,"STRONG",{});var OCt=s(lve);gdr=r(OCt,"unispeech-sat"),OCt.forEach(t),hdr=r(RPe," \u2014 "),eQ=n(RPe,"A",{href:!0});var VCt=s(eQ);udr=r(VCt,"UniSpeechSatForXVector"),VCt.forEach(t),pdr=r(RPe," (UniSpeechSat model)"),RPe.forEach(t),_dr=i(pl),YM=n(pl,"LI",{});var PPe=s(YM);ive=n(PPe,"STRONG",{});var XCt=s(ive);bdr=r(XCt,"wav2vec2"),XCt.forEach(t),vdr=r(PPe," \u2014 "),oQ=n(PPe,"A",{href:!0});var zCt=s(oQ);Fdr=r(zCt,"Wav2Vec2ForXVector"),zCt.forEach(t),Tdr=r(PPe," (Wav2Vec2 model)"),PPe.forEach(t),Mdr=i(pl),KM=n(pl,"LI",{});var BPe=s(KM);dve=n(BPe,"STRONG",{});var WCt=s(dve);Edr=r(WCt,"wav2vec2-conformer"),WCt.forEach(t),Cdr=r(BPe," \u2014 "),rQ=n(BPe,"A",{href:!0});var QCt=s(rQ);wdr=r(QCt,"Wav2Vec2ConformerForXVector"),QCt.forEach(t),Adr=r(BPe," (Wav2Vec2-Conformer model)"),BPe.forEach(t),Ldr=i(pl),ZM=n(pl,"LI",{});var IPe=s(ZM);cve=n(IPe,"STRONG",{});var HCt=s(cve);ydr=r(HCt,"wavlm"),HCt.forEach(t),xdr=r(IPe," \u2014 "),tQ=n(IPe,"A",{href:!0});var UCt=s(tQ);$dr=r(UCt,"WavLMForXVector"),UCt.forEach(t),kdr=r(IPe," (WavLM model)"),IPe.forEach(t),pl.forEach(t),Sdr=i(Ma),e4=n(Ma,"P",{});var NPe=s(e4);Rdr=r(NPe,"The model is set in evaluation mode by default using "),mve=n(NPe,"CODE",{});var JCt=s(mve);Pdr=r(JCt,"model.eval()"),JCt.forEach(t),Bdr=r(NPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fve=n(NPe,"CODE",{});var YCt=s(fve);Idr=r(YCt,"model.train()"),YCt.forEach(t),NPe.forEach(t),Ndr=i(Ma),T(o4.$$.fragment,Ma),Ma.forEach(t),ul.forEach(t),GGe=i(m),Nd=n(m,"H2",{class:!0});var HVe=s(Nd);r4=n(HVe,"A",{id:!0,class:!0,href:!0});var KCt=s(r4);gve=n(KCt,"SPAN",{});var ZCt=s(gve);T(k8.$$.fragment,ZCt),ZCt.forEach(t),KCt.forEach(t),qdr=i(HVe),hve=n(HVe,"SPAN",{});var e5t=s(hve);jdr=r(e5t,"AutoModelForMaskedImageModeling"),e5t.forEach(t),HVe.forEach(t),OGe=i(m),Ho=n(m,"DIV",{class:!0});var _l=s(Ho);T(S8.$$.fragment,_l),Ddr=i(_l),qd=n(_l,"P",{});var koe=s(qd);Gdr=r(koe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),aQ=n(koe,"A",{href:!0});var o5t=s(aQ);Odr=r(o5t,"from_pretrained()"),o5t.forEach(t),Vdr=r(koe," class method or the "),nQ=n(koe,"A",{href:!0});var r5t=s(nQ);Xdr=r(r5t,"from_config()"),r5t.forEach(t),zdr=r(koe,` class
method.`),koe.forEach(t),Wdr=i(_l),R8=n(_l,"P",{});var UVe=s(R8);Qdr=r(UVe,"This class cannot be instantiated directly using "),uve=n(UVe,"CODE",{});var t5t=s(uve);Hdr=r(t5t,"__init__()"),t5t.forEach(t),Udr=r(UVe," (throws an error)."),UVe.forEach(t),Jdr=i(_l),wt=n(_l,"DIV",{class:!0});var tL=s(wt);T(P8.$$.fragment,tL),Ydr=i(tL),pve=n(tL,"P",{});var a5t=s(pve);Kdr=r(a5t,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),a5t.forEach(t),Zdr=i(tL),jd=n(tL,"P",{});var Soe=s(jd);ecr=r(Soe,`Note:
Loading a model from its configuration file does `),_ve=n(Soe,"STRONG",{});var n5t=s(_ve);ocr=r(n5t,"not"),n5t.forEach(t),rcr=r(Soe,` load the model weights. It only affects the
model\u2019s configuration. Use `),sQ=n(Soe,"A",{href:!0});var s5t=s(sQ);tcr=r(s5t,"from_pretrained()"),s5t.forEach(t),acr=r(Soe," to load the model weights."),Soe.forEach(t),ncr=i(tL),T(t4.$$.fragment,tL),tL.forEach(t),scr=i(_l),po=n(_l,"DIV",{class:!0});var Ea=s(po);T(B8.$$.fragment,Ea),lcr=i(Ea),bve=n(Ea,"P",{});var l5t=s(bve);icr=r(l5t,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),l5t.forEach(t),dcr=i(Ea),Ya=n(Ea,"P",{});var aL=s(Ya);ccr=r(aL,"The model class to instantiate is selected based on the "),vve=n(aL,"CODE",{});var i5t=s(vve);mcr=r(i5t,"model_type"),i5t.forEach(t),fcr=r(aL,` property of the config object (either
passed as an argument or loaded from `),Fve=n(aL,"CODE",{});var d5t=s(Fve);gcr=r(d5t,"pretrained_model_name_or_path"),d5t.forEach(t),hcr=r(aL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tve=n(aL,"CODE",{});var c5t=s(Tve);ucr=r(c5t,"pretrained_model_name_or_path"),c5t.forEach(t),pcr=r(aL,":"),aL.forEach(t),_cr=i(Ea),Dd=n(Ea,"UL",{});var Roe=s(Dd);a4=n(Roe,"LI",{});var qPe=s(a4);Mve=n(qPe,"STRONG",{});var m5t=s(Mve);bcr=r(m5t,"deit"),m5t.forEach(t),vcr=r(qPe," \u2014 "),lQ=n(qPe,"A",{href:!0});var f5t=s(lQ);Fcr=r(f5t,"DeiTForMaskedImageModeling"),f5t.forEach(t),Tcr=r(qPe," (DeiT model)"),qPe.forEach(t),Mcr=i(Roe),n4=n(Roe,"LI",{});var jPe=s(n4);Eve=n(jPe,"STRONG",{});var g5t=s(Eve);Ecr=r(g5t,"swin"),g5t.forEach(t),Ccr=r(jPe," \u2014 "),iQ=n(jPe,"A",{href:!0});var h5t=s(iQ);wcr=r(h5t,"SwinForMaskedImageModeling"),h5t.forEach(t),Acr=r(jPe," (Swin Transformer model)"),jPe.forEach(t),Lcr=i(Roe),s4=n(Roe,"LI",{});var DPe=s(s4);Cve=n(DPe,"STRONG",{});var u5t=s(Cve);ycr=r(u5t,"vit"),u5t.forEach(t),xcr=r(DPe," \u2014 "),dQ=n(DPe,"A",{href:!0});var p5t=s(dQ);$cr=r(p5t,"ViTForMaskedImageModeling"),p5t.forEach(t),kcr=r(DPe," (ViT model)"),DPe.forEach(t),Roe.forEach(t),Scr=i(Ea),l4=n(Ea,"P",{});var GPe=s(l4);Rcr=r(GPe,"The model is set in evaluation mode by default using "),wve=n(GPe,"CODE",{});var _5t=s(wve);Pcr=r(_5t,"model.eval()"),_5t.forEach(t),Bcr=r(GPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ave=n(GPe,"CODE",{});var b5t=s(Ave);Icr=r(b5t,"model.train()"),b5t.forEach(t),GPe.forEach(t),Ncr=i(Ea),T(i4.$$.fragment,Ea),Ea.forEach(t),_l.forEach(t),VGe=i(m),Gd=n(m,"H2",{class:!0});var JVe=s(Gd);d4=n(JVe,"A",{id:!0,class:!0,href:!0});var v5t=s(d4);Lve=n(v5t,"SPAN",{});var F5t=s(Lve);T(I8.$$.fragment,F5t),F5t.forEach(t),v5t.forEach(t),qcr=i(JVe),yve=n(JVe,"SPAN",{});var T5t=s(yve);jcr=r(T5t,"AutoModelForObjectDetection"),T5t.forEach(t),JVe.forEach(t),XGe=i(m),Uo=n(m,"DIV",{class:!0});var bl=s(Uo);T(N8.$$.fragment,bl),Dcr=i(bl),Od=n(bl,"P",{});var Poe=s(Od);Gcr=r(Poe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),cQ=n(Poe,"A",{href:!0});var M5t=s(cQ);Ocr=r(M5t,"from_pretrained()"),M5t.forEach(t),Vcr=r(Poe," class method or the "),mQ=n(Poe,"A",{href:!0});var E5t=s(mQ);Xcr=r(E5t,"from_config()"),E5t.forEach(t),zcr=r(Poe,` class
method.`),Poe.forEach(t),Wcr=i(bl),q8=n(bl,"P",{});var YVe=s(q8);Qcr=r(YVe,"This class cannot be instantiated directly using "),xve=n(YVe,"CODE",{});var C5t=s(xve);Hcr=r(C5t,"__init__()"),C5t.forEach(t),Ucr=r(YVe," (throws an error)."),YVe.forEach(t),Jcr=i(bl),At=n(bl,"DIV",{class:!0});var nL=s(At);T(j8.$$.fragment,nL),Ycr=i(nL),$ve=n(nL,"P",{});var w5t=s($ve);Kcr=r(w5t,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),w5t.forEach(t),Zcr=i(nL),Vd=n(nL,"P",{});var Boe=s(Vd);emr=r(Boe,`Note:
Loading a model from its configuration file does `),kve=n(Boe,"STRONG",{});var A5t=s(kve);omr=r(A5t,"not"),A5t.forEach(t),rmr=r(Boe,` load the model weights. It only affects the
model\u2019s configuration. Use `),fQ=n(Boe,"A",{href:!0});var L5t=s(fQ);tmr=r(L5t,"from_pretrained()"),L5t.forEach(t),amr=r(Boe," to load the model weights."),Boe.forEach(t),nmr=i(nL),T(c4.$$.fragment,nL),nL.forEach(t),smr=i(bl),_o=n(bl,"DIV",{class:!0});var Ca=s(_o);T(D8.$$.fragment,Ca),lmr=i(Ca),Sve=n(Ca,"P",{});var y5t=s(Sve);imr=r(y5t,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),y5t.forEach(t),dmr=i(Ca),Ka=n(Ca,"P",{});var sL=s(Ka);cmr=r(sL,"The model class to instantiate is selected based on the "),Rve=n(sL,"CODE",{});var x5t=s(Rve);mmr=r(x5t,"model_type"),x5t.forEach(t),fmr=r(sL,` property of the config object (either
passed as an argument or loaded from `),Pve=n(sL,"CODE",{});var $5t=s(Pve);gmr=r($5t,"pretrained_model_name_or_path"),$5t.forEach(t),hmr=r(sL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bve=n(sL,"CODE",{});var k5t=s(Bve);umr=r(k5t,"pretrained_model_name_or_path"),k5t.forEach(t),pmr=r(sL,":"),sL.forEach(t),_mr=i(Ca),G8=n(Ca,"UL",{});var KVe=s(G8);m4=n(KVe,"LI",{});var OPe=s(m4);Ive=n(OPe,"STRONG",{});var S5t=s(Ive);bmr=r(S5t,"detr"),S5t.forEach(t),vmr=r(OPe," \u2014 "),gQ=n(OPe,"A",{href:!0});var R5t=s(gQ);Fmr=r(R5t,"DetrForObjectDetection"),R5t.forEach(t),Tmr=r(OPe," (DETR model)"),OPe.forEach(t),Mmr=i(KVe),f4=n(KVe,"LI",{});var VPe=s(f4);Nve=n(VPe,"STRONG",{});var P5t=s(Nve);Emr=r(P5t,"yolos"),P5t.forEach(t),Cmr=r(VPe," \u2014 "),hQ=n(VPe,"A",{href:!0});var B5t=s(hQ);wmr=r(B5t,"YolosForObjectDetection"),B5t.forEach(t),Amr=r(VPe," (YOLOS model)"),VPe.forEach(t),KVe.forEach(t),Lmr=i(Ca),g4=n(Ca,"P",{});var XPe=s(g4);ymr=r(XPe,"The model is set in evaluation mode by default using "),qve=n(XPe,"CODE",{});var I5t=s(qve);xmr=r(I5t,"model.eval()"),I5t.forEach(t),$mr=r(XPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jve=n(XPe,"CODE",{});var N5t=s(jve);kmr=r(N5t,"model.train()"),N5t.forEach(t),XPe.forEach(t),Smr=i(Ca),T(h4.$$.fragment,Ca),Ca.forEach(t),bl.forEach(t),zGe=i(m),Xd=n(m,"H2",{class:!0});var ZVe=s(Xd);u4=n(ZVe,"A",{id:!0,class:!0,href:!0});var q5t=s(u4);Dve=n(q5t,"SPAN",{});var j5t=s(Dve);T(O8.$$.fragment,j5t),j5t.forEach(t),q5t.forEach(t),Rmr=i(ZVe),Gve=n(ZVe,"SPAN",{});var D5t=s(Gve);Pmr=r(D5t,"AutoModelForImageSegmentation"),D5t.forEach(t),ZVe.forEach(t),WGe=i(m),Jo=n(m,"DIV",{class:!0});var vl=s(Jo);T(V8.$$.fragment,vl),Bmr=i(vl),zd=n(vl,"P",{});var Ioe=s(zd);Imr=r(Ioe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),uQ=n(Ioe,"A",{href:!0});var G5t=s(uQ);Nmr=r(G5t,"from_pretrained()"),G5t.forEach(t),qmr=r(Ioe," class method or the "),pQ=n(Ioe,"A",{href:!0});var O5t=s(pQ);jmr=r(O5t,"from_config()"),O5t.forEach(t),Dmr=r(Ioe,` class
method.`),Ioe.forEach(t),Gmr=i(vl),X8=n(vl,"P",{});var eXe=s(X8);Omr=r(eXe,"This class cannot be instantiated directly using "),Ove=n(eXe,"CODE",{});var V5t=s(Ove);Vmr=r(V5t,"__init__()"),V5t.forEach(t),Xmr=r(eXe," (throws an error)."),eXe.forEach(t),zmr=i(vl),Lt=n(vl,"DIV",{class:!0});var lL=s(Lt);T(z8.$$.fragment,lL),Wmr=i(lL),Vve=n(lL,"P",{});var X5t=s(Vve);Qmr=r(X5t,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),X5t.forEach(t),Hmr=i(lL),Wd=n(lL,"P",{});var Noe=s(Wd);Umr=r(Noe,`Note:
Loading a model from its configuration file does `),Xve=n(Noe,"STRONG",{});var z5t=s(Xve);Jmr=r(z5t,"not"),z5t.forEach(t),Ymr=r(Noe,` load the model weights. It only affects the
model\u2019s configuration. Use `),_Q=n(Noe,"A",{href:!0});var W5t=s(_Q);Kmr=r(W5t,"from_pretrained()"),W5t.forEach(t),Zmr=r(Noe," to load the model weights."),Noe.forEach(t),efr=i(lL),T(p4.$$.fragment,lL),lL.forEach(t),ofr=i(vl),bo=n(vl,"DIV",{class:!0});var wa=s(bo);T(W8.$$.fragment,wa),rfr=i(wa),zve=n(wa,"P",{});var Q5t=s(zve);tfr=r(Q5t,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Q5t.forEach(t),afr=i(wa),Za=n(wa,"P",{});var iL=s(Za);nfr=r(iL,"The model class to instantiate is selected based on the "),Wve=n(iL,"CODE",{});var H5t=s(Wve);sfr=r(H5t,"model_type"),H5t.forEach(t),lfr=r(iL,` property of the config object (either
passed as an argument or loaded from `),Qve=n(iL,"CODE",{});var U5t=s(Qve);ifr=r(U5t,"pretrained_model_name_or_path"),U5t.forEach(t),dfr=r(iL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hve=n(iL,"CODE",{});var J5t=s(Hve);cfr=r(J5t,"pretrained_model_name_or_path"),J5t.forEach(t),mfr=r(iL,":"),iL.forEach(t),ffr=i(wa),Uve=n(wa,"UL",{});var Y5t=s(Uve);_4=n(Y5t,"LI",{});var zPe=s(_4);Jve=n(zPe,"STRONG",{});var K5t=s(Jve);gfr=r(K5t,"detr"),K5t.forEach(t),hfr=r(zPe," \u2014 "),bQ=n(zPe,"A",{href:!0});var Z5t=s(bQ);ufr=r(Z5t,"DetrForSegmentation"),Z5t.forEach(t),pfr=r(zPe," (DETR model)"),zPe.forEach(t),Y5t.forEach(t),_fr=i(wa),b4=n(wa,"P",{});var WPe=s(b4);bfr=r(WPe,"The model is set in evaluation mode by default using "),Yve=n(WPe,"CODE",{});var e3t=s(Yve);vfr=r(e3t,"model.eval()"),e3t.forEach(t),Ffr=r(WPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Kve=n(WPe,"CODE",{});var o3t=s(Kve);Tfr=r(o3t,"model.train()"),o3t.forEach(t),WPe.forEach(t),Mfr=i(wa),T(v4.$$.fragment,wa),wa.forEach(t),vl.forEach(t),QGe=i(m),Qd=n(m,"H2",{class:!0});var oXe=s(Qd);F4=n(oXe,"A",{id:!0,class:!0,href:!0});var r3t=s(F4);Zve=n(r3t,"SPAN",{});var t3t=s(Zve);T(Q8.$$.fragment,t3t),t3t.forEach(t),r3t.forEach(t),Efr=i(oXe),eFe=n(oXe,"SPAN",{});var a3t=s(eFe);Cfr=r(a3t,"AutoModelForSemanticSegmentation"),a3t.forEach(t),oXe.forEach(t),HGe=i(m),Yo=n(m,"DIV",{class:!0});var Fl=s(Yo);T(H8.$$.fragment,Fl),wfr=i(Fl),Hd=n(Fl,"P",{});var qoe=s(Hd);Afr=r(qoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),vQ=n(qoe,"A",{href:!0});var n3t=s(vQ);Lfr=r(n3t,"from_pretrained()"),n3t.forEach(t),yfr=r(qoe," class method or the "),FQ=n(qoe,"A",{href:!0});var s3t=s(FQ);xfr=r(s3t,"from_config()"),s3t.forEach(t),$fr=r(qoe,` class
method.`),qoe.forEach(t),kfr=i(Fl),U8=n(Fl,"P",{});var rXe=s(U8);Sfr=r(rXe,"This class cannot be instantiated directly using "),oFe=n(rXe,"CODE",{});var l3t=s(oFe);Rfr=r(l3t,"__init__()"),l3t.forEach(t),Pfr=r(rXe," (throws an error)."),rXe.forEach(t),Bfr=i(Fl),yt=n(Fl,"DIV",{class:!0});var dL=s(yt);T(J8.$$.fragment,dL),Ifr=i(dL),rFe=n(dL,"P",{});var i3t=s(rFe);Nfr=r(i3t,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),i3t.forEach(t),qfr=i(dL),Ud=n(dL,"P",{});var joe=s(Ud);jfr=r(joe,`Note:
Loading a model from its configuration file does `),tFe=n(joe,"STRONG",{});var d3t=s(tFe);Dfr=r(d3t,"not"),d3t.forEach(t),Gfr=r(joe,` load the model weights. It only affects the
model\u2019s configuration. Use `),TQ=n(joe,"A",{href:!0});var c3t=s(TQ);Ofr=r(c3t,"from_pretrained()"),c3t.forEach(t),Vfr=r(joe," to load the model weights."),joe.forEach(t),Xfr=i(dL),T(T4.$$.fragment,dL),dL.forEach(t),zfr=i(Fl),vo=n(Fl,"DIV",{class:!0});var Aa=s(vo);T(Y8.$$.fragment,Aa),Wfr=i(Aa),aFe=n(Aa,"P",{});var m3t=s(aFe);Qfr=r(m3t,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),m3t.forEach(t),Hfr=i(Aa),en=n(Aa,"P",{});var cL=s(en);Ufr=r(cL,"The model class to instantiate is selected based on the "),nFe=n(cL,"CODE",{});var f3t=s(nFe);Jfr=r(f3t,"model_type"),f3t.forEach(t),Yfr=r(cL,` property of the config object (either
passed as an argument or loaded from `),sFe=n(cL,"CODE",{});var g3t=s(sFe);Kfr=r(g3t,"pretrained_model_name_or_path"),g3t.forEach(t),Zfr=r(cL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),lFe=n(cL,"CODE",{});var h3t=s(lFe);egr=r(h3t,"pretrained_model_name_or_path"),h3t.forEach(t),ogr=r(cL,":"),cL.forEach(t),rgr=i(Aa),on=n(Aa,"UL",{});var mL=s(on);M4=n(mL,"LI",{});var QPe=s(M4);iFe=n(QPe,"STRONG",{});var u3t=s(iFe);tgr=r(u3t,"beit"),u3t.forEach(t),agr=r(QPe," \u2014 "),MQ=n(QPe,"A",{href:!0});var p3t=s(MQ);ngr=r(p3t,"BeitForSemanticSegmentation"),p3t.forEach(t),sgr=r(QPe," (BEiT model)"),QPe.forEach(t),lgr=i(mL),E4=n(mL,"LI",{});var HPe=s(E4);dFe=n(HPe,"STRONG",{});var _3t=s(dFe);igr=r(_3t,"data2vec-vision"),_3t.forEach(t),dgr=r(HPe," \u2014 "),EQ=n(HPe,"A",{href:!0});var b3t=s(EQ);cgr=r(b3t,"Data2VecVisionForSemanticSegmentation"),b3t.forEach(t),mgr=r(HPe," (Data2VecVision model)"),HPe.forEach(t),fgr=i(mL),C4=n(mL,"LI",{});var UPe=s(C4);cFe=n(UPe,"STRONG",{});var v3t=s(cFe);ggr=r(v3t,"dpt"),v3t.forEach(t),hgr=r(UPe," \u2014 "),CQ=n(UPe,"A",{href:!0});var F3t=s(CQ);ugr=r(F3t,"DPTForSemanticSegmentation"),F3t.forEach(t),pgr=r(UPe," (DPT model)"),UPe.forEach(t),_gr=i(mL),w4=n(mL,"LI",{});var JPe=s(w4);mFe=n(JPe,"STRONG",{});var T3t=s(mFe);bgr=r(T3t,"segformer"),T3t.forEach(t),vgr=r(JPe," \u2014 "),wQ=n(JPe,"A",{href:!0});var M3t=s(wQ);Fgr=r(M3t,"SegformerForSemanticSegmentation"),M3t.forEach(t),Tgr=r(JPe," (SegFormer model)"),JPe.forEach(t),mL.forEach(t),Mgr=i(Aa),A4=n(Aa,"P",{});var YPe=s(A4);Egr=r(YPe,"The model is set in evaluation mode by default using "),fFe=n(YPe,"CODE",{});var E3t=s(fFe);Cgr=r(E3t,"model.eval()"),E3t.forEach(t),wgr=r(YPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gFe=n(YPe,"CODE",{});var C3t=s(gFe);Agr=r(C3t,"model.train()"),C3t.forEach(t),YPe.forEach(t),Lgr=i(Aa),T(L4.$$.fragment,Aa),Aa.forEach(t),Fl.forEach(t),UGe=i(m),Jd=n(m,"H2",{class:!0});var tXe=s(Jd);y4=n(tXe,"A",{id:!0,class:!0,href:!0});var w3t=s(y4);hFe=n(w3t,"SPAN",{});var A3t=s(hFe);T(K8.$$.fragment,A3t),A3t.forEach(t),w3t.forEach(t),ygr=i(tXe),uFe=n(tXe,"SPAN",{});var L3t=s(uFe);xgr=r(L3t,"AutoModelForInstanceSegmentation"),L3t.forEach(t),tXe.forEach(t),JGe=i(m),Ko=n(m,"DIV",{class:!0});var Tl=s(Ko);T(Z8.$$.fragment,Tl),$gr=i(Tl),Yd=n(Tl,"P",{});var Doe=s(Yd);kgr=r(Doe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),AQ=n(Doe,"A",{href:!0});var y3t=s(AQ);Sgr=r(y3t,"from_pretrained()"),y3t.forEach(t),Rgr=r(Doe," class method or the "),LQ=n(Doe,"A",{href:!0});var x3t=s(LQ);Pgr=r(x3t,"from_config()"),x3t.forEach(t),Bgr=r(Doe,` class
method.`),Doe.forEach(t),Igr=i(Tl),e9=n(Tl,"P",{});var aXe=s(e9);Ngr=r(aXe,"This class cannot be instantiated directly using "),pFe=n(aXe,"CODE",{});var $3t=s(pFe);qgr=r($3t,"__init__()"),$3t.forEach(t),jgr=r(aXe," (throws an error)."),aXe.forEach(t),Dgr=i(Tl),xt=n(Tl,"DIV",{class:!0});var fL=s(xt);T(o9.$$.fragment,fL),Ggr=i(fL),_Fe=n(fL,"P",{});var k3t=s(_Fe);Ogr=r(k3t,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),k3t.forEach(t),Vgr=i(fL),Kd=n(fL,"P",{});var Goe=s(Kd);Xgr=r(Goe,`Note:
Loading a model from its configuration file does `),bFe=n(Goe,"STRONG",{});var S3t=s(bFe);zgr=r(S3t,"not"),S3t.forEach(t),Wgr=r(Goe,` load the model weights. It only affects the
model\u2019s configuration. Use `),yQ=n(Goe,"A",{href:!0});var R3t=s(yQ);Qgr=r(R3t,"from_pretrained()"),R3t.forEach(t),Hgr=r(Goe," to load the model weights."),Goe.forEach(t),Ugr=i(fL),T(x4.$$.fragment,fL),fL.forEach(t),Jgr=i(Tl),Fo=n(Tl,"DIV",{class:!0});var La=s(Fo);T(r9.$$.fragment,La),Ygr=i(La),vFe=n(La,"P",{});var P3t=s(vFe);Kgr=r(P3t,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),P3t.forEach(t),Zgr=i(La),rn=n(La,"P",{});var gL=s(rn);ehr=r(gL,"The model class to instantiate is selected based on the "),FFe=n(gL,"CODE",{});var B3t=s(FFe);ohr=r(B3t,"model_type"),B3t.forEach(t),rhr=r(gL,` property of the config object (either
passed as an argument or loaded from `),TFe=n(gL,"CODE",{});var I3t=s(TFe);thr=r(I3t,"pretrained_model_name_or_path"),I3t.forEach(t),ahr=r(gL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),MFe=n(gL,"CODE",{});var N3t=s(MFe);nhr=r(N3t,"pretrained_model_name_or_path"),N3t.forEach(t),shr=r(gL,":"),gL.forEach(t),lhr=i(La),EFe=n(La,"UL",{});var q3t=s(EFe);$4=n(q3t,"LI",{});var KPe=s($4);CFe=n(KPe,"STRONG",{});var j3t=s(CFe);ihr=r(j3t,"maskformer"),j3t.forEach(t),dhr=r(KPe," \u2014 "),xQ=n(KPe,"A",{href:!0});var D3t=s(xQ);chr=r(D3t,"MaskFormerForInstanceSegmentation"),D3t.forEach(t),mhr=r(KPe," (MaskFormer model)"),KPe.forEach(t),q3t.forEach(t),fhr=i(La),k4=n(La,"P",{});var ZPe=s(k4);ghr=r(ZPe,"The model is set in evaluation mode by default using "),wFe=n(ZPe,"CODE",{});var G3t=s(wFe);hhr=r(G3t,"model.eval()"),G3t.forEach(t),uhr=r(ZPe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),AFe=n(ZPe,"CODE",{});var O3t=s(AFe);phr=r(O3t,"model.train()"),O3t.forEach(t),ZPe.forEach(t),_hr=i(La),T(S4.$$.fragment,La),La.forEach(t),Tl.forEach(t),YGe=i(m),Zd=n(m,"H2",{class:!0});var nXe=s(Zd);R4=n(nXe,"A",{id:!0,class:!0,href:!0});var V3t=s(R4);LFe=n(V3t,"SPAN",{});var X3t=s(LFe);T(t9.$$.fragment,X3t),X3t.forEach(t),V3t.forEach(t),bhr=i(nXe),yFe=n(nXe,"SPAN",{});var z3t=s(yFe);vhr=r(z3t,"TFAutoModel"),z3t.forEach(t),nXe.forEach(t),KGe=i(m),Zo=n(m,"DIV",{class:!0});var Ml=s(Zo);T(a9.$$.fragment,Ml),Fhr=i(Ml),ec=n(Ml,"P",{});var Ooe=s(ec);Thr=r(Ooe,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),$Q=n(Ooe,"A",{href:!0});var W3t=s($Q);Mhr=r(W3t,"from_pretrained()"),W3t.forEach(t),Ehr=r(Ooe," class method or the "),kQ=n(Ooe,"A",{href:!0});var Q3t=s(kQ);Chr=r(Q3t,"from_config()"),Q3t.forEach(t),whr=r(Ooe,` class
method.`),Ooe.forEach(t),Ahr=i(Ml),n9=n(Ml,"P",{});var sXe=s(n9);Lhr=r(sXe,"This class cannot be instantiated directly using "),xFe=n(sXe,"CODE",{});var H3t=s(xFe);yhr=r(H3t,"__init__()"),H3t.forEach(t),xhr=r(sXe," (throws an error)."),sXe.forEach(t),$hr=i(Ml),$t=n(Ml,"DIV",{class:!0});var hL=s($t);T(s9.$$.fragment,hL),khr=i(hL),$Fe=n(hL,"P",{});var U3t=s($Fe);Shr=r(U3t,"Instantiates one of the base model classes of the library from a configuration."),U3t.forEach(t),Rhr=i(hL),oc=n(hL,"P",{});var Voe=s(oc);Phr=r(Voe,`Note:
Loading a model from its configuration file does `),kFe=n(Voe,"STRONG",{});var J3t=s(kFe);Bhr=r(J3t,"not"),J3t.forEach(t),Ihr=r(Voe,` load the model weights. It only affects the
model\u2019s configuration. Use `),SQ=n(Voe,"A",{href:!0});var Y3t=s(SQ);Nhr=r(Y3t,"from_pretrained()"),Y3t.forEach(t),qhr=r(Voe," to load the model weights."),Voe.forEach(t),jhr=i(hL),T(P4.$$.fragment,hL),hL.forEach(t),Dhr=i(Ml),Lr=n(Ml,"DIV",{class:!0});var El=s(Lr);T(l9.$$.fragment,El),Ghr=i(El),SFe=n(El,"P",{});var K3t=s(SFe);Ohr=r(K3t,"Instantiate one of the base model classes of the library from a pretrained model."),K3t.forEach(t),Vhr=i(El),tn=n(El,"P",{});var uL=s(tn);Xhr=r(uL,"The model class to instantiate is selected based on the "),RFe=n(uL,"CODE",{});var Z3t=s(RFe);zhr=r(Z3t,"model_type"),Z3t.forEach(t),Whr=r(uL,` property of the config object (either
passed as an argument or loaded from `),PFe=n(uL,"CODE",{});var e0t=s(PFe);Qhr=r(e0t,"pretrained_model_name_or_path"),e0t.forEach(t),Hhr=r(uL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),BFe=n(uL,"CODE",{});var o0t=s(BFe);Uhr=r(o0t,"pretrained_model_name_or_path"),o0t.forEach(t),Jhr=r(uL,":"),uL.forEach(t),Yhr=i(El),q=n(El,"UL",{});var D=s(q);B4=n(D,"LI",{});var eBe=s(B4);IFe=n(eBe,"STRONG",{});var r0t=s(IFe);Khr=r(r0t,"albert"),r0t.forEach(t),Zhr=r(eBe," \u2014 "),RQ=n(eBe,"A",{href:!0});var t0t=s(RQ);eur=r(t0t,"TFAlbertModel"),t0t.forEach(t),our=r(eBe," (ALBERT model)"),eBe.forEach(t),rur=i(D),I4=n(D,"LI",{});var oBe=s(I4);NFe=n(oBe,"STRONG",{});var a0t=s(NFe);tur=r(a0t,"bart"),a0t.forEach(t),aur=r(oBe," \u2014 "),PQ=n(oBe,"A",{href:!0});var n0t=s(PQ);nur=r(n0t,"TFBartModel"),n0t.forEach(t),sur=r(oBe," (BART model)"),oBe.forEach(t),lur=i(D),N4=n(D,"LI",{});var rBe=s(N4);qFe=n(rBe,"STRONG",{});var s0t=s(qFe);iur=r(s0t,"bert"),s0t.forEach(t),dur=r(rBe," \u2014 "),BQ=n(rBe,"A",{href:!0});var l0t=s(BQ);cur=r(l0t,"TFBertModel"),l0t.forEach(t),mur=r(rBe," (BERT model)"),rBe.forEach(t),fur=i(D),q4=n(D,"LI",{});var tBe=s(q4);jFe=n(tBe,"STRONG",{});var i0t=s(jFe);gur=r(i0t,"blenderbot"),i0t.forEach(t),hur=r(tBe," \u2014 "),IQ=n(tBe,"A",{href:!0});var d0t=s(IQ);uur=r(d0t,"TFBlenderbotModel"),d0t.forEach(t),pur=r(tBe," (Blenderbot model)"),tBe.forEach(t),_ur=i(D),j4=n(D,"LI",{});var aBe=s(j4);DFe=n(aBe,"STRONG",{});var c0t=s(DFe);bur=r(c0t,"blenderbot-small"),c0t.forEach(t),vur=r(aBe," \u2014 "),NQ=n(aBe,"A",{href:!0});var m0t=s(NQ);Fur=r(m0t,"TFBlenderbotSmallModel"),m0t.forEach(t),Tur=r(aBe," (BlenderbotSmall model)"),aBe.forEach(t),Mur=i(D),D4=n(D,"LI",{});var nBe=s(D4);GFe=n(nBe,"STRONG",{});var f0t=s(GFe);Eur=r(f0t,"camembert"),f0t.forEach(t),Cur=r(nBe," \u2014 "),qQ=n(nBe,"A",{href:!0});var g0t=s(qQ);wur=r(g0t,"TFCamembertModel"),g0t.forEach(t),Aur=r(nBe," (CamemBERT model)"),nBe.forEach(t),Lur=i(D),G4=n(D,"LI",{});var sBe=s(G4);OFe=n(sBe,"STRONG",{});var h0t=s(OFe);yur=r(h0t,"clip"),h0t.forEach(t),xur=r(sBe," \u2014 "),jQ=n(sBe,"A",{href:!0});var u0t=s(jQ);$ur=r(u0t,"TFCLIPModel"),u0t.forEach(t),kur=r(sBe," (CLIP model)"),sBe.forEach(t),Sur=i(D),O4=n(D,"LI",{});var lBe=s(O4);VFe=n(lBe,"STRONG",{});var p0t=s(VFe);Rur=r(p0t,"convbert"),p0t.forEach(t),Pur=r(lBe," \u2014 "),DQ=n(lBe,"A",{href:!0});var _0t=s(DQ);Bur=r(_0t,"TFConvBertModel"),_0t.forEach(t),Iur=r(lBe," (ConvBERT model)"),lBe.forEach(t),Nur=i(D),V4=n(D,"LI",{});var iBe=s(V4);XFe=n(iBe,"STRONG",{});var b0t=s(XFe);qur=r(b0t,"convnext"),b0t.forEach(t),jur=r(iBe," \u2014 "),GQ=n(iBe,"A",{href:!0});var v0t=s(GQ);Dur=r(v0t,"TFConvNextModel"),v0t.forEach(t),Gur=r(iBe," (ConvNeXT model)"),iBe.forEach(t),Our=i(D),X4=n(D,"LI",{});var dBe=s(X4);zFe=n(dBe,"STRONG",{});var F0t=s(zFe);Vur=r(F0t,"ctrl"),F0t.forEach(t),Xur=r(dBe," \u2014 "),OQ=n(dBe,"A",{href:!0});var T0t=s(OQ);zur=r(T0t,"TFCTRLModel"),T0t.forEach(t),Wur=r(dBe," (CTRL model)"),dBe.forEach(t),Qur=i(D),z4=n(D,"LI",{});var cBe=s(z4);WFe=n(cBe,"STRONG",{});var M0t=s(WFe);Hur=r(M0t,"data2vec-vision"),M0t.forEach(t),Uur=r(cBe," \u2014 "),VQ=n(cBe,"A",{href:!0});var E0t=s(VQ);Jur=r(E0t,"TFData2VecVisionModel"),E0t.forEach(t),Yur=r(cBe," (Data2VecVision model)"),cBe.forEach(t),Kur=i(D),W4=n(D,"LI",{});var mBe=s(W4);QFe=n(mBe,"STRONG",{});var C0t=s(QFe);Zur=r(C0t,"deberta"),C0t.forEach(t),epr=r(mBe," \u2014 "),XQ=n(mBe,"A",{href:!0});var w0t=s(XQ);opr=r(w0t,"TFDebertaModel"),w0t.forEach(t),rpr=r(mBe," (DeBERTa model)"),mBe.forEach(t),tpr=i(D),Q4=n(D,"LI",{});var fBe=s(Q4);HFe=n(fBe,"STRONG",{});var A0t=s(HFe);apr=r(A0t,"deberta-v2"),A0t.forEach(t),npr=r(fBe," \u2014 "),zQ=n(fBe,"A",{href:!0});var L0t=s(zQ);spr=r(L0t,"TFDebertaV2Model"),L0t.forEach(t),lpr=r(fBe," (DeBERTa-v2 model)"),fBe.forEach(t),ipr=i(D),H4=n(D,"LI",{});var gBe=s(H4);UFe=n(gBe,"STRONG",{});var y0t=s(UFe);dpr=r(y0t,"distilbert"),y0t.forEach(t),cpr=r(gBe," \u2014 "),WQ=n(gBe,"A",{href:!0});var x0t=s(WQ);mpr=r(x0t,"TFDistilBertModel"),x0t.forEach(t),fpr=r(gBe," (DistilBERT model)"),gBe.forEach(t),gpr=i(D),U4=n(D,"LI",{});var hBe=s(U4);JFe=n(hBe,"STRONG",{});var $0t=s(JFe);hpr=r($0t,"dpr"),$0t.forEach(t),upr=r(hBe," \u2014 "),QQ=n(hBe,"A",{href:!0});var k0t=s(QQ);ppr=r(k0t,"TFDPRQuestionEncoder"),k0t.forEach(t),_pr=r(hBe," (DPR model)"),hBe.forEach(t),bpr=i(D),J4=n(D,"LI",{});var uBe=s(J4);YFe=n(uBe,"STRONG",{});var S0t=s(YFe);vpr=r(S0t,"electra"),S0t.forEach(t),Fpr=r(uBe," \u2014 "),HQ=n(uBe,"A",{href:!0});var R0t=s(HQ);Tpr=r(R0t,"TFElectraModel"),R0t.forEach(t),Mpr=r(uBe," (ELECTRA model)"),uBe.forEach(t),Epr=i(D),Y4=n(D,"LI",{});var pBe=s(Y4);KFe=n(pBe,"STRONG",{});var P0t=s(KFe);Cpr=r(P0t,"flaubert"),P0t.forEach(t),wpr=r(pBe," \u2014 "),UQ=n(pBe,"A",{href:!0});var B0t=s(UQ);Apr=r(B0t,"TFFlaubertModel"),B0t.forEach(t),Lpr=r(pBe," (FlauBERT model)"),pBe.forEach(t),ypr=i(D),Xs=n(D,"LI",{});var Ok=s(Xs);ZFe=n(Ok,"STRONG",{});var I0t=s(ZFe);xpr=r(I0t,"funnel"),I0t.forEach(t),$pr=r(Ok," \u2014 "),JQ=n(Ok,"A",{href:!0});var N0t=s(JQ);kpr=r(N0t,"TFFunnelModel"),N0t.forEach(t),Spr=r(Ok," or "),YQ=n(Ok,"A",{href:!0});var q0t=s(YQ);Rpr=r(q0t,"TFFunnelBaseModel"),q0t.forEach(t),Ppr=r(Ok," (Funnel Transformer model)"),Ok.forEach(t),Bpr=i(D),K4=n(D,"LI",{});var _Be=s(K4);e1e=n(_Be,"STRONG",{});var j0t=s(e1e);Ipr=r(j0t,"gpt2"),j0t.forEach(t),Npr=r(_Be," \u2014 "),KQ=n(_Be,"A",{href:!0});var D0t=s(KQ);qpr=r(D0t,"TFGPT2Model"),D0t.forEach(t),jpr=r(_Be," (OpenAI GPT-2 model)"),_Be.forEach(t),Dpr=i(D),Z4=n(D,"LI",{});var bBe=s(Z4);o1e=n(bBe,"STRONG",{});var G0t=s(o1e);Gpr=r(G0t,"gptj"),G0t.forEach(t),Opr=r(bBe," \u2014 "),ZQ=n(bBe,"A",{href:!0});var O0t=s(ZQ);Vpr=r(O0t,"TFGPTJModel"),O0t.forEach(t),Xpr=r(bBe," (GPT-J model)"),bBe.forEach(t),zpr=i(D),eE=n(D,"LI",{});var vBe=s(eE);r1e=n(vBe,"STRONG",{});var V0t=s(r1e);Wpr=r(V0t,"hubert"),V0t.forEach(t),Qpr=r(vBe," \u2014 "),eH=n(vBe,"A",{href:!0});var X0t=s(eH);Hpr=r(X0t,"TFHubertModel"),X0t.forEach(t),Upr=r(vBe," (Hubert model)"),vBe.forEach(t),Jpr=i(D),oE=n(D,"LI",{});var FBe=s(oE);t1e=n(FBe,"STRONG",{});var z0t=s(t1e);Ypr=r(z0t,"layoutlm"),z0t.forEach(t),Kpr=r(FBe," \u2014 "),oH=n(FBe,"A",{href:!0});var W0t=s(oH);Zpr=r(W0t,"TFLayoutLMModel"),W0t.forEach(t),e_r=r(FBe," (LayoutLM model)"),FBe.forEach(t),o_r=i(D),rE=n(D,"LI",{});var TBe=s(rE);a1e=n(TBe,"STRONG",{});var Q0t=s(a1e);r_r=r(Q0t,"led"),Q0t.forEach(t),t_r=r(TBe," \u2014 "),rH=n(TBe,"A",{href:!0});var H0t=s(rH);a_r=r(H0t,"TFLEDModel"),H0t.forEach(t),n_r=r(TBe," (LED model)"),TBe.forEach(t),s_r=i(D),tE=n(D,"LI",{});var MBe=s(tE);n1e=n(MBe,"STRONG",{});var U0t=s(n1e);l_r=r(U0t,"longformer"),U0t.forEach(t),i_r=r(MBe," \u2014 "),tH=n(MBe,"A",{href:!0});var J0t=s(tH);d_r=r(J0t,"TFLongformerModel"),J0t.forEach(t),c_r=r(MBe," (Longformer model)"),MBe.forEach(t),m_r=i(D),aE=n(D,"LI",{});var EBe=s(aE);s1e=n(EBe,"STRONG",{});var Y0t=s(s1e);f_r=r(Y0t,"lxmert"),Y0t.forEach(t),g_r=r(EBe," \u2014 "),aH=n(EBe,"A",{href:!0});var K0t=s(aH);h_r=r(K0t,"TFLxmertModel"),K0t.forEach(t),u_r=r(EBe," (LXMERT model)"),EBe.forEach(t),p_r=i(D),nE=n(D,"LI",{});var CBe=s(nE);l1e=n(CBe,"STRONG",{});var Z0t=s(l1e);__r=r(Z0t,"marian"),Z0t.forEach(t),b_r=r(CBe," \u2014 "),nH=n(CBe,"A",{href:!0});var ewt=s(nH);v_r=r(ewt,"TFMarianModel"),ewt.forEach(t),F_r=r(CBe," (Marian model)"),CBe.forEach(t),T_r=i(D),sE=n(D,"LI",{});var wBe=s(sE);i1e=n(wBe,"STRONG",{});var owt=s(i1e);M_r=r(owt,"mbart"),owt.forEach(t),E_r=r(wBe," \u2014 "),sH=n(wBe,"A",{href:!0});var rwt=s(sH);C_r=r(rwt,"TFMBartModel"),rwt.forEach(t),w_r=r(wBe," (mBART model)"),wBe.forEach(t),A_r=i(D),lE=n(D,"LI",{});var ABe=s(lE);d1e=n(ABe,"STRONG",{});var twt=s(d1e);L_r=r(twt,"mobilebert"),twt.forEach(t),y_r=r(ABe," \u2014 "),lH=n(ABe,"A",{href:!0});var awt=s(lH);x_r=r(awt,"TFMobileBertModel"),awt.forEach(t),$_r=r(ABe," (MobileBERT model)"),ABe.forEach(t),k_r=i(D),iE=n(D,"LI",{});var LBe=s(iE);c1e=n(LBe,"STRONG",{});var nwt=s(c1e);S_r=r(nwt,"mpnet"),nwt.forEach(t),R_r=r(LBe," \u2014 "),iH=n(LBe,"A",{href:!0});var swt=s(iH);P_r=r(swt,"TFMPNetModel"),swt.forEach(t),B_r=r(LBe," (MPNet model)"),LBe.forEach(t),I_r=i(D),dE=n(D,"LI",{});var yBe=s(dE);m1e=n(yBe,"STRONG",{});var lwt=s(m1e);N_r=r(lwt,"mt5"),lwt.forEach(t),q_r=r(yBe," \u2014 "),dH=n(yBe,"A",{href:!0});var iwt=s(dH);j_r=r(iwt,"TFMT5Model"),iwt.forEach(t),D_r=r(yBe," (MT5 model)"),yBe.forEach(t),G_r=i(D),cE=n(D,"LI",{});var xBe=s(cE);f1e=n(xBe,"STRONG",{});var dwt=s(f1e);O_r=r(dwt,"openai-gpt"),dwt.forEach(t),V_r=r(xBe," \u2014 "),cH=n(xBe,"A",{href:!0});var cwt=s(cH);X_r=r(cwt,"TFOpenAIGPTModel"),cwt.forEach(t),z_r=r(xBe," (OpenAI GPT model)"),xBe.forEach(t),W_r=i(D),mE=n(D,"LI",{});var $Be=s(mE);g1e=n($Be,"STRONG",{});var mwt=s(g1e);Q_r=r(mwt,"opt"),mwt.forEach(t),H_r=r($Be," \u2014 "),mH=n($Be,"A",{href:!0});var fwt=s(mH);U_r=r(fwt,"TFOPTModel"),fwt.forEach(t),J_r=r($Be," (OPT model)"),$Be.forEach(t),Y_r=i(D),fE=n(D,"LI",{});var kBe=s(fE);h1e=n(kBe,"STRONG",{});var gwt=s(h1e);K_r=r(gwt,"pegasus"),gwt.forEach(t),Z_r=r(kBe," \u2014 "),fH=n(kBe,"A",{href:!0});var hwt=s(fH);e2r=r(hwt,"TFPegasusModel"),hwt.forEach(t),o2r=r(kBe," (Pegasus model)"),kBe.forEach(t),r2r=i(D),gE=n(D,"LI",{});var SBe=s(gE);u1e=n(SBe,"STRONG",{});var uwt=s(u1e);t2r=r(uwt,"rembert"),uwt.forEach(t),a2r=r(SBe," \u2014 "),gH=n(SBe,"A",{href:!0});var pwt=s(gH);n2r=r(pwt,"TFRemBertModel"),pwt.forEach(t),s2r=r(SBe," (RemBERT model)"),SBe.forEach(t),l2r=i(D),hE=n(D,"LI",{});var RBe=s(hE);p1e=n(RBe,"STRONG",{});var _wt=s(p1e);i2r=r(_wt,"roberta"),_wt.forEach(t),d2r=r(RBe," \u2014 "),hH=n(RBe,"A",{href:!0});var bwt=s(hH);c2r=r(bwt,"TFRobertaModel"),bwt.forEach(t),m2r=r(RBe," (RoBERTa model)"),RBe.forEach(t),f2r=i(D),uE=n(D,"LI",{});var PBe=s(uE);_1e=n(PBe,"STRONG",{});var vwt=s(_1e);g2r=r(vwt,"roformer"),vwt.forEach(t),h2r=r(PBe," \u2014 "),uH=n(PBe,"A",{href:!0});var Fwt=s(uH);u2r=r(Fwt,"TFRoFormerModel"),Fwt.forEach(t),p2r=r(PBe," (RoFormer model)"),PBe.forEach(t),_2r=i(D),pE=n(D,"LI",{});var BBe=s(pE);b1e=n(BBe,"STRONG",{});var Twt=s(b1e);b2r=r(Twt,"speech_to_text"),Twt.forEach(t),v2r=r(BBe," \u2014 "),pH=n(BBe,"A",{href:!0});var Mwt=s(pH);F2r=r(Mwt,"TFSpeech2TextModel"),Mwt.forEach(t),T2r=r(BBe," (Speech2Text model)"),BBe.forEach(t),M2r=i(D),_E=n(D,"LI",{});var IBe=s(_E);v1e=n(IBe,"STRONG",{});var Ewt=s(v1e);E2r=r(Ewt,"swin"),Ewt.forEach(t),C2r=r(IBe," \u2014 "),_H=n(IBe,"A",{href:!0});var Cwt=s(_H);w2r=r(Cwt,"TFSwinModel"),Cwt.forEach(t),A2r=r(IBe," (Swin Transformer model)"),IBe.forEach(t),L2r=i(D),bE=n(D,"LI",{});var NBe=s(bE);F1e=n(NBe,"STRONG",{});var wwt=s(F1e);y2r=r(wwt,"t5"),wwt.forEach(t),x2r=r(NBe," \u2014 "),bH=n(NBe,"A",{href:!0});var Awt=s(bH);$2r=r(Awt,"TFT5Model"),Awt.forEach(t),k2r=r(NBe," (T5 model)"),NBe.forEach(t),S2r=i(D),vE=n(D,"LI",{});var qBe=s(vE);T1e=n(qBe,"STRONG",{});var Lwt=s(T1e);R2r=r(Lwt,"tapas"),Lwt.forEach(t),P2r=r(qBe," \u2014 "),vH=n(qBe,"A",{href:!0});var ywt=s(vH);B2r=r(ywt,"TFTapasModel"),ywt.forEach(t),I2r=r(qBe," (TAPAS model)"),qBe.forEach(t),N2r=i(D),FE=n(D,"LI",{});var jBe=s(FE);M1e=n(jBe,"STRONG",{});var xwt=s(M1e);q2r=r(xwt,"transfo-xl"),xwt.forEach(t),j2r=r(jBe," \u2014 "),FH=n(jBe,"A",{href:!0});var $wt=s(FH);D2r=r($wt,"TFTransfoXLModel"),$wt.forEach(t),G2r=r(jBe," (Transformer-XL model)"),jBe.forEach(t),O2r=i(D),TE=n(D,"LI",{});var DBe=s(TE);E1e=n(DBe,"STRONG",{});var kwt=s(E1e);V2r=r(kwt,"vit"),kwt.forEach(t),X2r=r(DBe," \u2014 "),TH=n(DBe,"A",{href:!0});var Swt=s(TH);z2r=r(Swt,"TFViTModel"),Swt.forEach(t),W2r=r(DBe," (ViT model)"),DBe.forEach(t),Q2r=i(D),ME=n(D,"LI",{});var GBe=s(ME);C1e=n(GBe,"STRONG",{});var Rwt=s(C1e);H2r=r(Rwt,"vit_mae"),Rwt.forEach(t),U2r=r(GBe," \u2014 "),MH=n(GBe,"A",{href:!0});var Pwt=s(MH);J2r=r(Pwt,"TFViTMAEModel"),Pwt.forEach(t),Y2r=r(GBe," (ViTMAE model)"),GBe.forEach(t),K2r=i(D),EE=n(D,"LI",{});var OBe=s(EE);w1e=n(OBe,"STRONG",{});var Bwt=s(w1e);Z2r=r(Bwt,"wav2vec2"),Bwt.forEach(t),ebr=r(OBe," \u2014 "),EH=n(OBe,"A",{href:!0});var Iwt=s(EH);obr=r(Iwt,"TFWav2Vec2Model"),Iwt.forEach(t),rbr=r(OBe," (Wav2Vec2 model)"),OBe.forEach(t),tbr=i(D),CE=n(D,"LI",{});var VBe=s(CE);A1e=n(VBe,"STRONG",{});var Nwt=s(A1e);abr=r(Nwt,"xlm"),Nwt.forEach(t),nbr=r(VBe," \u2014 "),CH=n(VBe,"A",{href:!0});var qwt=s(CH);sbr=r(qwt,"TFXLMModel"),qwt.forEach(t),lbr=r(VBe," (XLM model)"),VBe.forEach(t),ibr=i(D),wE=n(D,"LI",{});var XBe=s(wE);L1e=n(XBe,"STRONG",{});var jwt=s(L1e);dbr=r(jwt,"xlm-roberta"),jwt.forEach(t),cbr=r(XBe," \u2014 "),wH=n(XBe,"A",{href:!0});var Dwt=s(wH);mbr=r(Dwt,"TFXLMRobertaModel"),Dwt.forEach(t),fbr=r(XBe," (XLM-RoBERTa model)"),XBe.forEach(t),gbr=i(D),AE=n(D,"LI",{});var zBe=s(AE);y1e=n(zBe,"STRONG",{});var Gwt=s(y1e);hbr=r(Gwt,"xlnet"),Gwt.forEach(t),ubr=r(zBe," \u2014 "),AH=n(zBe,"A",{href:!0});var Owt=s(AH);pbr=r(Owt,"TFXLNetModel"),Owt.forEach(t),_br=r(zBe," (XLNet model)"),zBe.forEach(t),D.forEach(t),bbr=i(El),T(LE.$$.fragment,El),El.forEach(t),Ml.forEach(t),ZGe=i(m),rc=n(m,"H2",{class:!0});var lXe=s(rc);yE=n(lXe,"A",{id:!0,class:!0,href:!0});var Vwt=s(yE);x1e=n(Vwt,"SPAN",{});var Xwt=s(x1e);T(i9.$$.fragment,Xwt),Xwt.forEach(t),Vwt.forEach(t),vbr=i(lXe),$1e=n(lXe,"SPAN",{});var zwt=s($1e);Fbr=r(zwt,"TFAutoModelForPreTraining"),zwt.forEach(t),lXe.forEach(t),eOe=i(m),er=n(m,"DIV",{class:!0});var Cl=s(er);T(d9.$$.fragment,Cl),Tbr=i(Cl),tc=n(Cl,"P",{});var Xoe=s(tc);Mbr=r(Xoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),LH=n(Xoe,"A",{href:!0});var Wwt=s(LH);Ebr=r(Wwt,"from_pretrained()"),Wwt.forEach(t),Cbr=r(Xoe," class method or the "),yH=n(Xoe,"A",{href:!0});var Qwt=s(yH);wbr=r(Qwt,"from_config()"),Qwt.forEach(t),Abr=r(Xoe,` class
method.`),Xoe.forEach(t),Lbr=i(Cl),c9=n(Cl,"P",{});var iXe=s(c9);ybr=r(iXe,"This class cannot be instantiated directly using "),k1e=n(iXe,"CODE",{});var Hwt=s(k1e);xbr=r(Hwt,"__init__()"),Hwt.forEach(t),$br=r(iXe," (throws an error)."),iXe.forEach(t),kbr=i(Cl),kt=n(Cl,"DIV",{class:!0});var pL=s(kt);T(m9.$$.fragment,pL),Sbr=i(pL),S1e=n(pL,"P",{});var Uwt=s(S1e);Rbr=r(Uwt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Uwt.forEach(t),Pbr=i(pL),ac=n(pL,"P",{});var zoe=s(ac);Bbr=r(zoe,`Note:
Loading a model from its configuration file does `),R1e=n(zoe,"STRONG",{});var Jwt=s(R1e);Ibr=r(Jwt,"not"),Jwt.forEach(t),Nbr=r(zoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),xH=n(zoe,"A",{href:!0});var Ywt=s(xH);qbr=r(Ywt,"from_pretrained()"),Ywt.forEach(t),jbr=r(zoe," to load the model weights."),zoe.forEach(t),Dbr=i(pL),T(xE.$$.fragment,pL),pL.forEach(t),Gbr=i(Cl),yr=n(Cl,"DIV",{class:!0});var wl=s(yr);T(f9.$$.fragment,wl),Obr=i(wl),P1e=n(wl,"P",{});var Kwt=s(P1e);Vbr=r(Kwt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Kwt.forEach(t),Xbr=i(wl),an=n(wl,"P",{});var _L=s(an);zbr=r(_L,"The model class to instantiate is selected based on the "),B1e=n(_L,"CODE",{});var Zwt=s(B1e);Wbr=r(Zwt,"model_type"),Zwt.forEach(t),Qbr=r(_L,` property of the config object (either
passed as an argument or loaded from `),I1e=n(_L,"CODE",{});var eAt=s(I1e);Hbr=r(eAt,"pretrained_model_name_or_path"),eAt.forEach(t),Ubr=r(_L,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),N1e=n(_L,"CODE",{});var oAt=s(N1e);Jbr=r(oAt,"pretrained_model_name_or_path"),oAt.forEach(t),Ybr=r(_L,":"),_L.forEach(t),Kbr=i(wl),se=n(wl,"UL",{});var le=s(se);$E=n(le,"LI",{});var WBe=s($E);q1e=n(WBe,"STRONG",{});var rAt=s(q1e);Zbr=r(rAt,"albert"),rAt.forEach(t),evr=r(WBe," \u2014 "),$H=n(WBe,"A",{href:!0});var tAt=s($H);ovr=r(tAt,"TFAlbertForPreTraining"),tAt.forEach(t),rvr=r(WBe," (ALBERT model)"),WBe.forEach(t),tvr=i(le),kE=n(le,"LI",{});var QBe=s(kE);j1e=n(QBe,"STRONG",{});var aAt=s(j1e);avr=r(aAt,"bart"),aAt.forEach(t),nvr=r(QBe," \u2014 "),kH=n(QBe,"A",{href:!0});var nAt=s(kH);svr=r(nAt,"TFBartForConditionalGeneration"),nAt.forEach(t),lvr=r(QBe," (BART model)"),QBe.forEach(t),ivr=i(le),SE=n(le,"LI",{});var HBe=s(SE);D1e=n(HBe,"STRONG",{});var sAt=s(D1e);dvr=r(sAt,"bert"),sAt.forEach(t),cvr=r(HBe," \u2014 "),SH=n(HBe,"A",{href:!0});var lAt=s(SH);mvr=r(lAt,"TFBertForPreTraining"),lAt.forEach(t),fvr=r(HBe," (BERT model)"),HBe.forEach(t),gvr=i(le),RE=n(le,"LI",{});var UBe=s(RE);G1e=n(UBe,"STRONG",{});var iAt=s(G1e);hvr=r(iAt,"camembert"),iAt.forEach(t),uvr=r(UBe," \u2014 "),RH=n(UBe,"A",{href:!0});var dAt=s(RH);pvr=r(dAt,"TFCamembertForMaskedLM"),dAt.forEach(t),_vr=r(UBe," (CamemBERT model)"),UBe.forEach(t),bvr=i(le),PE=n(le,"LI",{});var JBe=s(PE);O1e=n(JBe,"STRONG",{});var cAt=s(O1e);vvr=r(cAt,"ctrl"),cAt.forEach(t),Fvr=r(JBe," \u2014 "),PH=n(JBe,"A",{href:!0});var mAt=s(PH);Tvr=r(mAt,"TFCTRLLMHeadModel"),mAt.forEach(t),Mvr=r(JBe," (CTRL model)"),JBe.forEach(t),Evr=i(le),BE=n(le,"LI",{});var YBe=s(BE);V1e=n(YBe,"STRONG",{});var fAt=s(V1e);Cvr=r(fAt,"distilbert"),fAt.forEach(t),wvr=r(YBe," \u2014 "),BH=n(YBe,"A",{href:!0});var gAt=s(BH);Avr=r(gAt,"TFDistilBertForMaskedLM"),gAt.forEach(t),Lvr=r(YBe," (DistilBERT model)"),YBe.forEach(t),yvr=i(le),IE=n(le,"LI",{});var KBe=s(IE);X1e=n(KBe,"STRONG",{});var hAt=s(X1e);xvr=r(hAt,"electra"),hAt.forEach(t),$vr=r(KBe," \u2014 "),IH=n(KBe,"A",{href:!0});var uAt=s(IH);kvr=r(uAt,"TFElectraForPreTraining"),uAt.forEach(t),Svr=r(KBe," (ELECTRA model)"),KBe.forEach(t),Rvr=i(le),NE=n(le,"LI",{});var ZBe=s(NE);z1e=n(ZBe,"STRONG",{});var pAt=s(z1e);Pvr=r(pAt,"flaubert"),pAt.forEach(t),Bvr=r(ZBe," \u2014 "),NH=n(ZBe,"A",{href:!0});var _At=s(NH);Ivr=r(_At,"TFFlaubertWithLMHeadModel"),_At.forEach(t),Nvr=r(ZBe," (FlauBERT model)"),ZBe.forEach(t),qvr=i(le),qE=n(le,"LI",{});var eIe=s(qE);W1e=n(eIe,"STRONG",{});var bAt=s(W1e);jvr=r(bAt,"funnel"),bAt.forEach(t),Dvr=r(eIe," \u2014 "),qH=n(eIe,"A",{href:!0});var vAt=s(qH);Gvr=r(vAt,"TFFunnelForPreTraining"),vAt.forEach(t),Ovr=r(eIe," (Funnel Transformer model)"),eIe.forEach(t),Vvr=i(le),jE=n(le,"LI",{});var oIe=s(jE);Q1e=n(oIe,"STRONG",{});var FAt=s(Q1e);Xvr=r(FAt,"gpt2"),FAt.forEach(t),zvr=r(oIe," \u2014 "),jH=n(oIe,"A",{href:!0});var TAt=s(jH);Wvr=r(TAt,"TFGPT2LMHeadModel"),TAt.forEach(t),Qvr=r(oIe," (OpenAI GPT-2 model)"),oIe.forEach(t),Hvr=i(le),DE=n(le,"LI",{});var rIe=s(DE);H1e=n(rIe,"STRONG",{});var MAt=s(H1e);Uvr=r(MAt,"layoutlm"),MAt.forEach(t),Jvr=r(rIe," \u2014 "),DH=n(rIe,"A",{href:!0});var EAt=s(DH);Yvr=r(EAt,"TFLayoutLMForMaskedLM"),EAt.forEach(t),Kvr=r(rIe," (LayoutLM model)"),rIe.forEach(t),Zvr=i(le),GE=n(le,"LI",{});var tIe=s(GE);U1e=n(tIe,"STRONG",{});var CAt=s(U1e);eFr=r(CAt,"lxmert"),CAt.forEach(t),oFr=r(tIe," \u2014 "),GH=n(tIe,"A",{href:!0});var wAt=s(GH);rFr=r(wAt,"TFLxmertForPreTraining"),wAt.forEach(t),tFr=r(tIe," (LXMERT model)"),tIe.forEach(t),aFr=i(le),OE=n(le,"LI",{});var aIe=s(OE);J1e=n(aIe,"STRONG",{});var AAt=s(J1e);nFr=r(AAt,"mobilebert"),AAt.forEach(t),sFr=r(aIe," \u2014 "),OH=n(aIe,"A",{href:!0});var LAt=s(OH);lFr=r(LAt,"TFMobileBertForPreTraining"),LAt.forEach(t),iFr=r(aIe," (MobileBERT model)"),aIe.forEach(t),dFr=i(le),VE=n(le,"LI",{});var nIe=s(VE);Y1e=n(nIe,"STRONG",{});var yAt=s(Y1e);cFr=r(yAt,"mpnet"),yAt.forEach(t),mFr=r(nIe," \u2014 "),VH=n(nIe,"A",{href:!0});var xAt=s(VH);fFr=r(xAt,"TFMPNetForMaskedLM"),xAt.forEach(t),gFr=r(nIe," (MPNet model)"),nIe.forEach(t),hFr=i(le),XE=n(le,"LI",{});var sIe=s(XE);K1e=n(sIe,"STRONG",{});var $At=s(K1e);uFr=r($At,"openai-gpt"),$At.forEach(t),pFr=r(sIe," \u2014 "),XH=n(sIe,"A",{href:!0});var kAt=s(XH);_Fr=r(kAt,"TFOpenAIGPTLMHeadModel"),kAt.forEach(t),bFr=r(sIe," (OpenAI GPT model)"),sIe.forEach(t),vFr=i(le),zE=n(le,"LI",{});var lIe=s(zE);Z1e=n(lIe,"STRONG",{});var SAt=s(Z1e);FFr=r(SAt,"roberta"),SAt.forEach(t),TFr=r(lIe," \u2014 "),zH=n(lIe,"A",{href:!0});var RAt=s(zH);MFr=r(RAt,"TFRobertaForMaskedLM"),RAt.forEach(t),EFr=r(lIe," (RoBERTa model)"),lIe.forEach(t),CFr=i(le),WE=n(le,"LI",{});var iIe=s(WE);eTe=n(iIe,"STRONG",{});var PAt=s(eTe);wFr=r(PAt,"t5"),PAt.forEach(t),AFr=r(iIe," \u2014 "),WH=n(iIe,"A",{href:!0});var BAt=s(WH);LFr=r(BAt,"TFT5ForConditionalGeneration"),BAt.forEach(t),yFr=r(iIe," (T5 model)"),iIe.forEach(t),xFr=i(le),QE=n(le,"LI",{});var dIe=s(QE);oTe=n(dIe,"STRONG",{});var IAt=s(oTe);$Fr=r(IAt,"tapas"),IAt.forEach(t),kFr=r(dIe," \u2014 "),QH=n(dIe,"A",{href:!0});var NAt=s(QH);SFr=r(NAt,"TFTapasForMaskedLM"),NAt.forEach(t),RFr=r(dIe," (TAPAS model)"),dIe.forEach(t),PFr=i(le),HE=n(le,"LI",{});var cIe=s(HE);rTe=n(cIe,"STRONG",{});var qAt=s(rTe);BFr=r(qAt,"transfo-xl"),qAt.forEach(t),IFr=r(cIe," \u2014 "),HH=n(cIe,"A",{href:!0});var jAt=s(HH);NFr=r(jAt,"TFTransfoXLLMHeadModel"),jAt.forEach(t),qFr=r(cIe," (Transformer-XL model)"),cIe.forEach(t),jFr=i(le),UE=n(le,"LI",{});var mIe=s(UE);tTe=n(mIe,"STRONG",{});var DAt=s(tTe);DFr=r(DAt,"vit_mae"),DAt.forEach(t),GFr=r(mIe," \u2014 "),UH=n(mIe,"A",{href:!0});var GAt=s(UH);OFr=r(GAt,"TFViTMAEForPreTraining"),GAt.forEach(t),VFr=r(mIe," (ViTMAE model)"),mIe.forEach(t),XFr=i(le),JE=n(le,"LI",{});var fIe=s(JE);aTe=n(fIe,"STRONG",{});var OAt=s(aTe);zFr=r(OAt,"xlm"),OAt.forEach(t),WFr=r(fIe," \u2014 "),JH=n(fIe,"A",{href:!0});var VAt=s(JH);QFr=r(VAt,"TFXLMWithLMHeadModel"),VAt.forEach(t),HFr=r(fIe," (XLM model)"),fIe.forEach(t),UFr=i(le),YE=n(le,"LI",{});var gIe=s(YE);nTe=n(gIe,"STRONG",{});var XAt=s(nTe);JFr=r(XAt,"xlm-roberta"),XAt.forEach(t),YFr=r(gIe," \u2014 "),YH=n(gIe,"A",{href:!0});var zAt=s(YH);KFr=r(zAt,"TFXLMRobertaForMaskedLM"),zAt.forEach(t),ZFr=r(gIe," (XLM-RoBERTa model)"),gIe.forEach(t),e1r=i(le),KE=n(le,"LI",{});var hIe=s(KE);sTe=n(hIe,"STRONG",{});var WAt=s(sTe);o1r=r(WAt,"xlnet"),WAt.forEach(t),r1r=r(hIe," \u2014 "),KH=n(hIe,"A",{href:!0});var QAt=s(KH);t1r=r(QAt,"TFXLNetLMHeadModel"),QAt.forEach(t),a1r=r(hIe," (XLNet model)"),hIe.forEach(t),le.forEach(t),n1r=i(wl),T(ZE.$$.fragment,wl),wl.forEach(t),Cl.forEach(t),oOe=i(m),nc=n(m,"H2",{class:!0});var dXe=s(nc);eC=n(dXe,"A",{id:!0,class:!0,href:!0});var HAt=s(eC);lTe=n(HAt,"SPAN",{});var UAt=s(lTe);T(g9.$$.fragment,UAt),UAt.forEach(t),HAt.forEach(t),s1r=i(dXe),iTe=n(dXe,"SPAN",{});var JAt=s(iTe);l1r=r(JAt,"TFAutoModelForCausalLM"),JAt.forEach(t),dXe.forEach(t),rOe=i(m),or=n(m,"DIV",{class:!0});var Al=s(or);T(h9.$$.fragment,Al),i1r=i(Al),sc=n(Al,"P",{});var Woe=s(sc);d1r=r(Woe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),ZH=n(Woe,"A",{href:!0});var YAt=s(ZH);c1r=r(YAt,"from_pretrained()"),YAt.forEach(t),m1r=r(Woe," class method or the "),eU=n(Woe,"A",{href:!0});var KAt=s(eU);f1r=r(KAt,"from_config()"),KAt.forEach(t),g1r=r(Woe,` class
method.`),Woe.forEach(t),h1r=i(Al),u9=n(Al,"P",{});var cXe=s(u9);u1r=r(cXe,"This class cannot be instantiated directly using "),dTe=n(cXe,"CODE",{});var ZAt=s(dTe);p1r=r(ZAt,"__init__()"),ZAt.forEach(t),_1r=r(cXe," (throws an error)."),cXe.forEach(t),b1r=i(Al),St=n(Al,"DIV",{class:!0});var bL=s(St);T(p9.$$.fragment,bL),v1r=i(bL),cTe=n(bL,"P",{});var e6t=s(cTe);F1r=r(e6t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),e6t.forEach(t),T1r=i(bL),lc=n(bL,"P",{});var Qoe=s(lc);M1r=r(Qoe,`Note:
Loading a model from its configuration file does `),mTe=n(Qoe,"STRONG",{});var o6t=s(mTe);E1r=r(o6t,"not"),o6t.forEach(t),C1r=r(Qoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),oU=n(Qoe,"A",{href:!0});var r6t=s(oU);w1r=r(r6t,"from_pretrained()"),r6t.forEach(t),A1r=r(Qoe," to load the model weights."),Qoe.forEach(t),L1r=i(bL),T(oC.$$.fragment,bL),bL.forEach(t),y1r=i(Al),xr=n(Al,"DIV",{class:!0});var Ll=s(xr);T(_9.$$.fragment,Ll),x1r=i(Ll),fTe=n(Ll,"P",{});var t6t=s(fTe);$1r=r(t6t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),t6t.forEach(t),k1r=i(Ll),nn=n(Ll,"P",{});var vL=s(nn);S1r=r(vL,"The model class to instantiate is selected based on the "),gTe=n(vL,"CODE",{});var a6t=s(gTe);R1r=r(a6t,"model_type"),a6t.forEach(t),P1r=r(vL,` property of the config object (either
passed as an argument or loaded from `),hTe=n(vL,"CODE",{});var n6t=s(hTe);B1r=r(n6t,"pretrained_model_name_or_path"),n6t.forEach(t),I1r=r(vL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uTe=n(vL,"CODE",{});var s6t=s(uTe);N1r=r(s6t,"pretrained_model_name_or_path"),s6t.forEach(t),q1r=r(vL,":"),vL.forEach(t),j1r=i(Ll),Me=n(Ll,"UL",{});var Ce=s(Me);rC=n(Ce,"LI",{});var uIe=s(rC);pTe=n(uIe,"STRONG",{});var l6t=s(pTe);D1r=r(l6t,"bert"),l6t.forEach(t),G1r=r(uIe," \u2014 "),rU=n(uIe,"A",{href:!0});var i6t=s(rU);O1r=r(i6t,"TFBertLMHeadModel"),i6t.forEach(t),V1r=r(uIe," (BERT model)"),uIe.forEach(t),X1r=i(Ce),tC=n(Ce,"LI",{});var pIe=s(tC);_Te=n(pIe,"STRONG",{});var d6t=s(_Te);z1r=r(d6t,"camembert"),d6t.forEach(t),W1r=r(pIe," \u2014 "),tU=n(pIe,"A",{href:!0});var c6t=s(tU);Q1r=r(c6t,"TFCamembertForCausalLM"),c6t.forEach(t),H1r=r(pIe," (CamemBERT model)"),pIe.forEach(t),U1r=i(Ce),aC=n(Ce,"LI",{});var _Ie=s(aC);bTe=n(_Ie,"STRONG",{});var m6t=s(bTe);J1r=r(m6t,"ctrl"),m6t.forEach(t),Y1r=r(_Ie," \u2014 "),aU=n(_Ie,"A",{href:!0});var f6t=s(aU);K1r=r(f6t,"TFCTRLLMHeadModel"),f6t.forEach(t),Z1r=r(_Ie," (CTRL model)"),_Ie.forEach(t),eTr=i(Ce),nC=n(Ce,"LI",{});var bIe=s(nC);vTe=n(bIe,"STRONG",{});var g6t=s(vTe);oTr=r(g6t,"gpt2"),g6t.forEach(t),rTr=r(bIe," \u2014 "),nU=n(bIe,"A",{href:!0});var h6t=s(nU);tTr=r(h6t,"TFGPT2LMHeadModel"),h6t.forEach(t),aTr=r(bIe," (OpenAI GPT-2 model)"),bIe.forEach(t),nTr=i(Ce),sC=n(Ce,"LI",{});var vIe=s(sC);FTe=n(vIe,"STRONG",{});var u6t=s(FTe);sTr=r(u6t,"gptj"),u6t.forEach(t),lTr=r(vIe," \u2014 "),sU=n(vIe,"A",{href:!0});var p6t=s(sU);iTr=r(p6t,"TFGPTJForCausalLM"),p6t.forEach(t),dTr=r(vIe," (GPT-J model)"),vIe.forEach(t),cTr=i(Ce),lC=n(Ce,"LI",{});var FIe=s(lC);TTe=n(FIe,"STRONG",{});var _6t=s(TTe);mTr=r(_6t,"openai-gpt"),_6t.forEach(t),fTr=r(FIe," \u2014 "),lU=n(FIe,"A",{href:!0});var b6t=s(lU);gTr=r(b6t,"TFOpenAIGPTLMHeadModel"),b6t.forEach(t),hTr=r(FIe," (OpenAI GPT model)"),FIe.forEach(t),uTr=i(Ce),iC=n(Ce,"LI",{});var TIe=s(iC);MTe=n(TIe,"STRONG",{});var v6t=s(MTe);pTr=r(v6t,"opt"),v6t.forEach(t),_Tr=r(TIe," \u2014 "),iU=n(TIe,"A",{href:!0});var F6t=s(iU);bTr=r(F6t,"TFOPTForCausalLM"),F6t.forEach(t),vTr=r(TIe," (OPT model)"),TIe.forEach(t),FTr=i(Ce),dC=n(Ce,"LI",{});var MIe=s(dC);ETe=n(MIe,"STRONG",{});var T6t=s(ETe);TTr=r(T6t,"rembert"),T6t.forEach(t),MTr=r(MIe," \u2014 "),dU=n(MIe,"A",{href:!0});var M6t=s(dU);ETr=r(M6t,"TFRemBertForCausalLM"),M6t.forEach(t),CTr=r(MIe," (RemBERT model)"),MIe.forEach(t),wTr=i(Ce),cC=n(Ce,"LI",{});var EIe=s(cC);CTe=n(EIe,"STRONG",{});var E6t=s(CTe);ATr=r(E6t,"roberta"),E6t.forEach(t),LTr=r(EIe," \u2014 "),cU=n(EIe,"A",{href:!0});var C6t=s(cU);yTr=r(C6t,"TFRobertaForCausalLM"),C6t.forEach(t),xTr=r(EIe," (RoBERTa model)"),EIe.forEach(t),$Tr=i(Ce),mC=n(Ce,"LI",{});var CIe=s(mC);wTe=n(CIe,"STRONG",{});var w6t=s(wTe);kTr=r(w6t,"roformer"),w6t.forEach(t),STr=r(CIe," \u2014 "),mU=n(CIe,"A",{href:!0});var A6t=s(mU);RTr=r(A6t,"TFRoFormerForCausalLM"),A6t.forEach(t),PTr=r(CIe," (RoFormer model)"),CIe.forEach(t),BTr=i(Ce),fC=n(Ce,"LI",{});var wIe=s(fC);ATe=n(wIe,"STRONG",{});var L6t=s(ATe);ITr=r(L6t,"transfo-xl"),L6t.forEach(t),NTr=r(wIe," \u2014 "),fU=n(wIe,"A",{href:!0});var y6t=s(fU);qTr=r(y6t,"TFTransfoXLLMHeadModel"),y6t.forEach(t),jTr=r(wIe," (Transformer-XL model)"),wIe.forEach(t),DTr=i(Ce),gC=n(Ce,"LI",{});var AIe=s(gC);LTe=n(AIe,"STRONG",{});var x6t=s(LTe);GTr=r(x6t,"xlm"),x6t.forEach(t),OTr=r(AIe," \u2014 "),gU=n(AIe,"A",{href:!0});var $6t=s(gU);VTr=r($6t,"TFXLMWithLMHeadModel"),$6t.forEach(t),XTr=r(AIe," (XLM model)"),AIe.forEach(t),zTr=i(Ce),hC=n(Ce,"LI",{});var LIe=s(hC);yTe=n(LIe,"STRONG",{});var k6t=s(yTe);WTr=r(k6t,"xlnet"),k6t.forEach(t),QTr=r(LIe," \u2014 "),hU=n(LIe,"A",{href:!0});var S6t=s(hU);HTr=r(S6t,"TFXLNetLMHeadModel"),S6t.forEach(t),UTr=r(LIe," (XLNet model)"),LIe.forEach(t),Ce.forEach(t),JTr=i(Ll),T(uC.$$.fragment,Ll),Ll.forEach(t),Al.forEach(t),tOe=i(m),ic=n(m,"H2",{class:!0});var mXe=s(ic);pC=n(mXe,"A",{id:!0,class:!0,href:!0});var R6t=s(pC);xTe=n(R6t,"SPAN",{});var P6t=s(xTe);T(b9.$$.fragment,P6t),P6t.forEach(t),R6t.forEach(t),YTr=i(mXe),$Te=n(mXe,"SPAN",{});var B6t=s($Te);KTr=r(B6t,"TFAutoModelForImageClassification"),B6t.forEach(t),mXe.forEach(t),aOe=i(m),rr=n(m,"DIV",{class:!0});var yl=s(rr);T(v9.$$.fragment,yl),ZTr=i(yl),dc=n(yl,"P",{});var Hoe=s(dc);eMr=r(Hoe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),uU=n(Hoe,"A",{href:!0});var I6t=s(uU);oMr=r(I6t,"from_pretrained()"),I6t.forEach(t),rMr=r(Hoe," class method or the "),pU=n(Hoe,"A",{href:!0});var N6t=s(pU);tMr=r(N6t,"from_config()"),N6t.forEach(t),aMr=r(Hoe,` class
method.`),Hoe.forEach(t),nMr=i(yl),F9=n(yl,"P",{});var fXe=s(F9);sMr=r(fXe,"This class cannot be instantiated directly using "),kTe=n(fXe,"CODE",{});var q6t=s(kTe);lMr=r(q6t,"__init__()"),q6t.forEach(t),iMr=r(fXe," (throws an error)."),fXe.forEach(t),dMr=i(yl),Rt=n(yl,"DIV",{class:!0});var FL=s(Rt);T(T9.$$.fragment,FL),cMr=i(FL),STe=n(FL,"P",{});var j6t=s(STe);mMr=r(j6t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),j6t.forEach(t),fMr=i(FL),cc=n(FL,"P",{});var Uoe=s(cc);gMr=r(Uoe,`Note:
Loading a model from its configuration file does `),RTe=n(Uoe,"STRONG",{});var D6t=s(RTe);hMr=r(D6t,"not"),D6t.forEach(t),uMr=r(Uoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),_U=n(Uoe,"A",{href:!0});var G6t=s(_U);pMr=r(G6t,"from_pretrained()"),G6t.forEach(t),_Mr=r(Uoe," to load the model weights."),Uoe.forEach(t),bMr=i(FL),T(_C.$$.fragment,FL),FL.forEach(t),vMr=i(yl),$r=n(yl,"DIV",{class:!0});var xl=s($r);T(M9.$$.fragment,xl),FMr=i(xl),PTe=n(xl,"P",{});var O6t=s(PTe);TMr=r(O6t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),O6t.forEach(t),MMr=i(xl),sn=n(xl,"P",{});var TL=s(sn);EMr=r(TL,"The model class to instantiate is selected based on the "),BTe=n(TL,"CODE",{});var V6t=s(BTe);CMr=r(V6t,"model_type"),V6t.forEach(t),wMr=r(TL,` property of the config object (either
passed as an argument or loaded from `),ITe=n(TL,"CODE",{});var X6t=s(ITe);AMr=r(X6t,"pretrained_model_name_or_path"),X6t.forEach(t),LMr=r(TL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),NTe=n(TL,"CODE",{});var z6t=s(NTe);yMr=r(z6t,"pretrained_model_name_or_path"),z6t.forEach(t),xMr=r(TL,":"),TL.forEach(t),$Mr=i(xl),ln=n(xl,"UL",{});var ML=s(ln);bC=n(ML,"LI",{});var yIe=s(bC);qTe=n(yIe,"STRONG",{});var W6t=s(qTe);kMr=r(W6t,"convnext"),W6t.forEach(t),SMr=r(yIe," \u2014 "),bU=n(yIe,"A",{href:!0});var Q6t=s(bU);RMr=r(Q6t,"TFConvNextForImageClassification"),Q6t.forEach(t),PMr=r(yIe," (ConvNeXT model)"),yIe.forEach(t),BMr=i(ML),vC=n(ML,"LI",{});var xIe=s(vC);jTe=n(xIe,"STRONG",{});var H6t=s(jTe);IMr=r(H6t,"data2vec-vision"),H6t.forEach(t),NMr=r(xIe," \u2014 "),vU=n(xIe,"A",{href:!0});var U6t=s(vU);qMr=r(U6t,"TFData2VecVisionForImageClassification"),U6t.forEach(t),jMr=r(xIe," (Data2VecVision model)"),xIe.forEach(t),DMr=i(ML),FC=n(ML,"LI",{});var $Ie=s(FC);DTe=n($Ie,"STRONG",{});var J6t=s(DTe);GMr=r(J6t,"swin"),J6t.forEach(t),OMr=r($Ie," \u2014 "),FU=n($Ie,"A",{href:!0});var Y6t=s(FU);VMr=r(Y6t,"TFSwinForImageClassification"),Y6t.forEach(t),XMr=r($Ie," (Swin Transformer model)"),$Ie.forEach(t),zMr=i(ML),TC=n(ML,"LI",{});var kIe=s(TC);GTe=n(kIe,"STRONG",{});var K6t=s(GTe);WMr=r(K6t,"vit"),K6t.forEach(t),QMr=r(kIe," \u2014 "),TU=n(kIe,"A",{href:!0});var Z6t=s(TU);HMr=r(Z6t,"TFViTForImageClassification"),Z6t.forEach(t),UMr=r(kIe," (ViT model)"),kIe.forEach(t),ML.forEach(t),JMr=i(xl),T(MC.$$.fragment,xl),xl.forEach(t),yl.forEach(t),nOe=i(m),mc=n(m,"H2",{class:!0});var gXe=s(mc);EC=n(gXe,"A",{id:!0,class:!0,href:!0});var eLt=s(EC);OTe=n(eLt,"SPAN",{});var oLt=s(OTe);T(E9.$$.fragment,oLt),oLt.forEach(t),eLt.forEach(t),YMr=i(gXe),VTe=n(gXe,"SPAN",{});var rLt=s(VTe);KMr=r(rLt,"TFAutoModelForMaskedLM"),rLt.forEach(t),gXe.forEach(t),sOe=i(m),tr=n(m,"DIV",{class:!0});var $l=s(tr);T(C9.$$.fragment,$l),ZMr=i($l),fc=n($l,"P",{});var Joe=s(fc);e4r=r(Joe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),MU=n(Joe,"A",{href:!0});var tLt=s(MU);o4r=r(tLt,"from_pretrained()"),tLt.forEach(t),r4r=r(Joe," class method or the "),EU=n(Joe,"A",{href:!0});var aLt=s(EU);t4r=r(aLt,"from_config()"),aLt.forEach(t),a4r=r(Joe,` class
method.`),Joe.forEach(t),n4r=i($l),w9=n($l,"P",{});var hXe=s(w9);s4r=r(hXe,"This class cannot be instantiated directly using "),XTe=n(hXe,"CODE",{});var nLt=s(XTe);l4r=r(nLt,"__init__()"),nLt.forEach(t),i4r=r(hXe," (throws an error)."),hXe.forEach(t),d4r=i($l),Pt=n($l,"DIV",{class:!0});var EL=s(Pt);T(A9.$$.fragment,EL),c4r=i(EL),zTe=n(EL,"P",{});var sLt=s(zTe);m4r=r(sLt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),sLt.forEach(t),f4r=i(EL),gc=n(EL,"P",{});var Yoe=s(gc);g4r=r(Yoe,`Note:
Loading a model from its configuration file does `),WTe=n(Yoe,"STRONG",{});var lLt=s(WTe);h4r=r(lLt,"not"),lLt.forEach(t),u4r=r(Yoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),CU=n(Yoe,"A",{href:!0});var iLt=s(CU);p4r=r(iLt,"from_pretrained()"),iLt.forEach(t),_4r=r(Yoe," to load the model weights."),Yoe.forEach(t),b4r=i(EL),T(CC.$$.fragment,EL),EL.forEach(t),v4r=i($l),kr=n($l,"DIV",{class:!0});var kl=s(kr);T(L9.$$.fragment,kl),F4r=i(kl),QTe=n(kl,"P",{});var dLt=s(QTe);T4r=r(dLt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),dLt.forEach(t),M4r=i(kl),dn=n(kl,"P",{});var CL=s(dn);E4r=r(CL,"The model class to instantiate is selected based on the "),HTe=n(CL,"CODE",{});var cLt=s(HTe);C4r=r(cLt,"model_type"),cLt.forEach(t),w4r=r(CL,` property of the config object (either
passed as an argument or loaded from `),UTe=n(CL,"CODE",{});var mLt=s(UTe);A4r=r(mLt,"pretrained_model_name_or_path"),mLt.forEach(t),L4r=r(CL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),JTe=n(CL,"CODE",{});var fLt=s(JTe);y4r=r(fLt,"pretrained_model_name_or_path"),fLt.forEach(t),x4r=r(CL,":"),CL.forEach(t),$4r=i(kl),ie=n(kl,"UL",{});var me=s(ie);wC=n(me,"LI",{});var SIe=s(wC);YTe=n(SIe,"STRONG",{});var gLt=s(YTe);k4r=r(gLt,"albert"),gLt.forEach(t),S4r=r(SIe," \u2014 "),wU=n(SIe,"A",{href:!0});var hLt=s(wU);R4r=r(hLt,"TFAlbertForMaskedLM"),hLt.forEach(t),P4r=r(SIe," (ALBERT model)"),SIe.forEach(t),B4r=i(me),AC=n(me,"LI",{});var RIe=s(AC);KTe=n(RIe,"STRONG",{});var uLt=s(KTe);I4r=r(uLt,"bert"),uLt.forEach(t),N4r=r(RIe," \u2014 "),AU=n(RIe,"A",{href:!0});var pLt=s(AU);q4r=r(pLt,"TFBertForMaskedLM"),pLt.forEach(t),j4r=r(RIe," (BERT model)"),RIe.forEach(t),D4r=i(me),LC=n(me,"LI",{});var PIe=s(LC);ZTe=n(PIe,"STRONG",{});var _Lt=s(ZTe);G4r=r(_Lt,"camembert"),_Lt.forEach(t),O4r=r(PIe," \u2014 "),LU=n(PIe,"A",{href:!0});var bLt=s(LU);V4r=r(bLt,"TFCamembertForMaskedLM"),bLt.forEach(t),X4r=r(PIe," (CamemBERT model)"),PIe.forEach(t),z4r=i(me),yC=n(me,"LI",{});var BIe=s(yC);eMe=n(BIe,"STRONG",{});var vLt=s(eMe);W4r=r(vLt,"convbert"),vLt.forEach(t),Q4r=r(BIe," \u2014 "),yU=n(BIe,"A",{href:!0});var FLt=s(yU);H4r=r(FLt,"TFConvBertForMaskedLM"),FLt.forEach(t),U4r=r(BIe," (ConvBERT model)"),BIe.forEach(t),J4r=i(me),xC=n(me,"LI",{});var IIe=s(xC);oMe=n(IIe,"STRONG",{});var TLt=s(oMe);Y4r=r(TLt,"deberta"),TLt.forEach(t),K4r=r(IIe," \u2014 "),xU=n(IIe,"A",{href:!0});var MLt=s(xU);Z4r=r(MLt,"TFDebertaForMaskedLM"),MLt.forEach(t),eEr=r(IIe," (DeBERTa model)"),IIe.forEach(t),oEr=i(me),$C=n(me,"LI",{});var NIe=s($C);rMe=n(NIe,"STRONG",{});var ELt=s(rMe);rEr=r(ELt,"deberta-v2"),ELt.forEach(t),tEr=r(NIe," \u2014 "),$U=n(NIe,"A",{href:!0});var CLt=s($U);aEr=r(CLt,"TFDebertaV2ForMaskedLM"),CLt.forEach(t),nEr=r(NIe," (DeBERTa-v2 model)"),NIe.forEach(t),sEr=i(me),kC=n(me,"LI",{});var qIe=s(kC);tMe=n(qIe,"STRONG",{});var wLt=s(tMe);lEr=r(wLt,"distilbert"),wLt.forEach(t),iEr=r(qIe," \u2014 "),kU=n(qIe,"A",{href:!0});var ALt=s(kU);dEr=r(ALt,"TFDistilBertForMaskedLM"),ALt.forEach(t),cEr=r(qIe," (DistilBERT model)"),qIe.forEach(t),mEr=i(me),SC=n(me,"LI",{});var jIe=s(SC);aMe=n(jIe,"STRONG",{});var LLt=s(aMe);fEr=r(LLt,"electra"),LLt.forEach(t),gEr=r(jIe," \u2014 "),SU=n(jIe,"A",{href:!0});var yLt=s(SU);hEr=r(yLt,"TFElectraForMaskedLM"),yLt.forEach(t),uEr=r(jIe," (ELECTRA model)"),jIe.forEach(t),pEr=i(me),RC=n(me,"LI",{});var DIe=s(RC);nMe=n(DIe,"STRONG",{});var xLt=s(nMe);_Er=r(xLt,"flaubert"),xLt.forEach(t),bEr=r(DIe," \u2014 "),RU=n(DIe,"A",{href:!0});var $Lt=s(RU);vEr=r($Lt,"TFFlaubertWithLMHeadModel"),$Lt.forEach(t),FEr=r(DIe," (FlauBERT model)"),DIe.forEach(t),TEr=i(me),PC=n(me,"LI",{});var GIe=s(PC);sMe=n(GIe,"STRONG",{});var kLt=s(sMe);MEr=r(kLt,"funnel"),kLt.forEach(t),EEr=r(GIe," \u2014 "),PU=n(GIe,"A",{href:!0});var SLt=s(PU);CEr=r(SLt,"TFFunnelForMaskedLM"),SLt.forEach(t),wEr=r(GIe," (Funnel Transformer model)"),GIe.forEach(t),AEr=i(me),BC=n(me,"LI",{});var OIe=s(BC);lMe=n(OIe,"STRONG",{});var RLt=s(lMe);LEr=r(RLt,"layoutlm"),RLt.forEach(t),yEr=r(OIe," \u2014 "),BU=n(OIe,"A",{href:!0});var PLt=s(BU);xEr=r(PLt,"TFLayoutLMForMaskedLM"),PLt.forEach(t),$Er=r(OIe," (LayoutLM model)"),OIe.forEach(t),kEr=i(me),IC=n(me,"LI",{});var VIe=s(IC);iMe=n(VIe,"STRONG",{});var BLt=s(iMe);SEr=r(BLt,"longformer"),BLt.forEach(t),REr=r(VIe," \u2014 "),IU=n(VIe,"A",{href:!0});var ILt=s(IU);PEr=r(ILt,"TFLongformerForMaskedLM"),ILt.forEach(t),BEr=r(VIe," (Longformer model)"),VIe.forEach(t),IEr=i(me),NC=n(me,"LI",{});var XIe=s(NC);dMe=n(XIe,"STRONG",{});var NLt=s(dMe);NEr=r(NLt,"mobilebert"),NLt.forEach(t),qEr=r(XIe," \u2014 "),NU=n(XIe,"A",{href:!0});var qLt=s(NU);jEr=r(qLt,"TFMobileBertForMaskedLM"),qLt.forEach(t),DEr=r(XIe," (MobileBERT model)"),XIe.forEach(t),GEr=i(me),qC=n(me,"LI",{});var zIe=s(qC);cMe=n(zIe,"STRONG",{});var jLt=s(cMe);OEr=r(jLt,"mpnet"),jLt.forEach(t),VEr=r(zIe," \u2014 "),qU=n(zIe,"A",{href:!0});var DLt=s(qU);XEr=r(DLt,"TFMPNetForMaskedLM"),DLt.forEach(t),zEr=r(zIe," (MPNet model)"),zIe.forEach(t),WEr=i(me),jC=n(me,"LI",{});var WIe=s(jC);mMe=n(WIe,"STRONG",{});var GLt=s(mMe);QEr=r(GLt,"rembert"),GLt.forEach(t),HEr=r(WIe," \u2014 "),jU=n(WIe,"A",{href:!0});var OLt=s(jU);UEr=r(OLt,"TFRemBertForMaskedLM"),OLt.forEach(t),JEr=r(WIe," (RemBERT model)"),WIe.forEach(t),YEr=i(me),DC=n(me,"LI",{});var QIe=s(DC);fMe=n(QIe,"STRONG",{});var VLt=s(fMe);KEr=r(VLt,"roberta"),VLt.forEach(t),ZEr=r(QIe," \u2014 "),DU=n(QIe,"A",{href:!0});var XLt=s(DU);eCr=r(XLt,"TFRobertaForMaskedLM"),XLt.forEach(t),oCr=r(QIe," (RoBERTa model)"),QIe.forEach(t),rCr=i(me),GC=n(me,"LI",{});var HIe=s(GC);gMe=n(HIe,"STRONG",{});var zLt=s(gMe);tCr=r(zLt,"roformer"),zLt.forEach(t),aCr=r(HIe," \u2014 "),GU=n(HIe,"A",{href:!0});var WLt=s(GU);nCr=r(WLt,"TFRoFormerForMaskedLM"),WLt.forEach(t),sCr=r(HIe," (RoFormer model)"),HIe.forEach(t),lCr=i(me),OC=n(me,"LI",{});var UIe=s(OC);hMe=n(UIe,"STRONG",{});var QLt=s(hMe);iCr=r(QLt,"tapas"),QLt.forEach(t),dCr=r(UIe," \u2014 "),OU=n(UIe,"A",{href:!0});var HLt=s(OU);cCr=r(HLt,"TFTapasForMaskedLM"),HLt.forEach(t),mCr=r(UIe," (TAPAS model)"),UIe.forEach(t),fCr=i(me),VC=n(me,"LI",{});var JIe=s(VC);uMe=n(JIe,"STRONG",{});var ULt=s(uMe);gCr=r(ULt,"xlm"),ULt.forEach(t),hCr=r(JIe," \u2014 "),VU=n(JIe,"A",{href:!0});var JLt=s(VU);uCr=r(JLt,"TFXLMWithLMHeadModel"),JLt.forEach(t),pCr=r(JIe," (XLM model)"),JIe.forEach(t),_Cr=i(me),XC=n(me,"LI",{});var YIe=s(XC);pMe=n(YIe,"STRONG",{});var YLt=s(pMe);bCr=r(YLt,"xlm-roberta"),YLt.forEach(t),vCr=r(YIe," \u2014 "),XU=n(YIe,"A",{href:!0});var KLt=s(XU);FCr=r(KLt,"TFXLMRobertaForMaskedLM"),KLt.forEach(t),TCr=r(YIe," (XLM-RoBERTa model)"),YIe.forEach(t),me.forEach(t),MCr=i(kl),T(zC.$$.fragment,kl),kl.forEach(t),$l.forEach(t),lOe=i(m),hc=n(m,"H2",{class:!0});var uXe=s(hc);WC=n(uXe,"A",{id:!0,class:!0,href:!0});var ZLt=s(WC);_Me=n(ZLt,"SPAN",{});var eyt=s(_Me);T(y9.$$.fragment,eyt),eyt.forEach(t),ZLt.forEach(t),ECr=i(uXe),bMe=n(uXe,"SPAN",{});var oyt=s(bMe);CCr=r(oyt,"TFAutoModelForSeq2SeqLM"),oyt.forEach(t),uXe.forEach(t),iOe=i(m),ar=n(m,"DIV",{class:!0});var Sl=s(ar);T(x9.$$.fragment,Sl),wCr=i(Sl),uc=n(Sl,"P",{});var Koe=s(uc);ACr=r(Koe,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),zU=n(Koe,"A",{href:!0});var ryt=s(zU);LCr=r(ryt,"from_pretrained()"),ryt.forEach(t),yCr=r(Koe," class method or the "),WU=n(Koe,"A",{href:!0});var tyt=s(WU);xCr=r(tyt,"from_config()"),tyt.forEach(t),$Cr=r(Koe,` class
method.`),Koe.forEach(t),kCr=i(Sl),$9=n(Sl,"P",{});var pXe=s($9);SCr=r(pXe,"This class cannot be instantiated directly using "),vMe=n(pXe,"CODE",{});var ayt=s(vMe);RCr=r(ayt,"__init__()"),ayt.forEach(t),PCr=r(pXe," (throws an error)."),pXe.forEach(t),BCr=i(Sl),Bt=n(Sl,"DIV",{class:!0});var wL=s(Bt);T(k9.$$.fragment,wL),ICr=i(wL),FMe=n(wL,"P",{});var nyt=s(FMe);NCr=r(nyt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),nyt.forEach(t),qCr=i(wL),pc=n(wL,"P",{});var Zoe=s(pc);jCr=r(Zoe,`Note:
Loading a model from its configuration file does `),TMe=n(Zoe,"STRONG",{});var syt=s(TMe);DCr=r(syt,"not"),syt.forEach(t),GCr=r(Zoe,` load the model weights. It only affects the
model\u2019s configuration. Use `),QU=n(Zoe,"A",{href:!0});var lyt=s(QU);OCr=r(lyt,"from_pretrained()"),lyt.forEach(t),VCr=r(Zoe," to load the model weights."),Zoe.forEach(t),XCr=i(wL),T(QC.$$.fragment,wL),wL.forEach(t),zCr=i(Sl),Sr=n(Sl,"DIV",{class:!0});var Rl=s(Sr);T(S9.$$.fragment,Rl),WCr=i(Rl),MMe=n(Rl,"P",{});var iyt=s(MMe);QCr=r(iyt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),iyt.forEach(t),HCr=i(Rl),cn=n(Rl,"P",{});var AL=s(cn);UCr=r(AL,"The model class to instantiate is selected based on the "),EMe=n(AL,"CODE",{});var dyt=s(EMe);JCr=r(dyt,"model_type"),dyt.forEach(t),YCr=r(AL,` property of the config object (either
passed as an argument or loaded from `),CMe=n(AL,"CODE",{});var cyt=s(CMe);KCr=r(cyt,"pretrained_model_name_or_path"),cyt.forEach(t),ZCr=r(AL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wMe=n(AL,"CODE",{});var myt=s(wMe);e5r=r(myt,"pretrained_model_name_or_path"),myt.forEach(t),o5r=r(AL,":"),AL.forEach(t),r5r=i(Rl),ye=n(Rl,"UL",{});var Ie=s(ye);HC=n(Ie,"LI",{});var KIe=s(HC);AMe=n(KIe,"STRONG",{});var fyt=s(AMe);t5r=r(fyt,"bart"),fyt.forEach(t),a5r=r(KIe," \u2014 "),HU=n(KIe,"A",{href:!0});var gyt=s(HU);n5r=r(gyt,"TFBartForConditionalGeneration"),gyt.forEach(t),s5r=r(KIe," (BART model)"),KIe.forEach(t),l5r=i(Ie),UC=n(Ie,"LI",{});var ZIe=s(UC);LMe=n(ZIe,"STRONG",{});var hyt=s(LMe);i5r=r(hyt,"blenderbot"),hyt.forEach(t),d5r=r(ZIe," \u2014 "),UU=n(ZIe,"A",{href:!0});var uyt=s(UU);c5r=r(uyt,"TFBlenderbotForConditionalGeneration"),uyt.forEach(t),m5r=r(ZIe," (Blenderbot model)"),ZIe.forEach(t),f5r=i(Ie),JC=n(Ie,"LI",{});var eNe=s(JC);yMe=n(eNe,"STRONG",{});var pyt=s(yMe);g5r=r(pyt,"blenderbot-small"),pyt.forEach(t),h5r=r(eNe," \u2014 "),JU=n(eNe,"A",{href:!0});var _yt=s(JU);u5r=r(_yt,"TFBlenderbotSmallForConditionalGeneration"),_yt.forEach(t),p5r=r(eNe," (BlenderbotSmall model)"),eNe.forEach(t),_5r=i(Ie),YC=n(Ie,"LI",{});var oNe=s(YC);xMe=n(oNe,"STRONG",{});var byt=s(xMe);b5r=r(byt,"encoder-decoder"),byt.forEach(t),v5r=r(oNe," \u2014 "),YU=n(oNe,"A",{href:!0});var vyt=s(YU);F5r=r(vyt,"TFEncoderDecoderModel"),vyt.forEach(t),T5r=r(oNe," (Encoder decoder model)"),oNe.forEach(t),M5r=i(Ie),KC=n(Ie,"LI",{});var rNe=s(KC);$Me=n(rNe,"STRONG",{});var Fyt=s($Me);E5r=r(Fyt,"led"),Fyt.forEach(t),C5r=r(rNe," \u2014 "),KU=n(rNe,"A",{href:!0});var Tyt=s(KU);w5r=r(Tyt,"TFLEDForConditionalGeneration"),Tyt.forEach(t),A5r=r(rNe," (LED model)"),rNe.forEach(t),L5r=i(Ie),ZC=n(Ie,"LI",{});var tNe=s(ZC);kMe=n(tNe,"STRONG",{});var Myt=s(kMe);y5r=r(Myt,"marian"),Myt.forEach(t),x5r=r(tNe," \u2014 "),ZU=n(tNe,"A",{href:!0});var Eyt=s(ZU);$5r=r(Eyt,"TFMarianMTModel"),Eyt.forEach(t),k5r=r(tNe," (Marian model)"),tNe.forEach(t),S5r=i(Ie),e5=n(Ie,"LI",{});var aNe=s(e5);SMe=n(aNe,"STRONG",{});var Cyt=s(SMe);R5r=r(Cyt,"mbart"),Cyt.forEach(t),P5r=r(aNe," \u2014 "),eJ=n(aNe,"A",{href:!0});var wyt=s(eJ);B5r=r(wyt,"TFMBartForConditionalGeneration"),wyt.forEach(t),I5r=r(aNe," (mBART model)"),aNe.forEach(t),N5r=i(Ie),o5=n(Ie,"LI",{});var nNe=s(o5);RMe=n(nNe,"STRONG",{});var Ayt=s(RMe);q5r=r(Ayt,"mt5"),Ayt.forEach(t),j5r=r(nNe," \u2014 "),oJ=n(nNe,"A",{href:!0});var Lyt=s(oJ);D5r=r(Lyt,"TFMT5ForConditionalGeneration"),Lyt.forEach(t),G5r=r(nNe," (MT5 model)"),nNe.forEach(t),O5r=i(Ie),r5=n(Ie,"LI",{});var sNe=s(r5);PMe=n(sNe,"STRONG",{});var yyt=s(PMe);V5r=r(yyt,"pegasus"),yyt.forEach(t),X5r=r(sNe," \u2014 "),rJ=n(sNe,"A",{href:!0});var xyt=s(rJ);z5r=r(xyt,"TFPegasusForConditionalGeneration"),xyt.forEach(t),W5r=r(sNe," (Pegasus model)"),sNe.forEach(t),Q5r=i(Ie),t5=n(Ie,"LI",{});var lNe=s(t5);BMe=n(lNe,"STRONG",{});var $yt=s(BMe);H5r=r($yt,"t5"),$yt.forEach(t),U5r=r(lNe," \u2014 "),tJ=n(lNe,"A",{href:!0});var kyt=s(tJ);J5r=r(kyt,"TFT5ForConditionalGeneration"),kyt.forEach(t),Y5r=r(lNe," (T5 model)"),lNe.forEach(t),Ie.forEach(t),K5r=i(Rl),T(a5.$$.fragment,Rl),Rl.forEach(t),Sl.forEach(t),dOe=i(m),_c=n(m,"H2",{class:!0});var _Xe=s(_c);n5=n(_Xe,"A",{id:!0,class:!0,href:!0});var Syt=s(n5);IMe=n(Syt,"SPAN",{});var Ryt=s(IMe);T(R9.$$.fragment,Ryt),Ryt.forEach(t),Syt.forEach(t),Z5r=i(_Xe),NMe=n(_Xe,"SPAN",{});var Pyt=s(NMe);e3r=r(Pyt,"TFAutoModelForSequenceClassification"),Pyt.forEach(t),_Xe.forEach(t),cOe=i(m),nr=n(m,"DIV",{class:!0});var Pl=s(nr);T(P9.$$.fragment,Pl),o3r=i(Pl),bc=n(Pl,"P",{});var ere=s(bc);r3r=r(ere,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),aJ=n(ere,"A",{href:!0});var Byt=s(aJ);t3r=r(Byt,"from_pretrained()"),Byt.forEach(t),a3r=r(ere," class method or the "),nJ=n(ere,"A",{href:!0});var Iyt=s(nJ);n3r=r(Iyt,"from_config()"),Iyt.forEach(t),s3r=r(ere,` class
method.`),ere.forEach(t),l3r=i(Pl),B9=n(Pl,"P",{});var bXe=s(B9);i3r=r(bXe,"This class cannot be instantiated directly using "),qMe=n(bXe,"CODE",{});var Nyt=s(qMe);d3r=r(Nyt,"__init__()"),Nyt.forEach(t),c3r=r(bXe," (throws an error)."),bXe.forEach(t),m3r=i(Pl),It=n(Pl,"DIV",{class:!0});var LL=s(It);T(I9.$$.fragment,LL),f3r=i(LL),jMe=n(LL,"P",{});var qyt=s(jMe);g3r=r(qyt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),qyt.forEach(t),h3r=i(LL),vc=n(LL,"P",{});var ore=s(vc);u3r=r(ore,`Note:
Loading a model from its configuration file does `),DMe=n(ore,"STRONG",{});var jyt=s(DMe);p3r=r(jyt,"not"),jyt.forEach(t),_3r=r(ore,` load the model weights. It only affects the
model\u2019s configuration. Use `),sJ=n(ore,"A",{href:!0});var Dyt=s(sJ);b3r=r(Dyt,"from_pretrained()"),Dyt.forEach(t),v3r=r(ore," to load the model weights."),ore.forEach(t),F3r=i(LL),T(s5.$$.fragment,LL),LL.forEach(t),T3r=i(Pl),Rr=n(Pl,"DIV",{class:!0});var Bl=s(Rr);T(N9.$$.fragment,Bl),M3r=i(Bl),GMe=n(Bl,"P",{});var Gyt=s(GMe);E3r=r(Gyt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Gyt.forEach(t),C3r=i(Bl),mn=n(Bl,"P",{});var yL=s(mn);w3r=r(yL,"The model class to instantiate is selected based on the "),OMe=n(yL,"CODE",{});var Oyt=s(OMe);A3r=r(Oyt,"model_type"),Oyt.forEach(t),L3r=r(yL,` property of the config object (either
passed as an argument or loaded from `),VMe=n(yL,"CODE",{});var Vyt=s(VMe);y3r=r(Vyt,"pretrained_model_name_or_path"),Vyt.forEach(t),x3r=r(yL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),XMe=n(yL,"CODE",{});var Xyt=s(XMe);$3r=r(Xyt,"pretrained_model_name_or_path"),Xyt.forEach(t),k3r=r(yL,":"),yL.forEach(t),S3r=i(Bl),te=n(Bl,"UL",{});var ne=s(te);l5=n(ne,"LI",{});var iNe=s(l5);zMe=n(iNe,"STRONG",{});var zyt=s(zMe);R3r=r(zyt,"albert"),zyt.forEach(t),P3r=r(iNe," \u2014 "),lJ=n(iNe,"A",{href:!0});var Wyt=s(lJ);B3r=r(Wyt,"TFAlbertForSequenceClassification"),Wyt.forEach(t),I3r=r(iNe," (ALBERT model)"),iNe.forEach(t),N3r=i(ne),i5=n(ne,"LI",{});var dNe=s(i5);WMe=n(dNe,"STRONG",{});var Qyt=s(WMe);q3r=r(Qyt,"bert"),Qyt.forEach(t),j3r=r(dNe," \u2014 "),iJ=n(dNe,"A",{href:!0});var Hyt=s(iJ);D3r=r(Hyt,"TFBertForSequenceClassification"),Hyt.forEach(t),G3r=r(dNe," (BERT model)"),dNe.forEach(t),O3r=i(ne),d5=n(ne,"LI",{});var cNe=s(d5);QMe=n(cNe,"STRONG",{});var Uyt=s(QMe);V3r=r(Uyt,"camembert"),Uyt.forEach(t),X3r=r(cNe," \u2014 "),dJ=n(cNe,"A",{href:!0});var Jyt=s(dJ);z3r=r(Jyt,"TFCamembertForSequenceClassification"),Jyt.forEach(t),W3r=r(cNe," (CamemBERT model)"),cNe.forEach(t),Q3r=i(ne),c5=n(ne,"LI",{});var mNe=s(c5);HMe=n(mNe,"STRONG",{});var Yyt=s(HMe);H3r=r(Yyt,"convbert"),Yyt.forEach(t),U3r=r(mNe," \u2014 "),cJ=n(mNe,"A",{href:!0});var Kyt=s(cJ);J3r=r(Kyt,"TFConvBertForSequenceClassification"),Kyt.forEach(t),Y3r=r(mNe," (ConvBERT model)"),mNe.forEach(t),K3r=i(ne),m5=n(ne,"LI",{});var fNe=s(m5);UMe=n(fNe,"STRONG",{});var Zyt=s(UMe);Z3r=r(Zyt,"ctrl"),Zyt.forEach(t),e0r=r(fNe," \u2014 "),mJ=n(fNe,"A",{href:!0});var e7t=s(mJ);o0r=r(e7t,"TFCTRLForSequenceClassification"),e7t.forEach(t),r0r=r(fNe," (CTRL model)"),fNe.forEach(t),t0r=i(ne),f5=n(ne,"LI",{});var gNe=s(f5);JMe=n(gNe,"STRONG",{});var o7t=s(JMe);a0r=r(o7t,"deberta"),o7t.forEach(t),n0r=r(gNe," \u2014 "),fJ=n(gNe,"A",{href:!0});var r7t=s(fJ);s0r=r(r7t,"TFDebertaForSequenceClassification"),r7t.forEach(t),l0r=r(gNe," (DeBERTa model)"),gNe.forEach(t),i0r=i(ne),g5=n(ne,"LI",{});var hNe=s(g5);YMe=n(hNe,"STRONG",{});var t7t=s(YMe);d0r=r(t7t,"deberta-v2"),t7t.forEach(t),c0r=r(hNe," \u2014 "),gJ=n(hNe,"A",{href:!0});var a7t=s(gJ);m0r=r(a7t,"TFDebertaV2ForSequenceClassification"),a7t.forEach(t),f0r=r(hNe," (DeBERTa-v2 model)"),hNe.forEach(t),g0r=i(ne),h5=n(ne,"LI",{});var uNe=s(h5);KMe=n(uNe,"STRONG",{});var n7t=s(KMe);h0r=r(n7t,"distilbert"),n7t.forEach(t),u0r=r(uNe," \u2014 "),hJ=n(uNe,"A",{href:!0});var s7t=s(hJ);p0r=r(s7t,"TFDistilBertForSequenceClassification"),s7t.forEach(t),_0r=r(uNe," (DistilBERT model)"),uNe.forEach(t),b0r=i(ne),u5=n(ne,"LI",{});var pNe=s(u5);ZMe=n(pNe,"STRONG",{});var l7t=s(ZMe);v0r=r(l7t,"electra"),l7t.forEach(t),F0r=r(pNe," \u2014 "),uJ=n(pNe,"A",{href:!0});var i7t=s(uJ);T0r=r(i7t,"TFElectraForSequenceClassification"),i7t.forEach(t),M0r=r(pNe," (ELECTRA model)"),pNe.forEach(t),E0r=i(ne),p5=n(ne,"LI",{});var _Ne=s(p5);e4e=n(_Ne,"STRONG",{});var d7t=s(e4e);C0r=r(d7t,"flaubert"),d7t.forEach(t),w0r=r(_Ne," \u2014 "),pJ=n(_Ne,"A",{href:!0});var c7t=s(pJ);A0r=r(c7t,"TFFlaubertForSequenceClassification"),c7t.forEach(t),L0r=r(_Ne," (FlauBERT model)"),_Ne.forEach(t),y0r=i(ne),_5=n(ne,"LI",{});var bNe=s(_5);o4e=n(bNe,"STRONG",{});var m7t=s(o4e);x0r=r(m7t,"funnel"),m7t.forEach(t),$0r=r(bNe," \u2014 "),_J=n(bNe,"A",{href:!0});var f7t=s(_J);k0r=r(f7t,"TFFunnelForSequenceClassification"),f7t.forEach(t),S0r=r(bNe," (Funnel Transformer model)"),bNe.forEach(t),R0r=i(ne),b5=n(ne,"LI",{});var vNe=s(b5);r4e=n(vNe,"STRONG",{});var g7t=s(r4e);P0r=r(g7t,"gpt2"),g7t.forEach(t),B0r=r(vNe," \u2014 "),bJ=n(vNe,"A",{href:!0});var h7t=s(bJ);I0r=r(h7t,"TFGPT2ForSequenceClassification"),h7t.forEach(t),N0r=r(vNe," (OpenAI GPT-2 model)"),vNe.forEach(t),q0r=i(ne),v5=n(ne,"LI",{});var FNe=s(v5);t4e=n(FNe,"STRONG",{});var u7t=s(t4e);j0r=r(u7t,"gptj"),u7t.forEach(t),D0r=r(FNe," \u2014 "),vJ=n(FNe,"A",{href:!0});var p7t=s(vJ);G0r=r(p7t,"TFGPTJForSequenceClassification"),p7t.forEach(t),O0r=r(FNe," (GPT-J model)"),FNe.forEach(t),V0r=i(ne),F5=n(ne,"LI",{});var TNe=s(F5);a4e=n(TNe,"STRONG",{});var _7t=s(a4e);X0r=r(_7t,"layoutlm"),_7t.forEach(t),z0r=r(TNe," \u2014 "),FJ=n(TNe,"A",{href:!0});var b7t=s(FJ);W0r=r(b7t,"TFLayoutLMForSequenceClassification"),b7t.forEach(t),Q0r=r(TNe," (LayoutLM model)"),TNe.forEach(t),H0r=i(ne),T5=n(ne,"LI",{});var MNe=s(T5);n4e=n(MNe,"STRONG",{});var v7t=s(n4e);U0r=r(v7t,"longformer"),v7t.forEach(t),J0r=r(MNe," \u2014 "),TJ=n(MNe,"A",{href:!0});var F7t=s(TJ);Y0r=r(F7t,"TFLongformerForSequenceClassification"),F7t.forEach(t),K0r=r(MNe," (Longformer model)"),MNe.forEach(t),Z0r=i(ne),M5=n(ne,"LI",{});var ENe=s(M5);s4e=n(ENe,"STRONG",{});var T7t=s(s4e);ewr=r(T7t,"mobilebert"),T7t.forEach(t),owr=r(ENe," \u2014 "),MJ=n(ENe,"A",{href:!0});var M7t=s(MJ);rwr=r(M7t,"TFMobileBertForSequenceClassification"),M7t.forEach(t),twr=r(ENe," (MobileBERT model)"),ENe.forEach(t),awr=i(ne),E5=n(ne,"LI",{});var CNe=s(E5);l4e=n(CNe,"STRONG",{});var E7t=s(l4e);nwr=r(E7t,"mpnet"),E7t.forEach(t),swr=r(CNe," \u2014 "),EJ=n(CNe,"A",{href:!0});var C7t=s(EJ);lwr=r(C7t,"TFMPNetForSequenceClassification"),C7t.forEach(t),iwr=r(CNe," (MPNet model)"),CNe.forEach(t),dwr=i(ne),C5=n(ne,"LI",{});var wNe=s(C5);i4e=n(wNe,"STRONG",{});var w7t=s(i4e);cwr=r(w7t,"openai-gpt"),w7t.forEach(t),mwr=r(wNe," \u2014 "),CJ=n(wNe,"A",{href:!0});var A7t=s(CJ);fwr=r(A7t,"TFOpenAIGPTForSequenceClassification"),A7t.forEach(t),gwr=r(wNe," (OpenAI GPT model)"),wNe.forEach(t),hwr=i(ne),w5=n(ne,"LI",{});var ANe=s(w5);d4e=n(ANe,"STRONG",{});var L7t=s(d4e);uwr=r(L7t,"rembert"),L7t.forEach(t),pwr=r(ANe," \u2014 "),wJ=n(ANe,"A",{href:!0});var y7t=s(wJ);_wr=r(y7t,"TFRemBertForSequenceClassification"),y7t.forEach(t),bwr=r(ANe," (RemBERT model)"),ANe.forEach(t),vwr=i(ne),A5=n(ne,"LI",{});var LNe=s(A5);c4e=n(LNe,"STRONG",{});var x7t=s(c4e);Fwr=r(x7t,"roberta"),x7t.forEach(t),Twr=r(LNe," \u2014 "),AJ=n(LNe,"A",{href:!0});var $7t=s(AJ);Mwr=r($7t,"TFRobertaForSequenceClassification"),$7t.forEach(t),Ewr=r(LNe," (RoBERTa model)"),LNe.forEach(t),Cwr=i(ne),L5=n(ne,"LI",{});var yNe=s(L5);m4e=n(yNe,"STRONG",{});var k7t=s(m4e);wwr=r(k7t,"roformer"),k7t.forEach(t),Awr=r(yNe," \u2014 "),LJ=n(yNe,"A",{href:!0});var S7t=s(LJ);Lwr=r(S7t,"TFRoFormerForSequenceClassification"),S7t.forEach(t),ywr=r(yNe," (RoFormer model)"),yNe.forEach(t),xwr=i(ne),y5=n(ne,"LI",{});var xNe=s(y5);f4e=n(xNe,"STRONG",{});var R7t=s(f4e);$wr=r(R7t,"tapas"),R7t.forEach(t),kwr=r(xNe," \u2014 "),yJ=n(xNe,"A",{href:!0});var P7t=s(yJ);Swr=r(P7t,"TFTapasForSequenceClassification"),P7t.forEach(t),Rwr=r(xNe," (TAPAS model)"),xNe.forEach(t),Pwr=i(ne),x5=n(ne,"LI",{});var $Ne=s(x5);g4e=n($Ne,"STRONG",{});var B7t=s(g4e);Bwr=r(B7t,"transfo-xl"),B7t.forEach(t),Iwr=r($Ne," \u2014 "),xJ=n($Ne,"A",{href:!0});var I7t=s(xJ);Nwr=r(I7t,"TFTransfoXLForSequenceClassification"),I7t.forEach(t),qwr=r($Ne," (Transformer-XL model)"),$Ne.forEach(t),jwr=i(ne),$5=n(ne,"LI",{});var kNe=s($5);h4e=n(kNe,"STRONG",{});var N7t=s(h4e);Dwr=r(N7t,"xlm"),N7t.forEach(t),Gwr=r(kNe," \u2014 "),$J=n(kNe,"A",{href:!0});var q7t=s($J);Owr=r(q7t,"TFXLMForSequenceClassification"),q7t.forEach(t),Vwr=r(kNe," (XLM model)"),kNe.forEach(t),Xwr=i(ne),k5=n(ne,"LI",{});var SNe=s(k5);u4e=n(SNe,"STRONG",{});var j7t=s(u4e);zwr=r(j7t,"xlm-roberta"),j7t.forEach(t),Wwr=r(SNe," \u2014 "),kJ=n(SNe,"A",{href:!0});var D7t=s(kJ);Qwr=r(D7t,"TFXLMRobertaForSequenceClassification"),D7t.forEach(t),Hwr=r(SNe," (XLM-RoBERTa model)"),SNe.forEach(t),Uwr=i(ne),S5=n(ne,"LI",{});var RNe=s(S5);p4e=n(RNe,"STRONG",{});var G7t=s(p4e);Jwr=r(G7t,"xlnet"),G7t.forEach(t),Ywr=r(RNe," \u2014 "),SJ=n(RNe,"A",{href:!0});var O7t=s(SJ);Kwr=r(O7t,"TFXLNetForSequenceClassification"),O7t.forEach(t),Zwr=r(RNe," (XLNet model)"),RNe.forEach(t),ne.forEach(t),eAr=i(Bl),T(R5.$$.fragment,Bl),Bl.forEach(t),Pl.forEach(t),mOe=i(m),Fc=n(m,"H2",{class:!0});var vXe=s(Fc);P5=n(vXe,"A",{id:!0,class:!0,href:!0});var V7t=s(P5);_4e=n(V7t,"SPAN",{});var X7t=s(_4e);T(q9.$$.fragment,X7t),X7t.forEach(t),V7t.forEach(t),oAr=i(vXe),b4e=n(vXe,"SPAN",{});var z7t=s(b4e);rAr=r(z7t,"TFAutoModelForMultipleChoice"),z7t.forEach(t),vXe.forEach(t),fOe=i(m),sr=n(m,"DIV",{class:!0});var Il=s(sr);T(j9.$$.fragment,Il),tAr=i(Il),Tc=n(Il,"P",{});var rre=s(Tc);aAr=r(rre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),RJ=n(rre,"A",{href:!0});var W7t=s(RJ);nAr=r(W7t,"from_pretrained()"),W7t.forEach(t),sAr=r(rre," class method or the "),PJ=n(rre,"A",{href:!0});var Q7t=s(PJ);lAr=r(Q7t,"from_config()"),Q7t.forEach(t),iAr=r(rre,` class
method.`),rre.forEach(t),dAr=i(Il),D9=n(Il,"P",{});var FXe=s(D9);cAr=r(FXe,"This class cannot be instantiated directly using "),v4e=n(FXe,"CODE",{});var H7t=s(v4e);mAr=r(H7t,"__init__()"),H7t.forEach(t),fAr=r(FXe," (throws an error)."),FXe.forEach(t),gAr=i(Il),Nt=n(Il,"DIV",{class:!0});var xL=s(Nt);T(G9.$$.fragment,xL),hAr=i(xL),F4e=n(xL,"P",{});var U7t=s(F4e);uAr=r(U7t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),U7t.forEach(t),pAr=i(xL),Mc=n(xL,"P",{});var tre=s(Mc);_Ar=r(tre,`Note:
Loading a model from its configuration file does `),T4e=n(tre,"STRONG",{});var J7t=s(T4e);bAr=r(J7t,"not"),J7t.forEach(t),vAr=r(tre,` load the model weights. It only affects the
model\u2019s configuration. Use `),BJ=n(tre,"A",{href:!0});var Y7t=s(BJ);FAr=r(Y7t,"from_pretrained()"),Y7t.forEach(t),TAr=r(tre," to load the model weights."),tre.forEach(t),MAr=i(xL),T(B5.$$.fragment,xL),xL.forEach(t),EAr=i(Il),Pr=n(Il,"DIV",{class:!0});var Nl=s(Pr);T(O9.$$.fragment,Nl),CAr=i(Nl),M4e=n(Nl,"P",{});var K7t=s(M4e);wAr=r(K7t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),K7t.forEach(t),AAr=i(Nl),fn=n(Nl,"P",{});var $L=s(fn);LAr=r($L,"The model class to instantiate is selected based on the "),E4e=n($L,"CODE",{});var Z7t=s(E4e);yAr=r(Z7t,"model_type"),Z7t.forEach(t),xAr=r($L,` property of the config object (either
passed as an argument or loaded from `),C4e=n($L,"CODE",{});var e8t=s(C4e);$Ar=r(e8t,"pretrained_model_name_or_path"),e8t.forEach(t),kAr=r($L,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w4e=n($L,"CODE",{});var o8t=s(w4e);SAr=r(o8t,"pretrained_model_name_or_path"),o8t.forEach(t),RAr=r($L,":"),$L.forEach(t),PAr=i(Nl),pe=n(Nl,"UL",{});var ve=s(pe);I5=n(ve,"LI",{});var PNe=s(I5);A4e=n(PNe,"STRONG",{});var r8t=s(A4e);BAr=r(r8t,"albert"),r8t.forEach(t),IAr=r(PNe," \u2014 "),IJ=n(PNe,"A",{href:!0});var t8t=s(IJ);NAr=r(t8t,"TFAlbertForMultipleChoice"),t8t.forEach(t),qAr=r(PNe," (ALBERT model)"),PNe.forEach(t),jAr=i(ve),N5=n(ve,"LI",{});var BNe=s(N5);L4e=n(BNe,"STRONG",{});var a8t=s(L4e);DAr=r(a8t,"bert"),a8t.forEach(t),GAr=r(BNe," \u2014 "),NJ=n(BNe,"A",{href:!0});var n8t=s(NJ);OAr=r(n8t,"TFBertForMultipleChoice"),n8t.forEach(t),VAr=r(BNe," (BERT model)"),BNe.forEach(t),XAr=i(ve),q5=n(ve,"LI",{});var INe=s(q5);y4e=n(INe,"STRONG",{});var s8t=s(y4e);zAr=r(s8t,"camembert"),s8t.forEach(t),WAr=r(INe," \u2014 "),qJ=n(INe,"A",{href:!0});var l8t=s(qJ);QAr=r(l8t,"TFCamembertForMultipleChoice"),l8t.forEach(t),HAr=r(INe," (CamemBERT model)"),INe.forEach(t),UAr=i(ve),j5=n(ve,"LI",{});var NNe=s(j5);x4e=n(NNe,"STRONG",{});var i8t=s(x4e);JAr=r(i8t,"convbert"),i8t.forEach(t),YAr=r(NNe," \u2014 "),jJ=n(NNe,"A",{href:!0});var d8t=s(jJ);KAr=r(d8t,"TFConvBertForMultipleChoice"),d8t.forEach(t),ZAr=r(NNe," (ConvBERT model)"),NNe.forEach(t),e6r=i(ve),D5=n(ve,"LI",{});var qNe=s(D5);$4e=n(qNe,"STRONG",{});var c8t=s($4e);o6r=r(c8t,"distilbert"),c8t.forEach(t),r6r=r(qNe," \u2014 "),DJ=n(qNe,"A",{href:!0});var m8t=s(DJ);t6r=r(m8t,"TFDistilBertForMultipleChoice"),m8t.forEach(t),a6r=r(qNe," (DistilBERT model)"),qNe.forEach(t),n6r=i(ve),G5=n(ve,"LI",{});var jNe=s(G5);k4e=n(jNe,"STRONG",{});var f8t=s(k4e);s6r=r(f8t,"electra"),f8t.forEach(t),l6r=r(jNe," \u2014 "),GJ=n(jNe,"A",{href:!0});var g8t=s(GJ);i6r=r(g8t,"TFElectraForMultipleChoice"),g8t.forEach(t),d6r=r(jNe," (ELECTRA model)"),jNe.forEach(t),c6r=i(ve),O5=n(ve,"LI",{});var DNe=s(O5);S4e=n(DNe,"STRONG",{});var h8t=s(S4e);m6r=r(h8t,"flaubert"),h8t.forEach(t),f6r=r(DNe," \u2014 "),OJ=n(DNe,"A",{href:!0});var u8t=s(OJ);g6r=r(u8t,"TFFlaubertForMultipleChoice"),u8t.forEach(t),h6r=r(DNe," (FlauBERT model)"),DNe.forEach(t),u6r=i(ve),V5=n(ve,"LI",{});var GNe=s(V5);R4e=n(GNe,"STRONG",{});var p8t=s(R4e);p6r=r(p8t,"funnel"),p8t.forEach(t),_6r=r(GNe," \u2014 "),VJ=n(GNe,"A",{href:!0});var _8t=s(VJ);b6r=r(_8t,"TFFunnelForMultipleChoice"),_8t.forEach(t),v6r=r(GNe," (Funnel Transformer model)"),GNe.forEach(t),F6r=i(ve),X5=n(ve,"LI",{});var ONe=s(X5);P4e=n(ONe,"STRONG",{});var b8t=s(P4e);T6r=r(b8t,"longformer"),b8t.forEach(t),M6r=r(ONe," \u2014 "),XJ=n(ONe,"A",{href:!0});var v8t=s(XJ);E6r=r(v8t,"TFLongformerForMultipleChoice"),v8t.forEach(t),C6r=r(ONe," (Longformer model)"),ONe.forEach(t),w6r=i(ve),z5=n(ve,"LI",{});var VNe=s(z5);B4e=n(VNe,"STRONG",{});var F8t=s(B4e);A6r=r(F8t,"mobilebert"),F8t.forEach(t),L6r=r(VNe," \u2014 "),zJ=n(VNe,"A",{href:!0});var T8t=s(zJ);y6r=r(T8t,"TFMobileBertForMultipleChoice"),T8t.forEach(t),x6r=r(VNe," (MobileBERT model)"),VNe.forEach(t),$6r=i(ve),W5=n(ve,"LI",{});var XNe=s(W5);I4e=n(XNe,"STRONG",{});var M8t=s(I4e);k6r=r(M8t,"mpnet"),M8t.forEach(t),S6r=r(XNe," \u2014 "),WJ=n(XNe,"A",{href:!0});var E8t=s(WJ);R6r=r(E8t,"TFMPNetForMultipleChoice"),E8t.forEach(t),P6r=r(XNe," (MPNet model)"),XNe.forEach(t),B6r=i(ve),Q5=n(ve,"LI",{});var zNe=s(Q5);N4e=n(zNe,"STRONG",{});var C8t=s(N4e);I6r=r(C8t,"rembert"),C8t.forEach(t),N6r=r(zNe," \u2014 "),QJ=n(zNe,"A",{href:!0});var w8t=s(QJ);q6r=r(w8t,"TFRemBertForMultipleChoice"),w8t.forEach(t),j6r=r(zNe," (RemBERT model)"),zNe.forEach(t),D6r=i(ve),H5=n(ve,"LI",{});var WNe=s(H5);q4e=n(WNe,"STRONG",{});var A8t=s(q4e);G6r=r(A8t,"roberta"),A8t.forEach(t),O6r=r(WNe," \u2014 "),HJ=n(WNe,"A",{href:!0});var L8t=s(HJ);V6r=r(L8t,"TFRobertaForMultipleChoice"),L8t.forEach(t),X6r=r(WNe," (RoBERTa model)"),WNe.forEach(t),z6r=i(ve),U5=n(ve,"LI",{});var QNe=s(U5);j4e=n(QNe,"STRONG",{});var y8t=s(j4e);W6r=r(y8t,"roformer"),y8t.forEach(t),Q6r=r(QNe," \u2014 "),UJ=n(QNe,"A",{href:!0});var x8t=s(UJ);H6r=r(x8t,"TFRoFormerForMultipleChoice"),x8t.forEach(t),U6r=r(QNe," (RoFormer model)"),QNe.forEach(t),J6r=i(ve),J5=n(ve,"LI",{});var HNe=s(J5);D4e=n(HNe,"STRONG",{});var $8t=s(D4e);Y6r=r($8t,"xlm"),$8t.forEach(t),K6r=r(HNe," \u2014 "),JJ=n(HNe,"A",{href:!0});var k8t=s(JJ);Z6r=r(k8t,"TFXLMForMultipleChoice"),k8t.forEach(t),eLr=r(HNe," (XLM model)"),HNe.forEach(t),oLr=i(ve),Y5=n(ve,"LI",{});var UNe=s(Y5);G4e=n(UNe,"STRONG",{});var S8t=s(G4e);rLr=r(S8t,"xlm-roberta"),S8t.forEach(t),tLr=r(UNe," \u2014 "),YJ=n(UNe,"A",{href:!0});var R8t=s(YJ);aLr=r(R8t,"TFXLMRobertaForMultipleChoice"),R8t.forEach(t),nLr=r(UNe," (XLM-RoBERTa model)"),UNe.forEach(t),sLr=i(ve),K5=n(ve,"LI",{});var JNe=s(K5);O4e=n(JNe,"STRONG",{});var P8t=s(O4e);lLr=r(P8t,"xlnet"),P8t.forEach(t),iLr=r(JNe," \u2014 "),KJ=n(JNe,"A",{href:!0});var B8t=s(KJ);dLr=r(B8t,"TFXLNetForMultipleChoice"),B8t.forEach(t),cLr=r(JNe," (XLNet model)"),JNe.forEach(t),ve.forEach(t),mLr=i(Nl),T(Z5.$$.fragment,Nl),Nl.forEach(t),Il.forEach(t),gOe=i(m),Ec=n(m,"H2",{class:!0});var TXe=s(Ec);e3=n(TXe,"A",{id:!0,class:!0,href:!0});var I8t=s(e3);V4e=n(I8t,"SPAN",{});var N8t=s(V4e);T(V9.$$.fragment,N8t),N8t.forEach(t),I8t.forEach(t),fLr=i(TXe),X4e=n(TXe,"SPAN",{});var q8t=s(X4e);gLr=r(q8t,"TFAutoModelForNextSentencePrediction"),q8t.forEach(t),TXe.forEach(t),hOe=i(m),lr=n(m,"DIV",{class:!0});var ql=s(lr);T(X9.$$.fragment,ql),hLr=i(ql),Cc=n(ql,"P",{});var are=s(Cc);uLr=r(are,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),ZJ=n(are,"A",{href:!0});var j8t=s(ZJ);pLr=r(j8t,"from_pretrained()"),j8t.forEach(t),_Lr=r(are," class method or the "),eY=n(are,"A",{href:!0});var D8t=s(eY);bLr=r(D8t,"from_config()"),D8t.forEach(t),vLr=r(are,` class
method.`),are.forEach(t),FLr=i(ql),z9=n(ql,"P",{});var MXe=s(z9);TLr=r(MXe,"This class cannot be instantiated directly using "),z4e=n(MXe,"CODE",{});var G8t=s(z4e);MLr=r(G8t,"__init__()"),G8t.forEach(t),ELr=r(MXe," (throws an error)."),MXe.forEach(t),CLr=i(ql),qt=n(ql,"DIV",{class:!0});var kL=s(qt);T(W9.$$.fragment,kL),wLr=i(kL),W4e=n(kL,"P",{});var O8t=s(W4e);ALr=r(O8t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),O8t.forEach(t),LLr=i(kL),wc=n(kL,"P",{});var nre=s(wc);yLr=r(nre,`Note:
Loading a model from its configuration file does `),Q4e=n(nre,"STRONG",{});var V8t=s(Q4e);xLr=r(V8t,"not"),V8t.forEach(t),$Lr=r(nre,` load the model weights. It only affects the
model\u2019s configuration. Use `),oY=n(nre,"A",{href:!0});var X8t=s(oY);kLr=r(X8t,"from_pretrained()"),X8t.forEach(t),SLr=r(nre," to load the model weights."),nre.forEach(t),RLr=i(kL),T(o3.$$.fragment,kL),kL.forEach(t),PLr=i(ql),Br=n(ql,"DIV",{class:!0});var jl=s(Br);T(Q9.$$.fragment,jl),BLr=i(jl),H4e=n(jl,"P",{});var z8t=s(H4e);ILr=r(z8t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),z8t.forEach(t),NLr=i(jl),gn=n(jl,"P",{});var SL=s(gn);qLr=r(SL,"The model class to instantiate is selected based on the "),U4e=n(SL,"CODE",{});var W8t=s(U4e);jLr=r(W8t,"model_type"),W8t.forEach(t),DLr=r(SL,` property of the config object (either
passed as an argument or loaded from `),J4e=n(SL,"CODE",{});var Q8t=s(J4e);GLr=r(Q8t,"pretrained_model_name_or_path"),Q8t.forEach(t),OLr=r(SL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y4e=n(SL,"CODE",{});var H8t=s(Y4e);VLr=r(H8t,"pretrained_model_name_or_path"),H8t.forEach(t),XLr=r(SL,":"),SL.forEach(t),zLr=i(jl),H9=n(jl,"UL",{});var EXe=s(H9);r3=n(EXe,"LI",{});var YNe=s(r3);K4e=n(YNe,"STRONG",{});var U8t=s(K4e);WLr=r(U8t,"bert"),U8t.forEach(t),QLr=r(YNe," \u2014 "),rY=n(YNe,"A",{href:!0});var J8t=s(rY);HLr=r(J8t,"TFBertForNextSentencePrediction"),J8t.forEach(t),ULr=r(YNe," (BERT model)"),YNe.forEach(t),JLr=i(EXe),t3=n(EXe,"LI",{});var KNe=s(t3);Z4e=n(KNe,"STRONG",{});var Y8t=s(Z4e);YLr=r(Y8t,"mobilebert"),Y8t.forEach(t),KLr=r(KNe," \u2014 "),tY=n(KNe,"A",{href:!0});var K8t=s(tY);ZLr=r(K8t,"TFMobileBertForNextSentencePrediction"),K8t.forEach(t),eyr=r(KNe," (MobileBERT model)"),KNe.forEach(t),EXe.forEach(t),oyr=i(jl),T(a3.$$.fragment,jl),jl.forEach(t),ql.forEach(t),uOe=i(m),Ac=n(m,"H2",{class:!0});var CXe=s(Ac);n3=n(CXe,"A",{id:!0,class:!0,href:!0});var Z8t=s(n3);eEe=n(Z8t,"SPAN",{});var e9t=s(eEe);T(U9.$$.fragment,e9t),e9t.forEach(t),Z8t.forEach(t),ryr=i(CXe),oEe=n(CXe,"SPAN",{});var o9t=s(oEe);tyr=r(o9t,"TFAutoModelForTableQuestionAnswering"),o9t.forEach(t),CXe.forEach(t),pOe=i(m),ir=n(m,"DIV",{class:!0});var Dl=s(ir);T(J9.$$.fragment,Dl),ayr=i(Dl),Lc=n(Dl,"P",{});var sre=s(Lc);nyr=r(sre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),aY=n(sre,"A",{href:!0});var r9t=s(aY);syr=r(r9t,"from_pretrained()"),r9t.forEach(t),lyr=r(sre," class method or the "),nY=n(sre,"A",{href:!0});var t9t=s(nY);iyr=r(t9t,"from_config()"),t9t.forEach(t),dyr=r(sre,` class
method.`),sre.forEach(t),cyr=i(Dl),Y9=n(Dl,"P",{});var wXe=s(Y9);myr=r(wXe,"This class cannot be instantiated directly using "),rEe=n(wXe,"CODE",{});var a9t=s(rEe);fyr=r(a9t,"__init__()"),a9t.forEach(t),gyr=r(wXe," (throws an error)."),wXe.forEach(t),hyr=i(Dl),jt=n(Dl,"DIV",{class:!0});var RL=s(jt);T(K9.$$.fragment,RL),uyr=i(RL),tEe=n(RL,"P",{});var n9t=s(tEe);pyr=r(n9t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),n9t.forEach(t),_yr=i(RL),yc=n(RL,"P",{});var lre=s(yc);byr=r(lre,`Note:
Loading a model from its configuration file does `),aEe=n(lre,"STRONG",{});var s9t=s(aEe);vyr=r(s9t,"not"),s9t.forEach(t),Fyr=r(lre,` load the model weights. It only affects the
model\u2019s configuration. Use `),sY=n(lre,"A",{href:!0});var l9t=s(sY);Tyr=r(l9t,"from_pretrained()"),l9t.forEach(t),Myr=r(lre," to load the model weights."),lre.forEach(t),Eyr=i(RL),T(s3.$$.fragment,RL),RL.forEach(t),Cyr=i(Dl),Ir=n(Dl,"DIV",{class:!0});var Gl=s(Ir);T(Z9.$$.fragment,Gl),wyr=i(Gl),nEe=n(Gl,"P",{});var i9t=s(nEe);Ayr=r(i9t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),i9t.forEach(t),Lyr=i(Gl),hn=n(Gl,"P",{});var PL=s(hn);yyr=r(PL,"The model class to instantiate is selected based on the "),sEe=n(PL,"CODE",{});var d9t=s(sEe);xyr=r(d9t,"model_type"),d9t.forEach(t),$yr=r(PL,` property of the config object (either
passed as an argument or loaded from `),lEe=n(PL,"CODE",{});var c9t=s(lEe);kyr=r(c9t,"pretrained_model_name_or_path"),c9t.forEach(t),Syr=r(PL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iEe=n(PL,"CODE",{});var m9t=s(iEe);Ryr=r(m9t,"pretrained_model_name_or_path"),m9t.forEach(t),Pyr=r(PL,":"),PL.forEach(t),Byr=i(Gl),dEe=n(Gl,"UL",{});var f9t=s(dEe);l3=n(f9t,"LI",{});var ZNe=s(l3);cEe=n(ZNe,"STRONG",{});var g9t=s(cEe);Iyr=r(g9t,"tapas"),g9t.forEach(t),Nyr=r(ZNe," \u2014 "),lY=n(ZNe,"A",{href:!0});var h9t=s(lY);qyr=r(h9t,"TFTapasForQuestionAnswering"),h9t.forEach(t),jyr=r(ZNe," (TAPAS model)"),ZNe.forEach(t),f9t.forEach(t),Dyr=i(Gl),T(i3.$$.fragment,Gl),Gl.forEach(t),Dl.forEach(t),_Oe=i(m),xc=n(m,"H2",{class:!0});var AXe=s(xc);d3=n(AXe,"A",{id:!0,class:!0,href:!0});var u9t=s(d3);mEe=n(u9t,"SPAN",{});var p9t=s(mEe);T(ex.$$.fragment,p9t),p9t.forEach(t),u9t.forEach(t),Gyr=i(AXe),fEe=n(AXe,"SPAN",{});var _9t=s(fEe);Oyr=r(_9t,"TFAutoModelForTokenClassification"),_9t.forEach(t),AXe.forEach(t),bOe=i(m),dr=n(m,"DIV",{class:!0});var Ol=s(dr);T(ox.$$.fragment,Ol),Vyr=i(Ol),$c=n(Ol,"P",{});var ire=s($c);Xyr=r(ire,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),iY=n(ire,"A",{href:!0});var b9t=s(iY);zyr=r(b9t,"from_pretrained()"),b9t.forEach(t),Wyr=r(ire," class method or the "),dY=n(ire,"A",{href:!0});var v9t=s(dY);Qyr=r(v9t,"from_config()"),v9t.forEach(t),Hyr=r(ire,` class
method.`),ire.forEach(t),Uyr=i(Ol),rx=n(Ol,"P",{});var LXe=s(rx);Jyr=r(LXe,"This class cannot be instantiated directly using "),gEe=n(LXe,"CODE",{});var F9t=s(gEe);Yyr=r(F9t,"__init__()"),F9t.forEach(t),Kyr=r(LXe," (throws an error)."),LXe.forEach(t),Zyr=i(Ol),Dt=n(Ol,"DIV",{class:!0});var BL=s(Dt);T(tx.$$.fragment,BL),e7r=i(BL),hEe=n(BL,"P",{});var T9t=s(hEe);o7r=r(T9t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),T9t.forEach(t),r7r=i(BL),kc=n(BL,"P",{});var dre=s(kc);t7r=r(dre,`Note:
Loading a model from its configuration file does `),uEe=n(dre,"STRONG",{});var M9t=s(uEe);a7r=r(M9t,"not"),M9t.forEach(t),n7r=r(dre,` load the model weights. It only affects the
model\u2019s configuration. Use `),cY=n(dre,"A",{href:!0});var E9t=s(cY);s7r=r(E9t,"from_pretrained()"),E9t.forEach(t),l7r=r(dre," to load the model weights."),dre.forEach(t),i7r=i(BL),T(c3.$$.fragment,BL),BL.forEach(t),d7r=i(Ol),Nr=n(Ol,"DIV",{class:!0});var Vl=s(Nr);T(ax.$$.fragment,Vl),c7r=i(Vl),pEe=n(Vl,"P",{});var C9t=s(pEe);m7r=r(C9t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),C9t.forEach(t),f7r=i(Vl),un=n(Vl,"P",{});var IL=s(un);g7r=r(IL,"The model class to instantiate is selected based on the "),_Ee=n(IL,"CODE",{});var w9t=s(_Ee);h7r=r(w9t,"model_type"),w9t.forEach(t),u7r=r(IL,` property of the config object (either
passed as an argument or loaded from `),bEe=n(IL,"CODE",{});var A9t=s(bEe);p7r=r(A9t,"pretrained_model_name_or_path"),A9t.forEach(t),_7r=r(IL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vEe=n(IL,"CODE",{});var L9t=s(vEe);b7r=r(L9t,"pretrained_model_name_or_path"),L9t.forEach(t),v7r=r(IL,":"),IL.forEach(t),F7r=i(Vl),de=n(Vl,"UL",{});var fe=s(de);m3=n(fe,"LI",{});var eqe=s(m3);FEe=n(eqe,"STRONG",{});var y9t=s(FEe);T7r=r(y9t,"albert"),y9t.forEach(t),M7r=r(eqe," \u2014 "),mY=n(eqe,"A",{href:!0});var x9t=s(mY);E7r=r(x9t,"TFAlbertForTokenClassification"),x9t.forEach(t),C7r=r(eqe," (ALBERT model)"),eqe.forEach(t),w7r=i(fe),f3=n(fe,"LI",{});var oqe=s(f3);TEe=n(oqe,"STRONG",{});var $9t=s(TEe);A7r=r($9t,"bert"),$9t.forEach(t),L7r=r(oqe," \u2014 "),fY=n(oqe,"A",{href:!0});var k9t=s(fY);y7r=r(k9t,"TFBertForTokenClassification"),k9t.forEach(t),x7r=r(oqe," (BERT model)"),oqe.forEach(t),$7r=i(fe),g3=n(fe,"LI",{});var rqe=s(g3);MEe=n(rqe,"STRONG",{});var S9t=s(MEe);k7r=r(S9t,"camembert"),S9t.forEach(t),S7r=r(rqe," \u2014 "),gY=n(rqe,"A",{href:!0});var R9t=s(gY);R7r=r(R9t,"TFCamembertForTokenClassification"),R9t.forEach(t),P7r=r(rqe," (CamemBERT model)"),rqe.forEach(t),B7r=i(fe),h3=n(fe,"LI",{});var tqe=s(h3);EEe=n(tqe,"STRONG",{});var P9t=s(EEe);I7r=r(P9t,"convbert"),P9t.forEach(t),N7r=r(tqe," \u2014 "),hY=n(tqe,"A",{href:!0});var B9t=s(hY);q7r=r(B9t,"TFConvBertForTokenClassification"),B9t.forEach(t),j7r=r(tqe," (ConvBERT model)"),tqe.forEach(t),D7r=i(fe),u3=n(fe,"LI",{});var aqe=s(u3);CEe=n(aqe,"STRONG",{});var I9t=s(CEe);G7r=r(I9t,"deberta"),I9t.forEach(t),O7r=r(aqe," \u2014 "),uY=n(aqe,"A",{href:!0});var N9t=s(uY);V7r=r(N9t,"TFDebertaForTokenClassification"),N9t.forEach(t),X7r=r(aqe," (DeBERTa model)"),aqe.forEach(t),z7r=i(fe),p3=n(fe,"LI",{});var nqe=s(p3);wEe=n(nqe,"STRONG",{});var q9t=s(wEe);W7r=r(q9t,"deberta-v2"),q9t.forEach(t),Q7r=r(nqe," \u2014 "),pY=n(nqe,"A",{href:!0});var j9t=s(pY);H7r=r(j9t,"TFDebertaV2ForTokenClassification"),j9t.forEach(t),U7r=r(nqe," (DeBERTa-v2 model)"),nqe.forEach(t),J7r=i(fe),_3=n(fe,"LI",{});var sqe=s(_3);AEe=n(sqe,"STRONG",{});var D9t=s(AEe);Y7r=r(D9t,"distilbert"),D9t.forEach(t),K7r=r(sqe," \u2014 "),_Y=n(sqe,"A",{href:!0});var G9t=s(_Y);Z7r=r(G9t,"TFDistilBertForTokenClassification"),G9t.forEach(t),e8r=r(sqe," (DistilBERT model)"),sqe.forEach(t),o8r=i(fe),b3=n(fe,"LI",{});var lqe=s(b3);LEe=n(lqe,"STRONG",{});var O9t=s(LEe);r8r=r(O9t,"electra"),O9t.forEach(t),t8r=r(lqe," \u2014 "),bY=n(lqe,"A",{href:!0});var V9t=s(bY);a8r=r(V9t,"TFElectraForTokenClassification"),V9t.forEach(t),n8r=r(lqe," (ELECTRA model)"),lqe.forEach(t),s8r=i(fe),v3=n(fe,"LI",{});var iqe=s(v3);yEe=n(iqe,"STRONG",{});var X9t=s(yEe);l8r=r(X9t,"flaubert"),X9t.forEach(t),i8r=r(iqe," \u2014 "),vY=n(iqe,"A",{href:!0});var z9t=s(vY);d8r=r(z9t,"TFFlaubertForTokenClassification"),z9t.forEach(t),c8r=r(iqe," (FlauBERT model)"),iqe.forEach(t),m8r=i(fe),F3=n(fe,"LI",{});var dqe=s(F3);xEe=n(dqe,"STRONG",{});var W9t=s(xEe);f8r=r(W9t,"funnel"),W9t.forEach(t),g8r=r(dqe," \u2014 "),FY=n(dqe,"A",{href:!0});var Q9t=s(FY);h8r=r(Q9t,"TFFunnelForTokenClassification"),Q9t.forEach(t),u8r=r(dqe," (Funnel Transformer model)"),dqe.forEach(t),p8r=i(fe),T3=n(fe,"LI",{});var cqe=s(T3);$Ee=n(cqe,"STRONG",{});var H9t=s($Ee);_8r=r(H9t,"layoutlm"),H9t.forEach(t),b8r=r(cqe," \u2014 "),TY=n(cqe,"A",{href:!0});var U9t=s(TY);v8r=r(U9t,"TFLayoutLMForTokenClassification"),U9t.forEach(t),F8r=r(cqe," (LayoutLM model)"),cqe.forEach(t),T8r=i(fe),M3=n(fe,"LI",{});var mqe=s(M3);kEe=n(mqe,"STRONG",{});var J9t=s(kEe);M8r=r(J9t,"longformer"),J9t.forEach(t),E8r=r(mqe," \u2014 "),MY=n(mqe,"A",{href:!0});var Y9t=s(MY);C8r=r(Y9t,"TFLongformerForTokenClassification"),Y9t.forEach(t),w8r=r(mqe," (Longformer model)"),mqe.forEach(t),A8r=i(fe),E3=n(fe,"LI",{});var fqe=s(E3);SEe=n(fqe,"STRONG",{});var K9t=s(SEe);L8r=r(K9t,"mobilebert"),K9t.forEach(t),y8r=r(fqe," \u2014 "),EY=n(fqe,"A",{href:!0});var Z9t=s(EY);x8r=r(Z9t,"TFMobileBertForTokenClassification"),Z9t.forEach(t),$8r=r(fqe," (MobileBERT model)"),fqe.forEach(t),k8r=i(fe),C3=n(fe,"LI",{});var gqe=s(C3);REe=n(gqe,"STRONG",{});var ext=s(REe);S8r=r(ext,"mpnet"),ext.forEach(t),R8r=r(gqe," \u2014 "),CY=n(gqe,"A",{href:!0});var oxt=s(CY);P8r=r(oxt,"TFMPNetForTokenClassification"),oxt.forEach(t),B8r=r(gqe," (MPNet model)"),gqe.forEach(t),I8r=i(fe),w3=n(fe,"LI",{});var hqe=s(w3);PEe=n(hqe,"STRONG",{});var rxt=s(PEe);N8r=r(rxt,"rembert"),rxt.forEach(t),q8r=r(hqe," \u2014 "),wY=n(hqe,"A",{href:!0});var txt=s(wY);j8r=r(txt,"TFRemBertForTokenClassification"),txt.forEach(t),D8r=r(hqe," (RemBERT model)"),hqe.forEach(t),G8r=i(fe),A3=n(fe,"LI",{});var uqe=s(A3);BEe=n(uqe,"STRONG",{});var axt=s(BEe);O8r=r(axt,"roberta"),axt.forEach(t),V8r=r(uqe," \u2014 "),AY=n(uqe,"A",{href:!0});var nxt=s(AY);X8r=r(nxt,"TFRobertaForTokenClassification"),nxt.forEach(t),z8r=r(uqe," (RoBERTa model)"),uqe.forEach(t),W8r=i(fe),L3=n(fe,"LI",{});var pqe=s(L3);IEe=n(pqe,"STRONG",{});var sxt=s(IEe);Q8r=r(sxt,"roformer"),sxt.forEach(t),H8r=r(pqe," \u2014 "),LY=n(pqe,"A",{href:!0});var lxt=s(LY);U8r=r(lxt,"TFRoFormerForTokenClassification"),lxt.forEach(t),J8r=r(pqe," (RoFormer model)"),pqe.forEach(t),Y8r=i(fe),y3=n(fe,"LI",{});var _qe=s(y3);NEe=n(_qe,"STRONG",{});var ixt=s(NEe);K8r=r(ixt,"xlm"),ixt.forEach(t),Z8r=r(_qe," \u2014 "),yY=n(_qe,"A",{href:!0});var dxt=s(yY);e9r=r(dxt,"TFXLMForTokenClassification"),dxt.forEach(t),o9r=r(_qe," (XLM model)"),_qe.forEach(t),r9r=i(fe),x3=n(fe,"LI",{});var bqe=s(x3);qEe=n(bqe,"STRONG",{});var cxt=s(qEe);t9r=r(cxt,"xlm-roberta"),cxt.forEach(t),a9r=r(bqe," \u2014 "),xY=n(bqe,"A",{href:!0});var mxt=s(xY);n9r=r(mxt,"TFXLMRobertaForTokenClassification"),mxt.forEach(t),s9r=r(bqe," (XLM-RoBERTa model)"),bqe.forEach(t),l9r=i(fe),$3=n(fe,"LI",{});var vqe=s($3);jEe=n(vqe,"STRONG",{});var fxt=s(jEe);i9r=r(fxt,"xlnet"),fxt.forEach(t),d9r=r(vqe," \u2014 "),$Y=n(vqe,"A",{href:!0});var gxt=s($Y);c9r=r(gxt,"TFXLNetForTokenClassification"),gxt.forEach(t),m9r=r(vqe," (XLNet model)"),vqe.forEach(t),fe.forEach(t),f9r=i(Vl),T(k3.$$.fragment,Vl),Vl.forEach(t),Ol.forEach(t),vOe=i(m),Sc=n(m,"H2",{class:!0});var yXe=s(Sc);S3=n(yXe,"A",{id:!0,class:!0,href:!0});var hxt=s(S3);DEe=n(hxt,"SPAN",{});var uxt=s(DEe);T(nx.$$.fragment,uxt),uxt.forEach(t),hxt.forEach(t),g9r=i(yXe),GEe=n(yXe,"SPAN",{});var pxt=s(GEe);h9r=r(pxt,"TFAutoModelForQuestionAnswering"),pxt.forEach(t),yXe.forEach(t),FOe=i(m),cr=n(m,"DIV",{class:!0});var Xl=s(cr);T(sx.$$.fragment,Xl),u9r=i(Xl),Rc=n(Xl,"P",{});var cre=s(Rc);p9r=r(cre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),kY=n(cre,"A",{href:!0});var _xt=s(kY);_9r=r(_xt,"from_pretrained()"),_xt.forEach(t),b9r=r(cre," class method or the "),SY=n(cre,"A",{href:!0});var bxt=s(SY);v9r=r(bxt,"from_config()"),bxt.forEach(t),F9r=r(cre,` class
method.`),cre.forEach(t),T9r=i(Xl),lx=n(Xl,"P",{});var xXe=s(lx);M9r=r(xXe,"This class cannot be instantiated directly using "),OEe=n(xXe,"CODE",{});var vxt=s(OEe);E9r=r(vxt,"__init__()"),vxt.forEach(t),C9r=r(xXe," (throws an error)."),xXe.forEach(t),w9r=i(Xl),Gt=n(Xl,"DIV",{class:!0});var NL=s(Gt);T(ix.$$.fragment,NL),A9r=i(NL),VEe=n(NL,"P",{});var Fxt=s(VEe);L9r=r(Fxt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Fxt.forEach(t),y9r=i(NL),Pc=n(NL,"P",{});var mre=s(Pc);x9r=r(mre,`Note:
Loading a model from its configuration file does `),XEe=n(mre,"STRONG",{});var Txt=s(XEe);$9r=r(Txt,"not"),Txt.forEach(t),k9r=r(mre,` load the model weights. It only affects the
model\u2019s configuration. Use `),RY=n(mre,"A",{href:!0});var Mxt=s(RY);S9r=r(Mxt,"from_pretrained()"),Mxt.forEach(t),R9r=r(mre," to load the model weights."),mre.forEach(t),P9r=i(NL),T(R3.$$.fragment,NL),NL.forEach(t),B9r=i(Xl),qr=n(Xl,"DIV",{class:!0});var zl=s(qr);T(dx.$$.fragment,zl),I9r=i(zl),zEe=n(zl,"P",{});var Ext=s(zEe);N9r=r(Ext,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Ext.forEach(t),q9r=i(zl),pn=n(zl,"P",{});var qL=s(pn);j9r=r(qL,"The model class to instantiate is selected based on the "),WEe=n(qL,"CODE",{});var Cxt=s(WEe);D9r=r(Cxt,"model_type"),Cxt.forEach(t),G9r=r(qL,` property of the config object (either
passed as an argument or loaded from `),QEe=n(qL,"CODE",{});var wxt=s(QEe);O9r=r(wxt,"pretrained_model_name_or_path"),wxt.forEach(t),V9r=r(qL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),HEe=n(qL,"CODE",{});var Axt=s(HEe);X9r=r(Axt,"pretrained_model_name_or_path"),Axt.forEach(t),z9r=r(qL,":"),qL.forEach(t),W9r=i(zl),ce=n(zl,"UL",{});var ge=s(ce);P3=n(ge,"LI",{});var Fqe=s(P3);UEe=n(Fqe,"STRONG",{});var Lxt=s(UEe);Q9r=r(Lxt,"albert"),Lxt.forEach(t),H9r=r(Fqe," \u2014 "),PY=n(Fqe,"A",{href:!0});var yxt=s(PY);U9r=r(yxt,"TFAlbertForQuestionAnswering"),yxt.forEach(t),J9r=r(Fqe," (ALBERT model)"),Fqe.forEach(t),Y9r=i(ge),B3=n(ge,"LI",{});var Tqe=s(B3);JEe=n(Tqe,"STRONG",{});var xxt=s(JEe);K9r=r(xxt,"bert"),xxt.forEach(t),Z9r=r(Tqe," \u2014 "),BY=n(Tqe,"A",{href:!0});var $xt=s(BY);exr=r($xt,"TFBertForQuestionAnswering"),$xt.forEach(t),oxr=r(Tqe," (BERT model)"),Tqe.forEach(t),rxr=i(ge),I3=n(ge,"LI",{});var Mqe=s(I3);YEe=n(Mqe,"STRONG",{});var kxt=s(YEe);txr=r(kxt,"camembert"),kxt.forEach(t),axr=r(Mqe," \u2014 "),IY=n(Mqe,"A",{href:!0});var Sxt=s(IY);nxr=r(Sxt,"TFCamembertForQuestionAnswering"),Sxt.forEach(t),sxr=r(Mqe," (CamemBERT model)"),Mqe.forEach(t),lxr=i(ge),N3=n(ge,"LI",{});var Eqe=s(N3);KEe=n(Eqe,"STRONG",{});var Rxt=s(KEe);ixr=r(Rxt,"convbert"),Rxt.forEach(t),dxr=r(Eqe," \u2014 "),NY=n(Eqe,"A",{href:!0});var Pxt=s(NY);cxr=r(Pxt,"TFConvBertForQuestionAnswering"),Pxt.forEach(t),mxr=r(Eqe," (ConvBERT model)"),Eqe.forEach(t),fxr=i(ge),q3=n(ge,"LI",{});var Cqe=s(q3);ZEe=n(Cqe,"STRONG",{});var Bxt=s(ZEe);gxr=r(Bxt,"deberta"),Bxt.forEach(t),hxr=r(Cqe," \u2014 "),qY=n(Cqe,"A",{href:!0});var Ixt=s(qY);uxr=r(Ixt,"TFDebertaForQuestionAnswering"),Ixt.forEach(t),pxr=r(Cqe," (DeBERTa model)"),Cqe.forEach(t),_xr=i(ge),j3=n(ge,"LI",{});var wqe=s(j3);eCe=n(wqe,"STRONG",{});var Nxt=s(eCe);bxr=r(Nxt,"deberta-v2"),Nxt.forEach(t),vxr=r(wqe," \u2014 "),jY=n(wqe,"A",{href:!0});var qxt=s(jY);Fxr=r(qxt,"TFDebertaV2ForQuestionAnswering"),qxt.forEach(t),Txr=r(wqe," (DeBERTa-v2 model)"),wqe.forEach(t),Mxr=i(ge),D3=n(ge,"LI",{});var Aqe=s(D3);oCe=n(Aqe,"STRONG",{});var jxt=s(oCe);Exr=r(jxt,"distilbert"),jxt.forEach(t),Cxr=r(Aqe," \u2014 "),DY=n(Aqe,"A",{href:!0});var Dxt=s(DY);wxr=r(Dxt,"TFDistilBertForQuestionAnswering"),Dxt.forEach(t),Axr=r(Aqe," (DistilBERT model)"),Aqe.forEach(t),Lxr=i(ge),G3=n(ge,"LI",{});var Lqe=s(G3);rCe=n(Lqe,"STRONG",{});var Gxt=s(rCe);yxr=r(Gxt,"electra"),Gxt.forEach(t),xxr=r(Lqe," \u2014 "),GY=n(Lqe,"A",{href:!0});var Oxt=s(GY);$xr=r(Oxt,"TFElectraForQuestionAnswering"),Oxt.forEach(t),kxr=r(Lqe," (ELECTRA model)"),Lqe.forEach(t),Sxr=i(ge),O3=n(ge,"LI",{});var yqe=s(O3);tCe=n(yqe,"STRONG",{});var Vxt=s(tCe);Rxr=r(Vxt,"flaubert"),Vxt.forEach(t),Pxr=r(yqe," \u2014 "),OY=n(yqe,"A",{href:!0});var Xxt=s(OY);Bxr=r(Xxt,"TFFlaubertForQuestionAnsweringSimple"),Xxt.forEach(t),Ixr=r(yqe," (FlauBERT model)"),yqe.forEach(t),Nxr=i(ge),V3=n(ge,"LI",{});var xqe=s(V3);aCe=n(xqe,"STRONG",{});var zxt=s(aCe);qxr=r(zxt,"funnel"),zxt.forEach(t),jxr=r(xqe," \u2014 "),VY=n(xqe,"A",{href:!0});var Wxt=s(VY);Dxr=r(Wxt,"TFFunnelForQuestionAnswering"),Wxt.forEach(t),Gxr=r(xqe," (Funnel Transformer model)"),xqe.forEach(t),Oxr=i(ge),X3=n(ge,"LI",{});var $qe=s(X3);nCe=n($qe,"STRONG",{});var Qxt=s(nCe);Vxr=r(Qxt,"gptj"),Qxt.forEach(t),Xxr=r($qe," \u2014 "),XY=n($qe,"A",{href:!0});var Hxt=s(XY);zxr=r(Hxt,"TFGPTJForQuestionAnswering"),Hxt.forEach(t),Wxr=r($qe," (GPT-J model)"),$qe.forEach(t),Qxr=i(ge),z3=n(ge,"LI",{});var kqe=s(z3);sCe=n(kqe,"STRONG",{});var Uxt=s(sCe);Hxr=r(Uxt,"longformer"),Uxt.forEach(t),Uxr=r(kqe," \u2014 "),zY=n(kqe,"A",{href:!0});var Jxt=s(zY);Jxr=r(Jxt,"TFLongformerForQuestionAnswering"),Jxt.forEach(t),Yxr=r(kqe," (Longformer model)"),kqe.forEach(t),Kxr=i(ge),W3=n(ge,"LI",{});var Sqe=s(W3);lCe=n(Sqe,"STRONG",{});var Yxt=s(lCe);Zxr=r(Yxt,"mobilebert"),Yxt.forEach(t),e$r=r(Sqe," \u2014 "),WY=n(Sqe,"A",{href:!0});var Kxt=s(WY);o$r=r(Kxt,"TFMobileBertForQuestionAnswering"),Kxt.forEach(t),r$r=r(Sqe," (MobileBERT model)"),Sqe.forEach(t),t$r=i(ge),Q3=n(ge,"LI",{});var Rqe=s(Q3);iCe=n(Rqe,"STRONG",{});var Zxt=s(iCe);a$r=r(Zxt,"mpnet"),Zxt.forEach(t),n$r=r(Rqe," \u2014 "),QY=n(Rqe,"A",{href:!0});var e$t=s(QY);s$r=r(e$t,"TFMPNetForQuestionAnswering"),e$t.forEach(t),l$r=r(Rqe," (MPNet model)"),Rqe.forEach(t),i$r=i(ge),H3=n(ge,"LI",{});var Pqe=s(H3);dCe=n(Pqe,"STRONG",{});var o$t=s(dCe);d$r=r(o$t,"rembert"),o$t.forEach(t),c$r=r(Pqe," \u2014 "),HY=n(Pqe,"A",{href:!0});var r$t=s(HY);m$r=r(r$t,"TFRemBertForQuestionAnswering"),r$t.forEach(t),f$r=r(Pqe," (RemBERT model)"),Pqe.forEach(t),g$r=i(ge),U3=n(ge,"LI",{});var Bqe=s(U3);cCe=n(Bqe,"STRONG",{});var t$t=s(cCe);h$r=r(t$t,"roberta"),t$t.forEach(t),u$r=r(Bqe," \u2014 "),UY=n(Bqe,"A",{href:!0});var a$t=s(UY);p$r=r(a$t,"TFRobertaForQuestionAnswering"),a$t.forEach(t),_$r=r(Bqe," (RoBERTa model)"),Bqe.forEach(t),b$r=i(ge),J3=n(ge,"LI",{});var Iqe=s(J3);mCe=n(Iqe,"STRONG",{});var n$t=s(mCe);v$r=r(n$t,"roformer"),n$t.forEach(t),F$r=r(Iqe," \u2014 "),JY=n(Iqe,"A",{href:!0});var s$t=s(JY);T$r=r(s$t,"TFRoFormerForQuestionAnswering"),s$t.forEach(t),M$r=r(Iqe," (RoFormer model)"),Iqe.forEach(t),E$r=i(ge),Y3=n(ge,"LI",{});var Nqe=s(Y3);fCe=n(Nqe,"STRONG",{});var l$t=s(fCe);C$r=r(l$t,"xlm"),l$t.forEach(t),w$r=r(Nqe," \u2014 "),YY=n(Nqe,"A",{href:!0});var i$t=s(YY);A$r=r(i$t,"TFXLMForQuestionAnsweringSimple"),i$t.forEach(t),L$r=r(Nqe," (XLM model)"),Nqe.forEach(t),y$r=i(ge),K3=n(ge,"LI",{});var qqe=s(K3);gCe=n(qqe,"STRONG",{});var d$t=s(gCe);x$r=r(d$t,"xlm-roberta"),d$t.forEach(t),$$r=r(qqe," \u2014 "),KY=n(qqe,"A",{href:!0});var c$t=s(KY);k$r=r(c$t,"TFXLMRobertaForQuestionAnswering"),c$t.forEach(t),S$r=r(qqe," (XLM-RoBERTa model)"),qqe.forEach(t),R$r=i(ge),Z3=n(ge,"LI",{});var jqe=s(Z3);hCe=n(jqe,"STRONG",{});var m$t=s(hCe);P$r=r(m$t,"xlnet"),m$t.forEach(t),B$r=r(jqe," \u2014 "),ZY=n(jqe,"A",{href:!0});var f$t=s(ZY);I$r=r(f$t,"TFXLNetForQuestionAnsweringSimple"),f$t.forEach(t),N$r=r(jqe," (XLNet model)"),jqe.forEach(t),ge.forEach(t),q$r=i(zl),T(e0.$$.fragment,zl),zl.forEach(t),Xl.forEach(t),TOe=i(m),Bc=n(m,"H2",{class:!0});var $Xe=s(Bc);o0=n($Xe,"A",{id:!0,class:!0,href:!0});var g$t=s(o0);uCe=n(g$t,"SPAN",{});var h$t=s(uCe);T(cx.$$.fragment,h$t),h$t.forEach(t),g$t.forEach(t),j$r=i($Xe),pCe=n($Xe,"SPAN",{});var u$t=s(pCe);D$r=r(u$t,"TFAutoModelForVision2Seq"),u$t.forEach(t),$Xe.forEach(t),MOe=i(m),mr=n(m,"DIV",{class:!0});var Wl=s(mr);T(mx.$$.fragment,Wl),G$r=i(Wl),Ic=n(Wl,"P",{});var fre=s(Ic);O$r=r(fre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),eK=n(fre,"A",{href:!0});var p$t=s(eK);V$r=r(p$t,"from_pretrained()"),p$t.forEach(t),X$r=r(fre," class method or the "),oK=n(fre,"A",{href:!0});var _$t=s(oK);z$r=r(_$t,"from_config()"),_$t.forEach(t),W$r=r(fre,` class
method.`),fre.forEach(t),Q$r=i(Wl),fx=n(Wl,"P",{});var kXe=s(fx);H$r=r(kXe,"This class cannot be instantiated directly using "),_Ce=n(kXe,"CODE",{});var b$t=s(_Ce);U$r=r(b$t,"__init__()"),b$t.forEach(t),J$r=r(kXe," (throws an error)."),kXe.forEach(t),Y$r=i(Wl),Ot=n(Wl,"DIV",{class:!0});var jL=s(Ot);T(gx.$$.fragment,jL),K$r=i(jL),bCe=n(jL,"P",{});var v$t=s(bCe);Z$r=r(v$t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),v$t.forEach(t),ekr=i(jL),Nc=n(jL,"P",{});var gre=s(Nc);okr=r(gre,`Note:
Loading a model from its configuration file does `),vCe=n(gre,"STRONG",{});var F$t=s(vCe);rkr=r(F$t,"not"),F$t.forEach(t),tkr=r(gre,` load the model weights. It only affects the
model\u2019s configuration. Use `),rK=n(gre,"A",{href:!0});var T$t=s(rK);akr=r(T$t,"from_pretrained()"),T$t.forEach(t),nkr=r(gre," to load the model weights."),gre.forEach(t),skr=i(jL),T(r0.$$.fragment,jL),jL.forEach(t),lkr=i(Wl),jr=n(Wl,"DIV",{class:!0});var Ql=s(jr);T(hx.$$.fragment,Ql),ikr=i(Ql),FCe=n(Ql,"P",{});var M$t=s(FCe);dkr=r(M$t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),M$t.forEach(t),ckr=i(Ql),_n=n(Ql,"P",{});var DL=s(_n);mkr=r(DL,"The model class to instantiate is selected based on the "),TCe=n(DL,"CODE",{});var E$t=s(TCe);fkr=r(E$t,"model_type"),E$t.forEach(t),gkr=r(DL,` property of the config object (either
passed as an argument or loaded from `),MCe=n(DL,"CODE",{});var C$t=s(MCe);hkr=r(C$t,"pretrained_model_name_or_path"),C$t.forEach(t),ukr=r(DL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ECe=n(DL,"CODE",{});var w$t=s(ECe);pkr=r(w$t,"pretrained_model_name_or_path"),w$t.forEach(t),_kr=r(DL,":"),DL.forEach(t),bkr=i(Ql),CCe=n(Ql,"UL",{});var A$t=s(CCe);t0=n(A$t,"LI",{});var Dqe=s(t0);wCe=n(Dqe,"STRONG",{});var L$t=s(wCe);vkr=r(L$t,"vision-encoder-decoder"),L$t.forEach(t),Fkr=r(Dqe," \u2014 "),tK=n(Dqe,"A",{href:!0});var y$t=s(tK);Tkr=r(y$t,"TFVisionEncoderDecoderModel"),y$t.forEach(t),Mkr=r(Dqe," (Vision Encoder decoder model)"),Dqe.forEach(t),A$t.forEach(t),Ekr=i(Ql),T(a0.$$.fragment,Ql),Ql.forEach(t),Wl.forEach(t),EOe=i(m),qc=n(m,"H2",{class:!0});var SXe=s(qc);n0=n(SXe,"A",{id:!0,class:!0,href:!0});var x$t=s(n0);ACe=n(x$t,"SPAN",{});var $$t=s(ACe);T(ux.$$.fragment,$$t),$$t.forEach(t),x$t.forEach(t),Ckr=i(SXe),LCe=n(SXe,"SPAN",{});var k$t=s(LCe);wkr=r(k$t,"TFAutoModelForSpeechSeq2Seq"),k$t.forEach(t),SXe.forEach(t),COe=i(m),fr=n(m,"DIV",{class:!0});var Hl=s(fr);T(px.$$.fragment,Hl),Akr=i(Hl),jc=n(Hl,"P",{});var hre=s(jc);Lkr=r(hre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),aK=n(hre,"A",{href:!0});var S$t=s(aK);ykr=r(S$t,"from_pretrained()"),S$t.forEach(t),xkr=r(hre," class method or the "),nK=n(hre,"A",{href:!0});var R$t=s(nK);$kr=r(R$t,"from_config()"),R$t.forEach(t),kkr=r(hre,` class
method.`),hre.forEach(t),Skr=i(Hl),_x=n(Hl,"P",{});var RXe=s(_x);Rkr=r(RXe,"This class cannot be instantiated directly using "),yCe=n(RXe,"CODE",{});var P$t=s(yCe);Pkr=r(P$t,"__init__()"),P$t.forEach(t),Bkr=r(RXe," (throws an error)."),RXe.forEach(t),Ikr=i(Hl),Vt=n(Hl,"DIV",{class:!0});var GL=s(Vt);T(bx.$$.fragment,GL),Nkr=i(GL),xCe=n(GL,"P",{});var B$t=s(xCe);qkr=r(B$t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),B$t.forEach(t),jkr=i(GL),Dc=n(GL,"P",{});var ure=s(Dc);Dkr=r(ure,`Note:
Loading a model from its configuration file does `),$Ce=n(ure,"STRONG",{});var I$t=s($Ce);Gkr=r(I$t,"not"),I$t.forEach(t),Okr=r(ure,` load the model weights. It only affects the
model\u2019s configuration. Use `),sK=n(ure,"A",{href:!0});var N$t=s(sK);Vkr=r(N$t,"from_pretrained()"),N$t.forEach(t),Xkr=r(ure," to load the model weights."),ure.forEach(t),zkr=i(GL),T(s0.$$.fragment,GL),GL.forEach(t),Wkr=i(Hl),Dr=n(Hl,"DIV",{class:!0});var Ul=s(Dr);T(vx.$$.fragment,Ul),Qkr=i(Ul),kCe=n(Ul,"P",{});var q$t=s(kCe);Hkr=r(q$t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),q$t.forEach(t),Ukr=i(Ul),bn=n(Ul,"P",{});var OL=s(bn);Jkr=r(OL,"The model class to instantiate is selected based on the "),SCe=n(OL,"CODE",{});var j$t=s(SCe);Ykr=r(j$t,"model_type"),j$t.forEach(t),Kkr=r(OL,` property of the config object (either
passed as an argument or loaded from `),RCe=n(OL,"CODE",{});var D$t=s(RCe);Zkr=r(D$t,"pretrained_model_name_or_path"),D$t.forEach(t),eSr=r(OL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PCe=n(OL,"CODE",{});var G$t=s(PCe);oSr=r(G$t,"pretrained_model_name_or_path"),G$t.forEach(t),rSr=r(OL,":"),OL.forEach(t),tSr=i(Ul),BCe=n(Ul,"UL",{});var O$t=s(BCe);l0=n(O$t,"LI",{});var Gqe=s(l0);ICe=n(Gqe,"STRONG",{});var V$t=s(ICe);aSr=r(V$t,"speech_to_text"),V$t.forEach(t),nSr=r(Gqe," \u2014 "),lK=n(Gqe,"A",{href:!0});var X$t=s(lK);sSr=r(X$t,"TFSpeech2TextForConditionalGeneration"),X$t.forEach(t),lSr=r(Gqe," (Speech2Text model)"),Gqe.forEach(t),O$t.forEach(t),iSr=i(Ul),T(i0.$$.fragment,Ul),Ul.forEach(t),Hl.forEach(t),wOe=i(m),Gc=n(m,"H2",{class:!0});var PXe=s(Gc);d0=n(PXe,"A",{id:!0,class:!0,href:!0});var z$t=s(d0);NCe=n(z$t,"SPAN",{});var W$t=s(NCe);T(Fx.$$.fragment,W$t),W$t.forEach(t),z$t.forEach(t),dSr=i(PXe),qCe=n(PXe,"SPAN",{});var Q$t=s(qCe);cSr=r(Q$t,"FlaxAutoModel"),Q$t.forEach(t),PXe.forEach(t),AOe=i(m),gr=n(m,"DIV",{class:!0});var Jl=s(gr);T(Tx.$$.fragment,Jl),mSr=i(Jl),Oc=n(Jl,"P",{});var pre=s(Oc);fSr=r(pre,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),iK=n(pre,"A",{href:!0});var H$t=s(iK);gSr=r(H$t,"from_pretrained()"),H$t.forEach(t),hSr=r(pre," class method or the "),dK=n(pre,"A",{href:!0});var U$t=s(dK);uSr=r(U$t,"from_config()"),U$t.forEach(t),pSr=r(pre,` class
method.`),pre.forEach(t),_Sr=i(Jl),Mx=n(Jl,"P",{});var BXe=s(Mx);bSr=r(BXe,"This class cannot be instantiated directly using "),jCe=n(BXe,"CODE",{});var J$t=s(jCe);vSr=r(J$t,"__init__()"),J$t.forEach(t),FSr=r(BXe," (throws an error)."),BXe.forEach(t),TSr=i(Jl),Xt=n(Jl,"DIV",{class:!0});var VL=s(Xt);T(Ex.$$.fragment,VL),MSr=i(VL),DCe=n(VL,"P",{});var Y$t=s(DCe);ESr=r(Y$t,"Instantiates one of the base model classes of the library from a configuration."),Y$t.forEach(t),CSr=i(VL),Vc=n(VL,"P",{});var _re=s(Vc);wSr=r(_re,`Note:
Loading a model from its configuration file does `),GCe=n(_re,"STRONG",{});var K$t=s(GCe);ASr=r(K$t,"not"),K$t.forEach(t),LSr=r(_re,` load the model weights. It only affects the
model\u2019s configuration. Use `),cK=n(_re,"A",{href:!0});var Z$t=s(cK);ySr=r(Z$t,"from_pretrained()"),Z$t.forEach(t),xSr=r(_re," to load the model weights."),_re.forEach(t),$Sr=i(VL),T(c0.$$.fragment,VL),VL.forEach(t),kSr=i(Jl),Gr=n(Jl,"DIV",{class:!0});var Yl=s(Gr);T(Cx.$$.fragment,Yl),SSr=i(Yl),OCe=n(Yl,"P",{});var ekt=s(OCe);RSr=r(ekt,"Instantiate one of the base model classes of the library from a pretrained model."),ekt.forEach(t),PSr=i(Yl),vn=n(Yl,"P",{});var XL=s(vn);BSr=r(XL,"The model class to instantiate is selected based on the "),VCe=n(XL,"CODE",{});var okt=s(VCe);ISr=r(okt,"model_type"),okt.forEach(t),NSr=r(XL,` property of the config object (either
passed as an argument or loaded from `),XCe=n(XL,"CODE",{});var rkt=s(XCe);qSr=r(rkt,"pretrained_model_name_or_path"),rkt.forEach(t),jSr=r(XL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zCe=n(XL,"CODE",{});var tkt=s(zCe);DSr=r(tkt,"pretrained_model_name_or_path"),tkt.forEach(t),GSr=r(XL,":"),XL.forEach(t),OSr=i(Yl),oe=n(Yl,"UL",{});var ae=s(oe);m0=n(ae,"LI",{});var Oqe=s(m0);WCe=n(Oqe,"STRONG",{});var akt=s(WCe);VSr=r(akt,"albert"),akt.forEach(t),XSr=r(Oqe," \u2014 "),mK=n(Oqe,"A",{href:!0});var nkt=s(mK);zSr=r(nkt,"FlaxAlbertModel"),nkt.forEach(t),WSr=r(Oqe," (ALBERT model)"),Oqe.forEach(t),QSr=i(ae),f0=n(ae,"LI",{});var Vqe=s(f0);QCe=n(Vqe,"STRONG",{});var skt=s(QCe);HSr=r(skt,"bart"),skt.forEach(t),USr=r(Vqe," \u2014 "),fK=n(Vqe,"A",{href:!0});var lkt=s(fK);JSr=r(lkt,"FlaxBartModel"),lkt.forEach(t),YSr=r(Vqe," (BART model)"),Vqe.forEach(t),KSr=i(ae),g0=n(ae,"LI",{});var Xqe=s(g0);HCe=n(Xqe,"STRONG",{});var ikt=s(HCe);ZSr=r(ikt,"beit"),ikt.forEach(t),eRr=r(Xqe," \u2014 "),gK=n(Xqe,"A",{href:!0});var dkt=s(gK);oRr=r(dkt,"FlaxBeitModel"),dkt.forEach(t),rRr=r(Xqe," (BEiT model)"),Xqe.forEach(t),tRr=i(ae),h0=n(ae,"LI",{});var zqe=s(h0);UCe=n(zqe,"STRONG",{});var ckt=s(UCe);aRr=r(ckt,"bert"),ckt.forEach(t),nRr=r(zqe," \u2014 "),hK=n(zqe,"A",{href:!0});var mkt=s(hK);sRr=r(mkt,"FlaxBertModel"),mkt.forEach(t),lRr=r(zqe," (BERT model)"),zqe.forEach(t),iRr=i(ae),u0=n(ae,"LI",{});var Wqe=s(u0);JCe=n(Wqe,"STRONG",{});var fkt=s(JCe);dRr=r(fkt,"big_bird"),fkt.forEach(t),cRr=r(Wqe," \u2014 "),uK=n(Wqe,"A",{href:!0});var gkt=s(uK);mRr=r(gkt,"FlaxBigBirdModel"),gkt.forEach(t),fRr=r(Wqe," (BigBird model)"),Wqe.forEach(t),gRr=i(ae),p0=n(ae,"LI",{});var Qqe=s(p0);YCe=n(Qqe,"STRONG",{});var hkt=s(YCe);hRr=r(hkt,"blenderbot"),hkt.forEach(t),uRr=r(Qqe," \u2014 "),pK=n(Qqe,"A",{href:!0});var ukt=s(pK);pRr=r(ukt,"FlaxBlenderbotModel"),ukt.forEach(t),_Rr=r(Qqe," (Blenderbot model)"),Qqe.forEach(t),bRr=i(ae),_0=n(ae,"LI",{});var Hqe=s(_0);KCe=n(Hqe,"STRONG",{});var pkt=s(KCe);vRr=r(pkt,"blenderbot-small"),pkt.forEach(t),FRr=r(Hqe," \u2014 "),_K=n(Hqe,"A",{href:!0});var _kt=s(_K);TRr=r(_kt,"FlaxBlenderbotSmallModel"),_kt.forEach(t),MRr=r(Hqe," (BlenderbotSmall model)"),Hqe.forEach(t),ERr=i(ae),b0=n(ae,"LI",{});var Uqe=s(b0);ZCe=n(Uqe,"STRONG",{});var bkt=s(ZCe);CRr=r(bkt,"clip"),bkt.forEach(t),wRr=r(Uqe," \u2014 "),bK=n(Uqe,"A",{href:!0});var vkt=s(bK);ARr=r(vkt,"FlaxCLIPModel"),vkt.forEach(t),LRr=r(Uqe," (CLIP model)"),Uqe.forEach(t),yRr=i(ae),v0=n(ae,"LI",{});var Jqe=s(v0);e5e=n(Jqe,"STRONG",{});var Fkt=s(e5e);xRr=r(Fkt,"distilbert"),Fkt.forEach(t),$Rr=r(Jqe," \u2014 "),vK=n(Jqe,"A",{href:!0});var Tkt=s(vK);kRr=r(Tkt,"FlaxDistilBertModel"),Tkt.forEach(t),SRr=r(Jqe," (DistilBERT model)"),Jqe.forEach(t),RRr=i(ae),F0=n(ae,"LI",{});var Yqe=s(F0);o5e=n(Yqe,"STRONG",{});var Mkt=s(o5e);PRr=r(Mkt,"electra"),Mkt.forEach(t),BRr=r(Yqe," \u2014 "),FK=n(Yqe,"A",{href:!0});var Ekt=s(FK);IRr=r(Ekt,"FlaxElectraModel"),Ekt.forEach(t),NRr=r(Yqe," (ELECTRA model)"),Yqe.forEach(t),qRr=i(ae),T0=n(ae,"LI",{});var Kqe=s(T0);r5e=n(Kqe,"STRONG",{});var Ckt=s(r5e);jRr=r(Ckt,"gpt2"),Ckt.forEach(t),DRr=r(Kqe," \u2014 "),TK=n(Kqe,"A",{href:!0});var wkt=s(TK);GRr=r(wkt,"FlaxGPT2Model"),wkt.forEach(t),ORr=r(Kqe," (OpenAI GPT-2 model)"),Kqe.forEach(t),VRr=i(ae),M0=n(ae,"LI",{});var Zqe=s(M0);t5e=n(Zqe,"STRONG",{});var Akt=s(t5e);XRr=r(Akt,"gpt_neo"),Akt.forEach(t),zRr=r(Zqe," \u2014 "),MK=n(Zqe,"A",{href:!0});var Lkt=s(MK);WRr=r(Lkt,"FlaxGPTNeoModel"),Lkt.forEach(t),QRr=r(Zqe," (GPT Neo model)"),Zqe.forEach(t),HRr=i(ae),E0=n(ae,"LI",{});var eje=s(E0);a5e=n(eje,"STRONG",{});var ykt=s(a5e);URr=r(ykt,"gptj"),ykt.forEach(t),JRr=r(eje," \u2014 "),EK=n(eje,"A",{href:!0});var xkt=s(EK);YRr=r(xkt,"FlaxGPTJModel"),xkt.forEach(t),KRr=r(eje," (GPT-J model)"),eje.forEach(t),ZRr=i(ae),C0=n(ae,"LI",{});var oje=s(C0);n5e=n(oje,"STRONG",{});var $kt=s(n5e);ePr=r($kt,"longt5"),$kt.forEach(t),oPr=r(oje," \u2014 "),CK=n(oje,"A",{href:!0});var kkt=s(CK);rPr=r(kkt,"FlaxLongT5Model"),kkt.forEach(t),tPr=r(oje," (LongT5 model)"),oje.forEach(t),aPr=i(ae),w0=n(ae,"LI",{});var rje=s(w0);s5e=n(rje,"STRONG",{});var Skt=s(s5e);nPr=r(Skt,"marian"),Skt.forEach(t),sPr=r(rje," \u2014 "),wK=n(rje,"A",{href:!0});var Rkt=s(wK);lPr=r(Rkt,"FlaxMarianModel"),Rkt.forEach(t),iPr=r(rje," (Marian model)"),rje.forEach(t),dPr=i(ae),A0=n(ae,"LI",{});var tje=s(A0);l5e=n(tje,"STRONG",{});var Pkt=s(l5e);cPr=r(Pkt,"mbart"),Pkt.forEach(t),mPr=r(tje," \u2014 "),AK=n(tje,"A",{href:!0});var Bkt=s(AK);fPr=r(Bkt,"FlaxMBartModel"),Bkt.forEach(t),gPr=r(tje," (mBART model)"),tje.forEach(t),hPr=i(ae),L0=n(ae,"LI",{});var aje=s(L0);i5e=n(aje,"STRONG",{});var Ikt=s(i5e);uPr=r(Ikt,"mt5"),Ikt.forEach(t),pPr=r(aje," \u2014 "),LK=n(aje,"A",{href:!0});var Nkt=s(LK);_Pr=r(Nkt,"FlaxMT5Model"),Nkt.forEach(t),bPr=r(aje," (MT5 model)"),aje.forEach(t),vPr=i(ae),y0=n(ae,"LI",{});var nje=s(y0);d5e=n(nje,"STRONG",{});var qkt=s(d5e);FPr=r(qkt,"opt"),qkt.forEach(t),TPr=r(nje," \u2014 "),yK=n(nje,"A",{href:!0});var jkt=s(yK);MPr=r(jkt,"FlaxOPTModel"),jkt.forEach(t),EPr=r(nje," (OPT model)"),nje.forEach(t),CPr=i(ae),x0=n(ae,"LI",{});var sje=s(x0);c5e=n(sje,"STRONG",{});var Dkt=s(c5e);wPr=r(Dkt,"pegasus"),Dkt.forEach(t),APr=r(sje," \u2014 "),xK=n(sje,"A",{href:!0});var Gkt=s(xK);LPr=r(Gkt,"FlaxPegasusModel"),Gkt.forEach(t),yPr=r(sje," (Pegasus model)"),sje.forEach(t),xPr=i(ae),$0=n(ae,"LI",{});var lje=s($0);m5e=n(lje,"STRONG",{});var Okt=s(m5e);$Pr=r(Okt,"roberta"),Okt.forEach(t),kPr=r(lje," \u2014 "),$K=n(lje,"A",{href:!0});var Vkt=s($K);SPr=r(Vkt,"FlaxRobertaModel"),Vkt.forEach(t),RPr=r(lje," (RoBERTa model)"),lje.forEach(t),PPr=i(ae),k0=n(ae,"LI",{});var ije=s(k0);f5e=n(ije,"STRONG",{});var Xkt=s(f5e);BPr=r(Xkt,"roformer"),Xkt.forEach(t),IPr=r(ije," \u2014 "),kK=n(ije,"A",{href:!0});var zkt=s(kK);NPr=r(zkt,"FlaxRoFormerModel"),zkt.forEach(t),qPr=r(ije," (RoFormer model)"),ije.forEach(t),jPr=i(ae),S0=n(ae,"LI",{});var dje=s(S0);g5e=n(dje,"STRONG",{});var Wkt=s(g5e);DPr=r(Wkt,"t5"),Wkt.forEach(t),GPr=r(dje," \u2014 "),SK=n(dje,"A",{href:!0});var Qkt=s(SK);OPr=r(Qkt,"FlaxT5Model"),Qkt.forEach(t),VPr=r(dje," (T5 model)"),dje.forEach(t),XPr=i(ae),R0=n(ae,"LI",{});var cje=s(R0);h5e=n(cje,"STRONG",{});var Hkt=s(h5e);zPr=r(Hkt,"vision-text-dual-encoder"),Hkt.forEach(t),WPr=r(cje," \u2014 "),RK=n(cje,"A",{href:!0});var Ukt=s(RK);QPr=r(Ukt,"FlaxVisionTextDualEncoderModel"),Ukt.forEach(t),HPr=r(cje," (VisionTextDualEncoder model)"),cje.forEach(t),UPr=i(ae),P0=n(ae,"LI",{});var mje=s(P0);u5e=n(mje,"STRONG",{});var Jkt=s(u5e);JPr=r(Jkt,"vit"),Jkt.forEach(t),YPr=r(mje," \u2014 "),PK=n(mje,"A",{href:!0});var Ykt=s(PK);KPr=r(Ykt,"FlaxViTModel"),Ykt.forEach(t),ZPr=r(mje," (ViT model)"),mje.forEach(t),eBr=i(ae),B0=n(ae,"LI",{});var fje=s(B0);p5e=n(fje,"STRONG",{});var Kkt=s(p5e);oBr=r(Kkt,"wav2vec2"),Kkt.forEach(t),rBr=r(fje," \u2014 "),BK=n(fje,"A",{href:!0});var Zkt=s(BK);tBr=r(Zkt,"FlaxWav2Vec2Model"),Zkt.forEach(t),aBr=r(fje," (Wav2Vec2 model)"),fje.forEach(t),nBr=i(ae),I0=n(ae,"LI",{});var gje=s(I0);_5e=n(gje,"STRONG",{});var eSt=s(_5e);sBr=r(eSt,"xglm"),eSt.forEach(t),lBr=r(gje," \u2014 "),IK=n(gje,"A",{href:!0});var oSt=s(IK);iBr=r(oSt,"FlaxXGLMModel"),oSt.forEach(t),dBr=r(gje," (XGLM model)"),gje.forEach(t),cBr=i(ae),N0=n(ae,"LI",{});var hje=s(N0);b5e=n(hje,"STRONG",{});var rSt=s(b5e);mBr=r(rSt,"xlm-roberta"),rSt.forEach(t),fBr=r(hje," \u2014 "),NK=n(hje,"A",{href:!0});var tSt=s(NK);gBr=r(tSt,"FlaxXLMRobertaModel"),tSt.forEach(t),hBr=r(hje," (XLM-RoBERTa model)"),hje.forEach(t),ae.forEach(t),uBr=i(Yl),T(q0.$$.fragment,Yl),Yl.forEach(t),Jl.forEach(t),LOe=i(m),Xc=n(m,"H2",{class:!0});var IXe=s(Xc);j0=n(IXe,"A",{id:!0,class:!0,href:!0});var aSt=s(j0);v5e=n(aSt,"SPAN",{});var nSt=s(v5e);T(wx.$$.fragment,nSt),nSt.forEach(t),aSt.forEach(t),pBr=i(IXe),F5e=n(IXe,"SPAN",{});var sSt=s(F5e);_Br=r(sSt,"FlaxAutoModelForCausalLM"),sSt.forEach(t),IXe.forEach(t),yOe=i(m),hr=n(m,"DIV",{class:!0});var Kl=s(hr);T(Ax.$$.fragment,Kl),bBr=i(Kl),zc=n(Kl,"P",{});var bre=s(zc);vBr=r(bre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),qK=n(bre,"A",{href:!0});var lSt=s(qK);FBr=r(lSt,"from_pretrained()"),lSt.forEach(t),TBr=r(bre," class method or the "),jK=n(bre,"A",{href:!0});var iSt=s(jK);MBr=r(iSt,"from_config()"),iSt.forEach(t),EBr=r(bre,` class
method.`),bre.forEach(t),CBr=i(Kl),Lx=n(Kl,"P",{});var NXe=s(Lx);wBr=r(NXe,"This class cannot be instantiated directly using "),T5e=n(NXe,"CODE",{});var dSt=s(T5e);ABr=r(dSt,"__init__()"),dSt.forEach(t),LBr=r(NXe," (throws an error)."),NXe.forEach(t),yBr=i(Kl),zt=n(Kl,"DIV",{class:!0});var zL=s(zt);T(yx.$$.fragment,zL),xBr=i(zL),M5e=n(zL,"P",{});var cSt=s(M5e);$Br=r(cSt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),cSt.forEach(t),kBr=i(zL),Wc=n(zL,"P",{});var vre=s(Wc);SBr=r(vre,`Note:
Loading a model from its configuration file does `),E5e=n(vre,"STRONG",{});var mSt=s(E5e);RBr=r(mSt,"not"),mSt.forEach(t),PBr=r(vre,` load the model weights. It only affects the
model\u2019s configuration. Use `),DK=n(vre,"A",{href:!0});var fSt=s(DK);BBr=r(fSt,"from_pretrained()"),fSt.forEach(t),IBr=r(vre," to load the model weights."),vre.forEach(t),NBr=i(zL),T(D0.$$.fragment,zL),zL.forEach(t),qBr=i(Kl),Or=n(Kl,"DIV",{class:!0});var Zl=s(Or);T(xx.$$.fragment,Zl),jBr=i(Zl),C5e=n(Zl,"P",{});var gSt=s(C5e);DBr=r(gSt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),gSt.forEach(t),GBr=i(Zl),Fn=n(Zl,"P",{});var WL=s(Fn);OBr=r(WL,"The model class to instantiate is selected based on the "),w5e=n(WL,"CODE",{});var hSt=s(w5e);VBr=r(hSt,"model_type"),hSt.forEach(t),XBr=r(WL,` property of the config object (either
passed as an argument or loaded from `),A5e=n(WL,"CODE",{});var uSt=s(A5e);zBr=r(uSt,"pretrained_model_name_or_path"),uSt.forEach(t),WBr=r(WL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L5e=n(WL,"CODE",{});var pSt=s(L5e);QBr=r(pSt,"pretrained_model_name_or_path"),pSt.forEach(t),HBr=r(WL,":"),WL.forEach(t),UBr=i(Zl),xe=n(Zl,"UL",{});var Ne=s(xe);G0=n(Ne,"LI",{});var uje=s(G0);y5e=n(uje,"STRONG",{});var _St=s(y5e);JBr=r(_St,"bart"),_St.forEach(t),YBr=r(uje," \u2014 "),GK=n(uje,"A",{href:!0});var bSt=s(GK);KBr=r(bSt,"FlaxBartForCausalLM"),bSt.forEach(t),ZBr=r(uje," (BART model)"),uje.forEach(t),eIr=i(Ne),O0=n(Ne,"LI",{});var pje=s(O0);x5e=n(pje,"STRONG",{});var vSt=s(x5e);oIr=r(vSt,"bert"),vSt.forEach(t),rIr=r(pje," \u2014 "),OK=n(pje,"A",{href:!0});var FSt=s(OK);tIr=r(FSt,"FlaxBertForCausalLM"),FSt.forEach(t),aIr=r(pje," (BERT model)"),pje.forEach(t),nIr=i(Ne),V0=n(Ne,"LI",{});var _je=s(V0);$5e=n(_je,"STRONG",{});var TSt=s($5e);sIr=r(TSt,"big_bird"),TSt.forEach(t),lIr=r(_je," \u2014 "),VK=n(_je,"A",{href:!0});var MSt=s(VK);iIr=r(MSt,"FlaxBigBirdForCausalLM"),MSt.forEach(t),dIr=r(_je," (BigBird model)"),_je.forEach(t),cIr=i(Ne),X0=n(Ne,"LI",{});var bje=s(X0);k5e=n(bje,"STRONG",{});var ESt=s(k5e);mIr=r(ESt,"electra"),ESt.forEach(t),fIr=r(bje," \u2014 "),XK=n(bje,"A",{href:!0});var CSt=s(XK);gIr=r(CSt,"FlaxElectraForCausalLM"),CSt.forEach(t),hIr=r(bje," (ELECTRA model)"),bje.forEach(t),uIr=i(Ne),z0=n(Ne,"LI",{});var vje=s(z0);S5e=n(vje,"STRONG",{});var wSt=s(S5e);pIr=r(wSt,"gpt2"),wSt.forEach(t),_Ir=r(vje," \u2014 "),zK=n(vje,"A",{href:!0});var ASt=s(zK);bIr=r(ASt,"FlaxGPT2LMHeadModel"),ASt.forEach(t),vIr=r(vje," (OpenAI GPT-2 model)"),vje.forEach(t),FIr=i(Ne),W0=n(Ne,"LI",{});var Fje=s(W0);R5e=n(Fje,"STRONG",{});var LSt=s(R5e);TIr=r(LSt,"gpt_neo"),LSt.forEach(t),MIr=r(Fje," \u2014 "),WK=n(Fje,"A",{href:!0});var ySt=s(WK);EIr=r(ySt,"FlaxGPTNeoForCausalLM"),ySt.forEach(t),CIr=r(Fje," (GPT Neo model)"),Fje.forEach(t),wIr=i(Ne),Q0=n(Ne,"LI",{});var Tje=s(Q0);P5e=n(Tje,"STRONG",{});var xSt=s(P5e);AIr=r(xSt,"gptj"),xSt.forEach(t),LIr=r(Tje," \u2014 "),QK=n(Tje,"A",{href:!0});var $St=s(QK);yIr=r($St,"FlaxGPTJForCausalLM"),$St.forEach(t),xIr=r(Tje," (GPT-J model)"),Tje.forEach(t),$Ir=i(Ne),H0=n(Ne,"LI",{});var Mje=s(H0);B5e=n(Mje,"STRONG",{});var kSt=s(B5e);kIr=r(kSt,"opt"),kSt.forEach(t),SIr=r(Mje," \u2014 "),HK=n(Mje,"A",{href:!0});var SSt=s(HK);RIr=r(SSt,"FlaxOPTForCausalLM"),SSt.forEach(t),PIr=r(Mje," (OPT model)"),Mje.forEach(t),BIr=i(Ne),U0=n(Ne,"LI",{});var Eje=s(U0);I5e=n(Eje,"STRONG",{});var RSt=s(I5e);IIr=r(RSt,"roberta"),RSt.forEach(t),NIr=r(Eje," \u2014 "),UK=n(Eje,"A",{href:!0});var PSt=s(UK);qIr=r(PSt,"FlaxRobertaForCausalLM"),PSt.forEach(t),jIr=r(Eje," (RoBERTa model)"),Eje.forEach(t),DIr=i(Ne),J0=n(Ne,"LI",{});var Cje=s(J0);N5e=n(Cje,"STRONG",{});var BSt=s(N5e);GIr=r(BSt,"xglm"),BSt.forEach(t),OIr=r(Cje," \u2014 "),JK=n(Cje,"A",{href:!0});var ISt=s(JK);VIr=r(ISt,"FlaxXGLMForCausalLM"),ISt.forEach(t),XIr=r(Cje," (XGLM model)"),Cje.forEach(t),Ne.forEach(t),zIr=i(Zl),T(Y0.$$.fragment,Zl),Zl.forEach(t),Kl.forEach(t),xOe=i(m),Qc=n(m,"H2",{class:!0});var qXe=s(Qc);K0=n(qXe,"A",{id:!0,class:!0,href:!0});var NSt=s(K0);q5e=n(NSt,"SPAN",{});var qSt=s(q5e);T($x.$$.fragment,qSt),qSt.forEach(t),NSt.forEach(t),WIr=i(qXe),j5e=n(qXe,"SPAN",{});var jSt=s(j5e);QIr=r(jSt,"FlaxAutoModelForPreTraining"),jSt.forEach(t),qXe.forEach(t),$Oe=i(m),ur=n(m,"DIV",{class:!0});var ei=s(ur);T(kx.$$.fragment,ei),HIr=i(ei),Hc=n(ei,"P",{});var Fre=s(Hc);UIr=r(Fre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),YK=n(Fre,"A",{href:!0});var DSt=s(YK);JIr=r(DSt,"from_pretrained()"),DSt.forEach(t),YIr=r(Fre," class method or the "),KK=n(Fre,"A",{href:!0});var GSt=s(KK);KIr=r(GSt,"from_config()"),GSt.forEach(t),ZIr=r(Fre,` class
method.`),Fre.forEach(t),eNr=i(ei),Sx=n(ei,"P",{});var jXe=s(Sx);oNr=r(jXe,"This class cannot be instantiated directly using "),D5e=n(jXe,"CODE",{});var OSt=s(D5e);rNr=r(OSt,"__init__()"),OSt.forEach(t),tNr=r(jXe," (throws an error)."),jXe.forEach(t),aNr=i(ei),Wt=n(ei,"DIV",{class:!0});var QL=s(Wt);T(Rx.$$.fragment,QL),nNr=i(QL),G5e=n(QL,"P",{});var VSt=s(G5e);sNr=r(VSt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),VSt.forEach(t),lNr=i(QL),Uc=n(QL,"P",{});var Tre=s(Uc);iNr=r(Tre,`Note:
Loading a model from its configuration file does `),O5e=n(Tre,"STRONG",{});var XSt=s(O5e);dNr=r(XSt,"not"),XSt.forEach(t),cNr=r(Tre,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZK=n(Tre,"A",{href:!0});var zSt=s(ZK);mNr=r(zSt,"from_pretrained()"),zSt.forEach(t),fNr=r(Tre," to load the model weights."),Tre.forEach(t),gNr=i(QL),T(Z0.$$.fragment,QL),QL.forEach(t),hNr=i(ei),Vr=n(ei,"DIV",{class:!0});var oi=s(Vr);T(Px.$$.fragment,oi),uNr=i(oi),V5e=n(oi,"P",{});var WSt=s(V5e);pNr=r(WSt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),WSt.forEach(t),_Nr=i(oi),Tn=n(oi,"P",{});var HL=s(Tn);bNr=r(HL,"The model class to instantiate is selected based on the "),X5e=n(HL,"CODE",{});var QSt=s(X5e);vNr=r(QSt,"model_type"),QSt.forEach(t),FNr=r(HL,` property of the config object (either
passed as an argument or loaded from `),z5e=n(HL,"CODE",{});var HSt=s(z5e);TNr=r(HSt,"pretrained_model_name_or_path"),HSt.forEach(t),MNr=r(HL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W5e=n(HL,"CODE",{});var USt=s(W5e);ENr=r(USt,"pretrained_model_name_or_path"),USt.forEach(t),CNr=r(HL,":"),HL.forEach(t),wNr=i(oi),Ee=n(oi,"UL",{});var we=s(Ee);ew=n(we,"LI",{});var wje=s(ew);Q5e=n(wje,"STRONG",{});var JSt=s(Q5e);ANr=r(JSt,"albert"),JSt.forEach(t),LNr=r(wje," \u2014 "),eZ=n(wje,"A",{href:!0});var YSt=s(eZ);yNr=r(YSt,"FlaxAlbertForPreTraining"),YSt.forEach(t),xNr=r(wje," (ALBERT model)"),wje.forEach(t),$Nr=i(we),ow=n(we,"LI",{});var Aje=s(ow);H5e=n(Aje,"STRONG",{});var KSt=s(H5e);kNr=r(KSt,"bart"),KSt.forEach(t),SNr=r(Aje," \u2014 "),oZ=n(Aje,"A",{href:!0});var ZSt=s(oZ);RNr=r(ZSt,"FlaxBartForConditionalGeneration"),ZSt.forEach(t),PNr=r(Aje," (BART model)"),Aje.forEach(t),BNr=i(we),rw=n(we,"LI",{});var Lje=s(rw);U5e=n(Lje,"STRONG",{});var eRt=s(U5e);INr=r(eRt,"bert"),eRt.forEach(t),NNr=r(Lje," \u2014 "),rZ=n(Lje,"A",{href:!0});var oRt=s(rZ);qNr=r(oRt,"FlaxBertForPreTraining"),oRt.forEach(t),jNr=r(Lje," (BERT model)"),Lje.forEach(t),DNr=i(we),tw=n(we,"LI",{});var yje=s(tw);J5e=n(yje,"STRONG",{});var rRt=s(J5e);GNr=r(rRt,"big_bird"),rRt.forEach(t),ONr=r(yje," \u2014 "),tZ=n(yje,"A",{href:!0});var tRt=s(tZ);VNr=r(tRt,"FlaxBigBirdForPreTraining"),tRt.forEach(t),XNr=r(yje," (BigBird model)"),yje.forEach(t),zNr=i(we),aw=n(we,"LI",{});var xje=s(aw);Y5e=n(xje,"STRONG",{});var aRt=s(Y5e);WNr=r(aRt,"electra"),aRt.forEach(t),QNr=r(xje," \u2014 "),aZ=n(xje,"A",{href:!0});var nRt=s(aZ);HNr=r(nRt,"FlaxElectraForPreTraining"),nRt.forEach(t),UNr=r(xje," (ELECTRA model)"),xje.forEach(t),JNr=i(we),nw=n(we,"LI",{});var $je=s(nw);K5e=n($je,"STRONG",{});var sRt=s(K5e);YNr=r(sRt,"longt5"),sRt.forEach(t),KNr=r($je," \u2014 "),nZ=n($je,"A",{href:!0});var lRt=s(nZ);ZNr=r(lRt,"FlaxLongT5ForConditionalGeneration"),lRt.forEach(t),eqr=r($je," (LongT5 model)"),$je.forEach(t),oqr=i(we),sw=n(we,"LI",{});var kje=s(sw);Z5e=n(kje,"STRONG",{});var iRt=s(Z5e);rqr=r(iRt,"mbart"),iRt.forEach(t),tqr=r(kje," \u2014 "),sZ=n(kje,"A",{href:!0});var dRt=s(sZ);aqr=r(dRt,"FlaxMBartForConditionalGeneration"),dRt.forEach(t),nqr=r(kje," (mBART model)"),kje.forEach(t),sqr=i(we),lw=n(we,"LI",{});var Sje=s(lw);e3e=n(Sje,"STRONG",{});var cRt=s(e3e);lqr=r(cRt,"mt5"),cRt.forEach(t),iqr=r(Sje," \u2014 "),lZ=n(Sje,"A",{href:!0});var mRt=s(lZ);dqr=r(mRt,"FlaxMT5ForConditionalGeneration"),mRt.forEach(t),cqr=r(Sje," (MT5 model)"),Sje.forEach(t),mqr=i(we),iw=n(we,"LI",{});var Rje=s(iw);o3e=n(Rje,"STRONG",{});var fRt=s(o3e);fqr=r(fRt,"roberta"),fRt.forEach(t),gqr=r(Rje," \u2014 "),iZ=n(Rje,"A",{href:!0});var gRt=s(iZ);hqr=r(gRt,"FlaxRobertaForMaskedLM"),gRt.forEach(t),uqr=r(Rje," (RoBERTa model)"),Rje.forEach(t),pqr=i(we),dw=n(we,"LI",{});var Pje=s(dw);r3e=n(Pje,"STRONG",{});var hRt=s(r3e);_qr=r(hRt,"roformer"),hRt.forEach(t),bqr=r(Pje," \u2014 "),dZ=n(Pje,"A",{href:!0});var uRt=s(dZ);vqr=r(uRt,"FlaxRoFormerForMaskedLM"),uRt.forEach(t),Fqr=r(Pje," (RoFormer model)"),Pje.forEach(t),Tqr=i(we),cw=n(we,"LI",{});var Bje=s(cw);t3e=n(Bje,"STRONG",{});var pRt=s(t3e);Mqr=r(pRt,"t5"),pRt.forEach(t),Eqr=r(Bje," \u2014 "),cZ=n(Bje,"A",{href:!0});var _Rt=s(cZ);Cqr=r(_Rt,"FlaxT5ForConditionalGeneration"),_Rt.forEach(t),wqr=r(Bje," (T5 model)"),Bje.forEach(t),Aqr=i(we),mw=n(we,"LI",{});var Ije=s(mw);a3e=n(Ije,"STRONG",{});var bRt=s(a3e);Lqr=r(bRt,"wav2vec2"),bRt.forEach(t),yqr=r(Ije," \u2014 "),mZ=n(Ije,"A",{href:!0});var vRt=s(mZ);xqr=r(vRt,"FlaxWav2Vec2ForPreTraining"),vRt.forEach(t),$qr=r(Ije," (Wav2Vec2 model)"),Ije.forEach(t),kqr=i(we),fw=n(we,"LI",{});var Nje=s(fw);n3e=n(Nje,"STRONG",{});var FRt=s(n3e);Sqr=r(FRt,"xlm-roberta"),FRt.forEach(t),Rqr=r(Nje," \u2014 "),fZ=n(Nje,"A",{href:!0});var TRt=s(fZ);Pqr=r(TRt,"FlaxXLMRobertaForMaskedLM"),TRt.forEach(t),Bqr=r(Nje," (XLM-RoBERTa model)"),Nje.forEach(t),we.forEach(t),Iqr=i(oi),T(gw.$$.fragment,oi),oi.forEach(t),ei.forEach(t),kOe=i(m),Jc=n(m,"H2",{class:!0});var DXe=s(Jc);hw=n(DXe,"A",{id:!0,class:!0,href:!0});var MRt=s(hw);s3e=n(MRt,"SPAN",{});var ERt=s(s3e);T(Bx.$$.fragment,ERt),ERt.forEach(t),MRt.forEach(t),Nqr=i(DXe),l3e=n(DXe,"SPAN",{});var CRt=s(l3e);qqr=r(CRt,"FlaxAutoModelForMaskedLM"),CRt.forEach(t),DXe.forEach(t),SOe=i(m),pr=n(m,"DIV",{class:!0});var ri=s(pr);T(Ix.$$.fragment,ri),jqr=i(ri),Yc=n(ri,"P",{});var Mre=s(Yc);Dqr=r(Mre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),gZ=n(Mre,"A",{href:!0});var wRt=s(gZ);Gqr=r(wRt,"from_pretrained()"),wRt.forEach(t),Oqr=r(Mre," class method or the "),hZ=n(Mre,"A",{href:!0});var ARt=s(hZ);Vqr=r(ARt,"from_config()"),ARt.forEach(t),Xqr=r(Mre,` class
method.`),Mre.forEach(t),zqr=i(ri),Nx=n(ri,"P",{});var GXe=s(Nx);Wqr=r(GXe,"This class cannot be instantiated directly using "),i3e=n(GXe,"CODE",{});var LRt=s(i3e);Qqr=r(LRt,"__init__()"),LRt.forEach(t),Hqr=r(GXe," (throws an error)."),GXe.forEach(t),Uqr=i(ri),Qt=n(ri,"DIV",{class:!0});var UL=s(Qt);T(qx.$$.fragment,UL),Jqr=i(UL),d3e=n(UL,"P",{});var yRt=s(d3e);Yqr=r(yRt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),yRt.forEach(t),Kqr=i(UL),Kc=n(UL,"P",{});var Ere=s(Kc);Zqr=r(Ere,`Note:
Loading a model from its configuration file does `),c3e=n(Ere,"STRONG",{});var xRt=s(c3e);ejr=r(xRt,"not"),xRt.forEach(t),ojr=r(Ere,` load the model weights. It only affects the
model\u2019s configuration. Use `),uZ=n(Ere,"A",{href:!0});var $Rt=s(uZ);rjr=r($Rt,"from_pretrained()"),$Rt.forEach(t),tjr=r(Ere," to load the model weights."),Ere.forEach(t),ajr=i(UL),T(uw.$$.fragment,UL),UL.forEach(t),njr=i(ri),Xr=n(ri,"DIV",{class:!0});var ti=s(Xr);T(jx.$$.fragment,ti),sjr=i(ti),m3e=n(ti,"P",{});var kRt=s(m3e);ljr=r(kRt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),kRt.forEach(t),ijr=i(ti),Mn=n(ti,"P",{});var JL=s(Mn);djr=r(JL,"The model class to instantiate is selected based on the "),f3e=n(JL,"CODE",{});var SRt=s(f3e);cjr=r(SRt,"model_type"),SRt.forEach(t),mjr=r(JL,` property of the config object (either
passed as an argument or loaded from `),g3e=n(JL,"CODE",{});var RRt=s(g3e);fjr=r(RRt,"pretrained_model_name_or_path"),RRt.forEach(t),gjr=r(JL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h3e=n(JL,"CODE",{});var PRt=s(h3e);hjr=r(PRt,"pretrained_model_name_or_path"),PRt.forEach(t),ujr=r(JL,":"),JL.forEach(t),pjr=i(ti),$e=n(ti,"UL",{});var qe=s($e);pw=n(qe,"LI",{});var qje=s(pw);u3e=n(qje,"STRONG",{});var BRt=s(u3e);_jr=r(BRt,"albert"),BRt.forEach(t),bjr=r(qje," \u2014 "),pZ=n(qje,"A",{href:!0});var IRt=s(pZ);vjr=r(IRt,"FlaxAlbertForMaskedLM"),IRt.forEach(t),Fjr=r(qje," (ALBERT model)"),qje.forEach(t),Tjr=i(qe),_w=n(qe,"LI",{});var jje=s(_w);p3e=n(jje,"STRONG",{});var NRt=s(p3e);Mjr=r(NRt,"bart"),NRt.forEach(t),Ejr=r(jje," \u2014 "),_Z=n(jje,"A",{href:!0});var qRt=s(_Z);Cjr=r(qRt,"FlaxBartForConditionalGeneration"),qRt.forEach(t),wjr=r(jje," (BART model)"),jje.forEach(t),Ajr=i(qe),bw=n(qe,"LI",{});var Dje=s(bw);_3e=n(Dje,"STRONG",{});var jRt=s(_3e);Ljr=r(jRt,"bert"),jRt.forEach(t),yjr=r(Dje," \u2014 "),bZ=n(Dje,"A",{href:!0});var DRt=s(bZ);xjr=r(DRt,"FlaxBertForMaskedLM"),DRt.forEach(t),$jr=r(Dje," (BERT model)"),Dje.forEach(t),kjr=i(qe),vw=n(qe,"LI",{});var Gje=s(vw);b3e=n(Gje,"STRONG",{});var GRt=s(b3e);Sjr=r(GRt,"big_bird"),GRt.forEach(t),Rjr=r(Gje," \u2014 "),vZ=n(Gje,"A",{href:!0});var ORt=s(vZ);Pjr=r(ORt,"FlaxBigBirdForMaskedLM"),ORt.forEach(t),Bjr=r(Gje," (BigBird model)"),Gje.forEach(t),Ijr=i(qe),Fw=n(qe,"LI",{});var Oje=s(Fw);v3e=n(Oje,"STRONG",{});var VRt=s(v3e);Njr=r(VRt,"distilbert"),VRt.forEach(t),qjr=r(Oje," \u2014 "),FZ=n(Oje,"A",{href:!0});var XRt=s(FZ);jjr=r(XRt,"FlaxDistilBertForMaskedLM"),XRt.forEach(t),Djr=r(Oje," (DistilBERT model)"),Oje.forEach(t),Gjr=i(qe),Tw=n(qe,"LI",{});var Vje=s(Tw);F3e=n(Vje,"STRONG",{});var zRt=s(F3e);Ojr=r(zRt,"electra"),zRt.forEach(t),Vjr=r(Vje," \u2014 "),TZ=n(Vje,"A",{href:!0});var WRt=s(TZ);Xjr=r(WRt,"FlaxElectraForMaskedLM"),WRt.forEach(t),zjr=r(Vje," (ELECTRA model)"),Vje.forEach(t),Wjr=i(qe),Mw=n(qe,"LI",{});var Xje=s(Mw);T3e=n(Xje,"STRONG",{});var QRt=s(T3e);Qjr=r(QRt,"mbart"),QRt.forEach(t),Hjr=r(Xje," \u2014 "),MZ=n(Xje,"A",{href:!0});var HRt=s(MZ);Ujr=r(HRt,"FlaxMBartForConditionalGeneration"),HRt.forEach(t),Jjr=r(Xje," (mBART model)"),Xje.forEach(t),Yjr=i(qe),Ew=n(qe,"LI",{});var zje=s(Ew);M3e=n(zje,"STRONG",{});var URt=s(M3e);Kjr=r(URt,"roberta"),URt.forEach(t),Zjr=r(zje," \u2014 "),EZ=n(zje,"A",{href:!0});var JRt=s(EZ);eDr=r(JRt,"FlaxRobertaForMaskedLM"),JRt.forEach(t),oDr=r(zje," (RoBERTa model)"),zje.forEach(t),rDr=i(qe),Cw=n(qe,"LI",{});var Wje=s(Cw);E3e=n(Wje,"STRONG",{});var YRt=s(E3e);tDr=r(YRt,"roformer"),YRt.forEach(t),aDr=r(Wje," \u2014 "),CZ=n(Wje,"A",{href:!0});var KRt=s(CZ);nDr=r(KRt,"FlaxRoFormerForMaskedLM"),KRt.forEach(t),sDr=r(Wje," (RoFormer model)"),Wje.forEach(t),lDr=i(qe),ww=n(qe,"LI",{});var Qje=s(ww);C3e=n(Qje,"STRONG",{});var ZRt=s(C3e);iDr=r(ZRt,"xlm-roberta"),ZRt.forEach(t),dDr=r(Qje," \u2014 "),wZ=n(Qje,"A",{href:!0});var ePt=s(wZ);cDr=r(ePt,"FlaxXLMRobertaForMaskedLM"),ePt.forEach(t),mDr=r(Qje," (XLM-RoBERTa model)"),Qje.forEach(t),qe.forEach(t),fDr=i(ti),T(Aw.$$.fragment,ti),ti.forEach(t),ri.forEach(t),ROe=i(m),Zc=n(m,"H2",{class:!0});var OXe=s(Zc);Lw=n(OXe,"A",{id:!0,class:!0,href:!0});var oPt=s(Lw);w3e=n(oPt,"SPAN",{});var rPt=s(w3e);T(Dx.$$.fragment,rPt),rPt.forEach(t),oPt.forEach(t),gDr=i(OXe),A3e=n(OXe,"SPAN",{});var tPt=s(A3e);hDr=r(tPt,"FlaxAutoModelForSeq2SeqLM"),tPt.forEach(t),OXe.forEach(t),POe=i(m),_r=n(m,"DIV",{class:!0});var ai=s(_r);T(Gx.$$.fragment,ai),uDr=i(ai),em=n(ai,"P",{});var Cre=s(em);pDr=r(Cre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),AZ=n(Cre,"A",{href:!0});var aPt=s(AZ);_Dr=r(aPt,"from_pretrained()"),aPt.forEach(t),bDr=r(Cre," class method or the "),LZ=n(Cre,"A",{href:!0});var nPt=s(LZ);vDr=r(nPt,"from_config()"),nPt.forEach(t),FDr=r(Cre,` class
method.`),Cre.forEach(t),TDr=i(ai),Ox=n(ai,"P",{});var VXe=s(Ox);MDr=r(VXe,"This class cannot be instantiated directly using "),L3e=n(VXe,"CODE",{});var sPt=s(L3e);EDr=r(sPt,"__init__()"),sPt.forEach(t),CDr=r(VXe," (throws an error)."),VXe.forEach(t),wDr=i(ai),Ht=n(ai,"DIV",{class:!0});var YL=s(Ht);T(Vx.$$.fragment,YL),ADr=i(YL),y3e=n(YL,"P",{});var lPt=s(y3e);LDr=r(lPt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),lPt.forEach(t),yDr=i(YL),om=n(YL,"P",{});var wre=s(om);xDr=r(wre,`Note:
Loading a model from its configuration file does `),x3e=n(wre,"STRONG",{});var iPt=s(x3e);$Dr=r(iPt,"not"),iPt.forEach(t),kDr=r(wre,` load the model weights. It only affects the
model\u2019s configuration. Use `),yZ=n(wre,"A",{href:!0});var dPt=s(yZ);SDr=r(dPt,"from_pretrained()"),dPt.forEach(t),RDr=r(wre," to load the model weights."),wre.forEach(t),PDr=i(YL),T(yw.$$.fragment,YL),YL.forEach(t),BDr=i(ai),zr=n(ai,"DIV",{class:!0});var ni=s(zr);T(Xx.$$.fragment,ni),IDr=i(ni),$3e=n(ni,"P",{});var cPt=s($3e);NDr=r(cPt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),cPt.forEach(t),qDr=i(ni),En=n(ni,"P",{});var KL=s(En);jDr=r(KL,"The model class to instantiate is selected based on the "),k3e=n(KL,"CODE",{});var mPt=s(k3e);DDr=r(mPt,"model_type"),mPt.forEach(t),GDr=r(KL,` property of the config object (either
passed as an argument or loaded from `),S3e=n(KL,"CODE",{});var fPt=s(S3e);ODr=r(fPt,"pretrained_model_name_or_path"),fPt.forEach(t),VDr=r(KL,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R3e=n(KL,"CODE",{});var gPt=s(R3e);XDr=r(gPt,"pretrained_model_name_or_path"),gPt.forEach(t),zDr=r(KL,":"),KL.forEach(t),WDr=i(ni),ke=n(ni,"UL",{});var je=s(ke);xw=n(je,"LI",{});var Hje=s(xw);P3e=n(Hje,"STRONG",{});var hPt=s(P3e);QDr=r(hPt,"bart"),hPt.forEach(t),HDr=r(Hje," \u2014 "),xZ=n(Hje,"A",{href:!0});var uPt=s(xZ);UDr=r(uPt,"FlaxBartForConditionalGeneration"),uPt.forEach(t),JDr=r(Hje," (BART model)"),Hje.forEach(t),YDr=i(je),$w=n(je,"LI",{});var Uje=s($w);B3e=n(Uje,"STRONG",{});var pPt=s(B3e);KDr=r(pPt,"blenderbot"),pPt.forEach(t),ZDr=r(Uje," \u2014 "),$Z=n(Uje,"A",{href:!0});var _Pt=s($Z);eGr=r(_Pt,"FlaxBlenderbotForConditionalGeneration"),_Pt.forEach(t),oGr=r(Uje," (Blenderbot model)"),Uje.forEach(t),rGr=i(je),kw=n(je,"LI",{});var Jje=s(kw);I3e=n(Jje,"STRONG",{});var bPt=s(I3e);tGr=r(bPt,"blenderbot-small"),bPt.forEach(t),aGr=r(Jje," \u2014 "),kZ=n(Jje,"A",{href:!0});var vPt=s(kZ);nGr=r(vPt,"FlaxBlenderbotSmallForConditionalGeneration"),vPt.forEach(t),sGr=r(Jje," (BlenderbotSmall model)"),Jje.forEach(t),lGr=i(je),Sw=n(je,"LI",{});var Yje=s(Sw);N3e=n(Yje,"STRONG",{});var FPt=s(N3e);iGr=r(FPt,"encoder-decoder"),FPt.forEach(t),dGr=r(Yje," \u2014 "),SZ=n(Yje,"A",{href:!0});var TPt=s(SZ);cGr=r(TPt,"FlaxEncoderDecoderModel"),TPt.forEach(t),mGr=r(Yje," (Encoder decoder model)"),Yje.forEach(t),fGr=i(je),Rw=n(je,"LI",{});var Kje=s(Rw);q3e=n(Kje,"STRONG",{});var MPt=s(q3e);gGr=r(MPt,"longt5"),MPt.forEach(t),hGr=r(Kje," \u2014 "),RZ=n(Kje,"A",{href:!0});var EPt=s(RZ);uGr=r(EPt,"FlaxLongT5ForConditionalGeneration"),EPt.forEach(t),pGr=r(Kje," (LongT5 model)"),Kje.forEach(t),_Gr=i(je),Pw=n(je,"LI",{});var Zje=s(Pw);j3e=n(Zje,"STRONG",{});var CPt=s(j3e);bGr=r(CPt,"marian"),CPt.forEach(t),vGr=r(Zje," \u2014 "),PZ=n(Zje,"A",{href:!0});var wPt=s(PZ);FGr=r(wPt,"FlaxMarianMTModel"),wPt.forEach(t),TGr=r(Zje," (Marian model)"),Zje.forEach(t),MGr=i(je),Bw=n(je,"LI",{});var eDe=s(Bw);D3e=n(eDe,"STRONG",{});var APt=s(D3e);EGr=r(APt,"mbart"),APt.forEach(t),CGr=r(eDe," \u2014 "),BZ=n(eDe,"A",{href:!0});var LPt=s(BZ);wGr=r(LPt,"FlaxMBartForConditionalGeneration"),LPt.forEach(t),AGr=r(eDe," (mBART model)"),eDe.forEach(t),LGr=i(je),Iw=n(je,"LI",{});var oDe=s(Iw);G3e=n(oDe,"STRONG",{});var yPt=s(G3e);yGr=r(yPt,"mt5"),yPt.forEach(t),xGr=r(oDe," \u2014 "),IZ=n(oDe,"A",{href:!0});var xPt=s(IZ);$Gr=r(xPt,"FlaxMT5ForConditionalGeneration"),xPt.forEach(t),kGr=r(oDe," (MT5 model)"),oDe.forEach(t),SGr=i(je),Nw=n(je,"LI",{});var rDe=s(Nw);O3e=n(rDe,"STRONG",{});var $Pt=s(O3e);RGr=r($Pt,"pegasus"),$Pt.forEach(t),PGr=r(rDe," \u2014 "),NZ=n(rDe,"A",{href:!0});var kPt=s(NZ);BGr=r(kPt,"FlaxPegasusForConditionalGeneration"),kPt.forEach(t),IGr=r(rDe," (Pegasus model)"),rDe.forEach(t),NGr=i(je),qw=n(je,"LI",{});var tDe=s(qw);V3e=n(tDe,"STRONG",{});var SPt=s(V3e);qGr=r(SPt,"t5"),SPt.forEach(t),jGr=r(tDe," \u2014 "),qZ=n(tDe,"A",{href:!0});var RPt=s(qZ);DGr=r(RPt,"FlaxT5ForConditionalGeneration"),RPt.forEach(t),GGr=r(tDe," (T5 model)"),tDe.forEach(t),je.forEach(t),OGr=i(ni),T(jw.$$.fragment,ni),ni.forEach(t),ai.forEach(t),BOe=i(m),rm=n(m,"H2",{class:!0});var XXe=s(rm);Dw=n(XXe,"A",{id:!0,class:!0,href:!0});var PPt=s(Dw);X3e=n(PPt,"SPAN",{});var BPt=s(X3e);T(zx.$$.fragment,BPt),BPt.forEach(t),PPt.forEach(t),VGr=i(XXe),z3e=n(XXe,"SPAN",{});var IPt=s(z3e);XGr=r(IPt,"FlaxAutoModelForSequenceClassification"),IPt.forEach(t),XXe.forEach(t),IOe=i(m),br=n(m,"DIV",{class:!0});var si=s(br);T(Wx.$$.fragment,si),zGr=i(si),tm=n(si,"P",{});var Are=s(tm);WGr=r(Are,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),jZ=n(Are,"A",{href:!0});var NPt=s(jZ);QGr=r(NPt,"from_pretrained()"),NPt.forEach(t),HGr=r(Are," class method or the "),DZ=n(Are,"A",{href:!0});var qPt=s(DZ);UGr=r(qPt,"from_config()"),qPt.forEach(t),JGr=r(Are,` class
method.`),Are.forEach(t),YGr=i(si),Qx=n(si,"P",{});var zXe=s(Qx);KGr=r(zXe,"This class cannot be instantiated directly using "),W3e=n(zXe,"CODE",{});var jPt=s(W3e);ZGr=r(jPt,"__init__()"),jPt.forEach(t),eOr=r(zXe," (throws an error)."),zXe.forEach(t),oOr=i(si),Ut=n(si,"DIV",{class:!0});var ZL=s(Ut);T(Hx.$$.fragment,ZL),rOr=i(ZL),Q3e=n(ZL,"P",{});var DPt=s(Q3e);tOr=r(DPt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),DPt.forEach(t),aOr=i(ZL),am=n(ZL,"P",{});var Lre=s(am);nOr=r(Lre,`Note:
Loading a model from its configuration file does `),H3e=n(Lre,"STRONG",{});var GPt=s(H3e);sOr=r(GPt,"not"),GPt.forEach(t),lOr=r(Lre,` load the model weights. It only affects the
model\u2019s configuration. Use `),GZ=n(Lre,"A",{href:!0});var OPt=s(GZ);iOr=r(OPt,"from_pretrained()"),OPt.forEach(t),dOr=r(Lre," to load the model weights."),Lre.forEach(t),cOr=i(ZL),T(Gw.$$.fragment,ZL),ZL.forEach(t),mOr=i(si),Wr=n(si,"DIV",{class:!0});var li=s(Wr);T(Ux.$$.fragment,li),fOr=i(li),U3e=n(li,"P",{});var VPt=s(U3e);gOr=r(VPt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),VPt.forEach(t),hOr=i(li),Cn=n(li,"P",{});var ey=s(Cn);uOr=r(ey,"The model class to instantiate is selected based on the "),J3e=n(ey,"CODE",{});var XPt=s(J3e);pOr=r(XPt,"model_type"),XPt.forEach(t),_Or=r(ey,` property of the config object (either
passed as an argument or loaded from `),Y3e=n(ey,"CODE",{});var zPt=s(Y3e);bOr=r(zPt,"pretrained_model_name_or_path"),zPt.forEach(t),vOr=r(ey,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K3e=n(ey,"CODE",{});var WPt=s(K3e);FOr=r(WPt,"pretrained_model_name_or_path"),WPt.forEach(t),TOr=r(ey,":"),ey.forEach(t),MOr=i(li),Se=n(li,"UL",{});var De=s(Se);Ow=n(De,"LI",{});var aDe=s(Ow);Z3e=n(aDe,"STRONG",{});var QPt=s(Z3e);EOr=r(QPt,"albert"),QPt.forEach(t),COr=r(aDe," \u2014 "),OZ=n(aDe,"A",{href:!0});var HPt=s(OZ);wOr=r(HPt,"FlaxAlbertForSequenceClassification"),HPt.forEach(t),AOr=r(aDe," (ALBERT model)"),aDe.forEach(t),LOr=i(De),Vw=n(De,"LI",{});var nDe=s(Vw);e0e=n(nDe,"STRONG",{});var UPt=s(e0e);yOr=r(UPt,"bart"),UPt.forEach(t),xOr=r(nDe," \u2014 "),VZ=n(nDe,"A",{href:!0});var JPt=s(VZ);$Or=r(JPt,"FlaxBartForSequenceClassification"),JPt.forEach(t),kOr=r(nDe," (BART model)"),nDe.forEach(t),SOr=i(De),Xw=n(De,"LI",{});var sDe=s(Xw);o0e=n(sDe,"STRONG",{});var YPt=s(o0e);ROr=r(YPt,"bert"),YPt.forEach(t),POr=r(sDe," \u2014 "),XZ=n(sDe,"A",{href:!0});var KPt=s(XZ);BOr=r(KPt,"FlaxBertForSequenceClassification"),KPt.forEach(t),IOr=r(sDe," (BERT model)"),sDe.forEach(t),NOr=i(De),zw=n(De,"LI",{});var lDe=s(zw);r0e=n(lDe,"STRONG",{});var ZPt=s(r0e);qOr=r(ZPt,"big_bird"),ZPt.forEach(t),jOr=r(lDe," \u2014 "),zZ=n(lDe,"A",{href:!0});var eBt=s(zZ);DOr=r(eBt,"FlaxBigBirdForSequenceClassification"),eBt.forEach(t),GOr=r(lDe," (BigBird model)"),lDe.forEach(t),OOr=i(De),Ww=n(De,"LI",{});var iDe=s(Ww);t0e=n(iDe,"STRONG",{});var oBt=s(t0e);VOr=r(oBt,"distilbert"),oBt.forEach(t),XOr=r(iDe," \u2014 "),WZ=n(iDe,"A",{href:!0});var rBt=s(WZ);zOr=r(rBt,"FlaxDistilBertForSequenceClassification"),rBt.forEach(t),WOr=r(iDe," (DistilBERT model)"),iDe.forEach(t),QOr=i(De),Qw=n(De,"LI",{});var dDe=s(Qw);a0e=n(dDe,"STRONG",{});var tBt=s(a0e);HOr=r(tBt,"electra"),tBt.forEach(t),UOr=r(dDe," \u2014 "),QZ=n(dDe,"A",{href:!0});var aBt=s(QZ);JOr=r(aBt,"FlaxElectraForSequenceClassification"),aBt.forEach(t),YOr=r(dDe," (ELECTRA model)"),dDe.forEach(t),KOr=i(De),Hw=n(De,"LI",{});var cDe=s(Hw);n0e=n(cDe,"STRONG",{});var nBt=s(n0e);ZOr=r(nBt,"mbart"),nBt.forEach(t),eVr=r(cDe," \u2014 "),HZ=n(cDe,"A",{href:!0});var sBt=s(HZ);oVr=r(sBt,"FlaxMBartForSequenceClassification"),sBt.forEach(t),rVr=r(cDe," (mBART model)"),cDe.forEach(t),tVr=i(De),Uw=n(De,"LI",{});var mDe=s(Uw);s0e=n(mDe,"STRONG",{});var lBt=s(s0e);aVr=r(lBt,"roberta"),lBt.forEach(t),nVr=r(mDe," \u2014 "),UZ=n(mDe,"A",{href:!0});var iBt=s(UZ);sVr=r(iBt,"FlaxRobertaForSequenceClassification"),iBt.forEach(t),lVr=r(mDe," (RoBERTa model)"),mDe.forEach(t),iVr=i(De),Jw=n(De,"LI",{});var fDe=s(Jw);l0e=n(fDe,"STRONG",{});var dBt=s(l0e);dVr=r(dBt,"roformer"),dBt.forEach(t),cVr=r(fDe," \u2014 "),JZ=n(fDe,"A",{href:!0});var cBt=s(JZ);mVr=r(cBt,"FlaxRoFormerForSequenceClassification"),cBt.forEach(t),fVr=r(fDe," (RoFormer model)"),fDe.forEach(t),gVr=i(De),Yw=n(De,"LI",{});var gDe=s(Yw);i0e=n(gDe,"STRONG",{});var mBt=s(i0e);hVr=r(mBt,"xlm-roberta"),mBt.forEach(t),uVr=r(gDe," \u2014 "),YZ=n(gDe,"A",{href:!0});var fBt=s(YZ);pVr=r(fBt,"FlaxXLMRobertaForSequenceClassification"),fBt.forEach(t),_Vr=r(gDe," (XLM-RoBERTa model)"),gDe.forEach(t),De.forEach(t),bVr=i(li),T(Kw.$$.fragment,li),li.forEach(t),si.forEach(t),NOe=i(m),nm=n(m,"H2",{class:!0});var WXe=s(nm);Zw=n(WXe,"A",{id:!0,class:!0,href:!0});var gBt=s(Zw);d0e=n(gBt,"SPAN",{});var hBt=s(d0e);T(Jx.$$.fragment,hBt),hBt.forEach(t),gBt.forEach(t),vVr=i(WXe),c0e=n(WXe,"SPAN",{});var uBt=s(c0e);FVr=r(uBt,"FlaxAutoModelForQuestionAnswering"),uBt.forEach(t),WXe.forEach(t),qOe=i(m),vr=n(m,"DIV",{class:!0});var ii=s(vr);T(Yx.$$.fragment,ii),TVr=i(ii),sm=n(ii,"P",{});var yre=s(sm);MVr=r(yre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),KZ=n(yre,"A",{href:!0});var pBt=s(KZ);EVr=r(pBt,"from_pretrained()"),pBt.forEach(t),CVr=r(yre," class method or the "),ZZ=n(yre,"A",{href:!0});var _Bt=s(ZZ);wVr=r(_Bt,"from_config()"),_Bt.forEach(t),AVr=r(yre,` class
method.`),yre.forEach(t),LVr=i(ii),Kx=n(ii,"P",{});var QXe=s(Kx);yVr=r(QXe,"This class cannot be instantiated directly using "),m0e=n(QXe,"CODE",{});var bBt=s(m0e);xVr=r(bBt,"__init__()"),bBt.forEach(t),$Vr=r(QXe," (throws an error)."),QXe.forEach(t),kVr=i(ii),Jt=n(ii,"DIV",{class:!0});var oy=s(Jt);T(Zx.$$.fragment,oy),SVr=i(oy),f0e=n(oy,"P",{});var vBt=s(f0e);RVr=r(vBt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),vBt.forEach(t),PVr=i(oy),lm=n(oy,"P",{});var xre=s(lm);BVr=r(xre,`Note:
Loading a model from its configuration file does `),g0e=n(xre,"STRONG",{});var FBt=s(g0e);IVr=r(FBt,"not"),FBt.forEach(t),NVr=r(xre,` load the model weights. It only affects the
model\u2019s configuration. Use `),eee=n(xre,"A",{href:!0});var TBt=s(eee);qVr=r(TBt,"from_pretrained()"),TBt.forEach(t),jVr=r(xre," to load the model weights."),xre.forEach(t),DVr=i(oy),T(eA.$$.fragment,oy),oy.forEach(t),GVr=i(ii),Qr=n(ii,"DIV",{class:!0});var di=s(Qr);T(e$.$$.fragment,di),OVr=i(di),h0e=n(di,"P",{});var MBt=s(h0e);VVr=r(MBt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),MBt.forEach(t),XVr=i(di),wn=n(di,"P",{});var ry=s(wn);zVr=r(ry,"The model class to instantiate is selected based on the "),u0e=n(ry,"CODE",{});var EBt=s(u0e);WVr=r(EBt,"model_type"),EBt.forEach(t),QVr=r(ry,` property of the config object (either
passed as an argument or loaded from `),p0e=n(ry,"CODE",{});var CBt=s(p0e);HVr=r(CBt,"pretrained_model_name_or_path"),CBt.forEach(t),UVr=r(ry,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_0e=n(ry,"CODE",{});var wBt=s(_0e);JVr=r(wBt,"pretrained_model_name_or_path"),wBt.forEach(t),YVr=r(ry,":"),ry.forEach(t),KVr=i(di),Re=n(di,"UL",{});var Ge=s(Re);oA=n(Ge,"LI",{});var hDe=s(oA);b0e=n(hDe,"STRONG",{});var ABt=s(b0e);ZVr=r(ABt,"albert"),ABt.forEach(t),eXr=r(hDe," \u2014 "),oee=n(hDe,"A",{href:!0});var LBt=s(oee);oXr=r(LBt,"FlaxAlbertForQuestionAnswering"),LBt.forEach(t),rXr=r(hDe," (ALBERT model)"),hDe.forEach(t),tXr=i(Ge),rA=n(Ge,"LI",{});var uDe=s(rA);v0e=n(uDe,"STRONG",{});var yBt=s(v0e);aXr=r(yBt,"bart"),yBt.forEach(t),nXr=r(uDe," \u2014 "),ree=n(uDe,"A",{href:!0});var xBt=s(ree);sXr=r(xBt,"FlaxBartForQuestionAnswering"),xBt.forEach(t),lXr=r(uDe," (BART model)"),uDe.forEach(t),iXr=i(Ge),tA=n(Ge,"LI",{});var pDe=s(tA);F0e=n(pDe,"STRONG",{});var $Bt=s(F0e);dXr=r($Bt,"bert"),$Bt.forEach(t),cXr=r(pDe," \u2014 "),tee=n(pDe,"A",{href:!0});var kBt=s(tee);mXr=r(kBt,"FlaxBertForQuestionAnswering"),kBt.forEach(t),fXr=r(pDe," (BERT model)"),pDe.forEach(t),gXr=i(Ge),aA=n(Ge,"LI",{});var _De=s(aA);T0e=n(_De,"STRONG",{});var SBt=s(T0e);hXr=r(SBt,"big_bird"),SBt.forEach(t),uXr=r(_De," \u2014 "),aee=n(_De,"A",{href:!0});var RBt=s(aee);pXr=r(RBt,"FlaxBigBirdForQuestionAnswering"),RBt.forEach(t),_Xr=r(_De," (BigBird model)"),_De.forEach(t),bXr=i(Ge),nA=n(Ge,"LI",{});var bDe=s(nA);M0e=n(bDe,"STRONG",{});var PBt=s(M0e);vXr=r(PBt,"distilbert"),PBt.forEach(t),FXr=r(bDe," \u2014 "),nee=n(bDe,"A",{href:!0});var BBt=s(nee);TXr=r(BBt,"FlaxDistilBertForQuestionAnswering"),BBt.forEach(t),MXr=r(bDe," (DistilBERT model)"),bDe.forEach(t),EXr=i(Ge),sA=n(Ge,"LI",{});var vDe=s(sA);E0e=n(vDe,"STRONG",{});var IBt=s(E0e);CXr=r(IBt,"electra"),IBt.forEach(t),wXr=r(vDe," \u2014 "),see=n(vDe,"A",{href:!0});var NBt=s(see);AXr=r(NBt,"FlaxElectraForQuestionAnswering"),NBt.forEach(t),LXr=r(vDe," (ELECTRA model)"),vDe.forEach(t),yXr=i(Ge),lA=n(Ge,"LI",{});var FDe=s(lA);C0e=n(FDe,"STRONG",{});var qBt=s(C0e);xXr=r(qBt,"mbart"),qBt.forEach(t),$Xr=r(FDe," \u2014 "),lee=n(FDe,"A",{href:!0});var jBt=s(lee);kXr=r(jBt,"FlaxMBartForQuestionAnswering"),jBt.forEach(t),SXr=r(FDe," (mBART model)"),FDe.forEach(t),RXr=i(Ge),iA=n(Ge,"LI",{});var TDe=s(iA);w0e=n(TDe,"STRONG",{});var DBt=s(w0e);PXr=r(DBt,"roberta"),DBt.forEach(t),BXr=r(TDe," \u2014 "),iee=n(TDe,"A",{href:!0});var GBt=s(iee);IXr=r(GBt,"FlaxRobertaForQuestionAnswering"),GBt.forEach(t),NXr=r(TDe," (RoBERTa model)"),TDe.forEach(t),qXr=i(Ge),dA=n(Ge,"LI",{});var MDe=s(dA);A0e=n(MDe,"STRONG",{});var OBt=s(A0e);jXr=r(OBt,"roformer"),OBt.forEach(t),DXr=r(MDe," \u2014 "),dee=n(MDe,"A",{href:!0});var VBt=s(dee);GXr=r(VBt,"FlaxRoFormerForQuestionAnswering"),VBt.forEach(t),OXr=r(MDe," (RoFormer model)"),MDe.forEach(t),VXr=i(Ge),cA=n(Ge,"LI",{});var EDe=s(cA);L0e=n(EDe,"STRONG",{});var XBt=s(L0e);XXr=r(XBt,"xlm-roberta"),XBt.forEach(t),zXr=r(EDe," \u2014 "),cee=n(EDe,"A",{href:!0});var zBt=s(cee);WXr=r(zBt,"FlaxXLMRobertaForQuestionAnswering"),zBt.forEach(t),QXr=r(EDe," (XLM-RoBERTa model)"),EDe.forEach(t),Ge.forEach(t),HXr=i(di),T(mA.$$.fragment,di),di.forEach(t),ii.forEach(t),jOe=i(m),im=n(m,"H2",{class:!0});var HXe=s(im);fA=n(HXe,"A",{id:!0,class:!0,href:!0});var WBt=s(fA);y0e=n(WBt,"SPAN",{});var QBt=s(y0e);T(o$.$$.fragment,QBt),QBt.forEach(t),WBt.forEach(t),UXr=i(HXe),x0e=n(HXe,"SPAN",{});var HBt=s(x0e);JXr=r(HBt,"FlaxAutoModelForTokenClassification"),HBt.forEach(t),HXe.forEach(t),DOe=i(m),Fr=n(m,"DIV",{class:!0});var ci=s(Fr);T(r$.$$.fragment,ci),YXr=i(ci),dm=n(ci,"P",{});var $re=s(dm);KXr=r($re,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),mee=n($re,"A",{href:!0});var UBt=s(mee);ZXr=r(UBt,"from_pretrained()"),UBt.forEach(t),ezr=r($re," class method or the "),fee=n($re,"A",{href:!0});var JBt=s(fee);ozr=r(JBt,"from_config()"),JBt.forEach(t),rzr=r($re,` class
method.`),$re.forEach(t),tzr=i(ci),t$=n(ci,"P",{});var UXe=s(t$);azr=r(UXe,"This class cannot be instantiated directly using "),$0e=n(UXe,"CODE",{});var YBt=s($0e);nzr=r(YBt,"__init__()"),YBt.forEach(t),szr=r(UXe," (throws an error)."),UXe.forEach(t),lzr=i(ci),Yt=n(ci,"DIV",{class:!0});var ty=s(Yt);T(a$.$$.fragment,ty),izr=i(ty),k0e=n(ty,"P",{});var KBt=s(k0e);dzr=r(KBt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),KBt.forEach(t),czr=i(ty),cm=n(ty,"P",{});var kre=s(cm);mzr=r(kre,`Note:
Loading a model from its configuration file does `),S0e=n(kre,"STRONG",{});var ZBt=s(S0e);fzr=r(ZBt,"not"),ZBt.forEach(t),gzr=r(kre,` load the model weights. It only affects the
model\u2019s configuration. Use `),gee=n(kre,"A",{href:!0});var eIt=s(gee);hzr=r(eIt,"from_pretrained()"),eIt.forEach(t),uzr=r(kre," to load the model weights."),kre.forEach(t),pzr=i(ty),T(gA.$$.fragment,ty),ty.forEach(t),_zr=i(ci),Hr=n(ci,"DIV",{class:!0});var mi=s(Hr);T(n$.$$.fragment,mi),bzr=i(mi),R0e=n(mi,"P",{});var oIt=s(R0e);vzr=r(oIt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),oIt.forEach(t),Fzr=i(mi),An=n(mi,"P",{});var ay=s(An);Tzr=r(ay,"The model class to instantiate is selected based on the "),P0e=n(ay,"CODE",{});var rIt=s(P0e);Mzr=r(rIt,"model_type"),rIt.forEach(t),Ezr=r(ay,` property of the config object (either
passed as an argument or loaded from `),B0e=n(ay,"CODE",{});var tIt=s(B0e);Czr=r(tIt,"pretrained_model_name_or_path"),tIt.forEach(t),wzr=r(ay,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I0e=n(ay,"CODE",{});var aIt=s(I0e);Azr=r(aIt,"pretrained_model_name_or_path"),aIt.forEach(t),Lzr=r(ay,":"),ay.forEach(t),yzr=i(mi),Ve=n(mi,"UL",{});var To=s(Ve);hA=n(To,"LI",{});var CDe=s(hA);N0e=n(CDe,"STRONG",{});var nIt=s(N0e);xzr=r(nIt,"albert"),nIt.forEach(t),$zr=r(CDe," \u2014 "),hee=n(CDe,"A",{href:!0});var sIt=s(hee);kzr=r(sIt,"FlaxAlbertForTokenClassification"),sIt.forEach(t),Szr=r(CDe," (ALBERT model)"),CDe.forEach(t),Rzr=i(To),uA=n(To,"LI",{});var wDe=s(uA);q0e=n(wDe,"STRONG",{});var lIt=s(q0e);Pzr=r(lIt,"bert"),lIt.forEach(t),Bzr=r(wDe," \u2014 "),uee=n(wDe,"A",{href:!0});var iIt=s(uee);Izr=r(iIt,"FlaxBertForTokenClassification"),iIt.forEach(t),Nzr=r(wDe," (BERT model)"),wDe.forEach(t),qzr=i(To),pA=n(To,"LI",{});var ADe=s(pA);j0e=n(ADe,"STRONG",{});var dIt=s(j0e);jzr=r(dIt,"big_bird"),dIt.forEach(t),Dzr=r(ADe," \u2014 "),pee=n(ADe,"A",{href:!0});var cIt=s(pee);Gzr=r(cIt,"FlaxBigBirdForTokenClassification"),cIt.forEach(t),Ozr=r(ADe," (BigBird model)"),ADe.forEach(t),Vzr=i(To),_A=n(To,"LI",{});var LDe=s(_A);D0e=n(LDe,"STRONG",{});var mIt=s(D0e);Xzr=r(mIt,"distilbert"),mIt.forEach(t),zzr=r(LDe," \u2014 "),_ee=n(LDe,"A",{href:!0});var fIt=s(_ee);Wzr=r(fIt,"FlaxDistilBertForTokenClassification"),fIt.forEach(t),Qzr=r(LDe," (DistilBERT model)"),LDe.forEach(t),Hzr=i(To),bA=n(To,"LI",{});var yDe=s(bA);G0e=n(yDe,"STRONG",{});var gIt=s(G0e);Uzr=r(gIt,"electra"),gIt.forEach(t),Jzr=r(yDe," \u2014 "),bee=n(yDe,"A",{href:!0});var hIt=s(bee);Yzr=r(hIt,"FlaxElectraForTokenClassification"),hIt.forEach(t),Kzr=r(yDe," (ELECTRA model)"),yDe.forEach(t),Zzr=i(To),vA=n(To,"LI",{});var xDe=s(vA);O0e=n(xDe,"STRONG",{});var uIt=s(O0e);eWr=r(uIt,"roberta"),uIt.forEach(t),oWr=r(xDe," \u2014 "),vee=n(xDe,"A",{href:!0});var pIt=s(vee);rWr=r(pIt,"FlaxRobertaForTokenClassification"),pIt.forEach(t),tWr=r(xDe," (RoBERTa model)"),xDe.forEach(t),aWr=i(To),FA=n(To,"LI",{});var $De=s(FA);V0e=n($De,"STRONG",{});var _It=s(V0e);nWr=r(_It,"roformer"),_It.forEach(t),sWr=r($De," \u2014 "),Fee=n($De,"A",{href:!0});var bIt=s(Fee);lWr=r(bIt,"FlaxRoFormerForTokenClassification"),bIt.forEach(t),iWr=r($De," (RoFormer model)"),$De.forEach(t),dWr=i(To),TA=n(To,"LI",{});var kDe=s(TA);X0e=n(kDe,"STRONG",{});var vIt=s(X0e);cWr=r(vIt,"xlm-roberta"),vIt.forEach(t),mWr=r(kDe," \u2014 "),Tee=n(kDe,"A",{href:!0});var FIt=s(Tee);fWr=r(FIt,"FlaxXLMRobertaForTokenClassification"),FIt.forEach(t),gWr=r(kDe," (XLM-RoBERTa model)"),kDe.forEach(t),To.forEach(t),hWr=i(mi),T(MA.$$.fragment,mi),mi.forEach(t),ci.forEach(t),GOe=i(m),mm=n(m,"H2",{class:!0});var JXe=s(mm);EA=n(JXe,"A",{id:!0,class:!0,href:!0});var TIt=s(EA);z0e=n(TIt,"SPAN",{});var MIt=s(z0e);T(s$.$$.fragment,MIt),MIt.forEach(t),TIt.forEach(t),uWr=i(JXe),W0e=n(JXe,"SPAN",{});var EIt=s(W0e);pWr=r(EIt,"FlaxAutoModelForMultipleChoice"),EIt.forEach(t),JXe.forEach(t),OOe=i(m),Tr=n(m,"DIV",{class:!0});var fi=s(Tr);T(l$.$$.fragment,fi),_Wr=i(fi),fm=n(fi,"P",{});var Sre=s(fm);bWr=r(Sre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Mee=n(Sre,"A",{href:!0});var CIt=s(Mee);vWr=r(CIt,"from_pretrained()"),CIt.forEach(t),FWr=r(Sre," class method or the "),Eee=n(Sre,"A",{href:!0});var wIt=s(Eee);TWr=r(wIt,"from_config()"),wIt.forEach(t),MWr=r(Sre,` class
method.`),Sre.forEach(t),EWr=i(fi),i$=n(fi,"P",{});var YXe=s(i$);CWr=r(YXe,"This class cannot be instantiated directly using "),Q0e=n(YXe,"CODE",{});var AIt=s(Q0e);wWr=r(AIt,"__init__()"),AIt.forEach(t),AWr=r(YXe," (throws an error)."),YXe.forEach(t),LWr=i(fi),Kt=n(fi,"DIV",{class:!0});var ny=s(Kt);T(d$.$$.fragment,ny),yWr=i(ny),H0e=n(ny,"P",{});var LIt=s(H0e);xWr=r(LIt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),LIt.forEach(t),$Wr=i(ny),gm=n(ny,"P",{});var Rre=s(gm);kWr=r(Rre,`Note:
Loading a model from its configuration file does `),U0e=n(Rre,"STRONG",{});var yIt=s(U0e);SWr=r(yIt,"not"),yIt.forEach(t),RWr=r(Rre,` load the model weights. It only affects the
model\u2019s configuration. Use `),Cee=n(Rre,"A",{href:!0});var xIt=s(Cee);PWr=r(xIt,"from_pretrained()"),xIt.forEach(t),BWr=r(Rre," to load the model weights."),Rre.forEach(t),IWr=i(ny),T(CA.$$.fragment,ny),ny.forEach(t),NWr=i(fi),Ur=n(fi,"DIV",{class:!0});var gi=s(Ur);T(c$.$$.fragment,gi),qWr=i(gi),J0e=n(gi,"P",{});var $It=s(J0e);jWr=r($It,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),$It.forEach(t),DWr=i(gi),Ln=n(gi,"P",{});var sy=s(Ln);GWr=r(sy,"The model class to instantiate is selected based on the "),Y0e=n(sy,"CODE",{});var kIt=s(Y0e);OWr=r(kIt,"model_type"),kIt.forEach(t),VWr=r(sy,` property of the config object (either
passed as an argument or loaded from `),K0e=n(sy,"CODE",{});var SIt=s(K0e);XWr=r(SIt,"pretrained_model_name_or_path"),SIt.forEach(t),zWr=r(sy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z0e=n(sy,"CODE",{});var RIt=s(Z0e);WWr=r(RIt,"pretrained_model_name_or_path"),RIt.forEach(t),QWr=r(sy,":"),sy.forEach(t),HWr=i(gi),Xe=n(gi,"UL",{});var Mo=s(Xe);wA=n(Mo,"LI",{});var SDe=s(wA);ewe=n(SDe,"STRONG",{});var PIt=s(ewe);UWr=r(PIt,"albert"),PIt.forEach(t),JWr=r(SDe," \u2014 "),wee=n(SDe,"A",{href:!0});var BIt=s(wee);YWr=r(BIt,"FlaxAlbertForMultipleChoice"),BIt.forEach(t),KWr=r(SDe," (ALBERT model)"),SDe.forEach(t),ZWr=i(Mo),AA=n(Mo,"LI",{});var RDe=s(AA);owe=n(RDe,"STRONG",{});var IIt=s(owe);eQr=r(IIt,"bert"),IIt.forEach(t),oQr=r(RDe," \u2014 "),Aee=n(RDe,"A",{href:!0});var NIt=s(Aee);rQr=r(NIt,"FlaxBertForMultipleChoice"),NIt.forEach(t),tQr=r(RDe," (BERT model)"),RDe.forEach(t),aQr=i(Mo),LA=n(Mo,"LI",{});var PDe=s(LA);rwe=n(PDe,"STRONG",{});var qIt=s(rwe);nQr=r(qIt,"big_bird"),qIt.forEach(t),sQr=r(PDe," \u2014 "),Lee=n(PDe,"A",{href:!0});var jIt=s(Lee);lQr=r(jIt,"FlaxBigBirdForMultipleChoice"),jIt.forEach(t),iQr=r(PDe," (BigBird model)"),PDe.forEach(t),dQr=i(Mo),yA=n(Mo,"LI",{});var BDe=s(yA);twe=n(BDe,"STRONG",{});var DIt=s(twe);cQr=r(DIt,"distilbert"),DIt.forEach(t),mQr=r(BDe," \u2014 "),yee=n(BDe,"A",{href:!0});var GIt=s(yee);fQr=r(GIt,"FlaxDistilBertForMultipleChoice"),GIt.forEach(t),gQr=r(BDe," (DistilBERT model)"),BDe.forEach(t),hQr=i(Mo),xA=n(Mo,"LI",{});var IDe=s(xA);awe=n(IDe,"STRONG",{});var OIt=s(awe);uQr=r(OIt,"electra"),OIt.forEach(t),pQr=r(IDe," \u2014 "),xee=n(IDe,"A",{href:!0});var VIt=s(xee);_Qr=r(VIt,"FlaxElectraForMultipleChoice"),VIt.forEach(t),bQr=r(IDe," (ELECTRA model)"),IDe.forEach(t),vQr=i(Mo),$A=n(Mo,"LI",{});var NDe=s($A);nwe=n(NDe,"STRONG",{});var XIt=s(nwe);FQr=r(XIt,"roberta"),XIt.forEach(t),TQr=r(NDe," \u2014 "),$ee=n(NDe,"A",{href:!0});var zIt=s($ee);MQr=r(zIt,"FlaxRobertaForMultipleChoice"),zIt.forEach(t),EQr=r(NDe," (RoBERTa model)"),NDe.forEach(t),CQr=i(Mo),kA=n(Mo,"LI",{});var qDe=s(kA);swe=n(qDe,"STRONG",{});var WIt=s(swe);wQr=r(WIt,"roformer"),WIt.forEach(t),AQr=r(qDe," \u2014 "),kee=n(qDe,"A",{href:!0});var QIt=s(kee);LQr=r(QIt,"FlaxRoFormerForMultipleChoice"),QIt.forEach(t),yQr=r(qDe," (RoFormer model)"),qDe.forEach(t),xQr=i(Mo),SA=n(Mo,"LI",{});var jDe=s(SA);lwe=n(jDe,"STRONG",{});var HIt=s(lwe);$Qr=r(HIt,"xlm-roberta"),HIt.forEach(t),kQr=r(jDe," \u2014 "),See=n(jDe,"A",{href:!0});var UIt=s(See);SQr=r(UIt,"FlaxXLMRobertaForMultipleChoice"),UIt.forEach(t),RQr=r(jDe," (XLM-RoBERTa model)"),jDe.forEach(t),Mo.forEach(t),PQr=i(gi),T(RA.$$.fragment,gi),gi.forEach(t),fi.forEach(t),VOe=i(m),hm=n(m,"H2",{class:!0});var KXe=s(hm);PA=n(KXe,"A",{id:!0,class:!0,href:!0});var JIt=s(PA);iwe=n(JIt,"SPAN",{});var YIt=s(iwe);T(m$.$$.fragment,YIt),YIt.forEach(t),JIt.forEach(t),BQr=i(KXe),dwe=n(KXe,"SPAN",{});var KIt=s(dwe);IQr=r(KIt,"FlaxAutoModelForNextSentencePrediction"),KIt.forEach(t),KXe.forEach(t),XOe=i(m),Mr=n(m,"DIV",{class:!0});var hi=s(Mr);T(f$.$$.fragment,hi),NQr=i(hi),um=n(hi,"P",{});var Pre=s(um);qQr=r(Pre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Ree=n(Pre,"A",{href:!0});var ZIt=s(Ree);jQr=r(ZIt,"from_pretrained()"),ZIt.forEach(t),DQr=r(Pre," class method or the "),Pee=n(Pre,"A",{href:!0});var eNt=s(Pee);GQr=r(eNt,"from_config()"),eNt.forEach(t),OQr=r(Pre,` class
method.`),Pre.forEach(t),VQr=i(hi),g$=n(hi,"P",{});var ZXe=s(g$);XQr=r(ZXe,"This class cannot be instantiated directly using "),cwe=n(ZXe,"CODE",{});var oNt=s(cwe);zQr=r(oNt,"__init__()"),oNt.forEach(t),WQr=r(ZXe," (throws an error)."),ZXe.forEach(t),QQr=i(hi),Zt=n(hi,"DIV",{class:!0});var ly=s(Zt);T(h$.$$.fragment,ly),HQr=i(ly),mwe=n(ly,"P",{});var rNt=s(mwe);UQr=r(rNt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),rNt.forEach(t),JQr=i(ly),pm=n(ly,"P",{});var Bre=s(pm);YQr=r(Bre,`Note:
Loading a model from its configuration file does `),fwe=n(Bre,"STRONG",{});var tNt=s(fwe);KQr=r(tNt,"not"),tNt.forEach(t),ZQr=r(Bre,` load the model weights. It only affects the
model\u2019s configuration. Use `),Bee=n(Bre,"A",{href:!0});var aNt=s(Bee);eHr=r(aNt,"from_pretrained()"),aNt.forEach(t),oHr=r(Bre," to load the model weights."),Bre.forEach(t),rHr=i(ly),T(BA.$$.fragment,ly),ly.forEach(t),tHr=i(hi),Jr=n(hi,"DIV",{class:!0});var ui=s(Jr);T(u$.$$.fragment,ui),aHr=i(ui),gwe=n(ui,"P",{});var nNt=s(gwe);nHr=r(nNt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),nNt.forEach(t),sHr=i(ui),yn=n(ui,"P",{});var iy=s(yn);lHr=r(iy,"The model class to instantiate is selected based on the "),hwe=n(iy,"CODE",{});var sNt=s(hwe);iHr=r(sNt,"model_type"),sNt.forEach(t),dHr=r(iy,` property of the config object (either
passed as an argument or loaded from `),uwe=n(iy,"CODE",{});var lNt=s(uwe);cHr=r(lNt,"pretrained_model_name_or_path"),lNt.forEach(t),mHr=r(iy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pwe=n(iy,"CODE",{});var iNt=s(pwe);fHr=r(iNt,"pretrained_model_name_or_path"),iNt.forEach(t),gHr=r(iy,":"),iy.forEach(t),hHr=i(ui),_we=n(ui,"UL",{});var dNt=s(_we);IA=n(dNt,"LI",{});var DDe=s(IA);bwe=n(DDe,"STRONG",{});var cNt=s(bwe);uHr=r(cNt,"bert"),cNt.forEach(t),pHr=r(DDe," \u2014 "),Iee=n(DDe,"A",{href:!0});var mNt=s(Iee);_Hr=r(mNt,"FlaxBertForNextSentencePrediction"),mNt.forEach(t),bHr=r(DDe," (BERT model)"),DDe.forEach(t),dNt.forEach(t),vHr=i(ui),T(NA.$$.fragment,ui),ui.forEach(t),hi.forEach(t),zOe=i(m),_m=n(m,"H2",{class:!0});var eze=s(_m);qA=n(eze,"A",{id:!0,class:!0,href:!0});var fNt=s(qA);vwe=n(fNt,"SPAN",{});var gNt=s(vwe);T(p$.$$.fragment,gNt),gNt.forEach(t),fNt.forEach(t),FHr=i(eze),Fwe=n(eze,"SPAN",{});var hNt=s(Fwe);THr=r(hNt,"FlaxAutoModelForImageClassification"),hNt.forEach(t),eze.forEach(t),WOe=i(m),Er=n(m,"DIV",{class:!0});var pi=s(Er);T(_$.$$.fragment,pi),MHr=i(pi),bm=n(pi,"P",{});var Ire=s(bm);EHr=r(Ire,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Nee=n(Ire,"A",{href:!0});var uNt=s(Nee);CHr=r(uNt,"from_pretrained()"),uNt.forEach(t),wHr=r(Ire," class method or the "),qee=n(Ire,"A",{href:!0});var pNt=s(qee);AHr=r(pNt,"from_config()"),pNt.forEach(t),LHr=r(Ire,` class
method.`),Ire.forEach(t),yHr=i(pi),b$=n(pi,"P",{});var oze=s(b$);xHr=r(oze,"This class cannot be instantiated directly using "),Twe=n(oze,"CODE",{});var _Nt=s(Twe);$Hr=r(_Nt,"__init__()"),_Nt.forEach(t),kHr=r(oze," (throws an error)."),oze.forEach(t),SHr=i(pi),ea=n(pi,"DIV",{class:!0});var dy=s(ea);T(v$.$$.fragment,dy),RHr=i(dy),Mwe=n(dy,"P",{});var bNt=s(Mwe);PHr=r(bNt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),bNt.forEach(t),BHr=i(dy),vm=n(dy,"P",{});var Nre=s(vm);IHr=r(Nre,`Note:
Loading a model from its configuration file does `),Ewe=n(Nre,"STRONG",{});var vNt=s(Ewe);NHr=r(vNt,"not"),vNt.forEach(t),qHr=r(Nre,` load the model weights. It only affects the
model\u2019s configuration. Use `),jee=n(Nre,"A",{href:!0});var FNt=s(jee);jHr=r(FNt,"from_pretrained()"),FNt.forEach(t),DHr=r(Nre," to load the model weights."),Nre.forEach(t),GHr=i(dy),T(jA.$$.fragment,dy),dy.forEach(t),OHr=i(pi),Yr=n(pi,"DIV",{class:!0});var _i=s(Yr);T(F$.$$.fragment,_i),VHr=i(_i),Cwe=n(_i,"P",{});var TNt=s(Cwe);XHr=r(TNt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),TNt.forEach(t),zHr=i(_i),xn=n(_i,"P",{});var cy=s(xn);WHr=r(cy,"The model class to instantiate is selected based on the "),wwe=n(cy,"CODE",{});var MNt=s(wwe);QHr=r(MNt,"model_type"),MNt.forEach(t),HHr=r(cy,` property of the config object (either
passed as an argument or loaded from `),Awe=n(cy,"CODE",{});var ENt=s(Awe);UHr=r(ENt,"pretrained_model_name_or_path"),ENt.forEach(t),JHr=r(cy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lwe=n(cy,"CODE",{});var CNt=s(Lwe);YHr=r(CNt,"pretrained_model_name_or_path"),CNt.forEach(t),KHr=r(cy,":"),cy.forEach(t),ZHr=i(_i),T$=n(_i,"UL",{});var rze=s(T$);DA=n(rze,"LI",{});var GDe=s(DA);ywe=n(GDe,"STRONG",{});var wNt=s(ywe);eUr=r(wNt,"beit"),wNt.forEach(t),oUr=r(GDe," \u2014 "),Dee=n(GDe,"A",{href:!0});var ANt=s(Dee);rUr=r(ANt,"FlaxBeitForImageClassification"),ANt.forEach(t),tUr=r(GDe," (BEiT model)"),GDe.forEach(t),aUr=i(rze),GA=n(rze,"LI",{});var ODe=s(GA);xwe=n(ODe,"STRONG",{});var LNt=s(xwe);nUr=r(LNt,"vit"),LNt.forEach(t),sUr=r(ODe," \u2014 "),Gee=n(ODe,"A",{href:!0});var yNt=s(Gee);lUr=r(yNt,"FlaxViTForImageClassification"),yNt.forEach(t),iUr=r(ODe," (ViT model)"),ODe.forEach(t),rze.forEach(t),dUr=i(_i),T(OA.$$.fragment,_i),_i.forEach(t),pi.forEach(t),QOe=i(m),Fm=n(m,"H2",{class:!0});var tze=s(Fm);VA=n(tze,"A",{id:!0,class:!0,href:!0});var xNt=s(VA);$we=n(xNt,"SPAN",{});var $Nt=s($we);T(M$.$$.fragment,$Nt),$Nt.forEach(t),xNt.forEach(t),cUr=i(tze),kwe=n(tze,"SPAN",{});var kNt=s(kwe);mUr=r(kNt,"FlaxAutoModelForVision2Seq"),kNt.forEach(t),tze.forEach(t),HOe=i(m),Cr=n(m,"DIV",{class:!0});var bi=s(Cr);T(E$.$$.fragment,bi),fUr=i(bi),Tm=n(bi,"P",{});var qre=s(Tm);gUr=r(qre,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Oee=n(qre,"A",{href:!0});var SNt=s(Oee);hUr=r(SNt,"from_pretrained()"),SNt.forEach(t),uUr=r(qre," class method or the "),Vee=n(qre,"A",{href:!0});var RNt=s(Vee);pUr=r(RNt,"from_config()"),RNt.forEach(t),_Ur=r(qre,` class
method.`),qre.forEach(t),bUr=i(bi),C$=n(bi,"P",{});var aze=s(C$);vUr=r(aze,"This class cannot be instantiated directly using "),Swe=n(aze,"CODE",{});var PNt=s(Swe);FUr=r(PNt,"__init__()"),PNt.forEach(t),TUr=r(aze," (throws an error)."),aze.forEach(t),MUr=i(bi),oa=n(bi,"DIV",{class:!0});var my=s(oa);T(w$.$$.fragment,my),EUr=i(my),Rwe=n(my,"P",{});var BNt=s(Rwe);CUr=r(BNt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),BNt.forEach(t),wUr=i(my),Mm=n(my,"P",{});var jre=s(Mm);AUr=r(jre,`Note:
Loading a model from its configuration file does `),Pwe=n(jre,"STRONG",{});var INt=s(Pwe);LUr=r(INt,"not"),INt.forEach(t),yUr=r(jre,` load the model weights. It only affects the
model\u2019s configuration. Use `),Xee=n(jre,"A",{href:!0});var NNt=s(Xee);xUr=r(NNt,"from_pretrained()"),NNt.forEach(t),$Ur=r(jre," to load the model weights."),jre.forEach(t),kUr=i(my),T(XA.$$.fragment,my),my.forEach(t),SUr=i(bi),Kr=n(bi,"DIV",{class:!0});var vi=s(Kr);T(A$.$$.fragment,vi),RUr=i(vi),Bwe=n(vi,"P",{});var qNt=s(Bwe);PUr=r(qNt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),qNt.forEach(t),BUr=i(vi),$n=n(vi,"P",{});var fy=s($n);IUr=r(fy,"The model class to instantiate is selected based on the "),Iwe=n(fy,"CODE",{});var jNt=s(Iwe);NUr=r(jNt,"model_type"),jNt.forEach(t),qUr=r(fy,` property of the config object (either
passed as an argument or loaded from `),Nwe=n(fy,"CODE",{});var DNt=s(Nwe);jUr=r(DNt,"pretrained_model_name_or_path"),DNt.forEach(t),DUr=r(fy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qwe=n(fy,"CODE",{});var GNt=s(qwe);GUr=r(GNt,"pretrained_model_name_or_path"),GNt.forEach(t),OUr=r(fy,":"),fy.forEach(t),VUr=i(vi),jwe=n(vi,"UL",{});var ONt=s(jwe);zA=n(ONt,"LI",{});var VDe=s(zA);Dwe=n(VDe,"STRONG",{});var VNt=s(Dwe);XUr=r(VNt,"vision-encoder-decoder"),VNt.forEach(t),zUr=r(VDe," \u2014 "),zee=n(VDe,"A",{href:!0});var XNt=s(zee);WUr=r(XNt,"FlaxVisionEncoderDecoderModel"),XNt.forEach(t),QUr=r(VDe," (Vision Encoder decoder model)"),VDe.forEach(t),ONt.forEach(t),HUr=i(vi),T(WA.$$.fragment,vi),vi.forEach(t),bi.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(Jjt)),c(f,"id","auto-classes"),c(f,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(f,"href","#auto-classes"),c(u,"class","relative group"),c(Sn,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoConfig"),c(Pn,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoModel"),c(Bn,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoTokenizer"),c(Ai,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertModel"),c($m,"id","extending-the-auto-classes"),c($m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($m,"href","#extending-the-auto-classes"),c(Li,"class","relative group"),c(Sm,"id","transformers.AutoConfig"),c(Sm,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Sm,"href","#transformers.AutoConfig"),c(yi,"class","relative group"),c(Uk,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(Jk,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig"),c(Yk,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartConfig"),c(Kk,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig"),c(Zk,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertConfig"),c(eS,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(oS,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig"),c(rS,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(tS,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(aS,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(nS,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomConfig"),c(sS,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig"),c(lS,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig"),c(iS,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig"),c(dS,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig"),c(cS,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig"),c(mS,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig"),c(fS,"href","/docs/transformers/main/en/model_doc/cvt#transformers.CvtConfig"),c(gS,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(hS,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(uS,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(pS,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig"),c(_S,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(bS,"href","/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(vS,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig"),c(FS,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig"),c(TS,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig"),c(MS,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRConfig"),c(ES,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTConfig"),c(CS,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig"),c(wS,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(AS,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig"),c(LS,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaConfig"),c(yS,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig"),c(xS,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig"),c($S,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig"),c(kS,"href","/docs/transformers/main/en/model_doc/glpn#transformers.GLPNConfig"),c(SS,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config"),c(RS,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(PS,"href","/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXConfig"),c(BS,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig"),c(IS,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig"),c(NS,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig"),c(qS,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(jS,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(DS,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(GS,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Config"),c(OS,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDConfig"),c(VS,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitConfig"),c(XS,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig"),c(zS,"href","/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Config"),c(WS,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig"),c(QS,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig"),c(HS,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Config"),c(US,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig"),c(JS,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(YS,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig"),c(KS,"href","/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTConfig"),c(ZS,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(eR,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(oR,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig"),c(rR,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config"),c(tR,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(aR,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(nR,"href","/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig"),c(sR,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig"),c(lR,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig"),c(iR,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig"),c(dR,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(cR,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(mR,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(fR,"href","/docs/transformers/main/en/model_doc/rag#transformers.RagConfig"),c(gR,"href","/docs/transformers/main/en/model_doc/realm#transformers.RealmConfig"),c(hR,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig"),c(uR,"href","/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig"),c(pR,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig"),c(_R,"href","/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig"),c(bR,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertConfig"),c(vR,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig"),c(FR,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig"),c(TR,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig"),c(MR,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig"),c(ER,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig"),c(CR,"href","/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(wR,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(AR,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(LR,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig"),c(yR,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(xR,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig"),c($R,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Config"),c(kR,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig"),c(SR,"href","/docs/transformers/main/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerConfig"),c(RR,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(PR,"href","/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRConfig"),c(BR,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(IR,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(NR,"href","/docs/transformers/main/en/model_doc/van#transformers.VanConfig"),c(qR,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltConfig"),c(jR,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(DR,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(GR,"href","/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(OR,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig"),c(VR,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(XR,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(zR,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(WR,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig"),c(QR,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig"),c(HR,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig"),c(UR,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(JR,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(YR,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(KR,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig"),c(ZR,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosConfig"),c(eP,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Dg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Gg,"id","transformers.AutoTokenizer"),c(Gg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Gg,"href","#transformers.AutoTokenizer"),c($i,"class","relative group"),c(oP,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(rP,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizer"),c(tP,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(aP,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartTokenizer"),c(nP,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartTokenizerFast"),c(sP,"href","/docs/transformers/main/en/model_doc/barthez#transformers.BarthezTokenizer"),c(lP,"href","/docs/transformers/main/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(iP,"href","/docs/transformers/main/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(dP,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(cP,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(mP,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(fP,"href","/docs/transformers/main/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(gP,"href","/docs/transformers/main/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(hP,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(uP,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(pP,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(_P,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(bP,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(vP,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(FP,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(TP,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomTokenizerFast"),c(MP,"href","/docs/transformers/main/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(EP,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertTokenizer"),c(CP,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(wP,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineTokenizer"),c(AP,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizer"),c(LP,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(yP,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(xP,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c($P,"href","/docs/transformers/main/en/model_doc/cpm#transformers.CpmTokenizer"),c(kP,"href","/docs/transformers/main/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(SP,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(RP,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),c(PP,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(BP,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaTokenizer"),c(IP,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(NP,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(qP,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(jP,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(DP,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(GP,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(OP,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(VP,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraTokenizer"),c(XP,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(zP,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(WP,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetTokenizer"),c(QP,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(HP,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(UP,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelTokenizer"),c(JP,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(YP,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(KP,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(ZP,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(eB,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(oB,"href","/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXTokenizerFast"),c(rB,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(tB,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(aB,"href","/docs/transformers/main/en/model_doc/herbert#transformers.HerbertTokenizer"),c(nB,"href","/docs/transformers/main/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(sB,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(lB,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),c(iB,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(dB,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(cB,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(mB,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(fB,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(gB,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Tokenizer"),c(hB,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3TokenizerFast"),c(uB,"href","/docs/transformers/main/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(pB,"href","/docs/transformers/main/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(_B,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDTokenizer"),c(bB,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDTokenizerFast"),c(vB,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerTokenizer"),c(FB,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(TB,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Tokenizer"),c(MB,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5TokenizerFast"),c(EB,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeTokenizer"),c(CB,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(wB,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(AB,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(LB,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianTokenizer"),c(yB,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartTokenizer"),c(xB,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartTokenizerFast"),c($B,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(kB,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(SB,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(RB,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(PB,"href","/docs/transformers/main/en/model_doc/mluke#transformers.MLukeTokenizer"),c(BB,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(IB,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(NB,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(qB,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(jB,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Tokenizer"),c(DB,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5TokenizerFast"),c(GB,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizer"),c(OB,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(VB,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(XB,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(zB,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(WB,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(QB,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(HB,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(UB,"href","/docs/transformers/main/en/model_doc/phobert#transformers.PhobertTokenizer"),c(JB,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartTokenizer"),c(YB,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(KB,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(ZB,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(eI,"href","/docs/transformers/main/en/model_doc/rag#transformers.RagTokenizer"),c(oI,"href","/docs/transformers/main/en/model_doc/realm#transformers.RealmTokenizer"),c(rI,"href","/docs/transformers/main/en/model_doc/realm#transformers.RealmTokenizerFast"),c(tI,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerTokenizer"),c(aI,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(nI,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertTokenizer"),c(sI,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(lI,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(iI,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(dI,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),c(cI,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(mI,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(fI,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(gI,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(hI,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(uI,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterTokenizer"),c(pI,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(_I,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(bI,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(vI,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Tokenizer"),c(FI,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5TokenizerFast"),c(TI,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasTokenizer"),c(MI,"href","/docs/transformers/main/en/model_doc/tapex#transformers.TapexTokenizer"),c(EI,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(CI,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(wI,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(AI,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(LI,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(yI,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(xI,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c($I,"href","/docs/transformers/main/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(kI,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMTokenizer"),c(SI,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(RI,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMTokenizer"),c(PI,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(BI,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(II,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(NI,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),c(qI,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(jI,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(DI,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(GI,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizer"),c(OI,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Eh,"id","transformers.AutoFeatureExtractor"),c(Eh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Eh,"href","#transformers.AutoFeatureExtractor"),c(ki,"class","relative group"),c(VI,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(XI,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(zI,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(WI,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(QI,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(HI,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(UI,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(JI,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(YI,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(KI,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(ZI,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(eN,"href","/docs/transformers/main/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(oN,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(rN,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTFeatureExtractor"),c(tN,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(aN,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3FeatureExtractor"),c(nN,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitFeatureExtractor"),c(sN,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(lN,"href","/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTFeatureExtractor"),c(iN,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(dN,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(cN,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(mN,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(fN,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(gN,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(hN,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(uN,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(pN,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltFeatureExtractor"),c(_N,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(bN,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(vN,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(FN,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(TN,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(au,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nu,"id","transformers.AutoProcessor"),c(nu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(nu,"href","#transformers.AutoProcessor"),c(Si,"class","relative group"),c(MN,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(EN,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPProcessor"),c(CN,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(wN,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Processor"),c(AN,"href","/docs/transformers/main/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(LN,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(yN,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(xN,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c($N,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(kN,"href","/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRProcessor"),c(SN,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(RN,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(PN,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltProcessor"),c(BN,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(IN,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(NN,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(qN,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wu,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Au,"id","transformers.AutoModel"),c(Au,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Au,"href","#transformers.AutoModel"),c(Pi,"class","relative group"),c(jN,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DN,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GN,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ON,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertModel"),c(VN,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartModel"),c(XN,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitModel"),c(zN,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertModel"),c(WN,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(QN,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdModel"),c(HN,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(UN,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(JN,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(YN,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomModel"),c(KN,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertModel"),c(ZN,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineModel"),c(eq,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPModel"),c(oq,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertModel"),c(rq,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextModel"),c(tq,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLModel"),c(aq,"href","/docs/transformers/main/en/model_doc/cvt#transformers.CvtModel"),c(nq,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(sq,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(lq,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(iq,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaModel"),c(dq,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(cq,"href","/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(mq,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTModel"),c(fq,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrModel"),c(gq,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertModel"),c(hq,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(uq,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTModel"),c(pq,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraModel"),c(_q,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertModel"),c(bq,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaModel"),c(vq,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetModel"),c(Fq,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTModel"),c(Tq,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelModel"),c(Mq,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelBaseModel"),c(Eq,"href","/docs/transformers/main/en/model_doc/glpn#transformers.GLPNModel"),c(Cq,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Model"),c(wq,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(Aq,"href","/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXModel"),c(Lq,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJModel"),c(yq,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertModel"),c(xq,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertModel"),c($q,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(kq,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(Sq,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(Rq,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3Model"),c(Pq,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDModel"),c(Bq,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitModel"),c(Iq,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerModel"),c(Nq,"href","/docs/transformers/main/en/model_doc/longt5#transformers.LongT5Model"),c(qq,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeModel"),c(jq,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertModel"),c(Dq,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Model"),c(Gq,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianModel"),c(Oq,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerModel"),c(Vq,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartModel"),c(Xq,"href","/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTModel"),c(zq,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(Wq,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertModel"),c(Qq,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetModel"),c(Hq,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5Model"),c(Uq,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerModel"),c(Jq,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(Yq,"href","/docs/transformers/main/en/model_doc/opt#transformers.OPTModel"),c(Kq,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusModel"),c(Zq,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverModel"),c(ej,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartModel"),c(oj,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerModel"),c(rj,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(tj,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertModel"),c(aj,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModel"),c(nj,"href","/docs/transformers/main/en/model_doc/regnet#transformers.RegNetModel"),c(sj,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertModel"),c(lj,"href","/docs/transformers/main/en/model_doc/resnet#transformers.ResNetModel"),c(ij,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel"),c(dj,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaModel"),c(cj,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerModel"),c(mj,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerModel"),c(fj,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWModel"),c(gj,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDModel"),c(hj,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(uj,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterModel"),c(pj,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(_j,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinModel"),c(bj,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Model"),c(vj,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasModel"),c(Fj,"href","/docs/transformers/main/en/model_doc/trajectory_transformer#transformers.TrajectoryTransformerModel"),c(Tj,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(Mj,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechModel"),c(Ej,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(Cj,"href","/docs/transformers/main/en/model_doc/van#transformers.VanModel"),c(wj,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltModel"),c(Aj,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(Lj,"href","/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertModel"),c(yj,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTModel"),c(xj,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEModel"),c($j,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(kj,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(Sj,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMModel"),c(Rj,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMModel"),c(Pj,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMModel"),c(Bj,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(Ij,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(Nj,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(qj,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetModel"),c(jj,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosModel"),c(Dj,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(L_,"id","transformers.AutoModelForPreTraining"),c(L_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(L_,"href","#transformers.AutoModelForPreTraining"),c(Ni,"class","relative group"),c(Gj,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Oj,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Vj,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xj,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForPreTraining"),c(zj,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(Wj,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForPreTraining"),c(Qj,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(Hj,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomForCausalLM"),c(Uj,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(Jj,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(Yj,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(Kj,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(Zj,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(eD,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(oD,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForPreTraining"),c(rD,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(tD,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaForPreTraining"),c(aD,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForPreTraining"),c(nD,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(sD,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(lD,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(iD,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(dD,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(cD,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(mD,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(fD,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(gD,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(hD,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(uD,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(pD,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel"),c(_D,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(bD,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(vD,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(FD,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(TD,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(MD,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(ED,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(CD,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(wD,"href","/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(AD,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(LD,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(yD,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(xD,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c($D,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(kD,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(SD,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(F2,"id","transformers.AutoModelForCausalLM"),c(F2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(F2,"href","#transformers.AutoModelForCausalLM"),c(Di,"class","relative group"),c(RD,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(PD,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(BD,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ID,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForCausalLM"),c(ND,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertLMHeadModel"),c(qD,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(jD,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(DD,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(GD,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(OD,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(VD,"href","/docs/transformers/main/en/model_doc/bloom#transformers.BloomForCausalLM"),c(XD,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(zD,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(WD,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(QD,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForCausalLM"),c(HD,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(UD,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(JD,"href","/docs/transformers/main/en/model_doc/gpt_neox#transformers.GPTNeoXForCausalLM"),c(YD,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(KD,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianForCausalLM"),c(ZD,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForCausalLM"),c(eG,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(oG,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(rG,"href","/docs/transformers/main/en/model_doc/opt#transformers.OPTForCausalLM"),c(tG,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(aG,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(nG,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(sG,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(lG,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(iG,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(dG,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(cG,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(mG,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(fG,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(gG,"href","/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(hG,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(uG,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(pG,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(_G,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(bG,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(vG,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ib,"id","transformers.AutoModelForMaskedLM"),c(ib,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ib,"href","#transformers.AutoModelForMaskedLM"),c(Vi,"class","relative group"),c(FG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EG,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(CG,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(wG,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForMaskedLM"),c(AG,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(LG,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(yG,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(xG,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c($G,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(kG,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(SG,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(RG,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(PG,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(BG,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(IG,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(NG,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(qG,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(jG,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(DG,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeForMaskedLM"),c(GG,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(OG,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(VG,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(XG,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(zG,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(WG,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(QG,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(HG,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(UG,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(JG,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(YG,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(KG,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(ZG,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(eO,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(oO,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(rO,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(tO,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Hb,"id","transformers.AutoModelForSeq2SeqLM"),c(Hb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Hb,"href","#transformers.AutoModelForSeq2SeqLM"),c(Wi,"class","relative group"),c(aO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lO,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(iO,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(dO,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(cO,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(mO,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(fO,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(gO,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(hO,"href","/docs/transformers/main/en/model_doc/longt5#transformers.LongT5ForConditionalGeneration"),c(uO,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(pO,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianMTModel"),c(_O,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(bO,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(vO,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(FO,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(TO,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(MO,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(EO,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uv,"id","transformers.AutoModelForSequenceClassification"),c(uv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(uv,"href","#transformers.AutoModelForSequenceClassification"),c(Ui,"class","relative group"),c(CO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(AO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LO,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(yO,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForSequenceClassification"),c(xO,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForSequenceClassification"),c($O,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(kO,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(SO,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(RO,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(PO,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(BO,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(IO,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(NO,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(qO,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(jO,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(DO,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(GO,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(OO,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(VO,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(XO,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(zO,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(WO,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(QO,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(HO,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(UO,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(JO,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForSequenceClassification"),c(YO,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDForSequenceClassification"),c(KO,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(ZO,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(eV,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(oV,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(rV,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(tV,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(aV,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(nV,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(sV,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(lV,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(iV,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(dV,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(cV,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(mV,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(fV,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(gV,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(hV,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(uV,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(pV,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(_V,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(bV,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(vV,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fF,"id","transformers.AutoModelForMultipleChoice"),c(fF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(fF,"href","#transformers.AutoModelForMultipleChoice"),c(Ki,"class","relative group"),c(FV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EV,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(CV,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForMultipleChoice"),c(wV,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(AV,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(LV,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(yV,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(xV,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c($V,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(kV,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(SV,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(RV,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(PV,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(BV,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(IV,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(NV,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(qV,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(jV,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(DV,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(GV,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(OV,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(VV,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(XV,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(zV,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(WV,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(QV,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(HV,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(UV,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(JV,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(YV,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zF,"id","transformers.AutoModelForNextSentencePrediction"),c(zF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zF,"href","#transformers.AutoModelForNextSentencePrediction"),c(od,"class","relative group"),c(KV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oX,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(rX,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(tX,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(aX,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(nX,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(e1,"id","transformers.AutoModelForTokenClassification"),c(e1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(e1,"href","#transformers.AutoModelForTokenClassification"),c(ad,"class","relative group"),c(sX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(iX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dX,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(cX,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForTokenClassification"),c(mX,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(fX,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(gX,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForTokenClassification"),c(hX,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(uX,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(pX,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(_X,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(bX,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(vX,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(FX,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(TX,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(MX,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(EX,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(CX,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(wX,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(AX,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(LX,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForTokenClassification"),c(yX,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(xX,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c($X,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(kX,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(SX,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(RX,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(PX,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(BX,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(IX,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(NX,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(qX,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(jX,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(DX,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(GX,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(OX,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(q1,"id","transformers.AutoModelForQuestionAnswering"),c(q1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(q1,"href","#transformers.AutoModelForQuestionAnswering"),c(ld,"class","relative group"),c(VX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(XX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(zX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WX,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(QX,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(HX,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(UX,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(JX,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(YX,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(KX,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(ZX,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(ez,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(oz,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(rz,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(tz,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(az,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(nz,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(sz,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(lz,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(iz,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(dz,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(cz,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(mz,"href","/docs/transformers/main/en/model_doc/layoutlmv3#transformers.LayoutLMv3ForQuestionAnswering"),c(fz,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(gz,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(hz,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(uz,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(pz,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(_z,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(bz,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(vz,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(Fz,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(Tz,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(Mz,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(Ez,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(Cz,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(wz,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(Az,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(Lz,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(yz,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(xz,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c($z,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(kz,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yT,"id","transformers.AutoModelForTableQuestionAnswering"),c(yT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yT,"href","#transformers.AutoModelForTableQuestionAnswering"),c(cd,"class","relative group"),c(Sz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Pz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bz,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RT,"id","transformers.AutoModelForImageClassification"),c(RT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(RT,"href","#transformers.AutoModelForImageClassification"),c(gd,"class","relative group"),c(Iz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jz,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitForImageClassification"),c(Dz,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(Gz,"href","/docs/transformers/main/en/model_doc/cvt#transformers.CvtForImageClassification"),c(Oz,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(Vz,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassification"),c(Xz,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(zz,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(Wz,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitForImageClassification"),c(Qz,"href","/docs/transformers/main/en/model_doc/levit#transformers.LevitForImageClassificationWithTeacher"),c(Hz,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(Uz,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(Jz,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(Yz,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(Kz,"href","/docs/transformers/main/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(Zz,"href","/docs/transformers/main/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(eW,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(oW,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinForImageClassification"),c(rW,"href","/docs/transformers/main/en/model_doc/van#transformers.VanForImageClassification"),c(tW,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTForImageClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UT,"id","transformers.AutoModelForVision2Seq"),c(UT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(UT,"href","#transformers.AutoModelForVision2Seq"),c(pd,"class","relative group"),c(aW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lW,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eM,"id","transformers.AutoModelForVisualQuestionAnswering"),c(eM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(eM,"href","#transformers.AutoModelForVisualQuestionAnswering"),c(vd,"class","relative group"),c(iW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mW,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltForQuestionAnswering"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nM,"id","transformers.AutoModelForAudioClassification"),c(nM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(nM,"href","#transformers.AutoModelForAudioClassification"),c(Md,"class","relative group"),c(fW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uW,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(pW,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(_W,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(bW,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(vW,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(FW,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(TW,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(MW,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(EW,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bM,"id","transformers.AutoModelForAudioFrameClassification"),c(bM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bM,"href","#transformers.AutoModelForAudioFrameClassification"),c(wd,"class","relative group"),c(CW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(AW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LW,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(yW,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(xW,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c($W,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(kW,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LM,"id","transformers.AutoModelForCTC"),c(LM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(LM,"href","#transformers.AutoModelForCTC"),c(yd,"class","relative group"),c(SW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(RW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BW,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(IW,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertForCTC"),c(NW,"href","/docs/transformers/main/en/model_doc/mctct#transformers.MCTCTForCTC"),c(qW,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWForCTC"),c(jW,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForCTC"),c(DW,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(GW,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(OW,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(VW,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(XW,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForCTC"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GM,"id","transformers.AutoModelForSpeechSeq2Seq"),c(GM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(GM,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(kd,"class","relative group"),c(zW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HW,"href","/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(UW,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QM,"id","transformers.AutoModelForAudioXVector"),c(QM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(QM,"href","#transformers.AutoModelForAudioXVector"),c(Pd,"class","relative group"),c(JW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(YW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(KW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZW,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(eQ,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(oQ,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(rQ,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(tQ,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForXVector"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(r4,"id","transformers.AutoModelForMaskedImageModeling"),c(r4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(r4,"href","#transformers.AutoModelForMaskedImageModeling"),c(Nd,"class","relative group"),c(aQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lQ,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(iQ,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(dQ,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(d4,"id","transformers.AutoModelForObjectDetection"),c(d4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(d4,"href","#transformers.AutoModelForObjectDetection"),c(Gd,"class","relative group"),c(cQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gQ,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrForObjectDetection"),c(hQ,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(u4,"id","transformers.AutoModelForImageSegmentation"),c(u4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(u4,"href","#transformers.AutoModelForImageSegmentation"),c(Xd,"class","relative group"),c(uQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_Q,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bQ,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrForSegmentation"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(F4,"id","transformers.AutoModelForSemanticSegmentation"),c(F4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(F4,"href","#transformers.AutoModelForSemanticSegmentation"),c(Qd,"class","relative group"),c(vQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MQ,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(EQ,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(CQ,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(wQ,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(y4,"id","transformers.AutoModelForInstanceSegmentation"),c(y4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(y4,"href","#transformers.AutoModelForInstanceSegmentation"),c(Jd,"class","relative group"),c(AQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xQ,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(Fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(R4,"id","transformers.TFAutoModel"),c(R4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(R4,"href","#transformers.TFAutoModel"),c(Zd,"class","relative group"),c($Q,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(SQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RQ,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertModel"),c(PQ,"href","/docs/transformers/main/en/model_doc/bart#transformers.TFBartModel"),c(BQ,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertModel"),c(IQ,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(NQ,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(qQ,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertModel"),c(jQ,"href","/docs/transformers/main/en/model_doc/clip#transformers.TFCLIPModel"),c(DQ,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertModel"),c(GQ,"href","/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextModel"),c(OQ,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLModel"),c(VQ,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(XQ,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaModel"),c(zQ,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(WQ,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(QQ,"href","/docs/transformers/main/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(HQ,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraModel"),c(UQ,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(JQ,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelModel"),c(YQ,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(KQ,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2Model"),c(ZQ,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJModel"),c(eH,"href","/docs/transformers/main/en/model_doc/hubert#transformers.TFHubertModel"),c(oH,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(rH,"href","/docs/transformers/main/en/model_doc/led#transformers.TFLEDModel"),c(tH,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerModel"),c(aH,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertModel"),c(nH,"href","/docs/transformers/main/en/model_doc/marian#transformers.TFMarianModel"),c(sH,"href","/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartModel"),c(lH,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(iH,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetModel"),c(dH,"href","/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5Model"),c(cH,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(mH,"href","/docs/transformers/main/en/model_doc/opt#transformers.TFOPTModel"),c(fH,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusModel"),c(gH,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertModel"),c(hH,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaModel"),c(uH,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerModel"),c(pH,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(_H,"href","/docs/transformers/main/en/model_doc/swin#transformers.TFSwinModel"),c(bH,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5Model"),c(vH,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasModel"),c(FH,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(TH,"href","/docs/transformers/main/en/model_doc/vit#transformers.TFViTModel"),c(MH,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(EH,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(CH,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMModel"),c(wH,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(AH,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetModel"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yE,"id","transformers.TFAutoModelForPreTraining"),c(yE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yE,"href","#transformers.TFAutoModelForPreTraining"),c(rc,"class","relative group"),c(LH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($H,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(kH,"href","/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(SH,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForPreTraining"),c(RH,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(PH,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(BH,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(IH,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(NH,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(qH,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(jH,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(DH,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(GH,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(OH,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(VH,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(XH,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(zH,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(WH,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(QH,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(HH,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(UH,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(JH,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(YH,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(KH,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eC,"id","transformers.TFAutoModelForCausalLM"),c(eC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(eC,"href","#transformers.TFAutoModelForCausalLM"),c(nc,"class","relative group"),c(ZH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rU,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(tU,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(aU,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(nU,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(sU,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(lU,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(iU,"href","/docs/transformers/main/en/model_doc/opt#transformers.TFOPTForCausalLM"),c(dU,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(cU,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(mU,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(fU,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(gU,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(hU,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pC,"id","transformers.TFAutoModelForImageClassification"),c(pC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pC,"href","#transformers.TFAutoModelForImageClassification"),c(ic,"class","relative group"),c(uU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_U,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bU,"href","/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(vU,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(FU,"href","/docs/transformers/main/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(TU,"href","/docs/transformers/main/en/model_doc/vit#transformers.TFViTForImageClassification"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EC,"id","transformers.TFAutoModelForMaskedLM"),c(EC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(EC,"href","#transformers.TFAutoModelForMaskedLM"),c(mc,"class","relative group"),c(MU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(EU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(CU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wU,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(AU,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(LU,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(yU,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(xU,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c($U,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(kU,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(SU,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(RU,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(PU,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(BU,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(IU,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(NU,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(qU,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(jU,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(DU,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(GU,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(OU,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(VU,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(XU,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WC,"id","transformers.TFAutoModelForSeq2SeqLM"),c(WC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(WC,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(hc,"class","relative group"),c(zU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HU,"href","/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(UU,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(JU,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(YU,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(KU,"href","/docs/transformers/main/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(ZU,"href","/docs/transformers/main/en/model_doc/marian#transformers.TFMarianMTModel"),c(eJ,"href","/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(oJ,"href","/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(rJ,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(tJ,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(n5,"id","transformers.TFAutoModelForSequenceClassification"),c(n5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(n5,"href","#transformers.TFAutoModelForSequenceClassification"),c(_c,"class","relative group"),c(aJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lJ,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(iJ,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(dJ,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(cJ,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(mJ,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(fJ,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(gJ,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(hJ,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(uJ,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(pJ,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(_J,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(bJ,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(vJ,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(FJ,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(TJ,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(MJ,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(EJ,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(CJ,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(wJ,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(AJ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(LJ,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(yJ,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(xJ,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c($J,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(kJ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(SJ,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(P5,"id","transformers.TFAutoModelForMultipleChoice"),c(P5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(P5,"href","#transformers.TFAutoModelForMultipleChoice"),c(Fc,"class","relative group"),c(RJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(PJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(BJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IJ,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(NJ,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(qJ,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(jJ,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(DJ,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(GJ,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(OJ,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(VJ,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(XJ,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(zJ,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(WJ,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(QJ,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(HJ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(UJ,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(JJ,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(YJ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(KJ,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(e3,"id","transformers.TFAutoModelForNextSentencePrediction"),c(e3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(e3,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(Ec,"class","relative group"),c(ZJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rY,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(tY,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(n3,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(n3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(n3,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(Ac,"class","relative group"),c(aY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lY,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(d3,"id","transformers.TFAutoModelForTokenClassification"),c(d3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(d3,"href","#transformers.TFAutoModelForTokenClassification"),c(xc,"class","relative group"),c(iY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mY,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(fY,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(gY,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(hY,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(uY,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(pY,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(_Y,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(bY,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(vY,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(FY,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(TY,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(MY,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(EY,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(CY,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(wY,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(AY,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(LY,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(yY,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(xY,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c($Y,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(S3,"id","transformers.TFAutoModelForQuestionAnswering"),c(S3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(S3,"href","#transformers.TFAutoModelForQuestionAnswering"),c(Sc,"class","relative group"),c(kY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PY,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(BY,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(IY,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(NY,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(qY,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(jY,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(DY,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(GY,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(OY,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(VY,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(XY,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(zY,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(WY,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(QY,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(HY,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(UY,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(JY,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(YY,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(KY,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(ZY,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(o0,"id","transformers.TFAutoModelForVision2Seq"),c(o0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(o0,"href","#transformers.TFAutoModelForVision2Seq"),c(Bc,"class","relative group"),c(eK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(rK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tK,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(n0,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(n0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(n0,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(qc,"class","relative group"),c(aK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lK,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(d0,"id","transformers.FlaxAutoModel"),c(d0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(d0,"href","#transformers.FlaxAutoModel"),c(Gc,"class","relative group"),c(iK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mK,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertModel"),c(fK,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartModel"),c(gK,"href","/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitModel"),c(hK,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertModel"),c(uK,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(pK,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(_K,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(bK,"href","/docs/transformers/main/en/model_doc/clip#transformers.FlaxCLIPModel"),c(vK,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(FK,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraModel"),c(TK,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(MK,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(EK,"href","/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(CK,"href","/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5Model"),c(wK,"href","/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianModel"),c(AK,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartModel"),c(LK,"href","/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5Model"),c(yK,"href","/docs/transformers/main/en/model_doc/opt#transformers.FlaxOPTModel"),c(xK,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c($K,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(kK,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(SK,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5Model"),c(RK,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(PK,"href","/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTModel"),c(BK,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(IK,"href","/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(NK,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(j0,"id","transformers.FlaxAutoModelForCausalLM"),c(j0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(j0,"href","#transformers.FlaxAutoModelForCausalLM"),c(Xc,"class","relative group"),c(qK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(DK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GK,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(OK,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(VK,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(XK,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(zK,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(WK,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(QK,"href","/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(HK,"href","/docs/transformers/main/en/model_doc/opt#transformers.FlaxOPTForCausalLM"),c(UK,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(JK,"href","/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(K0,"id","transformers.FlaxAutoModelForPreTraining"),c(K0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(K0,"href","#transformers.FlaxAutoModelForPreTraining"),c(Qc,"class","relative group"),c(YK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eZ,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(oZ,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(rZ,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(tZ,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(aZ,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(nZ,"href","/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(sZ,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(lZ,"href","/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(iZ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(dZ,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(cZ,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(mZ,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(fZ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hw,"id","transformers.FlaxAutoModelForMaskedLM"),c(hw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(hw,"href","#transformers.FlaxAutoModelForMaskedLM"),c(Jc,"class","relative group"),c(gZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pZ,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(_Z,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(bZ,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(vZ,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(FZ,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(TZ,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(MZ,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(EZ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(CZ,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(wZ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lw,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(Lw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Lw,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(Zc,"class","relative group"),c(AZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xZ,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c($Z,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(kZ,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(SZ,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(RZ,"href","/docs/transformers/main/en/model_doc/longt5#transformers.FlaxLongT5ForConditionalGeneration"),c(PZ,"href","/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(BZ,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(IZ,"href","/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(NZ,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(qZ,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Dw,"id","transformers.FlaxAutoModelForSequenceClassification"),c(Dw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Dw,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(rm,"class","relative group"),c(jZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OZ,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(VZ,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(XZ,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(zZ,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(WZ,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(QZ,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(HZ,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(UZ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(JZ,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(YZ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zw,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(Zw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Zw,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(nm,"class","relative group"),c(KZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZZ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oee,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(ree,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(tee,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(aee,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(nee,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(see,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(lee,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(iee,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(dee,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(cee,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fA,"id","transformers.FlaxAutoModelForTokenClassification"),c(fA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(fA,"href","#transformers.FlaxAutoModelForTokenClassification"),c(im,"class","relative group"),c(mee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(fee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hee,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(uee,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(pee,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(_ee,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(bee,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(vee,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(Fee,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(Tee,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EA,"id","transformers.FlaxAutoModelForMultipleChoice"),c(EA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(EA,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(mm,"class","relative group"),c(Mee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Eee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Cee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wee,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(Aee,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(Lee,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(yee,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(xee,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c($ee,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(kee,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(See,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PA,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(PA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(PA,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(hm,"class","relative group"),c(Ree,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Bee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Iee,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qA,"id","transformers.FlaxAutoModelForImageClassification"),c(qA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(qA,"href","#transformers.FlaxAutoModelForImageClassification"),c(_m,"class","relative group"),c(Nee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ea,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Dee,"href","/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(Gee,"href","/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VA,"id","transformers.FlaxAutoModelForVision2Seq"),c(VA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(VA,"href","#transformers.FlaxAutoModelForVision2Seq"),c(Fm,"class","relative group"),c(Oee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Xee,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(oa,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zee,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(m,_){e(document.head,g),b(m,v,_),b(m,u,_),e(u,f),e(f,p),M(d,p,null),e(u,h),e(u,Eo),e(Eo,Fi),b(m,Am,_),b(m,at,_),e(at,Ti),e(at,Mi),e(Mi,gy),e(at,Lm),b(m,Oe,_),b(m,We,_),e(We,Ei),e(We,Sn),e(Sn,hy),e(We,Rn),e(We,Pn),e(Pn,uy),e(We,Ci),e(We,Bn),e(Bn,py),e(We,wi),b(m,ym,_),M(ya,m,_),b(m,Qe,_),b(m,Ae,_),e(Ae,Vk),e(Ae,Ai),e(Ai,Xk),e(Ae,zk),b(m,Co,_),b(m,xa,_),e(xa,Wk),e(xa,xm),e(xm,Qk),e(xa,nze),b(m,XDe,_),b(m,Li,_),e(Li,$m),e($m,Dre),M(_y,Dre,null),e(Li,sze),e(Li,Gre),e(Gre,lze),b(m,zDe,_),b(m,In,_),e(In,ize),e(In,Ore),e(Ore,dze),e(In,cze),e(In,Vre),e(Vre,mze),e(In,fze),b(m,WDe,_),M(by,m,_),b(m,QDe,_),b(m,Hk,_),e(Hk,gze),b(m,HDe,_),M(km,m,_),b(m,UDe,_),b(m,yi,_),e(yi,Sm),e(Sm,Xre),M(vy,Xre,null),e(yi,hze),e(yi,zre),e(zre,uze),b(m,JDe,_),b(m,wo,_),M(Fy,wo,null),e(wo,pze),e(wo,Ty),e(Ty,_ze),e(Ty,Uk),e(Uk,bze),e(Ty,vze),e(wo,Fze),e(wo,My),e(My,Tze),e(My,Wre),e(Wre,Mze),e(My,Eze),e(wo,Cze),e(wo,wr),M(Ey,wr,null),e(wr,wze),e(wr,Qre),e(Qre,Aze),e(wr,Lze),e(wr,xi),e(xi,yze),e(xi,Hre),e(Hre,xze),e(xi,$ze),e(xi,Ure),e(Ure,kze),e(xi,Sze),e(wr,Rze),e(wr,A),e(A,Rm),e(Rm,Jre),e(Jre,Pze),e(Rm,Bze),e(Rm,Jk),e(Jk,Ize),e(Rm,Nze),e(A,qze),e(A,Pm),e(Pm,Yre),e(Yre,jze),e(Pm,Dze),e(Pm,Yk),e(Yk,Gze),e(Pm,Oze),e(A,Vze),e(A,Bm),e(Bm,Kre),e(Kre,Xze),e(Bm,zze),e(Bm,Kk),e(Kk,Wze),e(Bm,Qze),e(A,Hze),e(A,Im),e(Im,Zre),e(Zre,Uze),e(Im,Jze),e(Im,Zk),e(Zk,Yze),e(Im,Kze),e(A,Zze),e(A,Nm),e(Nm,ete),e(ete,eWe),e(Nm,oWe),e(Nm,eS),e(eS,rWe),e(Nm,tWe),e(A,aWe),e(A,qm),e(qm,ote),e(ote,nWe),e(qm,sWe),e(qm,oS),e(oS,lWe),e(qm,iWe),e(A,dWe),e(A,jm),e(jm,rte),e(rte,cWe),e(jm,mWe),e(jm,rS),e(rS,fWe),e(jm,gWe),e(A,hWe),e(A,Dm),e(Dm,tte),e(tte,uWe),e(Dm,pWe),e(Dm,tS),e(tS,_We),e(Dm,bWe),e(A,vWe),e(A,Gm),e(Gm,ate),e(ate,FWe),e(Gm,TWe),e(Gm,aS),e(aS,MWe),e(Gm,EWe),e(A,CWe),e(A,Om),e(Om,nte),e(nte,wWe),e(Om,AWe),e(Om,nS),e(nS,LWe),e(Om,yWe),e(A,xWe),e(A,Vm),e(Vm,ste),e(ste,$We),e(Vm,kWe),e(Vm,sS),e(sS,SWe),e(Vm,RWe),e(A,PWe),e(A,Xm),e(Xm,lte),e(lte,BWe),e(Xm,IWe),e(Xm,lS),e(lS,NWe),e(Xm,qWe),e(A,jWe),e(A,zm),e(zm,ite),e(ite,DWe),e(zm,GWe),e(zm,iS),e(iS,OWe),e(zm,VWe),e(A,XWe),e(A,Wm),e(Wm,dte),e(dte,zWe),e(Wm,WWe),e(Wm,dS),e(dS,QWe),e(Wm,HWe),e(A,UWe),e(A,Qm),e(Qm,cte),e(cte,JWe),e(Qm,YWe),e(Qm,cS),e(cS,KWe),e(Qm,ZWe),e(A,eQe),e(A,Hm),e(Hm,mte),e(mte,oQe),e(Hm,rQe),e(Hm,mS),e(mS,tQe),e(Hm,aQe),e(A,nQe),e(A,Um),e(Um,fte),e(fte,sQe),e(Um,lQe),e(Um,fS),e(fS,iQe),e(Um,dQe),e(A,cQe),e(A,Jm),e(Jm,gte),e(gte,mQe),e(Jm,fQe),e(Jm,gS),e(gS,gQe),e(Jm,hQe),e(A,uQe),e(A,Ym),e(Ym,hte),e(hte,pQe),e(Ym,_Qe),e(Ym,hS),e(hS,bQe),e(Ym,vQe),e(A,FQe),e(A,Km),e(Km,ute),e(ute,TQe),e(Km,MQe),e(Km,uS),e(uS,EQe),e(Km,CQe),e(A,wQe),e(A,Zm),e(Zm,pte),e(pte,AQe),e(Zm,LQe),e(Zm,pS),e(pS,yQe),e(Zm,xQe),e(A,$Qe),e(A,ef),e(ef,_te),e(_te,kQe),e(ef,SQe),e(ef,_S),e(_S,RQe),e(ef,PQe),e(A,BQe),e(A,of),e(of,bte),e(bte,IQe),e(of,NQe),e(of,bS),e(bS,qQe),e(of,jQe),e(A,DQe),e(A,rf),e(rf,vte),e(vte,GQe),e(rf,OQe),e(rf,vS),e(vS,VQe),e(rf,XQe),e(A,zQe),e(A,tf),e(tf,Fte),e(Fte,WQe),e(tf,QQe),e(tf,FS),e(FS,HQe),e(tf,UQe),e(A,JQe),e(A,af),e(af,Tte),e(Tte,YQe),e(af,KQe),e(af,TS),e(TS,ZQe),e(af,eHe),e(A,oHe),e(A,nf),e(nf,Mte),e(Mte,rHe),e(nf,tHe),e(nf,MS),e(MS,aHe),e(nf,nHe),e(A,sHe),e(A,sf),e(sf,Ete),e(Ete,lHe),e(sf,iHe),e(sf,ES),e(ES,dHe),e(sf,cHe),e(A,mHe),e(A,lf),e(lf,Cte),e(Cte,fHe),e(lf,gHe),e(lf,CS),e(CS,hHe),e(lf,uHe),e(A,pHe),e(A,df),e(df,wte),e(wte,_He),e(df,bHe),e(df,wS),e(wS,vHe),e(df,FHe),e(A,THe),e(A,cf),e(cf,Ate),e(Ate,MHe),e(cf,EHe),e(cf,AS),e(AS,CHe),e(cf,wHe),e(A,AHe),e(A,mf),e(mf,Lte),e(Lte,LHe),e(mf,yHe),e(mf,LS),e(LS,xHe),e(mf,$He),e(A,kHe),e(A,ff),e(ff,yte),e(yte,SHe),e(ff,RHe),e(ff,yS),e(yS,PHe),e(ff,BHe),e(A,IHe),e(A,gf),e(gf,xte),e(xte,NHe),e(gf,qHe),e(gf,xS),e(xS,jHe),e(gf,DHe),e(A,GHe),e(A,hf),e(hf,$te),e($te,OHe),e(hf,VHe),e(hf,$S),e($S,XHe),e(hf,zHe),e(A,WHe),e(A,uf),e(uf,kte),e(kte,QHe),e(uf,HHe),e(uf,kS),e(kS,UHe),e(uf,JHe),e(A,YHe),e(A,pf),e(pf,Ste),e(Ste,KHe),e(pf,ZHe),e(pf,SS),e(SS,eUe),e(pf,oUe),e(A,rUe),e(A,_f),e(_f,Rte),e(Rte,tUe),e(_f,aUe),e(_f,RS),e(RS,nUe),e(_f,sUe),e(A,lUe),e(A,bf),e(bf,Pte),e(Pte,iUe),e(bf,dUe),e(bf,PS),e(PS,cUe),e(bf,mUe),e(A,fUe),e(A,vf),e(vf,Bte),e(Bte,gUe),e(vf,hUe),e(vf,BS),e(BS,uUe),e(vf,pUe),e(A,_Ue),e(A,Ff),e(Ff,Ite),e(Ite,bUe),e(Ff,vUe),e(Ff,IS),e(IS,FUe),e(Ff,TUe),e(A,MUe),e(A,Tf),e(Tf,Nte),e(Nte,EUe),e(Tf,CUe),e(Tf,NS),e(NS,wUe),e(Tf,AUe),e(A,LUe),e(A,Mf),e(Mf,qte),e(qte,yUe),e(Mf,xUe),e(Mf,qS),e(qS,$Ue),e(Mf,kUe),e(A,SUe),e(A,Ef),e(Ef,jte),e(jte,RUe),e(Ef,PUe),e(Ef,jS),e(jS,BUe),e(Ef,IUe),e(A,NUe),e(A,Cf),e(Cf,Dte),e(Dte,qUe),e(Cf,jUe),e(Cf,DS),e(DS,DUe),e(Cf,GUe),e(A,OUe),e(A,wf),e(wf,Gte),e(Gte,VUe),e(wf,XUe),e(wf,GS),e(GS,zUe),e(wf,WUe),e(A,QUe),e(A,Af),e(Af,Ote),e(Ote,HUe),e(Af,UUe),e(Af,OS),e(OS,JUe),e(Af,YUe),e(A,KUe),e(A,Lf),e(Lf,Vte),e(Vte,ZUe),e(Lf,eJe),e(Lf,VS),e(VS,oJe),e(Lf,rJe),e(A,tJe),e(A,yf),e(yf,Xte),e(Xte,aJe),e(yf,nJe),e(yf,XS),e(XS,sJe),e(yf,lJe),e(A,iJe),e(A,xf),e(xf,zte),e(zte,dJe),e(xf,cJe),e(xf,zS),e(zS,mJe),e(xf,fJe),e(A,gJe),e(A,$f),e($f,Wte),e(Wte,hJe),e($f,uJe),e($f,WS),e(WS,pJe),e($f,_Je),e(A,bJe),e(A,kf),e(kf,Qte),e(Qte,vJe),e(kf,FJe),e(kf,QS),e(QS,TJe),e(kf,MJe),e(A,EJe),e(A,Sf),e(Sf,Hte),e(Hte,CJe),e(Sf,wJe),e(Sf,HS),e(HS,AJe),e(Sf,LJe),e(A,yJe),e(A,Rf),e(Rf,Ute),e(Ute,xJe),e(Rf,$Je),e(Rf,US),e(US,kJe),e(Rf,SJe),e(A,RJe),e(A,Pf),e(Pf,Jte),e(Jte,PJe),e(Pf,BJe),e(Pf,JS),e(JS,IJe),e(Pf,NJe),e(A,qJe),e(A,Bf),e(Bf,Yte),e(Yte,jJe),e(Bf,DJe),e(Bf,YS),e(YS,GJe),e(Bf,OJe),e(A,VJe),e(A,If),e(If,Kte),e(Kte,XJe),e(If,zJe),e(If,KS),e(KS,WJe),e(If,QJe),e(A,HJe),e(A,Nf),e(Nf,Zte),e(Zte,UJe),e(Nf,JJe),e(Nf,ZS),e(ZS,YJe),e(Nf,KJe),e(A,ZJe),e(A,qf),e(qf,eae),e(eae,eYe),e(qf,oYe),e(qf,eR),e(eR,rYe),e(qf,tYe),e(A,aYe),e(A,jf),e(jf,oae),e(oae,nYe),e(jf,sYe),e(jf,oR),e(oR,lYe),e(jf,iYe),e(A,dYe),e(A,Df),e(Df,rae),e(rae,cYe),e(Df,mYe),e(Df,rR),e(rR,fYe),e(Df,gYe),e(A,hYe),e(A,Gf),e(Gf,tae),e(tae,uYe),e(Gf,pYe),e(Gf,tR),e(tR,_Ye),e(Gf,bYe),e(A,vYe),e(A,Of),e(Of,aae),e(aae,FYe),e(Of,TYe),e(Of,aR),e(aR,MYe),e(Of,EYe),e(A,CYe),e(A,Vf),e(Vf,nae),e(nae,wYe),e(Vf,AYe),e(Vf,nR),e(nR,LYe),e(Vf,yYe),e(A,xYe),e(A,Xf),e(Xf,sae),e(sae,$Ye),e(Xf,kYe),e(Xf,sR),e(sR,SYe),e(Xf,RYe),e(A,PYe),e(A,zf),e(zf,lae),e(lae,BYe),e(zf,IYe),e(zf,lR),e(lR,NYe),e(zf,qYe),e(A,jYe),e(A,Wf),e(Wf,iae),e(iae,DYe),e(Wf,GYe),e(Wf,iR),e(iR,OYe),e(Wf,VYe),e(A,XYe),e(A,Qf),e(Qf,dae),e(dae,zYe),e(Qf,WYe),e(Qf,dR),e(dR,QYe),e(Qf,HYe),e(A,UYe),e(A,Hf),e(Hf,cae),e(cae,JYe),e(Hf,YYe),e(Hf,cR),e(cR,KYe),e(Hf,ZYe),e(A,eKe),e(A,Uf),e(Uf,mae),e(mae,oKe),e(Uf,rKe),e(Uf,mR),e(mR,tKe),e(Uf,aKe),e(A,nKe),e(A,Jf),e(Jf,fae),e(fae,sKe),e(Jf,lKe),e(Jf,fR),e(fR,iKe),e(Jf,dKe),e(A,cKe),e(A,Yf),e(Yf,gae),e(gae,mKe),e(Yf,fKe),e(Yf,gR),e(gR,gKe),e(Yf,hKe),e(A,uKe),e(A,Kf),e(Kf,hae),e(hae,pKe),e(Kf,_Ke),e(Kf,hR),e(hR,bKe),e(Kf,vKe),e(A,FKe),e(A,Zf),e(Zf,uae),e(uae,TKe),e(Zf,MKe),e(Zf,uR),e(uR,EKe),e(Zf,CKe),e(A,wKe),e(A,eg),e(eg,pae),e(pae,AKe),e(eg,LKe),e(eg,pR),e(pR,yKe),e(eg,xKe),e(A,$Ke),e(A,og),e(og,_ae),e(_ae,kKe),e(og,SKe),e(og,_R),e(_R,RKe),e(og,PKe),e(A,BKe),e(A,rg),e(rg,bae),e(bae,IKe),e(rg,NKe),e(rg,bR),e(bR,qKe),e(rg,jKe),e(A,DKe),e(A,tg),e(tg,vae),e(vae,GKe),e(tg,OKe),e(tg,vR),e(vR,VKe),e(tg,XKe),e(A,zKe),e(A,ag),e(ag,Fae),e(Fae,WKe),e(ag,QKe),e(ag,FR),e(FR,HKe),e(ag,UKe),e(A,JKe),e(A,ng),e(ng,Tae),e(Tae,YKe),e(ng,KKe),e(ng,TR),e(TR,ZKe),e(ng,eZe),e(A,oZe),e(A,sg),e(sg,Mae),e(Mae,rZe),e(sg,tZe),e(sg,MR),e(MR,aZe),e(sg,nZe),e(A,sZe),e(A,lg),e(lg,Eae),e(Eae,lZe),e(lg,iZe),e(lg,ER),e(ER,dZe),e(lg,cZe),e(A,mZe),e(A,ig),e(ig,Cae),e(Cae,fZe),e(ig,gZe),e(ig,CR),e(CR,hZe),e(ig,uZe),e(A,pZe),e(A,dg),e(dg,wae),e(wae,_Ze),e(dg,bZe),e(dg,wR),e(wR,vZe),e(dg,FZe),e(A,TZe),e(A,cg),e(cg,Aae),e(Aae,MZe),e(cg,EZe),e(cg,AR),e(AR,CZe),e(cg,wZe),e(A,AZe),e(A,mg),e(mg,Lae),e(Lae,LZe),e(mg,yZe),e(mg,LR),e(LR,xZe),e(mg,$Ze),e(A,kZe),e(A,fg),e(fg,yae),e(yae,SZe),e(fg,RZe),e(fg,yR),e(yR,PZe),e(fg,BZe),e(A,IZe),e(A,gg),e(gg,xae),e(xae,NZe),e(gg,qZe),e(gg,xR),e(xR,jZe),e(gg,DZe),e(A,GZe),e(A,hg),e(hg,$ae),e($ae,OZe),e(hg,VZe),e(hg,$R),e($R,XZe),e(hg,zZe),e(A,WZe),e(A,ug),e(ug,kae),e(kae,QZe),e(ug,HZe),e(ug,kR),e(kR,UZe),e(ug,JZe),e(A,YZe),e(A,pg),e(pg,Sae),e(Sae,KZe),e(pg,ZZe),e(pg,SR),e(SR,eeo),e(pg,oeo),e(A,reo),e(A,_g),e(_g,Rae),e(Rae,teo),e(_g,aeo),e(_g,RR),e(RR,neo),e(_g,seo),e(A,leo),e(A,bg),e(bg,Pae),e(Pae,ieo),e(bg,deo),e(bg,PR),e(PR,ceo),e(bg,meo),e(A,feo),e(A,vg),e(vg,Bae),e(Bae,geo),e(vg,heo),e(vg,BR),e(BR,ueo),e(vg,peo),e(A,_eo),e(A,Fg),e(Fg,Iae),e(Iae,beo),e(Fg,veo),e(Fg,IR),e(IR,Feo),e(Fg,Teo),e(A,Meo),e(A,Tg),e(Tg,Nae),e(Nae,Eeo),e(Tg,Ceo),e(Tg,NR),e(NR,weo),e(Tg,Aeo),e(A,Leo),e(A,Mg),e(Mg,qae),e(qae,yeo),e(Mg,xeo),e(Mg,qR),e(qR,$eo),e(Mg,keo),e(A,Seo),e(A,Eg),e(Eg,jae),e(jae,Reo),e(Eg,Peo),e(Eg,jR),e(jR,Beo),e(Eg,Ieo),e(A,Neo),e(A,Cg),e(Cg,Dae),e(Dae,qeo),e(Cg,jeo),e(Cg,DR),e(DR,Deo),e(Cg,Geo),e(A,Oeo),e(A,wg),e(wg,Gae),e(Gae,Veo),e(wg,Xeo),e(wg,GR),e(GR,zeo),e(wg,Weo),e(A,Qeo),e(A,Ag),e(Ag,Oae),e(Oae,Heo),e(Ag,Ueo),e(Ag,OR),e(OR,Jeo),e(Ag,Yeo),e(A,Keo),e(A,Lg),e(Lg,Vae),e(Vae,Zeo),e(Lg,eoo),e(Lg,VR),e(VR,ooo),e(Lg,roo),e(A,too),e(A,yg),e(yg,Xae),e(Xae,aoo),e(yg,noo),e(yg,XR),e(XR,soo),e(yg,loo),e(A,ioo),e(A,xg),e(xg,zae),e(zae,doo),e(xg,coo),e(xg,zR),e(zR,moo),e(xg,foo),e(A,goo),e(A,$g),e($g,Wae),e(Wae,hoo),e($g,uoo),e($g,WR),e(WR,poo),e($g,_oo),e(A,boo),e(A,kg),e(kg,Qae),e(Qae,voo),e(kg,Foo),e(kg,QR),e(QR,Too),e(kg,Moo),e(A,Eoo),e(A,Sg),e(Sg,Hae),e(Hae,Coo),e(Sg,woo),e(Sg,HR),e(HR,Aoo),e(Sg,Loo),e(A,yoo),e(A,Rg),e(Rg,Uae),e(Uae,xoo),e(Rg,$oo),e(Rg,UR),e(UR,koo),e(Rg,Soo),e(A,Roo),e(A,Pg),e(Pg,Jae),e(Jae,Poo),e(Pg,Boo),e(Pg,JR),e(JR,Ioo),e(Pg,Noo),e(A,qoo),e(A,Bg),e(Bg,Yae),e(Yae,joo),e(Bg,Doo),e(Bg,YR),e(YR,Goo),e(Bg,Ooo),e(A,Voo),e(A,Ig),e(Ig,Kae),e(Kae,Xoo),e(Ig,zoo),e(Ig,KR),e(KR,Woo),e(Ig,Qoo),e(A,Hoo),e(A,Ng),e(Ng,Zae),e(Zae,Uoo),e(Ng,Joo),e(Ng,ZR),e(ZR,Yoo),e(Ng,Koo),e(A,Zoo),e(A,qg),e(qg,ene),e(ene,ero),e(qg,oro),e(qg,eP),e(eP,rro),e(qg,tro),e(wr,aro),M(jg,wr,null),e(wo,nro),e(wo,Dg),M(Cy,Dg,null),e(Dg,sro),e(Dg,one),e(one,lro),b(m,YDe,_),b(m,$i,_),e($i,Gg),e(Gg,rne),M(wy,rne,null),e($i,iro),e($i,tne),e(tne,dro),b(m,KDe,_),b(m,Ao,_),M(Ay,Ao,null),e(Ao,cro),e(Ao,Ly),e(Ly,mro),e(Ly,oP),e(oP,fro),e(Ly,gro),e(Ao,hro),e(Ao,yy),e(yy,uro),e(yy,ane),e(ane,pro),e(yy,_ro),e(Ao,bro),e(Ao,Ar),M(xy,Ar,null),e(Ar,vro),e(Ar,nne),e(nne,Fro),e(Ar,Tro),e(Ar,$a),e($a,Mro),e($a,sne),e(sne,Ero),e($a,Cro),e($a,lne),e(lne,wro),e($a,Aro),e($a,ine),e(ine,Lro),e($a,yro),e(Ar,xro),e(Ar,k),e(k,Nn),e(Nn,dne),e(dne,$ro),e(Nn,kro),e(Nn,rP),e(rP,Sro),e(Nn,Rro),e(Nn,tP),e(tP,Pro),e(Nn,Bro),e(k,Iro),e(k,qn),e(qn,cne),e(cne,Nro),e(qn,qro),e(qn,aP),e(aP,jro),e(qn,Dro),e(qn,nP),e(nP,Gro),e(qn,Oro),e(k,Vro),e(k,jn),e(jn,mne),e(mne,Xro),e(jn,zro),e(jn,sP),e(sP,Wro),e(jn,Qro),e(jn,lP),e(lP,Hro),e(jn,Uro),e(k,Jro),e(k,Og),e(Og,fne),e(fne,Yro),e(Og,Kro),e(Og,iP),e(iP,Zro),e(Og,eto),e(k,oto),e(k,Dn),e(Dn,gne),e(gne,rto),e(Dn,tto),e(Dn,dP),e(dP,ato),e(Dn,nto),e(Dn,cP),e(cP,sto),e(Dn,lto),e(k,ito),e(k,Vg),e(Vg,hne),e(hne,dto),e(Vg,cto),e(Vg,mP),e(mP,mto),e(Vg,fto),e(k,gto),e(k,Xg),e(Xg,une),e(une,hto),e(Xg,uto),e(Xg,fP),e(fP,pto),e(Xg,_to),e(k,bto),e(k,zg),e(zg,pne),e(pne,vto),e(zg,Fto),e(zg,gP),e(gP,Tto),e(zg,Mto),e(k,Eto),e(k,Gn),e(Gn,_ne),e(_ne,Cto),e(Gn,wto),e(Gn,hP),e(hP,Ato),e(Gn,Lto),e(Gn,uP),e(uP,yto),e(Gn,xto),e(k,$to),e(k,On),e(On,bne),e(bne,kto),e(On,Sto),e(On,pP),e(pP,Rto),e(On,Pto),e(On,_P),e(_P,Bto),e(On,Ito),e(k,Nto),e(k,Vn),e(Vn,vne),e(vne,qto),e(Vn,jto),e(Vn,bP),e(bP,Dto),e(Vn,Gto),e(Vn,vP),e(vP,Oto),e(Vn,Vto),e(k,Xto),e(k,Wg),e(Wg,Fne),e(Fne,zto),e(Wg,Wto),e(Wg,FP),e(FP,Qto),e(Wg,Hto),e(k,Uto),e(k,Qg),e(Qg,Tne),e(Tne,Jto),e(Qg,Yto),e(Qg,TP),e(TP,Kto),e(Qg,Zto),e(k,eao),e(k,Hg),e(Hg,Mne),e(Mne,oao),e(Hg,rao),e(Hg,MP),e(MP,tao),e(Hg,aao),e(k,nao),e(k,Xn),e(Xn,Ene),e(Ene,sao),e(Xn,lao),e(Xn,EP),e(EP,iao),e(Xn,dao),e(Xn,CP),e(CP,cao),e(Xn,mao),e(k,fao),e(k,Ug),e(Ug,Cne),e(Cne,gao),e(Ug,hao),e(Ug,wP),e(wP,uao),e(Ug,pao),e(k,_ao),e(k,zn),e(zn,wne),e(wne,bao),e(zn,vao),e(zn,AP),e(AP,Fao),e(zn,Tao),e(zn,LP),e(LP,Mao),e(zn,Eao),e(k,Cao),e(k,Wn),e(Wn,Ane),e(Ane,wao),e(Wn,Aao),e(Wn,yP),e(yP,Lao),e(Wn,yao),e(Wn,xP),e(xP,xao),e(Wn,$ao),e(k,kao),e(k,Qn),e(Qn,Lne),e(Lne,Sao),e(Qn,Rao),e(Qn,$P),e($P,Pao),e(Qn,Bao),e(Qn,kP),e(kP,Iao),e(Qn,Nao),e(k,qao),e(k,Jg),e(Jg,yne),e(yne,jao),e(Jg,Dao),e(Jg,SP),e(SP,Gao),e(Jg,Oao),e(k,Vao),e(k,Hn),e(Hn,xne),e(xne,Xao),e(Hn,zao),e(Hn,RP),e(RP,Wao),e(Hn,Qao),e(Hn,PP),e(PP,Hao),e(Hn,Uao),e(k,Jao),e(k,Un),e(Un,$ne),e($ne,Yao),e(Un,Kao),e(Un,BP),e(BP,Zao),e(Un,eno),e(Un,IP),e(IP,ono),e(Un,rno),e(k,tno),e(k,Jn),e(Jn,kne),e(kne,ano),e(Jn,nno),e(Jn,NP),e(NP,sno),e(Jn,lno),e(Jn,qP),e(qP,ino),e(Jn,dno),e(k,cno),e(k,Yn),e(Yn,Sne),e(Sne,mno),e(Yn,fno),e(Yn,jP),e(jP,gno),e(Yn,hno),e(Yn,DP),e(DP,uno),e(Yn,pno),e(k,_no),e(k,Kn),e(Kn,Rne),e(Rne,bno),e(Kn,vno),e(Kn,GP),e(GP,Fno),e(Kn,Tno),e(Kn,OP),e(OP,Mno),e(Kn,Eno),e(k,Cno),e(k,Zn),e(Zn,Pne),e(Pne,wno),e(Zn,Ano),e(Zn,VP),e(VP,Lno),e(Zn,yno),e(Zn,XP),e(XP,xno),e(Zn,$no),e(k,kno),e(k,Yg),e(Yg,Bne),e(Bne,Sno),e(Yg,Rno),e(Yg,zP),e(zP,Pno),e(Yg,Bno),e(k,Ino),e(k,es),e(es,Ine),e(Ine,Nno),e(es,qno),e(es,WP),e(WP,jno),e(es,Dno),e(es,QP),e(QP,Gno),e(es,Ono),e(k,Vno),e(k,Kg),e(Kg,Nne),e(Nne,Xno),e(Kg,zno),e(Kg,HP),e(HP,Wno),e(Kg,Qno),e(k,Hno),e(k,os),e(os,qne),e(qne,Uno),e(os,Jno),e(os,UP),e(UP,Yno),e(os,Kno),e(os,JP),e(JP,Zno),e(os,eso),e(k,oso),e(k,rs),e(rs,jne),e(jne,rso),e(rs,tso),e(rs,YP),e(YP,aso),e(rs,nso),e(rs,KP),e(KP,sso),e(rs,lso),e(k,iso),e(k,ts),e(ts,Dne),e(Dne,dso),e(ts,cso),e(ts,ZP),e(ZP,mso),e(ts,fso),e(ts,eB),e(eB,gso),e(ts,hso),e(k,uso),e(k,Zg),e(Zg,Gne),e(Gne,pso),e(Zg,_so),e(Zg,oB),e(oB,bso),e(Zg,vso),e(k,Fso),e(k,as),e(as,One),e(One,Tso),e(as,Mso),e(as,rB),e(rB,Eso),e(as,Cso),e(as,tB),e(tB,wso),e(as,Aso),e(k,Lso),e(k,ns),e(ns,Vne),e(Vne,yso),e(ns,xso),e(ns,aB),e(aB,$so),e(ns,kso),e(ns,nB),e(nB,Sso),e(ns,Rso),e(k,Pso),e(k,eh),e(eh,Xne),e(Xne,Bso),e(eh,Iso),e(eh,sB),e(sB,Nso),e(eh,qso),e(k,jso),e(k,ss),e(ss,zne),e(zne,Dso),e(ss,Gso),e(ss,lB),e(lB,Oso),e(ss,Vso),e(ss,iB),e(iB,Xso),e(ss,zso),e(k,Wso),e(k,ls),e(ls,Wne),e(Wne,Qso),e(ls,Hso),e(ls,dB),e(dB,Uso),e(ls,Jso),e(ls,cB),e(cB,Yso),e(ls,Kso),e(k,Zso),e(k,is),e(is,Qne),e(Qne,elo),e(is,olo),e(is,mB),e(mB,rlo),e(is,tlo),e(is,fB),e(fB,alo),e(is,nlo),e(k,slo),e(k,ds),e(ds,Hne),e(Hne,llo),e(ds,ilo),e(ds,gB),e(gB,dlo),e(ds,clo),e(ds,hB),e(hB,mlo),e(ds,flo),e(k,glo),e(k,cs),e(cs,Une),e(Une,hlo),e(cs,ulo),e(cs,uB),e(uB,plo),e(cs,_lo),e(cs,pB),e(pB,blo),e(cs,vlo),e(k,Flo),e(k,ms),e(ms,Jne),e(Jne,Tlo),e(ms,Mlo),e(ms,_B),e(_B,Elo),e(ms,Clo),e(ms,bB),e(bB,wlo),e(ms,Alo),e(k,Llo),e(k,fs),e(fs,Yne),e(Yne,ylo),e(fs,xlo),e(fs,vB),e(vB,$lo),e(fs,klo),e(fs,FB),e(FB,Slo),e(fs,Rlo),e(k,Plo),e(k,gs),e(gs,Kne),e(Kne,Blo),e(gs,Ilo),e(gs,TB),e(TB,Nlo),e(gs,qlo),e(gs,MB),e(MB,jlo),e(gs,Dlo),e(k,Glo),e(k,oh),e(oh,Zne),e(Zne,Olo),e(oh,Vlo),e(oh,EB),e(EB,Xlo),e(oh,zlo),e(k,Wlo),e(k,hs),e(hs,ese),e(ese,Qlo),e(hs,Hlo),e(hs,CB),e(CB,Ulo),e(hs,Jlo),e(hs,wB),e(wB,Ylo),e(hs,Klo),e(k,Zlo),e(k,rh),e(rh,ose),e(ose,eio),e(rh,oio),e(rh,AB),e(AB,rio),e(rh,tio),e(k,aio),e(k,th),e(th,rse),e(rse,nio),e(th,sio),e(th,LB),e(LB,lio),e(th,iio),e(k,dio),e(k,us),e(us,tse),e(tse,cio),e(us,mio),e(us,yB),e(yB,fio),e(us,gio),e(us,xB),e(xB,hio),e(us,uio),e(k,pio),e(k,ps),e(ps,ase),e(ase,_io),e(ps,bio),e(ps,$B),e($B,vio),e(ps,Fio),e(ps,kB),e(kB,Tio),e(ps,Mio),e(k,Eio),e(k,_s),e(_s,nse),e(nse,Cio),e(_s,wio),e(_s,SB),e(SB,Aio),e(_s,Lio),e(_s,RB),e(RB,yio),e(_s,xio),e(k,$io),e(k,ah),e(ah,sse),e(sse,kio),e(ah,Sio),e(ah,PB),e(PB,Rio),e(ah,Pio),e(k,Bio),e(k,bs),e(bs,lse),e(lse,Iio),e(bs,Nio),e(bs,BB),e(BB,qio),e(bs,jio),e(bs,IB),e(IB,Dio),e(bs,Gio),e(k,Oio),e(k,vs),e(vs,ise),e(ise,Vio),e(vs,Xio),e(vs,NB),e(NB,zio),e(vs,Wio),e(vs,qB),e(qB,Qio),e(vs,Hio),e(k,Uio),e(k,Fs),e(Fs,dse),e(dse,Jio),e(Fs,Yio),e(Fs,jB),e(jB,Kio),e(Fs,Zio),e(Fs,DB),e(DB,edo),e(Fs,odo),e(k,rdo),e(k,Ts),e(Ts,cse),e(cse,tdo),e(Ts,ado),e(Ts,GB),e(GB,ndo),e(Ts,sdo),e(Ts,OB),e(OB,ldo),e(Ts,ido),e(k,ddo),e(k,Ms),e(Ms,mse),e(mse,cdo),e(Ms,mdo),e(Ms,VB),e(VB,fdo),e(Ms,gdo),e(Ms,XB),e(XB,hdo),e(Ms,udo),e(k,pdo),e(k,nh),e(nh,fse),e(fse,_do),e(nh,bdo),e(nh,zB),e(zB,vdo),e(nh,Fdo),e(k,Tdo),e(k,Es),e(Es,gse),e(gse,Mdo),e(Es,Edo),e(Es,WB),e(WB,Cdo),e(Es,wdo),e(Es,QB),e(QB,Ado),e(Es,Ldo),e(k,ydo),e(k,sh),e(sh,hse),e(hse,xdo),e(sh,$do),e(sh,HB),e(HB,kdo),e(sh,Sdo),e(k,Rdo),e(k,lh),e(lh,use),e(use,Pdo),e(lh,Bdo),e(lh,UB),e(UB,Ido),e(lh,Ndo),e(k,qdo),e(k,ih),e(ih,pse),e(pse,jdo),e(ih,Ddo),e(ih,JB),e(JB,Gdo),e(ih,Odo),e(k,Vdo),e(k,dh),e(dh,_se),e(_se,Xdo),e(dh,zdo),e(dh,YB),e(YB,Wdo),e(dh,Qdo),e(k,Hdo),e(k,Cs),e(Cs,bse),e(bse,Udo),e(Cs,Jdo),e(Cs,KB),e(KB,Ydo),e(Cs,Kdo),e(Cs,ZB),e(ZB,Zdo),e(Cs,eco),e(k,oco),e(k,ch),e(ch,vse),e(vse,rco),e(ch,tco),e(ch,eI),e(eI,aco),e(ch,nco),e(k,sco),e(k,ws),e(ws,Fse),e(Fse,lco),e(ws,ico),e(ws,oI),e(oI,dco),e(ws,cco),e(ws,rI),e(rI,mco),e(ws,fco),e(k,gco),e(k,As),e(As,Tse),e(Tse,hco),e(As,uco),e(As,tI),e(tI,pco),e(As,_co),e(As,aI),e(aI,bco),e(As,vco),e(k,Fco),e(k,Ls),e(Ls,Mse),e(Mse,Tco),e(Ls,Mco),e(Ls,nI),e(nI,Eco),e(Ls,Cco),e(Ls,sI),e(sI,wco),e(Ls,Aco),e(k,Lco),e(k,ys),e(ys,Ese),e(Ese,yco),e(ys,xco),e(ys,lI),e(lI,$co),e(ys,kco),e(ys,iI),e(iI,Sco),e(ys,Rco),e(k,Pco),e(k,xs),e(xs,Cse),e(Cse,Bco),e(xs,Ico),e(xs,dI),e(dI,Nco),e(xs,qco),e(xs,cI),e(cI,jco),e(xs,Dco),e(k,Gco),e(k,$s),e($s,wse),e(wse,Oco),e($s,Vco),e($s,mI),e(mI,Xco),e($s,zco),e($s,fI),e(fI,Wco),e($s,Qco),e(k,Hco),e(k,mh),e(mh,Ase),e(Ase,Uco),e(mh,Jco),e(mh,gI),e(gI,Yco),e(mh,Kco),e(k,Zco),e(k,fh),e(fh,Lse),e(Lse,emo),e(fh,omo),e(fh,hI),e(hI,rmo),e(fh,tmo),e(k,amo),e(k,ks),e(ks,yse),e(yse,nmo),e(ks,smo),e(ks,uI),e(uI,lmo),e(ks,imo),e(ks,pI),e(pI,dmo),e(ks,cmo),e(k,mmo),e(k,Ss),e(Ss,xse),e(xse,fmo),e(Ss,gmo),e(Ss,_I),e(_I,hmo),e(Ss,umo),e(Ss,bI),e(bI,pmo),e(Ss,_mo),e(k,bmo),e(k,Rs),e(Rs,$se),e($se,vmo),e(Rs,Fmo),e(Rs,vI),e(vI,Tmo),e(Rs,Mmo),e(Rs,FI),e(FI,Emo),e(Rs,Cmo),e(k,wmo),e(k,gh),e(gh,kse),e(kse,Amo),e(gh,Lmo),e(gh,TI),e(TI,ymo),e(gh,xmo),e(k,$mo),e(k,hh),e(hh,Sse),e(Sse,kmo),e(hh,Smo),e(hh,MI),e(MI,Rmo),e(hh,Pmo),e(k,Bmo),e(k,uh),e(uh,Rse),e(Rse,Imo),e(uh,Nmo),e(uh,EI),e(EI,qmo),e(uh,jmo),e(k,Dmo),e(k,Ps),e(Ps,Pse),e(Pse,Gmo),e(Ps,Omo),e(Ps,CI),e(CI,Vmo),e(Ps,Xmo),e(Ps,wI),e(wI,zmo),e(Ps,Wmo),e(k,Qmo),e(k,Bs),e(Bs,Bse),e(Bse,Hmo),e(Bs,Umo),e(Bs,AI),e(AI,Jmo),e(Bs,Ymo),e(Bs,LI),e(LI,Kmo),e(Bs,Zmo),e(k,efo),e(k,ph),e(ph,Ise),e(Ise,ofo),e(ph,rfo),e(ph,yI),e(yI,tfo),e(ph,afo),e(k,nfo),e(k,_h),e(_h,Nse),e(Nse,sfo),e(_h,lfo),e(_h,xI),e(xI,ifo),e(_h,dfo),e(k,cfo),e(k,bh),e(bh,qse),e(qse,mfo),e(bh,ffo),e(bh,$I),e($I,gfo),e(bh,hfo),e(k,ufo),e(k,Is),e(Is,jse),e(jse,pfo),e(Is,_fo),e(Is,kI),e(kI,bfo),e(Is,vfo),e(Is,SI),e(SI,Ffo),e(Is,Tfo),e(k,Mfo),e(k,vh),e(vh,Dse),e(Dse,Efo),e(vh,Cfo),e(vh,RI),e(RI,wfo),e(vh,Afo),e(k,Lfo),e(k,Fh),e(Fh,Gse),e(Gse,yfo),e(Fh,xfo),e(Fh,PI),e(PI,$fo),e(Fh,kfo),e(k,Sfo),e(k,Ns),e(Ns,Ose),e(Ose,Rfo),e(Ns,Pfo),e(Ns,BI),e(BI,Bfo),e(Ns,Ifo),e(Ns,II),e(II,Nfo),e(Ns,qfo),e(k,jfo),e(k,qs),e(qs,Vse),e(Vse,Dfo),e(qs,Gfo),e(qs,NI),e(NI,Ofo),e(qs,Vfo),e(qs,qI),e(qI,Xfo),e(qs,zfo),e(k,Wfo),e(k,js),e(js,Xse),e(Xse,Qfo),e(js,Hfo),e(js,jI),e(jI,Ufo),e(js,Jfo),e(js,DI),e(DI,Yfo),e(js,Kfo),e(k,Zfo),e(k,Ds),e(Ds,zse),e(zse,ego),e(Ds,ogo),e(Ds,GI),e(GI,rgo),e(Ds,tgo),e(Ds,OI),e(OI,ago),e(Ds,ngo),e(Ar,sgo),M(Th,Ar,null),e(Ao,lgo),e(Ao,Mh),M($y,Mh,null),e(Mh,igo),e(Mh,Wse),e(Wse,dgo),b(m,ZDe,_),b(m,ki,_),e(ki,Eh),e(Eh,Qse),M(ky,Qse,null),e(ki,cgo),e(ki,Hse),e(Hse,mgo),b(m,eGe,_),b(m,Lo,_),M(Sy,Lo,null),e(Lo,fgo),e(Lo,Ry),e(Ry,ggo),e(Ry,VI),e(VI,hgo),e(Ry,ugo),e(Lo,pgo),e(Lo,Py),e(Py,_go),e(Py,Use),e(Use,bgo),e(Py,vgo),e(Lo,Fgo),e(Lo,He),M(By,He,null),e(He,Tgo),e(He,Jse),e(Jse,Mgo),e(He,Ego),e(He,ka),e(ka,Cgo),e(ka,Yse),e(Yse,wgo),e(ka,Ago),e(ka,Kse),e(Kse,Lgo),e(ka,ygo),e(ka,Zse),e(Zse,xgo),e(ka,$go),e(He,kgo),e(He,Y),e(Y,Ch),e(Ch,ele),e(ele,Sgo),e(Ch,Rgo),e(Ch,XI),e(XI,Pgo),e(Ch,Bgo),e(Y,Igo),e(Y,wh),e(wh,ole),e(ole,Ngo),e(wh,qgo),e(wh,zI),e(zI,jgo),e(wh,Dgo),e(Y,Ggo),e(Y,Ah),e(Ah,rle),e(rle,Ogo),e(Ah,Vgo),e(Ah,WI),e(WI,Xgo),e(Ah,zgo),e(Y,Wgo),e(Y,Lh),e(Lh,tle),e(tle,Qgo),e(Lh,Hgo),e(Lh,QI),e(QI,Ugo),e(Lh,Jgo),e(Y,Ygo),e(Y,yh),e(yh,ale),e(ale,Kgo),e(yh,Zgo),e(yh,HI),e(HI,eho),e(yh,oho),e(Y,rho),e(Y,xh),e(xh,nle),e(nle,tho),e(xh,aho),e(xh,UI),e(UI,nho),e(xh,sho),e(Y,lho),e(Y,$h),e($h,sle),e(sle,iho),e($h,dho),e($h,JI),e(JI,cho),e($h,mho),e(Y,fho),e(Y,kh),e(kh,lle),e(lle,gho),e(kh,hho),e(kh,YI),e(YI,uho),e(kh,pho),e(Y,_ho),e(Y,Sh),e(Sh,ile),e(ile,bho),e(Sh,vho),e(Sh,KI),e(KI,Fho),e(Sh,Tho),e(Y,Mho),e(Y,Rh),e(Rh,dle),e(dle,Eho),e(Rh,Cho),e(Rh,ZI),e(ZI,who),e(Rh,Aho),e(Y,Lho),e(Y,Ph),e(Ph,cle),e(cle,yho),e(Ph,xho),e(Ph,eN),e(eN,$ho),e(Ph,kho),e(Y,Sho),e(Y,Bh),e(Bh,mle),e(mle,Rho),e(Bh,Pho),e(Bh,oN),e(oN,Bho),e(Bh,Iho),e(Y,Nho),e(Y,Ih),e(Ih,fle),e(fle,qho),e(Ih,jho),e(Ih,rN),e(rN,Dho),e(Ih,Gho),e(Y,Oho),e(Y,Nh),e(Nh,gle),e(gle,Vho),e(Nh,Xho),e(Nh,tN),e(tN,zho),e(Nh,Who),e(Y,Qho),e(Y,qh),e(qh,hle),e(hle,Hho),e(qh,Uho),e(qh,aN),e(aN,Jho),e(qh,Yho),e(Y,Kho),e(Y,jh),e(jh,ule),e(ule,Zho),e(jh,euo),e(jh,nN),e(nN,ouo),e(jh,ruo),e(Y,tuo),e(Y,Dh),e(Dh,ple),e(ple,auo),e(Dh,nuo),e(Dh,sN),e(sN,suo),e(Dh,luo),e(Y,iuo),e(Y,Gh),e(Gh,_le),e(_le,duo),e(Gh,cuo),e(Gh,lN),e(lN,muo),e(Gh,fuo),e(Y,guo),e(Y,Oh),e(Oh,ble),e(ble,huo),e(Oh,uuo),e(Oh,iN),e(iN,puo),e(Oh,_uo),e(Y,buo),e(Y,Vh),e(Vh,vle),e(vle,vuo),e(Vh,Fuo),e(Vh,dN),e(dN,Tuo),e(Vh,Muo),e(Y,Euo),e(Y,Xh),e(Xh,Fle),e(Fle,Cuo),e(Xh,wuo),e(Xh,cN),e(cN,Auo),e(Xh,Luo),e(Y,yuo),e(Y,zh),e(zh,Tle),e(Tle,xuo),e(zh,$uo),e(zh,mN),e(mN,kuo),e(zh,Suo),e(Y,Ruo),e(Y,Wh),e(Wh,Mle),e(Mle,Puo),e(Wh,Buo),e(Wh,fN),e(fN,Iuo),e(Wh,Nuo),e(Y,quo),e(Y,Qh),e(Qh,Ele),e(Ele,juo),e(Qh,Duo),e(Qh,gN),e(gN,Guo),e(Qh,Ouo),e(Y,Vuo),e(Y,Hh),e(Hh,Cle),e(Cle,Xuo),e(Hh,zuo),e(Hh,hN),e(hN,Wuo),e(Hh,Quo),e(Y,Huo),e(Y,Uh),e(Uh,wle),e(wle,Uuo),e(Uh,Juo),e(Uh,uN),e(uN,Yuo),e(Uh,Kuo),e(Y,Zuo),e(Y,Jh),e(Jh,Ale),e(Ale,epo),e(Jh,opo),e(Jh,pN),e(pN,rpo),e(Jh,tpo),e(Y,apo),e(Y,Yh),e(Yh,Lle),e(Lle,npo),e(Yh,spo),e(Yh,_N),e(_N,lpo),e(Yh,ipo),e(Y,dpo),e(Y,Kh),e(Kh,yle),e(yle,cpo),e(Kh,mpo),e(Kh,bN),e(bN,fpo),e(Kh,gpo),e(Y,hpo),e(Y,Zh),e(Zh,xle),e(xle,upo),e(Zh,ppo),e(Zh,vN),e(vN,_po),e(Zh,bpo),e(Y,vpo),e(Y,eu),e(eu,$le),e($le,Fpo),e(eu,Tpo),e(eu,FN),e(FN,Mpo),e(eu,Epo),e(Y,Cpo),e(Y,ou),e(ou,kle),e(kle,wpo),e(ou,Apo),e(ou,TN),e(TN,Lpo),e(ou,ypo),e(He,xpo),M(ru,He,null),e(He,$po),M(tu,He,null),e(Lo,kpo),e(Lo,au),M(Iy,au,null),e(au,Spo),e(au,Sle),e(Sle,Rpo),b(m,oGe,_),b(m,Si,_),e(Si,nu),e(nu,Rle),M(Ny,Rle,null),e(Si,Ppo),e(Si,Ple),e(Ple,Bpo),b(m,rGe,_),b(m,yo,_),M(qy,yo,null),e(yo,Ipo),e(yo,jy),e(jy,Npo),e(jy,MN),e(MN,qpo),e(jy,jpo),e(yo,Dpo),e(yo,Dy),e(Dy,Gpo),e(Dy,Ble),e(Ble,Opo),e(Dy,Vpo),e(yo,Xpo),e(yo,Ue),M(Gy,Ue,null),e(Ue,zpo),e(Ue,Ile),e(Ile,Wpo),e(Ue,Qpo),e(Ue,Ri),e(Ri,Hpo),e(Ri,Nle),e(Nle,Upo),e(Ri,Jpo),e(Ri,qle),e(qle,Ypo),e(Ri,Kpo),e(Ue,Zpo),e(Ue,he),e(he,su),e(su,jle),e(jle,e_o),e(su,o_o),e(su,EN),e(EN,r_o),e(su,t_o),e(he,a_o),e(he,lu),e(lu,Dle),e(Dle,n_o),e(lu,s_o),e(lu,Gle),e(Gle,l_o),e(lu,i_o),e(he,d_o),e(he,iu),e(iu,Ole),e(Ole,c_o),e(iu,m_o),e(iu,CN),e(CN,f_o),e(iu,g_o),e(he,h_o),e(he,du),e(du,Vle),e(Vle,u_o),e(du,p_o),e(du,wN),e(wN,__o),e(du,b_o),e(he,v_o),e(he,cu),e(cu,Xle),e(Xle,F_o),e(cu,T_o),e(cu,AN),e(AN,M_o),e(cu,E_o),e(he,C_o),e(he,mu),e(mu,zle),e(zle,w_o),e(mu,A_o),e(mu,LN),e(LN,L_o),e(mu,y_o),e(he,x_o),e(he,fu),e(fu,Wle),e(Wle,$_o),e(fu,k_o),e(fu,yN),e(yN,S_o),e(fu,R_o),e(he,P_o),e(he,gu),e(gu,Qle),e(Qle,B_o),e(gu,I_o),e(gu,xN),e(xN,N_o),e(gu,q_o),e(he,j_o),e(he,hu),e(hu,Hle),e(Hle,D_o),e(hu,G_o),e(hu,$N),e($N,O_o),e(hu,V_o),e(he,X_o),e(he,uu),e(uu,Ule),e(Ule,z_o),e(uu,W_o),e(uu,kN),e(kN,Q_o),e(uu,H_o),e(he,U_o),e(he,pu),e(pu,Jle),e(Jle,J_o),e(pu,Y_o),e(pu,SN),e(SN,K_o),e(pu,Z_o),e(he,e2o),e(he,_u),e(_u,Yle),e(Yle,o2o),e(_u,r2o),e(_u,RN),e(RN,t2o),e(_u,a2o),e(he,n2o),e(he,bu),e(bu,Kle),e(Kle,s2o),e(bu,l2o),e(bu,PN),e(PN,i2o),e(bu,d2o),e(he,c2o),e(he,vu),e(vu,Zle),e(Zle,m2o),e(vu,f2o),e(vu,BN),e(BN,g2o),e(vu,h2o),e(he,u2o),e(he,Fu),e(Fu,eie),e(eie,p2o),e(Fu,_2o),e(Fu,IN),e(IN,b2o),e(Fu,v2o),e(he,F2o),e(he,Tu),e(Tu,oie),e(oie,T2o),e(Tu,M2o),e(Tu,NN),e(NN,E2o),e(Tu,C2o),e(he,w2o),e(he,Mu),e(Mu,rie),e(rie,A2o),e(Mu,L2o),e(Mu,qN),e(qN,y2o),e(Mu,x2o),e(Ue,$2o),M(Eu,Ue,null),e(Ue,k2o),M(Cu,Ue,null),e(yo,S2o),e(yo,wu),M(Oy,wu,null),e(wu,R2o),e(wu,tie),e(tie,P2o),b(m,tGe,_),b(m,Pi,_),e(Pi,Au),e(Au,aie),M(Vy,aie,null),e(Pi,B2o),e(Pi,nie),e(nie,I2o),b(m,aGe,_),b(m,xo,_),M(Xy,xo,null),e(xo,N2o),e(xo,Bi),e(Bi,q2o),e(Bi,jN),e(jN,j2o),e(Bi,D2o),e(Bi,DN),e(DN,G2o),e(Bi,O2o),e(xo,V2o),e(xo,zy),e(zy,X2o),e(zy,sie),e(sie,z2o),e(zy,W2o),e(xo,Q2o),e(xo,nt),M(Wy,nt,null),e(nt,H2o),e(nt,lie),e(lie,U2o),e(nt,J2o),e(nt,Ii),e(Ii,Y2o),e(Ii,iie),e(iie,K2o),e(Ii,Z2o),e(Ii,GN),e(GN,ebo),e(Ii,obo),e(nt,rbo),M(Lu,nt,null),e(xo,tbo),e(xo,Je),M(Qy,Je,null),e(Je,abo),e(Je,die),e(die,nbo),e(Je,sbo),e(Je,Sa),e(Sa,lbo),e(Sa,cie),e(cie,ibo),e(Sa,dbo),e(Sa,mie),e(mie,cbo),e(Sa,mbo),e(Sa,fie),e(fie,fbo),e(Sa,gbo),e(Je,hbo),e(Je,x),e(x,yu),e(yu,gie),e(gie,ubo),e(yu,pbo),e(yu,ON),e(ON,_bo),e(yu,bbo),e(x,vbo),e(x,xu),e(xu,hie),e(hie,Fbo),e(xu,Tbo),e(xu,VN),e(VN,Mbo),e(xu,Ebo),e(x,Cbo),e(x,$u),e($u,uie),e(uie,wbo),e($u,Abo),e($u,XN),e(XN,Lbo),e($u,ybo),e(x,xbo),e(x,ku),e(ku,pie),e(pie,$bo),e(ku,kbo),e(ku,zN),e(zN,Sbo),e(ku,Rbo),e(x,Pbo),e(x,Su),e(Su,_ie),e(_ie,Bbo),e(Su,Ibo),e(Su,WN),e(WN,Nbo),e(Su,qbo),e(x,jbo),e(x,Ru),e(Ru,bie),e(bie,Dbo),e(Ru,Gbo),e(Ru,QN),e(QN,Obo),e(Ru,Vbo),e(x,Xbo),e(x,Pu),e(Pu,vie),e(vie,zbo),e(Pu,Wbo),e(Pu,HN),e(HN,Qbo),e(Pu,Hbo),e(x,Ubo),e(x,Bu),e(Bu,Fie),e(Fie,Jbo),e(Bu,Ybo),e(Bu,UN),e(UN,Kbo),e(Bu,Zbo),e(x,evo),e(x,Iu),e(Iu,Tie),e(Tie,ovo),e(Iu,rvo),e(Iu,JN),e(JN,tvo),e(Iu,avo),e(x,nvo),e(x,Nu),e(Nu,Mie),e(Mie,svo),e(Nu,lvo),e(Nu,YN),e(YN,ivo),e(Nu,dvo),e(x,cvo),e(x,qu),e(qu,Eie),e(Eie,mvo),e(qu,fvo),e(qu,KN),e(KN,gvo),e(qu,hvo),e(x,uvo),e(x,ju),e(ju,Cie),e(Cie,pvo),e(ju,_vo),e(ju,ZN),e(ZN,bvo),e(ju,vvo),e(x,Fvo),e(x,Du),e(Du,wie),e(wie,Tvo),e(Du,Mvo),e(Du,eq),e(eq,Evo),e(Du,Cvo),e(x,wvo),e(x,Gu),e(Gu,Aie),e(Aie,Avo),e(Gu,Lvo),e(Gu,oq),e(oq,yvo),e(Gu,xvo),e(x,$vo),e(x,Ou),e(Ou,Lie),e(Lie,kvo),e(Ou,Svo),e(Ou,rq),e(rq,Rvo),e(Ou,Pvo),e(x,Bvo),e(x,Vu),e(Vu,yie),e(yie,Ivo),e(Vu,Nvo),e(Vu,tq),e(tq,qvo),e(Vu,jvo),e(x,Dvo),e(x,Xu),e(Xu,xie),e(xie,Gvo),e(Xu,Ovo),e(Xu,aq),e(aq,Vvo),e(Xu,Xvo),e(x,zvo),e(x,zu),e(zu,$ie),e($ie,Wvo),e(zu,Qvo),e(zu,nq),e(nq,Hvo),e(zu,Uvo),e(x,Jvo),e(x,Wu),e(Wu,kie),e(kie,Yvo),e(Wu,Kvo),e(Wu,sq),e(sq,Zvo),e(Wu,eFo),e(x,oFo),e(x,Qu),e(Qu,Sie),e(Sie,rFo),e(Qu,tFo),e(Qu,lq),e(lq,aFo),e(Qu,nFo),e(x,sFo),e(x,Hu),e(Hu,Rie),e(Rie,lFo),e(Hu,iFo),e(Hu,iq),e(iq,dFo),e(Hu,cFo),e(x,mFo),e(x,Uu),e(Uu,Pie),e(Pie,fFo),e(Uu,gFo),e(Uu,dq),e(dq,hFo),e(Uu,uFo),e(x,pFo),e(x,Ju),e(Ju,Bie),e(Bie,_Fo),e(Ju,bFo),e(Ju,cq),e(cq,vFo),e(Ju,FFo),e(x,TFo),e(x,Yu),e(Yu,Iie),e(Iie,MFo),e(Yu,EFo),e(Yu,mq),e(mq,CFo),e(Yu,wFo),e(x,AFo),e(x,Ku),e(Ku,Nie),e(Nie,LFo),e(Ku,yFo),e(Ku,fq),e(fq,xFo),e(Ku,$Fo),e(x,kFo),e(x,Zu),e(Zu,qie),e(qie,SFo),e(Zu,RFo),e(Zu,gq),e(gq,PFo),e(Zu,BFo),e(x,IFo),e(x,ep),e(ep,jie),e(jie,NFo),e(ep,qFo),e(ep,hq),e(hq,jFo),e(ep,DFo),e(x,GFo),e(x,op),e(op,Die),e(Die,OFo),e(op,VFo),e(op,uq),e(uq,XFo),e(op,zFo),e(x,WFo),e(x,rp),e(rp,Gie),e(Gie,QFo),e(rp,HFo),e(rp,pq),e(pq,UFo),e(rp,JFo),e(x,YFo),e(x,tp),e(tp,Oie),e(Oie,KFo),e(tp,ZFo),e(tp,_q),e(_q,e1o),e(tp,o1o),e(x,r1o),e(x,ap),e(ap,Vie),e(Vie,t1o),e(ap,a1o),e(ap,bq),e(bq,n1o),e(ap,s1o),e(x,l1o),e(x,np),e(np,Xie),e(Xie,i1o),e(np,d1o),e(np,vq),e(vq,c1o),e(np,m1o),e(x,f1o),e(x,sp),e(sp,zie),e(zie,g1o),e(sp,h1o),e(sp,Fq),e(Fq,u1o),e(sp,p1o),e(x,_1o),e(x,Gs),e(Gs,Wie),e(Wie,b1o),e(Gs,v1o),e(Gs,Tq),e(Tq,F1o),e(Gs,T1o),e(Gs,Mq),e(Mq,M1o),e(Gs,E1o),e(x,C1o),e(x,lp),e(lp,Qie),e(Qie,w1o),e(lp,A1o),e(lp,Eq),e(Eq,L1o),e(lp,y1o),e(x,x1o),e(x,ip),e(ip,Hie),e(Hie,$1o),e(ip,k1o),e(ip,Cq),e(Cq,S1o),e(ip,R1o),e(x,P1o),e(x,dp),e(dp,Uie),e(Uie,B1o),e(dp,I1o),e(dp,wq),e(wq,N1o),e(dp,q1o),e(x,j1o),e(x,cp),e(cp,Jie),e(Jie,D1o),e(cp,G1o),e(cp,Aq),e(Aq,O1o),e(cp,V1o),e(x,X1o),e(x,mp),e(mp,Yie),e(Yie,z1o),e(mp,W1o),e(mp,Lq),e(Lq,Q1o),e(mp,H1o),e(x,U1o),e(x,fp),e(fp,Kie),e(Kie,J1o),e(fp,Y1o),e(fp,yq),e(yq,K1o),e(fp,Z1o),e(x,eTo),e(x,gp),e(gp,Zie),e(Zie,oTo),e(gp,rTo),e(gp,xq),e(xq,tTo),e(gp,aTo),e(x,nTo),e(x,hp),e(hp,ede),e(ede,sTo),e(hp,lTo),e(hp,$q),e($q,iTo),e(hp,dTo),e(x,cTo),e(x,up),e(up,ode),e(ode,mTo),e(up,fTo),e(up,kq),e(kq,gTo),e(up,hTo),e(x,uTo),e(x,pp),e(pp,rde),e(rde,pTo),e(pp,_To),e(pp,Sq),e(Sq,bTo),e(pp,vTo),e(x,FTo),e(x,_p),e(_p,tde),e(tde,TTo),e(_p,MTo),e(_p,Rq),e(Rq,ETo),e(_p,CTo),e(x,wTo),e(x,bp),e(bp,ade),e(ade,ATo),e(bp,LTo),e(bp,Pq),e(Pq,yTo),e(bp,xTo),e(x,$To),e(x,vp),e(vp,nde),e(nde,kTo),e(vp,STo),e(vp,Bq),e(Bq,RTo),e(vp,PTo),e(x,BTo),e(x,Fp),e(Fp,sde),e(sde,ITo),e(Fp,NTo),e(Fp,Iq),e(Iq,qTo),e(Fp,jTo),e(x,DTo),e(x,Tp),e(Tp,lde),e(lde,GTo),e(Tp,OTo),e(Tp,Nq),e(Nq,VTo),e(Tp,XTo),e(x,zTo),e(x,Mp),e(Mp,ide),e(ide,WTo),e(Mp,QTo),e(Mp,qq),e(qq,HTo),e(Mp,UTo),e(x,JTo),e(x,Ep),e(Ep,dde),e(dde,YTo),e(Ep,KTo),e(Ep,jq),e(jq,ZTo),e(Ep,eMo),e(x,oMo),e(x,Cp),e(Cp,cde),e(cde,rMo),e(Cp,tMo),e(Cp,Dq),e(Dq,aMo),e(Cp,nMo),e(x,sMo),e(x,wp),e(wp,mde),e(mde,lMo),e(wp,iMo),e(wp,Gq),e(Gq,dMo),e(wp,cMo),e(x,mMo),e(x,Ap),e(Ap,fde),e(fde,fMo),e(Ap,gMo),e(Ap,Oq),e(Oq,hMo),e(Ap,uMo),e(x,pMo),e(x,Lp),e(Lp,gde),e(gde,_Mo),e(Lp,bMo),e(Lp,Vq),e(Vq,vMo),e(Lp,FMo),e(x,TMo),e(x,yp),e(yp,hde),e(hde,MMo),e(yp,EMo),e(yp,Xq),e(Xq,CMo),e(yp,wMo),e(x,AMo),e(x,xp),e(xp,ude),e(ude,LMo),e(xp,yMo),e(xp,zq),e(zq,xMo),e(xp,$Mo),e(x,kMo),e(x,$p),e($p,pde),e(pde,SMo),e($p,RMo),e($p,Wq),e(Wq,PMo),e($p,BMo),e(x,IMo),e(x,kp),e(kp,_de),e(_de,NMo),e(kp,qMo),e(kp,Qq),e(Qq,jMo),e(kp,DMo),e(x,GMo),e(x,Sp),e(Sp,bde),e(bde,OMo),e(Sp,VMo),e(Sp,Hq),e(Hq,XMo),e(Sp,zMo),e(x,WMo),e(x,Rp),e(Rp,vde),e(vde,QMo),e(Rp,HMo),e(Rp,Uq),e(Uq,UMo),e(Rp,JMo),e(x,YMo),e(x,Pp),e(Pp,Fde),e(Fde,KMo),e(Pp,ZMo),e(Pp,Jq),e(Jq,e4o),e(Pp,o4o),e(x,r4o),e(x,Bp),e(Bp,Tde),e(Tde,t4o),e(Bp,a4o),e(Bp,Yq),e(Yq,n4o),e(Bp,s4o),e(x,l4o),e(x,Ip),e(Ip,Mde),e(Mde,i4o),e(Ip,d4o),e(Ip,Kq),e(Kq,c4o),e(Ip,m4o),e(x,f4o),e(x,Np),e(Np,Ede),e(Ede,g4o),e(Np,h4o),e(Np,Zq),e(Zq,u4o),e(Np,p4o),e(x,_4o),e(x,qp),e(qp,Cde),e(Cde,b4o),e(qp,v4o),e(qp,ej),e(ej,F4o),e(qp,T4o),e(x,M4o),e(x,jp),e(jp,wde),e(wde,E4o),e(jp,C4o),e(jp,oj),e(oj,w4o),e(jp,A4o),e(x,L4o),e(x,Dp),e(Dp,Ade),e(Ade,y4o),e(Dp,x4o),e(Dp,rj),e(rj,$4o),e(Dp,k4o),e(x,S4o),e(x,Gp),e(Gp,Lde),e(Lde,R4o),e(Gp,P4o),e(Gp,tj),e(tj,B4o),e(Gp,I4o),e(x,N4o),e(x,Op),e(Op,yde),e(yde,q4o),e(Op,j4o),e(Op,aj),e(aj,D4o),e(Op,G4o),e(x,O4o),e(x,Vp),e(Vp,xde),e(xde,V4o),e(Vp,X4o),e(Vp,nj),e(nj,z4o),e(Vp,W4o),e(x,Q4o),e(x,Xp),e(Xp,$de),e($de,H4o),e(Xp,U4o),e(Xp,sj),e(sj,J4o),e(Xp,Y4o),e(x,K4o),e(x,zp),e(zp,kde),e(kde,Z4o),e(zp,eEo),e(zp,lj),e(lj,oEo),e(zp,rEo),e(x,tEo),e(x,Wp),e(Wp,Sde),e(Sde,aEo),e(Wp,nEo),e(Wp,ij),e(ij,sEo),e(Wp,lEo),e(x,iEo),e(x,Qp),e(Qp,Rde),e(Rde,dEo),e(Qp,cEo),e(Qp,dj),e(dj,mEo),e(Qp,fEo),e(x,gEo),e(x,Hp),e(Hp,Pde),e(Pde,hEo),e(Hp,uEo),e(Hp,cj),e(cj,pEo),e(Hp,_Eo),e(x,bEo),e(x,Up),e(Up,Bde),e(Bde,vEo),e(Up,FEo),e(Up,mj),e(mj,TEo),e(Up,MEo),e(x,EEo),e(x,Jp),e(Jp,Ide),e(Ide,CEo),e(Jp,wEo),e(Jp,fj),e(fj,AEo),e(Jp,LEo),e(x,yEo),e(x,Yp),e(Yp,Nde),e(Nde,xEo),e(Yp,$Eo),e(Yp,gj),e(gj,kEo),e(Yp,SEo),e(x,REo),e(x,Kp),e(Kp,qde),e(qde,PEo),e(Kp,BEo),e(Kp,hj),e(hj,IEo),e(Kp,NEo),e(x,qEo),e(x,Zp),e(Zp,jde),e(jde,jEo),e(Zp,DEo),e(Zp,uj),e(uj,GEo),e(Zp,OEo),e(x,VEo),e(x,e_),e(e_,Dde),e(Dde,XEo),e(e_,zEo),e(e_,pj),e(pj,WEo),e(e_,QEo),e(x,HEo),e(x,o_),e(o_,Gde),e(Gde,UEo),e(o_,JEo),e(o_,_j),e(_j,YEo),e(o_,KEo),e(x,ZEo),e(x,r_),e(r_,Ode),e(Ode,eCo),e(r_,oCo),e(r_,bj),e(bj,rCo),e(r_,tCo),e(x,aCo),e(x,t_),e(t_,Vde),e(Vde,nCo),e(t_,sCo),e(t_,vj),e(vj,lCo),e(t_,iCo),e(x,dCo),e(x,a_),e(a_,Xde),e(Xde,cCo),e(a_,mCo),e(a_,Fj),e(Fj,fCo),e(a_,gCo),e(x,hCo),e(x,n_),e(n_,zde),e(zde,uCo),e(n_,pCo),e(n_,Tj),e(Tj,_Co),e(n_,bCo),e(x,vCo),e(x,s_),e(s_,Wde),e(Wde,FCo),e(s_,TCo),e(s_,Mj),e(Mj,MCo),e(s_,ECo),e(x,CCo),e(x,l_),e(l_,Qde),e(Qde,wCo),e(l_,ACo),e(l_,Ej),e(Ej,LCo),e(l_,yCo),e(x,xCo),e(x,i_),e(i_,Hde),e(Hde,$Co),e(i_,kCo),e(i_,Cj),e(Cj,SCo),e(i_,RCo),e(x,PCo),e(x,d_),e(d_,Ude),e(Ude,BCo),e(d_,ICo),e(d_,wj),e(wj,NCo),e(d_,qCo),e(x,jCo),e(x,c_),e(c_,Jde),e(Jde,DCo),e(c_,GCo),e(c_,Aj),e(Aj,OCo),e(c_,VCo),e(x,XCo),e(x,m_),e(m_,Yde),e(Yde,zCo),e(m_,WCo),e(m_,Lj),e(Lj,QCo),e(m_,HCo),e(x,UCo),e(x,f_),e(f_,Kde),e(Kde,JCo),e(f_,YCo),e(f_,yj),e(yj,KCo),e(f_,ZCo),e(x,e5o),e(x,g_),e(g_,Zde),e(Zde,o5o),e(g_,r5o),e(g_,xj),e(xj,t5o),e(g_,a5o),e(x,n5o),e(x,h_),e(h_,ece),e(ece,s5o),e(h_,l5o),e(h_,$j),e($j,i5o),e(h_,d5o),e(x,c5o),e(x,u_),e(u_,oce),e(oce,m5o),e(u_,f5o),e(u_,kj),e(kj,g5o),e(u_,h5o),e(x,u5o),e(x,p_),e(p_,rce),e(rce,p5o),e(p_,_5o),e(p_,Sj),e(Sj,b5o),e(p_,v5o),e(x,F5o),e(x,__),e(__,tce),e(tce,T5o),e(__,M5o),e(__,Rj),e(Rj,E5o),e(__,C5o),e(x,w5o),e(x,b_),e(b_,ace),e(ace,A5o),e(b_,L5o),e(b_,Pj),e(Pj,y5o),e(b_,x5o),e(x,$5o),e(x,v_),e(v_,nce),e(nce,k5o),e(v_,S5o),e(v_,Bj),e(Bj,R5o),e(v_,P5o),e(x,B5o),e(x,F_),e(F_,sce),e(sce,I5o),e(F_,N5o),e(F_,Ij),e(Ij,q5o),e(F_,j5o),e(x,D5o),e(x,T_),e(T_,lce),e(lce,G5o),e(T_,O5o),e(T_,Nj),e(Nj,V5o),e(T_,X5o),e(x,z5o),e(x,M_),e(M_,ice),e(ice,W5o),e(M_,Q5o),e(M_,qj),e(qj,H5o),e(M_,U5o),e(x,J5o),e(x,E_),e(E_,dce),e(dce,Y5o),e(E_,K5o),e(E_,jj),e(jj,Z5o),e(E_,e3o),e(x,o3o),e(x,C_),e(C_,cce),e(cce,r3o),e(C_,t3o),e(C_,Dj),e(Dj,a3o),e(C_,n3o),e(Je,s3o),e(Je,w_),e(w_,l3o),e(w_,mce),e(mce,i3o),e(w_,d3o),e(w_,fce),e(fce,c3o),e(Je,m3o),M(A_,Je,null),b(m,nGe,_),b(m,Ni,_),e(Ni,L_),e(L_,gce),M(Hy,gce,null),e(Ni,f3o),e(Ni,hce),e(hce,g3o),b(m,sGe,_),b(m,$o,_),M(Uy,$o,null),e($o,h3o),e($o,qi),e(qi,u3o),e(qi,Gj),e(Gj,p3o),e(qi,_3o),e(qi,Oj),e(Oj,b3o),e(qi,v3o),e($o,F3o),e($o,Jy),e(Jy,T3o),e(Jy,uce),e(uce,M3o),e(Jy,E3o),e($o,C3o),e($o,st),M(Yy,st,null),e(st,w3o),e(st,pce),e(pce,A3o),e(st,L3o),e(st,ji),e(ji,y3o),e(ji,_ce),e(_ce,x3o),e(ji,$3o),e(ji,Vj),e(Vj,k3o),e(ji,S3o),e(st,R3o),M(y_,st,null),e($o,P3o),e($o,Ye),M(Ky,Ye,null),e(Ye,B3o),e(Ye,bce),e(bce,I3o),e(Ye,N3o),e(Ye,Ra),e(Ra,q3o),e(Ra,vce),e(vce,j3o),e(Ra,D3o),e(Ra,Fce),e(Fce,G3o),e(Ra,O3o),e(Ra,Tce),e(Tce,V3o),e(Ra,X3o),e(Ye,z3o),e(Ye,G),e(G,x_),e(x_,Mce),e(Mce,W3o),e(x_,Q3o),e(x_,Xj),e(Xj,H3o),e(x_,U3o),e(G,J3o),e(G,$_),e($_,Ece),e(Ece,Y3o),e($_,K3o),e($_,zj),e(zj,Z3o),e($_,e0o),e(G,o0o),e(G,k_),e(k_,Cce),e(Cce,r0o),e(k_,t0o),e(k_,Wj),e(Wj,a0o),e(k_,n0o),e(G,s0o),e(G,S_),e(S_,wce),e(wce,l0o),e(S_,i0o),e(S_,Qj),e(Qj,d0o),e(S_,c0o),e(G,m0o),e(G,R_),e(R_,Ace),e(Ace,f0o),e(R_,g0o),e(R_,Hj),e(Hj,h0o),e(R_,u0o),e(G,p0o),e(G,P_),e(P_,Lce),e(Lce,_0o),e(P_,b0o),e(P_,Uj),e(Uj,v0o),e(P_,F0o),e(G,T0o),e(G,B_),e(B_,yce),e(yce,M0o),e(B_,E0o),e(B_,Jj),e(Jj,C0o),e(B_,w0o),e(G,A0o),e(G,I_),e(I_,xce),e(xce,L0o),e(I_,y0o),e(I_,Yj),e(Yj,x0o),e(I_,$0o),e(G,k0o),e(G,N_),e(N_,$ce),e($ce,S0o),e(N_,R0o),e(N_,Kj),e(Kj,P0o),e(N_,B0o),e(G,I0o),e(G,q_),e(q_,kce),e(kce,N0o),e(q_,q0o),e(q_,Zj),e(Zj,j0o),e(q_,D0o),e(G,G0o),e(G,j_),e(j_,Sce),e(Sce,O0o),e(j_,V0o),e(j_,eD),e(eD,X0o),e(j_,z0o),e(G,W0o),e(G,D_),e(D_,Rce),e(Rce,Q0o),e(D_,H0o),e(D_,oD),e(oD,U0o),e(D_,J0o),e(G,Y0o),e(G,G_),e(G_,Pce),e(Pce,K0o),e(G_,Z0o),e(G_,rD),e(rD,ewo),e(G_,owo),e(G,rwo),e(G,O_),e(O_,Bce),e(Bce,two),e(O_,awo),e(O_,tD),e(tD,nwo),e(O_,swo),e(G,lwo),e(G,V_),e(V_,Ice),e(Ice,iwo),e(V_,dwo),e(V_,aD),e(aD,cwo),e(V_,mwo),e(G,fwo),e(G,X_),e(X_,Nce),e(Nce,gwo),e(X_,hwo),e(X_,nD),e(nD,uwo),e(X_,pwo),e(G,_wo),e(G,z_),e(z_,qce),e(qce,bwo),e(z_,vwo),e(z_,sD),e(sD,Fwo),e(z_,Two),e(G,Mwo),e(G,W_),e(W_,jce),e(jce,Ewo),e(W_,Cwo),e(W_,lD),e(lD,wwo),e(W_,Awo),e(G,Lwo),e(G,Q_),e(Q_,Dce),e(Dce,ywo),e(Q_,xwo),e(Q_,iD),e(iD,$wo),e(Q_,kwo),e(G,Swo),e(G,H_),e(H_,Gce),e(Gce,Rwo),e(H_,Pwo),e(H_,dD),e(dD,Bwo),e(H_,Iwo),e(G,Nwo),e(G,U_),e(U_,Oce),e(Oce,qwo),e(U_,jwo),e(U_,cD),e(cD,Dwo),e(U_,Gwo),e(G,Owo),e(G,J_),e(J_,Vce),e(Vce,Vwo),e(J_,Xwo),e(J_,mD),e(mD,zwo),e(J_,Wwo),e(G,Qwo),e(G,Y_),e(Y_,Xce),e(Xce,Hwo),e(Y_,Uwo),e(Y_,fD),e(fD,Jwo),e(Y_,Ywo),e(G,Kwo),e(G,K_),e(K_,zce),e(zce,Zwo),e(K_,eAo),e(K_,gD),e(gD,oAo),e(K_,rAo),e(G,tAo),e(G,Z_),e(Z_,Wce),e(Wce,aAo),e(Z_,nAo),e(Z_,hD),e(hD,sAo),e(Z_,lAo),e(G,iAo),e(G,e2),e(e2,Qce),e(Qce,dAo),e(e2,cAo),e(e2,uD),e(uD,mAo),e(e2,fAo),e(G,gAo),e(G,o2),e(o2,Hce),e(Hce,hAo),e(o2,uAo),e(o2,pD),e(pD,pAo),e(o2,_Ao),e(G,bAo),e(G,r2),e(r2,Uce),e(Uce,vAo),e(r2,FAo),e(r2,_D),e(_D,TAo),e(r2,MAo),e(G,EAo),e(G,t2),e(t2,Jce),e(Jce,CAo),e(t2,wAo),e(t2,bD),e(bD,AAo),e(t2,LAo),e(G,yAo),e(G,a2),e(a2,Yce),e(Yce,xAo),e(a2,$Ao),e(a2,vD),e(vD,kAo),e(a2,SAo),e(G,RAo),e(G,n2),e(n2,Kce),e(Kce,PAo),e(n2,BAo),e(n2,FD),e(FD,IAo),e(n2,NAo),e(G,qAo),e(G,s2),e(s2,Zce),e(Zce,jAo),e(s2,DAo),e(s2,TD),e(TD,GAo),e(s2,OAo),e(G,VAo),e(G,l2),e(l2,eme),e(eme,XAo),e(l2,zAo),e(l2,MD),e(MD,WAo),e(l2,QAo),e(G,HAo),e(G,i2),e(i2,ome),e(ome,UAo),e(i2,JAo),e(i2,ED),e(ED,YAo),e(i2,KAo),e(G,ZAo),e(G,d2),e(d2,rme),e(rme,e6o),e(d2,o6o),e(d2,CD),e(CD,r6o),e(d2,t6o),e(G,a6o),e(G,c2),e(c2,tme),e(tme,n6o),e(c2,s6o),e(c2,wD),e(wD,l6o),e(c2,i6o),e(G,d6o),e(G,m2),e(m2,ame),e(ame,c6o),e(m2,m6o),e(m2,AD),e(AD,f6o),e(m2,g6o),e(G,h6o),e(G,f2),e(f2,nme),e(nme,u6o),e(f2,p6o),e(f2,LD),e(LD,_6o),e(f2,b6o),e(G,v6o),e(G,g2),e(g2,sme),e(sme,F6o),e(g2,T6o),e(g2,yD),e(yD,M6o),e(g2,E6o),e(G,C6o),e(G,h2),e(h2,lme),e(lme,w6o),e(h2,A6o),e(h2,xD),e(xD,L6o),e(h2,y6o),e(G,x6o),e(G,u2),e(u2,ime),e(ime,$6o),e(u2,k6o),e(u2,$D),e($D,S6o),e(u2,R6o),e(G,P6o),e(G,p2),e(p2,dme),e(dme,B6o),e(p2,I6o),e(p2,kD),e(kD,N6o),e(p2,q6o),e(G,j6o),e(G,_2),e(_2,cme),e(cme,D6o),e(_2,G6o),e(_2,SD),e(SD,O6o),e(_2,V6o),e(Ye,X6o),e(Ye,b2),e(b2,z6o),e(b2,mme),e(mme,W6o),e(b2,Q6o),e(b2,fme),e(fme,H6o),e(Ye,U6o),M(v2,Ye,null),b(m,lGe,_),b(m,Di,_),e(Di,F2),e(F2,gme),M(Zy,gme,null),e(Di,J6o),e(Di,hme),e(hme,Y6o),b(m,iGe,_),b(m,ko,_),M(e7,ko,null),e(ko,K6o),e(ko,Gi),e(Gi,Z6o),e(Gi,RD),e(RD,eLo),e(Gi,oLo),e(Gi,PD),e(PD,rLo),e(Gi,tLo),e(ko,aLo),e(ko,o7),e(o7,nLo),e(o7,ume),e(ume,sLo),e(o7,lLo),e(ko,iLo),e(ko,lt),M(r7,lt,null),e(lt,dLo),e(lt,pme),e(pme,cLo),e(lt,mLo),e(lt,Oi),e(Oi,fLo),e(Oi,_me),e(_me,gLo),e(Oi,hLo),e(Oi,BD),e(BD,uLo),e(Oi,pLo),e(lt,_Lo),M(T2,lt,null),e(ko,bLo),e(ko,Ke),M(t7,Ke,null),e(Ke,vLo),e(Ke,bme),e(bme,FLo),e(Ke,TLo),e(Ke,Pa),e(Pa,MLo),e(Pa,vme),e(vme,ELo),e(Pa,CLo),e(Pa,Fme),e(Fme,wLo),e(Pa,ALo),e(Pa,Tme),e(Tme,LLo),e(Pa,yLo),e(Ke,xLo),e(Ke,z),e(z,M2),e(M2,Mme),e(Mme,$Lo),e(M2,kLo),e(M2,ID),e(ID,SLo),e(M2,RLo),e(z,PLo),e(z,E2),e(E2,Eme),e(Eme,BLo),e(E2,ILo),e(E2,ND),e(ND,NLo),e(E2,qLo),e(z,jLo),e(z,C2),e(C2,Cme),e(Cme,DLo),e(C2,GLo),e(C2,qD),e(qD,OLo),e(C2,VLo),e(z,XLo),e(z,w2),e(w2,wme),e(wme,zLo),e(w2,WLo),e(w2,jD),e(jD,QLo),e(w2,HLo),e(z,ULo),e(z,A2),e(A2,Ame),e(Ame,JLo),e(A2,YLo),e(A2,DD),e(DD,KLo),e(A2,ZLo),e(z,eyo),e(z,L2),e(L2,Lme),e(Lme,oyo),e(L2,ryo),e(L2,GD),e(GD,tyo),e(L2,ayo),e(z,nyo),e(z,y2),e(y2,yme),e(yme,syo),e(y2,lyo),e(y2,OD),e(OD,iyo),e(y2,dyo),e(z,cyo),e(z,x2),e(x2,xme),e(xme,myo),e(x2,fyo),e(x2,VD),e(VD,gyo),e(x2,hyo),e(z,uyo),e(z,$2),e($2,$me),e($me,pyo),e($2,_yo),e($2,XD),e(XD,byo),e($2,vyo),e(z,Fyo),e(z,k2),e(k2,kme),e(kme,Tyo),e(k2,Myo),e(k2,zD),e(zD,Eyo),e(k2,Cyo),e(z,wyo),e(z,S2),e(S2,Sme),e(Sme,Ayo),e(S2,Lyo),e(S2,WD),e(WD,yyo),e(S2,xyo),e(z,$yo),e(z,R2),e(R2,Rme),e(Rme,kyo),e(R2,Syo),e(R2,QD),e(QD,Ryo),e(R2,Pyo),e(z,Byo),e(z,P2),e(P2,Pme),e(Pme,Iyo),e(P2,Nyo),e(P2,HD),e(HD,qyo),e(P2,jyo),e(z,Dyo),e(z,B2),e(B2,Bme),e(Bme,Gyo),e(B2,Oyo),e(B2,UD),e(UD,Vyo),e(B2,Xyo),e(z,zyo),e(z,I2),e(I2,Ime),e(Ime,Wyo),e(I2,Qyo),e(I2,JD),e(JD,Hyo),e(I2,Uyo),e(z,Jyo),e(z,N2),e(N2,Nme),e(Nme,Yyo),e(N2,Kyo),e(N2,YD),e(YD,Zyo),e(N2,e7o),e(z,o7o),e(z,q2),e(q2,qme),e(qme,r7o),e(q2,t7o),e(q2,KD),e(KD,a7o),e(q2,n7o),e(z,s7o),e(z,j2),e(j2,jme),e(jme,l7o),e(j2,i7o),e(j2,ZD),e(ZD,d7o),e(j2,c7o),e(z,m7o),e(z,D2),e(D2,Dme),e(Dme,f7o),e(D2,g7o),e(D2,eG),e(eG,h7o),e(D2,u7o),e(z,p7o),e(z,G2),e(G2,Gme),e(Gme,_7o),e(G2,b7o),e(G2,oG),e(oG,v7o),e(G2,F7o),e(z,T7o),e(z,O2),e(O2,Ome),e(Ome,M7o),e(O2,E7o),e(O2,rG),e(rG,C7o),e(O2,w7o),e(z,A7o),e(z,V2),e(V2,Vme),e(Vme,L7o),e(V2,y7o),e(V2,tG),e(tG,x7o),e(V2,$7o),e(z,k7o),e(z,X2),e(X2,Xme),e(Xme,S7o),e(X2,R7o),e(X2,aG),e(aG,P7o),e(X2,B7o),e(z,I7o),e(z,z2),e(z2,zme),e(zme,N7o),e(z2,q7o),e(z2,nG),e(nG,j7o),e(z2,D7o),e(z,G7o),e(z,W2),e(W2,Wme),e(Wme,O7o),e(W2,V7o),e(W2,sG),e(sG,X7o),e(W2,z7o),e(z,W7o),e(z,Q2),e(Q2,Qme),e(Qme,Q7o),e(Q2,H7o),e(Q2,lG),e(lG,U7o),e(Q2,J7o),e(z,Y7o),e(z,H2),e(H2,Hme),e(Hme,K7o),e(H2,Z7o),e(H2,iG),e(iG,e8o),e(H2,o8o),e(z,r8o),e(z,U2),e(U2,Ume),e(Ume,t8o),e(U2,a8o),e(U2,dG),e(dG,n8o),e(U2,s8o),e(z,l8o),e(z,J2),e(J2,Jme),e(Jme,i8o),e(J2,d8o),e(J2,cG),e(cG,c8o),e(J2,m8o),e(z,f8o),e(z,Y2),e(Y2,Yme),e(Yme,g8o),e(Y2,h8o),e(Y2,mG),e(mG,u8o),e(Y2,p8o),e(z,_8o),e(z,K2),e(K2,Kme),e(Kme,b8o),e(K2,v8o),e(K2,fG),e(fG,F8o),e(K2,T8o),e(z,M8o),e(z,Z2),e(Z2,Zme),e(Zme,E8o),e(Z2,C8o),e(Z2,gG),e(gG,w8o),e(Z2,A8o),e(z,L8o),e(z,eb),e(eb,efe),e(efe,y8o),e(eb,x8o),e(eb,hG),e(hG,$8o),e(eb,k8o),e(z,S8o),e(z,ob),e(ob,ofe),e(ofe,R8o),e(ob,P8o),e(ob,uG),e(uG,B8o),e(ob,I8o),e(z,N8o),e(z,rb),e(rb,rfe),e(rfe,q8o),e(rb,j8o),e(rb,pG),e(pG,D8o),e(rb,G8o),e(z,O8o),e(z,tb),e(tb,tfe),e(tfe,V8o),e(tb,X8o),e(tb,_G),e(_G,z8o),e(tb,W8o),e(z,Q8o),e(z,ab),e(ab,afe),e(afe,H8o),e(ab,U8o),e(ab,bG),e(bG,J8o),e(ab,Y8o),e(z,K8o),e(z,nb),e(nb,nfe),e(nfe,Z8o),e(nb,e9o),e(nb,vG),e(vG,o9o),e(nb,r9o),e(Ke,t9o),e(Ke,sb),e(sb,a9o),e(sb,sfe),e(sfe,n9o),e(sb,s9o),e(sb,lfe),e(lfe,l9o),e(Ke,i9o),M(lb,Ke,null),b(m,dGe,_),b(m,Vi,_),e(Vi,ib),e(ib,ife),M(a7,ife,null),e(Vi,d9o),e(Vi,dfe),e(dfe,c9o),b(m,cGe,_),b(m,So,_),M(n7,So,null),e(So,m9o),e(So,Xi),e(Xi,f9o),e(Xi,FG),e(FG,g9o),e(Xi,h9o),e(Xi,TG),e(TG,u9o),e(Xi,p9o),e(So,_9o),e(So,s7),e(s7,b9o),e(s7,cfe),e(cfe,v9o),e(s7,F9o),e(So,T9o),e(So,it),M(l7,it,null),e(it,M9o),e(it,mfe),e(mfe,E9o),e(it,C9o),e(it,zi),e(zi,w9o),e(zi,ffe),e(ffe,A9o),e(zi,L9o),e(zi,MG),e(MG,y9o),e(zi,x9o),e(it,$9o),M(db,it,null),e(So,k9o),e(So,Ze),M(i7,Ze,null),e(Ze,S9o),e(Ze,gfe),e(gfe,R9o),e(Ze,P9o),e(Ze,Ba),e(Ba,B9o),e(Ba,hfe),e(hfe,I9o),e(Ba,N9o),e(Ba,ufe),e(ufe,q9o),e(Ba,j9o),e(Ba,pfe),e(pfe,D9o),e(Ba,G9o),e(Ze,O9o),e(Ze,Q),e(Q,cb),e(cb,_fe),e(_fe,V9o),e(cb,X9o),e(cb,EG),e(EG,z9o),e(cb,W9o),e(Q,Q9o),e(Q,mb),e(mb,bfe),e(bfe,H9o),e(mb,U9o),e(mb,CG),e(CG,J9o),e(mb,Y9o),e(Q,K9o),e(Q,fb),e(fb,vfe),e(vfe,Z9o),e(fb,exo),e(fb,wG),e(wG,oxo),e(fb,rxo),e(Q,txo),e(Q,gb),e(gb,Ffe),e(Ffe,axo),e(gb,nxo),e(gb,AG),e(AG,sxo),e(gb,lxo),e(Q,ixo),e(Q,hb),e(hb,Tfe),e(Tfe,dxo),e(hb,cxo),e(hb,LG),e(LG,mxo),e(hb,fxo),e(Q,gxo),e(Q,ub),e(ub,Mfe),e(Mfe,hxo),e(ub,uxo),e(ub,yG),e(yG,pxo),e(ub,_xo),e(Q,bxo),e(Q,pb),e(pb,Efe),e(Efe,vxo),e(pb,Fxo),e(pb,xG),e(xG,Txo),e(pb,Mxo),e(Q,Exo),e(Q,_b),e(_b,Cfe),e(Cfe,Cxo),e(_b,wxo),e(_b,$G),e($G,Axo),e(_b,Lxo),e(Q,yxo),e(Q,bb),e(bb,wfe),e(wfe,xxo),e(bb,$xo),e(bb,kG),e(kG,kxo),e(bb,Sxo),e(Q,Rxo),e(Q,vb),e(vb,Afe),e(Afe,Pxo),e(vb,Bxo),e(vb,SG),e(SG,Ixo),e(vb,Nxo),e(Q,qxo),e(Q,Fb),e(Fb,Lfe),e(Lfe,jxo),e(Fb,Dxo),e(Fb,RG),e(RG,Gxo),e(Fb,Oxo),e(Q,Vxo),e(Q,Tb),e(Tb,yfe),e(yfe,Xxo),e(Tb,zxo),e(Tb,PG),e(PG,Wxo),e(Tb,Qxo),e(Q,Hxo),e(Q,Mb),e(Mb,xfe),e(xfe,Uxo),e(Mb,Jxo),e(Mb,BG),e(BG,Yxo),e(Mb,Kxo),e(Q,Zxo),e(Q,Eb),e(Eb,$fe),e($fe,e$o),e(Eb,o$o),e(Eb,IG),e(IG,r$o),e(Eb,t$o),e(Q,a$o),e(Q,Cb),e(Cb,kfe),e(kfe,n$o),e(Cb,s$o),e(Cb,NG),e(NG,l$o),e(Cb,i$o),e(Q,d$o),e(Q,wb),e(wb,Sfe),e(Sfe,c$o),e(wb,m$o),e(wb,qG),e(qG,f$o),e(wb,g$o),e(Q,h$o),e(Q,Ab),e(Ab,Rfe),e(Rfe,u$o),e(Ab,p$o),e(Ab,jG),e(jG,_$o),e(Ab,b$o),e(Q,v$o),e(Q,Lb),e(Lb,Pfe),e(Pfe,F$o),e(Lb,T$o),e(Lb,DG),e(DG,M$o),e(Lb,E$o),e(Q,C$o),e(Q,yb),e(yb,Bfe),e(Bfe,w$o),e(yb,A$o),e(yb,GG),e(GG,L$o),e(yb,y$o),e(Q,x$o),e(Q,xb),e(xb,Ife),e(Ife,$$o),e(xb,k$o),e(xb,OG),e(OG,S$o),e(xb,R$o),e(Q,P$o),e(Q,$b),e($b,Nfe),e(Nfe,B$o),e($b,I$o),e($b,VG),e(VG,N$o),e($b,q$o),e(Q,j$o),e(Q,kb),e(kb,qfe),e(qfe,D$o),e(kb,G$o),e(kb,XG),e(XG,O$o),e(kb,V$o),e(Q,X$o),e(Q,Sb),e(Sb,jfe),e(jfe,z$o),e(Sb,W$o),e(Sb,zG),e(zG,Q$o),e(Sb,H$o),e(Q,U$o),e(Q,Rb),e(Rb,Dfe),e(Dfe,J$o),e(Rb,Y$o),e(Rb,WG),e(WG,K$o),e(Rb,Z$o),e(Q,eko),e(Q,Pb),e(Pb,Gfe),e(Gfe,oko),e(Pb,rko),e(Pb,QG),e(QG,tko),e(Pb,ako),e(Q,nko),e(Q,Bb),e(Bb,Ofe),e(Ofe,sko),e(Bb,lko),e(Bb,HG),e(HG,iko),e(Bb,dko),e(Q,cko),e(Q,Ib),e(Ib,Vfe),e(Vfe,mko),e(Ib,fko),e(Ib,UG),e(UG,gko),e(Ib,hko),e(Q,uko),e(Q,Nb),e(Nb,Xfe),e(Xfe,pko),e(Nb,_ko),e(Nb,JG),e(JG,bko),e(Nb,vko),e(Q,Fko),e(Q,qb),e(qb,zfe),e(zfe,Tko),e(qb,Mko),e(qb,YG),e(YG,Eko),e(qb,Cko),e(Q,wko),e(Q,jb),e(jb,Wfe),e(Wfe,Ako),e(jb,Lko),e(jb,KG),e(KG,yko),e(jb,xko),e(Q,$ko),e(Q,Db),e(Db,Qfe),e(Qfe,kko),e(Db,Sko),e(Db,ZG),e(ZG,Rko),e(Db,Pko),e(Q,Bko),e(Q,Gb),e(Gb,Hfe),e(Hfe,Iko),e(Gb,Nko),e(Gb,Ufe),e(Ufe,qko),e(Gb,jko),e(Q,Dko),e(Q,Ob),e(Ob,Jfe),e(Jfe,Gko),e(Ob,Oko),e(Ob,eO),e(eO,Vko),e(Ob,Xko),e(Q,zko),e(Q,Vb),e(Vb,Yfe),e(Yfe,Wko),e(Vb,Qko),e(Vb,oO),e(oO,Hko),e(Vb,Uko),e(Q,Jko),e(Q,Xb),e(Xb,Kfe),e(Kfe,Yko),e(Xb,Kko),e(Xb,rO),e(rO,Zko),e(Xb,eSo),e(Q,oSo),e(Q,zb),e(zb,Zfe),e(Zfe,rSo),e(zb,tSo),e(zb,tO),e(tO,aSo),e(zb,nSo),e(Ze,sSo),e(Ze,Wb),e(Wb,lSo),e(Wb,ege),e(ege,iSo),e(Wb,dSo),e(Wb,oge),e(oge,cSo),e(Ze,mSo),M(Qb,Ze,null),b(m,mGe,_),b(m,Wi,_),e(Wi,Hb),e(Hb,rge),M(d7,rge,null),e(Wi,fSo),e(Wi,tge),e(tge,gSo),b(m,fGe,_),b(m,Ro,_),M(c7,Ro,null),e(Ro,hSo),e(Ro,Qi),e(Qi,uSo),e(Qi,aO),e(aO,pSo),e(Qi,_So),e(Qi,nO),e(nO,bSo),e(Qi,vSo),e(Ro,FSo),e(Ro,m7),e(m7,TSo),e(m7,age),e(age,MSo),e(m7,ESo),e(Ro,CSo),e(Ro,dt),M(f7,dt,null),e(dt,wSo),e(dt,nge),e(nge,ASo),e(dt,LSo),e(dt,Hi),e(Hi,ySo),e(Hi,sge),e(sge,xSo),e(Hi,$So),e(Hi,sO),e(sO,kSo),e(Hi,SSo),e(dt,RSo),M(Ub,dt,null),e(Ro,PSo),e(Ro,eo),M(g7,eo,null),e(eo,BSo),e(eo,lge),e(lge,ISo),e(eo,NSo),e(eo,Ia),e(Ia,qSo),e(Ia,ige),e(ige,jSo),e(Ia,DSo),e(Ia,dge),e(dge,GSo),e(Ia,OSo),e(Ia,cge),e(cge,VSo),e(Ia,XSo),e(eo,zSo),e(eo,ue),e(ue,Jb),e(Jb,mge),e(mge,WSo),e(Jb,QSo),e(Jb,lO),e(lO,HSo),e(Jb,USo),e(ue,JSo),e(ue,Yb),e(Yb,fge),e(fge,YSo),e(Yb,KSo),e(Yb,iO),e(iO,ZSo),e(Yb,eRo),e(ue,oRo),e(ue,Kb),e(Kb,gge),e(gge,rRo),e(Kb,tRo),e(Kb,dO),e(dO,aRo),e(Kb,nRo),e(ue,sRo),e(ue,Zb),e(Zb,hge),e(hge,lRo),e(Zb,iRo),e(Zb,cO),e(cO,dRo),e(Zb,cRo),e(ue,mRo),e(ue,ev),e(ev,uge),e(uge,fRo),e(ev,gRo),e(ev,mO),e(mO,hRo),e(ev,uRo),e(ue,pRo),e(ue,ov),e(ov,pge),e(pge,_Ro),e(ov,bRo),e(ov,fO),e(fO,vRo),e(ov,FRo),e(ue,TRo),e(ue,rv),e(rv,_ge),e(_ge,MRo),e(rv,ERo),e(rv,gO),e(gO,CRo),e(rv,wRo),e(ue,ARo),e(ue,tv),e(tv,bge),e(bge,LRo),e(tv,yRo),e(tv,hO),e(hO,xRo),e(tv,$Ro),e(ue,kRo),e(ue,av),e(av,vge),e(vge,SRo),e(av,RRo),e(av,uO),e(uO,PRo),e(av,BRo),e(ue,IRo),e(ue,nv),e(nv,Fge),e(Fge,NRo),e(nv,qRo),e(nv,pO),e(pO,jRo),e(nv,DRo),e(ue,GRo),e(ue,sv),e(sv,Tge),e(Tge,ORo),e(sv,VRo),e(sv,_O),e(_O,XRo),e(sv,zRo),e(ue,WRo),e(ue,lv),e(lv,Mge),e(Mge,QRo),e(lv,HRo),e(lv,bO),e(bO,URo),e(lv,JRo),e(ue,YRo),e(ue,iv),e(iv,Ege),e(Ege,KRo),e(iv,ZRo),e(iv,vO),e(vO,ePo),e(iv,oPo),e(ue,rPo),e(ue,dv),e(dv,Cge),e(Cge,tPo),e(dv,aPo),e(dv,FO),e(FO,nPo),e(dv,sPo),e(ue,lPo),e(ue,cv),e(cv,wge),e(wge,iPo),e(cv,dPo),e(cv,TO),e(TO,cPo),e(cv,mPo),e(ue,fPo),e(ue,mv),e(mv,Age),e(Age,gPo),e(mv,hPo),e(mv,MO),e(MO,uPo),e(mv,pPo),e(ue,_Po),e(ue,fv),e(fv,Lge),e(Lge,bPo),e(fv,vPo),e(fv,EO),e(EO,FPo),e(fv,TPo),e(eo,MPo),e(eo,gv),e(gv,EPo),e(gv,yge),e(yge,CPo),e(gv,wPo),e(gv,xge),e(xge,APo),e(eo,LPo),M(hv,eo,null),b(m,gGe,_),b(m,Ui,_),e(Ui,uv),e(uv,$ge),M(h7,$ge,null),e(Ui,yPo),e(Ui,kge),e(kge,xPo),b(m,hGe,_),b(m,Po,_),M(u7,Po,null),e(Po,$Po),e(Po,Ji),e(Ji,kPo),e(Ji,CO),e(CO,SPo),e(Ji,RPo),e(Ji,wO),e(wO,PPo),e(Ji,BPo),e(Po,IPo),e(Po,p7),e(p7,NPo),e(p7,Sge),e(Sge,qPo),e(p7,jPo),e(Po,DPo),e(Po,ct),M(_7,ct,null),e(ct,GPo),e(ct,Rge),e(Rge,OPo),e(ct,VPo),e(ct,Yi),e(Yi,XPo),e(Yi,Pge),e(Pge,zPo),e(Yi,WPo),e(Yi,AO),e(AO,QPo),e(Yi,HPo),e(ct,UPo),M(pv,ct,null),e(Po,JPo),e(Po,oo),M(b7,oo,null),e(oo,YPo),e(oo,Bge),e(Bge,KPo),e(oo,ZPo),e(oo,Na),e(Na,eBo),e(Na,Ige),e(Ige,oBo),e(Na,rBo),e(Na,Nge),e(Nge,tBo),e(Na,aBo),e(Na,qge),e(qge,nBo),e(Na,sBo),e(oo,lBo),e(oo,N),e(N,_v),e(_v,jge),e(jge,iBo),e(_v,dBo),e(_v,LO),e(LO,cBo),e(_v,mBo),e(N,fBo),e(N,bv),e(bv,Dge),e(Dge,gBo),e(bv,hBo),e(bv,yO),e(yO,uBo),e(bv,pBo),e(N,_Bo),e(N,vv),e(vv,Gge),e(Gge,bBo),e(vv,vBo),e(vv,xO),e(xO,FBo),e(vv,TBo),e(N,MBo),e(N,Fv),e(Fv,Oge),e(Oge,EBo),e(Fv,CBo),e(Fv,$O),e($O,wBo),e(Fv,ABo),e(N,LBo),e(N,Tv),e(Tv,Vge),e(Vge,yBo),e(Tv,xBo),e(Tv,kO),e(kO,$Bo),e(Tv,kBo),e(N,SBo),e(N,Mv),e(Mv,Xge),e(Xge,RBo),e(Mv,PBo),e(Mv,SO),e(SO,BBo),e(Mv,IBo),e(N,NBo),e(N,Ev),e(Ev,zge),e(zge,qBo),e(Ev,jBo),e(Ev,RO),e(RO,DBo),e(Ev,GBo),e(N,OBo),e(N,Cv),e(Cv,Wge),e(Wge,VBo),e(Cv,XBo),e(Cv,PO),e(PO,zBo),e(Cv,WBo),e(N,QBo),e(N,wv),e(wv,Qge),e(Qge,HBo),e(wv,UBo),e(wv,BO),e(BO,JBo),e(wv,YBo),e(N,KBo),e(N,Av),e(Av,Hge),e(Hge,ZBo),e(Av,eIo),e(Av,IO),e(IO,oIo),e(Av,rIo),e(N,tIo),e(N,Lv),e(Lv,Uge),e(Uge,aIo),e(Lv,nIo),e(Lv,NO),e(NO,sIo),e(Lv,lIo),e(N,iIo),e(N,yv),e(yv,Jge),e(Jge,dIo),e(yv,cIo),e(yv,qO),e(qO,mIo),e(yv,fIo),e(N,gIo),e(N,xv),e(xv,Yge),e(Yge,hIo),e(xv,uIo),e(xv,jO),e(jO,pIo),e(xv,_Io),e(N,bIo),e(N,$v),e($v,Kge),e(Kge,vIo),e($v,FIo),e($v,DO),e(DO,TIo),e($v,MIo),e(N,EIo),e(N,kv),e(kv,Zge),e(Zge,CIo),e(kv,wIo),e(kv,GO),e(GO,AIo),e(kv,LIo),e(N,yIo),e(N,Sv),e(Sv,ehe),e(ehe,xIo),e(Sv,$Io),e(Sv,OO),e(OO,kIo),e(Sv,SIo),e(N,RIo),e(N,Rv),e(Rv,ohe),e(ohe,PIo),e(Rv,BIo),e(Rv,VO),e(VO,IIo),e(Rv,NIo),e(N,qIo),e(N,Pv),e(Pv,rhe),e(rhe,jIo),e(Pv,DIo),e(Pv,XO),e(XO,GIo),e(Pv,OIo),e(N,VIo),e(N,Bv),e(Bv,the),e(the,XIo),e(Bv,zIo),e(Bv,zO),e(zO,WIo),e(Bv,QIo),e(N,HIo),e(N,Iv),e(Iv,ahe),e(ahe,UIo),e(Iv,JIo),e(Iv,WO),e(WO,YIo),e(Iv,KIo),e(N,ZIo),e(N,Nv),e(Nv,nhe),e(nhe,eNo),e(Nv,oNo),e(Nv,QO),e(QO,rNo),e(Nv,tNo),e(N,aNo),e(N,qv),e(qv,she),e(she,nNo),e(qv,sNo),e(qv,HO),e(HO,lNo),e(qv,iNo),e(N,dNo),e(N,jv),e(jv,lhe),e(lhe,cNo),e(jv,mNo),e(jv,UO),e(UO,fNo),e(jv,gNo),e(N,hNo),e(N,Dv),e(Dv,ihe),e(ihe,uNo),e(Dv,pNo),e(Dv,JO),e(JO,_No),e(Dv,bNo),e(N,vNo),e(N,Gv),e(Gv,dhe),e(dhe,FNo),e(Gv,TNo),e(Gv,YO),e(YO,MNo),e(Gv,ENo),e(N,CNo),e(N,Ov),e(Ov,che),e(che,wNo),e(Ov,ANo),e(Ov,KO),e(KO,LNo),e(Ov,yNo),e(N,xNo),e(N,Vv),e(Vv,mhe),e(mhe,$No),e(Vv,kNo),e(Vv,ZO),e(ZO,SNo),e(Vv,RNo),e(N,PNo),e(N,Xv),e(Xv,fhe),e(fhe,BNo),e(Xv,INo),e(Xv,eV),e(eV,NNo),e(Xv,qNo),e(N,jNo),e(N,zv),e(zv,ghe),e(ghe,DNo),e(zv,GNo),e(zv,oV),e(oV,ONo),e(zv,VNo),e(N,XNo),e(N,Wv),e(Wv,hhe),e(hhe,zNo),e(Wv,WNo),e(Wv,rV),e(rV,QNo),e(Wv,HNo),e(N,UNo),e(N,Qv),e(Qv,uhe),e(uhe,JNo),e(Qv,YNo),e(Qv,tV),e(tV,KNo),e(Qv,ZNo),e(N,eqo),e(N,Hv),e(Hv,phe),e(phe,oqo),e(Hv,rqo),e(Hv,aV),e(aV,tqo),e(Hv,aqo),e(N,nqo),e(N,Uv),e(Uv,_he),e(_he,sqo),e(Uv,lqo),e(Uv,nV),e(nV,iqo),e(Uv,dqo),e(N,cqo),e(N,Jv),e(Jv,bhe),e(bhe,mqo),e(Jv,fqo),e(Jv,sV),e(sV,gqo),e(Jv,hqo),e(N,uqo),e(N,Yv),e(Yv,vhe),e(vhe,pqo),e(Yv,_qo),e(Yv,lV),e(lV,bqo),e(Yv,vqo),e(N,Fqo),e(N,Kv),e(Kv,Fhe),e(Fhe,Tqo),e(Kv,Mqo),e(Kv,iV),e(iV,Eqo),e(Kv,Cqo),e(N,wqo),e(N,Zv),e(Zv,The),e(The,Aqo),e(Zv,Lqo),e(Zv,dV),e(dV,yqo),e(Zv,xqo),e(N,$qo),e(N,eF),e(eF,Mhe),e(Mhe,kqo),e(eF,Sqo),e(eF,cV),e(cV,Rqo),e(eF,Pqo),e(N,Bqo),e(N,oF),e(oF,Ehe),e(Ehe,Iqo),e(oF,Nqo),e(oF,mV),e(mV,qqo),e(oF,jqo),e(N,Dqo),e(N,rF),e(rF,Che),e(Che,Gqo),e(rF,Oqo),e(rF,fV),e(fV,Vqo),e(rF,Xqo),e(N,zqo),e(N,tF),e(tF,whe),e(whe,Wqo),e(tF,Qqo),e(tF,gV),e(gV,Hqo),e(tF,Uqo),e(N,Jqo),e(N,aF),e(aF,Ahe),e(Ahe,Yqo),e(aF,Kqo),e(aF,hV),e(hV,Zqo),e(aF,ejo),e(N,ojo),e(N,nF),e(nF,Lhe),e(Lhe,rjo),e(nF,tjo),e(nF,uV),e(uV,ajo),e(nF,njo),e(N,sjo),e(N,sF),e(sF,yhe),e(yhe,ljo),e(sF,ijo),e(sF,pV),e(pV,djo),e(sF,cjo),e(N,mjo),e(N,lF),e(lF,xhe),e(xhe,fjo),e(lF,gjo),e(lF,_V),e(_V,hjo),e(lF,ujo),e(N,pjo),e(N,iF),e(iF,$he),e($he,_jo),e(iF,bjo),e(iF,bV),e(bV,vjo),e(iF,Fjo),e(N,Tjo),e(N,dF),e(dF,khe),e(khe,Mjo),e(dF,Ejo),e(dF,vV),e(vV,Cjo),e(dF,wjo),e(oo,Ajo),e(oo,cF),e(cF,Ljo),e(cF,She),e(She,yjo),e(cF,xjo),e(cF,Rhe),e(Rhe,$jo),e(oo,kjo),M(mF,oo,null),b(m,uGe,_),b(m,Ki,_),e(Ki,fF),e(fF,Phe),M(v7,Phe,null),e(Ki,Sjo),e(Ki,Bhe),e(Bhe,Rjo),b(m,pGe,_),b(m,Bo,_),M(F7,Bo,null),e(Bo,Pjo),e(Bo,Zi),e(Zi,Bjo),e(Zi,FV),e(FV,Ijo),e(Zi,Njo),e(Zi,TV),e(TV,qjo),e(Zi,jjo),e(Bo,Djo),e(Bo,T7),e(T7,Gjo),e(T7,Ihe),e(Ihe,Ojo),e(T7,Vjo),e(Bo,Xjo),e(Bo,mt),M(M7,mt,null),e(mt,zjo),e(mt,Nhe),e(Nhe,Wjo),e(mt,Qjo),e(mt,ed),e(ed,Hjo),e(ed,qhe),e(qhe,Ujo),e(ed,Jjo),e(ed,MV),e(MV,Yjo),e(ed,Kjo),e(mt,Zjo),M(gF,mt,null),e(Bo,eDo),e(Bo,ro),M(E7,ro,null),e(ro,oDo),e(ro,jhe),e(jhe,rDo),e(ro,tDo),e(ro,qa),e(qa,aDo),e(qa,Dhe),e(Dhe,nDo),e(qa,sDo),e(qa,Ghe),e(Ghe,lDo),e(qa,iDo),e(qa,Ohe),e(Ohe,dDo),e(qa,cDo),e(ro,mDo),e(ro,Z),e(Z,hF),e(hF,Vhe),e(Vhe,fDo),e(hF,gDo),e(hF,EV),e(EV,hDo),e(hF,uDo),e(Z,pDo),e(Z,uF),e(uF,Xhe),e(Xhe,_Do),e(uF,bDo),e(uF,CV),e(CV,vDo),e(uF,FDo),e(Z,TDo),e(Z,pF),e(pF,zhe),e(zhe,MDo),e(pF,EDo),e(pF,wV),e(wV,CDo),e(pF,wDo),e(Z,ADo),e(Z,_F),e(_F,Whe),e(Whe,LDo),e(_F,yDo),e(_F,AV),e(AV,xDo),e(_F,$Do),e(Z,kDo),e(Z,bF),e(bF,Qhe),e(Qhe,SDo),e(bF,RDo),e(bF,LV),e(LV,PDo),e(bF,BDo),e(Z,IDo),e(Z,vF),e(vF,Hhe),e(Hhe,NDo),e(vF,qDo),e(vF,yV),e(yV,jDo),e(vF,DDo),e(Z,GDo),e(Z,FF),e(FF,Uhe),e(Uhe,ODo),e(FF,VDo),e(FF,xV),e(xV,XDo),e(FF,zDo),e(Z,WDo),e(Z,TF),e(TF,Jhe),e(Jhe,QDo),e(TF,HDo),e(TF,$V),e($V,UDo),e(TF,JDo),e(Z,YDo),e(Z,MF),e(MF,Yhe),e(Yhe,KDo),e(MF,ZDo),e(MF,kV),e(kV,eGo),e(MF,oGo),e(Z,rGo),e(Z,EF),e(EF,Khe),e(Khe,tGo),e(EF,aGo),e(EF,SV),e(SV,nGo),e(EF,sGo),e(Z,lGo),e(Z,CF),e(CF,Zhe),e(Zhe,iGo),e(CF,dGo),e(CF,RV),e(RV,cGo),e(CF,mGo),e(Z,fGo),e(Z,wF),e(wF,eue),e(eue,gGo),e(wF,hGo),e(wF,PV),e(PV,uGo),e(wF,pGo),e(Z,_Go),e(Z,AF),e(AF,oue),e(oue,bGo),e(AF,vGo),e(AF,BV),e(BV,FGo),e(AF,TGo),e(Z,MGo),e(Z,LF),e(LF,rue),e(rue,EGo),e(LF,CGo),e(LF,IV),e(IV,wGo),e(LF,AGo),e(Z,LGo),e(Z,yF),e(yF,tue),e(tue,yGo),e(yF,xGo),e(yF,NV),e(NV,$Go),e(yF,kGo),e(Z,SGo),e(Z,xF),e(xF,aue),e(aue,RGo),e(xF,PGo),e(xF,qV),e(qV,BGo),e(xF,IGo),e(Z,NGo),e(Z,$F),e($F,nue),e(nue,qGo),e($F,jGo),e($F,jV),e(jV,DGo),e($F,GGo),e(Z,OGo),e(Z,kF),e(kF,sue),e(sue,VGo),e(kF,XGo),e(kF,DV),e(DV,zGo),e(kF,WGo),e(Z,QGo),e(Z,SF),e(SF,lue),e(lue,HGo),e(SF,UGo),e(SF,GV),e(GV,JGo),e(SF,YGo),e(Z,KGo),e(Z,RF),e(RF,iue),e(iue,ZGo),e(RF,eOo),e(RF,OV),e(OV,oOo),e(RF,rOo),e(Z,tOo),e(Z,PF),e(PF,due),e(due,aOo),e(PF,nOo),e(PF,VV),e(VV,sOo),e(PF,lOo),e(Z,iOo),e(Z,BF),e(BF,cue),e(cue,dOo),e(BF,cOo),e(BF,XV),e(XV,mOo),e(BF,fOo),e(Z,gOo),e(Z,IF),e(IF,mue),e(mue,hOo),e(IF,uOo),e(IF,zV),e(zV,pOo),e(IF,_Oo),e(Z,bOo),e(Z,NF),e(NF,fue),e(fue,vOo),e(NF,FOo),e(NF,WV),e(WV,TOo),e(NF,MOo),e(Z,EOo),e(Z,qF),e(qF,gue),e(gue,COo),e(qF,wOo),e(qF,QV),e(QV,AOo),e(qF,LOo),e(Z,yOo),e(Z,jF),e(jF,hue),e(hue,xOo),e(jF,$Oo),e(jF,HV),e(HV,kOo),e(jF,SOo),e(Z,ROo),e(Z,DF),e(DF,uue),e(uue,POo),e(DF,BOo),e(DF,UV),e(UV,IOo),e(DF,NOo),e(Z,qOo),e(Z,GF),e(GF,pue),e(pue,jOo),e(GF,DOo),e(GF,JV),e(JV,GOo),e(GF,OOo),e(Z,VOo),e(Z,OF),e(OF,_ue),e(_ue,XOo),e(OF,zOo),e(OF,YV),e(YV,WOo),e(OF,QOo),e(ro,HOo),e(ro,VF),e(VF,UOo),e(VF,bue),e(bue,JOo),e(VF,YOo),e(VF,vue),e(vue,KOo),e(ro,ZOo),M(XF,ro,null),b(m,_Ge,_),b(m,od,_),e(od,zF),e(zF,Fue),M(C7,Fue,null),e(od,eVo),e(od,Tue),e(Tue,oVo),b(m,bGe,_),b(m,Io,_),M(w7,Io,null),e(Io,rVo),e(Io,rd),e(rd,tVo),e(rd,KV),e(KV,aVo),e(rd,nVo),e(rd,ZV),e(ZV,sVo),e(rd,lVo),e(Io,iVo),e(Io,A7),e(A7,dVo),e(A7,Mue),e(Mue,cVo),e(A7,mVo),e(Io,fVo),e(Io,ft),M(L7,ft,null),e(ft,gVo),e(ft,Eue),e(Eue,hVo),e(ft,uVo),e(ft,td),e(td,pVo),e(td,Cue),e(Cue,_Vo),e(td,bVo),e(td,eX),e(eX,vVo),e(td,FVo),e(ft,TVo),M(WF,ft,null),e(Io,MVo),e(Io,to),M(y7,to,null),e(to,EVo),e(to,wue),e(wue,CVo),e(to,wVo),e(to,ja),e(ja,AVo),e(ja,Aue),e(Aue,LVo),e(ja,yVo),e(ja,Lue),e(Lue,xVo),e(ja,$Vo),e(ja,yue),e(yue,kVo),e(ja,SVo),e(to,RVo),e(to,Zr),e(Zr,QF),e(QF,xue),e(xue,PVo),e(QF,BVo),e(QF,oX),e(oX,IVo),e(QF,NVo),e(Zr,qVo),e(Zr,HF),e(HF,$ue),e($ue,jVo),e(HF,DVo),e(HF,rX),e(rX,GVo),e(HF,OVo),e(Zr,VVo),e(Zr,UF),e(UF,kue),e(kue,XVo),e(UF,zVo),e(UF,tX),e(tX,WVo),e(UF,QVo),e(Zr,HVo),e(Zr,JF),e(JF,Sue),e(Sue,UVo),e(JF,JVo),e(JF,aX),e(aX,YVo),e(JF,KVo),e(Zr,ZVo),e(Zr,YF),e(YF,Rue),e(Rue,eXo),e(YF,oXo),e(YF,nX),e(nX,rXo),e(YF,tXo),e(to,aXo),e(to,KF),e(KF,nXo),e(KF,Pue),e(Pue,sXo),e(KF,lXo),e(KF,Bue),e(Bue,iXo),e(to,dXo),M(ZF,to,null),b(m,vGe,_),b(m,ad,_),e(ad,e1),e(e1,Iue),M(x7,Iue,null),e(ad,cXo),e(ad,Nue),e(Nue,mXo),b(m,FGe,_),b(m,No,_),M($7,No,null),e(No,fXo),e(No,nd),e(nd,gXo),e(nd,sX),e(sX,hXo),e(nd,uXo),e(nd,lX),e(lX,pXo),e(nd,_Xo),e(No,bXo),e(No,k7),e(k7,vXo),e(k7,que),e(que,FXo),e(k7,TXo),e(No,MXo),e(No,gt),M(S7,gt,null),e(gt,EXo),e(gt,jue),e(jue,CXo),e(gt,wXo),e(gt,sd),e(sd,AXo),e(sd,Due),e(Due,LXo),e(sd,yXo),e(sd,iX),e(iX,xXo),e(sd,$Xo),e(gt,kXo),M(o1,gt,null),e(No,SXo),e(No,ao),M(R7,ao,null),e(ao,RXo),e(ao,Gue),e(Gue,PXo),e(ao,BXo),e(ao,Da),e(Da,IXo),e(Da,Oue),e(Oue,NXo),e(Da,qXo),e(Da,Vue),e(Vue,jXo),e(Da,DXo),e(Da,Xue),e(Xue,GXo),e(Da,OXo),e(ao,VXo),e(ao,U),e(U,r1),e(r1,zue),e(zue,XXo),e(r1,zXo),e(r1,dX),e(dX,WXo),e(r1,QXo),e(U,HXo),e(U,t1),e(t1,Wue),e(Wue,UXo),e(t1,JXo),e(t1,cX),e(cX,YXo),e(t1,KXo),e(U,ZXo),e(U,a1),e(a1,Que),e(Que,ezo),e(a1,ozo),e(a1,mX),e(mX,rzo),e(a1,tzo),e(U,azo),e(U,n1),e(n1,Hue),e(Hue,nzo),e(n1,szo),e(n1,fX),e(fX,lzo),e(n1,izo),e(U,dzo),e(U,s1),e(s1,Uue),e(Uue,czo),e(s1,mzo),e(s1,gX),e(gX,fzo),e(s1,gzo),e(U,hzo),e(U,l1),e(l1,Jue),e(Jue,uzo),e(l1,pzo),e(l1,hX),e(hX,_zo),e(l1,bzo),e(U,vzo),e(U,i1),e(i1,Yue),e(Yue,Fzo),e(i1,Tzo),e(i1,uX),e(uX,Mzo),e(i1,Ezo),e(U,Czo),e(U,d1),e(d1,Kue),e(Kue,wzo),e(d1,Azo),e(d1,pX),e(pX,Lzo),e(d1,yzo),e(U,xzo),e(U,c1),e(c1,Zue),e(Zue,$zo),e(c1,kzo),e(c1,_X),e(_X,Szo),e(c1,Rzo),e(U,Pzo),e(U,m1),e(m1,epe),e(epe,Bzo),e(m1,Izo),e(m1,bX),e(bX,Nzo),e(m1,qzo),e(U,jzo),e(U,f1),e(f1,ope),e(ope,Dzo),e(f1,Gzo),e(f1,vX),e(vX,Ozo),e(f1,Vzo),e(U,Xzo),e(U,g1),e(g1,rpe),e(rpe,zzo),e(g1,Wzo),e(g1,FX),e(FX,Qzo),e(g1,Hzo),e(U,Uzo),e(U,h1),e(h1,tpe),e(tpe,Jzo),e(h1,Yzo),e(h1,TX),e(TX,Kzo),e(h1,Zzo),e(U,eWo),e(U,u1),e(u1,ape),e(ape,oWo),e(u1,rWo),e(u1,MX),e(MX,tWo),e(u1,aWo),e(U,nWo),e(U,p1),e(p1,npe),e(npe,sWo),e(p1,lWo),e(p1,EX),e(EX,iWo),e(p1,dWo),e(U,cWo),e(U,_1),e(_1,spe),e(spe,mWo),e(_1,fWo),e(_1,CX),e(CX,gWo),e(_1,hWo),e(U,uWo),e(U,b1),e(b1,lpe),e(lpe,pWo),e(b1,_Wo),e(b1,wX),e(wX,bWo),e(b1,vWo),e(U,FWo),e(U,v1),e(v1,ipe),e(ipe,TWo),e(v1,MWo),e(v1,AX),e(AX,EWo),e(v1,CWo),e(U,wWo),e(U,F1),e(F1,dpe),e(dpe,AWo),e(F1,LWo),e(F1,LX),e(LX,yWo),e(F1,xWo),e(U,$Wo),e(U,T1),e(T1,cpe),e(cpe,kWo),e(T1,SWo),e(T1,yX),e(yX,RWo),e(T1,PWo),e(U,BWo),e(U,M1),e(M1,mpe),e(mpe,IWo),e(M1,NWo),e(M1,xX),e(xX,qWo),e(M1,jWo),e(U,DWo),e(U,E1),e(E1,fpe),e(fpe,GWo),e(E1,OWo),e(E1,$X),e($X,VWo),e(E1,XWo),e(U,zWo),e(U,C1),e(C1,gpe),e(gpe,WWo),e(C1,QWo),e(C1,kX),e(kX,HWo),e(C1,UWo),e(U,JWo),e(U,w1),e(w1,hpe),e(hpe,YWo),e(w1,KWo),e(w1,SX),e(SX,ZWo),e(w1,eQo),e(U,oQo),e(U,A1),e(A1,upe),e(upe,rQo),e(A1,tQo),e(A1,RX),e(RX,aQo),e(A1,nQo),e(U,sQo),e(U,L1),e(L1,ppe),e(ppe,lQo),e(L1,iQo),e(L1,PX),e(PX,dQo),e(L1,cQo),e(U,mQo),e(U,y1),e(y1,_pe),e(_pe,fQo),e(y1,gQo),e(y1,BX),e(BX,hQo),e(y1,uQo),e(U,pQo),e(U,x1),e(x1,bpe),e(bpe,_Qo),e(x1,bQo),e(x1,IX),e(IX,vQo),e(x1,FQo),e(U,TQo),e(U,$1),e($1,vpe),e(vpe,MQo),e($1,EQo),e($1,NX),e(NX,CQo),e($1,wQo),e(U,AQo),e(U,k1),e(k1,Fpe),e(Fpe,LQo),e(k1,yQo),e(k1,qX),e(qX,xQo),e(k1,$Qo),e(U,kQo),e(U,S1),e(S1,Tpe),e(Tpe,SQo),e(S1,RQo),e(S1,jX),e(jX,PQo),e(S1,BQo),e(U,IQo),e(U,R1),e(R1,Mpe),e(Mpe,NQo),e(R1,qQo),e(R1,DX),e(DX,jQo),e(R1,DQo),e(U,GQo),e(U,P1),e(P1,Epe),e(Epe,OQo),e(P1,VQo),e(P1,GX),e(GX,XQo),e(P1,zQo),e(U,WQo),e(U,B1),e(B1,Cpe),e(Cpe,QQo),e(B1,HQo),e(B1,OX),e(OX,UQo),e(B1,JQo),e(ao,YQo),e(ao,I1),e(I1,KQo),e(I1,wpe),e(wpe,ZQo),e(I1,eHo),e(I1,Ape),e(Ape,oHo),e(ao,rHo),M(N1,ao,null),b(m,TGe,_),b(m,ld,_),e(ld,q1),e(q1,Lpe),M(P7,Lpe,null),e(ld,tHo),e(ld,ype),e(ype,aHo),b(m,MGe,_),b(m,qo,_),M(B7,qo,null),e(qo,nHo),e(qo,id),e(id,sHo),e(id,VX),e(VX,lHo),e(id,iHo),e(id,XX),e(XX,dHo),e(id,cHo),e(qo,mHo),e(qo,I7),e(I7,fHo),e(I7,xpe),e(xpe,gHo),e(I7,hHo),e(qo,uHo),e(qo,ht),M(N7,ht,null),e(ht,pHo),e(ht,$pe),e($pe,_Ho),e(ht,bHo),e(ht,dd),e(dd,vHo),e(dd,kpe),e(kpe,FHo),e(dd,THo),e(dd,zX),e(zX,MHo),e(dd,EHo),e(ht,CHo),M(j1,ht,null),e(qo,wHo),e(qo,no),M(q7,no,null),e(no,AHo),e(no,Spe),e(Spe,LHo),e(no,yHo),e(no,Ga),e(Ga,xHo),e(Ga,Rpe),e(Rpe,$Ho),e(Ga,kHo),e(Ga,Ppe),e(Ppe,SHo),e(Ga,RHo),e(Ga,Bpe),e(Bpe,PHo),e(Ga,BHo),e(no,IHo),e(no,V),e(V,D1),e(D1,Ipe),e(Ipe,NHo),e(D1,qHo),e(D1,WX),e(WX,jHo),e(D1,DHo),e(V,GHo),e(V,G1),e(G1,Npe),e(Npe,OHo),e(G1,VHo),e(G1,QX),e(QX,XHo),e(G1,zHo),e(V,WHo),e(V,O1),e(O1,qpe),e(qpe,QHo),e(O1,HHo),e(O1,HX),e(HX,UHo),e(O1,JHo),e(V,YHo),e(V,V1),e(V1,jpe),e(jpe,KHo),e(V1,ZHo),e(V1,UX),e(UX,eUo),e(V1,oUo),e(V,rUo),e(V,X1),e(X1,Dpe),e(Dpe,tUo),e(X1,aUo),e(X1,JX),e(JX,nUo),e(X1,sUo),e(V,lUo),e(V,z1),e(z1,Gpe),e(Gpe,iUo),e(z1,dUo),e(z1,YX),e(YX,cUo),e(z1,mUo),e(V,fUo),e(V,W1),e(W1,Ope),e(Ope,gUo),e(W1,hUo),e(W1,KX),e(KX,uUo),e(W1,pUo),e(V,_Uo),e(V,Q1),e(Q1,Vpe),e(Vpe,bUo),e(Q1,vUo),e(Q1,ZX),e(ZX,FUo),e(Q1,TUo),e(V,MUo),e(V,H1),e(H1,Xpe),e(Xpe,EUo),e(H1,CUo),e(H1,ez),e(ez,wUo),e(H1,AUo),e(V,LUo),e(V,U1),e(U1,zpe),e(zpe,yUo),e(U1,xUo),e(U1,oz),e(oz,$Uo),e(U1,kUo),e(V,SUo),e(V,J1),e(J1,Wpe),e(Wpe,RUo),e(J1,PUo),e(J1,rz),e(rz,BUo),e(J1,IUo),e(V,NUo),e(V,Y1),e(Y1,Qpe),e(Qpe,qUo),e(Y1,jUo),e(Y1,tz),e(tz,DUo),e(Y1,GUo),e(V,OUo),e(V,K1),e(K1,Hpe),e(Hpe,VUo),e(K1,XUo),e(K1,az),e(az,zUo),e(K1,WUo),e(V,QUo),e(V,Z1),e(Z1,Upe),e(Upe,HUo),e(Z1,UUo),e(Z1,nz),e(nz,JUo),e(Z1,YUo),e(V,KUo),e(V,eT),e(eT,Jpe),e(Jpe,ZUo),e(eT,eJo),e(eT,sz),e(sz,oJo),e(eT,rJo),e(V,tJo),e(V,oT),e(oT,Ype),e(Ype,aJo),e(oT,nJo),e(oT,lz),e(lz,sJo),e(oT,lJo),e(V,iJo),e(V,rT),e(rT,Kpe),e(Kpe,dJo),e(rT,cJo),e(rT,iz),e(iz,mJo),e(rT,fJo),e(V,gJo),e(V,tT),e(tT,Zpe),e(Zpe,hJo),e(tT,uJo),e(tT,dz),e(dz,pJo),e(tT,_Jo),e(V,bJo),e(V,aT),e(aT,e_e),e(e_e,vJo),e(aT,FJo),e(aT,cz),e(cz,TJo),e(aT,MJo),e(V,EJo),e(V,nT),e(nT,o_e),e(o_e,CJo),e(nT,wJo),e(nT,mz),e(mz,AJo),e(nT,LJo),e(V,yJo),e(V,sT),e(sT,r_e),e(r_e,xJo),e(sT,$Jo),e(sT,fz),e(fz,kJo),e(sT,SJo),e(V,RJo),e(V,lT),e(lT,t_e),e(t_e,PJo),e(lT,BJo),e(lT,gz),e(gz,IJo),e(lT,NJo),e(V,qJo),e(V,iT),e(iT,a_e),e(a_e,jJo),e(iT,DJo),e(iT,hz),e(hz,GJo),e(iT,OJo),e(V,VJo),e(V,dT),e(dT,n_e),e(n_e,XJo),e(dT,zJo),e(dT,uz),e(uz,WJo),e(dT,QJo),e(V,HJo),e(V,cT),e(cT,s_e),e(s_e,UJo),e(cT,JJo),e(cT,pz),e(pz,YJo),e(cT,KJo),e(V,ZJo),e(V,mT),e(mT,l_e),e(l_e,eYo),e(mT,oYo),e(mT,_z),e(_z,rYo),e(mT,tYo),e(V,aYo),e(V,fT),e(fT,i_e),e(i_e,nYo),e(fT,sYo),e(fT,bz),e(bz,lYo),e(fT,iYo),e(V,dYo),e(V,gT),e(gT,d_e),e(d_e,cYo),e(gT,mYo),e(gT,vz),e(vz,fYo),e(gT,gYo),e(V,hYo),e(V,hT),e(hT,c_e),e(c_e,uYo),e(hT,pYo),e(hT,Fz),e(Fz,_Yo),e(hT,bYo),e(V,vYo),e(V,uT),e(uT,m_e),e(m_e,FYo),e(uT,TYo),e(uT,Tz),e(Tz,MYo),e(uT,EYo),e(V,CYo),e(V,pT),e(pT,f_e),e(f_e,wYo),e(pT,AYo),e(pT,Mz),e(Mz,LYo),e(pT,yYo),e(V,xYo),e(V,_T),e(_T,g_e),e(g_e,$Yo),e(_T,kYo),e(_T,Ez),e(Ez,SYo),e(_T,RYo),e(V,PYo),e(V,bT),e(bT,h_e),e(h_e,BYo),e(bT,IYo),e(bT,Cz),e(Cz,NYo),e(bT,qYo),e(V,jYo),e(V,vT),e(vT,u_e),e(u_e,DYo),e(vT,GYo),e(vT,wz),e(wz,OYo),e(vT,VYo),e(V,XYo),e(V,FT),e(FT,p_e),e(p_e,zYo),e(FT,WYo),e(FT,Az),e(Az,QYo),e(FT,HYo),e(V,UYo),e(V,TT),e(TT,__e),e(__e,JYo),e(TT,YYo),e(TT,Lz),e(Lz,KYo),e(TT,ZYo),e(V,eKo),e(V,MT),e(MT,b_e),e(b_e,oKo),e(MT,rKo),e(MT,yz),e(yz,tKo),e(MT,aKo),e(V,nKo),e(V,ET),e(ET,v_e),e(v_e,sKo),e(ET,lKo),e(ET,xz),e(xz,iKo),e(ET,dKo),e(V,cKo),e(V,CT),e(CT,F_e),e(F_e,mKo),e(CT,fKo),e(CT,$z),e($z,gKo),e(CT,hKo),e(V,uKo),e(V,wT),e(wT,T_e),e(T_e,pKo),e(wT,_Ko),e(wT,kz),e(kz,bKo),e(wT,vKo),e(no,FKo),e(no,AT),e(AT,TKo),e(AT,M_e),e(M_e,MKo),e(AT,EKo),e(AT,E_e),e(E_e,CKo),e(no,wKo),M(LT,no,null),b(m,EGe,_),b(m,cd,_),e(cd,yT),e(yT,C_e),M(j7,C_e,null),e(cd,AKo),e(cd,w_e),e(w_e,LKo),b(m,CGe,_),b(m,jo,_),M(D7,jo,null),e(jo,yKo),e(jo,md),e(md,xKo),e(md,Sz),e(Sz,$Ko),e(md,kKo),e(md,Rz),e(Rz,SKo),e(md,RKo),e(jo,PKo),e(jo,G7),e(G7,BKo),e(G7,A_e),e(A_e,IKo),e(G7,NKo),e(jo,qKo),e(jo,ut),M(O7,ut,null),e(ut,jKo),e(ut,L_e),e(L_e,DKo),e(ut,GKo),e(ut,fd),e(fd,OKo),e(fd,y_e),e(y_e,VKo),e(fd,XKo),e(fd,Pz),e(Pz,zKo),e(fd,WKo),e(ut,QKo),M(xT,ut,null),e(jo,HKo),e(jo,so),M(V7,so,null),e(so,UKo),e(so,x_e),e(x_e,JKo),e(so,YKo),e(so,Oa),e(Oa,KKo),e(Oa,$_e),e($_e,ZKo),e(Oa,eZo),e(Oa,k_e),e(k_e,oZo),e(Oa,rZo),e(Oa,S_e),e(S_e,tZo),e(Oa,aZo),e(so,nZo),e(so,R_e),e(R_e,$T),e($T,P_e),e(P_e,sZo),e($T,lZo),e($T,Bz),e(Bz,iZo),e($T,dZo),e(so,cZo),e(so,kT),e(kT,mZo),e(kT,B_e),e(B_e,fZo),e(kT,gZo),e(kT,I_e),e(I_e,hZo),e(so,uZo),M(ST,so,null),b(m,wGe,_),b(m,gd,_),e(gd,RT),e(RT,N_e),M(X7,N_e,null),e(gd,pZo),e(gd,q_e),e(q_e,_Zo),b(m,AGe,_),b(m,Do,_),M(z7,Do,null),e(Do,bZo),e(Do,hd),e(hd,vZo),e(hd,Iz),e(Iz,FZo),e(hd,TZo),e(hd,Nz),e(Nz,MZo),e(hd,EZo),e(Do,CZo),e(Do,W7),e(W7,wZo),e(W7,j_e),e(j_e,AZo),e(W7,LZo),e(Do,yZo),e(Do,pt),M(Q7,pt,null),e(pt,xZo),e(pt,D_e),e(D_e,$Zo),e(pt,kZo),e(pt,ud),e(ud,SZo),e(ud,G_e),e(G_e,RZo),e(ud,PZo),e(ud,qz),e(qz,BZo),e(ud,IZo),e(pt,NZo),M(PT,pt,null),e(Do,qZo),e(Do,lo),M(H7,lo,null),e(lo,jZo),e(lo,O_e),e(O_e,DZo),e(lo,GZo),e(lo,Va),e(Va,OZo),e(Va,V_e),e(V_e,VZo),e(Va,XZo),e(Va,X_e),e(X_e,zZo),e(Va,WZo),e(Va,z_e),e(z_e,QZo),e(Va,HZo),e(lo,UZo),e(lo,Fe),e(Fe,BT),e(BT,W_e),e(W_e,JZo),e(BT,YZo),e(BT,jz),e(jz,KZo),e(BT,ZZo),e(Fe,eer),e(Fe,IT),e(IT,Q_e),e(Q_e,oer),e(IT,rer),e(IT,Dz),e(Dz,ter),e(IT,aer),e(Fe,ner),e(Fe,NT),e(NT,H_e),e(H_e,ser),e(NT,ler),e(NT,Gz),e(Gz,ier),e(NT,der),e(Fe,cer),e(Fe,qT),e(qT,U_e),e(U_e,mer),e(qT,fer),e(qT,Oz),e(Oz,ger),e(qT,her),e(Fe,uer),e(Fe,Os),e(Os,J_e),e(J_e,per),e(Os,_er),e(Os,Vz),e(Vz,ber),e(Os,ver),e(Os,Xz),e(Xz,Fer),e(Os,Ter),e(Fe,Mer),e(Fe,jT),e(jT,Y_e),e(Y_e,Eer),e(jT,Cer),e(jT,zz),e(zz,wer),e(jT,Aer),e(Fe,Ler),e(Fe,Vs),e(Vs,K_e),e(K_e,yer),e(Vs,xer),e(Vs,Wz),e(Wz,$er),e(Vs,ker),e(Vs,Qz),e(Qz,Ser),e(Vs,Rer),e(Fe,Per),e(Fe,_t),e(_t,Z_e),e(Z_e,Ber),e(_t,Ier),e(_t,Hz),e(Hz,Ner),e(_t,qer),e(_t,Uz),e(Uz,jer),e(_t,Der),e(_t,Jz),e(Jz,Ger),e(_t,Oer),e(Fe,Ver),e(Fe,DT),e(DT,e2e),e(e2e,Xer),e(DT,zer),e(DT,Yz),e(Yz,Wer),e(DT,Qer),e(Fe,Her),e(Fe,GT),e(GT,o2e),e(o2e,Uer),e(GT,Jer),e(GT,Kz),e(Kz,Yer),e(GT,Ker),e(Fe,Zer),e(Fe,OT),e(OT,r2e),e(r2e,eor),e(OT,oor),e(OT,Zz),e(Zz,ror),e(OT,tor),e(Fe,aor),e(Fe,VT),e(VT,t2e),e(t2e,nor),e(VT,sor),e(VT,eW),e(eW,lor),e(VT,ior),e(Fe,dor),e(Fe,XT),e(XT,a2e),e(a2e,cor),e(XT,mor),e(XT,oW),e(oW,gor),e(XT,hor),e(Fe,uor),e(Fe,zT),e(zT,n2e),e(n2e,por),e(zT,_or),e(zT,rW),e(rW,bor),e(zT,vor),e(Fe,For),e(Fe,WT),e(WT,s2e),e(s2e,Tor),e(WT,Mor),e(WT,tW),e(tW,Eor),e(WT,Cor),e(lo,wor),e(lo,QT),e(QT,Aor),e(QT,l2e),e(l2e,Lor),e(QT,yor),e(QT,i2e),e(i2e,xor),e(lo,$or),M(HT,lo,null),b(m,LGe,_),b(m,pd,_),e(pd,UT),e(UT,d2e),M(U7,d2e,null),e(pd,kor),e(pd,c2e),e(c2e,Sor),b(m,yGe,_),b(m,Go,_),M(J7,Go,null),e(Go,Ror),e(Go,_d),e(_d,Por),e(_d,aW),e(aW,Bor),e(_d,Ior),e(_d,nW),e(nW,Nor),e(_d,qor),e(Go,jor),e(Go,Y7),e(Y7,Dor),e(Y7,m2e),e(m2e,Gor),e(Y7,Oor),e(Go,Vor),e(Go,bt),M(K7,bt,null),e(bt,Xor),e(bt,f2e),e(f2e,zor),e(bt,Wor),e(bt,bd),e(bd,Qor),e(bd,g2e),e(g2e,Hor),e(bd,Uor),e(bd,sW),e(sW,Jor),e(bd,Yor),e(bt,Kor),M(JT,bt,null),e(Go,Zor),e(Go,io),M(Z7,io,null),e(io,err),e(io,h2e),e(h2e,orr),e(io,rrr),e(io,Xa),e(Xa,trr),e(Xa,u2e),e(u2e,arr),e(Xa,nrr),e(Xa,p2e),e(p2e,srr),e(Xa,lrr),e(Xa,_2e),e(_2e,irr),e(Xa,drr),e(io,crr),e(io,b2e),e(b2e,YT),e(YT,v2e),e(v2e,mrr),e(YT,frr),e(YT,lW),e(lW,grr),e(YT,hrr),e(io,urr),e(io,KT),e(KT,prr),e(KT,F2e),e(F2e,_rr),e(KT,brr),e(KT,T2e),e(T2e,vrr),e(io,Frr),M(ZT,io,null),b(m,xGe,_),b(m,vd,_),e(vd,eM),e(eM,M2e),M(e8,M2e,null),e(vd,Trr),e(vd,E2e),e(E2e,Mrr),b(m,$Ge,_),b(m,Oo,_),M(o8,Oo,null),e(Oo,Err),e(Oo,Fd),e(Fd,Crr),e(Fd,iW),e(iW,wrr),e(Fd,Arr),e(Fd,dW),e(dW,Lrr),e(Fd,yrr),e(Oo,xrr),e(Oo,r8),e(r8,$rr),e(r8,C2e),e(C2e,krr),e(r8,Srr),e(Oo,Rrr),e(Oo,vt),M(t8,vt,null),e(vt,Prr),e(vt,w2e),e(w2e,Brr),e(vt,Irr),e(vt,Td),e(Td,Nrr),e(Td,A2e),e(A2e,qrr),e(Td,jrr),e(Td,cW),e(cW,Drr),e(Td,Grr),e(vt,Orr),M(oM,vt,null),e(Oo,Vrr),e(Oo,co),M(a8,co,null),e(co,Xrr),e(co,L2e),e(L2e,zrr),e(co,Wrr),e(co,za),e(za,Qrr),e(za,y2e),e(y2e,Hrr),e(za,Urr),e(za,x2e),e(x2e,Jrr),e(za,Yrr),e(za,$2e),e($2e,Krr),e(za,Zrr),e(co,etr),e(co,k2e),e(k2e,rM),e(rM,S2e),e(S2e,otr),e(rM,rtr),e(rM,mW),e(mW,ttr),e(rM,atr),e(co,ntr),e(co,tM),e(tM,str),e(tM,R2e),e(R2e,ltr),e(tM,itr),e(tM,P2e),e(P2e,dtr),e(co,ctr),M(aM,co,null),b(m,kGe,_),b(m,Md,_),e(Md,nM),e(nM,B2e),M(n8,B2e,null),e(Md,mtr),e(Md,I2e),e(I2e,ftr),b(m,SGe,_),b(m,Vo,_),M(s8,Vo,null),e(Vo,gtr),e(Vo,Ed),e(Ed,htr),e(Ed,fW),e(fW,utr),e(Ed,ptr),e(Ed,gW),e(gW,_tr),e(Ed,btr),e(Vo,vtr),e(Vo,l8),e(l8,Ftr),e(l8,N2e),e(N2e,Ttr),e(l8,Mtr),e(Vo,Etr),e(Vo,Ft),M(i8,Ft,null),e(Ft,Ctr),e(Ft,q2e),e(q2e,wtr),e(Ft,Atr),e(Ft,Cd),e(Cd,Ltr),e(Cd,j2e),e(j2e,ytr),e(Cd,xtr),e(Cd,hW),e(hW,$tr),e(Cd,ktr),e(Ft,Str),M(sM,Ft,null),e(Vo,Rtr),e(Vo,mo),M(d8,mo,null),e(mo,Ptr),e(mo,D2e),e(D2e,Btr),e(mo,Itr),e(mo,Wa),e(Wa,Ntr),e(Wa,G2e),e(G2e,qtr),e(Wa,jtr),e(Wa,O2e),e(O2e,Dtr),e(Wa,Gtr),e(Wa,V2e),e(V2e,Otr),e(Wa,Vtr),e(mo,Xtr),e(mo,Pe),e(Pe,lM),e(lM,X2e),e(X2e,ztr),e(lM,Wtr),e(lM,uW),e(uW,Qtr),e(lM,Htr),e(Pe,Utr),e(Pe,iM),e(iM,z2e),e(z2e,Jtr),e(iM,Ytr),e(iM,pW),e(pW,Ktr),e(iM,Ztr),e(Pe,ear),e(Pe,dM),e(dM,W2e),e(W2e,oar),e(dM,rar),e(dM,_W),e(_W,tar),e(dM,aar),e(Pe,nar),e(Pe,cM),e(cM,Q2e),e(Q2e,sar),e(cM,lar),e(cM,bW),e(bW,iar),e(cM,dar),e(Pe,car),e(Pe,mM),e(mM,H2e),e(H2e,mar),e(mM,far),e(mM,vW),e(vW,gar),e(mM,har),e(Pe,uar),e(Pe,fM),e(fM,U2e),e(U2e,par),e(fM,_ar),e(fM,FW),e(FW,bar),e(fM,Far),e(Pe,Tar),e(Pe,gM),e(gM,J2e),e(J2e,Mar),e(gM,Ear),e(gM,TW),e(TW,Car),e(gM,war),e(Pe,Aar),e(Pe,hM),e(hM,Y2e),e(Y2e,Lar),e(hM,yar),e(hM,MW),e(MW,xar),e(hM,$ar),e(Pe,kar),e(Pe,uM),e(uM,K2e),e(K2e,Sar),e(uM,Rar),e(uM,EW),e(EW,Par),e(uM,Bar),e(mo,Iar),e(mo,pM),e(pM,Nar),e(pM,Z2e),e(Z2e,qar),e(pM,jar),e(pM,ebe),e(ebe,Dar),e(mo,Gar),M(_M,mo,null),b(m,RGe,_),b(m,wd,_),e(wd,bM),e(bM,obe),M(c8,obe,null),e(wd,Oar),e(wd,rbe),e(rbe,Var),b(m,PGe,_),b(m,Xo,_),M(m8,Xo,null),e(Xo,Xar),e(Xo,Ad),e(Ad,zar),e(Ad,CW),e(CW,War),e(Ad,Qar),e(Ad,wW),e(wW,Har),e(Ad,Uar),e(Xo,Jar),e(Xo,f8),e(f8,Yar),e(f8,tbe),e(tbe,Kar),e(f8,Zar),e(Xo,enr),e(Xo,Tt),M(g8,Tt,null),e(Tt,onr),e(Tt,abe),e(abe,rnr),e(Tt,tnr),e(Tt,Ld),e(Ld,anr),e(Ld,nbe),e(nbe,nnr),e(Ld,snr),e(Ld,AW),e(AW,lnr),e(Ld,inr),e(Tt,dnr),M(vM,Tt,null),e(Xo,cnr),e(Xo,fo),M(h8,fo,null),e(fo,mnr),e(fo,sbe),e(sbe,fnr),e(fo,gnr),e(fo,Qa),e(Qa,hnr),e(Qa,lbe),e(lbe,unr),e(Qa,pnr),e(Qa,ibe),e(ibe,_nr),e(Qa,bnr),e(Qa,dbe),e(dbe,vnr),e(Qa,Fnr),e(fo,Tnr),e(fo,et),e(et,FM),e(FM,cbe),e(cbe,Mnr),e(FM,Enr),e(FM,LW),e(LW,Cnr),e(FM,wnr),e(et,Anr),e(et,TM),e(TM,mbe),e(mbe,Lnr),e(TM,ynr),e(TM,yW),e(yW,xnr),e(TM,$nr),e(et,knr),e(et,MM),e(MM,fbe),e(fbe,Snr),e(MM,Rnr),e(MM,xW),e(xW,Pnr),e(MM,Bnr),e(et,Inr),e(et,EM),e(EM,gbe),e(gbe,Nnr),e(EM,qnr),e(EM,$W),e($W,jnr),e(EM,Dnr),e(et,Gnr),e(et,CM),e(CM,hbe),e(hbe,Onr),e(CM,Vnr),e(CM,kW),e(kW,Xnr),e(CM,znr),e(fo,Wnr),e(fo,wM),e(wM,Qnr),e(wM,ube),e(ube,Hnr),e(wM,Unr),e(wM,pbe),e(pbe,Jnr),e(fo,Ynr),M(AM,fo,null),b(m,BGe,_),b(m,yd,_),e(yd,LM),e(LM,_be),M(u8,_be,null),e(yd,Knr),e(yd,bbe),e(bbe,Znr),b(m,IGe,_),b(m,zo,_),M(p8,zo,null),e(zo,esr),e(zo,xd),e(xd,osr),e(xd,SW),e(SW,rsr),e(xd,tsr),e(xd,RW),e(RW,asr),e(xd,nsr),e(zo,ssr),e(zo,_8),e(_8,lsr),e(_8,vbe),e(vbe,isr),e(_8,dsr),e(zo,csr),e(zo,Mt),M(b8,Mt,null),e(Mt,msr),e(Mt,Fbe),e(Fbe,fsr),e(Mt,gsr),e(Mt,$d),e($d,hsr),e($d,Tbe),e(Tbe,usr),e($d,psr),e($d,PW),e(PW,_sr),e($d,bsr),e(Mt,vsr),M(yM,Mt,null),e(zo,Fsr),e(zo,go),M(v8,go,null),e(go,Tsr),e(go,Mbe),e(Mbe,Msr),e(go,Esr),e(go,Ha),e(Ha,Csr),e(Ha,Ebe),e(Ebe,wsr),e(Ha,Asr),e(Ha,Cbe),e(Cbe,Lsr),e(Ha,ysr),e(Ha,wbe),e(wbe,xsr),e(Ha,$sr),e(go,ksr),e(go,Le),e(Le,xM),e(xM,Abe),e(Abe,Ssr),e(xM,Rsr),e(xM,BW),e(BW,Psr),e(xM,Bsr),e(Le,Isr),e(Le,$M),e($M,Lbe),e(Lbe,Nsr),e($M,qsr),e($M,IW),e(IW,jsr),e($M,Dsr),e(Le,Gsr),e(Le,kM),e(kM,ybe),e(ybe,Osr),e(kM,Vsr),e(kM,NW),e(NW,Xsr),e(kM,zsr),e(Le,Wsr),e(Le,SM),e(SM,xbe),e(xbe,Qsr),e(SM,Hsr),e(SM,qW),e(qW,Usr),e(SM,Jsr),e(Le,Ysr),e(Le,RM),e(RM,$be),e($be,Ksr),e(RM,Zsr),e(RM,jW),e(jW,elr),e(RM,olr),e(Le,rlr),e(Le,PM),e(PM,kbe),e(kbe,tlr),e(PM,alr),e(PM,DW),e(DW,nlr),e(PM,slr),e(Le,llr),e(Le,BM),e(BM,Sbe),e(Sbe,ilr),e(BM,dlr),e(BM,GW),e(GW,clr),e(BM,mlr),e(Le,flr),e(Le,IM),e(IM,Rbe),e(Rbe,glr),e(IM,hlr),e(IM,OW),e(OW,ulr),e(IM,plr),e(Le,_lr),e(Le,NM),e(NM,Pbe),e(Pbe,blr),e(NM,vlr),e(NM,VW),e(VW,Flr),e(NM,Tlr),e(Le,Mlr),e(Le,qM),e(qM,Bbe),e(Bbe,Elr),e(qM,Clr),e(qM,XW),e(XW,wlr),e(qM,Alr),e(go,Llr),e(go,jM),e(jM,ylr),e(jM,Ibe),e(Ibe,xlr),e(jM,$lr),e(jM,Nbe),e(Nbe,klr),e(go,Slr),M(DM,go,null),b(m,NGe,_),b(m,kd,_),e(kd,GM),e(GM,qbe),M(F8,qbe,null),e(kd,Rlr),e(kd,jbe),e(jbe,Plr),b(m,qGe,_),b(m,Wo,_),M(T8,Wo,null),e(Wo,Blr),e(Wo,Sd),e(Sd,Ilr),e(Sd,zW),e(zW,Nlr),e(Sd,qlr),e(Sd,WW),e(WW,jlr),e(Sd,Dlr),e(Wo,Glr),e(Wo,M8),e(M8,Olr),e(M8,Dbe),e(Dbe,Vlr),e(M8,Xlr),e(Wo,zlr),e(Wo,Et),M(E8,Et,null),e(Et,Wlr),e(Et,Gbe),e(Gbe,Qlr),e(Et,Hlr),e(Et,Rd),e(Rd,Ulr),e(Rd,Obe),e(Obe,Jlr),e(Rd,Ylr),e(Rd,QW),e(QW,Klr),e(Rd,Zlr),e(Et,eir),M(OM,Et,null),e(Wo,oir),e(Wo,ho),M(C8,ho,null),e(ho,rir),e(ho,Vbe),e(Vbe,tir),e(ho,air),e(ho,Ua),e(Ua,nir),e(Ua,Xbe),e(Xbe,sir),e(Ua,lir),e(Ua,zbe),e(zbe,iir),e(Ua,dir),e(Ua,Wbe),e(Wbe,cir),e(Ua,mir),e(ho,fir),e(ho,w8),e(w8,VM),e(VM,Qbe),e(Qbe,gir),e(VM,hir),e(VM,HW),e(HW,uir),e(VM,pir),e(w8,_ir),e(w8,XM),e(XM,Hbe),e(Hbe,bir),e(XM,vir),e(XM,UW),e(UW,Fir),e(XM,Tir),e(ho,Mir),e(ho,zM),e(zM,Eir),e(zM,Ube),e(Ube,Cir),e(zM,wir),e(zM,Jbe),e(Jbe,Air),e(ho,Lir),M(WM,ho,null),b(m,jGe,_),b(m,Pd,_),e(Pd,QM),e(QM,Ybe),M(A8,Ybe,null),e(Pd,yir),e(Pd,Kbe),e(Kbe,xir),b(m,DGe,_),b(m,Qo,_),M(L8,Qo,null),e(Qo,$ir),e(Qo,Bd),e(Bd,kir),e(Bd,JW),e(JW,Sir),e(Bd,Rir),e(Bd,YW),e(YW,Pir),e(Bd,Bir),e(Qo,Iir),e(Qo,y8),e(y8,Nir),e(y8,Zbe),e(Zbe,qir),e(y8,jir),e(Qo,Dir),e(Qo,Ct),M(x8,Ct,null),e(Ct,Gir),e(Ct,eve),e(eve,Oir),e(Ct,Vir),e(Ct,Id),e(Id,Xir),e(Id,ove),e(ove,zir),e(Id,Wir),e(Id,KW),e(KW,Qir),e(Id,Hir),e(Ct,Uir),M(HM,Ct,null),e(Qo,Jir),e(Qo,uo),M($8,uo,null),e(uo,Yir),e(uo,rve),e(rve,Kir),e(uo,Zir),e(uo,Ja),e(Ja,edr),e(Ja,tve),e(tve,odr),e(Ja,rdr),e(Ja,ave),e(ave,tdr),e(Ja,adr),e(Ja,nve),e(nve,ndr),e(Ja,sdr),e(uo,ldr),e(uo,ot),e(ot,UM),e(UM,sve),e(sve,idr),e(UM,ddr),e(UM,ZW),e(ZW,cdr),e(UM,mdr),e(ot,fdr),e(ot,JM),e(JM,lve),e(lve,gdr),e(JM,hdr),e(JM,eQ),e(eQ,udr),e(JM,pdr),e(ot,_dr),e(ot,YM),e(YM,ive),e(ive,bdr),e(YM,vdr),e(YM,oQ),e(oQ,Fdr),e(YM,Tdr),e(ot,Mdr),e(ot,KM),e(KM,dve),e(dve,Edr),e(KM,Cdr),e(KM,rQ),e(rQ,wdr),e(KM,Adr),e(ot,Ldr),e(ot,ZM),e(ZM,cve),e(cve,ydr),e(ZM,xdr),e(ZM,tQ),e(tQ,$dr),e(ZM,kdr),e(uo,Sdr),e(uo,e4),e(e4,Rdr),e(e4,mve),e(mve,Pdr),e(e4,Bdr),e(e4,fve),e(fve,Idr),e(uo,Ndr),M(o4,uo,null),b(m,GGe,_),b(m,Nd,_),e(Nd,r4),e(r4,gve),M(k8,gve,null),e(Nd,qdr),e(Nd,hve),e(hve,jdr),b(m,OGe,_),b(m,Ho,_),M(S8,Ho,null),e(Ho,Ddr),e(Ho,qd),e(qd,Gdr),e(qd,aQ),e(aQ,Odr),e(qd,Vdr),e(qd,nQ),e(nQ,Xdr),e(qd,zdr),e(Ho,Wdr),e(Ho,R8),e(R8,Qdr),e(R8,uve),e(uve,Hdr),e(R8,Udr),e(Ho,Jdr),e(Ho,wt),M(P8,wt,null),e(wt,Ydr),e(wt,pve),e(pve,Kdr),e(wt,Zdr),e(wt,jd),e(jd,ecr),e(jd,_ve),e(_ve,ocr),e(jd,rcr),e(jd,sQ),e(sQ,tcr),e(jd,acr),e(wt,ncr),M(t4,wt,null),e(Ho,scr),e(Ho,po),M(B8,po,null),e(po,lcr),e(po,bve),e(bve,icr),e(po,dcr),e(po,Ya),e(Ya,ccr),e(Ya,vve),e(vve,mcr),e(Ya,fcr),e(Ya,Fve),e(Fve,gcr),e(Ya,hcr),e(Ya,Tve),e(Tve,ucr),e(Ya,pcr),e(po,_cr),e(po,Dd),e(Dd,a4),e(a4,Mve),e(Mve,bcr),e(a4,vcr),e(a4,lQ),e(lQ,Fcr),e(a4,Tcr),e(Dd,Mcr),e(Dd,n4),e(n4,Eve),e(Eve,Ecr),e(n4,Ccr),e(n4,iQ),e(iQ,wcr),e(n4,Acr),e(Dd,Lcr),e(Dd,s4),e(s4,Cve),e(Cve,ycr),e(s4,xcr),e(s4,dQ),e(dQ,$cr),e(s4,kcr),e(po,Scr),e(po,l4),e(l4,Rcr),e(l4,wve),e(wve,Pcr),e(l4,Bcr),e(l4,Ave),e(Ave,Icr),e(po,Ncr),M(i4,po,null),b(m,VGe,_),b(m,Gd,_),e(Gd,d4),e(d4,Lve),M(I8,Lve,null),e(Gd,qcr),e(Gd,yve),e(yve,jcr),b(m,XGe,_),b(m,Uo,_),M(N8,Uo,null),e(Uo,Dcr),e(Uo,Od),e(Od,Gcr),e(Od,cQ),e(cQ,Ocr),e(Od,Vcr),e(Od,mQ),e(mQ,Xcr),e(Od,zcr),e(Uo,Wcr),e(Uo,q8),e(q8,Qcr),e(q8,xve),e(xve,Hcr),e(q8,Ucr),e(Uo,Jcr),e(Uo,At),M(j8,At,null),e(At,Ycr),e(At,$ve),e($ve,Kcr),e(At,Zcr),e(At,Vd),e(Vd,emr),e(Vd,kve),e(kve,omr),e(Vd,rmr),e(Vd,fQ),e(fQ,tmr),e(Vd,amr),e(At,nmr),M(c4,At,null),e(Uo,smr),e(Uo,_o),M(D8,_o,null),e(_o,lmr),e(_o,Sve),e(Sve,imr),e(_o,dmr),e(_o,Ka),e(Ka,cmr),e(Ka,Rve),e(Rve,mmr),e(Ka,fmr),e(Ka,Pve),e(Pve,gmr),e(Ka,hmr),e(Ka,Bve),e(Bve,umr),e(Ka,pmr),e(_o,_mr),e(_o,G8),e(G8,m4),e(m4,Ive),e(Ive,bmr),e(m4,vmr),e(m4,gQ),e(gQ,Fmr),e(m4,Tmr),e(G8,Mmr),e(G8,f4),e(f4,Nve),e(Nve,Emr),e(f4,Cmr),e(f4,hQ),e(hQ,wmr),e(f4,Amr),e(_o,Lmr),e(_o,g4),e(g4,ymr),e(g4,qve),e(qve,xmr),e(g4,$mr),e(g4,jve),e(jve,kmr),e(_o,Smr),M(h4,_o,null),b(m,zGe,_),b(m,Xd,_),e(Xd,u4),e(u4,Dve),M(O8,Dve,null),e(Xd,Rmr),e(Xd,Gve),e(Gve,Pmr),b(m,WGe,_),b(m,Jo,_),M(V8,Jo,null),e(Jo,Bmr),e(Jo,zd),e(zd,Imr),e(zd,uQ),e(uQ,Nmr),e(zd,qmr),e(zd,pQ),e(pQ,jmr),e(zd,Dmr),e(Jo,Gmr),e(Jo,X8),e(X8,Omr),e(X8,Ove),e(Ove,Vmr),e(X8,Xmr),e(Jo,zmr),e(Jo,Lt),M(z8,Lt,null),e(Lt,Wmr),e(Lt,Vve),e(Vve,Qmr),e(Lt,Hmr),e(Lt,Wd),e(Wd,Umr),e(Wd,Xve),e(Xve,Jmr),e(Wd,Ymr),e(Wd,_Q),e(_Q,Kmr),e(Wd,Zmr),e(Lt,efr),M(p4,Lt,null),e(Jo,ofr),e(Jo,bo),M(W8,bo,null),e(bo,rfr),e(bo,zve),e(zve,tfr),e(bo,afr),e(bo,Za),e(Za,nfr),e(Za,Wve),e(Wve,sfr),e(Za,lfr),e(Za,Qve),e(Qve,ifr),e(Za,dfr),e(Za,Hve),e(Hve,cfr),e(Za,mfr),e(bo,ffr),e(bo,Uve),e(Uve,_4),e(_4,Jve),e(Jve,gfr),e(_4,hfr),e(_4,bQ),e(bQ,ufr),e(_4,pfr),e(bo,_fr),e(bo,b4),e(b4,bfr),e(b4,Yve),e(Yve,vfr),e(b4,Ffr),e(b4,Kve),e(Kve,Tfr),e(bo,Mfr),M(v4,bo,null),b(m,QGe,_),b(m,Qd,_),e(Qd,F4),e(F4,Zve),M(Q8,Zve,null),e(Qd,Efr),e(Qd,eFe),e(eFe,Cfr),b(m,HGe,_),b(m,Yo,_),M(H8,Yo,null),e(Yo,wfr),e(Yo,Hd),e(Hd,Afr),e(Hd,vQ),e(vQ,Lfr),e(Hd,yfr),e(Hd,FQ),e(FQ,xfr),e(Hd,$fr),e(Yo,kfr),e(Yo,U8),e(U8,Sfr),e(U8,oFe),e(oFe,Rfr),e(U8,Pfr),e(Yo,Bfr),e(Yo,yt),M(J8,yt,null),e(yt,Ifr),e(yt,rFe),e(rFe,Nfr),e(yt,qfr),e(yt,Ud),e(Ud,jfr),e(Ud,tFe),e(tFe,Dfr),e(Ud,Gfr),e(Ud,TQ),e(TQ,Ofr),e(Ud,Vfr),e(yt,Xfr),M(T4,yt,null),e(Yo,zfr),e(Yo,vo),M(Y8,vo,null),e(vo,Wfr),e(vo,aFe),e(aFe,Qfr),e(vo,Hfr),e(vo,en),e(en,Ufr),e(en,nFe),e(nFe,Jfr),e(en,Yfr),e(en,sFe),e(sFe,Kfr),e(en,Zfr),e(en,lFe),e(lFe,egr),e(en,ogr),e(vo,rgr),e(vo,on),e(on,M4),e(M4,iFe),e(iFe,tgr),e(M4,agr),e(M4,MQ),e(MQ,ngr),e(M4,sgr),e(on,lgr),e(on,E4),e(E4,dFe),e(dFe,igr),e(E4,dgr),e(E4,EQ),e(EQ,cgr),e(E4,mgr),e(on,fgr),e(on,C4),e(C4,cFe),e(cFe,ggr),e(C4,hgr),e(C4,CQ),e(CQ,ugr),e(C4,pgr),e(on,_gr),e(on,w4),e(w4,mFe),e(mFe,bgr),e(w4,vgr),e(w4,wQ),e(wQ,Fgr),e(w4,Tgr),e(vo,Mgr),e(vo,A4),e(A4,Egr),e(A4,fFe),e(fFe,Cgr),e(A4,wgr),e(A4,gFe),e(gFe,Agr),e(vo,Lgr),M(L4,vo,null),b(m,UGe,_),b(m,Jd,_),e(Jd,y4),e(y4,hFe),M(K8,hFe,null),e(Jd,ygr),e(Jd,uFe),e(uFe,xgr),b(m,JGe,_),b(m,Ko,_),M(Z8,Ko,null),e(Ko,$gr),e(Ko,Yd),e(Yd,kgr),e(Yd,AQ),e(AQ,Sgr),e(Yd,Rgr),e(Yd,LQ),e(LQ,Pgr),e(Yd,Bgr),e(Ko,Igr),e(Ko,e9),e(e9,Ngr),e(e9,pFe),e(pFe,qgr),e(e9,jgr),e(Ko,Dgr),e(Ko,xt),M(o9,xt,null),e(xt,Ggr),e(xt,_Fe),e(_Fe,Ogr),e(xt,Vgr),e(xt,Kd),e(Kd,Xgr),e(Kd,bFe),e(bFe,zgr),e(Kd,Wgr),e(Kd,yQ),e(yQ,Qgr),e(Kd,Hgr),e(xt,Ugr),M(x4,xt,null),e(Ko,Jgr),e(Ko,Fo),M(r9,Fo,null),e(Fo,Ygr),e(Fo,vFe),e(vFe,Kgr),e(Fo,Zgr),e(Fo,rn),e(rn,ehr),e(rn,FFe),e(FFe,ohr),e(rn,rhr),e(rn,TFe),e(TFe,thr),e(rn,ahr),e(rn,MFe),e(MFe,nhr),e(rn,shr),e(Fo,lhr),e(Fo,EFe),e(EFe,$4),e($4,CFe),e(CFe,ihr),e($4,dhr),e($4,xQ),e(xQ,chr),e($4,mhr),e(Fo,fhr),e(Fo,k4),e(k4,ghr),e(k4,wFe),e(wFe,hhr),e(k4,uhr),e(k4,AFe),e(AFe,phr),e(Fo,_hr),M(S4,Fo,null),b(m,YGe,_),b(m,Zd,_),e(Zd,R4),e(R4,LFe),M(t9,LFe,null),e(Zd,bhr),e(Zd,yFe),e(yFe,vhr),b(m,KGe,_),b(m,Zo,_),M(a9,Zo,null),e(Zo,Fhr),e(Zo,ec),e(ec,Thr),e(ec,$Q),e($Q,Mhr),e(ec,Ehr),e(ec,kQ),e(kQ,Chr),e(ec,whr),e(Zo,Ahr),e(Zo,n9),e(n9,Lhr),e(n9,xFe),e(xFe,yhr),e(n9,xhr),e(Zo,$hr),e(Zo,$t),M(s9,$t,null),e($t,khr),e($t,$Fe),e($Fe,Shr),e($t,Rhr),e($t,oc),e(oc,Phr),e(oc,kFe),e(kFe,Bhr),e(oc,Ihr),e(oc,SQ),e(SQ,Nhr),e(oc,qhr),e($t,jhr),M(P4,$t,null),e(Zo,Dhr),e(Zo,Lr),M(l9,Lr,null),e(Lr,Ghr),e(Lr,SFe),e(SFe,Ohr),e(Lr,Vhr),e(Lr,tn),e(tn,Xhr),e(tn,RFe),e(RFe,zhr),e(tn,Whr),e(tn,PFe),e(PFe,Qhr),e(tn,Hhr),e(tn,BFe),e(BFe,Uhr),e(tn,Jhr),e(Lr,Yhr),e(Lr,q),e(q,B4),e(B4,IFe),e(IFe,Khr),e(B4,Zhr),e(B4,RQ),e(RQ,eur),e(B4,our),e(q,rur),e(q,I4),e(I4,NFe),e(NFe,tur),e(I4,aur),e(I4,PQ),e(PQ,nur),e(I4,sur),e(q,lur),e(q,N4),e(N4,qFe),e(qFe,iur),e(N4,dur),e(N4,BQ),e(BQ,cur),e(N4,mur),e(q,fur),e(q,q4),e(q4,jFe),e(jFe,gur),e(q4,hur),e(q4,IQ),e(IQ,uur),e(q4,pur),e(q,_ur),e(q,j4),e(j4,DFe),e(DFe,bur),e(j4,vur),e(j4,NQ),e(NQ,Fur),e(j4,Tur),e(q,Mur),e(q,D4),e(D4,GFe),e(GFe,Eur),e(D4,Cur),e(D4,qQ),e(qQ,wur),e(D4,Aur),e(q,Lur),e(q,G4),e(G4,OFe),e(OFe,yur),e(G4,xur),e(G4,jQ),e(jQ,$ur),e(G4,kur),e(q,Sur),e(q,O4),e(O4,VFe),e(VFe,Rur),e(O4,Pur),e(O4,DQ),e(DQ,Bur),e(O4,Iur),e(q,Nur),e(q,V4),e(V4,XFe),e(XFe,qur),e(V4,jur),e(V4,GQ),e(GQ,Dur),e(V4,Gur),e(q,Our),e(q,X4),e(X4,zFe),e(zFe,Vur),e(X4,Xur),e(X4,OQ),e(OQ,zur),e(X4,Wur),e(q,Qur),e(q,z4),e(z4,WFe),e(WFe,Hur),e(z4,Uur),e(z4,VQ),e(VQ,Jur),e(z4,Yur),e(q,Kur),e(q,W4),e(W4,QFe),e(QFe,Zur),e(W4,epr),e(W4,XQ),e(XQ,opr),e(W4,rpr),e(q,tpr),e(q,Q4),e(Q4,HFe),e(HFe,apr),e(Q4,npr),e(Q4,zQ),e(zQ,spr),e(Q4,lpr),e(q,ipr),e(q,H4),e(H4,UFe),e(UFe,dpr),e(H4,cpr),e(H4,WQ),e(WQ,mpr),e(H4,fpr),e(q,gpr),e(q,U4),e(U4,JFe),e(JFe,hpr),e(U4,upr),e(U4,QQ),e(QQ,ppr),e(U4,_pr),e(q,bpr),e(q,J4),e(J4,YFe),e(YFe,vpr),e(J4,Fpr),e(J4,HQ),e(HQ,Tpr),e(J4,Mpr),e(q,Epr),e(q,Y4),e(Y4,KFe),e(KFe,Cpr),e(Y4,wpr),e(Y4,UQ),e(UQ,Apr),e(Y4,Lpr),e(q,ypr),e(q,Xs),e(Xs,ZFe),e(ZFe,xpr),e(Xs,$pr),e(Xs,JQ),e(JQ,kpr),e(Xs,Spr),e(Xs,YQ),e(YQ,Rpr),e(Xs,Ppr),e(q,Bpr),e(q,K4),e(K4,e1e),e(e1e,Ipr),e(K4,Npr),e(K4,KQ),e(KQ,qpr),e(K4,jpr),e(q,Dpr),e(q,Z4),e(Z4,o1e),e(o1e,Gpr),e(Z4,Opr),e(Z4,ZQ),e(ZQ,Vpr),e(Z4,Xpr),e(q,zpr),e(q,eE),e(eE,r1e),e(r1e,Wpr),e(eE,Qpr),e(eE,eH),e(eH,Hpr),e(eE,Upr),e(q,Jpr),e(q,oE),e(oE,t1e),e(t1e,Ypr),e(oE,Kpr),e(oE,oH),e(oH,Zpr),e(oE,e_r),e(q,o_r),e(q,rE),e(rE,a1e),e(a1e,r_r),e(rE,t_r),e(rE,rH),e(rH,a_r),e(rE,n_r),e(q,s_r),e(q,tE),e(tE,n1e),e(n1e,l_r),e(tE,i_r),e(tE,tH),e(tH,d_r),e(tE,c_r),e(q,m_r),e(q,aE),e(aE,s1e),e(s1e,f_r),e(aE,g_r),e(aE,aH),e(aH,h_r),e(aE,u_r),e(q,p_r),e(q,nE),e(nE,l1e),e(l1e,__r),e(nE,b_r),e(nE,nH),e(nH,v_r),e(nE,F_r),e(q,T_r),e(q,sE),e(sE,i1e),e(i1e,M_r),e(sE,E_r),e(sE,sH),e(sH,C_r),e(sE,w_r),e(q,A_r),e(q,lE),e(lE,d1e),e(d1e,L_r),e(lE,y_r),e(lE,lH),e(lH,x_r),e(lE,$_r),e(q,k_r),e(q,iE),e(iE,c1e),e(c1e,S_r),e(iE,R_r),e(iE,iH),e(iH,P_r),e(iE,B_r),e(q,I_r),e(q,dE),e(dE,m1e),e(m1e,N_r),e(dE,q_r),e(dE,dH),e(dH,j_r),e(dE,D_r),e(q,G_r),e(q,cE),e(cE,f1e),e(f1e,O_r),e(cE,V_r),e(cE,cH),e(cH,X_r),e(cE,z_r),e(q,W_r),e(q,mE),e(mE,g1e),e(g1e,Q_r),e(mE,H_r),e(mE,mH),e(mH,U_r),e(mE,J_r),e(q,Y_r),e(q,fE),e(fE,h1e),e(h1e,K_r),e(fE,Z_r),e(fE,fH),e(fH,e2r),e(fE,o2r),e(q,r2r),e(q,gE),e(gE,u1e),e(u1e,t2r),e(gE,a2r),e(gE,gH),e(gH,n2r),e(gE,s2r),e(q,l2r),e(q,hE),e(hE,p1e),e(p1e,i2r),e(hE,d2r),e(hE,hH),e(hH,c2r),e(hE,m2r),e(q,f2r),e(q,uE),e(uE,_1e),e(_1e,g2r),e(uE,h2r),e(uE,uH),e(uH,u2r),e(uE,p2r),e(q,_2r),e(q,pE),e(pE,b1e),e(b1e,b2r),e(pE,v2r),e(pE,pH),e(pH,F2r),e(pE,T2r),e(q,M2r),e(q,_E),e(_E,v1e),e(v1e,E2r),e(_E,C2r),e(_E,_H),e(_H,w2r),e(_E,A2r),e(q,L2r),e(q,bE),e(bE,F1e),e(F1e,y2r),e(bE,x2r),e(bE,bH),e(bH,$2r),e(bE,k2r),e(q,S2r),e(q,vE),e(vE,T1e),e(T1e,R2r),e(vE,P2r),e(vE,vH),e(vH,B2r),e(vE,I2r),e(q,N2r),e(q,FE),e(FE,M1e),e(M1e,q2r),e(FE,j2r),e(FE,FH),e(FH,D2r),e(FE,G2r),e(q,O2r),e(q,TE),e(TE,E1e),e(E1e,V2r),e(TE,X2r),e(TE,TH),e(TH,z2r),e(TE,W2r),e(q,Q2r),e(q,ME),e(ME,C1e),e(C1e,H2r),e(ME,U2r),e(ME,MH),e(MH,J2r),e(ME,Y2r),e(q,K2r),e(q,EE),e(EE,w1e),e(w1e,Z2r),e(EE,ebr),e(EE,EH),e(EH,obr),e(EE,rbr),e(q,tbr),e(q,CE),e(CE,A1e),e(A1e,abr),e(CE,nbr),e(CE,CH),e(CH,sbr),e(CE,lbr),e(q,ibr),e(q,wE),e(wE,L1e),e(L1e,dbr),e(wE,cbr),e(wE,wH),e(wH,mbr),e(wE,fbr),e(q,gbr),e(q,AE),e(AE,y1e),e(y1e,hbr),e(AE,ubr),e(AE,AH),e(AH,pbr),e(AE,_br),e(Lr,bbr),M(LE,Lr,null),b(m,ZGe,_),b(m,rc,_),e(rc,yE),e(yE,x1e),M(i9,x1e,null),e(rc,vbr),e(rc,$1e),e($1e,Fbr),b(m,eOe,_),b(m,er,_),M(d9,er,null),e(er,Tbr),e(er,tc),e(tc,Mbr),e(tc,LH),e(LH,Ebr),e(tc,Cbr),e(tc,yH),e(yH,wbr),e(tc,Abr),e(er,Lbr),e(er,c9),e(c9,ybr),e(c9,k1e),e(k1e,xbr),e(c9,$br),e(er,kbr),e(er,kt),M(m9,kt,null),e(kt,Sbr),e(kt,S1e),e(S1e,Rbr),e(kt,Pbr),e(kt,ac),e(ac,Bbr),e(ac,R1e),e(R1e,Ibr),e(ac,Nbr),e(ac,xH),e(xH,qbr),e(ac,jbr),e(kt,Dbr),M(xE,kt,null),e(er,Gbr),e(er,yr),M(f9,yr,null),e(yr,Obr),e(yr,P1e),e(P1e,Vbr),e(yr,Xbr),e(yr,an),e(an,zbr),e(an,B1e),e(B1e,Wbr),e(an,Qbr),e(an,I1e),e(I1e,Hbr),e(an,Ubr),e(an,N1e),e(N1e,Jbr),e(an,Ybr),e(yr,Kbr),e(yr,se),e(se,$E),e($E,q1e),e(q1e,Zbr),e($E,evr),e($E,$H),e($H,ovr),e($E,rvr),e(se,tvr),e(se,kE),e(kE,j1e),e(j1e,avr),e(kE,nvr),e(kE,kH),e(kH,svr),e(kE,lvr),e(se,ivr),e(se,SE),e(SE,D1e),e(D1e,dvr),e(SE,cvr),e(SE,SH),e(SH,mvr),e(SE,fvr),e(se,gvr),e(se,RE),e(RE,G1e),e(G1e,hvr),e(RE,uvr),e(RE,RH),e(RH,pvr),e(RE,_vr),e(se,bvr),e(se,PE),e(PE,O1e),e(O1e,vvr),e(PE,Fvr),e(PE,PH),e(PH,Tvr),e(PE,Mvr),e(se,Evr),e(se,BE),e(BE,V1e),e(V1e,Cvr),e(BE,wvr),e(BE,BH),e(BH,Avr),e(BE,Lvr),e(se,yvr),e(se,IE),e(IE,X1e),e(X1e,xvr),e(IE,$vr),e(IE,IH),e(IH,kvr),e(IE,Svr),e(se,Rvr),e(se,NE),e(NE,z1e),e(z1e,Pvr),e(NE,Bvr),e(NE,NH),e(NH,Ivr),e(NE,Nvr),e(se,qvr),e(se,qE),e(qE,W1e),e(W1e,jvr),e(qE,Dvr),e(qE,qH),e(qH,Gvr),e(qE,Ovr),e(se,Vvr),e(se,jE),e(jE,Q1e),e(Q1e,Xvr),e(jE,zvr),e(jE,jH),e(jH,Wvr),e(jE,Qvr),e(se,Hvr),e(se,DE),e(DE,H1e),e(H1e,Uvr),e(DE,Jvr),e(DE,DH),e(DH,Yvr),e(DE,Kvr),e(se,Zvr),e(se,GE),e(GE,U1e),e(U1e,eFr),e(GE,oFr),e(GE,GH),e(GH,rFr),e(GE,tFr),e(se,aFr),e(se,OE),e(OE,J1e),e(J1e,nFr),e(OE,sFr),e(OE,OH),e(OH,lFr),e(OE,iFr),e(se,dFr),e(se,VE),e(VE,Y1e),e(Y1e,cFr),e(VE,mFr),e(VE,VH),e(VH,fFr),e(VE,gFr),e(se,hFr),e(se,XE),e(XE,K1e),e(K1e,uFr),e(XE,pFr),e(XE,XH),e(XH,_Fr),e(XE,bFr),e(se,vFr),e(se,zE),e(zE,Z1e),e(Z1e,FFr),e(zE,TFr),e(zE,zH),e(zH,MFr),e(zE,EFr),e(se,CFr),e(se,WE),e(WE,eTe),e(eTe,wFr),e(WE,AFr),e(WE,WH),e(WH,LFr),e(WE,yFr),e(se,xFr),e(se,QE),e(QE,oTe),e(oTe,$Fr),e(QE,kFr),e(QE,QH),e(QH,SFr),e(QE,RFr),e(se,PFr),e(se,HE),e(HE,rTe),e(rTe,BFr),e(HE,IFr),e(HE,HH),e(HH,NFr),e(HE,qFr),e(se,jFr),e(se,UE),e(UE,tTe),e(tTe,DFr),e(UE,GFr),e(UE,UH),e(UH,OFr),e(UE,VFr),e(se,XFr),e(se,JE),e(JE,aTe),e(aTe,zFr),e(JE,WFr),e(JE,JH),e(JH,QFr),e(JE,HFr),e(se,UFr),e(se,YE),e(YE,nTe),e(nTe,JFr),e(YE,YFr),e(YE,YH),e(YH,KFr),e(YE,ZFr),e(se,e1r),e(se,KE),e(KE,sTe),e(sTe,o1r),e(KE,r1r),e(KE,KH),e(KH,t1r),e(KE,a1r),e(yr,n1r),M(ZE,yr,null),b(m,oOe,_),b(m,nc,_),e(nc,eC),e(eC,lTe),M(g9,lTe,null),e(nc,s1r),e(nc,iTe),e(iTe,l1r),b(m,rOe,_),b(m,or,_),M(h9,or,null),e(or,i1r),e(or,sc),e(sc,d1r),e(sc,ZH),e(ZH,c1r),e(sc,m1r),e(sc,eU),e(eU,f1r),e(sc,g1r),e(or,h1r),e(or,u9),e(u9,u1r),e(u9,dTe),e(dTe,p1r),e(u9,_1r),e(or,b1r),e(or,St),M(p9,St,null),e(St,v1r),e(St,cTe),e(cTe,F1r),e(St,T1r),e(St,lc),e(lc,M1r),e(lc,mTe),e(mTe,E1r),e(lc,C1r),e(lc,oU),e(oU,w1r),e(lc,A1r),e(St,L1r),M(oC,St,null),e(or,y1r),e(or,xr),M(_9,xr,null),e(xr,x1r),e(xr,fTe),e(fTe,$1r),e(xr,k1r),e(xr,nn),e(nn,S1r),e(nn,gTe),e(gTe,R1r),e(nn,P1r),e(nn,hTe),e(hTe,B1r),e(nn,I1r),e(nn,uTe),e(uTe,N1r),e(nn,q1r),e(xr,j1r),e(xr,Me),e(Me,rC),e(rC,pTe),e(pTe,D1r),e(rC,G1r),e(rC,rU),e(rU,O1r),e(rC,V1r),e(Me,X1r),e(Me,tC),e(tC,_Te),e(_Te,z1r),e(tC,W1r),e(tC,tU),e(tU,Q1r),e(tC,H1r),e(Me,U1r),e(Me,aC),e(aC,bTe),e(bTe,J1r),e(aC,Y1r),e(aC,aU),e(aU,K1r),e(aC,Z1r),e(Me,eTr),e(Me,nC),e(nC,vTe),e(vTe,oTr),e(nC,rTr),e(nC,nU),e(nU,tTr),e(nC,aTr),e(Me,nTr),e(Me,sC),e(sC,FTe),e(FTe,sTr),e(sC,lTr),e(sC,sU),e(sU,iTr),e(sC,dTr),e(Me,cTr),e(Me,lC),e(lC,TTe),e(TTe,mTr),e(lC,fTr),e(lC,lU),e(lU,gTr),e(lC,hTr),e(Me,uTr),e(Me,iC),e(iC,MTe),e(MTe,pTr),e(iC,_Tr),e(iC,iU),e(iU,bTr),e(iC,vTr),e(Me,FTr),e(Me,dC),e(dC,ETe),e(ETe,TTr),e(dC,MTr),e(dC,dU),e(dU,ETr),e(dC,CTr),e(Me,wTr),e(Me,cC),e(cC,CTe),e(CTe,ATr),e(cC,LTr),e(cC,cU),e(cU,yTr),e(cC,xTr),e(Me,$Tr),e(Me,mC),e(mC,wTe),e(wTe,kTr),e(mC,STr),e(mC,mU),e(mU,RTr),e(mC,PTr),e(Me,BTr),e(Me,fC),e(fC,ATe),e(ATe,ITr),e(fC,NTr),e(fC,fU),e(fU,qTr),e(fC,jTr),e(Me,DTr),e(Me,gC),e(gC,LTe),e(LTe,GTr),e(gC,OTr),e(gC,gU),e(gU,VTr),e(gC,XTr),e(Me,zTr),e(Me,hC),e(hC,yTe),e(yTe,WTr),e(hC,QTr),e(hC,hU),e(hU,HTr),e(hC,UTr),e(xr,JTr),M(uC,xr,null),b(m,tOe,_),b(m,ic,_),e(ic,pC),e(pC,xTe),M(b9,xTe,null),e(ic,YTr),e(ic,$Te),e($Te,KTr),b(m,aOe,_),b(m,rr,_),M(v9,rr,null),e(rr,ZTr),e(rr,dc),e(dc,eMr),e(dc,uU),e(uU,oMr),e(dc,rMr),e(dc,pU),e(pU,tMr),e(dc,aMr),e(rr,nMr),e(rr,F9),e(F9,sMr),e(F9,kTe),e(kTe,lMr),e(F9,iMr),e(rr,dMr),e(rr,Rt),M(T9,Rt,null),e(Rt,cMr),e(Rt,STe),e(STe,mMr),e(Rt,fMr),e(Rt,cc),e(cc,gMr),e(cc,RTe),e(RTe,hMr),e(cc,uMr),e(cc,_U),e(_U,pMr),e(cc,_Mr),e(Rt,bMr),M(_C,Rt,null),e(rr,vMr),e(rr,$r),M(M9,$r,null),e($r,FMr),e($r,PTe),e(PTe,TMr),e($r,MMr),e($r,sn),e(sn,EMr),e(sn,BTe),e(BTe,CMr),e(sn,wMr),e(sn,ITe),e(ITe,AMr),e(sn,LMr),e(sn,NTe),e(NTe,yMr),e(sn,xMr),e($r,$Mr),e($r,ln),e(ln,bC),e(bC,qTe),e(qTe,kMr),e(bC,SMr),e(bC,bU),e(bU,RMr),e(bC,PMr),e(ln,BMr),e(ln,vC),e(vC,jTe),e(jTe,IMr),e(vC,NMr),e(vC,vU),e(vU,qMr),e(vC,jMr),e(ln,DMr),e(ln,FC),e(FC,DTe),e(DTe,GMr),e(FC,OMr),e(FC,FU),e(FU,VMr),e(FC,XMr),e(ln,zMr),e(ln,TC),e(TC,GTe),e(GTe,WMr),e(TC,QMr),e(TC,TU),e(TU,HMr),e(TC,UMr),e($r,JMr),M(MC,$r,null),b(m,nOe,_),b(m,mc,_),e(mc,EC),e(EC,OTe),M(E9,OTe,null),e(mc,YMr),e(mc,VTe),e(VTe,KMr),b(m,sOe,_),b(m,tr,_),M(C9,tr,null),e(tr,ZMr),e(tr,fc),e(fc,e4r),e(fc,MU),e(MU,o4r),e(fc,r4r),e(fc,EU),e(EU,t4r),e(fc,a4r),e(tr,n4r),e(tr,w9),e(w9,s4r),e(w9,XTe),e(XTe,l4r),e(w9,i4r),e(tr,d4r),e(tr,Pt),M(A9,Pt,null),e(Pt,c4r),e(Pt,zTe),e(zTe,m4r),e(Pt,f4r),e(Pt,gc),e(gc,g4r),e(gc,WTe),e(WTe,h4r),e(gc,u4r),e(gc,CU),e(CU,p4r),e(gc,_4r),e(Pt,b4r),M(CC,Pt,null),e(tr,v4r),e(tr,kr),M(L9,kr,null),e(kr,F4r),e(kr,QTe),e(QTe,T4r),e(kr,M4r),e(kr,dn),e(dn,E4r),e(dn,HTe),e(HTe,C4r),e(dn,w4r),e(dn,UTe),e(UTe,A4r),e(dn,L4r),e(dn,JTe),e(JTe,y4r),e(dn,x4r),e(kr,$4r),e(kr,ie),e(ie,wC),e(wC,YTe),e(YTe,k4r),e(wC,S4r),e(wC,wU),e(wU,R4r),e(wC,P4r),e(ie,B4r),e(ie,AC),e(AC,KTe),e(KTe,I4r),e(AC,N4r),e(AC,AU),e(AU,q4r),e(AC,j4r),e(ie,D4r),e(ie,LC),e(LC,ZTe),e(ZTe,G4r),e(LC,O4r),e(LC,LU),e(LU,V4r),e(LC,X4r),e(ie,z4r),e(ie,yC),e(yC,eMe),e(eMe,W4r),e(yC,Q4r),e(yC,yU),e(yU,H4r),e(yC,U4r),e(ie,J4r),e(ie,xC),e(xC,oMe),e(oMe,Y4r),e(xC,K4r),e(xC,xU),e(xU,Z4r),e(xC,eEr),e(ie,oEr),e(ie,$C),e($C,rMe),e(rMe,rEr),e($C,tEr),e($C,$U),e($U,aEr),e($C,nEr),e(ie,sEr),e(ie,kC),e(kC,tMe),e(tMe,lEr),e(kC,iEr),e(kC,kU),e(kU,dEr),e(kC,cEr),e(ie,mEr),e(ie,SC),e(SC,aMe),e(aMe,fEr),e(SC,gEr),e(SC,SU),e(SU,hEr),e(SC,uEr),e(ie,pEr),e(ie,RC),e(RC,nMe),e(nMe,_Er),e(RC,bEr),e(RC,RU),e(RU,vEr),e(RC,FEr),e(ie,TEr),e(ie,PC),e(PC,sMe),e(sMe,MEr),e(PC,EEr),e(PC,PU),e(PU,CEr),e(PC,wEr),e(ie,AEr),e(ie,BC),e(BC,lMe),e(lMe,LEr),e(BC,yEr),e(BC,BU),e(BU,xEr),e(BC,$Er),e(ie,kEr),e(ie,IC),e(IC,iMe),e(iMe,SEr),e(IC,REr),e(IC,IU),e(IU,PEr),e(IC,BEr),e(ie,IEr),e(ie,NC),e(NC,dMe),e(dMe,NEr),e(NC,qEr),e(NC,NU),e(NU,jEr),e(NC,DEr),e(ie,GEr),e(ie,qC),e(qC,cMe),e(cMe,OEr),e(qC,VEr),e(qC,qU),e(qU,XEr),e(qC,zEr),e(ie,WEr),e(ie,jC),e(jC,mMe),e(mMe,QEr),e(jC,HEr),e(jC,jU),e(jU,UEr),e(jC,JEr),e(ie,YEr),e(ie,DC),e(DC,fMe),e(fMe,KEr),e(DC,ZEr),e(DC,DU),e(DU,eCr),e(DC,oCr),e(ie,rCr),e(ie,GC),e(GC,gMe),e(gMe,tCr),e(GC,aCr),e(GC,GU),e(GU,nCr),e(GC,sCr),e(ie,lCr),e(ie,OC),e(OC,hMe),e(hMe,iCr),e(OC,dCr),e(OC,OU),e(OU,cCr),e(OC,mCr),e(ie,fCr),e(ie,VC),e(VC,uMe),e(uMe,gCr),e(VC,hCr),e(VC,VU),e(VU,uCr),e(VC,pCr),e(ie,_Cr),e(ie,XC),e(XC,pMe),e(pMe,bCr),e(XC,vCr),e(XC,XU),e(XU,FCr),e(XC,TCr),e(kr,MCr),M(zC,kr,null),b(m,lOe,_),b(m,hc,_),e(hc,WC),e(WC,_Me),M(y9,_Me,null),e(hc,ECr),e(hc,bMe),e(bMe,CCr),b(m,iOe,_),b(m,ar,_),M(x9,ar,null),e(ar,wCr),e(ar,uc),e(uc,ACr),e(uc,zU),e(zU,LCr),e(uc,yCr),e(uc,WU),e(WU,xCr),e(uc,$Cr),e(ar,kCr),e(ar,$9),e($9,SCr),e($9,vMe),e(vMe,RCr),e($9,PCr),e(ar,BCr),e(ar,Bt),M(k9,Bt,null),e(Bt,ICr),e(Bt,FMe),e(FMe,NCr),e(Bt,qCr),e(Bt,pc),e(pc,jCr),e(pc,TMe),e(TMe,DCr),e(pc,GCr),e(pc,QU),e(QU,OCr),e(pc,VCr),e(Bt,XCr),M(QC,Bt,null),e(ar,zCr),e(ar,Sr),M(S9,Sr,null),e(Sr,WCr),e(Sr,MMe),e(MMe,QCr),e(Sr,HCr),e(Sr,cn),e(cn,UCr),e(cn,EMe),e(EMe,JCr),e(cn,YCr),e(cn,CMe),e(CMe,KCr),e(cn,ZCr),e(cn,wMe),e(wMe,e5r),e(cn,o5r),e(Sr,r5r),e(Sr,ye),e(ye,HC),e(HC,AMe),e(AMe,t5r),e(HC,a5r),e(HC,HU),e(HU,n5r),e(HC,s5r),e(ye,l5r),e(ye,UC),e(UC,LMe),e(LMe,i5r),e(UC,d5r),e(UC,UU),e(UU,c5r),e(UC,m5r),e(ye,f5r),e(ye,JC),e(JC,yMe),e(yMe,g5r),e(JC,h5r),e(JC,JU),e(JU,u5r),e(JC,p5r),e(ye,_5r),e(ye,YC),e(YC,xMe),e(xMe,b5r),e(YC,v5r),e(YC,YU),e(YU,F5r),e(YC,T5r),e(ye,M5r),e(ye,KC),e(KC,$Me),e($Me,E5r),e(KC,C5r),e(KC,KU),e(KU,w5r),e(KC,A5r),e(ye,L5r),e(ye,ZC),e(ZC,kMe),e(kMe,y5r),e(ZC,x5r),e(ZC,ZU),e(ZU,$5r),e(ZC,k5r),e(ye,S5r),e(ye,e5),e(e5,SMe),e(SMe,R5r),e(e5,P5r),e(e5,eJ),e(eJ,B5r),e(e5,I5r),e(ye,N5r),e(ye,o5),e(o5,RMe),e(RMe,q5r),e(o5,j5r),e(o5,oJ),e(oJ,D5r),e(o5,G5r),e(ye,O5r),e(ye,r5),e(r5,PMe),e(PMe,V5r),e(r5,X5r),e(r5,rJ),e(rJ,z5r),e(r5,W5r),e(ye,Q5r),e(ye,t5),e(t5,BMe),e(BMe,H5r),e(t5,U5r),e(t5,tJ),e(tJ,J5r),e(t5,Y5r),e(Sr,K5r),M(a5,Sr,null),b(m,dOe,_),b(m,_c,_),e(_c,n5),e(n5,IMe),M(R9,IMe,null),e(_c,Z5r),e(_c,NMe),e(NMe,e3r),b(m,cOe,_),b(m,nr,_),M(P9,nr,null),e(nr,o3r),e(nr,bc),e(bc,r3r),e(bc,aJ),e(aJ,t3r),e(bc,a3r),e(bc,nJ),e(nJ,n3r),e(bc,s3r),e(nr,l3r),e(nr,B9),e(B9,i3r),e(B9,qMe),e(qMe,d3r),e(B9,c3r),e(nr,m3r),e(nr,It),M(I9,It,null),e(It,f3r),e(It,jMe),e(jMe,g3r),e(It,h3r),e(It,vc),e(vc,u3r),e(vc,DMe),e(DMe,p3r),e(vc,_3r),e(vc,sJ),e(sJ,b3r),e(vc,v3r),e(It,F3r),M(s5,It,null),e(nr,T3r),e(nr,Rr),M(N9,Rr,null),e(Rr,M3r),e(Rr,GMe),e(GMe,E3r),e(Rr,C3r),e(Rr,mn),e(mn,w3r),e(mn,OMe),e(OMe,A3r),e(mn,L3r),e(mn,VMe),e(VMe,y3r),e(mn,x3r),e(mn,XMe),e(XMe,$3r),e(mn,k3r),e(Rr,S3r),e(Rr,te),e(te,l5),e(l5,zMe),e(zMe,R3r),e(l5,P3r),e(l5,lJ),e(lJ,B3r),e(l5,I3r),e(te,N3r),e(te,i5),e(i5,WMe),e(WMe,q3r),e(i5,j3r),e(i5,iJ),e(iJ,D3r),e(i5,G3r),e(te,O3r),e(te,d5),e(d5,QMe),e(QMe,V3r),e(d5,X3r),e(d5,dJ),e(dJ,z3r),e(d5,W3r),e(te,Q3r),e(te,c5),e(c5,HMe),e(HMe,H3r),e(c5,U3r),e(c5,cJ),e(cJ,J3r),e(c5,Y3r),e(te,K3r),e(te,m5),e(m5,UMe),e(UMe,Z3r),e(m5,e0r),e(m5,mJ),e(mJ,o0r),e(m5,r0r),e(te,t0r),e(te,f5),e(f5,JMe),e(JMe,a0r),e(f5,n0r),e(f5,fJ),e(fJ,s0r),e(f5,l0r),e(te,i0r),e(te,g5),e(g5,YMe),e(YMe,d0r),e(g5,c0r),e(g5,gJ),e(gJ,m0r),e(g5,f0r),e(te,g0r),e(te,h5),e(h5,KMe),e(KMe,h0r),e(h5,u0r),e(h5,hJ),e(hJ,p0r),e(h5,_0r),e(te,b0r),e(te,u5),e(u5,ZMe),e(ZMe,v0r),e(u5,F0r),e(u5,uJ),e(uJ,T0r),e(u5,M0r),e(te,E0r),e(te,p5),e(p5,e4e),e(e4e,C0r),e(p5,w0r),e(p5,pJ),e(pJ,A0r),e(p5,L0r),e(te,y0r),e(te,_5),e(_5,o4e),e(o4e,x0r),e(_5,$0r),e(_5,_J),e(_J,k0r),e(_5,S0r),e(te,R0r),e(te,b5),e(b5,r4e),e(r4e,P0r),e(b5,B0r),e(b5,bJ),e(bJ,I0r),e(b5,N0r),e(te,q0r),e(te,v5),e(v5,t4e),e(t4e,j0r),e(v5,D0r),e(v5,vJ),e(vJ,G0r),e(v5,O0r),e(te,V0r),e(te,F5),e(F5,a4e),e(a4e,X0r),e(F5,z0r),e(F5,FJ),e(FJ,W0r),e(F5,Q0r),e(te,H0r),e(te,T5),e(T5,n4e),e(n4e,U0r),e(T5,J0r),e(T5,TJ),e(TJ,Y0r),e(T5,K0r),e(te,Z0r),e(te,M5),e(M5,s4e),e(s4e,ewr),e(M5,owr),e(M5,MJ),e(MJ,rwr),e(M5,twr),e(te,awr),e(te,E5),e(E5,l4e),e(l4e,nwr),e(E5,swr),e(E5,EJ),e(EJ,lwr),e(E5,iwr),e(te,dwr),e(te,C5),e(C5,i4e),e(i4e,cwr),e(C5,mwr),e(C5,CJ),e(CJ,fwr),e(C5,gwr),e(te,hwr),e(te,w5),e(w5,d4e),e(d4e,uwr),e(w5,pwr),e(w5,wJ),e(wJ,_wr),e(w5,bwr),e(te,vwr),e(te,A5),e(A5,c4e),e(c4e,Fwr),e(A5,Twr),e(A5,AJ),e(AJ,Mwr),e(A5,Ewr),e(te,Cwr),e(te,L5),e(L5,m4e),e(m4e,wwr),e(L5,Awr),e(L5,LJ),e(LJ,Lwr),e(L5,ywr),e(te,xwr),e(te,y5),e(y5,f4e),e(f4e,$wr),e(y5,kwr),e(y5,yJ),e(yJ,Swr),e(y5,Rwr),e(te,Pwr),e(te,x5),e(x5,g4e),e(g4e,Bwr),e(x5,Iwr),e(x5,xJ),e(xJ,Nwr),e(x5,qwr),e(te,jwr),e(te,$5),e($5,h4e),e(h4e,Dwr),e($5,Gwr),e($5,$J),e($J,Owr),e($5,Vwr),e(te,Xwr),e(te,k5),e(k5,u4e),e(u4e,zwr),e(k5,Wwr),e(k5,kJ),e(kJ,Qwr),e(k5,Hwr),e(te,Uwr),e(te,S5),e(S5,p4e),e(p4e,Jwr),e(S5,Ywr),e(S5,SJ),e(SJ,Kwr),e(S5,Zwr),e(Rr,eAr),M(R5,Rr,null),b(m,mOe,_),b(m,Fc,_),e(Fc,P5),e(P5,_4e),M(q9,_4e,null),e(Fc,oAr),e(Fc,b4e),e(b4e,rAr),b(m,fOe,_),b(m,sr,_),M(j9,sr,null),e(sr,tAr),e(sr,Tc),e(Tc,aAr),e(Tc,RJ),e(RJ,nAr),e(Tc,sAr),e(Tc,PJ),e(PJ,lAr),e(Tc,iAr),e(sr,dAr),e(sr,D9),e(D9,cAr),e(D9,v4e),e(v4e,mAr),e(D9,fAr),e(sr,gAr),e(sr,Nt),M(G9,Nt,null),e(Nt,hAr),e(Nt,F4e),e(F4e,uAr),e(Nt,pAr),e(Nt,Mc),e(Mc,_Ar),e(Mc,T4e),e(T4e,bAr),e(Mc,vAr),e(Mc,BJ),e(BJ,FAr),e(Mc,TAr),e(Nt,MAr),M(B5,Nt,null),e(sr,EAr),e(sr,Pr),M(O9,Pr,null),e(Pr,CAr),e(Pr,M4e),e(M4e,wAr),e(Pr,AAr),e(Pr,fn),e(fn,LAr),e(fn,E4e),e(E4e,yAr),e(fn,xAr),e(fn,C4e),e(C4e,$Ar),e(fn,kAr),e(fn,w4e),e(w4e,SAr),e(fn,RAr),e(Pr,PAr),e(Pr,pe),e(pe,I5),e(I5,A4e),e(A4e,BAr),e(I5,IAr),e(I5,IJ),e(IJ,NAr),e(I5,qAr),e(pe,jAr),e(pe,N5),e(N5,L4e),e(L4e,DAr),e(N5,GAr),e(N5,NJ),e(NJ,OAr),e(N5,VAr),e(pe,XAr),e(pe,q5),e(q5,y4e),e(y4e,zAr),e(q5,WAr),e(q5,qJ),e(qJ,QAr),e(q5,HAr),e(pe,UAr),e(pe,j5),e(j5,x4e),e(x4e,JAr),e(j5,YAr),e(j5,jJ),e(jJ,KAr),e(j5,ZAr),e(pe,e6r),e(pe,D5),e(D5,$4e),e($4e,o6r),e(D5,r6r),e(D5,DJ),e(DJ,t6r),e(D5,a6r),e(pe,n6r),e(pe,G5),e(G5,k4e),e(k4e,s6r),e(G5,l6r),e(G5,GJ),e(GJ,i6r),e(G5,d6r),e(pe,c6r),e(pe,O5),e(O5,S4e),e(S4e,m6r),e(O5,f6r),e(O5,OJ),e(OJ,g6r),e(O5,h6r),e(pe,u6r),e(pe,V5),e(V5,R4e),e(R4e,p6r),e(V5,_6r),e(V5,VJ),e(VJ,b6r),e(V5,v6r),e(pe,F6r),e(pe,X5),e(X5,P4e),e(P4e,T6r),e(X5,M6r),e(X5,XJ),e(XJ,E6r),e(X5,C6r),e(pe,w6r),e(pe,z5),e(z5,B4e),e(B4e,A6r),e(z5,L6r),e(z5,zJ),e(zJ,y6r),e(z5,x6r),e(pe,$6r),e(pe,W5),e(W5,I4e),e(I4e,k6r),e(W5,S6r),e(W5,WJ),e(WJ,R6r),e(W5,P6r),e(pe,B6r),e(pe,Q5),e(Q5,N4e),e(N4e,I6r),e(Q5,N6r),e(Q5,QJ),e(QJ,q6r),e(Q5,j6r),e(pe,D6r),e(pe,H5),e(H5,q4e),e(q4e,G6r),e(H5,O6r),e(H5,HJ),e(HJ,V6r),e(H5,X6r),e(pe,z6r),e(pe,U5),e(U5,j4e),e(j4e,W6r),e(U5,Q6r),e(U5,UJ),e(UJ,H6r),e(U5,U6r),e(pe,J6r),e(pe,J5),e(J5,D4e),e(D4e,Y6r),e(J5,K6r),e(J5,JJ),e(JJ,Z6r),e(J5,eLr),e(pe,oLr),e(pe,Y5),e(Y5,G4e),e(G4e,rLr),e(Y5,tLr),e(Y5,YJ),e(YJ,aLr),e(Y5,nLr),e(pe,sLr),e(pe,K5),e(K5,O4e),e(O4e,lLr),e(K5,iLr),e(K5,KJ),e(KJ,dLr),e(K5,cLr),e(Pr,mLr),M(Z5,Pr,null),b(m,gOe,_),b(m,Ec,_),e(Ec,e3),e(e3,V4e),M(V9,V4e,null),e(Ec,fLr),e(Ec,X4e),e(X4e,gLr),b(m,hOe,_),b(m,lr,_),M(X9,lr,null),e(lr,hLr),e(lr,Cc),e(Cc,uLr),e(Cc,ZJ),e(ZJ,pLr),e(Cc,_Lr),e(Cc,eY),e(eY,bLr),e(Cc,vLr),e(lr,FLr),e(lr,z9),e(z9,TLr),e(z9,z4e),e(z4e,MLr),e(z9,ELr),e(lr,CLr),e(lr,qt),M(W9,qt,null),e(qt,wLr),e(qt,W4e),e(W4e,ALr),e(qt,LLr),e(qt,wc),e(wc,yLr),e(wc,Q4e),e(Q4e,xLr),e(wc,$Lr),e(wc,oY),e(oY,kLr),e(wc,SLr),e(qt,RLr),M(o3,qt,null),e(lr,PLr),e(lr,Br),M(Q9,Br,null),e(Br,BLr),e(Br,H4e),e(H4e,ILr),e(Br,NLr),e(Br,gn),e(gn,qLr),e(gn,U4e),e(U4e,jLr),e(gn,DLr),e(gn,J4e),e(J4e,GLr),e(gn,OLr),e(gn,Y4e),e(Y4e,VLr),e(gn,XLr),e(Br,zLr),e(Br,H9),e(H9,r3),e(r3,K4e),e(K4e,WLr),e(r3,QLr),e(r3,rY),e(rY,HLr),e(r3,ULr),e(H9,JLr),e(H9,t3),e(t3,Z4e),e(Z4e,YLr),e(t3,KLr),e(t3,tY),e(tY,ZLr),e(t3,eyr),e(Br,oyr),M(a3,Br,null),b(m,uOe,_),b(m,Ac,_),e(Ac,n3),e(n3,eEe),M(U9,eEe,null),e(Ac,ryr),e(Ac,oEe),e(oEe,tyr),b(m,pOe,_),b(m,ir,_),M(J9,ir,null),e(ir,ayr),e(ir,Lc),e(Lc,nyr),e(Lc,aY),e(aY,syr),e(Lc,lyr),e(Lc,nY),e(nY,iyr),e(Lc,dyr),e(ir,cyr),e(ir,Y9),e(Y9,myr),e(Y9,rEe),e(rEe,fyr),e(Y9,gyr),e(ir,hyr),e(ir,jt),M(K9,jt,null),e(jt,uyr),e(jt,tEe),e(tEe,pyr),e(jt,_yr),e(jt,yc),e(yc,byr),e(yc,aEe),e(aEe,vyr),e(yc,Fyr),e(yc,sY),e(sY,Tyr),e(yc,Myr),e(jt,Eyr),M(s3,jt,null),e(ir,Cyr),e(ir,Ir),M(Z9,Ir,null),e(Ir,wyr),e(Ir,nEe),e(nEe,Ayr),e(Ir,Lyr),e(Ir,hn),e(hn,yyr),e(hn,sEe),e(sEe,xyr),e(hn,$yr),e(hn,lEe),e(lEe,kyr),e(hn,Syr),e(hn,iEe),e(iEe,Ryr),e(hn,Pyr),e(Ir,Byr),e(Ir,dEe),e(dEe,l3),e(l3,cEe),e(cEe,Iyr),e(l3,Nyr),e(l3,lY),e(lY,qyr),e(l3,jyr),e(Ir,Dyr),M(i3,Ir,null),b(m,_Oe,_),b(m,xc,_),e(xc,d3),e(d3,mEe),M(ex,mEe,null),e(xc,Gyr),e(xc,fEe),e(fEe,Oyr),b(m,bOe,_),b(m,dr,_),M(ox,dr,null),e(dr,Vyr),e(dr,$c),e($c,Xyr),e($c,iY),e(iY,zyr),e($c,Wyr),e($c,dY),e(dY,Qyr),e($c,Hyr),e(dr,Uyr),e(dr,rx),e(rx,Jyr),e(rx,gEe),e(gEe,Yyr),e(rx,Kyr),e(dr,Zyr),e(dr,Dt),M(tx,Dt,null),e(Dt,e7r),e(Dt,hEe),e(hEe,o7r),e(Dt,r7r),e(Dt,kc),e(kc,t7r),e(kc,uEe),e(uEe,a7r),e(kc,n7r),e(kc,cY),e(cY,s7r),e(kc,l7r),e(Dt,i7r),M(c3,Dt,null),e(dr,d7r),e(dr,Nr),M(ax,Nr,null),e(Nr,c7r),e(Nr,pEe),e(pEe,m7r),e(Nr,f7r),e(Nr,un),e(un,g7r),e(un,_Ee),e(_Ee,h7r),e(un,u7r),e(un,bEe),e(bEe,p7r),e(un,_7r),e(un,vEe),e(vEe,b7r),e(un,v7r),e(Nr,F7r),e(Nr,de),e(de,m3),e(m3,FEe),e(FEe,T7r),e(m3,M7r),e(m3,mY),e(mY,E7r),e(m3,C7r),e(de,w7r),e(de,f3),e(f3,TEe),e(TEe,A7r),e(f3,L7r),e(f3,fY),e(fY,y7r),e(f3,x7r),e(de,$7r),e(de,g3),e(g3,MEe),e(MEe,k7r),e(g3,S7r),e(g3,gY),e(gY,R7r),e(g3,P7r),e(de,B7r),e(de,h3),e(h3,EEe),e(EEe,I7r),e(h3,N7r),e(h3,hY),e(hY,q7r),e(h3,j7r),e(de,D7r),e(de,u3),e(u3,CEe),e(CEe,G7r),e(u3,O7r),e(u3,uY),e(uY,V7r),e(u3,X7r),e(de,z7r),e(de,p3),e(p3,wEe),e(wEe,W7r),e(p3,Q7r),e(p3,pY),e(pY,H7r),e(p3,U7r),e(de,J7r),e(de,_3),e(_3,AEe),e(AEe,Y7r),e(_3,K7r),e(_3,_Y),e(_Y,Z7r),e(_3,e8r),e(de,o8r),e(de,b3),e(b3,LEe),e(LEe,r8r),e(b3,t8r),e(b3,bY),e(bY,a8r),e(b3,n8r),e(de,s8r),e(de,v3),e(v3,yEe),e(yEe,l8r),e(v3,i8r),e(v3,vY),e(vY,d8r),e(v3,c8r),e(de,m8r),e(de,F3),e(F3,xEe),e(xEe,f8r),e(F3,g8r),e(F3,FY),e(FY,h8r),e(F3,u8r),e(de,p8r),e(de,T3),e(T3,$Ee),e($Ee,_8r),e(T3,b8r),e(T3,TY),e(TY,v8r),e(T3,F8r),e(de,T8r),e(de,M3),e(M3,kEe),e(kEe,M8r),e(M3,E8r),e(M3,MY),e(MY,C8r),e(M3,w8r),e(de,A8r),e(de,E3),e(E3,SEe),e(SEe,L8r),e(E3,y8r),e(E3,EY),e(EY,x8r),e(E3,$8r),e(de,k8r),e(de,C3),e(C3,REe),e(REe,S8r),e(C3,R8r),e(C3,CY),e(CY,P8r),e(C3,B8r),e(de,I8r),e(de,w3),e(w3,PEe),e(PEe,N8r),e(w3,q8r),e(w3,wY),e(wY,j8r),e(w3,D8r),e(de,G8r),e(de,A3),e(A3,BEe),e(BEe,O8r),e(A3,V8r),e(A3,AY),e(AY,X8r),e(A3,z8r),e(de,W8r),e(de,L3),e(L3,IEe),e(IEe,Q8r),e(L3,H8r),e(L3,LY),e(LY,U8r),e(L3,J8r),e(de,Y8r),e(de,y3),e(y3,NEe),e(NEe,K8r),e(y3,Z8r),e(y3,yY),e(yY,e9r),e(y3,o9r),e(de,r9r),e(de,x3),e(x3,qEe),e(qEe,t9r),e(x3,a9r),e(x3,xY),e(xY,n9r),e(x3,s9r),e(de,l9r),e(de,$3),e($3,jEe),e(jEe,i9r),e($3,d9r),e($3,$Y),e($Y,c9r),e($3,m9r),e(Nr,f9r),M(k3,Nr,null),b(m,vOe,_),b(m,Sc,_),e(Sc,S3),e(S3,DEe),M(nx,DEe,null),e(Sc,g9r),e(Sc,GEe),e(GEe,h9r),b(m,FOe,_),b(m,cr,_),M(sx,cr,null),e(cr,u9r),e(cr,Rc),e(Rc,p9r),e(Rc,kY),e(kY,_9r),e(Rc,b9r),e(Rc,SY),e(SY,v9r),e(Rc,F9r),e(cr,T9r),e(cr,lx),e(lx,M9r),e(lx,OEe),e(OEe,E9r),e(lx,C9r),e(cr,w9r),e(cr,Gt),M(ix,Gt,null),e(Gt,A9r),e(Gt,VEe),e(VEe,L9r),e(Gt,y9r),e(Gt,Pc),e(Pc,x9r),e(Pc,XEe),e(XEe,$9r),e(Pc,k9r),e(Pc,RY),e(RY,S9r),e(Pc,R9r),e(Gt,P9r),M(R3,Gt,null),e(cr,B9r),e(cr,qr),M(dx,qr,null),e(qr,I9r),e(qr,zEe),e(zEe,N9r),e(qr,q9r),e(qr,pn),e(pn,j9r),e(pn,WEe),e(WEe,D9r),e(pn,G9r),e(pn,QEe),e(QEe,O9r),e(pn,V9r),e(pn,HEe),e(HEe,X9r),e(pn,z9r),e(qr,W9r),e(qr,ce),e(ce,P3),e(P3,UEe),e(UEe,Q9r),e(P3,H9r),e(P3,PY),e(PY,U9r),e(P3,J9r),e(ce,Y9r),e(ce,B3),e(B3,JEe),e(JEe,K9r),e(B3,Z9r),e(B3,BY),e(BY,exr),e(B3,oxr),e(ce,rxr),e(ce,I3),e(I3,YEe),e(YEe,txr),e(I3,axr),e(I3,IY),e(IY,nxr),e(I3,sxr),e(ce,lxr),e(ce,N3),e(N3,KEe),e(KEe,ixr),e(N3,dxr),e(N3,NY),e(NY,cxr),e(N3,mxr),e(ce,fxr),e(ce,q3),e(q3,ZEe),e(ZEe,gxr),e(q3,hxr),e(q3,qY),e(qY,uxr),e(q3,pxr),e(ce,_xr),e(ce,j3),e(j3,eCe),e(eCe,bxr),e(j3,vxr),e(j3,jY),e(jY,Fxr),e(j3,Txr),e(ce,Mxr),e(ce,D3),e(D3,oCe),e(oCe,Exr),e(D3,Cxr),e(D3,DY),e(DY,wxr),e(D3,Axr),e(ce,Lxr),e(ce,G3),e(G3,rCe),e(rCe,yxr),e(G3,xxr),e(G3,GY),e(GY,$xr),e(G3,kxr),e(ce,Sxr),e(ce,O3),e(O3,tCe),e(tCe,Rxr),e(O3,Pxr),e(O3,OY),e(OY,Bxr),e(O3,Ixr),e(ce,Nxr),e(ce,V3),e(V3,aCe),e(aCe,qxr),e(V3,jxr),e(V3,VY),e(VY,Dxr),e(V3,Gxr),e(ce,Oxr),e(ce,X3),e(X3,nCe),e(nCe,Vxr),e(X3,Xxr),e(X3,XY),e(XY,zxr),e(X3,Wxr),e(ce,Qxr),e(ce,z3),e(z3,sCe),e(sCe,Hxr),e(z3,Uxr),e(z3,zY),e(zY,Jxr),e(z3,Yxr),e(ce,Kxr),e(ce,W3),e(W3,lCe),e(lCe,Zxr),e(W3,e$r),e(W3,WY),e(WY,o$r),e(W3,r$r),e(ce,t$r),e(ce,Q3),e(Q3,iCe),e(iCe,a$r),e(Q3,n$r),e(Q3,QY),e(QY,s$r),e(Q3,l$r),e(ce,i$r),e(ce,H3),e(H3,dCe),e(dCe,d$r),e(H3,c$r),e(H3,HY),e(HY,m$r),e(H3,f$r),e(ce,g$r),e(ce,U3),e(U3,cCe),e(cCe,h$r),e(U3,u$r),e(U3,UY),e(UY,p$r),e(U3,_$r),e(ce,b$r),e(ce,J3),e(J3,mCe),e(mCe,v$r),e(J3,F$r),e(J3,JY),e(JY,T$r),e(J3,M$r),e(ce,E$r),e(ce,Y3),e(Y3,fCe),e(fCe,C$r),e(Y3,w$r),e(Y3,YY),e(YY,A$r),e(Y3,L$r),e(ce,y$r),e(ce,K3),e(K3,gCe),e(gCe,x$r),e(K3,$$r),e(K3,KY),e(KY,k$r),e(K3,S$r),e(ce,R$r),e(ce,Z3),e(Z3,hCe),e(hCe,P$r),e(Z3,B$r),e(Z3,ZY),e(ZY,I$r),e(Z3,N$r),e(qr,q$r),M(e0,qr,null),b(m,TOe,_),b(m,Bc,_),e(Bc,o0),e(o0,uCe),M(cx,uCe,null),e(Bc,j$r),e(Bc,pCe),e(pCe,D$r),b(m,MOe,_),b(m,mr,_),M(mx,mr,null),e(mr,G$r),e(mr,Ic),e(Ic,O$r),e(Ic,eK),e(eK,V$r),e(Ic,X$r),e(Ic,oK),e(oK,z$r),e(Ic,W$r),e(mr,Q$r),e(mr,fx),e(fx,H$r),e(fx,_Ce),e(_Ce,U$r),e(fx,J$r),e(mr,Y$r),e(mr,Ot),M(gx,Ot,null),e(Ot,K$r),e(Ot,bCe),e(bCe,Z$r),e(Ot,ekr),e(Ot,Nc),e(Nc,okr),e(Nc,vCe),e(vCe,rkr),e(Nc,tkr),e(Nc,rK),e(rK,akr),e(Nc,nkr),e(Ot,skr),M(r0,Ot,null),e(mr,lkr),e(mr,jr),M(hx,jr,null),e(jr,ikr),e(jr,FCe),e(FCe,dkr),e(jr,ckr),e(jr,_n),e(_n,mkr),e(_n,TCe),e(TCe,fkr),e(_n,gkr),e(_n,MCe),e(MCe,hkr),e(_n,ukr),e(_n,ECe),e(ECe,pkr),e(_n,_kr),e(jr,bkr),e(jr,CCe),e(CCe,t0),e(t0,wCe),e(wCe,vkr),e(t0,Fkr),e(t0,tK),e(tK,Tkr),e(t0,Mkr),e(jr,Ekr),M(a0,jr,null),b(m,EOe,_),b(m,qc,_),e(qc,n0),e(n0,ACe),M(ux,ACe,null),e(qc,Ckr),e(qc,LCe),e(LCe,wkr),b(m,COe,_),b(m,fr,_),M(px,fr,null),e(fr,Akr),e(fr,jc),e(jc,Lkr),e(jc,aK),e(aK,ykr),e(jc,xkr),e(jc,nK),e(nK,$kr),e(jc,kkr),e(fr,Skr),e(fr,_x),e(_x,Rkr),e(_x,yCe),e(yCe,Pkr),e(_x,Bkr),e(fr,Ikr),e(fr,Vt),M(bx,Vt,null),e(Vt,Nkr),e(Vt,xCe),e(xCe,qkr),e(Vt,jkr),e(Vt,Dc),e(Dc,Dkr),e(Dc,$Ce),e($Ce,Gkr),e(Dc,Okr),e(Dc,sK),e(sK,Vkr),e(Dc,Xkr),e(Vt,zkr),M(s0,Vt,null),e(fr,Wkr),e(fr,Dr),M(vx,Dr,null),e(Dr,Qkr),e(Dr,kCe),e(kCe,Hkr),e(Dr,Ukr),e(Dr,bn),e(bn,Jkr),e(bn,SCe),e(SCe,Ykr),e(bn,Kkr),e(bn,RCe),e(RCe,Zkr),e(bn,eSr),e(bn,PCe),e(PCe,oSr),e(bn,rSr),e(Dr,tSr),e(Dr,BCe),e(BCe,l0),e(l0,ICe),e(ICe,aSr),e(l0,nSr),e(l0,lK),e(lK,sSr),e(l0,lSr),e(Dr,iSr),M(i0,Dr,null),b(m,wOe,_),b(m,Gc,_),e(Gc,d0),e(d0,NCe),M(Fx,NCe,null),e(Gc,dSr),e(Gc,qCe),e(qCe,cSr),b(m,AOe,_),b(m,gr,_),M(Tx,gr,null),e(gr,mSr),e(gr,Oc),e(Oc,fSr),e(Oc,iK),e(iK,gSr),e(Oc,hSr),e(Oc,dK),e(dK,uSr),e(Oc,pSr),e(gr,_Sr),e(gr,Mx),e(Mx,bSr),e(Mx,jCe),e(jCe,vSr),e(Mx,FSr),e(gr,TSr),e(gr,Xt),M(Ex,Xt,null),e(Xt,MSr),e(Xt,DCe),e(DCe,ESr),e(Xt,CSr),e(Xt,Vc),e(Vc,wSr),e(Vc,GCe),e(GCe,ASr),e(Vc,LSr),e(Vc,cK),e(cK,ySr),e(Vc,xSr),e(Xt,$Sr),M(c0,Xt,null),e(gr,kSr),e(gr,Gr),M(Cx,Gr,null),e(Gr,SSr),e(Gr,OCe),e(OCe,RSr),e(Gr,PSr),e(Gr,vn),e(vn,BSr),e(vn,VCe),e(VCe,ISr),e(vn,NSr),e(vn,XCe),e(XCe,qSr),e(vn,jSr),e(vn,zCe),e(zCe,DSr),e(vn,GSr),e(Gr,OSr),e(Gr,oe),e(oe,m0),e(m0,WCe),e(WCe,VSr),e(m0,XSr),e(m0,mK),e(mK,zSr),e(m0,WSr),e(oe,QSr),e(oe,f0),e(f0,QCe),e(QCe,HSr),e(f0,USr),e(f0,fK),e(fK,JSr),e(f0,YSr),e(oe,KSr),e(oe,g0),e(g0,HCe),e(HCe,ZSr),e(g0,eRr),e(g0,gK),e(gK,oRr),e(g0,rRr),e(oe,tRr),e(oe,h0),e(h0,UCe),e(UCe,aRr),e(h0,nRr),e(h0,hK),e(hK,sRr),e(h0,lRr),e(oe,iRr),e(oe,u0),e(u0,JCe),e(JCe,dRr),e(u0,cRr),e(u0,uK),e(uK,mRr),e(u0,fRr),e(oe,gRr),e(oe,p0),e(p0,YCe),e(YCe,hRr),e(p0,uRr),e(p0,pK),e(pK,pRr),e(p0,_Rr),e(oe,bRr),e(oe,_0),e(_0,KCe),e(KCe,vRr),e(_0,FRr),e(_0,_K),e(_K,TRr),e(_0,MRr),e(oe,ERr),e(oe,b0),e(b0,ZCe),e(ZCe,CRr),e(b0,wRr),e(b0,bK),e(bK,ARr),e(b0,LRr),e(oe,yRr),e(oe,v0),e(v0,e5e),e(e5e,xRr),e(v0,$Rr),e(v0,vK),e(vK,kRr),e(v0,SRr),e(oe,RRr),e(oe,F0),e(F0,o5e),e(o5e,PRr),e(F0,BRr),e(F0,FK),e(FK,IRr),e(F0,NRr),e(oe,qRr),e(oe,T0),e(T0,r5e),e(r5e,jRr),e(T0,DRr),e(T0,TK),e(TK,GRr),e(T0,ORr),e(oe,VRr),e(oe,M0),e(M0,t5e),e(t5e,XRr),e(M0,zRr),e(M0,MK),e(MK,WRr),e(M0,QRr),e(oe,HRr),e(oe,E0),e(E0,a5e),e(a5e,URr),e(E0,JRr),e(E0,EK),e(EK,YRr),e(E0,KRr),e(oe,ZRr),e(oe,C0),e(C0,n5e),e(n5e,ePr),e(C0,oPr),e(C0,CK),e(CK,rPr),e(C0,tPr),e(oe,aPr),e(oe,w0),e(w0,s5e),e(s5e,nPr),e(w0,sPr),e(w0,wK),e(wK,lPr),e(w0,iPr),e(oe,dPr),e(oe,A0),e(A0,l5e),e(l5e,cPr),e(A0,mPr),e(A0,AK),e(AK,fPr),e(A0,gPr),e(oe,hPr),e(oe,L0),e(L0,i5e),e(i5e,uPr),e(L0,pPr),e(L0,LK),e(LK,_Pr),e(L0,bPr),e(oe,vPr),e(oe,y0),e(y0,d5e),e(d5e,FPr),e(y0,TPr),e(y0,yK),e(yK,MPr),e(y0,EPr),e(oe,CPr),e(oe,x0),e(x0,c5e),e(c5e,wPr),e(x0,APr),e(x0,xK),e(xK,LPr),e(x0,yPr),e(oe,xPr),e(oe,$0),e($0,m5e),e(m5e,$Pr),e($0,kPr),e($0,$K),e($K,SPr),e($0,RPr),e(oe,PPr),e(oe,k0),e(k0,f5e),e(f5e,BPr),e(k0,IPr),e(k0,kK),e(kK,NPr),e(k0,qPr),e(oe,jPr),e(oe,S0),e(S0,g5e),e(g5e,DPr),e(S0,GPr),e(S0,SK),e(SK,OPr),e(S0,VPr),e(oe,XPr),e(oe,R0),e(R0,h5e),e(h5e,zPr),e(R0,WPr),e(R0,RK),e(RK,QPr),e(R0,HPr),e(oe,UPr),e(oe,P0),e(P0,u5e),e(u5e,JPr),e(P0,YPr),e(P0,PK),e(PK,KPr),e(P0,ZPr),e(oe,eBr),e(oe,B0),e(B0,p5e),e(p5e,oBr),e(B0,rBr),e(B0,BK),e(BK,tBr),e(B0,aBr),e(oe,nBr),e(oe,I0),e(I0,_5e),e(_5e,sBr),e(I0,lBr),e(I0,IK),e(IK,iBr),e(I0,dBr),e(oe,cBr),e(oe,N0),e(N0,b5e),e(b5e,mBr),e(N0,fBr),e(N0,NK),e(NK,gBr),e(N0,hBr),e(Gr,uBr),M(q0,Gr,null),b(m,LOe,_),b(m,Xc,_),e(Xc,j0),e(j0,v5e),M(wx,v5e,null),e(Xc,pBr),e(Xc,F5e),e(F5e,_Br),b(m,yOe,_),b(m,hr,_),M(Ax,hr,null),e(hr,bBr),e(hr,zc),e(zc,vBr),e(zc,qK),e(qK,FBr),e(zc,TBr),e(zc,jK),e(jK,MBr),e(zc,EBr),e(hr,CBr),e(hr,Lx),e(Lx,wBr),e(Lx,T5e),e(T5e,ABr),e(Lx,LBr),e(hr,yBr),e(hr,zt),M(yx,zt,null),e(zt,xBr),e(zt,M5e),e(M5e,$Br),e(zt,kBr),e(zt,Wc),e(Wc,SBr),e(Wc,E5e),e(E5e,RBr),e(Wc,PBr),e(Wc,DK),e(DK,BBr),e(Wc,IBr),e(zt,NBr),M(D0,zt,null),e(hr,qBr),e(hr,Or),M(xx,Or,null),e(Or,jBr),e(Or,C5e),e(C5e,DBr),e(Or,GBr),e(Or,Fn),e(Fn,OBr),e(Fn,w5e),e(w5e,VBr),e(Fn,XBr),e(Fn,A5e),e(A5e,zBr),e(Fn,WBr),e(Fn,L5e),e(L5e,QBr),e(Fn,HBr),e(Or,UBr),e(Or,xe),e(xe,G0),e(G0,y5e),e(y5e,JBr),e(G0,YBr),e(G0,GK),e(GK,KBr),e(G0,ZBr),e(xe,eIr),e(xe,O0),e(O0,x5e),e(x5e,oIr),e(O0,rIr),e(O0,OK),e(OK,tIr),e(O0,aIr),e(xe,nIr),e(xe,V0),e(V0,$5e),e($5e,sIr),e(V0,lIr),e(V0,VK),e(VK,iIr),e(V0,dIr),e(xe,cIr),e(xe,X0),e(X0,k5e),e(k5e,mIr),e(X0,fIr),e(X0,XK),e(XK,gIr),e(X0,hIr),e(xe,uIr),e(xe,z0),e(z0,S5e),e(S5e,pIr),e(z0,_Ir),e(z0,zK),e(zK,bIr),e(z0,vIr),e(xe,FIr),e(xe,W0),e(W0,R5e),e(R5e,TIr),e(W0,MIr),e(W0,WK),e(WK,EIr),e(W0,CIr),e(xe,wIr),e(xe,Q0),e(Q0,P5e),e(P5e,AIr),e(Q0,LIr),e(Q0,QK),e(QK,yIr),e(Q0,xIr),e(xe,$Ir),e(xe,H0),e(H0,B5e),e(B5e,kIr),e(H0,SIr),e(H0,HK),e(HK,RIr),e(H0,PIr),e(xe,BIr),e(xe,U0),e(U0,I5e),e(I5e,IIr),e(U0,NIr),e(U0,UK),e(UK,qIr),e(U0,jIr),e(xe,DIr),e(xe,J0),e(J0,N5e),e(N5e,GIr),e(J0,OIr),e(J0,JK),e(JK,VIr),e(J0,XIr),e(Or,zIr),M(Y0,Or,null),b(m,xOe,_),b(m,Qc,_),e(Qc,K0),e(K0,q5e),M($x,q5e,null),e(Qc,WIr),e(Qc,j5e),e(j5e,QIr),b(m,$Oe,_),b(m,ur,_),M(kx,ur,null),e(ur,HIr),e(ur,Hc),e(Hc,UIr),e(Hc,YK),e(YK,JIr),e(Hc,YIr),e(Hc,KK),e(KK,KIr),e(Hc,ZIr),e(ur,eNr),e(ur,Sx),e(Sx,oNr),e(Sx,D5e),e(D5e,rNr),e(Sx,tNr),e(ur,aNr),e(ur,Wt),M(Rx,Wt,null),e(Wt,nNr),e(Wt,G5e),e(G5e,sNr),e(Wt,lNr),e(Wt,Uc),e(Uc,iNr),e(Uc,O5e),e(O5e,dNr),e(Uc,cNr),e(Uc,ZK),e(ZK,mNr),e(Uc,fNr),e(Wt,gNr),M(Z0,Wt,null),e(ur,hNr),e(ur,Vr),M(Px,Vr,null),e(Vr,uNr),e(Vr,V5e),e(V5e,pNr),e(Vr,_Nr),e(Vr,Tn),e(Tn,bNr),e(Tn,X5e),e(X5e,vNr),e(Tn,FNr),e(Tn,z5e),e(z5e,TNr),e(Tn,MNr),e(Tn,W5e),e(W5e,ENr),e(Tn,CNr),e(Vr,wNr),e(Vr,Ee),e(Ee,ew),e(ew,Q5e),e(Q5e,ANr),e(ew,LNr),e(ew,eZ),e(eZ,yNr),e(ew,xNr),e(Ee,$Nr),e(Ee,ow),e(ow,H5e),e(H5e,kNr),e(ow,SNr),e(ow,oZ),e(oZ,RNr),e(ow,PNr),e(Ee,BNr),e(Ee,rw),e(rw,U5e),e(U5e,INr),e(rw,NNr),e(rw,rZ),e(rZ,qNr),e(rw,jNr),e(Ee,DNr),e(Ee,tw),e(tw,J5e),e(J5e,GNr),e(tw,ONr),e(tw,tZ),e(tZ,VNr),e(tw,XNr),e(Ee,zNr),e(Ee,aw),e(aw,Y5e),e(Y5e,WNr),e(aw,QNr),e(aw,aZ),e(aZ,HNr),e(aw,UNr),e(Ee,JNr),e(Ee,nw),e(nw,K5e),e(K5e,YNr),e(nw,KNr),e(nw,nZ),e(nZ,ZNr),e(nw,eqr),e(Ee,oqr),e(Ee,sw),e(sw,Z5e),e(Z5e,rqr),e(sw,tqr),e(sw,sZ),e(sZ,aqr),e(sw,nqr),e(Ee,sqr),e(Ee,lw),e(lw,e3e),e(e3e,lqr),e(lw,iqr),e(lw,lZ),e(lZ,dqr),e(lw,cqr),e(Ee,mqr),e(Ee,iw),e(iw,o3e),e(o3e,fqr),e(iw,gqr),e(iw,iZ),e(iZ,hqr),e(iw,uqr),e(Ee,pqr),e(Ee,dw),e(dw,r3e),e(r3e,_qr),e(dw,bqr),e(dw,dZ),e(dZ,vqr),e(dw,Fqr),e(Ee,Tqr),e(Ee,cw),e(cw,t3e),e(t3e,Mqr),e(cw,Eqr),e(cw,cZ),e(cZ,Cqr),e(cw,wqr),e(Ee,Aqr),e(Ee,mw),e(mw,a3e),e(a3e,Lqr),e(mw,yqr),e(mw,mZ),e(mZ,xqr),e(mw,$qr),e(Ee,kqr),e(Ee,fw),e(fw,n3e),e(n3e,Sqr),e(fw,Rqr),e(fw,fZ),e(fZ,Pqr),e(fw,Bqr),e(Vr,Iqr),M(gw,Vr,null),b(m,kOe,_),b(m,Jc,_),e(Jc,hw),e(hw,s3e),M(Bx,s3e,null),e(Jc,Nqr),e(Jc,l3e),e(l3e,qqr),b(m,SOe,_),b(m,pr,_),M(Ix,pr,null),e(pr,jqr),e(pr,Yc),e(Yc,Dqr),e(Yc,gZ),e(gZ,Gqr),e(Yc,Oqr),e(Yc,hZ),e(hZ,Vqr),e(Yc,Xqr),e(pr,zqr),e(pr,Nx),e(Nx,Wqr),e(Nx,i3e),e(i3e,Qqr),e(Nx,Hqr),e(pr,Uqr),e(pr,Qt),M(qx,Qt,null),e(Qt,Jqr),e(Qt,d3e),e(d3e,Yqr),e(Qt,Kqr),e(Qt,Kc),e(Kc,Zqr),e(Kc,c3e),e(c3e,ejr),e(Kc,ojr),e(Kc,uZ),e(uZ,rjr),e(Kc,tjr),e(Qt,ajr),M(uw,Qt,null),e(pr,njr),e(pr,Xr),M(jx,Xr,null),e(Xr,sjr),e(Xr,m3e),e(m3e,ljr),e(Xr,ijr),e(Xr,Mn),e(Mn,djr),e(Mn,f3e),e(f3e,cjr),e(Mn,mjr),e(Mn,g3e),e(g3e,fjr),e(Mn,gjr),e(Mn,h3e),e(h3e,hjr),e(Mn,ujr),e(Xr,pjr),e(Xr,$e),e($e,pw),e(pw,u3e),e(u3e,_jr),e(pw,bjr),e(pw,pZ),e(pZ,vjr),e(pw,Fjr),e($e,Tjr),e($e,_w),e(_w,p3e),e(p3e,Mjr),e(_w,Ejr),e(_w,_Z),e(_Z,Cjr),e(_w,wjr),e($e,Ajr),e($e,bw),e(bw,_3e),e(_3e,Ljr),e(bw,yjr),e(bw,bZ),e(bZ,xjr),e(bw,$jr),e($e,kjr),e($e,vw),e(vw,b3e),e(b3e,Sjr),e(vw,Rjr),e(vw,vZ),e(vZ,Pjr),e(vw,Bjr),e($e,Ijr),e($e,Fw),e(Fw,v3e),e(v3e,Njr),e(Fw,qjr),e(Fw,FZ),e(FZ,jjr),e(Fw,Djr),e($e,Gjr),e($e,Tw),e(Tw,F3e),e(F3e,Ojr),e(Tw,Vjr),e(Tw,TZ),e(TZ,Xjr),e(Tw,zjr),e($e,Wjr),e($e,Mw),e(Mw,T3e),e(T3e,Qjr),e(Mw,Hjr),e(Mw,MZ),e(MZ,Ujr),e(Mw,Jjr),e($e,Yjr),e($e,Ew),e(Ew,M3e),e(M3e,Kjr),e(Ew,Zjr),e(Ew,EZ),e(EZ,eDr),e(Ew,oDr),e($e,rDr),e($e,Cw),e(Cw,E3e),e(E3e,tDr),e(Cw,aDr),e(Cw,CZ),e(CZ,nDr),e(Cw,sDr),e($e,lDr),e($e,ww),e(ww,C3e),e(C3e,iDr),e(ww,dDr),e(ww,wZ),e(wZ,cDr),e(ww,mDr),e(Xr,fDr),M(Aw,Xr,null),b(m,ROe,_),b(m,Zc,_),e(Zc,Lw),e(Lw,w3e),M(Dx,w3e,null),e(Zc,gDr),e(Zc,A3e),e(A3e,hDr),b(m,POe,_),b(m,_r,_),M(Gx,_r,null),e(_r,uDr),e(_r,em),e(em,pDr),e(em,AZ),e(AZ,_Dr),e(em,bDr),e(em,LZ),e(LZ,vDr),e(em,FDr),e(_r,TDr),e(_r,Ox),e(Ox,MDr),e(Ox,L3e),e(L3e,EDr),e(Ox,CDr),e(_r,wDr),e(_r,Ht),M(Vx,Ht,null),e(Ht,ADr),e(Ht,y3e),e(y3e,LDr),e(Ht,yDr),e(Ht,om),e(om,xDr),e(om,x3e),e(x3e,$Dr),e(om,kDr),e(om,yZ),e(yZ,SDr),e(om,RDr),e(Ht,PDr),M(yw,Ht,null),e(_r,BDr),e(_r,zr),M(Xx,zr,null),e(zr,IDr),e(zr,$3e),e($3e,NDr),e(zr,qDr),e(zr,En),e(En,jDr),e(En,k3e),e(k3e,DDr),e(En,GDr),e(En,S3e),e(S3e,ODr),e(En,VDr),e(En,R3e),e(R3e,XDr),e(En,zDr),e(zr,WDr),e(zr,ke),e(ke,xw),e(xw,P3e),e(P3e,QDr),e(xw,HDr),e(xw,xZ),e(xZ,UDr),e(xw,JDr),e(ke,YDr),e(ke,$w),e($w,B3e),e(B3e,KDr),e($w,ZDr),e($w,$Z),e($Z,eGr),e($w,oGr),e(ke,rGr),e(ke,kw),e(kw,I3e),e(I3e,tGr),e(kw,aGr),e(kw,kZ),e(kZ,nGr),e(kw,sGr),e(ke,lGr),e(ke,Sw),e(Sw,N3e),e(N3e,iGr),e(Sw,dGr),e(Sw,SZ),e(SZ,cGr),e(Sw,mGr),e(ke,fGr),e(ke,Rw),e(Rw,q3e),e(q3e,gGr),e(Rw,hGr),e(Rw,RZ),e(RZ,uGr),e(Rw,pGr),e(ke,_Gr),e(ke,Pw),e(Pw,j3e),e(j3e,bGr),e(Pw,vGr),e(Pw,PZ),e(PZ,FGr),e(Pw,TGr),e(ke,MGr),e(ke,Bw),e(Bw,D3e),e(D3e,EGr),e(Bw,CGr),e(Bw,BZ),e(BZ,wGr),e(Bw,AGr),e(ke,LGr),e(ke,Iw),e(Iw,G3e),e(G3e,yGr),e(Iw,xGr),e(Iw,IZ),e(IZ,$Gr),e(Iw,kGr),e(ke,SGr),e(ke,Nw),e(Nw,O3e),e(O3e,RGr),e(Nw,PGr),e(Nw,NZ),e(NZ,BGr),e(Nw,IGr),e(ke,NGr),e(ke,qw),e(qw,V3e),e(V3e,qGr),e(qw,jGr),e(qw,qZ),e(qZ,DGr),e(qw,GGr),e(zr,OGr),M(jw,zr,null),b(m,BOe,_),b(m,rm,_),e(rm,Dw),e(Dw,X3e),M(zx,X3e,null),e(rm,VGr),e(rm,z3e),e(z3e,XGr),b(m,IOe,_),b(m,br,_),M(Wx,br,null),e(br,zGr),e(br,tm),e(tm,WGr),e(tm,jZ),e(jZ,QGr),e(tm,HGr),e(tm,DZ),e(DZ,UGr),e(tm,JGr),e(br,YGr),e(br,Qx),e(Qx,KGr),e(Qx,W3e),e(W3e,ZGr),e(Qx,eOr),e(br,oOr),e(br,Ut),M(Hx,Ut,null),e(Ut,rOr),e(Ut,Q3e),e(Q3e,tOr),e(Ut,aOr),e(Ut,am),e(am,nOr),e(am,H3e),e(H3e,sOr),e(am,lOr),e(am,GZ),e(GZ,iOr),e(am,dOr),e(Ut,cOr),M(Gw,Ut,null),e(br,mOr),e(br,Wr),M(Ux,Wr,null),e(Wr,fOr),e(Wr,U3e),e(U3e,gOr),e(Wr,hOr),e(Wr,Cn),e(Cn,uOr),e(Cn,J3e),e(J3e,pOr),e(Cn,_Or),e(Cn,Y3e),e(Y3e,bOr),e(Cn,vOr),e(Cn,K3e),e(K3e,FOr),e(Cn,TOr),e(Wr,MOr),e(Wr,Se),e(Se,Ow),e(Ow,Z3e),e(Z3e,EOr),e(Ow,COr),e(Ow,OZ),e(OZ,wOr),e(Ow,AOr),e(Se,LOr),e(Se,Vw),e(Vw,e0e),e(e0e,yOr),e(Vw,xOr),e(Vw,VZ),e(VZ,$Or),e(Vw,kOr),e(Se,SOr),e(Se,Xw),e(Xw,o0e),e(o0e,ROr),e(Xw,POr),e(Xw,XZ),e(XZ,BOr),e(Xw,IOr),e(Se,NOr),e(Se,zw),e(zw,r0e),e(r0e,qOr),e(zw,jOr),e(zw,zZ),e(zZ,DOr),e(zw,GOr),e(Se,OOr),e(Se,Ww),e(Ww,t0e),e(t0e,VOr),e(Ww,XOr),e(Ww,WZ),e(WZ,zOr),e(Ww,WOr),e(Se,QOr),e(Se,Qw),e(Qw,a0e),e(a0e,HOr),e(Qw,UOr),e(Qw,QZ),e(QZ,JOr),e(Qw,YOr),e(Se,KOr),e(Se,Hw),e(Hw,n0e),e(n0e,ZOr),e(Hw,eVr),e(Hw,HZ),e(HZ,oVr),e(Hw,rVr),e(Se,tVr),e(Se,Uw),e(Uw,s0e),e(s0e,aVr),e(Uw,nVr),e(Uw,UZ),e(UZ,sVr),e(Uw,lVr),e(Se,iVr),e(Se,Jw),e(Jw,l0e),e(l0e,dVr),e(Jw,cVr),e(Jw,JZ),e(JZ,mVr),e(Jw,fVr),e(Se,gVr),e(Se,Yw),e(Yw,i0e),e(i0e,hVr),e(Yw,uVr),e(Yw,YZ),e(YZ,pVr),e(Yw,_Vr),e(Wr,bVr),M(Kw,Wr,null),b(m,NOe,_),b(m,nm,_),e(nm,Zw),e(Zw,d0e),M(Jx,d0e,null),e(nm,vVr),e(nm,c0e),e(c0e,FVr),b(m,qOe,_),b(m,vr,_),M(Yx,vr,null),e(vr,TVr),e(vr,sm),e(sm,MVr),e(sm,KZ),e(KZ,EVr),e(sm,CVr),e(sm,ZZ),e(ZZ,wVr),e(sm,AVr),e(vr,LVr),e(vr,Kx),e(Kx,yVr),e(Kx,m0e),e(m0e,xVr),e(Kx,$Vr),e(vr,kVr),e(vr,Jt),M(Zx,Jt,null),e(Jt,SVr),e(Jt,f0e),e(f0e,RVr),e(Jt,PVr),e(Jt,lm),e(lm,BVr),e(lm,g0e),e(g0e,IVr),e(lm,NVr),e(lm,eee),e(eee,qVr),e(lm,jVr),e(Jt,DVr),M(eA,Jt,null),e(vr,GVr),e(vr,Qr),M(e$,Qr,null),e(Qr,OVr),e(Qr,h0e),e(h0e,VVr),e(Qr,XVr),e(Qr,wn),e(wn,zVr),e(wn,u0e),e(u0e,WVr),e(wn,QVr),e(wn,p0e),e(p0e,HVr),e(wn,UVr),e(wn,_0e),e(_0e,JVr),e(wn,YVr),e(Qr,KVr),e(Qr,Re),e(Re,oA),e(oA,b0e),e(b0e,ZVr),e(oA,eXr),e(oA,oee),e(oee,oXr),e(oA,rXr),e(Re,tXr),e(Re,rA),e(rA,v0e),e(v0e,aXr),e(rA,nXr),e(rA,ree),e(ree,sXr),e(rA,lXr),e(Re,iXr),e(Re,tA),e(tA,F0e),e(F0e,dXr),e(tA,cXr),e(tA,tee),e(tee,mXr),e(tA,fXr),e(Re,gXr),e(Re,aA),e(aA,T0e),e(T0e,hXr),e(aA,uXr),e(aA,aee),e(aee,pXr),e(aA,_Xr),e(Re,bXr),e(Re,nA),e(nA,M0e),e(M0e,vXr),e(nA,FXr),e(nA,nee),e(nee,TXr),e(nA,MXr),e(Re,EXr),e(Re,sA),e(sA,E0e),e(E0e,CXr),e(sA,wXr),e(sA,see),e(see,AXr),e(sA,LXr),e(Re,yXr),e(Re,lA),e(lA,C0e),e(C0e,xXr),e(lA,$Xr),e(lA,lee),e(lee,kXr),e(lA,SXr),e(Re,RXr),e(Re,iA),e(iA,w0e),e(w0e,PXr),e(iA,BXr),e(iA,iee),e(iee,IXr),e(iA,NXr),e(Re,qXr),e(Re,dA),e(dA,A0e),e(A0e,jXr),e(dA,DXr),e(dA,dee),e(dee,GXr),e(dA,OXr),e(Re,VXr),e(Re,cA),e(cA,L0e),e(L0e,XXr),e(cA,zXr),e(cA,cee),e(cee,WXr),e(cA,QXr),e(Qr,HXr),M(mA,Qr,null),b(m,jOe,_),b(m,im,_),e(im,fA),e(fA,y0e),M(o$,y0e,null),e(im,UXr),e(im,x0e),e(x0e,JXr),b(m,DOe,_),b(m,Fr,_),M(r$,Fr,null),e(Fr,YXr),e(Fr,dm),e(dm,KXr),e(dm,mee),e(mee,ZXr),e(dm,ezr),e(dm,fee),e(fee,ozr),e(dm,rzr),e(Fr,tzr),e(Fr,t$),e(t$,azr),e(t$,$0e),e($0e,nzr),e(t$,szr),e(Fr,lzr),e(Fr,Yt),M(a$,Yt,null),e(Yt,izr),e(Yt,k0e),e(k0e,dzr),e(Yt,czr),e(Yt,cm),e(cm,mzr),e(cm,S0e),e(S0e,fzr),e(cm,gzr),e(cm,gee),e(gee,hzr),e(cm,uzr),e(Yt,pzr),M(gA,Yt,null),e(Fr,_zr),e(Fr,Hr),M(n$,Hr,null),e(Hr,bzr),e(Hr,R0e),e(R0e,vzr),e(Hr,Fzr),e(Hr,An),e(An,Tzr),e(An,P0e),e(P0e,Mzr),e(An,Ezr),e(An,B0e),e(B0e,Czr),e(An,wzr),e(An,I0e),e(I0e,Azr),e(An,Lzr),e(Hr,yzr),e(Hr,Ve),e(Ve,hA),e(hA,N0e),e(N0e,xzr),e(hA,$zr),e(hA,hee),e(hee,kzr),e(hA,Szr),e(Ve,Rzr),e(Ve,uA),e(uA,q0e),e(q0e,Pzr),e(uA,Bzr),e(uA,uee),e(uee,Izr),e(uA,Nzr),e(Ve,qzr),e(Ve,pA),e(pA,j0e),e(j0e,jzr),e(pA,Dzr),e(pA,pee),e(pee,Gzr),e(pA,Ozr),e(Ve,Vzr),e(Ve,_A),e(_A,D0e),e(D0e,Xzr),e(_A,zzr),e(_A,_ee),e(_ee,Wzr),e(_A,Qzr),e(Ve,Hzr),e(Ve,bA),e(bA,G0e),e(G0e,Uzr),e(bA,Jzr),e(bA,bee),e(bee,Yzr),e(bA,Kzr),e(Ve,Zzr),e(Ve,vA),e(vA,O0e),e(O0e,eWr),e(vA,oWr),e(vA,vee),e(vee,rWr),e(vA,tWr),e(Ve,aWr),e(Ve,FA),e(FA,V0e),e(V0e,nWr),e(FA,sWr),e(FA,Fee),e(Fee,lWr),e(FA,iWr),e(Ve,dWr),e(Ve,TA),e(TA,X0e),e(X0e,cWr),e(TA,mWr),e(TA,Tee),e(Tee,fWr),e(TA,gWr),e(Hr,hWr),M(MA,Hr,null),b(m,GOe,_),b(m,mm,_),e(mm,EA),e(EA,z0e),M(s$,z0e,null),e(mm,uWr),e(mm,W0e),e(W0e,pWr),b(m,OOe,_),b(m,Tr,_),M(l$,Tr,null),e(Tr,_Wr),e(Tr,fm),e(fm,bWr),e(fm,Mee),e(Mee,vWr),e(fm,FWr),e(fm,Eee),e(Eee,TWr),e(fm,MWr),e(Tr,EWr),e(Tr,i$),e(i$,CWr),e(i$,Q0e),e(Q0e,wWr),e(i$,AWr),e(Tr,LWr),e(Tr,Kt),M(d$,Kt,null),e(Kt,yWr),e(Kt,H0e),e(H0e,xWr),e(Kt,$Wr),e(Kt,gm),e(gm,kWr),e(gm,U0e),e(U0e,SWr),e(gm,RWr),e(gm,Cee),e(Cee,PWr),e(gm,BWr),e(Kt,IWr),M(CA,Kt,null),e(Tr,NWr),e(Tr,Ur),M(c$,Ur,null),e(Ur,qWr),e(Ur,J0e),e(J0e,jWr),e(Ur,DWr),e(Ur,Ln),e(Ln,GWr),e(Ln,Y0e),e(Y0e,OWr),e(Ln,VWr),e(Ln,K0e),e(K0e,XWr),e(Ln,zWr),e(Ln,Z0e),e(Z0e,WWr),e(Ln,QWr),e(Ur,HWr),e(Ur,Xe),e(Xe,wA),e(wA,ewe),e(ewe,UWr),e(wA,JWr),e(wA,wee),e(wee,YWr),e(wA,KWr),e(Xe,ZWr),e(Xe,AA),e(AA,owe),e(owe,eQr),e(AA,oQr),e(AA,Aee),e(Aee,rQr),e(AA,tQr),e(Xe,aQr),e(Xe,LA),e(LA,rwe),e(rwe,nQr),e(LA,sQr),e(LA,Lee),e(Lee,lQr),e(LA,iQr),e(Xe,dQr),e(Xe,yA),e(yA,twe),e(twe,cQr),e(yA,mQr),e(yA,yee),e(yee,fQr),e(yA,gQr),e(Xe,hQr),e(Xe,xA),e(xA,awe),e(awe,uQr),e(xA,pQr),e(xA,xee),e(xee,_Qr),e(xA,bQr),e(Xe,vQr),e(Xe,$A),e($A,nwe),e(nwe,FQr),e($A,TQr),e($A,$ee),e($ee,MQr),e($A,EQr),e(Xe,CQr),e(Xe,kA),e(kA,swe),e(swe,wQr),e(kA,AQr),e(kA,kee),e(kee,LQr),e(kA,yQr),e(Xe,xQr),e(Xe,SA),e(SA,lwe),e(lwe,$Qr),e(SA,kQr),e(SA,See),e(See,SQr),e(SA,RQr),e(Ur,PQr),M(RA,Ur,null),b(m,VOe,_),b(m,hm,_),e(hm,PA),e(PA,iwe),M(m$,iwe,null),e(hm,BQr),e(hm,dwe),e(dwe,IQr),b(m,XOe,_),b(m,Mr,_),M(f$,Mr,null),e(Mr,NQr),e(Mr,um),e(um,qQr),e(um,Ree),e(Ree,jQr),e(um,DQr),e(um,Pee),e(Pee,GQr),e(um,OQr),e(Mr,VQr),e(Mr,g$),e(g$,XQr),e(g$,cwe),e(cwe,zQr),e(g$,WQr),e(Mr,QQr),e(Mr,Zt),M(h$,Zt,null),e(Zt,HQr),e(Zt,mwe),e(mwe,UQr),e(Zt,JQr),e(Zt,pm),e(pm,YQr),e(pm,fwe),e(fwe,KQr),e(pm,ZQr),e(pm,Bee),e(Bee,eHr),e(pm,oHr),e(Zt,rHr),M(BA,Zt,null),e(Mr,tHr),e(Mr,Jr),M(u$,Jr,null),e(Jr,aHr),e(Jr,gwe),e(gwe,nHr),e(Jr,sHr),e(Jr,yn),e(yn,lHr),e(yn,hwe),e(hwe,iHr),e(yn,dHr),e(yn,uwe),e(uwe,cHr),e(yn,mHr),e(yn,pwe),e(pwe,fHr),e(yn,gHr),e(Jr,hHr),e(Jr,_we),e(_we,IA),e(IA,bwe),e(bwe,uHr),e(IA,pHr),e(IA,Iee),e(Iee,_Hr),e(IA,bHr),e(Jr,vHr),M(NA,Jr,null),b(m,zOe,_),b(m,_m,_),e(_m,qA),e(qA,vwe),M(p$,vwe,null),e(_m,FHr),e(_m,Fwe),e(Fwe,THr),b(m,WOe,_),b(m,Er,_),M(_$,Er,null),e(Er,MHr),e(Er,bm),e(bm,EHr),e(bm,Nee),e(Nee,CHr),e(bm,wHr),e(bm,qee),e(qee,AHr),e(bm,LHr),e(Er,yHr),e(Er,b$),e(b$,xHr),e(b$,Twe),e(Twe,$Hr),e(b$,kHr),e(Er,SHr),e(Er,ea),M(v$,ea,null),e(ea,RHr),e(ea,Mwe),e(Mwe,PHr),e(ea,BHr),e(ea,vm),e(vm,IHr),e(vm,Ewe),e(Ewe,NHr),e(vm,qHr),e(vm,jee),e(jee,jHr),e(vm,DHr),e(ea,GHr),M(jA,ea,null),e(Er,OHr),e(Er,Yr),M(F$,Yr,null),e(Yr,VHr),e(Yr,Cwe),e(Cwe,XHr),e(Yr,zHr),e(Yr,xn),e(xn,WHr),e(xn,wwe),e(wwe,QHr),e(xn,HHr),e(xn,Awe),e(Awe,UHr),e(xn,JHr),e(xn,Lwe),e(Lwe,YHr),e(xn,KHr),e(Yr,ZHr),e(Yr,T$),e(T$,DA),e(DA,ywe),e(ywe,eUr),e(DA,oUr),e(DA,Dee),e(Dee,rUr),e(DA,tUr),e(T$,aUr),e(T$,GA),e(GA,xwe),e(xwe,nUr),e(GA,sUr),e(GA,Gee),e(Gee,lUr),e(GA,iUr),e(Yr,dUr),M(OA,Yr,null),b(m,QOe,_),b(m,Fm,_),e(Fm,VA),e(VA,$we),M(M$,$we,null),e(Fm,cUr),e(Fm,kwe),e(kwe,mUr),b(m,HOe,_),b(m,Cr,_),M(E$,Cr,null),e(Cr,fUr),e(Cr,Tm),e(Tm,gUr),e(Tm,Oee),e(Oee,hUr),e(Tm,uUr),e(Tm,Vee),e(Vee,pUr),e(Tm,_Ur),e(Cr,bUr),e(Cr,C$),e(C$,vUr),e(C$,Swe),e(Swe,FUr),e(C$,TUr),e(Cr,MUr),e(Cr,oa),M(w$,oa,null),e(oa,EUr),e(oa,Rwe),e(Rwe,CUr),e(oa,wUr),e(oa,Mm),e(Mm,AUr),e(Mm,Pwe),e(Pwe,LUr),e(Mm,yUr),e(Mm,Xee),e(Xee,xUr),e(Mm,$Ur),e(oa,kUr),M(XA,oa,null),e(Cr,SUr),e(Cr,Kr),M(A$,Kr,null),e(Kr,RUr),e(Kr,Bwe),e(Bwe,PUr),e(Kr,BUr),e(Kr,$n),e($n,IUr),e($n,Iwe),e(Iwe,NUr),e($n,qUr),e($n,Nwe),e(Nwe,jUr),e($n,DUr),e($n,qwe),e(qwe,GUr),e($n,OUr),e(Kr,VUr),e(Kr,jwe),e(jwe,zA),e(zA,Dwe),e(Dwe,XUr),e(zA,zUr),e(zA,zee),e(zee,WUr),e(zA,QUr),e(Kr,HUr),M(WA,Kr,null),UOe=!0},p(m,[_]){const L$={};_&2&&(L$.$$scope={dirty:_,ctx:m}),km.$set(L$);const Gwe={};_&2&&(Gwe.$$scope={dirty:_,ctx:m}),jg.$set(Gwe);const Owe={};_&2&&(Owe.$$scope={dirty:_,ctx:m}),Th.$set(Owe);const Vwe={};_&2&&(Vwe.$$scope={dirty:_,ctx:m}),ru.$set(Vwe);const y$={};_&2&&(y$.$$scope={dirty:_,ctx:m}),tu.$set(y$);const Xwe={};_&2&&(Xwe.$$scope={dirty:_,ctx:m}),Eu.$set(Xwe);const kn={};_&2&&(kn.$$scope={dirty:_,ctx:m}),Cu.$set(kn);const zwe={};_&2&&(zwe.$$scope={dirty:_,ctx:m}),Lu.$set(zwe);const Wwe={};_&2&&(Wwe.$$scope={dirty:_,ctx:m}),A_.$set(Wwe);const Qwe={};_&2&&(Qwe.$$scope={dirty:_,ctx:m}),y_.$set(Qwe);const x$={};_&2&&(x$.$$scope={dirty:_,ctx:m}),v2.$set(x$);const Hwe={};_&2&&(Hwe.$$scope={dirty:_,ctx:m}),T2.$set(Hwe);const $$={};_&2&&($$.$$scope={dirty:_,ctx:m}),lb.$set($$);const Uwe={};_&2&&(Uwe.$$scope={dirty:_,ctx:m}),db.$set(Uwe);const k$={};_&2&&(k$.$$scope={dirty:_,ctx:m}),Qb.$set(k$);const Jwe={};_&2&&(Jwe.$$scope={dirty:_,ctx:m}),Ub.$set(Jwe);const Ywe={};_&2&&(Ywe.$$scope={dirty:_,ctx:m}),hv.$set(Ywe);const Kwe={};_&2&&(Kwe.$$scope={dirty:_,ctx:m}),pv.$set(Kwe);const Em={};_&2&&(Em.$$scope={dirty:_,ctx:m}),mF.$set(Em);const Zwe={};_&2&&(Zwe.$$scope={dirty:_,ctx:m}),gF.$set(Zwe);const eAe={};_&2&&(eAe.$$scope={dirty:_,ctx:m}),XF.$set(eAe);const oAe={};_&2&&(oAe.$$scope={dirty:_,ctx:m}),WF.$set(oAe);const S$={};_&2&&(S$.$$scope={dirty:_,ctx:m}),ZF.$set(S$);const rAe={};_&2&&(rAe.$$scope={dirty:_,ctx:m}),o1.$set(rAe);const tAe={};_&2&&(tAe.$$scope={dirty:_,ctx:m}),N1.$set(tAe);const aAe={};_&2&&(aAe.$$scope={dirty:_,ctx:m}),j1.$set(aAe);const rt={};_&2&&(rt.$$scope={dirty:_,ctx:m}),LT.$set(rt);const R$={};_&2&&(R$.$$scope={dirty:_,ctx:m}),xT.$set(R$);const nAe={};_&2&&(nAe.$$scope={dirty:_,ctx:m}),ST.$set(nAe);const P$={};_&2&&(P$.$$scope={dirty:_,ctx:m}),PT.$set(P$);const sAe={};_&2&&(sAe.$$scope={dirty:_,ctx:m}),HT.$set(sAe);const tt={};_&2&&(tt.$$scope={dirty:_,ctx:m}),JT.$set(tt);const lAe={};_&2&&(lAe.$$scope={dirty:_,ctx:m}),ZT.$set(lAe);const Cm={};_&2&&(Cm.$$scope={dirty:_,ctx:m}),oM.$set(Cm);const iAe={};_&2&&(iAe.$$scope={dirty:_,ctx:m}),aM.$set(iAe);const dAe={};_&2&&(dAe.$$scope={dirty:_,ctx:m}),sM.$set(dAe);const L={};_&2&&(L.$$scope={dirty:_,ctx:m}),_M.$set(L);const QA={};_&2&&(QA.$$scope={dirty:_,ctx:m}),vM.$set(QA);const cAe={};_&2&&(cAe.$$scope={dirty:_,ctx:m}),AM.$set(cAe);const mAe={};_&2&&(mAe.$$scope={dirty:_,ctx:m}),yM.$set(mAe);const HA={};_&2&&(HA.$$scope={dirty:_,ctx:m}),DM.$set(HA);const fAe={};_&2&&(fAe.$$scope={dirty:_,ctx:m}),OM.$set(fAe);const gAe={};_&2&&(gAe.$$scope={dirty:_,ctx:m}),WM.$set(gAe);const UA={};_&2&&(UA.$$scope={dirty:_,ctx:m}),HM.$set(UA);const hAe={};_&2&&(hAe.$$scope={dirty:_,ctx:m}),o4.$set(hAe);const uAe={};_&2&&(uAe.$$scope={dirty:_,ctx:m}),t4.$set(uAe);const JA={};_&2&&(JA.$$scope={dirty:_,ctx:m}),i4.$set(JA);const pAe={};_&2&&(pAe.$$scope={dirty:_,ctx:m}),c4.$set(pAe);const _Ae={};_&2&&(_Ae.$$scope={dirty:_,ctx:m}),h4.$set(_Ae);const YA={};_&2&&(YA.$$scope={dirty:_,ctx:m}),p4.$set(YA);const bAe={};_&2&&(bAe.$$scope={dirty:_,ctx:m}),v4.$set(bAe);const vAe={};_&2&&(vAe.$$scope={dirty:_,ctx:m}),T4.$set(vAe);const KA={};_&2&&(KA.$$scope={dirty:_,ctx:m}),L4.$set(KA);const FAe={};_&2&&(FAe.$$scope={dirty:_,ctx:m}),x4.$set(FAe);const TAe={};_&2&&(TAe.$$scope={dirty:_,ctx:m}),S4.$set(TAe);const ZA={};_&2&&(ZA.$$scope={dirty:_,ctx:m}),P4.$set(ZA);const MAe={};_&2&&(MAe.$$scope={dirty:_,ctx:m}),LE.$set(MAe);const EAe={};_&2&&(EAe.$$scope={dirty:_,ctx:m}),xE.$set(EAe);const e6={};_&2&&(e6.$$scope={dirty:_,ctx:m}),ZE.$set(e6);const CAe={};_&2&&(CAe.$$scope={dirty:_,ctx:m}),oC.$set(CAe);const wAe={};_&2&&(wAe.$$scope={dirty:_,ctx:m}),uC.$set(wAe);const o6={};_&2&&(o6.$$scope={dirty:_,ctx:m}),_C.$set(o6);const AAe={};_&2&&(AAe.$$scope={dirty:_,ctx:m}),MC.$set(AAe);const LAe={};_&2&&(LAe.$$scope={dirty:_,ctx:m}),CC.$set(LAe);const r6={};_&2&&(r6.$$scope={dirty:_,ctx:m}),zC.$set(r6);const yAe={};_&2&&(yAe.$$scope={dirty:_,ctx:m}),QC.$set(yAe);const xAe={};_&2&&(xAe.$$scope={dirty:_,ctx:m}),a5.$set(xAe);const t6={};_&2&&(t6.$$scope={dirty:_,ctx:m}),s5.$set(t6);const $Ae={};_&2&&($Ae.$$scope={dirty:_,ctx:m}),R5.$set($Ae);const kAe={};_&2&&(kAe.$$scope={dirty:_,ctx:m}),B5.$set(kAe);const a6={};_&2&&(a6.$$scope={dirty:_,ctx:m}),Z5.$set(a6);const SAe={};_&2&&(SAe.$$scope={dirty:_,ctx:m}),o3.$set(SAe);const RAe={};_&2&&(RAe.$$scope={dirty:_,ctx:m}),a3.$set(RAe);const n6={};_&2&&(n6.$$scope={dirty:_,ctx:m}),s3.$set(n6);const PAe={};_&2&&(PAe.$$scope={dirty:_,ctx:m}),i3.$set(PAe);const BAe={};_&2&&(BAe.$$scope={dirty:_,ctx:m}),c3.$set(BAe);const s6={};_&2&&(s6.$$scope={dirty:_,ctx:m}),k3.$set(s6);const IAe={};_&2&&(IAe.$$scope={dirty:_,ctx:m}),R3.$set(IAe);const NAe={};_&2&&(NAe.$$scope={dirty:_,ctx:m}),e0.$set(NAe);const l6={};_&2&&(l6.$$scope={dirty:_,ctx:m}),r0.$set(l6);const qAe={};_&2&&(qAe.$$scope={dirty:_,ctx:m}),a0.$set(qAe);const jAe={};_&2&&(jAe.$$scope={dirty:_,ctx:m}),s0.$set(jAe);const i6={};_&2&&(i6.$$scope={dirty:_,ctx:m}),i0.$set(i6);const DAe={};_&2&&(DAe.$$scope={dirty:_,ctx:m}),c0.$set(DAe);const GAe={};_&2&&(GAe.$$scope={dirty:_,ctx:m}),q0.$set(GAe);const d6={};_&2&&(d6.$$scope={dirty:_,ctx:m}),D0.$set(d6);const OAe={};_&2&&(OAe.$$scope={dirty:_,ctx:m}),Y0.$set(OAe);const VAe={};_&2&&(VAe.$$scope={dirty:_,ctx:m}),Z0.$set(VAe);const c6={};_&2&&(c6.$$scope={dirty:_,ctx:m}),gw.$set(c6);const XAe={};_&2&&(XAe.$$scope={dirty:_,ctx:m}),uw.$set(XAe);const zAe={};_&2&&(zAe.$$scope={dirty:_,ctx:m}),Aw.$set(zAe);const m6={};_&2&&(m6.$$scope={dirty:_,ctx:m}),yw.$set(m6);const WAe={};_&2&&(WAe.$$scope={dirty:_,ctx:m}),jw.$set(WAe);const QAe={};_&2&&(QAe.$$scope={dirty:_,ctx:m}),Gw.$set(QAe);const f6={};_&2&&(f6.$$scope={dirty:_,ctx:m}),Kw.$set(f6);const HAe={};_&2&&(HAe.$$scope={dirty:_,ctx:m}),eA.$set(HAe);const UAe={};_&2&&(UAe.$$scope={dirty:_,ctx:m}),mA.$set(UAe);const g6={};_&2&&(g6.$$scope={dirty:_,ctx:m}),gA.$set(g6);const JAe={};_&2&&(JAe.$$scope={dirty:_,ctx:m}),MA.$set(JAe);const YAe={};_&2&&(YAe.$$scope={dirty:_,ctx:m}),CA.$set(YAe);const h6={};_&2&&(h6.$$scope={dirty:_,ctx:m}),RA.$set(h6);const KAe={};_&2&&(KAe.$$scope={dirty:_,ctx:m}),BA.$set(KAe);const ZAe={};_&2&&(ZAe.$$scope={dirty:_,ctx:m}),NA.$set(ZAe);const u6={};_&2&&(u6.$$scope={dirty:_,ctx:m}),jA.$set(u6);const e6e={};_&2&&(e6e.$$scope={dirty:_,ctx:m}),OA.$set(e6e);const o6e={};_&2&&(o6e.$$scope={dirty:_,ctx:m}),XA.$set(o6e);const p6={};_&2&&(p6.$$scope={dirty:_,ctx:m}),WA.$set(p6)},i(m){UOe||(E(d.$$.fragment,m),E(ya.$$.fragment,m),E(_y.$$.fragment,m),E(by.$$.fragment,m),E(km.$$.fragment,m),E(vy.$$.fragment,m),E(Fy.$$.fragment,m),E(Ey.$$.fragment,m),E(jg.$$.fragment,m),E(Cy.$$.fragment,m),E(wy.$$.fragment,m),E(Ay.$$.fragment,m),E(xy.$$.fragment,m),E(Th.$$.fragment,m),E($y.$$.fragment,m),E(ky.$$.fragment,m),E(Sy.$$.fragment,m),E(By.$$.fragment,m),E(ru.$$.fragment,m),E(tu.$$.fragment,m),E(Iy.$$.fragment,m),E(Ny.$$.fragment,m),E(qy.$$.fragment,m),E(Gy.$$.fragment,m),E(Eu.$$.fragment,m),E(Cu.$$.fragment,m),E(Oy.$$.fragment,m),E(Vy.$$.fragment,m),E(Xy.$$.fragment,m),E(Wy.$$.fragment,m),E(Lu.$$.fragment,m),E(Qy.$$.fragment,m),E(A_.$$.fragment,m),E(Hy.$$.fragment,m),E(Uy.$$.fragment,m),E(Yy.$$.fragment,m),E(y_.$$.fragment,m),E(Ky.$$.fragment,m),E(v2.$$.fragment,m),E(Zy.$$.fragment,m),E(e7.$$.fragment,m),E(r7.$$.fragment,m),E(T2.$$.fragment,m),E(t7.$$.fragment,m),E(lb.$$.fragment,m),E(a7.$$.fragment,m),E(n7.$$.fragment,m),E(l7.$$.fragment,m),E(db.$$.fragment,m),E(i7.$$.fragment,m),E(Qb.$$.fragment,m),E(d7.$$.fragment,m),E(c7.$$.fragment,m),E(f7.$$.fragment,m),E(Ub.$$.fragment,m),E(g7.$$.fragment,m),E(hv.$$.fragment,m),E(h7.$$.fragment,m),E(u7.$$.fragment,m),E(_7.$$.fragment,m),E(pv.$$.fragment,m),E(b7.$$.fragment,m),E(mF.$$.fragment,m),E(v7.$$.fragment,m),E(F7.$$.fragment,m),E(M7.$$.fragment,m),E(gF.$$.fragment,m),E(E7.$$.fragment,m),E(XF.$$.fragment,m),E(C7.$$.fragment,m),E(w7.$$.fragment,m),E(L7.$$.fragment,m),E(WF.$$.fragment,m),E(y7.$$.fragment,m),E(ZF.$$.fragment,m),E(x7.$$.fragment,m),E($7.$$.fragment,m),E(S7.$$.fragment,m),E(o1.$$.fragment,m),E(R7.$$.fragment,m),E(N1.$$.fragment,m),E(P7.$$.fragment,m),E(B7.$$.fragment,m),E(N7.$$.fragment,m),E(j1.$$.fragment,m),E(q7.$$.fragment,m),E(LT.$$.fragment,m),E(j7.$$.fragment,m),E(D7.$$.fragment,m),E(O7.$$.fragment,m),E(xT.$$.fragment,m),E(V7.$$.fragment,m),E(ST.$$.fragment,m),E(X7.$$.fragment,m),E(z7.$$.fragment,m),E(Q7.$$.fragment,m),E(PT.$$.fragment,m),E(H7.$$.fragment,m),E(HT.$$.fragment,m),E(U7.$$.fragment,m),E(J7.$$.fragment,m),E(K7.$$.fragment,m),E(JT.$$.fragment,m),E(Z7.$$.fragment,m),E(ZT.$$.fragment,m),E(e8.$$.fragment,m),E(o8.$$.fragment,m),E(t8.$$.fragment,m),E(oM.$$.fragment,m),E(a8.$$.fragment,m),E(aM.$$.fragment,m),E(n8.$$.fragment,m),E(s8.$$.fragment,m),E(i8.$$.fragment,m),E(sM.$$.fragment,m),E(d8.$$.fragment,m),E(_M.$$.fragment,m),E(c8.$$.fragment,m),E(m8.$$.fragment,m),E(g8.$$.fragment,m),E(vM.$$.fragment,m),E(h8.$$.fragment,m),E(AM.$$.fragment,m),E(u8.$$.fragment,m),E(p8.$$.fragment,m),E(b8.$$.fragment,m),E(yM.$$.fragment,m),E(v8.$$.fragment,m),E(DM.$$.fragment,m),E(F8.$$.fragment,m),E(T8.$$.fragment,m),E(E8.$$.fragment,m),E(OM.$$.fragment,m),E(C8.$$.fragment,m),E(WM.$$.fragment,m),E(A8.$$.fragment,m),E(L8.$$.fragment,m),E(x8.$$.fragment,m),E(HM.$$.fragment,m),E($8.$$.fragment,m),E(o4.$$.fragment,m),E(k8.$$.fragment,m),E(S8.$$.fragment,m),E(P8.$$.fragment,m),E(t4.$$.fragment,m),E(B8.$$.fragment,m),E(i4.$$.fragment,m),E(I8.$$.fragment,m),E(N8.$$.fragment,m),E(j8.$$.fragment,m),E(c4.$$.fragment,m),E(D8.$$.fragment,m),E(h4.$$.fragment,m),E(O8.$$.fragment,m),E(V8.$$.fragment,m),E(z8.$$.fragment,m),E(p4.$$.fragment,m),E(W8.$$.fragment,m),E(v4.$$.fragment,m),E(Q8.$$.fragment,m),E(H8.$$.fragment,m),E(J8.$$.fragment,m),E(T4.$$.fragment,m),E(Y8.$$.fragment,m),E(L4.$$.fragment,m),E(K8.$$.fragment,m),E(Z8.$$.fragment,m),E(o9.$$.fragment,m),E(x4.$$.fragment,m),E(r9.$$.fragment,m),E(S4.$$.fragment,m),E(t9.$$.fragment,m),E(a9.$$.fragment,m),E(s9.$$.fragment,m),E(P4.$$.fragment,m),E(l9.$$.fragment,m),E(LE.$$.fragment,m),E(i9.$$.fragment,m),E(d9.$$.fragment,m),E(m9.$$.fragment,m),E(xE.$$.fragment,m),E(f9.$$.fragment,m),E(ZE.$$.fragment,m),E(g9.$$.fragment,m),E(h9.$$.fragment,m),E(p9.$$.fragment,m),E(oC.$$.fragment,m),E(_9.$$.fragment,m),E(uC.$$.fragment,m),E(b9.$$.fragment,m),E(v9.$$.fragment,m),E(T9.$$.fragment,m),E(_C.$$.fragment,m),E(M9.$$.fragment,m),E(MC.$$.fragment,m),E(E9.$$.fragment,m),E(C9.$$.fragment,m),E(A9.$$.fragment,m),E(CC.$$.fragment,m),E(L9.$$.fragment,m),E(zC.$$.fragment,m),E(y9.$$.fragment,m),E(x9.$$.fragment,m),E(k9.$$.fragment,m),E(QC.$$.fragment,m),E(S9.$$.fragment,m),E(a5.$$.fragment,m),E(R9.$$.fragment,m),E(P9.$$.fragment,m),E(I9.$$.fragment,m),E(s5.$$.fragment,m),E(N9.$$.fragment,m),E(R5.$$.fragment,m),E(q9.$$.fragment,m),E(j9.$$.fragment,m),E(G9.$$.fragment,m),E(B5.$$.fragment,m),E(O9.$$.fragment,m),E(Z5.$$.fragment,m),E(V9.$$.fragment,m),E(X9.$$.fragment,m),E(W9.$$.fragment,m),E(o3.$$.fragment,m),E(Q9.$$.fragment,m),E(a3.$$.fragment,m),E(U9.$$.fragment,m),E(J9.$$.fragment,m),E(K9.$$.fragment,m),E(s3.$$.fragment,m),E(Z9.$$.fragment,m),E(i3.$$.fragment,m),E(ex.$$.fragment,m),E(ox.$$.fragment,m),E(tx.$$.fragment,m),E(c3.$$.fragment,m),E(ax.$$.fragment,m),E(k3.$$.fragment,m),E(nx.$$.fragment,m),E(sx.$$.fragment,m),E(ix.$$.fragment,m),E(R3.$$.fragment,m),E(dx.$$.fragment,m),E(e0.$$.fragment,m),E(cx.$$.fragment,m),E(mx.$$.fragment,m),E(gx.$$.fragment,m),E(r0.$$.fragment,m),E(hx.$$.fragment,m),E(a0.$$.fragment,m),E(ux.$$.fragment,m),E(px.$$.fragment,m),E(bx.$$.fragment,m),E(s0.$$.fragment,m),E(vx.$$.fragment,m),E(i0.$$.fragment,m),E(Fx.$$.fragment,m),E(Tx.$$.fragment,m),E(Ex.$$.fragment,m),E(c0.$$.fragment,m),E(Cx.$$.fragment,m),E(q0.$$.fragment,m),E(wx.$$.fragment,m),E(Ax.$$.fragment,m),E(yx.$$.fragment,m),E(D0.$$.fragment,m),E(xx.$$.fragment,m),E(Y0.$$.fragment,m),E($x.$$.fragment,m),E(kx.$$.fragment,m),E(Rx.$$.fragment,m),E(Z0.$$.fragment,m),E(Px.$$.fragment,m),E(gw.$$.fragment,m),E(Bx.$$.fragment,m),E(Ix.$$.fragment,m),E(qx.$$.fragment,m),E(uw.$$.fragment,m),E(jx.$$.fragment,m),E(Aw.$$.fragment,m),E(Dx.$$.fragment,m),E(Gx.$$.fragment,m),E(Vx.$$.fragment,m),E(yw.$$.fragment,m),E(Xx.$$.fragment,m),E(jw.$$.fragment,m),E(zx.$$.fragment,m),E(Wx.$$.fragment,m),E(Hx.$$.fragment,m),E(Gw.$$.fragment,m),E(Ux.$$.fragment,m),E(Kw.$$.fragment,m),E(Jx.$$.fragment,m),E(Yx.$$.fragment,m),E(Zx.$$.fragment,m),E(eA.$$.fragment,m),E(e$.$$.fragment,m),E(mA.$$.fragment,m),E(o$.$$.fragment,m),E(r$.$$.fragment,m),E(a$.$$.fragment,m),E(gA.$$.fragment,m),E(n$.$$.fragment,m),E(MA.$$.fragment,m),E(s$.$$.fragment,m),E(l$.$$.fragment,m),E(d$.$$.fragment,m),E(CA.$$.fragment,m),E(c$.$$.fragment,m),E(RA.$$.fragment,m),E(m$.$$.fragment,m),E(f$.$$.fragment,m),E(h$.$$.fragment,m),E(BA.$$.fragment,m),E(u$.$$.fragment,m),E(NA.$$.fragment,m),E(p$.$$.fragment,m),E(_$.$$.fragment,m),E(v$.$$.fragment,m),E(jA.$$.fragment,m),E(F$.$$.fragment,m),E(OA.$$.fragment,m),E(M$.$$.fragment,m),E(E$.$$.fragment,m),E(w$.$$.fragment,m),E(XA.$$.fragment,m),E(A$.$$.fragment,m),E(WA.$$.fragment,m),UOe=!0)},o(m){C(d.$$.fragment,m),C(ya.$$.fragment,m),C(_y.$$.fragment,m),C(by.$$.fragment,m),C(km.$$.fragment,m),C(vy.$$.fragment,m),C(Fy.$$.fragment,m),C(Ey.$$.fragment,m),C(jg.$$.fragment,m),C(Cy.$$.fragment,m),C(wy.$$.fragment,m),C(Ay.$$.fragment,m),C(xy.$$.fragment,m),C(Th.$$.fragment,m),C($y.$$.fragment,m),C(ky.$$.fragment,m),C(Sy.$$.fragment,m),C(By.$$.fragment,m),C(ru.$$.fragment,m),C(tu.$$.fragment,m),C(Iy.$$.fragment,m),C(Ny.$$.fragment,m),C(qy.$$.fragment,m),C(Gy.$$.fragment,m),C(Eu.$$.fragment,m),C(Cu.$$.fragment,m),C(Oy.$$.fragment,m),C(Vy.$$.fragment,m),C(Xy.$$.fragment,m),C(Wy.$$.fragment,m),C(Lu.$$.fragment,m),C(Qy.$$.fragment,m),C(A_.$$.fragment,m),C(Hy.$$.fragment,m),C(Uy.$$.fragment,m),C(Yy.$$.fragment,m),C(y_.$$.fragment,m),C(Ky.$$.fragment,m),C(v2.$$.fragment,m),C(Zy.$$.fragment,m),C(e7.$$.fragment,m),C(r7.$$.fragment,m),C(T2.$$.fragment,m),C(t7.$$.fragment,m),C(lb.$$.fragment,m),C(a7.$$.fragment,m),C(n7.$$.fragment,m),C(l7.$$.fragment,m),C(db.$$.fragment,m),C(i7.$$.fragment,m),C(Qb.$$.fragment,m),C(d7.$$.fragment,m),C(c7.$$.fragment,m),C(f7.$$.fragment,m),C(Ub.$$.fragment,m),C(g7.$$.fragment,m),C(hv.$$.fragment,m),C(h7.$$.fragment,m),C(u7.$$.fragment,m),C(_7.$$.fragment,m),C(pv.$$.fragment,m),C(b7.$$.fragment,m),C(mF.$$.fragment,m),C(v7.$$.fragment,m),C(F7.$$.fragment,m),C(M7.$$.fragment,m),C(gF.$$.fragment,m),C(E7.$$.fragment,m),C(XF.$$.fragment,m),C(C7.$$.fragment,m),C(w7.$$.fragment,m),C(L7.$$.fragment,m),C(WF.$$.fragment,m),C(y7.$$.fragment,m),C(ZF.$$.fragment,m),C(x7.$$.fragment,m),C($7.$$.fragment,m),C(S7.$$.fragment,m),C(o1.$$.fragment,m),C(R7.$$.fragment,m),C(N1.$$.fragment,m),C(P7.$$.fragment,m),C(B7.$$.fragment,m),C(N7.$$.fragment,m),C(j1.$$.fragment,m),C(q7.$$.fragment,m),C(LT.$$.fragment,m),C(j7.$$.fragment,m),C(D7.$$.fragment,m),C(O7.$$.fragment,m),C(xT.$$.fragment,m),C(V7.$$.fragment,m),C(ST.$$.fragment,m),C(X7.$$.fragment,m),C(z7.$$.fragment,m),C(Q7.$$.fragment,m),C(PT.$$.fragment,m),C(H7.$$.fragment,m),C(HT.$$.fragment,m),C(U7.$$.fragment,m),C(J7.$$.fragment,m),C(K7.$$.fragment,m),C(JT.$$.fragment,m),C(Z7.$$.fragment,m),C(ZT.$$.fragment,m),C(e8.$$.fragment,m),C(o8.$$.fragment,m),C(t8.$$.fragment,m),C(oM.$$.fragment,m),C(a8.$$.fragment,m),C(aM.$$.fragment,m),C(n8.$$.fragment,m),C(s8.$$.fragment,m),C(i8.$$.fragment,m),C(sM.$$.fragment,m),C(d8.$$.fragment,m),C(_M.$$.fragment,m),C(c8.$$.fragment,m),C(m8.$$.fragment,m),C(g8.$$.fragment,m),C(vM.$$.fragment,m),C(h8.$$.fragment,m),C(AM.$$.fragment,m),C(u8.$$.fragment,m),C(p8.$$.fragment,m),C(b8.$$.fragment,m),C(yM.$$.fragment,m),C(v8.$$.fragment,m),C(DM.$$.fragment,m),C(F8.$$.fragment,m),C(T8.$$.fragment,m),C(E8.$$.fragment,m),C(OM.$$.fragment,m),C(C8.$$.fragment,m),C(WM.$$.fragment,m),C(A8.$$.fragment,m),C(L8.$$.fragment,m),C(x8.$$.fragment,m),C(HM.$$.fragment,m),C($8.$$.fragment,m),C(o4.$$.fragment,m),C(k8.$$.fragment,m),C(S8.$$.fragment,m),C(P8.$$.fragment,m),C(t4.$$.fragment,m),C(B8.$$.fragment,m),C(i4.$$.fragment,m),C(I8.$$.fragment,m),C(N8.$$.fragment,m),C(j8.$$.fragment,m),C(c4.$$.fragment,m),C(D8.$$.fragment,m),C(h4.$$.fragment,m),C(O8.$$.fragment,m),C(V8.$$.fragment,m),C(z8.$$.fragment,m),C(p4.$$.fragment,m),C(W8.$$.fragment,m),C(v4.$$.fragment,m),C(Q8.$$.fragment,m),C(H8.$$.fragment,m),C(J8.$$.fragment,m),C(T4.$$.fragment,m),C(Y8.$$.fragment,m),C(L4.$$.fragment,m),C(K8.$$.fragment,m),C(Z8.$$.fragment,m),C(o9.$$.fragment,m),C(x4.$$.fragment,m),C(r9.$$.fragment,m),C(S4.$$.fragment,m),C(t9.$$.fragment,m),C(a9.$$.fragment,m),C(s9.$$.fragment,m),C(P4.$$.fragment,m),C(l9.$$.fragment,m),C(LE.$$.fragment,m),C(i9.$$.fragment,m),C(d9.$$.fragment,m),C(m9.$$.fragment,m),C(xE.$$.fragment,m),C(f9.$$.fragment,m),C(ZE.$$.fragment,m),C(g9.$$.fragment,m),C(h9.$$.fragment,m),C(p9.$$.fragment,m),C(oC.$$.fragment,m),C(_9.$$.fragment,m),C(uC.$$.fragment,m),C(b9.$$.fragment,m),C(v9.$$.fragment,m),C(T9.$$.fragment,m),C(_C.$$.fragment,m),C(M9.$$.fragment,m),C(MC.$$.fragment,m),C(E9.$$.fragment,m),C(C9.$$.fragment,m),C(A9.$$.fragment,m),C(CC.$$.fragment,m),C(L9.$$.fragment,m),C(zC.$$.fragment,m),C(y9.$$.fragment,m),C(x9.$$.fragment,m),C(k9.$$.fragment,m),C(QC.$$.fragment,m),C(S9.$$.fragment,m),C(a5.$$.fragment,m),C(R9.$$.fragment,m),C(P9.$$.fragment,m),C(I9.$$.fragment,m),C(s5.$$.fragment,m),C(N9.$$.fragment,m),C(R5.$$.fragment,m),C(q9.$$.fragment,m),C(j9.$$.fragment,m),C(G9.$$.fragment,m),C(B5.$$.fragment,m),C(O9.$$.fragment,m),C(Z5.$$.fragment,m),C(V9.$$.fragment,m),C(X9.$$.fragment,m),C(W9.$$.fragment,m),C(o3.$$.fragment,m),C(Q9.$$.fragment,m),C(a3.$$.fragment,m),C(U9.$$.fragment,m),C(J9.$$.fragment,m),C(K9.$$.fragment,m),C(s3.$$.fragment,m),C(Z9.$$.fragment,m),C(i3.$$.fragment,m),C(ex.$$.fragment,m),C(ox.$$.fragment,m),C(tx.$$.fragment,m),C(c3.$$.fragment,m),C(ax.$$.fragment,m),C(k3.$$.fragment,m),C(nx.$$.fragment,m),C(sx.$$.fragment,m),C(ix.$$.fragment,m),C(R3.$$.fragment,m),C(dx.$$.fragment,m),C(e0.$$.fragment,m),C(cx.$$.fragment,m),C(mx.$$.fragment,m),C(gx.$$.fragment,m),C(r0.$$.fragment,m),C(hx.$$.fragment,m),C(a0.$$.fragment,m),C(ux.$$.fragment,m),C(px.$$.fragment,m),C(bx.$$.fragment,m),C(s0.$$.fragment,m),C(vx.$$.fragment,m),C(i0.$$.fragment,m),C(Fx.$$.fragment,m),C(Tx.$$.fragment,m),C(Ex.$$.fragment,m),C(c0.$$.fragment,m),C(Cx.$$.fragment,m),C(q0.$$.fragment,m),C(wx.$$.fragment,m),C(Ax.$$.fragment,m),C(yx.$$.fragment,m),C(D0.$$.fragment,m),C(xx.$$.fragment,m),C(Y0.$$.fragment,m),C($x.$$.fragment,m),C(kx.$$.fragment,m),C(Rx.$$.fragment,m),C(Z0.$$.fragment,m),C(Px.$$.fragment,m),C(gw.$$.fragment,m),C(Bx.$$.fragment,m),C(Ix.$$.fragment,m),C(qx.$$.fragment,m),C(uw.$$.fragment,m),C(jx.$$.fragment,m),C(Aw.$$.fragment,m),C(Dx.$$.fragment,m),C(Gx.$$.fragment,m),C(Vx.$$.fragment,m),C(yw.$$.fragment,m),C(Xx.$$.fragment,m),C(jw.$$.fragment,m),C(zx.$$.fragment,m),C(Wx.$$.fragment,m),C(Hx.$$.fragment,m),C(Gw.$$.fragment,m),C(Ux.$$.fragment,m),C(Kw.$$.fragment,m),C(Jx.$$.fragment,m),C(Yx.$$.fragment,m),C(Zx.$$.fragment,m),C(eA.$$.fragment,m),C(e$.$$.fragment,m),C(mA.$$.fragment,m),C(o$.$$.fragment,m),C(r$.$$.fragment,m),C(a$.$$.fragment,m),C(gA.$$.fragment,m),C(n$.$$.fragment,m),C(MA.$$.fragment,m),C(s$.$$.fragment,m),C(l$.$$.fragment,m),C(d$.$$.fragment,m),C(CA.$$.fragment,m),C(c$.$$.fragment,m),C(RA.$$.fragment,m),C(m$.$$.fragment,m),C(f$.$$.fragment,m),C(h$.$$.fragment,m),C(BA.$$.fragment,m),C(u$.$$.fragment,m),C(NA.$$.fragment,m),C(p$.$$.fragment,m),C(_$.$$.fragment,m),C(v$.$$.fragment,m),C(jA.$$.fragment,m),C(F$.$$.fragment,m),C(OA.$$.fragment,m),C(M$.$$.fragment,m),C(E$.$$.fragment,m),C(w$.$$.fragment,m),C(XA.$$.fragment,m),C(A$.$$.fragment,m),C(WA.$$.fragment,m),UOe=!1},d(m){t(g),m&&t(v),m&&t(u),w(d),m&&t(Am),m&&t(at),m&&t(Oe),m&&t(We),m&&t(ym),w(ya,m),m&&t(Qe),m&&t(Ae),m&&t(Co),m&&t(xa),m&&t(XDe),m&&t(Li),w(_y),m&&t(zDe),m&&t(In),m&&t(WDe),w(by,m),m&&t(QDe),m&&t(Hk),m&&t(HDe),w(km,m),m&&t(UDe),m&&t(yi),w(vy),m&&t(JDe),m&&t(wo),w(Fy),w(Ey),w(jg),w(Cy),m&&t(YDe),m&&t($i),w(wy),m&&t(KDe),m&&t(Ao),w(Ay),w(xy),w(Th),w($y),m&&t(ZDe),m&&t(ki),w(ky),m&&t(eGe),m&&t(Lo),w(Sy),w(By),w(ru),w(tu),w(Iy),m&&t(oGe),m&&t(Si),w(Ny),m&&t(rGe),m&&t(yo),w(qy),w(Gy),w(Eu),w(Cu),w(Oy),m&&t(tGe),m&&t(Pi),w(Vy),m&&t(aGe),m&&t(xo),w(Xy),w(Wy),w(Lu),w(Qy),w(A_),m&&t(nGe),m&&t(Ni),w(Hy),m&&t(sGe),m&&t($o),w(Uy),w(Yy),w(y_),w(Ky),w(v2),m&&t(lGe),m&&t(Di),w(Zy),m&&t(iGe),m&&t(ko),w(e7),w(r7),w(T2),w(t7),w(lb),m&&t(dGe),m&&t(Vi),w(a7),m&&t(cGe),m&&t(So),w(n7),w(l7),w(db),w(i7),w(Qb),m&&t(mGe),m&&t(Wi),w(d7),m&&t(fGe),m&&t(Ro),w(c7),w(f7),w(Ub),w(g7),w(hv),m&&t(gGe),m&&t(Ui),w(h7),m&&t(hGe),m&&t(Po),w(u7),w(_7),w(pv),w(b7),w(mF),m&&t(uGe),m&&t(Ki),w(v7),m&&t(pGe),m&&t(Bo),w(F7),w(M7),w(gF),w(E7),w(XF),m&&t(_Ge),m&&t(od),w(C7),m&&t(bGe),m&&t(Io),w(w7),w(L7),w(WF),w(y7),w(ZF),m&&t(vGe),m&&t(ad),w(x7),m&&t(FGe),m&&t(No),w($7),w(S7),w(o1),w(R7),w(N1),m&&t(TGe),m&&t(ld),w(P7),m&&t(MGe),m&&t(qo),w(B7),w(N7),w(j1),w(q7),w(LT),m&&t(EGe),m&&t(cd),w(j7),m&&t(CGe),m&&t(jo),w(D7),w(O7),w(xT),w(V7),w(ST),m&&t(wGe),m&&t(gd),w(X7),m&&t(AGe),m&&t(Do),w(z7),w(Q7),w(PT),w(H7),w(HT),m&&t(LGe),m&&t(pd),w(U7),m&&t(yGe),m&&t(Go),w(J7),w(K7),w(JT),w(Z7),w(ZT),m&&t(xGe),m&&t(vd),w(e8),m&&t($Ge),m&&t(Oo),w(o8),w(t8),w(oM),w(a8),w(aM),m&&t(kGe),m&&t(Md),w(n8),m&&t(SGe),m&&t(Vo),w(s8),w(i8),w(sM),w(d8),w(_M),m&&t(RGe),m&&t(wd),w(c8),m&&t(PGe),m&&t(Xo),w(m8),w(g8),w(vM),w(h8),w(AM),m&&t(BGe),m&&t(yd),w(u8),m&&t(IGe),m&&t(zo),w(p8),w(b8),w(yM),w(v8),w(DM),m&&t(NGe),m&&t(kd),w(F8),m&&t(qGe),m&&t(Wo),w(T8),w(E8),w(OM),w(C8),w(WM),m&&t(jGe),m&&t(Pd),w(A8),m&&t(DGe),m&&t(Qo),w(L8),w(x8),w(HM),w($8),w(o4),m&&t(GGe),m&&t(Nd),w(k8),m&&t(OGe),m&&t(Ho),w(S8),w(P8),w(t4),w(B8),w(i4),m&&t(VGe),m&&t(Gd),w(I8),m&&t(XGe),m&&t(Uo),w(N8),w(j8),w(c4),w(D8),w(h4),m&&t(zGe),m&&t(Xd),w(O8),m&&t(WGe),m&&t(Jo),w(V8),w(z8),w(p4),w(W8),w(v4),m&&t(QGe),m&&t(Qd),w(Q8),m&&t(HGe),m&&t(Yo),w(H8),w(J8),w(T4),w(Y8),w(L4),m&&t(UGe),m&&t(Jd),w(K8),m&&t(JGe),m&&t(Ko),w(Z8),w(o9),w(x4),w(r9),w(S4),m&&t(YGe),m&&t(Zd),w(t9),m&&t(KGe),m&&t(Zo),w(a9),w(s9),w(P4),w(l9),w(LE),m&&t(ZGe),m&&t(rc),w(i9),m&&t(eOe),m&&t(er),w(d9),w(m9),w(xE),w(f9),w(ZE),m&&t(oOe),m&&t(nc),w(g9),m&&t(rOe),m&&t(or),w(h9),w(p9),w(oC),w(_9),w(uC),m&&t(tOe),m&&t(ic),w(b9),m&&t(aOe),m&&t(rr),w(v9),w(T9),w(_C),w(M9),w(MC),m&&t(nOe),m&&t(mc),w(E9),m&&t(sOe),m&&t(tr),w(C9),w(A9),w(CC),w(L9),w(zC),m&&t(lOe),m&&t(hc),w(y9),m&&t(iOe),m&&t(ar),w(x9),w(k9),w(QC),w(S9),w(a5),m&&t(dOe),m&&t(_c),w(R9),m&&t(cOe),m&&t(nr),w(P9),w(I9),w(s5),w(N9),w(R5),m&&t(mOe),m&&t(Fc),w(q9),m&&t(fOe),m&&t(sr),w(j9),w(G9),w(B5),w(O9),w(Z5),m&&t(gOe),m&&t(Ec),w(V9),m&&t(hOe),m&&t(lr),w(X9),w(W9),w(o3),w(Q9),w(a3),m&&t(uOe),m&&t(Ac),w(U9),m&&t(pOe),m&&t(ir),w(J9),w(K9),w(s3),w(Z9),w(i3),m&&t(_Oe),m&&t(xc),w(ex),m&&t(bOe),m&&t(dr),w(ox),w(tx),w(c3),w(ax),w(k3),m&&t(vOe),m&&t(Sc),w(nx),m&&t(FOe),m&&t(cr),w(sx),w(ix),w(R3),w(dx),w(e0),m&&t(TOe),m&&t(Bc),w(cx),m&&t(MOe),m&&t(mr),w(mx),w(gx),w(r0),w(hx),w(a0),m&&t(EOe),m&&t(qc),w(ux),m&&t(COe),m&&t(fr),w(px),w(bx),w(s0),w(vx),w(i0),m&&t(wOe),m&&t(Gc),w(Fx),m&&t(AOe),m&&t(gr),w(Tx),w(Ex),w(c0),w(Cx),w(q0),m&&t(LOe),m&&t(Xc),w(wx),m&&t(yOe),m&&t(hr),w(Ax),w(yx),w(D0),w(xx),w(Y0),m&&t(xOe),m&&t(Qc),w($x),m&&t($Oe),m&&t(ur),w(kx),w(Rx),w(Z0),w(Px),w(gw),m&&t(kOe),m&&t(Jc),w(Bx),m&&t(SOe),m&&t(pr),w(Ix),w(qx),w(uw),w(jx),w(Aw),m&&t(ROe),m&&t(Zc),w(Dx),m&&t(POe),m&&t(_r),w(Gx),w(Vx),w(yw),w(Xx),w(jw),m&&t(BOe),m&&t(rm),w(zx),m&&t(IOe),m&&t(br),w(Wx),w(Hx),w(Gw),w(Ux),w(Kw),m&&t(NOe),m&&t(nm),w(Jx),m&&t(qOe),m&&t(vr),w(Yx),w(Zx),w(eA),w(e$),w(mA),m&&t(jOe),m&&t(im),w(o$),m&&t(DOe),m&&t(Fr),w(r$),w(a$),w(gA),w(n$),w(MA),m&&t(GOe),m&&t(mm),w(s$),m&&t(OOe),m&&t(Tr),w(l$),w(d$),w(CA),w(c$),w(RA),m&&t(VOe),m&&t(hm),w(m$),m&&t(XOe),m&&t(Mr),w(f$),w(h$),w(BA),w(u$),w(NA),m&&t(zOe),m&&t(_m),w(p$),m&&t(WOe),m&&t(Er),w(_$),w(v$),w(jA),w(F$),w(OA),m&&t(QOe),m&&t(Fm),w(M$),m&&t(HOe),m&&t(Cr),w(E$),w(w$),w(XA),w(A$),w(WA)}}}const Jjt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForVisualQuestionAnswering",title:"AutoModelForVisualQuestionAnswering"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function Yjt(y){return UNt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class aDt extends zNt{constructor(g){super();WNt(this,g,Yjt,Ujt,QNt,{})}}export{aDt as default,Jjt as metadata};
