import{S as d8t,i as c8t,s as m8t,e as a,k as l,w as F,t as o,M as f8t,c as n,d as t,m as i,a as s,x as T,h as r,b as c,F as e,g as b,y as M,q as E,o as C,B as w,v as g8t,L as I}from"../../chunks/vendor-6b77c823.js";import{T as bDr}from"../../chunks/Tip-39098574.js";import{D as R}from"../../chunks/Docstring-1088f2fb.js";import{C as P}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as oe}from"../../chunks/IconCopyLink-7a11ce68.js";import{E as B}from"../../chunks/ExampleCodeBlock-5212b321.js";function h8t(L){let g,v,u,f,p,d,h,Mo,ci,gm,rt,mi,fi,ay,hm,je,We,gi,yn,ny,Ln,xn,sy,hi,$n,ly,ui,um,Ca;return{c(){g=a("p"),v=o("If your "),u=a("code"),f=o("NewModelConfig"),p=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Mo=o(`, make sure its
`),ci=a("code"),gm=o("model_type"),rt=o(" attribute is set to the same key you use when registering the config (here "),mi=a("code"),fi=o('"new-model"'),ay=o(")."),hm=l(),je=a("p"),We=o("Likewise, if your "),gi=a("code"),yn=o("NewModel"),ny=o(" is a subclass of "),Ln=a("a"),xn=o("PreTrainedModel"),sy=o(`, make sure its
`),hi=a("code"),$n=o("config_class"),ly=o(` attribute is set to the same class you use when registering the model (here
`),ui=a("code"),um=o("NewModelConfig"),Ca=o(")."),this.h()},l(Qe){g=n(Qe,"P",{});var Ae=s(g);v=r(Ae,"If your "),u=n(Ae,"CODE",{});var w$=s(u);f=r(w$,"NewModelConfig"),w$.forEach(t),p=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var pi=s(d);h=r(pi,"PretrainedConfig"),pi.forEach(t),Mo=r(Ae,`, make sure its
`),ci=n(Ae,"CODE",{});var A$=s(ci);gm=r(A$,"model_type"),A$.forEach(t),rt=r(Ae," attribute is set to the same key you use when registering the config (here "),mi=n(Ae,"CODE",{});var y$=s(mi);fi=r(y$,'"new-model"'),y$.forEach(t),ay=r(Ae,")."),Ae.forEach(t),hm=i(Qe),je=n(Qe,"P",{});var Eo=s(je);We=r(Eo,"Likewise, if your "),gi=n(Eo,"CODE",{});var wa=s(gi);yn=r(wa,"NewModel"),wa.forEach(t),ny=r(Eo," is a subclass of "),Ln=n(Eo,"A",{href:!0});var L$=s(Ln);xn=r(L$,"PreTrainedModel"),L$.forEach(t),sy=r(Eo,`, make sure its
`),hi=n(Eo,"CODE",{});var pm=s(hi);$n=r(pm,"config_class"),pm.forEach(t),ly=r(Eo,` attribute is set to the same class you use when registering the model (here
`),ui=n(Eo,"CODE",{});var x$=s(ui);um=r(x$,"NewModelConfig"),x$.forEach(t),Ca=r(Eo,")."),Eo.forEach(t),this.h()},h(){c(Ln,"href","/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel")},m(Qe,Ae){b(Qe,g,Ae),e(g,v),e(g,u),e(u,f),e(g,p),e(g,d),e(d,h),e(g,Mo),e(g,ci),e(ci,gm),e(g,rt),e(g,mi),e(mi,fi),e(g,ay),b(Qe,hm,Ae),b(Qe,je,Ae),e(je,We),e(je,gi),e(gi,yn),e(je,ny),e(je,Ln),e(Ln,xn),e(je,sy),e(je,hi),e(hi,$n),e(je,ly),e(je,ui),e(ui,um),e(je,Ca)},d(Qe){Qe&&t(g),Qe&&t(hm),Qe&&t(je)}}}function u8t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function p8t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function _8t(L){let g,v,u,f,p;return{c(){g=a("p"),v=o("Passing "),u=a("code"),f=o("use_auth_token=True"),p=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),u=n(h,"CODE",{});var Mo=s(u);f=r(Mo,"use_auth_token=True"),Mo.forEach(t),p=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,u),e(u,f),e(g,p)},d(d){d&&t(g)}}}function b8t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function v8t(L){let g,v,u,f,p;return{c(){g=a("p"),v=o("Passing "),u=a("code"),f=o("use_auth_token=True"),p=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),u=n(h,"CODE",{});var Mo=s(u);f=r(Mo,"use_auth_token=True"),Mo.forEach(t),p=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,u),e(u,f),e(g,p)},d(d){d&&t(g)}}}function F8t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function T8t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function M8t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function E8t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function C8t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function w8t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function A8t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function y8t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function L8t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function x8t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function $8t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function k8t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function S8t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function R8t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function P8t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function B8t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function I8t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function q8t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function N8t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function j8t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function D8t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function G8t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function O8t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function V8t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function X8t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function z8t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function W8t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Q8t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function H8t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function U8t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function J8t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Y8t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function K8t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Z8t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function ext(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function oxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function rxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function txt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function axt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function nxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function sxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function lxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function ixt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function dxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function cxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function mxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function fxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function gxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function hxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function uxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function pxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function _xt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function bxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function vxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Fxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Txt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Mxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Ext(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Cxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function wxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Axt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function yxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Lxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function xxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function $xt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function kxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Sxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Rxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Pxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Bxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Ixt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function qxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Nxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function jxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Dxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Gxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Oxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Vxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Xxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function zxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Wxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Qxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Hxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Uxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Jxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Yxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Kxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function Zxt(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function e7t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function o7t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function r7t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function t7t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function a7t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function n7t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function s7t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function l7t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function i7t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function d7t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function c7t(L){let g,v,u,f,p;return f=new P({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),u=l(),F(f.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),u=i(d),T(f.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,u,h),M(f,d,h),p=!0},p:I,i(d){p||(E(f.$$.fragment,d),p=!0)},o(d){C(f.$$.fragment,d),p=!1},d(d){d&&t(g),d&&t(u),w(f,d)}}}function m7t(L){let g,v,u,f,p,d,h,Mo,ci,gm,rt,mi,fi,ay,hm,je,We,gi,yn,ny,Ln,xn,sy,hi,$n,ly,ui,um,Ca,Qe,Ae,w$,pi,A$,y$,Eo,wa,L$,pm,x$,DDe,xIe,_i,_m,Fee,iy,GDe,Tee,ODe,$Ie,kn,VDe,Mee,XDe,zDe,Eee,WDe,QDe,kIe,dy,SIe,$$,HDe,RIe,bm,PIe,bi,vm,Cee,cy,UDe,wee,JDe,BIe,Co,my,YDe,fy,KDe,k$,ZDe,eGe,oGe,gy,rGe,Aee,tGe,aGe,nGe,Er,hy,sGe,yee,lGe,iGe,vi,dGe,Lee,cGe,mGe,xee,fGe,gGe,hGe,A,Fm,$ee,uGe,pGe,S$,_Ge,bGe,vGe,Tm,kee,FGe,TGe,R$,MGe,EGe,CGe,Mm,See,wGe,AGe,P$,yGe,LGe,xGe,Em,Ree,$Ge,kGe,B$,SGe,RGe,PGe,Cm,Pee,BGe,IGe,I$,qGe,NGe,jGe,wm,Bee,DGe,GGe,q$,OGe,VGe,XGe,Am,Iee,zGe,WGe,N$,QGe,HGe,UGe,ym,qee,JGe,YGe,j$,KGe,ZGe,eOe,Lm,Nee,oOe,rOe,D$,tOe,aOe,nOe,xm,jee,sOe,lOe,G$,iOe,dOe,cOe,$m,Dee,mOe,fOe,O$,gOe,hOe,uOe,km,Gee,pOe,_Oe,V$,bOe,vOe,FOe,Sm,Oee,TOe,MOe,X$,EOe,COe,wOe,Rm,Vee,AOe,yOe,z$,LOe,xOe,$Oe,Pm,Xee,kOe,SOe,W$,ROe,POe,BOe,Bm,zee,IOe,qOe,Q$,NOe,jOe,DOe,Im,Wee,GOe,OOe,H$,VOe,XOe,zOe,qm,Qee,WOe,QOe,U$,HOe,UOe,JOe,Nm,Hee,YOe,KOe,J$,ZOe,eVe,oVe,jm,Uee,rVe,tVe,Y$,aVe,nVe,sVe,Dm,Jee,lVe,iVe,K$,dVe,cVe,mVe,Gm,Yee,fVe,gVe,Z$,hVe,uVe,pVe,Om,Kee,_Ve,bVe,ek,vVe,FVe,TVe,Vm,Zee,MVe,EVe,ok,CVe,wVe,AVe,Xm,eoe,yVe,LVe,rk,xVe,$Ve,kVe,zm,ooe,SVe,RVe,tk,PVe,BVe,IVe,Wm,roe,qVe,NVe,ak,jVe,DVe,GVe,Qm,toe,OVe,VVe,nk,XVe,zVe,WVe,Hm,aoe,QVe,HVe,sk,UVe,JVe,YVe,Um,noe,KVe,ZVe,lk,eXe,oXe,rXe,Jm,soe,tXe,aXe,ik,nXe,sXe,lXe,Ym,loe,iXe,dXe,dk,cXe,mXe,fXe,Km,ioe,gXe,hXe,ck,uXe,pXe,_Xe,Zm,doe,bXe,vXe,mk,FXe,TXe,MXe,ef,coe,EXe,CXe,fk,wXe,AXe,yXe,of,moe,LXe,xXe,gk,$Xe,kXe,SXe,rf,foe,RXe,PXe,hk,BXe,IXe,qXe,tf,goe,NXe,jXe,uk,DXe,GXe,OXe,af,hoe,VXe,XXe,pk,zXe,WXe,QXe,nf,uoe,HXe,UXe,_k,JXe,YXe,KXe,sf,poe,ZXe,eze,bk,oze,rze,tze,lf,_oe,aze,nze,vk,sze,lze,ize,df,boe,dze,cze,Fk,mze,fze,gze,cf,voe,hze,uze,Tk,pze,_ze,bze,mf,Foe,vze,Fze,Mk,Tze,Mze,Eze,ff,Toe,Cze,wze,Ek,Aze,yze,Lze,gf,Moe,xze,$ze,Ck,kze,Sze,Rze,hf,Eoe,Pze,Bze,wk,Ize,qze,Nze,uf,Coe,jze,Dze,Ak,Gze,Oze,Vze,pf,woe,Xze,zze,yk,Wze,Qze,Hze,_f,Aoe,Uze,Jze,Lk,Yze,Kze,Zze,bf,yoe,eWe,oWe,xk,rWe,tWe,aWe,vf,Loe,nWe,sWe,$k,lWe,iWe,dWe,Ff,xoe,cWe,mWe,kk,fWe,gWe,hWe,Tf,$oe,uWe,pWe,Sk,_We,bWe,vWe,Mf,koe,FWe,TWe,Rk,MWe,EWe,CWe,Ef,Soe,wWe,AWe,Pk,yWe,LWe,xWe,Cf,Roe,$We,kWe,Bk,SWe,RWe,PWe,wf,Poe,BWe,IWe,Ik,qWe,NWe,jWe,Af,Boe,DWe,GWe,qk,OWe,VWe,XWe,yf,Ioe,zWe,WWe,Nk,QWe,HWe,UWe,Lf,qoe,JWe,YWe,jk,KWe,ZWe,eQe,xf,Noe,oQe,rQe,Dk,tQe,aQe,nQe,$f,joe,sQe,lQe,Gk,iQe,dQe,cQe,kf,Doe,mQe,fQe,Ok,gQe,hQe,uQe,Sf,Goe,pQe,_Qe,Vk,bQe,vQe,FQe,Rf,Ooe,TQe,MQe,Xk,EQe,CQe,wQe,Pf,Voe,AQe,yQe,zk,LQe,xQe,$Qe,Bf,Xoe,kQe,SQe,Wk,RQe,PQe,BQe,If,zoe,IQe,qQe,Qk,NQe,jQe,DQe,qf,Woe,GQe,OQe,Hk,VQe,XQe,zQe,Nf,Qoe,WQe,QQe,Uk,HQe,UQe,JQe,jf,Hoe,YQe,KQe,Jk,ZQe,eHe,oHe,Df,Uoe,rHe,tHe,Yk,aHe,nHe,sHe,Gf,Joe,lHe,iHe,Kk,dHe,cHe,mHe,Of,Yoe,fHe,gHe,Zk,hHe,uHe,pHe,Vf,Koe,_He,bHe,eS,vHe,FHe,THe,Xf,Zoe,MHe,EHe,oS,CHe,wHe,AHe,zf,ere,yHe,LHe,rS,xHe,$He,kHe,Wf,ore,SHe,RHe,tS,PHe,BHe,IHe,Qf,rre,qHe,NHe,aS,jHe,DHe,GHe,Hf,tre,OHe,VHe,nS,XHe,zHe,WHe,Uf,are,QHe,HHe,sS,UHe,JHe,YHe,Jf,nre,KHe,ZHe,lS,eUe,oUe,rUe,Yf,sre,tUe,aUe,iS,nUe,sUe,lUe,Kf,lre,iUe,dUe,dS,cUe,mUe,fUe,Zf,ire,gUe,hUe,cS,uUe,pUe,_Ue,eg,dre,bUe,vUe,mS,FUe,TUe,MUe,og,cre,EUe,CUe,fS,wUe,AUe,yUe,rg,mre,LUe,xUe,gS,$Ue,kUe,SUe,tg,fre,RUe,PUe,hS,BUe,IUe,qUe,ag,gre,NUe,jUe,uS,DUe,GUe,OUe,ng,hre,VUe,XUe,pS,zUe,WUe,QUe,sg,ure,HUe,UUe,_S,JUe,YUe,KUe,lg,pre,ZUe,eJe,bS,oJe,rJe,tJe,ig,_re,aJe,nJe,vS,sJe,lJe,iJe,dg,bre,dJe,cJe,FS,mJe,fJe,gJe,cg,vre,hJe,uJe,TS,pJe,_Je,bJe,mg,Fre,vJe,FJe,MS,TJe,MJe,EJe,fg,Tre,CJe,wJe,ES,AJe,yJe,LJe,gg,Mre,xJe,$Je,CS,kJe,SJe,RJe,hg,Ere,PJe,BJe,wS,IJe,qJe,NJe,ug,Cre,jJe,DJe,AS,GJe,OJe,VJe,pg,wre,XJe,zJe,yS,WJe,QJe,HJe,_g,Are,UJe,JJe,LS,YJe,KJe,ZJe,bg,eYe,vg,uy,oYe,yre,rYe,IIe,Fi,Fg,Lre,py,tYe,xre,aYe,qIe,wo,_y,nYe,by,sYe,xS,lYe,iYe,dYe,vy,cYe,$re,mYe,fYe,gYe,Cr,Fy,hYe,kre,uYe,pYe,Aa,_Ye,Sre,bYe,vYe,Rre,FYe,TYe,Pre,MYe,EYe,CYe,k,Sn,Bre,wYe,AYe,$S,yYe,LYe,kS,xYe,$Ye,kYe,Rn,Ire,SYe,RYe,SS,PYe,BYe,RS,IYe,qYe,NYe,Pn,qre,jYe,DYe,PS,GYe,OYe,BS,VYe,XYe,zYe,Tg,Nre,WYe,QYe,IS,HYe,UYe,JYe,Bn,jre,YYe,KYe,qS,ZYe,eKe,NS,oKe,rKe,tKe,Mg,Dre,aKe,nKe,jS,sKe,lKe,iKe,Eg,Gre,dKe,cKe,DS,mKe,fKe,gKe,Cg,Ore,hKe,uKe,GS,pKe,_Ke,bKe,In,Vre,vKe,FKe,OS,TKe,MKe,VS,EKe,CKe,wKe,qn,Xre,AKe,yKe,XS,LKe,xKe,zS,$Ke,kKe,SKe,Nn,zre,RKe,PKe,WS,BKe,IKe,QS,qKe,NKe,jKe,wg,Wre,DKe,GKe,HS,OKe,VKe,XKe,Ag,Qre,zKe,WKe,US,QKe,HKe,UKe,jn,Hre,JKe,YKe,JS,KKe,ZKe,YS,eZe,oZe,rZe,yg,Ure,tZe,aZe,KS,nZe,sZe,lZe,Dn,Jre,iZe,dZe,ZS,cZe,mZe,eR,fZe,gZe,hZe,Gn,Yre,uZe,pZe,oR,_Ze,bZe,rR,vZe,FZe,TZe,On,Kre,MZe,EZe,tR,CZe,wZe,aR,AZe,yZe,LZe,Lg,Zre,xZe,$Ze,nR,kZe,SZe,RZe,Vn,ete,PZe,BZe,sR,IZe,qZe,lR,NZe,jZe,DZe,Xn,ote,GZe,OZe,iR,VZe,XZe,dR,zZe,WZe,QZe,zn,rte,HZe,UZe,cR,JZe,YZe,mR,KZe,ZZe,eeo,Wn,tte,oeo,reo,fR,teo,aeo,gR,neo,seo,leo,Qn,ate,ieo,deo,hR,ceo,meo,uR,feo,geo,heo,Hn,nte,ueo,peo,pR,_eo,beo,_R,veo,Feo,Teo,xg,ste,Meo,Eeo,bR,Ceo,weo,Aeo,Un,lte,yeo,Leo,vR,xeo,$eo,FR,keo,Seo,Reo,$g,ite,Peo,Beo,TR,Ieo,qeo,Neo,Jn,dte,jeo,Deo,MR,Geo,Oeo,ER,Veo,Xeo,zeo,Yn,cte,Weo,Qeo,CR,Heo,Ueo,wR,Jeo,Yeo,Keo,Kn,mte,Zeo,eoo,AR,ooo,roo,yR,too,aoo,noo,Zn,fte,soo,loo,LR,ioo,doo,xR,coo,moo,foo,es,gte,goo,hoo,$R,uoo,poo,kR,_oo,boo,voo,kg,hte,Foo,Too,SR,Moo,Eoo,Coo,os,ute,woo,Aoo,RR,yoo,Loo,PR,xoo,$oo,koo,rs,pte,Soo,Roo,BR,Poo,Boo,IR,Ioo,qoo,Noo,ts,_te,joo,Doo,qR,Goo,Ooo,NR,Voo,Xoo,zoo,as,bte,Woo,Qoo,jR,Hoo,Uoo,DR,Joo,Yoo,Koo,ns,vte,Zoo,ero,GR,oro,rro,OR,tro,aro,nro,ss,Fte,sro,lro,VR,iro,dro,XR,cro,mro,fro,Sg,Tte,gro,hro,zR,uro,pro,_ro,ls,Mte,bro,vro,WR,Fro,Tro,QR,Mro,Ero,Cro,Rg,Ete,wro,Aro,HR,yro,Lro,xro,Pg,Cte,$ro,kro,UR,Sro,Rro,Pro,is,wte,Bro,Iro,JR,qro,Nro,YR,jro,Dro,Gro,ds,Ate,Oro,Vro,KR,Xro,zro,ZR,Wro,Qro,Hro,cs,yte,Uro,Jro,eP,Yro,Kro,oP,Zro,eto,oto,Bg,Lte,rto,tto,rP,ato,nto,sto,ms,xte,lto,ito,tP,dto,cto,aP,mto,fto,gto,fs,$te,hto,uto,nP,pto,_to,sP,bto,vto,Fto,gs,kte,Tto,Mto,lP,Eto,Cto,iP,wto,Ato,yto,hs,Ste,Lto,xto,dP,$to,kto,cP,Sto,Rto,Pto,us,Rte,Bto,Ito,mP,qto,Nto,fP,jto,Dto,Gto,Ig,Pte,Oto,Vto,gP,Xto,zto,Wto,ps,Bte,Qto,Hto,hP,Uto,Jto,uP,Yto,Kto,Zto,qg,Ite,eao,oao,pP,rao,tao,aao,Ng,qte,nao,sao,_P,lao,iao,dao,jg,Nte,cao,mao,bP,fao,gao,hao,Dg,jte,uao,pao,vP,_ao,bao,vao,_s,Dte,Fao,Tao,FP,Mao,Eao,TP,Cao,wao,Aao,Gg,Gte,yao,Lao,MP,xao,$ao,kao,bs,Ote,Sao,Rao,EP,Pao,Bao,CP,Iao,qao,Nao,vs,Vte,jao,Dao,wP,Gao,Oao,AP,Vao,Xao,zao,Fs,Xte,Wao,Qao,yP,Hao,Uao,LP,Jao,Yao,Kao,Ts,zte,Zao,eno,xP,ono,rno,$P,tno,ano,nno,Ms,Wte,sno,lno,kP,ino,dno,SP,cno,mno,fno,Es,Qte,gno,hno,RP,uno,pno,PP,_no,bno,vno,Og,Hte,Fno,Tno,BP,Mno,Eno,Cno,Vg,Ute,wno,Ano,IP,yno,Lno,xno,Cs,Jte,$no,kno,qP,Sno,Rno,NP,Pno,Bno,Ino,ws,Yte,qno,Nno,jP,jno,Dno,DP,Gno,Ono,Vno,As,Kte,Xno,zno,GP,Wno,Qno,OP,Hno,Uno,Jno,Xg,Zte,Yno,Kno,VP,Zno,eso,oso,zg,eae,rso,tso,XP,aso,nso,sso,Wg,oae,lso,iso,zP,dso,cso,mso,ys,rae,fso,gso,WP,hso,uso,QP,pso,_so,bso,Qg,tae,vso,Fso,HP,Tso,Mso,Eso,Hg,aae,Cso,wso,UP,Aso,yso,Lso,Ug,nae,xso,$so,JP,kso,Sso,Rso,Ls,sae,Pso,Bso,YP,Iso,qso,KP,Nso,jso,Dso,Jg,lae,Gso,Oso,ZP,Vso,Xso,zso,Yg,iae,Wso,Qso,eB,Hso,Uso,Jso,xs,dae,Yso,Kso,oB,Zso,elo,rB,olo,rlo,tlo,$s,cae,alo,nlo,tB,slo,llo,aB,ilo,dlo,clo,ks,mae,mlo,flo,nB,glo,hlo,sB,ulo,plo,_lo,Ss,fae,blo,vlo,lB,Flo,Tlo,iB,Mlo,Elo,Clo,Kg,wlo,Zg,Ty,Alo,gae,ylo,NIe,Ti,eh,hae,My,Llo,uae,xlo,jIe,Ao,Ey,$lo,Cy,klo,dB,Slo,Rlo,Plo,wy,Blo,pae,Ilo,qlo,Nlo,He,Ay,jlo,_ae,Dlo,Glo,ya,Olo,bae,Vlo,Xlo,vae,zlo,Wlo,Fae,Qlo,Hlo,Ulo,Z,oh,Tae,Jlo,Ylo,cB,Klo,Zlo,eio,rh,Mae,oio,rio,mB,tio,aio,nio,th,Eae,sio,lio,fB,iio,dio,cio,ah,Cae,mio,fio,gB,gio,hio,uio,nh,wae,pio,_io,hB,bio,vio,Fio,sh,Aae,Tio,Mio,uB,Eio,Cio,wio,lh,yae,Aio,yio,pB,Lio,xio,$io,ih,Lae,kio,Sio,_B,Rio,Pio,Bio,dh,xae,Iio,qio,bB,Nio,jio,Dio,ch,$ae,Gio,Oio,vB,Vio,Xio,zio,mh,kae,Wio,Qio,FB,Hio,Uio,Jio,fh,Sae,Yio,Kio,TB,Zio,edo,odo,gh,Rae,rdo,tdo,MB,ado,ndo,sdo,hh,Pae,ldo,ido,EB,ddo,cdo,mdo,uh,Bae,fdo,gdo,CB,hdo,udo,pdo,ph,Iae,_do,bdo,wB,vdo,Fdo,Tdo,_h,qae,Mdo,Edo,AB,Cdo,wdo,Ado,bh,Nae,ydo,Ldo,yB,xdo,$do,kdo,vh,jae,Sdo,Rdo,LB,Pdo,Bdo,Ido,Fh,Dae,qdo,Ndo,xB,jdo,Ddo,Gdo,Th,Gae,Odo,Vdo,$B,Xdo,zdo,Wdo,Mh,Oae,Qdo,Hdo,kB,Udo,Jdo,Ydo,Eh,Vae,Kdo,Zdo,SB,eco,oco,rco,Ch,Xae,tco,aco,RB,nco,sco,lco,wh,zae,ico,dco,PB,cco,mco,fco,Ah,Wae,gco,hco,BB,uco,pco,_co,yh,bco,Lh,vco,xh,yy,Fco,Qae,Tco,DIe,Mi,$h,Hae,Ly,Mco,Uae,Eco,GIe,yo,xy,Cco,$y,wco,IB,Aco,yco,Lco,ky,xco,Jae,$co,kco,Sco,Ue,Sy,Rco,Yae,Pco,Bco,Ei,Ico,Kae,qco,Nco,Zae,jco,Dco,Gco,ue,kh,ene,Oco,Vco,qB,Xco,zco,Wco,Sh,one,Qco,Hco,rne,Uco,Jco,Yco,Rh,tne,Kco,Zco,NB,emo,omo,rmo,Ph,ane,tmo,amo,jB,nmo,smo,lmo,Bh,nne,imo,dmo,DB,cmo,mmo,fmo,Ih,sne,gmo,hmo,GB,umo,pmo,_mo,qh,lne,bmo,vmo,OB,Fmo,Tmo,Mmo,Nh,ine,Emo,Cmo,VB,wmo,Amo,ymo,jh,dne,Lmo,xmo,XB,$mo,kmo,Smo,Dh,cne,Rmo,Pmo,zB,Bmo,Imo,qmo,Gh,mne,Nmo,jmo,WB,Dmo,Gmo,Omo,Oh,fne,Vmo,Xmo,QB,zmo,Wmo,Qmo,Vh,gne,Hmo,Umo,HB,Jmo,Ymo,Kmo,Xh,hne,Zmo,efo,UB,ofo,rfo,tfo,zh,une,afo,nfo,JB,sfo,lfo,ifo,Wh,pne,dfo,cfo,YB,mfo,ffo,gfo,Qh,hfo,Hh,ufo,Uh,Ry,pfo,_ne,_fo,OIe,Ci,Jh,bne,Py,bfo,vne,vfo,VIe,Lo,By,Ffo,wi,Tfo,KB,Mfo,Efo,ZB,Cfo,wfo,Afo,Iy,yfo,Fne,Lfo,xfo,$fo,tt,qy,kfo,Tne,Sfo,Rfo,Ai,Pfo,Mne,Bfo,Ifo,eI,qfo,Nfo,jfo,Yh,Dfo,Je,Ny,Gfo,Ene,Ofo,Vfo,La,Xfo,Cne,zfo,Wfo,wne,Qfo,Hfo,Ane,Ufo,Jfo,Yfo,x,Kh,yne,Kfo,Zfo,oI,ego,ogo,rgo,Zh,Lne,tgo,ago,rI,ngo,sgo,lgo,eu,xne,igo,dgo,tI,cgo,mgo,fgo,ou,$ne,ggo,hgo,aI,ugo,pgo,_go,ru,kne,bgo,vgo,nI,Fgo,Tgo,Mgo,tu,Sne,Ego,Cgo,sI,wgo,Ago,ygo,au,Rne,Lgo,xgo,lI,$go,kgo,Sgo,nu,Pne,Rgo,Pgo,iI,Bgo,Igo,qgo,su,Bne,Ngo,jgo,dI,Dgo,Ggo,Ogo,lu,Ine,Vgo,Xgo,cI,zgo,Wgo,Qgo,iu,qne,Hgo,Ugo,mI,Jgo,Ygo,Kgo,du,Nne,Zgo,eho,fI,oho,rho,tho,cu,jne,aho,nho,gI,sho,lho,iho,mu,Dne,dho,cho,hI,mho,fho,gho,fu,Gne,hho,uho,uI,pho,_ho,bho,gu,One,vho,Fho,pI,Tho,Mho,Eho,hu,Vne,Cho,who,_I,Aho,yho,Lho,uu,Xne,xho,$ho,bI,kho,Sho,Rho,pu,zne,Pho,Bho,vI,Iho,qho,Nho,_u,Wne,jho,Dho,FI,Gho,Oho,Vho,bu,Qne,Xho,zho,TI,Who,Qho,Hho,vu,Hne,Uho,Jho,MI,Yho,Kho,Zho,Fu,Une,euo,ouo,EI,ruo,tuo,auo,Tu,Jne,nuo,suo,CI,luo,iuo,duo,Mu,Yne,cuo,muo,wI,fuo,guo,huo,Eu,Kne,uuo,puo,AI,_uo,buo,vuo,Cu,Zne,Fuo,Tuo,yI,Muo,Euo,Cuo,wu,ese,wuo,Auo,LI,yuo,Luo,xuo,Au,ose,$uo,kuo,xI,Suo,Ruo,Puo,yu,rse,Buo,Iuo,$I,quo,Nuo,juo,Lu,tse,Duo,Guo,kI,Ouo,Vuo,Xuo,Rs,ase,zuo,Wuo,SI,Quo,Huo,RI,Uuo,Juo,Yuo,xu,nse,Kuo,Zuo,PI,epo,opo,rpo,$u,sse,tpo,apo,BI,npo,spo,lpo,ku,lse,ipo,dpo,II,cpo,mpo,fpo,Su,ise,gpo,hpo,qI,upo,ppo,_po,Ru,dse,bpo,vpo,NI,Fpo,Tpo,Mpo,Pu,cse,Epo,Cpo,jI,wpo,Apo,ypo,Bu,mse,Lpo,xpo,DI,$po,kpo,Spo,Iu,fse,Rpo,Ppo,GI,Bpo,Ipo,qpo,qu,gse,Npo,jpo,OI,Dpo,Gpo,Opo,Nu,hse,Vpo,Xpo,VI,zpo,Wpo,Qpo,ju,use,Hpo,Upo,XI,Jpo,Ypo,Kpo,Du,pse,Zpo,e_o,zI,o_o,r_o,t_o,Gu,_se,a_o,n_o,WI,s_o,l_o,i_o,Ou,bse,d_o,c_o,QI,m_o,f_o,g_o,Vu,vse,h_o,u_o,HI,p_o,__o,b_o,Xu,Fse,v_o,F_o,UI,T_o,M_o,E_o,zu,Tse,C_o,w_o,JI,A_o,y_o,L_o,Wu,Mse,x_o,$_o,YI,k_o,S_o,R_o,Qu,Ese,P_o,B_o,KI,I_o,q_o,N_o,Hu,Cse,j_o,D_o,ZI,G_o,O_o,V_o,Uu,wse,X_o,z_o,eq,W_o,Q_o,H_o,Ju,Ase,U_o,J_o,oq,Y_o,K_o,Z_o,Yu,yse,ebo,obo,rq,rbo,tbo,abo,Ku,Lse,nbo,sbo,tq,lbo,ibo,dbo,Zu,xse,cbo,mbo,aq,fbo,gbo,hbo,ep,$se,ubo,pbo,nq,_bo,bbo,vbo,op,kse,Fbo,Tbo,sq,Mbo,Ebo,Cbo,rp,Sse,wbo,Abo,lq,ybo,Lbo,xbo,tp,Rse,$bo,kbo,iq,Sbo,Rbo,Pbo,ap,Pse,Bbo,Ibo,dq,qbo,Nbo,jbo,np,Bse,Dbo,Gbo,cq,Obo,Vbo,Xbo,sp,Ise,zbo,Wbo,mq,Qbo,Hbo,Ubo,lp,qse,Jbo,Ybo,fq,Kbo,Zbo,e2o,ip,Nse,o2o,r2o,gq,t2o,a2o,n2o,dp,jse,s2o,l2o,hq,i2o,d2o,c2o,cp,Dse,m2o,f2o,uq,g2o,h2o,u2o,mp,Gse,p2o,_2o,pq,b2o,v2o,F2o,fp,Ose,T2o,M2o,_q,E2o,C2o,w2o,gp,Vse,A2o,y2o,bq,L2o,x2o,$2o,hp,Xse,k2o,S2o,vq,R2o,P2o,B2o,up,zse,I2o,q2o,Fq,N2o,j2o,D2o,pp,Wse,G2o,O2o,Tq,V2o,X2o,z2o,_p,Qse,W2o,Q2o,Mq,H2o,U2o,J2o,bp,Hse,Y2o,K2o,Eq,Z2o,evo,ovo,vp,Use,rvo,tvo,Cq,avo,nvo,svo,Fp,Jse,lvo,ivo,wq,dvo,cvo,mvo,Tp,Yse,fvo,gvo,Aq,hvo,uvo,pvo,Mp,Kse,_vo,bvo,yq,vvo,Fvo,Tvo,Ep,Zse,Mvo,Evo,Lq,Cvo,wvo,Avo,Cp,ele,yvo,Lvo,xq,xvo,$vo,kvo,wp,ole,Svo,Rvo,$q,Pvo,Bvo,Ivo,Ap,rle,qvo,Nvo,kq,jvo,Dvo,Gvo,yp,tle,Ovo,Vvo,Sq,Xvo,zvo,Wvo,Lp,ale,Qvo,Hvo,Rq,Uvo,Jvo,Yvo,xp,nle,Kvo,Zvo,Pq,eFo,oFo,rFo,$p,sle,tFo,aFo,Bq,nFo,sFo,lFo,kp,lle,iFo,dFo,Iq,cFo,mFo,fFo,Sp,ile,gFo,hFo,qq,uFo,pFo,_Fo,Rp,dle,bFo,vFo,Nq,FFo,TFo,MFo,Pp,cle,EFo,CFo,jq,wFo,AFo,yFo,Bp,mle,LFo,xFo,Dq,$Fo,kFo,SFo,Ip,fle,RFo,PFo,Gq,BFo,IFo,qFo,qp,gle,NFo,jFo,Oq,DFo,GFo,OFo,Np,hle,VFo,XFo,Vq,zFo,WFo,QFo,jp,ule,HFo,UFo,Xq,JFo,YFo,KFo,Dp,ple,ZFo,e1o,zq,o1o,r1o,t1o,Gp,a1o,_le,n1o,s1o,ble,l1o,i1o,Op,XIe,yi,Vp,vle,jy,d1o,Fle,c1o,zIe,xo,Dy,m1o,Li,f1o,Wq,g1o,h1o,Qq,u1o,p1o,_1o,Gy,b1o,Tle,v1o,F1o,T1o,at,Oy,M1o,Mle,E1o,C1o,xi,w1o,Ele,A1o,y1o,Hq,L1o,x1o,$1o,Xp,k1o,Ye,Vy,S1o,Cle,R1o,P1o,xa,B1o,wle,I1o,q1o,Ale,N1o,j1o,yle,D1o,G1o,O1o,G,zp,Lle,V1o,X1o,Uq,z1o,W1o,Q1o,Wp,xle,H1o,U1o,Jq,J1o,Y1o,K1o,Qp,$le,Z1o,eTo,Yq,oTo,rTo,tTo,Hp,kle,aTo,nTo,Kq,sTo,lTo,iTo,Up,Sle,dTo,cTo,Zq,mTo,fTo,gTo,Jp,Rle,hTo,uTo,eN,pTo,_To,bTo,Yp,Ple,vTo,FTo,oN,TTo,MTo,ETo,Kp,Ble,CTo,wTo,rN,ATo,yTo,LTo,Zp,Ile,xTo,$To,tN,kTo,STo,RTo,e_,qle,PTo,BTo,aN,ITo,qTo,NTo,o_,Nle,jTo,DTo,nN,GTo,OTo,VTo,r_,jle,XTo,zTo,sN,WTo,QTo,HTo,t_,Dle,UTo,JTo,lN,YTo,KTo,ZTo,a_,Gle,eMo,oMo,iN,rMo,tMo,aMo,n_,Ole,nMo,sMo,dN,lMo,iMo,dMo,s_,Vle,cMo,mMo,cN,fMo,gMo,hMo,l_,Xle,uMo,pMo,mN,_Mo,bMo,vMo,i_,zle,FMo,TMo,fN,MMo,EMo,CMo,d_,Wle,wMo,AMo,gN,yMo,LMo,xMo,c_,Qle,$Mo,kMo,hN,SMo,RMo,PMo,m_,Hle,BMo,IMo,uN,qMo,NMo,jMo,f_,Ule,DMo,GMo,pN,OMo,VMo,XMo,g_,Jle,zMo,WMo,_N,QMo,HMo,UMo,h_,Yle,JMo,YMo,bN,KMo,ZMo,e4o,u_,Kle,o4o,r4o,vN,t4o,a4o,n4o,p_,Zle,s4o,l4o,FN,i4o,d4o,c4o,__,eie,m4o,f4o,TN,g4o,h4o,u4o,b_,oie,p4o,_4o,MN,b4o,v4o,F4o,v_,rie,T4o,M4o,EN,E4o,C4o,w4o,F_,tie,A4o,y4o,CN,L4o,x4o,$4o,T_,aie,k4o,S4o,wN,R4o,P4o,B4o,M_,nie,I4o,q4o,AN,N4o,j4o,D4o,E_,sie,G4o,O4o,yN,V4o,X4o,z4o,C_,lie,W4o,Q4o,LN,H4o,U4o,J4o,w_,iie,Y4o,K4o,xN,Z4o,eEo,oEo,A_,die,rEo,tEo,$N,aEo,nEo,sEo,y_,cie,lEo,iEo,kN,dEo,cEo,mEo,L_,mie,fEo,gEo,SN,hEo,uEo,pEo,x_,fie,_Eo,bEo,RN,vEo,FEo,TEo,$_,gie,MEo,EEo,PN,CEo,wEo,AEo,k_,hie,yEo,LEo,BN,xEo,$Eo,kEo,S_,uie,SEo,REo,IN,PEo,BEo,IEo,R_,qEo,pie,NEo,jEo,_ie,DEo,GEo,P_,WIe,$i,B_,bie,Xy,OEo,vie,VEo,QIe,$o,zy,XEo,ki,zEo,qN,WEo,QEo,NN,HEo,UEo,JEo,Wy,YEo,Fie,KEo,ZEo,eCo,nt,Qy,oCo,Tie,rCo,tCo,Si,aCo,Mie,nCo,sCo,jN,lCo,iCo,dCo,I_,cCo,Ke,Hy,mCo,Eie,fCo,gCo,$a,hCo,Cie,uCo,pCo,wie,_Co,bCo,Aie,vCo,FCo,TCo,z,q_,yie,MCo,ECo,DN,CCo,wCo,ACo,N_,Lie,yCo,LCo,GN,xCo,$Co,kCo,j_,xie,SCo,RCo,ON,PCo,BCo,ICo,D_,$ie,qCo,NCo,VN,jCo,DCo,GCo,G_,kie,OCo,VCo,XN,XCo,zCo,WCo,O_,Sie,QCo,HCo,zN,UCo,JCo,YCo,V_,Rie,KCo,ZCo,WN,e5o,o5o,r5o,X_,Pie,t5o,a5o,QN,n5o,s5o,l5o,z_,Bie,i5o,d5o,HN,c5o,m5o,f5o,W_,Iie,g5o,h5o,UN,u5o,p5o,_5o,Q_,qie,b5o,v5o,JN,F5o,T5o,M5o,H_,Nie,E5o,C5o,YN,w5o,A5o,y5o,U_,jie,L5o,x5o,KN,$5o,k5o,S5o,J_,Die,R5o,P5o,ZN,B5o,I5o,q5o,Y_,Gie,N5o,j5o,ej,D5o,G5o,O5o,K_,Oie,V5o,X5o,oj,z5o,W5o,Q5o,Z_,Vie,H5o,U5o,rj,J5o,Y5o,K5o,eb,Xie,Z5o,e3o,tj,o3o,r3o,t3o,ob,zie,a3o,n3o,aj,s3o,l3o,i3o,rb,Wie,d3o,c3o,nj,m3o,f3o,g3o,tb,Qie,h3o,u3o,sj,p3o,_3o,b3o,ab,Hie,v3o,F3o,lj,T3o,M3o,E3o,nb,Uie,C3o,w3o,ij,A3o,y3o,L3o,sb,Jie,x3o,$3o,dj,k3o,S3o,R3o,lb,Yie,P3o,B3o,cj,I3o,q3o,N3o,ib,Kie,j3o,D3o,mj,G3o,O3o,V3o,db,Zie,X3o,z3o,fj,W3o,Q3o,H3o,cb,ede,U3o,J3o,gj,Y3o,K3o,Z3o,mb,ode,ewo,owo,hj,rwo,two,awo,fb,rde,nwo,swo,uj,lwo,iwo,dwo,gb,tde,cwo,mwo,pj,fwo,gwo,hwo,hb,ade,uwo,pwo,_j,_wo,bwo,vwo,ub,nde,Fwo,Two,bj,Mwo,Ewo,Cwo,pb,sde,wwo,Awo,vj,ywo,Lwo,xwo,_b,lde,$wo,kwo,Fj,Swo,Rwo,Pwo,bb,ide,Bwo,Iwo,Tj,qwo,Nwo,jwo,vb,Dwo,dde,Gwo,Owo,cde,Vwo,Xwo,Fb,HIe,Ri,Tb,mde,Uy,zwo,fde,Wwo,UIe,ko,Jy,Qwo,Pi,Hwo,Mj,Uwo,Jwo,Ej,Ywo,Kwo,Zwo,Yy,eAo,gde,oAo,rAo,tAo,st,Ky,aAo,hde,nAo,sAo,Bi,lAo,ude,iAo,dAo,Cj,cAo,mAo,fAo,Mb,gAo,Ze,Zy,hAo,pde,uAo,pAo,ka,_Ao,_de,bAo,vAo,bde,FAo,TAo,vde,MAo,EAo,CAo,W,Eb,Fde,wAo,AAo,wj,yAo,LAo,xAo,Cb,Tde,$Ao,kAo,Aj,SAo,RAo,PAo,wb,Mde,BAo,IAo,yj,qAo,NAo,jAo,Ab,Ede,DAo,GAo,Lj,OAo,VAo,XAo,yb,Cde,zAo,WAo,xj,QAo,HAo,UAo,Lb,wde,JAo,YAo,$j,KAo,ZAo,e6o,xb,Ade,o6o,r6o,kj,t6o,a6o,n6o,$b,yde,s6o,l6o,Sj,i6o,d6o,c6o,kb,Lde,m6o,f6o,Rj,g6o,h6o,u6o,Sb,xde,p6o,_6o,Pj,b6o,v6o,F6o,Rb,$de,T6o,M6o,Bj,E6o,C6o,w6o,Pb,kde,A6o,y6o,Ij,L6o,x6o,$6o,Bb,Sde,k6o,S6o,qj,R6o,P6o,B6o,Ib,Rde,I6o,q6o,Nj,N6o,j6o,D6o,qb,Pde,G6o,O6o,jj,V6o,X6o,z6o,Nb,Bde,W6o,Q6o,Dj,H6o,U6o,J6o,jb,Ide,Y6o,K6o,Gj,Z6o,e0o,o0o,Db,qde,r0o,t0o,Oj,a0o,n0o,s0o,Gb,Nde,l0o,i0o,Vj,d0o,c0o,m0o,Ob,jde,f0o,g0o,Xj,h0o,u0o,p0o,Vb,Dde,_0o,b0o,zj,v0o,F0o,T0o,Xb,Gde,M0o,E0o,Wj,C0o,w0o,A0o,zb,Ode,y0o,L0o,Qj,x0o,$0o,k0o,Wb,Vde,S0o,R0o,Hj,P0o,B0o,I0o,Qb,Xde,q0o,N0o,Uj,j0o,D0o,G0o,Hb,zde,O0o,V0o,Jj,X0o,z0o,W0o,Ub,Wde,Q0o,H0o,Yj,U0o,J0o,Y0o,Jb,Qde,K0o,Z0o,Kj,eyo,oyo,ryo,Yb,Hde,tyo,ayo,Zj,nyo,syo,lyo,Kb,Ude,iyo,dyo,eD,cyo,myo,fyo,Zb,Jde,gyo,hyo,Yde,uyo,pyo,_yo,e2,Kde,byo,vyo,oD,Fyo,Tyo,Myo,o2,Zde,Eyo,Cyo,rD,wyo,Ayo,yyo,r2,ece,Lyo,xyo,tD,$yo,kyo,Syo,t2,oce,Ryo,Pyo,aD,Byo,Iyo,qyo,a2,Nyo,rce,jyo,Dyo,tce,Gyo,Oyo,n2,JIe,Ii,s2,ace,eL,Vyo,nce,Xyo,YIe,So,oL,zyo,qi,Wyo,nD,Qyo,Hyo,sD,Uyo,Jyo,Yyo,rL,Kyo,sce,Zyo,eLo,oLo,lt,tL,rLo,lce,tLo,aLo,Ni,nLo,ice,sLo,lLo,lD,iLo,dLo,cLo,l2,mLo,eo,aL,fLo,dce,gLo,hLo,Sa,uLo,cce,pLo,_Lo,mce,bLo,vLo,fce,FLo,TLo,MLo,pe,i2,gce,ELo,CLo,iD,wLo,ALo,yLo,d2,hce,LLo,xLo,dD,$Lo,kLo,SLo,c2,uce,RLo,PLo,cD,BLo,ILo,qLo,m2,pce,NLo,jLo,mD,DLo,GLo,OLo,f2,_ce,VLo,XLo,fD,zLo,WLo,QLo,g2,bce,HLo,ULo,gD,JLo,YLo,KLo,h2,vce,ZLo,e8o,hD,o8o,r8o,t8o,u2,Fce,a8o,n8o,uD,s8o,l8o,i8o,p2,Tce,d8o,c8o,pD,m8o,f8o,g8o,_2,Mce,h8o,u8o,_D,p8o,_8o,b8o,b2,Ece,v8o,F8o,bD,T8o,M8o,E8o,v2,Cce,C8o,w8o,vD,A8o,y8o,L8o,F2,wce,x8o,$8o,FD,k8o,S8o,R8o,T2,Ace,P8o,B8o,TD,I8o,q8o,N8o,M2,yce,j8o,D8o,MD,G8o,O8o,V8o,E2,Lce,X8o,z8o,ED,W8o,Q8o,H8o,C2,U8o,xce,J8o,Y8o,$ce,K8o,Z8o,w2,KIe,ji,A2,kce,nL,exo,Sce,oxo,ZIe,Ro,sL,rxo,Di,txo,CD,axo,nxo,wD,sxo,lxo,ixo,lL,dxo,Rce,cxo,mxo,fxo,it,iL,gxo,Pce,hxo,uxo,Gi,pxo,Bce,_xo,bxo,AD,vxo,Fxo,Txo,y2,Mxo,oo,dL,Exo,Ice,Cxo,wxo,Ra,Axo,qce,yxo,Lxo,Nce,xxo,$xo,jce,kxo,Sxo,Rxo,q,L2,Dce,Pxo,Bxo,yD,Ixo,qxo,Nxo,x2,Gce,jxo,Dxo,LD,Gxo,Oxo,Vxo,$2,Oce,Xxo,zxo,xD,Wxo,Qxo,Hxo,k2,Vce,Uxo,Jxo,$D,Yxo,Kxo,Zxo,S2,Xce,e7o,o7o,kD,r7o,t7o,a7o,R2,zce,n7o,s7o,SD,l7o,i7o,d7o,P2,Wce,c7o,m7o,RD,f7o,g7o,h7o,B2,Qce,u7o,p7o,PD,_7o,b7o,v7o,I2,Hce,F7o,T7o,BD,M7o,E7o,C7o,q2,Uce,w7o,A7o,ID,y7o,L7o,x7o,N2,Jce,$7o,k7o,qD,S7o,R7o,P7o,j2,Yce,B7o,I7o,ND,q7o,N7o,j7o,D2,Kce,D7o,G7o,jD,O7o,V7o,X7o,G2,Zce,z7o,W7o,DD,Q7o,H7o,U7o,O2,eme,J7o,Y7o,GD,K7o,Z7o,e9o,V2,ome,o9o,r9o,OD,t9o,a9o,n9o,X2,rme,s9o,l9o,VD,i9o,d9o,c9o,z2,tme,m9o,f9o,XD,g9o,h9o,u9o,W2,ame,p9o,_9o,zD,b9o,v9o,F9o,Q2,nme,T9o,M9o,WD,E9o,C9o,w9o,H2,sme,A9o,y9o,QD,L9o,x9o,$9o,U2,lme,k9o,S9o,HD,R9o,P9o,B9o,J2,ime,I9o,q9o,UD,N9o,j9o,D9o,Y2,dme,G9o,O9o,JD,V9o,X9o,z9o,K2,cme,W9o,Q9o,YD,H9o,U9o,J9o,Z2,mme,Y9o,K9o,KD,Z9o,e$o,o$o,ev,fme,r$o,t$o,ZD,a$o,n$o,s$o,ov,gme,l$o,i$o,eG,d$o,c$o,m$o,rv,hme,f$o,g$o,oG,h$o,u$o,p$o,tv,ume,_$o,b$o,rG,v$o,F$o,T$o,av,pme,M$o,E$o,tG,C$o,w$o,A$o,nv,_me,y$o,L$o,aG,x$o,$$o,k$o,sv,bme,S$o,R$o,nG,P$o,B$o,I$o,lv,vme,q$o,N$o,sG,j$o,D$o,G$o,iv,Fme,O$o,V$o,lG,X$o,z$o,W$o,dv,Tme,Q$o,H$o,iG,U$o,J$o,Y$o,cv,Mme,K$o,Z$o,dG,eko,oko,rko,mv,Eme,tko,ako,cG,nko,sko,lko,fv,Cme,iko,dko,mG,cko,mko,fko,gv,wme,gko,hko,fG,uko,pko,_ko,hv,Ame,bko,vko,gG,Fko,Tko,Mko,uv,yme,Eko,Cko,hG,wko,Ako,yko,pv,Lme,Lko,xko,uG,$ko,kko,Sko,_v,xme,Rko,Pko,pG,Bko,Iko,qko,bv,$me,Nko,jko,_G,Dko,Gko,Oko,vv,kme,Vko,Xko,bG,zko,Wko,Qko,Fv,Hko,Sme,Uko,Jko,Rme,Yko,Kko,Tv,eqe,Oi,Mv,Pme,cL,Zko,Bme,eSo,oqe,Po,mL,oSo,Vi,rSo,vG,tSo,aSo,FG,nSo,sSo,lSo,fL,iSo,Ime,dSo,cSo,mSo,dt,gL,fSo,qme,gSo,hSo,Xi,uSo,Nme,pSo,_So,TG,bSo,vSo,FSo,Ev,TSo,ro,hL,MSo,jme,ESo,CSo,Pa,wSo,Dme,ASo,ySo,Gme,LSo,xSo,Ome,$So,kSo,SSo,Y,Cv,Vme,RSo,PSo,MG,BSo,ISo,qSo,wv,Xme,NSo,jSo,EG,DSo,GSo,OSo,Av,zme,VSo,XSo,CG,zSo,WSo,QSo,yv,Wme,HSo,USo,wG,JSo,YSo,KSo,Lv,Qme,ZSo,eRo,AG,oRo,rRo,tRo,xv,Hme,aRo,nRo,yG,sRo,lRo,iRo,$v,Ume,dRo,cRo,LG,mRo,fRo,gRo,kv,Jme,hRo,uRo,xG,pRo,_Ro,bRo,Sv,Yme,vRo,FRo,$G,TRo,MRo,ERo,Rv,Kme,CRo,wRo,kG,ARo,yRo,LRo,Pv,Zme,xRo,$Ro,SG,kRo,SRo,RRo,Bv,efe,PRo,BRo,RG,IRo,qRo,NRo,Iv,ofe,jRo,DRo,PG,GRo,ORo,VRo,qv,rfe,XRo,zRo,BG,WRo,QRo,HRo,Nv,tfe,URo,JRo,IG,YRo,KRo,ZRo,jv,afe,ePo,oPo,qG,rPo,tPo,aPo,Dv,nfe,nPo,sPo,NG,lPo,iPo,dPo,Gv,sfe,cPo,mPo,jG,fPo,gPo,hPo,Ov,lfe,uPo,pPo,DG,_Po,bPo,vPo,Vv,ife,FPo,TPo,GG,MPo,EPo,CPo,Xv,dfe,wPo,APo,OG,yPo,LPo,xPo,zv,cfe,$Po,kPo,VG,SPo,RPo,PPo,Wv,mfe,BPo,IPo,XG,qPo,NPo,jPo,Qv,ffe,DPo,GPo,zG,OPo,VPo,XPo,Hv,gfe,zPo,WPo,WG,QPo,HPo,UPo,Uv,hfe,JPo,YPo,QG,KPo,ZPo,eBo,Jv,ufe,oBo,rBo,HG,tBo,aBo,nBo,Yv,pfe,sBo,lBo,UG,iBo,dBo,cBo,Kv,_fe,mBo,fBo,JG,gBo,hBo,uBo,Zv,pBo,bfe,_Bo,bBo,vfe,vBo,FBo,eF,rqe,zi,oF,Ffe,uL,TBo,Tfe,MBo,tqe,Bo,pL,EBo,Wi,CBo,YG,wBo,ABo,KG,yBo,LBo,xBo,_L,$Bo,Mfe,kBo,SBo,RBo,ct,bL,PBo,Efe,BBo,IBo,Qi,qBo,Cfe,NBo,jBo,ZG,DBo,GBo,OBo,rF,VBo,to,vL,XBo,wfe,zBo,WBo,Ba,QBo,Afe,HBo,UBo,yfe,JBo,YBo,Lfe,KBo,ZBo,eIo,Yr,tF,xfe,oIo,rIo,eO,tIo,aIo,nIo,aF,$fe,sIo,lIo,oO,iIo,dIo,cIo,nF,kfe,mIo,fIo,rO,gIo,hIo,uIo,sF,Sfe,pIo,_Io,tO,bIo,vIo,FIo,lF,Rfe,TIo,MIo,aO,EIo,CIo,wIo,iF,AIo,Pfe,yIo,LIo,Bfe,xIo,$Io,dF,aqe,Hi,cF,Ife,FL,kIo,qfe,SIo,nqe,Io,TL,RIo,Ui,PIo,nO,BIo,IIo,sO,qIo,NIo,jIo,ML,DIo,Nfe,GIo,OIo,VIo,mt,EL,XIo,jfe,zIo,WIo,Ji,QIo,Dfe,HIo,UIo,lO,JIo,YIo,KIo,mF,ZIo,ao,CL,eqo,Gfe,oqo,rqo,Ia,tqo,Ofe,aqo,nqo,Vfe,sqo,lqo,Xfe,iqo,dqo,cqo,U,fF,zfe,mqo,fqo,iO,gqo,hqo,uqo,gF,Wfe,pqo,_qo,dO,bqo,vqo,Fqo,hF,Qfe,Tqo,Mqo,cO,Eqo,Cqo,wqo,uF,Hfe,Aqo,yqo,mO,Lqo,xqo,$qo,pF,Ufe,kqo,Sqo,fO,Rqo,Pqo,Bqo,_F,Jfe,Iqo,qqo,gO,Nqo,jqo,Dqo,bF,Yfe,Gqo,Oqo,hO,Vqo,Xqo,zqo,vF,Kfe,Wqo,Qqo,uO,Hqo,Uqo,Jqo,FF,Zfe,Yqo,Kqo,pO,Zqo,eNo,oNo,TF,ege,rNo,tNo,_O,aNo,nNo,sNo,MF,oge,lNo,iNo,bO,dNo,cNo,mNo,EF,rge,fNo,gNo,vO,hNo,uNo,pNo,CF,tge,_No,bNo,FO,vNo,FNo,TNo,wF,age,MNo,ENo,TO,CNo,wNo,ANo,AF,nge,yNo,LNo,MO,xNo,$No,kNo,yF,sge,SNo,RNo,EO,PNo,BNo,INo,LF,lge,qNo,NNo,CO,jNo,DNo,GNo,xF,ige,ONo,VNo,wO,XNo,zNo,WNo,$F,dge,QNo,HNo,AO,UNo,JNo,YNo,kF,cge,KNo,ZNo,yO,ejo,ojo,rjo,SF,mge,tjo,ajo,LO,njo,sjo,ljo,RF,fge,ijo,djo,xO,cjo,mjo,fjo,PF,gge,gjo,hjo,$O,ujo,pjo,_jo,BF,hge,bjo,vjo,kO,Fjo,Tjo,Mjo,IF,uge,Ejo,Cjo,SO,wjo,Ajo,yjo,qF,pge,Ljo,xjo,RO,$jo,kjo,Sjo,NF,_ge,Rjo,Pjo,PO,Bjo,Ijo,qjo,jF,bge,Njo,jjo,BO,Djo,Gjo,Ojo,DF,vge,Vjo,Xjo,IO,zjo,Wjo,Qjo,GF,Fge,Hjo,Ujo,qO,Jjo,Yjo,Kjo,OF,Tge,Zjo,eDo,NO,oDo,rDo,tDo,VF,Mge,aDo,nDo,jO,sDo,lDo,iDo,XF,Ege,dDo,cDo,DO,mDo,fDo,gDo,zF,hDo,Cge,uDo,pDo,wge,_Do,bDo,WF,sqe,Yi,QF,Age,wL,vDo,yge,FDo,lqe,qo,AL,TDo,Ki,MDo,GO,EDo,CDo,OO,wDo,ADo,yDo,yL,LDo,Lge,xDo,$Do,kDo,ft,LL,SDo,xge,RDo,PDo,Zi,BDo,$ge,IDo,qDo,VO,NDo,jDo,DDo,HF,GDo,no,xL,ODo,kge,VDo,XDo,qa,zDo,Sge,WDo,QDo,Rge,HDo,UDo,Pge,JDo,YDo,KDo,V,UF,Bge,ZDo,eGo,XO,oGo,rGo,tGo,JF,Ige,aGo,nGo,zO,sGo,lGo,iGo,YF,qge,dGo,cGo,WO,mGo,fGo,gGo,KF,Nge,hGo,uGo,QO,pGo,_Go,bGo,ZF,jge,vGo,FGo,HO,TGo,MGo,EGo,e1,Dge,CGo,wGo,UO,AGo,yGo,LGo,o1,Gge,xGo,$Go,JO,kGo,SGo,RGo,r1,Oge,PGo,BGo,YO,IGo,qGo,NGo,t1,Vge,jGo,DGo,KO,GGo,OGo,VGo,a1,Xge,XGo,zGo,ZO,WGo,QGo,HGo,n1,zge,UGo,JGo,eV,YGo,KGo,ZGo,s1,Wge,eOo,oOo,oV,rOo,tOo,aOo,l1,Qge,nOo,sOo,rV,lOo,iOo,dOo,i1,Hge,cOo,mOo,tV,fOo,gOo,hOo,d1,Uge,uOo,pOo,aV,_Oo,bOo,vOo,c1,Jge,FOo,TOo,nV,MOo,EOo,COo,m1,Yge,wOo,AOo,sV,yOo,LOo,xOo,f1,Kge,$Oo,kOo,lV,SOo,ROo,POo,g1,Zge,BOo,IOo,iV,qOo,NOo,jOo,h1,ehe,DOo,GOo,dV,OOo,VOo,XOo,u1,ohe,zOo,WOo,cV,QOo,HOo,UOo,p1,rhe,JOo,YOo,mV,KOo,ZOo,eVo,_1,the,oVo,rVo,fV,tVo,aVo,nVo,b1,ahe,sVo,lVo,gV,iVo,dVo,cVo,v1,nhe,mVo,fVo,hV,gVo,hVo,uVo,F1,she,pVo,_Vo,uV,bVo,vVo,FVo,T1,lhe,TVo,MVo,pV,EVo,CVo,wVo,M1,ihe,AVo,yVo,_V,LVo,xVo,$Vo,E1,dhe,kVo,SVo,bV,RVo,PVo,BVo,C1,che,IVo,qVo,vV,NVo,jVo,DVo,w1,mhe,GVo,OVo,FV,VVo,XVo,zVo,A1,fhe,WVo,QVo,TV,HVo,UVo,JVo,y1,ghe,YVo,KVo,MV,ZVo,eXo,oXo,L1,hhe,rXo,tXo,EV,aXo,nXo,sXo,x1,uhe,lXo,iXo,CV,dXo,cXo,mXo,$1,phe,fXo,gXo,wV,hXo,uXo,pXo,k1,_he,_Xo,bXo,AV,vXo,FXo,TXo,S1,bhe,MXo,EXo,yV,CXo,wXo,AXo,R1,vhe,yXo,LXo,LV,xXo,$Xo,kXo,P1,SXo,Fhe,RXo,PXo,The,BXo,IXo,B1,iqe,ed,I1,Mhe,$L,qXo,Ehe,NXo,dqe,No,kL,jXo,od,DXo,xV,GXo,OXo,$V,VXo,XXo,zXo,SL,WXo,Che,QXo,HXo,UXo,gt,RL,JXo,whe,YXo,KXo,rd,ZXo,Ahe,ezo,ozo,kV,rzo,tzo,azo,q1,nzo,so,PL,szo,yhe,lzo,izo,Na,dzo,Lhe,czo,mzo,xhe,fzo,gzo,$he,hzo,uzo,pzo,khe,N1,She,_zo,bzo,SV,vzo,Fzo,Tzo,j1,Mzo,Rhe,Ezo,Czo,Phe,wzo,Azo,D1,cqe,td,G1,Bhe,BL,yzo,Ihe,Lzo,mqe,jo,IL,xzo,ad,$zo,RV,kzo,Szo,PV,Rzo,Pzo,Bzo,qL,Izo,qhe,qzo,Nzo,jzo,ht,NL,Dzo,Nhe,Gzo,Ozo,nd,Vzo,jhe,Xzo,zzo,BV,Wzo,Qzo,Hzo,O1,Uzo,lo,jL,Jzo,Dhe,Yzo,Kzo,ja,Zzo,Ghe,eWo,oWo,Ohe,rWo,tWo,Vhe,aWo,nWo,sWo,Fe,V1,Xhe,lWo,iWo,IV,dWo,cWo,mWo,X1,zhe,fWo,gWo,qV,hWo,uWo,pWo,z1,Whe,_Wo,bWo,NV,vWo,FWo,TWo,Ps,Qhe,MWo,EWo,jV,CWo,wWo,DV,AWo,yWo,LWo,W1,Hhe,xWo,$Wo,GV,kWo,SWo,RWo,ut,Uhe,PWo,BWo,OV,IWo,qWo,VV,NWo,jWo,XV,DWo,GWo,OWo,Q1,Jhe,VWo,XWo,zV,zWo,WWo,QWo,H1,Yhe,HWo,UWo,WV,JWo,YWo,KWo,U1,Khe,ZWo,eQo,QV,oQo,rQo,tQo,J1,Zhe,aQo,nQo,HV,sQo,lQo,iQo,Y1,eue,dQo,cQo,UV,mQo,fQo,gQo,K1,oue,hQo,uQo,JV,pQo,_Qo,bQo,Z1,rue,vQo,FQo,YV,TQo,MQo,EQo,eT,CQo,tue,wQo,AQo,aue,yQo,LQo,oT,fqe,sd,rT,nue,DL,xQo,sue,$Qo,gqe,Do,GL,kQo,ld,SQo,KV,RQo,PQo,ZV,BQo,IQo,qQo,OL,NQo,lue,jQo,DQo,GQo,pt,VL,OQo,iue,VQo,XQo,id,zQo,due,WQo,QQo,eX,HQo,UQo,JQo,tT,YQo,io,XL,KQo,cue,ZQo,eHo,Da,oHo,mue,rHo,tHo,fue,aHo,nHo,gue,sHo,lHo,iHo,hue,aT,uue,dHo,cHo,oX,mHo,fHo,gHo,nT,hHo,pue,uHo,pHo,_ue,_Ho,bHo,sT,hqe,dd,lT,bue,zL,vHo,vue,FHo,uqe,Go,WL,THo,cd,MHo,rX,EHo,CHo,tX,wHo,AHo,yHo,QL,LHo,Fue,xHo,$Ho,kHo,_t,HL,SHo,Tue,RHo,PHo,md,BHo,Mue,IHo,qHo,aX,NHo,jHo,DHo,iT,GHo,co,UL,OHo,Eue,VHo,XHo,Ga,zHo,Cue,WHo,QHo,wue,HHo,UHo,Aue,JHo,YHo,KHo,ke,dT,yue,ZHo,eUo,nX,oUo,rUo,tUo,cT,Lue,aUo,nUo,sX,sUo,lUo,iUo,mT,xue,dUo,cUo,lX,mUo,fUo,gUo,fT,$ue,hUo,uUo,iX,pUo,_Uo,bUo,gT,kue,vUo,FUo,dX,TUo,MUo,EUo,hT,Sue,CUo,wUo,cX,AUo,yUo,LUo,uT,Rue,xUo,$Uo,mX,kUo,SUo,RUo,pT,Pue,PUo,BUo,fX,IUo,qUo,NUo,_T,Bue,jUo,DUo,gX,GUo,OUo,VUo,bT,XUo,Iue,zUo,WUo,que,QUo,HUo,vT,pqe,fd,FT,Nue,JL,UUo,jue,JUo,_qe,Oo,YL,YUo,gd,KUo,hX,ZUo,eJo,uX,oJo,rJo,tJo,KL,aJo,Due,nJo,sJo,lJo,bt,ZL,iJo,Gue,dJo,cJo,hd,mJo,Oue,fJo,gJo,pX,hJo,uJo,pJo,TT,_Jo,mo,e8,bJo,Vue,vJo,FJo,Oa,TJo,Xue,MJo,EJo,zue,CJo,wJo,Wue,AJo,yJo,LJo,Kr,MT,Que,xJo,$Jo,_X,kJo,SJo,RJo,ET,Hue,PJo,BJo,bX,IJo,qJo,NJo,CT,Uue,jJo,DJo,vX,GJo,OJo,VJo,wT,Jue,XJo,zJo,FX,WJo,QJo,HJo,AT,Yue,UJo,JJo,TX,YJo,KJo,ZJo,yT,eYo,Kue,oYo,rYo,Zue,tYo,aYo,LT,bqe,ud,xT,epe,o8,nYo,ope,sYo,vqe,Vo,r8,lYo,pd,iYo,MX,dYo,cYo,EX,mYo,fYo,gYo,t8,hYo,rpe,uYo,pYo,_Yo,vt,a8,bYo,tpe,vYo,FYo,_d,TYo,ape,MYo,EYo,CX,CYo,wYo,AYo,$T,yYo,fo,n8,LYo,npe,xYo,$Yo,Va,kYo,spe,SYo,RYo,lpe,PYo,BYo,ipe,IYo,qYo,NYo,Se,kT,dpe,jYo,DYo,wX,GYo,OYo,VYo,ST,cpe,XYo,zYo,AX,WYo,QYo,HYo,RT,mpe,UYo,JYo,yX,YYo,KYo,ZYo,PT,fpe,eKo,oKo,LX,rKo,tKo,aKo,BT,gpe,nKo,sKo,xX,lKo,iKo,dKo,IT,hpe,cKo,mKo,$X,fKo,gKo,hKo,qT,upe,uKo,pKo,kX,_Ko,bKo,vKo,NT,ppe,FKo,TKo,SX,MKo,EKo,CKo,jT,_pe,wKo,AKo,RX,yKo,LKo,xKo,DT,$Ko,bpe,kKo,SKo,vpe,RKo,PKo,GT,Fqe,bd,OT,Fpe,s8,BKo,Tpe,IKo,Tqe,Xo,l8,qKo,vd,NKo,PX,jKo,DKo,BX,GKo,OKo,VKo,i8,XKo,Mpe,zKo,WKo,QKo,Ft,d8,HKo,Epe,UKo,JKo,Fd,YKo,Cpe,KKo,ZKo,IX,eZo,oZo,rZo,VT,tZo,go,c8,aZo,wpe,nZo,sZo,Xa,lZo,Ape,iZo,dZo,ype,cZo,mZo,Lpe,fZo,gZo,hZo,m8,XT,xpe,uZo,pZo,qX,_Zo,bZo,vZo,zT,$pe,FZo,TZo,NX,MZo,EZo,CZo,WT,wZo,kpe,AZo,yZo,Spe,LZo,xZo,QT,Mqe,Td,HT,Rpe,f8,$Zo,Ppe,kZo,Eqe,zo,g8,SZo,Md,RZo,jX,PZo,BZo,DX,IZo,qZo,NZo,h8,jZo,Bpe,DZo,GZo,OZo,Tt,u8,VZo,Ipe,XZo,zZo,Ed,WZo,qpe,QZo,HZo,GX,UZo,JZo,YZo,UT,KZo,ho,p8,ZZo,Npe,eer,oer,za,rer,jpe,ter,aer,Dpe,ner,ser,Gpe,ler,ier,der,Zr,JT,Ope,cer,mer,OX,fer,ger,her,YT,Vpe,uer,per,VX,_er,ber,ver,KT,Xpe,Fer,Ter,XX,Mer,Eer,Cer,ZT,zpe,wer,Aer,zX,yer,Ler,xer,eM,Wpe,$er,ker,WX,Ser,Rer,Per,oM,Ber,Qpe,Ier,qer,Hpe,Ner,jer,rM,Cqe,Cd,tM,Upe,_8,Der,Jpe,Ger,wqe,Wo,b8,Oer,wd,Ver,QX,Xer,zer,HX,Wer,Qer,Her,v8,Uer,Ype,Jer,Yer,Ker,Mt,F8,Zer,Kpe,eor,oor,Ad,ror,Zpe,tor,aor,UX,nor,sor,lor,aM,ior,uo,T8,dor,e_e,cor,mor,Wa,gor,o_e,hor,uor,r_e,por,_or,t_e,bor,vor,For,yd,nM,a_e,Tor,Mor,JX,Eor,Cor,wor,sM,n_e,Aor,yor,YX,Lor,xor,$or,lM,s_e,kor,Sor,KX,Ror,Por,Bor,iM,Ior,l_e,qor,Nor,i_e,jor,Dor,dM,Aqe,Ld,cM,d_e,M8,Gor,c_e,Oor,yqe,Qo,E8,Vor,xd,Xor,ZX,zor,Wor,ez,Qor,Hor,Uor,C8,Jor,m_e,Yor,Kor,Zor,Et,w8,err,f_e,orr,rrr,$d,trr,g_e,arr,nrr,oz,srr,lrr,irr,mM,drr,po,A8,crr,h_e,mrr,frr,Qa,grr,u_e,hrr,urr,p_e,prr,_rr,__e,brr,vrr,Frr,y8,fM,b_e,Trr,Mrr,rz,Err,Crr,wrr,gM,v_e,Arr,yrr,tz,Lrr,xrr,$rr,hM,krr,F_e,Srr,Rrr,T_e,Prr,Brr,uM,Lqe,kd,pM,M_e,L8,Irr,E_e,qrr,xqe,Ho,x8,Nrr,Sd,jrr,az,Drr,Grr,nz,Orr,Vrr,Xrr,$8,zrr,C_e,Wrr,Qrr,Hrr,Ct,k8,Urr,w_e,Jrr,Yrr,Rd,Krr,A_e,Zrr,etr,sz,otr,rtr,ttr,_M,atr,_o,S8,ntr,y_e,str,ltr,Ha,itr,L_e,dtr,ctr,x_e,mtr,ftr,$_e,gtr,htr,utr,k_e,bM,S_e,ptr,_tr,lz,btr,vtr,Ftr,vM,Ttr,R_e,Mtr,Etr,P_e,Ctr,wtr,FM,$qe,Pd,TM,B_e,R8,Atr,I_e,ytr,kqe,Uo,P8,Ltr,Bd,xtr,iz,$tr,ktr,dz,Str,Rtr,Ptr,B8,Btr,q_e,Itr,qtr,Ntr,wt,I8,jtr,N_e,Dtr,Gtr,Id,Otr,j_e,Vtr,Xtr,cz,ztr,Wtr,Qtr,MM,Htr,bo,q8,Utr,D_e,Jtr,Ytr,Ua,Ktr,G_e,Ztr,ear,O_e,oar,rar,V_e,tar,aar,nar,Ja,EM,X_e,sar,lar,mz,iar,dar,car,CM,z_e,mar,far,fz,gar,har,uar,wM,W_e,par,_ar,gz,bar,Far,Tar,AM,Q_e,Mar,Ear,hz,Car,war,Aar,yM,yar,H_e,Lar,xar,U_e,$ar,kar,LM,Sqe,qd,xM,J_e,N8,Sar,Y_e,Rar,Rqe,Jo,j8,Par,Nd,Bar,uz,Iar,qar,pz,Nar,jar,Dar,D8,Gar,K_e,Oar,Var,Xar,At,G8,zar,Z_e,War,Qar,jd,Har,ebe,Uar,Jar,_z,Yar,Kar,Zar,$M,enr,vo,O8,onr,obe,rnr,tnr,Ya,anr,rbe,nnr,snr,tbe,lnr,inr,abe,dnr,cnr,mnr,nbe,kM,sbe,fnr,gnr,bz,hnr,unr,pnr,SM,_nr,lbe,bnr,vnr,ibe,Fnr,Tnr,RM,Pqe,Dd,PM,dbe,V8,Mnr,cbe,Enr,Bqe,Yo,X8,Cnr,Gd,wnr,vz,Anr,ynr,Fz,Lnr,xnr,$nr,z8,knr,mbe,Snr,Rnr,Pnr,yt,W8,Bnr,fbe,Inr,qnr,Od,Nnr,gbe,jnr,Dnr,Tz,Gnr,Onr,Vnr,BM,Xnr,wr,Q8,znr,hbe,Wnr,Qnr,Ka,Hnr,ube,Unr,Jnr,pbe,Ynr,Knr,_be,Znr,esr,osr,N,IM,bbe,rsr,tsr,Mz,asr,nsr,ssr,qM,vbe,lsr,isr,Ez,dsr,csr,msr,NM,Fbe,fsr,gsr,Cz,hsr,usr,psr,jM,Tbe,_sr,bsr,wz,vsr,Fsr,Tsr,DM,Mbe,Msr,Esr,Az,Csr,wsr,Asr,GM,Ebe,ysr,Lsr,yz,xsr,$sr,ksr,OM,Cbe,Ssr,Rsr,Lz,Psr,Bsr,Isr,VM,wbe,qsr,Nsr,xz,jsr,Dsr,Gsr,XM,Abe,Osr,Vsr,$z,Xsr,zsr,Wsr,zM,ybe,Qsr,Hsr,kz,Usr,Jsr,Ysr,WM,Lbe,Ksr,Zsr,Sz,elr,olr,rlr,QM,xbe,tlr,alr,Rz,nlr,slr,llr,HM,$be,ilr,dlr,Pz,clr,mlr,flr,UM,kbe,glr,hlr,Bz,ulr,plr,_lr,JM,Sbe,blr,vlr,Iz,Flr,Tlr,Mlr,YM,Rbe,Elr,Clr,qz,wlr,Alr,ylr,KM,Pbe,Llr,xlr,Nz,$lr,klr,Slr,Bs,Bbe,Rlr,Plr,jz,Blr,Ilr,Dz,qlr,Nlr,jlr,ZM,Ibe,Dlr,Glr,Gz,Olr,Vlr,Xlr,e4,qbe,zlr,Wlr,Oz,Qlr,Hlr,Ulr,o4,Nbe,Jlr,Ylr,Vz,Klr,Zlr,eir,r4,jbe,oir,rir,Xz,tir,air,nir,t4,Dbe,sir,lir,zz,iir,dir,cir,a4,Gbe,mir,fir,Wz,gir,hir,uir,n4,Obe,pir,_ir,Qz,bir,vir,Fir,s4,Vbe,Tir,Mir,Hz,Eir,Cir,wir,l4,Xbe,Air,yir,Uz,Lir,xir,$ir,i4,zbe,kir,Sir,Jz,Rir,Pir,Bir,d4,Wbe,Iir,qir,Yz,Nir,jir,Dir,c4,Qbe,Gir,Oir,Kz,Vir,Xir,zir,m4,Hbe,Wir,Qir,Zz,Hir,Uir,Jir,f4,Ube,Yir,Kir,eW,Zir,edr,odr,g4,Jbe,rdr,tdr,oW,adr,ndr,sdr,h4,Ybe,ldr,idr,rW,ddr,cdr,mdr,u4,Kbe,fdr,gdr,tW,hdr,udr,pdr,p4,Zbe,_dr,bdr,aW,vdr,Fdr,Tdr,_4,e2e,Mdr,Edr,nW,Cdr,wdr,Adr,b4,o2e,ydr,Ldr,sW,xdr,$dr,kdr,v4,r2e,Sdr,Rdr,lW,Pdr,Bdr,Idr,F4,t2e,qdr,Ndr,iW,jdr,Ddr,Gdr,T4,a2e,Odr,Vdr,dW,Xdr,zdr,Wdr,M4,n2e,Qdr,Hdr,cW,Udr,Jdr,Ydr,E4,s2e,Kdr,Zdr,mW,ecr,ocr,rcr,C4,l2e,tcr,acr,fW,ncr,scr,lcr,w4,i2e,icr,dcr,gW,ccr,mcr,fcr,A4,d2e,gcr,hcr,hW,ucr,pcr,_cr,y4,Iqe,Vd,L4,c2e,H8,bcr,m2e,vcr,qqe,Ko,U8,Fcr,Xd,Tcr,uW,Mcr,Ecr,pW,Ccr,wcr,Acr,J8,ycr,f2e,Lcr,xcr,$cr,Lt,Y8,kcr,g2e,Scr,Rcr,zd,Pcr,h2e,Bcr,Icr,_W,qcr,Ncr,jcr,x4,Dcr,Ar,K8,Gcr,u2e,Ocr,Vcr,Za,Xcr,p2e,zcr,Wcr,_2e,Qcr,Hcr,b2e,Ucr,Jcr,Ycr,se,$4,v2e,Kcr,Zcr,bW,emr,omr,rmr,k4,F2e,tmr,amr,vW,nmr,smr,lmr,S4,T2e,imr,dmr,FW,cmr,mmr,fmr,R4,M2e,gmr,hmr,TW,umr,pmr,_mr,P4,E2e,bmr,vmr,MW,Fmr,Tmr,Mmr,B4,C2e,Emr,Cmr,EW,wmr,Amr,ymr,I4,w2e,Lmr,xmr,CW,$mr,kmr,Smr,q4,A2e,Rmr,Pmr,wW,Bmr,Imr,qmr,N4,y2e,Nmr,jmr,AW,Dmr,Gmr,Omr,j4,L2e,Vmr,Xmr,yW,zmr,Wmr,Qmr,D4,x2e,Hmr,Umr,LW,Jmr,Ymr,Kmr,G4,$2e,Zmr,efr,xW,ofr,rfr,tfr,O4,k2e,afr,nfr,$W,sfr,lfr,ifr,V4,S2e,dfr,cfr,kW,mfr,ffr,gfr,X4,R2e,hfr,ufr,SW,pfr,_fr,bfr,z4,P2e,vfr,Ffr,RW,Tfr,Mfr,Efr,W4,B2e,Cfr,wfr,PW,Afr,yfr,Lfr,Q4,I2e,xfr,$fr,BW,kfr,Sfr,Rfr,H4,q2e,Pfr,Bfr,IW,Ifr,qfr,Nfr,U4,N2e,jfr,Dfr,qW,Gfr,Ofr,Vfr,J4,j2e,Xfr,zfr,NW,Wfr,Qfr,Hfr,Y4,D2e,Ufr,Jfr,jW,Yfr,Kfr,Zfr,K4,G2e,egr,ogr,DW,rgr,tgr,agr,Z4,Nqe,Wd,eE,O2e,Z8,ngr,V2e,sgr,jqe,Zo,ex,lgr,Qd,igr,GW,dgr,cgr,OW,mgr,fgr,ggr,ox,hgr,X2e,ugr,pgr,_gr,xt,rx,bgr,z2e,vgr,Fgr,Hd,Tgr,W2e,Mgr,Egr,VW,Cgr,wgr,Agr,oE,ygr,yr,tx,Lgr,Q2e,xgr,$gr,en,kgr,H2e,Sgr,Rgr,U2e,Pgr,Bgr,J2e,Igr,qgr,Ngr,Te,rE,Y2e,jgr,Dgr,XW,Ggr,Ogr,Vgr,tE,K2e,Xgr,zgr,zW,Wgr,Qgr,Hgr,aE,Z2e,Ugr,Jgr,WW,Ygr,Kgr,Zgr,nE,eve,ehr,ohr,QW,rhr,thr,ahr,sE,ove,nhr,shr,HW,lhr,ihr,dhr,lE,rve,chr,mhr,UW,fhr,ghr,hhr,iE,tve,uhr,phr,JW,_hr,bhr,vhr,dE,ave,Fhr,Thr,YW,Mhr,Ehr,Chr,cE,nve,whr,Ahr,KW,yhr,Lhr,xhr,mE,sve,$hr,khr,ZW,Shr,Rhr,Phr,fE,lve,Bhr,Ihr,eQ,qhr,Nhr,jhr,gE,ive,Dhr,Ghr,oQ,Ohr,Vhr,Xhr,hE,Dqe,Ud,uE,dve,ax,zhr,cve,Whr,Gqe,er,nx,Qhr,Jd,Hhr,rQ,Uhr,Jhr,tQ,Yhr,Khr,Zhr,sx,eur,mve,our,rur,tur,$t,lx,aur,fve,nur,sur,Yd,lur,gve,iur,dur,aQ,cur,mur,fur,pE,gur,Lr,ix,hur,hve,uur,pur,on,_ur,uve,bur,vur,pve,Fur,Tur,_ve,Mur,Eur,Cur,rn,_E,bve,wur,Aur,nQ,yur,Lur,xur,bE,vve,$ur,kur,sQ,Sur,Rur,Pur,vE,Fve,Bur,Iur,lQ,qur,Nur,jur,FE,Tve,Dur,Gur,iQ,Our,Vur,Xur,TE,Oqe,Kd,ME,Mve,dx,zur,Eve,Wur,Vqe,or,cx,Qur,Zd,Hur,dQ,Uur,Jur,cQ,Yur,Kur,Zur,mx,epr,Cve,opr,rpr,tpr,kt,fx,apr,wve,npr,spr,ec,lpr,Ave,ipr,dpr,mQ,cpr,mpr,fpr,EE,gpr,xr,gx,hpr,yve,upr,ppr,tn,_pr,Lve,bpr,vpr,xve,Fpr,Tpr,$ve,Mpr,Epr,Cpr,ie,CE,kve,wpr,Apr,fQ,ypr,Lpr,xpr,wE,Sve,$pr,kpr,gQ,Spr,Rpr,Ppr,AE,Rve,Bpr,Ipr,hQ,qpr,Npr,jpr,yE,Pve,Dpr,Gpr,uQ,Opr,Vpr,Xpr,LE,Bve,zpr,Wpr,pQ,Qpr,Hpr,Upr,xE,Ive,Jpr,Ypr,_Q,Kpr,Zpr,e_r,$E,qve,o_r,r_r,bQ,t_r,a_r,n_r,kE,Nve,s_r,l_r,vQ,i_r,d_r,c_r,SE,jve,m_r,f_r,FQ,g_r,h_r,u_r,RE,Dve,p_r,__r,TQ,b_r,v_r,F_r,PE,Gve,T_r,M_r,MQ,E_r,C_r,w_r,BE,Ove,A_r,y_r,EQ,L_r,x_r,$_r,IE,Vve,k_r,S_r,CQ,R_r,P_r,B_r,qE,Xve,I_r,q_r,wQ,N_r,j_r,D_r,NE,zve,G_r,O_r,AQ,V_r,X_r,z_r,jE,Wve,W_r,Q_r,yQ,H_r,U_r,J_r,DE,Qve,Y_r,K_r,LQ,Z_r,ebr,obr,GE,Hve,rbr,tbr,xQ,abr,nbr,sbr,OE,Uve,lbr,ibr,$Q,dbr,cbr,mbr,VE,Jve,fbr,gbr,kQ,hbr,ubr,pbr,XE,Xqe,oc,zE,Yve,hx,_br,Kve,bbr,zqe,rr,ux,vbr,rc,Fbr,SQ,Tbr,Mbr,RQ,Ebr,Cbr,wbr,px,Abr,Zve,ybr,Lbr,xbr,St,_x,$br,eFe,kbr,Sbr,tc,Rbr,oFe,Pbr,Bbr,PQ,Ibr,qbr,Nbr,WE,jbr,$r,bx,Dbr,rFe,Gbr,Obr,an,Vbr,tFe,Xbr,zbr,aFe,Wbr,Qbr,nFe,Hbr,Ubr,Jbr,ye,QE,sFe,Ybr,Kbr,BQ,Zbr,e2r,o2r,HE,lFe,r2r,t2r,IQ,a2r,n2r,s2r,UE,iFe,l2r,i2r,qQ,d2r,c2r,m2r,JE,dFe,f2r,g2r,NQ,h2r,u2r,p2r,YE,cFe,_2r,b2r,jQ,v2r,F2r,T2r,KE,mFe,M2r,E2r,DQ,C2r,w2r,A2r,ZE,fFe,y2r,L2r,GQ,x2r,$2r,k2r,eC,gFe,S2r,R2r,OQ,P2r,B2r,I2r,oC,hFe,q2r,N2r,VQ,j2r,D2r,G2r,rC,uFe,O2r,V2r,XQ,X2r,z2r,W2r,tC,Wqe,ac,aC,pFe,vx,Q2r,_Fe,H2r,Qqe,tr,Fx,U2r,nc,J2r,zQ,Y2r,K2r,WQ,Z2r,evr,ovr,Tx,rvr,bFe,tvr,avr,nvr,Rt,Mx,svr,vFe,lvr,ivr,sc,dvr,FFe,cvr,mvr,QQ,fvr,gvr,hvr,nC,uvr,kr,Ex,pvr,TFe,_vr,bvr,nn,vvr,MFe,Fvr,Tvr,EFe,Mvr,Evr,CFe,Cvr,wvr,Avr,ee,sC,wFe,yvr,Lvr,HQ,xvr,$vr,kvr,lC,AFe,Svr,Rvr,UQ,Pvr,Bvr,Ivr,iC,yFe,qvr,Nvr,JQ,jvr,Dvr,Gvr,dC,LFe,Ovr,Vvr,YQ,Xvr,zvr,Wvr,cC,xFe,Qvr,Hvr,KQ,Uvr,Jvr,Yvr,mC,$Fe,Kvr,Zvr,ZQ,eFr,oFr,rFr,fC,kFe,tFr,aFr,eH,nFr,sFr,lFr,gC,SFe,iFr,dFr,oH,cFr,mFr,fFr,hC,RFe,gFr,hFr,rH,uFr,pFr,_Fr,uC,PFe,bFr,vFr,tH,FFr,TFr,MFr,pC,BFe,EFr,CFr,aH,wFr,AFr,yFr,_C,IFe,LFr,xFr,nH,$Fr,kFr,SFr,bC,qFe,RFr,PFr,sH,BFr,IFr,qFr,vC,NFe,NFr,jFr,lH,DFr,GFr,OFr,FC,jFe,VFr,XFr,iH,zFr,WFr,QFr,TC,DFe,HFr,UFr,dH,JFr,YFr,KFr,MC,GFe,ZFr,e1r,cH,o1r,r1r,t1r,EC,OFe,a1r,n1r,mH,s1r,l1r,i1r,CC,VFe,d1r,c1r,fH,m1r,f1r,g1r,wC,XFe,h1r,u1r,gH,p1r,_1r,b1r,AC,zFe,v1r,F1r,hH,T1r,M1r,E1r,yC,WFe,C1r,w1r,uH,A1r,y1r,L1r,LC,QFe,x1r,$1r,pH,k1r,S1r,R1r,xC,HFe,P1r,B1r,_H,I1r,q1r,N1r,$C,UFe,j1r,D1r,bH,G1r,O1r,V1r,kC,JFe,X1r,z1r,vH,W1r,Q1r,H1r,SC,Hqe,lc,RC,YFe,Cx,U1r,KFe,J1r,Uqe,ar,wx,Y1r,ic,K1r,FH,Z1r,eTr,TH,oTr,rTr,tTr,Ax,aTr,ZFe,nTr,sTr,lTr,Pt,yx,iTr,e1e,dTr,cTr,dc,mTr,o1e,fTr,gTr,MH,hTr,uTr,pTr,PC,_Tr,Sr,Lx,bTr,r1e,vTr,FTr,sn,TTr,t1e,MTr,ETr,a1e,CTr,wTr,n1e,ATr,yTr,LTr,he,BC,s1e,xTr,$Tr,EH,kTr,STr,RTr,IC,l1e,PTr,BTr,CH,ITr,qTr,NTr,qC,i1e,jTr,DTr,wH,GTr,OTr,VTr,NC,d1e,XTr,zTr,AH,WTr,QTr,HTr,jC,c1e,UTr,JTr,yH,YTr,KTr,ZTr,DC,m1e,eMr,oMr,LH,rMr,tMr,aMr,GC,f1e,nMr,sMr,xH,lMr,iMr,dMr,OC,g1e,cMr,mMr,$H,fMr,gMr,hMr,VC,h1e,uMr,pMr,kH,_Mr,bMr,vMr,XC,u1e,FMr,TMr,SH,MMr,EMr,CMr,zC,p1e,wMr,AMr,RH,yMr,LMr,xMr,WC,_1e,$Mr,kMr,PH,SMr,RMr,PMr,QC,b1e,BMr,IMr,BH,qMr,NMr,jMr,HC,v1e,DMr,GMr,IH,OMr,VMr,XMr,UC,F1e,zMr,WMr,qH,QMr,HMr,UMr,JC,T1e,JMr,YMr,NH,KMr,ZMr,e4r,YC,M1e,o4r,r4r,jH,t4r,a4r,n4r,KC,Jqe,cc,ZC,E1e,xx,s4r,C1e,l4r,Yqe,nr,$x,i4r,mc,d4r,DH,c4r,m4r,GH,f4r,g4r,h4r,kx,u4r,w1e,p4r,_4r,b4r,Bt,Sx,v4r,A1e,F4r,T4r,fc,M4r,y1e,E4r,C4r,OH,w4r,A4r,y4r,e5,L4r,Rr,Rx,x4r,L1e,$4r,k4r,ln,S4r,x1e,R4r,P4r,$1e,B4r,I4r,k1e,q4r,N4r,j4r,Px,o5,S1e,D4r,G4r,VH,O4r,V4r,X4r,r5,R1e,z4r,W4r,XH,Q4r,H4r,U4r,t5,Kqe,gc,a5,P1e,Bx,J4r,B1e,Y4r,Zqe,sr,Ix,K4r,hc,Z4r,zH,eEr,oEr,WH,rEr,tEr,aEr,qx,nEr,I1e,sEr,lEr,iEr,It,Nx,dEr,q1e,cEr,mEr,uc,fEr,N1e,gEr,hEr,QH,uEr,pEr,_Er,n5,bEr,Pr,jx,vEr,j1e,FEr,TEr,dn,MEr,D1e,EEr,CEr,G1e,wEr,AEr,O1e,yEr,LEr,xEr,V1e,s5,X1e,$Er,kEr,HH,SEr,REr,PEr,l5,eNe,pc,i5,z1e,Dx,BEr,W1e,IEr,oNe,lr,Gx,qEr,_c,NEr,UH,jEr,DEr,JH,GEr,OEr,VEr,Ox,XEr,Q1e,zEr,WEr,QEr,qt,Vx,HEr,H1e,UEr,JEr,bc,YEr,U1e,KEr,ZEr,YH,eCr,oCr,rCr,d5,tCr,Br,Xx,aCr,J1e,nCr,sCr,cn,lCr,Y1e,iCr,dCr,K1e,cCr,mCr,Z1e,fCr,gCr,hCr,de,c5,eTe,uCr,pCr,KH,_Cr,bCr,vCr,m5,oTe,FCr,TCr,ZH,MCr,ECr,CCr,f5,rTe,wCr,ACr,eU,yCr,LCr,xCr,g5,tTe,$Cr,kCr,oU,SCr,RCr,PCr,h5,aTe,BCr,ICr,rU,qCr,NCr,jCr,u5,nTe,DCr,GCr,tU,OCr,VCr,XCr,p5,sTe,zCr,WCr,aU,QCr,HCr,UCr,_5,lTe,JCr,YCr,nU,KCr,ZCr,e5r,b5,iTe,o5r,r5r,sU,t5r,a5r,n5r,v5,dTe,s5r,l5r,lU,i5r,d5r,c5r,F5,cTe,m5r,f5r,iU,g5r,h5r,u5r,T5,mTe,p5r,_5r,dU,b5r,v5r,F5r,M5,fTe,T5r,M5r,cU,E5r,C5r,w5r,E5,gTe,A5r,y5r,mU,L5r,x5r,$5r,C5,hTe,k5r,S5r,fU,R5r,P5r,B5r,w5,uTe,I5r,q5r,gU,N5r,j5r,D5r,A5,pTe,G5r,O5r,hU,V5r,X5r,z5r,y5,_Te,W5r,Q5r,uU,H5r,U5r,J5r,L5,bTe,Y5r,K5r,pU,Z5r,e3r,o3r,x5,vTe,r3r,t3r,_U,a3r,n3r,s3r,$5,rNe,vc,k5,FTe,zx,l3r,TTe,i3r,tNe,ir,Wx,d3r,Fc,c3r,bU,m3r,f3r,vU,g3r,h3r,u3r,Qx,p3r,MTe,_3r,b3r,v3r,Nt,Hx,F3r,ETe,T3r,M3r,Tc,E3r,CTe,C3r,w3r,FU,A3r,y3r,L3r,S5,x3r,Ir,Ux,$3r,wTe,k3r,S3r,mn,R3r,ATe,P3r,B3r,yTe,I3r,q3r,LTe,N3r,j3r,D3r,ce,R5,xTe,G3r,O3r,TU,V3r,X3r,z3r,P5,$Te,W3r,Q3r,MU,H3r,U3r,J3r,B5,kTe,Y3r,K3r,EU,Z3r,ewr,owr,I5,STe,rwr,twr,CU,awr,nwr,swr,q5,RTe,lwr,iwr,wU,dwr,cwr,mwr,N5,PTe,fwr,gwr,AU,hwr,uwr,pwr,j5,BTe,_wr,bwr,yU,vwr,Fwr,Twr,D5,ITe,Mwr,Ewr,LU,Cwr,wwr,Awr,G5,qTe,ywr,Lwr,xU,xwr,$wr,kwr,O5,NTe,Swr,Rwr,$U,Pwr,Bwr,Iwr,V5,jTe,qwr,Nwr,kU,jwr,Dwr,Gwr,X5,DTe,Owr,Vwr,SU,Xwr,zwr,Wwr,z5,GTe,Qwr,Hwr,RU,Uwr,Jwr,Ywr,W5,OTe,Kwr,Zwr,PU,eAr,oAr,rAr,Q5,VTe,tAr,aAr,BU,nAr,sAr,lAr,H5,XTe,iAr,dAr,IU,cAr,mAr,fAr,U5,zTe,gAr,hAr,qU,uAr,pAr,_Ar,J5,WTe,bAr,vAr,NU,FAr,TAr,MAr,Y5,QTe,EAr,CAr,jU,wAr,AAr,yAr,K5,HTe,LAr,xAr,DU,$Ar,kAr,SAr,Z5,aNe,Mc,e3,UTe,Jx,RAr,JTe,PAr,nNe,dr,Yx,BAr,Ec,IAr,GU,qAr,NAr,OU,jAr,DAr,GAr,Kx,OAr,YTe,VAr,XAr,zAr,jt,Zx,WAr,KTe,QAr,HAr,Cc,UAr,ZTe,JAr,YAr,VU,KAr,ZAr,e6r,o3,o6r,qr,e7,r6r,eMe,t6r,a6r,fn,n6r,oMe,s6r,l6r,rMe,i6r,d6r,tMe,c6r,m6r,f6r,aMe,r3,nMe,g6r,h6r,XU,u6r,p6r,_6r,t3,sNe,wc,a3,sMe,o7,b6r,lMe,v6r,lNe,cr,r7,F6r,Ac,T6r,zU,M6r,E6r,WU,C6r,w6r,A6r,t7,y6r,iMe,L6r,x6r,$6r,Dt,a7,k6r,dMe,S6r,R6r,yc,P6r,cMe,B6r,I6r,QU,q6r,N6r,j6r,n3,D6r,Nr,n7,G6r,mMe,O6r,V6r,gn,X6r,fMe,z6r,W6r,gMe,Q6r,H6r,hMe,U6r,J6r,Y6r,uMe,s3,pMe,K6r,Z6r,HU,e0r,o0r,r0r,l3,iNe,Lc,i3,_Me,s7,t0r,bMe,a0r,dNe,mr,l7,n0r,xc,s0r,UU,l0r,i0r,JU,d0r,c0r,m0r,i7,f0r,vMe,g0r,h0r,u0r,Gt,d7,p0r,FMe,_0r,b0r,$c,v0r,TMe,F0r,T0r,YU,M0r,E0r,C0r,d3,w0r,jr,c7,A0r,MMe,y0r,L0r,hn,x0r,EMe,$0r,k0r,CMe,S0r,R0r,wMe,P0r,B0r,I0r,re,c3,AMe,q0r,N0r,KU,j0r,D0r,G0r,m3,yMe,O0r,V0r,ZU,X0r,z0r,W0r,f3,LMe,Q0r,H0r,eJ,U0r,J0r,Y0r,g3,xMe,K0r,Z0r,oJ,eyr,oyr,ryr,h3,$Me,tyr,ayr,rJ,nyr,syr,lyr,u3,kMe,iyr,dyr,tJ,cyr,myr,fyr,p3,SMe,gyr,hyr,aJ,uyr,pyr,_yr,_3,RMe,byr,vyr,nJ,Fyr,Tyr,Myr,b3,PMe,Eyr,Cyr,sJ,wyr,Ayr,yyr,v3,BMe,Lyr,xyr,lJ,$yr,kyr,Syr,F3,IMe,Ryr,Pyr,iJ,Byr,Iyr,qyr,T3,qMe,Nyr,jyr,dJ,Dyr,Gyr,Oyr,M3,NMe,Vyr,Xyr,cJ,zyr,Wyr,Qyr,E3,jMe,Hyr,Uyr,mJ,Jyr,Yyr,Kyr,C3,DMe,Zyr,eLr,fJ,oLr,rLr,tLr,w3,GMe,aLr,nLr,gJ,sLr,lLr,iLr,A3,OMe,dLr,cLr,hJ,mLr,fLr,gLr,y3,VMe,hLr,uLr,uJ,pLr,_Lr,bLr,L3,XMe,vLr,FLr,pJ,TLr,MLr,ELr,x3,zMe,CLr,wLr,_J,ALr,yLr,LLr,$3,WMe,xLr,$Lr,bJ,kLr,SLr,RLr,k3,QMe,PLr,BLr,vJ,ILr,qLr,NLr,S3,HMe,jLr,DLr,FJ,GLr,OLr,VLr,R3,UMe,XLr,zLr,TJ,WLr,QLr,HLr,P3,JMe,ULr,JLr,MJ,YLr,KLr,ZLr,B3,cNe,kc,I3,YMe,m7,e8r,KMe,o8r,mNe,fr,f7,r8r,Sc,t8r,EJ,a8r,n8r,CJ,s8r,l8r,i8r,g7,d8r,ZMe,c8r,m8r,f8r,Ot,h7,g8r,e4e,h8r,u8r,Rc,p8r,o4e,_8r,b8r,wJ,v8r,F8r,T8r,q3,M8r,Dr,u7,E8r,r4e,C8r,w8r,un,A8r,t4e,y8r,L8r,a4e,x8r,$8r,n4e,k8r,S8r,R8r,Re,N3,s4e,P8r,B8r,AJ,I8r,q8r,N8r,j3,l4e,j8r,D8r,yJ,G8r,O8r,V8r,D3,i4e,X8r,z8r,LJ,W8r,Q8r,H8r,G3,d4e,U8r,J8r,xJ,Y8r,K8r,Z8r,O3,c4e,exr,oxr,$J,rxr,txr,axr,V3,m4e,nxr,sxr,kJ,lxr,ixr,dxr,X3,f4e,cxr,mxr,SJ,fxr,gxr,hxr,z3,g4e,uxr,pxr,RJ,_xr,bxr,vxr,W3,h4e,Fxr,Txr,PJ,Mxr,Exr,Cxr,Q3,fNe,Pc,H3,u4e,p7,wxr,p4e,Axr,gNe,gr,_7,yxr,Bc,Lxr,BJ,xxr,$xr,IJ,kxr,Sxr,Rxr,b7,Pxr,_4e,Bxr,Ixr,qxr,Vt,v7,Nxr,b4e,jxr,Dxr,Ic,Gxr,v4e,Oxr,Vxr,qJ,Xxr,zxr,Wxr,U3,Qxr,Gr,F7,Hxr,F4e,Uxr,Jxr,pn,Yxr,T4e,Kxr,Zxr,M4e,e7r,o7r,E4e,r7r,t7r,a7r,Me,J3,C4e,n7r,s7r,NJ,l7r,i7r,d7r,Y3,w4e,c7r,m7r,jJ,f7r,g7r,h7r,K3,A4e,u7r,p7r,DJ,_7r,b7r,v7r,Z3,y4e,F7r,T7r,GJ,M7r,E7r,C7r,ew,L4e,w7r,A7r,OJ,y7r,L7r,x7r,ow,x4e,$7r,k7r,VJ,S7r,R7r,P7r,rw,$4e,B7r,I7r,XJ,q7r,N7r,j7r,tw,k4e,D7r,G7r,zJ,O7r,V7r,X7r,aw,S4e,z7r,W7r,WJ,Q7r,H7r,U7r,nw,R4e,J7r,Y7r,QJ,K7r,Z7r,e9r,sw,P4e,o9r,r9r,HJ,t9r,a9r,n9r,lw,B4e,s9r,l9r,UJ,i9r,d9r,c9r,iw,hNe,qc,dw,I4e,T7,m9r,q4e,f9r,uNe,hr,M7,g9r,Nc,h9r,JJ,u9r,p9r,YJ,_9r,b9r,v9r,E7,F9r,N4e,T9r,M9r,E9r,Xt,C7,C9r,j4e,w9r,A9r,jc,y9r,D4e,L9r,x9r,KJ,$9r,k9r,S9r,cw,R9r,Or,w7,P9r,G4e,B9r,I9r,_n,q9r,O4e,N9r,j9r,V4e,D9r,G9r,X4e,O9r,V9r,X9r,Le,mw,z4e,z9r,W9r,ZJ,Q9r,H9r,U9r,fw,W4e,J9r,Y9r,eY,K9r,Z9r,e$r,gw,Q4e,o$r,r$r,oY,t$r,a$r,n$r,hw,H4e,s$r,l$r,rY,i$r,d$r,c$r,uw,U4e,m$r,f$r,tY,g$r,h$r,u$r,pw,J4e,p$r,_$r,aY,b$r,v$r,F$r,_w,Y4e,T$r,M$r,nY,E$r,C$r,w$r,bw,K4e,A$r,y$r,sY,L$r,x$r,$$r,vw,Z4e,k$r,S$r,lY,R$r,P$r,B$r,Fw,eEe,I$r,q$r,iY,N$r,j$r,D$r,Tw,pNe,Dc,Mw,oEe,A7,G$r,rEe,O$r,_Ne,ur,y7,V$r,Gc,X$r,dY,z$r,W$r,cY,Q$r,H$r,U$r,L7,J$r,tEe,Y$r,K$r,Z$r,zt,x7,ekr,aEe,okr,rkr,Oc,tkr,nEe,akr,nkr,mY,skr,lkr,ikr,Ew,dkr,Vr,$7,ckr,sEe,mkr,fkr,bn,gkr,lEe,hkr,ukr,iEe,pkr,_kr,dEe,bkr,vkr,Fkr,Pe,Cw,cEe,Tkr,Mkr,fY,Ekr,Ckr,wkr,ww,mEe,Akr,ykr,gY,Lkr,xkr,$kr,Aw,fEe,kkr,Skr,hY,Rkr,Pkr,Bkr,yw,gEe,Ikr,qkr,uY,Nkr,jkr,Dkr,Lw,hEe,Gkr,Okr,pY,Vkr,Xkr,zkr,xw,uEe,Wkr,Qkr,_Y,Hkr,Ukr,Jkr,$w,pEe,Ykr,Kkr,bY,Zkr,eSr,oSr,kw,_Ee,rSr,tSr,vY,aSr,nSr,sSr,Sw,bEe,lSr,iSr,FY,dSr,cSr,mSr,Rw,bNe,Vc,Pw,vEe,k7,fSr,FEe,gSr,vNe,pr,S7,hSr,Xc,uSr,TY,pSr,_Sr,MY,bSr,vSr,FSr,R7,TSr,TEe,MSr,ESr,CSr,Wt,P7,wSr,MEe,ASr,ySr,zc,LSr,EEe,xSr,$Sr,EY,kSr,SSr,RSr,Bw,PSr,Xr,B7,BSr,CEe,ISr,qSr,vn,NSr,wEe,jSr,DSr,AEe,GSr,OSr,yEe,VSr,XSr,zSr,xe,Iw,LEe,WSr,QSr,CY,HSr,USr,JSr,qw,xEe,YSr,KSr,wY,ZSr,eRr,oRr,Nw,$Ee,rRr,tRr,AY,aRr,nRr,sRr,jw,kEe,lRr,iRr,yY,dRr,cRr,mRr,Dw,SEe,fRr,gRr,LY,hRr,uRr,pRr,Gw,REe,_Rr,bRr,xY,vRr,FRr,TRr,Ow,PEe,MRr,ERr,$Y,CRr,wRr,ARr,Vw,BEe,yRr,LRr,kY,xRr,$Rr,kRr,Xw,IEe,SRr,RRr,SY,PRr,BRr,IRr,zw,qEe,qRr,NRr,RY,jRr,DRr,GRr,Ww,FNe,Wc,Qw,NEe,I7,ORr,jEe,VRr,TNe,_r,q7,XRr,Qc,zRr,PY,WRr,QRr,BY,HRr,URr,JRr,N7,YRr,DEe,KRr,ZRr,ePr,Qt,j7,oPr,GEe,rPr,tPr,Hc,aPr,OEe,nPr,sPr,IY,lPr,iPr,dPr,Hw,cPr,zr,D7,mPr,VEe,fPr,gPr,Fn,hPr,XEe,uPr,pPr,zEe,_Pr,bPr,WEe,vPr,FPr,TPr,$e,Uw,QEe,MPr,EPr,qY,CPr,wPr,APr,Jw,HEe,yPr,LPr,NY,xPr,$Pr,kPr,Yw,UEe,SPr,RPr,jY,PPr,BPr,IPr,Kw,JEe,qPr,NPr,DY,jPr,DPr,GPr,Zw,YEe,OPr,VPr,GY,XPr,zPr,WPr,eA,KEe,QPr,HPr,OY,UPr,JPr,YPr,oA,ZEe,KPr,ZPr,VY,eBr,oBr,rBr,rA,eCe,tBr,aBr,XY,nBr,sBr,lBr,tA,oCe,iBr,dBr,zY,cBr,mBr,fBr,aA,rCe,gBr,hBr,WY,uBr,pBr,_Br,nA,MNe,Uc,sA,tCe,G7,bBr,aCe,vBr,ENe,br,O7,FBr,Jc,TBr,QY,MBr,EBr,HY,CBr,wBr,ABr,V7,yBr,nCe,LBr,xBr,$Br,Ht,X7,kBr,sCe,SBr,RBr,Yc,PBr,lCe,BBr,IBr,UY,qBr,NBr,jBr,lA,DBr,Wr,z7,GBr,iCe,OBr,VBr,Tn,XBr,dCe,zBr,WBr,cCe,QBr,HBr,mCe,UBr,JBr,YBr,De,iA,fCe,KBr,ZBr,JY,eIr,oIr,rIr,dA,gCe,tIr,aIr,YY,nIr,sIr,lIr,cA,hCe,iIr,dIr,KY,cIr,mIr,fIr,mA,uCe,gIr,hIr,ZY,uIr,pIr,_Ir,fA,pCe,bIr,vIr,eK,FIr,TIr,MIr,gA,_Ce,EIr,CIr,oK,wIr,AIr,yIr,hA,bCe,LIr,xIr,rK,$Ir,kIr,SIr,uA,vCe,RIr,PIr,tK,BIr,IIr,qIr,pA,CNe,Kc,_A,FCe,W7,NIr,TCe,jIr,wNe,vr,Q7,DIr,Zc,GIr,aK,OIr,VIr,nK,XIr,zIr,WIr,H7,QIr,MCe,HIr,UIr,JIr,Ut,U7,YIr,ECe,KIr,ZIr,em,eqr,CCe,oqr,rqr,sK,tqr,aqr,nqr,bA,sqr,Qr,J7,lqr,wCe,iqr,dqr,Mn,cqr,ACe,mqr,fqr,yCe,gqr,hqr,LCe,uqr,pqr,_qr,Ge,vA,xCe,bqr,vqr,lK,Fqr,Tqr,Mqr,FA,$Ce,Eqr,Cqr,iK,wqr,Aqr,yqr,TA,kCe,Lqr,xqr,dK,$qr,kqr,Sqr,MA,SCe,Rqr,Pqr,cK,Bqr,Iqr,qqr,EA,RCe,Nqr,jqr,mK,Dqr,Gqr,Oqr,CA,PCe,Vqr,Xqr,fK,zqr,Wqr,Qqr,wA,BCe,Hqr,Uqr,gK,Jqr,Yqr,Kqr,AA,ICe,Zqr,eNr,hK,oNr,rNr,tNr,yA,ANe,om,LA,qCe,Y7,aNr,NCe,nNr,yNe,Fr,K7,sNr,rm,lNr,uK,iNr,dNr,pK,cNr,mNr,fNr,Z7,gNr,jCe,hNr,uNr,pNr,Jt,e9,_Nr,DCe,bNr,vNr,tm,FNr,GCe,TNr,MNr,_K,ENr,CNr,wNr,xA,ANr,Hr,o9,yNr,OCe,LNr,xNr,En,$Nr,VCe,kNr,SNr,XCe,RNr,PNr,zCe,BNr,INr,qNr,WCe,$A,QCe,NNr,jNr,bK,DNr,GNr,ONr,kA,LNe,am,SA,HCe,r9,VNr,UCe,XNr,xNe,Tr,t9,zNr,nm,WNr,vK,QNr,HNr,FK,UNr,JNr,YNr,a9,KNr,JCe,ZNr,ejr,ojr,Yt,n9,rjr,YCe,tjr,ajr,sm,njr,KCe,sjr,ljr,TK,ijr,djr,cjr,RA,mjr,Ur,s9,fjr,ZCe,gjr,hjr,Cn,ujr,e5e,pjr,_jr,o5e,bjr,vjr,r5e,Fjr,Tjr,Mjr,l9,PA,t5e,Ejr,Cjr,MK,wjr,Ajr,yjr,BA,a5e,Ljr,xjr,EK,$jr,kjr,Sjr,IA,$Ne,lm,qA,n5e,i9,Rjr,s5e,Pjr,kNe,Mr,d9,Bjr,im,Ijr,CK,qjr,Njr,wK,jjr,Djr,Gjr,c9,Ojr,l5e,Vjr,Xjr,zjr,Kt,m9,Wjr,i5e,Qjr,Hjr,dm,Ujr,d5e,Jjr,Yjr,AK,Kjr,Zjr,eDr,NA,oDr,Jr,f9,rDr,c5e,tDr,aDr,wn,nDr,m5e,sDr,lDr,f5e,iDr,dDr,g5e,cDr,mDr,fDr,h5e,jA,u5e,gDr,hDr,yK,uDr,pDr,_Dr,DA,SNe;return d=new oe({}),Ca=new P({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),iy=new oe({}),dy=new P({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),bm=new bDr({props:{warning:!0,$$slots:{default:[h8t]},$$scope:{ctx:L}}}),cy=new oe({}),my=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/configuration_auto.py#L573"}}),hy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/configuration_auto.py#L596"}}),bg=new B({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[u8t]},$$scope:{ctx:L}}}),uy=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/configuration_auto.py#L719"}}),py=new oe({}),_y=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/tokenization_auto.py#L388"}}),Fy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/tokenization_auto.py#L402"}}),Kg=new B({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[p8t]},$$scope:{ctx:L}}}),Ty=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/tokenization_auto.py#L598"}}),My=new oe({}),Ey=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/feature_extraction_auto.py#L187"}}),Ay=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/main/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/feature_extraction_auto.py#L201"}}),yh=new bDr({props:{$$slots:{default:[_8t]},$$scope:{ctx:L}}}),Lh=new B({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[b8t]},$$scope:{ctx:L}}}),yy=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/feature_extraction_auto.py#L328"}}),Ly=new oe({}),xy=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/processing_auto.py#L87"}}),Sy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/processing_auto.py#L101"}}),Qh=new bDr({props:{$$slots:{default:[v8t]},$$scope:{ctx:L}}}),Hh=new B({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[F8t]},$$scope:{ctx:L}}}),Ry=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/processing_auto.py#L254"}}),Py=new oe({}),By=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L726"}}),qy=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaModel">FlavaModel</a> (Flava model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTModel">OPTModel</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel">Wav2Vec2ConformerModel</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Yh=new B({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[T8t]},$$scope:{ctx:L}}}),Ny=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Op=new B({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[M8t]},$$scope:{ctx:L}}}),jy=new oe({}),Dy=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L733"}}),Oy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaConfig">FlavaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flava#transformers.FlavaForPreTraining">FlavaForPreTraining</a> (Flava model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForPreTraining">SplinterForPreTraining</a> (Splinter model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining">Wav2Vec2ConformerForPreTraining</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Xp=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[E8t]},$$scope:{ctx:L}}}),Vy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),P_=new B({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[C8t]},$$scope:{ctx:L}}}),Xy=new oe({}),zy=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L748"}}),Qy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig">OPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/opt#transformers.OPTForCausalLM">OPTForCausalLM</a> (OPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),I_=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[w8t]},$$scope:{ctx:L}}}),Hy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Fb=new B({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[A8t]},$$scope:{ctx:L}}}),Uy=new oe({}),Jy=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L755"}}),Ky=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Mb=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[y8t]},$$scope:{ctx:L}}}),Zy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),n2=new B({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[L8t]},$$scope:{ctx:L}}}),eL=new oe({}),oL=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L762"}}),tL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),l2=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[x8t]},$$scope:{ctx:L}}}),aL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),w2=new B({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[$8t]},$$scope:{ctx:L}}}),nL=new oe({}),sL=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L771"}}),iL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),y2=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[k8t]},$$scope:{ctx:L}}}),dL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Tv=new B({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[S8t]},$$scope:{ctx:L}}}),cL=new oe({}),mL=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L805"}}),gL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Ev=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[R8t]},$$scope:{ctx:L}}}),hL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),eF=new B({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[P8t]},$$scope:{ctx:L}}}),uL=new oe({}),pL=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L812"}}),bL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),rF=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[B8t]},$$scope:{ctx:L}}}),vL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),dF=new B({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[I8t]},$$scope:{ctx:L}}}),FL=new oe({}),TL=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L798"}}),EL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),mF=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[q8t]},$$scope:{ctx:L}}}),CL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),WF=new B({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[N8t]},$$scope:{ctx:L}}}),wL=new oe({}),AL=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L780"}}),LL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),HF=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[j8t]},$$scope:{ctx:L}}}),xL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),B1=new B({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[D8t]},$$scope:{ctx:L}}}),$L=new oe({}),kL=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L787"}}),RL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),q1=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[G8t]},$$scope:{ctx:L}}}),PL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),D1=new B({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[O8t]},$$scope:{ctx:L}}}),BL=new oe({}),IL=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L821"}}),NL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/main/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),O1=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[V8t]},$$scope:{ctx:L}}}),jL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),oT=new B({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[X8t]},$$scope:{ctx:L}}}),DL=new oe({}),GL=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L860"}}),VL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),tT=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[z8t]},$$scope:{ctx:L}}}),XL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),sT=new B({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[W8t]},$$scope:{ctx:L}}}),zL=new oe({}),WL=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L867"}}),HL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification">Wav2Vec2ConformerForSequenceClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),iT=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[Q8t]},$$scope:{ctx:L}}}),UL=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),vT=new B({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[H8t]},$$scope:{ctx:L}}}),JL=new oe({}),YL=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L890"}}),ZL=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification">Wav2Vec2ConformerForAudioFrameClassification</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),TT=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[U8t]},$$scope:{ctx:L}}}),e8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),LT=new B({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[J8t]},$$scope:{ctx:L}}}),o8=new oe({}),r8=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L874"}}),a8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC">Wav2Vec2ConformerForCTC</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),$T=new B({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[Y8t]},$$scope:{ctx:L}}}),n8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),GT=new B({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[K8t]},$$scope:{ctx:L}}}),s8=new oe({}),l8=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L881"}}),d8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),VT=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[Z8t]},$$scope:{ctx:L}}}),c8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),QT=new B({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[ext]},$$scope:{ctx:L}}}),f8=new oe({}),g8=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L899"}}),u8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig">Wav2Vec2ConformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector">Wav2Vec2ConformerForXVector</a> (Wav2Vec2-Conformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),UT=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[oxt]},$$scope:{ctx:L}}}),p8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),rM=new B({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[rxt]},$$scope:{ctx:L}}}),_8=new oe({}),b8=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L906"}}),F8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),aM=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[txt]},$$scope:{ctx:L}}}),T8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),dM=new B({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[axt]},$$scope:{ctx:L}}}),M8=new oe({}),E8=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L853"}}),w8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),mM=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[nxt]},$$scope:{ctx:L}}}),A8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),uM=new B({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[sxt]},$$scope:{ctx:L}}}),L8=new oe({}),x8=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L828"}}),k8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),_M=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[lxt]},$$scope:{ctx:L}}}),S8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),FM=new B({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[ixt]},$$scope:{ctx:L}}}),R8=new oe({}),P8=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L835"}}),I8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),MM=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[dxt]},$$scope:{ctx:L}}}),q8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),LM=new B({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[cxt]},$$scope:{ctx:L}}}),N8=new oe({}),j8=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L844"}}),G8=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),$M=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[mxt]},$$scope:{ctx:L}}}),O8=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),RM=new B({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[fxt]},$$scope:{ctx:L}}}),V8=new oe({}),X8=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L394"}}),W8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.TFSwinModel">TFSwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),BM=new B({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[gxt]},$$scope:{ctx:L}}}),Q8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),y4=new B({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[hxt]},$$scope:{ctx:L}}}),H8=new oe({}),U8=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L401"}}),Y8=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),x4=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[uxt]},$$scope:{ctx:L}}}),K8=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Z4=new B({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[pxt]},$$scope:{ctx:L}}}),Z8=new oe({}),ex=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L416"}}),rx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),oE=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[_xt]},$$scope:{ctx:L}}}),tx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),hE=new B({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[bxt]},$$scope:{ctx:L}}}),ax=new oe({}),nx=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L432"}}),lx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.TFSwinForImageClassification">TFSwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),pE=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[vxt]},$$scope:{ctx:L}}}),ix=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),TE=new B({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[Fxt]},$$scope:{ctx:L}}}),dx=new oe({}),cx=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L448"}}),fx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),EE=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[Txt]},$$scope:{ctx:L}}}),gx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),XE=new B({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[Mxt]},$$scope:{ctx:L}}}),hx=new oe({}),ux=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L455"}}),_x=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),WE=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[Ext]},$$scope:{ctx:L}}}),bx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),tC=new B({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[Cxt]},$$scope:{ctx:L}}}),vx=new oe({}),Fx=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L464"}}),Mx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),nC=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[wxt]},$$scope:{ctx:L}}}),Ex=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),SC=new B({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[Axt]},$$scope:{ctx:L}}}),Cx=new oe({}),wx=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L500"}}),yx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),PC=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[yxt]},$$scope:{ctx:L}}}),Lx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),KC=new B({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[Lxt]},$$scope:{ctx:L}}}),xx=new oe({}),$x=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L507"}}),Sx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),e5=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[xxt]},$$scope:{ctx:L}}}),Rx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),t5=new B({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[$xt]},$$scope:{ctx:L}}}),Bx=new oe({}),Ix=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L480"}}),Nx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),n5=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[kxt]},$$scope:{ctx:L}}}),jx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),l5=new B({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[Sxt]},$$scope:{ctx:L}}}),Dx=new oe({}),Gx=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L491"}}),Vx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),d5=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[Rxt]},$$scope:{ctx:L}}}),Xx=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),$5=new B({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[Pxt]},$$scope:{ctx:L}}}),zx=new oe({}),Wx=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L473"}}),Hx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),S5=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[Bxt]},$$scope:{ctx:L}}}),Ux=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Z5=new B({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[Ixt]},$$scope:{ctx:L}}}),Jx=new oe({}),Yx=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L441"}}),Zx=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),o3=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[qxt]},$$scope:{ctx:L}}}),e7=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),t3=new B({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[Nxt]},$$scope:{ctx:L}}}),o7=new oe({}),r7=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L516"}}),a7=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),n3=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[jxt]},$$scope:{ctx:L}}}),n7=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),l3=new B({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[Dxt]},$$scope:{ctx:L}}}),s7=new oe({}),l7=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L241"}}),d7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),d3=new B({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[Gxt]},$$scope:{ctx:L}}}),c7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),B3=new B({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[Oxt]},$$scope:{ctx:L}}}),m7=new oe({}),f7=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L255"}}),h7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),q3=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[Vxt]},$$scope:{ctx:L}}}),u7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Q3=new B({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[Xxt]},$$scope:{ctx:L}}}),p7=new oe({}),_7=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L248"}}),v7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),U3=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[zxt]},$$scope:{ctx:L}}}),F7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),iw=new B({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[Wxt]},$$scope:{ctx:L}}}),T7=new oe({}),M7=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L262"}}),C7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),cw=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[Qxt]},$$scope:{ctx:L}}}),w7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Tw=new B({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[Hxt]},$$scope:{ctx:L}}}),A7=new oe({}),y7=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L269"}}),x7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Ew=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[Uxt]},$$scope:{ctx:L}}}),$7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Rw=new B({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[Jxt]},$$scope:{ctx:L}}}),k7=new oe({}),S7=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L278"}}),P7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Bw=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[Yxt]},$$scope:{ctx:L}}}),B7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Ww=new B({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[Kxt]},$$scope:{ctx:L}}}),I7=new oe({}),q7=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L287"}}),j7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Hw=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[Zxt]},$$scope:{ctx:L}}}),D7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),nA=new B({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[e7t]},$$scope:{ctx:L}}}),G7=new oe({}),O7=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L294"}}),X7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),lA=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[o7t]},$$scope:{ctx:L}}}),z7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),pA=new B({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[r7t]},$$scope:{ctx:L}}}),W7=new oe({}),Q7=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L303"}}),U7=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),bA=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[t7t]},$$scope:{ctx:L}}}),J7=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),yA=new B({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[a7t]},$$scope:{ctx:L}}}),Y7=new oe({}),K7=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L310"}}),e9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),xA=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[n7t]},$$scope:{ctx:L}}}),o9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),kA=new B({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[s7t]},$$scope:{ctx:L}}}),r9=new oe({}),t9=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L319"}}),n9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),RA=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[l7t]},$$scope:{ctx:L}}}),s9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),IA=new B({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[i7t]},$$scope:{ctx:L}}}),i9=new oe({}),d9=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L328"}}),m9=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),NA=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[d7t]},$$scope:{ctx:L}}}),f9=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),DA=new B({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[c7t]},$$scope:{ctx:L}}}),{c(){g=a("meta"),v=l(),u=a("h1"),f=a("a"),p=a("span"),F(d.$$.fragment),h=l(),Mo=a("span"),ci=o("Auto Classes"),gm=l(),rt=a("p"),mi=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),fi=a("code"),ay=o("from_pretrained()"),hm=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),je=l(),We=a("p"),gi=o("Instantiating one of "),yn=a("a"),ny=o("AutoConfig"),Ln=o(", "),xn=a("a"),sy=o("AutoModel"),hi=o(`, and
`),$n=a("a"),ly=o("AutoTokenizer"),ui=o(" will directly create a class of the relevant architecture. For instance"),um=l(),F(Ca.$$.fragment),Qe=l(),Ae=a("p"),w$=o("will create a model that is an instance of "),pi=a("a"),A$=o("BertModel"),y$=o("."),Eo=l(),wa=a("p"),L$=o("There is one class of "),pm=a("code"),x$=o("AutoModel"),DDe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),xIe=l(),_i=a("h2"),_m=a("a"),Fee=a("span"),F(iy.$$.fragment),GDe=l(),Tee=a("span"),ODe=o("Extending the Auto Classes"),$Ie=l(),kn=a("p"),VDe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Mee=a("code"),XDe=o("NewModel"),zDe=o(", make sure you have a "),Eee=a("code"),WDe=o("NewModelConfig"),QDe=o(` then you can add those to the auto
classes like this:`),kIe=l(),F(dy.$$.fragment),SIe=l(),$$=a("p"),HDe=o("You will then be able to use the auto classes like you would usually do!"),RIe=l(),F(bm.$$.fragment),PIe=l(),bi=a("h2"),vm=a("a"),Cee=a("span"),F(cy.$$.fragment),UDe=l(),wee=a("span"),JDe=o("AutoConfig"),BIe=l(),Co=a("div"),F(my.$$.fragment),YDe=l(),fy=a("p"),KDe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),k$=a("a"),ZDe=o("from_pretrained()"),eGe=o(" class method."),oGe=l(),gy=a("p"),rGe=o("This class cannot be instantiated directly using "),Aee=a("code"),tGe=o("__init__()"),aGe=o(" (throws an error)."),nGe=l(),Er=a("div"),F(hy.$$.fragment),sGe=l(),yee=a("p"),lGe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),iGe=l(),vi=a("p"),dGe=o("The configuration class to instantiate is selected based on the "),Lee=a("code"),cGe=o("model_type"),mGe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),xee=a("code"),fGe=o("pretrained_model_name_or_path"),gGe=o(":"),hGe=l(),A=a("ul"),Fm=a("li"),$ee=a("strong"),uGe=o("albert"),pGe=o(" \u2014 "),S$=a("a"),_Ge=o("AlbertConfig"),bGe=o(" (ALBERT model)"),vGe=l(),Tm=a("li"),kee=a("strong"),FGe=o("bart"),TGe=o(" \u2014 "),R$=a("a"),MGe=o("BartConfig"),EGe=o(" (BART model)"),CGe=l(),Mm=a("li"),See=a("strong"),wGe=o("beit"),AGe=o(" \u2014 "),P$=a("a"),yGe=o("BeitConfig"),LGe=o(" (BEiT model)"),xGe=l(),Em=a("li"),Ree=a("strong"),$Ge=o("bert"),kGe=o(" \u2014 "),B$=a("a"),SGe=o("BertConfig"),RGe=o(" (BERT model)"),PGe=l(),Cm=a("li"),Pee=a("strong"),BGe=o("bert-generation"),IGe=o(" \u2014 "),I$=a("a"),qGe=o("BertGenerationConfig"),NGe=o(" (Bert Generation model)"),jGe=l(),wm=a("li"),Bee=a("strong"),DGe=o("big_bird"),GGe=o(" \u2014 "),q$=a("a"),OGe=o("BigBirdConfig"),VGe=o(" (BigBird model)"),XGe=l(),Am=a("li"),Iee=a("strong"),zGe=o("bigbird_pegasus"),WGe=o(" \u2014 "),N$=a("a"),QGe=o("BigBirdPegasusConfig"),HGe=o(" (BigBirdPegasus model)"),UGe=l(),ym=a("li"),qee=a("strong"),JGe=o("blenderbot"),YGe=o(" \u2014 "),j$=a("a"),KGe=o("BlenderbotConfig"),ZGe=o(" (Blenderbot model)"),eOe=l(),Lm=a("li"),Nee=a("strong"),oOe=o("blenderbot-small"),rOe=o(" \u2014 "),D$=a("a"),tOe=o("BlenderbotSmallConfig"),aOe=o(" (BlenderbotSmall model)"),nOe=l(),xm=a("li"),jee=a("strong"),sOe=o("camembert"),lOe=o(" \u2014 "),G$=a("a"),iOe=o("CamembertConfig"),dOe=o(" (CamemBERT model)"),cOe=l(),$m=a("li"),Dee=a("strong"),mOe=o("canine"),fOe=o(" \u2014 "),O$=a("a"),gOe=o("CanineConfig"),hOe=o(" (Canine model)"),uOe=l(),km=a("li"),Gee=a("strong"),pOe=o("clip"),_Oe=o(" \u2014 "),V$=a("a"),bOe=o("CLIPConfig"),vOe=o(" (CLIP model)"),FOe=l(),Sm=a("li"),Oee=a("strong"),TOe=o("convbert"),MOe=o(" \u2014 "),X$=a("a"),EOe=o("ConvBertConfig"),COe=o(" (ConvBERT model)"),wOe=l(),Rm=a("li"),Vee=a("strong"),AOe=o("convnext"),yOe=o(" \u2014 "),z$=a("a"),LOe=o("ConvNextConfig"),xOe=o(" (ConvNext model)"),$Oe=l(),Pm=a("li"),Xee=a("strong"),kOe=o("ctrl"),SOe=o(" \u2014 "),W$=a("a"),ROe=o("CTRLConfig"),POe=o(" (CTRL model)"),BOe=l(),Bm=a("li"),zee=a("strong"),IOe=o("data2vec-audio"),qOe=o(" \u2014 "),Q$=a("a"),NOe=o("Data2VecAudioConfig"),jOe=o(" (Data2VecAudio model)"),DOe=l(),Im=a("li"),Wee=a("strong"),GOe=o("data2vec-text"),OOe=o(" \u2014 "),H$=a("a"),VOe=o("Data2VecTextConfig"),XOe=o(" (Data2VecText model)"),zOe=l(),qm=a("li"),Qee=a("strong"),WOe=o("data2vec-vision"),QOe=o(" \u2014 "),U$=a("a"),HOe=o("Data2VecVisionConfig"),UOe=o(" (Data2VecVision model)"),JOe=l(),Nm=a("li"),Hee=a("strong"),YOe=o("deberta"),KOe=o(" \u2014 "),J$=a("a"),ZOe=o("DebertaConfig"),eVe=o(" (DeBERTa model)"),oVe=l(),jm=a("li"),Uee=a("strong"),rVe=o("deberta-v2"),tVe=o(" \u2014 "),Y$=a("a"),aVe=o("DebertaV2Config"),nVe=o(" (DeBERTa-v2 model)"),sVe=l(),Dm=a("li"),Jee=a("strong"),lVe=o("decision_transformer"),iVe=o(" \u2014 "),K$=a("a"),dVe=o("DecisionTransformerConfig"),cVe=o(" (Decision Transformer model)"),mVe=l(),Gm=a("li"),Yee=a("strong"),fVe=o("deit"),gVe=o(" \u2014 "),Z$=a("a"),hVe=o("DeiTConfig"),uVe=o(" (DeiT model)"),pVe=l(),Om=a("li"),Kee=a("strong"),_Ve=o("detr"),bVe=o(" \u2014 "),ek=a("a"),vVe=o("DetrConfig"),FVe=o(" (DETR model)"),TVe=l(),Vm=a("li"),Zee=a("strong"),MVe=o("distilbert"),EVe=o(" \u2014 "),ok=a("a"),CVe=o("DistilBertConfig"),wVe=o(" (DistilBERT model)"),AVe=l(),Xm=a("li"),eoe=a("strong"),yVe=o("dpr"),LVe=o(" \u2014 "),rk=a("a"),xVe=o("DPRConfig"),$Ve=o(" (DPR model)"),kVe=l(),zm=a("li"),ooe=a("strong"),SVe=o("dpt"),RVe=o(" \u2014 "),tk=a("a"),PVe=o("DPTConfig"),BVe=o(" (DPT model)"),IVe=l(),Wm=a("li"),roe=a("strong"),qVe=o("electra"),NVe=o(" \u2014 "),ak=a("a"),jVe=o("ElectraConfig"),DVe=o(" (ELECTRA model)"),GVe=l(),Qm=a("li"),toe=a("strong"),OVe=o("encoder-decoder"),VVe=o(" \u2014 "),nk=a("a"),XVe=o("EncoderDecoderConfig"),zVe=o(" (Encoder decoder model)"),WVe=l(),Hm=a("li"),aoe=a("strong"),QVe=o("flaubert"),HVe=o(" \u2014 "),sk=a("a"),UVe=o("FlaubertConfig"),JVe=o(" (FlauBERT model)"),YVe=l(),Um=a("li"),noe=a("strong"),KVe=o("flava"),ZVe=o(" \u2014 "),lk=a("a"),eXe=o("FlavaConfig"),oXe=o(" (Flava model)"),rXe=l(),Jm=a("li"),soe=a("strong"),tXe=o("fnet"),aXe=o(" \u2014 "),ik=a("a"),nXe=o("FNetConfig"),sXe=o(" (FNet model)"),lXe=l(),Ym=a("li"),loe=a("strong"),iXe=o("fsmt"),dXe=o(" \u2014 "),dk=a("a"),cXe=o("FSMTConfig"),mXe=o(" (FairSeq Machine-Translation model)"),fXe=l(),Km=a("li"),ioe=a("strong"),gXe=o("funnel"),hXe=o(" \u2014 "),ck=a("a"),uXe=o("FunnelConfig"),pXe=o(" (Funnel Transformer model)"),_Xe=l(),Zm=a("li"),doe=a("strong"),bXe=o("glpn"),vXe=o(" \u2014 "),mk=a("a"),FXe=o("GLPNConfig"),TXe=o(" (GLPN model)"),MXe=l(),ef=a("li"),coe=a("strong"),EXe=o("gpt2"),CXe=o(" \u2014 "),fk=a("a"),wXe=o("GPT2Config"),AXe=o(" (OpenAI GPT-2 model)"),yXe=l(),of=a("li"),moe=a("strong"),LXe=o("gpt_neo"),xXe=o(" \u2014 "),gk=a("a"),$Xe=o("GPTNeoConfig"),kXe=o(" (GPT Neo model)"),SXe=l(),rf=a("li"),foe=a("strong"),RXe=o("gptj"),PXe=o(" \u2014 "),hk=a("a"),BXe=o("GPTJConfig"),IXe=o(" (GPT-J model)"),qXe=l(),tf=a("li"),goe=a("strong"),NXe=o("hubert"),jXe=o(" \u2014 "),uk=a("a"),DXe=o("HubertConfig"),GXe=o(" (Hubert model)"),OXe=l(),af=a("li"),hoe=a("strong"),VXe=o("ibert"),XXe=o(" \u2014 "),pk=a("a"),zXe=o("IBertConfig"),WXe=o(" (I-BERT model)"),QXe=l(),nf=a("li"),uoe=a("strong"),HXe=o("imagegpt"),UXe=o(" \u2014 "),_k=a("a"),JXe=o("ImageGPTConfig"),YXe=o(" (ImageGPT model)"),KXe=l(),sf=a("li"),poe=a("strong"),ZXe=o("layoutlm"),eze=o(" \u2014 "),bk=a("a"),oze=o("LayoutLMConfig"),rze=o(" (LayoutLM model)"),tze=l(),lf=a("li"),_oe=a("strong"),aze=o("layoutlmv2"),nze=o(" \u2014 "),vk=a("a"),sze=o("LayoutLMv2Config"),lze=o(" (LayoutLMv2 model)"),ize=l(),df=a("li"),boe=a("strong"),dze=o("led"),cze=o(" \u2014 "),Fk=a("a"),mze=o("LEDConfig"),fze=o(" (LED model)"),gze=l(),cf=a("li"),voe=a("strong"),hze=o("longformer"),uze=o(" \u2014 "),Tk=a("a"),pze=o("LongformerConfig"),_ze=o(" (Longformer model)"),bze=l(),mf=a("li"),Foe=a("strong"),vze=o("luke"),Fze=o(" \u2014 "),Mk=a("a"),Tze=o("LukeConfig"),Mze=o(" (LUKE model)"),Eze=l(),ff=a("li"),Toe=a("strong"),Cze=o("lxmert"),wze=o(" \u2014 "),Ek=a("a"),Aze=o("LxmertConfig"),yze=o(" (LXMERT model)"),Lze=l(),gf=a("li"),Moe=a("strong"),xze=o("m2m_100"),$ze=o(" \u2014 "),Ck=a("a"),kze=o("M2M100Config"),Sze=o(" (M2M100 model)"),Rze=l(),hf=a("li"),Eoe=a("strong"),Pze=o("marian"),Bze=o(" \u2014 "),wk=a("a"),Ize=o("MarianConfig"),qze=o(" (Marian model)"),Nze=l(),uf=a("li"),Coe=a("strong"),jze=o("maskformer"),Dze=o(" \u2014 "),Ak=a("a"),Gze=o("MaskFormerConfig"),Oze=o(" (MaskFormer model)"),Vze=l(),pf=a("li"),woe=a("strong"),Xze=o("mbart"),zze=o(" \u2014 "),yk=a("a"),Wze=o("MBartConfig"),Qze=o(" (mBART model)"),Hze=l(),_f=a("li"),Aoe=a("strong"),Uze=o("megatron-bert"),Jze=o(" \u2014 "),Lk=a("a"),Yze=o("MegatronBertConfig"),Kze=o(" (MegatronBert model)"),Zze=l(),bf=a("li"),yoe=a("strong"),eWe=o("mobilebert"),oWe=o(" \u2014 "),xk=a("a"),rWe=o("MobileBertConfig"),tWe=o(" (MobileBERT model)"),aWe=l(),vf=a("li"),Loe=a("strong"),nWe=o("mpnet"),sWe=o(" \u2014 "),$k=a("a"),lWe=o("MPNetConfig"),iWe=o(" (MPNet model)"),dWe=l(),Ff=a("li"),xoe=a("strong"),cWe=o("mt5"),mWe=o(" \u2014 "),kk=a("a"),fWe=o("MT5Config"),gWe=o(" (mT5 model)"),hWe=l(),Tf=a("li"),$oe=a("strong"),uWe=o("nystromformer"),pWe=o(" \u2014 "),Sk=a("a"),_We=o("NystromformerConfig"),bWe=o(" (Nystromformer model)"),vWe=l(),Mf=a("li"),koe=a("strong"),FWe=o("openai-gpt"),TWe=o(" \u2014 "),Rk=a("a"),MWe=o("OpenAIGPTConfig"),EWe=o(" (OpenAI GPT model)"),CWe=l(),Ef=a("li"),Soe=a("strong"),wWe=o("opt"),AWe=o(" \u2014 "),Pk=a("a"),yWe=o("OPTConfig"),LWe=o(" (OPT model)"),xWe=l(),Cf=a("li"),Roe=a("strong"),$We=o("pegasus"),kWe=o(" \u2014 "),Bk=a("a"),SWe=o("PegasusConfig"),RWe=o(" (Pegasus model)"),PWe=l(),wf=a("li"),Poe=a("strong"),BWe=o("perceiver"),IWe=o(" \u2014 "),Ik=a("a"),qWe=o("PerceiverConfig"),NWe=o(" (Perceiver model)"),jWe=l(),Af=a("li"),Boe=a("strong"),DWe=o("plbart"),GWe=o(" \u2014 "),qk=a("a"),OWe=o("PLBartConfig"),VWe=o(" (PLBart model)"),XWe=l(),yf=a("li"),Ioe=a("strong"),zWe=o("poolformer"),WWe=o(" \u2014 "),Nk=a("a"),QWe=o("PoolFormerConfig"),HWe=o(" (PoolFormer model)"),UWe=l(),Lf=a("li"),qoe=a("strong"),JWe=o("prophetnet"),YWe=o(" \u2014 "),jk=a("a"),KWe=o("ProphetNetConfig"),ZWe=o(" (ProphetNet model)"),eQe=l(),xf=a("li"),Noe=a("strong"),oQe=o("qdqbert"),rQe=o(" \u2014 "),Dk=a("a"),tQe=o("QDQBertConfig"),aQe=o(" (QDQBert model)"),nQe=l(),$f=a("li"),joe=a("strong"),sQe=o("rag"),lQe=o(" \u2014 "),Gk=a("a"),iQe=o("RagConfig"),dQe=o(" (RAG model)"),cQe=l(),kf=a("li"),Doe=a("strong"),mQe=o("realm"),fQe=o(" \u2014 "),Ok=a("a"),gQe=o("RealmConfig"),hQe=o(" (Realm model)"),uQe=l(),Sf=a("li"),Goe=a("strong"),pQe=o("reformer"),_Qe=o(" \u2014 "),Vk=a("a"),bQe=o("ReformerConfig"),vQe=o(" (Reformer model)"),FQe=l(),Rf=a("li"),Ooe=a("strong"),TQe=o("regnet"),MQe=o(" \u2014 "),Xk=a("a"),EQe=o("RegNetConfig"),CQe=o(" (RegNet model)"),wQe=l(),Pf=a("li"),Voe=a("strong"),AQe=o("rembert"),yQe=o(" \u2014 "),zk=a("a"),LQe=o("RemBertConfig"),xQe=o(" (RemBERT model)"),$Qe=l(),Bf=a("li"),Xoe=a("strong"),kQe=o("resnet"),SQe=o(" \u2014 "),Wk=a("a"),RQe=o("ResNetConfig"),PQe=o(" (ResNet model)"),BQe=l(),If=a("li"),zoe=a("strong"),IQe=o("retribert"),qQe=o(" \u2014 "),Qk=a("a"),NQe=o("RetriBertConfig"),jQe=o(" (RetriBERT model)"),DQe=l(),qf=a("li"),Woe=a("strong"),GQe=o("roberta"),OQe=o(" \u2014 "),Hk=a("a"),VQe=o("RobertaConfig"),XQe=o(" (RoBERTa model)"),zQe=l(),Nf=a("li"),Qoe=a("strong"),WQe=o("roformer"),QQe=o(" \u2014 "),Uk=a("a"),HQe=o("RoFormerConfig"),UQe=o(" (RoFormer model)"),JQe=l(),jf=a("li"),Hoe=a("strong"),YQe=o("segformer"),KQe=o(" \u2014 "),Jk=a("a"),ZQe=o("SegformerConfig"),eHe=o(" (SegFormer model)"),oHe=l(),Df=a("li"),Uoe=a("strong"),rHe=o("sew"),tHe=o(" \u2014 "),Yk=a("a"),aHe=o("SEWConfig"),nHe=o(" (SEW model)"),sHe=l(),Gf=a("li"),Joe=a("strong"),lHe=o("sew-d"),iHe=o(" \u2014 "),Kk=a("a"),dHe=o("SEWDConfig"),cHe=o(" (SEW-D model)"),mHe=l(),Of=a("li"),Yoe=a("strong"),fHe=o("speech-encoder-decoder"),gHe=o(" \u2014 "),Zk=a("a"),hHe=o("SpeechEncoderDecoderConfig"),uHe=o(" (Speech Encoder decoder model)"),pHe=l(),Vf=a("li"),Koe=a("strong"),_He=o("speech_to_text"),bHe=o(" \u2014 "),eS=a("a"),vHe=o("Speech2TextConfig"),FHe=o(" (Speech2Text model)"),THe=l(),Xf=a("li"),Zoe=a("strong"),MHe=o("speech_to_text_2"),EHe=o(" \u2014 "),oS=a("a"),CHe=o("Speech2Text2Config"),wHe=o(" (Speech2Text2 model)"),AHe=l(),zf=a("li"),ere=a("strong"),yHe=o("splinter"),LHe=o(" \u2014 "),rS=a("a"),xHe=o("SplinterConfig"),$He=o(" (Splinter model)"),kHe=l(),Wf=a("li"),ore=a("strong"),SHe=o("squeezebert"),RHe=o(" \u2014 "),tS=a("a"),PHe=o("SqueezeBertConfig"),BHe=o(" (SqueezeBERT model)"),IHe=l(),Qf=a("li"),rre=a("strong"),qHe=o("swin"),NHe=o(" \u2014 "),aS=a("a"),jHe=o("SwinConfig"),DHe=o(" (Swin model)"),GHe=l(),Hf=a("li"),tre=a("strong"),OHe=o("t5"),VHe=o(" \u2014 "),nS=a("a"),XHe=o("T5Config"),zHe=o(" (T5 model)"),WHe=l(),Uf=a("li"),are=a("strong"),QHe=o("tapas"),HHe=o(" \u2014 "),sS=a("a"),UHe=o("TapasConfig"),JHe=o(" (TAPAS model)"),YHe=l(),Jf=a("li"),nre=a("strong"),KHe=o("transfo-xl"),ZHe=o(" \u2014 "),lS=a("a"),eUe=o("TransfoXLConfig"),oUe=o(" (Transformer-XL model)"),rUe=l(),Yf=a("li"),sre=a("strong"),tUe=o("trocr"),aUe=o(" \u2014 "),iS=a("a"),nUe=o("TrOCRConfig"),sUe=o(" (TrOCR model)"),lUe=l(),Kf=a("li"),lre=a("strong"),iUe=o("unispeech"),dUe=o(" \u2014 "),dS=a("a"),cUe=o("UniSpeechConfig"),mUe=o(" (UniSpeech model)"),fUe=l(),Zf=a("li"),ire=a("strong"),gUe=o("unispeech-sat"),hUe=o(" \u2014 "),cS=a("a"),uUe=o("UniSpeechSatConfig"),pUe=o(" (UniSpeechSat model)"),_Ue=l(),eg=a("li"),dre=a("strong"),bUe=o("van"),vUe=o(" \u2014 "),mS=a("a"),FUe=o("VanConfig"),TUe=o(" (VAN model)"),MUe=l(),og=a("li"),cre=a("strong"),EUe=o("vilt"),CUe=o(" \u2014 "),fS=a("a"),wUe=o("ViltConfig"),AUe=o(" (ViLT model)"),yUe=l(),rg=a("li"),mre=a("strong"),LUe=o("vision-encoder-decoder"),xUe=o(" \u2014 "),gS=a("a"),$Ue=o("VisionEncoderDecoderConfig"),kUe=o(" (Vision Encoder decoder model)"),SUe=l(),tg=a("li"),fre=a("strong"),RUe=o("vision-text-dual-encoder"),PUe=o(" \u2014 "),hS=a("a"),BUe=o("VisionTextDualEncoderConfig"),IUe=o(" (VisionTextDualEncoder model)"),qUe=l(),ag=a("li"),gre=a("strong"),NUe=o("visual_bert"),jUe=o(" \u2014 "),uS=a("a"),DUe=o("VisualBertConfig"),GUe=o(" (VisualBert model)"),OUe=l(),ng=a("li"),hre=a("strong"),VUe=o("vit"),XUe=o(" \u2014 "),pS=a("a"),zUe=o("ViTConfig"),WUe=o(" (ViT model)"),QUe=l(),sg=a("li"),ure=a("strong"),HUe=o("vit_mae"),UUe=o(" \u2014 "),_S=a("a"),JUe=o("ViTMAEConfig"),YUe=o(" (ViTMAE model)"),KUe=l(),lg=a("li"),pre=a("strong"),ZUe=o("wav2vec2"),eJe=o(" \u2014 "),bS=a("a"),oJe=o("Wav2Vec2Config"),rJe=o(" (Wav2Vec2 model)"),tJe=l(),ig=a("li"),_re=a("strong"),aJe=o("wav2vec2-conformer"),nJe=o(" \u2014 "),vS=a("a"),sJe=o("Wav2Vec2ConformerConfig"),lJe=o(" (Wav2Vec2-Conformer model)"),iJe=l(),dg=a("li"),bre=a("strong"),dJe=o("wavlm"),cJe=o(" \u2014 "),FS=a("a"),mJe=o("WavLMConfig"),fJe=o(" (WavLM model)"),gJe=l(),cg=a("li"),vre=a("strong"),hJe=o("xglm"),uJe=o(" \u2014 "),TS=a("a"),pJe=o("XGLMConfig"),_Je=o(" (XGLM model)"),bJe=l(),mg=a("li"),Fre=a("strong"),vJe=o("xlm"),FJe=o(" \u2014 "),MS=a("a"),TJe=o("XLMConfig"),MJe=o(" (XLM model)"),EJe=l(),fg=a("li"),Tre=a("strong"),CJe=o("xlm-prophetnet"),wJe=o(" \u2014 "),ES=a("a"),AJe=o("XLMProphetNetConfig"),yJe=o(" (XLMProphetNet model)"),LJe=l(),gg=a("li"),Mre=a("strong"),xJe=o("xlm-roberta"),$Je=o(" \u2014 "),CS=a("a"),kJe=o("XLMRobertaConfig"),SJe=o(" (XLM-RoBERTa model)"),RJe=l(),hg=a("li"),Ere=a("strong"),PJe=o("xlm-roberta-xl"),BJe=o(" \u2014 "),wS=a("a"),IJe=o("XLMRobertaXLConfig"),qJe=o(" (XLM-RoBERTa-XL model)"),NJe=l(),ug=a("li"),Cre=a("strong"),jJe=o("xlnet"),DJe=o(" \u2014 "),AS=a("a"),GJe=o("XLNetConfig"),OJe=o(" (XLNet model)"),VJe=l(),pg=a("li"),wre=a("strong"),XJe=o("yolos"),zJe=o(" \u2014 "),yS=a("a"),WJe=o("YolosConfig"),QJe=o(" (YOLOS model)"),HJe=l(),_g=a("li"),Are=a("strong"),UJe=o("yoso"),JJe=o(" \u2014 "),LS=a("a"),YJe=o("YosoConfig"),KJe=o(" (YOSO model)"),ZJe=l(),F(bg.$$.fragment),eYe=l(),vg=a("div"),F(uy.$$.fragment),oYe=l(),yre=a("p"),rYe=o("Register a new configuration for this class."),IIe=l(),Fi=a("h2"),Fg=a("a"),Lre=a("span"),F(py.$$.fragment),tYe=l(),xre=a("span"),aYe=o("AutoTokenizer"),qIe=l(),wo=a("div"),F(_y.$$.fragment),nYe=l(),by=a("p"),sYe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),xS=a("a"),lYe=o("AutoTokenizer.from_pretrained()"),iYe=o(" class method."),dYe=l(),vy=a("p"),cYe=o("This class cannot be instantiated directly using "),$re=a("code"),mYe=o("__init__()"),fYe=o(" (throws an error)."),gYe=l(),Cr=a("div"),F(Fy.$$.fragment),hYe=l(),kre=a("p"),uYe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),pYe=l(),Aa=a("p"),_Ye=o("The tokenizer class to instantiate is selected based on the "),Sre=a("code"),bYe=o("model_type"),vYe=o(` property of the config object (either
passed as an argument or loaded from `),Rre=a("code"),FYe=o("pretrained_model_name_or_path"),TYe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pre=a("code"),MYe=o("pretrained_model_name_or_path"),EYe=o(":"),CYe=l(),k=a("ul"),Sn=a("li"),Bre=a("strong"),wYe=o("albert"),AYe=o(" \u2014 "),$S=a("a"),yYe=o("AlbertTokenizer"),LYe=o(" or "),kS=a("a"),xYe=o("AlbertTokenizerFast"),$Ye=o(" (ALBERT model)"),kYe=l(),Rn=a("li"),Ire=a("strong"),SYe=o("bart"),RYe=o(" \u2014 "),SS=a("a"),PYe=o("BartTokenizer"),BYe=o(" or "),RS=a("a"),IYe=o("BartTokenizerFast"),qYe=o(" (BART model)"),NYe=l(),Pn=a("li"),qre=a("strong"),jYe=o("barthez"),DYe=o(" \u2014 "),PS=a("a"),GYe=o("BarthezTokenizer"),OYe=o(" or "),BS=a("a"),VYe=o("BarthezTokenizerFast"),XYe=o(" (BARThez model)"),zYe=l(),Tg=a("li"),Nre=a("strong"),WYe=o("bartpho"),QYe=o(" \u2014 "),IS=a("a"),HYe=o("BartphoTokenizer"),UYe=o(" (BARTpho model)"),JYe=l(),Bn=a("li"),jre=a("strong"),YYe=o("bert"),KYe=o(" \u2014 "),qS=a("a"),ZYe=o("BertTokenizer"),eKe=o(" or "),NS=a("a"),oKe=o("BertTokenizerFast"),rKe=o(" (BERT model)"),tKe=l(),Mg=a("li"),Dre=a("strong"),aKe=o("bert-generation"),nKe=o(" \u2014 "),jS=a("a"),sKe=o("BertGenerationTokenizer"),lKe=o(" (Bert Generation model)"),iKe=l(),Eg=a("li"),Gre=a("strong"),dKe=o("bert-japanese"),cKe=o(" \u2014 "),DS=a("a"),mKe=o("BertJapaneseTokenizer"),fKe=o(" (BertJapanese model)"),gKe=l(),Cg=a("li"),Ore=a("strong"),hKe=o("bertweet"),uKe=o(" \u2014 "),GS=a("a"),pKe=o("BertweetTokenizer"),_Ke=o(" (Bertweet model)"),bKe=l(),In=a("li"),Vre=a("strong"),vKe=o("big_bird"),FKe=o(" \u2014 "),OS=a("a"),TKe=o("BigBirdTokenizer"),MKe=o(" or "),VS=a("a"),EKe=o("BigBirdTokenizerFast"),CKe=o(" (BigBird model)"),wKe=l(),qn=a("li"),Xre=a("strong"),AKe=o("bigbird_pegasus"),yKe=o(" \u2014 "),XS=a("a"),LKe=o("PegasusTokenizer"),xKe=o(" or "),zS=a("a"),$Ke=o("PegasusTokenizerFast"),kKe=o(" (BigBirdPegasus model)"),SKe=l(),Nn=a("li"),zre=a("strong"),RKe=o("blenderbot"),PKe=o(" \u2014 "),WS=a("a"),BKe=o("BlenderbotTokenizer"),IKe=o(" or "),QS=a("a"),qKe=o("BlenderbotTokenizerFast"),NKe=o(" (Blenderbot model)"),jKe=l(),wg=a("li"),Wre=a("strong"),DKe=o("blenderbot-small"),GKe=o(" \u2014 "),HS=a("a"),OKe=o("BlenderbotSmallTokenizer"),VKe=o(" (BlenderbotSmall model)"),XKe=l(),Ag=a("li"),Qre=a("strong"),zKe=o("byt5"),WKe=o(" \u2014 "),US=a("a"),QKe=o("ByT5Tokenizer"),HKe=o(" (ByT5 model)"),UKe=l(),jn=a("li"),Hre=a("strong"),JKe=o("camembert"),YKe=o(" \u2014 "),JS=a("a"),KKe=o("CamembertTokenizer"),ZKe=o(" or "),YS=a("a"),eZe=o("CamembertTokenizerFast"),oZe=o(" (CamemBERT model)"),rZe=l(),yg=a("li"),Ure=a("strong"),tZe=o("canine"),aZe=o(" \u2014 "),KS=a("a"),nZe=o("CanineTokenizer"),sZe=o(" (Canine model)"),lZe=l(),Dn=a("li"),Jre=a("strong"),iZe=o("clip"),dZe=o(" \u2014 "),ZS=a("a"),cZe=o("CLIPTokenizer"),mZe=o(" or "),eR=a("a"),fZe=o("CLIPTokenizerFast"),gZe=o(" (CLIP model)"),hZe=l(),Gn=a("li"),Yre=a("strong"),uZe=o("convbert"),pZe=o(" \u2014 "),oR=a("a"),_Ze=o("ConvBertTokenizer"),bZe=o(" or "),rR=a("a"),vZe=o("ConvBertTokenizerFast"),FZe=o(" (ConvBERT model)"),TZe=l(),On=a("li"),Kre=a("strong"),MZe=o("cpm"),EZe=o(" \u2014 "),tR=a("a"),CZe=o("CpmTokenizer"),wZe=o(" or "),aR=a("a"),AZe=o("CpmTokenizerFast"),yZe=o(" (CPM model)"),LZe=l(),Lg=a("li"),Zre=a("strong"),xZe=o("ctrl"),$Ze=o(" \u2014 "),nR=a("a"),kZe=o("CTRLTokenizer"),SZe=o(" (CTRL model)"),RZe=l(),Vn=a("li"),ete=a("strong"),PZe=o("data2vec-text"),BZe=o(" \u2014 "),sR=a("a"),IZe=o("RobertaTokenizer"),qZe=o(" or "),lR=a("a"),NZe=o("RobertaTokenizerFast"),jZe=o(" (Data2VecText model)"),DZe=l(),Xn=a("li"),ote=a("strong"),GZe=o("deberta"),OZe=o(" \u2014 "),iR=a("a"),VZe=o("DebertaTokenizer"),XZe=o(" or "),dR=a("a"),zZe=o("DebertaTokenizerFast"),WZe=o(" (DeBERTa model)"),QZe=l(),zn=a("li"),rte=a("strong"),HZe=o("deberta-v2"),UZe=o(" \u2014 "),cR=a("a"),JZe=o("DebertaV2Tokenizer"),YZe=o(" or "),mR=a("a"),KZe=o("DebertaV2TokenizerFast"),ZZe=o(" (DeBERTa-v2 model)"),eeo=l(),Wn=a("li"),tte=a("strong"),oeo=o("distilbert"),reo=o(" \u2014 "),fR=a("a"),teo=o("DistilBertTokenizer"),aeo=o(" or "),gR=a("a"),neo=o("DistilBertTokenizerFast"),seo=o(" (DistilBERT model)"),leo=l(),Qn=a("li"),ate=a("strong"),ieo=o("dpr"),deo=o(" \u2014 "),hR=a("a"),ceo=o("DPRQuestionEncoderTokenizer"),meo=o(" or "),uR=a("a"),feo=o("DPRQuestionEncoderTokenizerFast"),geo=o(" (DPR model)"),heo=l(),Hn=a("li"),nte=a("strong"),ueo=o("electra"),peo=o(" \u2014 "),pR=a("a"),_eo=o("ElectraTokenizer"),beo=o(" or "),_R=a("a"),veo=o("ElectraTokenizerFast"),Feo=o(" (ELECTRA model)"),Teo=l(),xg=a("li"),ste=a("strong"),Meo=o("flaubert"),Eeo=o(" \u2014 "),bR=a("a"),Ceo=o("FlaubertTokenizer"),weo=o(" (FlauBERT model)"),Aeo=l(),Un=a("li"),lte=a("strong"),yeo=o("fnet"),Leo=o(" \u2014 "),vR=a("a"),xeo=o("FNetTokenizer"),$eo=o(" or "),FR=a("a"),keo=o("FNetTokenizerFast"),Seo=o(" (FNet model)"),Reo=l(),$g=a("li"),ite=a("strong"),Peo=o("fsmt"),Beo=o(" \u2014 "),TR=a("a"),Ieo=o("FSMTTokenizer"),qeo=o(" (FairSeq Machine-Translation model)"),Neo=l(),Jn=a("li"),dte=a("strong"),jeo=o("funnel"),Deo=o(" \u2014 "),MR=a("a"),Geo=o("FunnelTokenizer"),Oeo=o(" or "),ER=a("a"),Veo=o("FunnelTokenizerFast"),Xeo=o(" (Funnel Transformer model)"),zeo=l(),Yn=a("li"),cte=a("strong"),Weo=o("gpt2"),Qeo=o(" \u2014 "),CR=a("a"),Heo=o("GPT2Tokenizer"),Ueo=o(" or "),wR=a("a"),Jeo=o("GPT2TokenizerFast"),Yeo=o(" (OpenAI GPT-2 model)"),Keo=l(),Kn=a("li"),mte=a("strong"),Zeo=o("gpt_neo"),eoo=o(" \u2014 "),AR=a("a"),ooo=o("GPT2Tokenizer"),roo=o(" or "),yR=a("a"),too=o("GPT2TokenizerFast"),aoo=o(" (GPT Neo model)"),noo=l(),Zn=a("li"),fte=a("strong"),soo=o("gptj"),loo=o(" \u2014 "),LR=a("a"),ioo=o("GPT2Tokenizer"),doo=o(" or "),xR=a("a"),coo=o("GPT2TokenizerFast"),moo=o(" (GPT-J model)"),foo=l(),es=a("li"),gte=a("strong"),goo=o("herbert"),hoo=o(" \u2014 "),$R=a("a"),uoo=o("HerbertTokenizer"),poo=o(" or "),kR=a("a"),_oo=o("HerbertTokenizerFast"),boo=o(" (HerBERT model)"),voo=l(),kg=a("li"),hte=a("strong"),Foo=o("hubert"),Too=o(" \u2014 "),SR=a("a"),Moo=o("Wav2Vec2CTCTokenizer"),Eoo=o(" (Hubert model)"),Coo=l(),os=a("li"),ute=a("strong"),woo=o("ibert"),Aoo=o(" \u2014 "),RR=a("a"),yoo=o("RobertaTokenizer"),Loo=o(" or "),PR=a("a"),xoo=o("RobertaTokenizerFast"),$oo=o(" (I-BERT model)"),koo=l(),rs=a("li"),pte=a("strong"),Soo=o("layoutlm"),Roo=o(" \u2014 "),BR=a("a"),Poo=o("LayoutLMTokenizer"),Boo=o(" or "),IR=a("a"),Ioo=o("LayoutLMTokenizerFast"),qoo=o(" (LayoutLM model)"),Noo=l(),ts=a("li"),_te=a("strong"),joo=o("layoutlmv2"),Doo=o(" \u2014 "),qR=a("a"),Goo=o("LayoutLMv2Tokenizer"),Ooo=o(" or "),NR=a("a"),Voo=o("LayoutLMv2TokenizerFast"),Xoo=o(" (LayoutLMv2 model)"),zoo=l(),as=a("li"),bte=a("strong"),Woo=o("layoutxlm"),Qoo=o(" \u2014 "),jR=a("a"),Hoo=o("LayoutXLMTokenizer"),Uoo=o(" or "),DR=a("a"),Joo=o("LayoutXLMTokenizerFast"),Yoo=o(" (LayoutXLM model)"),Koo=l(),ns=a("li"),vte=a("strong"),Zoo=o("led"),ero=o(" \u2014 "),GR=a("a"),oro=o("LEDTokenizer"),rro=o(" or "),OR=a("a"),tro=o("LEDTokenizerFast"),aro=o(" (LED model)"),nro=l(),ss=a("li"),Fte=a("strong"),sro=o("longformer"),lro=o(" \u2014 "),VR=a("a"),iro=o("LongformerTokenizer"),dro=o(" or "),XR=a("a"),cro=o("LongformerTokenizerFast"),mro=o(" (Longformer model)"),fro=l(),Sg=a("li"),Tte=a("strong"),gro=o("luke"),hro=o(" \u2014 "),zR=a("a"),uro=o("LukeTokenizer"),pro=o(" (LUKE model)"),_ro=l(),ls=a("li"),Mte=a("strong"),bro=o("lxmert"),vro=o(" \u2014 "),WR=a("a"),Fro=o("LxmertTokenizer"),Tro=o(" or "),QR=a("a"),Mro=o("LxmertTokenizerFast"),Ero=o(" (LXMERT model)"),Cro=l(),Rg=a("li"),Ete=a("strong"),wro=o("m2m_100"),Aro=o(" \u2014 "),HR=a("a"),yro=o("M2M100Tokenizer"),Lro=o(" (M2M100 model)"),xro=l(),Pg=a("li"),Cte=a("strong"),$ro=o("marian"),kro=o(" \u2014 "),UR=a("a"),Sro=o("MarianTokenizer"),Rro=o(" (Marian model)"),Pro=l(),is=a("li"),wte=a("strong"),Bro=o("mbart"),Iro=o(" \u2014 "),JR=a("a"),qro=o("MBartTokenizer"),Nro=o(" or "),YR=a("a"),jro=o("MBartTokenizerFast"),Dro=o(" (mBART model)"),Gro=l(),ds=a("li"),Ate=a("strong"),Oro=o("mbart50"),Vro=o(" \u2014 "),KR=a("a"),Xro=o("MBart50Tokenizer"),zro=o(" or "),ZR=a("a"),Wro=o("MBart50TokenizerFast"),Qro=o(" (mBART-50 model)"),Hro=l(),cs=a("li"),yte=a("strong"),Uro=o("megatron-bert"),Jro=o(" \u2014 "),eP=a("a"),Yro=o("BertTokenizer"),Kro=o(" or "),oP=a("a"),Zro=o("BertTokenizerFast"),eto=o(" (MegatronBert model)"),oto=l(),Bg=a("li"),Lte=a("strong"),rto=o("mluke"),tto=o(" \u2014 "),rP=a("a"),ato=o("MLukeTokenizer"),nto=o(" (mLUKE model)"),sto=l(),ms=a("li"),xte=a("strong"),lto=o("mobilebert"),ito=o(" \u2014 "),tP=a("a"),dto=o("MobileBertTokenizer"),cto=o(" or "),aP=a("a"),mto=o("MobileBertTokenizerFast"),fto=o(" (MobileBERT model)"),gto=l(),fs=a("li"),$te=a("strong"),hto=o("mpnet"),uto=o(" \u2014 "),nP=a("a"),pto=o("MPNetTokenizer"),_to=o(" or "),sP=a("a"),bto=o("MPNetTokenizerFast"),vto=o(" (MPNet model)"),Fto=l(),gs=a("li"),kte=a("strong"),Tto=o("mt5"),Mto=o(" \u2014 "),lP=a("a"),Eto=o("MT5Tokenizer"),Cto=o(" or "),iP=a("a"),wto=o("MT5TokenizerFast"),Ato=o(" (mT5 model)"),yto=l(),hs=a("li"),Ste=a("strong"),Lto=o("nystromformer"),xto=o(" \u2014 "),dP=a("a"),$to=o("AlbertTokenizer"),kto=o(" or "),cP=a("a"),Sto=o("AlbertTokenizerFast"),Rto=o(" (Nystromformer model)"),Pto=l(),us=a("li"),Rte=a("strong"),Bto=o("openai-gpt"),Ito=o(" \u2014 "),mP=a("a"),qto=o("OpenAIGPTTokenizer"),Nto=o(" or "),fP=a("a"),jto=o("OpenAIGPTTokenizerFast"),Dto=o(" (OpenAI GPT model)"),Gto=l(),Ig=a("li"),Pte=a("strong"),Oto=o("opt"),Vto=o(" \u2014 "),gP=a("a"),Xto=o("GPT2Tokenizer"),zto=o(" (OPT model)"),Wto=l(),ps=a("li"),Bte=a("strong"),Qto=o("pegasus"),Hto=o(" \u2014 "),hP=a("a"),Uto=o("PegasusTokenizer"),Jto=o(" or "),uP=a("a"),Yto=o("PegasusTokenizerFast"),Kto=o(" (Pegasus model)"),Zto=l(),qg=a("li"),Ite=a("strong"),eao=o("perceiver"),oao=o(" \u2014 "),pP=a("a"),rao=o("PerceiverTokenizer"),tao=o(" (Perceiver model)"),aao=l(),Ng=a("li"),qte=a("strong"),nao=o("phobert"),sao=o(" \u2014 "),_P=a("a"),lao=o("PhobertTokenizer"),iao=o(" (PhoBERT model)"),dao=l(),jg=a("li"),Nte=a("strong"),cao=o("plbart"),mao=o(" \u2014 "),bP=a("a"),fao=o("PLBartTokenizer"),gao=o(" (PLBart model)"),hao=l(),Dg=a("li"),jte=a("strong"),uao=o("prophetnet"),pao=o(" \u2014 "),vP=a("a"),_ao=o("ProphetNetTokenizer"),bao=o(" (ProphetNet model)"),vao=l(),_s=a("li"),Dte=a("strong"),Fao=o("qdqbert"),Tao=o(" \u2014 "),FP=a("a"),Mao=o("BertTokenizer"),Eao=o(" or "),TP=a("a"),Cao=o("BertTokenizerFast"),wao=o(" (QDQBert model)"),Aao=l(),Gg=a("li"),Gte=a("strong"),yao=o("rag"),Lao=o(" \u2014 "),MP=a("a"),xao=o("RagTokenizer"),$ao=o(" (RAG model)"),kao=l(),bs=a("li"),Ote=a("strong"),Sao=o("realm"),Rao=o(" \u2014 "),EP=a("a"),Pao=o("RealmTokenizer"),Bao=o(" or "),CP=a("a"),Iao=o("RealmTokenizerFast"),qao=o(" (Realm model)"),Nao=l(),vs=a("li"),Vte=a("strong"),jao=o("reformer"),Dao=o(" \u2014 "),wP=a("a"),Gao=o("ReformerTokenizer"),Oao=o(" or "),AP=a("a"),Vao=o("ReformerTokenizerFast"),Xao=o(" (Reformer model)"),zao=l(),Fs=a("li"),Xte=a("strong"),Wao=o("rembert"),Qao=o(" \u2014 "),yP=a("a"),Hao=o("RemBertTokenizer"),Uao=o(" or "),LP=a("a"),Jao=o("RemBertTokenizerFast"),Yao=o(" (RemBERT model)"),Kao=l(),Ts=a("li"),zte=a("strong"),Zao=o("retribert"),eno=o(" \u2014 "),xP=a("a"),ono=o("RetriBertTokenizer"),rno=o(" or "),$P=a("a"),tno=o("RetriBertTokenizerFast"),ano=o(" (RetriBERT model)"),nno=l(),Ms=a("li"),Wte=a("strong"),sno=o("roberta"),lno=o(" \u2014 "),kP=a("a"),ino=o("RobertaTokenizer"),dno=o(" or "),SP=a("a"),cno=o("RobertaTokenizerFast"),mno=o(" (RoBERTa model)"),fno=l(),Es=a("li"),Qte=a("strong"),gno=o("roformer"),hno=o(" \u2014 "),RP=a("a"),uno=o("RoFormerTokenizer"),pno=o(" or "),PP=a("a"),_no=o("RoFormerTokenizerFast"),bno=o(" (RoFormer model)"),vno=l(),Og=a("li"),Hte=a("strong"),Fno=o("speech_to_text"),Tno=o(" \u2014 "),BP=a("a"),Mno=o("Speech2TextTokenizer"),Eno=o(" (Speech2Text model)"),Cno=l(),Vg=a("li"),Ute=a("strong"),wno=o("speech_to_text_2"),Ano=o(" \u2014 "),IP=a("a"),yno=o("Speech2Text2Tokenizer"),Lno=o(" (Speech2Text2 model)"),xno=l(),Cs=a("li"),Jte=a("strong"),$no=o("splinter"),kno=o(" \u2014 "),qP=a("a"),Sno=o("SplinterTokenizer"),Rno=o(" or "),NP=a("a"),Pno=o("SplinterTokenizerFast"),Bno=o(" (Splinter model)"),Ino=l(),ws=a("li"),Yte=a("strong"),qno=o("squeezebert"),Nno=o(" \u2014 "),jP=a("a"),jno=o("SqueezeBertTokenizer"),Dno=o(" or "),DP=a("a"),Gno=o("SqueezeBertTokenizerFast"),Ono=o(" (SqueezeBERT model)"),Vno=l(),As=a("li"),Kte=a("strong"),Xno=o("t5"),zno=o(" \u2014 "),GP=a("a"),Wno=o("T5Tokenizer"),Qno=o(" or "),OP=a("a"),Hno=o("T5TokenizerFast"),Uno=o(" (T5 model)"),Jno=l(),Xg=a("li"),Zte=a("strong"),Yno=o("tapas"),Kno=o(" \u2014 "),VP=a("a"),Zno=o("TapasTokenizer"),eso=o(" (TAPAS model)"),oso=l(),zg=a("li"),eae=a("strong"),rso=o("tapex"),tso=o(" \u2014 "),XP=a("a"),aso=o("TapexTokenizer"),nso=o(" (TAPEX model)"),sso=l(),Wg=a("li"),oae=a("strong"),lso=o("transfo-xl"),iso=o(" \u2014 "),zP=a("a"),dso=o("TransfoXLTokenizer"),cso=o(" (Transformer-XL model)"),mso=l(),ys=a("li"),rae=a("strong"),fso=o("visual_bert"),gso=o(" \u2014 "),WP=a("a"),hso=o("BertTokenizer"),uso=o(" or "),QP=a("a"),pso=o("BertTokenizerFast"),_so=o(" (VisualBert model)"),bso=l(),Qg=a("li"),tae=a("strong"),vso=o("wav2vec2"),Fso=o(" \u2014 "),HP=a("a"),Tso=o("Wav2Vec2CTCTokenizer"),Mso=o(" (Wav2Vec2 model)"),Eso=l(),Hg=a("li"),aae=a("strong"),Cso=o("wav2vec2-conformer"),wso=o(" \u2014 "),UP=a("a"),Aso=o("Wav2Vec2CTCTokenizer"),yso=o(" (Wav2Vec2-Conformer model)"),Lso=l(),Ug=a("li"),nae=a("strong"),xso=o("wav2vec2_phoneme"),$so=o(" \u2014 "),JP=a("a"),kso=o("Wav2Vec2PhonemeCTCTokenizer"),Sso=o(" (Wav2Vec2Phoneme model)"),Rso=l(),Ls=a("li"),sae=a("strong"),Pso=o("xglm"),Bso=o(" \u2014 "),YP=a("a"),Iso=o("XGLMTokenizer"),qso=o(" or "),KP=a("a"),Nso=o("XGLMTokenizerFast"),jso=o(" (XGLM model)"),Dso=l(),Jg=a("li"),lae=a("strong"),Gso=o("xlm"),Oso=o(" \u2014 "),ZP=a("a"),Vso=o("XLMTokenizer"),Xso=o(" (XLM model)"),zso=l(),Yg=a("li"),iae=a("strong"),Wso=o("xlm-prophetnet"),Qso=o(" \u2014 "),eB=a("a"),Hso=o("XLMProphetNetTokenizer"),Uso=o(" (XLMProphetNet model)"),Jso=l(),xs=a("li"),dae=a("strong"),Yso=o("xlm-roberta"),Kso=o(" \u2014 "),oB=a("a"),Zso=o("XLMRobertaTokenizer"),elo=o(" or "),rB=a("a"),olo=o("XLMRobertaTokenizerFast"),rlo=o(" (XLM-RoBERTa model)"),tlo=l(),$s=a("li"),cae=a("strong"),alo=o("xlm-roberta-xl"),nlo=o(" \u2014 "),tB=a("a"),slo=o("RobertaTokenizer"),llo=o(" or "),aB=a("a"),ilo=o("RobertaTokenizerFast"),dlo=o(" (XLM-RoBERTa-XL model)"),clo=l(),ks=a("li"),mae=a("strong"),mlo=o("xlnet"),flo=o(" \u2014 "),nB=a("a"),glo=o("XLNetTokenizer"),hlo=o(" or "),sB=a("a"),ulo=o("XLNetTokenizerFast"),plo=o(" (XLNet model)"),_lo=l(),Ss=a("li"),fae=a("strong"),blo=o("yoso"),vlo=o(" \u2014 "),lB=a("a"),Flo=o("AlbertTokenizer"),Tlo=o(" or "),iB=a("a"),Mlo=o("AlbertTokenizerFast"),Elo=o(" (YOSO model)"),Clo=l(),F(Kg.$$.fragment),wlo=l(),Zg=a("div"),F(Ty.$$.fragment),Alo=l(),gae=a("p"),ylo=o("Register a new tokenizer in this mapping."),NIe=l(),Ti=a("h2"),eh=a("a"),hae=a("span"),F(My.$$.fragment),Llo=l(),uae=a("span"),xlo=o("AutoFeatureExtractor"),jIe=l(),Ao=a("div"),F(Ey.$$.fragment),$lo=l(),Cy=a("p"),klo=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),dB=a("a"),Slo=o("AutoFeatureExtractor.from_pretrained()"),Rlo=o(" class method."),Plo=l(),wy=a("p"),Blo=o("This class cannot be instantiated directly using "),pae=a("code"),Ilo=o("__init__()"),qlo=o(" (throws an error)."),Nlo=l(),He=a("div"),F(Ay.$$.fragment),jlo=l(),_ae=a("p"),Dlo=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Glo=l(),ya=a("p"),Olo=o("The feature extractor class to instantiate is selected based on the "),bae=a("code"),Vlo=o("model_type"),Xlo=o(` property of the config object
(either passed as an argument or loaded from `),vae=a("code"),zlo=o("pretrained_model_name_or_path"),Wlo=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Fae=a("code"),Qlo=o("pretrained_model_name_or_path"),Hlo=o(":"),Ulo=l(),Z=a("ul"),oh=a("li"),Tae=a("strong"),Jlo=o("beit"),Ylo=o(" \u2014 "),cB=a("a"),Klo=o("BeitFeatureExtractor"),Zlo=o(" (BEiT model)"),eio=l(),rh=a("li"),Mae=a("strong"),oio=o("clip"),rio=o(" \u2014 "),mB=a("a"),tio=o("CLIPFeatureExtractor"),aio=o(" (CLIP model)"),nio=l(),th=a("li"),Eae=a("strong"),sio=o("convnext"),lio=o(" \u2014 "),fB=a("a"),iio=o("ConvNextFeatureExtractor"),dio=o(" (ConvNext model)"),cio=l(),ah=a("li"),Cae=a("strong"),mio=o("data2vec-audio"),fio=o(" \u2014 "),gB=a("a"),gio=o("Wav2Vec2FeatureExtractor"),hio=o(" (Data2VecAudio model)"),uio=l(),nh=a("li"),wae=a("strong"),pio=o("data2vec-vision"),_io=o(" \u2014 "),hB=a("a"),bio=o("BeitFeatureExtractor"),vio=o(" (Data2VecVision model)"),Fio=l(),sh=a("li"),Aae=a("strong"),Tio=o("deit"),Mio=o(" \u2014 "),uB=a("a"),Eio=o("DeiTFeatureExtractor"),Cio=o(" (DeiT model)"),wio=l(),lh=a("li"),yae=a("strong"),Aio=o("detr"),yio=o(" \u2014 "),pB=a("a"),Lio=o("DetrFeatureExtractor"),xio=o(" (DETR model)"),$io=l(),ih=a("li"),Lae=a("strong"),kio=o("dpt"),Sio=o(" \u2014 "),_B=a("a"),Rio=o("DPTFeatureExtractor"),Pio=o(" (DPT model)"),Bio=l(),dh=a("li"),xae=a("strong"),Iio=o("flava"),qio=o(" \u2014 "),bB=a("a"),Nio=o("FlavaFeatureExtractor"),jio=o(" (Flava model)"),Dio=l(),ch=a("li"),$ae=a("strong"),Gio=o("glpn"),Oio=o(" \u2014 "),vB=a("a"),Vio=o("GLPNFeatureExtractor"),Xio=o(" (GLPN model)"),zio=l(),mh=a("li"),kae=a("strong"),Wio=o("hubert"),Qio=o(" \u2014 "),FB=a("a"),Hio=o("Wav2Vec2FeatureExtractor"),Uio=o(" (Hubert model)"),Jio=l(),fh=a("li"),Sae=a("strong"),Yio=o("layoutlmv2"),Kio=o(" \u2014 "),TB=a("a"),Zio=o("LayoutLMv2FeatureExtractor"),edo=o(" (LayoutLMv2 model)"),odo=l(),gh=a("li"),Rae=a("strong"),rdo=o("maskformer"),tdo=o(" \u2014 "),MB=a("a"),ado=o("MaskFormerFeatureExtractor"),ndo=o(" (MaskFormer model)"),sdo=l(),hh=a("li"),Pae=a("strong"),ldo=o("perceiver"),ido=o(" \u2014 "),EB=a("a"),ddo=o("PerceiverFeatureExtractor"),cdo=o(" (Perceiver model)"),mdo=l(),uh=a("li"),Bae=a("strong"),fdo=o("poolformer"),gdo=o(" \u2014 "),CB=a("a"),hdo=o("PoolFormerFeatureExtractor"),udo=o(" (PoolFormer model)"),pdo=l(),ph=a("li"),Iae=a("strong"),_do=o("regnet"),bdo=o(" \u2014 "),wB=a("a"),vdo=o("ConvNextFeatureExtractor"),Fdo=o(" (RegNet model)"),Tdo=l(),_h=a("li"),qae=a("strong"),Mdo=o("resnet"),Edo=o(" \u2014 "),AB=a("a"),Cdo=o("ConvNextFeatureExtractor"),wdo=o(" (ResNet model)"),Ado=l(),bh=a("li"),Nae=a("strong"),ydo=o("segformer"),Ldo=o(" \u2014 "),yB=a("a"),xdo=o("SegformerFeatureExtractor"),$do=o(" (SegFormer model)"),kdo=l(),vh=a("li"),jae=a("strong"),Sdo=o("speech_to_text"),Rdo=o(" \u2014 "),LB=a("a"),Pdo=o("Speech2TextFeatureExtractor"),Bdo=o(" (Speech2Text model)"),Ido=l(),Fh=a("li"),Dae=a("strong"),qdo=o("swin"),Ndo=o(" \u2014 "),xB=a("a"),jdo=o("ViTFeatureExtractor"),Ddo=o(" (Swin model)"),Gdo=l(),Th=a("li"),Gae=a("strong"),Odo=o("van"),Vdo=o(" \u2014 "),$B=a("a"),Xdo=o("ConvNextFeatureExtractor"),zdo=o(" (VAN model)"),Wdo=l(),Mh=a("li"),Oae=a("strong"),Qdo=o("vit"),Hdo=o(" \u2014 "),kB=a("a"),Udo=o("ViTFeatureExtractor"),Jdo=o(" (ViT model)"),Ydo=l(),Eh=a("li"),Vae=a("strong"),Kdo=o("vit_mae"),Zdo=o(" \u2014 "),SB=a("a"),eco=o("ViTFeatureExtractor"),oco=o(" (ViTMAE model)"),rco=l(),Ch=a("li"),Xae=a("strong"),tco=o("wav2vec2"),aco=o(" \u2014 "),RB=a("a"),nco=o("Wav2Vec2FeatureExtractor"),sco=o(" (Wav2Vec2 model)"),lco=l(),wh=a("li"),zae=a("strong"),ico=o("wav2vec2-conformer"),dco=o(" \u2014 "),PB=a("a"),cco=o("Wav2Vec2FeatureExtractor"),mco=o(" (Wav2Vec2-Conformer model)"),fco=l(),Ah=a("li"),Wae=a("strong"),gco=o("yolos"),hco=o(" \u2014 "),BB=a("a"),uco=o("YolosFeatureExtractor"),pco=o(" (YOLOS model)"),_co=l(),F(yh.$$.fragment),bco=l(),F(Lh.$$.fragment),vco=l(),xh=a("div"),F(yy.$$.fragment),Fco=l(),Qae=a("p"),Tco=o("Register a new feature extractor for this class."),DIe=l(),Mi=a("h2"),$h=a("a"),Hae=a("span"),F(Ly.$$.fragment),Mco=l(),Uae=a("span"),Eco=o("AutoProcessor"),GIe=l(),yo=a("div"),F(xy.$$.fragment),Cco=l(),$y=a("p"),wco=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),IB=a("a"),Aco=o("AutoProcessor.from_pretrained()"),yco=o(" class method."),Lco=l(),ky=a("p"),xco=o("This class cannot be instantiated directly using "),Jae=a("code"),$co=o("__init__()"),kco=o(" (throws an error)."),Sco=l(),Ue=a("div"),F(Sy.$$.fragment),Rco=l(),Yae=a("p"),Pco=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Bco=l(),Ei=a("p"),Ico=o("The processor class to instantiate is selected based on the "),Kae=a("code"),qco=o("model_type"),Nco=o(` property of the config object (either
passed as an argument or loaded from `),Zae=a("code"),jco=o("pretrained_model_name_or_path"),Dco=o(" if possible):"),Gco=l(),ue=a("ul"),kh=a("li"),ene=a("strong"),Oco=o("clip"),Vco=o(" \u2014 "),qB=a("a"),Xco=o("CLIPProcessor"),zco=o(" (CLIP model)"),Wco=l(),Sh=a("li"),one=a("strong"),Qco=o("flava"),Hco=o(" \u2014 "),rne=a("code"),Uco=o("FLAVAProcessor"),Jco=o(" (Flava model)"),Yco=l(),Rh=a("li"),tne=a("strong"),Kco=o("layoutlmv2"),Zco=o(" \u2014 "),NB=a("a"),emo=o("LayoutLMv2Processor"),omo=o(" (LayoutLMv2 model)"),rmo=l(),Ph=a("li"),ane=a("strong"),tmo=o("layoutxlm"),amo=o(" \u2014 "),jB=a("a"),nmo=o("LayoutXLMProcessor"),smo=o(" (LayoutXLM model)"),lmo=l(),Bh=a("li"),nne=a("strong"),imo=o("sew"),dmo=o(" \u2014 "),DB=a("a"),cmo=o("Wav2Vec2Processor"),mmo=o(" (SEW model)"),fmo=l(),Ih=a("li"),sne=a("strong"),gmo=o("sew-d"),hmo=o(" \u2014 "),GB=a("a"),umo=o("Wav2Vec2Processor"),pmo=o(" (SEW-D model)"),_mo=l(),qh=a("li"),lne=a("strong"),bmo=o("speech_to_text"),vmo=o(" \u2014 "),OB=a("a"),Fmo=o("Speech2TextProcessor"),Tmo=o(" (Speech2Text model)"),Mmo=l(),Nh=a("li"),ine=a("strong"),Emo=o("speech_to_text_2"),Cmo=o(" \u2014 "),VB=a("a"),wmo=o("Speech2Text2Processor"),Amo=o(" (Speech2Text2 model)"),ymo=l(),jh=a("li"),dne=a("strong"),Lmo=o("trocr"),xmo=o(" \u2014 "),XB=a("a"),$mo=o("TrOCRProcessor"),kmo=o(" (TrOCR model)"),Smo=l(),Dh=a("li"),cne=a("strong"),Rmo=o("unispeech"),Pmo=o(" \u2014 "),zB=a("a"),Bmo=o("Wav2Vec2Processor"),Imo=o(" (UniSpeech model)"),qmo=l(),Gh=a("li"),mne=a("strong"),Nmo=o("unispeech-sat"),jmo=o(" \u2014 "),WB=a("a"),Dmo=o("Wav2Vec2Processor"),Gmo=o(" (UniSpeechSat model)"),Omo=l(),Oh=a("li"),fne=a("strong"),Vmo=o("vilt"),Xmo=o(" \u2014 "),QB=a("a"),zmo=o("ViltProcessor"),Wmo=o(" (ViLT model)"),Qmo=l(),Vh=a("li"),gne=a("strong"),Hmo=o("vision-text-dual-encoder"),Umo=o(" \u2014 "),HB=a("a"),Jmo=o("VisionTextDualEncoderProcessor"),Ymo=o(" (VisionTextDualEncoder model)"),Kmo=l(),Xh=a("li"),hne=a("strong"),Zmo=o("wav2vec2"),efo=o(" \u2014 "),UB=a("a"),ofo=o("Wav2Vec2Processor"),rfo=o(" (Wav2Vec2 model)"),tfo=l(),zh=a("li"),une=a("strong"),afo=o("wav2vec2-conformer"),nfo=o(" \u2014 "),JB=a("a"),sfo=o("Wav2Vec2Processor"),lfo=o(" (Wav2Vec2-Conformer model)"),ifo=l(),Wh=a("li"),pne=a("strong"),dfo=o("wavlm"),cfo=o(" \u2014 "),YB=a("a"),mfo=o("Wav2Vec2Processor"),ffo=o(" (WavLM model)"),gfo=l(),F(Qh.$$.fragment),hfo=l(),F(Hh.$$.fragment),ufo=l(),Uh=a("div"),F(Ry.$$.fragment),pfo=l(),_ne=a("p"),_fo=o("Register a new processor for this class."),OIe=l(),Ci=a("h2"),Jh=a("a"),bne=a("span"),F(Py.$$.fragment),bfo=l(),vne=a("span"),vfo=o("AutoModel"),VIe=l(),Lo=a("div"),F(By.$$.fragment),Ffo=l(),wi=a("p"),Tfo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),KB=a("a"),Mfo=o("from_pretrained()"),Efo=o(" class method or the "),ZB=a("a"),Cfo=o("from_config()"),wfo=o(` class
method.`),Afo=l(),Iy=a("p"),yfo=o("This class cannot be instantiated directly using "),Fne=a("code"),Lfo=o("__init__()"),xfo=o(" (throws an error)."),$fo=l(),tt=a("div"),F(qy.$$.fragment),kfo=l(),Tne=a("p"),Sfo=o("Instantiates one of the base model classes of the library from a configuration."),Rfo=l(),Ai=a("p"),Pfo=o(`Note:
Loading a model from its configuration file does `),Mne=a("strong"),Bfo=o("not"),Ifo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eI=a("a"),qfo=o("from_pretrained()"),Nfo=o(" to load the model weights."),jfo=l(),F(Yh.$$.fragment),Dfo=l(),Je=a("div"),F(Ny.$$.fragment),Gfo=l(),Ene=a("p"),Ofo=o("Instantiate one of the base model classes of the library from a pretrained model."),Vfo=l(),La=a("p"),Xfo=o("The model class to instantiate is selected based on the "),Cne=a("code"),zfo=o("model_type"),Wfo=o(` property of the config object (either
passed as an argument or loaded from `),wne=a("code"),Qfo=o("pretrained_model_name_or_path"),Hfo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ane=a("code"),Ufo=o("pretrained_model_name_or_path"),Jfo=o(":"),Yfo=l(),x=a("ul"),Kh=a("li"),yne=a("strong"),Kfo=o("albert"),Zfo=o(" \u2014 "),oI=a("a"),ego=o("AlbertModel"),ogo=o(" (ALBERT model)"),rgo=l(),Zh=a("li"),Lne=a("strong"),tgo=o("bart"),ago=o(" \u2014 "),rI=a("a"),ngo=o("BartModel"),sgo=o(" (BART model)"),lgo=l(),eu=a("li"),xne=a("strong"),igo=o("beit"),dgo=o(" \u2014 "),tI=a("a"),cgo=o("BeitModel"),mgo=o(" (BEiT model)"),fgo=l(),ou=a("li"),$ne=a("strong"),ggo=o("bert"),hgo=o(" \u2014 "),aI=a("a"),ugo=o("BertModel"),pgo=o(" (BERT model)"),_go=l(),ru=a("li"),kne=a("strong"),bgo=o("bert-generation"),vgo=o(" \u2014 "),nI=a("a"),Fgo=o("BertGenerationEncoder"),Tgo=o(" (Bert Generation model)"),Mgo=l(),tu=a("li"),Sne=a("strong"),Ego=o("big_bird"),Cgo=o(" \u2014 "),sI=a("a"),wgo=o("BigBirdModel"),Ago=o(" (BigBird model)"),ygo=l(),au=a("li"),Rne=a("strong"),Lgo=o("bigbird_pegasus"),xgo=o(" \u2014 "),lI=a("a"),$go=o("BigBirdPegasusModel"),kgo=o(" (BigBirdPegasus model)"),Sgo=l(),nu=a("li"),Pne=a("strong"),Rgo=o("blenderbot"),Pgo=o(" \u2014 "),iI=a("a"),Bgo=o("BlenderbotModel"),Igo=o(" (Blenderbot model)"),qgo=l(),su=a("li"),Bne=a("strong"),Ngo=o("blenderbot-small"),jgo=o(" \u2014 "),dI=a("a"),Dgo=o("BlenderbotSmallModel"),Ggo=o(" (BlenderbotSmall model)"),Ogo=l(),lu=a("li"),Ine=a("strong"),Vgo=o("camembert"),Xgo=o(" \u2014 "),cI=a("a"),zgo=o("CamembertModel"),Wgo=o(" (CamemBERT model)"),Qgo=l(),iu=a("li"),qne=a("strong"),Hgo=o("canine"),Ugo=o(" \u2014 "),mI=a("a"),Jgo=o("CanineModel"),Ygo=o(" (Canine model)"),Kgo=l(),du=a("li"),Nne=a("strong"),Zgo=o("clip"),eho=o(" \u2014 "),fI=a("a"),oho=o("CLIPModel"),rho=o(" (CLIP model)"),tho=l(),cu=a("li"),jne=a("strong"),aho=o("convbert"),nho=o(" \u2014 "),gI=a("a"),sho=o("ConvBertModel"),lho=o(" (ConvBERT model)"),iho=l(),mu=a("li"),Dne=a("strong"),dho=o("convnext"),cho=o(" \u2014 "),hI=a("a"),mho=o("ConvNextModel"),fho=o(" (ConvNext model)"),gho=l(),fu=a("li"),Gne=a("strong"),hho=o("ctrl"),uho=o(" \u2014 "),uI=a("a"),pho=o("CTRLModel"),_ho=o(" (CTRL model)"),bho=l(),gu=a("li"),One=a("strong"),vho=o("data2vec-audio"),Fho=o(" \u2014 "),pI=a("a"),Tho=o("Data2VecAudioModel"),Mho=o(" (Data2VecAudio model)"),Eho=l(),hu=a("li"),Vne=a("strong"),Cho=o("data2vec-text"),who=o(" \u2014 "),_I=a("a"),Aho=o("Data2VecTextModel"),yho=o(" (Data2VecText model)"),Lho=l(),uu=a("li"),Xne=a("strong"),xho=o("data2vec-vision"),$ho=o(" \u2014 "),bI=a("a"),kho=o("Data2VecVisionModel"),Sho=o(" (Data2VecVision model)"),Rho=l(),pu=a("li"),zne=a("strong"),Pho=o("deberta"),Bho=o(" \u2014 "),vI=a("a"),Iho=o("DebertaModel"),qho=o(" (DeBERTa model)"),Nho=l(),_u=a("li"),Wne=a("strong"),jho=o("deberta-v2"),Dho=o(" \u2014 "),FI=a("a"),Gho=o("DebertaV2Model"),Oho=o(" (DeBERTa-v2 model)"),Vho=l(),bu=a("li"),Qne=a("strong"),Xho=o("decision_transformer"),zho=o(" \u2014 "),TI=a("a"),Who=o("DecisionTransformerModel"),Qho=o(" (Decision Transformer model)"),Hho=l(),vu=a("li"),Hne=a("strong"),Uho=o("deit"),Jho=o(" \u2014 "),MI=a("a"),Yho=o("DeiTModel"),Kho=o(" (DeiT model)"),Zho=l(),Fu=a("li"),Une=a("strong"),euo=o("detr"),ouo=o(" \u2014 "),EI=a("a"),ruo=o("DetrModel"),tuo=o(" (DETR model)"),auo=l(),Tu=a("li"),Jne=a("strong"),nuo=o("distilbert"),suo=o(" \u2014 "),CI=a("a"),luo=o("DistilBertModel"),iuo=o(" (DistilBERT model)"),duo=l(),Mu=a("li"),Yne=a("strong"),cuo=o("dpr"),muo=o(" \u2014 "),wI=a("a"),fuo=o("DPRQuestionEncoder"),guo=o(" (DPR model)"),huo=l(),Eu=a("li"),Kne=a("strong"),uuo=o("dpt"),puo=o(" \u2014 "),AI=a("a"),_uo=o("DPTModel"),buo=o(" (DPT model)"),vuo=l(),Cu=a("li"),Zne=a("strong"),Fuo=o("electra"),Tuo=o(" \u2014 "),yI=a("a"),Muo=o("ElectraModel"),Euo=o(" (ELECTRA model)"),Cuo=l(),wu=a("li"),ese=a("strong"),wuo=o("flaubert"),Auo=o(" \u2014 "),LI=a("a"),yuo=o("FlaubertModel"),Luo=o(" (FlauBERT model)"),xuo=l(),Au=a("li"),ose=a("strong"),$uo=o("flava"),kuo=o(" \u2014 "),xI=a("a"),Suo=o("FlavaModel"),Ruo=o(" (Flava model)"),Puo=l(),yu=a("li"),rse=a("strong"),Buo=o("fnet"),Iuo=o(" \u2014 "),$I=a("a"),quo=o("FNetModel"),Nuo=o(" (FNet model)"),juo=l(),Lu=a("li"),tse=a("strong"),Duo=o("fsmt"),Guo=o(" \u2014 "),kI=a("a"),Ouo=o("FSMTModel"),Vuo=o(" (FairSeq Machine-Translation model)"),Xuo=l(),Rs=a("li"),ase=a("strong"),zuo=o("funnel"),Wuo=o(" \u2014 "),SI=a("a"),Quo=o("FunnelModel"),Huo=o(" or "),RI=a("a"),Uuo=o("FunnelBaseModel"),Juo=o(" (Funnel Transformer model)"),Yuo=l(),xu=a("li"),nse=a("strong"),Kuo=o("glpn"),Zuo=o(" \u2014 "),PI=a("a"),epo=o("GLPNModel"),opo=o(" (GLPN model)"),rpo=l(),$u=a("li"),sse=a("strong"),tpo=o("gpt2"),apo=o(" \u2014 "),BI=a("a"),npo=o("GPT2Model"),spo=o(" (OpenAI GPT-2 model)"),lpo=l(),ku=a("li"),lse=a("strong"),ipo=o("gpt_neo"),dpo=o(" \u2014 "),II=a("a"),cpo=o("GPTNeoModel"),mpo=o(" (GPT Neo model)"),fpo=l(),Su=a("li"),ise=a("strong"),gpo=o("gptj"),hpo=o(" \u2014 "),qI=a("a"),upo=o("GPTJModel"),ppo=o(" (GPT-J model)"),_po=l(),Ru=a("li"),dse=a("strong"),bpo=o("hubert"),vpo=o(" \u2014 "),NI=a("a"),Fpo=o("HubertModel"),Tpo=o(" (Hubert model)"),Mpo=l(),Pu=a("li"),cse=a("strong"),Epo=o("ibert"),Cpo=o(" \u2014 "),jI=a("a"),wpo=o("IBertModel"),Apo=o(" (I-BERT model)"),ypo=l(),Bu=a("li"),mse=a("strong"),Lpo=o("imagegpt"),xpo=o(" \u2014 "),DI=a("a"),$po=o("ImageGPTModel"),kpo=o(" (ImageGPT model)"),Spo=l(),Iu=a("li"),fse=a("strong"),Rpo=o("layoutlm"),Ppo=o(" \u2014 "),GI=a("a"),Bpo=o("LayoutLMModel"),Ipo=o(" (LayoutLM model)"),qpo=l(),qu=a("li"),gse=a("strong"),Npo=o("layoutlmv2"),jpo=o(" \u2014 "),OI=a("a"),Dpo=o("LayoutLMv2Model"),Gpo=o(" (LayoutLMv2 model)"),Opo=l(),Nu=a("li"),hse=a("strong"),Vpo=o("led"),Xpo=o(" \u2014 "),VI=a("a"),zpo=o("LEDModel"),Wpo=o(" (LED model)"),Qpo=l(),ju=a("li"),use=a("strong"),Hpo=o("longformer"),Upo=o(" \u2014 "),XI=a("a"),Jpo=o("LongformerModel"),Ypo=o(" (Longformer model)"),Kpo=l(),Du=a("li"),pse=a("strong"),Zpo=o("luke"),e_o=o(" \u2014 "),zI=a("a"),o_o=o("LukeModel"),r_o=o(" (LUKE model)"),t_o=l(),Gu=a("li"),_se=a("strong"),a_o=o("lxmert"),n_o=o(" \u2014 "),WI=a("a"),s_o=o("LxmertModel"),l_o=o(" (LXMERT model)"),i_o=l(),Ou=a("li"),bse=a("strong"),d_o=o("m2m_100"),c_o=o(" \u2014 "),QI=a("a"),m_o=o("M2M100Model"),f_o=o(" (M2M100 model)"),g_o=l(),Vu=a("li"),vse=a("strong"),h_o=o("marian"),u_o=o(" \u2014 "),HI=a("a"),p_o=o("MarianModel"),__o=o(" (Marian model)"),b_o=l(),Xu=a("li"),Fse=a("strong"),v_o=o("maskformer"),F_o=o(" \u2014 "),UI=a("a"),T_o=o("MaskFormerModel"),M_o=o(" (MaskFormer model)"),E_o=l(),zu=a("li"),Tse=a("strong"),C_o=o("mbart"),w_o=o(" \u2014 "),JI=a("a"),A_o=o("MBartModel"),y_o=o(" (mBART model)"),L_o=l(),Wu=a("li"),Mse=a("strong"),x_o=o("megatron-bert"),$_o=o(" \u2014 "),YI=a("a"),k_o=o("MegatronBertModel"),S_o=o(" (MegatronBert model)"),R_o=l(),Qu=a("li"),Ese=a("strong"),P_o=o("mobilebert"),B_o=o(" \u2014 "),KI=a("a"),I_o=o("MobileBertModel"),q_o=o(" (MobileBERT model)"),N_o=l(),Hu=a("li"),Cse=a("strong"),j_o=o("mpnet"),D_o=o(" \u2014 "),ZI=a("a"),G_o=o("MPNetModel"),O_o=o(" (MPNet model)"),V_o=l(),Uu=a("li"),wse=a("strong"),X_o=o("mt5"),z_o=o(" \u2014 "),eq=a("a"),W_o=o("MT5Model"),Q_o=o(" (mT5 model)"),H_o=l(),Ju=a("li"),Ase=a("strong"),U_o=o("nystromformer"),J_o=o(" \u2014 "),oq=a("a"),Y_o=o("NystromformerModel"),K_o=o(" (Nystromformer model)"),Z_o=l(),Yu=a("li"),yse=a("strong"),ebo=o("openai-gpt"),obo=o(" \u2014 "),rq=a("a"),rbo=o("OpenAIGPTModel"),tbo=o(" (OpenAI GPT model)"),abo=l(),Ku=a("li"),Lse=a("strong"),nbo=o("opt"),sbo=o(" \u2014 "),tq=a("a"),lbo=o("OPTModel"),ibo=o(" (OPT model)"),dbo=l(),Zu=a("li"),xse=a("strong"),cbo=o("pegasus"),mbo=o(" \u2014 "),aq=a("a"),fbo=o("PegasusModel"),gbo=o(" (Pegasus model)"),hbo=l(),ep=a("li"),$se=a("strong"),ubo=o("perceiver"),pbo=o(" \u2014 "),nq=a("a"),_bo=o("PerceiverModel"),bbo=o(" (Perceiver model)"),vbo=l(),op=a("li"),kse=a("strong"),Fbo=o("plbart"),Tbo=o(" \u2014 "),sq=a("a"),Mbo=o("PLBartModel"),Ebo=o(" (PLBart model)"),Cbo=l(),rp=a("li"),Sse=a("strong"),wbo=o("poolformer"),Abo=o(" \u2014 "),lq=a("a"),ybo=o("PoolFormerModel"),Lbo=o(" (PoolFormer model)"),xbo=l(),tp=a("li"),Rse=a("strong"),$bo=o("prophetnet"),kbo=o(" \u2014 "),iq=a("a"),Sbo=o("ProphetNetModel"),Rbo=o(" (ProphetNet model)"),Pbo=l(),ap=a("li"),Pse=a("strong"),Bbo=o("qdqbert"),Ibo=o(" \u2014 "),dq=a("a"),qbo=o("QDQBertModel"),Nbo=o(" (QDQBert model)"),jbo=l(),np=a("li"),Bse=a("strong"),Dbo=o("reformer"),Gbo=o(" \u2014 "),cq=a("a"),Obo=o("ReformerModel"),Vbo=o(" (Reformer model)"),Xbo=l(),sp=a("li"),Ise=a("strong"),zbo=o("regnet"),Wbo=o(" \u2014 "),mq=a("a"),Qbo=o("RegNetModel"),Hbo=o(" (RegNet model)"),Ubo=l(),lp=a("li"),qse=a("strong"),Jbo=o("rembert"),Ybo=o(" \u2014 "),fq=a("a"),Kbo=o("RemBertModel"),Zbo=o(" (RemBERT model)"),e2o=l(),ip=a("li"),Nse=a("strong"),o2o=o("resnet"),r2o=o(" \u2014 "),gq=a("a"),t2o=o("ResNetModel"),a2o=o(" (ResNet model)"),n2o=l(),dp=a("li"),jse=a("strong"),s2o=o("retribert"),l2o=o(" \u2014 "),hq=a("a"),i2o=o("RetriBertModel"),d2o=o(" (RetriBERT model)"),c2o=l(),cp=a("li"),Dse=a("strong"),m2o=o("roberta"),f2o=o(" \u2014 "),uq=a("a"),g2o=o("RobertaModel"),h2o=o(" (RoBERTa model)"),u2o=l(),mp=a("li"),Gse=a("strong"),p2o=o("roformer"),_2o=o(" \u2014 "),pq=a("a"),b2o=o("RoFormerModel"),v2o=o(" (RoFormer model)"),F2o=l(),fp=a("li"),Ose=a("strong"),T2o=o("segformer"),M2o=o(" \u2014 "),_q=a("a"),E2o=o("SegformerModel"),C2o=o(" (SegFormer model)"),w2o=l(),gp=a("li"),Vse=a("strong"),A2o=o("sew"),y2o=o(" \u2014 "),bq=a("a"),L2o=o("SEWModel"),x2o=o(" (SEW model)"),$2o=l(),hp=a("li"),Xse=a("strong"),k2o=o("sew-d"),S2o=o(" \u2014 "),vq=a("a"),R2o=o("SEWDModel"),P2o=o(" (SEW-D model)"),B2o=l(),up=a("li"),zse=a("strong"),I2o=o("speech_to_text"),q2o=o(" \u2014 "),Fq=a("a"),N2o=o("Speech2TextModel"),j2o=o(" (Speech2Text model)"),D2o=l(),pp=a("li"),Wse=a("strong"),G2o=o("splinter"),O2o=o(" \u2014 "),Tq=a("a"),V2o=o("SplinterModel"),X2o=o(" (Splinter model)"),z2o=l(),_p=a("li"),Qse=a("strong"),W2o=o("squeezebert"),Q2o=o(" \u2014 "),Mq=a("a"),H2o=o("SqueezeBertModel"),U2o=o(" (SqueezeBERT model)"),J2o=l(),bp=a("li"),Hse=a("strong"),Y2o=o("swin"),K2o=o(" \u2014 "),Eq=a("a"),Z2o=o("SwinModel"),evo=o(" (Swin model)"),ovo=l(),vp=a("li"),Use=a("strong"),rvo=o("t5"),tvo=o(" \u2014 "),Cq=a("a"),avo=o("T5Model"),nvo=o(" (T5 model)"),svo=l(),Fp=a("li"),Jse=a("strong"),lvo=o("tapas"),ivo=o(" \u2014 "),wq=a("a"),dvo=o("TapasModel"),cvo=o(" (TAPAS model)"),mvo=l(),Tp=a("li"),Yse=a("strong"),fvo=o("transfo-xl"),gvo=o(" \u2014 "),Aq=a("a"),hvo=o("TransfoXLModel"),uvo=o(" (Transformer-XL model)"),pvo=l(),Mp=a("li"),Kse=a("strong"),_vo=o("unispeech"),bvo=o(" \u2014 "),yq=a("a"),vvo=o("UniSpeechModel"),Fvo=o(" (UniSpeech model)"),Tvo=l(),Ep=a("li"),Zse=a("strong"),Mvo=o("unispeech-sat"),Evo=o(" \u2014 "),Lq=a("a"),Cvo=o("UniSpeechSatModel"),wvo=o(" (UniSpeechSat model)"),Avo=l(),Cp=a("li"),ele=a("strong"),yvo=o("van"),Lvo=o(" \u2014 "),xq=a("a"),xvo=o("VanModel"),$vo=o(" (VAN model)"),kvo=l(),wp=a("li"),ole=a("strong"),Svo=o("vilt"),Rvo=o(" \u2014 "),$q=a("a"),Pvo=o("ViltModel"),Bvo=o(" (ViLT model)"),Ivo=l(),Ap=a("li"),rle=a("strong"),qvo=o("vision-text-dual-encoder"),Nvo=o(" \u2014 "),kq=a("a"),jvo=o("VisionTextDualEncoderModel"),Dvo=o(" (VisionTextDualEncoder model)"),Gvo=l(),yp=a("li"),tle=a("strong"),Ovo=o("visual_bert"),Vvo=o(" \u2014 "),Sq=a("a"),Xvo=o("VisualBertModel"),zvo=o(" (VisualBert model)"),Wvo=l(),Lp=a("li"),ale=a("strong"),Qvo=o("vit"),Hvo=o(" \u2014 "),Rq=a("a"),Uvo=o("ViTModel"),Jvo=o(" (ViT model)"),Yvo=l(),xp=a("li"),nle=a("strong"),Kvo=o("vit_mae"),Zvo=o(" \u2014 "),Pq=a("a"),eFo=o("ViTMAEModel"),oFo=o(" (ViTMAE model)"),rFo=l(),$p=a("li"),sle=a("strong"),tFo=o("wav2vec2"),aFo=o(" \u2014 "),Bq=a("a"),nFo=o("Wav2Vec2Model"),sFo=o(" (Wav2Vec2 model)"),lFo=l(),kp=a("li"),lle=a("strong"),iFo=o("wav2vec2-conformer"),dFo=o(" \u2014 "),Iq=a("a"),cFo=o("Wav2Vec2ConformerModel"),mFo=o(" (Wav2Vec2-Conformer model)"),fFo=l(),Sp=a("li"),ile=a("strong"),gFo=o("wavlm"),hFo=o(" \u2014 "),qq=a("a"),uFo=o("WavLMModel"),pFo=o(" (WavLM model)"),_Fo=l(),Rp=a("li"),dle=a("strong"),bFo=o("xglm"),vFo=o(" \u2014 "),Nq=a("a"),FFo=o("XGLMModel"),TFo=o(" (XGLM model)"),MFo=l(),Pp=a("li"),cle=a("strong"),EFo=o("xlm"),CFo=o(" \u2014 "),jq=a("a"),wFo=o("XLMModel"),AFo=o(" (XLM model)"),yFo=l(),Bp=a("li"),mle=a("strong"),LFo=o("xlm-prophetnet"),xFo=o(" \u2014 "),Dq=a("a"),$Fo=o("XLMProphetNetModel"),kFo=o(" (XLMProphetNet model)"),SFo=l(),Ip=a("li"),fle=a("strong"),RFo=o("xlm-roberta"),PFo=o(" \u2014 "),Gq=a("a"),BFo=o("XLMRobertaModel"),IFo=o(" (XLM-RoBERTa model)"),qFo=l(),qp=a("li"),gle=a("strong"),NFo=o("xlm-roberta-xl"),jFo=o(" \u2014 "),Oq=a("a"),DFo=o("XLMRobertaXLModel"),GFo=o(" (XLM-RoBERTa-XL model)"),OFo=l(),Np=a("li"),hle=a("strong"),VFo=o("xlnet"),XFo=o(" \u2014 "),Vq=a("a"),zFo=o("XLNetModel"),WFo=o(" (XLNet model)"),QFo=l(),jp=a("li"),ule=a("strong"),HFo=o("yolos"),UFo=o(" \u2014 "),Xq=a("a"),JFo=o("YolosModel"),YFo=o(" (YOLOS model)"),KFo=l(),Dp=a("li"),ple=a("strong"),ZFo=o("yoso"),e1o=o(" \u2014 "),zq=a("a"),o1o=o("YosoModel"),r1o=o(" (YOSO model)"),t1o=l(),Gp=a("p"),a1o=o("The model is set in evaluation mode by default using "),_le=a("code"),n1o=o("model.eval()"),s1o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ble=a("code"),l1o=o("model.train()"),i1o=l(),F(Op.$$.fragment),XIe=l(),yi=a("h2"),Vp=a("a"),vle=a("span"),F(jy.$$.fragment),d1o=l(),Fle=a("span"),c1o=o("AutoModelForPreTraining"),zIe=l(),xo=a("div"),F(Dy.$$.fragment),m1o=l(),Li=a("p"),f1o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Wq=a("a"),g1o=o("from_pretrained()"),h1o=o(" class method or the "),Qq=a("a"),u1o=o("from_config()"),p1o=o(` class
method.`),_1o=l(),Gy=a("p"),b1o=o("This class cannot be instantiated directly using "),Tle=a("code"),v1o=o("__init__()"),F1o=o(" (throws an error)."),T1o=l(),at=a("div"),F(Oy.$$.fragment),M1o=l(),Mle=a("p"),E1o=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),C1o=l(),xi=a("p"),w1o=o(`Note:
Loading a model from its configuration file does `),Ele=a("strong"),A1o=o("not"),y1o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Hq=a("a"),L1o=o("from_pretrained()"),x1o=o(" to load the model weights."),$1o=l(),F(Xp.$$.fragment),k1o=l(),Ye=a("div"),F(Vy.$$.fragment),S1o=l(),Cle=a("p"),R1o=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),P1o=l(),xa=a("p"),B1o=o("The model class to instantiate is selected based on the "),wle=a("code"),I1o=o("model_type"),q1o=o(` property of the config object (either
passed as an argument or loaded from `),Ale=a("code"),N1o=o("pretrained_model_name_or_path"),j1o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yle=a("code"),D1o=o("pretrained_model_name_or_path"),G1o=o(":"),O1o=l(),G=a("ul"),zp=a("li"),Lle=a("strong"),V1o=o("albert"),X1o=o(" \u2014 "),Uq=a("a"),z1o=o("AlbertForPreTraining"),W1o=o(" (ALBERT model)"),Q1o=l(),Wp=a("li"),xle=a("strong"),H1o=o("bart"),U1o=o(" \u2014 "),Jq=a("a"),J1o=o("BartForConditionalGeneration"),Y1o=o(" (BART model)"),K1o=l(),Qp=a("li"),$le=a("strong"),Z1o=o("bert"),eTo=o(" \u2014 "),Yq=a("a"),oTo=o("BertForPreTraining"),rTo=o(" (BERT model)"),tTo=l(),Hp=a("li"),kle=a("strong"),aTo=o("big_bird"),nTo=o(" \u2014 "),Kq=a("a"),sTo=o("BigBirdForPreTraining"),lTo=o(" (BigBird model)"),iTo=l(),Up=a("li"),Sle=a("strong"),dTo=o("camembert"),cTo=o(" \u2014 "),Zq=a("a"),mTo=o("CamembertForMaskedLM"),fTo=o(" (CamemBERT model)"),gTo=l(),Jp=a("li"),Rle=a("strong"),hTo=o("ctrl"),uTo=o(" \u2014 "),eN=a("a"),pTo=o("CTRLLMHeadModel"),_To=o(" (CTRL model)"),bTo=l(),Yp=a("li"),Ple=a("strong"),vTo=o("data2vec-text"),FTo=o(" \u2014 "),oN=a("a"),TTo=o("Data2VecTextForMaskedLM"),MTo=o(" (Data2VecText model)"),ETo=l(),Kp=a("li"),Ble=a("strong"),CTo=o("deberta"),wTo=o(" \u2014 "),rN=a("a"),ATo=o("DebertaForMaskedLM"),yTo=o(" (DeBERTa model)"),LTo=l(),Zp=a("li"),Ile=a("strong"),xTo=o("deberta-v2"),$To=o(" \u2014 "),tN=a("a"),kTo=o("DebertaV2ForMaskedLM"),STo=o(" (DeBERTa-v2 model)"),RTo=l(),e_=a("li"),qle=a("strong"),PTo=o("distilbert"),BTo=o(" \u2014 "),aN=a("a"),ITo=o("DistilBertForMaskedLM"),qTo=o(" (DistilBERT model)"),NTo=l(),o_=a("li"),Nle=a("strong"),jTo=o("electra"),DTo=o(" \u2014 "),nN=a("a"),GTo=o("ElectraForPreTraining"),OTo=o(" (ELECTRA model)"),VTo=l(),r_=a("li"),jle=a("strong"),XTo=o("flaubert"),zTo=o(" \u2014 "),sN=a("a"),WTo=o("FlaubertWithLMHeadModel"),QTo=o(" (FlauBERT model)"),HTo=l(),t_=a("li"),Dle=a("strong"),UTo=o("flava"),JTo=o(" \u2014 "),lN=a("a"),YTo=o("FlavaForPreTraining"),KTo=o(" (Flava model)"),ZTo=l(),a_=a("li"),Gle=a("strong"),eMo=o("fnet"),oMo=o(" \u2014 "),iN=a("a"),rMo=o("FNetForPreTraining"),tMo=o(" (FNet model)"),aMo=l(),n_=a("li"),Ole=a("strong"),nMo=o("fsmt"),sMo=o(" \u2014 "),dN=a("a"),lMo=o("FSMTForConditionalGeneration"),iMo=o(" (FairSeq Machine-Translation model)"),dMo=l(),s_=a("li"),Vle=a("strong"),cMo=o("funnel"),mMo=o(" \u2014 "),cN=a("a"),fMo=o("FunnelForPreTraining"),gMo=o(" (Funnel Transformer model)"),hMo=l(),l_=a("li"),Xle=a("strong"),uMo=o("gpt2"),pMo=o(" \u2014 "),mN=a("a"),_Mo=o("GPT2LMHeadModel"),bMo=o(" (OpenAI GPT-2 model)"),vMo=l(),i_=a("li"),zle=a("strong"),FMo=o("ibert"),TMo=o(" \u2014 "),fN=a("a"),MMo=o("IBertForMaskedLM"),EMo=o(" (I-BERT model)"),CMo=l(),d_=a("li"),Wle=a("strong"),wMo=o("layoutlm"),AMo=o(" \u2014 "),gN=a("a"),yMo=o("LayoutLMForMaskedLM"),LMo=o(" (LayoutLM model)"),xMo=l(),c_=a("li"),Qle=a("strong"),$Mo=o("longformer"),kMo=o(" \u2014 "),hN=a("a"),SMo=o("LongformerForMaskedLM"),RMo=o(" (Longformer model)"),PMo=l(),m_=a("li"),Hle=a("strong"),BMo=o("lxmert"),IMo=o(" \u2014 "),uN=a("a"),qMo=o("LxmertForPreTraining"),NMo=o(" (LXMERT model)"),jMo=l(),f_=a("li"),Ule=a("strong"),DMo=o("megatron-bert"),GMo=o(" \u2014 "),pN=a("a"),OMo=o("MegatronBertForPreTraining"),VMo=o(" (MegatronBert model)"),XMo=l(),g_=a("li"),Jle=a("strong"),zMo=o("mobilebert"),WMo=o(" \u2014 "),_N=a("a"),QMo=o("MobileBertForPreTraining"),HMo=o(" (MobileBERT model)"),UMo=l(),h_=a("li"),Yle=a("strong"),JMo=o("mpnet"),YMo=o(" \u2014 "),bN=a("a"),KMo=o("MPNetForMaskedLM"),ZMo=o(" (MPNet model)"),e4o=l(),u_=a("li"),Kle=a("strong"),o4o=o("openai-gpt"),r4o=o(" \u2014 "),vN=a("a"),t4o=o("OpenAIGPTLMHeadModel"),a4o=o(" (OpenAI GPT model)"),n4o=l(),p_=a("li"),Zle=a("strong"),s4o=o("retribert"),l4o=o(" \u2014 "),FN=a("a"),i4o=o("RetriBertModel"),d4o=o(" (RetriBERT model)"),c4o=l(),__=a("li"),eie=a("strong"),m4o=o("roberta"),f4o=o(" \u2014 "),TN=a("a"),g4o=o("RobertaForMaskedLM"),h4o=o(" (RoBERTa model)"),u4o=l(),b_=a("li"),oie=a("strong"),p4o=o("splinter"),_4o=o(" \u2014 "),MN=a("a"),b4o=o("SplinterForPreTraining"),v4o=o(" (Splinter model)"),F4o=l(),v_=a("li"),rie=a("strong"),T4o=o("squeezebert"),M4o=o(" \u2014 "),EN=a("a"),E4o=o("SqueezeBertForMaskedLM"),C4o=o(" (SqueezeBERT model)"),w4o=l(),F_=a("li"),tie=a("strong"),A4o=o("t5"),y4o=o(" \u2014 "),CN=a("a"),L4o=o("T5ForConditionalGeneration"),x4o=o(" (T5 model)"),$4o=l(),T_=a("li"),aie=a("strong"),k4o=o("tapas"),S4o=o(" \u2014 "),wN=a("a"),R4o=o("TapasForMaskedLM"),P4o=o(" (TAPAS model)"),B4o=l(),M_=a("li"),nie=a("strong"),I4o=o("transfo-xl"),q4o=o(" \u2014 "),AN=a("a"),N4o=o("TransfoXLLMHeadModel"),j4o=o(" (Transformer-XL model)"),D4o=l(),E_=a("li"),sie=a("strong"),G4o=o("unispeech"),O4o=o(" \u2014 "),yN=a("a"),V4o=o("UniSpeechForPreTraining"),X4o=o(" (UniSpeech model)"),z4o=l(),C_=a("li"),lie=a("strong"),W4o=o("unispeech-sat"),Q4o=o(" \u2014 "),LN=a("a"),H4o=o("UniSpeechSatForPreTraining"),U4o=o(" (UniSpeechSat model)"),J4o=l(),w_=a("li"),iie=a("strong"),Y4o=o("visual_bert"),K4o=o(" \u2014 "),xN=a("a"),Z4o=o("VisualBertForPreTraining"),eEo=o(" (VisualBert model)"),oEo=l(),A_=a("li"),die=a("strong"),rEo=o("vit_mae"),tEo=o(" \u2014 "),$N=a("a"),aEo=o("ViTMAEForPreTraining"),nEo=o(" (ViTMAE model)"),sEo=l(),y_=a("li"),cie=a("strong"),lEo=o("wav2vec2"),iEo=o(" \u2014 "),kN=a("a"),dEo=o("Wav2Vec2ForPreTraining"),cEo=o(" (Wav2Vec2 model)"),mEo=l(),L_=a("li"),mie=a("strong"),fEo=o("wav2vec2-conformer"),gEo=o(" \u2014 "),SN=a("a"),hEo=o("Wav2Vec2ConformerForPreTraining"),uEo=o(" (Wav2Vec2-Conformer model)"),pEo=l(),x_=a("li"),fie=a("strong"),_Eo=o("xlm"),bEo=o(" \u2014 "),RN=a("a"),vEo=o("XLMWithLMHeadModel"),FEo=o(" (XLM model)"),TEo=l(),$_=a("li"),gie=a("strong"),MEo=o("xlm-roberta"),EEo=o(" \u2014 "),PN=a("a"),CEo=o("XLMRobertaForMaskedLM"),wEo=o(" (XLM-RoBERTa model)"),AEo=l(),k_=a("li"),hie=a("strong"),yEo=o("xlm-roberta-xl"),LEo=o(" \u2014 "),BN=a("a"),xEo=o("XLMRobertaXLForMaskedLM"),$Eo=o(" (XLM-RoBERTa-XL model)"),kEo=l(),S_=a("li"),uie=a("strong"),SEo=o("xlnet"),REo=o(" \u2014 "),IN=a("a"),PEo=o("XLNetLMHeadModel"),BEo=o(" (XLNet model)"),IEo=l(),R_=a("p"),qEo=o("The model is set in evaluation mode by default using "),pie=a("code"),NEo=o("model.eval()"),jEo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_ie=a("code"),DEo=o("model.train()"),GEo=l(),F(P_.$$.fragment),WIe=l(),$i=a("h2"),B_=a("a"),bie=a("span"),F(Xy.$$.fragment),OEo=l(),vie=a("span"),VEo=o("AutoModelForCausalLM"),QIe=l(),$o=a("div"),F(zy.$$.fragment),XEo=l(),ki=a("p"),zEo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),qN=a("a"),WEo=o("from_pretrained()"),QEo=o(" class method or the "),NN=a("a"),HEo=o("from_config()"),UEo=o(` class
method.`),JEo=l(),Wy=a("p"),YEo=o("This class cannot be instantiated directly using "),Fie=a("code"),KEo=o("__init__()"),ZEo=o(" (throws an error)."),eCo=l(),nt=a("div"),F(Qy.$$.fragment),oCo=l(),Tie=a("p"),rCo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),tCo=l(),Si=a("p"),aCo=o(`Note:
Loading a model from its configuration file does `),Mie=a("strong"),nCo=o("not"),sCo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jN=a("a"),lCo=o("from_pretrained()"),iCo=o(" to load the model weights."),dCo=l(),F(I_.$$.fragment),cCo=l(),Ke=a("div"),F(Hy.$$.fragment),mCo=l(),Eie=a("p"),fCo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),gCo=l(),$a=a("p"),hCo=o("The model class to instantiate is selected based on the "),Cie=a("code"),uCo=o("model_type"),pCo=o(` property of the config object (either
passed as an argument or loaded from `),wie=a("code"),_Co=o("pretrained_model_name_or_path"),bCo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Aie=a("code"),vCo=o("pretrained_model_name_or_path"),FCo=o(":"),TCo=l(),z=a("ul"),q_=a("li"),yie=a("strong"),MCo=o("bart"),ECo=o(" \u2014 "),DN=a("a"),CCo=o("BartForCausalLM"),wCo=o(" (BART model)"),ACo=l(),N_=a("li"),Lie=a("strong"),yCo=o("bert"),LCo=o(" \u2014 "),GN=a("a"),xCo=o("BertLMHeadModel"),$Co=o(" (BERT model)"),kCo=l(),j_=a("li"),xie=a("strong"),SCo=o("bert-generation"),RCo=o(" \u2014 "),ON=a("a"),PCo=o("BertGenerationDecoder"),BCo=o(" (Bert Generation model)"),ICo=l(),D_=a("li"),$ie=a("strong"),qCo=o("big_bird"),NCo=o(" \u2014 "),VN=a("a"),jCo=o("BigBirdForCausalLM"),DCo=o(" (BigBird model)"),GCo=l(),G_=a("li"),kie=a("strong"),OCo=o("bigbird_pegasus"),VCo=o(" \u2014 "),XN=a("a"),XCo=o("BigBirdPegasusForCausalLM"),zCo=o(" (BigBirdPegasus model)"),WCo=l(),O_=a("li"),Sie=a("strong"),QCo=o("blenderbot"),HCo=o(" \u2014 "),zN=a("a"),UCo=o("BlenderbotForCausalLM"),JCo=o(" (Blenderbot model)"),YCo=l(),V_=a("li"),Rie=a("strong"),KCo=o("blenderbot-small"),ZCo=o(" \u2014 "),WN=a("a"),e5o=o("BlenderbotSmallForCausalLM"),o5o=o(" (BlenderbotSmall model)"),r5o=l(),X_=a("li"),Pie=a("strong"),t5o=o("camembert"),a5o=o(" \u2014 "),QN=a("a"),n5o=o("CamembertForCausalLM"),s5o=o(" (CamemBERT model)"),l5o=l(),z_=a("li"),Bie=a("strong"),i5o=o("ctrl"),d5o=o(" \u2014 "),HN=a("a"),c5o=o("CTRLLMHeadModel"),m5o=o(" (CTRL model)"),f5o=l(),W_=a("li"),Iie=a("strong"),g5o=o("data2vec-text"),h5o=o(" \u2014 "),UN=a("a"),u5o=o("Data2VecTextForCausalLM"),p5o=o(" (Data2VecText model)"),_5o=l(),Q_=a("li"),qie=a("strong"),b5o=o("electra"),v5o=o(" \u2014 "),JN=a("a"),F5o=o("ElectraForCausalLM"),T5o=o(" (ELECTRA model)"),M5o=l(),H_=a("li"),Nie=a("strong"),E5o=o("gpt2"),C5o=o(" \u2014 "),YN=a("a"),w5o=o("GPT2LMHeadModel"),A5o=o(" (OpenAI GPT-2 model)"),y5o=l(),U_=a("li"),jie=a("strong"),L5o=o("gpt_neo"),x5o=o(" \u2014 "),KN=a("a"),$5o=o("GPTNeoForCausalLM"),k5o=o(" (GPT Neo model)"),S5o=l(),J_=a("li"),Die=a("strong"),R5o=o("gptj"),P5o=o(" \u2014 "),ZN=a("a"),B5o=o("GPTJForCausalLM"),I5o=o(" (GPT-J model)"),q5o=l(),Y_=a("li"),Gie=a("strong"),N5o=o("marian"),j5o=o(" \u2014 "),ej=a("a"),D5o=o("MarianForCausalLM"),G5o=o(" (Marian model)"),O5o=l(),K_=a("li"),Oie=a("strong"),V5o=o("mbart"),X5o=o(" \u2014 "),oj=a("a"),z5o=o("MBartForCausalLM"),W5o=o(" (mBART model)"),Q5o=l(),Z_=a("li"),Vie=a("strong"),H5o=o("megatron-bert"),U5o=o(" \u2014 "),rj=a("a"),J5o=o("MegatronBertForCausalLM"),Y5o=o(" (MegatronBert model)"),K5o=l(),eb=a("li"),Xie=a("strong"),Z5o=o("openai-gpt"),e3o=o(" \u2014 "),tj=a("a"),o3o=o("OpenAIGPTLMHeadModel"),r3o=o(" (OpenAI GPT model)"),t3o=l(),ob=a("li"),zie=a("strong"),a3o=o("opt"),n3o=o(" \u2014 "),aj=a("a"),s3o=o("OPTForCausalLM"),l3o=o(" (OPT model)"),i3o=l(),rb=a("li"),Wie=a("strong"),d3o=o("pegasus"),c3o=o(" \u2014 "),nj=a("a"),m3o=o("PegasusForCausalLM"),f3o=o(" (Pegasus model)"),g3o=l(),tb=a("li"),Qie=a("strong"),h3o=o("plbart"),u3o=o(" \u2014 "),sj=a("a"),p3o=o("PLBartForCausalLM"),_3o=o(" (PLBart model)"),b3o=l(),ab=a("li"),Hie=a("strong"),v3o=o("prophetnet"),F3o=o(" \u2014 "),lj=a("a"),T3o=o("ProphetNetForCausalLM"),M3o=o(" (ProphetNet model)"),E3o=l(),nb=a("li"),Uie=a("strong"),C3o=o("qdqbert"),w3o=o(" \u2014 "),ij=a("a"),A3o=o("QDQBertLMHeadModel"),y3o=o(" (QDQBert model)"),L3o=l(),sb=a("li"),Jie=a("strong"),x3o=o("reformer"),$3o=o(" \u2014 "),dj=a("a"),k3o=o("ReformerModelWithLMHead"),S3o=o(" (Reformer model)"),R3o=l(),lb=a("li"),Yie=a("strong"),P3o=o("rembert"),B3o=o(" \u2014 "),cj=a("a"),I3o=o("RemBertForCausalLM"),q3o=o(" (RemBERT model)"),N3o=l(),ib=a("li"),Kie=a("strong"),j3o=o("roberta"),D3o=o(" \u2014 "),mj=a("a"),G3o=o("RobertaForCausalLM"),O3o=o(" (RoBERTa model)"),V3o=l(),db=a("li"),Zie=a("strong"),X3o=o("roformer"),z3o=o(" \u2014 "),fj=a("a"),W3o=o("RoFormerForCausalLM"),Q3o=o(" (RoFormer model)"),H3o=l(),cb=a("li"),ede=a("strong"),U3o=o("speech_to_text_2"),J3o=o(" \u2014 "),gj=a("a"),Y3o=o("Speech2Text2ForCausalLM"),K3o=o(" (Speech2Text2 model)"),Z3o=l(),mb=a("li"),ode=a("strong"),ewo=o("transfo-xl"),owo=o(" \u2014 "),hj=a("a"),rwo=o("TransfoXLLMHeadModel"),two=o(" (Transformer-XL model)"),awo=l(),fb=a("li"),rde=a("strong"),nwo=o("trocr"),swo=o(" \u2014 "),uj=a("a"),lwo=o("TrOCRForCausalLM"),iwo=o(" (TrOCR model)"),dwo=l(),gb=a("li"),tde=a("strong"),cwo=o("xglm"),mwo=o(" \u2014 "),pj=a("a"),fwo=o("XGLMForCausalLM"),gwo=o(" (XGLM model)"),hwo=l(),hb=a("li"),ade=a("strong"),uwo=o("xlm"),pwo=o(" \u2014 "),_j=a("a"),_wo=o("XLMWithLMHeadModel"),bwo=o(" (XLM model)"),vwo=l(),ub=a("li"),nde=a("strong"),Fwo=o("xlm-prophetnet"),Two=o(" \u2014 "),bj=a("a"),Mwo=o("XLMProphetNetForCausalLM"),Ewo=o(" (XLMProphetNet model)"),Cwo=l(),pb=a("li"),sde=a("strong"),wwo=o("xlm-roberta"),Awo=o(" \u2014 "),vj=a("a"),ywo=o("XLMRobertaForCausalLM"),Lwo=o(" (XLM-RoBERTa model)"),xwo=l(),_b=a("li"),lde=a("strong"),$wo=o("xlm-roberta-xl"),kwo=o(" \u2014 "),Fj=a("a"),Swo=o("XLMRobertaXLForCausalLM"),Rwo=o(" (XLM-RoBERTa-XL model)"),Pwo=l(),bb=a("li"),ide=a("strong"),Bwo=o("xlnet"),Iwo=o(" \u2014 "),Tj=a("a"),qwo=o("XLNetLMHeadModel"),Nwo=o(" (XLNet model)"),jwo=l(),vb=a("p"),Dwo=o("The model is set in evaluation mode by default using "),dde=a("code"),Gwo=o("model.eval()"),Owo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cde=a("code"),Vwo=o("model.train()"),Xwo=l(),F(Fb.$$.fragment),HIe=l(),Ri=a("h2"),Tb=a("a"),mde=a("span"),F(Uy.$$.fragment),zwo=l(),fde=a("span"),Wwo=o("AutoModelForMaskedLM"),UIe=l(),ko=a("div"),F(Jy.$$.fragment),Qwo=l(),Pi=a("p"),Hwo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Mj=a("a"),Uwo=o("from_pretrained()"),Jwo=o(" class method or the "),Ej=a("a"),Ywo=o("from_config()"),Kwo=o(` class
method.`),Zwo=l(),Yy=a("p"),eAo=o("This class cannot be instantiated directly using "),gde=a("code"),oAo=o("__init__()"),rAo=o(" (throws an error)."),tAo=l(),st=a("div"),F(Ky.$$.fragment),aAo=l(),hde=a("p"),nAo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),sAo=l(),Bi=a("p"),lAo=o(`Note:
Loading a model from its configuration file does `),ude=a("strong"),iAo=o("not"),dAo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Cj=a("a"),cAo=o("from_pretrained()"),mAo=o(" to load the model weights."),fAo=l(),F(Mb.$$.fragment),gAo=l(),Ze=a("div"),F(Zy.$$.fragment),hAo=l(),pde=a("p"),uAo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),pAo=l(),ka=a("p"),_Ao=o("The model class to instantiate is selected based on the "),_de=a("code"),bAo=o("model_type"),vAo=o(` property of the config object (either
passed as an argument or loaded from `),bde=a("code"),FAo=o("pretrained_model_name_or_path"),TAo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vde=a("code"),MAo=o("pretrained_model_name_or_path"),EAo=o(":"),CAo=l(),W=a("ul"),Eb=a("li"),Fde=a("strong"),wAo=o("albert"),AAo=o(" \u2014 "),wj=a("a"),yAo=o("AlbertForMaskedLM"),LAo=o(" (ALBERT model)"),xAo=l(),Cb=a("li"),Tde=a("strong"),$Ao=o("bart"),kAo=o(" \u2014 "),Aj=a("a"),SAo=o("BartForConditionalGeneration"),RAo=o(" (BART model)"),PAo=l(),wb=a("li"),Mde=a("strong"),BAo=o("bert"),IAo=o(" \u2014 "),yj=a("a"),qAo=o("BertForMaskedLM"),NAo=o(" (BERT model)"),jAo=l(),Ab=a("li"),Ede=a("strong"),DAo=o("big_bird"),GAo=o(" \u2014 "),Lj=a("a"),OAo=o("BigBirdForMaskedLM"),VAo=o(" (BigBird model)"),XAo=l(),yb=a("li"),Cde=a("strong"),zAo=o("camembert"),WAo=o(" \u2014 "),xj=a("a"),QAo=o("CamembertForMaskedLM"),HAo=o(" (CamemBERT model)"),UAo=l(),Lb=a("li"),wde=a("strong"),JAo=o("convbert"),YAo=o(" \u2014 "),$j=a("a"),KAo=o("ConvBertForMaskedLM"),ZAo=o(" (ConvBERT model)"),e6o=l(),xb=a("li"),Ade=a("strong"),o6o=o("data2vec-text"),r6o=o(" \u2014 "),kj=a("a"),t6o=o("Data2VecTextForMaskedLM"),a6o=o(" (Data2VecText model)"),n6o=l(),$b=a("li"),yde=a("strong"),s6o=o("deberta"),l6o=o(" \u2014 "),Sj=a("a"),i6o=o("DebertaForMaskedLM"),d6o=o(" (DeBERTa model)"),c6o=l(),kb=a("li"),Lde=a("strong"),m6o=o("deberta-v2"),f6o=o(" \u2014 "),Rj=a("a"),g6o=o("DebertaV2ForMaskedLM"),h6o=o(" (DeBERTa-v2 model)"),u6o=l(),Sb=a("li"),xde=a("strong"),p6o=o("distilbert"),_6o=o(" \u2014 "),Pj=a("a"),b6o=o("DistilBertForMaskedLM"),v6o=o(" (DistilBERT model)"),F6o=l(),Rb=a("li"),$de=a("strong"),T6o=o("electra"),M6o=o(" \u2014 "),Bj=a("a"),E6o=o("ElectraForMaskedLM"),C6o=o(" (ELECTRA model)"),w6o=l(),Pb=a("li"),kde=a("strong"),A6o=o("flaubert"),y6o=o(" \u2014 "),Ij=a("a"),L6o=o("FlaubertWithLMHeadModel"),x6o=o(" (FlauBERT model)"),$6o=l(),Bb=a("li"),Sde=a("strong"),k6o=o("fnet"),S6o=o(" \u2014 "),qj=a("a"),R6o=o("FNetForMaskedLM"),P6o=o(" (FNet model)"),B6o=l(),Ib=a("li"),Rde=a("strong"),I6o=o("funnel"),q6o=o(" \u2014 "),Nj=a("a"),N6o=o("FunnelForMaskedLM"),j6o=o(" (Funnel Transformer model)"),D6o=l(),qb=a("li"),Pde=a("strong"),G6o=o("ibert"),O6o=o(" \u2014 "),jj=a("a"),V6o=o("IBertForMaskedLM"),X6o=o(" (I-BERT model)"),z6o=l(),Nb=a("li"),Bde=a("strong"),W6o=o("layoutlm"),Q6o=o(" \u2014 "),Dj=a("a"),H6o=o("LayoutLMForMaskedLM"),U6o=o(" (LayoutLM model)"),J6o=l(),jb=a("li"),Ide=a("strong"),Y6o=o("longformer"),K6o=o(" \u2014 "),Gj=a("a"),Z6o=o("LongformerForMaskedLM"),e0o=o(" (Longformer model)"),o0o=l(),Db=a("li"),qde=a("strong"),r0o=o("mbart"),t0o=o(" \u2014 "),Oj=a("a"),a0o=o("MBartForConditionalGeneration"),n0o=o(" (mBART model)"),s0o=l(),Gb=a("li"),Nde=a("strong"),l0o=o("megatron-bert"),i0o=o(" \u2014 "),Vj=a("a"),d0o=o("MegatronBertForMaskedLM"),c0o=o(" (MegatronBert model)"),m0o=l(),Ob=a("li"),jde=a("strong"),f0o=o("mobilebert"),g0o=o(" \u2014 "),Xj=a("a"),h0o=o("MobileBertForMaskedLM"),u0o=o(" (MobileBERT model)"),p0o=l(),Vb=a("li"),Dde=a("strong"),_0o=o("mpnet"),b0o=o(" \u2014 "),zj=a("a"),v0o=o("MPNetForMaskedLM"),F0o=o(" (MPNet model)"),T0o=l(),Xb=a("li"),Gde=a("strong"),M0o=o("nystromformer"),E0o=o(" \u2014 "),Wj=a("a"),C0o=o("NystromformerForMaskedLM"),w0o=o(" (Nystromformer model)"),A0o=l(),zb=a("li"),Ode=a("strong"),y0o=o("perceiver"),L0o=o(" \u2014 "),Qj=a("a"),x0o=o("PerceiverForMaskedLM"),$0o=o(" (Perceiver model)"),k0o=l(),Wb=a("li"),Vde=a("strong"),S0o=o("qdqbert"),R0o=o(" \u2014 "),Hj=a("a"),P0o=o("QDQBertForMaskedLM"),B0o=o(" (QDQBert model)"),I0o=l(),Qb=a("li"),Xde=a("strong"),q0o=o("reformer"),N0o=o(" \u2014 "),Uj=a("a"),j0o=o("ReformerForMaskedLM"),D0o=o(" (Reformer model)"),G0o=l(),Hb=a("li"),zde=a("strong"),O0o=o("rembert"),V0o=o(" \u2014 "),Jj=a("a"),X0o=o("RemBertForMaskedLM"),z0o=o(" (RemBERT model)"),W0o=l(),Ub=a("li"),Wde=a("strong"),Q0o=o("roberta"),H0o=o(" \u2014 "),Yj=a("a"),U0o=o("RobertaForMaskedLM"),J0o=o(" (RoBERTa model)"),Y0o=l(),Jb=a("li"),Qde=a("strong"),K0o=o("roformer"),Z0o=o(" \u2014 "),Kj=a("a"),eyo=o("RoFormerForMaskedLM"),oyo=o(" (RoFormer model)"),ryo=l(),Yb=a("li"),Hde=a("strong"),tyo=o("squeezebert"),ayo=o(" \u2014 "),Zj=a("a"),nyo=o("SqueezeBertForMaskedLM"),syo=o(" (SqueezeBERT model)"),lyo=l(),Kb=a("li"),Ude=a("strong"),iyo=o("tapas"),dyo=o(" \u2014 "),eD=a("a"),cyo=o("TapasForMaskedLM"),myo=o(" (TAPAS model)"),fyo=l(),Zb=a("li"),Jde=a("strong"),gyo=o("wav2vec2"),hyo=o(" \u2014 "),Yde=a("code"),uyo=o("Wav2Vec2ForMaskedLM"),pyo=o(" (Wav2Vec2 model)"),_yo=l(),e2=a("li"),Kde=a("strong"),byo=o("xlm"),vyo=o(" \u2014 "),oD=a("a"),Fyo=o("XLMWithLMHeadModel"),Tyo=o(" (XLM model)"),Myo=l(),o2=a("li"),Zde=a("strong"),Eyo=o("xlm-roberta"),Cyo=o(" \u2014 "),rD=a("a"),wyo=o("XLMRobertaForMaskedLM"),Ayo=o(" (XLM-RoBERTa model)"),yyo=l(),r2=a("li"),ece=a("strong"),Lyo=o("xlm-roberta-xl"),xyo=o(" \u2014 "),tD=a("a"),$yo=o("XLMRobertaXLForMaskedLM"),kyo=o(" (XLM-RoBERTa-XL model)"),Syo=l(),t2=a("li"),oce=a("strong"),Ryo=o("yoso"),Pyo=o(" \u2014 "),aD=a("a"),Byo=o("YosoForMaskedLM"),Iyo=o(" (YOSO model)"),qyo=l(),a2=a("p"),Nyo=o("The model is set in evaluation mode by default using "),rce=a("code"),jyo=o("model.eval()"),Dyo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tce=a("code"),Gyo=o("model.train()"),Oyo=l(),F(n2.$$.fragment),JIe=l(),Ii=a("h2"),s2=a("a"),ace=a("span"),F(eL.$$.fragment),Vyo=l(),nce=a("span"),Xyo=o("AutoModelForSeq2SeqLM"),YIe=l(),So=a("div"),F(oL.$$.fragment),zyo=l(),qi=a("p"),Wyo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),nD=a("a"),Qyo=o("from_pretrained()"),Hyo=o(" class method or the "),sD=a("a"),Uyo=o("from_config()"),Jyo=o(` class
method.`),Yyo=l(),rL=a("p"),Kyo=o("This class cannot be instantiated directly using "),sce=a("code"),Zyo=o("__init__()"),eLo=o(" (throws an error)."),oLo=l(),lt=a("div"),F(tL.$$.fragment),rLo=l(),lce=a("p"),tLo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),aLo=l(),Ni=a("p"),nLo=o(`Note:
Loading a model from its configuration file does `),ice=a("strong"),sLo=o("not"),lLo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lD=a("a"),iLo=o("from_pretrained()"),dLo=o(" to load the model weights."),cLo=l(),F(l2.$$.fragment),mLo=l(),eo=a("div"),F(aL.$$.fragment),fLo=l(),dce=a("p"),gLo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),hLo=l(),Sa=a("p"),uLo=o("The model class to instantiate is selected based on the "),cce=a("code"),pLo=o("model_type"),_Lo=o(` property of the config object (either
passed as an argument or loaded from `),mce=a("code"),bLo=o("pretrained_model_name_or_path"),vLo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fce=a("code"),FLo=o("pretrained_model_name_or_path"),TLo=o(":"),MLo=l(),pe=a("ul"),i2=a("li"),gce=a("strong"),ELo=o("bart"),CLo=o(" \u2014 "),iD=a("a"),wLo=o("BartForConditionalGeneration"),ALo=o(" (BART model)"),yLo=l(),d2=a("li"),hce=a("strong"),LLo=o("bigbird_pegasus"),xLo=o(" \u2014 "),dD=a("a"),$Lo=o("BigBirdPegasusForConditionalGeneration"),kLo=o(" (BigBirdPegasus model)"),SLo=l(),c2=a("li"),uce=a("strong"),RLo=o("blenderbot"),PLo=o(" \u2014 "),cD=a("a"),BLo=o("BlenderbotForConditionalGeneration"),ILo=o(" (Blenderbot model)"),qLo=l(),m2=a("li"),pce=a("strong"),NLo=o("blenderbot-small"),jLo=o(" \u2014 "),mD=a("a"),DLo=o("BlenderbotSmallForConditionalGeneration"),GLo=o(" (BlenderbotSmall model)"),OLo=l(),f2=a("li"),_ce=a("strong"),VLo=o("encoder-decoder"),XLo=o(" \u2014 "),fD=a("a"),zLo=o("EncoderDecoderModel"),WLo=o(" (Encoder decoder model)"),QLo=l(),g2=a("li"),bce=a("strong"),HLo=o("fsmt"),ULo=o(" \u2014 "),gD=a("a"),JLo=o("FSMTForConditionalGeneration"),YLo=o(" (FairSeq Machine-Translation model)"),KLo=l(),h2=a("li"),vce=a("strong"),ZLo=o("led"),e8o=o(" \u2014 "),hD=a("a"),o8o=o("LEDForConditionalGeneration"),r8o=o(" (LED model)"),t8o=l(),u2=a("li"),Fce=a("strong"),a8o=o("m2m_100"),n8o=o(" \u2014 "),uD=a("a"),s8o=o("M2M100ForConditionalGeneration"),l8o=o(" (M2M100 model)"),i8o=l(),p2=a("li"),Tce=a("strong"),d8o=o("marian"),c8o=o(" \u2014 "),pD=a("a"),m8o=o("MarianMTModel"),f8o=o(" (Marian model)"),g8o=l(),_2=a("li"),Mce=a("strong"),h8o=o("mbart"),u8o=o(" \u2014 "),_D=a("a"),p8o=o("MBartForConditionalGeneration"),_8o=o(" (mBART model)"),b8o=l(),b2=a("li"),Ece=a("strong"),v8o=o("mt5"),F8o=o(" \u2014 "),bD=a("a"),T8o=o("MT5ForConditionalGeneration"),M8o=o(" (mT5 model)"),E8o=l(),v2=a("li"),Cce=a("strong"),C8o=o("pegasus"),w8o=o(" \u2014 "),vD=a("a"),A8o=o("PegasusForConditionalGeneration"),y8o=o(" (Pegasus model)"),L8o=l(),F2=a("li"),wce=a("strong"),x8o=o("plbart"),$8o=o(" \u2014 "),FD=a("a"),k8o=o("PLBartForConditionalGeneration"),S8o=o(" (PLBart model)"),R8o=l(),T2=a("li"),Ace=a("strong"),P8o=o("prophetnet"),B8o=o(" \u2014 "),TD=a("a"),I8o=o("ProphetNetForConditionalGeneration"),q8o=o(" (ProphetNet model)"),N8o=l(),M2=a("li"),yce=a("strong"),j8o=o("t5"),D8o=o(" \u2014 "),MD=a("a"),G8o=o("T5ForConditionalGeneration"),O8o=o(" (T5 model)"),V8o=l(),E2=a("li"),Lce=a("strong"),X8o=o("xlm-prophetnet"),z8o=o(" \u2014 "),ED=a("a"),W8o=o("XLMProphetNetForConditionalGeneration"),Q8o=o(" (XLMProphetNet model)"),H8o=l(),C2=a("p"),U8o=o("The model is set in evaluation mode by default using "),xce=a("code"),J8o=o("model.eval()"),Y8o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$ce=a("code"),K8o=o("model.train()"),Z8o=l(),F(w2.$$.fragment),KIe=l(),ji=a("h2"),A2=a("a"),kce=a("span"),F(nL.$$.fragment),exo=l(),Sce=a("span"),oxo=o("AutoModelForSequenceClassification"),ZIe=l(),Ro=a("div"),F(sL.$$.fragment),rxo=l(),Di=a("p"),txo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),CD=a("a"),axo=o("from_pretrained()"),nxo=o(" class method or the "),wD=a("a"),sxo=o("from_config()"),lxo=o(` class
method.`),ixo=l(),lL=a("p"),dxo=o("This class cannot be instantiated directly using "),Rce=a("code"),cxo=o("__init__()"),mxo=o(" (throws an error)."),fxo=l(),it=a("div"),F(iL.$$.fragment),gxo=l(),Pce=a("p"),hxo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),uxo=l(),Gi=a("p"),pxo=o(`Note:
Loading a model from its configuration file does `),Bce=a("strong"),_xo=o("not"),bxo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),AD=a("a"),vxo=o("from_pretrained()"),Fxo=o(" to load the model weights."),Txo=l(),F(y2.$$.fragment),Mxo=l(),oo=a("div"),F(dL.$$.fragment),Exo=l(),Ice=a("p"),Cxo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),wxo=l(),Ra=a("p"),Axo=o("The model class to instantiate is selected based on the "),qce=a("code"),yxo=o("model_type"),Lxo=o(` property of the config object (either
passed as an argument or loaded from `),Nce=a("code"),xxo=o("pretrained_model_name_or_path"),$xo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jce=a("code"),kxo=o("pretrained_model_name_or_path"),Sxo=o(":"),Rxo=l(),q=a("ul"),L2=a("li"),Dce=a("strong"),Pxo=o("albert"),Bxo=o(" \u2014 "),yD=a("a"),Ixo=o("AlbertForSequenceClassification"),qxo=o(" (ALBERT model)"),Nxo=l(),x2=a("li"),Gce=a("strong"),jxo=o("bart"),Dxo=o(" \u2014 "),LD=a("a"),Gxo=o("BartForSequenceClassification"),Oxo=o(" (BART model)"),Vxo=l(),$2=a("li"),Oce=a("strong"),Xxo=o("bert"),zxo=o(" \u2014 "),xD=a("a"),Wxo=o("BertForSequenceClassification"),Qxo=o(" (BERT model)"),Hxo=l(),k2=a("li"),Vce=a("strong"),Uxo=o("big_bird"),Jxo=o(" \u2014 "),$D=a("a"),Yxo=o("BigBirdForSequenceClassification"),Kxo=o(" (BigBird model)"),Zxo=l(),S2=a("li"),Xce=a("strong"),e7o=o("bigbird_pegasus"),o7o=o(" \u2014 "),kD=a("a"),r7o=o("BigBirdPegasusForSequenceClassification"),t7o=o(" (BigBirdPegasus model)"),a7o=l(),R2=a("li"),zce=a("strong"),n7o=o("camembert"),s7o=o(" \u2014 "),SD=a("a"),l7o=o("CamembertForSequenceClassification"),i7o=o(" (CamemBERT model)"),d7o=l(),P2=a("li"),Wce=a("strong"),c7o=o("canine"),m7o=o(" \u2014 "),RD=a("a"),f7o=o("CanineForSequenceClassification"),g7o=o(" (Canine model)"),h7o=l(),B2=a("li"),Qce=a("strong"),u7o=o("convbert"),p7o=o(" \u2014 "),PD=a("a"),_7o=o("ConvBertForSequenceClassification"),b7o=o(" (ConvBERT model)"),v7o=l(),I2=a("li"),Hce=a("strong"),F7o=o("ctrl"),T7o=o(" \u2014 "),BD=a("a"),M7o=o("CTRLForSequenceClassification"),E7o=o(" (CTRL model)"),C7o=l(),q2=a("li"),Uce=a("strong"),w7o=o("data2vec-text"),A7o=o(" \u2014 "),ID=a("a"),y7o=o("Data2VecTextForSequenceClassification"),L7o=o(" (Data2VecText model)"),x7o=l(),N2=a("li"),Jce=a("strong"),$7o=o("deberta"),k7o=o(" \u2014 "),qD=a("a"),S7o=o("DebertaForSequenceClassification"),R7o=o(" (DeBERTa model)"),P7o=l(),j2=a("li"),Yce=a("strong"),B7o=o("deberta-v2"),I7o=o(" \u2014 "),ND=a("a"),q7o=o("DebertaV2ForSequenceClassification"),N7o=o(" (DeBERTa-v2 model)"),j7o=l(),D2=a("li"),Kce=a("strong"),D7o=o("distilbert"),G7o=o(" \u2014 "),jD=a("a"),O7o=o("DistilBertForSequenceClassification"),V7o=o(" (DistilBERT model)"),X7o=l(),G2=a("li"),Zce=a("strong"),z7o=o("electra"),W7o=o(" \u2014 "),DD=a("a"),Q7o=o("ElectraForSequenceClassification"),H7o=o(" (ELECTRA model)"),U7o=l(),O2=a("li"),eme=a("strong"),J7o=o("flaubert"),Y7o=o(" \u2014 "),GD=a("a"),K7o=o("FlaubertForSequenceClassification"),Z7o=o(" (FlauBERT model)"),e9o=l(),V2=a("li"),ome=a("strong"),o9o=o("fnet"),r9o=o(" \u2014 "),OD=a("a"),t9o=o("FNetForSequenceClassification"),a9o=o(" (FNet model)"),n9o=l(),X2=a("li"),rme=a("strong"),s9o=o("funnel"),l9o=o(" \u2014 "),VD=a("a"),i9o=o("FunnelForSequenceClassification"),d9o=o(" (Funnel Transformer model)"),c9o=l(),z2=a("li"),tme=a("strong"),m9o=o("gpt2"),f9o=o(" \u2014 "),XD=a("a"),g9o=o("GPT2ForSequenceClassification"),h9o=o(" (OpenAI GPT-2 model)"),u9o=l(),W2=a("li"),ame=a("strong"),p9o=o("gpt_neo"),_9o=o(" \u2014 "),zD=a("a"),b9o=o("GPTNeoForSequenceClassification"),v9o=o(" (GPT Neo model)"),F9o=l(),Q2=a("li"),nme=a("strong"),T9o=o("gptj"),M9o=o(" \u2014 "),WD=a("a"),E9o=o("GPTJForSequenceClassification"),C9o=o(" (GPT-J model)"),w9o=l(),H2=a("li"),sme=a("strong"),A9o=o("ibert"),y9o=o(" \u2014 "),QD=a("a"),L9o=o("IBertForSequenceClassification"),x9o=o(" (I-BERT model)"),$9o=l(),U2=a("li"),lme=a("strong"),k9o=o("layoutlm"),S9o=o(" \u2014 "),HD=a("a"),R9o=o("LayoutLMForSequenceClassification"),P9o=o(" (LayoutLM model)"),B9o=l(),J2=a("li"),ime=a("strong"),I9o=o("layoutlmv2"),q9o=o(" \u2014 "),UD=a("a"),N9o=o("LayoutLMv2ForSequenceClassification"),j9o=o(" (LayoutLMv2 model)"),D9o=l(),Y2=a("li"),dme=a("strong"),G9o=o("led"),O9o=o(" \u2014 "),JD=a("a"),V9o=o("LEDForSequenceClassification"),X9o=o(" (LED model)"),z9o=l(),K2=a("li"),cme=a("strong"),W9o=o("longformer"),Q9o=o(" \u2014 "),YD=a("a"),H9o=o("LongformerForSequenceClassification"),U9o=o(" (Longformer model)"),J9o=l(),Z2=a("li"),mme=a("strong"),Y9o=o("mbart"),K9o=o(" \u2014 "),KD=a("a"),Z9o=o("MBartForSequenceClassification"),e$o=o(" (mBART model)"),o$o=l(),ev=a("li"),fme=a("strong"),r$o=o("megatron-bert"),t$o=o(" \u2014 "),ZD=a("a"),a$o=o("MegatronBertForSequenceClassification"),n$o=o(" (MegatronBert model)"),s$o=l(),ov=a("li"),gme=a("strong"),l$o=o("mobilebert"),i$o=o(" \u2014 "),eG=a("a"),d$o=o("MobileBertForSequenceClassification"),c$o=o(" (MobileBERT model)"),m$o=l(),rv=a("li"),hme=a("strong"),f$o=o("mpnet"),g$o=o(" \u2014 "),oG=a("a"),h$o=o("MPNetForSequenceClassification"),u$o=o(" (MPNet model)"),p$o=l(),tv=a("li"),ume=a("strong"),_$o=o("nystromformer"),b$o=o(" \u2014 "),rG=a("a"),v$o=o("NystromformerForSequenceClassification"),F$o=o(" (Nystromformer model)"),T$o=l(),av=a("li"),pme=a("strong"),M$o=o("openai-gpt"),E$o=o(" \u2014 "),tG=a("a"),C$o=o("OpenAIGPTForSequenceClassification"),w$o=o(" (OpenAI GPT model)"),A$o=l(),nv=a("li"),_me=a("strong"),y$o=o("perceiver"),L$o=o(" \u2014 "),aG=a("a"),x$o=o("PerceiverForSequenceClassification"),$$o=o(" (Perceiver model)"),k$o=l(),sv=a("li"),bme=a("strong"),S$o=o("plbart"),R$o=o(" \u2014 "),nG=a("a"),P$o=o("PLBartForSequenceClassification"),B$o=o(" (PLBart model)"),I$o=l(),lv=a("li"),vme=a("strong"),q$o=o("qdqbert"),N$o=o(" \u2014 "),sG=a("a"),j$o=o("QDQBertForSequenceClassification"),D$o=o(" (QDQBert model)"),G$o=l(),iv=a("li"),Fme=a("strong"),O$o=o("reformer"),V$o=o(" \u2014 "),lG=a("a"),X$o=o("ReformerForSequenceClassification"),z$o=o(" (Reformer model)"),W$o=l(),dv=a("li"),Tme=a("strong"),Q$o=o("rembert"),H$o=o(" \u2014 "),iG=a("a"),U$o=o("RemBertForSequenceClassification"),J$o=o(" (RemBERT model)"),Y$o=l(),cv=a("li"),Mme=a("strong"),K$o=o("roberta"),Z$o=o(" \u2014 "),dG=a("a"),eko=o("RobertaForSequenceClassification"),oko=o(" (RoBERTa model)"),rko=l(),mv=a("li"),Eme=a("strong"),tko=o("roformer"),ako=o(" \u2014 "),cG=a("a"),nko=o("RoFormerForSequenceClassification"),sko=o(" (RoFormer model)"),lko=l(),fv=a("li"),Cme=a("strong"),iko=o("squeezebert"),dko=o(" \u2014 "),mG=a("a"),cko=o("SqueezeBertForSequenceClassification"),mko=o(" (SqueezeBERT model)"),fko=l(),gv=a("li"),wme=a("strong"),gko=o("tapas"),hko=o(" \u2014 "),fG=a("a"),uko=o("TapasForSequenceClassification"),pko=o(" (TAPAS model)"),_ko=l(),hv=a("li"),Ame=a("strong"),bko=o("transfo-xl"),vko=o(" \u2014 "),gG=a("a"),Fko=o("TransfoXLForSequenceClassification"),Tko=o(" (Transformer-XL model)"),Mko=l(),uv=a("li"),yme=a("strong"),Eko=o("xlm"),Cko=o(" \u2014 "),hG=a("a"),wko=o("XLMForSequenceClassification"),Ako=o(" (XLM model)"),yko=l(),pv=a("li"),Lme=a("strong"),Lko=o("xlm-roberta"),xko=o(" \u2014 "),uG=a("a"),$ko=o("XLMRobertaForSequenceClassification"),kko=o(" (XLM-RoBERTa model)"),Sko=l(),_v=a("li"),xme=a("strong"),Rko=o("xlm-roberta-xl"),Pko=o(" \u2014 "),pG=a("a"),Bko=o("XLMRobertaXLForSequenceClassification"),Iko=o(" (XLM-RoBERTa-XL model)"),qko=l(),bv=a("li"),$me=a("strong"),Nko=o("xlnet"),jko=o(" \u2014 "),_G=a("a"),Dko=o("XLNetForSequenceClassification"),Gko=o(" (XLNet model)"),Oko=l(),vv=a("li"),kme=a("strong"),Vko=o("yoso"),Xko=o(" \u2014 "),bG=a("a"),zko=o("YosoForSequenceClassification"),Wko=o(" (YOSO model)"),Qko=l(),Fv=a("p"),Hko=o("The model is set in evaluation mode by default using "),Sme=a("code"),Uko=o("model.eval()"),Jko=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rme=a("code"),Yko=o("model.train()"),Kko=l(),F(Tv.$$.fragment),eqe=l(),Oi=a("h2"),Mv=a("a"),Pme=a("span"),F(cL.$$.fragment),Zko=l(),Bme=a("span"),eSo=o("AutoModelForMultipleChoice"),oqe=l(),Po=a("div"),F(mL.$$.fragment),oSo=l(),Vi=a("p"),rSo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),vG=a("a"),tSo=o("from_pretrained()"),aSo=o(" class method or the "),FG=a("a"),nSo=o("from_config()"),sSo=o(` class
method.`),lSo=l(),fL=a("p"),iSo=o("This class cannot be instantiated directly using "),Ime=a("code"),dSo=o("__init__()"),cSo=o(" (throws an error)."),mSo=l(),dt=a("div"),F(gL.$$.fragment),fSo=l(),qme=a("p"),gSo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),hSo=l(),Xi=a("p"),uSo=o(`Note:
Loading a model from its configuration file does `),Nme=a("strong"),pSo=o("not"),_So=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TG=a("a"),bSo=o("from_pretrained()"),vSo=o(" to load the model weights."),FSo=l(),F(Ev.$$.fragment),TSo=l(),ro=a("div"),F(hL.$$.fragment),MSo=l(),jme=a("p"),ESo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),CSo=l(),Pa=a("p"),wSo=o("The model class to instantiate is selected based on the "),Dme=a("code"),ASo=o("model_type"),ySo=o(` property of the config object (either
passed as an argument or loaded from `),Gme=a("code"),LSo=o("pretrained_model_name_or_path"),xSo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ome=a("code"),$So=o("pretrained_model_name_or_path"),kSo=o(":"),SSo=l(),Y=a("ul"),Cv=a("li"),Vme=a("strong"),RSo=o("albert"),PSo=o(" \u2014 "),MG=a("a"),BSo=o("AlbertForMultipleChoice"),ISo=o(" (ALBERT model)"),qSo=l(),wv=a("li"),Xme=a("strong"),NSo=o("bert"),jSo=o(" \u2014 "),EG=a("a"),DSo=o("BertForMultipleChoice"),GSo=o(" (BERT model)"),OSo=l(),Av=a("li"),zme=a("strong"),VSo=o("big_bird"),XSo=o(" \u2014 "),CG=a("a"),zSo=o("BigBirdForMultipleChoice"),WSo=o(" (BigBird model)"),QSo=l(),yv=a("li"),Wme=a("strong"),HSo=o("camembert"),USo=o(" \u2014 "),wG=a("a"),JSo=o("CamembertForMultipleChoice"),YSo=o(" (CamemBERT model)"),KSo=l(),Lv=a("li"),Qme=a("strong"),ZSo=o("canine"),eRo=o(" \u2014 "),AG=a("a"),oRo=o("CanineForMultipleChoice"),rRo=o(" (Canine model)"),tRo=l(),xv=a("li"),Hme=a("strong"),aRo=o("convbert"),nRo=o(" \u2014 "),yG=a("a"),sRo=o("ConvBertForMultipleChoice"),lRo=o(" (ConvBERT model)"),iRo=l(),$v=a("li"),Ume=a("strong"),dRo=o("data2vec-text"),cRo=o(" \u2014 "),LG=a("a"),mRo=o("Data2VecTextForMultipleChoice"),fRo=o(" (Data2VecText model)"),gRo=l(),kv=a("li"),Jme=a("strong"),hRo=o("deberta-v2"),uRo=o(" \u2014 "),xG=a("a"),pRo=o("DebertaV2ForMultipleChoice"),_Ro=o(" (DeBERTa-v2 model)"),bRo=l(),Sv=a("li"),Yme=a("strong"),vRo=o("distilbert"),FRo=o(" \u2014 "),$G=a("a"),TRo=o("DistilBertForMultipleChoice"),MRo=o(" (DistilBERT model)"),ERo=l(),Rv=a("li"),Kme=a("strong"),CRo=o("electra"),wRo=o(" \u2014 "),kG=a("a"),ARo=o("ElectraForMultipleChoice"),yRo=o(" (ELECTRA model)"),LRo=l(),Pv=a("li"),Zme=a("strong"),xRo=o("flaubert"),$Ro=o(" \u2014 "),SG=a("a"),kRo=o("FlaubertForMultipleChoice"),SRo=o(" (FlauBERT model)"),RRo=l(),Bv=a("li"),efe=a("strong"),PRo=o("fnet"),BRo=o(" \u2014 "),RG=a("a"),IRo=o("FNetForMultipleChoice"),qRo=o(" (FNet model)"),NRo=l(),Iv=a("li"),ofe=a("strong"),jRo=o("funnel"),DRo=o(" \u2014 "),PG=a("a"),GRo=o("FunnelForMultipleChoice"),ORo=o(" (Funnel Transformer model)"),VRo=l(),qv=a("li"),rfe=a("strong"),XRo=o("ibert"),zRo=o(" \u2014 "),BG=a("a"),WRo=o("IBertForMultipleChoice"),QRo=o(" (I-BERT model)"),HRo=l(),Nv=a("li"),tfe=a("strong"),URo=o("longformer"),JRo=o(" \u2014 "),IG=a("a"),YRo=o("LongformerForMultipleChoice"),KRo=o(" (Longformer model)"),ZRo=l(),jv=a("li"),afe=a("strong"),ePo=o("megatron-bert"),oPo=o(" \u2014 "),qG=a("a"),rPo=o("MegatronBertForMultipleChoice"),tPo=o(" (MegatronBert model)"),aPo=l(),Dv=a("li"),nfe=a("strong"),nPo=o("mobilebert"),sPo=o(" \u2014 "),NG=a("a"),lPo=o("MobileBertForMultipleChoice"),iPo=o(" (MobileBERT model)"),dPo=l(),Gv=a("li"),sfe=a("strong"),cPo=o("mpnet"),mPo=o(" \u2014 "),jG=a("a"),fPo=o("MPNetForMultipleChoice"),gPo=o(" (MPNet model)"),hPo=l(),Ov=a("li"),lfe=a("strong"),uPo=o("nystromformer"),pPo=o(" \u2014 "),DG=a("a"),_Po=o("NystromformerForMultipleChoice"),bPo=o(" (Nystromformer model)"),vPo=l(),Vv=a("li"),ife=a("strong"),FPo=o("qdqbert"),TPo=o(" \u2014 "),GG=a("a"),MPo=o("QDQBertForMultipleChoice"),EPo=o(" (QDQBert model)"),CPo=l(),Xv=a("li"),dfe=a("strong"),wPo=o("rembert"),APo=o(" \u2014 "),OG=a("a"),yPo=o("RemBertForMultipleChoice"),LPo=o(" (RemBERT model)"),xPo=l(),zv=a("li"),cfe=a("strong"),$Po=o("roberta"),kPo=o(" \u2014 "),VG=a("a"),SPo=o("RobertaForMultipleChoice"),RPo=o(" (RoBERTa model)"),PPo=l(),Wv=a("li"),mfe=a("strong"),BPo=o("roformer"),IPo=o(" \u2014 "),XG=a("a"),qPo=o("RoFormerForMultipleChoice"),NPo=o(" (RoFormer model)"),jPo=l(),Qv=a("li"),ffe=a("strong"),DPo=o("squeezebert"),GPo=o(" \u2014 "),zG=a("a"),OPo=o("SqueezeBertForMultipleChoice"),VPo=o(" (SqueezeBERT model)"),XPo=l(),Hv=a("li"),gfe=a("strong"),zPo=o("xlm"),WPo=o(" \u2014 "),WG=a("a"),QPo=o("XLMForMultipleChoice"),HPo=o(" (XLM model)"),UPo=l(),Uv=a("li"),hfe=a("strong"),JPo=o("xlm-roberta"),YPo=o(" \u2014 "),QG=a("a"),KPo=o("XLMRobertaForMultipleChoice"),ZPo=o(" (XLM-RoBERTa model)"),eBo=l(),Jv=a("li"),ufe=a("strong"),oBo=o("xlm-roberta-xl"),rBo=o(" \u2014 "),HG=a("a"),tBo=o("XLMRobertaXLForMultipleChoice"),aBo=o(" (XLM-RoBERTa-XL model)"),nBo=l(),Yv=a("li"),pfe=a("strong"),sBo=o("xlnet"),lBo=o(" \u2014 "),UG=a("a"),iBo=o("XLNetForMultipleChoice"),dBo=o(" (XLNet model)"),cBo=l(),Kv=a("li"),_fe=a("strong"),mBo=o("yoso"),fBo=o(" \u2014 "),JG=a("a"),gBo=o("YosoForMultipleChoice"),hBo=o(" (YOSO model)"),uBo=l(),Zv=a("p"),pBo=o("The model is set in evaluation mode by default using "),bfe=a("code"),_Bo=o("model.eval()"),bBo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vfe=a("code"),vBo=o("model.train()"),FBo=l(),F(eF.$$.fragment),rqe=l(),zi=a("h2"),oF=a("a"),Ffe=a("span"),F(uL.$$.fragment),TBo=l(),Tfe=a("span"),MBo=o("AutoModelForNextSentencePrediction"),tqe=l(),Bo=a("div"),F(pL.$$.fragment),EBo=l(),Wi=a("p"),CBo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),YG=a("a"),wBo=o("from_pretrained()"),ABo=o(" class method or the "),KG=a("a"),yBo=o("from_config()"),LBo=o(` class
method.`),xBo=l(),_L=a("p"),$Bo=o("This class cannot be instantiated directly using "),Mfe=a("code"),kBo=o("__init__()"),SBo=o(" (throws an error)."),RBo=l(),ct=a("div"),F(bL.$$.fragment),PBo=l(),Efe=a("p"),BBo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),IBo=l(),Qi=a("p"),qBo=o(`Note:
Loading a model from its configuration file does `),Cfe=a("strong"),NBo=o("not"),jBo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZG=a("a"),DBo=o("from_pretrained()"),GBo=o(" to load the model weights."),OBo=l(),F(rF.$$.fragment),VBo=l(),to=a("div"),F(vL.$$.fragment),XBo=l(),wfe=a("p"),zBo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),WBo=l(),Ba=a("p"),QBo=o("The model class to instantiate is selected based on the "),Afe=a("code"),HBo=o("model_type"),UBo=o(` property of the config object (either
passed as an argument or loaded from `),yfe=a("code"),JBo=o("pretrained_model_name_or_path"),YBo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lfe=a("code"),KBo=o("pretrained_model_name_or_path"),ZBo=o(":"),eIo=l(),Yr=a("ul"),tF=a("li"),xfe=a("strong"),oIo=o("bert"),rIo=o(" \u2014 "),eO=a("a"),tIo=o("BertForNextSentencePrediction"),aIo=o(" (BERT model)"),nIo=l(),aF=a("li"),$fe=a("strong"),sIo=o("fnet"),lIo=o(" \u2014 "),oO=a("a"),iIo=o("FNetForNextSentencePrediction"),dIo=o(" (FNet model)"),cIo=l(),nF=a("li"),kfe=a("strong"),mIo=o("megatron-bert"),fIo=o(" \u2014 "),rO=a("a"),gIo=o("MegatronBertForNextSentencePrediction"),hIo=o(" (MegatronBert model)"),uIo=l(),sF=a("li"),Sfe=a("strong"),pIo=o("mobilebert"),_Io=o(" \u2014 "),tO=a("a"),bIo=o("MobileBertForNextSentencePrediction"),vIo=o(" (MobileBERT model)"),FIo=l(),lF=a("li"),Rfe=a("strong"),TIo=o("qdqbert"),MIo=o(" \u2014 "),aO=a("a"),EIo=o("QDQBertForNextSentencePrediction"),CIo=o(" (QDQBert model)"),wIo=l(),iF=a("p"),AIo=o("The model is set in evaluation mode by default using "),Pfe=a("code"),yIo=o("model.eval()"),LIo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Bfe=a("code"),xIo=o("model.train()"),$Io=l(),F(dF.$$.fragment),aqe=l(),Hi=a("h2"),cF=a("a"),Ife=a("span"),F(FL.$$.fragment),kIo=l(),qfe=a("span"),SIo=o("AutoModelForTokenClassification"),nqe=l(),Io=a("div"),F(TL.$$.fragment),RIo=l(),Ui=a("p"),PIo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),nO=a("a"),BIo=o("from_pretrained()"),IIo=o(" class method or the "),sO=a("a"),qIo=o("from_config()"),NIo=o(` class
method.`),jIo=l(),ML=a("p"),DIo=o("This class cannot be instantiated directly using "),Nfe=a("code"),GIo=o("__init__()"),OIo=o(" (throws an error)."),VIo=l(),mt=a("div"),F(EL.$$.fragment),XIo=l(),jfe=a("p"),zIo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),WIo=l(),Ji=a("p"),QIo=o(`Note:
Loading a model from its configuration file does `),Dfe=a("strong"),HIo=o("not"),UIo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lO=a("a"),JIo=o("from_pretrained()"),YIo=o(" to load the model weights."),KIo=l(),F(mF.$$.fragment),ZIo=l(),ao=a("div"),F(CL.$$.fragment),eqo=l(),Gfe=a("p"),oqo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),rqo=l(),Ia=a("p"),tqo=o("The model class to instantiate is selected based on the "),Ofe=a("code"),aqo=o("model_type"),nqo=o(` property of the config object (either
passed as an argument or loaded from `),Vfe=a("code"),sqo=o("pretrained_model_name_or_path"),lqo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xfe=a("code"),iqo=o("pretrained_model_name_or_path"),dqo=o(":"),cqo=l(),U=a("ul"),fF=a("li"),zfe=a("strong"),mqo=o("albert"),fqo=o(" \u2014 "),iO=a("a"),gqo=o("AlbertForTokenClassification"),hqo=o(" (ALBERT model)"),uqo=l(),gF=a("li"),Wfe=a("strong"),pqo=o("bert"),_qo=o(" \u2014 "),dO=a("a"),bqo=o("BertForTokenClassification"),vqo=o(" (BERT model)"),Fqo=l(),hF=a("li"),Qfe=a("strong"),Tqo=o("big_bird"),Mqo=o(" \u2014 "),cO=a("a"),Eqo=o("BigBirdForTokenClassification"),Cqo=o(" (BigBird model)"),wqo=l(),uF=a("li"),Hfe=a("strong"),Aqo=o("camembert"),yqo=o(" \u2014 "),mO=a("a"),Lqo=o("CamembertForTokenClassification"),xqo=o(" (CamemBERT model)"),$qo=l(),pF=a("li"),Ufe=a("strong"),kqo=o("canine"),Sqo=o(" \u2014 "),fO=a("a"),Rqo=o("CanineForTokenClassification"),Pqo=o(" (Canine model)"),Bqo=l(),_F=a("li"),Jfe=a("strong"),Iqo=o("convbert"),qqo=o(" \u2014 "),gO=a("a"),Nqo=o("ConvBertForTokenClassification"),jqo=o(" (ConvBERT model)"),Dqo=l(),bF=a("li"),Yfe=a("strong"),Gqo=o("data2vec-text"),Oqo=o(" \u2014 "),hO=a("a"),Vqo=o("Data2VecTextForTokenClassification"),Xqo=o(" (Data2VecText model)"),zqo=l(),vF=a("li"),Kfe=a("strong"),Wqo=o("deberta"),Qqo=o(" \u2014 "),uO=a("a"),Hqo=o("DebertaForTokenClassification"),Uqo=o(" (DeBERTa model)"),Jqo=l(),FF=a("li"),Zfe=a("strong"),Yqo=o("deberta-v2"),Kqo=o(" \u2014 "),pO=a("a"),Zqo=o("DebertaV2ForTokenClassification"),eNo=o(" (DeBERTa-v2 model)"),oNo=l(),TF=a("li"),ege=a("strong"),rNo=o("distilbert"),tNo=o(" \u2014 "),_O=a("a"),aNo=o("DistilBertForTokenClassification"),nNo=o(" (DistilBERT model)"),sNo=l(),MF=a("li"),oge=a("strong"),lNo=o("electra"),iNo=o(" \u2014 "),bO=a("a"),dNo=o("ElectraForTokenClassification"),cNo=o(" (ELECTRA model)"),mNo=l(),EF=a("li"),rge=a("strong"),fNo=o("flaubert"),gNo=o(" \u2014 "),vO=a("a"),hNo=o("FlaubertForTokenClassification"),uNo=o(" (FlauBERT model)"),pNo=l(),CF=a("li"),tge=a("strong"),_No=o("fnet"),bNo=o(" \u2014 "),FO=a("a"),vNo=o("FNetForTokenClassification"),FNo=o(" (FNet model)"),TNo=l(),wF=a("li"),age=a("strong"),MNo=o("funnel"),ENo=o(" \u2014 "),TO=a("a"),CNo=o("FunnelForTokenClassification"),wNo=o(" (Funnel Transformer model)"),ANo=l(),AF=a("li"),nge=a("strong"),yNo=o("gpt2"),LNo=o(" \u2014 "),MO=a("a"),xNo=o("GPT2ForTokenClassification"),$No=o(" (OpenAI GPT-2 model)"),kNo=l(),yF=a("li"),sge=a("strong"),SNo=o("ibert"),RNo=o(" \u2014 "),EO=a("a"),PNo=o("IBertForTokenClassification"),BNo=o(" (I-BERT model)"),INo=l(),LF=a("li"),lge=a("strong"),qNo=o("layoutlm"),NNo=o(" \u2014 "),CO=a("a"),jNo=o("LayoutLMForTokenClassification"),DNo=o(" (LayoutLM model)"),GNo=l(),xF=a("li"),ige=a("strong"),ONo=o("layoutlmv2"),VNo=o(" \u2014 "),wO=a("a"),XNo=o("LayoutLMv2ForTokenClassification"),zNo=o(" (LayoutLMv2 model)"),WNo=l(),$F=a("li"),dge=a("strong"),QNo=o("longformer"),HNo=o(" \u2014 "),AO=a("a"),UNo=o("LongformerForTokenClassification"),JNo=o(" (Longformer model)"),YNo=l(),kF=a("li"),cge=a("strong"),KNo=o("megatron-bert"),ZNo=o(" \u2014 "),yO=a("a"),ejo=o("MegatronBertForTokenClassification"),ojo=o(" (MegatronBert model)"),rjo=l(),SF=a("li"),mge=a("strong"),tjo=o("mobilebert"),ajo=o(" \u2014 "),LO=a("a"),njo=o("MobileBertForTokenClassification"),sjo=o(" (MobileBERT model)"),ljo=l(),RF=a("li"),fge=a("strong"),ijo=o("mpnet"),djo=o(" \u2014 "),xO=a("a"),cjo=o("MPNetForTokenClassification"),mjo=o(" (MPNet model)"),fjo=l(),PF=a("li"),gge=a("strong"),gjo=o("nystromformer"),hjo=o(" \u2014 "),$O=a("a"),ujo=o("NystromformerForTokenClassification"),pjo=o(" (Nystromformer model)"),_jo=l(),BF=a("li"),hge=a("strong"),bjo=o("qdqbert"),vjo=o(" \u2014 "),kO=a("a"),Fjo=o("QDQBertForTokenClassification"),Tjo=o(" (QDQBert model)"),Mjo=l(),IF=a("li"),uge=a("strong"),Ejo=o("rembert"),Cjo=o(" \u2014 "),SO=a("a"),wjo=o("RemBertForTokenClassification"),Ajo=o(" (RemBERT model)"),yjo=l(),qF=a("li"),pge=a("strong"),Ljo=o("roberta"),xjo=o(" \u2014 "),RO=a("a"),$jo=o("RobertaForTokenClassification"),kjo=o(" (RoBERTa model)"),Sjo=l(),NF=a("li"),_ge=a("strong"),Rjo=o("roformer"),Pjo=o(" \u2014 "),PO=a("a"),Bjo=o("RoFormerForTokenClassification"),Ijo=o(" (RoFormer model)"),qjo=l(),jF=a("li"),bge=a("strong"),Njo=o("squeezebert"),jjo=o(" \u2014 "),BO=a("a"),Djo=o("SqueezeBertForTokenClassification"),Gjo=o(" (SqueezeBERT model)"),Ojo=l(),DF=a("li"),vge=a("strong"),Vjo=o("xlm"),Xjo=o(" \u2014 "),IO=a("a"),zjo=o("XLMForTokenClassification"),Wjo=o(" (XLM model)"),Qjo=l(),GF=a("li"),Fge=a("strong"),Hjo=o("xlm-roberta"),Ujo=o(" \u2014 "),qO=a("a"),Jjo=o("XLMRobertaForTokenClassification"),Yjo=o(" (XLM-RoBERTa model)"),Kjo=l(),OF=a("li"),Tge=a("strong"),Zjo=o("xlm-roberta-xl"),eDo=o(" \u2014 "),NO=a("a"),oDo=o("XLMRobertaXLForTokenClassification"),rDo=o(" (XLM-RoBERTa-XL model)"),tDo=l(),VF=a("li"),Mge=a("strong"),aDo=o("xlnet"),nDo=o(" \u2014 "),jO=a("a"),sDo=o("XLNetForTokenClassification"),lDo=o(" (XLNet model)"),iDo=l(),XF=a("li"),Ege=a("strong"),dDo=o("yoso"),cDo=o(" \u2014 "),DO=a("a"),mDo=o("YosoForTokenClassification"),fDo=o(" (YOSO model)"),gDo=l(),zF=a("p"),hDo=o("The model is set in evaluation mode by default using "),Cge=a("code"),uDo=o("model.eval()"),pDo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wge=a("code"),_Do=o("model.train()"),bDo=l(),F(WF.$$.fragment),sqe=l(),Yi=a("h2"),QF=a("a"),Age=a("span"),F(wL.$$.fragment),vDo=l(),yge=a("span"),FDo=o("AutoModelForQuestionAnswering"),lqe=l(),qo=a("div"),F(AL.$$.fragment),TDo=l(),Ki=a("p"),MDo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),GO=a("a"),EDo=o("from_pretrained()"),CDo=o(" class method or the "),OO=a("a"),wDo=o("from_config()"),ADo=o(` class
method.`),yDo=l(),yL=a("p"),LDo=o("This class cannot be instantiated directly using "),Lge=a("code"),xDo=o("__init__()"),$Do=o(" (throws an error)."),kDo=l(),ft=a("div"),F(LL.$$.fragment),SDo=l(),xge=a("p"),RDo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),PDo=l(),Zi=a("p"),BDo=o(`Note:
Loading a model from its configuration file does `),$ge=a("strong"),IDo=o("not"),qDo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VO=a("a"),NDo=o("from_pretrained()"),jDo=o(" to load the model weights."),DDo=l(),F(HF.$$.fragment),GDo=l(),no=a("div"),F(xL.$$.fragment),ODo=l(),kge=a("p"),VDo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),XDo=l(),qa=a("p"),zDo=o("The model class to instantiate is selected based on the "),Sge=a("code"),WDo=o("model_type"),QDo=o(` property of the config object (either
passed as an argument or loaded from `),Rge=a("code"),HDo=o("pretrained_model_name_or_path"),UDo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pge=a("code"),JDo=o("pretrained_model_name_or_path"),YDo=o(":"),KDo=l(),V=a("ul"),UF=a("li"),Bge=a("strong"),ZDo=o("albert"),eGo=o(" \u2014 "),XO=a("a"),oGo=o("AlbertForQuestionAnswering"),rGo=o(" (ALBERT model)"),tGo=l(),JF=a("li"),Ige=a("strong"),aGo=o("bart"),nGo=o(" \u2014 "),zO=a("a"),sGo=o("BartForQuestionAnswering"),lGo=o(" (BART model)"),iGo=l(),YF=a("li"),qge=a("strong"),dGo=o("bert"),cGo=o(" \u2014 "),WO=a("a"),mGo=o("BertForQuestionAnswering"),fGo=o(" (BERT model)"),gGo=l(),KF=a("li"),Nge=a("strong"),hGo=o("big_bird"),uGo=o(" \u2014 "),QO=a("a"),pGo=o("BigBirdForQuestionAnswering"),_Go=o(" (BigBird model)"),bGo=l(),ZF=a("li"),jge=a("strong"),vGo=o("bigbird_pegasus"),FGo=o(" \u2014 "),HO=a("a"),TGo=o("BigBirdPegasusForQuestionAnswering"),MGo=o(" (BigBirdPegasus model)"),EGo=l(),e1=a("li"),Dge=a("strong"),CGo=o("camembert"),wGo=o(" \u2014 "),UO=a("a"),AGo=o("CamembertForQuestionAnswering"),yGo=o(" (CamemBERT model)"),LGo=l(),o1=a("li"),Gge=a("strong"),xGo=o("canine"),$Go=o(" \u2014 "),JO=a("a"),kGo=o("CanineForQuestionAnswering"),SGo=o(" (Canine model)"),RGo=l(),r1=a("li"),Oge=a("strong"),PGo=o("convbert"),BGo=o(" \u2014 "),YO=a("a"),IGo=o("ConvBertForQuestionAnswering"),qGo=o(" (ConvBERT model)"),NGo=l(),t1=a("li"),Vge=a("strong"),jGo=o("data2vec-text"),DGo=o(" \u2014 "),KO=a("a"),GGo=o("Data2VecTextForQuestionAnswering"),OGo=o(" (Data2VecText model)"),VGo=l(),a1=a("li"),Xge=a("strong"),XGo=o("deberta"),zGo=o(" \u2014 "),ZO=a("a"),WGo=o("DebertaForQuestionAnswering"),QGo=o(" (DeBERTa model)"),HGo=l(),n1=a("li"),zge=a("strong"),UGo=o("deberta-v2"),JGo=o(" \u2014 "),eV=a("a"),YGo=o("DebertaV2ForQuestionAnswering"),KGo=o(" (DeBERTa-v2 model)"),ZGo=l(),s1=a("li"),Wge=a("strong"),eOo=o("distilbert"),oOo=o(" \u2014 "),oV=a("a"),rOo=o("DistilBertForQuestionAnswering"),tOo=o(" (DistilBERT model)"),aOo=l(),l1=a("li"),Qge=a("strong"),nOo=o("electra"),sOo=o(" \u2014 "),rV=a("a"),lOo=o("ElectraForQuestionAnswering"),iOo=o(" (ELECTRA model)"),dOo=l(),i1=a("li"),Hge=a("strong"),cOo=o("flaubert"),mOo=o(" \u2014 "),tV=a("a"),fOo=o("FlaubertForQuestionAnsweringSimple"),gOo=o(" (FlauBERT model)"),hOo=l(),d1=a("li"),Uge=a("strong"),uOo=o("fnet"),pOo=o(" \u2014 "),aV=a("a"),_Oo=o("FNetForQuestionAnswering"),bOo=o(" (FNet model)"),vOo=l(),c1=a("li"),Jge=a("strong"),FOo=o("funnel"),TOo=o(" \u2014 "),nV=a("a"),MOo=o("FunnelForQuestionAnswering"),EOo=o(" (Funnel Transformer model)"),COo=l(),m1=a("li"),Yge=a("strong"),wOo=o("gptj"),AOo=o(" \u2014 "),sV=a("a"),yOo=o("GPTJForQuestionAnswering"),LOo=o(" (GPT-J model)"),xOo=l(),f1=a("li"),Kge=a("strong"),$Oo=o("ibert"),kOo=o(" \u2014 "),lV=a("a"),SOo=o("IBertForQuestionAnswering"),ROo=o(" (I-BERT model)"),POo=l(),g1=a("li"),Zge=a("strong"),BOo=o("layoutlmv2"),IOo=o(" \u2014 "),iV=a("a"),qOo=o("LayoutLMv2ForQuestionAnswering"),NOo=o(" (LayoutLMv2 model)"),jOo=l(),h1=a("li"),ehe=a("strong"),DOo=o("led"),GOo=o(" \u2014 "),dV=a("a"),OOo=o("LEDForQuestionAnswering"),VOo=o(" (LED model)"),XOo=l(),u1=a("li"),ohe=a("strong"),zOo=o("longformer"),WOo=o(" \u2014 "),cV=a("a"),QOo=o("LongformerForQuestionAnswering"),HOo=o(" (Longformer model)"),UOo=l(),p1=a("li"),rhe=a("strong"),JOo=o("lxmert"),YOo=o(" \u2014 "),mV=a("a"),KOo=o("LxmertForQuestionAnswering"),ZOo=o(" (LXMERT model)"),eVo=l(),_1=a("li"),the=a("strong"),oVo=o("mbart"),rVo=o(" \u2014 "),fV=a("a"),tVo=o("MBartForQuestionAnswering"),aVo=o(" (mBART model)"),nVo=l(),b1=a("li"),ahe=a("strong"),sVo=o("megatron-bert"),lVo=o(" \u2014 "),gV=a("a"),iVo=o("MegatronBertForQuestionAnswering"),dVo=o(" (MegatronBert model)"),cVo=l(),v1=a("li"),nhe=a("strong"),mVo=o("mobilebert"),fVo=o(" \u2014 "),hV=a("a"),gVo=o("MobileBertForQuestionAnswering"),hVo=o(" (MobileBERT model)"),uVo=l(),F1=a("li"),she=a("strong"),pVo=o("mpnet"),_Vo=o(" \u2014 "),uV=a("a"),bVo=o("MPNetForQuestionAnswering"),vVo=o(" (MPNet model)"),FVo=l(),T1=a("li"),lhe=a("strong"),TVo=o("nystromformer"),MVo=o(" \u2014 "),pV=a("a"),EVo=o("NystromformerForQuestionAnswering"),CVo=o(" (Nystromformer model)"),wVo=l(),M1=a("li"),ihe=a("strong"),AVo=o("qdqbert"),yVo=o(" \u2014 "),_V=a("a"),LVo=o("QDQBertForQuestionAnswering"),xVo=o(" (QDQBert model)"),$Vo=l(),E1=a("li"),dhe=a("strong"),kVo=o("reformer"),SVo=o(" \u2014 "),bV=a("a"),RVo=o("ReformerForQuestionAnswering"),PVo=o(" (Reformer model)"),BVo=l(),C1=a("li"),che=a("strong"),IVo=o("rembert"),qVo=o(" \u2014 "),vV=a("a"),NVo=o("RemBertForQuestionAnswering"),jVo=o(" (RemBERT model)"),DVo=l(),w1=a("li"),mhe=a("strong"),GVo=o("roberta"),OVo=o(" \u2014 "),FV=a("a"),VVo=o("RobertaForQuestionAnswering"),XVo=o(" (RoBERTa model)"),zVo=l(),A1=a("li"),fhe=a("strong"),WVo=o("roformer"),QVo=o(" \u2014 "),TV=a("a"),HVo=o("RoFormerForQuestionAnswering"),UVo=o(" (RoFormer model)"),JVo=l(),y1=a("li"),ghe=a("strong"),YVo=o("splinter"),KVo=o(" \u2014 "),MV=a("a"),ZVo=o("SplinterForQuestionAnswering"),eXo=o(" (Splinter model)"),oXo=l(),L1=a("li"),hhe=a("strong"),rXo=o("squeezebert"),tXo=o(" \u2014 "),EV=a("a"),aXo=o("SqueezeBertForQuestionAnswering"),nXo=o(" (SqueezeBERT model)"),sXo=l(),x1=a("li"),uhe=a("strong"),lXo=o("xlm"),iXo=o(" \u2014 "),CV=a("a"),dXo=o("XLMForQuestionAnsweringSimple"),cXo=o(" (XLM model)"),mXo=l(),$1=a("li"),phe=a("strong"),fXo=o("xlm-roberta"),gXo=o(" \u2014 "),wV=a("a"),hXo=o("XLMRobertaForQuestionAnswering"),uXo=o(" (XLM-RoBERTa model)"),pXo=l(),k1=a("li"),_he=a("strong"),_Xo=o("xlm-roberta-xl"),bXo=o(" \u2014 "),AV=a("a"),vXo=o("XLMRobertaXLForQuestionAnswering"),FXo=o(" (XLM-RoBERTa-XL model)"),TXo=l(),S1=a("li"),bhe=a("strong"),MXo=o("xlnet"),EXo=o(" \u2014 "),yV=a("a"),CXo=o("XLNetForQuestionAnsweringSimple"),wXo=o(" (XLNet model)"),AXo=l(),R1=a("li"),vhe=a("strong"),yXo=o("yoso"),LXo=o(" \u2014 "),LV=a("a"),xXo=o("YosoForQuestionAnswering"),$Xo=o(" (YOSO model)"),kXo=l(),P1=a("p"),SXo=o("The model is set in evaluation mode by default using "),Fhe=a("code"),RXo=o("model.eval()"),PXo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),The=a("code"),BXo=o("model.train()"),IXo=l(),F(B1.$$.fragment),iqe=l(),ed=a("h2"),I1=a("a"),Mhe=a("span"),F($L.$$.fragment),qXo=l(),Ehe=a("span"),NXo=o("AutoModelForTableQuestionAnswering"),dqe=l(),No=a("div"),F(kL.$$.fragment),jXo=l(),od=a("p"),DXo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),xV=a("a"),GXo=o("from_pretrained()"),OXo=o(" class method or the "),$V=a("a"),VXo=o("from_config()"),XXo=o(` class
method.`),zXo=l(),SL=a("p"),WXo=o("This class cannot be instantiated directly using "),Che=a("code"),QXo=o("__init__()"),HXo=o(" (throws an error)."),UXo=l(),gt=a("div"),F(RL.$$.fragment),JXo=l(),whe=a("p"),YXo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),KXo=l(),rd=a("p"),ZXo=o(`Note:
Loading a model from its configuration file does `),Ahe=a("strong"),ezo=o("not"),ozo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kV=a("a"),rzo=o("from_pretrained()"),tzo=o(" to load the model weights."),azo=l(),F(q1.$$.fragment),nzo=l(),so=a("div"),F(PL.$$.fragment),szo=l(),yhe=a("p"),lzo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),izo=l(),Na=a("p"),dzo=o("The model class to instantiate is selected based on the "),Lhe=a("code"),czo=o("model_type"),mzo=o(` property of the config object (either
passed as an argument or loaded from `),xhe=a("code"),fzo=o("pretrained_model_name_or_path"),gzo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$he=a("code"),hzo=o("pretrained_model_name_or_path"),uzo=o(":"),pzo=l(),khe=a("ul"),N1=a("li"),She=a("strong"),_zo=o("tapas"),bzo=o(" \u2014 "),SV=a("a"),vzo=o("TapasForQuestionAnswering"),Fzo=o(" (TAPAS model)"),Tzo=l(),j1=a("p"),Mzo=o("The model is set in evaluation mode by default using "),Rhe=a("code"),Ezo=o("model.eval()"),Czo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Phe=a("code"),wzo=o("model.train()"),Azo=l(),F(D1.$$.fragment),cqe=l(),td=a("h2"),G1=a("a"),Bhe=a("span"),F(BL.$$.fragment),yzo=l(),Ihe=a("span"),Lzo=o("AutoModelForImageClassification"),mqe=l(),jo=a("div"),F(IL.$$.fragment),xzo=l(),ad=a("p"),$zo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),RV=a("a"),kzo=o("from_pretrained()"),Szo=o(" class method or the "),PV=a("a"),Rzo=o("from_config()"),Pzo=o(` class
method.`),Bzo=l(),qL=a("p"),Izo=o("This class cannot be instantiated directly using "),qhe=a("code"),qzo=o("__init__()"),Nzo=o(" (throws an error)."),jzo=l(),ht=a("div"),F(NL.$$.fragment),Dzo=l(),Nhe=a("p"),Gzo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Ozo=l(),nd=a("p"),Vzo=o(`Note:
Loading a model from its configuration file does `),jhe=a("strong"),Xzo=o("not"),zzo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),BV=a("a"),Wzo=o("from_pretrained()"),Qzo=o(" to load the model weights."),Hzo=l(),F(O1.$$.fragment),Uzo=l(),lo=a("div"),F(jL.$$.fragment),Jzo=l(),Dhe=a("p"),Yzo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Kzo=l(),ja=a("p"),Zzo=o("The model class to instantiate is selected based on the "),Ghe=a("code"),eWo=o("model_type"),oWo=o(` property of the config object (either
passed as an argument or loaded from `),Ohe=a("code"),rWo=o("pretrained_model_name_or_path"),tWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vhe=a("code"),aWo=o("pretrained_model_name_or_path"),nWo=o(":"),sWo=l(),Fe=a("ul"),V1=a("li"),Xhe=a("strong"),lWo=o("beit"),iWo=o(" \u2014 "),IV=a("a"),dWo=o("BeitForImageClassification"),cWo=o(" (BEiT model)"),mWo=l(),X1=a("li"),zhe=a("strong"),fWo=o("convnext"),gWo=o(" \u2014 "),qV=a("a"),hWo=o("ConvNextForImageClassification"),uWo=o(" (ConvNext model)"),pWo=l(),z1=a("li"),Whe=a("strong"),_Wo=o("data2vec-vision"),bWo=o(" \u2014 "),NV=a("a"),vWo=o("Data2VecVisionForImageClassification"),FWo=o(" (Data2VecVision model)"),TWo=l(),Ps=a("li"),Qhe=a("strong"),MWo=o("deit"),EWo=o(" \u2014 "),jV=a("a"),CWo=o("DeiTForImageClassification"),wWo=o(" or "),DV=a("a"),AWo=o("DeiTForImageClassificationWithTeacher"),yWo=o(" (DeiT model)"),LWo=l(),W1=a("li"),Hhe=a("strong"),xWo=o("imagegpt"),$Wo=o(" \u2014 "),GV=a("a"),kWo=o("ImageGPTForImageClassification"),SWo=o(" (ImageGPT model)"),RWo=l(),ut=a("li"),Uhe=a("strong"),PWo=o("perceiver"),BWo=o(" \u2014 "),OV=a("a"),IWo=o("PerceiverForImageClassificationLearned"),qWo=o(" or "),VV=a("a"),NWo=o("PerceiverForImageClassificationFourier"),jWo=o(" or "),XV=a("a"),DWo=o("PerceiverForImageClassificationConvProcessing"),GWo=o(" (Perceiver model)"),OWo=l(),Q1=a("li"),Jhe=a("strong"),VWo=o("poolformer"),XWo=o(" \u2014 "),zV=a("a"),zWo=o("PoolFormerForImageClassification"),WWo=o(" (PoolFormer model)"),QWo=l(),H1=a("li"),Yhe=a("strong"),HWo=o("regnet"),UWo=o(" \u2014 "),WV=a("a"),JWo=o("RegNetForImageClassification"),YWo=o(" (RegNet model)"),KWo=l(),U1=a("li"),Khe=a("strong"),ZWo=o("resnet"),eQo=o(" \u2014 "),QV=a("a"),oQo=o("ResNetForImageClassification"),rQo=o(" (ResNet model)"),tQo=l(),J1=a("li"),Zhe=a("strong"),aQo=o("segformer"),nQo=o(" \u2014 "),HV=a("a"),sQo=o("SegformerForImageClassification"),lQo=o(" (SegFormer model)"),iQo=l(),Y1=a("li"),eue=a("strong"),dQo=o("swin"),cQo=o(" \u2014 "),UV=a("a"),mQo=o("SwinForImageClassification"),fQo=o(" (Swin model)"),gQo=l(),K1=a("li"),oue=a("strong"),hQo=o("van"),uQo=o(" \u2014 "),JV=a("a"),pQo=o("VanForImageClassification"),_Qo=o(" (VAN model)"),bQo=l(),Z1=a("li"),rue=a("strong"),vQo=o("vit"),FQo=o(" \u2014 "),YV=a("a"),TQo=o("ViTForImageClassification"),MQo=o(" (ViT model)"),EQo=l(),eT=a("p"),CQo=o("The model is set in evaluation mode by default using "),tue=a("code"),wQo=o("model.eval()"),AQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),aue=a("code"),yQo=o("model.train()"),LQo=l(),F(oT.$$.fragment),fqe=l(),sd=a("h2"),rT=a("a"),nue=a("span"),F(DL.$$.fragment),xQo=l(),sue=a("span"),$Qo=o("AutoModelForVision2Seq"),gqe=l(),Do=a("div"),F(GL.$$.fragment),kQo=l(),ld=a("p"),SQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),KV=a("a"),RQo=o("from_pretrained()"),PQo=o(" class method or the "),ZV=a("a"),BQo=o("from_config()"),IQo=o(` class
method.`),qQo=l(),OL=a("p"),NQo=o("This class cannot be instantiated directly using "),lue=a("code"),jQo=o("__init__()"),DQo=o(" (throws an error)."),GQo=l(),pt=a("div"),F(VL.$$.fragment),OQo=l(),iue=a("p"),VQo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),XQo=l(),id=a("p"),zQo=o(`Note:
Loading a model from its configuration file does `),due=a("strong"),WQo=o("not"),QQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eX=a("a"),HQo=o("from_pretrained()"),UQo=o(" to load the model weights."),JQo=l(),F(tT.$$.fragment),YQo=l(),io=a("div"),F(XL.$$.fragment),KQo=l(),cue=a("p"),ZQo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),eHo=l(),Da=a("p"),oHo=o("The model class to instantiate is selected based on the "),mue=a("code"),rHo=o("model_type"),tHo=o(` property of the config object (either
passed as an argument or loaded from `),fue=a("code"),aHo=o("pretrained_model_name_or_path"),nHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gue=a("code"),sHo=o("pretrained_model_name_or_path"),lHo=o(":"),iHo=l(),hue=a("ul"),aT=a("li"),uue=a("strong"),dHo=o("vision-encoder-decoder"),cHo=o(" \u2014 "),oX=a("a"),mHo=o("VisionEncoderDecoderModel"),fHo=o(" (Vision Encoder decoder model)"),gHo=l(),nT=a("p"),hHo=o("The model is set in evaluation mode by default using "),pue=a("code"),uHo=o("model.eval()"),pHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_ue=a("code"),_Ho=o("model.train()"),bHo=l(),F(sT.$$.fragment),hqe=l(),dd=a("h2"),lT=a("a"),bue=a("span"),F(zL.$$.fragment),vHo=l(),vue=a("span"),FHo=o("AutoModelForAudioClassification"),uqe=l(),Go=a("div"),F(WL.$$.fragment),THo=l(),cd=a("p"),MHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),rX=a("a"),EHo=o("from_pretrained()"),CHo=o(" class method or the "),tX=a("a"),wHo=o("from_config()"),AHo=o(` class
method.`),yHo=l(),QL=a("p"),LHo=o("This class cannot be instantiated directly using "),Fue=a("code"),xHo=o("__init__()"),$Ho=o(" (throws an error)."),kHo=l(),_t=a("div"),F(HL.$$.fragment),SHo=l(),Tue=a("p"),RHo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),PHo=l(),md=a("p"),BHo=o(`Note:
Loading a model from its configuration file does `),Mue=a("strong"),IHo=o("not"),qHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aX=a("a"),NHo=o("from_pretrained()"),jHo=o(" to load the model weights."),DHo=l(),F(iT.$$.fragment),GHo=l(),co=a("div"),F(UL.$$.fragment),OHo=l(),Eue=a("p"),VHo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),XHo=l(),Ga=a("p"),zHo=o("The model class to instantiate is selected based on the "),Cue=a("code"),WHo=o("model_type"),QHo=o(` property of the config object (either
passed as an argument or loaded from `),wue=a("code"),HHo=o("pretrained_model_name_or_path"),UHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Aue=a("code"),JHo=o("pretrained_model_name_or_path"),YHo=o(":"),KHo=l(),ke=a("ul"),dT=a("li"),yue=a("strong"),ZHo=o("data2vec-audio"),eUo=o(" \u2014 "),nX=a("a"),oUo=o("Data2VecAudioForSequenceClassification"),rUo=o(" (Data2VecAudio model)"),tUo=l(),cT=a("li"),Lue=a("strong"),aUo=o("hubert"),nUo=o(" \u2014 "),sX=a("a"),sUo=o("HubertForSequenceClassification"),lUo=o(" (Hubert model)"),iUo=l(),mT=a("li"),xue=a("strong"),dUo=o("sew"),cUo=o(" \u2014 "),lX=a("a"),mUo=o("SEWForSequenceClassification"),fUo=o(" (SEW model)"),gUo=l(),fT=a("li"),$ue=a("strong"),hUo=o("sew-d"),uUo=o(" \u2014 "),iX=a("a"),pUo=o("SEWDForSequenceClassification"),_Uo=o(" (SEW-D model)"),bUo=l(),gT=a("li"),kue=a("strong"),vUo=o("unispeech"),FUo=o(" \u2014 "),dX=a("a"),TUo=o("UniSpeechForSequenceClassification"),MUo=o(" (UniSpeech model)"),EUo=l(),hT=a("li"),Sue=a("strong"),CUo=o("unispeech-sat"),wUo=o(" \u2014 "),cX=a("a"),AUo=o("UniSpeechSatForSequenceClassification"),yUo=o(" (UniSpeechSat model)"),LUo=l(),uT=a("li"),Rue=a("strong"),xUo=o("wav2vec2"),$Uo=o(" \u2014 "),mX=a("a"),kUo=o("Wav2Vec2ForSequenceClassification"),SUo=o(" (Wav2Vec2 model)"),RUo=l(),pT=a("li"),Pue=a("strong"),PUo=o("wav2vec2-conformer"),BUo=o(" \u2014 "),fX=a("a"),IUo=o("Wav2Vec2ConformerForSequenceClassification"),qUo=o(" (Wav2Vec2-Conformer model)"),NUo=l(),_T=a("li"),Bue=a("strong"),jUo=o("wavlm"),DUo=o(" \u2014 "),gX=a("a"),GUo=o("WavLMForSequenceClassification"),OUo=o(" (WavLM model)"),VUo=l(),bT=a("p"),XUo=o("The model is set in evaluation mode by default using "),Iue=a("code"),zUo=o("model.eval()"),WUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),que=a("code"),QUo=o("model.train()"),HUo=l(),F(vT.$$.fragment),pqe=l(),fd=a("h2"),FT=a("a"),Nue=a("span"),F(JL.$$.fragment),UUo=l(),jue=a("span"),JUo=o("AutoModelForAudioFrameClassification"),_qe=l(),Oo=a("div"),F(YL.$$.fragment),YUo=l(),gd=a("p"),KUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),hX=a("a"),ZUo=o("from_pretrained()"),eJo=o(" class method or the "),uX=a("a"),oJo=o("from_config()"),rJo=o(` class
method.`),tJo=l(),KL=a("p"),aJo=o("This class cannot be instantiated directly using "),Due=a("code"),nJo=o("__init__()"),sJo=o(" (throws an error)."),lJo=l(),bt=a("div"),F(ZL.$$.fragment),iJo=l(),Gue=a("p"),dJo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),cJo=l(),hd=a("p"),mJo=o(`Note:
Loading a model from its configuration file does `),Oue=a("strong"),fJo=o("not"),gJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pX=a("a"),hJo=o("from_pretrained()"),uJo=o(" to load the model weights."),pJo=l(),F(TT.$$.fragment),_Jo=l(),mo=a("div"),F(e8.$$.fragment),bJo=l(),Vue=a("p"),vJo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),FJo=l(),Oa=a("p"),TJo=o("The model class to instantiate is selected based on the "),Xue=a("code"),MJo=o("model_type"),EJo=o(` property of the config object (either
passed as an argument or loaded from `),zue=a("code"),CJo=o("pretrained_model_name_or_path"),wJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wue=a("code"),AJo=o("pretrained_model_name_or_path"),yJo=o(":"),LJo=l(),Kr=a("ul"),MT=a("li"),Que=a("strong"),xJo=o("data2vec-audio"),$Jo=o(" \u2014 "),_X=a("a"),kJo=o("Data2VecAudioForAudioFrameClassification"),SJo=o(" (Data2VecAudio model)"),RJo=l(),ET=a("li"),Hue=a("strong"),PJo=o("unispeech-sat"),BJo=o(" \u2014 "),bX=a("a"),IJo=o("UniSpeechSatForAudioFrameClassification"),qJo=o(" (UniSpeechSat model)"),NJo=l(),CT=a("li"),Uue=a("strong"),jJo=o("wav2vec2"),DJo=o(" \u2014 "),vX=a("a"),GJo=o("Wav2Vec2ForAudioFrameClassification"),OJo=o(" (Wav2Vec2 model)"),VJo=l(),wT=a("li"),Jue=a("strong"),XJo=o("wav2vec2-conformer"),zJo=o(" \u2014 "),FX=a("a"),WJo=o("Wav2Vec2ConformerForAudioFrameClassification"),QJo=o(" (Wav2Vec2-Conformer model)"),HJo=l(),AT=a("li"),Yue=a("strong"),UJo=o("wavlm"),JJo=o(" \u2014 "),TX=a("a"),YJo=o("WavLMForAudioFrameClassification"),KJo=o(" (WavLM model)"),ZJo=l(),yT=a("p"),eYo=o("The model is set in evaluation mode by default using "),Kue=a("code"),oYo=o("model.eval()"),rYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zue=a("code"),tYo=o("model.train()"),aYo=l(),F(LT.$$.fragment),bqe=l(),ud=a("h2"),xT=a("a"),epe=a("span"),F(o8.$$.fragment),nYo=l(),ope=a("span"),sYo=o("AutoModelForCTC"),vqe=l(),Vo=a("div"),F(r8.$$.fragment),lYo=l(),pd=a("p"),iYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),MX=a("a"),dYo=o("from_pretrained()"),cYo=o(" class method or the "),EX=a("a"),mYo=o("from_config()"),fYo=o(` class
method.`),gYo=l(),t8=a("p"),hYo=o("This class cannot be instantiated directly using "),rpe=a("code"),uYo=o("__init__()"),pYo=o(" (throws an error)."),_Yo=l(),vt=a("div"),F(a8.$$.fragment),bYo=l(),tpe=a("p"),vYo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),FYo=l(),_d=a("p"),TYo=o(`Note:
Loading a model from its configuration file does `),ape=a("strong"),MYo=o("not"),EYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CX=a("a"),CYo=o("from_pretrained()"),wYo=o(" to load the model weights."),AYo=l(),F($T.$$.fragment),yYo=l(),fo=a("div"),F(n8.$$.fragment),LYo=l(),npe=a("p"),xYo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),$Yo=l(),Va=a("p"),kYo=o("The model class to instantiate is selected based on the "),spe=a("code"),SYo=o("model_type"),RYo=o(` property of the config object (either
passed as an argument or loaded from `),lpe=a("code"),PYo=o("pretrained_model_name_or_path"),BYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ipe=a("code"),IYo=o("pretrained_model_name_or_path"),qYo=o(":"),NYo=l(),Se=a("ul"),kT=a("li"),dpe=a("strong"),jYo=o("data2vec-audio"),DYo=o(" \u2014 "),wX=a("a"),GYo=o("Data2VecAudioForCTC"),OYo=o(" (Data2VecAudio model)"),VYo=l(),ST=a("li"),cpe=a("strong"),XYo=o("hubert"),zYo=o(" \u2014 "),AX=a("a"),WYo=o("HubertForCTC"),QYo=o(" (Hubert model)"),HYo=l(),RT=a("li"),mpe=a("strong"),UYo=o("sew"),JYo=o(" \u2014 "),yX=a("a"),YYo=o("SEWForCTC"),KYo=o(" (SEW model)"),ZYo=l(),PT=a("li"),fpe=a("strong"),eKo=o("sew-d"),oKo=o(" \u2014 "),LX=a("a"),rKo=o("SEWDForCTC"),tKo=o(" (SEW-D model)"),aKo=l(),BT=a("li"),gpe=a("strong"),nKo=o("unispeech"),sKo=o(" \u2014 "),xX=a("a"),lKo=o("UniSpeechForCTC"),iKo=o(" (UniSpeech model)"),dKo=l(),IT=a("li"),hpe=a("strong"),cKo=o("unispeech-sat"),mKo=o(" \u2014 "),$X=a("a"),fKo=o("UniSpeechSatForCTC"),gKo=o(" (UniSpeechSat model)"),hKo=l(),qT=a("li"),upe=a("strong"),uKo=o("wav2vec2"),pKo=o(" \u2014 "),kX=a("a"),_Ko=o("Wav2Vec2ForCTC"),bKo=o(" (Wav2Vec2 model)"),vKo=l(),NT=a("li"),ppe=a("strong"),FKo=o("wav2vec2-conformer"),TKo=o(" \u2014 "),SX=a("a"),MKo=o("Wav2Vec2ConformerForCTC"),EKo=o(" (Wav2Vec2-Conformer model)"),CKo=l(),jT=a("li"),_pe=a("strong"),wKo=o("wavlm"),AKo=o(" \u2014 "),RX=a("a"),yKo=o("WavLMForCTC"),LKo=o(" (WavLM model)"),xKo=l(),DT=a("p"),$Ko=o("The model is set in evaluation mode by default using "),bpe=a("code"),kKo=o("model.eval()"),SKo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vpe=a("code"),RKo=o("model.train()"),PKo=l(),F(GT.$$.fragment),Fqe=l(),bd=a("h2"),OT=a("a"),Fpe=a("span"),F(s8.$$.fragment),BKo=l(),Tpe=a("span"),IKo=o("AutoModelForSpeechSeq2Seq"),Tqe=l(),Xo=a("div"),F(l8.$$.fragment),qKo=l(),vd=a("p"),NKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),PX=a("a"),jKo=o("from_pretrained()"),DKo=o(" class method or the "),BX=a("a"),GKo=o("from_config()"),OKo=o(` class
method.`),VKo=l(),i8=a("p"),XKo=o("This class cannot be instantiated directly using "),Mpe=a("code"),zKo=o("__init__()"),WKo=o(" (throws an error)."),QKo=l(),Ft=a("div"),F(d8.$$.fragment),HKo=l(),Epe=a("p"),UKo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),JKo=l(),Fd=a("p"),YKo=o(`Note:
Loading a model from its configuration file does `),Cpe=a("strong"),KKo=o("not"),ZKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IX=a("a"),eZo=o("from_pretrained()"),oZo=o(" to load the model weights."),rZo=l(),F(VT.$$.fragment),tZo=l(),go=a("div"),F(c8.$$.fragment),aZo=l(),wpe=a("p"),nZo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),sZo=l(),Xa=a("p"),lZo=o("The model class to instantiate is selected based on the "),Ape=a("code"),iZo=o("model_type"),dZo=o(` property of the config object (either
passed as an argument or loaded from `),ype=a("code"),cZo=o("pretrained_model_name_or_path"),mZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lpe=a("code"),fZo=o("pretrained_model_name_or_path"),gZo=o(":"),hZo=l(),m8=a("ul"),XT=a("li"),xpe=a("strong"),uZo=o("speech-encoder-decoder"),pZo=o(" \u2014 "),qX=a("a"),_Zo=o("SpeechEncoderDecoderModel"),bZo=o(" (Speech Encoder decoder model)"),vZo=l(),zT=a("li"),$pe=a("strong"),FZo=o("speech_to_text"),TZo=o(" \u2014 "),NX=a("a"),MZo=o("Speech2TextForConditionalGeneration"),EZo=o(" (Speech2Text model)"),CZo=l(),WT=a("p"),wZo=o("The model is set in evaluation mode by default using "),kpe=a("code"),AZo=o("model.eval()"),yZo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Spe=a("code"),LZo=o("model.train()"),xZo=l(),F(QT.$$.fragment),Mqe=l(),Td=a("h2"),HT=a("a"),Rpe=a("span"),F(f8.$$.fragment),$Zo=l(),Ppe=a("span"),kZo=o("AutoModelForAudioXVector"),Eqe=l(),zo=a("div"),F(g8.$$.fragment),SZo=l(),Md=a("p"),RZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),jX=a("a"),PZo=o("from_pretrained()"),BZo=o(" class method or the "),DX=a("a"),IZo=o("from_config()"),qZo=o(` class
method.`),NZo=l(),h8=a("p"),jZo=o("This class cannot be instantiated directly using "),Bpe=a("code"),DZo=o("__init__()"),GZo=o(" (throws an error)."),OZo=l(),Tt=a("div"),F(u8.$$.fragment),VZo=l(),Ipe=a("p"),XZo=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),zZo=l(),Ed=a("p"),WZo=o(`Note:
Loading a model from its configuration file does `),qpe=a("strong"),QZo=o("not"),HZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GX=a("a"),UZo=o("from_pretrained()"),JZo=o(" to load the model weights."),YZo=l(),F(UT.$$.fragment),KZo=l(),ho=a("div"),F(p8.$$.fragment),ZZo=l(),Npe=a("p"),eer=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),oer=l(),za=a("p"),rer=o("The model class to instantiate is selected based on the "),jpe=a("code"),ter=o("model_type"),aer=o(` property of the config object (either
passed as an argument or loaded from `),Dpe=a("code"),ner=o("pretrained_model_name_or_path"),ser=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gpe=a("code"),ler=o("pretrained_model_name_or_path"),ier=o(":"),der=l(),Zr=a("ul"),JT=a("li"),Ope=a("strong"),cer=o("data2vec-audio"),mer=o(" \u2014 "),OX=a("a"),fer=o("Data2VecAudioForXVector"),ger=o(" (Data2VecAudio model)"),her=l(),YT=a("li"),Vpe=a("strong"),uer=o("unispeech-sat"),per=o(" \u2014 "),VX=a("a"),_er=o("UniSpeechSatForXVector"),ber=o(" (UniSpeechSat model)"),ver=l(),KT=a("li"),Xpe=a("strong"),Fer=o("wav2vec2"),Ter=o(" \u2014 "),XX=a("a"),Mer=o("Wav2Vec2ForXVector"),Eer=o(" (Wav2Vec2 model)"),Cer=l(),ZT=a("li"),zpe=a("strong"),wer=o("wav2vec2-conformer"),Aer=o(" \u2014 "),zX=a("a"),yer=o("Wav2Vec2ConformerForXVector"),Ler=o(" (Wav2Vec2-Conformer model)"),xer=l(),eM=a("li"),Wpe=a("strong"),$er=o("wavlm"),ker=o(" \u2014 "),WX=a("a"),Ser=o("WavLMForXVector"),Rer=o(" (WavLM model)"),Per=l(),oM=a("p"),Ber=o("The model is set in evaluation mode by default using "),Qpe=a("code"),Ier=o("model.eval()"),qer=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hpe=a("code"),Ner=o("model.train()"),jer=l(),F(rM.$$.fragment),Cqe=l(),Cd=a("h2"),tM=a("a"),Upe=a("span"),F(_8.$$.fragment),Der=l(),Jpe=a("span"),Ger=o("AutoModelForMaskedImageModeling"),wqe=l(),Wo=a("div"),F(b8.$$.fragment),Oer=l(),wd=a("p"),Ver=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),QX=a("a"),Xer=o("from_pretrained()"),zer=o(" class method or the "),HX=a("a"),Wer=o("from_config()"),Qer=o(` class
method.`),Her=l(),v8=a("p"),Uer=o("This class cannot be instantiated directly using "),Ype=a("code"),Jer=o("__init__()"),Yer=o(" (throws an error)."),Ker=l(),Mt=a("div"),F(F8.$$.fragment),Zer=l(),Kpe=a("p"),eor=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),oor=l(),Ad=a("p"),ror=o(`Note:
Loading a model from its configuration file does `),Zpe=a("strong"),tor=o("not"),aor=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UX=a("a"),nor=o("from_pretrained()"),sor=o(" to load the model weights."),lor=l(),F(aM.$$.fragment),ior=l(),uo=a("div"),F(T8.$$.fragment),dor=l(),e_e=a("p"),cor=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),mor=l(),Wa=a("p"),gor=o("The model class to instantiate is selected based on the "),o_e=a("code"),hor=o("model_type"),uor=o(` property of the config object (either
passed as an argument or loaded from `),r_e=a("code"),por=o("pretrained_model_name_or_path"),_or=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t_e=a("code"),bor=o("pretrained_model_name_or_path"),vor=o(":"),For=l(),yd=a("ul"),nM=a("li"),a_e=a("strong"),Tor=o("deit"),Mor=o(" \u2014 "),JX=a("a"),Eor=o("DeiTForMaskedImageModeling"),Cor=o(" (DeiT model)"),wor=l(),sM=a("li"),n_e=a("strong"),Aor=o("swin"),yor=o(" \u2014 "),YX=a("a"),Lor=o("SwinForMaskedImageModeling"),xor=o(" (Swin model)"),$or=l(),lM=a("li"),s_e=a("strong"),kor=o("vit"),Sor=o(" \u2014 "),KX=a("a"),Ror=o("ViTForMaskedImageModeling"),Por=o(" (ViT model)"),Bor=l(),iM=a("p"),Ior=o("The model is set in evaluation mode by default using "),l_e=a("code"),qor=o("model.eval()"),Nor=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),i_e=a("code"),jor=o("model.train()"),Dor=l(),F(dM.$$.fragment),Aqe=l(),Ld=a("h2"),cM=a("a"),d_e=a("span"),F(M8.$$.fragment),Gor=l(),c_e=a("span"),Oor=o("AutoModelForObjectDetection"),yqe=l(),Qo=a("div"),F(E8.$$.fragment),Vor=l(),xd=a("p"),Xor=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),ZX=a("a"),zor=o("from_pretrained()"),Wor=o(" class method or the "),ez=a("a"),Qor=o("from_config()"),Hor=o(` class
method.`),Uor=l(),C8=a("p"),Jor=o("This class cannot be instantiated directly using "),m_e=a("code"),Yor=o("__init__()"),Kor=o(" (throws an error)."),Zor=l(),Et=a("div"),F(w8.$$.fragment),err=l(),f_e=a("p"),orr=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),rrr=l(),$d=a("p"),trr=o(`Note:
Loading a model from its configuration file does `),g_e=a("strong"),arr=o("not"),nrr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oz=a("a"),srr=o("from_pretrained()"),lrr=o(" to load the model weights."),irr=l(),F(mM.$$.fragment),drr=l(),po=a("div"),F(A8.$$.fragment),crr=l(),h_e=a("p"),mrr=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),frr=l(),Qa=a("p"),grr=o("The model class to instantiate is selected based on the "),u_e=a("code"),hrr=o("model_type"),urr=o(` property of the config object (either
passed as an argument or loaded from `),p_e=a("code"),prr=o("pretrained_model_name_or_path"),_rr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),__e=a("code"),brr=o("pretrained_model_name_or_path"),vrr=o(":"),Frr=l(),y8=a("ul"),fM=a("li"),b_e=a("strong"),Trr=o("detr"),Mrr=o(" \u2014 "),rz=a("a"),Err=o("DetrForObjectDetection"),Crr=o(" (DETR model)"),wrr=l(),gM=a("li"),v_e=a("strong"),Arr=o("yolos"),yrr=o(" \u2014 "),tz=a("a"),Lrr=o("YolosForObjectDetection"),xrr=o(" (YOLOS model)"),$rr=l(),hM=a("p"),krr=o("The model is set in evaluation mode by default using "),F_e=a("code"),Srr=o("model.eval()"),Rrr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),T_e=a("code"),Prr=o("model.train()"),Brr=l(),F(uM.$$.fragment),Lqe=l(),kd=a("h2"),pM=a("a"),M_e=a("span"),F(L8.$$.fragment),Irr=l(),E_e=a("span"),qrr=o("AutoModelForImageSegmentation"),xqe=l(),Ho=a("div"),F(x8.$$.fragment),Nrr=l(),Sd=a("p"),jrr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),az=a("a"),Drr=o("from_pretrained()"),Grr=o(" class method or the "),nz=a("a"),Orr=o("from_config()"),Vrr=o(` class
method.`),Xrr=l(),$8=a("p"),zrr=o("This class cannot be instantiated directly using "),C_e=a("code"),Wrr=o("__init__()"),Qrr=o(" (throws an error)."),Hrr=l(),Ct=a("div"),F(k8.$$.fragment),Urr=l(),w_e=a("p"),Jrr=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Yrr=l(),Rd=a("p"),Krr=o(`Note:
Loading a model from its configuration file does `),A_e=a("strong"),Zrr=o("not"),etr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sz=a("a"),otr=o("from_pretrained()"),rtr=o(" to load the model weights."),ttr=l(),F(_M.$$.fragment),atr=l(),_o=a("div"),F(S8.$$.fragment),ntr=l(),y_e=a("p"),str=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),ltr=l(),Ha=a("p"),itr=o("The model class to instantiate is selected based on the "),L_e=a("code"),dtr=o("model_type"),ctr=o(` property of the config object (either
passed as an argument or loaded from `),x_e=a("code"),mtr=o("pretrained_model_name_or_path"),ftr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$_e=a("code"),gtr=o("pretrained_model_name_or_path"),htr=o(":"),utr=l(),k_e=a("ul"),bM=a("li"),S_e=a("strong"),ptr=o("detr"),_tr=o(" \u2014 "),lz=a("a"),btr=o("DetrForSegmentation"),vtr=o(" (DETR model)"),Ftr=l(),vM=a("p"),Ttr=o("The model is set in evaluation mode by default using "),R_e=a("code"),Mtr=o("model.eval()"),Etr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),P_e=a("code"),Ctr=o("model.train()"),wtr=l(),F(FM.$$.fragment),$qe=l(),Pd=a("h2"),TM=a("a"),B_e=a("span"),F(R8.$$.fragment),Atr=l(),I_e=a("span"),ytr=o("AutoModelForSemanticSegmentation"),kqe=l(),Uo=a("div"),F(P8.$$.fragment),Ltr=l(),Bd=a("p"),xtr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),iz=a("a"),$tr=o("from_pretrained()"),ktr=o(" class method or the "),dz=a("a"),Str=o("from_config()"),Rtr=o(` class
method.`),Ptr=l(),B8=a("p"),Btr=o("This class cannot be instantiated directly using "),q_e=a("code"),Itr=o("__init__()"),qtr=o(" (throws an error)."),Ntr=l(),wt=a("div"),F(I8.$$.fragment),jtr=l(),N_e=a("p"),Dtr=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Gtr=l(),Id=a("p"),Otr=o(`Note:
Loading a model from its configuration file does `),j_e=a("strong"),Vtr=o("not"),Xtr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cz=a("a"),ztr=o("from_pretrained()"),Wtr=o(" to load the model weights."),Qtr=l(),F(MM.$$.fragment),Htr=l(),bo=a("div"),F(q8.$$.fragment),Utr=l(),D_e=a("p"),Jtr=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Ytr=l(),Ua=a("p"),Ktr=o("The model class to instantiate is selected based on the "),G_e=a("code"),Ztr=o("model_type"),ear=o(` property of the config object (either
passed as an argument or loaded from `),O_e=a("code"),oar=o("pretrained_model_name_or_path"),rar=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V_e=a("code"),tar=o("pretrained_model_name_or_path"),aar=o(":"),nar=l(),Ja=a("ul"),EM=a("li"),X_e=a("strong"),sar=o("beit"),lar=o(" \u2014 "),mz=a("a"),iar=o("BeitForSemanticSegmentation"),dar=o(" (BEiT model)"),car=l(),CM=a("li"),z_e=a("strong"),mar=o("data2vec-vision"),far=o(" \u2014 "),fz=a("a"),gar=o("Data2VecVisionForSemanticSegmentation"),har=o(" (Data2VecVision model)"),uar=l(),wM=a("li"),W_e=a("strong"),par=o("dpt"),_ar=o(" \u2014 "),gz=a("a"),bar=o("DPTForSemanticSegmentation"),Far=o(" (DPT model)"),Tar=l(),AM=a("li"),Q_e=a("strong"),Mar=o("segformer"),Ear=o(" \u2014 "),hz=a("a"),Car=o("SegformerForSemanticSegmentation"),war=o(" (SegFormer model)"),Aar=l(),yM=a("p"),yar=o("The model is set in evaluation mode by default using "),H_e=a("code"),Lar=o("model.eval()"),xar=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),U_e=a("code"),$ar=o("model.train()"),kar=l(),F(LM.$$.fragment),Sqe=l(),qd=a("h2"),xM=a("a"),J_e=a("span"),F(N8.$$.fragment),Sar=l(),Y_e=a("span"),Rar=o("AutoModelForInstanceSegmentation"),Rqe=l(),Jo=a("div"),F(j8.$$.fragment),Par=l(),Nd=a("p"),Bar=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),uz=a("a"),Iar=o("from_pretrained()"),qar=o(" class method or the "),pz=a("a"),Nar=o("from_config()"),jar=o(` class
method.`),Dar=l(),D8=a("p"),Gar=o("This class cannot be instantiated directly using "),K_e=a("code"),Oar=o("__init__()"),Var=o(" (throws an error)."),Xar=l(),At=a("div"),F(G8.$$.fragment),zar=l(),Z_e=a("p"),War=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Qar=l(),jd=a("p"),Har=o(`Note:
Loading a model from its configuration file does `),ebe=a("strong"),Uar=o("not"),Jar=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_z=a("a"),Yar=o("from_pretrained()"),Kar=o(" to load the model weights."),Zar=l(),F($M.$$.fragment),enr=l(),vo=a("div"),F(O8.$$.fragment),onr=l(),obe=a("p"),rnr=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),tnr=l(),Ya=a("p"),anr=o("The model class to instantiate is selected based on the "),rbe=a("code"),nnr=o("model_type"),snr=o(` property of the config object (either
passed as an argument or loaded from `),tbe=a("code"),lnr=o("pretrained_model_name_or_path"),inr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),abe=a("code"),dnr=o("pretrained_model_name_or_path"),cnr=o(":"),mnr=l(),nbe=a("ul"),kM=a("li"),sbe=a("strong"),fnr=o("maskformer"),gnr=o(" \u2014 "),bz=a("a"),hnr=o("MaskFormerForInstanceSegmentation"),unr=o(" (MaskFormer model)"),pnr=l(),SM=a("p"),_nr=o("The model is set in evaluation mode by default using "),lbe=a("code"),bnr=o("model.eval()"),vnr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ibe=a("code"),Fnr=o("model.train()"),Tnr=l(),F(RM.$$.fragment),Pqe=l(),Dd=a("h2"),PM=a("a"),dbe=a("span"),F(V8.$$.fragment),Mnr=l(),cbe=a("span"),Enr=o("TFAutoModel"),Bqe=l(),Yo=a("div"),F(X8.$$.fragment),Cnr=l(),Gd=a("p"),wnr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),vz=a("a"),Anr=o("from_pretrained()"),ynr=o(" class method or the "),Fz=a("a"),Lnr=o("from_config()"),xnr=o(` class
method.`),$nr=l(),z8=a("p"),knr=o("This class cannot be instantiated directly using "),mbe=a("code"),Snr=o("__init__()"),Rnr=o(" (throws an error)."),Pnr=l(),yt=a("div"),F(W8.$$.fragment),Bnr=l(),fbe=a("p"),Inr=o("Instantiates one of the base model classes of the library from a configuration."),qnr=l(),Od=a("p"),Nnr=o(`Note:
Loading a model from its configuration file does `),gbe=a("strong"),jnr=o("not"),Dnr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Tz=a("a"),Gnr=o("from_pretrained()"),Onr=o(" to load the model weights."),Vnr=l(),F(BM.$$.fragment),Xnr=l(),wr=a("div"),F(Q8.$$.fragment),znr=l(),hbe=a("p"),Wnr=o("Instantiate one of the base model classes of the library from a pretrained model."),Qnr=l(),Ka=a("p"),Hnr=o("The model class to instantiate is selected based on the "),ube=a("code"),Unr=o("model_type"),Jnr=o(` property of the config object (either
passed as an argument or loaded from `),pbe=a("code"),Ynr=o("pretrained_model_name_or_path"),Knr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_be=a("code"),Znr=o("pretrained_model_name_or_path"),esr=o(":"),osr=l(),N=a("ul"),IM=a("li"),bbe=a("strong"),rsr=o("albert"),tsr=o(" \u2014 "),Mz=a("a"),asr=o("TFAlbertModel"),nsr=o(" (ALBERT model)"),ssr=l(),qM=a("li"),vbe=a("strong"),lsr=o("bart"),isr=o(" \u2014 "),Ez=a("a"),dsr=o("TFBartModel"),csr=o(" (BART model)"),msr=l(),NM=a("li"),Fbe=a("strong"),fsr=o("bert"),gsr=o(" \u2014 "),Cz=a("a"),hsr=o("TFBertModel"),usr=o(" (BERT model)"),psr=l(),jM=a("li"),Tbe=a("strong"),_sr=o("blenderbot"),bsr=o(" \u2014 "),wz=a("a"),vsr=o("TFBlenderbotModel"),Fsr=o(" (Blenderbot model)"),Tsr=l(),DM=a("li"),Mbe=a("strong"),Msr=o("blenderbot-small"),Esr=o(" \u2014 "),Az=a("a"),Csr=o("TFBlenderbotSmallModel"),wsr=o(" (BlenderbotSmall model)"),Asr=l(),GM=a("li"),Ebe=a("strong"),ysr=o("camembert"),Lsr=o(" \u2014 "),yz=a("a"),xsr=o("TFCamembertModel"),$sr=o(" (CamemBERT model)"),ksr=l(),OM=a("li"),Cbe=a("strong"),Ssr=o("clip"),Rsr=o(" \u2014 "),Lz=a("a"),Psr=o("TFCLIPModel"),Bsr=o(" (CLIP model)"),Isr=l(),VM=a("li"),wbe=a("strong"),qsr=o("convbert"),Nsr=o(" \u2014 "),xz=a("a"),jsr=o("TFConvBertModel"),Dsr=o(" (ConvBERT model)"),Gsr=l(),XM=a("li"),Abe=a("strong"),Osr=o("convnext"),Vsr=o(" \u2014 "),$z=a("a"),Xsr=o("TFConvNextModel"),zsr=o(" (ConvNext model)"),Wsr=l(),zM=a("li"),ybe=a("strong"),Qsr=o("ctrl"),Hsr=o(" \u2014 "),kz=a("a"),Usr=o("TFCTRLModel"),Jsr=o(" (CTRL model)"),Ysr=l(),WM=a("li"),Lbe=a("strong"),Ksr=o("data2vec-vision"),Zsr=o(" \u2014 "),Sz=a("a"),elr=o("TFData2VecVisionModel"),olr=o(" (Data2VecVision model)"),rlr=l(),QM=a("li"),xbe=a("strong"),tlr=o("deberta"),alr=o(" \u2014 "),Rz=a("a"),nlr=o("TFDebertaModel"),slr=o(" (DeBERTa model)"),llr=l(),HM=a("li"),$be=a("strong"),ilr=o("deberta-v2"),dlr=o(" \u2014 "),Pz=a("a"),clr=o("TFDebertaV2Model"),mlr=o(" (DeBERTa-v2 model)"),flr=l(),UM=a("li"),kbe=a("strong"),glr=o("distilbert"),hlr=o(" \u2014 "),Bz=a("a"),ulr=o("TFDistilBertModel"),plr=o(" (DistilBERT model)"),_lr=l(),JM=a("li"),Sbe=a("strong"),blr=o("dpr"),vlr=o(" \u2014 "),Iz=a("a"),Flr=o("TFDPRQuestionEncoder"),Tlr=o(" (DPR model)"),Mlr=l(),YM=a("li"),Rbe=a("strong"),Elr=o("electra"),Clr=o(" \u2014 "),qz=a("a"),wlr=o("TFElectraModel"),Alr=o(" (ELECTRA model)"),ylr=l(),KM=a("li"),Pbe=a("strong"),Llr=o("flaubert"),xlr=o(" \u2014 "),Nz=a("a"),$lr=o("TFFlaubertModel"),klr=o(" (FlauBERT model)"),Slr=l(),Bs=a("li"),Bbe=a("strong"),Rlr=o("funnel"),Plr=o(" \u2014 "),jz=a("a"),Blr=o("TFFunnelModel"),Ilr=o(" or "),Dz=a("a"),qlr=o("TFFunnelBaseModel"),Nlr=o(" (Funnel Transformer model)"),jlr=l(),ZM=a("li"),Ibe=a("strong"),Dlr=o("gpt2"),Glr=o(" \u2014 "),Gz=a("a"),Olr=o("TFGPT2Model"),Vlr=o(" (OpenAI GPT-2 model)"),Xlr=l(),e4=a("li"),qbe=a("strong"),zlr=o("gptj"),Wlr=o(" \u2014 "),Oz=a("a"),Qlr=o("TFGPTJModel"),Hlr=o(" (GPT-J model)"),Ulr=l(),o4=a("li"),Nbe=a("strong"),Jlr=o("hubert"),Ylr=o(" \u2014 "),Vz=a("a"),Klr=o("TFHubertModel"),Zlr=o(" (Hubert model)"),eir=l(),r4=a("li"),jbe=a("strong"),oir=o("layoutlm"),rir=o(" \u2014 "),Xz=a("a"),tir=o("TFLayoutLMModel"),air=o(" (LayoutLM model)"),nir=l(),t4=a("li"),Dbe=a("strong"),sir=o("led"),lir=o(" \u2014 "),zz=a("a"),iir=o("TFLEDModel"),dir=o(" (LED model)"),cir=l(),a4=a("li"),Gbe=a("strong"),mir=o("longformer"),fir=o(" \u2014 "),Wz=a("a"),gir=o("TFLongformerModel"),hir=o(" (Longformer model)"),uir=l(),n4=a("li"),Obe=a("strong"),pir=o("lxmert"),_ir=o(" \u2014 "),Qz=a("a"),bir=o("TFLxmertModel"),vir=o(" (LXMERT model)"),Fir=l(),s4=a("li"),Vbe=a("strong"),Tir=o("marian"),Mir=o(" \u2014 "),Hz=a("a"),Eir=o("TFMarianModel"),Cir=o(" (Marian model)"),wir=l(),l4=a("li"),Xbe=a("strong"),Air=o("mbart"),yir=o(" \u2014 "),Uz=a("a"),Lir=o("TFMBartModel"),xir=o(" (mBART model)"),$ir=l(),i4=a("li"),zbe=a("strong"),kir=o("mobilebert"),Sir=o(" \u2014 "),Jz=a("a"),Rir=o("TFMobileBertModel"),Pir=o(" (MobileBERT model)"),Bir=l(),d4=a("li"),Wbe=a("strong"),Iir=o("mpnet"),qir=o(" \u2014 "),Yz=a("a"),Nir=o("TFMPNetModel"),jir=o(" (MPNet model)"),Dir=l(),c4=a("li"),Qbe=a("strong"),Gir=o("mt5"),Oir=o(" \u2014 "),Kz=a("a"),Vir=o("TFMT5Model"),Xir=o(" (mT5 model)"),zir=l(),m4=a("li"),Hbe=a("strong"),Wir=o("openai-gpt"),Qir=o(" \u2014 "),Zz=a("a"),Hir=o("TFOpenAIGPTModel"),Uir=o(" (OpenAI GPT model)"),Jir=l(),f4=a("li"),Ube=a("strong"),Yir=o("pegasus"),Kir=o(" \u2014 "),eW=a("a"),Zir=o("TFPegasusModel"),edr=o(" (Pegasus model)"),odr=l(),g4=a("li"),Jbe=a("strong"),rdr=o("rembert"),tdr=o(" \u2014 "),oW=a("a"),adr=o("TFRemBertModel"),ndr=o(" (RemBERT model)"),sdr=l(),h4=a("li"),Ybe=a("strong"),ldr=o("roberta"),idr=o(" \u2014 "),rW=a("a"),ddr=o("TFRobertaModel"),cdr=o(" (RoBERTa model)"),mdr=l(),u4=a("li"),Kbe=a("strong"),fdr=o("roformer"),gdr=o(" \u2014 "),tW=a("a"),hdr=o("TFRoFormerModel"),udr=o(" (RoFormer model)"),pdr=l(),p4=a("li"),Zbe=a("strong"),_dr=o("speech_to_text"),bdr=o(" \u2014 "),aW=a("a"),vdr=o("TFSpeech2TextModel"),Fdr=o(" (Speech2Text model)"),Tdr=l(),_4=a("li"),e2e=a("strong"),Mdr=o("swin"),Edr=o(" \u2014 "),nW=a("a"),Cdr=o("TFSwinModel"),wdr=o(" (Swin model)"),Adr=l(),b4=a("li"),o2e=a("strong"),ydr=o("t5"),Ldr=o(" \u2014 "),sW=a("a"),xdr=o("TFT5Model"),$dr=o(" (T5 model)"),kdr=l(),v4=a("li"),r2e=a("strong"),Sdr=o("tapas"),Rdr=o(" \u2014 "),lW=a("a"),Pdr=o("TFTapasModel"),Bdr=o(" (TAPAS model)"),Idr=l(),F4=a("li"),t2e=a("strong"),qdr=o("transfo-xl"),Ndr=o(" \u2014 "),iW=a("a"),jdr=o("TFTransfoXLModel"),Ddr=o(" (Transformer-XL model)"),Gdr=l(),T4=a("li"),a2e=a("strong"),Odr=o("vit"),Vdr=o(" \u2014 "),dW=a("a"),Xdr=o("TFViTModel"),zdr=o(" (ViT model)"),Wdr=l(),M4=a("li"),n2e=a("strong"),Qdr=o("vit_mae"),Hdr=o(" \u2014 "),cW=a("a"),Udr=o("TFViTMAEModel"),Jdr=o(" (ViTMAE model)"),Ydr=l(),E4=a("li"),s2e=a("strong"),Kdr=o("wav2vec2"),Zdr=o(" \u2014 "),mW=a("a"),ecr=o("TFWav2Vec2Model"),ocr=o(" (Wav2Vec2 model)"),rcr=l(),C4=a("li"),l2e=a("strong"),tcr=o("xlm"),acr=o(" \u2014 "),fW=a("a"),ncr=o("TFXLMModel"),scr=o(" (XLM model)"),lcr=l(),w4=a("li"),i2e=a("strong"),icr=o("xlm-roberta"),dcr=o(" \u2014 "),gW=a("a"),ccr=o("TFXLMRobertaModel"),mcr=o(" (XLM-RoBERTa model)"),fcr=l(),A4=a("li"),d2e=a("strong"),gcr=o("xlnet"),hcr=o(" \u2014 "),hW=a("a"),ucr=o("TFXLNetModel"),pcr=o(" (XLNet model)"),_cr=l(),F(y4.$$.fragment),Iqe=l(),Vd=a("h2"),L4=a("a"),c2e=a("span"),F(H8.$$.fragment),bcr=l(),m2e=a("span"),vcr=o("TFAutoModelForPreTraining"),qqe=l(),Ko=a("div"),F(U8.$$.fragment),Fcr=l(),Xd=a("p"),Tcr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),uW=a("a"),Mcr=o("from_pretrained()"),Ecr=o(" class method or the "),pW=a("a"),Ccr=o("from_config()"),wcr=o(` class
method.`),Acr=l(),J8=a("p"),ycr=o("This class cannot be instantiated directly using "),f2e=a("code"),Lcr=o("__init__()"),xcr=o(" (throws an error)."),$cr=l(),Lt=a("div"),F(Y8.$$.fragment),kcr=l(),g2e=a("p"),Scr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Rcr=l(),zd=a("p"),Pcr=o(`Note:
Loading a model from its configuration file does `),h2e=a("strong"),Bcr=o("not"),Icr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_W=a("a"),qcr=o("from_pretrained()"),Ncr=o(" to load the model weights."),jcr=l(),F(x4.$$.fragment),Dcr=l(),Ar=a("div"),F(K8.$$.fragment),Gcr=l(),u2e=a("p"),Ocr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Vcr=l(),Za=a("p"),Xcr=o("The model class to instantiate is selected based on the "),p2e=a("code"),zcr=o("model_type"),Wcr=o(` property of the config object (either
passed as an argument or loaded from `),_2e=a("code"),Qcr=o("pretrained_model_name_or_path"),Hcr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b2e=a("code"),Ucr=o("pretrained_model_name_or_path"),Jcr=o(":"),Ycr=l(),se=a("ul"),$4=a("li"),v2e=a("strong"),Kcr=o("albert"),Zcr=o(" \u2014 "),bW=a("a"),emr=o("TFAlbertForPreTraining"),omr=o(" (ALBERT model)"),rmr=l(),k4=a("li"),F2e=a("strong"),tmr=o("bart"),amr=o(" \u2014 "),vW=a("a"),nmr=o("TFBartForConditionalGeneration"),smr=o(" (BART model)"),lmr=l(),S4=a("li"),T2e=a("strong"),imr=o("bert"),dmr=o(" \u2014 "),FW=a("a"),cmr=o("TFBertForPreTraining"),mmr=o(" (BERT model)"),fmr=l(),R4=a("li"),M2e=a("strong"),gmr=o("camembert"),hmr=o(" \u2014 "),TW=a("a"),umr=o("TFCamembertForMaskedLM"),pmr=o(" (CamemBERT model)"),_mr=l(),P4=a("li"),E2e=a("strong"),bmr=o("ctrl"),vmr=o(" \u2014 "),MW=a("a"),Fmr=o("TFCTRLLMHeadModel"),Tmr=o(" (CTRL model)"),Mmr=l(),B4=a("li"),C2e=a("strong"),Emr=o("distilbert"),Cmr=o(" \u2014 "),EW=a("a"),wmr=o("TFDistilBertForMaskedLM"),Amr=o(" (DistilBERT model)"),ymr=l(),I4=a("li"),w2e=a("strong"),Lmr=o("electra"),xmr=o(" \u2014 "),CW=a("a"),$mr=o("TFElectraForPreTraining"),kmr=o(" (ELECTRA model)"),Smr=l(),q4=a("li"),A2e=a("strong"),Rmr=o("flaubert"),Pmr=o(" \u2014 "),wW=a("a"),Bmr=o("TFFlaubertWithLMHeadModel"),Imr=o(" (FlauBERT model)"),qmr=l(),N4=a("li"),y2e=a("strong"),Nmr=o("funnel"),jmr=o(" \u2014 "),AW=a("a"),Dmr=o("TFFunnelForPreTraining"),Gmr=o(" (Funnel Transformer model)"),Omr=l(),j4=a("li"),L2e=a("strong"),Vmr=o("gpt2"),Xmr=o(" \u2014 "),yW=a("a"),zmr=o("TFGPT2LMHeadModel"),Wmr=o(" (OpenAI GPT-2 model)"),Qmr=l(),D4=a("li"),x2e=a("strong"),Hmr=o("layoutlm"),Umr=o(" \u2014 "),LW=a("a"),Jmr=o("TFLayoutLMForMaskedLM"),Ymr=o(" (LayoutLM model)"),Kmr=l(),G4=a("li"),$2e=a("strong"),Zmr=o("lxmert"),efr=o(" \u2014 "),xW=a("a"),ofr=o("TFLxmertForPreTraining"),rfr=o(" (LXMERT model)"),tfr=l(),O4=a("li"),k2e=a("strong"),afr=o("mobilebert"),nfr=o(" \u2014 "),$W=a("a"),sfr=o("TFMobileBertForPreTraining"),lfr=o(" (MobileBERT model)"),ifr=l(),V4=a("li"),S2e=a("strong"),dfr=o("mpnet"),cfr=o(" \u2014 "),kW=a("a"),mfr=o("TFMPNetForMaskedLM"),ffr=o(" (MPNet model)"),gfr=l(),X4=a("li"),R2e=a("strong"),hfr=o("openai-gpt"),ufr=o(" \u2014 "),SW=a("a"),pfr=o("TFOpenAIGPTLMHeadModel"),_fr=o(" (OpenAI GPT model)"),bfr=l(),z4=a("li"),P2e=a("strong"),vfr=o("roberta"),Ffr=o(" \u2014 "),RW=a("a"),Tfr=o("TFRobertaForMaskedLM"),Mfr=o(" (RoBERTa model)"),Efr=l(),W4=a("li"),B2e=a("strong"),Cfr=o("t5"),wfr=o(" \u2014 "),PW=a("a"),Afr=o("TFT5ForConditionalGeneration"),yfr=o(" (T5 model)"),Lfr=l(),Q4=a("li"),I2e=a("strong"),xfr=o("tapas"),$fr=o(" \u2014 "),BW=a("a"),kfr=o("TFTapasForMaskedLM"),Sfr=o(" (TAPAS model)"),Rfr=l(),H4=a("li"),q2e=a("strong"),Pfr=o("transfo-xl"),Bfr=o(" \u2014 "),IW=a("a"),Ifr=o("TFTransfoXLLMHeadModel"),qfr=o(" (Transformer-XL model)"),Nfr=l(),U4=a("li"),N2e=a("strong"),jfr=o("vit_mae"),Dfr=o(" \u2014 "),qW=a("a"),Gfr=o("TFViTMAEForPreTraining"),Ofr=o(" (ViTMAE model)"),Vfr=l(),J4=a("li"),j2e=a("strong"),Xfr=o("xlm"),zfr=o(" \u2014 "),NW=a("a"),Wfr=o("TFXLMWithLMHeadModel"),Qfr=o(" (XLM model)"),Hfr=l(),Y4=a("li"),D2e=a("strong"),Ufr=o("xlm-roberta"),Jfr=o(" \u2014 "),jW=a("a"),Yfr=o("TFXLMRobertaForMaskedLM"),Kfr=o(" (XLM-RoBERTa model)"),Zfr=l(),K4=a("li"),G2e=a("strong"),egr=o("xlnet"),ogr=o(" \u2014 "),DW=a("a"),rgr=o("TFXLNetLMHeadModel"),tgr=o(" (XLNet model)"),agr=l(),F(Z4.$$.fragment),Nqe=l(),Wd=a("h2"),eE=a("a"),O2e=a("span"),F(Z8.$$.fragment),ngr=l(),V2e=a("span"),sgr=o("TFAutoModelForCausalLM"),jqe=l(),Zo=a("div"),F(ex.$$.fragment),lgr=l(),Qd=a("p"),igr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),GW=a("a"),dgr=o("from_pretrained()"),cgr=o(" class method or the "),OW=a("a"),mgr=o("from_config()"),fgr=o(` class
method.`),ggr=l(),ox=a("p"),hgr=o("This class cannot be instantiated directly using "),X2e=a("code"),ugr=o("__init__()"),pgr=o(" (throws an error)."),_gr=l(),xt=a("div"),F(rx.$$.fragment),bgr=l(),z2e=a("p"),vgr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Fgr=l(),Hd=a("p"),Tgr=o(`Note:
Loading a model from its configuration file does `),W2e=a("strong"),Mgr=o("not"),Egr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VW=a("a"),Cgr=o("from_pretrained()"),wgr=o(" to load the model weights."),Agr=l(),F(oE.$$.fragment),ygr=l(),yr=a("div"),F(tx.$$.fragment),Lgr=l(),Q2e=a("p"),xgr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),$gr=l(),en=a("p"),kgr=o("The model class to instantiate is selected based on the "),H2e=a("code"),Sgr=o("model_type"),Rgr=o(` property of the config object (either
passed as an argument or loaded from `),U2e=a("code"),Pgr=o("pretrained_model_name_or_path"),Bgr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J2e=a("code"),Igr=o("pretrained_model_name_or_path"),qgr=o(":"),Ngr=l(),Te=a("ul"),rE=a("li"),Y2e=a("strong"),jgr=o("bert"),Dgr=o(" \u2014 "),XW=a("a"),Ggr=o("TFBertLMHeadModel"),Ogr=o(" (BERT model)"),Vgr=l(),tE=a("li"),K2e=a("strong"),Xgr=o("camembert"),zgr=o(" \u2014 "),zW=a("a"),Wgr=o("TFCamembertForCausalLM"),Qgr=o(" (CamemBERT model)"),Hgr=l(),aE=a("li"),Z2e=a("strong"),Ugr=o("ctrl"),Jgr=o(" \u2014 "),WW=a("a"),Ygr=o("TFCTRLLMHeadModel"),Kgr=o(" (CTRL model)"),Zgr=l(),nE=a("li"),eve=a("strong"),ehr=o("gpt2"),ohr=o(" \u2014 "),QW=a("a"),rhr=o("TFGPT2LMHeadModel"),thr=o(" (OpenAI GPT-2 model)"),ahr=l(),sE=a("li"),ove=a("strong"),nhr=o("gptj"),shr=o(" \u2014 "),HW=a("a"),lhr=o("TFGPTJForCausalLM"),ihr=o(" (GPT-J model)"),dhr=l(),lE=a("li"),rve=a("strong"),chr=o("openai-gpt"),mhr=o(" \u2014 "),UW=a("a"),fhr=o("TFOpenAIGPTLMHeadModel"),ghr=o(" (OpenAI GPT model)"),hhr=l(),iE=a("li"),tve=a("strong"),uhr=o("rembert"),phr=o(" \u2014 "),JW=a("a"),_hr=o("TFRemBertForCausalLM"),bhr=o(" (RemBERT model)"),vhr=l(),dE=a("li"),ave=a("strong"),Fhr=o("roberta"),Thr=o(" \u2014 "),YW=a("a"),Mhr=o("TFRobertaForCausalLM"),Ehr=o(" (RoBERTa model)"),Chr=l(),cE=a("li"),nve=a("strong"),whr=o("roformer"),Ahr=o(" \u2014 "),KW=a("a"),yhr=o("TFRoFormerForCausalLM"),Lhr=o(" (RoFormer model)"),xhr=l(),mE=a("li"),sve=a("strong"),$hr=o("transfo-xl"),khr=o(" \u2014 "),ZW=a("a"),Shr=o("TFTransfoXLLMHeadModel"),Rhr=o(" (Transformer-XL model)"),Phr=l(),fE=a("li"),lve=a("strong"),Bhr=o("xlm"),Ihr=o(" \u2014 "),eQ=a("a"),qhr=o("TFXLMWithLMHeadModel"),Nhr=o(" (XLM model)"),jhr=l(),gE=a("li"),ive=a("strong"),Dhr=o("xlnet"),Ghr=o(" \u2014 "),oQ=a("a"),Ohr=o("TFXLNetLMHeadModel"),Vhr=o(" (XLNet model)"),Xhr=l(),F(hE.$$.fragment),Dqe=l(),Ud=a("h2"),uE=a("a"),dve=a("span"),F(ax.$$.fragment),zhr=l(),cve=a("span"),Whr=o("TFAutoModelForImageClassification"),Gqe=l(),er=a("div"),F(nx.$$.fragment),Qhr=l(),Jd=a("p"),Hhr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),rQ=a("a"),Uhr=o("from_pretrained()"),Jhr=o(" class method or the "),tQ=a("a"),Yhr=o("from_config()"),Khr=o(` class
method.`),Zhr=l(),sx=a("p"),eur=o("This class cannot be instantiated directly using "),mve=a("code"),our=o("__init__()"),rur=o(" (throws an error)."),tur=l(),$t=a("div"),F(lx.$$.fragment),aur=l(),fve=a("p"),nur=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),sur=l(),Yd=a("p"),lur=o(`Note:
Loading a model from its configuration file does `),gve=a("strong"),iur=o("not"),dur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aQ=a("a"),cur=o("from_pretrained()"),mur=o(" to load the model weights."),fur=l(),F(pE.$$.fragment),gur=l(),Lr=a("div"),F(ix.$$.fragment),hur=l(),hve=a("p"),uur=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),pur=l(),on=a("p"),_ur=o("The model class to instantiate is selected based on the "),uve=a("code"),bur=o("model_type"),vur=o(` property of the config object (either
passed as an argument or loaded from `),pve=a("code"),Fur=o("pretrained_model_name_or_path"),Tur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_ve=a("code"),Mur=o("pretrained_model_name_or_path"),Eur=o(":"),Cur=l(),rn=a("ul"),_E=a("li"),bve=a("strong"),wur=o("convnext"),Aur=o(" \u2014 "),nQ=a("a"),yur=o("TFConvNextForImageClassification"),Lur=o(" (ConvNext model)"),xur=l(),bE=a("li"),vve=a("strong"),$ur=o("data2vec-vision"),kur=o(" \u2014 "),sQ=a("a"),Sur=o("TFData2VecVisionForImageClassification"),Rur=o(" (Data2VecVision model)"),Pur=l(),vE=a("li"),Fve=a("strong"),Bur=o("swin"),Iur=o(" \u2014 "),lQ=a("a"),qur=o("TFSwinForImageClassification"),Nur=o(" (Swin model)"),jur=l(),FE=a("li"),Tve=a("strong"),Dur=o("vit"),Gur=o(" \u2014 "),iQ=a("a"),Our=o("TFViTForImageClassification"),Vur=o(" (ViT model)"),Xur=l(),F(TE.$$.fragment),Oqe=l(),Kd=a("h2"),ME=a("a"),Mve=a("span"),F(dx.$$.fragment),zur=l(),Eve=a("span"),Wur=o("TFAutoModelForMaskedLM"),Vqe=l(),or=a("div"),F(cx.$$.fragment),Qur=l(),Zd=a("p"),Hur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),dQ=a("a"),Uur=o("from_pretrained()"),Jur=o(" class method or the "),cQ=a("a"),Yur=o("from_config()"),Kur=o(` class
method.`),Zur=l(),mx=a("p"),epr=o("This class cannot be instantiated directly using "),Cve=a("code"),opr=o("__init__()"),rpr=o(" (throws an error)."),tpr=l(),kt=a("div"),F(fx.$$.fragment),apr=l(),wve=a("p"),npr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),spr=l(),ec=a("p"),lpr=o(`Note:
Loading a model from its configuration file does `),Ave=a("strong"),ipr=o("not"),dpr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mQ=a("a"),cpr=o("from_pretrained()"),mpr=o(" to load the model weights."),fpr=l(),F(EE.$$.fragment),gpr=l(),xr=a("div"),F(gx.$$.fragment),hpr=l(),yve=a("p"),upr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),ppr=l(),tn=a("p"),_pr=o("The model class to instantiate is selected based on the "),Lve=a("code"),bpr=o("model_type"),vpr=o(` property of the config object (either
passed as an argument or loaded from `),xve=a("code"),Fpr=o("pretrained_model_name_or_path"),Tpr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$ve=a("code"),Mpr=o("pretrained_model_name_or_path"),Epr=o(":"),Cpr=l(),ie=a("ul"),CE=a("li"),kve=a("strong"),wpr=o("albert"),Apr=o(" \u2014 "),fQ=a("a"),ypr=o("TFAlbertForMaskedLM"),Lpr=o(" (ALBERT model)"),xpr=l(),wE=a("li"),Sve=a("strong"),$pr=o("bert"),kpr=o(" \u2014 "),gQ=a("a"),Spr=o("TFBertForMaskedLM"),Rpr=o(" (BERT model)"),Ppr=l(),AE=a("li"),Rve=a("strong"),Bpr=o("camembert"),Ipr=o(" \u2014 "),hQ=a("a"),qpr=o("TFCamembertForMaskedLM"),Npr=o(" (CamemBERT model)"),jpr=l(),yE=a("li"),Pve=a("strong"),Dpr=o("convbert"),Gpr=o(" \u2014 "),uQ=a("a"),Opr=o("TFConvBertForMaskedLM"),Vpr=o(" (ConvBERT model)"),Xpr=l(),LE=a("li"),Bve=a("strong"),zpr=o("deberta"),Wpr=o(" \u2014 "),pQ=a("a"),Qpr=o("TFDebertaForMaskedLM"),Hpr=o(" (DeBERTa model)"),Upr=l(),xE=a("li"),Ive=a("strong"),Jpr=o("deberta-v2"),Ypr=o(" \u2014 "),_Q=a("a"),Kpr=o("TFDebertaV2ForMaskedLM"),Zpr=o(" (DeBERTa-v2 model)"),e_r=l(),$E=a("li"),qve=a("strong"),o_r=o("distilbert"),r_r=o(" \u2014 "),bQ=a("a"),t_r=o("TFDistilBertForMaskedLM"),a_r=o(" (DistilBERT model)"),n_r=l(),kE=a("li"),Nve=a("strong"),s_r=o("electra"),l_r=o(" \u2014 "),vQ=a("a"),i_r=o("TFElectraForMaskedLM"),d_r=o(" (ELECTRA model)"),c_r=l(),SE=a("li"),jve=a("strong"),m_r=o("flaubert"),f_r=o(" \u2014 "),FQ=a("a"),g_r=o("TFFlaubertWithLMHeadModel"),h_r=o(" (FlauBERT model)"),u_r=l(),RE=a("li"),Dve=a("strong"),p_r=o("funnel"),__r=o(" \u2014 "),TQ=a("a"),b_r=o("TFFunnelForMaskedLM"),v_r=o(" (Funnel Transformer model)"),F_r=l(),PE=a("li"),Gve=a("strong"),T_r=o("layoutlm"),M_r=o(" \u2014 "),MQ=a("a"),E_r=o("TFLayoutLMForMaskedLM"),C_r=o(" (LayoutLM model)"),w_r=l(),BE=a("li"),Ove=a("strong"),A_r=o("longformer"),y_r=o(" \u2014 "),EQ=a("a"),L_r=o("TFLongformerForMaskedLM"),x_r=o(" (Longformer model)"),$_r=l(),IE=a("li"),Vve=a("strong"),k_r=o("mobilebert"),S_r=o(" \u2014 "),CQ=a("a"),R_r=o("TFMobileBertForMaskedLM"),P_r=o(" (MobileBERT model)"),B_r=l(),qE=a("li"),Xve=a("strong"),I_r=o("mpnet"),q_r=o(" \u2014 "),wQ=a("a"),N_r=o("TFMPNetForMaskedLM"),j_r=o(" (MPNet model)"),D_r=l(),NE=a("li"),zve=a("strong"),G_r=o("rembert"),O_r=o(" \u2014 "),AQ=a("a"),V_r=o("TFRemBertForMaskedLM"),X_r=o(" (RemBERT model)"),z_r=l(),jE=a("li"),Wve=a("strong"),W_r=o("roberta"),Q_r=o(" \u2014 "),yQ=a("a"),H_r=o("TFRobertaForMaskedLM"),U_r=o(" (RoBERTa model)"),J_r=l(),DE=a("li"),Qve=a("strong"),Y_r=o("roformer"),K_r=o(" \u2014 "),LQ=a("a"),Z_r=o("TFRoFormerForMaskedLM"),ebr=o(" (RoFormer model)"),obr=l(),GE=a("li"),Hve=a("strong"),rbr=o("tapas"),tbr=o(" \u2014 "),xQ=a("a"),abr=o("TFTapasForMaskedLM"),nbr=o(" (TAPAS model)"),sbr=l(),OE=a("li"),Uve=a("strong"),lbr=o("xlm"),ibr=o(" \u2014 "),$Q=a("a"),dbr=o("TFXLMWithLMHeadModel"),cbr=o(" (XLM model)"),mbr=l(),VE=a("li"),Jve=a("strong"),fbr=o("xlm-roberta"),gbr=o(" \u2014 "),kQ=a("a"),hbr=o("TFXLMRobertaForMaskedLM"),ubr=o(" (XLM-RoBERTa model)"),pbr=l(),F(XE.$$.fragment),Xqe=l(),oc=a("h2"),zE=a("a"),Yve=a("span"),F(hx.$$.fragment),_br=l(),Kve=a("span"),bbr=o("TFAutoModelForSeq2SeqLM"),zqe=l(),rr=a("div"),F(ux.$$.fragment),vbr=l(),rc=a("p"),Fbr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),SQ=a("a"),Tbr=o("from_pretrained()"),Mbr=o(" class method or the "),RQ=a("a"),Ebr=o("from_config()"),Cbr=o(` class
method.`),wbr=l(),px=a("p"),Abr=o("This class cannot be instantiated directly using "),Zve=a("code"),ybr=o("__init__()"),Lbr=o(" (throws an error)."),xbr=l(),St=a("div"),F(_x.$$.fragment),$br=l(),eFe=a("p"),kbr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Sbr=l(),tc=a("p"),Rbr=o(`Note:
Loading a model from its configuration file does `),oFe=a("strong"),Pbr=o("not"),Bbr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PQ=a("a"),Ibr=o("from_pretrained()"),qbr=o(" to load the model weights."),Nbr=l(),F(WE.$$.fragment),jbr=l(),$r=a("div"),F(bx.$$.fragment),Dbr=l(),rFe=a("p"),Gbr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Obr=l(),an=a("p"),Vbr=o("The model class to instantiate is selected based on the "),tFe=a("code"),Xbr=o("model_type"),zbr=o(` property of the config object (either
passed as an argument or loaded from `),aFe=a("code"),Wbr=o("pretrained_model_name_or_path"),Qbr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nFe=a("code"),Hbr=o("pretrained_model_name_or_path"),Ubr=o(":"),Jbr=l(),ye=a("ul"),QE=a("li"),sFe=a("strong"),Ybr=o("bart"),Kbr=o(" \u2014 "),BQ=a("a"),Zbr=o("TFBartForConditionalGeneration"),e2r=o(" (BART model)"),o2r=l(),HE=a("li"),lFe=a("strong"),r2r=o("blenderbot"),t2r=o(" \u2014 "),IQ=a("a"),a2r=o("TFBlenderbotForConditionalGeneration"),n2r=o(" (Blenderbot model)"),s2r=l(),UE=a("li"),iFe=a("strong"),l2r=o("blenderbot-small"),i2r=o(" \u2014 "),qQ=a("a"),d2r=o("TFBlenderbotSmallForConditionalGeneration"),c2r=o(" (BlenderbotSmall model)"),m2r=l(),JE=a("li"),dFe=a("strong"),f2r=o("encoder-decoder"),g2r=o(" \u2014 "),NQ=a("a"),h2r=o("TFEncoderDecoderModel"),u2r=o(" (Encoder decoder model)"),p2r=l(),YE=a("li"),cFe=a("strong"),_2r=o("led"),b2r=o(" \u2014 "),jQ=a("a"),v2r=o("TFLEDForConditionalGeneration"),F2r=o(" (LED model)"),T2r=l(),KE=a("li"),mFe=a("strong"),M2r=o("marian"),E2r=o(" \u2014 "),DQ=a("a"),C2r=o("TFMarianMTModel"),w2r=o(" (Marian model)"),A2r=l(),ZE=a("li"),fFe=a("strong"),y2r=o("mbart"),L2r=o(" \u2014 "),GQ=a("a"),x2r=o("TFMBartForConditionalGeneration"),$2r=o(" (mBART model)"),k2r=l(),eC=a("li"),gFe=a("strong"),S2r=o("mt5"),R2r=o(" \u2014 "),OQ=a("a"),P2r=o("TFMT5ForConditionalGeneration"),B2r=o(" (mT5 model)"),I2r=l(),oC=a("li"),hFe=a("strong"),q2r=o("pegasus"),N2r=o(" \u2014 "),VQ=a("a"),j2r=o("TFPegasusForConditionalGeneration"),D2r=o(" (Pegasus model)"),G2r=l(),rC=a("li"),uFe=a("strong"),O2r=o("t5"),V2r=o(" \u2014 "),XQ=a("a"),X2r=o("TFT5ForConditionalGeneration"),z2r=o(" (T5 model)"),W2r=l(),F(tC.$$.fragment),Wqe=l(),ac=a("h2"),aC=a("a"),pFe=a("span"),F(vx.$$.fragment),Q2r=l(),_Fe=a("span"),H2r=o("TFAutoModelForSequenceClassification"),Qqe=l(),tr=a("div"),F(Fx.$$.fragment),U2r=l(),nc=a("p"),J2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),zQ=a("a"),Y2r=o("from_pretrained()"),K2r=o(" class method or the "),WQ=a("a"),Z2r=o("from_config()"),evr=o(` class
method.`),ovr=l(),Tx=a("p"),rvr=o("This class cannot be instantiated directly using "),bFe=a("code"),tvr=o("__init__()"),avr=o(" (throws an error)."),nvr=l(),Rt=a("div"),F(Mx.$$.fragment),svr=l(),vFe=a("p"),lvr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),ivr=l(),sc=a("p"),dvr=o(`Note:
Loading a model from its configuration file does `),FFe=a("strong"),cvr=o("not"),mvr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QQ=a("a"),fvr=o("from_pretrained()"),gvr=o(" to load the model weights."),hvr=l(),F(nC.$$.fragment),uvr=l(),kr=a("div"),F(Ex.$$.fragment),pvr=l(),TFe=a("p"),_vr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),bvr=l(),nn=a("p"),vvr=o("The model class to instantiate is selected based on the "),MFe=a("code"),Fvr=o("model_type"),Tvr=o(` property of the config object (either
passed as an argument or loaded from `),EFe=a("code"),Mvr=o("pretrained_model_name_or_path"),Evr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),CFe=a("code"),Cvr=o("pretrained_model_name_or_path"),wvr=o(":"),Avr=l(),ee=a("ul"),sC=a("li"),wFe=a("strong"),yvr=o("albert"),Lvr=o(" \u2014 "),HQ=a("a"),xvr=o("TFAlbertForSequenceClassification"),$vr=o(" (ALBERT model)"),kvr=l(),lC=a("li"),AFe=a("strong"),Svr=o("bert"),Rvr=o(" \u2014 "),UQ=a("a"),Pvr=o("TFBertForSequenceClassification"),Bvr=o(" (BERT model)"),Ivr=l(),iC=a("li"),yFe=a("strong"),qvr=o("camembert"),Nvr=o(" \u2014 "),JQ=a("a"),jvr=o("TFCamembertForSequenceClassification"),Dvr=o(" (CamemBERT model)"),Gvr=l(),dC=a("li"),LFe=a("strong"),Ovr=o("convbert"),Vvr=o(" \u2014 "),YQ=a("a"),Xvr=o("TFConvBertForSequenceClassification"),zvr=o(" (ConvBERT model)"),Wvr=l(),cC=a("li"),xFe=a("strong"),Qvr=o("ctrl"),Hvr=o(" \u2014 "),KQ=a("a"),Uvr=o("TFCTRLForSequenceClassification"),Jvr=o(" (CTRL model)"),Yvr=l(),mC=a("li"),$Fe=a("strong"),Kvr=o("deberta"),Zvr=o(" \u2014 "),ZQ=a("a"),eFr=o("TFDebertaForSequenceClassification"),oFr=o(" (DeBERTa model)"),rFr=l(),fC=a("li"),kFe=a("strong"),tFr=o("deberta-v2"),aFr=o(" \u2014 "),eH=a("a"),nFr=o("TFDebertaV2ForSequenceClassification"),sFr=o(" (DeBERTa-v2 model)"),lFr=l(),gC=a("li"),SFe=a("strong"),iFr=o("distilbert"),dFr=o(" \u2014 "),oH=a("a"),cFr=o("TFDistilBertForSequenceClassification"),mFr=o(" (DistilBERT model)"),fFr=l(),hC=a("li"),RFe=a("strong"),gFr=o("electra"),hFr=o(" \u2014 "),rH=a("a"),uFr=o("TFElectraForSequenceClassification"),pFr=o(" (ELECTRA model)"),_Fr=l(),uC=a("li"),PFe=a("strong"),bFr=o("flaubert"),vFr=o(" \u2014 "),tH=a("a"),FFr=o("TFFlaubertForSequenceClassification"),TFr=o(" (FlauBERT model)"),MFr=l(),pC=a("li"),BFe=a("strong"),EFr=o("funnel"),CFr=o(" \u2014 "),aH=a("a"),wFr=o("TFFunnelForSequenceClassification"),AFr=o(" (Funnel Transformer model)"),yFr=l(),_C=a("li"),IFe=a("strong"),LFr=o("gpt2"),xFr=o(" \u2014 "),nH=a("a"),$Fr=o("TFGPT2ForSequenceClassification"),kFr=o(" (OpenAI GPT-2 model)"),SFr=l(),bC=a("li"),qFe=a("strong"),RFr=o("gptj"),PFr=o(" \u2014 "),sH=a("a"),BFr=o("TFGPTJForSequenceClassification"),IFr=o(" (GPT-J model)"),qFr=l(),vC=a("li"),NFe=a("strong"),NFr=o("layoutlm"),jFr=o(" \u2014 "),lH=a("a"),DFr=o("TFLayoutLMForSequenceClassification"),GFr=o(" (LayoutLM model)"),OFr=l(),FC=a("li"),jFe=a("strong"),VFr=o("longformer"),XFr=o(" \u2014 "),iH=a("a"),zFr=o("TFLongformerForSequenceClassification"),WFr=o(" (Longformer model)"),QFr=l(),TC=a("li"),DFe=a("strong"),HFr=o("mobilebert"),UFr=o(" \u2014 "),dH=a("a"),JFr=o("TFMobileBertForSequenceClassification"),YFr=o(" (MobileBERT model)"),KFr=l(),MC=a("li"),GFe=a("strong"),ZFr=o("mpnet"),e1r=o(" \u2014 "),cH=a("a"),o1r=o("TFMPNetForSequenceClassification"),r1r=o(" (MPNet model)"),t1r=l(),EC=a("li"),OFe=a("strong"),a1r=o("openai-gpt"),n1r=o(" \u2014 "),mH=a("a"),s1r=o("TFOpenAIGPTForSequenceClassification"),l1r=o(" (OpenAI GPT model)"),i1r=l(),CC=a("li"),VFe=a("strong"),d1r=o("rembert"),c1r=o(" \u2014 "),fH=a("a"),m1r=o("TFRemBertForSequenceClassification"),f1r=o(" (RemBERT model)"),g1r=l(),wC=a("li"),XFe=a("strong"),h1r=o("roberta"),u1r=o(" \u2014 "),gH=a("a"),p1r=o("TFRobertaForSequenceClassification"),_1r=o(" (RoBERTa model)"),b1r=l(),AC=a("li"),zFe=a("strong"),v1r=o("roformer"),F1r=o(" \u2014 "),hH=a("a"),T1r=o("TFRoFormerForSequenceClassification"),M1r=o(" (RoFormer model)"),E1r=l(),yC=a("li"),WFe=a("strong"),C1r=o("tapas"),w1r=o(" \u2014 "),uH=a("a"),A1r=o("TFTapasForSequenceClassification"),y1r=o(" (TAPAS model)"),L1r=l(),LC=a("li"),QFe=a("strong"),x1r=o("transfo-xl"),$1r=o(" \u2014 "),pH=a("a"),k1r=o("TFTransfoXLForSequenceClassification"),S1r=o(" (Transformer-XL model)"),R1r=l(),xC=a("li"),HFe=a("strong"),P1r=o("xlm"),B1r=o(" \u2014 "),_H=a("a"),I1r=o("TFXLMForSequenceClassification"),q1r=o(" (XLM model)"),N1r=l(),$C=a("li"),UFe=a("strong"),j1r=o("xlm-roberta"),D1r=o(" \u2014 "),bH=a("a"),G1r=o("TFXLMRobertaForSequenceClassification"),O1r=o(" (XLM-RoBERTa model)"),V1r=l(),kC=a("li"),JFe=a("strong"),X1r=o("xlnet"),z1r=o(" \u2014 "),vH=a("a"),W1r=o("TFXLNetForSequenceClassification"),Q1r=o(" (XLNet model)"),H1r=l(),F(SC.$$.fragment),Hqe=l(),lc=a("h2"),RC=a("a"),YFe=a("span"),F(Cx.$$.fragment),U1r=l(),KFe=a("span"),J1r=o("TFAutoModelForMultipleChoice"),Uqe=l(),ar=a("div"),F(wx.$$.fragment),Y1r=l(),ic=a("p"),K1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),FH=a("a"),Z1r=o("from_pretrained()"),eTr=o(" class method or the "),TH=a("a"),oTr=o("from_config()"),rTr=o(` class
method.`),tTr=l(),Ax=a("p"),aTr=o("This class cannot be instantiated directly using "),ZFe=a("code"),nTr=o("__init__()"),sTr=o(" (throws an error)."),lTr=l(),Pt=a("div"),F(yx.$$.fragment),iTr=l(),e1e=a("p"),dTr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),cTr=l(),dc=a("p"),mTr=o(`Note:
Loading a model from its configuration file does `),o1e=a("strong"),fTr=o("not"),gTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MH=a("a"),hTr=o("from_pretrained()"),uTr=o(" to load the model weights."),pTr=l(),F(PC.$$.fragment),_Tr=l(),Sr=a("div"),F(Lx.$$.fragment),bTr=l(),r1e=a("p"),vTr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),FTr=l(),sn=a("p"),TTr=o("The model class to instantiate is selected based on the "),t1e=a("code"),MTr=o("model_type"),ETr=o(` property of the config object (either
passed as an argument or loaded from `),a1e=a("code"),CTr=o("pretrained_model_name_or_path"),wTr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n1e=a("code"),ATr=o("pretrained_model_name_or_path"),yTr=o(":"),LTr=l(),he=a("ul"),BC=a("li"),s1e=a("strong"),xTr=o("albert"),$Tr=o(" \u2014 "),EH=a("a"),kTr=o("TFAlbertForMultipleChoice"),STr=o(" (ALBERT model)"),RTr=l(),IC=a("li"),l1e=a("strong"),PTr=o("bert"),BTr=o(" \u2014 "),CH=a("a"),ITr=o("TFBertForMultipleChoice"),qTr=o(" (BERT model)"),NTr=l(),qC=a("li"),i1e=a("strong"),jTr=o("camembert"),DTr=o(" \u2014 "),wH=a("a"),GTr=o("TFCamembertForMultipleChoice"),OTr=o(" (CamemBERT model)"),VTr=l(),NC=a("li"),d1e=a("strong"),XTr=o("convbert"),zTr=o(" \u2014 "),AH=a("a"),WTr=o("TFConvBertForMultipleChoice"),QTr=o(" (ConvBERT model)"),HTr=l(),jC=a("li"),c1e=a("strong"),UTr=o("distilbert"),JTr=o(" \u2014 "),yH=a("a"),YTr=o("TFDistilBertForMultipleChoice"),KTr=o(" (DistilBERT model)"),ZTr=l(),DC=a("li"),m1e=a("strong"),eMr=o("electra"),oMr=o(" \u2014 "),LH=a("a"),rMr=o("TFElectraForMultipleChoice"),tMr=o(" (ELECTRA model)"),aMr=l(),GC=a("li"),f1e=a("strong"),nMr=o("flaubert"),sMr=o(" \u2014 "),xH=a("a"),lMr=o("TFFlaubertForMultipleChoice"),iMr=o(" (FlauBERT model)"),dMr=l(),OC=a("li"),g1e=a("strong"),cMr=o("funnel"),mMr=o(" \u2014 "),$H=a("a"),fMr=o("TFFunnelForMultipleChoice"),gMr=o(" (Funnel Transformer model)"),hMr=l(),VC=a("li"),h1e=a("strong"),uMr=o("longformer"),pMr=o(" \u2014 "),kH=a("a"),_Mr=o("TFLongformerForMultipleChoice"),bMr=o(" (Longformer model)"),vMr=l(),XC=a("li"),u1e=a("strong"),FMr=o("mobilebert"),TMr=o(" \u2014 "),SH=a("a"),MMr=o("TFMobileBertForMultipleChoice"),EMr=o(" (MobileBERT model)"),CMr=l(),zC=a("li"),p1e=a("strong"),wMr=o("mpnet"),AMr=o(" \u2014 "),RH=a("a"),yMr=o("TFMPNetForMultipleChoice"),LMr=o(" (MPNet model)"),xMr=l(),WC=a("li"),_1e=a("strong"),$Mr=o("rembert"),kMr=o(" \u2014 "),PH=a("a"),SMr=o("TFRemBertForMultipleChoice"),RMr=o(" (RemBERT model)"),PMr=l(),QC=a("li"),b1e=a("strong"),BMr=o("roberta"),IMr=o(" \u2014 "),BH=a("a"),qMr=o("TFRobertaForMultipleChoice"),NMr=o(" (RoBERTa model)"),jMr=l(),HC=a("li"),v1e=a("strong"),DMr=o("roformer"),GMr=o(" \u2014 "),IH=a("a"),OMr=o("TFRoFormerForMultipleChoice"),VMr=o(" (RoFormer model)"),XMr=l(),UC=a("li"),F1e=a("strong"),zMr=o("xlm"),WMr=o(" \u2014 "),qH=a("a"),QMr=o("TFXLMForMultipleChoice"),HMr=o(" (XLM model)"),UMr=l(),JC=a("li"),T1e=a("strong"),JMr=o("xlm-roberta"),YMr=o(" \u2014 "),NH=a("a"),KMr=o("TFXLMRobertaForMultipleChoice"),ZMr=o(" (XLM-RoBERTa model)"),e4r=l(),YC=a("li"),M1e=a("strong"),o4r=o("xlnet"),r4r=o(" \u2014 "),jH=a("a"),t4r=o("TFXLNetForMultipleChoice"),a4r=o(" (XLNet model)"),n4r=l(),F(KC.$$.fragment),Jqe=l(),cc=a("h2"),ZC=a("a"),E1e=a("span"),F(xx.$$.fragment),s4r=l(),C1e=a("span"),l4r=o("TFAutoModelForNextSentencePrediction"),Yqe=l(),nr=a("div"),F($x.$$.fragment),i4r=l(),mc=a("p"),d4r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),DH=a("a"),c4r=o("from_pretrained()"),m4r=o(" class method or the "),GH=a("a"),f4r=o("from_config()"),g4r=o(` class
method.`),h4r=l(),kx=a("p"),u4r=o("This class cannot be instantiated directly using "),w1e=a("code"),p4r=o("__init__()"),_4r=o(" (throws an error)."),b4r=l(),Bt=a("div"),F(Sx.$$.fragment),v4r=l(),A1e=a("p"),F4r=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),T4r=l(),fc=a("p"),M4r=o(`Note:
Loading a model from its configuration file does `),y1e=a("strong"),E4r=o("not"),C4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OH=a("a"),w4r=o("from_pretrained()"),A4r=o(" to load the model weights."),y4r=l(),F(e5.$$.fragment),L4r=l(),Rr=a("div"),F(Rx.$$.fragment),x4r=l(),L1e=a("p"),$4r=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),k4r=l(),ln=a("p"),S4r=o("The model class to instantiate is selected based on the "),x1e=a("code"),R4r=o("model_type"),P4r=o(` property of the config object (either
passed as an argument or loaded from `),$1e=a("code"),B4r=o("pretrained_model_name_or_path"),I4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k1e=a("code"),q4r=o("pretrained_model_name_or_path"),N4r=o(":"),j4r=l(),Px=a("ul"),o5=a("li"),S1e=a("strong"),D4r=o("bert"),G4r=o(" \u2014 "),VH=a("a"),O4r=o("TFBertForNextSentencePrediction"),V4r=o(" (BERT model)"),X4r=l(),r5=a("li"),R1e=a("strong"),z4r=o("mobilebert"),W4r=o(" \u2014 "),XH=a("a"),Q4r=o("TFMobileBertForNextSentencePrediction"),H4r=o(" (MobileBERT model)"),U4r=l(),F(t5.$$.fragment),Kqe=l(),gc=a("h2"),a5=a("a"),P1e=a("span"),F(Bx.$$.fragment),J4r=l(),B1e=a("span"),Y4r=o("TFAutoModelForTableQuestionAnswering"),Zqe=l(),sr=a("div"),F(Ix.$$.fragment),K4r=l(),hc=a("p"),Z4r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),zH=a("a"),eEr=o("from_pretrained()"),oEr=o(" class method or the "),WH=a("a"),rEr=o("from_config()"),tEr=o(` class
method.`),aEr=l(),qx=a("p"),nEr=o("This class cannot be instantiated directly using "),I1e=a("code"),sEr=o("__init__()"),lEr=o(" (throws an error)."),iEr=l(),It=a("div"),F(Nx.$$.fragment),dEr=l(),q1e=a("p"),cEr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),mEr=l(),uc=a("p"),fEr=o(`Note:
Loading a model from its configuration file does `),N1e=a("strong"),gEr=o("not"),hEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QH=a("a"),uEr=o("from_pretrained()"),pEr=o(" to load the model weights."),_Er=l(),F(n5.$$.fragment),bEr=l(),Pr=a("div"),F(jx.$$.fragment),vEr=l(),j1e=a("p"),FEr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),TEr=l(),dn=a("p"),MEr=o("The model class to instantiate is selected based on the "),D1e=a("code"),EEr=o("model_type"),CEr=o(` property of the config object (either
passed as an argument or loaded from `),G1e=a("code"),wEr=o("pretrained_model_name_or_path"),AEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O1e=a("code"),yEr=o("pretrained_model_name_or_path"),LEr=o(":"),xEr=l(),V1e=a("ul"),s5=a("li"),X1e=a("strong"),$Er=o("tapas"),kEr=o(" \u2014 "),HH=a("a"),SEr=o("TFTapasForQuestionAnswering"),REr=o(" (TAPAS model)"),PEr=l(),F(l5.$$.fragment),eNe=l(),pc=a("h2"),i5=a("a"),z1e=a("span"),F(Dx.$$.fragment),BEr=l(),W1e=a("span"),IEr=o("TFAutoModelForTokenClassification"),oNe=l(),lr=a("div"),F(Gx.$$.fragment),qEr=l(),_c=a("p"),NEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),UH=a("a"),jEr=o("from_pretrained()"),DEr=o(" class method or the "),JH=a("a"),GEr=o("from_config()"),OEr=o(` class
method.`),VEr=l(),Ox=a("p"),XEr=o("This class cannot be instantiated directly using "),Q1e=a("code"),zEr=o("__init__()"),WEr=o(" (throws an error)."),QEr=l(),qt=a("div"),F(Vx.$$.fragment),HEr=l(),H1e=a("p"),UEr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),JEr=l(),bc=a("p"),YEr=o(`Note:
Loading a model from its configuration file does `),U1e=a("strong"),KEr=o("not"),ZEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YH=a("a"),eCr=o("from_pretrained()"),oCr=o(" to load the model weights."),rCr=l(),F(d5.$$.fragment),tCr=l(),Br=a("div"),F(Xx.$$.fragment),aCr=l(),J1e=a("p"),nCr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),sCr=l(),cn=a("p"),lCr=o("The model class to instantiate is selected based on the "),Y1e=a("code"),iCr=o("model_type"),dCr=o(` property of the config object (either
passed as an argument or loaded from `),K1e=a("code"),cCr=o("pretrained_model_name_or_path"),mCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z1e=a("code"),fCr=o("pretrained_model_name_or_path"),gCr=o(":"),hCr=l(),de=a("ul"),c5=a("li"),eTe=a("strong"),uCr=o("albert"),pCr=o(" \u2014 "),KH=a("a"),_Cr=o("TFAlbertForTokenClassification"),bCr=o(" (ALBERT model)"),vCr=l(),m5=a("li"),oTe=a("strong"),FCr=o("bert"),TCr=o(" \u2014 "),ZH=a("a"),MCr=o("TFBertForTokenClassification"),ECr=o(" (BERT model)"),CCr=l(),f5=a("li"),rTe=a("strong"),wCr=o("camembert"),ACr=o(" \u2014 "),eU=a("a"),yCr=o("TFCamembertForTokenClassification"),LCr=o(" (CamemBERT model)"),xCr=l(),g5=a("li"),tTe=a("strong"),$Cr=o("convbert"),kCr=o(" \u2014 "),oU=a("a"),SCr=o("TFConvBertForTokenClassification"),RCr=o(" (ConvBERT model)"),PCr=l(),h5=a("li"),aTe=a("strong"),BCr=o("deberta"),ICr=o(" \u2014 "),rU=a("a"),qCr=o("TFDebertaForTokenClassification"),NCr=o(" (DeBERTa model)"),jCr=l(),u5=a("li"),nTe=a("strong"),DCr=o("deberta-v2"),GCr=o(" \u2014 "),tU=a("a"),OCr=o("TFDebertaV2ForTokenClassification"),VCr=o(" (DeBERTa-v2 model)"),XCr=l(),p5=a("li"),sTe=a("strong"),zCr=o("distilbert"),WCr=o(" \u2014 "),aU=a("a"),QCr=o("TFDistilBertForTokenClassification"),HCr=o(" (DistilBERT model)"),UCr=l(),_5=a("li"),lTe=a("strong"),JCr=o("electra"),YCr=o(" \u2014 "),nU=a("a"),KCr=o("TFElectraForTokenClassification"),ZCr=o(" (ELECTRA model)"),e5r=l(),b5=a("li"),iTe=a("strong"),o5r=o("flaubert"),r5r=o(" \u2014 "),sU=a("a"),t5r=o("TFFlaubertForTokenClassification"),a5r=o(" (FlauBERT model)"),n5r=l(),v5=a("li"),dTe=a("strong"),s5r=o("funnel"),l5r=o(" \u2014 "),lU=a("a"),i5r=o("TFFunnelForTokenClassification"),d5r=o(" (Funnel Transformer model)"),c5r=l(),F5=a("li"),cTe=a("strong"),m5r=o("layoutlm"),f5r=o(" \u2014 "),iU=a("a"),g5r=o("TFLayoutLMForTokenClassification"),h5r=o(" (LayoutLM model)"),u5r=l(),T5=a("li"),mTe=a("strong"),p5r=o("longformer"),_5r=o(" \u2014 "),dU=a("a"),b5r=o("TFLongformerForTokenClassification"),v5r=o(" (Longformer model)"),F5r=l(),M5=a("li"),fTe=a("strong"),T5r=o("mobilebert"),M5r=o(" \u2014 "),cU=a("a"),E5r=o("TFMobileBertForTokenClassification"),C5r=o(" (MobileBERT model)"),w5r=l(),E5=a("li"),gTe=a("strong"),A5r=o("mpnet"),y5r=o(" \u2014 "),mU=a("a"),L5r=o("TFMPNetForTokenClassification"),x5r=o(" (MPNet model)"),$5r=l(),C5=a("li"),hTe=a("strong"),k5r=o("rembert"),S5r=o(" \u2014 "),fU=a("a"),R5r=o("TFRemBertForTokenClassification"),P5r=o(" (RemBERT model)"),B5r=l(),w5=a("li"),uTe=a("strong"),I5r=o("roberta"),q5r=o(" \u2014 "),gU=a("a"),N5r=o("TFRobertaForTokenClassification"),j5r=o(" (RoBERTa model)"),D5r=l(),A5=a("li"),pTe=a("strong"),G5r=o("roformer"),O5r=o(" \u2014 "),hU=a("a"),V5r=o("TFRoFormerForTokenClassification"),X5r=o(" (RoFormer model)"),z5r=l(),y5=a("li"),_Te=a("strong"),W5r=o("xlm"),Q5r=o(" \u2014 "),uU=a("a"),H5r=o("TFXLMForTokenClassification"),U5r=o(" (XLM model)"),J5r=l(),L5=a("li"),bTe=a("strong"),Y5r=o("xlm-roberta"),K5r=o(" \u2014 "),pU=a("a"),Z5r=o("TFXLMRobertaForTokenClassification"),e3r=o(" (XLM-RoBERTa model)"),o3r=l(),x5=a("li"),vTe=a("strong"),r3r=o("xlnet"),t3r=o(" \u2014 "),_U=a("a"),a3r=o("TFXLNetForTokenClassification"),n3r=o(" (XLNet model)"),s3r=l(),F($5.$$.fragment),rNe=l(),vc=a("h2"),k5=a("a"),FTe=a("span"),F(zx.$$.fragment),l3r=l(),TTe=a("span"),i3r=o("TFAutoModelForQuestionAnswering"),tNe=l(),ir=a("div"),F(Wx.$$.fragment),d3r=l(),Fc=a("p"),c3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),bU=a("a"),m3r=o("from_pretrained()"),f3r=o(" class method or the "),vU=a("a"),g3r=o("from_config()"),h3r=o(` class
method.`),u3r=l(),Qx=a("p"),p3r=o("This class cannot be instantiated directly using "),MTe=a("code"),_3r=o("__init__()"),b3r=o(" (throws an error)."),v3r=l(),Nt=a("div"),F(Hx.$$.fragment),F3r=l(),ETe=a("p"),T3r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),M3r=l(),Tc=a("p"),E3r=o(`Note:
Loading a model from its configuration file does `),CTe=a("strong"),C3r=o("not"),w3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FU=a("a"),A3r=o("from_pretrained()"),y3r=o(" to load the model weights."),L3r=l(),F(S5.$$.fragment),x3r=l(),Ir=a("div"),F(Ux.$$.fragment),$3r=l(),wTe=a("p"),k3r=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),S3r=l(),mn=a("p"),R3r=o("The model class to instantiate is selected based on the "),ATe=a("code"),P3r=o("model_type"),B3r=o(` property of the config object (either
passed as an argument or loaded from `),yTe=a("code"),I3r=o("pretrained_model_name_or_path"),q3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),LTe=a("code"),N3r=o("pretrained_model_name_or_path"),j3r=o(":"),D3r=l(),ce=a("ul"),R5=a("li"),xTe=a("strong"),G3r=o("albert"),O3r=o(" \u2014 "),TU=a("a"),V3r=o("TFAlbertForQuestionAnswering"),X3r=o(" (ALBERT model)"),z3r=l(),P5=a("li"),$Te=a("strong"),W3r=o("bert"),Q3r=o(" \u2014 "),MU=a("a"),H3r=o("TFBertForQuestionAnswering"),U3r=o(" (BERT model)"),J3r=l(),B5=a("li"),kTe=a("strong"),Y3r=o("camembert"),K3r=o(" \u2014 "),EU=a("a"),Z3r=o("TFCamembertForQuestionAnswering"),ewr=o(" (CamemBERT model)"),owr=l(),I5=a("li"),STe=a("strong"),rwr=o("convbert"),twr=o(" \u2014 "),CU=a("a"),awr=o("TFConvBertForQuestionAnswering"),nwr=o(" (ConvBERT model)"),swr=l(),q5=a("li"),RTe=a("strong"),lwr=o("deberta"),iwr=o(" \u2014 "),wU=a("a"),dwr=o("TFDebertaForQuestionAnswering"),cwr=o(" (DeBERTa model)"),mwr=l(),N5=a("li"),PTe=a("strong"),fwr=o("deberta-v2"),gwr=o(" \u2014 "),AU=a("a"),hwr=o("TFDebertaV2ForQuestionAnswering"),uwr=o(" (DeBERTa-v2 model)"),pwr=l(),j5=a("li"),BTe=a("strong"),_wr=o("distilbert"),bwr=o(" \u2014 "),yU=a("a"),vwr=o("TFDistilBertForQuestionAnswering"),Fwr=o(" (DistilBERT model)"),Twr=l(),D5=a("li"),ITe=a("strong"),Mwr=o("electra"),Ewr=o(" \u2014 "),LU=a("a"),Cwr=o("TFElectraForQuestionAnswering"),wwr=o(" (ELECTRA model)"),Awr=l(),G5=a("li"),qTe=a("strong"),ywr=o("flaubert"),Lwr=o(" \u2014 "),xU=a("a"),xwr=o("TFFlaubertForQuestionAnsweringSimple"),$wr=o(" (FlauBERT model)"),kwr=l(),O5=a("li"),NTe=a("strong"),Swr=o("funnel"),Rwr=o(" \u2014 "),$U=a("a"),Pwr=o("TFFunnelForQuestionAnswering"),Bwr=o(" (Funnel Transformer model)"),Iwr=l(),V5=a("li"),jTe=a("strong"),qwr=o("gptj"),Nwr=o(" \u2014 "),kU=a("a"),jwr=o("TFGPTJForQuestionAnswering"),Dwr=o(" (GPT-J model)"),Gwr=l(),X5=a("li"),DTe=a("strong"),Owr=o("longformer"),Vwr=o(" \u2014 "),SU=a("a"),Xwr=o("TFLongformerForQuestionAnswering"),zwr=o(" (Longformer model)"),Wwr=l(),z5=a("li"),GTe=a("strong"),Qwr=o("mobilebert"),Hwr=o(" \u2014 "),RU=a("a"),Uwr=o("TFMobileBertForQuestionAnswering"),Jwr=o(" (MobileBERT model)"),Ywr=l(),W5=a("li"),OTe=a("strong"),Kwr=o("mpnet"),Zwr=o(" \u2014 "),PU=a("a"),eAr=o("TFMPNetForQuestionAnswering"),oAr=o(" (MPNet model)"),rAr=l(),Q5=a("li"),VTe=a("strong"),tAr=o("rembert"),aAr=o(" \u2014 "),BU=a("a"),nAr=o("TFRemBertForQuestionAnswering"),sAr=o(" (RemBERT model)"),lAr=l(),H5=a("li"),XTe=a("strong"),iAr=o("roberta"),dAr=o(" \u2014 "),IU=a("a"),cAr=o("TFRobertaForQuestionAnswering"),mAr=o(" (RoBERTa model)"),fAr=l(),U5=a("li"),zTe=a("strong"),gAr=o("roformer"),hAr=o(" \u2014 "),qU=a("a"),uAr=o("TFRoFormerForQuestionAnswering"),pAr=o(" (RoFormer model)"),_Ar=l(),J5=a("li"),WTe=a("strong"),bAr=o("xlm"),vAr=o(" \u2014 "),NU=a("a"),FAr=o("TFXLMForQuestionAnsweringSimple"),TAr=o(" (XLM model)"),MAr=l(),Y5=a("li"),QTe=a("strong"),EAr=o("xlm-roberta"),CAr=o(" \u2014 "),jU=a("a"),wAr=o("TFXLMRobertaForQuestionAnswering"),AAr=o(" (XLM-RoBERTa model)"),yAr=l(),K5=a("li"),HTe=a("strong"),LAr=o("xlnet"),xAr=o(" \u2014 "),DU=a("a"),$Ar=o("TFXLNetForQuestionAnsweringSimple"),kAr=o(" (XLNet model)"),SAr=l(),F(Z5.$$.fragment),aNe=l(),Mc=a("h2"),e3=a("a"),UTe=a("span"),F(Jx.$$.fragment),RAr=l(),JTe=a("span"),PAr=o("TFAutoModelForVision2Seq"),nNe=l(),dr=a("div"),F(Yx.$$.fragment),BAr=l(),Ec=a("p"),IAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),GU=a("a"),qAr=o("from_pretrained()"),NAr=o(" class method or the "),OU=a("a"),jAr=o("from_config()"),DAr=o(` class
method.`),GAr=l(),Kx=a("p"),OAr=o("This class cannot be instantiated directly using "),YTe=a("code"),VAr=o("__init__()"),XAr=o(" (throws an error)."),zAr=l(),jt=a("div"),F(Zx.$$.fragment),WAr=l(),KTe=a("p"),QAr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),HAr=l(),Cc=a("p"),UAr=o(`Note:
Loading a model from its configuration file does `),ZTe=a("strong"),JAr=o("not"),YAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VU=a("a"),KAr=o("from_pretrained()"),ZAr=o(" to load the model weights."),e6r=l(),F(o3.$$.fragment),o6r=l(),qr=a("div"),F(e7.$$.fragment),r6r=l(),eMe=a("p"),t6r=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),a6r=l(),fn=a("p"),n6r=o("The model class to instantiate is selected based on the "),oMe=a("code"),s6r=o("model_type"),l6r=o(` property of the config object (either
passed as an argument or loaded from `),rMe=a("code"),i6r=o("pretrained_model_name_or_path"),d6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tMe=a("code"),c6r=o("pretrained_model_name_or_path"),m6r=o(":"),f6r=l(),aMe=a("ul"),r3=a("li"),nMe=a("strong"),g6r=o("vision-encoder-decoder"),h6r=o(" \u2014 "),XU=a("a"),u6r=o("TFVisionEncoderDecoderModel"),p6r=o(" (Vision Encoder decoder model)"),_6r=l(),F(t3.$$.fragment),sNe=l(),wc=a("h2"),a3=a("a"),sMe=a("span"),F(o7.$$.fragment),b6r=l(),lMe=a("span"),v6r=o("TFAutoModelForSpeechSeq2Seq"),lNe=l(),cr=a("div"),F(r7.$$.fragment),F6r=l(),Ac=a("p"),T6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),zU=a("a"),M6r=o("from_pretrained()"),E6r=o(" class method or the "),WU=a("a"),C6r=o("from_config()"),w6r=o(` class
method.`),A6r=l(),t7=a("p"),y6r=o("This class cannot be instantiated directly using "),iMe=a("code"),L6r=o("__init__()"),x6r=o(" (throws an error)."),$6r=l(),Dt=a("div"),F(a7.$$.fragment),k6r=l(),dMe=a("p"),S6r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),R6r=l(),yc=a("p"),P6r=o(`Note:
Loading a model from its configuration file does `),cMe=a("strong"),B6r=o("not"),I6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QU=a("a"),q6r=o("from_pretrained()"),N6r=o(" to load the model weights."),j6r=l(),F(n3.$$.fragment),D6r=l(),Nr=a("div"),F(n7.$$.fragment),G6r=l(),mMe=a("p"),O6r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),V6r=l(),gn=a("p"),X6r=o("The model class to instantiate is selected based on the "),fMe=a("code"),z6r=o("model_type"),W6r=o(` property of the config object (either
passed as an argument or loaded from `),gMe=a("code"),Q6r=o("pretrained_model_name_or_path"),H6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hMe=a("code"),U6r=o("pretrained_model_name_or_path"),J6r=o(":"),Y6r=l(),uMe=a("ul"),s3=a("li"),pMe=a("strong"),K6r=o("speech_to_text"),Z6r=o(" \u2014 "),HU=a("a"),e0r=o("TFSpeech2TextForConditionalGeneration"),o0r=o(" (Speech2Text model)"),r0r=l(),F(l3.$$.fragment),iNe=l(),Lc=a("h2"),i3=a("a"),_Me=a("span"),F(s7.$$.fragment),t0r=l(),bMe=a("span"),a0r=o("FlaxAutoModel"),dNe=l(),mr=a("div"),F(l7.$$.fragment),n0r=l(),xc=a("p"),s0r=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),UU=a("a"),l0r=o("from_pretrained()"),i0r=o(" class method or the "),JU=a("a"),d0r=o("from_config()"),c0r=o(` class
method.`),m0r=l(),i7=a("p"),f0r=o("This class cannot be instantiated directly using "),vMe=a("code"),g0r=o("__init__()"),h0r=o(" (throws an error)."),u0r=l(),Gt=a("div"),F(d7.$$.fragment),p0r=l(),FMe=a("p"),_0r=o("Instantiates one of the base model classes of the library from a configuration."),b0r=l(),$c=a("p"),v0r=o(`Note:
Loading a model from its configuration file does `),TMe=a("strong"),F0r=o("not"),T0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YU=a("a"),M0r=o("from_pretrained()"),E0r=o(" to load the model weights."),C0r=l(),F(d3.$$.fragment),w0r=l(),jr=a("div"),F(c7.$$.fragment),A0r=l(),MMe=a("p"),y0r=o("Instantiate one of the base model classes of the library from a pretrained model."),L0r=l(),hn=a("p"),x0r=o("The model class to instantiate is selected based on the "),EMe=a("code"),$0r=o("model_type"),k0r=o(` property of the config object (either
passed as an argument or loaded from `),CMe=a("code"),S0r=o("pretrained_model_name_or_path"),R0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wMe=a("code"),P0r=o("pretrained_model_name_or_path"),B0r=o(":"),I0r=l(),re=a("ul"),c3=a("li"),AMe=a("strong"),q0r=o("albert"),N0r=o(" \u2014 "),KU=a("a"),j0r=o("FlaxAlbertModel"),D0r=o(" (ALBERT model)"),G0r=l(),m3=a("li"),yMe=a("strong"),O0r=o("bart"),V0r=o(" \u2014 "),ZU=a("a"),X0r=o("FlaxBartModel"),z0r=o(" (BART model)"),W0r=l(),f3=a("li"),LMe=a("strong"),Q0r=o("beit"),H0r=o(" \u2014 "),eJ=a("a"),U0r=o("FlaxBeitModel"),J0r=o(" (BEiT model)"),Y0r=l(),g3=a("li"),xMe=a("strong"),K0r=o("bert"),Z0r=o(" \u2014 "),oJ=a("a"),eyr=o("FlaxBertModel"),oyr=o(" (BERT model)"),ryr=l(),h3=a("li"),$Me=a("strong"),tyr=o("big_bird"),ayr=o(" \u2014 "),rJ=a("a"),nyr=o("FlaxBigBirdModel"),syr=o(" (BigBird model)"),lyr=l(),u3=a("li"),kMe=a("strong"),iyr=o("blenderbot"),dyr=o(" \u2014 "),tJ=a("a"),cyr=o("FlaxBlenderbotModel"),myr=o(" (Blenderbot model)"),fyr=l(),p3=a("li"),SMe=a("strong"),gyr=o("blenderbot-small"),hyr=o(" \u2014 "),aJ=a("a"),uyr=o("FlaxBlenderbotSmallModel"),pyr=o(" (BlenderbotSmall model)"),_yr=l(),_3=a("li"),RMe=a("strong"),byr=o("clip"),vyr=o(" \u2014 "),nJ=a("a"),Fyr=o("FlaxCLIPModel"),Tyr=o(" (CLIP model)"),Myr=l(),b3=a("li"),PMe=a("strong"),Eyr=o("distilbert"),Cyr=o(" \u2014 "),sJ=a("a"),wyr=o("FlaxDistilBertModel"),Ayr=o(" (DistilBERT model)"),yyr=l(),v3=a("li"),BMe=a("strong"),Lyr=o("electra"),xyr=o(" \u2014 "),lJ=a("a"),$yr=o("FlaxElectraModel"),kyr=o(" (ELECTRA model)"),Syr=l(),F3=a("li"),IMe=a("strong"),Ryr=o("gpt2"),Pyr=o(" \u2014 "),iJ=a("a"),Byr=o("FlaxGPT2Model"),Iyr=o(" (OpenAI GPT-2 model)"),qyr=l(),T3=a("li"),qMe=a("strong"),Nyr=o("gpt_neo"),jyr=o(" \u2014 "),dJ=a("a"),Dyr=o("FlaxGPTNeoModel"),Gyr=o(" (GPT Neo model)"),Oyr=l(),M3=a("li"),NMe=a("strong"),Vyr=o("gptj"),Xyr=o(" \u2014 "),cJ=a("a"),zyr=o("FlaxGPTJModel"),Wyr=o(" (GPT-J model)"),Qyr=l(),E3=a("li"),jMe=a("strong"),Hyr=o("marian"),Uyr=o(" \u2014 "),mJ=a("a"),Jyr=o("FlaxMarianModel"),Yyr=o(" (Marian model)"),Kyr=l(),C3=a("li"),DMe=a("strong"),Zyr=o("mbart"),eLr=o(" \u2014 "),fJ=a("a"),oLr=o("FlaxMBartModel"),rLr=o(" (mBART model)"),tLr=l(),w3=a("li"),GMe=a("strong"),aLr=o("mt5"),nLr=o(" \u2014 "),gJ=a("a"),sLr=o("FlaxMT5Model"),lLr=o(" (mT5 model)"),iLr=l(),A3=a("li"),OMe=a("strong"),dLr=o("pegasus"),cLr=o(" \u2014 "),hJ=a("a"),mLr=o("FlaxPegasusModel"),fLr=o(" (Pegasus model)"),gLr=l(),y3=a("li"),VMe=a("strong"),hLr=o("roberta"),uLr=o(" \u2014 "),uJ=a("a"),pLr=o("FlaxRobertaModel"),_Lr=o(" (RoBERTa model)"),bLr=l(),L3=a("li"),XMe=a("strong"),vLr=o("roformer"),FLr=o(" \u2014 "),pJ=a("a"),TLr=o("FlaxRoFormerModel"),MLr=o(" (RoFormer model)"),ELr=l(),x3=a("li"),zMe=a("strong"),CLr=o("t5"),wLr=o(" \u2014 "),_J=a("a"),ALr=o("FlaxT5Model"),yLr=o(" (T5 model)"),LLr=l(),$3=a("li"),WMe=a("strong"),xLr=o("vision-text-dual-encoder"),$Lr=o(" \u2014 "),bJ=a("a"),kLr=o("FlaxVisionTextDualEncoderModel"),SLr=o(" (VisionTextDualEncoder model)"),RLr=l(),k3=a("li"),QMe=a("strong"),PLr=o("vit"),BLr=o(" \u2014 "),vJ=a("a"),ILr=o("FlaxViTModel"),qLr=o(" (ViT model)"),NLr=l(),S3=a("li"),HMe=a("strong"),jLr=o("wav2vec2"),DLr=o(" \u2014 "),FJ=a("a"),GLr=o("FlaxWav2Vec2Model"),OLr=o(" (Wav2Vec2 model)"),VLr=l(),R3=a("li"),UMe=a("strong"),XLr=o("xglm"),zLr=o(" \u2014 "),TJ=a("a"),WLr=o("FlaxXGLMModel"),QLr=o(" (XGLM model)"),HLr=l(),P3=a("li"),JMe=a("strong"),ULr=o("xlm-roberta"),JLr=o(" \u2014 "),MJ=a("a"),YLr=o("FlaxXLMRobertaModel"),KLr=o(" (XLM-RoBERTa model)"),ZLr=l(),F(B3.$$.fragment),cNe=l(),kc=a("h2"),I3=a("a"),YMe=a("span"),F(m7.$$.fragment),e8r=l(),KMe=a("span"),o8r=o("FlaxAutoModelForCausalLM"),mNe=l(),fr=a("div"),F(f7.$$.fragment),r8r=l(),Sc=a("p"),t8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),EJ=a("a"),a8r=o("from_pretrained()"),n8r=o(" class method or the "),CJ=a("a"),s8r=o("from_config()"),l8r=o(` class
method.`),i8r=l(),g7=a("p"),d8r=o("This class cannot be instantiated directly using "),ZMe=a("code"),c8r=o("__init__()"),m8r=o(" (throws an error)."),f8r=l(),Ot=a("div"),F(h7.$$.fragment),g8r=l(),e4e=a("p"),h8r=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),u8r=l(),Rc=a("p"),p8r=o(`Note:
Loading a model from its configuration file does `),o4e=a("strong"),_8r=o("not"),b8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wJ=a("a"),v8r=o("from_pretrained()"),F8r=o(" to load the model weights."),T8r=l(),F(q3.$$.fragment),M8r=l(),Dr=a("div"),F(u7.$$.fragment),E8r=l(),r4e=a("p"),C8r=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),w8r=l(),un=a("p"),A8r=o("The model class to instantiate is selected based on the "),t4e=a("code"),y8r=o("model_type"),L8r=o(` property of the config object (either
passed as an argument or loaded from `),a4e=a("code"),x8r=o("pretrained_model_name_or_path"),$8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n4e=a("code"),k8r=o("pretrained_model_name_or_path"),S8r=o(":"),R8r=l(),Re=a("ul"),N3=a("li"),s4e=a("strong"),P8r=o("bart"),B8r=o(" \u2014 "),AJ=a("a"),I8r=o("FlaxBartForCausalLM"),q8r=o(" (BART model)"),N8r=l(),j3=a("li"),l4e=a("strong"),j8r=o("bert"),D8r=o(" \u2014 "),yJ=a("a"),G8r=o("FlaxBertForCausalLM"),O8r=o(" (BERT model)"),V8r=l(),D3=a("li"),i4e=a("strong"),X8r=o("big_bird"),z8r=o(" \u2014 "),LJ=a("a"),W8r=o("FlaxBigBirdForCausalLM"),Q8r=o(" (BigBird model)"),H8r=l(),G3=a("li"),d4e=a("strong"),U8r=o("electra"),J8r=o(" \u2014 "),xJ=a("a"),Y8r=o("FlaxElectraForCausalLM"),K8r=o(" (ELECTRA model)"),Z8r=l(),O3=a("li"),c4e=a("strong"),exr=o("gpt2"),oxr=o(" \u2014 "),$J=a("a"),rxr=o("FlaxGPT2LMHeadModel"),txr=o(" (OpenAI GPT-2 model)"),axr=l(),V3=a("li"),m4e=a("strong"),nxr=o("gpt_neo"),sxr=o(" \u2014 "),kJ=a("a"),lxr=o("FlaxGPTNeoForCausalLM"),ixr=o(" (GPT Neo model)"),dxr=l(),X3=a("li"),f4e=a("strong"),cxr=o("gptj"),mxr=o(" \u2014 "),SJ=a("a"),fxr=o("FlaxGPTJForCausalLM"),gxr=o(" (GPT-J model)"),hxr=l(),z3=a("li"),g4e=a("strong"),uxr=o("roberta"),pxr=o(" \u2014 "),RJ=a("a"),_xr=o("FlaxRobertaForCausalLM"),bxr=o(" (RoBERTa model)"),vxr=l(),W3=a("li"),h4e=a("strong"),Fxr=o("xglm"),Txr=o(" \u2014 "),PJ=a("a"),Mxr=o("FlaxXGLMForCausalLM"),Exr=o(" (XGLM model)"),Cxr=l(),F(Q3.$$.fragment),fNe=l(),Pc=a("h2"),H3=a("a"),u4e=a("span"),F(p7.$$.fragment),wxr=l(),p4e=a("span"),Axr=o("FlaxAutoModelForPreTraining"),gNe=l(),gr=a("div"),F(_7.$$.fragment),yxr=l(),Bc=a("p"),Lxr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),BJ=a("a"),xxr=o("from_pretrained()"),$xr=o(" class method or the "),IJ=a("a"),kxr=o("from_config()"),Sxr=o(` class
method.`),Rxr=l(),b7=a("p"),Pxr=o("This class cannot be instantiated directly using "),_4e=a("code"),Bxr=o("__init__()"),Ixr=o(" (throws an error)."),qxr=l(),Vt=a("div"),F(v7.$$.fragment),Nxr=l(),b4e=a("p"),jxr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Dxr=l(),Ic=a("p"),Gxr=o(`Note:
Loading a model from its configuration file does `),v4e=a("strong"),Oxr=o("not"),Vxr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qJ=a("a"),Xxr=o("from_pretrained()"),zxr=o(" to load the model weights."),Wxr=l(),F(U3.$$.fragment),Qxr=l(),Gr=a("div"),F(F7.$$.fragment),Hxr=l(),F4e=a("p"),Uxr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Jxr=l(),pn=a("p"),Yxr=o("The model class to instantiate is selected based on the "),T4e=a("code"),Kxr=o("model_type"),Zxr=o(` property of the config object (either
passed as an argument or loaded from `),M4e=a("code"),e7r=o("pretrained_model_name_or_path"),o7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E4e=a("code"),r7r=o("pretrained_model_name_or_path"),t7r=o(":"),a7r=l(),Me=a("ul"),J3=a("li"),C4e=a("strong"),n7r=o("albert"),s7r=o(" \u2014 "),NJ=a("a"),l7r=o("FlaxAlbertForPreTraining"),i7r=o(" (ALBERT model)"),d7r=l(),Y3=a("li"),w4e=a("strong"),c7r=o("bart"),m7r=o(" \u2014 "),jJ=a("a"),f7r=o("FlaxBartForConditionalGeneration"),g7r=o(" (BART model)"),h7r=l(),K3=a("li"),A4e=a("strong"),u7r=o("bert"),p7r=o(" \u2014 "),DJ=a("a"),_7r=o("FlaxBertForPreTraining"),b7r=o(" (BERT model)"),v7r=l(),Z3=a("li"),y4e=a("strong"),F7r=o("big_bird"),T7r=o(" \u2014 "),GJ=a("a"),M7r=o("FlaxBigBirdForPreTraining"),E7r=o(" (BigBird model)"),C7r=l(),ew=a("li"),L4e=a("strong"),w7r=o("electra"),A7r=o(" \u2014 "),OJ=a("a"),y7r=o("FlaxElectraForPreTraining"),L7r=o(" (ELECTRA model)"),x7r=l(),ow=a("li"),x4e=a("strong"),$7r=o("mbart"),k7r=o(" \u2014 "),VJ=a("a"),S7r=o("FlaxMBartForConditionalGeneration"),R7r=o(" (mBART model)"),P7r=l(),rw=a("li"),$4e=a("strong"),B7r=o("mt5"),I7r=o(" \u2014 "),XJ=a("a"),q7r=o("FlaxMT5ForConditionalGeneration"),N7r=o(" (mT5 model)"),j7r=l(),tw=a("li"),k4e=a("strong"),D7r=o("roberta"),G7r=o(" \u2014 "),zJ=a("a"),O7r=o("FlaxRobertaForMaskedLM"),V7r=o(" (RoBERTa model)"),X7r=l(),aw=a("li"),S4e=a("strong"),z7r=o("roformer"),W7r=o(" \u2014 "),WJ=a("a"),Q7r=o("FlaxRoFormerForMaskedLM"),H7r=o(" (RoFormer model)"),U7r=l(),nw=a("li"),R4e=a("strong"),J7r=o("t5"),Y7r=o(" \u2014 "),QJ=a("a"),K7r=o("FlaxT5ForConditionalGeneration"),Z7r=o(" (T5 model)"),e9r=l(),sw=a("li"),P4e=a("strong"),o9r=o("wav2vec2"),r9r=o(" \u2014 "),HJ=a("a"),t9r=o("FlaxWav2Vec2ForPreTraining"),a9r=o(" (Wav2Vec2 model)"),n9r=l(),lw=a("li"),B4e=a("strong"),s9r=o("xlm-roberta"),l9r=o(" \u2014 "),UJ=a("a"),i9r=o("FlaxXLMRobertaForMaskedLM"),d9r=o(" (XLM-RoBERTa model)"),c9r=l(),F(iw.$$.fragment),hNe=l(),qc=a("h2"),dw=a("a"),I4e=a("span"),F(T7.$$.fragment),m9r=l(),q4e=a("span"),f9r=o("FlaxAutoModelForMaskedLM"),uNe=l(),hr=a("div"),F(M7.$$.fragment),g9r=l(),Nc=a("p"),h9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),JJ=a("a"),u9r=o("from_pretrained()"),p9r=o(" class method or the "),YJ=a("a"),_9r=o("from_config()"),b9r=o(` class
method.`),v9r=l(),E7=a("p"),F9r=o("This class cannot be instantiated directly using "),N4e=a("code"),T9r=o("__init__()"),M9r=o(" (throws an error)."),E9r=l(),Xt=a("div"),F(C7.$$.fragment),C9r=l(),j4e=a("p"),w9r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),A9r=l(),jc=a("p"),y9r=o(`Note:
Loading a model from its configuration file does `),D4e=a("strong"),L9r=o("not"),x9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KJ=a("a"),$9r=o("from_pretrained()"),k9r=o(" to load the model weights."),S9r=l(),F(cw.$$.fragment),R9r=l(),Or=a("div"),F(w7.$$.fragment),P9r=l(),G4e=a("p"),B9r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),I9r=l(),_n=a("p"),q9r=o("The model class to instantiate is selected based on the "),O4e=a("code"),N9r=o("model_type"),j9r=o(` property of the config object (either
passed as an argument or loaded from `),V4e=a("code"),D9r=o("pretrained_model_name_or_path"),G9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X4e=a("code"),O9r=o("pretrained_model_name_or_path"),V9r=o(":"),X9r=l(),Le=a("ul"),mw=a("li"),z4e=a("strong"),z9r=o("albert"),W9r=o(" \u2014 "),ZJ=a("a"),Q9r=o("FlaxAlbertForMaskedLM"),H9r=o(" (ALBERT model)"),U9r=l(),fw=a("li"),W4e=a("strong"),J9r=o("bart"),Y9r=o(" \u2014 "),eY=a("a"),K9r=o("FlaxBartForConditionalGeneration"),Z9r=o(" (BART model)"),e$r=l(),gw=a("li"),Q4e=a("strong"),o$r=o("bert"),r$r=o(" \u2014 "),oY=a("a"),t$r=o("FlaxBertForMaskedLM"),a$r=o(" (BERT model)"),n$r=l(),hw=a("li"),H4e=a("strong"),s$r=o("big_bird"),l$r=o(" \u2014 "),rY=a("a"),i$r=o("FlaxBigBirdForMaskedLM"),d$r=o(" (BigBird model)"),c$r=l(),uw=a("li"),U4e=a("strong"),m$r=o("distilbert"),f$r=o(" \u2014 "),tY=a("a"),g$r=o("FlaxDistilBertForMaskedLM"),h$r=o(" (DistilBERT model)"),u$r=l(),pw=a("li"),J4e=a("strong"),p$r=o("electra"),_$r=o(" \u2014 "),aY=a("a"),b$r=o("FlaxElectraForMaskedLM"),v$r=o(" (ELECTRA model)"),F$r=l(),_w=a("li"),Y4e=a("strong"),T$r=o("mbart"),M$r=o(" \u2014 "),nY=a("a"),E$r=o("FlaxMBartForConditionalGeneration"),C$r=o(" (mBART model)"),w$r=l(),bw=a("li"),K4e=a("strong"),A$r=o("roberta"),y$r=o(" \u2014 "),sY=a("a"),L$r=o("FlaxRobertaForMaskedLM"),x$r=o(" (RoBERTa model)"),$$r=l(),vw=a("li"),Z4e=a("strong"),k$r=o("roformer"),S$r=o(" \u2014 "),lY=a("a"),R$r=o("FlaxRoFormerForMaskedLM"),P$r=o(" (RoFormer model)"),B$r=l(),Fw=a("li"),eEe=a("strong"),I$r=o("xlm-roberta"),q$r=o(" \u2014 "),iY=a("a"),N$r=o("FlaxXLMRobertaForMaskedLM"),j$r=o(" (XLM-RoBERTa model)"),D$r=l(),F(Tw.$$.fragment),pNe=l(),Dc=a("h2"),Mw=a("a"),oEe=a("span"),F(A7.$$.fragment),G$r=l(),rEe=a("span"),O$r=o("FlaxAutoModelForSeq2SeqLM"),_Ne=l(),ur=a("div"),F(y7.$$.fragment),V$r=l(),Gc=a("p"),X$r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),dY=a("a"),z$r=o("from_pretrained()"),W$r=o(" class method or the "),cY=a("a"),Q$r=o("from_config()"),H$r=o(` class
method.`),U$r=l(),L7=a("p"),J$r=o("This class cannot be instantiated directly using "),tEe=a("code"),Y$r=o("__init__()"),K$r=o(" (throws an error)."),Z$r=l(),zt=a("div"),F(x7.$$.fragment),ekr=l(),aEe=a("p"),okr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),rkr=l(),Oc=a("p"),tkr=o(`Note:
Loading a model from its configuration file does `),nEe=a("strong"),akr=o("not"),nkr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mY=a("a"),skr=o("from_pretrained()"),lkr=o(" to load the model weights."),ikr=l(),F(Ew.$$.fragment),dkr=l(),Vr=a("div"),F($7.$$.fragment),ckr=l(),sEe=a("p"),mkr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),fkr=l(),bn=a("p"),gkr=o("The model class to instantiate is selected based on the "),lEe=a("code"),hkr=o("model_type"),ukr=o(` property of the config object (either
passed as an argument or loaded from `),iEe=a("code"),pkr=o("pretrained_model_name_or_path"),_kr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dEe=a("code"),bkr=o("pretrained_model_name_or_path"),vkr=o(":"),Fkr=l(),Pe=a("ul"),Cw=a("li"),cEe=a("strong"),Tkr=o("bart"),Mkr=o(" \u2014 "),fY=a("a"),Ekr=o("FlaxBartForConditionalGeneration"),Ckr=o(" (BART model)"),wkr=l(),ww=a("li"),mEe=a("strong"),Akr=o("blenderbot"),ykr=o(" \u2014 "),gY=a("a"),Lkr=o("FlaxBlenderbotForConditionalGeneration"),xkr=o(" (Blenderbot model)"),$kr=l(),Aw=a("li"),fEe=a("strong"),kkr=o("blenderbot-small"),Skr=o(" \u2014 "),hY=a("a"),Rkr=o("FlaxBlenderbotSmallForConditionalGeneration"),Pkr=o(" (BlenderbotSmall model)"),Bkr=l(),yw=a("li"),gEe=a("strong"),Ikr=o("encoder-decoder"),qkr=o(" \u2014 "),uY=a("a"),Nkr=o("FlaxEncoderDecoderModel"),jkr=o(" (Encoder decoder model)"),Dkr=l(),Lw=a("li"),hEe=a("strong"),Gkr=o("marian"),Okr=o(" \u2014 "),pY=a("a"),Vkr=o("FlaxMarianMTModel"),Xkr=o(" (Marian model)"),zkr=l(),xw=a("li"),uEe=a("strong"),Wkr=o("mbart"),Qkr=o(" \u2014 "),_Y=a("a"),Hkr=o("FlaxMBartForConditionalGeneration"),Ukr=o(" (mBART model)"),Jkr=l(),$w=a("li"),pEe=a("strong"),Ykr=o("mt5"),Kkr=o(" \u2014 "),bY=a("a"),Zkr=o("FlaxMT5ForConditionalGeneration"),eSr=o(" (mT5 model)"),oSr=l(),kw=a("li"),_Ee=a("strong"),rSr=o("pegasus"),tSr=o(" \u2014 "),vY=a("a"),aSr=o("FlaxPegasusForConditionalGeneration"),nSr=o(" (Pegasus model)"),sSr=l(),Sw=a("li"),bEe=a("strong"),lSr=o("t5"),iSr=o(" \u2014 "),FY=a("a"),dSr=o("FlaxT5ForConditionalGeneration"),cSr=o(" (T5 model)"),mSr=l(),F(Rw.$$.fragment),bNe=l(),Vc=a("h2"),Pw=a("a"),vEe=a("span"),F(k7.$$.fragment),fSr=l(),FEe=a("span"),gSr=o("FlaxAutoModelForSequenceClassification"),vNe=l(),pr=a("div"),F(S7.$$.fragment),hSr=l(),Xc=a("p"),uSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),TY=a("a"),pSr=o("from_pretrained()"),_Sr=o(" class method or the "),MY=a("a"),bSr=o("from_config()"),vSr=o(` class
method.`),FSr=l(),R7=a("p"),TSr=o("This class cannot be instantiated directly using "),TEe=a("code"),MSr=o("__init__()"),ESr=o(" (throws an error)."),CSr=l(),Wt=a("div"),F(P7.$$.fragment),wSr=l(),MEe=a("p"),ASr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),ySr=l(),zc=a("p"),LSr=o(`Note:
Loading a model from its configuration file does `),EEe=a("strong"),xSr=o("not"),$Sr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EY=a("a"),kSr=o("from_pretrained()"),SSr=o(" to load the model weights."),RSr=l(),F(Bw.$$.fragment),PSr=l(),Xr=a("div"),F(B7.$$.fragment),BSr=l(),CEe=a("p"),ISr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),qSr=l(),vn=a("p"),NSr=o("The model class to instantiate is selected based on the "),wEe=a("code"),jSr=o("model_type"),DSr=o(` property of the config object (either
passed as an argument or loaded from `),AEe=a("code"),GSr=o("pretrained_model_name_or_path"),OSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yEe=a("code"),VSr=o("pretrained_model_name_or_path"),XSr=o(":"),zSr=l(),xe=a("ul"),Iw=a("li"),LEe=a("strong"),WSr=o("albert"),QSr=o(" \u2014 "),CY=a("a"),HSr=o("FlaxAlbertForSequenceClassification"),USr=o(" (ALBERT model)"),JSr=l(),qw=a("li"),xEe=a("strong"),YSr=o("bart"),KSr=o(" \u2014 "),wY=a("a"),ZSr=o("FlaxBartForSequenceClassification"),eRr=o(" (BART model)"),oRr=l(),Nw=a("li"),$Ee=a("strong"),rRr=o("bert"),tRr=o(" \u2014 "),AY=a("a"),aRr=o("FlaxBertForSequenceClassification"),nRr=o(" (BERT model)"),sRr=l(),jw=a("li"),kEe=a("strong"),lRr=o("big_bird"),iRr=o(" \u2014 "),yY=a("a"),dRr=o("FlaxBigBirdForSequenceClassification"),cRr=o(" (BigBird model)"),mRr=l(),Dw=a("li"),SEe=a("strong"),fRr=o("distilbert"),gRr=o(" \u2014 "),LY=a("a"),hRr=o("FlaxDistilBertForSequenceClassification"),uRr=o(" (DistilBERT model)"),pRr=l(),Gw=a("li"),REe=a("strong"),_Rr=o("electra"),bRr=o(" \u2014 "),xY=a("a"),vRr=o("FlaxElectraForSequenceClassification"),FRr=o(" (ELECTRA model)"),TRr=l(),Ow=a("li"),PEe=a("strong"),MRr=o("mbart"),ERr=o(" \u2014 "),$Y=a("a"),CRr=o("FlaxMBartForSequenceClassification"),wRr=o(" (mBART model)"),ARr=l(),Vw=a("li"),BEe=a("strong"),yRr=o("roberta"),LRr=o(" \u2014 "),kY=a("a"),xRr=o("FlaxRobertaForSequenceClassification"),$Rr=o(" (RoBERTa model)"),kRr=l(),Xw=a("li"),IEe=a("strong"),SRr=o("roformer"),RRr=o(" \u2014 "),SY=a("a"),PRr=o("FlaxRoFormerForSequenceClassification"),BRr=o(" (RoFormer model)"),IRr=l(),zw=a("li"),qEe=a("strong"),qRr=o("xlm-roberta"),NRr=o(" \u2014 "),RY=a("a"),jRr=o("FlaxXLMRobertaForSequenceClassification"),DRr=o(" (XLM-RoBERTa model)"),GRr=l(),F(Ww.$$.fragment),FNe=l(),Wc=a("h2"),Qw=a("a"),NEe=a("span"),F(I7.$$.fragment),ORr=l(),jEe=a("span"),VRr=o("FlaxAutoModelForQuestionAnswering"),TNe=l(),_r=a("div"),F(q7.$$.fragment),XRr=l(),Qc=a("p"),zRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),PY=a("a"),WRr=o("from_pretrained()"),QRr=o(" class method or the "),BY=a("a"),HRr=o("from_config()"),URr=o(` class
method.`),JRr=l(),N7=a("p"),YRr=o("This class cannot be instantiated directly using "),DEe=a("code"),KRr=o("__init__()"),ZRr=o(" (throws an error)."),ePr=l(),Qt=a("div"),F(j7.$$.fragment),oPr=l(),GEe=a("p"),rPr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),tPr=l(),Hc=a("p"),aPr=o(`Note:
Loading a model from its configuration file does `),OEe=a("strong"),nPr=o("not"),sPr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IY=a("a"),lPr=o("from_pretrained()"),iPr=o(" to load the model weights."),dPr=l(),F(Hw.$$.fragment),cPr=l(),zr=a("div"),F(D7.$$.fragment),mPr=l(),VEe=a("p"),fPr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),gPr=l(),Fn=a("p"),hPr=o("The model class to instantiate is selected based on the "),XEe=a("code"),uPr=o("model_type"),pPr=o(` property of the config object (either
passed as an argument or loaded from `),zEe=a("code"),_Pr=o("pretrained_model_name_or_path"),bPr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),WEe=a("code"),vPr=o("pretrained_model_name_or_path"),FPr=o(":"),TPr=l(),$e=a("ul"),Uw=a("li"),QEe=a("strong"),MPr=o("albert"),EPr=o(" \u2014 "),qY=a("a"),CPr=o("FlaxAlbertForQuestionAnswering"),wPr=o(" (ALBERT model)"),APr=l(),Jw=a("li"),HEe=a("strong"),yPr=o("bart"),LPr=o(" \u2014 "),NY=a("a"),xPr=o("FlaxBartForQuestionAnswering"),$Pr=o(" (BART model)"),kPr=l(),Yw=a("li"),UEe=a("strong"),SPr=o("bert"),RPr=o(" \u2014 "),jY=a("a"),PPr=o("FlaxBertForQuestionAnswering"),BPr=o(" (BERT model)"),IPr=l(),Kw=a("li"),JEe=a("strong"),qPr=o("big_bird"),NPr=o(" \u2014 "),DY=a("a"),jPr=o("FlaxBigBirdForQuestionAnswering"),DPr=o(" (BigBird model)"),GPr=l(),Zw=a("li"),YEe=a("strong"),OPr=o("distilbert"),VPr=o(" \u2014 "),GY=a("a"),XPr=o("FlaxDistilBertForQuestionAnswering"),zPr=o(" (DistilBERT model)"),WPr=l(),eA=a("li"),KEe=a("strong"),QPr=o("electra"),HPr=o(" \u2014 "),OY=a("a"),UPr=o("FlaxElectraForQuestionAnswering"),JPr=o(" (ELECTRA model)"),YPr=l(),oA=a("li"),ZEe=a("strong"),KPr=o("mbart"),ZPr=o(" \u2014 "),VY=a("a"),eBr=o("FlaxMBartForQuestionAnswering"),oBr=o(" (mBART model)"),rBr=l(),rA=a("li"),eCe=a("strong"),tBr=o("roberta"),aBr=o(" \u2014 "),XY=a("a"),nBr=o("FlaxRobertaForQuestionAnswering"),sBr=o(" (RoBERTa model)"),lBr=l(),tA=a("li"),oCe=a("strong"),iBr=o("roformer"),dBr=o(" \u2014 "),zY=a("a"),cBr=o("FlaxRoFormerForQuestionAnswering"),mBr=o(" (RoFormer model)"),fBr=l(),aA=a("li"),rCe=a("strong"),gBr=o("xlm-roberta"),hBr=o(" \u2014 "),WY=a("a"),uBr=o("FlaxXLMRobertaForQuestionAnswering"),pBr=o(" (XLM-RoBERTa model)"),_Br=l(),F(nA.$$.fragment),MNe=l(),Uc=a("h2"),sA=a("a"),tCe=a("span"),F(G7.$$.fragment),bBr=l(),aCe=a("span"),vBr=o("FlaxAutoModelForTokenClassification"),ENe=l(),br=a("div"),F(O7.$$.fragment),FBr=l(),Jc=a("p"),TBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),QY=a("a"),MBr=o("from_pretrained()"),EBr=o(" class method or the "),HY=a("a"),CBr=o("from_config()"),wBr=o(` class
method.`),ABr=l(),V7=a("p"),yBr=o("This class cannot be instantiated directly using "),nCe=a("code"),LBr=o("__init__()"),xBr=o(" (throws an error)."),$Br=l(),Ht=a("div"),F(X7.$$.fragment),kBr=l(),sCe=a("p"),SBr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),RBr=l(),Yc=a("p"),PBr=o(`Note:
Loading a model from its configuration file does `),lCe=a("strong"),BBr=o("not"),IBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UY=a("a"),qBr=o("from_pretrained()"),NBr=o(" to load the model weights."),jBr=l(),F(lA.$$.fragment),DBr=l(),Wr=a("div"),F(z7.$$.fragment),GBr=l(),iCe=a("p"),OBr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),VBr=l(),Tn=a("p"),XBr=o("The model class to instantiate is selected based on the "),dCe=a("code"),zBr=o("model_type"),WBr=o(` property of the config object (either
passed as an argument or loaded from `),cCe=a("code"),QBr=o("pretrained_model_name_or_path"),HBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mCe=a("code"),UBr=o("pretrained_model_name_or_path"),JBr=o(":"),YBr=l(),De=a("ul"),iA=a("li"),fCe=a("strong"),KBr=o("albert"),ZBr=o(" \u2014 "),JY=a("a"),eIr=o("FlaxAlbertForTokenClassification"),oIr=o(" (ALBERT model)"),rIr=l(),dA=a("li"),gCe=a("strong"),tIr=o("bert"),aIr=o(" \u2014 "),YY=a("a"),nIr=o("FlaxBertForTokenClassification"),sIr=o(" (BERT model)"),lIr=l(),cA=a("li"),hCe=a("strong"),iIr=o("big_bird"),dIr=o(" \u2014 "),KY=a("a"),cIr=o("FlaxBigBirdForTokenClassification"),mIr=o(" (BigBird model)"),fIr=l(),mA=a("li"),uCe=a("strong"),gIr=o("distilbert"),hIr=o(" \u2014 "),ZY=a("a"),uIr=o("FlaxDistilBertForTokenClassification"),pIr=o(" (DistilBERT model)"),_Ir=l(),fA=a("li"),pCe=a("strong"),bIr=o("electra"),vIr=o(" \u2014 "),eK=a("a"),FIr=o("FlaxElectraForTokenClassification"),TIr=o(" (ELECTRA model)"),MIr=l(),gA=a("li"),_Ce=a("strong"),EIr=o("roberta"),CIr=o(" \u2014 "),oK=a("a"),wIr=o("FlaxRobertaForTokenClassification"),AIr=o(" (RoBERTa model)"),yIr=l(),hA=a("li"),bCe=a("strong"),LIr=o("roformer"),xIr=o(" \u2014 "),rK=a("a"),$Ir=o("FlaxRoFormerForTokenClassification"),kIr=o(" (RoFormer model)"),SIr=l(),uA=a("li"),vCe=a("strong"),RIr=o("xlm-roberta"),PIr=o(" \u2014 "),tK=a("a"),BIr=o("FlaxXLMRobertaForTokenClassification"),IIr=o(" (XLM-RoBERTa model)"),qIr=l(),F(pA.$$.fragment),CNe=l(),Kc=a("h2"),_A=a("a"),FCe=a("span"),F(W7.$$.fragment),NIr=l(),TCe=a("span"),jIr=o("FlaxAutoModelForMultipleChoice"),wNe=l(),vr=a("div"),F(Q7.$$.fragment),DIr=l(),Zc=a("p"),GIr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),aK=a("a"),OIr=o("from_pretrained()"),VIr=o(" class method or the "),nK=a("a"),XIr=o("from_config()"),zIr=o(` class
method.`),WIr=l(),H7=a("p"),QIr=o("This class cannot be instantiated directly using "),MCe=a("code"),HIr=o("__init__()"),UIr=o(" (throws an error)."),JIr=l(),Ut=a("div"),F(U7.$$.fragment),YIr=l(),ECe=a("p"),KIr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),ZIr=l(),em=a("p"),eqr=o(`Note:
Loading a model from its configuration file does `),CCe=a("strong"),oqr=o("not"),rqr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sK=a("a"),tqr=o("from_pretrained()"),aqr=o(" to load the model weights."),nqr=l(),F(bA.$$.fragment),sqr=l(),Qr=a("div"),F(J7.$$.fragment),lqr=l(),wCe=a("p"),iqr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),dqr=l(),Mn=a("p"),cqr=o("The model class to instantiate is selected based on the "),ACe=a("code"),mqr=o("model_type"),fqr=o(` property of the config object (either
passed as an argument or loaded from `),yCe=a("code"),gqr=o("pretrained_model_name_or_path"),hqr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),LCe=a("code"),uqr=o("pretrained_model_name_or_path"),pqr=o(":"),_qr=l(),Ge=a("ul"),vA=a("li"),xCe=a("strong"),bqr=o("albert"),vqr=o(" \u2014 "),lK=a("a"),Fqr=o("FlaxAlbertForMultipleChoice"),Tqr=o(" (ALBERT model)"),Mqr=l(),FA=a("li"),$Ce=a("strong"),Eqr=o("bert"),Cqr=o(" \u2014 "),iK=a("a"),wqr=o("FlaxBertForMultipleChoice"),Aqr=o(" (BERT model)"),yqr=l(),TA=a("li"),kCe=a("strong"),Lqr=o("big_bird"),xqr=o(" \u2014 "),dK=a("a"),$qr=o("FlaxBigBirdForMultipleChoice"),kqr=o(" (BigBird model)"),Sqr=l(),MA=a("li"),SCe=a("strong"),Rqr=o("distilbert"),Pqr=o(" \u2014 "),cK=a("a"),Bqr=o("FlaxDistilBertForMultipleChoice"),Iqr=o(" (DistilBERT model)"),qqr=l(),EA=a("li"),RCe=a("strong"),Nqr=o("electra"),jqr=o(" \u2014 "),mK=a("a"),Dqr=o("FlaxElectraForMultipleChoice"),Gqr=o(" (ELECTRA model)"),Oqr=l(),CA=a("li"),PCe=a("strong"),Vqr=o("roberta"),Xqr=o(" \u2014 "),fK=a("a"),zqr=o("FlaxRobertaForMultipleChoice"),Wqr=o(" (RoBERTa model)"),Qqr=l(),wA=a("li"),BCe=a("strong"),Hqr=o("roformer"),Uqr=o(" \u2014 "),gK=a("a"),Jqr=o("FlaxRoFormerForMultipleChoice"),Yqr=o(" (RoFormer model)"),Kqr=l(),AA=a("li"),ICe=a("strong"),Zqr=o("xlm-roberta"),eNr=o(" \u2014 "),hK=a("a"),oNr=o("FlaxXLMRobertaForMultipleChoice"),rNr=o(" (XLM-RoBERTa model)"),tNr=l(),F(yA.$$.fragment),ANe=l(),om=a("h2"),LA=a("a"),qCe=a("span"),F(Y7.$$.fragment),aNr=l(),NCe=a("span"),nNr=o("FlaxAutoModelForNextSentencePrediction"),yNe=l(),Fr=a("div"),F(K7.$$.fragment),sNr=l(),rm=a("p"),lNr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),uK=a("a"),iNr=o("from_pretrained()"),dNr=o(" class method or the "),pK=a("a"),cNr=o("from_config()"),mNr=o(` class
method.`),fNr=l(),Z7=a("p"),gNr=o("This class cannot be instantiated directly using "),jCe=a("code"),hNr=o("__init__()"),uNr=o(" (throws an error)."),pNr=l(),Jt=a("div"),F(e9.$$.fragment),_Nr=l(),DCe=a("p"),bNr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),vNr=l(),tm=a("p"),FNr=o(`Note:
Loading a model from its configuration file does `),GCe=a("strong"),TNr=o("not"),MNr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_K=a("a"),ENr=o("from_pretrained()"),CNr=o(" to load the model weights."),wNr=l(),F(xA.$$.fragment),ANr=l(),Hr=a("div"),F(o9.$$.fragment),yNr=l(),OCe=a("p"),LNr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),xNr=l(),En=a("p"),$Nr=o("The model class to instantiate is selected based on the "),VCe=a("code"),kNr=o("model_type"),SNr=o(` property of the config object (either
passed as an argument or loaded from `),XCe=a("code"),RNr=o("pretrained_model_name_or_path"),PNr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zCe=a("code"),BNr=o("pretrained_model_name_or_path"),INr=o(":"),qNr=l(),WCe=a("ul"),$A=a("li"),QCe=a("strong"),NNr=o("bert"),jNr=o(" \u2014 "),bK=a("a"),DNr=o("FlaxBertForNextSentencePrediction"),GNr=o(" (BERT model)"),ONr=l(),F(kA.$$.fragment),LNe=l(),am=a("h2"),SA=a("a"),HCe=a("span"),F(r9.$$.fragment),VNr=l(),UCe=a("span"),XNr=o("FlaxAutoModelForImageClassification"),xNe=l(),Tr=a("div"),F(t9.$$.fragment),zNr=l(),nm=a("p"),WNr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),vK=a("a"),QNr=o("from_pretrained()"),HNr=o(" class method or the "),FK=a("a"),UNr=o("from_config()"),JNr=o(` class
method.`),YNr=l(),a9=a("p"),KNr=o("This class cannot be instantiated directly using "),JCe=a("code"),ZNr=o("__init__()"),ejr=o(" (throws an error)."),ojr=l(),Yt=a("div"),F(n9.$$.fragment),rjr=l(),YCe=a("p"),tjr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),ajr=l(),sm=a("p"),njr=o(`Note:
Loading a model from its configuration file does `),KCe=a("strong"),sjr=o("not"),ljr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TK=a("a"),ijr=o("from_pretrained()"),djr=o(" to load the model weights."),cjr=l(),F(RA.$$.fragment),mjr=l(),Ur=a("div"),F(s9.$$.fragment),fjr=l(),ZCe=a("p"),gjr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),hjr=l(),Cn=a("p"),ujr=o("The model class to instantiate is selected based on the "),e5e=a("code"),pjr=o("model_type"),_jr=o(` property of the config object (either
passed as an argument or loaded from `),o5e=a("code"),bjr=o("pretrained_model_name_or_path"),vjr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r5e=a("code"),Fjr=o("pretrained_model_name_or_path"),Tjr=o(":"),Mjr=l(),l9=a("ul"),PA=a("li"),t5e=a("strong"),Ejr=o("beit"),Cjr=o(" \u2014 "),MK=a("a"),wjr=o("FlaxBeitForImageClassification"),Ajr=o(" (BEiT model)"),yjr=l(),BA=a("li"),a5e=a("strong"),Ljr=o("vit"),xjr=o(" \u2014 "),EK=a("a"),$jr=o("FlaxViTForImageClassification"),kjr=o(" (ViT model)"),Sjr=l(),F(IA.$$.fragment),$Ne=l(),lm=a("h2"),qA=a("a"),n5e=a("span"),F(i9.$$.fragment),Rjr=l(),s5e=a("span"),Pjr=o("FlaxAutoModelForVision2Seq"),kNe=l(),Mr=a("div"),F(d9.$$.fragment),Bjr=l(),im=a("p"),Ijr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),CK=a("a"),qjr=o("from_pretrained()"),Njr=o(" class method or the "),wK=a("a"),jjr=o("from_config()"),Djr=o(` class
method.`),Gjr=l(),c9=a("p"),Ojr=o("This class cannot be instantiated directly using "),l5e=a("code"),Vjr=o("__init__()"),Xjr=o(" (throws an error)."),zjr=l(),Kt=a("div"),F(m9.$$.fragment),Wjr=l(),i5e=a("p"),Qjr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Hjr=l(),dm=a("p"),Ujr=o(`Note:
Loading a model from its configuration file does `),d5e=a("strong"),Jjr=o("not"),Yjr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),AK=a("a"),Kjr=o("from_pretrained()"),Zjr=o(" to load the model weights."),eDr=l(),F(NA.$$.fragment),oDr=l(),Jr=a("div"),F(f9.$$.fragment),rDr=l(),c5e=a("p"),tDr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),aDr=l(),wn=a("p"),nDr=o("The model class to instantiate is selected based on the "),m5e=a("code"),sDr=o("model_type"),lDr=o(` property of the config object (either
passed as an argument or loaded from `),f5e=a("code"),iDr=o("pretrained_model_name_or_path"),dDr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g5e=a("code"),cDr=o("pretrained_model_name_or_path"),mDr=o(":"),fDr=l(),h5e=a("ul"),jA=a("li"),u5e=a("strong"),gDr=o("vision-encoder-decoder"),hDr=o(" \u2014 "),yK=a("a"),uDr=o("FlaxVisionEncoderDecoderModel"),pDr=o(" (Vision Encoder decoder model)"),_Dr=l(),F(DA.$$.fragment),this.h()},l(m){const _=f8t('[data-svelte="svelte-1phssyn"]',document.head);g=n(_,"META",{name:!0,content:!0}),_.forEach(t),v=i(m),u=n(m,"H1",{class:!0});var g9=s(u);f=n(g9,"A",{id:!0,class:!0,href:!0});var p5e=s(f);p=n(p5e,"SPAN",{});var _5e=s(p);T(d.$$.fragment,_5e),_5e.forEach(t),p5e.forEach(t),h=i(g9),Mo=n(g9,"SPAN",{});var b5e=s(Mo);ci=r(b5e,"Auto Classes"),b5e.forEach(t),g9.forEach(t),gm=i(m),rt=n(m,"P",{});var h9=s(rt);mi=r(h9,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),fi=n(h9,"CODE",{});var v5e=s(fi);ay=r(v5e,"from_pretrained()"),v5e.forEach(t),hm=r(h9,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),h9.forEach(t),je=i(m),We=n(m,"P",{});var An=s(We);gi=r(An,"Instantiating one of "),yn=n(An,"A",{href:!0});var F5e=s(yn);ny=r(F5e,"AutoConfig"),F5e.forEach(t),Ln=r(An,", "),xn=n(An,"A",{href:!0});var T5e=s(xn);sy=r(T5e,"AutoModel"),T5e.forEach(t),hi=r(An,`, and
`),$n=n(An,"A",{href:!0});var M5e=s($n);ly=r(M5e,"AutoTokenizer"),M5e.forEach(t),ui=r(An," will directly create a class of the relevant architecture. For instance"),An.forEach(t),um=i(m),T(Ca.$$.fragment,m),Qe=i(m),Ae=n(m,"P",{});var u9=s(Ae);w$=r(u9,"will create a model that is an instance of "),pi=n(u9,"A",{href:!0});var E5e=s(pi);A$=r(E5e,"BertModel"),E5e.forEach(t),y$=r(u9,"."),u9.forEach(t),Eo=i(m),wa=n(m,"P",{});var p9=s(wa);L$=r(p9,"There is one class of "),pm=n(p9,"CODE",{});var C5e=s(pm);x$=r(C5e,"AutoModel"),C5e.forEach(t),DDe=r(p9," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),p9.forEach(t),xIe=i(m),_i=n(m,"H2",{class:!0});var _9=s(_i);_m=n(_9,"A",{id:!0,class:!0,href:!0});var w5e=s(_m);Fee=n(w5e,"SPAN",{});var A5e=s(Fee);T(iy.$$.fragment,A5e),A5e.forEach(t),w5e.forEach(t),GDe=i(_9),Tee=n(_9,"SPAN",{});var y5e=s(Tee);ODe=r(y5e,"Extending the Auto Classes"),y5e.forEach(t),_9.forEach(t),$Ie=i(m),kn=n(m,"P",{});var cm=s(kn);VDe=r(cm,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),Mee=n(cm,"CODE",{});var L5e=s(Mee);XDe=r(L5e,"NewModel"),L5e.forEach(t),zDe=r(cm,", make sure you have a "),Eee=n(cm,"CODE",{});var x5e=s(Eee);WDe=r(x5e,"NewModelConfig"),x5e.forEach(t),QDe=r(cm,` then you can add those to the auto
classes like this:`),cm.forEach(t),kIe=i(m),T(dy.$$.fragment,m),SIe=i(m),$$=n(m,"P",{});var $5e=s($$);HDe=r($5e,"You will then be able to use the auto classes like you would usually do!"),$5e.forEach(t),RIe=i(m),T(bm.$$.fragment,m),PIe=i(m),bi=n(m,"H2",{class:!0});var b9=s(bi);vm=n(b9,"A",{id:!0,class:!0,href:!0});var k5e=s(vm);Cee=n(k5e,"SPAN",{});var S5e=s(Cee);T(cy.$$.fragment,S5e),S5e.forEach(t),k5e.forEach(t),UDe=i(b9),wee=n(b9,"SPAN",{});var R5e=s(wee);JDe=r(R5e,"AutoConfig"),R5e.forEach(t),b9.forEach(t),BIe=i(m),Co=n(m,"DIV",{class:!0});var et=s(Co);T(my.$$.fragment,et),YDe=i(et),fy=n(et,"P",{});var v9=s(fy);KDe=r(v9,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),k$=n(v9,"A",{href:!0});var P5e=s(k$);ZDe=r(P5e,"from_pretrained()"),P5e.forEach(t),eGe=r(v9," class method."),v9.forEach(t),oGe=i(et),gy=n(et,"P",{});var F9=s(gy);rGe=r(F9,"This class cannot be instantiated directly using "),Aee=n(F9,"CODE",{});var B5e=s(Aee);tGe=r(B5e,"__init__()"),B5e.forEach(t),aGe=r(F9," (throws an error)."),F9.forEach(t),nGe=i(et),Er=n(et,"DIV",{class:!0});var ot=s(Er);T(hy.$$.fragment,ot),sGe=i(ot),yee=n(ot,"P",{});var I5e=s(yee);lGe=r(I5e,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),I5e.forEach(t),iGe=i(ot),vi=n(ot,"P",{});var mm=s(vi);dGe=r(mm,"The configuration class to instantiate is selected based on the "),Lee=n(mm,"CODE",{});var q5e=s(Lee);cGe=r(q5e,"model_type"),q5e.forEach(t),mGe=r(mm,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),xee=n(mm,"CODE",{});var N5e=s(xee);fGe=r(N5e,"pretrained_model_name_or_path"),N5e.forEach(t),gGe=r(mm,":"),mm.forEach(t),hGe=i(ot),A=n(ot,"UL",{});var y=s(A);Fm=n(y,"LI",{});var GA=s(Fm);$ee=n(GA,"STRONG",{});var j5e=s($ee);uGe=r(j5e,"albert"),j5e.forEach(t),pGe=r(GA," \u2014 "),S$=n(GA,"A",{href:!0});var D5e=s(S$);_Ge=r(D5e,"AlbertConfig"),D5e.forEach(t),bGe=r(GA," (ALBERT model)"),GA.forEach(t),vGe=i(y),Tm=n(y,"LI",{});var OA=s(Tm);kee=n(OA,"STRONG",{});var G5e=s(kee);FGe=r(G5e,"bart"),G5e.forEach(t),TGe=r(OA," \u2014 "),R$=n(OA,"A",{href:!0});var O5e=s(R$);MGe=r(O5e,"BartConfig"),O5e.forEach(t),EGe=r(OA," (BART model)"),OA.forEach(t),CGe=i(y),Mm=n(y,"LI",{});var VA=s(Mm);See=n(VA,"STRONG",{});var V5e=s(See);wGe=r(V5e,"beit"),V5e.forEach(t),AGe=r(VA," \u2014 "),P$=n(VA,"A",{href:!0});var X5e=s(P$);yGe=r(X5e,"BeitConfig"),X5e.forEach(t),LGe=r(VA," (BEiT model)"),VA.forEach(t),xGe=i(y),Em=n(y,"LI",{});var XA=s(Em);Ree=n(XA,"STRONG",{});var z5e=s(Ree);$Ge=r(z5e,"bert"),z5e.forEach(t),kGe=r(XA," \u2014 "),B$=n(XA,"A",{href:!0});var W5e=s(B$);SGe=r(W5e,"BertConfig"),W5e.forEach(t),RGe=r(XA," (BERT model)"),XA.forEach(t),PGe=i(y),Cm=n(y,"LI",{});var zA=s(Cm);Pee=n(zA,"STRONG",{});var Q5e=s(Pee);BGe=r(Q5e,"bert-generation"),Q5e.forEach(t),IGe=r(zA," \u2014 "),I$=n(zA,"A",{href:!0});var H5e=s(I$);qGe=r(H5e,"BertGenerationConfig"),H5e.forEach(t),NGe=r(zA," (Bert Generation model)"),zA.forEach(t),jGe=i(y),wm=n(y,"LI",{});var WA=s(wm);Bee=n(WA,"STRONG",{});var U5e=s(Bee);DGe=r(U5e,"big_bird"),U5e.forEach(t),GGe=r(WA," \u2014 "),q$=n(WA,"A",{href:!0});var J5e=s(q$);OGe=r(J5e,"BigBirdConfig"),J5e.forEach(t),VGe=r(WA," (BigBird model)"),WA.forEach(t),XGe=i(y),Am=n(y,"LI",{});var QA=s(Am);Iee=n(QA,"STRONG",{});var Y5e=s(Iee);zGe=r(Y5e,"bigbird_pegasus"),Y5e.forEach(t),WGe=r(QA," \u2014 "),N$=n(QA,"A",{href:!0});var K5e=s(N$);QGe=r(K5e,"BigBirdPegasusConfig"),K5e.forEach(t),HGe=r(QA," (BigBirdPegasus model)"),QA.forEach(t),UGe=i(y),ym=n(y,"LI",{});var HA=s(ym);qee=n(HA,"STRONG",{});var Z5e=s(qee);JGe=r(Z5e,"blenderbot"),Z5e.forEach(t),YGe=r(HA," \u2014 "),j$=n(HA,"A",{href:!0});var e3e=s(j$);KGe=r(e3e,"BlenderbotConfig"),e3e.forEach(t),ZGe=r(HA," (Blenderbot model)"),HA.forEach(t),eOe=i(y),Lm=n(y,"LI",{});var UA=s(Lm);Nee=n(UA,"STRONG",{});var o3e=s(Nee);oOe=r(o3e,"blenderbot-small"),o3e.forEach(t),rOe=r(UA," \u2014 "),D$=n(UA,"A",{href:!0});var r3e=s(D$);tOe=r(r3e,"BlenderbotSmallConfig"),r3e.forEach(t),aOe=r(UA," (BlenderbotSmall model)"),UA.forEach(t),nOe=i(y),xm=n(y,"LI",{});var JA=s(xm);jee=n(JA,"STRONG",{});var t3e=s(jee);sOe=r(t3e,"camembert"),t3e.forEach(t),lOe=r(JA," \u2014 "),G$=n(JA,"A",{href:!0});var a3e=s(G$);iOe=r(a3e,"CamembertConfig"),a3e.forEach(t),dOe=r(JA," (CamemBERT model)"),JA.forEach(t),cOe=i(y),$m=n(y,"LI",{});var YA=s($m);Dee=n(YA,"STRONG",{});var n3e=s(Dee);mOe=r(n3e,"canine"),n3e.forEach(t),fOe=r(YA," \u2014 "),O$=n(YA,"A",{href:!0});var s3e=s(O$);gOe=r(s3e,"CanineConfig"),s3e.forEach(t),hOe=r(YA," (Canine model)"),YA.forEach(t),uOe=i(y),km=n(y,"LI",{});var KA=s(km);Gee=n(KA,"STRONG",{});var l3e=s(Gee);pOe=r(l3e,"clip"),l3e.forEach(t),_Oe=r(KA," \u2014 "),V$=n(KA,"A",{href:!0});var i3e=s(V$);bOe=r(i3e,"CLIPConfig"),i3e.forEach(t),vOe=r(KA," (CLIP model)"),KA.forEach(t),FOe=i(y),Sm=n(y,"LI",{});var ZA=s(Sm);Oee=n(ZA,"STRONG",{});var d3e=s(Oee);TOe=r(d3e,"convbert"),d3e.forEach(t),MOe=r(ZA," \u2014 "),X$=n(ZA,"A",{href:!0});var c3e=s(X$);EOe=r(c3e,"ConvBertConfig"),c3e.forEach(t),COe=r(ZA," (ConvBERT model)"),ZA.forEach(t),wOe=i(y),Rm=n(y,"LI",{});var e6=s(Rm);Vee=n(e6,"STRONG",{});var m3e=s(Vee);AOe=r(m3e,"convnext"),m3e.forEach(t),yOe=r(e6," \u2014 "),z$=n(e6,"A",{href:!0});var f3e=s(z$);LOe=r(f3e,"ConvNextConfig"),f3e.forEach(t),xOe=r(e6," (ConvNext model)"),e6.forEach(t),$Oe=i(y),Pm=n(y,"LI",{});var o6=s(Pm);Xee=n(o6,"STRONG",{});var g3e=s(Xee);kOe=r(g3e,"ctrl"),g3e.forEach(t),SOe=r(o6," \u2014 "),W$=n(o6,"A",{href:!0});var h3e=s(W$);ROe=r(h3e,"CTRLConfig"),h3e.forEach(t),POe=r(o6," (CTRL model)"),o6.forEach(t),BOe=i(y),Bm=n(y,"LI",{});var r6=s(Bm);zee=n(r6,"STRONG",{});var u3e=s(zee);IOe=r(u3e,"data2vec-audio"),u3e.forEach(t),qOe=r(r6," \u2014 "),Q$=n(r6,"A",{href:!0});var p3e=s(Q$);NOe=r(p3e,"Data2VecAudioConfig"),p3e.forEach(t),jOe=r(r6," (Data2VecAudio model)"),r6.forEach(t),DOe=i(y),Im=n(y,"LI",{});var t6=s(Im);Wee=n(t6,"STRONG",{});var _3e=s(Wee);GOe=r(_3e,"data2vec-text"),_3e.forEach(t),OOe=r(t6," \u2014 "),H$=n(t6,"A",{href:!0});var b3e=s(H$);VOe=r(b3e,"Data2VecTextConfig"),b3e.forEach(t),XOe=r(t6," (Data2VecText model)"),t6.forEach(t),zOe=i(y),qm=n(y,"LI",{});var a6=s(qm);Qee=n(a6,"STRONG",{});var v3e=s(Qee);WOe=r(v3e,"data2vec-vision"),v3e.forEach(t),QOe=r(a6," \u2014 "),U$=n(a6,"A",{href:!0});var F3e=s(U$);HOe=r(F3e,"Data2VecVisionConfig"),F3e.forEach(t),UOe=r(a6," (Data2VecVision model)"),a6.forEach(t),JOe=i(y),Nm=n(y,"LI",{});var n6=s(Nm);Hee=n(n6,"STRONG",{});var T3e=s(Hee);YOe=r(T3e,"deberta"),T3e.forEach(t),KOe=r(n6," \u2014 "),J$=n(n6,"A",{href:!0});var M3e=s(J$);ZOe=r(M3e,"DebertaConfig"),M3e.forEach(t),eVe=r(n6," (DeBERTa model)"),n6.forEach(t),oVe=i(y),jm=n(y,"LI",{});var s6=s(jm);Uee=n(s6,"STRONG",{});var E3e=s(Uee);rVe=r(E3e,"deberta-v2"),E3e.forEach(t),tVe=r(s6," \u2014 "),Y$=n(s6,"A",{href:!0});var C3e=s(Y$);aVe=r(C3e,"DebertaV2Config"),C3e.forEach(t),nVe=r(s6," (DeBERTa-v2 model)"),s6.forEach(t),sVe=i(y),Dm=n(y,"LI",{});var l6=s(Dm);Jee=n(l6,"STRONG",{});var w3e=s(Jee);lVe=r(w3e,"decision_transformer"),w3e.forEach(t),iVe=r(l6," \u2014 "),K$=n(l6,"A",{href:!0});var A3e=s(K$);dVe=r(A3e,"DecisionTransformerConfig"),A3e.forEach(t),cVe=r(l6," (Decision Transformer model)"),l6.forEach(t),mVe=i(y),Gm=n(y,"LI",{});var i6=s(Gm);Yee=n(i6,"STRONG",{});var y3e=s(Yee);fVe=r(y3e,"deit"),y3e.forEach(t),gVe=r(i6," \u2014 "),Z$=n(i6,"A",{href:!0});var L3e=s(Z$);hVe=r(L3e,"DeiTConfig"),L3e.forEach(t),uVe=r(i6," (DeiT model)"),i6.forEach(t),pVe=i(y),Om=n(y,"LI",{});var d6=s(Om);Kee=n(d6,"STRONG",{});var x3e=s(Kee);_Ve=r(x3e,"detr"),x3e.forEach(t),bVe=r(d6," \u2014 "),ek=n(d6,"A",{href:!0});var vDr=s(ek);vVe=r(vDr,"DetrConfig"),vDr.forEach(t),FVe=r(d6," (DETR model)"),d6.forEach(t),TVe=i(y),Vm=n(y,"LI",{});var $3e=s(Vm);Zee=n($3e,"STRONG",{});var FDr=s(Zee);MVe=r(FDr,"distilbert"),FDr.forEach(t),EVe=r($3e," \u2014 "),ok=n($3e,"A",{href:!0});var TDr=s(ok);CVe=r(TDr,"DistilBertConfig"),TDr.forEach(t),wVe=r($3e," (DistilBERT model)"),$3e.forEach(t),AVe=i(y),Xm=n(y,"LI",{});var k3e=s(Xm);eoe=n(k3e,"STRONG",{});var MDr=s(eoe);yVe=r(MDr,"dpr"),MDr.forEach(t),LVe=r(k3e," \u2014 "),rk=n(k3e,"A",{href:!0});var EDr=s(rk);xVe=r(EDr,"DPRConfig"),EDr.forEach(t),$Ve=r(k3e," (DPR model)"),k3e.forEach(t),kVe=i(y),zm=n(y,"LI",{});var S3e=s(zm);ooe=n(S3e,"STRONG",{});var CDr=s(ooe);SVe=r(CDr,"dpt"),CDr.forEach(t),RVe=r(S3e," \u2014 "),tk=n(S3e,"A",{href:!0});var wDr=s(tk);PVe=r(wDr,"DPTConfig"),wDr.forEach(t),BVe=r(S3e," (DPT model)"),S3e.forEach(t),IVe=i(y),Wm=n(y,"LI",{});var R3e=s(Wm);roe=n(R3e,"STRONG",{});var ADr=s(roe);qVe=r(ADr,"electra"),ADr.forEach(t),NVe=r(R3e," \u2014 "),ak=n(R3e,"A",{href:!0});var yDr=s(ak);jVe=r(yDr,"ElectraConfig"),yDr.forEach(t),DVe=r(R3e," (ELECTRA model)"),R3e.forEach(t),GVe=i(y),Qm=n(y,"LI",{});var P3e=s(Qm);toe=n(P3e,"STRONG",{});var LDr=s(toe);OVe=r(LDr,"encoder-decoder"),LDr.forEach(t),VVe=r(P3e," \u2014 "),nk=n(P3e,"A",{href:!0});var xDr=s(nk);XVe=r(xDr,"EncoderDecoderConfig"),xDr.forEach(t),zVe=r(P3e," (Encoder decoder model)"),P3e.forEach(t),WVe=i(y),Hm=n(y,"LI",{});var B3e=s(Hm);aoe=n(B3e,"STRONG",{});var $Dr=s(aoe);QVe=r($Dr,"flaubert"),$Dr.forEach(t),HVe=r(B3e," \u2014 "),sk=n(B3e,"A",{href:!0});var kDr=s(sk);UVe=r(kDr,"FlaubertConfig"),kDr.forEach(t),JVe=r(B3e," (FlauBERT model)"),B3e.forEach(t),YVe=i(y),Um=n(y,"LI",{});var I3e=s(Um);noe=n(I3e,"STRONG",{});var SDr=s(noe);KVe=r(SDr,"flava"),SDr.forEach(t),ZVe=r(I3e," \u2014 "),lk=n(I3e,"A",{href:!0});var RDr=s(lk);eXe=r(RDr,"FlavaConfig"),RDr.forEach(t),oXe=r(I3e," (Flava model)"),I3e.forEach(t),rXe=i(y),Jm=n(y,"LI",{});var q3e=s(Jm);soe=n(q3e,"STRONG",{});var PDr=s(soe);tXe=r(PDr,"fnet"),PDr.forEach(t),aXe=r(q3e," \u2014 "),ik=n(q3e,"A",{href:!0});var BDr=s(ik);nXe=r(BDr,"FNetConfig"),BDr.forEach(t),sXe=r(q3e," (FNet model)"),q3e.forEach(t),lXe=i(y),Ym=n(y,"LI",{});var N3e=s(Ym);loe=n(N3e,"STRONG",{});var IDr=s(loe);iXe=r(IDr,"fsmt"),IDr.forEach(t),dXe=r(N3e," \u2014 "),dk=n(N3e,"A",{href:!0});var qDr=s(dk);cXe=r(qDr,"FSMTConfig"),qDr.forEach(t),mXe=r(N3e," (FairSeq Machine-Translation model)"),N3e.forEach(t),fXe=i(y),Km=n(y,"LI",{});var j3e=s(Km);ioe=n(j3e,"STRONG",{});var NDr=s(ioe);gXe=r(NDr,"funnel"),NDr.forEach(t),hXe=r(j3e," \u2014 "),ck=n(j3e,"A",{href:!0});var jDr=s(ck);uXe=r(jDr,"FunnelConfig"),jDr.forEach(t),pXe=r(j3e," (Funnel Transformer model)"),j3e.forEach(t),_Xe=i(y),Zm=n(y,"LI",{});var D3e=s(Zm);doe=n(D3e,"STRONG",{});var DDr=s(doe);bXe=r(DDr,"glpn"),DDr.forEach(t),vXe=r(D3e," \u2014 "),mk=n(D3e,"A",{href:!0});var GDr=s(mk);FXe=r(GDr,"GLPNConfig"),GDr.forEach(t),TXe=r(D3e," (GLPN model)"),D3e.forEach(t),MXe=i(y),ef=n(y,"LI",{});var G3e=s(ef);coe=n(G3e,"STRONG",{});var ODr=s(coe);EXe=r(ODr,"gpt2"),ODr.forEach(t),CXe=r(G3e," \u2014 "),fk=n(G3e,"A",{href:!0});var VDr=s(fk);wXe=r(VDr,"GPT2Config"),VDr.forEach(t),AXe=r(G3e," (OpenAI GPT-2 model)"),G3e.forEach(t),yXe=i(y),of=n(y,"LI",{});var O3e=s(of);moe=n(O3e,"STRONG",{});var XDr=s(moe);LXe=r(XDr,"gpt_neo"),XDr.forEach(t),xXe=r(O3e," \u2014 "),gk=n(O3e,"A",{href:!0});var zDr=s(gk);$Xe=r(zDr,"GPTNeoConfig"),zDr.forEach(t),kXe=r(O3e," (GPT Neo model)"),O3e.forEach(t),SXe=i(y),rf=n(y,"LI",{});var V3e=s(rf);foe=n(V3e,"STRONG",{});var WDr=s(foe);RXe=r(WDr,"gptj"),WDr.forEach(t),PXe=r(V3e," \u2014 "),hk=n(V3e,"A",{href:!0});var QDr=s(hk);BXe=r(QDr,"GPTJConfig"),QDr.forEach(t),IXe=r(V3e," (GPT-J model)"),V3e.forEach(t),qXe=i(y),tf=n(y,"LI",{});var X3e=s(tf);goe=n(X3e,"STRONG",{});var HDr=s(goe);NXe=r(HDr,"hubert"),HDr.forEach(t),jXe=r(X3e," \u2014 "),uk=n(X3e,"A",{href:!0});var UDr=s(uk);DXe=r(UDr,"HubertConfig"),UDr.forEach(t),GXe=r(X3e," (Hubert model)"),X3e.forEach(t),OXe=i(y),af=n(y,"LI",{});var z3e=s(af);hoe=n(z3e,"STRONG",{});var JDr=s(hoe);VXe=r(JDr,"ibert"),JDr.forEach(t),XXe=r(z3e," \u2014 "),pk=n(z3e,"A",{href:!0});var YDr=s(pk);zXe=r(YDr,"IBertConfig"),YDr.forEach(t),WXe=r(z3e," (I-BERT model)"),z3e.forEach(t),QXe=i(y),nf=n(y,"LI",{});var W3e=s(nf);uoe=n(W3e,"STRONG",{});var KDr=s(uoe);HXe=r(KDr,"imagegpt"),KDr.forEach(t),UXe=r(W3e," \u2014 "),_k=n(W3e,"A",{href:!0});var ZDr=s(_k);JXe=r(ZDr,"ImageGPTConfig"),ZDr.forEach(t),YXe=r(W3e," (ImageGPT model)"),W3e.forEach(t),KXe=i(y),sf=n(y,"LI",{});var Q3e=s(sf);poe=n(Q3e,"STRONG",{});var eGr=s(poe);ZXe=r(eGr,"layoutlm"),eGr.forEach(t),eze=r(Q3e," \u2014 "),bk=n(Q3e,"A",{href:!0});var oGr=s(bk);oze=r(oGr,"LayoutLMConfig"),oGr.forEach(t),rze=r(Q3e," (LayoutLM model)"),Q3e.forEach(t),tze=i(y),lf=n(y,"LI",{});var H3e=s(lf);_oe=n(H3e,"STRONG",{});var rGr=s(_oe);aze=r(rGr,"layoutlmv2"),rGr.forEach(t),nze=r(H3e," \u2014 "),vk=n(H3e,"A",{href:!0});var tGr=s(vk);sze=r(tGr,"LayoutLMv2Config"),tGr.forEach(t),lze=r(H3e," (LayoutLMv2 model)"),H3e.forEach(t),ize=i(y),df=n(y,"LI",{});var U3e=s(df);boe=n(U3e,"STRONG",{});var aGr=s(boe);dze=r(aGr,"led"),aGr.forEach(t),cze=r(U3e," \u2014 "),Fk=n(U3e,"A",{href:!0});var nGr=s(Fk);mze=r(nGr,"LEDConfig"),nGr.forEach(t),fze=r(U3e," (LED model)"),U3e.forEach(t),gze=i(y),cf=n(y,"LI",{});var J3e=s(cf);voe=n(J3e,"STRONG",{});var sGr=s(voe);hze=r(sGr,"longformer"),sGr.forEach(t),uze=r(J3e," \u2014 "),Tk=n(J3e,"A",{href:!0});var lGr=s(Tk);pze=r(lGr,"LongformerConfig"),lGr.forEach(t),_ze=r(J3e," (Longformer model)"),J3e.forEach(t),bze=i(y),mf=n(y,"LI",{});var Y3e=s(mf);Foe=n(Y3e,"STRONG",{});var iGr=s(Foe);vze=r(iGr,"luke"),iGr.forEach(t),Fze=r(Y3e," \u2014 "),Mk=n(Y3e,"A",{href:!0});var dGr=s(Mk);Tze=r(dGr,"LukeConfig"),dGr.forEach(t),Mze=r(Y3e," (LUKE model)"),Y3e.forEach(t),Eze=i(y),ff=n(y,"LI",{});var K3e=s(ff);Toe=n(K3e,"STRONG",{});var cGr=s(Toe);Cze=r(cGr,"lxmert"),cGr.forEach(t),wze=r(K3e," \u2014 "),Ek=n(K3e,"A",{href:!0});var mGr=s(Ek);Aze=r(mGr,"LxmertConfig"),mGr.forEach(t),yze=r(K3e," (LXMERT model)"),K3e.forEach(t),Lze=i(y),gf=n(y,"LI",{});var Z3e=s(gf);Moe=n(Z3e,"STRONG",{});var fGr=s(Moe);xze=r(fGr,"m2m_100"),fGr.forEach(t),$ze=r(Z3e," \u2014 "),Ck=n(Z3e,"A",{href:!0});var gGr=s(Ck);kze=r(gGr,"M2M100Config"),gGr.forEach(t),Sze=r(Z3e," (M2M100 model)"),Z3e.forEach(t),Rze=i(y),hf=n(y,"LI",{});var ewe=s(hf);Eoe=n(ewe,"STRONG",{});var hGr=s(Eoe);Pze=r(hGr,"marian"),hGr.forEach(t),Bze=r(ewe," \u2014 "),wk=n(ewe,"A",{href:!0});var uGr=s(wk);Ize=r(uGr,"MarianConfig"),uGr.forEach(t),qze=r(ewe," (Marian model)"),ewe.forEach(t),Nze=i(y),uf=n(y,"LI",{});var owe=s(uf);Coe=n(owe,"STRONG",{});var pGr=s(Coe);jze=r(pGr,"maskformer"),pGr.forEach(t),Dze=r(owe," \u2014 "),Ak=n(owe,"A",{href:!0});var _Gr=s(Ak);Gze=r(_Gr,"MaskFormerConfig"),_Gr.forEach(t),Oze=r(owe," (MaskFormer model)"),owe.forEach(t),Vze=i(y),pf=n(y,"LI",{});var rwe=s(pf);woe=n(rwe,"STRONG",{});var bGr=s(woe);Xze=r(bGr,"mbart"),bGr.forEach(t),zze=r(rwe," \u2014 "),yk=n(rwe,"A",{href:!0});var vGr=s(yk);Wze=r(vGr,"MBartConfig"),vGr.forEach(t),Qze=r(rwe," (mBART model)"),rwe.forEach(t),Hze=i(y),_f=n(y,"LI",{});var twe=s(_f);Aoe=n(twe,"STRONG",{});var FGr=s(Aoe);Uze=r(FGr,"megatron-bert"),FGr.forEach(t),Jze=r(twe," \u2014 "),Lk=n(twe,"A",{href:!0});var TGr=s(Lk);Yze=r(TGr,"MegatronBertConfig"),TGr.forEach(t),Kze=r(twe," (MegatronBert model)"),twe.forEach(t),Zze=i(y),bf=n(y,"LI",{});var awe=s(bf);yoe=n(awe,"STRONG",{});var MGr=s(yoe);eWe=r(MGr,"mobilebert"),MGr.forEach(t),oWe=r(awe," \u2014 "),xk=n(awe,"A",{href:!0});var EGr=s(xk);rWe=r(EGr,"MobileBertConfig"),EGr.forEach(t),tWe=r(awe," (MobileBERT model)"),awe.forEach(t),aWe=i(y),vf=n(y,"LI",{});var nwe=s(vf);Loe=n(nwe,"STRONG",{});var CGr=s(Loe);nWe=r(CGr,"mpnet"),CGr.forEach(t),sWe=r(nwe," \u2014 "),$k=n(nwe,"A",{href:!0});var wGr=s($k);lWe=r(wGr,"MPNetConfig"),wGr.forEach(t),iWe=r(nwe," (MPNet model)"),nwe.forEach(t),dWe=i(y),Ff=n(y,"LI",{});var swe=s(Ff);xoe=n(swe,"STRONG",{});var AGr=s(xoe);cWe=r(AGr,"mt5"),AGr.forEach(t),mWe=r(swe," \u2014 "),kk=n(swe,"A",{href:!0});var yGr=s(kk);fWe=r(yGr,"MT5Config"),yGr.forEach(t),gWe=r(swe," (mT5 model)"),swe.forEach(t),hWe=i(y),Tf=n(y,"LI",{});var lwe=s(Tf);$oe=n(lwe,"STRONG",{});var LGr=s($oe);uWe=r(LGr,"nystromformer"),LGr.forEach(t),pWe=r(lwe," \u2014 "),Sk=n(lwe,"A",{href:!0});var xGr=s(Sk);_We=r(xGr,"NystromformerConfig"),xGr.forEach(t),bWe=r(lwe," (Nystromformer model)"),lwe.forEach(t),vWe=i(y),Mf=n(y,"LI",{});var iwe=s(Mf);koe=n(iwe,"STRONG",{});var $Gr=s(koe);FWe=r($Gr,"openai-gpt"),$Gr.forEach(t),TWe=r(iwe," \u2014 "),Rk=n(iwe,"A",{href:!0});var kGr=s(Rk);MWe=r(kGr,"OpenAIGPTConfig"),kGr.forEach(t),EWe=r(iwe," (OpenAI GPT model)"),iwe.forEach(t),CWe=i(y),Ef=n(y,"LI",{});var dwe=s(Ef);Soe=n(dwe,"STRONG",{});var SGr=s(Soe);wWe=r(SGr,"opt"),SGr.forEach(t),AWe=r(dwe," \u2014 "),Pk=n(dwe,"A",{href:!0});var RGr=s(Pk);yWe=r(RGr,"OPTConfig"),RGr.forEach(t),LWe=r(dwe," (OPT model)"),dwe.forEach(t),xWe=i(y),Cf=n(y,"LI",{});var cwe=s(Cf);Roe=n(cwe,"STRONG",{});var PGr=s(Roe);$We=r(PGr,"pegasus"),PGr.forEach(t),kWe=r(cwe," \u2014 "),Bk=n(cwe,"A",{href:!0});var BGr=s(Bk);SWe=r(BGr,"PegasusConfig"),BGr.forEach(t),RWe=r(cwe," (Pegasus model)"),cwe.forEach(t),PWe=i(y),wf=n(y,"LI",{});var mwe=s(wf);Poe=n(mwe,"STRONG",{});var IGr=s(Poe);BWe=r(IGr,"perceiver"),IGr.forEach(t),IWe=r(mwe," \u2014 "),Ik=n(mwe,"A",{href:!0});var qGr=s(Ik);qWe=r(qGr,"PerceiverConfig"),qGr.forEach(t),NWe=r(mwe," (Perceiver model)"),mwe.forEach(t),jWe=i(y),Af=n(y,"LI",{});var fwe=s(Af);Boe=n(fwe,"STRONG",{});var NGr=s(Boe);DWe=r(NGr,"plbart"),NGr.forEach(t),GWe=r(fwe," \u2014 "),qk=n(fwe,"A",{href:!0});var jGr=s(qk);OWe=r(jGr,"PLBartConfig"),jGr.forEach(t),VWe=r(fwe," (PLBart model)"),fwe.forEach(t),XWe=i(y),yf=n(y,"LI",{});var gwe=s(yf);Ioe=n(gwe,"STRONG",{});var DGr=s(Ioe);zWe=r(DGr,"poolformer"),DGr.forEach(t),WWe=r(gwe," \u2014 "),Nk=n(gwe,"A",{href:!0});var GGr=s(Nk);QWe=r(GGr,"PoolFormerConfig"),GGr.forEach(t),HWe=r(gwe," (PoolFormer model)"),gwe.forEach(t),UWe=i(y),Lf=n(y,"LI",{});var hwe=s(Lf);qoe=n(hwe,"STRONG",{});var OGr=s(qoe);JWe=r(OGr,"prophetnet"),OGr.forEach(t),YWe=r(hwe," \u2014 "),jk=n(hwe,"A",{href:!0});var VGr=s(jk);KWe=r(VGr,"ProphetNetConfig"),VGr.forEach(t),ZWe=r(hwe," (ProphetNet model)"),hwe.forEach(t),eQe=i(y),xf=n(y,"LI",{});var uwe=s(xf);Noe=n(uwe,"STRONG",{});var XGr=s(Noe);oQe=r(XGr,"qdqbert"),XGr.forEach(t),rQe=r(uwe," \u2014 "),Dk=n(uwe,"A",{href:!0});var zGr=s(Dk);tQe=r(zGr,"QDQBertConfig"),zGr.forEach(t),aQe=r(uwe," (QDQBert model)"),uwe.forEach(t),nQe=i(y),$f=n(y,"LI",{});var pwe=s($f);joe=n(pwe,"STRONG",{});var WGr=s(joe);sQe=r(WGr,"rag"),WGr.forEach(t),lQe=r(pwe," \u2014 "),Gk=n(pwe,"A",{href:!0});var QGr=s(Gk);iQe=r(QGr,"RagConfig"),QGr.forEach(t),dQe=r(pwe," (RAG model)"),pwe.forEach(t),cQe=i(y),kf=n(y,"LI",{});var _we=s(kf);Doe=n(_we,"STRONG",{});var HGr=s(Doe);mQe=r(HGr,"realm"),HGr.forEach(t),fQe=r(_we," \u2014 "),Ok=n(_we,"A",{href:!0});var UGr=s(Ok);gQe=r(UGr,"RealmConfig"),UGr.forEach(t),hQe=r(_we," (Realm model)"),_we.forEach(t),uQe=i(y),Sf=n(y,"LI",{});var bwe=s(Sf);Goe=n(bwe,"STRONG",{});var JGr=s(Goe);pQe=r(JGr,"reformer"),JGr.forEach(t),_Qe=r(bwe," \u2014 "),Vk=n(bwe,"A",{href:!0});var YGr=s(Vk);bQe=r(YGr,"ReformerConfig"),YGr.forEach(t),vQe=r(bwe," (Reformer model)"),bwe.forEach(t),FQe=i(y),Rf=n(y,"LI",{});var vwe=s(Rf);Ooe=n(vwe,"STRONG",{});var KGr=s(Ooe);TQe=r(KGr,"regnet"),KGr.forEach(t),MQe=r(vwe," \u2014 "),Xk=n(vwe,"A",{href:!0});var ZGr=s(Xk);EQe=r(ZGr,"RegNetConfig"),ZGr.forEach(t),CQe=r(vwe," (RegNet model)"),vwe.forEach(t),wQe=i(y),Pf=n(y,"LI",{});var Fwe=s(Pf);Voe=n(Fwe,"STRONG",{});var eOr=s(Voe);AQe=r(eOr,"rembert"),eOr.forEach(t),yQe=r(Fwe," \u2014 "),zk=n(Fwe,"A",{href:!0});var oOr=s(zk);LQe=r(oOr,"RemBertConfig"),oOr.forEach(t),xQe=r(Fwe," (RemBERT model)"),Fwe.forEach(t),$Qe=i(y),Bf=n(y,"LI",{});var Twe=s(Bf);Xoe=n(Twe,"STRONG",{});var rOr=s(Xoe);kQe=r(rOr,"resnet"),rOr.forEach(t),SQe=r(Twe," \u2014 "),Wk=n(Twe,"A",{href:!0});var tOr=s(Wk);RQe=r(tOr,"ResNetConfig"),tOr.forEach(t),PQe=r(Twe," (ResNet model)"),Twe.forEach(t),BQe=i(y),If=n(y,"LI",{});var Mwe=s(If);zoe=n(Mwe,"STRONG",{});var aOr=s(zoe);IQe=r(aOr,"retribert"),aOr.forEach(t),qQe=r(Mwe," \u2014 "),Qk=n(Mwe,"A",{href:!0});var nOr=s(Qk);NQe=r(nOr,"RetriBertConfig"),nOr.forEach(t),jQe=r(Mwe," (RetriBERT model)"),Mwe.forEach(t),DQe=i(y),qf=n(y,"LI",{});var Ewe=s(qf);Woe=n(Ewe,"STRONG",{});var sOr=s(Woe);GQe=r(sOr,"roberta"),sOr.forEach(t),OQe=r(Ewe," \u2014 "),Hk=n(Ewe,"A",{href:!0});var lOr=s(Hk);VQe=r(lOr,"RobertaConfig"),lOr.forEach(t),XQe=r(Ewe," (RoBERTa model)"),Ewe.forEach(t),zQe=i(y),Nf=n(y,"LI",{});var Cwe=s(Nf);Qoe=n(Cwe,"STRONG",{});var iOr=s(Qoe);WQe=r(iOr,"roformer"),iOr.forEach(t),QQe=r(Cwe," \u2014 "),Uk=n(Cwe,"A",{href:!0});var dOr=s(Uk);HQe=r(dOr,"RoFormerConfig"),dOr.forEach(t),UQe=r(Cwe," (RoFormer model)"),Cwe.forEach(t),JQe=i(y),jf=n(y,"LI",{});var wwe=s(jf);Hoe=n(wwe,"STRONG",{});var cOr=s(Hoe);YQe=r(cOr,"segformer"),cOr.forEach(t),KQe=r(wwe," \u2014 "),Jk=n(wwe,"A",{href:!0});var mOr=s(Jk);ZQe=r(mOr,"SegformerConfig"),mOr.forEach(t),eHe=r(wwe," (SegFormer model)"),wwe.forEach(t),oHe=i(y),Df=n(y,"LI",{});var Awe=s(Df);Uoe=n(Awe,"STRONG",{});var fOr=s(Uoe);rHe=r(fOr,"sew"),fOr.forEach(t),tHe=r(Awe," \u2014 "),Yk=n(Awe,"A",{href:!0});var gOr=s(Yk);aHe=r(gOr,"SEWConfig"),gOr.forEach(t),nHe=r(Awe," (SEW model)"),Awe.forEach(t),sHe=i(y),Gf=n(y,"LI",{});var ywe=s(Gf);Joe=n(ywe,"STRONG",{});var hOr=s(Joe);lHe=r(hOr,"sew-d"),hOr.forEach(t),iHe=r(ywe," \u2014 "),Kk=n(ywe,"A",{href:!0});var uOr=s(Kk);dHe=r(uOr,"SEWDConfig"),uOr.forEach(t),cHe=r(ywe," (SEW-D model)"),ywe.forEach(t),mHe=i(y),Of=n(y,"LI",{});var Lwe=s(Of);Yoe=n(Lwe,"STRONG",{});var pOr=s(Yoe);fHe=r(pOr,"speech-encoder-decoder"),pOr.forEach(t),gHe=r(Lwe," \u2014 "),Zk=n(Lwe,"A",{href:!0});var _Or=s(Zk);hHe=r(_Or,"SpeechEncoderDecoderConfig"),_Or.forEach(t),uHe=r(Lwe," (Speech Encoder decoder model)"),Lwe.forEach(t),pHe=i(y),Vf=n(y,"LI",{});var xwe=s(Vf);Koe=n(xwe,"STRONG",{});var bOr=s(Koe);_He=r(bOr,"speech_to_text"),bOr.forEach(t),bHe=r(xwe," \u2014 "),eS=n(xwe,"A",{href:!0});var vOr=s(eS);vHe=r(vOr,"Speech2TextConfig"),vOr.forEach(t),FHe=r(xwe," (Speech2Text model)"),xwe.forEach(t),THe=i(y),Xf=n(y,"LI",{});var $we=s(Xf);Zoe=n($we,"STRONG",{});var FOr=s(Zoe);MHe=r(FOr,"speech_to_text_2"),FOr.forEach(t),EHe=r($we," \u2014 "),oS=n($we,"A",{href:!0});var TOr=s(oS);CHe=r(TOr,"Speech2Text2Config"),TOr.forEach(t),wHe=r($we," (Speech2Text2 model)"),$we.forEach(t),AHe=i(y),zf=n(y,"LI",{});var kwe=s(zf);ere=n(kwe,"STRONG",{});var MOr=s(ere);yHe=r(MOr,"splinter"),MOr.forEach(t),LHe=r(kwe," \u2014 "),rS=n(kwe,"A",{href:!0});var EOr=s(rS);xHe=r(EOr,"SplinterConfig"),EOr.forEach(t),$He=r(kwe," (Splinter model)"),kwe.forEach(t),kHe=i(y),Wf=n(y,"LI",{});var Swe=s(Wf);ore=n(Swe,"STRONG",{});var COr=s(ore);SHe=r(COr,"squeezebert"),COr.forEach(t),RHe=r(Swe," \u2014 "),tS=n(Swe,"A",{href:!0});var wOr=s(tS);PHe=r(wOr,"SqueezeBertConfig"),wOr.forEach(t),BHe=r(Swe," (SqueezeBERT model)"),Swe.forEach(t),IHe=i(y),Qf=n(y,"LI",{});var Rwe=s(Qf);rre=n(Rwe,"STRONG",{});var AOr=s(rre);qHe=r(AOr,"swin"),AOr.forEach(t),NHe=r(Rwe," \u2014 "),aS=n(Rwe,"A",{href:!0});var yOr=s(aS);jHe=r(yOr,"SwinConfig"),yOr.forEach(t),DHe=r(Rwe," (Swin model)"),Rwe.forEach(t),GHe=i(y),Hf=n(y,"LI",{});var Pwe=s(Hf);tre=n(Pwe,"STRONG",{});var LOr=s(tre);OHe=r(LOr,"t5"),LOr.forEach(t),VHe=r(Pwe," \u2014 "),nS=n(Pwe,"A",{href:!0});var xOr=s(nS);XHe=r(xOr,"T5Config"),xOr.forEach(t),zHe=r(Pwe," (T5 model)"),Pwe.forEach(t),WHe=i(y),Uf=n(y,"LI",{});var Bwe=s(Uf);are=n(Bwe,"STRONG",{});var $Or=s(are);QHe=r($Or,"tapas"),$Or.forEach(t),HHe=r(Bwe," \u2014 "),sS=n(Bwe,"A",{href:!0});var kOr=s(sS);UHe=r(kOr,"TapasConfig"),kOr.forEach(t),JHe=r(Bwe," (TAPAS model)"),Bwe.forEach(t),YHe=i(y),Jf=n(y,"LI",{});var Iwe=s(Jf);nre=n(Iwe,"STRONG",{});var SOr=s(nre);KHe=r(SOr,"transfo-xl"),SOr.forEach(t),ZHe=r(Iwe," \u2014 "),lS=n(Iwe,"A",{href:!0});var ROr=s(lS);eUe=r(ROr,"TransfoXLConfig"),ROr.forEach(t),oUe=r(Iwe," (Transformer-XL model)"),Iwe.forEach(t),rUe=i(y),Yf=n(y,"LI",{});var qwe=s(Yf);sre=n(qwe,"STRONG",{});var POr=s(sre);tUe=r(POr,"trocr"),POr.forEach(t),aUe=r(qwe," \u2014 "),iS=n(qwe,"A",{href:!0});var BOr=s(iS);nUe=r(BOr,"TrOCRConfig"),BOr.forEach(t),sUe=r(qwe," (TrOCR model)"),qwe.forEach(t),lUe=i(y),Kf=n(y,"LI",{});var Nwe=s(Kf);lre=n(Nwe,"STRONG",{});var IOr=s(lre);iUe=r(IOr,"unispeech"),IOr.forEach(t),dUe=r(Nwe," \u2014 "),dS=n(Nwe,"A",{href:!0});var qOr=s(dS);cUe=r(qOr,"UniSpeechConfig"),qOr.forEach(t),mUe=r(Nwe," (UniSpeech model)"),Nwe.forEach(t),fUe=i(y),Zf=n(y,"LI",{});var jwe=s(Zf);ire=n(jwe,"STRONG",{});var NOr=s(ire);gUe=r(NOr,"unispeech-sat"),NOr.forEach(t),hUe=r(jwe," \u2014 "),cS=n(jwe,"A",{href:!0});var jOr=s(cS);uUe=r(jOr,"UniSpeechSatConfig"),jOr.forEach(t),pUe=r(jwe," (UniSpeechSat model)"),jwe.forEach(t),_Ue=i(y),eg=n(y,"LI",{});var Dwe=s(eg);dre=n(Dwe,"STRONG",{});var DOr=s(dre);bUe=r(DOr,"van"),DOr.forEach(t),vUe=r(Dwe," \u2014 "),mS=n(Dwe,"A",{href:!0});var GOr=s(mS);FUe=r(GOr,"VanConfig"),GOr.forEach(t),TUe=r(Dwe," (VAN model)"),Dwe.forEach(t),MUe=i(y),og=n(y,"LI",{});var Gwe=s(og);cre=n(Gwe,"STRONG",{});var OOr=s(cre);EUe=r(OOr,"vilt"),OOr.forEach(t),CUe=r(Gwe," \u2014 "),fS=n(Gwe,"A",{href:!0});var VOr=s(fS);wUe=r(VOr,"ViltConfig"),VOr.forEach(t),AUe=r(Gwe," (ViLT model)"),Gwe.forEach(t),yUe=i(y),rg=n(y,"LI",{});var Owe=s(rg);mre=n(Owe,"STRONG",{});var XOr=s(mre);LUe=r(XOr,"vision-encoder-decoder"),XOr.forEach(t),xUe=r(Owe," \u2014 "),gS=n(Owe,"A",{href:!0});var zOr=s(gS);$Ue=r(zOr,"VisionEncoderDecoderConfig"),zOr.forEach(t),kUe=r(Owe," (Vision Encoder decoder model)"),Owe.forEach(t),SUe=i(y),tg=n(y,"LI",{});var Vwe=s(tg);fre=n(Vwe,"STRONG",{});var WOr=s(fre);RUe=r(WOr,"vision-text-dual-encoder"),WOr.forEach(t),PUe=r(Vwe," \u2014 "),hS=n(Vwe,"A",{href:!0});var QOr=s(hS);BUe=r(QOr,"VisionTextDualEncoderConfig"),QOr.forEach(t),IUe=r(Vwe," (VisionTextDualEncoder model)"),Vwe.forEach(t),qUe=i(y),ag=n(y,"LI",{});var Xwe=s(ag);gre=n(Xwe,"STRONG",{});var HOr=s(gre);NUe=r(HOr,"visual_bert"),HOr.forEach(t),jUe=r(Xwe," \u2014 "),uS=n(Xwe,"A",{href:!0});var UOr=s(uS);DUe=r(UOr,"VisualBertConfig"),UOr.forEach(t),GUe=r(Xwe," (VisualBert model)"),Xwe.forEach(t),OUe=i(y),ng=n(y,"LI",{});var zwe=s(ng);hre=n(zwe,"STRONG",{});var JOr=s(hre);VUe=r(JOr,"vit"),JOr.forEach(t),XUe=r(zwe," \u2014 "),pS=n(zwe,"A",{href:!0});var YOr=s(pS);zUe=r(YOr,"ViTConfig"),YOr.forEach(t),WUe=r(zwe," (ViT model)"),zwe.forEach(t),QUe=i(y),sg=n(y,"LI",{});var Wwe=s(sg);ure=n(Wwe,"STRONG",{});var KOr=s(ure);HUe=r(KOr,"vit_mae"),KOr.forEach(t),UUe=r(Wwe," \u2014 "),_S=n(Wwe,"A",{href:!0});var ZOr=s(_S);JUe=r(ZOr,"ViTMAEConfig"),ZOr.forEach(t),YUe=r(Wwe," (ViTMAE model)"),Wwe.forEach(t),KUe=i(y),lg=n(y,"LI",{});var Qwe=s(lg);pre=n(Qwe,"STRONG",{});var eVr=s(pre);ZUe=r(eVr,"wav2vec2"),eVr.forEach(t),eJe=r(Qwe," \u2014 "),bS=n(Qwe,"A",{href:!0});var oVr=s(bS);oJe=r(oVr,"Wav2Vec2Config"),oVr.forEach(t),rJe=r(Qwe," (Wav2Vec2 model)"),Qwe.forEach(t),tJe=i(y),ig=n(y,"LI",{});var Hwe=s(ig);_re=n(Hwe,"STRONG",{});var rVr=s(_re);aJe=r(rVr,"wav2vec2-conformer"),rVr.forEach(t),nJe=r(Hwe," \u2014 "),vS=n(Hwe,"A",{href:!0});var tVr=s(vS);sJe=r(tVr,"Wav2Vec2ConformerConfig"),tVr.forEach(t),lJe=r(Hwe," (Wav2Vec2-Conformer model)"),Hwe.forEach(t),iJe=i(y),dg=n(y,"LI",{});var Uwe=s(dg);bre=n(Uwe,"STRONG",{});var aVr=s(bre);dJe=r(aVr,"wavlm"),aVr.forEach(t),cJe=r(Uwe," \u2014 "),FS=n(Uwe,"A",{href:!0});var nVr=s(FS);mJe=r(nVr,"WavLMConfig"),nVr.forEach(t),fJe=r(Uwe," (WavLM model)"),Uwe.forEach(t),gJe=i(y),cg=n(y,"LI",{});var Jwe=s(cg);vre=n(Jwe,"STRONG",{});var sVr=s(vre);hJe=r(sVr,"xglm"),sVr.forEach(t),uJe=r(Jwe," \u2014 "),TS=n(Jwe,"A",{href:!0});var lVr=s(TS);pJe=r(lVr,"XGLMConfig"),lVr.forEach(t),_Je=r(Jwe," (XGLM model)"),Jwe.forEach(t),bJe=i(y),mg=n(y,"LI",{});var Ywe=s(mg);Fre=n(Ywe,"STRONG",{});var iVr=s(Fre);vJe=r(iVr,"xlm"),iVr.forEach(t),FJe=r(Ywe," \u2014 "),MS=n(Ywe,"A",{href:!0});var dVr=s(MS);TJe=r(dVr,"XLMConfig"),dVr.forEach(t),MJe=r(Ywe," (XLM model)"),Ywe.forEach(t),EJe=i(y),fg=n(y,"LI",{});var Kwe=s(fg);Tre=n(Kwe,"STRONG",{});var cVr=s(Tre);CJe=r(cVr,"xlm-prophetnet"),cVr.forEach(t),wJe=r(Kwe," \u2014 "),ES=n(Kwe,"A",{href:!0});var mVr=s(ES);AJe=r(mVr,"XLMProphetNetConfig"),mVr.forEach(t),yJe=r(Kwe," (XLMProphetNet model)"),Kwe.forEach(t),LJe=i(y),gg=n(y,"LI",{});var Zwe=s(gg);Mre=n(Zwe,"STRONG",{});var fVr=s(Mre);xJe=r(fVr,"xlm-roberta"),fVr.forEach(t),$Je=r(Zwe," \u2014 "),CS=n(Zwe,"A",{href:!0});var gVr=s(CS);kJe=r(gVr,"XLMRobertaConfig"),gVr.forEach(t),SJe=r(Zwe," (XLM-RoBERTa model)"),Zwe.forEach(t),RJe=i(y),hg=n(y,"LI",{});var eAe=s(hg);Ere=n(eAe,"STRONG",{});var hVr=s(Ere);PJe=r(hVr,"xlm-roberta-xl"),hVr.forEach(t),BJe=r(eAe," \u2014 "),wS=n(eAe,"A",{href:!0});var uVr=s(wS);IJe=r(uVr,"XLMRobertaXLConfig"),uVr.forEach(t),qJe=r(eAe," (XLM-RoBERTa-XL model)"),eAe.forEach(t),NJe=i(y),ug=n(y,"LI",{});var oAe=s(ug);Cre=n(oAe,"STRONG",{});var pVr=s(Cre);jJe=r(pVr,"xlnet"),pVr.forEach(t),DJe=r(oAe," \u2014 "),AS=n(oAe,"A",{href:!0});var _Vr=s(AS);GJe=r(_Vr,"XLNetConfig"),_Vr.forEach(t),OJe=r(oAe," (XLNet model)"),oAe.forEach(t),VJe=i(y),pg=n(y,"LI",{});var rAe=s(pg);wre=n(rAe,"STRONG",{});var bVr=s(wre);XJe=r(bVr,"yolos"),bVr.forEach(t),zJe=r(rAe," \u2014 "),yS=n(rAe,"A",{href:!0});var vVr=s(yS);WJe=r(vVr,"YolosConfig"),vVr.forEach(t),QJe=r(rAe," (YOLOS model)"),rAe.forEach(t),HJe=i(y),_g=n(y,"LI",{});var tAe=s(_g);Are=n(tAe,"STRONG",{});var FVr=s(Are);UJe=r(FVr,"yoso"),FVr.forEach(t),JJe=r(tAe," \u2014 "),LS=n(tAe,"A",{href:!0});var TVr=s(LS);YJe=r(TVr,"YosoConfig"),TVr.forEach(t),KJe=r(tAe," (YOSO model)"),tAe.forEach(t),y.forEach(t),ZJe=i(ot),T(bg.$$.fragment,ot),ot.forEach(t),eYe=i(et),vg=n(et,"DIV",{class:!0});var RNe=s(vg);T(uy.$$.fragment,RNe),oYe=i(RNe),yre=n(RNe,"P",{});var MVr=s(yre);rYe=r(MVr,"Register a new configuration for this class."),MVr.forEach(t),RNe.forEach(t),et.forEach(t),IIe=i(m),Fi=n(m,"H2",{class:!0});var PNe=s(Fi);Fg=n(PNe,"A",{id:!0,class:!0,href:!0});var EVr=s(Fg);Lre=n(EVr,"SPAN",{});var CVr=s(Lre);T(py.$$.fragment,CVr),CVr.forEach(t),EVr.forEach(t),tYe=i(PNe),xre=n(PNe,"SPAN",{});var wVr=s(xre);aYe=r(wVr,"AutoTokenizer"),wVr.forEach(t),PNe.forEach(t),qIe=i(m),wo=n(m,"DIV",{class:!0});var Is=s(wo);T(_y.$$.fragment,Is),nYe=i(Is),by=n(Is,"P",{});var BNe=s(by);sYe=r(BNe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),xS=n(BNe,"A",{href:!0});var AVr=s(xS);lYe=r(AVr,"AutoTokenizer.from_pretrained()"),AVr.forEach(t),iYe=r(BNe," class method."),BNe.forEach(t),dYe=i(Is),vy=n(Is,"P",{});var INe=s(vy);cYe=r(INe,"This class cannot be instantiated directly using "),$re=n(INe,"CODE",{});var yVr=s($re);mYe=r(yVr,"__init__()"),yVr.forEach(t),fYe=r(INe," (throws an error)."),INe.forEach(t),gYe=i(Is),Cr=n(Is,"DIV",{class:!0});var qs=s(Cr);T(Fy.$$.fragment,qs),hYe=i(qs),kre=n(qs,"P",{});var LVr=s(kre);uYe=r(LVr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),LVr.forEach(t),pYe=i(qs),Aa=n(qs,"P",{});var c6=s(Aa);_Ye=r(c6,"The tokenizer class to instantiate is selected based on the "),Sre=n(c6,"CODE",{});var xVr=s(Sre);bYe=r(xVr,"model_type"),xVr.forEach(t),vYe=r(c6,` property of the config object (either
passed as an argument or loaded from `),Rre=n(c6,"CODE",{});var $Vr=s(Rre);FYe=r($Vr,"pretrained_model_name_or_path"),$Vr.forEach(t),TYe=r(c6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pre=n(c6,"CODE",{});var kVr=s(Pre);MYe=r(kVr,"pretrained_model_name_or_path"),kVr.forEach(t),EYe=r(c6,":"),c6.forEach(t),CYe=i(qs),k=n(qs,"UL",{});var S=s(k);Sn=n(S,"LI",{});var T9=s(Sn);Bre=n(T9,"STRONG",{});var SVr=s(Bre);wYe=r(SVr,"albert"),SVr.forEach(t),AYe=r(T9," \u2014 "),$S=n(T9,"A",{href:!0});var RVr=s($S);yYe=r(RVr,"AlbertTokenizer"),RVr.forEach(t),LYe=r(T9," or "),kS=n(T9,"A",{href:!0});var PVr=s(kS);xYe=r(PVr,"AlbertTokenizerFast"),PVr.forEach(t),$Ye=r(T9," (ALBERT model)"),T9.forEach(t),kYe=i(S),Rn=n(S,"LI",{});var M9=s(Rn);Ire=n(M9,"STRONG",{});var BVr=s(Ire);SYe=r(BVr,"bart"),BVr.forEach(t),RYe=r(M9," \u2014 "),SS=n(M9,"A",{href:!0});var IVr=s(SS);PYe=r(IVr,"BartTokenizer"),IVr.forEach(t),BYe=r(M9," or "),RS=n(M9,"A",{href:!0});var qVr=s(RS);IYe=r(qVr,"BartTokenizerFast"),qVr.forEach(t),qYe=r(M9," (BART model)"),M9.forEach(t),NYe=i(S),Pn=n(S,"LI",{});var E9=s(Pn);qre=n(E9,"STRONG",{});var NVr=s(qre);jYe=r(NVr,"barthez"),NVr.forEach(t),DYe=r(E9," \u2014 "),PS=n(E9,"A",{href:!0});var jVr=s(PS);GYe=r(jVr,"BarthezTokenizer"),jVr.forEach(t),OYe=r(E9," or "),BS=n(E9,"A",{href:!0});var DVr=s(BS);VYe=r(DVr,"BarthezTokenizerFast"),DVr.forEach(t),XYe=r(E9," (BARThez model)"),E9.forEach(t),zYe=i(S),Tg=n(S,"LI",{});var aAe=s(Tg);Nre=n(aAe,"STRONG",{});var GVr=s(Nre);WYe=r(GVr,"bartpho"),GVr.forEach(t),QYe=r(aAe," \u2014 "),IS=n(aAe,"A",{href:!0});var OVr=s(IS);HYe=r(OVr,"BartphoTokenizer"),OVr.forEach(t),UYe=r(aAe," (BARTpho model)"),aAe.forEach(t),JYe=i(S),Bn=n(S,"LI",{});var C9=s(Bn);jre=n(C9,"STRONG",{});var VVr=s(jre);YYe=r(VVr,"bert"),VVr.forEach(t),KYe=r(C9," \u2014 "),qS=n(C9,"A",{href:!0});var XVr=s(qS);ZYe=r(XVr,"BertTokenizer"),XVr.forEach(t),eKe=r(C9," or "),NS=n(C9,"A",{href:!0});var zVr=s(NS);oKe=r(zVr,"BertTokenizerFast"),zVr.forEach(t),rKe=r(C9," (BERT model)"),C9.forEach(t),tKe=i(S),Mg=n(S,"LI",{});var nAe=s(Mg);Dre=n(nAe,"STRONG",{});var WVr=s(Dre);aKe=r(WVr,"bert-generation"),WVr.forEach(t),nKe=r(nAe," \u2014 "),jS=n(nAe,"A",{href:!0});var QVr=s(jS);sKe=r(QVr,"BertGenerationTokenizer"),QVr.forEach(t),lKe=r(nAe," (Bert Generation model)"),nAe.forEach(t),iKe=i(S),Eg=n(S,"LI",{});var sAe=s(Eg);Gre=n(sAe,"STRONG",{});var HVr=s(Gre);dKe=r(HVr,"bert-japanese"),HVr.forEach(t),cKe=r(sAe," \u2014 "),DS=n(sAe,"A",{href:!0});var UVr=s(DS);mKe=r(UVr,"BertJapaneseTokenizer"),UVr.forEach(t),fKe=r(sAe," (BertJapanese model)"),sAe.forEach(t),gKe=i(S),Cg=n(S,"LI",{});var lAe=s(Cg);Ore=n(lAe,"STRONG",{});var JVr=s(Ore);hKe=r(JVr,"bertweet"),JVr.forEach(t),uKe=r(lAe," \u2014 "),GS=n(lAe,"A",{href:!0});var YVr=s(GS);pKe=r(YVr,"BertweetTokenizer"),YVr.forEach(t),_Ke=r(lAe," (Bertweet model)"),lAe.forEach(t),bKe=i(S),In=n(S,"LI",{});var w9=s(In);Vre=n(w9,"STRONG",{});var KVr=s(Vre);vKe=r(KVr,"big_bird"),KVr.forEach(t),FKe=r(w9," \u2014 "),OS=n(w9,"A",{href:!0});var ZVr=s(OS);TKe=r(ZVr,"BigBirdTokenizer"),ZVr.forEach(t),MKe=r(w9," or "),VS=n(w9,"A",{href:!0});var eXr=s(VS);EKe=r(eXr,"BigBirdTokenizerFast"),eXr.forEach(t),CKe=r(w9," (BigBird model)"),w9.forEach(t),wKe=i(S),qn=n(S,"LI",{});var A9=s(qn);Xre=n(A9,"STRONG",{});var oXr=s(Xre);AKe=r(oXr,"bigbird_pegasus"),oXr.forEach(t),yKe=r(A9," \u2014 "),XS=n(A9,"A",{href:!0});var rXr=s(XS);LKe=r(rXr,"PegasusTokenizer"),rXr.forEach(t),xKe=r(A9," or "),zS=n(A9,"A",{href:!0});var tXr=s(zS);$Ke=r(tXr,"PegasusTokenizerFast"),tXr.forEach(t),kKe=r(A9," (BigBirdPegasus model)"),A9.forEach(t),SKe=i(S),Nn=n(S,"LI",{});var y9=s(Nn);zre=n(y9,"STRONG",{});var aXr=s(zre);RKe=r(aXr,"blenderbot"),aXr.forEach(t),PKe=r(y9," \u2014 "),WS=n(y9,"A",{href:!0});var nXr=s(WS);BKe=r(nXr,"BlenderbotTokenizer"),nXr.forEach(t),IKe=r(y9," or "),QS=n(y9,"A",{href:!0});var sXr=s(QS);qKe=r(sXr,"BlenderbotTokenizerFast"),sXr.forEach(t),NKe=r(y9," (Blenderbot model)"),y9.forEach(t),jKe=i(S),wg=n(S,"LI",{});var iAe=s(wg);Wre=n(iAe,"STRONG",{});var lXr=s(Wre);DKe=r(lXr,"blenderbot-small"),lXr.forEach(t),GKe=r(iAe," \u2014 "),HS=n(iAe,"A",{href:!0});var iXr=s(HS);OKe=r(iXr,"BlenderbotSmallTokenizer"),iXr.forEach(t),VKe=r(iAe," (BlenderbotSmall model)"),iAe.forEach(t),XKe=i(S),Ag=n(S,"LI",{});var dAe=s(Ag);Qre=n(dAe,"STRONG",{});var dXr=s(Qre);zKe=r(dXr,"byt5"),dXr.forEach(t),WKe=r(dAe," \u2014 "),US=n(dAe,"A",{href:!0});var cXr=s(US);QKe=r(cXr,"ByT5Tokenizer"),cXr.forEach(t),HKe=r(dAe," (ByT5 model)"),dAe.forEach(t),UKe=i(S),jn=n(S,"LI",{});var L9=s(jn);Hre=n(L9,"STRONG",{});var mXr=s(Hre);JKe=r(mXr,"camembert"),mXr.forEach(t),YKe=r(L9," \u2014 "),JS=n(L9,"A",{href:!0});var fXr=s(JS);KKe=r(fXr,"CamembertTokenizer"),fXr.forEach(t),ZKe=r(L9," or "),YS=n(L9,"A",{href:!0});var gXr=s(YS);eZe=r(gXr,"CamembertTokenizerFast"),gXr.forEach(t),oZe=r(L9," (CamemBERT model)"),L9.forEach(t),rZe=i(S),yg=n(S,"LI",{});var cAe=s(yg);Ure=n(cAe,"STRONG",{});var hXr=s(Ure);tZe=r(hXr,"canine"),hXr.forEach(t),aZe=r(cAe," \u2014 "),KS=n(cAe,"A",{href:!0});var uXr=s(KS);nZe=r(uXr,"CanineTokenizer"),uXr.forEach(t),sZe=r(cAe," (Canine model)"),cAe.forEach(t),lZe=i(S),Dn=n(S,"LI",{});var x9=s(Dn);Jre=n(x9,"STRONG",{});var pXr=s(Jre);iZe=r(pXr,"clip"),pXr.forEach(t),dZe=r(x9," \u2014 "),ZS=n(x9,"A",{href:!0});var _Xr=s(ZS);cZe=r(_Xr,"CLIPTokenizer"),_Xr.forEach(t),mZe=r(x9," or "),eR=n(x9,"A",{href:!0});var bXr=s(eR);fZe=r(bXr,"CLIPTokenizerFast"),bXr.forEach(t),gZe=r(x9," (CLIP model)"),x9.forEach(t),hZe=i(S),Gn=n(S,"LI",{});var $9=s(Gn);Yre=n($9,"STRONG",{});var vXr=s(Yre);uZe=r(vXr,"convbert"),vXr.forEach(t),pZe=r($9," \u2014 "),oR=n($9,"A",{href:!0});var FXr=s(oR);_Ze=r(FXr,"ConvBertTokenizer"),FXr.forEach(t),bZe=r($9," or "),rR=n($9,"A",{href:!0});var TXr=s(rR);vZe=r(TXr,"ConvBertTokenizerFast"),TXr.forEach(t),FZe=r($9," (ConvBERT model)"),$9.forEach(t),TZe=i(S),On=n(S,"LI",{});var k9=s(On);Kre=n(k9,"STRONG",{});var MXr=s(Kre);MZe=r(MXr,"cpm"),MXr.forEach(t),EZe=r(k9," \u2014 "),tR=n(k9,"A",{href:!0});var EXr=s(tR);CZe=r(EXr,"CpmTokenizer"),EXr.forEach(t),wZe=r(k9," or "),aR=n(k9,"A",{href:!0});var CXr=s(aR);AZe=r(CXr,"CpmTokenizerFast"),CXr.forEach(t),yZe=r(k9," (CPM model)"),k9.forEach(t),LZe=i(S),Lg=n(S,"LI",{});var mAe=s(Lg);Zre=n(mAe,"STRONG",{});var wXr=s(Zre);xZe=r(wXr,"ctrl"),wXr.forEach(t),$Ze=r(mAe," \u2014 "),nR=n(mAe,"A",{href:!0});var AXr=s(nR);kZe=r(AXr,"CTRLTokenizer"),AXr.forEach(t),SZe=r(mAe," (CTRL model)"),mAe.forEach(t),RZe=i(S),Vn=n(S,"LI",{});var S9=s(Vn);ete=n(S9,"STRONG",{});var yXr=s(ete);PZe=r(yXr,"data2vec-text"),yXr.forEach(t),BZe=r(S9," \u2014 "),sR=n(S9,"A",{href:!0});var LXr=s(sR);IZe=r(LXr,"RobertaTokenizer"),LXr.forEach(t),qZe=r(S9," or "),lR=n(S9,"A",{href:!0});var xXr=s(lR);NZe=r(xXr,"RobertaTokenizerFast"),xXr.forEach(t),jZe=r(S9," (Data2VecText model)"),S9.forEach(t),DZe=i(S),Xn=n(S,"LI",{});var R9=s(Xn);ote=n(R9,"STRONG",{});var $Xr=s(ote);GZe=r($Xr,"deberta"),$Xr.forEach(t),OZe=r(R9," \u2014 "),iR=n(R9,"A",{href:!0});var kXr=s(iR);VZe=r(kXr,"DebertaTokenizer"),kXr.forEach(t),XZe=r(R9," or "),dR=n(R9,"A",{href:!0});var SXr=s(dR);zZe=r(SXr,"DebertaTokenizerFast"),SXr.forEach(t),WZe=r(R9," (DeBERTa model)"),R9.forEach(t),QZe=i(S),zn=n(S,"LI",{});var P9=s(zn);rte=n(P9,"STRONG",{});var RXr=s(rte);HZe=r(RXr,"deberta-v2"),RXr.forEach(t),UZe=r(P9," \u2014 "),cR=n(P9,"A",{href:!0});var PXr=s(cR);JZe=r(PXr,"DebertaV2Tokenizer"),PXr.forEach(t),YZe=r(P9," or "),mR=n(P9,"A",{href:!0});var BXr=s(mR);KZe=r(BXr,"DebertaV2TokenizerFast"),BXr.forEach(t),ZZe=r(P9," (DeBERTa-v2 model)"),P9.forEach(t),eeo=i(S),Wn=n(S,"LI",{});var B9=s(Wn);tte=n(B9,"STRONG",{});var IXr=s(tte);oeo=r(IXr,"distilbert"),IXr.forEach(t),reo=r(B9," \u2014 "),fR=n(B9,"A",{href:!0});var qXr=s(fR);teo=r(qXr,"DistilBertTokenizer"),qXr.forEach(t),aeo=r(B9," or "),gR=n(B9,"A",{href:!0});var NXr=s(gR);neo=r(NXr,"DistilBertTokenizerFast"),NXr.forEach(t),seo=r(B9," (DistilBERT model)"),B9.forEach(t),leo=i(S),Qn=n(S,"LI",{});var I9=s(Qn);ate=n(I9,"STRONG",{});var jXr=s(ate);ieo=r(jXr,"dpr"),jXr.forEach(t),deo=r(I9," \u2014 "),hR=n(I9,"A",{href:!0});var DXr=s(hR);ceo=r(DXr,"DPRQuestionEncoderTokenizer"),DXr.forEach(t),meo=r(I9," or "),uR=n(I9,"A",{href:!0});var GXr=s(uR);feo=r(GXr,"DPRQuestionEncoderTokenizerFast"),GXr.forEach(t),geo=r(I9," (DPR model)"),I9.forEach(t),heo=i(S),Hn=n(S,"LI",{});var q9=s(Hn);nte=n(q9,"STRONG",{});var OXr=s(nte);ueo=r(OXr,"electra"),OXr.forEach(t),peo=r(q9," \u2014 "),pR=n(q9,"A",{href:!0});var VXr=s(pR);_eo=r(VXr,"ElectraTokenizer"),VXr.forEach(t),beo=r(q9," or "),_R=n(q9,"A",{href:!0});var XXr=s(_R);veo=r(XXr,"ElectraTokenizerFast"),XXr.forEach(t),Feo=r(q9," (ELECTRA model)"),q9.forEach(t),Teo=i(S),xg=n(S,"LI",{});var fAe=s(xg);ste=n(fAe,"STRONG",{});var zXr=s(ste);Meo=r(zXr,"flaubert"),zXr.forEach(t),Eeo=r(fAe," \u2014 "),bR=n(fAe,"A",{href:!0});var WXr=s(bR);Ceo=r(WXr,"FlaubertTokenizer"),WXr.forEach(t),weo=r(fAe," (FlauBERT model)"),fAe.forEach(t),Aeo=i(S),Un=n(S,"LI",{});var N9=s(Un);lte=n(N9,"STRONG",{});var QXr=s(lte);yeo=r(QXr,"fnet"),QXr.forEach(t),Leo=r(N9," \u2014 "),vR=n(N9,"A",{href:!0});var HXr=s(vR);xeo=r(HXr,"FNetTokenizer"),HXr.forEach(t),$eo=r(N9," or "),FR=n(N9,"A",{href:!0});var UXr=s(FR);keo=r(UXr,"FNetTokenizerFast"),UXr.forEach(t),Seo=r(N9," (FNet model)"),N9.forEach(t),Reo=i(S),$g=n(S,"LI",{});var gAe=s($g);ite=n(gAe,"STRONG",{});var JXr=s(ite);Peo=r(JXr,"fsmt"),JXr.forEach(t),Beo=r(gAe," \u2014 "),TR=n(gAe,"A",{href:!0});var YXr=s(TR);Ieo=r(YXr,"FSMTTokenizer"),YXr.forEach(t),qeo=r(gAe," (FairSeq Machine-Translation model)"),gAe.forEach(t),Neo=i(S),Jn=n(S,"LI",{});var j9=s(Jn);dte=n(j9,"STRONG",{});var KXr=s(dte);jeo=r(KXr,"funnel"),KXr.forEach(t),Deo=r(j9," \u2014 "),MR=n(j9,"A",{href:!0});var ZXr=s(MR);Geo=r(ZXr,"FunnelTokenizer"),ZXr.forEach(t),Oeo=r(j9," or "),ER=n(j9,"A",{href:!0});var ezr=s(ER);Veo=r(ezr,"FunnelTokenizerFast"),ezr.forEach(t),Xeo=r(j9," (Funnel Transformer model)"),j9.forEach(t),zeo=i(S),Yn=n(S,"LI",{});var D9=s(Yn);cte=n(D9,"STRONG",{});var ozr=s(cte);Weo=r(ozr,"gpt2"),ozr.forEach(t),Qeo=r(D9," \u2014 "),CR=n(D9,"A",{href:!0});var rzr=s(CR);Heo=r(rzr,"GPT2Tokenizer"),rzr.forEach(t),Ueo=r(D9," or "),wR=n(D9,"A",{href:!0});var tzr=s(wR);Jeo=r(tzr,"GPT2TokenizerFast"),tzr.forEach(t),Yeo=r(D9," (OpenAI GPT-2 model)"),D9.forEach(t),Keo=i(S),Kn=n(S,"LI",{});var G9=s(Kn);mte=n(G9,"STRONG",{});var azr=s(mte);Zeo=r(azr,"gpt_neo"),azr.forEach(t),eoo=r(G9," \u2014 "),AR=n(G9,"A",{href:!0});var nzr=s(AR);ooo=r(nzr,"GPT2Tokenizer"),nzr.forEach(t),roo=r(G9," or "),yR=n(G9,"A",{href:!0});var szr=s(yR);too=r(szr,"GPT2TokenizerFast"),szr.forEach(t),aoo=r(G9," (GPT Neo model)"),G9.forEach(t),noo=i(S),Zn=n(S,"LI",{});var O9=s(Zn);fte=n(O9,"STRONG",{});var lzr=s(fte);soo=r(lzr,"gptj"),lzr.forEach(t),loo=r(O9," \u2014 "),LR=n(O9,"A",{href:!0});var izr=s(LR);ioo=r(izr,"GPT2Tokenizer"),izr.forEach(t),doo=r(O9," or "),xR=n(O9,"A",{href:!0});var dzr=s(xR);coo=r(dzr,"GPT2TokenizerFast"),dzr.forEach(t),moo=r(O9," (GPT-J model)"),O9.forEach(t),foo=i(S),es=n(S,"LI",{});var V9=s(es);gte=n(V9,"STRONG",{});var czr=s(gte);goo=r(czr,"herbert"),czr.forEach(t),hoo=r(V9," \u2014 "),$R=n(V9,"A",{href:!0});var mzr=s($R);uoo=r(mzr,"HerbertTokenizer"),mzr.forEach(t),poo=r(V9," or "),kR=n(V9,"A",{href:!0});var fzr=s(kR);_oo=r(fzr,"HerbertTokenizerFast"),fzr.forEach(t),boo=r(V9," (HerBERT model)"),V9.forEach(t),voo=i(S),kg=n(S,"LI",{});var hAe=s(kg);hte=n(hAe,"STRONG",{});var gzr=s(hte);Foo=r(gzr,"hubert"),gzr.forEach(t),Too=r(hAe," \u2014 "),SR=n(hAe,"A",{href:!0});var hzr=s(SR);Moo=r(hzr,"Wav2Vec2CTCTokenizer"),hzr.forEach(t),Eoo=r(hAe," (Hubert model)"),hAe.forEach(t),Coo=i(S),os=n(S,"LI",{});var X9=s(os);ute=n(X9,"STRONG",{});var uzr=s(ute);woo=r(uzr,"ibert"),uzr.forEach(t),Aoo=r(X9," \u2014 "),RR=n(X9,"A",{href:!0});var pzr=s(RR);yoo=r(pzr,"RobertaTokenizer"),pzr.forEach(t),Loo=r(X9," or "),PR=n(X9,"A",{href:!0});var _zr=s(PR);xoo=r(_zr,"RobertaTokenizerFast"),_zr.forEach(t),$oo=r(X9," (I-BERT model)"),X9.forEach(t),koo=i(S),rs=n(S,"LI",{});var z9=s(rs);pte=n(z9,"STRONG",{});var bzr=s(pte);Soo=r(bzr,"layoutlm"),bzr.forEach(t),Roo=r(z9," \u2014 "),BR=n(z9,"A",{href:!0});var vzr=s(BR);Poo=r(vzr,"LayoutLMTokenizer"),vzr.forEach(t),Boo=r(z9," or "),IR=n(z9,"A",{href:!0});var Fzr=s(IR);Ioo=r(Fzr,"LayoutLMTokenizerFast"),Fzr.forEach(t),qoo=r(z9," (LayoutLM model)"),z9.forEach(t),Noo=i(S),ts=n(S,"LI",{});var W9=s(ts);_te=n(W9,"STRONG",{});var Tzr=s(_te);joo=r(Tzr,"layoutlmv2"),Tzr.forEach(t),Doo=r(W9," \u2014 "),qR=n(W9,"A",{href:!0});var Mzr=s(qR);Goo=r(Mzr,"LayoutLMv2Tokenizer"),Mzr.forEach(t),Ooo=r(W9," or "),NR=n(W9,"A",{href:!0});var Ezr=s(NR);Voo=r(Ezr,"LayoutLMv2TokenizerFast"),Ezr.forEach(t),Xoo=r(W9," (LayoutLMv2 model)"),W9.forEach(t),zoo=i(S),as=n(S,"LI",{});var Q9=s(as);bte=n(Q9,"STRONG",{});var Czr=s(bte);Woo=r(Czr,"layoutxlm"),Czr.forEach(t),Qoo=r(Q9," \u2014 "),jR=n(Q9,"A",{href:!0});var wzr=s(jR);Hoo=r(wzr,"LayoutXLMTokenizer"),wzr.forEach(t),Uoo=r(Q9," or "),DR=n(Q9,"A",{href:!0});var Azr=s(DR);Joo=r(Azr,"LayoutXLMTokenizerFast"),Azr.forEach(t),Yoo=r(Q9," (LayoutXLM model)"),Q9.forEach(t),Koo=i(S),ns=n(S,"LI",{});var H9=s(ns);vte=n(H9,"STRONG",{});var yzr=s(vte);Zoo=r(yzr,"led"),yzr.forEach(t),ero=r(H9," \u2014 "),GR=n(H9,"A",{href:!0});var Lzr=s(GR);oro=r(Lzr,"LEDTokenizer"),Lzr.forEach(t),rro=r(H9," or "),OR=n(H9,"A",{href:!0});var xzr=s(OR);tro=r(xzr,"LEDTokenizerFast"),xzr.forEach(t),aro=r(H9," (LED model)"),H9.forEach(t),nro=i(S),ss=n(S,"LI",{});var U9=s(ss);Fte=n(U9,"STRONG",{});var $zr=s(Fte);sro=r($zr,"longformer"),$zr.forEach(t),lro=r(U9," \u2014 "),VR=n(U9,"A",{href:!0});var kzr=s(VR);iro=r(kzr,"LongformerTokenizer"),kzr.forEach(t),dro=r(U9," or "),XR=n(U9,"A",{href:!0});var Szr=s(XR);cro=r(Szr,"LongformerTokenizerFast"),Szr.forEach(t),mro=r(U9," (Longformer model)"),U9.forEach(t),fro=i(S),Sg=n(S,"LI",{});var uAe=s(Sg);Tte=n(uAe,"STRONG",{});var Rzr=s(Tte);gro=r(Rzr,"luke"),Rzr.forEach(t),hro=r(uAe," \u2014 "),zR=n(uAe,"A",{href:!0});var Pzr=s(zR);uro=r(Pzr,"LukeTokenizer"),Pzr.forEach(t),pro=r(uAe," (LUKE model)"),uAe.forEach(t),_ro=i(S),ls=n(S,"LI",{});var J9=s(ls);Mte=n(J9,"STRONG",{});var Bzr=s(Mte);bro=r(Bzr,"lxmert"),Bzr.forEach(t),vro=r(J9," \u2014 "),WR=n(J9,"A",{href:!0});var Izr=s(WR);Fro=r(Izr,"LxmertTokenizer"),Izr.forEach(t),Tro=r(J9," or "),QR=n(J9,"A",{href:!0});var qzr=s(QR);Mro=r(qzr,"LxmertTokenizerFast"),qzr.forEach(t),Ero=r(J9," (LXMERT model)"),J9.forEach(t),Cro=i(S),Rg=n(S,"LI",{});var pAe=s(Rg);Ete=n(pAe,"STRONG",{});var Nzr=s(Ete);wro=r(Nzr,"m2m_100"),Nzr.forEach(t),Aro=r(pAe," \u2014 "),HR=n(pAe,"A",{href:!0});var jzr=s(HR);yro=r(jzr,"M2M100Tokenizer"),jzr.forEach(t),Lro=r(pAe," (M2M100 model)"),pAe.forEach(t),xro=i(S),Pg=n(S,"LI",{});var _Ae=s(Pg);Cte=n(_Ae,"STRONG",{});var Dzr=s(Cte);$ro=r(Dzr,"marian"),Dzr.forEach(t),kro=r(_Ae," \u2014 "),UR=n(_Ae,"A",{href:!0});var Gzr=s(UR);Sro=r(Gzr,"MarianTokenizer"),Gzr.forEach(t),Rro=r(_Ae," (Marian model)"),_Ae.forEach(t),Pro=i(S),is=n(S,"LI",{});var Y9=s(is);wte=n(Y9,"STRONG",{});var Ozr=s(wte);Bro=r(Ozr,"mbart"),Ozr.forEach(t),Iro=r(Y9," \u2014 "),JR=n(Y9,"A",{href:!0});var Vzr=s(JR);qro=r(Vzr,"MBartTokenizer"),Vzr.forEach(t),Nro=r(Y9," or "),YR=n(Y9,"A",{href:!0});var Xzr=s(YR);jro=r(Xzr,"MBartTokenizerFast"),Xzr.forEach(t),Dro=r(Y9," (mBART model)"),Y9.forEach(t),Gro=i(S),ds=n(S,"LI",{});var K9=s(ds);Ate=n(K9,"STRONG",{});var zzr=s(Ate);Oro=r(zzr,"mbart50"),zzr.forEach(t),Vro=r(K9," \u2014 "),KR=n(K9,"A",{href:!0});var Wzr=s(KR);Xro=r(Wzr,"MBart50Tokenizer"),Wzr.forEach(t),zro=r(K9," or "),ZR=n(K9,"A",{href:!0});var Qzr=s(ZR);Wro=r(Qzr,"MBart50TokenizerFast"),Qzr.forEach(t),Qro=r(K9," (mBART-50 model)"),K9.forEach(t),Hro=i(S),cs=n(S,"LI",{});var Z9=s(cs);yte=n(Z9,"STRONG",{});var Hzr=s(yte);Uro=r(Hzr,"megatron-bert"),Hzr.forEach(t),Jro=r(Z9," \u2014 "),eP=n(Z9,"A",{href:!0});var Uzr=s(eP);Yro=r(Uzr,"BertTokenizer"),Uzr.forEach(t),Kro=r(Z9," or "),oP=n(Z9,"A",{href:!0});var Jzr=s(oP);Zro=r(Jzr,"BertTokenizerFast"),Jzr.forEach(t),eto=r(Z9," (MegatronBert model)"),Z9.forEach(t),oto=i(S),Bg=n(S,"LI",{});var bAe=s(Bg);Lte=n(bAe,"STRONG",{});var Yzr=s(Lte);rto=r(Yzr,"mluke"),Yzr.forEach(t),tto=r(bAe," \u2014 "),rP=n(bAe,"A",{href:!0});var Kzr=s(rP);ato=r(Kzr,"MLukeTokenizer"),Kzr.forEach(t),nto=r(bAe," (mLUKE model)"),bAe.forEach(t),sto=i(S),ms=n(S,"LI",{});var e$=s(ms);xte=n(e$,"STRONG",{});var Zzr=s(xte);lto=r(Zzr,"mobilebert"),Zzr.forEach(t),ito=r(e$," \u2014 "),tP=n(e$,"A",{href:!0});var eWr=s(tP);dto=r(eWr,"MobileBertTokenizer"),eWr.forEach(t),cto=r(e$," or "),aP=n(e$,"A",{href:!0});var oWr=s(aP);mto=r(oWr,"MobileBertTokenizerFast"),oWr.forEach(t),fto=r(e$," (MobileBERT model)"),e$.forEach(t),gto=i(S),fs=n(S,"LI",{});var o$=s(fs);$te=n(o$,"STRONG",{});var rWr=s($te);hto=r(rWr,"mpnet"),rWr.forEach(t),uto=r(o$," \u2014 "),nP=n(o$,"A",{href:!0});var tWr=s(nP);pto=r(tWr,"MPNetTokenizer"),tWr.forEach(t),_to=r(o$," or "),sP=n(o$,"A",{href:!0});var aWr=s(sP);bto=r(aWr,"MPNetTokenizerFast"),aWr.forEach(t),vto=r(o$," (MPNet model)"),o$.forEach(t),Fto=i(S),gs=n(S,"LI",{});var r$=s(gs);kte=n(r$,"STRONG",{});var nWr=s(kte);Tto=r(nWr,"mt5"),nWr.forEach(t),Mto=r(r$," \u2014 "),lP=n(r$,"A",{href:!0});var sWr=s(lP);Eto=r(sWr,"MT5Tokenizer"),sWr.forEach(t),Cto=r(r$," or "),iP=n(r$,"A",{href:!0});var lWr=s(iP);wto=r(lWr,"MT5TokenizerFast"),lWr.forEach(t),Ato=r(r$," (mT5 model)"),r$.forEach(t),yto=i(S),hs=n(S,"LI",{});var t$=s(hs);Ste=n(t$,"STRONG",{});var iWr=s(Ste);Lto=r(iWr,"nystromformer"),iWr.forEach(t),xto=r(t$," \u2014 "),dP=n(t$,"A",{href:!0});var dWr=s(dP);$to=r(dWr,"AlbertTokenizer"),dWr.forEach(t),kto=r(t$," or "),cP=n(t$,"A",{href:!0});var cWr=s(cP);Sto=r(cWr,"AlbertTokenizerFast"),cWr.forEach(t),Rto=r(t$," (Nystromformer model)"),t$.forEach(t),Pto=i(S),us=n(S,"LI",{});var a$=s(us);Rte=n(a$,"STRONG",{});var mWr=s(Rte);Bto=r(mWr,"openai-gpt"),mWr.forEach(t),Ito=r(a$," \u2014 "),mP=n(a$,"A",{href:!0});var fWr=s(mP);qto=r(fWr,"OpenAIGPTTokenizer"),fWr.forEach(t),Nto=r(a$," or "),fP=n(a$,"A",{href:!0});var gWr=s(fP);jto=r(gWr,"OpenAIGPTTokenizerFast"),gWr.forEach(t),Dto=r(a$," (OpenAI GPT model)"),a$.forEach(t),Gto=i(S),Ig=n(S,"LI",{});var vAe=s(Ig);Pte=n(vAe,"STRONG",{});var hWr=s(Pte);Oto=r(hWr,"opt"),hWr.forEach(t),Vto=r(vAe," \u2014 "),gP=n(vAe,"A",{href:!0});var uWr=s(gP);Xto=r(uWr,"GPT2Tokenizer"),uWr.forEach(t),zto=r(vAe," (OPT model)"),vAe.forEach(t),Wto=i(S),ps=n(S,"LI",{});var n$=s(ps);Bte=n(n$,"STRONG",{});var pWr=s(Bte);Qto=r(pWr,"pegasus"),pWr.forEach(t),Hto=r(n$," \u2014 "),hP=n(n$,"A",{href:!0});var _Wr=s(hP);Uto=r(_Wr,"PegasusTokenizer"),_Wr.forEach(t),Jto=r(n$," or "),uP=n(n$,"A",{href:!0});var bWr=s(uP);Yto=r(bWr,"PegasusTokenizerFast"),bWr.forEach(t),Kto=r(n$," (Pegasus model)"),n$.forEach(t),Zto=i(S),qg=n(S,"LI",{});var FAe=s(qg);Ite=n(FAe,"STRONG",{});var vWr=s(Ite);eao=r(vWr,"perceiver"),vWr.forEach(t),oao=r(FAe," \u2014 "),pP=n(FAe,"A",{href:!0});var FWr=s(pP);rao=r(FWr,"PerceiverTokenizer"),FWr.forEach(t),tao=r(FAe," (Perceiver model)"),FAe.forEach(t),aao=i(S),Ng=n(S,"LI",{});var TAe=s(Ng);qte=n(TAe,"STRONG",{});var TWr=s(qte);nao=r(TWr,"phobert"),TWr.forEach(t),sao=r(TAe," \u2014 "),_P=n(TAe,"A",{href:!0});var MWr=s(_P);lao=r(MWr,"PhobertTokenizer"),MWr.forEach(t),iao=r(TAe," (PhoBERT model)"),TAe.forEach(t),dao=i(S),jg=n(S,"LI",{});var MAe=s(jg);Nte=n(MAe,"STRONG",{});var EWr=s(Nte);cao=r(EWr,"plbart"),EWr.forEach(t),mao=r(MAe," \u2014 "),bP=n(MAe,"A",{href:!0});var CWr=s(bP);fao=r(CWr,"PLBartTokenizer"),CWr.forEach(t),gao=r(MAe," (PLBart model)"),MAe.forEach(t),hao=i(S),Dg=n(S,"LI",{});var EAe=s(Dg);jte=n(EAe,"STRONG",{});var wWr=s(jte);uao=r(wWr,"prophetnet"),wWr.forEach(t),pao=r(EAe," \u2014 "),vP=n(EAe,"A",{href:!0});var AWr=s(vP);_ao=r(AWr,"ProphetNetTokenizer"),AWr.forEach(t),bao=r(EAe," (ProphetNet model)"),EAe.forEach(t),vao=i(S),_s=n(S,"LI",{});var s$=s(_s);Dte=n(s$,"STRONG",{});var yWr=s(Dte);Fao=r(yWr,"qdqbert"),yWr.forEach(t),Tao=r(s$," \u2014 "),FP=n(s$,"A",{href:!0});var LWr=s(FP);Mao=r(LWr,"BertTokenizer"),LWr.forEach(t),Eao=r(s$," or "),TP=n(s$,"A",{href:!0});var xWr=s(TP);Cao=r(xWr,"BertTokenizerFast"),xWr.forEach(t),wao=r(s$," (QDQBert model)"),s$.forEach(t),Aao=i(S),Gg=n(S,"LI",{});var CAe=s(Gg);Gte=n(CAe,"STRONG",{});var $Wr=s(Gte);yao=r($Wr,"rag"),$Wr.forEach(t),Lao=r(CAe," \u2014 "),MP=n(CAe,"A",{href:!0});var kWr=s(MP);xao=r(kWr,"RagTokenizer"),kWr.forEach(t),$ao=r(CAe," (RAG model)"),CAe.forEach(t),kao=i(S),bs=n(S,"LI",{});var l$=s(bs);Ote=n(l$,"STRONG",{});var SWr=s(Ote);Sao=r(SWr,"realm"),SWr.forEach(t),Rao=r(l$," \u2014 "),EP=n(l$,"A",{href:!0});var RWr=s(EP);Pao=r(RWr,"RealmTokenizer"),RWr.forEach(t),Bao=r(l$," or "),CP=n(l$,"A",{href:!0});var PWr=s(CP);Iao=r(PWr,"RealmTokenizerFast"),PWr.forEach(t),qao=r(l$," (Realm model)"),l$.forEach(t),Nao=i(S),vs=n(S,"LI",{});var i$=s(vs);Vte=n(i$,"STRONG",{});var BWr=s(Vte);jao=r(BWr,"reformer"),BWr.forEach(t),Dao=r(i$," \u2014 "),wP=n(i$,"A",{href:!0});var IWr=s(wP);Gao=r(IWr,"ReformerTokenizer"),IWr.forEach(t),Oao=r(i$," or "),AP=n(i$,"A",{href:!0});var qWr=s(AP);Vao=r(qWr,"ReformerTokenizerFast"),qWr.forEach(t),Xao=r(i$," (Reformer model)"),i$.forEach(t),zao=i(S),Fs=n(S,"LI",{});var d$=s(Fs);Xte=n(d$,"STRONG",{});var NWr=s(Xte);Wao=r(NWr,"rembert"),NWr.forEach(t),Qao=r(d$," \u2014 "),yP=n(d$,"A",{href:!0});var jWr=s(yP);Hao=r(jWr,"RemBertTokenizer"),jWr.forEach(t),Uao=r(d$," or "),LP=n(d$,"A",{href:!0});var DWr=s(LP);Jao=r(DWr,"RemBertTokenizerFast"),DWr.forEach(t),Yao=r(d$," (RemBERT model)"),d$.forEach(t),Kao=i(S),Ts=n(S,"LI",{});var c$=s(Ts);zte=n(c$,"STRONG",{});var GWr=s(zte);Zao=r(GWr,"retribert"),GWr.forEach(t),eno=r(c$," \u2014 "),xP=n(c$,"A",{href:!0});var OWr=s(xP);ono=r(OWr,"RetriBertTokenizer"),OWr.forEach(t),rno=r(c$," or "),$P=n(c$,"A",{href:!0});var VWr=s($P);tno=r(VWr,"RetriBertTokenizerFast"),VWr.forEach(t),ano=r(c$," (RetriBERT model)"),c$.forEach(t),nno=i(S),Ms=n(S,"LI",{});var m$=s(Ms);Wte=n(m$,"STRONG",{});var XWr=s(Wte);sno=r(XWr,"roberta"),XWr.forEach(t),lno=r(m$," \u2014 "),kP=n(m$,"A",{href:!0});var zWr=s(kP);ino=r(zWr,"RobertaTokenizer"),zWr.forEach(t),dno=r(m$," or "),SP=n(m$,"A",{href:!0});var WWr=s(SP);cno=r(WWr,"RobertaTokenizerFast"),WWr.forEach(t),mno=r(m$," (RoBERTa model)"),m$.forEach(t),fno=i(S),Es=n(S,"LI",{});var f$=s(Es);Qte=n(f$,"STRONG",{});var QWr=s(Qte);gno=r(QWr,"roformer"),QWr.forEach(t),hno=r(f$," \u2014 "),RP=n(f$,"A",{href:!0});var HWr=s(RP);uno=r(HWr,"RoFormerTokenizer"),HWr.forEach(t),pno=r(f$," or "),PP=n(f$,"A",{href:!0});var UWr=s(PP);_no=r(UWr,"RoFormerTokenizerFast"),UWr.forEach(t),bno=r(f$," (RoFormer model)"),f$.forEach(t),vno=i(S),Og=n(S,"LI",{});var wAe=s(Og);Hte=n(wAe,"STRONG",{});var JWr=s(Hte);Fno=r(JWr,"speech_to_text"),JWr.forEach(t),Tno=r(wAe," \u2014 "),BP=n(wAe,"A",{href:!0});var YWr=s(BP);Mno=r(YWr,"Speech2TextTokenizer"),YWr.forEach(t),Eno=r(wAe," (Speech2Text model)"),wAe.forEach(t),Cno=i(S),Vg=n(S,"LI",{});var AAe=s(Vg);Ute=n(AAe,"STRONG",{});var KWr=s(Ute);wno=r(KWr,"speech_to_text_2"),KWr.forEach(t),Ano=r(AAe," \u2014 "),IP=n(AAe,"A",{href:!0});var ZWr=s(IP);yno=r(ZWr,"Speech2Text2Tokenizer"),ZWr.forEach(t),Lno=r(AAe," (Speech2Text2 model)"),AAe.forEach(t),xno=i(S),Cs=n(S,"LI",{});var g$=s(Cs);Jte=n(g$,"STRONG",{});var eQr=s(Jte);$no=r(eQr,"splinter"),eQr.forEach(t),kno=r(g$," \u2014 "),qP=n(g$,"A",{href:!0});var oQr=s(qP);Sno=r(oQr,"SplinterTokenizer"),oQr.forEach(t),Rno=r(g$," or "),NP=n(g$,"A",{href:!0});var rQr=s(NP);Pno=r(rQr,"SplinterTokenizerFast"),rQr.forEach(t),Bno=r(g$," (Splinter model)"),g$.forEach(t),Ino=i(S),ws=n(S,"LI",{});var h$=s(ws);Yte=n(h$,"STRONG",{});var tQr=s(Yte);qno=r(tQr,"squeezebert"),tQr.forEach(t),Nno=r(h$," \u2014 "),jP=n(h$,"A",{href:!0});var aQr=s(jP);jno=r(aQr,"SqueezeBertTokenizer"),aQr.forEach(t),Dno=r(h$," or "),DP=n(h$,"A",{href:!0});var nQr=s(DP);Gno=r(nQr,"SqueezeBertTokenizerFast"),nQr.forEach(t),Ono=r(h$," (SqueezeBERT model)"),h$.forEach(t),Vno=i(S),As=n(S,"LI",{});var u$=s(As);Kte=n(u$,"STRONG",{});var sQr=s(Kte);Xno=r(sQr,"t5"),sQr.forEach(t),zno=r(u$," \u2014 "),GP=n(u$,"A",{href:!0});var lQr=s(GP);Wno=r(lQr,"T5Tokenizer"),lQr.forEach(t),Qno=r(u$," or "),OP=n(u$,"A",{href:!0});var iQr=s(OP);Hno=r(iQr,"T5TokenizerFast"),iQr.forEach(t),Uno=r(u$," (T5 model)"),u$.forEach(t),Jno=i(S),Xg=n(S,"LI",{});var yAe=s(Xg);Zte=n(yAe,"STRONG",{});var dQr=s(Zte);Yno=r(dQr,"tapas"),dQr.forEach(t),Kno=r(yAe," \u2014 "),VP=n(yAe,"A",{href:!0});var cQr=s(VP);Zno=r(cQr,"TapasTokenizer"),cQr.forEach(t),eso=r(yAe," (TAPAS model)"),yAe.forEach(t),oso=i(S),zg=n(S,"LI",{});var LAe=s(zg);eae=n(LAe,"STRONG",{});var mQr=s(eae);rso=r(mQr,"tapex"),mQr.forEach(t),tso=r(LAe," \u2014 "),XP=n(LAe,"A",{href:!0});var fQr=s(XP);aso=r(fQr,"TapexTokenizer"),fQr.forEach(t),nso=r(LAe," (TAPEX model)"),LAe.forEach(t),sso=i(S),Wg=n(S,"LI",{});var xAe=s(Wg);oae=n(xAe,"STRONG",{});var gQr=s(oae);lso=r(gQr,"transfo-xl"),gQr.forEach(t),iso=r(xAe," \u2014 "),zP=n(xAe,"A",{href:!0});var hQr=s(zP);dso=r(hQr,"TransfoXLTokenizer"),hQr.forEach(t),cso=r(xAe," (Transformer-XL model)"),xAe.forEach(t),mso=i(S),ys=n(S,"LI",{});var p$=s(ys);rae=n(p$,"STRONG",{});var uQr=s(rae);fso=r(uQr,"visual_bert"),uQr.forEach(t),gso=r(p$," \u2014 "),WP=n(p$,"A",{href:!0});var pQr=s(WP);hso=r(pQr,"BertTokenizer"),pQr.forEach(t),uso=r(p$," or "),QP=n(p$,"A",{href:!0});var _Qr=s(QP);pso=r(_Qr,"BertTokenizerFast"),_Qr.forEach(t),_so=r(p$," (VisualBert model)"),p$.forEach(t),bso=i(S),Qg=n(S,"LI",{});var $Ae=s(Qg);tae=n($Ae,"STRONG",{});var bQr=s(tae);vso=r(bQr,"wav2vec2"),bQr.forEach(t),Fso=r($Ae," \u2014 "),HP=n($Ae,"A",{href:!0});var vQr=s(HP);Tso=r(vQr,"Wav2Vec2CTCTokenizer"),vQr.forEach(t),Mso=r($Ae," (Wav2Vec2 model)"),$Ae.forEach(t),Eso=i(S),Hg=n(S,"LI",{});var kAe=s(Hg);aae=n(kAe,"STRONG",{});var FQr=s(aae);Cso=r(FQr,"wav2vec2-conformer"),FQr.forEach(t),wso=r(kAe," \u2014 "),UP=n(kAe,"A",{href:!0});var TQr=s(UP);Aso=r(TQr,"Wav2Vec2CTCTokenizer"),TQr.forEach(t),yso=r(kAe," (Wav2Vec2-Conformer model)"),kAe.forEach(t),Lso=i(S),Ug=n(S,"LI",{});var SAe=s(Ug);nae=n(SAe,"STRONG",{});var MQr=s(nae);xso=r(MQr,"wav2vec2_phoneme"),MQr.forEach(t),$so=r(SAe," \u2014 "),JP=n(SAe,"A",{href:!0});var EQr=s(JP);kso=r(EQr,"Wav2Vec2PhonemeCTCTokenizer"),EQr.forEach(t),Sso=r(SAe," (Wav2Vec2Phoneme model)"),SAe.forEach(t),Rso=i(S),Ls=n(S,"LI",{});var _$=s(Ls);sae=n(_$,"STRONG",{});var CQr=s(sae);Pso=r(CQr,"xglm"),CQr.forEach(t),Bso=r(_$," \u2014 "),YP=n(_$,"A",{href:!0});var wQr=s(YP);Iso=r(wQr,"XGLMTokenizer"),wQr.forEach(t),qso=r(_$," or "),KP=n(_$,"A",{href:!0});var AQr=s(KP);Nso=r(AQr,"XGLMTokenizerFast"),AQr.forEach(t),jso=r(_$," (XGLM model)"),_$.forEach(t),Dso=i(S),Jg=n(S,"LI",{});var RAe=s(Jg);lae=n(RAe,"STRONG",{});var yQr=s(lae);Gso=r(yQr,"xlm"),yQr.forEach(t),Oso=r(RAe," \u2014 "),ZP=n(RAe,"A",{href:!0});var LQr=s(ZP);Vso=r(LQr,"XLMTokenizer"),LQr.forEach(t),Xso=r(RAe," (XLM model)"),RAe.forEach(t),zso=i(S),Yg=n(S,"LI",{});var PAe=s(Yg);iae=n(PAe,"STRONG",{});var xQr=s(iae);Wso=r(xQr,"xlm-prophetnet"),xQr.forEach(t),Qso=r(PAe," \u2014 "),eB=n(PAe,"A",{href:!0});var $Qr=s(eB);Hso=r($Qr,"XLMProphetNetTokenizer"),$Qr.forEach(t),Uso=r(PAe," (XLMProphetNet model)"),PAe.forEach(t),Jso=i(S),xs=n(S,"LI",{});var b$=s(xs);dae=n(b$,"STRONG",{});var kQr=s(dae);Yso=r(kQr,"xlm-roberta"),kQr.forEach(t),Kso=r(b$," \u2014 "),oB=n(b$,"A",{href:!0});var SQr=s(oB);Zso=r(SQr,"XLMRobertaTokenizer"),SQr.forEach(t),elo=r(b$," or "),rB=n(b$,"A",{href:!0});var RQr=s(rB);olo=r(RQr,"XLMRobertaTokenizerFast"),RQr.forEach(t),rlo=r(b$," (XLM-RoBERTa model)"),b$.forEach(t),tlo=i(S),$s=n(S,"LI",{});var v$=s($s);cae=n(v$,"STRONG",{});var PQr=s(cae);alo=r(PQr,"xlm-roberta-xl"),PQr.forEach(t),nlo=r(v$," \u2014 "),tB=n(v$,"A",{href:!0});var BQr=s(tB);slo=r(BQr,"RobertaTokenizer"),BQr.forEach(t),llo=r(v$," or "),aB=n(v$,"A",{href:!0});var IQr=s(aB);ilo=r(IQr,"RobertaTokenizerFast"),IQr.forEach(t),dlo=r(v$," (XLM-RoBERTa-XL model)"),v$.forEach(t),clo=i(S),ks=n(S,"LI",{});var F$=s(ks);mae=n(F$,"STRONG",{});var qQr=s(mae);mlo=r(qQr,"xlnet"),qQr.forEach(t),flo=r(F$," \u2014 "),nB=n(F$,"A",{href:!0});var NQr=s(nB);glo=r(NQr,"XLNetTokenizer"),NQr.forEach(t),hlo=r(F$," or "),sB=n(F$,"A",{href:!0});var jQr=s(sB);ulo=r(jQr,"XLNetTokenizerFast"),jQr.forEach(t),plo=r(F$," (XLNet model)"),F$.forEach(t),_lo=i(S),Ss=n(S,"LI",{});var T$=s(Ss);fae=n(T$,"STRONG",{});var DQr=s(fae);blo=r(DQr,"yoso"),DQr.forEach(t),vlo=r(T$," \u2014 "),lB=n(T$,"A",{href:!0});var GQr=s(lB);Flo=r(GQr,"AlbertTokenizer"),GQr.forEach(t),Tlo=r(T$," or "),iB=n(T$,"A",{href:!0});var OQr=s(iB);Mlo=r(OQr,"AlbertTokenizerFast"),OQr.forEach(t),Elo=r(T$," (YOSO model)"),T$.forEach(t),S.forEach(t),Clo=i(qs),T(Kg.$$.fragment,qs),qs.forEach(t),wlo=i(Is),Zg=n(Is,"DIV",{class:!0});var qNe=s(Zg);T(Ty.$$.fragment,qNe),Alo=i(qNe),gae=n(qNe,"P",{});var VQr=s(gae);ylo=r(VQr,"Register a new tokenizer in this mapping."),VQr.forEach(t),qNe.forEach(t),Is.forEach(t),NIe=i(m),Ti=n(m,"H2",{class:!0});var NNe=s(Ti);eh=n(NNe,"A",{id:!0,class:!0,href:!0});var XQr=s(eh);hae=n(XQr,"SPAN",{});var zQr=s(hae);T(My.$$.fragment,zQr),zQr.forEach(t),XQr.forEach(t),Llo=i(NNe),uae=n(NNe,"SPAN",{});var WQr=s(uae);xlo=r(WQr,"AutoFeatureExtractor"),WQr.forEach(t),NNe.forEach(t),jIe=i(m),Ao=n(m,"DIV",{class:!0});var Ns=s(Ao);T(Ey.$$.fragment,Ns),$lo=i(Ns),Cy=n(Ns,"P",{});var jNe=s(Cy);klo=r(jNe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),dB=n(jNe,"A",{href:!0});var QQr=s(dB);Slo=r(QQr,"AutoFeatureExtractor.from_pretrained()"),QQr.forEach(t),Rlo=r(jNe," class method."),jNe.forEach(t),Plo=i(Ns),wy=n(Ns,"P",{});var DNe=s(wy);Blo=r(DNe,"This class cannot be instantiated directly using "),pae=n(DNe,"CODE",{});var HQr=s(pae);Ilo=r(HQr,"__init__()"),HQr.forEach(t),qlo=r(DNe," (throws an error)."),DNe.forEach(t),Nlo=i(Ns),He=n(Ns,"DIV",{class:!0});var Zt=s(He);T(Ay.$$.fragment,Zt),jlo=i(Zt),_ae=n(Zt,"P",{});var UQr=s(_ae);Dlo=r(UQr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),UQr.forEach(t),Glo=i(Zt),ya=n(Zt,"P",{});var m6=s(ya);Olo=r(m6,"The feature extractor class to instantiate is selected based on the "),bae=n(m6,"CODE",{});var JQr=s(bae);Vlo=r(JQr,"model_type"),JQr.forEach(t),Xlo=r(m6,` property of the config object
(either passed as an argument or loaded from `),vae=n(m6,"CODE",{});var YQr=s(vae);zlo=r(YQr,"pretrained_model_name_or_path"),YQr.forEach(t),Wlo=r(m6,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Fae=n(m6,"CODE",{});var KQr=s(Fae);Qlo=r(KQr,"pretrained_model_name_or_path"),KQr.forEach(t),Hlo=r(m6,":"),m6.forEach(t),Ulo=i(Zt),Z=n(Zt,"UL",{});var te=s(Z);oh=n(te,"LI",{});var BAe=s(oh);Tae=n(BAe,"STRONG",{});var ZQr=s(Tae);Jlo=r(ZQr,"beit"),ZQr.forEach(t),Ylo=r(BAe," \u2014 "),cB=n(BAe,"A",{href:!0});var eHr=s(cB);Klo=r(eHr,"BeitFeatureExtractor"),eHr.forEach(t),Zlo=r(BAe," (BEiT model)"),BAe.forEach(t),eio=i(te),rh=n(te,"LI",{});var IAe=s(rh);Mae=n(IAe,"STRONG",{});var oHr=s(Mae);oio=r(oHr,"clip"),oHr.forEach(t),rio=r(IAe," \u2014 "),mB=n(IAe,"A",{href:!0});var rHr=s(mB);tio=r(rHr,"CLIPFeatureExtractor"),rHr.forEach(t),aio=r(IAe," (CLIP model)"),IAe.forEach(t),nio=i(te),th=n(te,"LI",{});var qAe=s(th);Eae=n(qAe,"STRONG",{});var tHr=s(Eae);sio=r(tHr,"convnext"),tHr.forEach(t),lio=r(qAe," \u2014 "),fB=n(qAe,"A",{href:!0});var aHr=s(fB);iio=r(aHr,"ConvNextFeatureExtractor"),aHr.forEach(t),dio=r(qAe," (ConvNext model)"),qAe.forEach(t),cio=i(te),ah=n(te,"LI",{});var NAe=s(ah);Cae=n(NAe,"STRONG",{});var nHr=s(Cae);mio=r(nHr,"data2vec-audio"),nHr.forEach(t),fio=r(NAe," \u2014 "),gB=n(NAe,"A",{href:!0});var sHr=s(gB);gio=r(sHr,"Wav2Vec2FeatureExtractor"),sHr.forEach(t),hio=r(NAe," (Data2VecAudio model)"),NAe.forEach(t),uio=i(te),nh=n(te,"LI",{});var jAe=s(nh);wae=n(jAe,"STRONG",{});var lHr=s(wae);pio=r(lHr,"data2vec-vision"),lHr.forEach(t),_io=r(jAe," \u2014 "),hB=n(jAe,"A",{href:!0});var iHr=s(hB);bio=r(iHr,"BeitFeatureExtractor"),iHr.forEach(t),vio=r(jAe," (Data2VecVision model)"),jAe.forEach(t),Fio=i(te),sh=n(te,"LI",{});var DAe=s(sh);Aae=n(DAe,"STRONG",{});var dHr=s(Aae);Tio=r(dHr,"deit"),dHr.forEach(t),Mio=r(DAe," \u2014 "),uB=n(DAe,"A",{href:!0});var cHr=s(uB);Eio=r(cHr,"DeiTFeatureExtractor"),cHr.forEach(t),Cio=r(DAe," (DeiT model)"),DAe.forEach(t),wio=i(te),lh=n(te,"LI",{});var GAe=s(lh);yae=n(GAe,"STRONG",{});var mHr=s(yae);Aio=r(mHr,"detr"),mHr.forEach(t),yio=r(GAe," \u2014 "),pB=n(GAe,"A",{href:!0});var fHr=s(pB);Lio=r(fHr,"DetrFeatureExtractor"),fHr.forEach(t),xio=r(GAe," (DETR model)"),GAe.forEach(t),$io=i(te),ih=n(te,"LI",{});var OAe=s(ih);Lae=n(OAe,"STRONG",{});var gHr=s(Lae);kio=r(gHr,"dpt"),gHr.forEach(t),Sio=r(OAe," \u2014 "),_B=n(OAe,"A",{href:!0});var hHr=s(_B);Rio=r(hHr,"DPTFeatureExtractor"),hHr.forEach(t),Pio=r(OAe," (DPT model)"),OAe.forEach(t),Bio=i(te),dh=n(te,"LI",{});var VAe=s(dh);xae=n(VAe,"STRONG",{});var uHr=s(xae);Iio=r(uHr,"flava"),uHr.forEach(t),qio=r(VAe," \u2014 "),bB=n(VAe,"A",{href:!0});var pHr=s(bB);Nio=r(pHr,"FlavaFeatureExtractor"),pHr.forEach(t),jio=r(VAe," (Flava model)"),VAe.forEach(t),Dio=i(te),ch=n(te,"LI",{});var XAe=s(ch);$ae=n(XAe,"STRONG",{});var _Hr=s($ae);Gio=r(_Hr,"glpn"),_Hr.forEach(t),Oio=r(XAe," \u2014 "),vB=n(XAe,"A",{href:!0});var bHr=s(vB);Vio=r(bHr,"GLPNFeatureExtractor"),bHr.forEach(t),Xio=r(XAe," (GLPN model)"),XAe.forEach(t),zio=i(te),mh=n(te,"LI",{});var zAe=s(mh);kae=n(zAe,"STRONG",{});var vHr=s(kae);Wio=r(vHr,"hubert"),vHr.forEach(t),Qio=r(zAe," \u2014 "),FB=n(zAe,"A",{href:!0});var FHr=s(FB);Hio=r(FHr,"Wav2Vec2FeatureExtractor"),FHr.forEach(t),Uio=r(zAe," (Hubert model)"),zAe.forEach(t),Jio=i(te),fh=n(te,"LI",{});var WAe=s(fh);Sae=n(WAe,"STRONG",{});var THr=s(Sae);Yio=r(THr,"layoutlmv2"),THr.forEach(t),Kio=r(WAe," \u2014 "),TB=n(WAe,"A",{href:!0});var MHr=s(TB);Zio=r(MHr,"LayoutLMv2FeatureExtractor"),MHr.forEach(t),edo=r(WAe," (LayoutLMv2 model)"),WAe.forEach(t),odo=i(te),gh=n(te,"LI",{});var QAe=s(gh);Rae=n(QAe,"STRONG",{});var EHr=s(Rae);rdo=r(EHr,"maskformer"),EHr.forEach(t),tdo=r(QAe," \u2014 "),MB=n(QAe,"A",{href:!0});var CHr=s(MB);ado=r(CHr,"MaskFormerFeatureExtractor"),CHr.forEach(t),ndo=r(QAe," (MaskFormer model)"),QAe.forEach(t),sdo=i(te),hh=n(te,"LI",{});var HAe=s(hh);Pae=n(HAe,"STRONG",{});var wHr=s(Pae);ldo=r(wHr,"perceiver"),wHr.forEach(t),ido=r(HAe," \u2014 "),EB=n(HAe,"A",{href:!0});var AHr=s(EB);ddo=r(AHr,"PerceiverFeatureExtractor"),AHr.forEach(t),cdo=r(HAe," (Perceiver model)"),HAe.forEach(t),mdo=i(te),uh=n(te,"LI",{});var UAe=s(uh);Bae=n(UAe,"STRONG",{});var yHr=s(Bae);fdo=r(yHr,"poolformer"),yHr.forEach(t),gdo=r(UAe," \u2014 "),CB=n(UAe,"A",{href:!0});var LHr=s(CB);hdo=r(LHr,"PoolFormerFeatureExtractor"),LHr.forEach(t),udo=r(UAe," (PoolFormer model)"),UAe.forEach(t),pdo=i(te),ph=n(te,"LI",{});var JAe=s(ph);Iae=n(JAe,"STRONG",{});var xHr=s(Iae);_do=r(xHr,"regnet"),xHr.forEach(t),bdo=r(JAe," \u2014 "),wB=n(JAe,"A",{href:!0});var $Hr=s(wB);vdo=r($Hr,"ConvNextFeatureExtractor"),$Hr.forEach(t),Fdo=r(JAe," (RegNet model)"),JAe.forEach(t),Tdo=i(te),_h=n(te,"LI",{});var YAe=s(_h);qae=n(YAe,"STRONG",{});var kHr=s(qae);Mdo=r(kHr,"resnet"),kHr.forEach(t),Edo=r(YAe," \u2014 "),AB=n(YAe,"A",{href:!0});var SHr=s(AB);Cdo=r(SHr,"ConvNextFeatureExtractor"),SHr.forEach(t),wdo=r(YAe," (ResNet model)"),YAe.forEach(t),Ado=i(te),bh=n(te,"LI",{});var KAe=s(bh);Nae=n(KAe,"STRONG",{});var RHr=s(Nae);ydo=r(RHr,"segformer"),RHr.forEach(t),Ldo=r(KAe," \u2014 "),yB=n(KAe,"A",{href:!0});var PHr=s(yB);xdo=r(PHr,"SegformerFeatureExtractor"),PHr.forEach(t),$do=r(KAe," (SegFormer model)"),KAe.forEach(t),kdo=i(te),vh=n(te,"LI",{});var ZAe=s(vh);jae=n(ZAe,"STRONG",{});var BHr=s(jae);Sdo=r(BHr,"speech_to_text"),BHr.forEach(t),Rdo=r(ZAe," \u2014 "),LB=n(ZAe,"A",{href:!0});var IHr=s(LB);Pdo=r(IHr,"Speech2TextFeatureExtractor"),IHr.forEach(t),Bdo=r(ZAe," (Speech2Text model)"),ZAe.forEach(t),Ido=i(te),Fh=n(te,"LI",{});var e6e=s(Fh);Dae=n(e6e,"STRONG",{});var qHr=s(Dae);qdo=r(qHr,"swin"),qHr.forEach(t),Ndo=r(e6e," \u2014 "),xB=n(e6e,"A",{href:!0});var NHr=s(xB);jdo=r(NHr,"ViTFeatureExtractor"),NHr.forEach(t),Ddo=r(e6e," (Swin model)"),e6e.forEach(t),Gdo=i(te),Th=n(te,"LI",{});var o6e=s(Th);Gae=n(o6e,"STRONG",{});var jHr=s(Gae);Odo=r(jHr,"van"),jHr.forEach(t),Vdo=r(o6e," \u2014 "),$B=n(o6e,"A",{href:!0});var DHr=s($B);Xdo=r(DHr,"ConvNextFeatureExtractor"),DHr.forEach(t),zdo=r(o6e," (VAN model)"),o6e.forEach(t),Wdo=i(te),Mh=n(te,"LI",{});var r6e=s(Mh);Oae=n(r6e,"STRONG",{});var GHr=s(Oae);Qdo=r(GHr,"vit"),GHr.forEach(t),Hdo=r(r6e," \u2014 "),kB=n(r6e,"A",{href:!0});var OHr=s(kB);Udo=r(OHr,"ViTFeatureExtractor"),OHr.forEach(t),Jdo=r(r6e," (ViT model)"),r6e.forEach(t),Ydo=i(te),Eh=n(te,"LI",{});var t6e=s(Eh);Vae=n(t6e,"STRONG",{});var VHr=s(Vae);Kdo=r(VHr,"vit_mae"),VHr.forEach(t),Zdo=r(t6e," \u2014 "),SB=n(t6e,"A",{href:!0});var XHr=s(SB);eco=r(XHr,"ViTFeatureExtractor"),XHr.forEach(t),oco=r(t6e," (ViTMAE model)"),t6e.forEach(t),rco=i(te),Ch=n(te,"LI",{});var a6e=s(Ch);Xae=n(a6e,"STRONG",{});var zHr=s(Xae);tco=r(zHr,"wav2vec2"),zHr.forEach(t),aco=r(a6e," \u2014 "),RB=n(a6e,"A",{href:!0});var WHr=s(RB);nco=r(WHr,"Wav2Vec2FeatureExtractor"),WHr.forEach(t),sco=r(a6e," (Wav2Vec2 model)"),a6e.forEach(t),lco=i(te),wh=n(te,"LI",{});var n6e=s(wh);zae=n(n6e,"STRONG",{});var QHr=s(zae);ico=r(QHr,"wav2vec2-conformer"),QHr.forEach(t),dco=r(n6e," \u2014 "),PB=n(n6e,"A",{href:!0});var HHr=s(PB);cco=r(HHr,"Wav2Vec2FeatureExtractor"),HHr.forEach(t),mco=r(n6e," (Wav2Vec2-Conformer model)"),n6e.forEach(t),fco=i(te),Ah=n(te,"LI",{});var s6e=s(Ah);Wae=n(s6e,"STRONG",{});var UHr=s(Wae);gco=r(UHr,"yolos"),UHr.forEach(t),hco=r(s6e," \u2014 "),BB=n(s6e,"A",{href:!0});var JHr=s(BB);uco=r(JHr,"YolosFeatureExtractor"),JHr.forEach(t),pco=r(s6e," (YOLOS model)"),s6e.forEach(t),te.forEach(t),_co=i(Zt),T(yh.$$.fragment,Zt),bco=i(Zt),T(Lh.$$.fragment,Zt),Zt.forEach(t),vco=i(Ns),xh=n(Ns,"DIV",{class:!0});var GNe=s(xh);T(yy.$$.fragment,GNe),Fco=i(GNe),Qae=n(GNe,"P",{});var YHr=s(Qae);Tco=r(YHr,"Register a new feature extractor for this class."),YHr.forEach(t),GNe.forEach(t),Ns.forEach(t),DIe=i(m),Mi=n(m,"H2",{class:!0});var ONe=s(Mi);$h=n(ONe,"A",{id:!0,class:!0,href:!0});var KHr=s($h);Hae=n(KHr,"SPAN",{});var ZHr=s(Hae);T(Ly.$$.fragment,ZHr),ZHr.forEach(t),KHr.forEach(t),Mco=i(ONe),Uae=n(ONe,"SPAN",{});var eUr=s(Uae);Eco=r(eUr,"AutoProcessor"),eUr.forEach(t),ONe.forEach(t),GIe=i(m),yo=n(m,"DIV",{class:!0});var js=s(yo);T(xy.$$.fragment,js),Cco=i(js),$y=n(js,"P",{});var VNe=s($y);wco=r(VNe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),IB=n(VNe,"A",{href:!0});var oUr=s(IB);Aco=r(oUr,"AutoProcessor.from_pretrained()"),oUr.forEach(t),yco=r(VNe," class method."),VNe.forEach(t),Lco=i(js),ky=n(js,"P",{});var XNe=s(ky);xco=r(XNe,"This class cannot be instantiated directly using "),Jae=n(XNe,"CODE",{});var rUr=s(Jae);$co=r(rUr,"__init__()"),rUr.forEach(t),kco=r(XNe," (throws an error)."),XNe.forEach(t),Sco=i(js),Ue=n(js,"DIV",{class:!0});var ea=s(Ue);T(Sy.$$.fragment,ea),Rco=i(ea),Yae=n(ea,"P",{});var tUr=s(Yae);Pco=r(tUr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),tUr.forEach(t),Bco=i(ea),Ei=n(ea,"P",{});var LK=s(Ei);Ico=r(LK,"The processor class to instantiate is selected based on the "),Kae=n(LK,"CODE",{});var aUr=s(Kae);qco=r(aUr,"model_type"),aUr.forEach(t),Nco=r(LK,` property of the config object (either
passed as an argument or loaded from `),Zae=n(LK,"CODE",{});var nUr=s(Zae);jco=r(nUr,"pretrained_model_name_or_path"),nUr.forEach(t),Dco=r(LK," if possible):"),LK.forEach(t),Gco=i(ea),ue=n(ea,"UL",{});var be=s(ue);kh=n(be,"LI",{});var l6e=s(kh);ene=n(l6e,"STRONG",{});var sUr=s(ene);Oco=r(sUr,"clip"),sUr.forEach(t),Vco=r(l6e," \u2014 "),qB=n(l6e,"A",{href:!0});var lUr=s(qB);Xco=r(lUr,"CLIPProcessor"),lUr.forEach(t),zco=r(l6e," (CLIP model)"),l6e.forEach(t),Wco=i(be),Sh=n(be,"LI",{});var i6e=s(Sh);one=n(i6e,"STRONG",{});var iUr=s(one);Qco=r(iUr,"flava"),iUr.forEach(t),Hco=r(i6e," \u2014 "),rne=n(i6e,"CODE",{});var dUr=s(rne);Uco=r(dUr,"FLAVAProcessor"),dUr.forEach(t),Jco=r(i6e," (Flava model)"),i6e.forEach(t),Yco=i(be),Rh=n(be,"LI",{});var d6e=s(Rh);tne=n(d6e,"STRONG",{});var cUr=s(tne);Kco=r(cUr,"layoutlmv2"),cUr.forEach(t),Zco=r(d6e," \u2014 "),NB=n(d6e,"A",{href:!0});var mUr=s(NB);emo=r(mUr,"LayoutLMv2Processor"),mUr.forEach(t),omo=r(d6e," (LayoutLMv2 model)"),d6e.forEach(t),rmo=i(be),Ph=n(be,"LI",{});var c6e=s(Ph);ane=n(c6e,"STRONG",{});var fUr=s(ane);tmo=r(fUr,"layoutxlm"),fUr.forEach(t),amo=r(c6e," \u2014 "),jB=n(c6e,"A",{href:!0});var gUr=s(jB);nmo=r(gUr,"LayoutXLMProcessor"),gUr.forEach(t),smo=r(c6e," (LayoutXLM model)"),c6e.forEach(t),lmo=i(be),Bh=n(be,"LI",{});var m6e=s(Bh);nne=n(m6e,"STRONG",{});var hUr=s(nne);imo=r(hUr,"sew"),hUr.forEach(t),dmo=r(m6e," \u2014 "),DB=n(m6e,"A",{href:!0});var uUr=s(DB);cmo=r(uUr,"Wav2Vec2Processor"),uUr.forEach(t),mmo=r(m6e," (SEW model)"),m6e.forEach(t),fmo=i(be),Ih=n(be,"LI",{});var f6e=s(Ih);sne=n(f6e,"STRONG",{});var pUr=s(sne);gmo=r(pUr,"sew-d"),pUr.forEach(t),hmo=r(f6e," \u2014 "),GB=n(f6e,"A",{href:!0});var _Ur=s(GB);umo=r(_Ur,"Wav2Vec2Processor"),_Ur.forEach(t),pmo=r(f6e," (SEW-D model)"),f6e.forEach(t),_mo=i(be),qh=n(be,"LI",{});var g6e=s(qh);lne=n(g6e,"STRONG",{});var bUr=s(lne);bmo=r(bUr,"speech_to_text"),bUr.forEach(t),vmo=r(g6e," \u2014 "),OB=n(g6e,"A",{href:!0});var vUr=s(OB);Fmo=r(vUr,"Speech2TextProcessor"),vUr.forEach(t),Tmo=r(g6e," (Speech2Text model)"),g6e.forEach(t),Mmo=i(be),Nh=n(be,"LI",{});var h6e=s(Nh);ine=n(h6e,"STRONG",{});var FUr=s(ine);Emo=r(FUr,"speech_to_text_2"),FUr.forEach(t),Cmo=r(h6e," \u2014 "),VB=n(h6e,"A",{href:!0});var TUr=s(VB);wmo=r(TUr,"Speech2Text2Processor"),TUr.forEach(t),Amo=r(h6e," (Speech2Text2 model)"),h6e.forEach(t),ymo=i(be),jh=n(be,"LI",{});var u6e=s(jh);dne=n(u6e,"STRONG",{});var MUr=s(dne);Lmo=r(MUr,"trocr"),MUr.forEach(t),xmo=r(u6e," \u2014 "),XB=n(u6e,"A",{href:!0});var EUr=s(XB);$mo=r(EUr,"TrOCRProcessor"),EUr.forEach(t),kmo=r(u6e," (TrOCR model)"),u6e.forEach(t),Smo=i(be),Dh=n(be,"LI",{});var p6e=s(Dh);cne=n(p6e,"STRONG",{});var CUr=s(cne);Rmo=r(CUr,"unispeech"),CUr.forEach(t),Pmo=r(p6e," \u2014 "),zB=n(p6e,"A",{href:!0});var wUr=s(zB);Bmo=r(wUr,"Wav2Vec2Processor"),wUr.forEach(t),Imo=r(p6e," (UniSpeech model)"),p6e.forEach(t),qmo=i(be),Gh=n(be,"LI",{});var _6e=s(Gh);mne=n(_6e,"STRONG",{});var AUr=s(mne);Nmo=r(AUr,"unispeech-sat"),AUr.forEach(t),jmo=r(_6e," \u2014 "),WB=n(_6e,"A",{href:!0});var yUr=s(WB);Dmo=r(yUr,"Wav2Vec2Processor"),yUr.forEach(t),Gmo=r(_6e," (UniSpeechSat model)"),_6e.forEach(t),Omo=i(be),Oh=n(be,"LI",{});var b6e=s(Oh);fne=n(b6e,"STRONG",{});var LUr=s(fne);Vmo=r(LUr,"vilt"),LUr.forEach(t),Xmo=r(b6e," \u2014 "),QB=n(b6e,"A",{href:!0});var xUr=s(QB);zmo=r(xUr,"ViltProcessor"),xUr.forEach(t),Wmo=r(b6e," (ViLT model)"),b6e.forEach(t),Qmo=i(be),Vh=n(be,"LI",{});var v6e=s(Vh);gne=n(v6e,"STRONG",{});var $Ur=s(gne);Hmo=r($Ur,"vision-text-dual-encoder"),$Ur.forEach(t),Umo=r(v6e," \u2014 "),HB=n(v6e,"A",{href:!0});var kUr=s(HB);Jmo=r(kUr,"VisionTextDualEncoderProcessor"),kUr.forEach(t),Ymo=r(v6e," (VisionTextDualEncoder model)"),v6e.forEach(t),Kmo=i(be),Xh=n(be,"LI",{});var F6e=s(Xh);hne=n(F6e,"STRONG",{});var SUr=s(hne);Zmo=r(SUr,"wav2vec2"),SUr.forEach(t),efo=r(F6e," \u2014 "),UB=n(F6e,"A",{href:!0});var RUr=s(UB);ofo=r(RUr,"Wav2Vec2Processor"),RUr.forEach(t),rfo=r(F6e," (Wav2Vec2 model)"),F6e.forEach(t),tfo=i(be),zh=n(be,"LI",{});var T6e=s(zh);une=n(T6e,"STRONG",{});var PUr=s(une);afo=r(PUr,"wav2vec2-conformer"),PUr.forEach(t),nfo=r(T6e," \u2014 "),JB=n(T6e,"A",{href:!0});var BUr=s(JB);sfo=r(BUr,"Wav2Vec2Processor"),BUr.forEach(t),lfo=r(T6e," (Wav2Vec2-Conformer model)"),T6e.forEach(t),ifo=i(be),Wh=n(be,"LI",{});var M6e=s(Wh);pne=n(M6e,"STRONG",{});var IUr=s(pne);dfo=r(IUr,"wavlm"),IUr.forEach(t),cfo=r(M6e," \u2014 "),YB=n(M6e,"A",{href:!0});var qUr=s(YB);mfo=r(qUr,"Wav2Vec2Processor"),qUr.forEach(t),ffo=r(M6e," (WavLM model)"),M6e.forEach(t),be.forEach(t),gfo=i(ea),T(Qh.$$.fragment,ea),hfo=i(ea),T(Hh.$$.fragment,ea),ea.forEach(t),ufo=i(js),Uh=n(js,"DIV",{class:!0});var zNe=s(Uh);T(Ry.$$.fragment,zNe),pfo=i(zNe),_ne=n(zNe,"P",{});var NUr=s(_ne);_fo=r(NUr,"Register a new processor for this class."),NUr.forEach(t),zNe.forEach(t),js.forEach(t),OIe=i(m),Ci=n(m,"H2",{class:!0});var WNe=s(Ci);Jh=n(WNe,"A",{id:!0,class:!0,href:!0});var jUr=s(Jh);bne=n(jUr,"SPAN",{});var DUr=s(bne);T(Py.$$.fragment,DUr),DUr.forEach(t),jUr.forEach(t),bfo=i(WNe),vne=n(WNe,"SPAN",{});var GUr=s(vne);vfo=r(GUr,"AutoModel"),GUr.forEach(t),WNe.forEach(t),VIe=i(m),Lo=n(m,"DIV",{class:!0});var Ds=s(Lo);T(By.$$.fragment,Ds),Ffo=i(Ds),wi=n(Ds,"P",{});var xK=s(wi);Tfo=r(xK,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),KB=n(xK,"A",{href:!0});var OUr=s(KB);Mfo=r(OUr,"from_pretrained()"),OUr.forEach(t),Efo=r(xK," class method or the "),ZB=n(xK,"A",{href:!0});var VUr=s(ZB);Cfo=r(VUr,"from_config()"),VUr.forEach(t),wfo=r(xK,` class
method.`),xK.forEach(t),Afo=i(Ds),Iy=n(Ds,"P",{});var QNe=s(Iy);yfo=r(QNe,"This class cannot be instantiated directly using "),Fne=n(QNe,"CODE",{});var XUr=s(Fne);Lfo=r(XUr,"__init__()"),XUr.forEach(t),xfo=r(QNe," (throws an error)."),QNe.forEach(t),$fo=i(Ds),tt=n(Ds,"DIV",{class:!0});var f6=s(tt);T(qy.$$.fragment,f6),kfo=i(f6),Tne=n(f6,"P",{});var zUr=s(Tne);Sfo=r(zUr,"Instantiates one of the base model classes of the library from a configuration."),zUr.forEach(t),Rfo=i(f6),Ai=n(f6,"P",{});var $K=s(Ai);Pfo=r($K,`Note:
Loading a model from its configuration file does `),Mne=n($K,"STRONG",{});var WUr=s(Mne);Bfo=r(WUr,"not"),WUr.forEach(t),Ifo=r($K,` load the model weights. It only affects the
model\u2019s configuration. Use `),eI=n($K,"A",{href:!0});var QUr=s(eI);qfo=r(QUr,"from_pretrained()"),QUr.forEach(t),Nfo=r($K," to load the model weights."),$K.forEach(t),jfo=i(f6),T(Yh.$$.fragment,f6),f6.forEach(t),Dfo=i(Ds),Je=n(Ds,"DIV",{class:!0});var oa=s(Je);T(Ny.$$.fragment,oa),Gfo=i(oa),Ene=n(oa,"P",{});var HUr=s(Ene);Ofo=r(HUr,"Instantiate one of the base model classes of the library from a pretrained model."),HUr.forEach(t),Vfo=i(oa),La=n(oa,"P",{});var g6=s(La);Xfo=r(g6,"The model class to instantiate is selected based on the "),Cne=n(g6,"CODE",{});var UUr=s(Cne);zfo=r(UUr,"model_type"),UUr.forEach(t),Wfo=r(g6,` property of the config object (either
passed as an argument or loaded from `),wne=n(g6,"CODE",{});var JUr=s(wne);Qfo=r(JUr,"pretrained_model_name_or_path"),JUr.forEach(t),Hfo=r(g6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ane=n(g6,"CODE",{});var YUr=s(Ane);Ufo=r(YUr,"pretrained_model_name_or_path"),YUr.forEach(t),Jfo=r(g6,":"),g6.forEach(t),Yfo=i(oa),x=n(oa,"UL",{});var $=s(x);Kh=n($,"LI",{});var E6e=s(Kh);yne=n(E6e,"STRONG",{});var KUr=s(yne);Kfo=r(KUr,"albert"),KUr.forEach(t),Zfo=r(E6e," \u2014 "),oI=n(E6e,"A",{href:!0});var ZUr=s(oI);ego=r(ZUr,"AlbertModel"),ZUr.forEach(t),ogo=r(E6e," (ALBERT model)"),E6e.forEach(t),rgo=i($),Zh=n($,"LI",{});var C6e=s(Zh);Lne=n(C6e,"STRONG",{});var eJr=s(Lne);tgo=r(eJr,"bart"),eJr.forEach(t),ago=r(C6e," \u2014 "),rI=n(C6e,"A",{href:!0});var oJr=s(rI);ngo=r(oJr,"BartModel"),oJr.forEach(t),sgo=r(C6e," (BART model)"),C6e.forEach(t),lgo=i($),eu=n($,"LI",{});var w6e=s(eu);xne=n(w6e,"STRONG",{});var rJr=s(xne);igo=r(rJr,"beit"),rJr.forEach(t),dgo=r(w6e," \u2014 "),tI=n(w6e,"A",{href:!0});var tJr=s(tI);cgo=r(tJr,"BeitModel"),tJr.forEach(t),mgo=r(w6e," (BEiT model)"),w6e.forEach(t),fgo=i($),ou=n($,"LI",{});var A6e=s(ou);$ne=n(A6e,"STRONG",{});var aJr=s($ne);ggo=r(aJr,"bert"),aJr.forEach(t),hgo=r(A6e," \u2014 "),aI=n(A6e,"A",{href:!0});var nJr=s(aI);ugo=r(nJr,"BertModel"),nJr.forEach(t),pgo=r(A6e," (BERT model)"),A6e.forEach(t),_go=i($),ru=n($,"LI",{});var y6e=s(ru);kne=n(y6e,"STRONG",{});var sJr=s(kne);bgo=r(sJr,"bert-generation"),sJr.forEach(t),vgo=r(y6e," \u2014 "),nI=n(y6e,"A",{href:!0});var lJr=s(nI);Fgo=r(lJr,"BertGenerationEncoder"),lJr.forEach(t),Tgo=r(y6e," (Bert Generation model)"),y6e.forEach(t),Mgo=i($),tu=n($,"LI",{});var L6e=s(tu);Sne=n(L6e,"STRONG",{});var iJr=s(Sne);Ego=r(iJr,"big_bird"),iJr.forEach(t),Cgo=r(L6e," \u2014 "),sI=n(L6e,"A",{href:!0});var dJr=s(sI);wgo=r(dJr,"BigBirdModel"),dJr.forEach(t),Ago=r(L6e," (BigBird model)"),L6e.forEach(t),ygo=i($),au=n($,"LI",{});var x6e=s(au);Rne=n(x6e,"STRONG",{});var cJr=s(Rne);Lgo=r(cJr,"bigbird_pegasus"),cJr.forEach(t),xgo=r(x6e," \u2014 "),lI=n(x6e,"A",{href:!0});var mJr=s(lI);$go=r(mJr,"BigBirdPegasusModel"),mJr.forEach(t),kgo=r(x6e," (BigBirdPegasus model)"),x6e.forEach(t),Sgo=i($),nu=n($,"LI",{});var $6e=s(nu);Pne=n($6e,"STRONG",{});var fJr=s(Pne);Rgo=r(fJr,"blenderbot"),fJr.forEach(t),Pgo=r($6e," \u2014 "),iI=n($6e,"A",{href:!0});var gJr=s(iI);Bgo=r(gJr,"BlenderbotModel"),gJr.forEach(t),Igo=r($6e," (Blenderbot model)"),$6e.forEach(t),qgo=i($),su=n($,"LI",{});var k6e=s(su);Bne=n(k6e,"STRONG",{});var hJr=s(Bne);Ngo=r(hJr,"blenderbot-small"),hJr.forEach(t),jgo=r(k6e," \u2014 "),dI=n(k6e,"A",{href:!0});var uJr=s(dI);Dgo=r(uJr,"BlenderbotSmallModel"),uJr.forEach(t),Ggo=r(k6e," (BlenderbotSmall model)"),k6e.forEach(t),Ogo=i($),lu=n($,"LI",{});var S6e=s(lu);Ine=n(S6e,"STRONG",{});var pJr=s(Ine);Vgo=r(pJr,"camembert"),pJr.forEach(t),Xgo=r(S6e," \u2014 "),cI=n(S6e,"A",{href:!0});var _Jr=s(cI);zgo=r(_Jr,"CamembertModel"),_Jr.forEach(t),Wgo=r(S6e," (CamemBERT model)"),S6e.forEach(t),Qgo=i($),iu=n($,"LI",{});var R6e=s(iu);qne=n(R6e,"STRONG",{});var bJr=s(qne);Hgo=r(bJr,"canine"),bJr.forEach(t),Ugo=r(R6e," \u2014 "),mI=n(R6e,"A",{href:!0});var vJr=s(mI);Jgo=r(vJr,"CanineModel"),vJr.forEach(t),Ygo=r(R6e," (Canine model)"),R6e.forEach(t),Kgo=i($),du=n($,"LI",{});var P6e=s(du);Nne=n(P6e,"STRONG",{});var FJr=s(Nne);Zgo=r(FJr,"clip"),FJr.forEach(t),eho=r(P6e," \u2014 "),fI=n(P6e,"A",{href:!0});var TJr=s(fI);oho=r(TJr,"CLIPModel"),TJr.forEach(t),rho=r(P6e," (CLIP model)"),P6e.forEach(t),tho=i($),cu=n($,"LI",{});var B6e=s(cu);jne=n(B6e,"STRONG",{});var MJr=s(jne);aho=r(MJr,"convbert"),MJr.forEach(t),nho=r(B6e," \u2014 "),gI=n(B6e,"A",{href:!0});var EJr=s(gI);sho=r(EJr,"ConvBertModel"),EJr.forEach(t),lho=r(B6e," (ConvBERT model)"),B6e.forEach(t),iho=i($),mu=n($,"LI",{});var I6e=s(mu);Dne=n(I6e,"STRONG",{});var CJr=s(Dne);dho=r(CJr,"convnext"),CJr.forEach(t),cho=r(I6e," \u2014 "),hI=n(I6e,"A",{href:!0});var wJr=s(hI);mho=r(wJr,"ConvNextModel"),wJr.forEach(t),fho=r(I6e," (ConvNext model)"),I6e.forEach(t),gho=i($),fu=n($,"LI",{});var q6e=s(fu);Gne=n(q6e,"STRONG",{});var AJr=s(Gne);hho=r(AJr,"ctrl"),AJr.forEach(t),uho=r(q6e," \u2014 "),uI=n(q6e,"A",{href:!0});var yJr=s(uI);pho=r(yJr,"CTRLModel"),yJr.forEach(t),_ho=r(q6e," (CTRL model)"),q6e.forEach(t),bho=i($),gu=n($,"LI",{});var N6e=s(gu);One=n(N6e,"STRONG",{});var LJr=s(One);vho=r(LJr,"data2vec-audio"),LJr.forEach(t),Fho=r(N6e," \u2014 "),pI=n(N6e,"A",{href:!0});var xJr=s(pI);Tho=r(xJr,"Data2VecAudioModel"),xJr.forEach(t),Mho=r(N6e," (Data2VecAudio model)"),N6e.forEach(t),Eho=i($),hu=n($,"LI",{});var j6e=s(hu);Vne=n(j6e,"STRONG",{});var $Jr=s(Vne);Cho=r($Jr,"data2vec-text"),$Jr.forEach(t),who=r(j6e," \u2014 "),_I=n(j6e,"A",{href:!0});var kJr=s(_I);Aho=r(kJr,"Data2VecTextModel"),kJr.forEach(t),yho=r(j6e," (Data2VecText model)"),j6e.forEach(t),Lho=i($),uu=n($,"LI",{});var D6e=s(uu);Xne=n(D6e,"STRONG",{});var SJr=s(Xne);xho=r(SJr,"data2vec-vision"),SJr.forEach(t),$ho=r(D6e," \u2014 "),bI=n(D6e,"A",{href:!0});var RJr=s(bI);kho=r(RJr,"Data2VecVisionModel"),RJr.forEach(t),Sho=r(D6e," (Data2VecVision model)"),D6e.forEach(t),Rho=i($),pu=n($,"LI",{});var G6e=s(pu);zne=n(G6e,"STRONG",{});var PJr=s(zne);Pho=r(PJr,"deberta"),PJr.forEach(t),Bho=r(G6e," \u2014 "),vI=n(G6e,"A",{href:!0});var BJr=s(vI);Iho=r(BJr,"DebertaModel"),BJr.forEach(t),qho=r(G6e," (DeBERTa model)"),G6e.forEach(t),Nho=i($),_u=n($,"LI",{});var O6e=s(_u);Wne=n(O6e,"STRONG",{});var IJr=s(Wne);jho=r(IJr,"deberta-v2"),IJr.forEach(t),Dho=r(O6e," \u2014 "),FI=n(O6e,"A",{href:!0});var qJr=s(FI);Gho=r(qJr,"DebertaV2Model"),qJr.forEach(t),Oho=r(O6e," (DeBERTa-v2 model)"),O6e.forEach(t),Vho=i($),bu=n($,"LI",{});var V6e=s(bu);Qne=n(V6e,"STRONG",{});var NJr=s(Qne);Xho=r(NJr,"decision_transformer"),NJr.forEach(t),zho=r(V6e," \u2014 "),TI=n(V6e,"A",{href:!0});var jJr=s(TI);Who=r(jJr,"DecisionTransformerModel"),jJr.forEach(t),Qho=r(V6e," (Decision Transformer model)"),V6e.forEach(t),Hho=i($),vu=n($,"LI",{});var X6e=s(vu);Hne=n(X6e,"STRONG",{});var DJr=s(Hne);Uho=r(DJr,"deit"),DJr.forEach(t),Jho=r(X6e," \u2014 "),MI=n(X6e,"A",{href:!0});var GJr=s(MI);Yho=r(GJr,"DeiTModel"),GJr.forEach(t),Kho=r(X6e," (DeiT model)"),X6e.forEach(t),Zho=i($),Fu=n($,"LI",{});var z6e=s(Fu);Une=n(z6e,"STRONG",{});var OJr=s(Une);euo=r(OJr,"detr"),OJr.forEach(t),ouo=r(z6e," \u2014 "),EI=n(z6e,"A",{href:!0});var VJr=s(EI);ruo=r(VJr,"DetrModel"),VJr.forEach(t),tuo=r(z6e," (DETR model)"),z6e.forEach(t),auo=i($),Tu=n($,"LI",{});var W6e=s(Tu);Jne=n(W6e,"STRONG",{});var XJr=s(Jne);nuo=r(XJr,"distilbert"),XJr.forEach(t),suo=r(W6e," \u2014 "),CI=n(W6e,"A",{href:!0});var zJr=s(CI);luo=r(zJr,"DistilBertModel"),zJr.forEach(t),iuo=r(W6e," (DistilBERT model)"),W6e.forEach(t),duo=i($),Mu=n($,"LI",{});var Q6e=s(Mu);Yne=n(Q6e,"STRONG",{});var WJr=s(Yne);cuo=r(WJr,"dpr"),WJr.forEach(t),muo=r(Q6e," \u2014 "),wI=n(Q6e,"A",{href:!0});var QJr=s(wI);fuo=r(QJr,"DPRQuestionEncoder"),QJr.forEach(t),guo=r(Q6e," (DPR model)"),Q6e.forEach(t),huo=i($),Eu=n($,"LI",{});var H6e=s(Eu);Kne=n(H6e,"STRONG",{});var HJr=s(Kne);uuo=r(HJr,"dpt"),HJr.forEach(t),puo=r(H6e," \u2014 "),AI=n(H6e,"A",{href:!0});var UJr=s(AI);_uo=r(UJr,"DPTModel"),UJr.forEach(t),buo=r(H6e," (DPT model)"),H6e.forEach(t),vuo=i($),Cu=n($,"LI",{});var U6e=s(Cu);Zne=n(U6e,"STRONG",{});var JJr=s(Zne);Fuo=r(JJr,"electra"),JJr.forEach(t),Tuo=r(U6e," \u2014 "),yI=n(U6e,"A",{href:!0});var YJr=s(yI);Muo=r(YJr,"ElectraModel"),YJr.forEach(t),Euo=r(U6e," (ELECTRA model)"),U6e.forEach(t),Cuo=i($),wu=n($,"LI",{});var J6e=s(wu);ese=n(J6e,"STRONG",{});var KJr=s(ese);wuo=r(KJr,"flaubert"),KJr.forEach(t),Auo=r(J6e," \u2014 "),LI=n(J6e,"A",{href:!0});var ZJr=s(LI);yuo=r(ZJr,"FlaubertModel"),ZJr.forEach(t),Luo=r(J6e," (FlauBERT model)"),J6e.forEach(t),xuo=i($),Au=n($,"LI",{});var Y6e=s(Au);ose=n(Y6e,"STRONG",{});var eYr=s(ose);$uo=r(eYr,"flava"),eYr.forEach(t),kuo=r(Y6e," \u2014 "),xI=n(Y6e,"A",{href:!0});var oYr=s(xI);Suo=r(oYr,"FlavaModel"),oYr.forEach(t),Ruo=r(Y6e," (Flava model)"),Y6e.forEach(t),Puo=i($),yu=n($,"LI",{});var K6e=s(yu);rse=n(K6e,"STRONG",{});var rYr=s(rse);Buo=r(rYr,"fnet"),rYr.forEach(t),Iuo=r(K6e," \u2014 "),$I=n(K6e,"A",{href:!0});var tYr=s($I);quo=r(tYr,"FNetModel"),tYr.forEach(t),Nuo=r(K6e," (FNet model)"),K6e.forEach(t),juo=i($),Lu=n($,"LI",{});var Z6e=s(Lu);tse=n(Z6e,"STRONG",{});var aYr=s(tse);Duo=r(aYr,"fsmt"),aYr.forEach(t),Guo=r(Z6e," \u2014 "),kI=n(Z6e,"A",{href:!0});var nYr=s(kI);Ouo=r(nYr,"FSMTModel"),nYr.forEach(t),Vuo=r(Z6e," (FairSeq Machine-Translation model)"),Z6e.forEach(t),Xuo=i($),Rs=n($,"LI",{});var M$=s(Rs);ase=n(M$,"STRONG",{});var sYr=s(ase);zuo=r(sYr,"funnel"),sYr.forEach(t),Wuo=r(M$," \u2014 "),SI=n(M$,"A",{href:!0});var lYr=s(SI);Quo=r(lYr,"FunnelModel"),lYr.forEach(t),Huo=r(M$," or "),RI=n(M$,"A",{href:!0});var iYr=s(RI);Uuo=r(iYr,"FunnelBaseModel"),iYr.forEach(t),Juo=r(M$," (Funnel Transformer model)"),M$.forEach(t),Yuo=i($),xu=n($,"LI",{});var e0e=s(xu);nse=n(e0e,"STRONG",{});var dYr=s(nse);Kuo=r(dYr,"glpn"),dYr.forEach(t),Zuo=r(e0e," \u2014 "),PI=n(e0e,"A",{href:!0});var cYr=s(PI);epo=r(cYr,"GLPNModel"),cYr.forEach(t),opo=r(e0e," (GLPN model)"),e0e.forEach(t),rpo=i($),$u=n($,"LI",{});var o0e=s($u);sse=n(o0e,"STRONG",{});var mYr=s(sse);tpo=r(mYr,"gpt2"),mYr.forEach(t),apo=r(o0e," \u2014 "),BI=n(o0e,"A",{href:!0});var fYr=s(BI);npo=r(fYr,"GPT2Model"),fYr.forEach(t),spo=r(o0e," (OpenAI GPT-2 model)"),o0e.forEach(t),lpo=i($),ku=n($,"LI",{});var r0e=s(ku);lse=n(r0e,"STRONG",{});var gYr=s(lse);ipo=r(gYr,"gpt_neo"),gYr.forEach(t),dpo=r(r0e," \u2014 "),II=n(r0e,"A",{href:!0});var hYr=s(II);cpo=r(hYr,"GPTNeoModel"),hYr.forEach(t),mpo=r(r0e," (GPT Neo model)"),r0e.forEach(t),fpo=i($),Su=n($,"LI",{});var t0e=s(Su);ise=n(t0e,"STRONG",{});var uYr=s(ise);gpo=r(uYr,"gptj"),uYr.forEach(t),hpo=r(t0e," \u2014 "),qI=n(t0e,"A",{href:!0});var pYr=s(qI);upo=r(pYr,"GPTJModel"),pYr.forEach(t),ppo=r(t0e," (GPT-J model)"),t0e.forEach(t),_po=i($),Ru=n($,"LI",{});var a0e=s(Ru);dse=n(a0e,"STRONG",{});var _Yr=s(dse);bpo=r(_Yr,"hubert"),_Yr.forEach(t),vpo=r(a0e," \u2014 "),NI=n(a0e,"A",{href:!0});var bYr=s(NI);Fpo=r(bYr,"HubertModel"),bYr.forEach(t),Tpo=r(a0e," (Hubert model)"),a0e.forEach(t),Mpo=i($),Pu=n($,"LI",{});var n0e=s(Pu);cse=n(n0e,"STRONG",{});var vYr=s(cse);Epo=r(vYr,"ibert"),vYr.forEach(t),Cpo=r(n0e," \u2014 "),jI=n(n0e,"A",{href:!0});var FYr=s(jI);wpo=r(FYr,"IBertModel"),FYr.forEach(t),Apo=r(n0e," (I-BERT model)"),n0e.forEach(t),ypo=i($),Bu=n($,"LI",{});var s0e=s(Bu);mse=n(s0e,"STRONG",{});var TYr=s(mse);Lpo=r(TYr,"imagegpt"),TYr.forEach(t),xpo=r(s0e," \u2014 "),DI=n(s0e,"A",{href:!0});var MYr=s(DI);$po=r(MYr,"ImageGPTModel"),MYr.forEach(t),kpo=r(s0e," (ImageGPT model)"),s0e.forEach(t),Spo=i($),Iu=n($,"LI",{});var l0e=s(Iu);fse=n(l0e,"STRONG",{});var EYr=s(fse);Rpo=r(EYr,"layoutlm"),EYr.forEach(t),Ppo=r(l0e," \u2014 "),GI=n(l0e,"A",{href:!0});var CYr=s(GI);Bpo=r(CYr,"LayoutLMModel"),CYr.forEach(t),Ipo=r(l0e," (LayoutLM model)"),l0e.forEach(t),qpo=i($),qu=n($,"LI",{});var i0e=s(qu);gse=n(i0e,"STRONG",{});var wYr=s(gse);Npo=r(wYr,"layoutlmv2"),wYr.forEach(t),jpo=r(i0e," \u2014 "),OI=n(i0e,"A",{href:!0});var AYr=s(OI);Dpo=r(AYr,"LayoutLMv2Model"),AYr.forEach(t),Gpo=r(i0e," (LayoutLMv2 model)"),i0e.forEach(t),Opo=i($),Nu=n($,"LI",{});var d0e=s(Nu);hse=n(d0e,"STRONG",{});var yYr=s(hse);Vpo=r(yYr,"led"),yYr.forEach(t),Xpo=r(d0e," \u2014 "),VI=n(d0e,"A",{href:!0});var LYr=s(VI);zpo=r(LYr,"LEDModel"),LYr.forEach(t),Wpo=r(d0e," (LED model)"),d0e.forEach(t),Qpo=i($),ju=n($,"LI",{});var c0e=s(ju);use=n(c0e,"STRONG",{});var xYr=s(use);Hpo=r(xYr,"longformer"),xYr.forEach(t),Upo=r(c0e," \u2014 "),XI=n(c0e,"A",{href:!0});var $Yr=s(XI);Jpo=r($Yr,"LongformerModel"),$Yr.forEach(t),Ypo=r(c0e," (Longformer model)"),c0e.forEach(t),Kpo=i($),Du=n($,"LI",{});var m0e=s(Du);pse=n(m0e,"STRONG",{});var kYr=s(pse);Zpo=r(kYr,"luke"),kYr.forEach(t),e_o=r(m0e," \u2014 "),zI=n(m0e,"A",{href:!0});var SYr=s(zI);o_o=r(SYr,"LukeModel"),SYr.forEach(t),r_o=r(m0e," (LUKE model)"),m0e.forEach(t),t_o=i($),Gu=n($,"LI",{});var f0e=s(Gu);_se=n(f0e,"STRONG",{});var RYr=s(_se);a_o=r(RYr,"lxmert"),RYr.forEach(t),n_o=r(f0e," \u2014 "),WI=n(f0e,"A",{href:!0});var PYr=s(WI);s_o=r(PYr,"LxmertModel"),PYr.forEach(t),l_o=r(f0e," (LXMERT model)"),f0e.forEach(t),i_o=i($),Ou=n($,"LI",{});var g0e=s(Ou);bse=n(g0e,"STRONG",{});var BYr=s(bse);d_o=r(BYr,"m2m_100"),BYr.forEach(t),c_o=r(g0e," \u2014 "),QI=n(g0e,"A",{href:!0});var IYr=s(QI);m_o=r(IYr,"M2M100Model"),IYr.forEach(t),f_o=r(g0e," (M2M100 model)"),g0e.forEach(t),g_o=i($),Vu=n($,"LI",{});var h0e=s(Vu);vse=n(h0e,"STRONG",{});var qYr=s(vse);h_o=r(qYr,"marian"),qYr.forEach(t),u_o=r(h0e," \u2014 "),HI=n(h0e,"A",{href:!0});var NYr=s(HI);p_o=r(NYr,"MarianModel"),NYr.forEach(t),__o=r(h0e," (Marian model)"),h0e.forEach(t),b_o=i($),Xu=n($,"LI",{});var u0e=s(Xu);Fse=n(u0e,"STRONG",{});var jYr=s(Fse);v_o=r(jYr,"maskformer"),jYr.forEach(t),F_o=r(u0e," \u2014 "),UI=n(u0e,"A",{href:!0});var DYr=s(UI);T_o=r(DYr,"MaskFormerModel"),DYr.forEach(t),M_o=r(u0e," (MaskFormer model)"),u0e.forEach(t),E_o=i($),zu=n($,"LI",{});var p0e=s(zu);Tse=n(p0e,"STRONG",{});var GYr=s(Tse);C_o=r(GYr,"mbart"),GYr.forEach(t),w_o=r(p0e," \u2014 "),JI=n(p0e,"A",{href:!0});var OYr=s(JI);A_o=r(OYr,"MBartModel"),OYr.forEach(t),y_o=r(p0e," (mBART model)"),p0e.forEach(t),L_o=i($),Wu=n($,"LI",{});var _0e=s(Wu);Mse=n(_0e,"STRONG",{});var VYr=s(Mse);x_o=r(VYr,"megatron-bert"),VYr.forEach(t),$_o=r(_0e," \u2014 "),YI=n(_0e,"A",{href:!0});var XYr=s(YI);k_o=r(XYr,"MegatronBertModel"),XYr.forEach(t),S_o=r(_0e," (MegatronBert model)"),_0e.forEach(t),R_o=i($),Qu=n($,"LI",{});var b0e=s(Qu);Ese=n(b0e,"STRONG",{});var zYr=s(Ese);P_o=r(zYr,"mobilebert"),zYr.forEach(t),B_o=r(b0e," \u2014 "),KI=n(b0e,"A",{href:!0});var WYr=s(KI);I_o=r(WYr,"MobileBertModel"),WYr.forEach(t),q_o=r(b0e," (MobileBERT model)"),b0e.forEach(t),N_o=i($),Hu=n($,"LI",{});var v0e=s(Hu);Cse=n(v0e,"STRONG",{});var QYr=s(Cse);j_o=r(QYr,"mpnet"),QYr.forEach(t),D_o=r(v0e," \u2014 "),ZI=n(v0e,"A",{href:!0});var HYr=s(ZI);G_o=r(HYr,"MPNetModel"),HYr.forEach(t),O_o=r(v0e," (MPNet model)"),v0e.forEach(t),V_o=i($),Uu=n($,"LI",{});var F0e=s(Uu);wse=n(F0e,"STRONG",{});var UYr=s(wse);X_o=r(UYr,"mt5"),UYr.forEach(t),z_o=r(F0e," \u2014 "),eq=n(F0e,"A",{href:!0});var JYr=s(eq);W_o=r(JYr,"MT5Model"),JYr.forEach(t),Q_o=r(F0e," (mT5 model)"),F0e.forEach(t),H_o=i($),Ju=n($,"LI",{});var T0e=s(Ju);Ase=n(T0e,"STRONG",{});var YYr=s(Ase);U_o=r(YYr,"nystromformer"),YYr.forEach(t),J_o=r(T0e," \u2014 "),oq=n(T0e,"A",{href:!0});var KYr=s(oq);Y_o=r(KYr,"NystromformerModel"),KYr.forEach(t),K_o=r(T0e," (Nystromformer model)"),T0e.forEach(t),Z_o=i($),Yu=n($,"LI",{});var M0e=s(Yu);yse=n(M0e,"STRONG",{});var ZYr=s(yse);ebo=r(ZYr,"openai-gpt"),ZYr.forEach(t),obo=r(M0e," \u2014 "),rq=n(M0e,"A",{href:!0});var eKr=s(rq);rbo=r(eKr,"OpenAIGPTModel"),eKr.forEach(t),tbo=r(M0e," (OpenAI GPT model)"),M0e.forEach(t),abo=i($),Ku=n($,"LI",{});var E0e=s(Ku);Lse=n(E0e,"STRONG",{});var oKr=s(Lse);nbo=r(oKr,"opt"),oKr.forEach(t),sbo=r(E0e," \u2014 "),tq=n(E0e,"A",{href:!0});var rKr=s(tq);lbo=r(rKr,"OPTModel"),rKr.forEach(t),ibo=r(E0e," (OPT model)"),E0e.forEach(t),dbo=i($),Zu=n($,"LI",{});var C0e=s(Zu);xse=n(C0e,"STRONG",{});var tKr=s(xse);cbo=r(tKr,"pegasus"),tKr.forEach(t),mbo=r(C0e," \u2014 "),aq=n(C0e,"A",{href:!0});var aKr=s(aq);fbo=r(aKr,"PegasusModel"),aKr.forEach(t),gbo=r(C0e," (Pegasus model)"),C0e.forEach(t),hbo=i($),ep=n($,"LI",{});var w0e=s(ep);$se=n(w0e,"STRONG",{});var nKr=s($se);ubo=r(nKr,"perceiver"),nKr.forEach(t),pbo=r(w0e," \u2014 "),nq=n(w0e,"A",{href:!0});var sKr=s(nq);_bo=r(sKr,"PerceiverModel"),sKr.forEach(t),bbo=r(w0e," (Perceiver model)"),w0e.forEach(t),vbo=i($),op=n($,"LI",{});var A0e=s(op);kse=n(A0e,"STRONG",{});var lKr=s(kse);Fbo=r(lKr,"plbart"),lKr.forEach(t),Tbo=r(A0e," \u2014 "),sq=n(A0e,"A",{href:!0});var iKr=s(sq);Mbo=r(iKr,"PLBartModel"),iKr.forEach(t),Ebo=r(A0e," (PLBart model)"),A0e.forEach(t),Cbo=i($),rp=n($,"LI",{});var y0e=s(rp);Sse=n(y0e,"STRONG",{});var dKr=s(Sse);wbo=r(dKr,"poolformer"),dKr.forEach(t),Abo=r(y0e," \u2014 "),lq=n(y0e,"A",{href:!0});var cKr=s(lq);ybo=r(cKr,"PoolFormerModel"),cKr.forEach(t),Lbo=r(y0e," (PoolFormer model)"),y0e.forEach(t),xbo=i($),tp=n($,"LI",{});var L0e=s(tp);Rse=n(L0e,"STRONG",{});var mKr=s(Rse);$bo=r(mKr,"prophetnet"),mKr.forEach(t),kbo=r(L0e," \u2014 "),iq=n(L0e,"A",{href:!0});var fKr=s(iq);Sbo=r(fKr,"ProphetNetModel"),fKr.forEach(t),Rbo=r(L0e," (ProphetNet model)"),L0e.forEach(t),Pbo=i($),ap=n($,"LI",{});var x0e=s(ap);Pse=n(x0e,"STRONG",{});var gKr=s(Pse);Bbo=r(gKr,"qdqbert"),gKr.forEach(t),Ibo=r(x0e," \u2014 "),dq=n(x0e,"A",{href:!0});var hKr=s(dq);qbo=r(hKr,"QDQBertModel"),hKr.forEach(t),Nbo=r(x0e," (QDQBert model)"),x0e.forEach(t),jbo=i($),np=n($,"LI",{});var $0e=s(np);Bse=n($0e,"STRONG",{});var uKr=s(Bse);Dbo=r(uKr,"reformer"),uKr.forEach(t),Gbo=r($0e," \u2014 "),cq=n($0e,"A",{href:!0});var pKr=s(cq);Obo=r(pKr,"ReformerModel"),pKr.forEach(t),Vbo=r($0e," (Reformer model)"),$0e.forEach(t),Xbo=i($),sp=n($,"LI",{});var k0e=s(sp);Ise=n(k0e,"STRONG",{});var _Kr=s(Ise);zbo=r(_Kr,"regnet"),_Kr.forEach(t),Wbo=r(k0e," \u2014 "),mq=n(k0e,"A",{href:!0});var bKr=s(mq);Qbo=r(bKr,"RegNetModel"),bKr.forEach(t),Hbo=r(k0e," (RegNet model)"),k0e.forEach(t),Ubo=i($),lp=n($,"LI",{});var S0e=s(lp);qse=n(S0e,"STRONG",{});var vKr=s(qse);Jbo=r(vKr,"rembert"),vKr.forEach(t),Ybo=r(S0e," \u2014 "),fq=n(S0e,"A",{href:!0});var FKr=s(fq);Kbo=r(FKr,"RemBertModel"),FKr.forEach(t),Zbo=r(S0e," (RemBERT model)"),S0e.forEach(t),e2o=i($),ip=n($,"LI",{});var R0e=s(ip);Nse=n(R0e,"STRONG",{});var TKr=s(Nse);o2o=r(TKr,"resnet"),TKr.forEach(t),r2o=r(R0e," \u2014 "),gq=n(R0e,"A",{href:!0});var MKr=s(gq);t2o=r(MKr,"ResNetModel"),MKr.forEach(t),a2o=r(R0e," (ResNet model)"),R0e.forEach(t),n2o=i($),dp=n($,"LI",{});var P0e=s(dp);jse=n(P0e,"STRONG",{});var EKr=s(jse);s2o=r(EKr,"retribert"),EKr.forEach(t),l2o=r(P0e," \u2014 "),hq=n(P0e,"A",{href:!0});var CKr=s(hq);i2o=r(CKr,"RetriBertModel"),CKr.forEach(t),d2o=r(P0e," (RetriBERT model)"),P0e.forEach(t),c2o=i($),cp=n($,"LI",{});var B0e=s(cp);Dse=n(B0e,"STRONG",{});var wKr=s(Dse);m2o=r(wKr,"roberta"),wKr.forEach(t),f2o=r(B0e," \u2014 "),uq=n(B0e,"A",{href:!0});var AKr=s(uq);g2o=r(AKr,"RobertaModel"),AKr.forEach(t),h2o=r(B0e," (RoBERTa model)"),B0e.forEach(t),u2o=i($),mp=n($,"LI",{});var I0e=s(mp);Gse=n(I0e,"STRONG",{});var yKr=s(Gse);p2o=r(yKr,"roformer"),yKr.forEach(t),_2o=r(I0e," \u2014 "),pq=n(I0e,"A",{href:!0});var LKr=s(pq);b2o=r(LKr,"RoFormerModel"),LKr.forEach(t),v2o=r(I0e," (RoFormer model)"),I0e.forEach(t),F2o=i($),fp=n($,"LI",{});var q0e=s(fp);Ose=n(q0e,"STRONG",{});var xKr=s(Ose);T2o=r(xKr,"segformer"),xKr.forEach(t),M2o=r(q0e," \u2014 "),_q=n(q0e,"A",{href:!0});var $Kr=s(_q);E2o=r($Kr,"SegformerModel"),$Kr.forEach(t),C2o=r(q0e," (SegFormer model)"),q0e.forEach(t),w2o=i($),gp=n($,"LI",{});var N0e=s(gp);Vse=n(N0e,"STRONG",{});var kKr=s(Vse);A2o=r(kKr,"sew"),kKr.forEach(t),y2o=r(N0e," \u2014 "),bq=n(N0e,"A",{href:!0});var SKr=s(bq);L2o=r(SKr,"SEWModel"),SKr.forEach(t),x2o=r(N0e," (SEW model)"),N0e.forEach(t),$2o=i($),hp=n($,"LI",{});var j0e=s(hp);Xse=n(j0e,"STRONG",{});var RKr=s(Xse);k2o=r(RKr,"sew-d"),RKr.forEach(t),S2o=r(j0e," \u2014 "),vq=n(j0e,"A",{href:!0});var PKr=s(vq);R2o=r(PKr,"SEWDModel"),PKr.forEach(t),P2o=r(j0e," (SEW-D model)"),j0e.forEach(t),B2o=i($),up=n($,"LI",{});var D0e=s(up);zse=n(D0e,"STRONG",{});var BKr=s(zse);I2o=r(BKr,"speech_to_text"),BKr.forEach(t),q2o=r(D0e," \u2014 "),Fq=n(D0e,"A",{href:!0});var IKr=s(Fq);N2o=r(IKr,"Speech2TextModel"),IKr.forEach(t),j2o=r(D0e," (Speech2Text model)"),D0e.forEach(t),D2o=i($),pp=n($,"LI",{});var G0e=s(pp);Wse=n(G0e,"STRONG",{});var qKr=s(Wse);G2o=r(qKr,"splinter"),qKr.forEach(t),O2o=r(G0e," \u2014 "),Tq=n(G0e,"A",{href:!0});var NKr=s(Tq);V2o=r(NKr,"SplinterModel"),NKr.forEach(t),X2o=r(G0e," (Splinter model)"),G0e.forEach(t),z2o=i($),_p=n($,"LI",{});var O0e=s(_p);Qse=n(O0e,"STRONG",{});var jKr=s(Qse);W2o=r(jKr,"squeezebert"),jKr.forEach(t),Q2o=r(O0e," \u2014 "),Mq=n(O0e,"A",{href:!0});var DKr=s(Mq);H2o=r(DKr,"SqueezeBertModel"),DKr.forEach(t),U2o=r(O0e," (SqueezeBERT model)"),O0e.forEach(t),J2o=i($),bp=n($,"LI",{});var V0e=s(bp);Hse=n(V0e,"STRONG",{});var GKr=s(Hse);Y2o=r(GKr,"swin"),GKr.forEach(t),K2o=r(V0e," \u2014 "),Eq=n(V0e,"A",{href:!0});var OKr=s(Eq);Z2o=r(OKr,"SwinModel"),OKr.forEach(t),evo=r(V0e," (Swin model)"),V0e.forEach(t),ovo=i($),vp=n($,"LI",{});var X0e=s(vp);Use=n(X0e,"STRONG",{});var VKr=s(Use);rvo=r(VKr,"t5"),VKr.forEach(t),tvo=r(X0e," \u2014 "),Cq=n(X0e,"A",{href:!0});var XKr=s(Cq);avo=r(XKr,"T5Model"),XKr.forEach(t),nvo=r(X0e," (T5 model)"),X0e.forEach(t),svo=i($),Fp=n($,"LI",{});var z0e=s(Fp);Jse=n(z0e,"STRONG",{});var zKr=s(Jse);lvo=r(zKr,"tapas"),zKr.forEach(t),ivo=r(z0e," \u2014 "),wq=n(z0e,"A",{href:!0});var WKr=s(wq);dvo=r(WKr,"TapasModel"),WKr.forEach(t),cvo=r(z0e," (TAPAS model)"),z0e.forEach(t),mvo=i($),Tp=n($,"LI",{});var W0e=s(Tp);Yse=n(W0e,"STRONG",{});var QKr=s(Yse);fvo=r(QKr,"transfo-xl"),QKr.forEach(t),gvo=r(W0e," \u2014 "),Aq=n(W0e,"A",{href:!0});var HKr=s(Aq);hvo=r(HKr,"TransfoXLModel"),HKr.forEach(t),uvo=r(W0e," (Transformer-XL model)"),W0e.forEach(t),pvo=i($),Mp=n($,"LI",{});var Q0e=s(Mp);Kse=n(Q0e,"STRONG",{});var UKr=s(Kse);_vo=r(UKr,"unispeech"),UKr.forEach(t),bvo=r(Q0e," \u2014 "),yq=n(Q0e,"A",{href:!0});var JKr=s(yq);vvo=r(JKr,"UniSpeechModel"),JKr.forEach(t),Fvo=r(Q0e," (UniSpeech model)"),Q0e.forEach(t),Tvo=i($),Ep=n($,"LI",{});var H0e=s(Ep);Zse=n(H0e,"STRONG",{});var YKr=s(Zse);Mvo=r(YKr,"unispeech-sat"),YKr.forEach(t),Evo=r(H0e," \u2014 "),Lq=n(H0e,"A",{href:!0});var KKr=s(Lq);Cvo=r(KKr,"UniSpeechSatModel"),KKr.forEach(t),wvo=r(H0e," (UniSpeechSat model)"),H0e.forEach(t),Avo=i($),Cp=n($,"LI",{});var U0e=s(Cp);ele=n(U0e,"STRONG",{});var ZKr=s(ele);yvo=r(ZKr,"van"),ZKr.forEach(t),Lvo=r(U0e," \u2014 "),xq=n(U0e,"A",{href:!0});var eZr=s(xq);xvo=r(eZr,"VanModel"),eZr.forEach(t),$vo=r(U0e," (VAN model)"),U0e.forEach(t),kvo=i($),wp=n($,"LI",{});var J0e=s(wp);ole=n(J0e,"STRONG",{});var oZr=s(ole);Svo=r(oZr,"vilt"),oZr.forEach(t),Rvo=r(J0e," \u2014 "),$q=n(J0e,"A",{href:!0});var rZr=s($q);Pvo=r(rZr,"ViltModel"),rZr.forEach(t),Bvo=r(J0e," (ViLT model)"),J0e.forEach(t),Ivo=i($),Ap=n($,"LI",{});var Y0e=s(Ap);rle=n(Y0e,"STRONG",{});var tZr=s(rle);qvo=r(tZr,"vision-text-dual-encoder"),tZr.forEach(t),Nvo=r(Y0e," \u2014 "),kq=n(Y0e,"A",{href:!0});var aZr=s(kq);jvo=r(aZr,"VisionTextDualEncoderModel"),aZr.forEach(t),Dvo=r(Y0e," (VisionTextDualEncoder model)"),Y0e.forEach(t),Gvo=i($),yp=n($,"LI",{});var K0e=s(yp);tle=n(K0e,"STRONG",{});var nZr=s(tle);Ovo=r(nZr,"visual_bert"),nZr.forEach(t),Vvo=r(K0e," \u2014 "),Sq=n(K0e,"A",{href:!0});var sZr=s(Sq);Xvo=r(sZr,"VisualBertModel"),sZr.forEach(t),zvo=r(K0e," (VisualBert model)"),K0e.forEach(t),Wvo=i($),Lp=n($,"LI",{});var Z0e=s(Lp);ale=n(Z0e,"STRONG",{});var lZr=s(ale);Qvo=r(lZr,"vit"),lZr.forEach(t),Hvo=r(Z0e," \u2014 "),Rq=n(Z0e,"A",{href:!0});var iZr=s(Rq);Uvo=r(iZr,"ViTModel"),iZr.forEach(t),Jvo=r(Z0e," (ViT model)"),Z0e.forEach(t),Yvo=i($),xp=n($,"LI",{});var eye=s(xp);nle=n(eye,"STRONG",{});var dZr=s(nle);Kvo=r(dZr,"vit_mae"),dZr.forEach(t),Zvo=r(eye," \u2014 "),Pq=n(eye,"A",{href:!0});var cZr=s(Pq);eFo=r(cZr,"ViTMAEModel"),cZr.forEach(t),oFo=r(eye," (ViTMAE model)"),eye.forEach(t),rFo=i($),$p=n($,"LI",{});var oye=s($p);sle=n(oye,"STRONG",{});var mZr=s(sle);tFo=r(mZr,"wav2vec2"),mZr.forEach(t),aFo=r(oye," \u2014 "),Bq=n(oye,"A",{href:!0});var fZr=s(Bq);nFo=r(fZr,"Wav2Vec2Model"),fZr.forEach(t),sFo=r(oye," (Wav2Vec2 model)"),oye.forEach(t),lFo=i($),kp=n($,"LI",{});var rye=s(kp);lle=n(rye,"STRONG",{});var gZr=s(lle);iFo=r(gZr,"wav2vec2-conformer"),gZr.forEach(t),dFo=r(rye," \u2014 "),Iq=n(rye,"A",{href:!0});var hZr=s(Iq);cFo=r(hZr,"Wav2Vec2ConformerModel"),hZr.forEach(t),mFo=r(rye," (Wav2Vec2-Conformer model)"),rye.forEach(t),fFo=i($),Sp=n($,"LI",{});var tye=s(Sp);ile=n(tye,"STRONG",{});var uZr=s(ile);gFo=r(uZr,"wavlm"),uZr.forEach(t),hFo=r(tye," \u2014 "),qq=n(tye,"A",{href:!0});var pZr=s(qq);uFo=r(pZr,"WavLMModel"),pZr.forEach(t),pFo=r(tye," (WavLM model)"),tye.forEach(t),_Fo=i($),Rp=n($,"LI",{});var aye=s(Rp);dle=n(aye,"STRONG",{});var _Zr=s(dle);bFo=r(_Zr,"xglm"),_Zr.forEach(t),vFo=r(aye," \u2014 "),Nq=n(aye,"A",{href:!0});var bZr=s(Nq);FFo=r(bZr,"XGLMModel"),bZr.forEach(t),TFo=r(aye," (XGLM model)"),aye.forEach(t),MFo=i($),Pp=n($,"LI",{});var nye=s(Pp);cle=n(nye,"STRONG",{});var vZr=s(cle);EFo=r(vZr,"xlm"),vZr.forEach(t),CFo=r(nye," \u2014 "),jq=n(nye,"A",{href:!0});var FZr=s(jq);wFo=r(FZr,"XLMModel"),FZr.forEach(t),AFo=r(nye," (XLM model)"),nye.forEach(t),yFo=i($),Bp=n($,"LI",{});var sye=s(Bp);mle=n(sye,"STRONG",{});var TZr=s(mle);LFo=r(TZr,"xlm-prophetnet"),TZr.forEach(t),xFo=r(sye," \u2014 "),Dq=n(sye,"A",{href:!0});var MZr=s(Dq);$Fo=r(MZr,"XLMProphetNetModel"),MZr.forEach(t),kFo=r(sye," (XLMProphetNet model)"),sye.forEach(t),SFo=i($),Ip=n($,"LI",{});var lye=s(Ip);fle=n(lye,"STRONG",{});var EZr=s(fle);RFo=r(EZr,"xlm-roberta"),EZr.forEach(t),PFo=r(lye," \u2014 "),Gq=n(lye,"A",{href:!0});var CZr=s(Gq);BFo=r(CZr,"XLMRobertaModel"),CZr.forEach(t),IFo=r(lye," (XLM-RoBERTa model)"),lye.forEach(t),qFo=i($),qp=n($,"LI",{});var iye=s(qp);gle=n(iye,"STRONG",{});var wZr=s(gle);NFo=r(wZr,"xlm-roberta-xl"),wZr.forEach(t),jFo=r(iye," \u2014 "),Oq=n(iye,"A",{href:!0});var AZr=s(Oq);DFo=r(AZr,"XLMRobertaXLModel"),AZr.forEach(t),GFo=r(iye," (XLM-RoBERTa-XL model)"),iye.forEach(t),OFo=i($),Np=n($,"LI",{});var dye=s(Np);hle=n(dye,"STRONG",{});var yZr=s(hle);VFo=r(yZr,"xlnet"),yZr.forEach(t),XFo=r(dye," \u2014 "),Vq=n(dye,"A",{href:!0});var LZr=s(Vq);zFo=r(LZr,"XLNetModel"),LZr.forEach(t),WFo=r(dye," (XLNet model)"),dye.forEach(t),QFo=i($),jp=n($,"LI",{});var cye=s(jp);ule=n(cye,"STRONG",{});var xZr=s(ule);HFo=r(xZr,"yolos"),xZr.forEach(t),UFo=r(cye," \u2014 "),Xq=n(cye,"A",{href:!0});var $Zr=s(Xq);JFo=r($Zr,"YolosModel"),$Zr.forEach(t),YFo=r(cye," (YOLOS model)"),cye.forEach(t),KFo=i($),Dp=n($,"LI",{});var mye=s(Dp);ple=n(mye,"STRONG",{});var kZr=s(ple);ZFo=r(kZr,"yoso"),kZr.forEach(t),e1o=r(mye," \u2014 "),zq=n(mye,"A",{href:!0});var SZr=s(zq);o1o=r(SZr,"YosoModel"),SZr.forEach(t),r1o=r(mye," (YOSO model)"),mye.forEach(t),$.forEach(t),t1o=i(oa),Gp=n(oa,"P",{});var fye=s(Gp);a1o=r(fye,"The model is set in evaluation mode by default using "),_le=n(fye,"CODE",{});var RZr=s(_le);n1o=r(RZr,"model.eval()"),RZr.forEach(t),s1o=r(fye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ble=n(fye,"CODE",{});var PZr=s(ble);l1o=r(PZr,"model.train()"),PZr.forEach(t),fye.forEach(t),i1o=i(oa),T(Op.$$.fragment,oa),oa.forEach(t),Ds.forEach(t),XIe=i(m),yi=n(m,"H2",{class:!0});var HNe=s(yi);Vp=n(HNe,"A",{id:!0,class:!0,href:!0});var BZr=s(Vp);vle=n(BZr,"SPAN",{});var IZr=s(vle);T(jy.$$.fragment,IZr),IZr.forEach(t),BZr.forEach(t),d1o=i(HNe),Fle=n(HNe,"SPAN",{});var qZr=s(Fle);c1o=r(qZr,"AutoModelForPreTraining"),qZr.forEach(t),HNe.forEach(t),zIe=i(m),xo=n(m,"DIV",{class:!0});var Gs=s(xo);T(Dy.$$.fragment,Gs),m1o=i(Gs),Li=n(Gs,"P",{});var kK=s(Li);f1o=r(kK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Wq=n(kK,"A",{href:!0});var NZr=s(Wq);g1o=r(NZr,"from_pretrained()"),NZr.forEach(t),h1o=r(kK," class method or the "),Qq=n(kK,"A",{href:!0});var jZr=s(Qq);u1o=r(jZr,"from_config()"),jZr.forEach(t),p1o=r(kK,` class
method.`),kK.forEach(t),_1o=i(Gs),Gy=n(Gs,"P",{});var UNe=s(Gy);b1o=r(UNe,"This class cannot be instantiated directly using "),Tle=n(UNe,"CODE",{});var DZr=s(Tle);v1o=r(DZr,"__init__()"),DZr.forEach(t),F1o=r(UNe," (throws an error)."),UNe.forEach(t),T1o=i(Gs),at=n(Gs,"DIV",{class:!0});var h6=s(at);T(Oy.$$.fragment,h6),M1o=i(h6),Mle=n(h6,"P",{});var GZr=s(Mle);E1o=r(GZr,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),GZr.forEach(t),C1o=i(h6),xi=n(h6,"P",{});var SK=s(xi);w1o=r(SK,`Note:
Loading a model from its configuration file does `),Ele=n(SK,"STRONG",{});var OZr=s(Ele);A1o=r(OZr,"not"),OZr.forEach(t),y1o=r(SK,` load the model weights. It only affects the
model\u2019s configuration. Use `),Hq=n(SK,"A",{href:!0});var VZr=s(Hq);L1o=r(VZr,"from_pretrained()"),VZr.forEach(t),x1o=r(SK," to load the model weights."),SK.forEach(t),$1o=i(h6),T(Xp.$$.fragment,h6),h6.forEach(t),k1o=i(Gs),Ye=n(Gs,"DIV",{class:!0});var ra=s(Ye);T(Vy.$$.fragment,ra),S1o=i(ra),Cle=n(ra,"P",{});var XZr=s(Cle);R1o=r(XZr,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),XZr.forEach(t),P1o=i(ra),xa=n(ra,"P",{});var u6=s(xa);B1o=r(u6,"The model class to instantiate is selected based on the "),wle=n(u6,"CODE",{});var zZr=s(wle);I1o=r(zZr,"model_type"),zZr.forEach(t),q1o=r(u6,` property of the config object (either
passed as an argument or loaded from `),Ale=n(u6,"CODE",{});var WZr=s(Ale);N1o=r(WZr,"pretrained_model_name_or_path"),WZr.forEach(t),j1o=r(u6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yle=n(u6,"CODE",{});var QZr=s(yle);D1o=r(QZr,"pretrained_model_name_or_path"),QZr.forEach(t),G1o=r(u6,":"),u6.forEach(t),O1o=i(ra),G=n(ra,"UL",{});var O=s(G);zp=n(O,"LI",{});var gye=s(zp);Lle=n(gye,"STRONG",{});var HZr=s(Lle);V1o=r(HZr,"albert"),HZr.forEach(t),X1o=r(gye," \u2014 "),Uq=n(gye,"A",{href:!0});var UZr=s(Uq);z1o=r(UZr,"AlbertForPreTraining"),UZr.forEach(t),W1o=r(gye," (ALBERT model)"),gye.forEach(t),Q1o=i(O),Wp=n(O,"LI",{});var hye=s(Wp);xle=n(hye,"STRONG",{});var JZr=s(xle);H1o=r(JZr,"bart"),JZr.forEach(t),U1o=r(hye," \u2014 "),Jq=n(hye,"A",{href:!0});var YZr=s(Jq);J1o=r(YZr,"BartForConditionalGeneration"),YZr.forEach(t),Y1o=r(hye," (BART model)"),hye.forEach(t),K1o=i(O),Qp=n(O,"LI",{});var uye=s(Qp);$le=n(uye,"STRONG",{});var KZr=s($le);Z1o=r(KZr,"bert"),KZr.forEach(t),eTo=r(uye," \u2014 "),Yq=n(uye,"A",{href:!0});var ZZr=s(Yq);oTo=r(ZZr,"BertForPreTraining"),ZZr.forEach(t),rTo=r(uye," (BERT model)"),uye.forEach(t),tTo=i(O),Hp=n(O,"LI",{});var pye=s(Hp);kle=n(pye,"STRONG",{});var eet=s(kle);aTo=r(eet,"big_bird"),eet.forEach(t),nTo=r(pye," \u2014 "),Kq=n(pye,"A",{href:!0});var oet=s(Kq);sTo=r(oet,"BigBirdForPreTraining"),oet.forEach(t),lTo=r(pye," (BigBird model)"),pye.forEach(t),iTo=i(O),Up=n(O,"LI",{});var _ye=s(Up);Sle=n(_ye,"STRONG",{});var ret=s(Sle);dTo=r(ret,"camembert"),ret.forEach(t),cTo=r(_ye," \u2014 "),Zq=n(_ye,"A",{href:!0});var tet=s(Zq);mTo=r(tet,"CamembertForMaskedLM"),tet.forEach(t),fTo=r(_ye," (CamemBERT model)"),_ye.forEach(t),gTo=i(O),Jp=n(O,"LI",{});var bye=s(Jp);Rle=n(bye,"STRONG",{});var aet=s(Rle);hTo=r(aet,"ctrl"),aet.forEach(t),uTo=r(bye," \u2014 "),eN=n(bye,"A",{href:!0});var net=s(eN);pTo=r(net,"CTRLLMHeadModel"),net.forEach(t),_To=r(bye," (CTRL model)"),bye.forEach(t),bTo=i(O),Yp=n(O,"LI",{});var vye=s(Yp);Ple=n(vye,"STRONG",{});var set=s(Ple);vTo=r(set,"data2vec-text"),set.forEach(t),FTo=r(vye," \u2014 "),oN=n(vye,"A",{href:!0});var iet=s(oN);TTo=r(iet,"Data2VecTextForMaskedLM"),iet.forEach(t),MTo=r(vye," (Data2VecText model)"),vye.forEach(t),ETo=i(O),Kp=n(O,"LI",{});var Fye=s(Kp);Ble=n(Fye,"STRONG",{});var det=s(Ble);CTo=r(det,"deberta"),det.forEach(t),wTo=r(Fye," \u2014 "),rN=n(Fye,"A",{href:!0});var cet=s(rN);ATo=r(cet,"DebertaForMaskedLM"),cet.forEach(t),yTo=r(Fye," (DeBERTa model)"),Fye.forEach(t),LTo=i(O),Zp=n(O,"LI",{});var Tye=s(Zp);Ile=n(Tye,"STRONG",{});var met=s(Ile);xTo=r(met,"deberta-v2"),met.forEach(t),$To=r(Tye," \u2014 "),tN=n(Tye,"A",{href:!0});var fet=s(tN);kTo=r(fet,"DebertaV2ForMaskedLM"),fet.forEach(t),STo=r(Tye," (DeBERTa-v2 model)"),Tye.forEach(t),RTo=i(O),e_=n(O,"LI",{});var Mye=s(e_);qle=n(Mye,"STRONG",{});var get=s(qle);PTo=r(get,"distilbert"),get.forEach(t),BTo=r(Mye," \u2014 "),aN=n(Mye,"A",{href:!0});var het=s(aN);ITo=r(het,"DistilBertForMaskedLM"),het.forEach(t),qTo=r(Mye," (DistilBERT model)"),Mye.forEach(t),NTo=i(O),o_=n(O,"LI",{});var Eye=s(o_);Nle=n(Eye,"STRONG",{});var uet=s(Nle);jTo=r(uet,"electra"),uet.forEach(t),DTo=r(Eye," \u2014 "),nN=n(Eye,"A",{href:!0});var pet=s(nN);GTo=r(pet,"ElectraForPreTraining"),pet.forEach(t),OTo=r(Eye," (ELECTRA model)"),Eye.forEach(t),VTo=i(O),r_=n(O,"LI",{});var Cye=s(r_);jle=n(Cye,"STRONG",{});var _et=s(jle);XTo=r(_et,"flaubert"),_et.forEach(t),zTo=r(Cye," \u2014 "),sN=n(Cye,"A",{href:!0});var bet=s(sN);WTo=r(bet,"FlaubertWithLMHeadModel"),bet.forEach(t),QTo=r(Cye," (FlauBERT model)"),Cye.forEach(t),HTo=i(O),t_=n(O,"LI",{});var wye=s(t_);Dle=n(wye,"STRONG",{});var vet=s(Dle);UTo=r(vet,"flava"),vet.forEach(t),JTo=r(wye," \u2014 "),lN=n(wye,"A",{href:!0});var Fet=s(lN);YTo=r(Fet,"FlavaForPreTraining"),Fet.forEach(t),KTo=r(wye," (Flava model)"),wye.forEach(t),ZTo=i(O),a_=n(O,"LI",{});var Aye=s(a_);Gle=n(Aye,"STRONG",{});var Tet=s(Gle);eMo=r(Tet,"fnet"),Tet.forEach(t),oMo=r(Aye," \u2014 "),iN=n(Aye,"A",{href:!0});var Met=s(iN);rMo=r(Met,"FNetForPreTraining"),Met.forEach(t),tMo=r(Aye," (FNet model)"),Aye.forEach(t),aMo=i(O),n_=n(O,"LI",{});var yye=s(n_);Ole=n(yye,"STRONG",{});var Eet=s(Ole);nMo=r(Eet,"fsmt"),Eet.forEach(t),sMo=r(yye," \u2014 "),dN=n(yye,"A",{href:!0});var Cet=s(dN);lMo=r(Cet,"FSMTForConditionalGeneration"),Cet.forEach(t),iMo=r(yye," (FairSeq Machine-Translation model)"),yye.forEach(t),dMo=i(O),s_=n(O,"LI",{});var Lye=s(s_);Vle=n(Lye,"STRONG",{});var wet=s(Vle);cMo=r(wet,"funnel"),wet.forEach(t),mMo=r(Lye," \u2014 "),cN=n(Lye,"A",{href:!0});var Aet=s(cN);fMo=r(Aet,"FunnelForPreTraining"),Aet.forEach(t),gMo=r(Lye," (Funnel Transformer model)"),Lye.forEach(t),hMo=i(O),l_=n(O,"LI",{});var xye=s(l_);Xle=n(xye,"STRONG",{});var yet=s(Xle);uMo=r(yet,"gpt2"),yet.forEach(t),pMo=r(xye," \u2014 "),mN=n(xye,"A",{href:!0});var Let=s(mN);_Mo=r(Let,"GPT2LMHeadModel"),Let.forEach(t),bMo=r(xye," (OpenAI GPT-2 model)"),xye.forEach(t),vMo=i(O),i_=n(O,"LI",{});var $ye=s(i_);zle=n($ye,"STRONG",{});var xet=s(zle);FMo=r(xet,"ibert"),xet.forEach(t),TMo=r($ye," \u2014 "),fN=n($ye,"A",{href:!0});var $et=s(fN);MMo=r($et,"IBertForMaskedLM"),$et.forEach(t),EMo=r($ye," (I-BERT model)"),$ye.forEach(t),CMo=i(O),d_=n(O,"LI",{});var kye=s(d_);Wle=n(kye,"STRONG",{});var ket=s(Wle);wMo=r(ket,"layoutlm"),ket.forEach(t),AMo=r(kye," \u2014 "),gN=n(kye,"A",{href:!0});var Set=s(gN);yMo=r(Set,"LayoutLMForMaskedLM"),Set.forEach(t),LMo=r(kye," (LayoutLM model)"),kye.forEach(t),xMo=i(O),c_=n(O,"LI",{});var Sye=s(c_);Qle=n(Sye,"STRONG",{});var Ret=s(Qle);$Mo=r(Ret,"longformer"),Ret.forEach(t),kMo=r(Sye," \u2014 "),hN=n(Sye,"A",{href:!0});var Pet=s(hN);SMo=r(Pet,"LongformerForMaskedLM"),Pet.forEach(t),RMo=r(Sye," (Longformer model)"),Sye.forEach(t),PMo=i(O),m_=n(O,"LI",{});var Rye=s(m_);Hle=n(Rye,"STRONG",{});var Bet=s(Hle);BMo=r(Bet,"lxmert"),Bet.forEach(t),IMo=r(Rye," \u2014 "),uN=n(Rye,"A",{href:!0});var Iet=s(uN);qMo=r(Iet,"LxmertForPreTraining"),Iet.forEach(t),NMo=r(Rye," (LXMERT model)"),Rye.forEach(t),jMo=i(O),f_=n(O,"LI",{});var Pye=s(f_);Ule=n(Pye,"STRONG",{});var qet=s(Ule);DMo=r(qet,"megatron-bert"),qet.forEach(t),GMo=r(Pye," \u2014 "),pN=n(Pye,"A",{href:!0});var Net=s(pN);OMo=r(Net,"MegatronBertForPreTraining"),Net.forEach(t),VMo=r(Pye," (MegatronBert model)"),Pye.forEach(t),XMo=i(O),g_=n(O,"LI",{});var Bye=s(g_);Jle=n(Bye,"STRONG",{});var jet=s(Jle);zMo=r(jet,"mobilebert"),jet.forEach(t),WMo=r(Bye," \u2014 "),_N=n(Bye,"A",{href:!0});var Det=s(_N);QMo=r(Det,"MobileBertForPreTraining"),Det.forEach(t),HMo=r(Bye," (MobileBERT model)"),Bye.forEach(t),UMo=i(O),h_=n(O,"LI",{});var Iye=s(h_);Yle=n(Iye,"STRONG",{});var Get=s(Yle);JMo=r(Get,"mpnet"),Get.forEach(t),YMo=r(Iye," \u2014 "),bN=n(Iye,"A",{href:!0});var Oet=s(bN);KMo=r(Oet,"MPNetForMaskedLM"),Oet.forEach(t),ZMo=r(Iye," (MPNet model)"),Iye.forEach(t),e4o=i(O),u_=n(O,"LI",{});var qye=s(u_);Kle=n(qye,"STRONG",{});var Vet=s(Kle);o4o=r(Vet,"openai-gpt"),Vet.forEach(t),r4o=r(qye," \u2014 "),vN=n(qye,"A",{href:!0});var Xet=s(vN);t4o=r(Xet,"OpenAIGPTLMHeadModel"),Xet.forEach(t),a4o=r(qye," (OpenAI GPT model)"),qye.forEach(t),n4o=i(O),p_=n(O,"LI",{});var Nye=s(p_);Zle=n(Nye,"STRONG",{});var zet=s(Zle);s4o=r(zet,"retribert"),zet.forEach(t),l4o=r(Nye," \u2014 "),FN=n(Nye,"A",{href:!0});var Wet=s(FN);i4o=r(Wet,"RetriBertModel"),Wet.forEach(t),d4o=r(Nye," (RetriBERT model)"),Nye.forEach(t),c4o=i(O),__=n(O,"LI",{});var jye=s(__);eie=n(jye,"STRONG",{});var Qet=s(eie);m4o=r(Qet,"roberta"),Qet.forEach(t),f4o=r(jye," \u2014 "),TN=n(jye,"A",{href:!0});var Het=s(TN);g4o=r(Het,"RobertaForMaskedLM"),Het.forEach(t),h4o=r(jye," (RoBERTa model)"),jye.forEach(t),u4o=i(O),b_=n(O,"LI",{});var Dye=s(b_);oie=n(Dye,"STRONG",{});var Uet=s(oie);p4o=r(Uet,"splinter"),Uet.forEach(t),_4o=r(Dye," \u2014 "),MN=n(Dye,"A",{href:!0});var Jet=s(MN);b4o=r(Jet,"SplinterForPreTraining"),Jet.forEach(t),v4o=r(Dye," (Splinter model)"),Dye.forEach(t),F4o=i(O),v_=n(O,"LI",{});var Gye=s(v_);rie=n(Gye,"STRONG",{});var Yet=s(rie);T4o=r(Yet,"squeezebert"),Yet.forEach(t),M4o=r(Gye," \u2014 "),EN=n(Gye,"A",{href:!0});var Ket=s(EN);E4o=r(Ket,"SqueezeBertForMaskedLM"),Ket.forEach(t),C4o=r(Gye," (SqueezeBERT model)"),Gye.forEach(t),w4o=i(O),F_=n(O,"LI",{});var Oye=s(F_);tie=n(Oye,"STRONG",{});var Zet=s(tie);A4o=r(Zet,"t5"),Zet.forEach(t),y4o=r(Oye," \u2014 "),CN=n(Oye,"A",{href:!0});var eot=s(CN);L4o=r(eot,"T5ForConditionalGeneration"),eot.forEach(t),x4o=r(Oye," (T5 model)"),Oye.forEach(t),$4o=i(O),T_=n(O,"LI",{});var Vye=s(T_);aie=n(Vye,"STRONG",{});var oot=s(aie);k4o=r(oot,"tapas"),oot.forEach(t),S4o=r(Vye," \u2014 "),wN=n(Vye,"A",{href:!0});var rot=s(wN);R4o=r(rot,"TapasForMaskedLM"),rot.forEach(t),P4o=r(Vye," (TAPAS model)"),Vye.forEach(t),B4o=i(O),M_=n(O,"LI",{});var Xye=s(M_);nie=n(Xye,"STRONG",{});var tot=s(nie);I4o=r(tot,"transfo-xl"),tot.forEach(t),q4o=r(Xye," \u2014 "),AN=n(Xye,"A",{href:!0});var aot=s(AN);N4o=r(aot,"TransfoXLLMHeadModel"),aot.forEach(t),j4o=r(Xye," (Transformer-XL model)"),Xye.forEach(t),D4o=i(O),E_=n(O,"LI",{});var zye=s(E_);sie=n(zye,"STRONG",{});var not=s(sie);G4o=r(not,"unispeech"),not.forEach(t),O4o=r(zye," \u2014 "),yN=n(zye,"A",{href:!0});var sot=s(yN);V4o=r(sot,"UniSpeechForPreTraining"),sot.forEach(t),X4o=r(zye," (UniSpeech model)"),zye.forEach(t),z4o=i(O),C_=n(O,"LI",{});var Wye=s(C_);lie=n(Wye,"STRONG",{});var lot=s(lie);W4o=r(lot,"unispeech-sat"),lot.forEach(t),Q4o=r(Wye," \u2014 "),LN=n(Wye,"A",{href:!0});var iot=s(LN);H4o=r(iot,"UniSpeechSatForPreTraining"),iot.forEach(t),U4o=r(Wye," (UniSpeechSat model)"),Wye.forEach(t),J4o=i(O),w_=n(O,"LI",{});var Qye=s(w_);iie=n(Qye,"STRONG",{});var dot=s(iie);Y4o=r(dot,"visual_bert"),dot.forEach(t),K4o=r(Qye," \u2014 "),xN=n(Qye,"A",{href:!0});var cot=s(xN);Z4o=r(cot,"VisualBertForPreTraining"),cot.forEach(t),eEo=r(Qye," (VisualBert model)"),Qye.forEach(t),oEo=i(O),A_=n(O,"LI",{});var Hye=s(A_);die=n(Hye,"STRONG",{});var mot=s(die);rEo=r(mot,"vit_mae"),mot.forEach(t),tEo=r(Hye," \u2014 "),$N=n(Hye,"A",{href:!0});var fot=s($N);aEo=r(fot,"ViTMAEForPreTraining"),fot.forEach(t),nEo=r(Hye," (ViTMAE model)"),Hye.forEach(t),sEo=i(O),y_=n(O,"LI",{});var Uye=s(y_);cie=n(Uye,"STRONG",{});var got=s(cie);lEo=r(got,"wav2vec2"),got.forEach(t),iEo=r(Uye," \u2014 "),kN=n(Uye,"A",{href:!0});var hot=s(kN);dEo=r(hot,"Wav2Vec2ForPreTraining"),hot.forEach(t),cEo=r(Uye," (Wav2Vec2 model)"),Uye.forEach(t),mEo=i(O),L_=n(O,"LI",{});var Jye=s(L_);mie=n(Jye,"STRONG",{});var uot=s(mie);fEo=r(uot,"wav2vec2-conformer"),uot.forEach(t),gEo=r(Jye," \u2014 "),SN=n(Jye,"A",{href:!0});var pot=s(SN);hEo=r(pot,"Wav2Vec2ConformerForPreTraining"),pot.forEach(t),uEo=r(Jye," (Wav2Vec2-Conformer model)"),Jye.forEach(t),pEo=i(O),x_=n(O,"LI",{});var Yye=s(x_);fie=n(Yye,"STRONG",{});var _ot=s(fie);_Eo=r(_ot,"xlm"),_ot.forEach(t),bEo=r(Yye," \u2014 "),RN=n(Yye,"A",{href:!0});var bot=s(RN);vEo=r(bot,"XLMWithLMHeadModel"),bot.forEach(t),FEo=r(Yye," (XLM model)"),Yye.forEach(t),TEo=i(O),$_=n(O,"LI",{});var Kye=s($_);gie=n(Kye,"STRONG",{});var vot=s(gie);MEo=r(vot,"xlm-roberta"),vot.forEach(t),EEo=r(Kye," \u2014 "),PN=n(Kye,"A",{href:!0});var Fot=s(PN);CEo=r(Fot,"XLMRobertaForMaskedLM"),Fot.forEach(t),wEo=r(Kye," (XLM-RoBERTa model)"),Kye.forEach(t),AEo=i(O),k_=n(O,"LI",{});var Zye=s(k_);hie=n(Zye,"STRONG",{});var Tot=s(hie);yEo=r(Tot,"xlm-roberta-xl"),Tot.forEach(t),LEo=r(Zye," \u2014 "),BN=n(Zye,"A",{href:!0});var Mot=s(BN);xEo=r(Mot,"XLMRobertaXLForMaskedLM"),Mot.forEach(t),$Eo=r(Zye," (XLM-RoBERTa-XL model)"),Zye.forEach(t),kEo=i(O),S_=n(O,"LI",{});var eLe=s(S_);uie=n(eLe,"STRONG",{});var Eot=s(uie);SEo=r(Eot,"xlnet"),Eot.forEach(t),REo=r(eLe," \u2014 "),IN=n(eLe,"A",{href:!0});var Cot=s(IN);PEo=r(Cot,"XLNetLMHeadModel"),Cot.forEach(t),BEo=r(eLe," (XLNet model)"),eLe.forEach(t),O.forEach(t),IEo=i(ra),R_=n(ra,"P",{});var oLe=s(R_);qEo=r(oLe,"The model is set in evaluation mode by default using "),pie=n(oLe,"CODE",{});var wot=s(pie);NEo=r(wot,"model.eval()"),wot.forEach(t),jEo=r(oLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_ie=n(oLe,"CODE",{});var Aot=s(_ie);DEo=r(Aot,"model.train()"),Aot.forEach(t),oLe.forEach(t),GEo=i(ra),T(P_.$$.fragment,ra),ra.forEach(t),Gs.forEach(t),WIe=i(m),$i=n(m,"H2",{class:!0});var JNe=s($i);B_=n(JNe,"A",{id:!0,class:!0,href:!0});var yot=s(B_);bie=n(yot,"SPAN",{});var Lot=s(bie);T(Xy.$$.fragment,Lot),Lot.forEach(t),yot.forEach(t),OEo=i(JNe),vie=n(JNe,"SPAN",{});var xot=s(vie);VEo=r(xot,"AutoModelForCausalLM"),xot.forEach(t),JNe.forEach(t),QIe=i(m),$o=n(m,"DIV",{class:!0});var Os=s($o);T(zy.$$.fragment,Os),XEo=i(Os),ki=n(Os,"P",{});var RK=s(ki);zEo=r(RK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),qN=n(RK,"A",{href:!0});var $ot=s(qN);WEo=r($ot,"from_pretrained()"),$ot.forEach(t),QEo=r(RK," class method or the "),NN=n(RK,"A",{href:!0});var kot=s(NN);HEo=r(kot,"from_config()"),kot.forEach(t),UEo=r(RK,` class
method.`),RK.forEach(t),JEo=i(Os),Wy=n(Os,"P",{});var YNe=s(Wy);YEo=r(YNe,"This class cannot be instantiated directly using "),Fie=n(YNe,"CODE",{});var Sot=s(Fie);KEo=r(Sot,"__init__()"),Sot.forEach(t),ZEo=r(YNe," (throws an error)."),YNe.forEach(t),eCo=i(Os),nt=n(Os,"DIV",{class:!0});var p6=s(nt);T(Qy.$$.fragment,p6),oCo=i(p6),Tie=n(p6,"P",{});var Rot=s(Tie);rCo=r(Rot,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Rot.forEach(t),tCo=i(p6),Si=n(p6,"P",{});var PK=s(Si);aCo=r(PK,`Note:
Loading a model from its configuration file does `),Mie=n(PK,"STRONG",{});var Pot=s(Mie);nCo=r(Pot,"not"),Pot.forEach(t),sCo=r(PK,` load the model weights. It only affects the
model\u2019s configuration. Use `),jN=n(PK,"A",{href:!0});var Bot=s(jN);lCo=r(Bot,"from_pretrained()"),Bot.forEach(t),iCo=r(PK," to load the model weights."),PK.forEach(t),dCo=i(p6),T(I_.$$.fragment,p6),p6.forEach(t),cCo=i(Os),Ke=n(Os,"DIV",{class:!0});var ta=s(Ke);T(Hy.$$.fragment,ta),mCo=i(ta),Eie=n(ta,"P",{});var Iot=s(Eie);fCo=r(Iot,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Iot.forEach(t),gCo=i(ta),$a=n(ta,"P",{});var _6=s($a);hCo=r(_6,"The model class to instantiate is selected based on the "),Cie=n(_6,"CODE",{});var qot=s(Cie);uCo=r(qot,"model_type"),qot.forEach(t),pCo=r(_6,` property of the config object (either
passed as an argument or loaded from `),wie=n(_6,"CODE",{});var Not=s(wie);_Co=r(Not,"pretrained_model_name_or_path"),Not.forEach(t),bCo=r(_6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Aie=n(_6,"CODE",{});var jot=s(Aie);vCo=r(jot,"pretrained_model_name_or_path"),jot.forEach(t),FCo=r(_6,":"),_6.forEach(t),TCo=i(ta),z=n(ta,"UL",{});var Q=s(z);q_=n(Q,"LI",{});var rLe=s(q_);yie=n(rLe,"STRONG",{});var Dot=s(yie);MCo=r(Dot,"bart"),Dot.forEach(t),ECo=r(rLe," \u2014 "),DN=n(rLe,"A",{href:!0});var Got=s(DN);CCo=r(Got,"BartForCausalLM"),Got.forEach(t),wCo=r(rLe," (BART model)"),rLe.forEach(t),ACo=i(Q),N_=n(Q,"LI",{});var tLe=s(N_);Lie=n(tLe,"STRONG",{});var Oot=s(Lie);yCo=r(Oot,"bert"),Oot.forEach(t),LCo=r(tLe," \u2014 "),GN=n(tLe,"A",{href:!0});var Vot=s(GN);xCo=r(Vot,"BertLMHeadModel"),Vot.forEach(t),$Co=r(tLe," (BERT model)"),tLe.forEach(t),kCo=i(Q),j_=n(Q,"LI",{});var aLe=s(j_);xie=n(aLe,"STRONG",{});var Xot=s(xie);SCo=r(Xot,"bert-generation"),Xot.forEach(t),RCo=r(aLe," \u2014 "),ON=n(aLe,"A",{href:!0});var zot=s(ON);PCo=r(zot,"BertGenerationDecoder"),zot.forEach(t),BCo=r(aLe," (Bert Generation model)"),aLe.forEach(t),ICo=i(Q),D_=n(Q,"LI",{});var nLe=s(D_);$ie=n(nLe,"STRONG",{});var Wot=s($ie);qCo=r(Wot,"big_bird"),Wot.forEach(t),NCo=r(nLe," \u2014 "),VN=n(nLe,"A",{href:!0});var Qot=s(VN);jCo=r(Qot,"BigBirdForCausalLM"),Qot.forEach(t),DCo=r(nLe," (BigBird model)"),nLe.forEach(t),GCo=i(Q),G_=n(Q,"LI",{});var sLe=s(G_);kie=n(sLe,"STRONG",{});var Hot=s(kie);OCo=r(Hot,"bigbird_pegasus"),Hot.forEach(t),VCo=r(sLe," \u2014 "),XN=n(sLe,"A",{href:!0});var Uot=s(XN);XCo=r(Uot,"BigBirdPegasusForCausalLM"),Uot.forEach(t),zCo=r(sLe," (BigBirdPegasus model)"),sLe.forEach(t),WCo=i(Q),O_=n(Q,"LI",{});var lLe=s(O_);Sie=n(lLe,"STRONG",{});var Jot=s(Sie);QCo=r(Jot,"blenderbot"),Jot.forEach(t),HCo=r(lLe," \u2014 "),zN=n(lLe,"A",{href:!0});var Yot=s(zN);UCo=r(Yot,"BlenderbotForCausalLM"),Yot.forEach(t),JCo=r(lLe," (Blenderbot model)"),lLe.forEach(t),YCo=i(Q),V_=n(Q,"LI",{});var iLe=s(V_);Rie=n(iLe,"STRONG",{});var Kot=s(Rie);KCo=r(Kot,"blenderbot-small"),Kot.forEach(t),ZCo=r(iLe," \u2014 "),WN=n(iLe,"A",{href:!0});var Zot=s(WN);e5o=r(Zot,"BlenderbotSmallForCausalLM"),Zot.forEach(t),o5o=r(iLe," (BlenderbotSmall model)"),iLe.forEach(t),r5o=i(Q),X_=n(Q,"LI",{});var dLe=s(X_);Pie=n(dLe,"STRONG",{});var ert=s(Pie);t5o=r(ert,"camembert"),ert.forEach(t),a5o=r(dLe," \u2014 "),QN=n(dLe,"A",{href:!0});var ort=s(QN);n5o=r(ort,"CamembertForCausalLM"),ort.forEach(t),s5o=r(dLe," (CamemBERT model)"),dLe.forEach(t),l5o=i(Q),z_=n(Q,"LI",{});var cLe=s(z_);Bie=n(cLe,"STRONG",{});var rrt=s(Bie);i5o=r(rrt,"ctrl"),rrt.forEach(t),d5o=r(cLe," \u2014 "),HN=n(cLe,"A",{href:!0});var trt=s(HN);c5o=r(trt,"CTRLLMHeadModel"),trt.forEach(t),m5o=r(cLe," (CTRL model)"),cLe.forEach(t),f5o=i(Q),W_=n(Q,"LI",{});var mLe=s(W_);Iie=n(mLe,"STRONG",{});var art=s(Iie);g5o=r(art,"data2vec-text"),art.forEach(t),h5o=r(mLe," \u2014 "),UN=n(mLe,"A",{href:!0});var nrt=s(UN);u5o=r(nrt,"Data2VecTextForCausalLM"),nrt.forEach(t),p5o=r(mLe," (Data2VecText model)"),mLe.forEach(t),_5o=i(Q),Q_=n(Q,"LI",{});var fLe=s(Q_);qie=n(fLe,"STRONG",{});var srt=s(qie);b5o=r(srt,"electra"),srt.forEach(t),v5o=r(fLe," \u2014 "),JN=n(fLe,"A",{href:!0});var lrt=s(JN);F5o=r(lrt,"ElectraForCausalLM"),lrt.forEach(t),T5o=r(fLe," (ELECTRA model)"),fLe.forEach(t),M5o=i(Q),H_=n(Q,"LI",{});var gLe=s(H_);Nie=n(gLe,"STRONG",{});var irt=s(Nie);E5o=r(irt,"gpt2"),irt.forEach(t),C5o=r(gLe," \u2014 "),YN=n(gLe,"A",{href:!0});var drt=s(YN);w5o=r(drt,"GPT2LMHeadModel"),drt.forEach(t),A5o=r(gLe," (OpenAI GPT-2 model)"),gLe.forEach(t),y5o=i(Q),U_=n(Q,"LI",{});var hLe=s(U_);jie=n(hLe,"STRONG",{});var crt=s(jie);L5o=r(crt,"gpt_neo"),crt.forEach(t),x5o=r(hLe," \u2014 "),KN=n(hLe,"A",{href:!0});var mrt=s(KN);$5o=r(mrt,"GPTNeoForCausalLM"),mrt.forEach(t),k5o=r(hLe," (GPT Neo model)"),hLe.forEach(t),S5o=i(Q),J_=n(Q,"LI",{});var uLe=s(J_);Die=n(uLe,"STRONG",{});var frt=s(Die);R5o=r(frt,"gptj"),frt.forEach(t),P5o=r(uLe," \u2014 "),ZN=n(uLe,"A",{href:!0});var grt=s(ZN);B5o=r(grt,"GPTJForCausalLM"),grt.forEach(t),I5o=r(uLe," (GPT-J model)"),uLe.forEach(t),q5o=i(Q),Y_=n(Q,"LI",{});var pLe=s(Y_);Gie=n(pLe,"STRONG",{});var hrt=s(Gie);N5o=r(hrt,"marian"),hrt.forEach(t),j5o=r(pLe," \u2014 "),ej=n(pLe,"A",{href:!0});var urt=s(ej);D5o=r(urt,"MarianForCausalLM"),urt.forEach(t),G5o=r(pLe," (Marian model)"),pLe.forEach(t),O5o=i(Q),K_=n(Q,"LI",{});var _Le=s(K_);Oie=n(_Le,"STRONG",{});var prt=s(Oie);V5o=r(prt,"mbart"),prt.forEach(t),X5o=r(_Le," \u2014 "),oj=n(_Le,"A",{href:!0});var _rt=s(oj);z5o=r(_rt,"MBartForCausalLM"),_rt.forEach(t),W5o=r(_Le," (mBART model)"),_Le.forEach(t),Q5o=i(Q),Z_=n(Q,"LI",{});var bLe=s(Z_);Vie=n(bLe,"STRONG",{});var brt=s(Vie);H5o=r(brt,"megatron-bert"),brt.forEach(t),U5o=r(bLe," \u2014 "),rj=n(bLe,"A",{href:!0});var vrt=s(rj);J5o=r(vrt,"MegatronBertForCausalLM"),vrt.forEach(t),Y5o=r(bLe," (MegatronBert model)"),bLe.forEach(t),K5o=i(Q),eb=n(Q,"LI",{});var vLe=s(eb);Xie=n(vLe,"STRONG",{});var Frt=s(Xie);Z5o=r(Frt,"openai-gpt"),Frt.forEach(t),e3o=r(vLe," \u2014 "),tj=n(vLe,"A",{href:!0});var Trt=s(tj);o3o=r(Trt,"OpenAIGPTLMHeadModel"),Trt.forEach(t),r3o=r(vLe," (OpenAI GPT model)"),vLe.forEach(t),t3o=i(Q),ob=n(Q,"LI",{});var FLe=s(ob);zie=n(FLe,"STRONG",{});var Mrt=s(zie);a3o=r(Mrt,"opt"),Mrt.forEach(t),n3o=r(FLe," \u2014 "),aj=n(FLe,"A",{href:!0});var Ert=s(aj);s3o=r(Ert,"OPTForCausalLM"),Ert.forEach(t),l3o=r(FLe," (OPT model)"),FLe.forEach(t),i3o=i(Q),rb=n(Q,"LI",{});var TLe=s(rb);Wie=n(TLe,"STRONG",{});var Crt=s(Wie);d3o=r(Crt,"pegasus"),Crt.forEach(t),c3o=r(TLe," \u2014 "),nj=n(TLe,"A",{href:!0});var wrt=s(nj);m3o=r(wrt,"PegasusForCausalLM"),wrt.forEach(t),f3o=r(TLe," (Pegasus model)"),TLe.forEach(t),g3o=i(Q),tb=n(Q,"LI",{});var MLe=s(tb);Qie=n(MLe,"STRONG",{});var Art=s(Qie);h3o=r(Art,"plbart"),Art.forEach(t),u3o=r(MLe," \u2014 "),sj=n(MLe,"A",{href:!0});var yrt=s(sj);p3o=r(yrt,"PLBartForCausalLM"),yrt.forEach(t),_3o=r(MLe," (PLBart model)"),MLe.forEach(t),b3o=i(Q),ab=n(Q,"LI",{});var ELe=s(ab);Hie=n(ELe,"STRONG",{});var Lrt=s(Hie);v3o=r(Lrt,"prophetnet"),Lrt.forEach(t),F3o=r(ELe," \u2014 "),lj=n(ELe,"A",{href:!0});var xrt=s(lj);T3o=r(xrt,"ProphetNetForCausalLM"),xrt.forEach(t),M3o=r(ELe," (ProphetNet model)"),ELe.forEach(t),E3o=i(Q),nb=n(Q,"LI",{});var CLe=s(nb);Uie=n(CLe,"STRONG",{});var $rt=s(Uie);C3o=r($rt,"qdqbert"),$rt.forEach(t),w3o=r(CLe," \u2014 "),ij=n(CLe,"A",{href:!0});var krt=s(ij);A3o=r(krt,"QDQBertLMHeadModel"),krt.forEach(t),y3o=r(CLe," (QDQBert model)"),CLe.forEach(t),L3o=i(Q),sb=n(Q,"LI",{});var wLe=s(sb);Jie=n(wLe,"STRONG",{});var Srt=s(Jie);x3o=r(Srt,"reformer"),Srt.forEach(t),$3o=r(wLe," \u2014 "),dj=n(wLe,"A",{href:!0});var Rrt=s(dj);k3o=r(Rrt,"ReformerModelWithLMHead"),Rrt.forEach(t),S3o=r(wLe," (Reformer model)"),wLe.forEach(t),R3o=i(Q),lb=n(Q,"LI",{});var ALe=s(lb);Yie=n(ALe,"STRONG",{});var Prt=s(Yie);P3o=r(Prt,"rembert"),Prt.forEach(t),B3o=r(ALe," \u2014 "),cj=n(ALe,"A",{href:!0});var Brt=s(cj);I3o=r(Brt,"RemBertForCausalLM"),Brt.forEach(t),q3o=r(ALe," (RemBERT model)"),ALe.forEach(t),N3o=i(Q),ib=n(Q,"LI",{});var yLe=s(ib);Kie=n(yLe,"STRONG",{});var Irt=s(Kie);j3o=r(Irt,"roberta"),Irt.forEach(t),D3o=r(yLe," \u2014 "),mj=n(yLe,"A",{href:!0});var qrt=s(mj);G3o=r(qrt,"RobertaForCausalLM"),qrt.forEach(t),O3o=r(yLe," (RoBERTa model)"),yLe.forEach(t),V3o=i(Q),db=n(Q,"LI",{});var LLe=s(db);Zie=n(LLe,"STRONG",{});var Nrt=s(Zie);X3o=r(Nrt,"roformer"),Nrt.forEach(t),z3o=r(LLe," \u2014 "),fj=n(LLe,"A",{href:!0});var jrt=s(fj);W3o=r(jrt,"RoFormerForCausalLM"),jrt.forEach(t),Q3o=r(LLe," (RoFormer model)"),LLe.forEach(t),H3o=i(Q),cb=n(Q,"LI",{});var xLe=s(cb);ede=n(xLe,"STRONG",{});var Drt=s(ede);U3o=r(Drt,"speech_to_text_2"),Drt.forEach(t),J3o=r(xLe," \u2014 "),gj=n(xLe,"A",{href:!0});var Grt=s(gj);Y3o=r(Grt,"Speech2Text2ForCausalLM"),Grt.forEach(t),K3o=r(xLe," (Speech2Text2 model)"),xLe.forEach(t),Z3o=i(Q),mb=n(Q,"LI",{});var $Le=s(mb);ode=n($Le,"STRONG",{});var Ort=s(ode);ewo=r(Ort,"transfo-xl"),Ort.forEach(t),owo=r($Le," \u2014 "),hj=n($Le,"A",{href:!0});var Vrt=s(hj);rwo=r(Vrt,"TransfoXLLMHeadModel"),Vrt.forEach(t),two=r($Le," (Transformer-XL model)"),$Le.forEach(t),awo=i(Q),fb=n(Q,"LI",{});var kLe=s(fb);rde=n(kLe,"STRONG",{});var Xrt=s(rde);nwo=r(Xrt,"trocr"),Xrt.forEach(t),swo=r(kLe," \u2014 "),uj=n(kLe,"A",{href:!0});var zrt=s(uj);lwo=r(zrt,"TrOCRForCausalLM"),zrt.forEach(t),iwo=r(kLe," (TrOCR model)"),kLe.forEach(t),dwo=i(Q),gb=n(Q,"LI",{});var SLe=s(gb);tde=n(SLe,"STRONG",{});var Wrt=s(tde);cwo=r(Wrt,"xglm"),Wrt.forEach(t),mwo=r(SLe," \u2014 "),pj=n(SLe,"A",{href:!0});var Qrt=s(pj);fwo=r(Qrt,"XGLMForCausalLM"),Qrt.forEach(t),gwo=r(SLe," (XGLM model)"),SLe.forEach(t),hwo=i(Q),hb=n(Q,"LI",{});var RLe=s(hb);ade=n(RLe,"STRONG",{});var Hrt=s(ade);uwo=r(Hrt,"xlm"),Hrt.forEach(t),pwo=r(RLe," \u2014 "),_j=n(RLe,"A",{href:!0});var Urt=s(_j);_wo=r(Urt,"XLMWithLMHeadModel"),Urt.forEach(t),bwo=r(RLe," (XLM model)"),RLe.forEach(t),vwo=i(Q),ub=n(Q,"LI",{});var PLe=s(ub);nde=n(PLe,"STRONG",{});var Jrt=s(nde);Fwo=r(Jrt,"xlm-prophetnet"),Jrt.forEach(t),Two=r(PLe," \u2014 "),bj=n(PLe,"A",{href:!0});var Yrt=s(bj);Mwo=r(Yrt,"XLMProphetNetForCausalLM"),Yrt.forEach(t),Ewo=r(PLe," (XLMProphetNet model)"),PLe.forEach(t),Cwo=i(Q),pb=n(Q,"LI",{});var BLe=s(pb);sde=n(BLe,"STRONG",{});var Krt=s(sde);wwo=r(Krt,"xlm-roberta"),Krt.forEach(t),Awo=r(BLe," \u2014 "),vj=n(BLe,"A",{href:!0});var Zrt=s(vj);ywo=r(Zrt,"XLMRobertaForCausalLM"),Zrt.forEach(t),Lwo=r(BLe," (XLM-RoBERTa model)"),BLe.forEach(t),xwo=i(Q),_b=n(Q,"LI",{});var ILe=s(_b);lde=n(ILe,"STRONG",{});var ett=s(lde);$wo=r(ett,"xlm-roberta-xl"),ett.forEach(t),kwo=r(ILe," \u2014 "),Fj=n(ILe,"A",{href:!0});var ott=s(Fj);Swo=r(ott,"XLMRobertaXLForCausalLM"),ott.forEach(t),Rwo=r(ILe," (XLM-RoBERTa-XL model)"),ILe.forEach(t),Pwo=i(Q),bb=n(Q,"LI",{});var qLe=s(bb);ide=n(qLe,"STRONG",{});var rtt=s(ide);Bwo=r(rtt,"xlnet"),rtt.forEach(t),Iwo=r(qLe," \u2014 "),Tj=n(qLe,"A",{href:!0});var ttt=s(Tj);qwo=r(ttt,"XLNetLMHeadModel"),ttt.forEach(t),Nwo=r(qLe," (XLNet model)"),qLe.forEach(t),Q.forEach(t),jwo=i(ta),vb=n(ta,"P",{});var NLe=s(vb);Dwo=r(NLe,"The model is set in evaluation mode by default using "),dde=n(NLe,"CODE",{});var att=s(dde);Gwo=r(att,"model.eval()"),att.forEach(t),Owo=r(NLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cde=n(NLe,"CODE",{});var ntt=s(cde);Vwo=r(ntt,"model.train()"),ntt.forEach(t),NLe.forEach(t),Xwo=i(ta),T(Fb.$$.fragment,ta),ta.forEach(t),Os.forEach(t),HIe=i(m),Ri=n(m,"H2",{class:!0});var KNe=s(Ri);Tb=n(KNe,"A",{id:!0,class:!0,href:!0});var stt=s(Tb);mde=n(stt,"SPAN",{});var ltt=s(mde);T(Uy.$$.fragment,ltt),ltt.forEach(t),stt.forEach(t),zwo=i(KNe),fde=n(KNe,"SPAN",{});var itt=s(fde);Wwo=r(itt,"AutoModelForMaskedLM"),itt.forEach(t),KNe.forEach(t),UIe=i(m),ko=n(m,"DIV",{class:!0});var Vs=s(ko);T(Jy.$$.fragment,Vs),Qwo=i(Vs),Pi=n(Vs,"P",{});var BK=s(Pi);Hwo=r(BK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Mj=n(BK,"A",{href:!0});var dtt=s(Mj);Uwo=r(dtt,"from_pretrained()"),dtt.forEach(t),Jwo=r(BK," class method or the "),Ej=n(BK,"A",{href:!0});var ctt=s(Ej);Ywo=r(ctt,"from_config()"),ctt.forEach(t),Kwo=r(BK,` class
method.`),BK.forEach(t),Zwo=i(Vs),Yy=n(Vs,"P",{});var ZNe=s(Yy);eAo=r(ZNe,"This class cannot be instantiated directly using "),gde=n(ZNe,"CODE",{});var mtt=s(gde);oAo=r(mtt,"__init__()"),mtt.forEach(t),rAo=r(ZNe," (throws an error)."),ZNe.forEach(t),tAo=i(Vs),st=n(Vs,"DIV",{class:!0});var b6=s(st);T(Ky.$$.fragment,b6),aAo=i(b6),hde=n(b6,"P",{});var ftt=s(hde);nAo=r(ftt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),ftt.forEach(t),sAo=i(b6),Bi=n(b6,"P",{});var IK=s(Bi);lAo=r(IK,`Note:
Loading a model from its configuration file does `),ude=n(IK,"STRONG",{});var gtt=s(ude);iAo=r(gtt,"not"),gtt.forEach(t),dAo=r(IK,` load the model weights. It only affects the
model\u2019s configuration. Use `),Cj=n(IK,"A",{href:!0});var htt=s(Cj);cAo=r(htt,"from_pretrained()"),htt.forEach(t),mAo=r(IK," to load the model weights."),IK.forEach(t),fAo=i(b6),T(Mb.$$.fragment,b6),b6.forEach(t),gAo=i(Vs),Ze=n(Vs,"DIV",{class:!0});var aa=s(Ze);T(Zy.$$.fragment,aa),hAo=i(aa),pde=n(aa,"P",{});var utt=s(pde);uAo=r(utt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),utt.forEach(t),pAo=i(aa),ka=n(aa,"P",{});var v6=s(ka);_Ao=r(v6,"The model class to instantiate is selected based on the "),_de=n(v6,"CODE",{});var ptt=s(_de);bAo=r(ptt,"model_type"),ptt.forEach(t),vAo=r(v6,` property of the config object (either
passed as an argument or loaded from `),bde=n(v6,"CODE",{});var _tt=s(bde);FAo=r(_tt,"pretrained_model_name_or_path"),_tt.forEach(t),TAo=r(v6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vde=n(v6,"CODE",{});var btt=s(vde);MAo=r(btt,"pretrained_model_name_or_path"),btt.forEach(t),EAo=r(v6,":"),v6.forEach(t),CAo=i(aa),W=n(aa,"UL",{});var H=s(W);Eb=n(H,"LI",{});var jLe=s(Eb);Fde=n(jLe,"STRONG",{});var vtt=s(Fde);wAo=r(vtt,"albert"),vtt.forEach(t),AAo=r(jLe," \u2014 "),wj=n(jLe,"A",{href:!0});var Ftt=s(wj);yAo=r(Ftt,"AlbertForMaskedLM"),Ftt.forEach(t),LAo=r(jLe," (ALBERT model)"),jLe.forEach(t),xAo=i(H),Cb=n(H,"LI",{});var DLe=s(Cb);Tde=n(DLe,"STRONG",{});var Ttt=s(Tde);$Ao=r(Ttt,"bart"),Ttt.forEach(t),kAo=r(DLe," \u2014 "),Aj=n(DLe,"A",{href:!0});var Mtt=s(Aj);SAo=r(Mtt,"BartForConditionalGeneration"),Mtt.forEach(t),RAo=r(DLe," (BART model)"),DLe.forEach(t),PAo=i(H),wb=n(H,"LI",{});var GLe=s(wb);Mde=n(GLe,"STRONG",{});var Ett=s(Mde);BAo=r(Ett,"bert"),Ett.forEach(t),IAo=r(GLe," \u2014 "),yj=n(GLe,"A",{href:!0});var Ctt=s(yj);qAo=r(Ctt,"BertForMaskedLM"),Ctt.forEach(t),NAo=r(GLe," (BERT model)"),GLe.forEach(t),jAo=i(H),Ab=n(H,"LI",{});var OLe=s(Ab);Ede=n(OLe,"STRONG",{});var wtt=s(Ede);DAo=r(wtt,"big_bird"),wtt.forEach(t),GAo=r(OLe," \u2014 "),Lj=n(OLe,"A",{href:!0});var Att=s(Lj);OAo=r(Att,"BigBirdForMaskedLM"),Att.forEach(t),VAo=r(OLe," (BigBird model)"),OLe.forEach(t),XAo=i(H),yb=n(H,"LI",{});var VLe=s(yb);Cde=n(VLe,"STRONG",{});var ytt=s(Cde);zAo=r(ytt,"camembert"),ytt.forEach(t),WAo=r(VLe," \u2014 "),xj=n(VLe,"A",{href:!0});var Ltt=s(xj);QAo=r(Ltt,"CamembertForMaskedLM"),Ltt.forEach(t),HAo=r(VLe," (CamemBERT model)"),VLe.forEach(t),UAo=i(H),Lb=n(H,"LI",{});var XLe=s(Lb);wde=n(XLe,"STRONG",{});var xtt=s(wde);JAo=r(xtt,"convbert"),xtt.forEach(t),YAo=r(XLe," \u2014 "),$j=n(XLe,"A",{href:!0});var $tt=s($j);KAo=r($tt,"ConvBertForMaskedLM"),$tt.forEach(t),ZAo=r(XLe," (ConvBERT model)"),XLe.forEach(t),e6o=i(H),xb=n(H,"LI",{});var zLe=s(xb);Ade=n(zLe,"STRONG",{});var ktt=s(Ade);o6o=r(ktt,"data2vec-text"),ktt.forEach(t),r6o=r(zLe," \u2014 "),kj=n(zLe,"A",{href:!0});var Stt=s(kj);t6o=r(Stt,"Data2VecTextForMaskedLM"),Stt.forEach(t),a6o=r(zLe," (Data2VecText model)"),zLe.forEach(t),n6o=i(H),$b=n(H,"LI",{});var WLe=s($b);yde=n(WLe,"STRONG",{});var Rtt=s(yde);s6o=r(Rtt,"deberta"),Rtt.forEach(t),l6o=r(WLe," \u2014 "),Sj=n(WLe,"A",{href:!0});var Ptt=s(Sj);i6o=r(Ptt,"DebertaForMaskedLM"),Ptt.forEach(t),d6o=r(WLe," (DeBERTa model)"),WLe.forEach(t),c6o=i(H),kb=n(H,"LI",{});var QLe=s(kb);Lde=n(QLe,"STRONG",{});var Btt=s(Lde);m6o=r(Btt,"deberta-v2"),Btt.forEach(t),f6o=r(QLe," \u2014 "),Rj=n(QLe,"A",{href:!0});var Itt=s(Rj);g6o=r(Itt,"DebertaV2ForMaskedLM"),Itt.forEach(t),h6o=r(QLe," (DeBERTa-v2 model)"),QLe.forEach(t),u6o=i(H),Sb=n(H,"LI",{});var HLe=s(Sb);xde=n(HLe,"STRONG",{});var qtt=s(xde);p6o=r(qtt,"distilbert"),qtt.forEach(t),_6o=r(HLe," \u2014 "),Pj=n(HLe,"A",{href:!0});var Ntt=s(Pj);b6o=r(Ntt,"DistilBertForMaskedLM"),Ntt.forEach(t),v6o=r(HLe," (DistilBERT model)"),HLe.forEach(t),F6o=i(H),Rb=n(H,"LI",{});var ULe=s(Rb);$de=n(ULe,"STRONG",{});var jtt=s($de);T6o=r(jtt,"electra"),jtt.forEach(t),M6o=r(ULe," \u2014 "),Bj=n(ULe,"A",{href:!0});var Dtt=s(Bj);E6o=r(Dtt,"ElectraForMaskedLM"),Dtt.forEach(t),C6o=r(ULe," (ELECTRA model)"),ULe.forEach(t),w6o=i(H),Pb=n(H,"LI",{});var JLe=s(Pb);kde=n(JLe,"STRONG",{});var Gtt=s(kde);A6o=r(Gtt,"flaubert"),Gtt.forEach(t),y6o=r(JLe," \u2014 "),Ij=n(JLe,"A",{href:!0});var Ott=s(Ij);L6o=r(Ott,"FlaubertWithLMHeadModel"),Ott.forEach(t),x6o=r(JLe," (FlauBERT model)"),JLe.forEach(t),$6o=i(H),Bb=n(H,"LI",{});var YLe=s(Bb);Sde=n(YLe,"STRONG",{});var Vtt=s(Sde);k6o=r(Vtt,"fnet"),Vtt.forEach(t),S6o=r(YLe," \u2014 "),qj=n(YLe,"A",{href:!0});var Xtt=s(qj);R6o=r(Xtt,"FNetForMaskedLM"),Xtt.forEach(t),P6o=r(YLe," (FNet model)"),YLe.forEach(t),B6o=i(H),Ib=n(H,"LI",{});var KLe=s(Ib);Rde=n(KLe,"STRONG",{});var ztt=s(Rde);I6o=r(ztt,"funnel"),ztt.forEach(t),q6o=r(KLe," \u2014 "),Nj=n(KLe,"A",{href:!0});var Wtt=s(Nj);N6o=r(Wtt,"FunnelForMaskedLM"),Wtt.forEach(t),j6o=r(KLe," (Funnel Transformer model)"),KLe.forEach(t),D6o=i(H),qb=n(H,"LI",{});var ZLe=s(qb);Pde=n(ZLe,"STRONG",{});var Qtt=s(Pde);G6o=r(Qtt,"ibert"),Qtt.forEach(t),O6o=r(ZLe," \u2014 "),jj=n(ZLe,"A",{href:!0});var Htt=s(jj);V6o=r(Htt,"IBertForMaskedLM"),Htt.forEach(t),X6o=r(ZLe," (I-BERT model)"),ZLe.forEach(t),z6o=i(H),Nb=n(H,"LI",{});var e8e=s(Nb);Bde=n(e8e,"STRONG",{});var Utt=s(Bde);W6o=r(Utt,"layoutlm"),Utt.forEach(t),Q6o=r(e8e," \u2014 "),Dj=n(e8e,"A",{href:!0});var Jtt=s(Dj);H6o=r(Jtt,"LayoutLMForMaskedLM"),Jtt.forEach(t),U6o=r(e8e," (LayoutLM model)"),e8e.forEach(t),J6o=i(H),jb=n(H,"LI",{});var o8e=s(jb);Ide=n(o8e,"STRONG",{});var Ytt=s(Ide);Y6o=r(Ytt,"longformer"),Ytt.forEach(t),K6o=r(o8e," \u2014 "),Gj=n(o8e,"A",{href:!0});var Ktt=s(Gj);Z6o=r(Ktt,"LongformerForMaskedLM"),Ktt.forEach(t),e0o=r(o8e," (Longformer model)"),o8e.forEach(t),o0o=i(H),Db=n(H,"LI",{});var r8e=s(Db);qde=n(r8e,"STRONG",{});var Ztt=s(qde);r0o=r(Ztt,"mbart"),Ztt.forEach(t),t0o=r(r8e," \u2014 "),Oj=n(r8e,"A",{href:!0});var eat=s(Oj);a0o=r(eat,"MBartForConditionalGeneration"),eat.forEach(t),n0o=r(r8e," (mBART model)"),r8e.forEach(t),s0o=i(H),Gb=n(H,"LI",{});var t8e=s(Gb);Nde=n(t8e,"STRONG",{});var oat=s(Nde);l0o=r(oat,"megatron-bert"),oat.forEach(t),i0o=r(t8e," \u2014 "),Vj=n(t8e,"A",{href:!0});var rat=s(Vj);d0o=r(rat,"MegatronBertForMaskedLM"),rat.forEach(t),c0o=r(t8e," (MegatronBert model)"),t8e.forEach(t),m0o=i(H),Ob=n(H,"LI",{});var a8e=s(Ob);jde=n(a8e,"STRONG",{});var tat=s(jde);f0o=r(tat,"mobilebert"),tat.forEach(t),g0o=r(a8e," \u2014 "),Xj=n(a8e,"A",{href:!0});var aat=s(Xj);h0o=r(aat,"MobileBertForMaskedLM"),aat.forEach(t),u0o=r(a8e," (MobileBERT model)"),a8e.forEach(t),p0o=i(H),Vb=n(H,"LI",{});var n8e=s(Vb);Dde=n(n8e,"STRONG",{});var nat=s(Dde);_0o=r(nat,"mpnet"),nat.forEach(t),b0o=r(n8e," \u2014 "),zj=n(n8e,"A",{href:!0});var sat=s(zj);v0o=r(sat,"MPNetForMaskedLM"),sat.forEach(t),F0o=r(n8e," (MPNet model)"),n8e.forEach(t),T0o=i(H),Xb=n(H,"LI",{});var s8e=s(Xb);Gde=n(s8e,"STRONG",{});var lat=s(Gde);M0o=r(lat,"nystromformer"),lat.forEach(t),E0o=r(s8e," \u2014 "),Wj=n(s8e,"A",{href:!0});var iat=s(Wj);C0o=r(iat,"NystromformerForMaskedLM"),iat.forEach(t),w0o=r(s8e," (Nystromformer model)"),s8e.forEach(t),A0o=i(H),zb=n(H,"LI",{});var l8e=s(zb);Ode=n(l8e,"STRONG",{});var dat=s(Ode);y0o=r(dat,"perceiver"),dat.forEach(t),L0o=r(l8e," \u2014 "),Qj=n(l8e,"A",{href:!0});var cat=s(Qj);x0o=r(cat,"PerceiverForMaskedLM"),cat.forEach(t),$0o=r(l8e," (Perceiver model)"),l8e.forEach(t),k0o=i(H),Wb=n(H,"LI",{});var i8e=s(Wb);Vde=n(i8e,"STRONG",{});var mat=s(Vde);S0o=r(mat,"qdqbert"),mat.forEach(t),R0o=r(i8e," \u2014 "),Hj=n(i8e,"A",{href:!0});var fat=s(Hj);P0o=r(fat,"QDQBertForMaskedLM"),fat.forEach(t),B0o=r(i8e," (QDQBert model)"),i8e.forEach(t),I0o=i(H),Qb=n(H,"LI",{});var d8e=s(Qb);Xde=n(d8e,"STRONG",{});var gat=s(Xde);q0o=r(gat,"reformer"),gat.forEach(t),N0o=r(d8e," \u2014 "),Uj=n(d8e,"A",{href:!0});var hat=s(Uj);j0o=r(hat,"ReformerForMaskedLM"),hat.forEach(t),D0o=r(d8e," (Reformer model)"),d8e.forEach(t),G0o=i(H),Hb=n(H,"LI",{});var c8e=s(Hb);zde=n(c8e,"STRONG",{});var uat=s(zde);O0o=r(uat,"rembert"),uat.forEach(t),V0o=r(c8e," \u2014 "),Jj=n(c8e,"A",{href:!0});var pat=s(Jj);X0o=r(pat,"RemBertForMaskedLM"),pat.forEach(t),z0o=r(c8e," (RemBERT model)"),c8e.forEach(t),W0o=i(H),Ub=n(H,"LI",{});var m8e=s(Ub);Wde=n(m8e,"STRONG",{});var _at=s(Wde);Q0o=r(_at,"roberta"),_at.forEach(t),H0o=r(m8e," \u2014 "),Yj=n(m8e,"A",{href:!0});var bat=s(Yj);U0o=r(bat,"RobertaForMaskedLM"),bat.forEach(t),J0o=r(m8e," (RoBERTa model)"),m8e.forEach(t),Y0o=i(H),Jb=n(H,"LI",{});var f8e=s(Jb);Qde=n(f8e,"STRONG",{});var vat=s(Qde);K0o=r(vat,"roformer"),vat.forEach(t),Z0o=r(f8e," \u2014 "),Kj=n(f8e,"A",{href:!0});var Fat=s(Kj);eyo=r(Fat,"RoFormerForMaskedLM"),Fat.forEach(t),oyo=r(f8e," (RoFormer model)"),f8e.forEach(t),ryo=i(H),Yb=n(H,"LI",{});var g8e=s(Yb);Hde=n(g8e,"STRONG",{});var Tat=s(Hde);tyo=r(Tat,"squeezebert"),Tat.forEach(t),ayo=r(g8e," \u2014 "),Zj=n(g8e,"A",{href:!0});var Mat=s(Zj);nyo=r(Mat,"SqueezeBertForMaskedLM"),Mat.forEach(t),syo=r(g8e," (SqueezeBERT model)"),g8e.forEach(t),lyo=i(H),Kb=n(H,"LI",{});var h8e=s(Kb);Ude=n(h8e,"STRONG",{});var Eat=s(Ude);iyo=r(Eat,"tapas"),Eat.forEach(t),dyo=r(h8e," \u2014 "),eD=n(h8e,"A",{href:!0});var Cat=s(eD);cyo=r(Cat,"TapasForMaskedLM"),Cat.forEach(t),myo=r(h8e," (TAPAS model)"),h8e.forEach(t),fyo=i(H),Zb=n(H,"LI",{});var u8e=s(Zb);Jde=n(u8e,"STRONG",{});var wat=s(Jde);gyo=r(wat,"wav2vec2"),wat.forEach(t),hyo=r(u8e," \u2014 "),Yde=n(u8e,"CODE",{});var Aat=s(Yde);uyo=r(Aat,"Wav2Vec2ForMaskedLM"),Aat.forEach(t),pyo=r(u8e," (Wav2Vec2 model)"),u8e.forEach(t),_yo=i(H),e2=n(H,"LI",{});var p8e=s(e2);Kde=n(p8e,"STRONG",{});var yat=s(Kde);byo=r(yat,"xlm"),yat.forEach(t),vyo=r(p8e," \u2014 "),oD=n(p8e,"A",{href:!0});var Lat=s(oD);Fyo=r(Lat,"XLMWithLMHeadModel"),Lat.forEach(t),Tyo=r(p8e," (XLM model)"),p8e.forEach(t),Myo=i(H),o2=n(H,"LI",{});var _8e=s(o2);Zde=n(_8e,"STRONG",{});var xat=s(Zde);Eyo=r(xat,"xlm-roberta"),xat.forEach(t),Cyo=r(_8e," \u2014 "),rD=n(_8e,"A",{href:!0});var $at=s(rD);wyo=r($at,"XLMRobertaForMaskedLM"),$at.forEach(t),Ayo=r(_8e," (XLM-RoBERTa model)"),_8e.forEach(t),yyo=i(H),r2=n(H,"LI",{});var b8e=s(r2);ece=n(b8e,"STRONG",{});var kat=s(ece);Lyo=r(kat,"xlm-roberta-xl"),kat.forEach(t),xyo=r(b8e," \u2014 "),tD=n(b8e,"A",{href:!0});var Sat=s(tD);$yo=r(Sat,"XLMRobertaXLForMaskedLM"),Sat.forEach(t),kyo=r(b8e," (XLM-RoBERTa-XL model)"),b8e.forEach(t),Syo=i(H),t2=n(H,"LI",{});var v8e=s(t2);oce=n(v8e,"STRONG",{});var Rat=s(oce);Ryo=r(Rat,"yoso"),Rat.forEach(t),Pyo=r(v8e," \u2014 "),aD=n(v8e,"A",{href:!0});var Pat=s(aD);Byo=r(Pat,"YosoForMaskedLM"),Pat.forEach(t),Iyo=r(v8e," (YOSO model)"),v8e.forEach(t),H.forEach(t),qyo=i(aa),a2=n(aa,"P",{});var F8e=s(a2);Nyo=r(F8e,"The model is set in evaluation mode by default using "),rce=n(F8e,"CODE",{});var Bat=s(rce);jyo=r(Bat,"model.eval()"),Bat.forEach(t),Dyo=r(F8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tce=n(F8e,"CODE",{});var Iat=s(tce);Gyo=r(Iat,"model.train()"),Iat.forEach(t),F8e.forEach(t),Oyo=i(aa),T(n2.$$.fragment,aa),aa.forEach(t),Vs.forEach(t),JIe=i(m),Ii=n(m,"H2",{class:!0});var eje=s(Ii);s2=n(eje,"A",{id:!0,class:!0,href:!0});var qat=s(s2);ace=n(qat,"SPAN",{});var Nat=s(ace);T(eL.$$.fragment,Nat),Nat.forEach(t),qat.forEach(t),Vyo=i(eje),nce=n(eje,"SPAN",{});var jat=s(nce);Xyo=r(jat,"AutoModelForSeq2SeqLM"),jat.forEach(t),eje.forEach(t),YIe=i(m),So=n(m,"DIV",{class:!0});var Xs=s(So);T(oL.$$.fragment,Xs),zyo=i(Xs),qi=n(Xs,"P",{});var qK=s(qi);Wyo=r(qK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),nD=n(qK,"A",{href:!0});var Dat=s(nD);Qyo=r(Dat,"from_pretrained()"),Dat.forEach(t),Hyo=r(qK," class method or the "),sD=n(qK,"A",{href:!0});var Gat=s(sD);Uyo=r(Gat,"from_config()"),Gat.forEach(t),Jyo=r(qK,` class
method.`),qK.forEach(t),Yyo=i(Xs),rL=n(Xs,"P",{});var oje=s(rL);Kyo=r(oje,"This class cannot be instantiated directly using "),sce=n(oje,"CODE",{});var Oat=s(sce);Zyo=r(Oat,"__init__()"),Oat.forEach(t),eLo=r(oje," (throws an error)."),oje.forEach(t),oLo=i(Xs),lt=n(Xs,"DIV",{class:!0});var F6=s(lt);T(tL.$$.fragment,F6),rLo=i(F6),lce=n(F6,"P",{});var Vat=s(lce);tLo=r(Vat,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Vat.forEach(t),aLo=i(F6),Ni=n(F6,"P",{});var NK=s(Ni);nLo=r(NK,`Note:
Loading a model from its configuration file does `),ice=n(NK,"STRONG",{});var Xat=s(ice);sLo=r(Xat,"not"),Xat.forEach(t),lLo=r(NK,` load the model weights. It only affects the
model\u2019s configuration. Use `),lD=n(NK,"A",{href:!0});var zat=s(lD);iLo=r(zat,"from_pretrained()"),zat.forEach(t),dLo=r(NK," to load the model weights."),NK.forEach(t),cLo=i(F6),T(l2.$$.fragment,F6),F6.forEach(t),mLo=i(Xs),eo=n(Xs,"DIV",{class:!0});var na=s(eo);T(aL.$$.fragment,na),fLo=i(na),dce=n(na,"P",{});var Wat=s(dce);gLo=r(Wat,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Wat.forEach(t),hLo=i(na),Sa=n(na,"P",{});var T6=s(Sa);uLo=r(T6,"The model class to instantiate is selected based on the "),cce=n(T6,"CODE",{});var Qat=s(cce);pLo=r(Qat,"model_type"),Qat.forEach(t),_Lo=r(T6,` property of the config object (either
passed as an argument or loaded from `),mce=n(T6,"CODE",{});var Hat=s(mce);bLo=r(Hat,"pretrained_model_name_or_path"),Hat.forEach(t),vLo=r(T6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fce=n(T6,"CODE",{});var Uat=s(fce);FLo=r(Uat,"pretrained_model_name_or_path"),Uat.forEach(t),TLo=r(T6,":"),T6.forEach(t),MLo=i(na),pe=n(na,"UL",{});var ve=s(pe);i2=n(ve,"LI",{});var T8e=s(i2);gce=n(T8e,"STRONG",{});var Jat=s(gce);ELo=r(Jat,"bart"),Jat.forEach(t),CLo=r(T8e," \u2014 "),iD=n(T8e,"A",{href:!0});var Yat=s(iD);wLo=r(Yat,"BartForConditionalGeneration"),Yat.forEach(t),ALo=r(T8e," (BART model)"),T8e.forEach(t),yLo=i(ve),d2=n(ve,"LI",{});var M8e=s(d2);hce=n(M8e,"STRONG",{});var Kat=s(hce);LLo=r(Kat,"bigbird_pegasus"),Kat.forEach(t),xLo=r(M8e," \u2014 "),dD=n(M8e,"A",{href:!0});var Zat=s(dD);$Lo=r(Zat,"BigBirdPegasusForConditionalGeneration"),Zat.forEach(t),kLo=r(M8e," (BigBirdPegasus model)"),M8e.forEach(t),SLo=i(ve),c2=n(ve,"LI",{});var E8e=s(c2);uce=n(E8e,"STRONG",{});var ent=s(uce);RLo=r(ent,"blenderbot"),ent.forEach(t),PLo=r(E8e," \u2014 "),cD=n(E8e,"A",{href:!0});var ont=s(cD);BLo=r(ont,"BlenderbotForConditionalGeneration"),ont.forEach(t),ILo=r(E8e," (Blenderbot model)"),E8e.forEach(t),qLo=i(ve),m2=n(ve,"LI",{});var C8e=s(m2);pce=n(C8e,"STRONG",{});var rnt=s(pce);NLo=r(rnt,"blenderbot-small"),rnt.forEach(t),jLo=r(C8e," \u2014 "),mD=n(C8e,"A",{href:!0});var tnt=s(mD);DLo=r(tnt,"BlenderbotSmallForConditionalGeneration"),tnt.forEach(t),GLo=r(C8e," (BlenderbotSmall model)"),C8e.forEach(t),OLo=i(ve),f2=n(ve,"LI",{});var w8e=s(f2);_ce=n(w8e,"STRONG",{});var ant=s(_ce);VLo=r(ant,"encoder-decoder"),ant.forEach(t),XLo=r(w8e," \u2014 "),fD=n(w8e,"A",{href:!0});var nnt=s(fD);zLo=r(nnt,"EncoderDecoderModel"),nnt.forEach(t),WLo=r(w8e," (Encoder decoder model)"),w8e.forEach(t),QLo=i(ve),g2=n(ve,"LI",{});var A8e=s(g2);bce=n(A8e,"STRONG",{});var snt=s(bce);HLo=r(snt,"fsmt"),snt.forEach(t),ULo=r(A8e," \u2014 "),gD=n(A8e,"A",{href:!0});var lnt=s(gD);JLo=r(lnt,"FSMTForConditionalGeneration"),lnt.forEach(t),YLo=r(A8e," (FairSeq Machine-Translation model)"),A8e.forEach(t),KLo=i(ve),h2=n(ve,"LI",{});var y8e=s(h2);vce=n(y8e,"STRONG",{});var int=s(vce);ZLo=r(int,"led"),int.forEach(t),e8o=r(y8e," \u2014 "),hD=n(y8e,"A",{href:!0});var dnt=s(hD);o8o=r(dnt,"LEDForConditionalGeneration"),dnt.forEach(t),r8o=r(y8e," (LED model)"),y8e.forEach(t),t8o=i(ve),u2=n(ve,"LI",{});var L8e=s(u2);Fce=n(L8e,"STRONG",{});var cnt=s(Fce);a8o=r(cnt,"m2m_100"),cnt.forEach(t),n8o=r(L8e," \u2014 "),uD=n(L8e,"A",{href:!0});var mnt=s(uD);s8o=r(mnt,"M2M100ForConditionalGeneration"),mnt.forEach(t),l8o=r(L8e," (M2M100 model)"),L8e.forEach(t),i8o=i(ve),p2=n(ve,"LI",{});var x8e=s(p2);Tce=n(x8e,"STRONG",{});var fnt=s(Tce);d8o=r(fnt,"marian"),fnt.forEach(t),c8o=r(x8e," \u2014 "),pD=n(x8e,"A",{href:!0});var gnt=s(pD);m8o=r(gnt,"MarianMTModel"),gnt.forEach(t),f8o=r(x8e," (Marian model)"),x8e.forEach(t),g8o=i(ve),_2=n(ve,"LI",{});var $8e=s(_2);Mce=n($8e,"STRONG",{});var hnt=s(Mce);h8o=r(hnt,"mbart"),hnt.forEach(t),u8o=r($8e," \u2014 "),_D=n($8e,"A",{href:!0});var unt=s(_D);p8o=r(unt,"MBartForConditionalGeneration"),unt.forEach(t),_8o=r($8e," (mBART model)"),$8e.forEach(t),b8o=i(ve),b2=n(ve,"LI",{});var k8e=s(b2);Ece=n(k8e,"STRONG",{});var pnt=s(Ece);v8o=r(pnt,"mt5"),pnt.forEach(t),F8o=r(k8e," \u2014 "),bD=n(k8e,"A",{href:!0});var _nt=s(bD);T8o=r(_nt,"MT5ForConditionalGeneration"),_nt.forEach(t),M8o=r(k8e," (mT5 model)"),k8e.forEach(t),E8o=i(ve),v2=n(ve,"LI",{});var S8e=s(v2);Cce=n(S8e,"STRONG",{});var bnt=s(Cce);C8o=r(bnt,"pegasus"),bnt.forEach(t),w8o=r(S8e," \u2014 "),vD=n(S8e,"A",{href:!0});var vnt=s(vD);A8o=r(vnt,"PegasusForConditionalGeneration"),vnt.forEach(t),y8o=r(S8e," (Pegasus model)"),S8e.forEach(t),L8o=i(ve),F2=n(ve,"LI",{});var R8e=s(F2);wce=n(R8e,"STRONG",{});var Fnt=s(wce);x8o=r(Fnt,"plbart"),Fnt.forEach(t),$8o=r(R8e," \u2014 "),FD=n(R8e,"A",{href:!0});var Tnt=s(FD);k8o=r(Tnt,"PLBartForConditionalGeneration"),Tnt.forEach(t),S8o=r(R8e," (PLBart model)"),R8e.forEach(t),R8o=i(ve),T2=n(ve,"LI",{});var P8e=s(T2);Ace=n(P8e,"STRONG",{});var Mnt=s(Ace);P8o=r(Mnt,"prophetnet"),Mnt.forEach(t),B8o=r(P8e," \u2014 "),TD=n(P8e,"A",{href:!0});var Ent=s(TD);I8o=r(Ent,"ProphetNetForConditionalGeneration"),Ent.forEach(t),q8o=r(P8e," (ProphetNet model)"),P8e.forEach(t),N8o=i(ve),M2=n(ve,"LI",{});var B8e=s(M2);yce=n(B8e,"STRONG",{});var Cnt=s(yce);j8o=r(Cnt,"t5"),Cnt.forEach(t),D8o=r(B8e," \u2014 "),MD=n(B8e,"A",{href:!0});var wnt=s(MD);G8o=r(wnt,"T5ForConditionalGeneration"),wnt.forEach(t),O8o=r(B8e," (T5 model)"),B8e.forEach(t),V8o=i(ve),E2=n(ve,"LI",{});var I8e=s(E2);Lce=n(I8e,"STRONG",{});var Ant=s(Lce);X8o=r(Ant,"xlm-prophetnet"),Ant.forEach(t),z8o=r(I8e," \u2014 "),ED=n(I8e,"A",{href:!0});var ynt=s(ED);W8o=r(ynt,"XLMProphetNetForConditionalGeneration"),ynt.forEach(t),Q8o=r(I8e," (XLMProphetNet model)"),I8e.forEach(t),ve.forEach(t),H8o=i(na),C2=n(na,"P",{});var q8e=s(C2);U8o=r(q8e,"The model is set in evaluation mode by default using "),xce=n(q8e,"CODE",{});var Lnt=s(xce);J8o=r(Lnt,"model.eval()"),Lnt.forEach(t),Y8o=r(q8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$ce=n(q8e,"CODE",{});var xnt=s($ce);K8o=r(xnt,"model.train()"),xnt.forEach(t),q8e.forEach(t),Z8o=i(na),T(w2.$$.fragment,na),na.forEach(t),Xs.forEach(t),KIe=i(m),ji=n(m,"H2",{class:!0});var rje=s(ji);A2=n(rje,"A",{id:!0,class:!0,href:!0});var $nt=s(A2);kce=n($nt,"SPAN",{});var knt=s(kce);T(nL.$$.fragment,knt),knt.forEach(t),$nt.forEach(t),exo=i(rje),Sce=n(rje,"SPAN",{});var Snt=s(Sce);oxo=r(Snt,"AutoModelForSequenceClassification"),Snt.forEach(t),rje.forEach(t),ZIe=i(m),Ro=n(m,"DIV",{class:!0});var zs=s(Ro);T(sL.$$.fragment,zs),rxo=i(zs),Di=n(zs,"P",{});var jK=s(Di);txo=r(jK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),CD=n(jK,"A",{href:!0});var Rnt=s(CD);axo=r(Rnt,"from_pretrained()"),Rnt.forEach(t),nxo=r(jK," class method or the "),wD=n(jK,"A",{href:!0});var Pnt=s(wD);sxo=r(Pnt,"from_config()"),Pnt.forEach(t),lxo=r(jK,` class
method.`),jK.forEach(t),ixo=i(zs),lL=n(zs,"P",{});var tje=s(lL);dxo=r(tje,"This class cannot be instantiated directly using "),Rce=n(tje,"CODE",{});var Bnt=s(Rce);cxo=r(Bnt,"__init__()"),Bnt.forEach(t),mxo=r(tje," (throws an error)."),tje.forEach(t),fxo=i(zs),it=n(zs,"DIV",{class:!0});var M6=s(it);T(iL.$$.fragment,M6),gxo=i(M6),Pce=n(M6,"P",{});var Int=s(Pce);hxo=r(Int,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Int.forEach(t),uxo=i(M6),Gi=n(M6,"P",{});var DK=s(Gi);pxo=r(DK,`Note:
Loading a model from its configuration file does `),Bce=n(DK,"STRONG",{});var qnt=s(Bce);_xo=r(qnt,"not"),qnt.forEach(t),bxo=r(DK,` load the model weights. It only affects the
model\u2019s configuration. Use `),AD=n(DK,"A",{href:!0});var Nnt=s(AD);vxo=r(Nnt,"from_pretrained()"),Nnt.forEach(t),Fxo=r(DK," to load the model weights."),DK.forEach(t),Txo=i(M6),T(y2.$$.fragment,M6),M6.forEach(t),Mxo=i(zs),oo=n(zs,"DIV",{class:!0});var sa=s(oo);T(dL.$$.fragment,sa),Exo=i(sa),Ice=n(sa,"P",{});var jnt=s(Ice);Cxo=r(jnt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),jnt.forEach(t),wxo=i(sa),Ra=n(sa,"P",{});var E6=s(Ra);Axo=r(E6,"The model class to instantiate is selected based on the "),qce=n(E6,"CODE",{});var Dnt=s(qce);yxo=r(Dnt,"model_type"),Dnt.forEach(t),Lxo=r(E6,` property of the config object (either
passed as an argument or loaded from `),Nce=n(E6,"CODE",{});var Gnt=s(Nce);xxo=r(Gnt,"pretrained_model_name_or_path"),Gnt.forEach(t),$xo=r(E6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jce=n(E6,"CODE",{});var Ont=s(jce);kxo=r(Ont,"pretrained_model_name_or_path"),Ont.forEach(t),Sxo=r(E6,":"),E6.forEach(t),Rxo=i(sa),q=n(sa,"UL",{});var j=s(q);L2=n(j,"LI",{});var N8e=s(L2);Dce=n(N8e,"STRONG",{});var Vnt=s(Dce);Pxo=r(Vnt,"albert"),Vnt.forEach(t),Bxo=r(N8e," \u2014 "),yD=n(N8e,"A",{href:!0});var Xnt=s(yD);Ixo=r(Xnt,"AlbertForSequenceClassification"),Xnt.forEach(t),qxo=r(N8e," (ALBERT model)"),N8e.forEach(t),Nxo=i(j),x2=n(j,"LI",{});var j8e=s(x2);Gce=n(j8e,"STRONG",{});var znt=s(Gce);jxo=r(znt,"bart"),znt.forEach(t),Dxo=r(j8e," \u2014 "),LD=n(j8e,"A",{href:!0});var Wnt=s(LD);Gxo=r(Wnt,"BartForSequenceClassification"),Wnt.forEach(t),Oxo=r(j8e," (BART model)"),j8e.forEach(t),Vxo=i(j),$2=n(j,"LI",{});var D8e=s($2);Oce=n(D8e,"STRONG",{});var Qnt=s(Oce);Xxo=r(Qnt,"bert"),Qnt.forEach(t),zxo=r(D8e," \u2014 "),xD=n(D8e,"A",{href:!0});var Hnt=s(xD);Wxo=r(Hnt,"BertForSequenceClassification"),Hnt.forEach(t),Qxo=r(D8e," (BERT model)"),D8e.forEach(t),Hxo=i(j),k2=n(j,"LI",{});var G8e=s(k2);Vce=n(G8e,"STRONG",{});var Unt=s(Vce);Uxo=r(Unt,"big_bird"),Unt.forEach(t),Jxo=r(G8e," \u2014 "),$D=n(G8e,"A",{href:!0});var Jnt=s($D);Yxo=r(Jnt,"BigBirdForSequenceClassification"),Jnt.forEach(t),Kxo=r(G8e," (BigBird model)"),G8e.forEach(t),Zxo=i(j),S2=n(j,"LI",{});var O8e=s(S2);Xce=n(O8e,"STRONG",{});var Ynt=s(Xce);e7o=r(Ynt,"bigbird_pegasus"),Ynt.forEach(t),o7o=r(O8e," \u2014 "),kD=n(O8e,"A",{href:!0});var Knt=s(kD);r7o=r(Knt,"BigBirdPegasusForSequenceClassification"),Knt.forEach(t),t7o=r(O8e," (BigBirdPegasus model)"),O8e.forEach(t),a7o=i(j),R2=n(j,"LI",{});var V8e=s(R2);zce=n(V8e,"STRONG",{});var Znt=s(zce);n7o=r(Znt,"camembert"),Znt.forEach(t),s7o=r(V8e," \u2014 "),SD=n(V8e,"A",{href:!0});var est=s(SD);l7o=r(est,"CamembertForSequenceClassification"),est.forEach(t),i7o=r(V8e," (CamemBERT model)"),V8e.forEach(t),d7o=i(j),P2=n(j,"LI",{});var X8e=s(P2);Wce=n(X8e,"STRONG",{});var ost=s(Wce);c7o=r(ost,"canine"),ost.forEach(t),m7o=r(X8e," \u2014 "),RD=n(X8e,"A",{href:!0});var rst=s(RD);f7o=r(rst,"CanineForSequenceClassification"),rst.forEach(t),g7o=r(X8e," (Canine model)"),X8e.forEach(t),h7o=i(j),B2=n(j,"LI",{});var z8e=s(B2);Qce=n(z8e,"STRONG",{});var tst=s(Qce);u7o=r(tst,"convbert"),tst.forEach(t),p7o=r(z8e," \u2014 "),PD=n(z8e,"A",{href:!0});var ast=s(PD);_7o=r(ast,"ConvBertForSequenceClassification"),ast.forEach(t),b7o=r(z8e," (ConvBERT model)"),z8e.forEach(t),v7o=i(j),I2=n(j,"LI",{});var W8e=s(I2);Hce=n(W8e,"STRONG",{});var nst=s(Hce);F7o=r(nst,"ctrl"),nst.forEach(t),T7o=r(W8e," \u2014 "),BD=n(W8e,"A",{href:!0});var sst=s(BD);M7o=r(sst,"CTRLForSequenceClassification"),sst.forEach(t),E7o=r(W8e," (CTRL model)"),W8e.forEach(t),C7o=i(j),q2=n(j,"LI",{});var Q8e=s(q2);Uce=n(Q8e,"STRONG",{});var lst=s(Uce);w7o=r(lst,"data2vec-text"),lst.forEach(t),A7o=r(Q8e," \u2014 "),ID=n(Q8e,"A",{href:!0});var ist=s(ID);y7o=r(ist,"Data2VecTextForSequenceClassification"),ist.forEach(t),L7o=r(Q8e," (Data2VecText model)"),Q8e.forEach(t),x7o=i(j),N2=n(j,"LI",{});var H8e=s(N2);Jce=n(H8e,"STRONG",{});var dst=s(Jce);$7o=r(dst,"deberta"),dst.forEach(t),k7o=r(H8e," \u2014 "),qD=n(H8e,"A",{href:!0});var cst=s(qD);S7o=r(cst,"DebertaForSequenceClassification"),cst.forEach(t),R7o=r(H8e," (DeBERTa model)"),H8e.forEach(t),P7o=i(j),j2=n(j,"LI",{});var U8e=s(j2);Yce=n(U8e,"STRONG",{});var mst=s(Yce);B7o=r(mst,"deberta-v2"),mst.forEach(t),I7o=r(U8e," \u2014 "),ND=n(U8e,"A",{href:!0});var fst=s(ND);q7o=r(fst,"DebertaV2ForSequenceClassification"),fst.forEach(t),N7o=r(U8e," (DeBERTa-v2 model)"),U8e.forEach(t),j7o=i(j),D2=n(j,"LI",{});var J8e=s(D2);Kce=n(J8e,"STRONG",{});var gst=s(Kce);D7o=r(gst,"distilbert"),gst.forEach(t),G7o=r(J8e," \u2014 "),jD=n(J8e,"A",{href:!0});var hst=s(jD);O7o=r(hst,"DistilBertForSequenceClassification"),hst.forEach(t),V7o=r(J8e," (DistilBERT model)"),J8e.forEach(t),X7o=i(j),G2=n(j,"LI",{});var Y8e=s(G2);Zce=n(Y8e,"STRONG",{});var ust=s(Zce);z7o=r(ust,"electra"),ust.forEach(t),W7o=r(Y8e," \u2014 "),DD=n(Y8e,"A",{href:!0});var pst=s(DD);Q7o=r(pst,"ElectraForSequenceClassification"),pst.forEach(t),H7o=r(Y8e," (ELECTRA model)"),Y8e.forEach(t),U7o=i(j),O2=n(j,"LI",{});var K8e=s(O2);eme=n(K8e,"STRONG",{});var _st=s(eme);J7o=r(_st,"flaubert"),_st.forEach(t),Y7o=r(K8e," \u2014 "),GD=n(K8e,"A",{href:!0});var bst=s(GD);K7o=r(bst,"FlaubertForSequenceClassification"),bst.forEach(t),Z7o=r(K8e," (FlauBERT model)"),K8e.forEach(t),e9o=i(j),V2=n(j,"LI",{});var Z8e=s(V2);ome=n(Z8e,"STRONG",{});var vst=s(ome);o9o=r(vst,"fnet"),vst.forEach(t),r9o=r(Z8e," \u2014 "),OD=n(Z8e,"A",{href:!0});var Fst=s(OD);t9o=r(Fst,"FNetForSequenceClassification"),Fst.forEach(t),a9o=r(Z8e," (FNet model)"),Z8e.forEach(t),n9o=i(j),X2=n(j,"LI",{});var exe=s(X2);rme=n(exe,"STRONG",{});var Tst=s(rme);s9o=r(Tst,"funnel"),Tst.forEach(t),l9o=r(exe," \u2014 "),VD=n(exe,"A",{href:!0});var Mst=s(VD);i9o=r(Mst,"FunnelForSequenceClassification"),Mst.forEach(t),d9o=r(exe," (Funnel Transformer model)"),exe.forEach(t),c9o=i(j),z2=n(j,"LI",{});var oxe=s(z2);tme=n(oxe,"STRONG",{});var Est=s(tme);m9o=r(Est,"gpt2"),Est.forEach(t),f9o=r(oxe," \u2014 "),XD=n(oxe,"A",{href:!0});var Cst=s(XD);g9o=r(Cst,"GPT2ForSequenceClassification"),Cst.forEach(t),h9o=r(oxe," (OpenAI GPT-2 model)"),oxe.forEach(t),u9o=i(j),W2=n(j,"LI",{});var rxe=s(W2);ame=n(rxe,"STRONG",{});var wst=s(ame);p9o=r(wst,"gpt_neo"),wst.forEach(t),_9o=r(rxe," \u2014 "),zD=n(rxe,"A",{href:!0});var Ast=s(zD);b9o=r(Ast,"GPTNeoForSequenceClassification"),Ast.forEach(t),v9o=r(rxe," (GPT Neo model)"),rxe.forEach(t),F9o=i(j),Q2=n(j,"LI",{});var txe=s(Q2);nme=n(txe,"STRONG",{});var yst=s(nme);T9o=r(yst,"gptj"),yst.forEach(t),M9o=r(txe," \u2014 "),WD=n(txe,"A",{href:!0});var Lst=s(WD);E9o=r(Lst,"GPTJForSequenceClassification"),Lst.forEach(t),C9o=r(txe," (GPT-J model)"),txe.forEach(t),w9o=i(j),H2=n(j,"LI",{});var axe=s(H2);sme=n(axe,"STRONG",{});var xst=s(sme);A9o=r(xst,"ibert"),xst.forEach(t),y9o=r(axe," \u2014 "),QD=n(axe,"A",{href:!0});var $st=s(QD);L9o=r($st,"IBertForSequenceClassification"),$st.forEach(t),x9o=r(axe," (I-BERT model)"),axe.forEach(t),$9o=i(j),U2=n(j,"LI",{});var nxe=s(U2);lme=n(nxe,"STRONG",{});var kst=s(lme);k9o=r(kst,"layoutlm"),kst.forEach(t),S9o=r(nxe," \u2014 "),HD=n(nxe,"A",{href:!0});var Sst=s(HD);R9o=r(Sst,"LayoutLMForSequenceClassification"),Sst.forEach(t),P9o=r(nxe," (LayoutLM model)"),nxe.forEach(t),B9o=i(j),J2=n(j,"LI",{});var sxe=s(J2);ime=n(sxe,"STRONG",{});var Rst=s(ime);I9o=r(Rst,"layoutlmv2"),Rst.forEach(t),q9o=r(sxe," \u2014 "),UD=n(sxe,"A",{href:!0});var Pst=s(UD);N9o=r(Pst,"LayoutLMv2ForSequenceClassification"),Pst.forEach(t),j9o=r(sxe," (LayoutLMv2 model)"),sxe.forEach(t),D9o=i(j),Y2=n(j,"LI",{});var lxe=s(Y2);dme=n(lxe,"STRONG",{});var Bst=s(dme);G9o=r(Bst,"led"),Bst.forEach(t),O9o=r(lxe," \u2014 "),JD=n(lxe,"A",{href:!0});var Ist=s(JD);V9o=r(Ist,"LEDForSequenceClassification"),Ist.forEach(t),X9o=r(lxe," (LED model)"),lxe.forEach(t),z9o=i(j),K2=n(j,"LI",{});var ixe=s(K2);cme=n(ixe,"STRONG",{});var qst=s(cme);W9o=r(qst,"longformer"),qst.forEach(t),Q9o=r(ixe," \u2014 "),YD=n(ixe,"A",{href:!0});var Nst=s(YD);H9o=r(Nst,"LongformerForSequenceClassification"),Nst.forEach(t),U9o=r(ixe," (Longformer model)"),ixe.forEach(t),J9o=i(j),Z2=n(j,"LI",{});var dxe=s(Z2);mme=n(dxe,"STRONG",{});var jst=s(mme);Y9o=r(jst,"mbart"),jst.forEach(t),K9o=r(dxe," \u2014 "),KD=n(dxe,"A",{href:!0});var Dst=s(KD);Z9o=r(Dst,"MBartForSequenceClassification"),Dst.forEach(t),e$o=r(dxe," (mBART model)"),dxe.forEach(t),o$o=i(j),ev=n(j,"LI",{});var cxe=s(ev);fme=n(cxe,"STRONG",{});var Gst=s(fme);r$o=r(Gst,"megatron-bert"),Gst.forEach(t),t$o=r(cxe," \u2014 "),ZD=n(cxe,"A",{href:!0});var Ost=s(ZD);a$o=r(Ost,"MegatronBertForSequenceClassification"),Ost.forEach(t),n$o=r(cxe," (MegatronBert model)"),cxe.forEach(t),s$o=i(j),ov=n(j,"LI",{});var mxe=s(ov);gme=n(mxe,"STRONG",{});var Vst=s(gme);l$o=r(Vst,"mobilebert"),Vst.forEach(t),i$o=r(mxe," \u2014 "),eG=n(mxe,"A",{href:!0});var Xst=s(eG);d$o=r(Xst,"MobileBertForSequenceClassification"),Xst.forEach(t),c$o=r(mxe," (MobileBERT model)"),mxe.forEach(t),m$o=i(j),rv=n(j,"LI",{});var fxe=s(rv);hme=n(fxe,"STRONG",{});var zst=s(hme);f$o=r(zst,"mpnet"),zst.forEach(t),g$o=r(fxe," \u2014 "),oG=n(fxe,"A",{href:!0});var Wst=s(oG);h$o=r(Wst,"MPNetForSequenceClassification"),Wst.forEach(t),u$o=r(fxe," (MPNet model)"),fxe.forEach(t),p$o=i(j),tv=n(j,"LI",{});var gxe=s(tv);ume=n(gxe,"STRONG",{});var Qst=s(ume);_$o=r(Qst,"nystromformer"),Qst.forEach(t),b$o=r(gxe," \u2014 "),rG=n(gxe,"A",{href:!0});var Hst=s(rG);v$o=r(Hst,"NystromformerForSequenceClassification"),Hst.forEach(t),F$o=r(gxe," (Nystromformer model)"),gxe.forEach(t),T$o=i(j),av=n(j,"LI",{});var hxe=s(av);pme=n(hxe,"STRONG",{});var Ust=s(pme);M$o=r(Ust,"openai-gpt"),Ust.forEach(t),E$o=r(hxe," \u2014 "),tG=n(hxe,"A",{href:!0});var Jst=s(tG);C$o=r(Jst,"OpenAIGPTForSequenceClassification"),Jst.forEach(t),w$o=r(hxe," (OpenAI GPT model)"),hxe.forEach(t),A$o=i(j),nv=n(j,"LI",{});var uxe=s(nv);_me=n(uxe,"STRONG",{});var Yst=s(_me);y$o=r(Yst,"perceiver"),Yst.forEach(t),L$o=r(uxe," \u2014 "),aG=n(uxe,"A",{href:!0});var Kst=s(aG);x$o=r(Kst,"PerceiverForSequenceClassification"),Kst.forEach(t),$$o=r(uxe," (Perceiver model)"),uxe.forEach(t),k$o=i(j),sv=n(j,"LI",{});var pxe=s(sv);bme=n(pxe,"STRONG",{});var Zst=s(bme);S$o=r(Zst,"plbart"),Zst.forEach(t),R$o=r(pxe," \u2014 "),nG=n(pxe,"A",{href:!0});var elt=s(nG);P$o=r(elt,"PLBartForSequenceClassification"),elt.forEach(t),B$o=r(pxe," (PLBart model)"),pxe.forEach(t),I$o=i(j),lv=n(j,"LI",{});var _xe=s(lv);vme=n(_xe,"STRONG",{});var olt=s(vme);q$o=r(olt,"qdqbert"),olt.forEach(t),N$o=r(_xe," \u2014 "),sG=n(_xe,"A",{href:!0});var rlt=s(sG);j$o=r(rlt,"QDQBertForSequenceClassification"),rlt.forEach(t),D$o=r(_xe," (QDQBert model)"),_xe.forEach(t),G$o=i(j),iv=n(j,"LI",{});var bxe=s(iv);Fme=n(bxe,"STRONG",{});var tlt=s(Fme);O$o=r(tlt,"reformer"),tlt.forEach(t),V$o=r(bxe," \u2014 "),lG=n(bxe,"A",{href:!0});var alt=s(lG);X$o=r(alt,"ReformerForSequenceClassification"),alt.forEach(t),z$o=r(bxe," (Reformer model)"),bxe.forEach(t),W$o=i(j),dv=n(j,"LI",{});var vxe=s(dv);Tme=n(vxe,"STRONG",{});var nlt=s(Tme);Q$o=r(nlt,"rembert"),nlt.forEach(t),H$o=r(vxe," \u2014 "),iG=n(vxe,"A",{href:!0});var slt=s(iG);U$o=r(slt,"RemBertForSequenceClassification"),slt.forEach(t),J$o=r(vxe," (RemBERT model)"),vxe.forEach(t),Y$o=i(j),cv=n(j,"LI",{});var Fxe=s(cv);Mme=n(Fxe,"STRONG",{});var llt=s(Mme);K$o=r(llt,"roberta"),llt.forEach(t),Z$o=r(Fxe," \u2014 "),dG=n(Fxe,"A",{href:!0});var ilt=s(dG);eko=r(ilt,"RobertaForSequenceClassification"),ilt.forEach(t),oko=r(Fxe," (RoBERTa model)"),Fxe.forEach(t),rko=i(j),mv=n(j,"LI",{});var Txe=s(mv);Eme=n(Txe,"STRONG",{});var dlt=s(Eme);tko=r(dlt,"roformer"),dlt.forEach(t),ako=r(Txe," \u2014 "),cG=n(Txe,"A",{href:!0});var clt=s(cG);nko=r(clt,"RoFormerForSequenceClassification"),clt.forEach(t),sko=r(Txe," (RoFormer model)"),Txe.forEach(t),lko=i(j),fv=n(j,"LI",{});var Mxe=s(fv);Cme=n(Mxe,"STRONG",{});var mlt=s(Cme);iko=r(mlt,"squeezebert"),mlt.forEach(t),dko=r(Mxe," \u2014 "),mG=n(Mxe,"A",{href:!0});var flt=s(mG);cko=r(flt,"SqueezeBertForSequenceClassification"),flt.forEach(t),mko=r(Mxe," (SqueezeBERT model)"),Mxe.forEach(t),fko=i(j),gv=n(j,"LI",{});var Exe=s(gv);wme=n(Exe,"STRONG",{});var glt=s(wme);gko=r(glt,"tapas"),glt.forEach(t),hko=r(Exe," \u2014 "),fG=n(Exe,"A",{href:!0});var hlt=s(fG);uko=r(hlt,"TapasForSequenceClassification"),hlt.forEach(t),pko=r(Exe," (TAPAS model)"),Exe.forEach(t),_ko=i(j),hv=n(j,"LI",{});var Cxe=s(hv);Ame=n(Cxe,"STRONG",{});var ult=s(Ame);bko=r(ult,"transfo-xl"),ult.forEach(t),vko=r(Cxe," \u2014 "),gG=n(Cxe,"A",{href:!0});var plt=s(gG);Fko=r(plt,"TransfoXLForSequenceClassification"),plt.forEach(t),Tko=r(Cxe," (Transformer-XL model)"),Cxe.forEach(t),Mko=i(j),uv=n(j,"LI",{});var wxe=s(uv);yme=n(wxe,"STRONG",{});var _lt=s(yme);Eko=r(_lt,"xlm"),_lt.forEach(t),Cko=r(wxe," \u2014 "),hG=n(wxe,"A",{href:!0});var blt=s(hG);wko=r(blt,"XLMForSequenceClassification"),blt.forEach(t),Ako=r(wxe," (XLM model)"),wxe.forEach(t),yko=i(j),pv=n(j,"LI",{});var Axe=s(pv);Lme=n(Axe,"STRONG",{});var vlt=s(Lme);Lko=r(vlt,"xlm-roberta"),vlt.forEach(t),xko=r(Axe," \u2014 "),uG=n(Axe,"A",{href:!0});var Flt=s(uG);$ko=r(Flt,"XLMRobertaForSequenceClassification"),Flt.forEach(t),kko=r(Axe," (XLM-RoBERTa model)"),Axe.forEach(t),Sko=i(j),_v=n(j,"LI",{});var yxe=s(_v);xme=n(yxe,"STRONG",{});var Tlt=s(xme);Rko=r(Tlt,"xlm-roberta-xl"),Tlt.forEach(t),Pko=r(yxe," \u2014 "),pG=n(yxe,"A",{href:!0});var Mlt=s(pG);Bko=r(Mlt,"XLMRobertaXLForSequenceClassification"),Mlt.forEach(t),Iko=r(yxe," (XLM-RoBERTa-XL model)"),yxe.forEach(t),qko=i(j),bv=n(j,"LI",{});var Lxe=s(bv);$me=n(Lxe,"STRONG",{});var Elt=s($me);Nko=r(Elt,"xlnet"),Elt.forEach(t),jko=r(Lxe," \u2014 "),_G=n(Lxe,"A",{href:!0});var Clt=s(_G);Dko=r(Clt,"XLNetForSequenceClassification"),Clt.forEach(t),Gko=r(Lxe," (XLNet model)"),Lxe.forEach(t),Oko=i(j),vv=n(j,"LI",{});var xxe=s(vv);kme=n(xxe,"STRONG",{});var wlt=s(kme);Vko=r(wlt,"yoso"),wlt.forEach(t),Xko=r(xxe," \u2014 "),bG=n(xxe,"A",{href:!0});var Alt=s(bG);zko=r(Alt,"YosoForSequenceClassification"),Alt.forEach(t),Wko=r(xxe," (YOSO model)"),xxe.forEach(t),j.forEach(t),Qko=i(sa),Fv=n(sa,"P",{});var $xe=s(Fv);Hko=r($xe,"The model is set in evaluation mode by default using "),Sme=n($xe,"CODE",{});var ylt=s(Sme);Uko=r(ylt,"model.eval()"),ylt.forEach(t),Jko=r($xe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rme=n($xe,"CODE",{});var Llt=s(Rme);Yko=r(Llt,"model.train()"),Llt.forEach(t),$xe.forEach(t),Kko=i(sa),T(Tv.$$.fragment,sa),sa.forEach(t),zs.forEach(t),eqe=i(m),Oi=n(m,"H2",{class:!0});var aje=s(Oi);Mv=n(aje,"A",{id:!0,class:!0,href:!0});var xlt=s(Mv);Pme=n(xlt,"SPAN",{});var $lt=s(Pme);T(cL.$$.fragment,$lt),$lt.forEach(t),xlt.forEach(t),Zko=i(aje),Bme=n(aje,"SPAN",{});var klt=s(Bme);eSo=r(klt,"AutoModelForMultipleChoice"),klt.forEach(t),aje.forEach(t),oqe=i(m),Po=n(m,"DIV",{class:!0});var Ws=s(Po);T(mL.$$.fragment,Ws),oSo=i(Ws),Vi=n(Ws,"P",{});var GK=s(Vi);rSo=r(GK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),vG=n(GK,"A",{href:!0});var Slt=s(vG);tSo=r(Slt,"from_pretrained()"),Slt.forEach(t),aSo=r(GK," class method or the "),FG=n(GK,"A",{href:!0});var Rlt=s(FG);nSo=r(Rlt,"from_config()"),Rlt.forEach(t),sSo=r(GK,` class
method.`),GK.forEach(t),lSo=i(Ws),fL=n(Ws,"P",{});var nje=s(fL);iSo=r(nje,"This class cannot be instantiated directly using "),Ime=n(nje,"CODE",{});var Plt=s(Ime);dSo=r(Plt,"__init__()"),Plt.forEach(t),cSo=r(nje," (throws an error)."),nje.forEach(t),mSo=i(Ws),dt=n(Ws,"DIV",{class:!0});var C6=s(dt);T(gL.$$.fragment,C6),fSo=i(C6),qme=n(C6,"P",{});var Blt=s(qme);gSo=r(Blt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Blt.forEach(t),hSo=i(C6),Xi=n(C6,"P",{});var OK=s(Xi);uSo=r(OK,`Note:
Loading a model from its configuration file does `),Nme=n(OK,"STRONG",{});var Ilt=s(Nme);pSo=r(Ilt,"not"),Ilt.forEach(t),_So=r(OK,` load the model weights. It only affects the
model\u2019s configuration. Use `),TG=n(OK,"A",{href:!0});var qlt=s(TG);bSo=r(qlt,"from_pretrained()"),qlt.forEach(t),vSo=r(OK," to load the model weights."),OK.forEach(t),FSo=i(C6),T(Ev.$$.fragment,C6),C6.forEach(t),TSo=i(Ws),ro=n(Ws,"DIV",{class:!0});var la=s(ro);T(hL.$$.fragment,la),MSo=i(la),jme=n(la,"P",{});var Nlt=s(jme);ESo=r(Nlt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Nlt.forEach(t),CSo=i(la),Pa=n(la,"P",{});var w6=s(Pa);wSo=r(w6,"The model class to instantiate is selected based on the "),Dme=n(w6,"CODE",{});var jlt=s(Dme);ASo=r(jlt,"model_type"),jlt.forEach(t),ySo=r(w6,` property of the config object (either
passed as an argument or loaded from `),Gme=n(w6,"CODE",{});var Dlt=s(Gme);LSo=r(Dlt,"pretrained_model_name_or_path"),Dlt.forEach(t),xSo=r(w6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ome=n(w6,"CODE",{});var Glt=s(Ome);$So=r(Glt,"pretrained_model_name_or_path"),Glt.forEach(t),kSo=r(w6,":"),w6.forEach(t),SSo=i(la),Y=n(la,"UL",{});var K=s(Y);Cv=n(K,"LI",{});var kxe=s(Cv);Vme=n(kxe,"STRONG",{});var Olt=s(Vme);RSo=r(Olt,"albert"),Olt.forEach(t),PSo=r(kxe," \u2014 "),MG=n(kxe,"A",{href:!0});var Vlt=s(MG);BSo=r(Vlt,"AlbertForMultipleChoice"),Vlt.forEach(t),ISo=r(kxe," (ALBERT model)"),kxe.forEach(t),qSo=i(K),wv=n(K,"LI",{});var Sxe=s(wv);Xme=n(Sxe,"STRONG",{});var Xlt=s(Xme);NSo=r(Xlt,"bert"),Xlt.forEach(t),jSo=r(Sxe," \u2014 "),EG=n(Sxe,"A",{href:!0});var zlt=s(EG);DSo=r(zlt,"BertForMultipleChoice"),zlt.forEach(t),GSo=r(Sxe," (BERT model)"),Sxe.forEach(t),OSo=i(K),Av=n(K,"LI",{});var Rxe=s(Av);zme=n(Rxe,"STRONG",{});var Wlt=s(zme);VSo=r(Wlt,"big_bird"),Wlt.forEach(t),XSo=r(Rxe," \u2014 "),CG=n(Rxe,"A",{href:!0});var Qlt=s(CG);zSo=r(Qlt,"BigBirdForMultipleChoice"),Qlt.forEach(t),WSo=r(Rxe," (BigBird model)"),Rxe.forEach(t),QSo=i(K),yv=n(K,"LI",{});var Pxe=s(yv);Wme=n(Pxe,"STRONG",{});var Hlt=s(Wme);HSo=r(Hlt,"camembert"),Hlt.forEach(t),USo=r(Pxe," \u2014 "),wG=n(Pxe,"A",{href:!0});var Ult=s(wG);JSo=r(Ult,"CamembertForMultipleChoice"),Ult.forEach(t),YSo=r(Pxe," (CamemBERT model)"),Pxe.forEach(t),KSo=i(K),Lv=n(K,"LI",{});var Bxe=s(Lv);Qme=n(Bxe,"STRONG",{});var Jlt=s(Qme);ZSo=r(Jlt,"canine"),Jlt.forEach(t),eRo=r(Bxe," \u2014 "),AG=n(Bxe,"A",{href:!0});var Ylt=s(AG);oRo=r(Ylt,"CanineForMultipleChoice"),Ylt.forEach(t),rRo=r(Bxe," (Canine model)"),Bxe.forEach(t),tRo=i(K),xv=n(K,"LI",{});var Ixe=s(xv);Hme=n(Ixe,"STRONG",{});var Klt=s(Hme);aRo=r(Klt,"convbert"),Klt.forEach(t),nRo=r(Ixe," \u2014 "),yG=n(Ixe,"A",{href:!0});var Zlt=s(yG);sRo=r(Zlt,"ConvBertForMultipleChoice"),Zlt.forEach(t),lRo=r(Ixe," (ConvBERT model)"),Ixe.forEach(t),iRo=i(K),$v=n(K,"LI",{});var qxe=s($v);Ume=n(qxe,"STRONG",{});var eit=s(Ume);dRo=r(eit,"data2vec-text"),eit.forEach(t),cRo=r(qxe," \u2014 "),LG=n(qxe,"A",{href:!0});var oit=s(LG);mRo=r(oit,"Data2VecTextForMultipleChoice"),oit.forEach(t),fRo=r(qxe," (Data2VecText model)"),qxe.forEach(t),gRo=i(K),kv=n(K,"LI",{});var Nxe=s(kv);Jme=n(Nxe,"STRONG",{});var rit=s(Jme);hRo=r(rit,"deberta-v2"),rit.forEach(t),uRo=r(Nxe," \u2014 "),xG=n(Nxe,"A",{href:!0});var tit=s(xG);pRo=r(tit,"DebertaV2ForMultipleChoice"),tit.forEach(t),_Ro=r(Nxe," (DeBERTa-v2 model)"),Nxe.forEach(t),bRo=i(K),Sv=n(K,"LI",{});var jxe=s(Sv);Yme=n(jxe,"STRONG",{});var ait=s(Yme);vRo=r(ait,"distilbert"),ait.forEach(t),FRo=r(jxe," \u2014 "),$G=n(jxe,"A",{href:!0});var nit=s($G);TRo=r(nit,"DistilBertForMultipleChoice"),nit.forEach(t),MRo=r(jxe," (DistilBERT model)"),jxe.forEach(t),ERo=i(K),Rv=n(K,"LI",{});var Dxe=s(Rv);Kme=n(Dxe,"STRONG",{});var sit=s(Kme);CRo=r(sit,"electra"),sit.forEach(t),wRo=r(Dxe," \u2014 "),kG=n(Dxe,"A",{href:!0});var lit=s(kG);ARo=r(lit,"ElectraForMultipleChoice"),lit.forEach(t),yRo=r(Dxe," (ELECTRA model)"),Dxe.forEach(t),LRo=i(K),Pv=n(K,"LI",{});var Gxe=s(Pv);Zme=n(Gxe,"STRONG",{});var iit=s(Zme);xRo=r(iit,"flaubert"),iit.forEach(t),$Ro=r(Gxe," \u2014 "),SG=n(Gxe,"A",{href:!0});var dit=s(SG);kRo=r(dit,"FlaubertForMultipleChoice"),dit.forEach(t),SRo=r(Gxe," (FlauBERT model)"),Gxe.forEach(t),RRo=i(K),Bv=n(K,"LI",{});var Oxe=s(Bv);efe=n(Oxe,"STRONG",{});var cit=s(efe);PRo=r(cit,"fnet"),cit.forEach(t),BRo=r(Oxe," \u2014 "),RG=n(Oxe,"A",{href:!0});var mit=s(RG);IRo=r(mit,"FNetForMultipleChoice"),mit.forEach(t),qRo=r(Oxe," (FNet model)"),Oxe.forEach(t),NRo=i(K),Iv=n(K,"LI",{});var Vxe=s(Iv);ofe=n(Vxe,"STRONG",{});var fit=s(ofe);jRo=r(fit,"funnel"),fit.forEach(t),DRo=r(Vxe," \u2014 "),PG=n(Vxe,"A",{href:!0});var git=s(PG);GRo=r(git,"FunnelForMultipleChoice"),git.forEach(t),ORo=r(Vxe," (Funnel Transformer model)"),Vxe.forEach(t),VRo=i(K),qv=n(K,"LI",{});var Xxe=s(qv);rfe=n(Xxe,"STRONG",{});var hit=s(rfe);XRo=r(hit,"ibert"),hit.forEach(t),zRo=r(Xxe," \u2014 "),BG=n(Xxe,"A",{href:!0});var uit=s(BG);WRo=r(uit,"IBertForMultipleChoice"),uit.forEach(t),QRo=r(Xxe," (I-BERT model)"),Xxe.forEach(t),HRo=i(K),Nv=n(K,"LI",{});var zxe=s(Nv);tfe=n(zxe,"STRONG",{});var pit=s(tfe);URo=r(pit,"longformer"),pit.forEach(t),JRo=r(zxe," \u2014 "),IG=n(zxe,"A",{href:!0});var _it=s(IG);YRo=r(_it,"LongformerForMultipleChoice"),_it.forEach(t),KRo=r(zxe," (Longformer model)"),zxe.forEach(t),ZRo=i(K),jv=n(K,"LI",{});var Wxe=s(jv);afe=n(Wxe,"STRONG",{});var bit=s(afe);ePo=r(bit,"megatron-bert"),bit.forEach(t),oPo=r(Wxe," \u2014 "),qG=n(Wxe,"A",{href:!0});var vit=s(qG);rPo=r(vit,"MegatronBertForMultipleChoice"),vit.forEach(t),tPo=r(Wxe," (MegatronBert model)"),Wxe.forEach(t),aPo=i(K),Dv=n(K,"LI",{});var Qxe=s(Dv);nfe=n(Qxe,"STRONG",{});var Fit=s(nfe);nPo=r(Fit,"mobilebert"),Fit.forEach(t),sPo=r(Qxe," \u2014 "),NG=n(Qxe,"A",{href:!0});var Tit=s(NG);lPo=r(Tit,"MobileBertForMultipleChoice"),Tit.forEach(t),iPo=r(Qxe," (MobileBERT model)"),Qxe.forEach(t),dPo=i(K),Gv=n(K,"LI",{});var Hxe=s(Gv);sfe=n(Hxe,"STRONG",{});var Mit=s(sfe);cPo=r(Mit,"mpnet"),Mit.forEach(t),mPo=r(Hxe," \u2014 "),jG=n(Hxe,"A",{href:!0});var Eit=s(jG);fPo=r(Eit,"MPNetForMultipleChoice"),Eit.forEach(t),gPo=r(Hxe," (MPNet model)"),Hxe.forEach(t),hPo=i(K),Ov=n(K,"LI",{});var Uxe=s(Ov);lfe=n(Uxe,"STRONG",{});var Cit=s(lfe);uPo=r(Cit,"nystromformer"),Cit.forEach(t),pPo=r(Uxe," \u2014 "),DG=n(Uxe,"A",{href:!0});var wit=s(DG);_Po=r(wit,"NystromformerForMultipleChoice"),wit.forEach(t),bPo=r(Uxe," (Nystromformer model)"),Uxe.forEach(t),vPo=i(K),Vv=n(K,"LI",{});var Jxe=s(Vv);ife=n(Jxe,"STRONG",{});var Ait=s(ife);FPo=r(Ait,"qdqbert"),Ait.forEach(t),TPo=r(Jxe," \u2014 "),GG=n(Jxe,"A",{href:!0});var yit=s(GG);MPo=r(yit,"QDQBertForMultipleChoice"),yit.forEach(t),EPo=r(Jxe," (QDQBert model)"),Jxe.forEach(t),CPo=i(K),Xv=n(K,"LI",{});var Yxe=s(Xv);dfe=n(Yxe,"STRONG",{});var Lit=s(dfe);wPo=r(Lit,"rembert"),Lit.forEach(t),APo=r(Yxe," \u2014 "),OG=n(Yxe,"A",{href:!0});var xit=s(OG);yPo=r(xit,"RemBertForMultipleChoice"),xit.forEach(t),LPo=r(Yxe," (RemBERT model)"),Yxe.forEach(t),xPo=i(K),zv=n(K,"LI",{});var Kxe=s(zv);cfe=n(Kxe,"STRONG",{});var $it=s(cfe);$Po=r($it,"roberta"),$it.forEach(t),kPo=r(Kxe," \u2014 "),VG=n(Kxe,"A",{href:!0});var kit=s(VG);SPo=r(kit,"RobertaForMultipleChoice"),kit.forEach(t),RPo=r(Kxe," (RoBERTa model)"),Kxe.forEach(t),PPo=i(K),Wv=n(K,"LI",{});var Zxe=s(Wv);mfe=n(Zxe,"STRONG",{});var Sit=s(mfe);BPo=r(Sit,"roformer"),Sit.forEach(t),IPo=r(Zxe," \u2014 "),XG=n(Zxe,"A",{href:!0});var Rit=s(XG);qPo=r(Rit,"RoFormerForMultipleChoice"),Rit.forEach(t),NPo=r(Zxe," (RoFormer model)"),Zxe.forEach(t),jPo=i(K),Qv=n(K,"LI",{});var e7e=s(Qv);ffe=n(e7e,"STRONG",{});var Pit=s(ffe);DPo=r(Pit,"squeezebert"),Pit.forEach(t),GPo=r(e7e," \u2014 "),zG=n(e7e,"A",{href:!0});var Bit=s(zG);OPo=r(Bit,"SqueezeBertForMultipleChoice"),Bit.forEach(t),VPo=r(e7e," (SqueezeBERT model)"),e7e.forEach(t),XPo=i(K),Hv=n(K,"LI",{});var o7e=s(Hv);gfe=n(o7e,"STRONG",{});var Iit=s(gfe);zPo=r(Iit,"xlm"),Iit.forEach(t),WPo=r(o7e," \u2014 "),WG=n(o7e,"A",{href:!0});var qit=s(WG);QPo=r(qit,"XLMForMultipleChoice"),qit.forEach(t),HPo=r(o7e," (XLM model)"),o7e.forEach(t),UPo=i(K),Uv=n(K,"LI",{});var r7e=s(Uv);hfe=n(r7e,"STRONG",{});var Nit=s(hfe);JPo=r(Nit,"xlm-roberta"),Nit.forEach(t),YPo=r(r7e," \u2014 "),QG=n(r7e,"A",{href:!0});var jit=s(QG);KPo=r(jit,"XLMRobertaForMultipleChoice"),jit.forEach(t),ZPo=r(r7e," (XLM-RoBERTa model)"),r7e.forEach(t),eBo=i(K),Jv=n(K,"LI",{});var t7e=s(Jv);ufe=n(t7e,"STRONG",{});var Dit=s(ufe);oBo=r(Dit,"xlm-roberta-xl"),Dit.forEach(t),rBo=r(t7e," \u2014 "),HG=n(t7e,"A",{href:!0});var Git=s(HG);tBo=r(Git,"XLMRobertaXLForMultipleChoice"),Git.forEach(t),aBo=r(t7e," (XLM-RoBERTa-XL model)"),t7e.forEach(t),nBo=i(K),Yv=n(K,"LI",{});var a7e=s(Yv);pfe=n(a7e,"STRONG",{});var Oit=s(pfe);sBo=r(Oit,"xlnet"),Oit.forEach(t),lBo=r(a7e," \u2014 "),UG=n(a7e,"A",{href:!0});var Vit=s(UG);iBo=r(Vit,"XLNetForMultipleChoice"),Vit.forEach(t),dBo=r(a7e," (XLNet model)"),a7e.forEach(t),cBo=i(K),Kv=n(K,"LI",{});var n7e=s(Kv);_fe=n(n7e,"STRONG",{});var Xit=s(_fe);mBo=r(Xit,"yoso"),Xit.forEach(t),fBo=r(n7e," \u2014 "),JG=n(n7e,"A",{href:!0});var zit=s(JG);gBo=r(zit,"YosoForMultipleChoice"),zit.forEach(t),hBo=r(n7e," (YOSO model)"),n7e.forEach(t),K.forEach(t),uBo=i(la),Zv=n(la,"P",{});var s7e=s(Zv);pBo=r(s7e,"The model is set in evaluation mode by default using "),bfe=n(s7e,"CODE",{});var Wit=s(bfe);_Bo=r(Wit,"model.eval()"),Wit.forEach(t),bBo=r(s7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vfe=n(s7e,"CODE",{});var Qit=s(vfe);vBo=r(Qit,"model.train()"),Qit.forEach(t),s7e.forEach(t),FBo=i(la),T(eF.$$.fragment,la),la.forEach(t),Ws.forEach(t),rqe=i(m),zi=n(m,"H2",{class:!0});var sje=s(zi);oF=n(sje,"A",{id:!0,class:!0,href:!0});var Hit=s(oF);Ffe=n(Hit,"SPAN",{});var Uit=s(Ffe);T(uL.$$.fragment,Uit),Uit.forEach(t),Hit.forEach(t),TBo=i(sje),Tfe=n(sje,"SPAN",{});var Jit=s(Tfe);MBo=r(Jit,"AutoModelForNextSentencePrediction"),Jit.forEach(t),sje.forEach(t),tqe=i(m),Bo=n(m,"DIV",{class:!0});var Qs=s(Bo);T(pL.$$.fragment,Qs),EBo=i(Qs),Wi=n(Qs,"P",{});var VK=s(Wi);CBo=r(VK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),YG=n(VK,"A",{href:!0});var Yit=s(YG);wBo=r(Yit,"from_pretrained()"),Yit.forEach(t),ABo=r(VK," class method or the "),KG=n(VK,"A",{href:!0});var Kit=s(KG);yBo=r(Kit,"from_config()"),Kit.forEach(t),LBo=r(VK,` class
method.`),VK.forEach(t),xBo=i(Qs),_L=n(Qs,"P",{});var lje=s(_L);$Bo=r(lje,"This class cannot be instantiated directly using "),Mfe=n(lje,"CODE",{});var Zit=s(Mfe);kBo=r(Zit,"__init__()"),Zit.forEach(t),SBo=r(lje," (throws an error)."),lje.forEach(t),RBo=i(Qs),ct=n(Qs,"DIV",{class:!0});var A6=s(ct);T(bL.$$.fragment,A6),PBo=i(A6),Efe=n(A6,"P",{});var edt=s(Efe);BBo=r(edt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),edt.forEach(t),IBo=i(A6),Qi=n(A6,"P",{});var XK=s(Qi);qBo=r(XK,`Note:
Loading a model from its configuration file does `),Cfe=n(XK,"STRONG",{});var odt=s(Cfe);NBo=r(odt,"not"),odt.forEach(t),jBo=r(XK,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZG=n(XK,"A",{href:!0});var rdt=s(ZG);DBo=r(rdt,"from_pretrained()"),rdt.forEach(t),GBo=r(XK," to load the model weights."),XK.forEach(t),OBo=i(A6),T(rF.$$.fragment,A6),A6.forEach(t),VBo=i(Qs),to=n(Qs,"DIV",{class:!0});var ia=s(to);T(vL.$$.fragment,ia),XBo=i(ia),wfe=n(ia,"P",{});var tdt=s(wfe);zBo=r(tdt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),tdt.forEach(t),WBo=i(ia),Ba=n(ia,"P",{});var y6=s(Ba);QBo=r(y6,"The model class to instantiate is selected based on the "),Afe=n(y6,"CODE",{});var adt=s(Afe);HBo=r(adt,"model_type"),adt.forEach(t),UBo=r(y6,` property of the config object (either
passed as an argument or loaded from `),yfe=n(y6,"CODE",{});var ndt=s(yfe);JBo=r(ndt,"pretrained_model_name_or_path"),ndt.forEach(t),YBo=r(y6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lfe=n(y6,"CODE",{});var sdt=s(Lfe);KBo=r(sdt,"pretrained_model_name_or_path"),sdt.forEach(t),ZBo=r(y6,":"),y6.forEach(t),eIo=i(ia),Yr=n(ia,"UL",{});var Hs=s(Yr);tF=n(Hs,"LI",{});var l7e=s(tF);xfe=n(l7e,"STRONG",{});var ldt=s(xfe);oIo=r(ldt,"bert"),ldt.forEach(t),rIo=r(l7e," \u2014 "),eO=n(l7e,"A",{href:!0});var idt=s(eO);tIo=r(idt,"BertForNextSentencePrediction"),idt.forEach(t),aIo=r(l7e," (BERT model)"),l7e.forEach(t),nIo=i(Hs),aF=n(Hs,"LI",{});var i7e=s(aF);$fe=n(i7e,"STRONG",{});var ddt=s($fe);sIo=r(ddt,"fnet"),ddt.forEach(t),lIo=r(i7e," \u2014 "),oO=n(i7e,"A",{href:!0});var cdt=s(oO);iIo=r(cdt,"FNetForNextSentencePrediction"),cdt.forEach(t),dIo=r(i7e," (FNet model)"),i7e.forEach(t),cIo=i(Hs),nF=n(Hs,"LI",{});var d7e=s(nF);kfe=n(d7e,"STRONG",{});var mdt=s(kfe);mIo=r(mdt,"megatron-bert"),mdt.forEach(t),fIo=r(d7e," \u2014 "),rO=n(d7e,"A",{href:!0});var fdt=s(rO);gIo=r(fdt,"MegatronBertForNextSentencePrediction"),fdt.forEach(t),hIo=r(d7e," (MegatronBert model)"),d7e.forEach(t),uIo=i(Hs),sF=n(Hs,"LI",{});var c7e=s(sF);Sfe=n(c7e,"STRONG",{});var gdt=s(Sfe);pIo=r(gdt,"mobilebert"),gdt.forEach(t),_Io=r(c7e," \u2014 "),tO=n(c7e,"A",{href:!0});var hdt=s(tO);bIo=r(hdt,"MobileBertForNextSentencePrediction"),hdt.forEach(t),vIo=r(c7e," (MobileBERT model)"),c7e.forEach(t),FIo=i(Hs),lF=n(Hs,"LI",{});var m7e=s(lF);Rfe=n(m7e,"STRONG",{});var udt=s(Rfe);TIo=r(udt,"qdqbert"),udt.forEach(t),MIo=r(m7e," \u2014 "),aO=n(m7e,"A",{href:!0});var pdt=s(aO);EIo=r(pdt,"QDQBertForNextSentencePrediction"),pdt.forEach(t),CIo=r(m7e," (QDQBert model)"),m7e.forEach(t),Hs.forEach(t),wIo=i(ia),iF=n(ia,"P",{});var f7e=s(iF);AIo=r(f7e,"The model is set in evaluation mode by default using "),Pfe=n(f7e,"CODE",{});var _dt=s(Pfe);yIo=r(_dt,"model.eval()"),_dt.forEach(t),LIo=r(f7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Bfe=n(f7e,"CODE",{});var bdt=s(Bfe);xIo=r(bdt,"model.train()"),bdt.forEach(t),f7e.forEach(t),$Io=i(ia),T(dF.$$.fragment,ia),ia.forEach(t),Qs.forEach(t),aqe=i(m),Hi=n(m,"H2",{class:!0});var ije=s(Hi);cF=n(ije,"A",{id:!0,class:!0,href:!0});var vdt=s(cF);Ife=n(vdt,"SPAN",{});var Fdt=s(Ife);T(FL.$$.fragment,Fdt),Fdt.forEach(t),vdt.forEach(t),kIo=i(ije),qfe=n(ije,"SPAN",{});var Tdt=s(qfe);SIo=r(Tdt,"AutoModelForTokenClassification"),Tdt.forEach(t),ije.forEach(t),nqe=i(m),Io=n(m,"DIV",{class:!0});var Us=s(Io);T(TL.$$.fragment,Us),RIo=i(Us),Ui=n(Us,"P",{});var zK=s(Ui);PIo=r(zK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),nO=n(zK,"A",{href:!0});var Mdt=s(nO);BIo=r(Mdt,"from_pretrained()"),Mdt.forEach(t),IIo=r(zK," class method or the "),sO=n(zK,"A",{href:!0});var Edt=s(sO);qIo=r(Edt,"from_config()"),Edt.forEach(t),NIo=r(zK,` class
method.`),zK.forEach(t),jIo=i(Us),ML=n(Us,"P",{});var dje=s(ML);DIo=r(dje,"This class cannot be instantiated directly using "),Nfe=n(dje,"CODE",{});var Cdt=s(Nfe);GIo=r(Cdt,"__init__()"),Cdt.forEach(t),OIo=r(dje," (throws an error)."),dje.forEach(t),VIo=i(Us),mt=n(Us,"DIV",{class:!0});var L6=s(mt);T(EL.$$.fragment,L6),XIo=i(L6),jfe=n(L6,"P",{});var wdt=s(jfe);zIo=r(wdt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),wdt.forEach(t),WIo=i(L6),Ji=n(L6,"P",{});var WK=s(Ji);QIo=r(WK,`Note:
Loading a model from its configuration file does `),Dfe=n(WK,"STRONG",{});var Adt=s(Dfe);HIo=r(Adt,"not"),Adt.forEach(t),UIo=r(WK,` load the model weights. It only affects the
model\u2019s configuration. Use `),lO=n(WK,"A",{href:!0});var ydt=s(lO);JIo=r(ydt,"from_pretrained()"),ydt.forEach(t),YIo=r(WK," to load the model weights."),WK.forEach(t),KIo=i(L6),T(mF.$$.fragment,L6),L6.forEach(t),ZIo=i(Us),ao=n(Us,"DIV",{class:!0});var da=s(ao);T(CL.$$.fragment,da),eqo=i(da),Gfe=n(da,"P",{});var Ldt=s(Gfe);oqo=r(Ldt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Ldt.forEach(t),rqo=i(da),Ia=n(da,"P",{});var x6=s(Ia);tqo=r(x6,"The model class to instantiate is selected based on the "),Ofe=n(x6,"CODE",{});var xdt=s(Ofe);aqo=r(xdt,"model_type"),xdt.forEach(t),nqo=r(x6,` property of the config object (either
passed as an argument or loaded from `),Vfe=n(x6,"CODE",{});var $dt=s(Vfe);sqo=r($dt,"pretrained_model_name_or_path"),$dt.forEach(t),lqo=r(x6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xfe=n(x6,"CODE",{});var kdt=s(Xfe);iqo=r(kdt,"pretrained_model_name_or_path"),kdt.forEach(t),dqo=r(x6,":"),x6.forEach(t),cqo=i(da),U=n(da,"UL",{});var J=s(U);fF=n(J,"LI",{});var g7e=s(fF);zfe=n(g7e,"STRONG",{});var Sdt=s(zfe);mqo=r(Sdt,"albert"),Sdt.forEach(t),fqo=r(g7e," \u2014 "),iO=n(g7e,"A",{href:!0});var Rdt=s(iO);gqo=r(Rdt,"AlbertForTokenClassification"),Rdt.forEach(t),hqo=r(g7e," (ALBERT model)"),g7e.forEach(t),uqo=i(J),gF=n(J,"LI",{});var h7e=s(gF);Wfe=n(h7e,"STRONG",{});var Pdt=s(Wfe);pqo=r(Pdt,"bert"),Pdt.forEach(t),_qo=r(h7e," \u2014 "),dO=n(h7e,"A",{href:!0});var Bdt=s(dO);bqo=r(Bdt,"BertForTokenClassification"),Bdt.forEach(t),vqo=r(h7e," (BERT model)"),h7e.forEach(t),Fqo=i(J),hF=n(J,"LI",{});var u7e=s(hF);Qfe=n(u7e,"STRONG",{});var Idt=s(Qfe);Tqo=r(Idt,"big_bird"),Idt.forEach(t),Mqo=r(u7e," \u2014 "),cO=n(u7e,"A",{href:!0});var qdt=s(cO);Eqo=r(qdt,"BigBirdForTokenClassification"),qdt.forEach(t),Cqo=r(u7e," (BigBird model)"),u7e.forEach(t),wqo=i(J),uF=n(J,"LI",{});var p7e=s(uF);Hfe=n(p7e,"STRONG",{});var Ndt=s(Hfe);Aqo=r(Ndt,"camembert"),Ndt.forEach(t),yqo=r(p7e," \u2014 "),mO=n(p7e,"A",{href:!0});var jdt=s(mO);Lqo=r(jdt,"CamembertForTokenClassification"),jdt.forEach(t),xqo=r(p7e," (CamemBERT model)"),p7e.forEach(t),$qo=i(J),pF=n(J,"LI",{});var _7e=s(pF);Ufe=n(_7e,"STRONG",{});var Ddt=s(Ufe);kqo=r(Ddt,"canine"),Ddt.forEach(t),Sqo=r(_7e," \u2014 "),fO=n(_7e,"A",{href:!0});var Gdt=s(fO);Rqo=r(Gdt,"CanineForTokenClassification"),Gdt.forEach(t),Pqo=r(_7e," (Canine model)"),_7e.forEach(t),Bqo=i(J),_F=n(J,"LI",{});var b7e=s(_F);Jfe=n(b7e,"STRONG",{});var Odt=s(Jfe);Iqo=r(Odt,"convbert"),Odt.forEach(t),qqo=r(b7e," \u2014 "),gO=n(b7e,"A",{href:!0});var Vdt=s(gO);Nqo=r(Vdt,"ConvBertForTokenClassification"),Vdt.forEach(t),jqo=r(b7e," (ConvBERT model)"),b7e.forEach(t),Dqo=i(J),bF=n(J,"LI",{});var v7e=s(bF);Yfe=n(v7e,"STRONG",{});var Xdt=s(Yfe);Gqo=r(Xdt,"data2vec-text"),Xdt.forEach(t),Oqo=r(v7e," \u2014 "),hO=n(v7e,"A",{href:!0});var zdt=s(hO);Vqo=r(zdt,"Data2VecTextForTokenClassification"),zdt.forEach(t),Xqo=r(v7e," (Data2VecText model)"),v7e.forEach(t),zqo=i(J),vF=n(J,"LI",{});var F7e=s(vF);Kfe=n(F7e,"STRONG",{});var Wdt=s(Kfe);Wqo=r(Wdt,"deberta"),Wdt.forEach(t),Qqo=r(F7e," \u2014 "),uO=n(F7e,"A",{href:!0});var Qdt=s(uO);Hqo=r(Qdt,"DebertaForTokenClassification"),Qdt.forEach(t),Uqo=r(F7e," (DeBERTa model)"),F7e.forEach(t),Jqo=i(J),FF=n(J,"LI",{});var T7e=s(FF);Zfe=n(T7e,"STRONG",{});var Hdt=s(Zfe);Yqo=r(Hdt,"deberta-v2"),Hdt.forEach(t),Kqo=r(T7e," \u2014 "),pO=n(T7e,"A",{href:!0});var Udt=s(pO);Zqo=r(Udt,"DebertaV2ForTokenClassification"),Udt.forEach(t),eNo=r(T7e," (DeBERTa-v2 model)"),T7e.forEach(t),oNo=i(J),TF=n(J,"LI",{});var M7e=s(TF);ege=n(M7e,"STRONG",{});var Jdt=s(ege);rNo=r(Jdt,"distilbert"),Jdt.forEach(t),tNo=r(M7e," \u2014 "),_O=n(M7e,"A",{href:!0});var Ydt=s(_O);aNo=r(Ydt,"DistilBertForTokenClassification"),Ydt.forEach(t),nNo=r(M7e," (DistilBERT model)"),M7e.forEach(t),sNo=i(J),MF=n(J,"LI",{});var E7e=s(MF);oge=n(E7e,"STRONG",{});var Kdt=s(oge);lNo=r(Kdt,"electra"),Kdt.forEach(t),iNo=r(E7e," \u2014 "),bO=n(E7e,"A",{href:!0});var Zdt=s(bO);dNo=r(Zdt,"ElectraForTokenClassification"),Zdt.forEach(t),cNo=r(E7e," (ELECTRA model)"),E7e.forEach(t),mNo=i(J),EF=n(J,"LI",{});var C7e=s(EF);rge=n(C7e,"STRONG",{});var ect=s(rge);fNo=r(ect,"flaubert"),ect.forEach(t),gNo=r(C7e," \u2014 "),vO=n(C7e,"A",{href:!0});var oct=s(vO);hNo=r(oct,"FlaubertForTokenClassification"),oct.forEach(t),uNo=r(C7e," (FlauBERT model)"),C7e.forEach(t),pNo=i(J),CF=n(J,"LI",{});var w7e=s(CF);tge=n(w7e,"STRONG",{});var rct=s(tge);_No=r(rct,"fnet"),rct.forEach(t),bNo=r(w7e," \u2014 "),FO=n(w7e,"A",{href:!0});var tct=s(FO);vNo=r(tct,"FNetForTokenClassification"),tct.forEach(t),FNo=r(w7e," (FNet model)"),w7e.forEach(t),TNo=i(J),wF=n(J,"LI",{});var A7e=s(wF);age=n(A7e,"STRONG",{});var act=s(age);MNo=r(act,"funnel"),act.forEach(t),ENo=r(A7e," \u2014 "),TO=n(A7e,"A",{href:!0});var nct=s(TO);CNo=r(nct,"FunnelForTokenClassification"),nct.forEach(t),wNo=r(A7e," (Funnel Transformer model)"),A7e.forEach(t),ANo=i(J),AF=n(J,"LI",{});var y7e=s(AF);nge=n(y7e,"STRONG",{});var sct=s(nge);yNo=r(sct,"gpt2"),sct.forEach(t),LNo=r(y7e," \u2014 "),MO=n(y7e,"A",{href:!0});var lct=s(MO);xNo=r(lct,"GPT2ForTokenClassification"),lct.forEach(t),$No=r(y7e," (OpenAI GPT-2 model)"),y7e.forEach(t),kNo=i(J),yF=n(J,"LI",{});var L7e=s(yF);sge=n(L7e,"STRONG",{});var ict=s(sge);SNo=r(ict,"ibert"),ict.forEach(t),RNo=r(L7e," \u2014 "),EO=n(L7e,"A",{href:!0});var dct=s(EO);PNo=r(dct,"IBertForTokenClassification"),dct.forEach(t),BNo=r(L7e," (I-BERT model)"),L7e.forEach(t),INo=i(J),LF=n(J,"LI",{});var x7e=s(LF);lge=n(x7e,"STRONG",{});var cct=s(lge);qNo=r(cct,"layoutlm"),cct.forEach(t),NNo=r(x7e," \u2014 "),CO=n(x7e,"A",{href:!0});var mct=s(CO);jNo=r(mct,"LayoutLMForTokenClassification"),mct.forEach(t),DNo=r(x7e," (LayoutLM model)"),x7e.forEach(t),GNo=i(J),xF=n(J,"LI",{});var $7e=s(xF);ige=n($7e,"STRONG",{});var fct=s(ige);ONo=r(fct,"layoutlmv2"),fct.forEach(t),VNo=r($7e," \u2014 "),wO=n($7e,"A",{href:!0});var gct=s(wO);XNo=r(gct,"LayoutLMv2ForTokenClassification"),gct.forEach(t),zNo=r($7e," (LayoutLMv2 model)"),$7e.forEach(t),WNo=i(J),$F=n(J,"LI",{});var k7e=s($F);dge=n(k7e,"STRONG",{});var hct=s(dge);QNo=r(hct,"longformer"),hct.forEach(t),HNo=r(k7e," \u2014 "),AO=n(k7e,"A",{href:!0});var uct=s(AO);UNo=r(uct,"LongformerForTokenClassification"),uct.forEach(t),JNo=r(k7e," (Longformer model)"),k7e.forEach(t),YNo=i(J),kF=n(J,"LI",{});var S7e=s(kF);cge=n(S7e,"STRONG",{});var pct=s(cge);KNo=r(pct,"megatron-bert"),pct.forEach(t),ZNo=r(S7e," \u2014 "),yO=n(S7e,"A",{href:!0});var _ct=s(yO);ejo=r(_ct,"MegatronBertForTokenClassification"),_ct.forEach(t),ojo=r(S7e," (MegatronBert model)"),S7e.forEach(t),rjo=i(J),SF=n(J,"LI",{});var R7e=s(SF);mge=n(R7e,"STRONG",{});var bct=s(mge);tjo=r(bct,"mobilebert"),bct.forEach(t),ajo=r(R7e," \u2014 "),LO=n(R7e,"A",{href:!0});var vct=s(LO);njo=r(vct,"MobileBertForTokenClassification"),vct.forEach(t),sjo=r(R7e," (MobileBERT model)"),R7e.forEach(t),ljo=i(J),RF=n(J,"LI",{});var P7e=s(RF);fge=n(P7e,"STRONG",{});var Fct=s(fge);ijo=r(Fct,"mpnet"),Fct.forEach(t),djo=r(P7e," \u2014 "),xO=n(P7e,"A",{href:!0});var Tct=s(xO);cjo=r(Tct,"MPNetForTokenClassification"),Tct.forEach(t),mjo=r(P7e," (MPNet model)"),P7e.forEach(t),fjo=i(J),PF=n(J,"LI",{});var B7e=s(PF);gge=n(B7e,"STRONG",{});var Mct=s(gge);gjo=r(Mct,"nystromformer"),Mct.forEach(t),hjo=r(B7e," \u2014 "),$O=n(B7e,"A",{href:!0});var Ect=s($O);ujo=r(Ect,"NystromformerForTokenClassification"),Ect.forEach(t),pjo=r(B7e," (Nystromformer model)"),B7e.forEach(t),_jo=i(J),BF=n(J,"LI",{});var I7e=s(BF);hge=n(I7e,"STRONG",{});var Cct=s(hge);bjo=r(Cct,"qdqbert"),Cct.forEach(t),vjo=r(I7e," \u2014 "),kO=n(I7e,"A",{href:!0});var wct=s(kO);Fjo=r(wct,"QDQBertForTokenClassification"),wct.forEach(t),Tjo=r(I7e," (QDQBert model)"),I7e.forEach(t),Mjo=i(J),IF=n(J,"LI",{});var q7e=s(IF);uge=n(q7e,"STRONG",{});var Act=s(uge);Ejo=r(Act,"rembert"),Act.forEach(t),Cjo=r(q7e," \u2014 "),SO=n(q7e,"A",{href:!0});var yct=s(SO);wjo=r(yct,"RemBertForTokenClassification"),yct.forEach(t),Ajo=r(q7e," (RemBERT model)"),q7e.forEach(t),yjo=i(J),qF=n(J,"LI",{});var N7e=s(qF);pge=n(N7e,"STRONG",{});var Lct=s(pge);Ljo=r(Lct,"roberta"),Lct.forEach(t),xjo=r(N7e," \u2014 "),RO=n(N7e,"A",{href:!0});var xct=s(RO);$jo=r(xct,"RobertaForTokenClassification"),xct.forEach(t),kjo=r(N7e," (RoBERTa model)"),N7e.forEach(t),Sjo=i(J),NF=n(J,"LI",{});var j7e=s(NF);_ge=n(j7e,"STRONG",{});var $ct=s(_ge);Rjo=r($ct,"roformer"),$ct.forEach(t),Pjo=r(j7e," \u2014 "),PO=n(j7e,"A",{href:!0});var kct=s(PO);Bjo=r(kct,"RoFormerForTokenClassification"),kct.forEach(t),Ijo=r(j7e," (RoFormer model)"),j7e.forEach(t),qjo=i(J),jF=n(J,"LI",{});var D7e=s(jF);bge=n(D7e,"STRONG",{});var Sct=s(bge);Njo=r(Sct,"squeezebert"),Sct.forEach(t),jjo=r(D7e," \u2014 "),BO=n(D7e,"A",{href:!0});var Rct=s(BO);Djo=r(Rct,"SqueezeBertForTokenClassification"),Rct.forEach(t),Gjo=r(D7e," (SqueezeBERT model)"),D7e.forEach(t),Ojo=i(J),DF=n(J,"LI",{});var G7e=s(DF);vge=n(G7e,"STRONG",{});var Pct=s(vge);Vjo=r(Pct,"xlm"),Pct.forEach(t),Xjo=r(G7e," \u2014 "),IO=n(G7e,"A",{href:!0});var Bct=s(IO);zjo=r(Bct,"XLMForTokenClassification"),Bct.forEach(t),Wjo=r(G7e," (XLM model)"),G7e.forEach(t),Qjo=i(J),GF=n(J,"LI",{});var O7e=s(GF);Fge=n(O7e,"STRONG",{});var Ict=s(Fge);Hjo=r(Ict,"xlm-roberta"),Ict.forEach(t),Ujo=r(O7e," \u2014 "),qO=n(O7e,"A",{href:!0});var qct=s(qO);Jjo=r(qct,"XLMRobertaForTokenClassification"),qct.forEach(t),Yjo=r(O7e," (XLM-RoBERTa model)"),O7e.forEach(t),Kjo=i(J),OF=n(J,"LI",{});var V7e=s(OF);Tge=n(V7e,"STRONG",{});var Nct=s(Tge);Zjo=r(Nct,"xlm-roberta-xl"),Nct.forEach(t),eDo=r(V7e," \u2014 "),NO=n(V7e,"A",{href:!0});var jct=s(NO);oDo=r(jct,"XLMRobertaXLForTokenClassification"),jct.forEach(t),rDo=r(V7e," (XLM-RoBERTa-XL model)"),V7e.forEach(t),tDo=i(J),VF=n(J,"LI",{});var X7e=s(VF);Mge=n(X7e,"STRONG",{});var Dct=s(Mge);aDo=r(Dct,"xlnet"),Dct.forEach(t),nDo=r(X7e," \u2014 "),jO=n(X7e,"A",{href:!0});var Gct=s(jO);sDo=r(Gct,"XLNetForTokenClassification"),Gct.forEach(t),lDo=r(X7e," (XLNet model)"),X7e.forEach(t),iDo=i(J),XF=n(J,"LI",{});var z7e=s(XF);Ege=n(z7e,"STRONG",{});var Oct=s(Ege);dDo=r(Oct,"yoso"),Oct.forEach(t),cDo=r(z7e," \u2014 "),DO=n(z7e,"A",{href:!0});var Vct=s(DO);mDo=r(Vct,"YosoForTokenClassification"),Vct.forEach(t),fDo=r(z7e," (YOSO model)"),z7e.forEach(t),J.forEach(t),gDo=i(da),zF=n(da,"P",{});var W7e=s(zF);hDo=r(W7e,"The model is set in evaluation mode by default using "),Cge=n(W7e,"CODE",{});var Xct=s(Cge);uDo=r(Xct,"model.eval()"),Xct.forEach(t),pDo=r(W7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wge=n(W7e,"CODE",{});var zct=s(wge);_Do=r(zct,"model.train()"),zct.forEach(t),W7e.forEach(t),bDo=i(da),T(WF.$$.fragment,da),da.forEach(t),Us.forEach(t),sqe=i(m),Yi=n(m,"H2",{class:!0});var cje=s(Yi);QF=n(cje,"A",{id:!0,class:!0,href:!0});var Wct=s(QF);Age=n(Wct,"SPAN",{});var Qct=s(Age);T(wL.$$.fragment,Qct),Qct.forEach(t),Wct.forEach(t),vDo=i(cje),yge=n(cje,"SPAN",{});var Hct=s(yge);FDo=r(Hct,"AutoModelForQuestionAnswering"),Hct.forEach(t),cje.forEach(t),lqe=i(m),qo=n(m,"DIV",{class:!0});var Js=s(qo);T(AL.$$.fragment,Js),TDo=i(Js),Ki=n(Js,"P",{});var QK=s(Ki);MDo=r(QK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),GO=n(QK,"A",{href:!0});var Uct=s(GO);EDo=r(Uct,"from_pretrained()"),Uct.forEach(t),CDo=r(QK," class method or the "),OO=n(QK,"A",{href:!0});var Jct=s(OO);wDo=r(Jct,"from_config()"),Jct.forEach(t),ADo=r(QK,` class
method.`),QK.forEach(t),yDo=i(Js),yL=n(Js,"P",{});var mje=s(yL);LDo=r(mje,"This class cannot be instantiated directly using "),Lge=n(mje,"CODE",{});var Yct=s(Lge);xDo=r(Yct,"__init__()"),Yct.forEach(t),$Do=r(mje," (throws an error)."),mje.forEach(t),kDo=i(Js),ft=n(Js,"DIV",{class:!0});var $6=s(ft);T(LL.$$.fragment,$6),SDo=i($6),xge=n($6,"P",{});var Kct=s(xge);RDo=r(Kct,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Kct.forEach(t),PDo=i($6),Zi=n($6,"P",{});var HK=s(Zi);BDo=r(HK,`Note:
Loading a model from its configuration file does `),$ge=n(HK,"STRONG",{});var Zct=s($ge);IDo=r(Zct,"not"),Zct.forEach(t),qDo=r(HK,` load the model weights. It only affects the
model\u2019s configuration. Use `),VO=n(HK,"A",{href:!0});var emt=s(VO);NDo=r(emt,"from_pretrained()"),emt.forEach(t),jDo=r(HK," to load the model weights."),HK.forEach(t),DDo=i($6),T(HF.$$.fragment,$6),$6.forEach(t),GDo=i(Js),no=n(Js,"DIV",{class:!0});var ca=s(no);T(xL.$$.fragment,ca),ODo=i(ca),kge=n(ca,"P",{});var omt=s(kge);VDo=r(omt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),omt.forEach(t),XDo=i(ca),qa=n(ca,"P",{});var k6=s(qa);zDo=r(k6,"The model class to instantiate is selected based on the "),Sge=n(k6,"CODE",{});var rmt=s(Sge);WDo=r(rmt,"model_type"),rmt.forEach(t),QDo=r(k6,` property of the config object (either
passed as an argument or loaded from `),Rge=n(k6,"CODE",{});var tmt=s(Rge);HDo=r(tmt,"pretrained_model_name_or_path"),tmt.forEach(t),UDo=r(k6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pge=n(k6,"CODE",{});var amt=s(Pge);JDo=r(amt,"pretrained_model_name_or_path"),amt.forEach(t),YDo=r(k6,":"),k6.forEach(t),KDo=i(ca),V=n(ca,"UL",{});var X=s(V);UF=n(X,"LI",{});var Q7e=s(UF);Bge=n(Q7e,"STRONG",{});var nmt=s(Bge);ZDo=r(nmt,"albert"),nmt.forEach(t),eGo=r(Q7e," \u2014 "),XO=n(Q7e,"A",{href:!0});var smt=s(XO);oGo=r(smt,"AlbertForQuestionAnswering"),smt.forEach(t),rGo=r(Q7e," (ALBERT model)"),Q7e.forEach(t),tGo=i(X),JF=n(X,"LI",{});var H7e=s(JF);Ige=n(H7e,"STRONG",{});var lmt=s(Ige);aGo=r(lmt,"bart"),lmt.forEach(t),nGo=r(H7e," \u2014 "),zO=n(H7e,"A",{href:!0});var imt=s(zO);sGo=r(imt,"BartForQuestionAnswering"),imt.forEach(t),lGo=r(H7e," (BART model)"),H7e.forEach(t),iGo=i(X),YF=n(X,"LI",{});var U7e=s(YF);qge=n(U7e,"STRONG",{});var dmt=s(qge);dGo=r(dmt,"bert"),dmt.forEach(t),cGo=r(U7e," \u2014 "),WO=n(U7e,"A",{href:!0});var cmt=s(WO);mGo=r(cmt,"BertForQuestionAnswering"),cmt.forEach(t),fGo=r(U7e," (BERT model)"),U7e.forEach(t),gGo=i(X),KF=n(X,"LI",{});var J7e=s(KF);Nge=n(J7e,"STRONG",{});var mmt=s(Nge);hGo=r(mmt,"big_bird"),mmt.forEach(t),uGo=r(J7e," \u2014 "),QO=n(J7e,"A",{href:!0});var fmt=s(QO);pGo=r(fmt,"BigBirdForQuestionAnswering"),fmt.forEach(t),_Go=r(J7e," (BigBird model)"),J7e.forEach(t),bGo=i(X),ZF=n(X,"LI",{});var Y7e=s(ZF);jge=n(Y7e,"STRONG",{});var gmt=s(jge);vGo=r(gmt,"bigbird_pegasus"),gmt.forEach(t),FGo=r(Y7e," \u2014 "),HO=n(Y7e,"A",{href:!0});var hmt=s(HO);TGo=r(hmt,"BigBirdPegasusForQuestionAnswering"),hmt.forEach(t),MGo=r(Y7e," (BigBirdPegasus model)"),Y7e.forEach(t),EGo=i(X),e1=n(X,"LI",{});var K7e=s(e1);Dge=n(K7e,"STRONG",{});var umt=s(Dge);CGo=r(umt,"camembert"),umt.forEach(t),wGo=r(K7e," \u2014 "),UO=n(K7e,"A",{href:!0});var pmt=s(UO);AGo=r(pmt,"CamembertForQuestionAnswering"),pmt.forEach(t),yGo=r(K7e," (CamemBERT model)"),K7e.forEach(t),LGo=i(X),o1=n(X,"LI",{});var Z7e=s(o1);Gge=n(Z7e,"STRONG",{});var _mt=s(Gge);xGo=r(_mt,"canine"),_mt.forEach(t),$Go=r(Z7e," \u2014 "),JO=n(Z7e,"A",{href:!0});var bmt=s(JO);kGo=r(bmt,"CanineForQuestionAnswering"),bmt.forEach(t),SGo=r(Z7e," (Canine model)"),Z7e.forEach(t),RGo=i(X),r1=n(X,"LI",{});var e9e=s(r1);Oge=n(e9e,"STRONG",{});var vmt=s(Oge);PGo=r(vmt,"convbert"),vmt.forEach(t),BGo=r(e9e," \u2014 "),YO=n(e9e,"A",{href:!0});var Fmt=s(YO);IGo=r(Fmt,"ConvBertForQuestionAnswering"),Fmt.forEach(t),qGo=r(e9e," (ConvBERT model)"),e9e.forEach(t),NGo=i(X),t1=n(X,"LI",{});var o9e=s(t1);Vge=n(o9e,"STRONG",{});var Tmt=s(Vge);jGo=r(Tmt,"data2vec-text"),Tmt.forEach(t),DGo=r(o9e," \u2014 "),KO=n(o9e,"A",{href:!0});var Mmt=s(KO);GGo=r(Mmt,"Data2VecTextForQuestionAnswering"),Mmt.forEach(t),OGo=r(o9e," (Data2VecText model)"),o9e.forEach(t),VGo=i(X),a1=n(X,"LI",{});var r9e=s(a1);Xge=n(r9e,"STRONG",{});var Emt=s(Xge);XGo=r(Emt,"deberta"),Emt.forEach(t),zGo=r(r9e," \u2014 "),ZO=n(r9e,"A",{href:!0});var Cmt=s(ZO);WGo=r(Cmt,"DebertaForQuestionAnswering"),Cmt.forEach(t),QGo=r(r9e," (DeBERTa model)"),r9e.forEach(t),HGo=i(X),n1=n(X,"LI",{});var t9e=s(n1);zge=n(t9e,"STRONG",{});var wmt=s(zge);UGo=r(wmt,"deberta-v2"),wmt.forEach(t),JGo=r(t9e," \u2014 "),eV=n(t9e,"A",{href:!0});var Amt=s(eV);YGo=r(Amt,"DebertaV2ForQuestionAnswering"),Amt.forEach(t),KGo=r(t9e," (DeBERTa-v2 model)"),t9e.forEach(t),ZGo=i(X),s1=n(X,"LI",{});var a9e=s(s1);Wge=n(a9e,"STRONG",{});var ymt=s(Wge);eOo=r(ymt,"distilbert"),ymt.forEach(t),oOo=r(a9e," \u2014 "),oV=n(a9e,"A",{href:!0});var Lmt=s(oV);rOo=r(Lmt,"DistilBertForQuestionAnswering"),Lmt.forEach(t),tOo=r(a9e," (DistilBERT model)"),a9e.forEach(t),aOo=i(X),l1=n(X,"LI",{});var n9e=s(l1);Qge=n(n9e,"STRONG",{});var xmt=s(Qge);nOo=r(xmt,"electra"),xmt.forEach(t),sOo=r(n9e," \u2014 "),rV=n(n9e,"A",{href:!0});var $mt=s(rV);lOo=r($mt,"ElectraForQuestionAnswering"),$mt.forEach(t),iOo=r(n9e," (ELECTRA model)"),n9e.forEach(t),dOo=i(X),i1=n(X,"LI",{});var s9e=s(i1);Hge=n(s9e,"STRONG",{});var kmt=s(Hge);cOo=r(kmt,"flaubert"),kmt.forEach(t),mOo=r(s9e," \u2014 "),tV=n(s9e,"A",{href:!0});var Smt=s(tV);fOo=r(Smt,"FlaubertForQuestionAnsweringSimple"),Smt.forEach(t),gOo=r(s9e," (FlauBERT model)"),s9e.forEach(t),hOo=i(X),d1=n(X,"LI",{});var l9e=s(d1);Uge=n(l9e,"STRONG",{});var Rmt=s(Uge);uOo=r(Rmt,"fnet"),Rmt.forEach(t),pOo=r(l9e," \u2014 "),aV=n(l9e,"A",{href:!0});var Pmt=s(aV);_Oo=r(Pmt,"FNetForQuestionAnswering"),Pmt.forEach(t),bOo=r(l9e," (FNet model)"),l9e.forEach(t),vOo=i(X),c1=n(X,"LI",{});var i9e=s(c1);Jge=n(i9e,"STRONG",{});var Bmt=s(Jge);FOo=r(Bmt,"funnel"),Bmt.forEach(t),TOo=r(i9e," \u2014 "),nV=n(i9e,"A",{href:!0});var Imt=s(nV);MOo=r(Imt,"FunnelForQuestionAnswering"),Imt.forEach(t),EOo=r(i9e," (Funnel Transformer model)"),i9e.forEach(t),COo=i(X),m1=n(X,"LI",{});var d9e=s(m1);Yge=n(d9e,"STRONG",{});var qmt=s(Yge);wOo=r(qmt,"gptj"),qmt.forEach(t),AOo=r(d9e," \u2014 "),sV=n(d9e,"A",{href:!0});var Nmt=s(sV);yOo=r(Nmt,"GPTJForQuestionAnswering"),Nmt.forEach(t),LOo=r(d9e," (GPT-J model)"),d9e.forEach(t),xOo=i(X),f1=n(X,"LI",{});var c9e=s(f1);Kge=n(c9e,"STRONG",{});var jmt=s(Kge);$Oo=r(jmt,"ibert"),jmt.forEach(t),kOo=r(c9e," \u2014 "),lV=n(c9e,"A",{href:!0});var Dmt=s(lV);SOo=r(Dmt,"IBertForQuestionAnswering"),Dmt.forEach(t),ROo=r(c9e," (I-BERT model)"),c9e.forEach(t),POo=i(X),g1=n(X,"LI",{});var m9e=s(g1);Zge=n(m9e,"STRONG",{});var Gmt=s(Zge);BOo=r(Gmt,"layoutlmv2"),Gmt.forEach(t),IOo=r(m9e," \u2014 "),iV=n(m9e,"A",{href:!0});var Omt=s(iV);qOo=r(Omt,"LayoutLMv2ForQuestionAnswering"),Omt.forEach(t),NOo=r(m9e," (LayoutLMv2 model)"),m9e.forEach(t),jOo=i(X),h1=n(X,"LI",{});var f9e=s(h1);ehe=n(f9e,"STRONG",{});var Vmt=s(ehe);DOo=r(Vmt,"led"),Vmt.forEach(t),GOo=r(f9e," \u2014 "),dV=n(f9e,"A",{href:!0});var Xmt=s(dV);OOo=r(Xmt,"LEDForQuestionAnswering"),Xmt.forEach(t),VOo=r(f9e," (LED model)"),f9e.forEach(t),XOo=i(X),u1=n(X,"LI",{});var g9e=s(u1);ohe=n(g9e,"STRONG",{});var zmt=s(ohe);zOo=r(zmt,"longformer"),zmt.forEach(t),WOo=r(g9e," \u2014 "),cV=n(g9e,"A",{href:!0});var Wmt=s(cV);QOo=r(Wmt,"LongformerForQuestionAnswering"),Wmt.forEach(t),HOo=r(g9e," (Longformer model)"),g9e.forEach(t),UOo=i(X),p1=n(X,"LI",{});var h9e=s(p1);rhe=n(h9e,"STRONG",{});var Qmt=s(rhe);JOo=r(Qmt,"lxmert"),Qmt.forEach(t),YOo=r(h9e," \u2014 "),mV=n(h9e,"A",{href:!0});var Hmt=s(mV);KOo=r(Hmt,"LxmertForQuestionAnswering"),Hmt.forEach(t),ZOo=r(h9e," (LXMERT model)"),h9e.forEach(t),eVo=i(X),_1=n(X,"LI",{});var u9e=s(_1);the=n(u9e,"STRONG",{});var Umt=s(the);oVo=r(Umt,"mbart"),Umt.forEach(t),rVo=r(u9e," \u2014 "),fV=n(u9e,"A",{href:!0});var Jmt=s(fV);tVo=r(Jmt,"MBartForQuestionAnswering"),Jmt.forEach(t),aVo=r(u9e," (mBART model)"),u9e.forEach(t),nVo=i(X),b1=n(X,"LI",{});var p9e=s(b1);ahe=n(p9e,"STRONG",{});var Ymt=s(ahe);sVo=r(Ymt,"megatron-bert"),Ymt.forEach(t),lVo=r(p9e," \u2014 "),gV=n(p9e,"A",{href:!0});var Kmt=s(gV);iVo=r(Kmt,"MegatronBertForQuestionAnswering"),Kmt.forEach(t),dVo=r(p9e," (MegatronBert model)"),p9e.forEach(t),cVo=i(X),v1=n(X,"LI",{});var _9e=s(v1);nhe=n(_9e,"STRONG",{});var Zmt=s(nhe);mVo=r(Zmt,"mobilebert"),Zmt.forEach(t),fVo=r(_9e," \u2014 "),hV=n(_9e,"A",{href:!0});var eft=s(hV);gVo=r(eft,"MobileBertForQuestionAnswering"),eft.forEach(t),hVo=r(_9e," (MobileBERT model)"),_9e.forEach(t),uVo=i(X),F1=n(X,"LI",{});var b9e=s(F1);she=n(b9e,"STRONG",{});var oft=s(she);pVo=r(oft,"mpnet"),oft.forEach(t),_Vo=r(b9e," \u2014 "),uV=n(b9e,"A",{href:!0});var rft=s(uV);bVo=r(rft,"MPNetForQuestionAnswering"),rft.forEach(t),vVo=r(b9e," (MPNet model)"),b9e.forEach(t),FVo=i(X),T1=n(X,"LI",{});var v9e=s(T1);lhe=n(v9e,"STRONG",{});var tft=s(lhe);TVo=r(tft,"nystromformer"),tft.forEach(t),MVo=r(v9e," \u2014 "),pV=n(v9e,"A",{href:!0});var aft=s(pV);EVo=r(aft,"NystromformerForQuestionAnswering"),aft.forEach(t),CVo=r(v9e," (Nystromformer model)"),v9e.forEach(t),wVo=i(X),M1=n(X,"LI",{});var F9e=s(M1);ihe=n(F9e,"STRONG",{});var nft=s(ihe);AVo=r(nft,"qdqbert"),nft.forEach(t),yVo=r(F9e," \u2014 "),_V=n(F9e,"A",{href:!0});var sft=s(_V);LVo=r(sft,"QDQBertForQuestionAnswering"),sft.forEach(t),xVo=r(F9e," (QDQBert model)"),F9e.forEach(t),$Vo=i(X),E1=n(X,"LI",{});var T9e=s(E1);dhe=n(T9e,"STRONG",{});var lft=s(dhe);kVo=r(lft,"reformer"),lft.forEach(t),SVo=r(T9e," \u2014 "),bV=n(T9e,"A",{href:!0});var ift=s(bV);RVo=r(ift,"ReformerForQuestionAnswering"),ift.forEach(t),PVo=r(T9e," (Reformer model)"),T9e.forEach(t),BVo=i(X),C1=n(X,"LI",{});var M9e=s(C1);che=n(M9e,"STRONG",{});var dft=s(che);IVo=r(dft,"rembert"),dft.forEach(t),qVo=r(M9e," \u2014 "),vV=n(M9e,"A",{href:!0});var cft=s(vV);NVo=r(cft,"RemBertForQuestionAnswering"),cft.forEach(t),jVo=r(M9e," (RemBERT model)"),M9e.forEach(t),DVo=i(X),w1=n(X,"LI",{});var E9e=s(w1);mhe=n(E9e,"STRONG",{});var mft=s(mhe);GVo=r(mft,"roberta"),mft.forEach(t),OVo=r(E9e," \u2014 "),FV=n(E9e,"A",{href:!0});var fft=s(FV);VVo=r(fft,"RobertaForQuestionAnswering"),fft.forEach(t),XVo=r(E9e," (RoBERTa model)"),E9e.forEach(t),zVo=i(X),A1=n(X,"LI",{});var C9e=s(A1);fhe=n(C9e,"STRONG",{});var gft=s(fhe);WVo=r(gft,"roformer"),gft.forEach(t),QVo=r(C9e," \u2014 "),TV=n(C9e,"A",{href:!0});var hft=s(TV);HVo=r(hft,"RoFormerForQuestionAnswering"),hft.forEach(t),UVo=r(C9e," (RoFormer model)"),C9e.forEach(t),JVo=i(X),y1=n(X,"LI",{});var w9e=s(y1);ghe=n(w9e,"STRONG",{});var uft=s(ghe);YVo=r(uft,"splinter"),uft.forEach(t),KVo=r(w9e," \u2014 "),MV=n(w9e,"A",{href:!0});var pft=s(MV);ZVo=r(pft,"SplinterForQuestionAnswering"),pft.forEach(t),eXo=r(w9e," (Splinter model)"),w9e.forEach(t),oXo=i(X),L1=n(X,"LI",{});var A9e=s(L1);hhe=n(A9e,"STRONG",{});var _ft=s(hhe);rXo=r(_ft,"squeezebert"),_ft.forEach(t),tXo=r(A9e," \u2014 "),EV=n(A9e,"A",{href:!0});var bft=s(EV);aXo=r(bft,"SqueezeBertForQuestionAnswering"),bft.forEach(t),nXo=r(A9e," (SqueezeBERT model)"),A9e.forEach(t),sXo=i(X),x1=n(X,"LI",{});var y9e=s(x1);uhe=n(y9e,"STRONG",{});var vft=s(uhe);lXo=r(vft,"xlm"),vft.forEach(t),iXo=r(y9e," \u2014 "),CV=n(y9e,"A",{href:!0});var Fft=s(CV);dXo=r(Fft,"XLMForQuestionAnsweringSimple"),Fft.forEach(t),cXo=r(y9e," (XLM model)"),y9e.forEach(t),mXo=i(X),$1=n(X,"LI",{});var L9e=s($1);phe=n(L9e,"STRONG",{});var Tft=s(phe);fXo=r(Tft,"xlm-roberta"),Tft.forEach(t),gXo=r(L9e," \u2014 "),wV=n(L9e,"A",{href:!0});var Mft=s(wV);hXo=r(Mft,"XLMRobertaForQuestionAnswering"),Mft.forEach(t),uXo=r(L9e," (XLM-RoBERTa model)"),L9e.forEach(t),pXo=i(X),k1=n(X,"LI",{});var x9e=s(k1);_he=n(x9e,"STRONG",{});var Eft=s(_he);_Xo=r(Eft,"xlm-roberta-xl"),Eft.forEach(t),bXo=r(x9e," \u2014 "),AV=n(x9e,"A",{href:!0});var Cft=s(AV);vXo=r(Cft,"XLMRobertaXLForQuestionAnswering"),Cft.forEach(t),FXo=r(x9e," (XLM-RoBERTa-XL model)"),x9e.forEach(t),TXo=i(X),S1=n(X,"LI",{});var $9e=s(S1);bhe=n($9e,"STRONG",{});var wft=s(bhe);MXo=r(wft,"xlnet"),wft.forEach(t),EXo=r($9e," \u2014 "),yV=n($9e,"A",{href:!0});var Aft=s(yV);CXo=r(Aft,"XLNetForQuestionAnsweringSimple"),Aft.forEach(t),wXo=r($9e," (XLNet model)"),$9e.forEach(t),AXo=i(X),R1=n(X,"LI",{});var k9e=s(R1);vhe=n(k9e,"STRONG",{});var yft=s(vhe);yXo=r(yft,"yoso"),yft.forEach(t),LXo=r(k9e," \u2014 "),LV=n(k9e,"A",{href:!0});var Lft=s(LV);xXo=r(Lft,"YosoForQuestionAnswering"),Lft.forEach(t),$Xo=r(k9e," (YOSO model)"),k9e.forEach(t),X.forEach(t),kXo=i(ca),P1=n(ca,"P",{});var S9e=s(P1);SXo=r(S9e,"The model is set in evaluation mode by default using "),Fhe=n(S9e,"CODE",{});var xft=s(Fhe);RXo=r(xft,"model.eval()"),xft.forEach(t),PXo=r(S9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),The=n(S9e,"CODE",{});var $ft=s(The);BXo=r($ft,"model.train()"),$ft.forEach(t),S9e.forEach(t),IXo=i(ca),T(B1.$$.fragment,ca),ca.forEach(t),Js.forEach(t),iqe=i(m),ed=n(m,"H2",{class:!0});var fje=s(ed);I1=n(fje,"A",{id:!0,class:!0,href:!0});var kft=s(I1);Mhe=n(kft,"SPAN",{});var Sft=s(Mhe);T($L.$$.fragment,Sft),Sft.forEach(t),kft.forEach(t),qXo=i(fje),Ehe=n(fje,"SPAN",{});var Rft=s(Ehe);NXo=r(Rft,"AutoModelForTableQuestionAnswering"),Rft.forEach(t),fje.forEach(t),dqe=i(m),No=n(m,"DIV",{class:!0});var Ys=s(No);T(kL.$$.fragment,Ys),jXo=i(Ys),od=n(Ys,"P",{});var UK=s(od);DXo=r(UK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),xV=n(UK,"A",{href:!0});var Pft=s(xV);GXo=r(Pft,"from_pretrained()"),Pft.forEach(t),OXo=r(UK," class method or the "),$V=n(UK,"A",{href:!0});var Bft=s($V);VXo=r(Bft,"from_config()"),Bft.forEach(t),XXo=r(UK,` class
method.`),UK.forEach(t),zXo=i(Ys),SL=n(Ys,"P",{});var gje=s(SL);WXo=r(gje,"This class cannot be instantiated directly using "),Che=n(gje,"CODE",{});var Ift=s(Che);QXo=r(Ift,"__init__()"),Ift.forEach(t),HXo=r(gje," (throws an error)."),gje.forEach(t),UXo=i(Ys),gt=n(Ys,"DIV",{class:!0});var S6=s(gt);T(RL.$$.fragment,S6),JXo=i(S6),whe=n(S6,"P",{});var qft=s(whe);YXo=r(qft,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),qft.forEach(t),KXo=i(S6),rd=n(S6,"P",{});var JK=s(rd);ZXo=r(JK,`Note:
Loading a model from its configuration file does `),Ahe=n(JK,"STRONG",{});var Nft=s(Ahe);ezo=r(Nft,"not"),Nft.forEach(t),ozo=r(JK,` load the model weights. It only affects the
model\u2019s configuration. Use `),kV=n(JK,"A",{href:!0});var jft=s(kV);rzo=r(jft,"from_pretrained()"),jft.forEach(t),tzo=r(JK," to load the model weights."),JK.forEach(t),azo=i(S6),T(q1.$$.fragment,S6),S6.forEach(t),nzo=i(Ys),so=n(Ys,"DIV",{class:!0});var ma=s(so);T(PL.$$.fragment,ma),szo=i(ma),yhe=n(ma,"P",{});var Dft=s(yhe);lzo=r(Dft,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Dft.forEach(t),izo=i(ma),Na=n(ma,"P",{});var R6=s(Na);dzo=r(R6,"The model class to instantiate is selected based on the "),Lhe=n(R6,"CODE",{});var Gft=s(Lhe);czo=r(Gft,"model_type"),Gft.forEach(t),mzo=r(R6,` property of the config object (either
passed as an argument or loaded from `),xhe=n(R6,"CODE",{});var Oft=s(xhe);fzo=r(Oft,"pretrained_model_name_or_path"),Oft.forEach(t),gzo=r(R6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$he=n(R6,"CODE",{});var Vft=s($he);hzo=r(Vft,"pretrained_model_name_or_path"),Vft.forEach(t),uzo=r(R6,":"),R6.forEach(t),pzo=i(ma),khe=n(ma,"UL",{});var Xft=s(khe);N1=n(Xft,"LI",{});var R9e=s(N1);She=n(R9e,"STRONG",{});var zft=s(She);_zo=r(zft,"tapas"),zft.forEach(t),bzo=r(R9e," \u2014 "),SV=n(R9e,"A",{href:!0});var Wft=s(SV);vzo=r(Wft,"TapasForQuestionAnswering"),Wft.forEach(t),Fzo=r(R9e," (TAPAS model)"),R9e.forEach(t),Xft.forEach(t),Tzo=i(ma),j1=n(ma,"P",{});var P9e=s(j1);Mzo=r(P9e,"The model is set in evaluation mode by default using "),Rhe=n(P9e,"CODE",{});var Qft=s(Rhe);Ezo=r(Qft,"model.eval()"),Qft.forEach(t),Czo=r(P9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Phe=n(P9e,"CODE",{});var Hft=s(Phe);wzo=r(Hft,"model.train()"),Hft.forEach(t),P9e.forEach(t),Azo=i(ma),T(D1.$$.fragment,ma),ma.forEach(t),Ys.forEach(t),cqe=i(m),td=n(m,"H2",{class:!0});var hje=s(td);G1=n(hje,"A",{id:!0,class:!0,href:!0});var Uft=s(G1);Bhe=n(Uft,"SPAN",{});var Jft=s(Bhe);T(BL.$$.fragment,Jft),Jft.forEach(t),Uft.forEach(t),yzo=i(hje),Ihe=n(hje,"SPAN",{});var Yft=s(Ihe);Lzo=r(Yft,"AutoModelForImageClassification"),Yft.forEach(t),hje.forEach(t),mqe=i(m),jo=n(m,"DIV",{class:!0});var Ks=s(jo);T(IL.$$.fragment,Ks),xzo=i(Ks),ad=n(Ks,"P",{});var YK=s(ad);$zo=r(YK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),RV=n(YK,"A",{href:!0});var Kft=s(RV);kzo=r(Kft,"from_pretrained()"),Kft.forEach(t),Szo=r(YK," class method or the "),PV=n(YK,"A",{href:!0});var Zft=s(PV);Rzo=r(Zft,"from_config()"),Zft.forEach(t),Pzo=r(YK,` class
method.`),YK.forEach(t),Bzo=i(Ks),qL=n(Ks,"P",{});var uje=s(qL);Izo=r(uje,"This class cannot be instantiated directly using "),qhe=n(uje,"CODE",{});var egt=s(qhe);qzo=r(egt,"__init__()"),egt.forEach(t),Nzo=r(uje," (throws an error)."),uje.forEach(t),jzo=i(Ks),ht=n(Ks,"DIV",{class:!0});var P6=s(ht);T(NL.$$.fragment,P6),Dzo=i(P6),Nhe=n(P6,"P",{});var ogt=s(Nhe);Gzo=r(ogt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),ogt.forEach(t),Ozo=i(P6),nd=n(P6,"P",{});var KK=s(nd);Vzo=r(KK,`Note:
Loading a model from its configuration file does `),jhe=n(KK,"STRONG",{});var rgt=s(jhe);Xzo=r(rgt,"not"),rgt.forEach(t),zzo=r(KK,` load the model weights. It only affects the
model\u2019s configuration. Use `),BV=n(KK,"A",{href:!0});var tgt=s(BV);Wzo=r(tgt,"from_pretrained()"),tgt.forEach(t),Qzo=r(KK," to load the model weights."),KK.forEach(t),Hzo=i(P6),T(O1.$$.fragment,P6),P6.forEach(t),Uzo=i(Ks),lo=n(Ks,"DIV",{class:!0});var fa=s(lo);T(jL.$$.fragment,fa),Jzo=i(fa),Dhe=n(fa,"P",{});var agt=s(Dhe);Yzo=r(agt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),agt.forEach(t),Kzo=i(fa),ja=n(fa,"P",{});var B6=s(ja);Zzo=r(B6,"The model class to instantiate is selected based on the "),Ghe=n(B6,"CODE",{});var ngt=s(Ghe);eWo=r(ngt,"model_type"),ngt.forEach(t),oWo=r(B6,` property of the config object (either
passed as an argument or loaded from `),Ohe=n(B6,"CODE",{});var sgt=s(Ohe);rWo=r(sgt,"pretrained_model_name_or_path"),sgt.forEach(t),tWo=r(B6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vhe=n(B6,"CODE",{});var lgt=s(Vhe);aWo=r(lgt,"pretrained_model_name_or_path"),lgt.forEach(t),nWo=r(B6,":"),B6.forEach(t),sWo=i(fa),Fe=n(fa,"UL",{});var Ee=s(Fe);V1=n(Ee,"LI",{});var B9e=s(V1);Xhe=n(B9e,"STRONG",{});var igt=s(Xhe);lWo=r(igt,"beit"),igt.forEach(t),iWo=r(B9e," \u2014 "),IV=n(B9e,"A",{href:!0});var dgt=s(IV);dWo=r(dgt,"BeitForImageClassification"),dgt.forEach(t),cWo=r(B9e," (BEiT model)"),B9e.forEach(t),mWo=i(Ee),X1=n(Ee,"LI",{});var I9e=s(X1);zhe=n(I9e,"STRONG",{});var cgt=s(zhe);fWo=r(cgt,"convnext"),cgt.forEach(t),gWo=r(I9e," \u2014 "),qV=n(I9e,"A",{href:!0});var mgt=s(qV);hWo=r(mgt,"ConvNextForImageClassification"),mgt.forEach(t),uWo=r(I9e," (ConvNext model)"),I9e.forEach(t),pWo=i(Ee),z1=n(Ee,"LI",{});var q9e=s(z1);Whe=n(q9e,"STRONG",{});var fgt=s(Whe);_Wo=r(fgt,"data2vec-vision"),fgt.forEach(t),bWo=r(q9e," \u2014 "),NV=n(q9e,"A",{href:!0});var ggt=s(NV);vWo=r(ggt,"Data2VecVisionForImageClassification"),ggt.forEach(t),FWo=r(q9e," (Data2VecVision model)"),q9e.forEach(t),TWo=i(Ee),Ps=n(Ee,"LI",{});var E$=s(Ps);Qhe=n(E$,"STRONG",{});var hgt=s(Qhe);MWo=r(hgt,"deit"),hgt.forEach(t),EWo=r(E$," \u2014 "),jV=n(E$,"A",{href:!0});var ugt=s(jV);CWo=r(ugt,"DeiTForImageClassification"),ugt.forEach(t),wWo=r(E$," or "),DV=n(E$,"A",{href:!0});var pgt=s(DV);AWo=r(pgt,"DeiTForImageClassificationWithTeacher"),pgt.forEach(t),yWo=r(E$," (DeiT model)"),E$.forEach(t),LWo=i(Ee),W1=n(Ee,"LI",{});var N9e=s(W1);Hhe=n(N9e,"STRONG",{});var _gt=s(Hhe);xWo=r(_gt,"imagegpt"),_gt.forEach(t),$Wo=r(N9e," \u2014 "),GV=n(N9e,"A",{href:!0});var bgt=s(GV);kWo=r(bgt,"ImageGPTForImageClassification"),bgt.forEach(t),SWo=r(N9e," (ImageGPT model)"),N9e.forEach(t),RWo=i(Ee),ut=n(Ee,"LI",{});var fm=s(ut);Uhe=n(fm,"STRONG",{});var vgt=s(Uhe);PWo=r(vgt,"perceiver"),vgt.forEach(t),BWo=r(fm," \u2014 "),OV=n(fm,"A",{href:!0});var Fgt=s(OV);IWo=r(Fgt,"PerceiverForImageClassificationLearned"),Fgt.forEach(t),qWo=r(fm," or "),VV=n(fm,"A",{href:!0});var Tgt=s(VV);NWo=r(Tgt,"PerceiverForImageClassificationFourier"),Tgt.forEach(t),jWo=r(fm," or "),XV=n(fm,"A",{href:!0});var Mgt=s(XV);DWo=r(Mgt,"PerceiverForImageClassificationConvProcessing"),Mgt.forEach(t),GWo=r(fm," (Perceiver model)"),fm.forEach(t),OWo=i(Ee),Q1=n(Ee,"LI",{});var j9e=s(Q1);Jhe=n(j9e,"STRONG",{});var Egt=s(Jhe);VWo=r(Egt,"poolformer"),Egt.forEach(t),XWo=r(j9e," \u2014 "),zV=n(j9e,"A",{href:!0});var Cgt=s(zV);zWo=r(Cgt,"PoolFormerForImageClassification"),Cgt.forEach(t),WWo=r(j9e," (PoolFormer model)"),j9e.forEach(t),QWo=i(Ee),H1=n(Ee,"LI",{});var D9e=s(H1);Yhe=n(D9e,"STRONG",{});var wgt=s(Yhe);HWo=r(wgt,"regnet"),wgt.forEach(t),UWo=r(D9e," \u2014 "),WV=n(D9e,"A",{href:!0});var Agt=s(WV);JWo=r(Agt,"RegNetForImageClassification"),Agt.forEach(t),YWo=r(D9e," (RegNet model)"),D9e.forEach(t),KWo=i(Ee),U1=n(Ee,"LI",{});var G9e=s(U1);Khe=n(G9e,"STRONG",{});var ygt=s(Khe);ZWo=r(ygt,"resnet"),ygt.forEach(t),eQo=r(G9e," \u2014 "),QV=n(G9e,"A",{href:!0});var Lgt=s(QV);oQo=r(Lgt,"ResNetForImageClassification"),Lgt.forEach(t),rQo=r(G9e," (ResNet model)"),G9e.forEach(t),tQo=i(Ee),J1=n(Ee,"LI",{});var O9e=s(J1);Zhe=n(O9e,"STRONG",{});var xgt=s(Zhe);aQo=r(xgt,"segformer"),xgt.forEach(t),nQo=r(O9e," \u2014 "),HV=n(O9e,"A",{href:!0});var $gt=s(HV);sQo=r($gt,"SegformerForImageClassification"),$gt.forEach(t),lQo=r(O9e," (SegFormer model)"),O9e.forEach(t),iQo=i(Ee),Y1=n(Ee,"LI",{});var V9e=s(Y1);eue=n(V9e,"STRONG",{});var kgt=s(eue);dQo=r(kgt,"swin"),kgt.forEach(t),cQo=r(V9e," \u2014 "),UV=n(V9e,"A",{href:!0});var Sgt=s(UV);mQo=r(Sgt,"SwinForImageClassification"),Sgt.forEach(t),fQo=r(V9e," (Swin model)"),V9e.forEach(t),gQo=i(Ee),K1=n(Ee,"LI",{});var X9e=s(K1);oue=n(X9e,"STRONG",{});var Rgt=s(oue);hQo=r(Rgt,"van"),Rgt.forEach(t),uQo=r(X9e," \u2014 "),JV=n(X9e,"A",{href:!0});var Pgt=s(JV);pQo=r(Pgt,"VanForImageClassification"),Pgt.forEach(t),_Qo=r(X9e," (VAN model)"),X9e.forEach(t),bQo=i(Ee),Z1=n(Ee,"LI",{});var z9e=s(Z1);rue=n(z9e,"STRONG",{});var Bgt=s(rue);vQo=r(Bgt,"vit"),Bgt.forEach(t),FQo=r(z9e," \u2014 "),YV=n(z9e,"A",{href:!0});var Igt=s(YV);TQo=r(Igt,"ViTForImageClassification"),Igt.forEach(t),MQo=r(z9e," (ViT model)"),z9e.forEach(t),Ee.forEach(t),EQo=i(fa),eT=n(fa,"P",{});var W9e=s(eT);CQo=r(W9e,"The model is set in evaluation mode by default using "),tue=n(W9e,"CODE",{});var qgt=s(tue);wQo=r(qgt,"model.eval()"),qgt.forEach(t),AQo=r(W9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),aue=n(W9e,"CODE",{});var Ngt=s(aue);yQo=r(Ngt,"model.train()"),Ngt.forEach(t),W9e.forEach(t),LQo=i(fa),T(oT.$$.fragment,fa),fa.forEach(t),Ks.forEach(t),fqe=i(m),sd=n(m,"H2",{class:!0});var pje=s(sd);rT=n(pje,"A",{id:!0,class:!0,href:!0});var jgt=s(rT);nue=n(jgt,"SPAN",{});var Dgt=s(nue);T(DL.$$.fragment,Dgt),Dgt.forEach(t),jgt.forEach(t),xQo=i(pje),sue=n(pje,"SPAN",{});var Ggt=s(sue);$Qo=r(Ggt,"AutoModelForVision2Seq"),Ggt.forEach(t),pje.forEach(t),gqe=i(m),Do=n(m,"DIV",{class:!0});var Zs=s(Do);T(GL.$$.fragment,Zs),kQo=i(Zs),ld=n(Zs,"P",{});var ZK=s(ld);SQo=r(ZK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),KV=n(ZK,"A",{href:!0});var Ogt=s(KV);RQo=r(Ogt,"from_pretrained()"),Ogt.forEach(t),PQo=r(ZK," class method or the "),ZV=n(ZK,"A",{href:!0});var Vgt=s(ZV);BQo=r(Vgt,"from_config()"),Vgt.forEach(t),IQo=r(ZK,` class
method.`),ZK.forEach(t),qQo=i(Zs),OL=n(Zs,"P",{});var _je=s(OL);NQo=r(_je,"This class cannot be instantiated directly using "),lue=n(_je,"CODE",{});var Xgt=s(lue);jQo=r(Xgt,"__init__()"),Xgt.forEach(t),DQo=r(_je," (throws an error)."),_je.forEach(t),GQo=i(Zs),pt=n(Zs,"DIV",{class:!0});var I6=s(pt);T(VL.$$.fragment,I6),OQo=i(I6),iue=n(I6,"P",{});var zgt=s(iue);VQo=r(zgt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),zgt.forEach(t),XQo=i(I6),id=n(I6,"P",{});var eZ=s(id);zQo=r(eZ,`Note:
Loading a model from its configuration file does `),due=n(eZ,"STRONG",{});var Wgt=s(due);WQo=r(Wgt,"not"),Wgt.forEach(t),QQo=r(eZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),eX=n(eZ,"A",{href:!0});var Qgt=s(eX);HQo=r(Qgt,"from_pretrained()"),Qgt.forEach(t),UQo=r(eZ," to load the model weights."),eZ.forEach(t),JQo=i(I6),T(tT.$$.fragment,I6),I6.forEach(t),YQo=i(Zs),io=n(Zs,"DIV",{class:!0});var ga=s(io);T(XL.$$.fragment,ga),KQo=i(ga),cue=n(ga,"P",{});var Hgt=s(cue);ZQo=r(Hgt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Hgt.forEach(t),eHo=i(ga),Da=n(ga,"P",{});var q6=s(Da);oHo=r(q6,"The model class to instantiate is selected based on the "),mue=n(q6,"CODE",{});var Ugt=s(mue);rHo=r(Ugt,"model_type"),Ugt.forEach(t),tHo=r(q6,` property of the config object (either
passed as an argument or loaded from `),fue=n(q6,"CODE",{});var Jgt=s(fue);aHo=r(Jgt,"pretrained_model_name_or_path"),Jgt.forEach(t),nHo=r(q6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gue=n(q6,"CODE",{});var Ygt=s(gue);sHo=r(Ygt,"pretrained_model_name_or_path"),Ygt.forEach(t),lHo=r(q6,":"),q6.forEach(t),iHo=i(ga),hue=n(ga,"UL",{});var Kgt=s(hue);aT=n(Kgt,"LI",{});var Q9e=s(aT);uue=n(Q9e,"STRONG",{});var Zgt=s(uue);dHo=r(Zgt,"vision-encoder-decoder"),Zgt.forEach(t),cHo=r(Q9e," \u2014 "),oX=n(Q9e,"A",{href:!0});var eht=s(oX);mHo=r(eht,"VisionEncoderDecoderModel"),eht.forEach(t),fHo=r(Q9e," (Vision Encoder decoder model)"),Q9e.forEach(t),Kgt.forEach(t),gHo=i(ga),nT=n(ga,"P",{});var H9e=s(nT);hHo=r(H9e,"The model is set in evaluation mode by default using "),pue=n(H9e,"CODE",{});var oht=s(pue);uHo=r(oht,"model.eval()"),oht.forEach(t),pHo=r(H9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_ue=n(H9e,"CODE",{});var rht=s(_ue);_Ho=r(rht,"model.train()"),rht.forEach(t),H9e.forEach(t),bHo=i(ga),T(sT.$$.fragment,ga),ga.forEach(t),Zs.forEach(t),hqe=i(m),dd=n(m,"H2",{class:!0});var bje=s(dd);lT=n(bje,"A",{id:!0,class:!0,href:!0});var tht=s(lT);bue=n(tht,"SPAN",{});var aht=s(bue);T(zL.$$.fragment,aht),aht.forEach(t),tht.forEach(t),vHo=i(bje),vue=n(bje,"SPAN",{});var nht=s(vue);FHo=r(nht,"AutoModelForAudioClassification"),nht.forEach(t),bje.forEach(t),uqe=i(m),Go=n(m,"DIV",{class:!0});var el=s(Go);T(WL.$$.fragment,el),THo=i(el),cd=n(el,"P",{});var oZ=s(cd);MHo=r(oZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),rX=n(oZ,"A",{href:!0});var sht=s(rX);EHo=r(sht,"from_pretrained()"),sht.forEach(t),CHo=r(oZ," class method or the "),tX=n(oZ,"A",{href:!0});var lht=s(tX);wHo=r(lht,"from_config()"),lht.forEach(t),AHo=r(oZ,` class
method.`),oZ.forEach(t),yHo=i(el),QL=n(el,"P",{});var vje=s(QL);LHo=r(vje,"This class cannot be instantiated directly using "),Fue=n(vje,"CODE",{});var iht=s(Fue);xHo=r(iht,"__init__()"),iht.forEach(t),$Ho=r(vje," (throws an error)."),vje.forEach(t),kHo=i(el),_t=n(el,"DIV",{class:!0});var N6=s(_t);T(HL.$$.fragment,N6),SHo=i(N6),Tue=n(N6,"P",{});var dht=s(Tue);RHo=r(dht,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),dht.forEach(t),PHo=i(N6),md=n(N6,"P",{});var rZ=s(md);BHo=r(rZ,`Note:
Loading a model from its configuration file does `),Mue=n(rZ,"STRONG",{});var cht=s(Mue);IHo=r(cht,"not"),cht.forEach(t),qHo=r(rZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),aX=n(rZ,"A",{href:!0});var mht=s(aX);NHo=r(mht,"from_pretrained()"),mht.forEach(t),jHo=r(rZ," to load the model weights."),rZ.forEach(t),DHo=i(N6),T(iT.$$.fragment,N6),N6.forEach(t),GHo=i(el),co=n(el,"DIV",{class:!0});var ha=s(co);T(UL.$$.fragment,ha),OHo=i(ha),Eue=n(ha,"P",{});var fht=s(Eue);VHo=r(fht,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),fht.forEach(t),XHo=i(ha),Ga=n(ha,"P",{});var j6=s(Ga);zHo=r(j6,"The model class to instantiate is selected based on the "),Cue=n(j6,"CODE",{});var ght=s(Cue);WHo=r(ght,"model_type"),ght.forEach(t),QHo=r(j6,` property of the config object (either
passed as an argument or loaded from `),wue=n(j6,"CODE",{});var hht=s(wue);HHo=r(hht,"pretrained_model_name_or_path"),hht.forEach(t),UHo=r(j6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Aue=n(j6,"CODE",{});var uht=s(Aue);JHo=r(uht,"pretrained_model_name_or_path"),uht.forEach(t),YHo=r(j6,":"),j6.forEach(t),KHo=i(ha),ke=n(ha,"UL",{});var Oe=s(ke);dT=n(Oe,"LI",{});var U9e=s(dT);yue=n(U9e,"STRONG",{});var pht=s(yue);ZHo=r(pht,"data2vec-audio"),pht.forEach(t),eUo=r(U9e," \u2014 "),nX=n(U9e,"A",{href:!0});var _ht=s(nX);oUo=r(_ht,"Data2VecAudioForSequenceClassification"),_ht.forEach(t),rUo=r(U9e," (Data2VecAudio model)"),U9e.forEach(t),tUo=i(Oe),cT=n(Oe,"LI",{});var J9e=s(cT);Lue=n(J9e,"STRONG",{});var bht=s(Lue);aUo=r(bht,"hubert"),bht.forEach(t),nUo=r(J9e," \u2014 "),sX=n(J9e,"A",{href:!0});var vht=s(sX);sUo=r(vht,"HubertForSequenceClassification"),vht.forEach(t),lUo=r(J9e," (Hubert model)"),J9e.forEach(t),iUo=i(Oe),mT=n(Oe,"LI",{});var Y9e=s(mT);xue=n(Y9e,"STRONG",{});var Fht=s(xue);dUo=r(Fht,"sew"),Fht.forEach(t),cUo=r(Y9e," \u2014 "),lX=n(Y9e,"A",{href:!0});var Tht=s(lX);mUo=r(Tht,"SEWForSequenceClassification"),Tht.forEach(t),fUo=r(Y9e," (SEW model)"),Y9e.forEach(t),gUo=i(Oe),fT=n(Oe,"LI",{});var K9e=s(fT);$ue=n(K9e,"STRONG",{});var Mht=s($ue);hUo=r(Mht,"sew-d"),Mht.forEach(t),uUo=r(K9e," \u2014 "),iX=n(K9e,"A",{href:!0});var Eht=s(iX);pUo=r(Eht,"SEWDForSequenceClassification"),Eht.forEach(t),_Uo=r(K9e," (SEW-D model)"),K9e.forEach(t),bUo=i(Oe),gT=n(Oe,"LI",{});var Z9e=s(gT);kue=n(Z9e,"STRONG",{});var Cht=s(kue);vUo=r(Cht,"unispeech"),Cht.forEach(t),FUo=r(Z9e," \u2014 "),dX=n(Z9e,"A",{href:!0});var wht=s(dX);TUo=r(wht,"UniSpeechForSequenceClassification"),wht.forEach(t),MUo=r(Z9e," (UniSpeech model)"),Z9e.forEach(t),EUo=i(Oe),hT=n(Oe,"LI",{});var e$e=s(hT);Sue=n(e$e,"STRONG",{});var Aht=s(Sue);CUo=r(Aht,"unispeech-sat"),Aht.forEach(t),wUo=r(e$e," \u2014 "),cX=n(e$e,"A",{href:!0});var yht=s(cX);AUo=r(yht,"UniSpeechSatForSequenceClassification"),yht.forEach(t),yUo=r(e$e," (UniSpeechSat model)"),e$e.forEach(t),LUo=i(Oe),uT=n(Oe,"LI",{});var o$e=s(uT);Rue=n(o$e,"STRONG",{});var Lht=s(Rue);xUo=r(Lht,"wav2vec2"),Lht.forEach(t),$Uo=r(o$e," \u2014 "),mX=n(o$e,"A",{href:!0});var xht=s(mX);kUo=r(xht,"Wav2Vec2ForSequenceClassification"),xht.forEach(t),SUo=r(o$e," (Wav2Vec2 model)"),o$e.forEach(t),RUo=i(Oe),pT=n(Oe,"LI",{});var r$e=s(pT);Pue=n(r$e,"STRONG",{});var $ht=s(Pue);PUo=r($ht,"wav2vec2-conformer"),$ht.forEach(t),BUo=r(r$e," \u2014 "),fX=n(r$e,"A",{href:!0});var kht=s(fX);IUo=r(kht,"Wav2Vec2ConformerForSequenceClassification"),kht.forEach(t),qUo=r(r$e," (Wav2Vec2-Conformer model)"),r$e.forEach(t),NUo=i(Oe),_T=n(Oe,"LI",{});var t$e=s(_T);Bue=n(t$e,"STRONG",{});var Sht=s(Bue);jUo=r(Sht,"wavlm"),Sht.forEach(t),DUo=r(t$e," \u2014 "),gX=n(t$e,"A",{href:!0});var Rht=s(gX);GUo=r(Rht,"WavLMForSequenceClassification"),Rht.forEach(t),OUo=r(t$e," (WavLM model)"),t$e.forEach(t),Oe.forEach(t),VUo=i(ha),bT=n(ha,"P",{});var a$e=s(bT);XUo=r(a$e,"The model is set in evaluation mode by default using "),Iue=n(a$e,"CODE",{});var Pht=s(Iue);zUo=r(Pht,"model.eval()"),Pht.forEach(t),WUo=r(a$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),que=n(a$e,"CODE",{});var Bht=s(que);QUo=r(Bht,"model.train()"),Bht.forEach(t),a$e.forEach(t),HUo=i(ha),T(vT.$$.fragment,ha),ha.forEach(t),el.forEach(t),pqe=i(m),fd=n(m,"H2",{class:!0});var Fje=s(fd);FT=n(Fje,"A",{id:!0,class:!0,href:!0});var Iht=s(FT);Nue=n(Iht,"SPAN",{});var qht=s(Nue);T(JL.$$.fragment,qht),qht.forEach(t),Iht.forEach(t),UUo=i(Fje),jue=n(Fje,"SPAN",{});var Nht=s(jue);JUo=r(Nht,"AutoModelForAudioFrameClassification"),Nht.forEach(t),Fje.forEach(t),_qe=i(m),Oo=n(m,"DIV",{class:!0});var ol=s(Oo);T(YL.$$.fragment,ol),YUo=i(ol),gd=n(ol,"P",{});var tZ=s(gd);KUo=r(tZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),hX=n(tZ,"A",{href:!0});var jht=s(hX);ZUo=r(jht,"from_pretrained()"),jht.forEach(t),eJo=r(tZ," class method or the "),uX=n(tZ,"A",{href:!0});var Dht=s(uX);oJo=r(Dht,"from_config()"),Dht.forEach(t),rJo=r(tZ,` class
method.`),tZ.forEach(t),tJo=i(ol),KL=n(ol,"P",{});var Tje=s(KL);aJo=r(Tje,"This class cannot be instantiated directly using "),Due=n(Tje,"CODE",{});var Ght=s(Due);nJo=r(Ght,"__init__()"),Ght.forEach(t),sJo=r(Tje," (throws an error)."),Tje.forEach(t),lJo=i(ol),bt=n(ol,"DIV",{class:!0});var D6=s(bt);T(ZL.$$.fragment,D6),iJo=i(D6),Gue=n(D6,"P",{});var Oht=s(Gue);dJo=r(Oht,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),Oht.forEach(t),cJo=i(D6),hd=n(D6,"P",{});var aZ=s(hd);mJo=r(aZ,`Note:
Loading a model from its configuration file does `),Oue=n(aZ,"STRONG",{});var Vht=s(Oue);fJo=r(Vht,"not"),Vht.forEach(t),gJo=r(aZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),pX=n(aZ,"A",{href:!0});var Xht=s(pX);hJo=r(Xht,"from_pretrained()"),Xht.forEach(t),uJo=r(aZ," to load the model weights."),aZ.forEach(t),pJo=i(D6),T(TT.$$.fragment,D6),D6.forEach(t),_Jo=i(ol),mo=n(ol,"DIV",{class:!0});var ua=s(mo);T(e8.$$.fragment,ua),bJo=i(ua),Vue=n(ua,"P",{});var zht=s(Vue);vJo=r(zht,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),zht.forEach(t),FJo=i(ua),Oa=n(ua,"P",{});var G6=s(Oa);TJo=r(G6,"The model class to instantiate is selected based on the "),Xue=n(G6,"CODE",{});var Wht=s(Xue);MJo=r(Wht,"model_type"),Wht.forEach(t),EJo=r(G6,` property of the config object (either
passed as an argument or loaded from `),zue=n(G6,"CODE",{});var Qht=s(zue);CJo=r(Qht,"pretrained_model_name_or_path"),Qht.forEach(t),wJo=r(G6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wue=n(G6,"CODE",{});var Hht=s(Wue);AJo=r(Hht,"pretrained_model_name_or_path"),Hht.forEach(t),yJo=r(G6,":"),G6.forEach(t),LJo=i(ua),Kr=n(ua,"UL",{});var rl=s(Kr);MT=n(rl,"LI",{});var n$e=s(MT);Que=n(n$e,"STRONG",{});var Uht=s(Que);xJo=r(Uht,"data2vec-audio"),Uht.forEach(t),$Jo=r(n$e," \u2014 "),_X=n(n$e,"A",{href:!0});var Jht=s(_X);kJo=r(Jht,"Data2VecAudioForAudioFrameClassification"),Jht.forEach(t),SJo=r(n$e," (Data2VecAudio model)"),n$e.forEach(t),RJo=i(rl),ET=n(rl,"LI",{});var s$e=s(ET);Hue=n(s$e,"STRONG",{});var Yht=s(Hue);PJo=r(Yht,"unispeech-sat"),Yht.forEach(t),BJo=r(s$e," \u2014 "),bX=n(s$e,"A",{href:!0});var Kht=s(bX);IJo=r(Kht,"UniSpeechSatForAudioFrameClassification"),Kht.forEach(t),qJo=r(s$e," (UniSpeechSat model)"),s$e.forEach(t),NJo=i(rl),CT=n(rl,"LI",{});var l$e=s(CT);Uue=n(l$e,"STRONG",{});var Zht=s(Uue);jJo=r(Zht,"wav2vec2"),Zht.forEach(t),DJo=r(l$e," \u2014 "),vX=n(l$e,"A",{href:!0});var eut=s(vX);GJo=r(eut,"Wav2Vec2ForAudioFrameClassification"),eut.forEach(t),OJo=r(l$e," (Wav2Vec2 model)"),l$e.forEach(t),VJo=i(rl),wT=n(rl,"LI",{});var i$e=s(wT);Jue=n(i$e,"STRONG",{});var out=s(Jue);XJo=r(out,"wav2vec2-conformer"),out.forEach(t),zJo=r(i$e," \u2014 "),FX=n(i$e,"A",{href:!0});var rut=s(FX);WJo=r(rut,"Wav2Vec2ConformerForAudioFrameClassification"),rut.forEach(t),QJo=r(i$e," (Wav2Vec2-Conformer model)"),i$e.forEach(t),HJo=i(rl),AT=n(rl,"LI",{});var d$e=s(AT);Yue=n(d$e,"STRONG",{});var tut=s(Yue);UJo=r(tut,"wavlm"),tut.forEach(t),JJo=r(d$e," \u2014 "),TX=n(d$e,"A",{href:!0});var aut=s(TX);YJo=r(aut,"WavLMForAudioFrameClassification"),aut.forEach(t),KJo=r(d$e," (WavLM model)"),d$e.forEach(t),rl.forEach(t),ZJo=i(ua),yT=n(ua,"P",{});var c$e=s(yT);eYo=r(c$e,"The model is set in evaluation mode by default using "),Kue=n(c$e,"CODE",{});var nut=s(Kue);oYo=r(nut,"model.eval()"),nut.forEach(t),rYo=r(c$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zue=n(c$e,"CODE",{});var sut=s(Zue);tYo=r(sut,"model.train()"),sut.forEach(t),c$e.forEach(t),aYo=i(ua),T(LT.$$.fragment,ua),ua.forEach(t),ol.forEach(t),bqe=i(m),ud=n(m,"H2",{class:!0});var Mje=s(ud);xT=n(Mje,"A",{id:!0,class:!0,href:!0});var lut=s(xT);epe=n(lut,"SPAN",{});var iut=s(epe);T(o8.$$.fragment,iut),iut.forEach(t),lut.forEach(t),nYo=i(Mje),ope=n(Mje,"SPAN",{});var dut=s(ope);sYo=r(dut,"AutoModelForCTC"),dut.forEach(t),Mje.forEach(t),vqe=i(m),Vo=n(m,"DIV",{class:!0});var tl=s(Vo);T(r8.$$.fragment,tl),lYo=i(tl),pd=n(tl,"P",{});var nZ=s(pd);iYo=r(nZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),MX=n(nZ,"A",{href:!0});var cut=s(MX);dYo=r(cut,"from_pretrained()"),cut.forEach(t),cYo=r(nZ," class method or the "),EX=n(nZ,"A",{href:!0});var mut=s(EX);mYo=r(mut,"from_config()"),mut.forEach(t),fYo=r(nZ,` class
method.`),nZ.forEach(t),gYo=i(tl),t8=n(tl,"P",{});var Eje=s(t8);hYo=r(Eje,"This class cannot be instantiated directly using "),rpe=n(Eje,"CODE",{});var fut=s(rpe);uYo=r(fut,"__init__()"),fut.forEach(t),pYo=r(Eje," (throws an error)."),Eje.forEach(t),_Yo=i(tl),vt=n(tl,"DIV",{class:!0});var O6=s(vt);T(a8.$$.fragment,O6),bYo=i(O6),tpe=n(O6,"P",{});var gut=s(tpe);vYo=r(gut,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),gut.forEach(t),FYo=i(O6),_d=n(O6,"P",{});var sZ=s(_d);TYo=r(sZ,`Note:
Loading a model from its configuration file does `),ape=n(sZ,"STRONG",{});var hut=s(ape);MYo=r(hut,"not"),hut.forEach(t),EYo=r(sZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),CX=n(sZ,"A",{href:!0});var uut=s(CX);CYo=r(uut,"from_pretrained()"),uut.forEach(t),wYo=r(sZ," to load the model weights."),sZ.forEach(t),AYo=i(O6),T($T.$$.fragment,O6),O6.forEach(t),yYo=i(tl),fo=n(tl,"DIV",{class:!0});var pa=s(fo);T(n8.$$.fragment,pa),LYo=i(pa),npe=n(pa,"P",{});var put=s(npe);xYo=r(put,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),put.forEach(t),$Yo=i(pa),Va=n(pa,"P",{});var V6=s(Va);kYo=r(V6,"The model class to instantiate is selected based on the "),spe=n(V6,"CODE",{});var _ut=s(spe);SYo=r(_ut,"model_type"),_ut.forEach(t),RYo=r(V6,` property of the config object (either
passed as an argument or loaded from `),lpe=n(V6,"CODE",{});var but=s(lpe);PYo=r(but,"pretrained_model_name_or_path"),but.forEach(t),BYo=r(V6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ipe=n(V6,"CODE",{});var vut=s(ipe);IYo=r(vut,"pretrained_model_name_or_path"),vut.forEach(t),qYo=r(V6,":"),V6.forEach(t),NYo=i(pa),Se=n(pa,"UL",{});var Ve=s(Se);kT=n(Ve,"LI",{});var m$e=s(kT);dpe=n(m$e,"STRONG",{});var Fut=s(dpe);jYo=r(Fut,"data2vec-audio"),Fut.forEach(t),DYo=r(m$e," \u2014 "),wX=n(m$e,"A",{href:!0});var Tut=s(wX);GYo=r(Tut,"Data2VecAudioForCTC"),Tut.forEach(t),OYo=r(m$e," (Data2VecAudio model)"),m$e.forEach(t),VYo=i(Ve),ST=n(Ve,"LI",{});var f$e=s(ST);cpe=n(f$e,"STRONG",{});var Mut=s(cpe);XYo=r(Mut,"hubert"),Mut.forEach(t),zYo=r(f$e," \u2014 "),AX=n(f$e,"A",{href:!0});var Eut=s(AX);WYo=r(Eut,"HubertForCTC"),Eut.forEach(t),QYo=r(f$e," (Hubert model)"),f$e.forEach(t),HYo=i(Ve),RT=n(Ve,"LI",{});var g$e=s(RT);mpe=n(g$e,"STRONG",{});var Cut=s(mpe);UYo=r(Cut,"sew"),Cut.forEach(t),JYo=r(g$e," \u2014 "),yX=n(g$e,"A",{href:!0});var wut=s(yX);YYo=r(wut,"SEWForCTC"),wut.forEach(t),KYo=r(g$e," (SEW model)"),g$e.forEach(t),ZYo=i(Ve),PT=n(Ve,"LI",{});var h$e=s(PT);fpe=n(h$e,"STRONG",{});var Aut=s(fpe);eKo=r(Aut,"sew-d"),Aut.forEach(t),oKo=r(h$e," \u2014 "),LX=n(h$e,"A",{href:!0});var yut=s(LX);rKo=r(yut,"SEWDForCTC"),yut.forEach(t),tKo=r(h$e," (SEW-D model)"),h$e.forEach(t),aKo=i(Ve),BT=n(Ve,"LI",{});var u$e=s(BT);gpe=n(u$e,"STRONG",{});var Lut=s(gpe);nKo=r(Lut,"unispeech"),Lut.forEach(t),sKo=r(u$e," \u2014 "),xX=n(u$e,"A",{href:!0});var xut=s(xX);lKo=r(xut,"UniSpeechForCTC"),xut.forEach(t),iKo=r(u$e," (UniSpeech model)"),u$e.forEach(t),dKo=i(Ve),IT=n(Ve,"LI",{});var p$e=s(IT);hpe=n(p$e,"STRONG",{});var $ut=s(hpe);cKo=r($ut,"unispeech-sat"),$ut.forEach(t),mKo=r(p$e," \u2014 "),$X=n(p$e,"A",{href:!0});var kut=s($X);fKo=r(kut,"UniSpeechSatForCTC"),kut.forEach(t),gKo=r(p$e," (UniSpeechSat model)"),p$e.forEach(t),hKo=i(Ve),qT=n(Ve,"LI",{});var _$e=s(qT);upe=n(_$e,"STRONG",{});var Sut=s(upe);uKo=r(Sut,"wav2vec2"),Sut.forEach(t),pKo=r(_$e," \u2014 "),kX=n(_$e,"A",{href:!0});var Rut=s(kX);_Ko=r(Rut,"Wav2Vec2ForCTC"),Rut.forEach(t),bKo=r(_$e," (Wav2Vec2 model)"),_$e.forEach(t),vKo=i(Ve),NT=n(Ve,"LI",{});var b$e=s(NT);ppe=n(b$e,"STRONG",{});var Put=s(ppe);FKo=r(Put,"wav2vec2-conformer"),Put.forEach(t),TKo=r(b$e," \u2014 "),SX=n(b$e,"A",{href:!0});var But=s(SX);MKo=r(But,"Wav2Vec2ConformerForCTC"),But.forEach(t),EKo=r(b$e," (Wav2Vec2-Conformer model)"),b$e.forEach(t),CKo=i(Ve),jT=n(Ve,"LI",{});var v$e=s(jT);_pe=n(v$e,"STRONG",{});var Iut=s(_pe);wKo=r(Iut,"wavlm"),Iut.forEach(t),AKo=r(v$e," \u2014 "),RX=n(v$e,"A",{href:!0});var qut=s(RX);yKo=r(qut,"WavLMForCTC"),qut.forEach(t),LKo=r(v$e," (WavLM model)"),v$e.forEach(t),Ve.forEach(t),xKo=i(pa),DT=n(pa,"P",{});var F$e=s(DT);$Ko=r(F$e,"The model is set in evaluation mode by default using "),bpe=n(F$e,"CODE",{});var Nut=s(bpe);kKo=r(Nut,"model.eval()"),Nut.forEach(t),SKo=r(F$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vpe=n(F$e,"CODE",{});var jut=s(vpe);RKo=r(jut,"model.train()"),jut.forEach(t),F$e.forEach(t),PKo=i(pa),T(GT.$$.fragment,pa),pa.forEach(t),tl.forEach(t),Fqe=i(m),bd=n(m,"H2",{class:!0});var Cje=s(bd);OT=n(Cje,"A",{id:!0,class:!0,href:!0});var Dut=s(OT);Fpe=n(Dut,"SPAN",{});var Gut=s(Fpe);T(s8.$$.fragment,Gut),Gut.forEach(t),Dut.forEach(t),BKo=i(Cje),Tpe=n(Cje,"SPAN",{});var Out=s(Tpe);IKo=r(Out,"AutoModelForSpeechSeq2Seq"),Out.forEach(t),Cje.forEach(t),Tqe=i(m),Xo=n(m,"DIV",{class:!0});var al=s(Xo);T(l8.$$.fragment,al),qKo=i(al),vd=n(al,"P",{});var lZ=s(vd);NKo=r(lZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),PX=n(lZ,"A",{href:!0});var Vut=s(PX);jKo=r(Vut,"from_pretrained()"),Vut.forEach(t),DKo=r(lZ," class method or the "),BX=n(lZ,"A",{href:!0});var Xut=s(BX);GKo=r(Xut,"from_config()"),Xut.forEach(t),OKo=r(lZ,` class
method.`),lZ.forEach(t),VKo=i(al),i8=n(al,"P",{});var wje=s(i8);XKo=r(wje,"This class cannot be instantiated directly using "),Mpe=n(wje,"CODE",{});var zut=s(Mpe);zKo=r(zut,"__init__()"),zut.forEach(t),WKo=r(wje," (throws an error)."),wje.forEach(t),QKo=i(al),Ft=n(al,"DIV",{class:!0});var X6=s(Ft);T(d8.$$.fragment,X6),HKo=i(X6),Epe=n(X6,"P",{});var Wut=s(Epe);UKo=r(Wut,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Wut.forEach(t),JKo=i(X6),Fd=n(X6,"P",{});var iZ=s(Fd);YKo=r(iZ,`Note:
Loading a model from its configuration file does `),Cpe=n(iZ,"STRONG",{});var Qut=s(Cpe);KKo=r(Qut,"not"),Qut.forEach(t),ZKo=r(iZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),IX=n(iZ,"A",{href:!0});var Hut=s(IX);eZo=r(Hut,"from_pretrained()"),Hut.forEach(t),oZo=r(iZ," to load the model weights."),iZ.forEach(t),rZo=i(X6),T(VT.$$.fragment,X6),X6.forEach(t),tZo=i(al),go=n(al,"DIV",{class:!0});var _a=s(go);T(c8.$$.fragment,_a),aZo=i(_a),wpe=n(_a,"P",{});var Uut=s(wpe);nZo=r(Uut,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Uut.forEach(t),sZo=i(_a),Xa=n(_a,"P",{});var z6=s(Xa);lZo=r(z6,"The model class to instantiate is selected based on the "),Ape=n(z6,"CODE",{});var Jut=s(Ape);iZo=r(Jut,"model_type"),Jut.forEach(t),dZo=r(z6,` property of the config object (either
passed as an argument or loaded from `),ype=n(z6,"CODE",{});var Yut=s(ype);cZo=r(Yut,"pretrained_model_name_or_path"),Yut.forEach(t),mZo=r(z6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lpe=n(z6,"CODE",{});var Kut=s(Lpe);fZo=r(Kut,"pretrained_model_name_or_path"),Kut.forEach(t),gZo=r(z6,":"),z6.forEach(t),hZo=i(_a),m8=n(_a,"UL",{});var Aje=s(m8);XT=n(Aje,"LI",{});var T$e=s(XT);xpe=n(T$e,"STRONG",{});var Zut=s(xpe);uZo=r(Zut,"speech-encoder-decoder"),Zut.forEach(t),pZo=r(T$e," \u2014 "),qX=n(T$e,"A",{href:!0});var ept=s(qX);_Zo=r(ept,"SpeechEncoderDecoderModel"),ept.forEach(t),bZo=r(T$e," (Speech Encoder decoder model)"),T$e.forEach(t),vZo=i(Aje),zT=n(Aje,"LI",{});var M$e=s(zT);$pe=n(M$e,"STRONG",{});var opt=s($pe);FZo=r(opt,"speech_to_text"),opt.forEach(t),TZo=r(M$e," \u2014 "),NX=n(M$e,"A",{href:!0});var rpt=s(NX);MZo=r(rpt,"Speech2TextForConditionalGeneration"),rpt.forEach(t),EZo=r(M$e," (Speech2Text model)"),M$e.forEach(t),Aje.forEach(t),CZo=i(_a),WT=n(_a,"P",{});var E$e=s(WT);wZo=r(E$e,"The model is set in evaluation mode by default using "),kpe=n(E$e,"CODE",{});var tpt=s(kpe);AZo=r(tpt,"model.eval()"),tpt.forEach(t),yZo=r(E$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Spe=n(E$e,"CODE",{});var apt=s(Spe);LZo=r(apt,"model.train()"),apt.forEach(t),E$e.forEach(t),xZo=i(_a),T(QT.$$.fragment,_a),_a.forEach(t),al.forEach(t),Mqe=i(m),Td=n(m,"H2",{class:!0});var yje=s(Td);HT=n(yje,"A",{id:!0,class:!0,href:!0});var npt=s(HT);Rpe=n(npt,"SPAN",{});var spt=s(Rpe);T(f8.$$.fragment,spt),spt.forEach(t),npt.forEach(t),$Zo=i(yje),Ppe=n(yje,"SPAN",{});var lpt=s(Ppe);kZo=r(lpt,"AutoModelForAudioXVector"),lpt.forEach(t),yje.forEach(t),Eqe=i(m),zo=n(m,"DIV",{class:!0});var nl=s(zo);T(g8.$$.fragment,nl),SZo=i(nl),Md=n(nl,"P",{});var dZ=s(Md);RZo=r(dZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),jX=n(dZ,"A",{href:!0});var ipt=s(jX);PZo=r(ipt,"from_pretrained()"),ipt.forEach(t),BZo=r(dZ," class method or the "),DX=n(dZ,"A",{href:!0});var dpt=s(DX);IZo=r(dpt,"from_config()"),dpt.forEach(t),qZo=r(dZ,` class
method.`),dZ.forEach(t),NZo=i(nl),h8=n(nl,"P",{});var Lje=s(h8);jZo=r(Lje,"This class cannot be instantiated directly using "),Bpe=n(Lje,"CODE",{});var cpt=s(Bpe);DZo=r(cpt,"__init__()"),cpt.forEach(t),GZo=r(Lje," (throws an error)."),Lje.forEach(t),OZo=i(nl),Tt=n(nl,"DIV",{class:!0});var W6=s(Tt);T(u8.$$.fragment,W6),VZo=i(W6),Ipe=n(W6,"P",{});var mpt=s(Ipe);XZo=r(mpt,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),mpt.forEach(t),zZo=i(W6),Ed=n(W6,"P",{});var cZ=s(Ed);WZo=r(cZ,`Note:
Loading a model from its configuration file does `),qpe=n(cZ,"STRONG",{});var fpt=s(qpe);QZo=r(fpt,"not"),fpt.forEach(t),HZo=r(cZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),GX=n(cZ,"A",{href:!0});var gpt=s(GX);UZo=r(gpt,"from_pretrained()"),gpt.forEach(t),JZo=r(cZ," to load the model weights."),cZ.forEach(t),YZo=i(W6),T(UT.$$.fragment,W6),W6.forEach(t),KZo=i(nl),ho=n(nl,"DIV",{class:!0});var ba=s(ho);T(p8.$$.fragment,ba),ZZo=i(ba),Npe=n(ba,"P",{});var hpt=s(Npe);eer=r(hpt,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),hpt.forEach(t),oer=i(ba),za=n(ba,"P",{});var Q6=s(za);rer=r(Q6,"The model class to instantiate is selected based on the "),jpe=n(Q6,"CODE",{});var upt=s(jpe);ter=r(upt,"model_type"),upt.forEach(t),aer=r(Q6,` property of the config object (either
passed as an argument or loaded from `),Dpe=n(Q6,"CODE",{});var ppt=s(Dpe);ner=r(ppt,"pretrained_model_name_or_path"),ppt.forEach(t),ser=r(Q6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gpe=n(Q6,"CODE",{});var _pt=s(Gpe);ler=r(_pt,"pretrained_model_name_or_path"),_pt.forEach(t),ier=r(Q6,":"),Q6.forEach(t),der=i(ba),Zr=n(ba,"UL",{});var sl=s(Zr);JT=n(sl,"LI",{});var C$e=s(JT);Ope=n(C$e,"STRONG",{});var bpt=s(Ope);cer=r(bpt,"data2vec-audio"),bpt.forEach(t),mer=r(C$e," \u2014 "),OX=n(C$e,"A",{href:!0});var vpt=s(OX);fer=r(vpt,"Data2VecAudioForXVector"),vpt.forEach(t),ger=r(C$e," (Data2VecAudio model)"),C$e.forEach(t),her=i(sl),YT=n(sl,"LI",{});var w$e=s(YT);Vpe=n(w$e,"STRONG",{});var Fpt=s(Vpe);uer=r(Fpt,"unispeech-sat"),Fpt.forEach(t),per=r(w$e," \u2014 "),VX=n(w$e,"A",{href:!0});var Tpt=s(VX);_er=r(Tpt,"UniSpeechSatForXVector"),Tpt.forEach(t),ber=r(w$e," (UniSpeechSat model)"),w$e.forEach(t),ver=i(sl),KT=n(sl,"LI",{});var A$e=s(KT);Xpe=n(A$e,"STRONG",{});var Mpt=s(Xpe);Fer=r(Mpt,"wav2vec2"),Mpt.forEach(t),Ter=r(A$e," \u2014 "),XX=n(A$e,"A",{href:!0});var Ept=s(XX);Mer=r(Ept,"Wav2Vec2ForXVector"),Ept.forEach(t),Eer=r(A$e," (Wav2Vec2 model)"),A$e.forEach(t),Cer=i(sl),ZT=n(sl,"LI",{});var y$e=s(ZT);zpe=n(y$e,"STRONG",{});var Cpt=s(zpe);wer=r(Cpt,"wav2vec2-conformer"),Cpt.forEach(t),Aer=r(y$e," \u2014 "),zX=n(y$e,"A",{href:!0});var wpt=s(zX);yer=r(wpt,"Wav2Vec2ConformerForXVector"),wpt.forEach(t),Ler=r(y$e," (Wav2Vec2-Conformer model)"),y$e.forEach(t),xer=i(sl),eM=n(sl,"LI",{});var L$e=s(eM);Wpe=n(L$e,"STRONG",{});var Apt=s(Wpe);$er=r(Apt,"wavlm"),Apt.forEach(t),ker=r(L$e," \u2014 "),WX=n(L$e,"A",{href:!0});var ypt=s(WX);Ser=r(ypt,"WavLMForXVector"),ypt.forEach(t),Rer=r(L$e," (WavLM model)"),L$e.forEach(t),sl.forEach(t),Per=i(ba),oM=n(ba,"P",{});var x$e=s(oM);Ber=r(x$e,"The model is set in evaluation mode by default using "),Qpe=n(x$e,"CODE",{});var Lpt=s(Qpe);Ier=r(Lpt,"model.eval()"),Lpt.forEach(t),qer=r(x$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hpe=n(x$e,"CODE",{});var xpt=s(Hpe);Ner=r(xpt,"model.train()"),xpt.forEach(t),x$e.forEach(t),jer=i(ba),T(rM.$$.fragment,ba),ba.forEach(t),nl.forEach(t),Cqe=i(m),Cd=n(m,"H2",{class:!0});var xje=s(Cd);tM=n(xje,"A",{id:!0,class:!0,href:!0});var $pt=s(tM);Upe=n($pt,"SPAN",{});var kpt=s(Upe);T(_8.$$.fragment,kpt),kpt.forEach(t),$pt.forEach(t),Der=i(xje),Jpe=n(xje,"SPAN",{});var Spt=s(Jpe);Ger=r(Spt,"AutoModelForMaskedImageModeling"),Spt.forEach(t),xje.forEach(t),wqe=i(m),Wo=n(m,"DIV",{class:!0});var ll=s(Wo);T(b8.$$.fragment,ll),Oer=i(ll),wd=n(ll,"P",{});var mZ=s(wd);Ver=r(mZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),QX=n(mZ,"A",{href:!0});var Rpt=s(QX);Xer=r(Rpt,"from_pretrained()"),Rpt.forEach(t),zer=r(mZ," class method or the "),HX=n(mZ,"A",{href:!0});var Ppt=s(HX);Wer=r(Ppt,"from_config()"),Ppt.forEach(t),Qer=r(mZ,` class
method.`),mZ.forEach(t),Her=i(ll),v8=n(ll,"P",{});var $je=s(v8);Uer=r($je,"This class cannot be instantiated directly using "),Ype=n($je,"CODE",{});var Bpt=s(Ype);Jer=r(Bpt,"__init__()"),Bpt.forEach(t),Yer=r($je," (throws an error)."),$je.forEach(t),Ker=i(ll),Mt=n(ll,"DIV",{class:!0});var H6=s(Mt);T(F8.$$.fragment,H6),Zer=i(H6),Kpe=n(H6,"P",{});var Ipt=s(Kpe);eor=r(Ipt,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Ipt.forEach(t),oor=i(H6),Ad=n(H6,"P",{});var fZ=s(Ad);ror=r(fZ,`Note:
Loading a model from its configuration file does `),Zpe=n(fZ,"STRONG",{});var qpt=s(Zpe);tor=r(qpt,"not"),qpt.forEach(t),aor=r(fZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),UX=n(fZ,"A",{href:!0});var Npt=s(UX);nor=r(Npt,"from_pretrained()"),Npt.forEach(t),sor=r(fZ," to load the model weights."),fZ.forEach(t),lor=i(H6),T(aM.$$.fragment,H6),H6.forEach(t),ior=i(ll),uo=n(ll,"DIV",{class:!0});var va=s(uo);T(T8.$$.fragment,va),dor=i(va),e_e=n(va,"P",{});var jpt=s(e_e);cor=r(jpt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),jpt.forEach(t),mor=i(va),Wa=n(va,"P",{});var U6=s(Wa);gor=r(U6,"The model class to instantiate is selected based on the "),o_e=n(U6,"CODE",{});var Dpt=s(o_e);hor=r(Dpt,"model_type"),Dpt.forEach(t),uor=r(U6,` property of the config object (either
passed as an argument or loaded from `),r_e=n(U6,"CODE",{});var Gpt=s(r_e);por=r(Gpt,"pretrained_model_name_or_path"),Gpt.forEach(t),_or=r(U6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t_e=n(U6,"CODE",{});var Opt=s(t_e);bor=r(Opt,"pretrained_model_name_or_path"),Opt.forEach(t),vor=r(U6,":"),U6.forEach(t),For=i(va),yd=n(va,"UL",{});var gZ=s(yd);nM=n(gZ,"LI",{});var $$e=s(nM);a_e=n($$e,"STRONG",{});var Vpt=s(a_e);Tor=r(Vpt,"deit"),Vpt.forEach(t),Mor=r($$e," \u2014 "),JX=n($$e,"A",{href:!0});var Xpt=s(JX);Eor=r(Xpt,"DeiTForMaskedImageModeling"),Xpt.forEach(t),Cor=r($$e," (DeiT model)"),$$e.forEach(t),wor=i(gZ),sM=n(gZ,"LI",{});var k$e=s(sM);n_e=n(k$e,"STRONG",{});var zpt=s(n_e);Aor=r(zpt,"swin"),zpt.forEach(t),yor=r(k$e," \u2014 "),YX=n(k$e,"A",{href:!0});var Wpt=s(YX);Lor=r(Wpt,"SwinForMaskedImageModeling"),Wpt.forEach(t),xor=r(k$e," (Swin model)"),k$e.forEach(t),$or=i(gZ),lM=n(gZ,"LI",{});var S$e=s(lM);s_e=n(S$e,"STRONG",{});var Qpt=s(s_e);kor=r(Qpt,"vit"),Qpt.forEach(t),Sor=r(S$e," \u2014 "),KX=n(S$e,"A",{href:!0});var Hpt=s(KX);Ror=r(Hpt,"ViTForMaskedImageModeling"),Hpt.forEach(t),Por=r(S$e," (ViT model)"),S$e.forEach(t),gZ.forEach(t),Bor=i(va),iM=n(va,"P",{});var R$e=s(iM);Ior=r(R$e,"The model is set in evaluation mode by default using "),l_e=n(R$e,"CODE",{});var Upt=s(l_e);qor=r(Upt,"model.eval()"),Upt.forEach(t),Nor=r(R$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),i_e=n(R$e,"CODE",{});var Jpt=s(i_e);jor=r(Jpt,"model.train()"),Jpt.forEach(t),R$e.forEach(t),Dor=i(va),T(dM.$$.fragment,va),va.forEach(t),ll.forEach(t),Aqe=i(m),Ld=n(m,"H2",{class:!0});var kje=s(Ld);cM=n(kje,"A",{id:!0,class:!0,href:!0});var Ypt=s(cM);d_e=n(Ypt,"SPAN",{});var Kpt=s(d_e);T(M8.$$.fragment,Kpt),Kpt.forEach(t),Ypt.forEach(t),Gor=i(kje),c_e=n(kje,"SPAN",{});var Zpt=s(c_e);Oor=r(Zpt,"AutoModelForObjectDetection"),Zpt.forEach(t),kje.forEach(t),yqe=i(m),Qo=n(m,"DIV",{class:!0});var il=s(Qo);T(E8.$$.fragment,il),Vor=i(il),xd=n(il,"P",{});var hZ=s(xd);Xor=r(hZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),ZX=n(hZ,"A",{href:!0});var e_t=s(ZX);zor=r(e_t,"from_pretrained()"),e_t.forEach(t),Wor=r(hZ," class method or the "),ez=n(hZ,"A",{href:!0});var o_t=s(ez);Qor=r(o_t,"from_config()"),o_t.forEach(t),Hor=r(hZ,` class
method.`),hZ.forEach(t),Uor=i(il),C8=n(il,"P",{});var Sje=s(C8);Jor=r(Sje,"This class cannot be instantiated directly using "),m_e=n(Sje,"CODE",{});var r_t=s(m_e);Yor=r(r_t,"__init__()"),r_t.forEach(t),Kor=r(Sje," (throws an error)."),Sje.forEach(t),Zor=i(il),Et=n(il,"DIV",{class:!0});var J6=s(Et);T(w8.$$.fragment,J6),err=i(J6),f_e=n(J6,"P",{});var t_t=s(f_e);orr=r(t_t,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),t_t.forEach(t),rrr=i(J6),$d=n(J6,"P",{});var uZ=s($d);trr=r(uZ,`Note:
Loading a model from its configuration file does `),g_e=n(uZ,"STRONG",{});var a_t=s(g_e);arr=r(a_t,"not"),a_t.forEach(t),nrr=r(uZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),oz=n(uZ,"A",{href:!0});var n_t=s(oz);srr=r(n_t,"from_pretrained()"),n_t.forEach(t),lrr=r(uZ," to load the model weights."),uZ.forEach(t),irr=i(J6),T(mM.$$.fragment,J6),J6.forEach(t),drr=i(il),po=n(il,"DIV",{class:!0});var Fa=s(po);T(A8.$$.fragment,Fa),crr=i(Fa),h_e=n(Fa,"P",{});var s_t=s(h_e);mrr=r(s_t,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),s_t.forEach(t),frr=i(Fa),Qa=n(Fa,"P",{});var Y6=s(Qa);grr=r(Y6,"The model class to instantiate is selected based on the "),u_e=n(Y6,"CODE",{});var l_t=s(u_e);hrr=r(l_t,"model_type"),l_t.forEach(t),urr=r(Y6,` property of the config object (either
passed as an argument or loaded from `),p_e=n(Y6,"CODE",{});var i_t=s(p_e);prr=r(i_t,"pretrained_model_name_or_path"),i_t.forEach(t),_rr=r(Y6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),__e=n(Y6,"CODE",{});var d_t=s(__e);brr=r(d_t,"pretrained_model_name_or_path"),d_t.forEach(t),vrr=r(Y6,":"),Y6.forEach(t),Frr=i(Fa),y8=n(Fa,"UL",{});var Rje=s(y8);fM=n(Rje,"LI",{});var P$e=s(fM);b_e=n(P$e,"STRONG",{});var c_t=s(b_e);Trr=r(c_t,"detr"),c_t.forEach(t),Mrr=r(P$e," \u2014 "),rz=n(P$e,"A",{href:!0});var m_t=s(rz);Err=r(m_t,"DetrForObjectDetection"),m_t.forEach(t),Crr=r(P$e," (DETR model)"),P$e.forEach(t),wrr=i(Rje),gM=n(Rje,"LI",{});var B$e=s(gM);v_e=n(B$e,"STRONG",{});var f_t=s(v_e);Arr=r(f_t,"yolos"),f_t.forEach(t),yrr=r(B$e," \u2014 "),tz=n(B$e,"A",{href:!0});var g_t=s(tz);Lrr=r(g_t,"YolosForObjectDetection"),g_t.forEach(t),xrr=r(B$e," (YOLOS model)"),B$e.forEach(t),Rje.forEach(t),$rr=i(Fa),hM=n(Fa,"P",{});var I$e=s(hM);krr=r(I$e,"The model is set in evaluation mode by default using "),F_e=n(I$e,"CODE",{});var h_t=s(F_e);Srr=r(h_t,"model.eval()"),h_t.forEach(t),Rrr=r(I$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),T_e=n(I$e,"CODE",{});var u_t=s(T_e);Prr=r(u_t,"model.train()"),u_t.forEach(t),I$e.forEach(t),Brr=i(Fa),T(uM.$$.fragment,Fa),Fa.forEach(t),il.forEach(t),Lqe=i(m),kd=n(m,"H2",{class:!0});var Pje=s(kd);pM=n(Pje,"A",{id:!0,class:!0,href:!0});var p_t=s(pM);M_e=n(p_t,"SPAN",{});var __t=s(M_e);T(L8.$$.fragment,__t),__t.forEach(t),p_t.forEach(t),Irr=i(Pje),E_e=n(Pje,"SPAN",{});var b_t=s(E_e);qrr=r(b_t,"AutoModelForImageSegmentation"),b_t.forEach(t),Pje.forEach(t),xqe=i(m),Ho=n(m,"DIV",{class:!0});var dl=s(Ho);T(x8.$$.fragment,dl),Nrr=i(dl),Sd=n(dl,"P",{});var pZ=s(Sd);jrr=r(pZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),az=n(pZ,"A",{href:!0});var v_t=s(az);Drr=r(v_t,"from_pretrained()"),v_t.forEach(t),Grr=r(pZ," class method or the "),nz=n(pZ,"A",{href:!0});var F_t=s(nz);Orr=r(F_t,"from_config()"),F_t.forEach(t),Vrr=r(pZ,` class
method.`),pZ.forEach(t),Xrr=i(dl),$8=n(dl,"P",{});var Bje=s($8);zrr=r(Bje,"This class cannot be instantiated directly using "),C_e=n(Bje,"CODE",{});var T_t=s(C_e);Wrr=r(T_t,"__init__()"),T_t.forEach(t),Qrr=r(Bje," (throws an error)."),Bje.forEach(t),Hrr=i(dl),Ct=n(dl,"DIV",{class:!0});var K6=s(Ct);T(k8.$$.fragment,K6),Urr=i(K6),w_e=n(K6,"P",{});var M_t=s(w_e);Jrr=r(M_t,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),M_t.forEach(t),Yrr=i(K6),Rd=n(K6,"P",{});var _Z=s(Rd);Krr=r(_Z,`Note:
Loading a model from its configuration file does `),A_e=n(_Z,"STRONG",{});var E_t=s(A_e);Zrr=r(E_t,"not"),E_t.forEach(t),etr=r(_Z,` load the model weights. It only affects the
model\u2019s configuration. Use `),sz=n(_Z,"A",{href:!0});var C_t=s(sz);otr=r(C_t,"from_pretrained()"),C_t.forEach(t),rtr=r(_Z," to load the model weights."),_Z.forEach(t),ttr=i(K6),T(_M.$$.fragment,K6),K6.forEach(t),atr=i(dl),_o=n(dl,"DIV",{class:!0});var Ta=s(_o);T(S8.$$.fragment,Ta),ntr=i(Ta),y_e=n(Ta,"P",{});var w_t=s(y_e);str=r(w_t,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),w_t.forEach(t),ltr=i(Ta),Ha=n(Ta,"P",{});var Z6=s(Ha);itr=r(Z6,"The model class to instantiate is selected based on the "),L_e=n(Z6,"CODE",{});var A_t=s(L_e);dtr=r(A_t,"model_type"),A_t.forEach(t),ctr=r(Z6,` property of the config object (either
passed as an argument or loaded from `),x_e=n(Z6,"CODE",{});var y_t=s(x_e);mtr=r(y_t,"pretrained_model_name_or_path"),y_t.forEach(t),ftr=r(Z6,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$_e=n(Z6,"CODE",{});var L_t=s($_e);gtr=r(L_t,"pretrained_model_name_or_path"),L_t.forEach(t),htr=r(Z6,":"),Z6.forEach(t),utr=i(Ta),k_e=n(Ta,"UL",{});var x_t=s(k_e);bM=n(x_t,"LI",{});var q$e=s(bM);S_e=n(q$e,"STRONG",{});var $_t=s(S_e);ptr=r($_t,"detr"),$_t.forEach(t),_tr=r(q$e," \u2014 "),lz=n(q$e,"A",{href:!0});var k_t=s(lz);btr=r(k_t,"DetrForSegmentation"),k_t.forEach(t),vtr=r(q$e," (DETR model)"),q$e.forEach(t),x_t.forEach(t),Ftr=i(Ta),vM=n(Ta,"P",{});var N$e=s(vM);Ttr=r(N$e,"The model is set in evaluation mode by default using "),R_e=n(N$e,"CODE",{});var S_t=s(R_e);Mtr=r(S_t,"model.eval()"),S_t.forEach(t),Etr=r(N$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),P_e=n(N$e,"CODE",{});var R_t=s(P_e);Ctr=r(R_t,"model.train()"),R_t.forEach(t),N$e.forEach(t),wtr=i(Ta),T(FM.$$.fragment,Ta),Ta.forEach(t),dl.forEach(t),$qe=i(m),Pd=n(m,"H2",{class:!0});var Ije=s(Pd);TM=n(Ije,"A",{id:!0,class:!0,href:!0});var P_t=s(TM);B_e=n(P_t,"SPAN",{});var B_t=s(B_e);T(R8.$$.fragment,B_t),B_t.forEach(t),P_t.forEach(t),Atr=i(Ije),I_e=n(Ije,"SPAN",{});var I_t=s(I_e);ytr=r(I_t,"AutoModelForSemanticSegmentation"),I_t.forEach(t),Ije.forEach(t),kqe=i(m),Uo=n(m,"DIV",{class:!0});var cl=s(Uo);T(P8.$$.fragment,cl),Ltr=i(cl),Bd=n(cl,"P",{});var bZ=s(Bd);xtr=r(bZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),iz=n(bZ,"A",{href:!0});var q_t=s(iz);$tr=r(q_t,"from_pretrained()"),q_t.forEach(t),ktr=r(bZ," class method or the "),dz=n(bZ,"A",{href:!0});var N_t=s(dz);Str=r(N_t,"from_config()"),N_t.forEach(t),Rtr=r(bZ,` class
method.`),bZ.forEach(t),Ptr=i(cl),B8=n(cl,"P",{});var qje=s(B8);Btr=r(qje,"This class cannot be instantiated directly using "),q_e=n(qje,"CODE",{});var j_t=s(q_e);Itr=r(j_t,"__init__()"),j_t.forEach(t),qtr=r(qje," (throws an error)."),qje.forEach(t),Ntr=i(cl),wt=n(cl,"DIV",{class:!0});var e0=s(wt);T(I8.$$.fragment,e0),jtr=i(e0),N_e=n(e0,"P",{});var D_t=s(N_e);Dtr=r(D_t,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),D_t.forEach(t),Gtr=i(e0),Id=n(e0,"P",{});var vZ=s(Id);Otr=r(vZ,`Note:
Loading a model from its configuration file does `),j_e=n(vZ,"STRONG",{});var G_t=s(j_e);Vtr=r(G_t,"not"),G_t.forEach(t),Xtr=r(vZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),cz=n(vZ,"A",{href:!0});var O_t=s(cz);ztr=r(O_t,"from_pretrained()"),O_t.forEach(t),Wtr=r(vZ," to load the model weights."),vZ.forEach(t),Qtr=i(e0),T(MM.$$.fragment,e0),e0.forEach(t),Htr=i(cl),bo=n(cl,"DIV",{class:!0});var Ma=s(bo);T(q8.$$.fragment,Ma),Utr=i(Ma),D_e=n(Ma,"P",{});var V_t=s(D_e);Jtr=r(V_t,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),V_t.forEach(t),Ytr=i(Ma),Ua=n(Ma,"P",{});var o0=s(Ua);Ktr=r(o0,"The model class to instantiate is selected based on the "),G_e=n(o0,"CODE",{});var X_t=s(G_e);Ztr=r(X_t,"model_type"),X_t.forEach(t),ear=r(o0,` property of the config object (either
passed as an argument or loaded from `),O_e=n(o0,"CODE",{});var z_t=s(O_e);oar=r(z_t,"pretrained_model_name_or_path"),z_t.forEach(t),rar=r(o0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V_e=n(o0,"CODE",{});var W_t=s(V_e);tar=r(W_t,"pretrained_model_name_or_path"),W_t.forEach(t),aar=r(o0,":"),o0.forEach(t),nar=i(Ma),Ja=n(Ma,"UL",{});var r0=s(Ja);EM=n(r0,"LI",{});var j$e=s(EM);X_e=n(j$e,"STRONG",{});var Q_t=s(X_e);sar=r(Q_t,"beit"),Q_t.forEach(t),lar=r(j$e," \u2014 "),mz=n(j$e,"A",{href:!0});var H_t=s(mz);iar=r(H_t,"BeitForSemanticSegmentation"),H_t.forEach(t),dar=r(j$e," (BEiT model)"),j$e.forEach(t),car=i(r0),CM=n(r0,"LI",{});var D$e=s(CM);z_e=n(D$e,"STRONG",{});var U_t=s(z_e);mar=r(U_t,"data2vec-vision"),U_t.forEach(t),far=r(D$e," \u2014 "),fz=n(D$e,"A",{href:!0});var J_t=s(fz);gar=r(J_t,"Data2VecVisionForSemanticSegmentation"),J_t.forEach(t),har=r(D$e," (Data2VecVision model)"),D$e.forEach(t),uar=i(r0),wM=n(r0,"LI",{});var G$e=s(wM);W_e=n(G$e,"STRONG",{});var Y_t=s(W_e);par=r(Y_t,"dpt"),Y_t.forEach(t),_ar=r(G$e," \u2014 "),gz=n(G$e,"A",{href:!0});var K_t=s(gz);bar=r(K_t,"DPTForSemanticSegmentation"),K_t.forEach(t),Far=r(G$e," (DPT model)"),G$e.forEach(t),Tar=i(r0),AM=n(r0,"LI",{});var O$e=s(AM);Q_e=n(O$e,"STRONG",{});var Z_t=s(Q_e);Mar=r(Z_t,"segformer"),Z_t.forEach(t),Ear=r(O$e," \u2014 "),hz=n(O$e,"A",{href:!0});var ebt=s(hz);Car=r(ebt,"SegformerForSemanticSegmentation"),ebt.forEach(t),war=r(O$e," (SegFormer model)"),O$e.forEach(t),r0.forEach(t),Aar=i(Ma),yM=n(Ma,"P",{});var V$e=s(yM);yar=r(V$e,"The model is set in evaluation mode by default using "),H_e=n(V$e,"CODE",{});var obt=s(H_e);Lar=r(obt,"model.eval()"),obt.forEach(t),xar=r(V$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),U_e=n(V$e,"CODE",{});var rbt=s(U_e);$ar=r(rbt,"model.train()"),rbt.forEach(t),V$e.forEach(t),kar=i(Ma),T(LM.$$.fragment,Ma),Ma.forEach(t),cl.forEach(t),Sqe=i(m),qd=n(m,"H2",{class:!0});var Nje=s(qd);xM=n(Nje,"A",{id:!0,class:!0,href:!0});var tbt=s(xM);J_e=n(tbt,"SPAN",{});var abt=s(J_e);T(N8.$$.fragment,abt),abt.forEach(t),tbt.forEach(t),Sar=i(Nje),Y_e=n(Nje,"SPAN",{});var nbt=s(Y_e);Rar=r(nbt,"AutoModelForInstanceSegmentation"),nbt.forEach(t),Nje.forEach(t),Rqe=i(m),Jo=n(m,"DIV",{class:!0});var ml=s(Jo);T(j8.$$.fragment,ml),Par=i(ml),Nd=n(ml,"P",{});var FZ=s(Nd);Bar=r(FZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),uz=n(FZ,"A",{href:!0});var sbt=s(uz);Iar=r(sbt,"from_pretrained()"),sbt.forEach(t),qar=r(FZ," class method or the "),pz=n(FZ,"A",{href:!0});var lbt=s(pz);Nar=r(lbt,"from_config()"),lbt.forEach(t),jar=r(FZ,` class
method.`),FZ.forEach(t),Dar=i(ml),D8=n(ml,"P",{});var jje=s(D8);Gar=r(jje,"This class cannot be instantiated directly using "),K_e=n(jje,"CODE",{});var ibt=s(K_e);Oar=r(ibt,"__init__()"),ibt.forEach(t),Var=r(jje," (throws an error)."),jje.forEach(t),Xar=i(ml),At=n(ml,"DIV",{class:!0});var t0=s(At);T(G8.$$.fragment,t0),zar=i(t0),Z_e=n(t0,"P",{});var dbt=s(Z_e);War=r(dbt,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),dbt.forEach(t),Qar=i(t0),jd=n(t0,"P",{});var TZ=s(jd);Har=r(TZ,`Note:
Loading a model from its configuration file does `),ebe=n(TZ,"STRONG",{});var cbt=s(ebe);Uar=r(cbt,"not"),cbt.forEach(t),Jar=r(TZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),_z=n(TZ,"A",{href:!0});var mbt=s(_z);Yar=r(mbt,"from_pretrained()"),mbt.forEach(t),Kar=r(TZ," to load the model weights."),TZ.forEach(t),Zar=i(t0),T($M.$$.fragment,t0),t0.forEach(t),enr=i(ml),vo=n(ml,"DIV",{class:!0});var Ea=s(vo);T(O8.$$.fragment,Ea),onr=i(Ea),obe=n(Ea,"P",{});var fbt=s(obe);rnr=r(fbt,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),fbt.forEach(t),tnr=i(Ea),Ya=n(Ea,"P",{});var a0=s(Ya);anr=r(a0,"The model class to instantiate is selected based on the "),rbe=n(a0,"CODE",{});var gbt=s(rbe);nnr=r(gbt,"model_type"),gbt.forEach(t),snr=r(a0,` property of the config object (either
passed as an argument or loaded from `),tbe=n(a0,"CODE",{});var hbt=s(tbe);lnr=r(hbt,"pretrained_model_name_or_path"),hbt.forEach(t),inr=r(a0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),abe=n(a0,"CODE",{});var ubt=s(abe);dnr=r(ubt,"pretrained_model_name_or_path"),ubt.forEach(t),cnr=r(a0,":"),a0.forEach(t),mnr=i(Ea),nbe=n(Ea,"UL",{});var pbt=s(nbe);kM=n(pbt,"LI",{});var X$e=s(kM);sbe=n(X$e,"STRONG",{});var _bt=s(sbe);fnr=r(_bt,"maskformer"),_bt.forEach(t),gnr=r(X$e," \u2014 "),bz=n(X$e,"A",{href:!0});var bbt=s(bz);hnr=r(bbt,"MaskFormerForInstanceSegmentation"),bbt.forEach(t),unr=r(X$e," (MaskFormer model)"),X$e.forEach(t),pbt.forEach(t),pnr=i(Ea),SM=n(Ea,"P",{});var z$e=s(SM);_nr=r(z$e,"The model is set in evaluation mode by default using "),lbe=n(z$e,"CODE",{});var vbt=s(lbe);bnr=r(vbt,"model.eval()"),vbt.forEach(t),vnr=r(z$e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ibe=n(z$e,"CODE",{});var Fbt=s(ibe);Fnr=r(Fbt,"model.train()"),Fbt.forEach(t),z$e.forEach(t),Tnr=i(Ea),T(RM.$$.fragment,Ea),Ea.forEach(t),ml.forEach(t),Pqe=i(m),Dd=n(m,"H2",{class:!0});var Dje=s(Dd);PM=n(Dje,"A",{id:!0,class:!0,href:!0});var Tbt=s(PM);dbe=n(Tbt,"SPAN",{});var Mbt=s(dbe);T(V8.$$.fragment,Mbt),Mbt.forEach(t),Tbt.forEach(t),Mnr=i(Dje),cbe=n(Dje,"SPAN",{});var Ebt=s(cbe);Enr=r(Ebt,"TFAutoModel"),Ebt.forEach(t),Dje.forEach(t),Bqe=i(m),Yo=n(m,"DIV",{class:!0});var fl=s(Yo);T(X8.$$.fragment,fl),Cnr=i(fl),Gd=n(fl,"P",{});var MZ=s(Gd);wnr=r(MZ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),vz=n(MZ,"A",{href:!0});var Cbt=s(vz);Anr=r(Cbt,"from_pretrained()"),Cbt.forEach(t),ynr=r(MZ," class method or the "),Fz=n(MZ,"A",{href:!0});var wbt=s(Fz);Lnr=r(wbt,"from_config()"),wbt.forEach(t),xnr=r(MZ,` class
method.`),MZ.forEach(t),$nr=i(fl),z8=n(fl,"P",{});var Gje=s(z8);knr=r(Gje,"This class cannot be instantiated directly using "),mbe=n(Gje,"CODE",{});var Abt=s(mbe);Snr=r(Abt,"__init__()"),Abt.forEach(t),Rnr=r(Gje," (throws an error)."),Gje.forEach(t),Pnr=i(fl),yt=n(fl,"DIV",{class:!0});var n0=s(yt);T(W8.$$.fragment,n0),Bnr=i(n0),fbe=n(n0,"P",{});var ybt=s(fbe);Inr=r(ybt,"Instantiates one of the base model classes of the library from a configuration."),ybt.forEach(t),qnr=i(n0),Od=n(n0,"P",{});var EZ=s(Od);Nnr=r(EZ,`Note:
Loading a model from its configuration file does `),gbe=n(EZ,"STRONG",{});var Lbt=s(gbe);jnr=r(Lbt,"not"),Lbt.forEach(t),Dnr=r(EZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Tz=n(EZ,"A",{href:!0});var xbt=s(Tz);Gnr=r(xbt,"from_pretrained()"),xbt.forEach(t),Onr=r(EZ," to load the model weights."),EZ.forEach(t),Vnr=i(n0),T(BM.$$.fragment,n0),n0.forEach(t),Xnr=i(fl),wr=n(fl,"DIV",{class:!0});var gl=s(wr);T(Q8.$$.fragment,gl),znr=i(gl),hbe=n(gl,"P",{});var $bt=s(hbe);Wnr=r($bt,"Instantiate one of the base model classes of the library from a pretrained model."),$bt.forEach(t),Qnr=i(gl),Ka=n(gl,"P",{});var s0=s(Ka);Hnr=r(s0,"The model class to instantiate is selected based on the "),ube=n(s0,"CODE",{});var kbt=s(ube);Unr=r(kbt,"model_type"),kbt.forEach(t),Jnr=r(s0,` property of the config object (either
passed as an argument or loaded from `),pbe=n(s0,"CODE",{});var Sbt=s(pbe);Ynr=r(Sbt,"pretrained_model_name_or_path"),Sbt.forEach(t),Knr=r(s0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_be=n(s0,"CODE",{});var Rbt=s(_be);Znr=r(Rbt,"pretrained_model_name_or_path"),Rbt.forEach(t),esr=r(s0,":"),s0.forEach(t),osr=i(gl),N=n(gl,"UL",{});var D=s(N);IM=n(D,"LI",{});var W$e=s(IM);bbe=n(W$e,"STRONG",{});var Pbt=s(bbe);rsr=r(Pbt,"albert"),Pbt.forEach(t),tsr=r(W$e," \u2014 "),Mz=n(W$e,"A",{href:!0});var Bbt=s(Mz);asr=r(Bbt,"TFAlbertModel"),Bbt.forEach(t),nsr=r(W$e," (ALBERT model)"),W$e.forEach(t),ssr=i(D),qM=n(D,"LI",{});var Q$e=s(qM);vbe=n(Q$e,"STRONG",{});var Ibt=s(vbe);lsr=r(Ibt,"bart"),Ibt.forEach(t),isr=r(Q$e," \u2014 "),Ez=n(Q$e,"A",{href:!0});var qbt=s(Ez);dsr=r(qbt,"TFBartModel"),qbt.forEach(t),csr=r(Q$e," (BART model)"),Q$e.forEach(t),msr=i(D),NM=n(D,"LI",{});var H$e=s(NM);Fbe=n(H$e,"STRONG",{});var Nbt=s(Fbe);fsr=r(Nbt,"bert"),Nbt.forEach(t),gsr=r(H$e," \u2014 "),Cz=n(H$e,"A",{href:!0});var jbt=s(Cz);hsr=r(jbt,"TFBertModel"),jbt.forEach(t),usr=r(H$e," (BERT model)"),H$e.forEach(t),psr=i(D),jM=n(D,"LI",{});var U$e=s(jM);Tbe=n(U$e,"STRONG",{});var Dbt=s(Tbe);_sr=r(Dbt,"blenderbot"),Dbt.forEach(t),bsr=r(U$e," \u2014 "),wz=n(U$e,"A",{href:!0});var Gbt=s(wz);vsr=r(Gbt,"TFBlenderbotModel"),Gbt.forEach(t),Fsr=r(U$e," (Blenderbot model)"),U$e.forEach(t),Tsr=i(D),DM=n(D,"LI",{});var J$e=s(DM);Mbe=n(J$e,"STRONG",{});var Obt=s(Mbe);Msr=r(Obt,"blenderbot-small"),Obt.forEach(t),Esr=r(J$e," \u2014 "),Az=n(J$e,"A",{href:!0});var Vbt=s(Az);Csr=r(Vbt,"TFBlenderbotSmallModel"),Vbt.forEach(t),wsr=r(J$e," (BlenderbotSmall model)"),J$e.forEach(t),Asr=i(D),GM=n(D,"LI",{});var Y$e=s(GM);Ebe=n(Y$e,"STRONG",{});var Xbt=s(Ebe);ysr=r(Xbt,"camembert"),Xbt.forEach(t),Lsr=r(Y$e," \u2014 "),yz=n(Y$e,"A",{href:!0});var zbt=s(yz);xsr=r(zbt,"TFCamembertModel"),zbt.forEach(t),$sr=r(Y$e," (CamemBERT model)"),Y$e.forEach(t),ksr=i(D),OM=n(D,"LI",{});var K$e=s(OM);Cbe=n(K$e,"STRONG",{});var Wbt=s(Cbe);Ssr=r(Wbt,"clip"),Wbt.forEach(t),Rsr=r(K$e," \u2014 "),Lz=n(K$e,"A",{href:!0});var Qbt=s(Lz);Psr=r(Qbt,"TFCLIPModel"),Qbt.forEach(t),Bsr=r(K$e," (CLIP model)"),K$e.forEach(t),Isr=i(D),VM=n(D,"LI",{});var Z$e=s(VM);wbe=n(Z$e,"STRONG",{});var Hbt=s(wbe);qsr=r(Hbt,"convbert"),Hbt.forEach(t),Nsr=r(Z$e," \u2014 "),xz=n(Z$e,"A",{href:!0});var Ubt=s(xz);jsr=r(Ubt,"TFConvBertModel"),Ubt.forEach(t),Dsr=r(Z$e," (ConvBERT model)"),Z$e.forEach(t),Gsr=i(D),XM=n(D,"LI",{});var eke=s(XM);Abe=n(eke,"STRONG",{});var Jbt=s(Abe);Osr=r(Jbt,"convnext"),Jbt.forEach(t),Vsr=r(eke," \u2014 "),$z=n(eke,"A",{href:!0});var Ybt=s($z);Xsr=r(Ybt,"TFConvNextModel"),Ybt.forEach(t),zsr=r(eke," (ConvNext model)"),eke.forEach(t),Wsr=i(D),zM=n(D,"LI",{});var oke=s(zM);ybe=n(oke,"STRONG",{});var Kbt=s(ybe);Qsr=r(Kbt,"ctrl"),Kbt.forEach(t),Hsr=r(oke," \u2014 "),kz=n(oke,"A",{href:!0});var Zbt=s(kz);Usr=r(Zbt,"TFCTRLModel"),Zbt.forEach(t),Jsr=r(oke," (CTRL model)"),oke.forEach(t),Ysr=i(D),WM=n(D,"LI",{});var rke=s(WM);Lbe=n(rke,"STRONG",{});var e2t=s(Lbe);Ksr=r(e2t,"data2vec-vision"),e2t.forEach(t),Zsr=r(rke," \u2014 "),Sz=n(rke,"A",{href:!0});var o2t=s(Sz);elr=r(o2t,"TFData2VecVisionModel"),o2t.forEach(t),olr=r(rke," (Data2VecVision model)"),rke.forEach(t),rlr=i(D),QM=n(D,"LI",{});var tke=s(QM);xbe=n(tke,"STRONG",{});var r2t=s(xbe);tlr=r(r2t,"deberta"),r2t.forEach(t),alr=r(tke," \u2014 "),Rz=n(tke,"A",{href:!0});var t2t=s(Rz);nlr=r(t2t,"TFDebertaModel"),t2t.forEach(t),slr=r(tke," (DeBERTa model)"),tke.forEach(t),llr=i(D),HM=n(D,"LI",{});var ake=s(HM);$be=n(ake,"STRONG",{});var a2t=s($be);ilr=r(a2t,"deberta-v2"),a2t.forEach(t),dlr=r(ake," \u2014 "),Pz=n(ake,"A",{href:!0});var n2t=s(Pz);clr=r(n2t,"TFDebertaV2Model"),n2t.forEach(t),mlr=r(ake," (DeBERTa-v2 model)"),ake.forEach(t),flr=i(D),UM=n(D,"LI",{});var nke=s(UM);kbe=n(nke,"STRONG",{});var s2t=s(kbe);glr=r(s2t,"distilbert"),s2t.forEach(t),hlr=r(nke," \u2014 "),Bz=n(nke,"A",{href:!0});var l2t=s(Bz);ulr=r(l2t,"TFDistilBertModel"),l2t.forEach(t),plr=r(nke," (DistilBERT model)"),nke.forEach(t),_lr=i(D),JM=n(D,"LI",{});var ske=s(JM);Sbe=n(ske,"STRONG",{});var i2t=s(Sbe);blr=r(i2t,"dpr"),i2t.forEach(t),vlr=r(ske," \u2014 "),Iz=n(ske,"A",{href:!0});var d2t=s(Iz);Flr=r(d2t,"TFDPRQuestionEncoder"),d2t.forEach(t),Tlr=r(ske," (DPR model)"),ske.forEach(t),Mlr=i(D),YM=n(D,"LI",{});var lke=s(YM);Rbe=n(lke,"STRONG",{});var c2t=s(Rbe);Elr=r(c2t,"electra"),c2t.forEach(t),Clr=r(lke," \u2014 "),qz=n(lke,"A",{href:!0});var m2t=s(qz);wlr=r(m2t,"TFElectraModel"),m2t.forEach(t),Alr=r(lke," (ELECTRA model)"),lke.forEach(t),ylr=i(D),KM=n(D,"LI",{});var ike=s(KM);Pbe=n(ike,"STRONG",{});var f2t=s(Pbe);Llr=r(f2t,"flaubert"),f2t.forEach(t),xlr=r(ike," \u2014 "),Nz=n(ike,"A",{href:!0});var g2t=s(Nz);$lr=r(g2t,"TFFlaubertModel"),g2t.forEach(t),klr=r(ike," (FlauBERT model)"),ike.forEach(t),Slr=i(D),Bs=n(D,"LI",{});var C$=s(Bs);Bbe=n(C$,"STRONG",{});var h2t=s(Bbe);Rlr=r(h2t,"funnel"),h2t.forEach(t),Plr=r(C$," \u2014 "),jz=n(C$,"A",{href:!0});var u2t=s(jz);Blr=r(u2t,"TFFunnelModel"),u2t.forEach(t),Ilr=r(C$," or "),Dz=n(C$,"A",{href:!0});var p2t=s(Dz);qlr=r(p2t,"TFFunnelBaseModel"),p2t.forEach(t),Nlr=r(C$," (Funnel Transformer model)"),C$.forEach(t),jlr=i(D),ZM=n(D,"LI",{});var dke=s(ZM);Ibe=n(dke,"STRONG",{});var _2t=s(Ibe);Dlr=r(_2t,"gpt2"),_2t.forEach(t),Glr=r(dke," \u2014 "),Gz=n(dke,"A",{href:!0});var b2t=s(Gz);Olr=r(b2t,"TFGPT2Model"),b2t.forEach(t),Vlr=r(dke," (OpenAI GPT-2 model)"),dke.forEach(t),Xlr=i(D),e4=n(D,"LI",{});var cke=s(e4);qbe=n(cke,"STRONG",{});var v2t=s(qbe);zlr=r(v2t,"gptj"),v2t.forEach(t),Wlr=r(cke," \u2014 "),Oz=n(cke,"A",{href:!0});var F2t=s(Oz);Qlr=r(F2t,"TFGPTJModel"),F2t.forEach(t),Hlr=r(cke," (GPT-J model)"),cke.forEach(t),Ulr=i(D),o4=n(D,"LI",{});var mke=s(o4);Nbe=n(mke,"STRONG",{});var T2t=s(Nbe);Jlr=r(T2t,"hubert"),T2t.forEach(t),Ylr=r(mke," \u2014 "),Vz=n(mke,"A",{href:!0});var M2t=s(Vz);Klr=r(M2t,"TFHubertModel"),M2t.forEach(t),Zlr=r(mke," (Hubert model)"),mke.forEach(t),eir=i(D),r4=n(D,"LI",{});var fke=s(r4);jbe=n(fke,"STRONG",{});var E2t=s(jbe);oir=r(E2t,"layoutlm"),E2t.forEach(t),rir=r(fke," \u2014 "),Xz=n(fke,"A",{href:!0});var C2t=s(Xz);tir=r(C2t,"TFLayoutLMModel"),C2t.forEach(t),air=r(fke," (LayoutLM model)"),fke.forEach(t),nir=i(D),t4=n(D,"LI",{});var gke=s(t4);Dbe=n(gke,"STRONG",{});var w2t=s(Dbe);sir=r(w2t,"led"),w2t.forEach(t),lir=r(gke," \u2014 "),zz=n(gke,"A",{href:!0});var A2t=s(zz);iir=r(A2t,"TFLEDModel"),A2t.forEach(t),dir=r(gke," (LED model)"),gke.forEach(t),cir=i(D),a4=n(D,"LI",{});var hke=s(a4);Gbe=n(hke,"STRONG",{});var y2t=s(Gbe);mir=r(y2t,"longformer"),y2t.forEach(t),fir=r(hke," \u2014 "),Wz=n(hke,"A",{href:!0});var L2t=s(Wz);gir=r(L2t,"TFLongformerModel"),L2t.forEach(t),hir=r(hke," (Longformer model)"),hke.forEach(t),uir=i(D),n4=n(D,"LI",{});var uke=s(n4);Obe=n(uke,"STRONG",{});var x2t=s(Obe);pir=r(x2t,"lxmert"),x2t.forEach(t),_ir=r(uke," \u2014 "),Qz=n(uke,"A",{href:!0});var $2t=s(Qz);bir=r($2t,"TFLxmertModel"),$2t.forEach(t),vir=r(uke," (LXMERT model)"),uke.forEach(t),Fir=i(D),s4=n(D,"LI",{});var pke=s(s4);Vbe=n(pke,"STRONG",{});var k2t=s(Vbe);Tir=r(k2t,"marian"),k2t.forEach(t),Mir=r(pke," \u2014 "),Hz=n(pke,"A",{href:!0});var S2t=s(Hz);Eir=r(S2t,"TFMarianModel"),S2t.forEach(t),Cir=r(pke," (Marian model)"),pke.forEach(t),wir=i(D),l4=n(D,"LI",{});var _ke=s(l4);Xbe=n(_ke,"STRONG",{});var R2t=s(Xbe);Air=r(R2t,"mbart"),R2t.forEach(t),yir=r(_ke," \u2014 "),Uz=n(_ke,"A",{href:!0});var P2t=s(Uz);Lir=r(P2t,"TFMBartModel"),P2t.forEach(t),xir=r(_ke," (mBART model)"),_ke.forEach(t),$ir=i(D),i4=n(D,"LI",{});var bke=s(i4);zbe=n(bke,"STRONG",{});var B2t=s(zbe);kir=r(B2t,"mobilebert"),B2t.forEach(t),Sir=r(bke," \u2014 "),Jz=n(bke,"A",{href:!0});var I2t=s(Jz);Rir=r(I2t,"TFMobileBertModel"),I2t.forEach(t),Pir=r(bke," (MobileBERT model)"),bke.forEach(t),Bir=i(D),d4=n(D,"LI",{});var vke=s(d4);Wbe=n(vke,"STRONG",{});var q2t=s(Wbe);Iir=r(q2t,"mpnet"),q2t.forEach(t),qir=r(vke," \u2014 "),Yz=n(vke,"A",{href:!0});var N2t=s(Yz);Nir=r(N2t,"TFMPNetModel"),N2t.forEach(t),jir=r(vke," (MPNet model)"),vke.forEach(t),Dir=i(D),c4=n(D,"LI",{});var Fke=s(c4);Qbe=n(Fke,"STRONG",{});var j2t=s(Qbe);Gir=r(j2t,"mt5"),j2t.forEach(t),Oir=r(Fke," \u2014 "),Kz=n(Fke,"A",{href:!0});var D2t=s(Kz);Vir=r(D2t,"TFMT5Model"),D2t.forEach(t),Xir=r(Fke," (mT5 model)"),Fke.forEach(t),zir=i(D),m4=n(D,"LI",{});var Tke=s(m4);Hbe=n(Tke,"STRONG",{});var G2t=s(Hbe);Wir=r(G2t,"openai-gpt"),G2t.forEach(t),Qir=r(Tke," \u2014 "),Zz=n(Tke,"A",{href:!0});var O2t=s(Zz);Hir=r(O2t,"TFOpenAIGPTModel"),O2t.forEach(t),Uir=r(Tke," (OpenAI GPT model)"),Tke.forEach(t),Jir=i(D),f4=n(D,"LI",{});var Mke=s(f4);Ube=n(Mke,"STRONG",{});var V2t=s(Ube);Yir=r(V2t,"pegasus"),V2t.forEach(t),Kir=r(Mke," \u2014 "),eW=n(Mke,"A",{href:!0});var X2t=s(eW);Zir=r(X2t,"TFPegasusModel"),X2t.forEach(t),edr=r(Mke," (Pegasus model)"),Mke.forEach(t),odr=i(D),g4=n(D,"LI",{});var Eke=s(g4);Jbe=n(Eke,"STRONG",{});var z2t=s(Jbe);rdr=r(z2t,"rembert"),z2t.forEach(t),tdr=r(Eke," \u2014 "),oW=n(Eke,"A",{href:!0});var W2t=s(oW);adr=r(W2t,"TFRemBertModel"),W2t.forEach(t),ndr=r(Eke," (RemBERT model)"),Eke.forEach(t),sdr=i(D),h4=n(D,"LI",{});var Cke=s(h4);Ybe=n(Cke,"STRONG",{});var Q2t=s(Ybe);ldr=r(Q2t,"roberta"),Q2t.forEach(t),idr=r(Cke," \u2014 "),rW=n(Cke,"A",{href:!0});var H2t=s(rW);ddr=r(H2t,"TFRobertaModel"),H2t.forEach(t),cdr=r(Cke," (RoBERTa model)"),Cke.forEach(t),mdr=i(D),u4=n(D,"LI",{});var wke=s(u4);Kbe=n(wke,"STRONG",{});var U2t=s(Kbe);fdr=r(U2t,"roformer"),U2t.forEach(t),gdr=r(wke," \u2014 "),tW=n(wke,"A",{href:!0});var J2t=s(tW);hdr=r(J2t,"TFRoFormerModel"),J2t.forEach(t),udr=r(wke," (RoFormer model)"),wke.forEach(t),pdr=i(D),p4=n(D,"LI",{});var Ake=s(p4);Zbe=n(Ake,"STRONG",{});var Y2t=s(Zbe);_dr=r(Y2t,"speech_to_text"),Y2t.forEach(t),bdr=r(Ake," \u2014 "),aW=n(Ake,"A",{href:!0});var K2t=s(aW);vdr=r(K2t,"TFSpeech2TextModel"),K2t.forEach(t),Fdr=r(Ake," (Speech2Text model)"),Ake.forEach(t),Tdr=i(D),_4=n(D,"LI",{});var yke=s(_4);e2e=n(yke,"STRONG",{});var Z2t=s(e2e);Mdr=r(Z2t,"swin"),Z2t.forEach(t),Edr=r(yke," \u2014 "),nW=n(yke,"A",{href:!0});var evt=s(nW);Cdr=r(evt,"TFSwinModel"),evt.forEach(t),wdr=r(yke," (Swin model)"),yke.forEach(t),Adr=i(D),b4=n(D,"LI",{});var Lke=s(b4);o2e=n(Lke,"STRONG",{});var ovt=s(o2e);ydr=r(ovt,"t5"),ovt.forEach(t),Ldr=r(Lke," \u2014 "),sW=n(Lke,"A",{href:!0});var rvt=s(sW);xdr=r(rvt,"TFT5Model"),rvt.forEach(t),$dr=r(Lke," (T5 model)"),Lke.forEach(t),kdr=i(D),v4=n(D,"LI",{});var xke=s(v4);r2e=n(xke,"STRONG",{});var tvt=s(r2e);Sdr=r(tvt,"tapas"),tvt.forEach(t),Rdr=r(xke," \u2014 "),lW=n(xke,"A",{href:!0});var avt=s(lW);Pdr=r(avt,"TFTapasModel"),avt.forEach(t),Bdr=r(xke," (TAPAS model)"),xke.forEach(t),Idr=i(D),F4=n(D,"LI",{});var $ke=s(F4);t2e=n($ke,"STRONG",{});var nvt=s(t2e);qdr=r(nvt,"transfo-xl"),nvt.forEach(t),Ndr=r($ke," \u2014 "),iW=n($ke,"A",{href:!0});var svt=s(iW);jdr=r(svt,"TFTransfoXLModel"),svt.forEach(t),Ddr=r($ke," (Transformer-XL model)"),$ke.forEach(t),Gdr=i(D),T4=n(D,"LI",{});var kke=s(T4);a2e=n(kke,"STRONG",{});var lvt=s(a2e);Odr=r(lvt,"vit"),lvt.forEach(t),Vdr=r(kke," \u2014 "),dW=n(kke,"A",{href:!0});var ivt=s(dW);Xdr=r(ivt,"TFViTModel"),ivt.forEach(t),zdr=r(kke," (ViT model)"),kke.forEach(t),Wdr=i(D),M4=n(D,"LI",{});var Ske=s(M4);n2e=n(Ske,"STRONG",{});var dvt=s(n2e);Qdr=r(dvt,"vit_mae"),dvt.forEach(t),Hdr=r(Ske," \u2014 "),cW=n(Ske,"A",{href:!0});var cvt=s(cW);Udr=r(cvt,"TFViTMAEModel"),cvt.forEach(t),Jdr=r(Ske," (ViTMAE model)"),Ske.forEach(t),Ydr=i(D),E4=n(D,"LI",{});var Rke=s(E4);s2e=n(Rke,"STRONG",{});var mvt=s(s2e);Kdr=r(mvt,"wav2vec2"),mvt.forEach(t),Zdr=r(Rke," \u2014 "),mW=n(Rke,"A",{href:!0});var fvt=s(mW);ecr=r(fvt,"TFWav2Vec2Model"),fvt.forEach(t),ocr=r(Rke," (Wav2Vec2 model)"),Rke.forEach(t),rcr=i(D),C4=n(D,"LI",{});var Pke=s(C4);l2e=n(Pke,"STRONG",{});var gvt=s(l2e);tcr=r(gvt,"xlm"),gvt.forEach(t),acr=r(Pke," \u2014 "),fW=n(Pke,"A",{href:!0});var hvt=s(fW);ncr=r(hvt,"TFXLMModel"),hvt.forEach(t),scr=r(Pke," (XLM model)"),Pke.forEach(t),lcr=i(D),w4=n(D,"LI",{});var Bke=s(w4);i2e=n(Bke,"STRONG",{});var uvt=s(i2e);icr=r(uvt,"xlm-roberta"),uvt.forEach(t),dcr=r(Bke," \u2014 "),gW=n(Bke,"A",{href:!0});var pvt=s(gW);ccr=r(pvt,"TFXLMRobertaModel"),pvt.forEach(t),mcr=r(Bke," (XLM-RoBERTa model)"),Bke.forEach(t),fcr=i(D),A4=n(D,"LI",{});var Ike=s(A4);d2e=n(Ike,"STRONG",{});var _vt=s(d2e);gcr=r(_vt,"xlnet"),_vt.forEach(t),hcr=r(Ike," \u2014 "),hW=n(Ike,"A",{href:!0});var bvt=s(hW);ucr=r(bvt,"TFXLNetModel"),bvt.forEach(t),pcr=r(Ike," (XLNet model)"),Ike.forEach(t),D.forEach(t),_cr=i(gl),T(y4.$$.fragment,gl),gl.forEach(t),fl.forEach(t),Iqe=i(m),Vd=n(m,"H2",{class:!0});var Oje=s(Vd);L4=n(Oje,"A",{id:!0,class:!0,href:!0});var vvt=s(L4);c2e=n(vvt,"SPAN",{});var Fvt=s(c2e);T(H8.$$.fragment,Fvt),Fvt.forEach(t),vvt.forEach(t),bcr=i(Oje),m2e=n(Oje,"SPAN",{});var Tvt=s(m2e);vcr=r(Tvt,"TFAutoModelForPreTraining"),Tvt.forEach(t),Oje.forEach(t),qqe=i(m),Ko=n(m,"DIV",{class:!0});var hl=s(Ko);T(U8.$$.fragment,hl),Fcr=i(hl),Xd=n(hl,"P",{});var CZ=s(Xd);Tcr=r(CZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),uW=n(CZ,"A",{href:!0});var Mvt=s(uW);Mcr=r(Mvt,"from_pretrained()"),Mvt.forEach(t),Ecr=r(CZ," class method or the "),pW=n(CZ,"A",{href:!0});var Evt=s(pW);Ccr=r(Evt,"from_config()"),Evt.forEach(t),wcr=r(CZ,` class
method.`),CZ.forEach(t),Acr=i(hl),J8=n(hl,"P",{});var Vje=s(J8);ycr=r(Vje,"This class cannot be instantiated directly using "),f2e=n(Vje,"CODE",{});var Cvt=s(f2e);Lcr=r(Cvt,"__init__()"),Cvt.forEach(t),xcr=r(Vje," (throws an error)."),Vje.forEach(t),$cr=i(hl),Lt=n(hl,"DIV",{class:!0});var l0=s(Lt);T(Y8.$$.fragment,l0),kcr=i(l0),g2e=n(l0,"P",{});var wvt=s(g2e);Scr=r(wvt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),wvt.forEach(t),Rcr=i(l0),zd=n(l0,"P",{});var wZ=s(zd);Pcr=r(wZ,`Note:
Loading a model from its configuration file does `),h2e=n(wZ,"STRONG",{});var Avt=s(h2e);Bcr=r(Avt,"not"),Avt.forEach(t),Icr=r(wZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),_W=n(wZ,"A",{href:!0});var yvt=s(_W);qcr=r(yvt,"from_pretrained()"),yvt.forEach(t),Ncr=r(wZ," to load the model weights."),wZ.forEach(t),jcr=i(l0),T(x4.$$.fragment,l0),l0.forEach(t),Dcr=i(hl),Ar=n(hl,"DIV",{class:!0});var ul=s(Ar);T(K8.$$.fragment,ul),Gcr=i(ul),u2e=n(ul,"P",{});var Lvt=s(u2e);Ocr=r(Lvt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Lvt.forEach(t),Vcr=i(ul),Za=n(ul,"P",{});var i0=s(Za);Xcr=r(i0,"The model class to instantiate is selected based on the "),p2e=n(i0,"CODE",{});var xvt=s(p2e);zcr=r(xvt,"model_type"),xvt.forEach(t),Wcr=r(i0,` property of the config object (either
passed as an argument or loaded from `),_2e=n(i0,"CODE",{});var $vt=s(_2e);Qcr=r($vt,"pretrained_model_name_or_path"),$vt.forEach(t),Hcr=r(i0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b2e=n(i0,"CODE",{});var kvt=s(b2e);Ucr=r(kvt,"pretrained_model_name_or_path"),kvt.forEach(t),Jcr=r(i0,":"),i0.forEach(t),Ycr=i(ul),se=n(ul,"UL",{});var le=s(se);$4=n(le,"LI",{});var qke=s($4);v2e=n(qke,"STRONG",{});var Svt=s(v2e);Kcr=r(Svt,"albert"),Svt.forEach(t),Zcr=r(qke," \u2014 "),bW=n(qke,"A",{href:!0});var Rvt=s(bW);emr=r(Rvt,"TFAlbertForPreTraining"),Rvt.forEach(t),omr=r(qke," (ALBERT model)"),qke.forEach(t),rmr=i(le),k4=n(le,"LI",{});var Nke=s(k4);F2e=n(Nke,"STRONG",{});var Pvt=s(F2e);tmr=r(Pvt,"bart"),Pvt.forEach(t),amr=r(Nke," \u2014 "),vW=n(Nke,"A",{href:!0});var Bvt=s(vW);nmr=r(Bvt,"TFBartForConditionalGeneration"),Bvt.forEach(t),smr=r(Nke," (BART model)"),Nke.forEach(t),lmr=i(le),S4=n(le,"LI",{});var jke=s(S4);T2e=n(jke,"STRONG",{});var Ivt=s(T2e);imr=r(Ivt,"bert"),Ivt.forEach(t),dmr=r(jke," \u2014 "),FW=n(jke,"A",{href:!0});var qvt=s(FW);cmr=r(qvt,"TFBertForPreTraining"),qvt.forEach(t),mmr=r(jke," (BERT model)"),jke.forEach(t),fmr=i(le),R4=n(le,"LI",{});var Dke=s(R4);M2e=n(Dke,"STRONG",{});var Nvt=s(M2e);gmr=r(Nvt,"camembert"),Nvt.forEach(t),hmr=r(Dke," \u2014 "),TW=n(Dke,"A",{href:!0});var jvt=s(TW);umr=r(jvt,"TFCamembertForMaskedLM"),jvt.forEach(t),pmr=r(Dke," (CamemBERT model)"),Dke.forEach(t),_mr=i(le),P4=n(le,"LI",{});var Gke=s(P4);E2e=n(Gke,"STRONG",{});var Dvt=s(E2e);bmr=r(Dvt,"ctrl"),Dvt.forEach(t),vmr=r(Gke," \u2014 "),MW=n(Gke,"A",{href:!0});var Gvt=s(MW);Fmr=r(Gvt,"TFCTRLLMHeadModel"),Gvt.forEach(t),Tmr=r(Gke," (CTRL model)"),Gke.forEach(t),Mmr=i(le),B4=n(le,"LI",{});var Oke=s(B4);C2e=n(Oke,"STRONG",{});var Ovt=s(C2e);Emr=r(Ovt,"distilbert"),Ovt.forEach(t),Cmr=r(Oke," \u2014 "),EW=n(Oke,"A",{href:!0});var Vvt=s(EW);wmr=r(Vvt,"TFDistilBertForMaskedLM"),Vvt.forEach(t),Amr=r(Oke," (DistilBERT model)"),Oke.forEach(t),ymr=i(le),I4=n(le,"LI",{});var Vke=s(I4);w2e=n(Vke,"STRONG",{});var Xvt=s(w2e);Lmr=r(Xvt,"electra"),Xvt.forEach(t),xmr=r(Vke," \u2014 "),CW=n(Vke,"A",{href:!0});var zvt=s(CW);$mr=r(zvt,"TFElectraForPreTraining"),zvt.forEach(t),kmr=r(Vke," (ELECTRA model)"),Vke.forEach(t),Smr=i(le),q4=n(le,"LI",{});var Xke=s(q4);A2e=n(Xke,"STRONG",{});var Wvt=s(A2e);Rmr=r(Wvt,"flaubert"),Wvt.forEach(t),Pmr=r(Xke," \u2014 "),wW=n(Xke,"A",{href:!0});var Qvt=s(wW);Bmr=r(Qvt,"TFFlaubertWithLMHeadModel"),Qvt.forEach(t),Imr=r(Xke," (FlauBERT model)"),Xke.forEach(t),qmr=i(le),N4=n(le,"LI",{});var zke=s(N4);y2e=n(zke,"STRONG",{});var Hvt=s(y2e);Nmr=r(Hvt,"funnel"),Hvt.forEach(t),jmr=r(zke," \u2014 "),AW=n(zke,"A",{href:!0});var Uvt=s(AW);Dmr=r(Uvt,"TFFunnelForPreTraining"),Uvt.forEach(t),Gmr=r(zke," (Funnel Transformer model)"),zke.forEach(t),Omr=i(le),j4=n(le,"LI",{});var Wke=s(j4);L2e=n(Wke,"STRONG",{});var Jvt=s(L2e);Vmr=r(Jvt,"gpt2"),Jvt.forEach(t),Xmr=r(Wke," \u2014 "),yW=n(Wke,"A",{href:!0});var Yvt=s(yW);zmr=r(Yvt,"TFGPT2LMHeadModel"),Yvt.forEach(t),Wmr=r(Wke," (OpenAI GPT-2 model)"),Wke.forEach(t),Qmr=i(le),D4=n(le,"LI",{});var Qke=s(D4);x2e=n(Qke,"STRONG",{});var Kvt=s(x2e);Hmr=r(Kvt,"layoutlm"),Kvt.forEach(t),Umr=r(Qke," \u2014 "),LW=n(Qke,"A",{href:!0});var Zvt=s(LW);Jmr=r(Zvt,"TFLayoutLMForMaskedLM"),Zvt.forEach(t),Ymr=r(Qke," (LayoutLM model)"),Qke.forEach(t),Kmr=i(le),G4=n(le,"LI",{});var Hke=s(G4);$2e=n(Hke,"STRONG",{});var eFt=s($2e);Zmr=r(eFt,"lxmert"),eFt.forEach(t),efr=r(Hke," \u2014 "),xW=n(Hke,"A",{href:!0});var oFt=s(xW);ofr=r(oFt,"TFLxmertForPreTraining"),oFt.forEach(t),rfr=r(Hke," (LXMERT model)"),Hke.forEach(t),tfr=i(le),O4=n(le,"LI",{});var Uke=s(O4);k2e=n(Uke,"STRONG",{});var rFt=s(k2e);afr=r(rFt,"mobilebert"),rFt.forEach(t),nfr=r(Uke," \u2014 "),$W=n(Uke,"A",{href:!0});var tFt=s($W);sfr=r(tFt,"TFMobileBertForPreTraining"),tFt.forEach(t),lfr=r(Uke," (MobileBERT model)"),Uke.forEach(t),ifr=i(le),V4=n(le,"LI",{});var Jke=s(V4);S2e=n(Jke,"STRONG",{});var aFt=s(S2e);dfr=r(aFt,"mpnet"),aFt.forEach(t),cfr=r(Jke," \u2014 "),kW=n(Jke,"A",{href:!0});var nFt=s(kW);mfr=r(nFt,"TFMPNetForMaskedLM"),nFt.forEach(t),ffr=r(Jke," (MPNet model)"),Jke.forEach(t),gfr=i(le),X4=n(le,"LI",{});var Yke=s(X4);R2e=n(Yke,"STRONG",{});var sFt=s(R2e);hfr=r(sFt,"openai-gpt"),sFt.forEach(t),ufr=r(Yke," \u2014 "),SW=n(Yke,"A",{href:!0});var lFt=s(SW);pfr=r(lFt,"TFOpenAIGPTLMHeadModel"),lFt.forEach(t),_fr=r(Yke," (OpenAI GPT model)"),Yke.forEach(t),bfr=i(le),z4=n(le,"LI",{});var Kke=s(z4);P2e=n(Kke,"STRONG",{});var iFt=s(P2e);vfr=r(iFt,"roberta"),iFt.forEach(t),Ffr=r(Kke," \u2014 "),RW=n(Kke,"A",{href:!0});var dFt=s(RW);Tfr=r(dFt,"TFRobertaForMaskedLM"),dFt.forEach(t),Mfr=r(Kke," (RoBERTa model)"),Kke.forEach(t),Efr=i(le),W4=n(le,"LI",{});var Zke=s(W4);B2e=n(Zke,"STRONG",{});var cFt=s(B2e);Cfr=r(cFt,"t5"),cFt.forEach(t),wfr=r(Zke," \u2014 "),PW=n(Zke,"A",{href:!0});var mFt=s(PW);Afr=r(mFt,"TFT5ForConditionalGeneration"),mFt.forEach(t),yfr=r(Zke," (T5 model)"),Zke.forEach(t),Lfr=i(le),Q4=n(le,"LI",{});var eSe=s(Q4);I2e=n(eSe,"STRONG",{});var fFt=s(I2e);xfr=r(fFt,"tapas"),fFt.forEach(t),$fr=r(eSe," \u2014 "),BW=n(eSe,"A",{href:!0});var gFt=s(BW);kfr=r(gFt,"TFTapasForMaskedLM"),gFt.forEach(t),Sfr=r(eSe," (TAPAS model)"),eSe.forEach(t),Rfr=i(le),H4=n(le,"LI",{});var oSe=s(H4);q2e=n(oSe,"STRONG",{});var hFt=s(q2e);Pfr=r(hFt,"transfo-xl"),hFt.forEach(t),Bfr=r(oSe," \u2014 "),IW=n(oSe,"A",{href:!0});var uFt=s(IW);Ifr=r(uFt,"TFTransfoXLLMHeadModel"),uFt.forEach(t),qfr=r(oSe," (Transformer-XL model)"),oSe.forEach(t),Nfr=i(le),U4=n(le,"LI",{});var rSe=s(U4);N2e=n(rSe,"STRONG",{});var pFt=s(N2e);jfr=r(pFt,"vit_mae"),pFt.forEach(t),Dfr=r(rSe," \u2014 "),qW=n(rSe,"A",{href:!0});var _Ft=s(qW);Gfr=r(_Ft,"TFViTMAEForPreTraining"),_Ft.forEach(t),Ofr=r(rSe," (ViTMAE model)"),rSe.forEach(t),Vfr=i(le),J4=n(le,"LI",{});var tSe=s(J4);j2e=n(tSe,"STRONG",{});var bFt=s(j2e);Xfr=r(bFt,"xlm"),bFt.forEach(t),zfr=r(tSe," \u2014 "),NW=n(tSe,"A",{href:!0});var vFt=s(NW);Wfr=r(vFt,"TFXLMWithLMHeadModel"),vFt.forEach(t),Qfr=r(tSe," (XLM model)"),tSe.forEach(t),Hfr=i(le),Y4=n(le,"LI",{});var aSe=s(Y4);D2e=n(aSe,"STRONG",{});var FFt=s(D2e);Ufr=r(FFt,"xlm-roberta"),FFt.forEach(t),Jfr=r(aSe," \u2014 "),jW=n(aSe,"A",{href:!0});var TFt=s(jW);Yfr=r(TFt,"TFXLMRobertaForMaskedLM"),TFt.forEach(t),Kfr=r(aSe," (XLM-RoBERTa model)"),aSe.forEach(t),Zfr=i(le),K4=n(le,"LI",{});var nSe=s(K4);G2e=n(nSe,"STRONG",{});var MFt=s(G2e);egr=r(MFt,"xlnet"),MFt.forEach(t),ogr=r(nSe," \u2014 "),DW=n(nSe,"A",{href:!0});var EFt=s(DW);rgr=r(EFt,"TFXLNetLMHeadModel"),EFt.forEach(t),tgr=r(nSe," (XLNet model)"),nSe.forEach(t),le.forEach(t),agr=i(ul),T(Z4.$$.fragment,ul),ul.forEach(t),hl.forEach(t),Nqe=i(m),Wd=n(m,"H2",{class:!0});var Xje=s(Wd);eE=n(Xje,"A",{id:!0,class:!0,href:!0});var CFt=s(eE);O2e=n(CFt,"SPAN",{});var wFt=s(O2e);T(Z8.$$.fragment,wFt),wFt.forEach(t),CFt.forEach(t),ngr=i(Xje),V2e=n(Xje,"SPAN",{});var AFt=s(V2e);sgr=r(AFt,"TFAutoModelForCausalLM"),AFt.forEach(t),Xje.forEach(t),jqe=i(m),Zo=n(m,"DIV",{class:!0});var pl=s(Zo);T(ex.$$.fragment,pl),lgr=i(pl),Qd=n(pl,"P",{});var AZ=s(Qd);igr=r(AZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),GW=n(AZ,"A",{href:!0});var yFt=s(GW);dgr=r(yFt,"from_pretrained()"),yFt.forEach(t),cgr=r(AZ," class method or the "),OW=n(AZ,"A",{href:!0});var LFt=s(OW);mgr=r(LFt,"from_config()"),LFt.forEach(t),fgr=r(AZ,` class
method.`),AZ.forEach(t),ggr=i(pl),ox=n(pl,"P",{});var zje=s(ox);hgr=r(zje,"This class cannot be instantiated directly using "),X2e=n(zje,"CODE",{});var xFt=s(X2e);ugr=r(xFt,"__init__()"),xFt.forEach(t),pgr=r(zje," (throws an error)."),zje.forEach(t),_gr=i(pl),xt=n(pl,"DIV",{class:!0});var d0=s(xt);T(rx.$$.fragment,d0),bgr=i(d0),z2e=n(d0,"P",{});var $Ft=s(z2e);vgr=r($Ft,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),$Ft.forEach(t),Fgr=i(d0),Hd=n(d0,"P",{});var yZ=s(Hd);Tgr=r(yZ,`Note:
Loading a model from its configuration file does `),W2e=n(yZ,"STRONG",{});var kFt=s(W2e);Mgr=r(kFt,"not"),kFt.forEach(t),Egr=r(yZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),VW=n(yZ,"A",{href:!0});var SFt=s(VW);Cgr=r(SFt,"from_pretrained()"),SFt.forEach(t),wgr=r(yZ," to load the model weights."),yZ.forEach(t),Agr=i(d0),T(oE.$$.fragment,d0),d0.forEach(t),ygr=i(pl),yr=n(pl,"DIV",{class:!0});var _l=s(yr);T(tx.$$.fragment,_l),Lgr=i(_l),Q2e=n(_l,"P",{});var RFt=s(Q2e);xgr=r(RFt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),RFt.forEach(t),$gr=i(_l),en=n(_l,"P",{});var c0=s(en);kgr=r(c0,"The model class to instantiate is selected based on the "),H2e=n(c0,"CODE",{});var PFt=s(H2e);Sgr=r(PFt,"model_type"),PFt.forEach(t),Rgr=r(c0,` property of the config object (either
passed as an argument or loaded from `),U2e=n(c0,"CODE",{});var BFt=s(U2e);Pgr=r(BFt,"pretrained_model_name_or_path"),BFt.forEach(t),Bgr=r(c0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J2e=n(c0,"CODE",{});var IFt=s(J2e);Igr=r(IFt,"pretrained_model_name_or_path"),IFt.forEach(t),qgr=r(c0,":"),c0.forEach(t),Ngr=i(_l),Te=n(_l,"UL",{});var Ce=s(Te);rE=n(Ce,"LI",{});var sSe=s(rE);Y2e=n(sSe,"STRONG",{});var qFt=s(Y2e);jgr=r(qFt,"bert"),qFt.forEach(t),Dgr=r(sSe," \u2014 "),XW=n(sSe,"A",{href:!0});var NFt=s(XW);Ggr=r(NFt,"TFBertLMHeadModel"),NFt.forEach(t),Ogr=r(sSe," (BERT model)"),sSe.forEach(t),Vgr=i(Ce),tE=n(Ce,"LI",{});var lSe=s(tE);K2e=n(lSe,"STRONG",{});var jFt=s(K2e);Xgr=r(jFt,"camembert"),jFt.forEach(t),zgr=r(lSe," \u2014 "),zW=n(lSe,"A",{href:!0});var DFt=s(zW);Wgr=r(DFt,"TFCamembertForCausalLM"),DFt.forEach(t),Qgr=r(lSe," (CamemBERT model)"),lSe.forEach(t),Hgr=i(Ce),aE=n(Ce,"LI",{});var iSe=s(aE);Z2e=n(iSe,"STRONG",{});var GFt=s(Z2e);Ugr=r(GFt,"ctrl"),GFt.forEach(t),Jgr=r(iSe," \u2014 "),WW=n(iSe,"A",{href:!0});var OFt=s(WW);Ygr=r(OFt,"TFCTRLLMHeadModel"),OFt.forEach(t),Kgr=r(iSe," (CTRL model)"),iSe.forEach(t),Zgr=i(Ce),nE=n(Ce,"LI",{});var dSe=s(nE);eve=n(dSe,"STRONG",{});var VFt=s(eve);ehr=r(VFt,"gpt2"),VFt.forEach(t),ohr=r(dSe," \u2014 "),QW=n(dSe,"A",{href:!0});var XFt=s(QW);rhr=r(XFt,"TFGPT2LMHeadModel"),XFt.forEach(t),thr=r(dSe," (OpenAI GPT-2 model)"),dSe.forEach(t),ahr=i(Ce),sE=n(Ce,"LI",{});var cSe=s(sE);ove=n(cSe,"STRONG",{});var zFt=s(ove);nhr=r(zFt,"gptj"),zFt.forEach(t),shr=r(cSe," \u2014 "),HW=n(cSe,"A",{href:!0});var WFt=s(HW);lhr=r(WFt,"TFGPTJForCausalLM"),WFt.forEach(t),ihr=r(cSe," (GPT-J model)"),cSe.forEach(t),dhr=i(Ce),lE=n(Ce,"LI",{});var mSe=s(lE);rve=n(mSe,"STRONG",{});var QFt=s(rve);chr=r(QFt,"openai-gpt"),QFt.forEach(t),mhr=r(mSe," \u2014 "),UW=n(mSe,"A",{href:!0});var HFt=s(UW);fhr=r(HFt,"TFOpenAIGPTLMHeadModel"),HFt.forEach(t),ghr=r(mSe," (OpenAI GPT model)"),mSe.forEach(t),hhr=i(Ce),iE=n(Ce,"LI",{});var fSe=s(iE);tve=n(fSe,"STRONG",{});var UFt=s(tve);uhr=r(UFt,"rembert"),UFt.forEach(t),phr=r(fSe," \u2014 "),JW=n(fSe,"A",{href:!0});var JFt=s(JW);_hr=r(JFt,"TFRemBertForCausalLM"),JFt.forEach(t),bhr=r(fSe," (RemBERT model)"),fSe.forEach(t),vhr=i(Ce),dE=n(Ce,"LI",{});var gSe=s(dE);ave=n(gSe,"STRONG",{});var YFt=s(ave);Fhr=r(YFt,"roberta"),YFt.forEach(t),Thr=r(gSe," \u2014 "),YW=n(gSe,"A",{href:!0});var KFt=s(YW);Mhr=r(KFt,"TFRobertaForCausalLM"),KFt.forEach(t),Ehr=r(gSe," (RoBERTa model)"),gSe.forEach(t),Chr=i(Ce),cE=n(Ce,"LI",{});var hSe=s(cE);nve=n(hSe,"STRONG",{});var ZFt=s(nve);whr=r(ZFt,"roformer"),ZFt.forEach(t),Ahr=r(hSe," \u2014 "),KW=n(hSe,"A",{href:!0});var e1t=s(KW);yhr=r(e1t,"TFRoFormerForCausalLM"),e1t.forEach(t),Lhr=r(hSe," (RoFormer model)"),hSe.forEach(t),xhr=i(Ce),mE=n(Ce,"LI",{});var uSe=s(mE);sve=n(uSe,"STRONG",{});var o1t=s(sve);$hr=r(o1t,"transfo-xl"),o1t.forEach(t),khr=r(uSe," \u2014 "),ZW=n(uSe,"A",{href:!0});var r1t=s(ZW);Shr=r(r1t,"TFTransfoXLLMHeadModel"),r1t.forEach(t),Rhr=r(uSe," (Transformer-XL model)"),uSe.forEach(t),Phr=i(Ce),fE=n(Ce,"LI",{});var pSe=s(fE);lve=n(pSe,"STRONG",{});var t1t=s(lve);Bhr=r(t1t,"xlm"),t1t.forEach(t),Ihr=r(pSe," \u2014 "),eQ=n(pSe,"A",{href:!0});var a1t=s(eQ);qhr=r(a1t,"TFXLMWithLMHeadModel"),a1t.forEach(t),Nhr=r(pSe," (XLM model)"),pSe.forEach(t),jhr=i(Ce),gE=n(Ce,"LI",{});var _Se=s(gE);ive=n(_Se,"STRONG",{});var n1t=s(ive);Dhr=r(n1t,"xlnet"),n1t.forEach(t),Ghr=r(_Se," \u2014 "),oQ=n(_Se,"A",{href:!0});var s1t=s(oQ);Ohr=r(s1t,"TFXLNetLMHeadModel"),s1t.forEach(t),Vhr=r(_Se," (XLNet model)"),_Se.forEach(t),Ce.forEach(t),Xhr=i(_l),T(hE.$$.fragment,_l),_l.forEach(t),pl.forEach(t),Dqe=i(m),Ud=n(m,"H2",{class:!0});var Wje=s(Ud);uE=n(Wje,"A",{id:!0,class:!0,href:!0});var l1t=s(uE);dve=n(l1t,"SPAN",{});var i1t=s(dve);T(ax.$$.fragment,i1t),i1t.forEach(t),l1t.forEach(t),zhr=i(Wje),cve=n(Wje,"SPAN",{});var d1t=s(cve);Whr=r(d1t,"TFAutoModelForImageClassification"),d1t.forEach(t),Wje.forEach(t),Gqe=i(m),er=n(m,"DIV",{class:!0});var bl=s(er);T(nx.$$.fragment,bl),Qhr=i(bl),Jd=n(bl,"P",{});var LZ=s(Jd);Hhr=r(LZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),rQ=n(LZ,"A",{href:!0});var c1t=s(rQ);Uhr=r(c1t,"from_pretrained()"),c1t.forEach(t),Jhr=r(LZ," class method or the "),tQ=n(LZ,"A",{href:!0});var m1t=s(tQ);Yhr=r(m1t,"from_config()"),m1t.forEach(t),Khr=r(LZ,` class
method.`),LZ.forEach(t),Zhr=i(bl),sx=n(bl,"P",{});var Qje=s(sx);eur=r(Qje,"This class cannot be instantiated directly using "),mve=n(Qje,"CODE",{});var f1t=s(mve);our=r(f1t,"__init__()"),f1t.forEach(t),rur=r(Qje," (throws an error)."),Qje.forEach(t),tur=i(bl),$t=n(bl,"DIV",{class:!0});var m0=s($t);T(lx.$$.fragment,m0),aur=i(m0),fve=n(m0,"P",{});var g1t=s(fve);nur=r(g1t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),g1t.forEach(t),sur=i(m0),Yd=n(m0,"P",{});var xZ=s(Yd);lur=r(xZ,`Note:
Loading a model from its configuration file does `),gve=n(xZ,"STRONG",{});var h1t=s(gve);iur=r(h1t,"not"),h1t.forEach(t),dur=r(xZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),aQ=n(xZ,"A",{href:!0});var u1t=s(aQ);cur=r(u1t,"from_pretrained()"),u1t.forEach(t),mur=r(xZ," to load the model weights."),xZ.forEach(t),fur=i(m0),T(pE.$$.fragment,m0),m0.forEach(t),gur=i(bl),Lr=n(bl,"DIV",{class:!0});var vl=s(Lr);T(ix.$$.fragment,vl),hur=i(vl),hve=n(vl,"P",{});var p1t=s(hve);uur=r(p1t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),p1t.forEach(t),pur=i(vl),on=n(vl,"P",{});var f0=s(on);_ur=r(f0,"The model class to instantiate is selected based on the "),uve=n(f0,"CODE",{});var _1t=s(uve);bur=r(_1t,"model_type"),_1t.forEach(t),vur=r(f0,` property of the config object (either
passed as an argument or loaded from `),pve=n(f0,"CODE",{});var b1t=s(pve);Fur=r(b1t,"pretrained_model_name_or_path"),b1t.forEach(t),Tur=r(f0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_ve=n(f0,"CODE",{});var v1t=s(_ve);Mur=r(v1t,"pretrained_model_name_or_path"),v1t.forEach(t),Eur=r(f0,":"),f0.forEach(t),Cur=i(vl),rn=n(vl,"UL",{});var g0=s(rn);_E=n(g0,"LI",{});var bSe=s(_E);bve=n(bSe,"STRONG",{});var F1t=s(bve);wur=r(F1t,"convnext"),F1t.forEach(t),Aur=r(bSe," \u2014 "),nQ=n(bSe,"A",{href:!0});var T1t=s(nQ);yur=r(T1t,"TFConvNextForImageClassification"),T1t.forEach(t),Lur=r(bSe," (ConvNext model)"),bSe.forEach(t),xur=i(g0),bE=n(g0,"LI",{});var vSe=s(bE);vve=n(vSe,"STRONG",{});var M1t=s(vve);$ur=r(M1t,"data2vec-vision"),M1t.forEach(t),kur=r(vSe," \u2014 "),sQ=n(vSe,"A",{href:!0});var E1t=s(sQ);Sur=r(E1t,"TFData2VecVisionForImageClassification"),E1t.forEach(t),Rur=r(vSe," (Data2VecVision model)"),vSe.forEach(t),Pur=i(g0),vE=n(g0,"LI",{});var FSe=s(vE);Fve=n(FSe,"STRONG",{});var C1t=s(Fve);Bur=r(C1t,"swin"),C1t.forEach(t),Iur=r(FSe," \u2014 "),lQ=n(FSe,"A",{href:!0});var w1t=s(lQ);qur=r(w1t,"TFSwinForImageClassification"),w1t.forEach(t),Nur=r(FSe," (Swin model)"),FSe.forEach(t),jur=i(g0),FE=n(g0,"LI",{});var TSe=s(FE);Tve=n(TSe,"STRONG",{});var A1t=s(Tve);Dur=r(A1t,"vit"),A1t.forEach(t),Gur=r(TSe," \u2014 "),iQ=n(TSe,"A",{href:!0});var y1t=s(iQ);Our=r(y1t,"TFViTForImageClassification"),y1t.forEach(t),Vur=r(TSe," (ViT model)"),TSe.forEach(t),g0.forEach(t),Xur=i(vl),T(TE.$$.fragment,vl),vl.forEach(t),bl.forEach(t),Oqe=i(m),Kd=n(m,"H2",{class:!0});var Hje=s(Kd);ME=n(Hje,"A",{id:!0,class:!0,href:!0});var L1t=s(ME);Mve=n(L1t,"SPAN",{});var x1t=s(Mve);T(dx.$$.fragment,x1t),x1t.forEach(t),L1t.forEach(t),zur=i(Hje),Eve=n(Hje,"SPAN",{});var $1t=s(Eve);Wur=r($1t,"TFAutoModelForMaskedLM"),$1t.forEach(t),Hje.forEach(t),Vqe=i(m),or=n(m,"DIV",{class:!0});var Fl=s(or);T(cx.$$.fragment,Fl),Qur=i(Fl),Zd=n(Fl,"P",{});var $Z=s(Zd);Hur=r($Z,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),dQ=n($Z,"A",{href:!0});var k1t=s(dQ);Uur=r(k1t,"from_pretrained()"),k1t.forEach(t),Jur=r($Z," class method or the "),cQ=n($Z,"A",{href:!0});var S1t=s(cQ);Yur=r(S1t,"from_config()"),S1t.forEach(t),Kur=r($Z,` class
method.`),$Z.forEach(t),Zur=i(Fl),mx=n(Fl,"P",{});var Uje=s(mx);epr=r(Uje,"This class cannot be instantiated directly using "),Cve=n(Uje,"CODE",{});var R1t=s(Cve);opr=r(R1t,"__init__()"),R1t.forEach(t),rpr=r(Uje," (throws an error)."),Uje.forEach(t),tpr=i(Fl),kt=n(Fl,"DIV",{class:!0});var h0=s(kt);T(fx.$$.fragment,h0),apr=i(h0),wve=n(h0,"P",{});var P1t=s(wve);npr=r(P1t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),P1t.forEach(t),spr=i(h0),ec=n(h0,"P",{});var kZ=s(ec);lpr=r(kZ,`Note:
Loading a model from its configuration file does `),Ave=n(kZ,"STRONG",{});var B1t=s(Ave);ipr=r(B1t,"not"),B1t.forEach(t),dpr=r(kZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),mQ=n(kZ,"A",{href:!0});var I1t=s(mQ);cpr=r(I1t,"from_pretrained()"),I1t.forEach(t),mpr=r(kZ," to load the model weights."),kZ.forEach(t),fpr=i(h0),T(EE.$$.fragment,h0),h0.forEach(t),gpr=i(Fl),xr=n(Fl,"DIV",{class:!0});var Tl=s(xr);T(gx.$$.fragment,Tl),hpr=i(Tl),yve=n(Tl,"P",{});var q1t=s(yve);upr=r(q1t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),q1t.forEach(t),ppr=i(Tl),tn=n(Tl,"P",{});var u0=s(tn);_pr=r(u0,"The model class to instantiate is selected based on the "),Lve=n(u0,"CODE",{});var N1t=s(Lve);bpr=r(N1t,"model_type"),N1t.forEach(t),vpr=r(u0,` property of the config object (either
passed as an argument or loaded from `),xve=n(u0,"CODE",{});var j1t=s(xve);Fpr=r(j1t,"pretrained_model_name_or_path"),j1t.forEach(t),Tpr=r(u0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$ve=n(u0,"CODE",{});var D1t=s($ve);Mpr=r(D1t,"pretrained_model_name_or_path"),D1t.forEach(t),Epr=r(u0,":"),u0.forEach(t),Cpr=i(Tl),ie=n(Tl,"UL",{});var me=s(ie);CE=n(me,"LI",{});var MSe=s(CE);kve=n(MSe,"STRONG",{});var G1t=s(kve);wpr=r(G1t,"albert"),G1t.forEach(t),Apr=r(MSe," \u2014 "),fQ=n(MSe,"A",{href:!0});var O1t=s(fQ);ypr=r(O1t,"TFAlbertForMaskedLM"),O1t.forEach(t),Lpr=r(MSe," (ALBERT model)"),MSe.forEach(t),xpr=i(me),wE=n(me,"LI",{});var ESe=s(wE);Sve=n(ESe,"STRONG",{});var V1t=s(Sve);$pr=r(V1t,"bert"),V1t.forEach(t),kpr=r(ESe," \u2014 "),gQ=n(ESe,"A",{href:!0});var X1t=s(gQ);Spr=r(X1t,"TFBertForMaskedLM"),X1t.forEach(t),Rpr=r(ESe," (BERT model)"),ESe.forEach(t),Ppr=i(me),AE=n(me,"LI",{});var CSe=s(AE);Rve=n(CSe,"STRONG",{});var z1t=s(Rve);Bpr=r(z1t,"camembert"),z1t.forEach(t),Ipr=r(CSe," \u2014 "),hQ=n(CSe,"A",{href:!0});var W1t=s(hQ);qpr=r(W1t,"TFCamembertForMaskedLM"),W1t.forEach(t),Npr=r(CSe," (CamemBERT model)"),CSe.forEach(t),jpr=i(me),yE=n(me,"LI",{});var wSe=s(yE);Pve=n(wSe,"STRONG",{});var Q1t=s(Pve);Dpr=r(Q1t,"convbert"),Q1t.forEach(t),Gpr=r(wSe," \u2014 "),uQ=n(wSe,"A",{href:!0});var H1t=s(uQ);Opr=r(H1t,"TFConvBertForMaskedLM"),H1t.forEach(t),Vpr=r(wSe," (ConvBERT model)"),wSe.forEach(t),Xpr=i(me),LE=n(me,"LI",{});var ASe=s(LE);Bve=n(ASe,"STRONG",{});var U1t=s(Bve);zpr=r(U1t,"deberta"),U1t.forEach(t),Wpr=r(ASe," \u2014 "),pQ=n(ASe,"A",{href:!0});var J1t=s(pQ);Qpr=r(J1t,"TFDebertaForMaskedLM"),J1t.forEach(t),Hpr=r(ASe," (DeBERTa model)"),ASe.forEach(t),Upr=i(me),xE=n(me,"LI",{});var ySe=s(xE);Ive=n(ySe,"STRONG",{});var Y1t=s(Ive);Jpr=r(Y1t,"deberta-v2"),Y1t.forEach(t),Ypr=r(ySe," \u2014 "),_Q=n(ySe,"A",{href:!0});var K1t=s(_Q);Kpr=r(K1t,"TFDebertaV2ForMaskedLM"),K1t.forEach(t),Zpr=r(ySe," (DeBERTa-v2 model)"),ySe.forEach(t),e_r=i(me),$E=n(me,"LI",{});var LSe=s($E);qve=n(LSe,"STRONG",{});var Z1t=s(qve);o_r=r(Z1t,"distilbert"),Z1t.forEach(t),r_r=r(LSe," \u2014 "),bQ=n(LSe,"A",{href:!0});var eTt=s(bQ);t_r=r(eTt,"TFDistilBertForMaskedLM"),eTt.forEach(t),a_r=r(LSe," (DistilBERT model)"),LSe.forEach(t),n_r=i(me),kE=n(me,"LI",{});var xSe=s(kE);Nve=n(xSe,"STRONG",{});var oTt=s(Nve);s_r=r(oTt,"electra"),oTt.forEach(t),l_r=r(xSe," \u2014 "),vQ=n(xSe,"A",{href:!0});var rTt=s(vQ);i_r=r(rTt,"TFElectraForMaskedLM"),rTt.forEach(t),d_r=r(xSe," (ELECTRA model)"),xSe.forEach(t),c_r=i(me),SE=n(me,"LI",{});var $Se=s(SE);jve=n($Se,"STRONG",{});var tTt=s(jve);m_r=r(tTt,"flaubert"),tTt.forEach(t),f_r=r($Se," \u2014 "),FQ=n($Se,"A",{href:!0});var aTt=s(FQ);g_r=r(aTt,"TFFlaubertWithLMHeadModel"),aTt.forEach(t),h_r=r($Se," (FlauBERT model)"),$Se.forEach(t),u_r=i(me),RE=n(me,"LI",{});var kSe=s(RE);Dve=n(kSe,"STRONG",{});var nTt=s(Dve);p_r=r(nTt,"funnel"),nTt.forEach(t),__r=r(kSe," \u2014 "),TQ=n(kSe,"A",{href:!0});var sTt=s(TQ);b_r=r(sTt,"TFFunnelForMaskedLM"),sTt.forEach(t),v_r=r(kSe," (Funnel Transformer model)"),kSe.forEach(t),F_r=i(me),PE=n(me,"LI",{});var SSe=s(PE);Gve=n(SSe,"STRONG",{});var lTt=s(Gve);T_r=r(lTt,"layoutlm"),lTt.forEach(t),M_r=r(SSe," \u2014 "),MQ=n(SSe,"A",{href:!0});var iTt=s(MQ);E_r=r(iTt,"TFLayoutLMForMaskedLM"),iTt.forEach(t),C_r=r(SSe," (LayoutLM model)"),SSe.forEach(t),w_r=i(me),BE=n(me,"LI",{});var RSe=s(BE);Ove=n(RSe,"STRONG",{});var dTt=s(Ove);A_r=r(dTt,"longformer"),dTt.forEach(t),y_r=r(RSe," \u2014 "),EQ=n(RSe,"A",{href:!0});var cTt=s(EQ);L_r=r(cTt,"TFLongformerForMaskedLM"),cTt.forEach(t),x_r=r(RSe," (Longformer model)"),RSe.forEach(t),$_r=i(me),IE=n(me,"LI",{});var PSe=s(IE);Vve=n(PSe,"STRONG",{});var mTt=s(Vve);k_r=r(mTt,"mobilebert"),mTt.forEach(t),S_r=r(PSe," \u2014 "),CQ=n(PSe,"A",{href:!0});var fTt=s(CQ);R_r=r(fTt,"TFMobileBertForMaskedLM"),fTt.forEach(t),P_r=r(PSe," (MobileBERT model)"),PSe.forEach(t),B_r=i(me),qE=n(me,"LI",{});var BSe=s(qE);Xve=n(BSe,"STRONG",{});var gTt=s(Xve);I_r=r(gTt,"mpnet"),gTt.forEach(t),q_r=r(BSe," \u2014 "),wQ=n(BSe,"A",{href:!0});var hTt=s(wQ);N_r=r(hTt,"TFMPNetForMaskedLM"),hTt.forEach(t),j_r=r(BSe," (MPNet model)"),BSe.forEach(t),D_r=i(me),NE=n(me,"LI",{});var ISe=s(NE);zve=n(ISe,"STRONG",{});var uTt=s(zve);G_r=r(uTt,"rembert"),uTt.forEach(t),O_r=r(ISe," \u2014 "),AQ=n(ISe,"A",{href:!0});var pTt=s(AQ);V_r=r(pTt,"TFRemBertForMaskedLM"),pTt.forEach(t),X_r=r(ISe," (RemBERT model)"),ISe.forEach(t),z_r=i(me),jE=n(me,"LI",{});var qSe=s(jE);Wve=n(qSe,"STRONG",{});var _Tt=s(Wve);W_r=r(_Tt,"roberta"),_Tt.forEach(t),Q_r=r(qSe," \u2014 "),yQ=n(qSe,"A",{href:!0});var bTt=s(yQ);H_r=r(bTt,"TFRobertaForMaskedLM"),bTt.forEach(t),U_r=r(qSe," (RoBERTa model)"),qSe.forEach(t),J_r=i(me),DE=n(me,"LI",{});var NSe=s(DE);Qve=n(NSe,"STRONG",{});var vTt=s(Qve);Y_r=r(vTt,"roformer"),vTt.forEach(t),K_r=r(NSe," \u2014 "),LQ=n(NSe,"A",{href:!0});var FTt=s(LQ);Z_r=r(FTt,"TFRoFormerForMaskedLM"),FTt.forEach(t),ebr=r(NSe," (RoFormer model)"),NSe.forEach(t),obr=i(me),GE=n(me,"LI",{});var jSe=s(GE);Hve=n(jSe,"STRONG",{});var TTt=s(Hve);rbr=r(TTt,"tapas"),TTt.forEach(t),tbr=r(jSe," \u2014 "),xQ=n(jSe,"A",{href:!0});var MTt=s(xQ);abr=r(MTt,"TFTapasForMaskedLM"),MTt.forEach(t),nbr=r(jSe," (TAPAS model)"),jSe.forEach(t),sbr=i(me),OE=n(me,"LI",{});var DSe=s(OE);Uve=n(DSe,"STRONG",{});var ETt=s(Uve);lbr=r(ETt,"xlm"),ETt.forEach(t),ibr=r(DSe," \u2014 "),$Q=n(DSe,"A",{href:!0});var CTt=s($Q);dbr=r(CTt,"TFXLMWithLMHeadModel"),CTt.forEach(t),cbr=r(DSe," (XLM model)"),DSe.forEach(t),mbr=i(me),VE=n(me,"LI",{});var GSe=s(VE);Jve=n(GSe,"STRONG",{});var wTt=s(Jve);fbr=r(wTt,"xlm-roberta"),wTt.forEach(t),gbr=r(GSe," \u2014 "),kQ=n(GSe,"A",{href:!0});var ATt=s(kQ);hbr=r(ATt,"TFXLMRobertaForMaskedLM"),ATt.forEach(t),ubr=r(GSe," (XLM-RoBERTa model)"),GSe.forEach(t),me.forEach(t),pbr=i(Tl),T(XE.$$.fragment,Tl),Tl.forEach(t),Fl.forEach(t),Xqe=i(m),oc=n(m,"H2",{class:!0});var Jje=s(oc);zE=n(Jje,"A",{id:!0,class:!0,href:!0});var yTt=s(zE);Yve=n(yTt,"SPAN",{});var LTt=s(Yve);T(hx.$$.fragment,LTt),LTt.forEach(t),yTt.forEach(t),_br=i(Jje),Kve=n(Jje,"SPAN",{});var xTt=s(Kve);bbr=r(xTt,"TFAutoModelForSeq2SeqLM"),xTt.forEach(t),Jje.forEach(t),zqe=i(m),rr=n(m,"DIV",{class:!0});var Ml=s(rr);T(ux.$$.fragment,Ml),vbr=i(Ml),rc=n(Ml,"P",{});var SZ=s(rc);Fbr=r(SZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),SQ=n(SZ,"A",{href:!0});var $Tt=s(SQ);Tbr=r($Tt,"from_pretrained()"),$Tt.forEach(t),Mbr=r(SZ," class method or the "),RQ=n(SZ,"A",{href:!0});var kTt=s(RQ);Ebr=r(kTt,"from_config()"),kTt.forEach(t),Cbr=r(SZ,` class
method.`),SZ.forEach(t),wbr=i(Ml),px=n(Ml,"P",{});var Yje=s(px);Abr=r(Yje,"This class cannot be instantiated directly using "),Zve=n(Yje,"CODE",{});var STt=s(Zve);ybr=r(STt,"__init__()"),STt.forEach(t),Lbr=r(Yje," (throws an error)."),Yje.forEach(t),xbr=i(Ml),St=n(Ml,"DIV",{class:!0});var p0=s(St);T(_x.$$.fragment,p0),$br=i(p0),eFe=n(p0,"P",{});var RTt=s(eFe);kbr=r(RTt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),RTt.forEach(t),Sbr=i(p0),tc=n(p0,"P",{});var RZ=s(tc);Rbr=r(RZ,`Note:
Loading a model from its configuration file does `),oFe=n(RZ,"STRONG",{});var PTt=s(oFe);Pbr=r(PTt,"not"),PTt.forEach(t),Bbr=r(RZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),PQ=n(RZ,"A",{href:!0});var BTt=s(PQ);Ibr=r(BTt,"from_pretrained()"),BTt.forEach(t),qbr=r(RZ," to load the model weights."),RZ.forEach(t),Nbr=i(p0),T(WE.$$.fragment,p0),p0.forEach(t),jbr=i(Ml),$r=n(Ml,"DIV",{class:!0});var El=s($r);T(bx.$$.fragment,El),Dbr=i(El),rFe=n(El,"P",{});var ITt=s(rFe);Gbr=r(ITt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),ITt.forEach(t),Obr=i(El),an=n(El,"P",{});var _0=s(an);Vbr=r(_0,"The model class to instantiate is selected based on the "),tFe=n(_0,"CODE",{});var qTt=s(tFe);Xbr=r(qTt,"model_type"),qTt.forEach(t),zbr=r(_0,` property of the config object (either
passed as an argument or loaded from `),aFe=n(_0,"CODE",{});var NTt=s(aFe);Wbr=r(NTt,"pretrained_model_name_or_path"),NTt.forEach(t),Qbr=r(_0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nFe=n(_0,"CODE",{});var jTt=s(nFe);Hbr=r(jTt,"pretrained_model_name_or_path"),jTt.forEach(t),Ubr=r(_0,":"),_0.forEach(t),Jbr=i(El),ye=n(El,"UL",{});var Be=s(ye);QE=n(Be,"LI",{});var OSe=s(QE);sFe=n(OSe,"STRONG",{});var DTt=s(sFe);Ybr=r(DTt,"bart"),DTt.forEach(t),Kbr=r(OSe," \u2014 "),BQ=n(OSe,"A",{href:!0});var GTt=s(BQ);Zbr=r(GTt,"TFBartForConditionalGeneration"),GTt.forEach(t),e2r=r(OSe," (BART model)"),OSe.forEach(t),o2r=i(Be),HE=n(Be,"LI",{});var VSe=s(HE);lFe=n(VSe,"STRONG",{});var OTt=s(lFe);r2r=r(OTt,"blenderbot"),OTt.forEach(t),t2r=r(VSe," \u2014 "),IQ=n(VSe,"A",{href:!0});var VTt=s(IQ);a2r=r(VTt,"TFBlenderbotForConditionalGeneration"),VTt.forEach(t),n2r=r(VSe," (Blenderbot model)"),VSe.forEach(t),s2r=i(Be),UE=n(Be,"LI",{});var XSe=s(UE);iFe=n(XSe,"STRONG",{});var XTt=s(iFe);l2r=r(XTt,"blenderbot-small"),XTt.forEach(t),i2r=r(XSe," \u2014 "),qQ=n(XSe,"A",{href:!0});var zTt=s(qQ);d2r=r(zTt,"TFBlenderbotSmallForConditionalGeneration"),zTt.forEach(t),c2r=r(XSe," (BlenderbotSmall model)"),XSe.forEach(t),m2r=i(Be),JE=n(Be,"LI",{});var zSe=s(JE);dFe=n(zSe,"STRONG",{});var WTt=s(dFe);f2r=r(WTt,"encoder-decoder"),WTt.forEach(t),g2r=r(zSe," \u2014 "),NQ=n(zSe,"A",{href:!0});var QTt=s(NQ);h2r=r(QTt,"TFEncoderDecoderModel"),QTt.forEach(t),u2r=r(zSe," (Encoder decoder model)"),zSe.forEach(t),p2r=i(Be),YE=n(Be,"LI",{});var WSe=s(YE);cFe=n(WSe,"STRONG",{});var HTt=s(cFe);_2r=r(HTt,"led"),HTt.forEach(t),b2r=r(WSe," \u2014 "),jQ=n(WSe,"A",{href:!0});var UTt=s(jQ);v2r=r(UTt,"TFLEDForConditionalGeneration"),UTt.forEach(t),F2r=r(WSe," (LED model)"),WSe.forEach(t),T2r=i(Be),KE=n(Be,"LI",{});var QSe=s(KE);mFe=n(QSe,"STRONG",{});var JTt=s(mFe);M2r=r(JTt,"marian"),JTt.forEach(t),E2r=r(QSe," \u2014 "),DQ=n(QSe,"A",{href:!0});var YTt=s(DQ);C2r=r(YTt,"TFMarianMTModel"),YTt.forEach(t),w2r=r(QSe," (Marian model)"),QSe.forEach(t),A2r=i(Be),ZE=n(Be,"LI",{});var HSe=s(ZE);fFe=n(HSe,"STRONG",{});var KTt=s(fFe);y2r=r(KTt,"mbart"),KTt.forEach(t),L2r=r(HSe," \u2014 "),GQ=n(HSe,"A",{href:!0});var ZTt=s(GQ);x2r=r(ZTt,"TFMBartForConditionalGeneration"),ZTt.forEach(t),$2r=r(HSe," (mBART model)"),HSe.forEach(t),k2r=i(Be),eC=n(Be,"LI",{});var USe=s(eC);gFe=n(USe,"STRONG",{});var eMt=s(gFe);S2r=r(eMt,"mt5"),eMt.forEach(t),R2r=r(USe," \u2014 "),OQ=n(USe,"A",{href:!0});var oMt=s(OQ);P2r=r(oMt,"TFMT5ForConditionalGeneration"),oMt.forEach(t),B2r=r(USe," (mT5 model)"),USe.forEach(t),I2r=i(Be),oC=n(Be,"LI",{});var JSe=s(oC);hFe=n(JSe,"STRONG",{});var rMt=s(hFe);q2r=r(rMt,"pegasus"),rMt.forEach(t),N2r=r(JSe," \u2014 "),VQ=n(JSe,"A",{href:!0});var tMt=s(VQ);j2r=r(tMt,"TFPegasusForConditionalGeneration"),tMt.forEach(t),D2r=r(JSe," (Pegasus model)"),JSe.forEach(t),G2r=i(Be),rC=n(Be,"LI",{});var YSe=s(rC);uFe=n(YSe,"STRONG",{});var aMt=s(uFe);O2r=r(aMt,"t5"),aMt.forEach(t),V2r=r(YSe," \u2014 "),XQ=n(YSe,"A",{href:!0});var nMt=s(XQ);X2r=r(nMt,"TFT5ForConditionalGeneration"),nMt.forEach(t),z2r=r(YSe," (T5 model)"),YSe.forEach(t),Be.forEach(t),W2r=i(El),T(tC.$$.fragment,El),El.forEach(t),Ml.forEach(t),Wqe=i(m),ac=n(m,"H2",{class:!0});var Kje=s(ac);aC=n(Kje,"A",{id:!0,class:!0,href:!0});var sMt=s(aC);pFe=n(sMt,"SPAN",{});var lMt=s(pFe);T(vx.$$.fragment,lMt),lMt.forEach(t),sMt.forEach(t),Q2r=i(Kje),_Fe=n(Kje,"SPAN",{});var iMt=s(_Fe);H2r=r(iMt,"TFAutoModelForSequenceClassification"),iMt.forEach(t),Kje.forEach(t),Qqe=i(m),tr=n(m,"DIV",{class:!0});var Cl=s(tr);T(Fx.$$.fragment,Cl),U2r=i(Cl),nc=n(Cl,"P",{});var PZ=s(nc);J2r=r(PZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),zQ=n(PZ,"A",{href:!0});var dMt=s(zQ);Y2r=r(dMt,"from_pretrained()"),dMt.forEach(t),K2r=r(PZ," class method or the "),WQ=n(PZ,"A",{href:!0});var cMt=s(WQ);Z2r=r(cMt,"from_config()"),cMt.forEach(t),evr=r(PZ,` class
method.`),PZ.forEach(t),ovr=i(Cl),Tx=n(Cl,"P",{});var Zje=s(Tx);rvr=r(Zje,"This class cannot be instantiated directly using "),bFe=n(Zje,"CODE",{});var mMt=s(bFe);tvr=r(mMt,"__init__()"),mMt.forEach(t),avr=r(Zje," (throws an error)."),Zje.forEach(t),nvr=i(Cl),Rt=n(Cl,"DIV",{class:!0});var b0=s(Rt);T(Mx.$$.fragment,b0),svr=i(b0),vFe=n(b0,"P",{});var fMt=s(vFe);lvr=r(fMt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),fMt.forEach(t),ivr=i(b0),sc=n(b0,"P",{});var BZ=s(sc);dvr=r(BZ,`Note:
Loading a model from its configuration file does `),FFe=n(BZ,"STRONG",{});var gMt=s(FFe);cvr=r(gMt,"not"),gMt.forEach(t),mvr=r(BZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),QQ=n(BZ,"A",{href:!0});var hMt=s(QQ);fvr=r(hMt,"from_pretrained()"),hMt.forEach(t),gvr=r(BZ," to load the model weights."),BZ.forEach(t),hvr=i(b0),T(nC.$$.fragment,b0),b0.forEach(t),uvr=i(Cl),kr=n(Cl,"DIV",{class:!0});var wl=s(kr);T(Ex.$$.fragment,wl),pvr=i(wl),TFe=n(wl,"P",{});var uMt=s(TFe);_vr=r(uMt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),uMt.forEach(t),bvr=i(wl),nn=n(wl,"P",{});var v0=s(nn);vvr=r(v0,"The model class to instantiate is selected based on the "),MFe=n(v0,"CODE",{});var pMt=s(MFe);Fvr=r(pMt,"model_type"),pMt.forEach(t),Tvr=r(v0,` property of the config object (either
passed as an argument or loaded from `),EFe=n(v0,"CODE",{});var _Mt=s(EFe);Mvr=r(_Mt,"pretrained_model_name_or_path"),_Mt.forEach(t),Evr=r(v0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),CFe=n(v0,"CODE",{});var bMt=s(CFe);Cvr=r(bMt,"pretrained_model_name_or_path"),bMt.forEach(t),wvr=r(v0,":"),v0.forEach(t),Avr=i(wl),ee=n(wl,"UL",{});var ae=s(ee);sC=n(ae,"LI",{});var KSe=s(sC);wFe=n(KSe,"STRONG",{});var vMt=s(wFe);yvr=r(vMt,"albert"),vMt.forEach(t),Lvr=r(KSe," \u2014 "),HQ=n(KSe,"A",{href:!0});var FMt=s(HQ);xvr=r(FMt,"TFAlbertForSequenceClassification"),FMt.forEach(t),$vr=r(KSe," (ALBERT model)"),KSe.forEach(t),kvr=i(ae),lC=n(ae,"LI",{});var ZSe=s(lC);AFe=n(ZSe,"STRONG",{});var TMt=s(AFe);Svr=r(TMt,"bert"),TMt.forEach(t),Rvr=r(ZSe," \u2014 "),UQ=n(ZSe,"A",{href:!0});var MMt=s(UQ);Pvr=r(MMt,"TFBertForSequenceClassification"),MMt.forEach(t),Bvr=r(ZSe," (BERT model)"),ZSe.forEach(t),Ivr=i(ae),iC=n(ae,"LI",{});var eRe=s(iC);yFe=n(eRe,"STRONG",{});var EMt=s(yFe);qvr=r(EMt,"camembert"),EMt.forEach(t),Nvr=r(eRe," \u2014 "),JQ=n(eRe,"A",{href:!0});var CMt=s(JQ);jvr=r(CMt,"TFCamembertForSequenceClassification"),CMt.forEach(t),Dvr=r(eRe," (CamemBERT model)"),eRe.forEach(t),Gvr=i(ae),dC=n(ae,"LI",{});var oRe=s(dC);LFe=n(oRe,"STRONG",{});var wMt=s(LFe);Ovr=r(wMt,"convbert"),wMt.forEach(t),Vvr=r(oRe," \u2014 "),YQ=n(oRe,"A",{href:!0});var AMt=s(YQ);Xvr=r(AMt,"TFConvBertForSequenceClassification"),AMt.forEach(t),zvr=r(oRe," (ConvBERT model)"),oRe.forEach(t),Wvr=i(ae),cC=n(ae,"LI",{});var rRe=s(cC);xFe=n(rRe,"STRONG",{});var yMt=s(xFe);Qvr=r(yMt,"ctrl"),yMt.forEach(t),Hvr=r(rRe," \u2014 "),KQ=n(rRe,"A",{href:!0});var LMt=s(KQ);Uvr=r(LMt,"TFCTRLForSequenceClassification"),LMt.forEach(t),Jvr=r(rRe," (CTRL model)"),rRe.forEach(t),Yvr=i(ae),mC=n(ae,"LI",{});var tRe=s(mC);$Fe=n(tRe,"STRONG",{});var xMt=s($Fe);Kvr=r(xMt,"deberta"),xMt.forEach(t),Zvr=r(tRe," \u2014 "),ZQ=n(tRe,"A",{href:!0});var $Mt=s(ZQ);eFr=r($Mt,"TFDebertaForSequenceClassification"),$Mt.forEach(t),oFr=r(tRe," (DeBERTa model)"),tRe.forEach(t),rFr=i(ae),fC=n(ae,"LI",{});var aRe=s(fC);kFe=n(aRe,"STRONG",{});var kMt=s(kFe);tFr=r(kMt,"deberta-v2"),kMt.forEach(t),aFr=r(aRe," \u2014 "),eH=n(aRe,"A",{href:!0});var SMt=s(eH);nFr=r(SMt,"TFDebertaV2ForSequenceClassification"),SMt.forEach(t),sFr=r(aRe," (DeBERTa-v2 model)"),aRe.forEach(t),lFr=i(ae),gC=n(ae,"LI",{});var nRe=s(gC);SFe=n(nRe,"STRONG",{});var RMt=s(SFe);iFr=r(RMt,"distilbert"),RMt.forEach(t),dFr=r(nRe," \u2014 "),oH=n(nRe,"A",{href:!0});var PMt=s(oH);cFr=r(PMt,"TFDistilBertForSequenceClassification"),PMt.forEach(t),mFr=r(nRe," (DistilBERT model)"),nRe.forEach(t),fFr=i(ae),hC=n(ae,"LI",{});var sRe=s(hC);RFe=n(sRe,"STRONG",{});var BMt=s(RFe);gFr=r(BMt,"electra"),BMt.forEach(t),hFr=r(sRe," \u2014 "),rH=n(sRe,"A",{href:!0});var IMt=s(rH);uFr=r(IMt,"TFElectraForSequenceClassification"),IMt.forEach(t),pFr=r(sRe," (ELECTRA model)"),sRe.forEach(t),_Fr=i(ae),uC=n(ae,"LI",{});var lRe=s(uC);PFe=n(lRe,"STRONG",{});var qMt=s(PFe);bFr=r(qMt,"flaubert"),qMt.forEach(t),vFr=r(lRe," \u2014 "),tH=n(lRe,"A",{href:!0});var NMt=s(tH);FFr=r(NMt,"TFFlaubertForSequenceClassification"),NMt.forEach(t),TFr=r(lRe," (FlauBERT model)"),lRe.forEach(t),MFr=i(ae),pC=n(ae,"LI",{});var iRe=s(pC);BFe=n(iRe,"STRONG",{});var jMt=s(BFe);EFr=r(jMt,"funnel"),jMt.forEach(t),CFr=r(iRe," \u2014 "),aH=n(iRe,"A",{href:!0});var DMt=s(aH);wFr=r(DMt,"TFFunnelForSequenceClassification"),DMt.forEach(t),AFr=r(iRe," (Funnel Transformer model)"),iRe.forEach(t),yFr=i(ae),_C=n(ae,"LI",{});var dRe=s(_C);IFe=n(dRe,"STRONG",{});var GMt=s(IFe);LFr=r(GMt,"gpt2"),GMt.forEach(t),xFr=r(dRe," \u2014 "),nH=n(dRe,"A",{href:!0});var OMt=s(nH);$Fr=r(OMt,"TFGPT2ForSequenceClassification"),OMt.forEach(t),kFr=r(dRe," (OpenAI GPT-2 model)"),dRe.forEach(t),SFr=i(ae),bC=n(ae,"LI",{});var cRe=s(bC);qFe=n(cRe,"STRONG",{});var VMt=s(qFe);RFr=r(VMt,"gptj"),VMt.forEach(t),PFr=r(cRe," \u2014 "),sH=n(cRe,"A",{href:!0});var XMt=s(sH);BFr=r(XMt,"TFGPTJForSequenceClassification"),XMt.forEach(t),IFr=r(cRe," (GPT-J model)"),cRe.forEach(t),qFr=i(ae),vC=n(ae,"LI",{});var mRe=s(vC);NFe=n(mRe,"STRONG",{});var zMt=s(NFe);NFr=r(zMt,"layoutlm"),zMt.forEach(t),jFr=r(mRe," \u2014 "),lH=n(mRe,"A",{href:!0});var WMt=s(lH);DFr=r(WMt,"TFLayoutLMForSequenceClassification"),WMt.forEach(t),GFr=r(mRe," (LayoutLM model)"),mRe.forEach(t),OFr=i(ae),FC=n(ae,"LI",{});var fRe=s(FC);jFe=n(fRe,"STRONG",{});var QMt=s(jFe);VFr=r(QMt,"longformer"),QMt.forEach(t),XFr=r(fRe," \u2014 "),iH=n(fRe,"A",{href:!0});var HMt=s(iH);zFr=r(HMt,"TFLongformerForSequenceClassification"),HMt.forEach(t),WFr=r(fRe," (Longformer model)"),fRe.forEach(t),QFr=i(ae),TC=n(ae,"LI",{});var gRe=s(TC);DFe=n(gRe,"STRONG",{});var UMt=s(DFe);HFr=r(UMt,"mobilebert"),UMt.forEach(t),UFr=r(gRe," \u2014 "),dH=n(gRe,"A",{href:!0});var JMt=s(dH);JFr=r(JMt,"TFMobileBertForSequenceClassification"),JMt.forEach(t),YFr=r(gRe," (MobileBERT model)"),gRe.forEach(t),KFr=i(ae),MC=n(ae,"LI",{});var hRe=s(MC);GFe=n(hRe,"STRONG",{});var YMt=s(GFe);ZFr=r(YMt,"mpnet"),YMt.forEach(t),e1r=r(hRe," \u2014 "),cH=n(hRe,"A",{href:!0});var KMt=s(cH);o1r=r(KMt,"TFMPNetForSequenceClassification"),KMt.forEach(t),r1r=r(hRe," (MPNet model)"),hRe.forEach(t),t1r=i(ae),EC=n(ae,"LI",{});var uRe=s(EC);OFe=n(uRe,"STRONG",{});var ZMt=s(OFe);a1r=r(ZMt,"openai-gpt"),ZMt.forEach(t),n1r=r(uRe," \u2014 "),mH=n(uRe,"A",{href:!0});var e4t=s(mH);s1r=r(e4t,"TFOpenAIGPTForSequenceClassification"),e4t.forEach(t),l1r=r(uRe," (OpenAI GPT model)"),uRe.forEach(t),i1r=i(ae),CC=n(ae,"LI",{});var pRe=s(CC);VFe=n(pRe,"STRONG",{});var o4t=s(VFe);d1r=r(o4t,"rembert"),o4t.forEach(t),c1r=r(pRe," \u2014 "),fH=n(pRe,"A",{href:!0});var r4t=s(fH);m1r=r(r4t,"TFRemBertForSequenceClassification"),r4t.forEach(t),f1r=r(pRe," (RemBERT model)"),pRe.forEach(t),g1r=i(ae),wC=n(ae,"LI",{});var _Re=s(wC);XFe=n(_Re,"STRONG",{});var t4t=s(XFe);h1r=r(t4t,"roberta"),t4t.forEach(t),u1r=r(_Re," \u2014 "),gH=n(_Re,"A",{href:!0});var a4t=s(gH);p1r=r(a4t,"TFRobertaForSequenceClassification"),a4t.forEach(t),_1r=r(_Re," (RoBERTa model)"),_Re.forEach(t),b1r=i(ae),AC=n(ae,"LI",{});var bRe=s(AC);zFe=n(bRe,"STRONG",{});var n4t=s(zFe);v1r=r(n4t,"roformer"),n4t.forEach(t),F1r=r(bRe," \u2014 "),hH=n(bRe,"A",{href:!0});var s4t=s(hH);T1r=r(s4t,"TFRoFormerForSequenceClassification"),s4t.forEach(t),M1r=r(bRe," (RoFormer model)"),bRe.forEach(t),E1r=i(ae),yC=n(ae,"LI",{});var vRe=s(yC);WFe=n(vRe,"STRONG",{});var l4t=s(WFe);C1r=r(l4t,"tapas"),l4t.forEach(t),w1r=r(vRe," \u2014 "),uH=n(vRe,"A",{href:!0});var i4t=s(uH);A1r=r(i4t,"TFTapasForSequenceClassification"),i4t.forEach(t),y1r=r(vRe," (TAPAS model)"),vRe.forEach(t),L1r=i(ae),LC=n(ae,"LI",{});var FRe=s(LC);QFe=n(FRe,"STRONG",{});var d4t=s(QFe);x1r=r(d4t,"transfo-xl"),d4t.forEach(t),$1r=r(FRe," \u2014 "),pH=n(FRe,"A",{href:!0});var c4t=s(pH);k1r=r(c4t,"TFTransfoXLForSequenceClassification"),c4t.forEach(t),S1r=r(FRe," (Transformer-XL model)"),FRe.forEach(t),R1r=i(ae),xC=n(ae,"LI",{});var TRe=s(xC);HFe=n(TRe,"STRONG",{});var m4t=s(HFe);P1r=r(m4t,"xlm"),m4t.forEach(t),B1r=r(TRe," \u2014 "),_H=n(TRe,"A",{href:!0});var f4t=s(_H);I1r=r(f4t,"TFXLMForSequenceClassification"),f4t.forEach(t),q1r=r(TRe," (XLM model)"),TRe.forEach(t),N1r=i(ae),$C=n(ae,"LI",{});var MRe=s($C);UFe=n(MRe,"STRONG",{});var g4t=s(UFe);j1r=r(g4t,"xlm-roberta"),g4t.forEach(t),D1r=r(MRe," \u2014 "),bH=n(MRe,"A",{href:!0});var h4t=s(bH);G1r=r(h4t,"TFXLMRobertaForSequenceClassification"),h4t.forEach(t),O1r=r(MRe," (XLM-RoBERTa model)"),MRe.forEach(t),V1r=i(ae),kC=n(ae,"LI",{});var ERe=s(kC);JFe=n(ERe,"STRONG",{});var u4t=s(JFe);X1r=r(u4t,"xlnet"),u4t.forEach(t),z1r=r(ERe," \u2014 "),vH=n(ERe,"A",{href:!0});var p4t=s(vH);W1r=r(p4t,"TFXLNetForSequenceClassification"),p4t.forEach(t),Q1r=r(ERe," (XLNet model)"),ERe.forEach(t),ae.forEach(t),H1r=i(wl),T(SC.$$.fragment,wl),wl.forEach(t),Cl.forEach(t),Hqe=i(m),lc=n(m,"H2",{class:!0});var eDe=s(lc);RC=n(eDe,"A",{id:!0,class:!0,href:!0});var _4t=s(RC);YFe=n(_4t,"SPAN",{});var b4t=s(YFe);T(Cx.$$.fragment,b4t),b4t.forEach(t),_4t.forEach(t),U1r=i(eDe),KFe=n(eDe,"SPAN",{});var v4t=s(KFe);J1r=r(v4t,"TFAutoModelForMultipleChoice"),v4t.forEach(t),eDe.forEach(t),Uqe=i(m),ar=n(m,"DIV",{class:!0});var Al=s(ar);T(wx.$$.fragment,Al),Y1r=i(Al),ic=n(Al,"P",{});var IZ=s(ic);K1r=r(IZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),FH=n(IZ,"A",{href:!0});var F4t=s(FH);Z1r=r(F4t,"from_pretrained()"),F4t.forEach(t),eTr=r(IZ," class method or the "),TH=n(IZ,"A",{href:!0});var T4t=s(TH);oTr=r(T4t,"from_config()"),T4t.forEach(t),rTr=r(IZ,` class
method.`),IZ.forEach(t),tTr=i(Al),Ax=n(Al,"P",{});var oDe=s(Ax);aTr=r(oDe,"This class cannot be instantiated directly using "),ZFe=n(oDe,"CODE",{});var M4t=s(ZFe);nTr=r(M4t,"__init__()"),M4t.forEach(t),sTr=r(oDe," (throws an error)."),oDe.forEach(t),lTr=i(Al),Pt=n(Al,"DIV",{class:!0});var F0=s(Pt);T(yx.$$.fragment,F0),iTr=i(F0),e1e=n(F0,"P",{});var E4t=s(e1e);dTr=r(E4t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),E4t.forEach(t),cTr=i(F0),dc=n(F0,"P",{});var qZ=s(dc);mTr=r(qZ,`Note:
Loading a model from its configuration file does `),o1e=n(qZ,"STRONG",{});var C4t=s(o1e);fTr=r(C4t,"not"),C4t.forEach(t),gTr=r(qZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),MH=n(qZ,"A",{href:!0});var w4t=s(MH);hTr=r(w4t,"from_pretrained()"),w4t.forEach(t),uTr=r(qZ," to load the model weights."),qZ.forEach(t),pTr=i(F0),T(PC.$$.fragment,F0),F0.forEach(t),_Tr=i(Al),Sr=n(Al,"DIV",{class:!0});var yl=s(Sr);T(Lx.$$.fragment,yl),bTr=i(yl),r1e=n(yl,"P",{});var A4t=s(r1e);vTr=r(A4t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),A4t.forEach(t),FTr=i(yl),sn=n(yl,"P",{});var T0=s(sn);TTr=r(T0,"The model class to instantiate is selected based on the "),t1e=n(T0,"CODE",{});var y4t=s(t1e);MTr=r(y4t,"model_type"),y4t.forEach(t),ETr=r(T0,` property of the config object (either
passed as an argument or loaded from `),a1e=n(T0,"CODE",{});var L4t=s(a1e);CTr=r(L4t,"pretrained_model_name_or_path"),L4t.forEach(t),wTr=r(T0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n1e=n(T0,"CODE",{});var x4t=s(n1e);ATr=r(x4t,"pretrained_model_name_or_path"),x4t.forEach(t),yTr=r(T0,":"),T0.forEach(t),LTr=i(yl),he=n(yl,"UL",{});var _e=s(he);BC=n(_e,"LI",{});var CRe=s(BC);s1e=n(CRe,"STRONG",{});var $4t=s(s1e);xTr=r($4t,"albert"),$4t.forEach(t),$Tr=r(CRe," \u2014 "),EH=n(CRe,"A",{href:!0});var k4t=s(EH);kTr=r(k4t,"TFAlbertForMultipleChoice"),k4t.forEach(t),STr=r(CRe," (ALBERT model)"),CRe.forEach(t),RTr=i(_e),IC=n(_e,"LI",{});var wRe=s(IC);l1e=n(wRe,"STRONG",{});var S4t=s(l1e);PTr=r(S4t,"bert"),S4t.forEach(t),BTr=r(wRe," \u2014 "),CH=n(wRe,"A",{href:!0});var R4t=s(CH);ITr=r(R4t,"TFBertForMultipleChoice"),R4t.forEach(t),qTr=r(wRe," (BERT model)"),wRe.forEach(t),NTr=i(_e),qC=n(_e,"LI",{});var ARe=s(qC);i1e=n(ARe,"STRONG",{});var P4t=s(i1e);jTr=r(P4t,"camembert"),P4t.forEach(t),DTr=r(ARe," \u2014 "),wH=n(ARe,"A",{href:!0});var B4t=s(wH);GTr=r(B4t,"TFCamembertForMultipleChoice"),B4t.forEach(t),OTr=r(ARe," (CamemBERT model)"),ARe.forEach(t),VTr=i(_e),NC=n(_e,"LI",{});var yRe=s(NC);d1e=n(yRe,"STRONG",{});var I4t=s(d1e);XTr=r(I4t,"convbert"),I4t.forEach(t),zTr=r(yRe," \u2014 "),AH=n(yRe,"A",{href:!0});var q4t=s(AH);WTr=r(q4t,"TFConvBertForMultipleChoice"),q4t.forEach(t),QTr=r(yRe," (ConvBERT model)"),yRe.forEach(t),HTr=i(_e),jC=n(_e,"LI",{});var LRe=s(jC);c1e=n(LRe,"STRONG",{});var N4t=s(c1e);UTr=r(N4t,"distilbert"),N4t.forEach(t),JTr=r(LRe," \u2014 "),yH=n(LRe,"A",{href:!0});var j4t=s(yH);YTr=r(j4t,"TFDistilBertForMultipleChoice"),j4t.forEach(t),KTr=r(LRe," (DistilBERT model)"),LRe.forEach(t),ZTr=i(_e),DC=n(_e,"LI",{});var xRe=s(DC);m1e=n(xRe,"STRONG",{});var D4t=s(m1e);eMr=r(D4t,"electra"),D4t.forEach(t),oMr=r(xRe," \u2014 "),LH=n(xRe,"A",{href:!0});var G4t=s(LH);rMr=r(G4t,"TFElectraForMultipleChoice"),G4t.forEach(t),tMr=r(xRe," (ELECTRA model)"),xRe.forEach(t),aMr=i(_e),GC=n(_e,"LI",{});var $Re=s(GC);f1e=n($Re,"STRONG",{});var O4t=s(f1e);nMr=r(O4t,"flaubert"),O4t.forEach(t),sMr=r($Re," \u2014 "),xH=n($Re,"A",{href:!0});var V4t=s(xH);lMr=r(V4t,"TFFlaubertForMultipleChoice"),V4t.forEach(t),iMr=r($Re," (FlauBERT model)"),$Re.forEach(t),dMr=i(_e),OC=n(_e,"LI",{});var kRe=s(OC);g1e=n(kRe,"STRONG",{});var X4t=s(g1e);cMr=r(X4t,"funnel"),X4t.forEach(t),mMr=r(kRe," \u2014 "),$H=n(kRe,"A",{href:!0});var z4t=s($H);fMr=r(z4t,"TFFunnelForMultipleChoice"),z4t.forEach(t),gMr=r(kRe," (Funnel Transformer model)"),kRe.forEach(t),hMr=i(_e),VC=n(_e,"LI",{});var SRe=s(VC);h1e=n(SRe,"STRONG",{});var W4t=s(h1e);uMr=r(W4t,"longformer"),W4t.forEach(t),pMr=r(SRe," \u2014 "),kH=n(SRe,"A",{href:!0});var Q4t=s(kH);_Mr=r(Q4t,"TFLongformerForMultipleChoice"),Q4t.forEach(t),bMr=r(SRe," (Longformer model)"),SRe.forEach(t),vMr=i(_e),XC=n(_e,"LI",{});var RRe=s(XC);u1e=n(RRe,"STRONG",{});var H4t=s(u1e);FMr=r(H4t,"mobilebert"),H4t.forEach(t),TMr=r(RRe," \u2014 "),SH=n(RRe,"A",{href:!0});var U4t=s(SH);MMr=r(U4t,"TFMobileBertForMultipleChoice"),U4t.forEach(t),EMr=r(RRe," (MobileBERT model)"),RRe.forEach(t),CMr=i(_e),zC=n(_e,"LI",{});var PRe=s(zC);p1e=n(PRe,"STRONG",{});var J4t=s(p1e);wMr=r(J4t,"mpnet"),J4t.forEach(t),AMr=r(PRe," \u2014 "),RH=n(PRe,"A",{href:!0});var Y4t=s(RH);yMr=r(Y4t,"TFMPNetForMultipleChoice"),Y4t.forEach(t),LMr=r(PRe," (MPNet model)"),PRe.forEach(t),xMr=i(_e),WC=n(_e,"LI",{});var BRe=s(WC);_1e=n(BRe,"STRONG",{});var K4t=s(_1e);$Mr=r(K4t,"rembert"),K4t.forEach(t),kMr=r(BRe," \u2014 "),PH=n(BRe,"A",{href:!0});var Z4t=s(PH);SMr=r(Z4t,"TFRemBertForMultipleChoice"),Z4t.forEach(t),RMr=r(BRe," (RemBERT model)"),BRe.forEach(t),PMr=i(_e),QC=n(_e,"LI",{});var IRe=s(QC);b1e=n(IRe,"STRONG",{});var eEt=s(b1e);BMr=r(eEt,"roberta"),eEt.forEach(t),IMr=r(IRe," \u2014 "),BH=n(IRe,"A",{href:!0});var oEt=s(BH);qMr=r(oEt,"TFRobertaForMultipleChoice"),oEt.forEach(t),NMr=r(IRe," (RoBERTa model)"),IRe.forEach(t),jMr=i(_e),HC=n(_e,"LI",{});var qRe=s(HC);v1e=n(qRe,"STRONG",{});var rEt=s(v1e);DMr=r(rEt,"roformer"),rEt.forEach(t),GMr=r(qRe," \u2014 "),IH=n(qRe,"A",{href:!0});var tEt=s(IH);OMr=r(tEt,"TFRoFormerForMultipleChoice"),tEt.forEach(t),VMr=r(qRe," (RoFormer model)"),qRe.forEach(t),XMr=i(_e),UC=n(_e,"LI",{});var NRe=s(UC);F1e=n(NRe,"STRONG",{});var aEt=s(F1e);zMr=r(aEt,"xlm"),aEt.forEach(t),WMr=r(NRe," \u2014 "),qH=n(NRe,"A",{href:!0});var nEt=s(qH);QMr=r(nEt,"TFXLMForMultipleChoice"),nEt.forEach(t),HMr=r(NRe," (XLM model)"),NRe.forEach(t),UMr=i(_e),JC=n(_e,"LI",{});var jRe=s(JC);T1e=n(jRe,"STRONG",{});var sEt=s(T1e);JMr=r(sEt,"xlm-roberta"),sEt.forEach(t),YMr=r(jRe," \u2014 "),NH=n(jRe,"A",{href:!0});var lEt=s(NH);KMr=r(lEt,"TFXLMRobertaForMultipleChoice"),lEt.forEach(t),ZMr=r(jRe," (XLM-RoBERTa model)"),jRe.forEach(t),e4r=i(_e),YC=n(_e,"LI",{});var DRe=s(YC);M1e=n(DRe,"STRONG",{});var iEt=s(M1e);o4r=r(iEt,"xlnet"),iEt.forEach(t),r4r=r(DRe," \u2014 "),jH=n(DRe,"A",{href:!0});var dEt=s(jH);t4r=r(dEt,"TFXLNetForMultipleChoice"),dEt.forEach(t),a4r=r(DRe," (XLNet model)"),DRe.forEach(t),_e.forEach(t),n4r=i(yl),T(KC.$$.fragment,yl),yl.forEach(t),Al.forEach(t),Jqe=i(m),cc=n(m,"H2",{class:!0});var rDe=s(cc);ZC=n(rDe,"A",{id:!0,class:!0,href:!0});var cEt=s(ZC);E1e=n(cEt,"SPAN",{});var mEt=s(E1e);T(xx.$$.fragment,mEt),mEt.forEach(t),cEt.forEach(t),s4r=i(rDe),C1e=n(rDe,"SPAN",{});var fEt=s(C1e);l4r=r(fEt,"TFAutoModelForNextSentencePrediction"),fEt.forEach(t),rDe.forEach(t),Yqe=i(m),nr=n(m,"DIV",{class:!0});var Ll=s(nr);T($x.$$.fragment,Ll),i4r=i(Ll),mc=n(Ll,"P",{});var NZ=s(mc);d4r=r(NZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),DH=n(NZ,"A",{href:!0});var gEt=s(DH);c4r=r(gEt,"from_pretrained()"),gEt.forEach(t),m4r=r(NZ," class method or the "),GH=n(NZ,"A",{href:!0});var hEt=s(GH);f4r=r(hEt,"from_config()"),hEt.forEach(t),g4r=r(NZ,` class
method.`),NZ.forEach(t),h4r=i(Ll),kx=n(Ll,"P",{});var tDe=s(kx);u4r=r(tDe,"This class cannot be instantiated directly using "),w1e=n(tDe,"CODE",{});var uEt=s(w1e);p4r=r(uEt,"__init__()"),uEt.forEach(t),_4r=r(tDe," (throws an error)."),tDe.forEach(t),b4r=i(Ll),Bt=n(Ll,"DIV",{class:!0});var M0=s(Bt);T(Sx.$$.fragment,M0),v4r=i(M0),A1e=n(M0,"P",{});var pEt=s(A1e);F4r=r(pEt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),pEt.forEach(t),T4r=i(M0),fc=n(M0,"P",{});var jZ=s(fc);M4r=r(jZ,`Note:
Loading a model from its configuration file does `),y1e=n(jZ,"STRONG",{});var _Et=s(y1e);E4r=r(_Et,"not"),_Et.forEach(t),C4r=r(jZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),OH=n(jZ,"A",{href:!0});var bEt=s(OH);w4r=r(bEt,"from_pretrained()"),bEt.forEach(t),A4r=r(jZ," to load the model weights."),jZ.forEach(t),y4r=i(M0),T(e5.$$.fragment,M0),M0.forEach(t),L4r=i(Ll),Rr=n(Ll,"DIV",{class:!0});var xl=s(Rr);T(Rx.$$.fragment,xl),x4r=i(xl),L1e=n(xl,"P",{});var vEt=s(L1e);$4r=r(vEt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),vEt.forEach(t),k4r=i(xl),ln=n(xl,"P",{});var E0=s(ln);S4r=r(E0,"The model class to instantiate is selected based on the "),x1e=n(E0,"CODE",{});var FEt=s(x1e);R4r=r(FEt,"model_type"),FEt.forEach(t),P4r=r(E0,` property of the config object (either
passed as an argument or loaded from `),$1e=n(E0,"CODE",{});var TEt=s($1e);B4r=r(TEt,"pretrained_model_name_or_path"),TEt.forEach(t),I4r=r(E0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),k1e=n(E0,"CODE",{});var MEt=s(k1e);q4r=r(MEt,"pretrained_model_name_or_path"),MEt.forEach(t),N4r=r(E0,":"),E0.forEach(t),j4r=i(xl),Px=n(xl,"UL",{});var aDe=s(Px);o5=n(aDe,"LI",{});var GRe=s(o5);S1e=n(GRe,"STRONG",{});var EEt=s(S1e);D4r=r(EEt,"bert"),EEt.forEach(t),G4r=r(GRe," \u2014 "),VH=n(GRe,"A",{href:!0});var CEt=s(VH);O4r=r(CEt,"TFBertForNextSentencePrediction"),CEt.forEach(t),V4r=r(GRe," (BERT model)"),GRe.forEach(t),X4r=i(aDe),r5=n(aDe,"LI",{});var ORe=s(r5);R1e=n(ORe,"STRONG",{});var wEt=s(R1e);z4r=r(wEt,"mobilebert"),wEt.forEach(t),W4r=r(ORe," \u2014 "),XH=n(ORe,"A",{href:!0});var AEt=s(XH);Q4r=r(AEt,"TFMobileBertForNextSentencePrediction"),AEt.forEach(t),H4r=r(ORe," (MobileBERT model)"),ORe.forEach(t),aDe.forEach(t),U4r=i(xl),T(t5.$$.fragment,xl),xl.forEach(t),Ll.forEach(t),Kqe=i(m),gc=n(m,"H2",{class:!0});var nDe=s(gc);a5=n(nDe,"A",{id:!0,class:!0,href:!0});var yEt=s(a5);P1e=n(yEt,"SPAN",{});var LEt=s(P1e);T(Bx.$$.fragment,LEt),LEt.forEach(t),yEt.forEach(t),J4r=i(nDe),B1e=n(nDe,"SPAN",{});var xEt=s(B1e);Y4r=r(xEt,"TFAutoModelForTableQuestionAnswering"),xEt.forEach(t),nDe.forEach(t),Zqe=i(m),sr=n(m,"DIV",{class:!0});var $l=s(sr);T(Ix.$$.fragment,$l),K4r=i($l),hc=n($l,"P",{});var DZ=s(hc);Z4r=r(DZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),zH=n(DZ,"A",{href:!0});var $Et=s(zH);eEr=r($Et,"from_pretrained()"),$Et.forEach(t),oEr=r(DZ," class method or the "),WH=n(DZ,"A",{href:!0});var kEt=s(WH);rEr=r(kEt,"from_config()"),kEt.forEach(t),tEr=r(DZ,` class
method.`),DZ.forEach(t),aEr=i($l),qx=n($l,"P",{});var sDe=s(qx);nEr=r(sDe,"This class cannot be instantiated directly using "),I1e=n(sDe,"CODE",{});var SEt=s(I1e);sEr=r(SEt,"__init__()"),SEt.forEach(t),lEr=r(sDe," (throws an error)."),sDe.forEach(t),iEr=i($l),It=n($l,"DIV",{class:!0});var C0=s(It);T(Nx.$$.fragment,C0),dEr=i(C0),q1e=n(C0,"P",{});var REt=s(q1e);cEr=r(REt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),REt.forEach(t),mEr=i(C0),uc=n(C0,"P",{});var GZ=s(uc);fEr=r(GZ,`Note:
Loading a model from its configuration file does `),N1e=n(GZ,"STRONG",{});var PEt=s(N1e);gEr=r(PEt,"not"),PEt.forEach(t),hEr=r(GZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),QH=n(GZ,"A",{href:!0});var BEt=s(QH);uEr=r(BEt,"from_pretrained()"),BEt.forEach(t),pEr=r(GZ," to load the model weights."),GZ.forEach(t),_Er=i(C0),T(n5.$$.fragment,C0),C0.forEach(t),bEr=i($l),Pr=n($l,"DIV",{class:!0});var kl=s(Pr);T(jx.$$.fragment,kl),vEr=i(kl),j1e=n(kl,"P",{});var IEt=s(j1e);FEr=r(IEt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),IEt.forEach(t),TEr=i(kl),dn=n(kl,"P",{});var w0=s(dn);MEr=r(w0,"The model class to instantiate is selected based on the "),D1e=n(w0,"CODE",{});var qEt=s(D1e);EEr=r(qEt,"model_type"),qEt.forEach(t),CEr=r(w0,` property of the config object (either
passed as an argument or loaded from `),G1e=n(w0,"CODE",{});var NEt=s(G1e);wEr=r(NEt,"pretrained_model_name_or_path"),NEt.forEach(t),AEr=r(w0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O1e=n(w0,"CODE",{});var jEt=s(O1e);yEr=r(jEt,"pretrained_model_name_or_path"),jEt.forEach(t),LEr=r(w0,":"),w0.forEach(t),xEr=i(kl),V1e=n(kl,"UL",{});var DEt=s(V1e);s5=n(DEt,"LI",{});var VRe=s(s5);X1e=n(VRe,"STRONG",{});var GEt=s(X1e);$Er=r(GEt,"tapas"),GEt.forEach(t),kEr=r(VRe," \u2014 "),HH=n(VRe,"A",{href:!0});var OEt=s(HH);SEr=r(OEt,"TFTapasForQuestionAnswering"),OEt.forEach(t),REr=r(VRe," (TAPAS model)"),VRe.forEach(t),DEt.forEach(t),PEr=i(kl),T(l5.$$.fragment,kl),kl.forEach(t),$l.forEach(t),eNe=i(m),pc=n(m,"H2",{class:!0});var lDe=s(pc);i5=n(lDe,"A",{id:!0,class:!0,href:!0});var VEt=s(i5);z1e=n(VEt,"SPAN",{});var XEt=s(z1e);T(Dx.$$.fragment,XEt),XEt.forEach(t),VEt.forEach(t),BEr=i(lDe),W1e=n(lDe,"SPAN",{});var zEt=s(W1e);IEr=r(zEt,"TFAutoModelForTokenClassification"),zEt.forEach(t),lDe.forEach(t),oNe=i(m),lr=n(m,"DIV",{class:!0});var Sl=s(lr);T(Gx.$$.fragment,Sl),qEr=i(Sl),_c=n(Sl,"P",{});var OZ=s(_c);NEr=r(OZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),UH=n(OZ,"A",{href:!0});var WEt=s(UH);jEr=r(WEt,"from_pretrained()"),WEt.forEach(t),DEr=r(OZ," class method or the "),JH=n(OZ,"A",{href:!0});var QEt=s(JH);GEr=r(QEt,"from_config()"),QEt.forEach(t),OEr=r(OZ,` class
method.`),OZ.forEach(t),VEr=i(Sl),Ox=n(Sl,"P",{});var iDe=s(Ox);XEr=r(iDe,"This class cannot be instantiated directly using "),Q1e=n(iDe,"CODE",{});var HEt=s(Q1e);zEr=r(HEt,"__init__()"),HEt.forEach(t),WEr=r(iDe," (throws an error)."),iDe.forEach(t),QEr=i(Sl),qt=n(Sl,"DIV",{class:!0});var A0=s(qt);T(Vx.$$.fragment,A0),HEr=i(A0),H1e=n(A0,"P",{});var UEt=s(H1e);UEr=r(UEt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),UEt.forEach(t),JEr=i(A0),bc=n(A0,"P",{});var VZ=s(bc);YEr=r(VZ,`Note:
Loading a model from its configuration file does `),U1e=n(VZ,"STRONG",{});var JEt=s(U1e);KEr=r(JEt,"not"),JEt.forEach(t),ZEr=r(VZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),YH=n(VZ,"A",{href:!0});var YEt=s(YH);eCr=r(YEt,"from_pretrained()"),YEt.forEach(t),oCr=r(VZ," to load the model weights."),VZ.forEach(t),rCr=i(A0),T(d5.$$.fragment,A0),A0.forEach(t),tCr=i(Sl),Br=n(Sl,"DIV",{class:!0});var Rl=s(Br);T(Xx.$$.fragment,Rl),aCr=i(Rl),J1e=n(Rl,"P",{});var KEt=s(J1e);nCr=r(KEt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),KEt.forEach(t),sCr=i(Rl),cn=n(Rl,"P",{});var y0=s(cn);lCr=r(y0,"The model class to instantiate is selected based on the "),Y1e=n(y0,"CODE",{});var ZEt=s(Y1e);iCr=r(ZEt,"model_type"),ZEt.forEach(t),dCr=r(y0,` property of the config object (either
passed as an argument or loaded from `),K1e=n(y0,"CODE",{});var eCt=s(K1e);cCr=r(eCt,"pretrained_model_name_or_path"),eCt.forEach(t),mCr=r(y0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z1e=n(y0,"CODE",{});var oCt=s(Z1e);fCr=r(oCt,"pretrained_model_name_or_path"),oCt.forEach(t),gCr=r(y0,":"),y0.forEach(t),hCr=i(Rl),de=n(Rl,"UL",{});var fe=s(de);c5=n(fe,"LI",{});var XRe=s(c5);eTe=n(XRe,"STRONG",{});var rCt=s(eTe);uCr=r(rCt,"albert"),rCt.forEach(t),pCr=r(XRe," \u2014 "),KH=n(XRe,"A",{href:!0});var tCt=s(KH);_Cr=r(tCt,"TFAlbertForTokenClassification"),tCt.forEach(t),bCr=r(XRe," (ALBERT model)"),XRe.forEach(t),vCr=i(fe),m5=n(fe,"LI",{});var zRe=s(m5);oTe=n(zRe,"STRONG",{});var aCt=s(oTe);FCr=r(aCt,"bert"),aCt.forEach(t),TCr=r(zRe," \u2014 "),ZH=n(zRe,"A",{href:!0});var nCt=s(ZH);MCr=r(nCt,"TFBertForTokenClassification"),nCt.forEach(t),ECr=r(zRe," (BERT model)"),zRe.forEach(t),CCr=i(fe),f5=n(fe,"LI",{});var WRe=s(f5);rTe=n(WRe,"STRONG",{});var sCt=s(rTe);wCr=r(sCt,"camembert"),sCt.forEach(t),ACr=r(WRe," \u2014 "),eU=n(WRe,"A",{href:!0});var lCt=s(eU);yCr=r(lCt,"TFCamembertForTokenClassification"),lCt.forEach(t),LCr=r(WRe," (CamemBERT model)"),WRe.forEach(t),xCr=i(fe),g5=n(fe,"LI",{});var QRe=s(g5);tTe=n(QRe,"STRONG",{});var iCt=s(tTe);$Cr=r(iCt,"convbert"),iCt.forEach(t),kCr=r(QRe," \u2014 "),oU=n(QRe,"A",{href:!0});var dCt=s(oU);SCr=r(dCt,"TFConvBertForTokenClassification"),dCt.forEach(t),RCr=r(QRe," (ConvBERT model)"),QRe.forEach(t),PCr=i(fe),h5=n(fe,"LI",{});var HRe=s(h5);aTe=n(HRe,"STRONG",{});var cCt=s(aTe);BCr=r(cCt,"deberta"),cCt.forEach(t),ICr=r(HRe," \u2014 "),rU=n(HRe,"A",{href:!0});var mCt=s(rU);qCr=r(mCt,"TFDebertaForTokenClassification"),mCt.forEach(t),NCr=r(HRe," (DeBERTa model)"),HRe.forEach(t),jCr=i(fe),u5=n(fe,"LI",{});var URe=s(u5);nTe=n(URe,"STRONG",{});var fCt=s(nTe);DCr=r(fCt,"deberta-v2"),fCt.forEach(t),GCr=r(URe," \u2014 "),tU=n(URe,"A",{href:!0});var gCt=s(tU);OCr=r(gCt,"TFDebertaV2ForTokenClassification"),gCt.forEach(t),VCr=r(URe," (DeBERTa-v2 model)"),URe.forEach(t),XCr=i(fe),p5=n(fe,"LI",{});var JRe=s(p5);sTe=n(JRe,"STRONG",{});var hCt=s(sTe);zCr=r(hCt,"distilbert"),hCt.forEach(t),WCr=r(JRe," \u2014 "),aU=n(JRe,"A",{href:!0});var uCt=s(aU);QCr=r(uCt,"TFDistilBertForTokenClassification"),uCt.forEach(t),HCr=r(JRe," (DistilBERT model)"),JRe.forEach(t),UCr=i(fe),_5=n(fe,"LI",{});var YRe=s(_5);lTe=n(YRe,"STRONG",{});var pCt=s(lTe);JCr=r(pCt,"electra"),pCt.forEach(t),YCr=r(YRe," \u2014 "),nU=n(YRe,"A",{href:!0});var _Ct=s(nU);KCr=r(_Ct,"TFElectraForTokenClassification"),_Ct.forEach(t),ZCr=r(YRe," (ELECTRA model)"),YRe.forEach(t),e5r=i(fe),b5=n(fe,"LI",{});var KRe=s(b5);iTe=n(KRe,"STRONG",{});var bCt=s(iTe);o5r=r(bCt,"flaubert"),bCt.forEach(t),r5r=r(KRe," \u2014 "),sU=n(KRe,"A",{href:!0});var vCt=s(sU);t5r=r(vCt,"TFFlaubertForTokenClassification"),vCt.forEach(t),a5r=r(KRe," (FlauBERT model)"),KRe.forEach(t),n5r=i(fe),v5=n(fe,"LI",{});var ZRe=s(v5);dTe=n(ZRe,"STRONG",{});var FCt=s(dTe);s5r=r(FCt,"funnel"),FCt.forEach(t),l5r=r(ZRe," \u2014 "),lU=n(ZRe,"A",{href:!0});var TCt=s(lU);i5r=r(TCt,"TFFunnelForTokenClassification"),TCt.forEach(t),d5r=r(ZRe," (Funnel Transformer model)"),ZRe.forEach(t),c5r=i(fe),F5=n(fe,"LI",{});var ePe=s(F5);cTe=n(ePe,"STRONG",{});var MCt=s(cTe);m5r=r(MCt,"layoutlm"),MCt.forEach(t),f5r=r(ePe," \u2014 "),iU=n(ePe,"A",{href:!0});var ECt=s(iU);g5r=r(ECt,"TFLayoutLMForTokenClassification"),ECt.forEach(t),h5r=r(ePe," (LayoutLM model)"),ePe.forEach(t),u5r=i(fe),T5=n(fe,"LI",{});var oPe=s(T5);mTe=n(oPe,"STRONG",{});var CCt=s(mTe);p5r=r(CCt,"longformer"),CCt.forEach(t),_5r=r(oPe," \u2014 "),dU=n(oPe,"A",{href:!0});var wCt=s(dU);b5r=r(wCt,"TFLongformerForTokenClassification"),wCt.forEach(t),v5r=r(oPe," (Longformer model)"),oPe.forEach(t),F5r=i(fe),M5=n(fe,"LI",{});var rPe=s(M5);fTe=n(rPe,"STRONG",{});var ACt=s(fTe);T5r=r(ACt,"mobilebert"),ACt.forEach(t),M5r=r(rPe," \u2014 "),cU=n(rPe,"A",{href:!0});var yCt=s(cU);E5r=r(yCt,"TFMobileBertForTokenClassification"),yCt.forEach(t),C5r=r(rPe," (MobileBERT model)"),rPe.forEach(t),w5r=i(fe),E5=n(fe,"LI",{});var tPe=s(E5);gTe=n(tPe,"STRONG",{});var LCt=s(gTe);A5r=r(LCt,"mpnet"),LCt.forEach(t),y5r=r(tPe," \u2014 "),mU=n(tPe,"A",{href:!0});var xCt=s(mU);L5r=r(xCt,"TFMPNetForTokenClassification"),xCt.forEach(t),x5r=r(tPe," (MPNet model)"),tPe.forEach(t),$5r=i(fe),C5=n(fe,"LI",{});var aPe=s(C5);hTe=n(aPe,"STRONG",{});var $Ct=s(hTe);k5r=r($Ct,"rembert"),$Ct.forEach(t),S5r=r(aPe," \u2014 "),fU=n(aPe,"A",{href:!0});var kCt=s(fU);R5r=r(kCt,"TFRemBertForTokenClassification"),kCt.forEach(t),P5r=r(aPe," (RemBERT model)"),aPe.forEach(t),B5r=i(fe),w5=n(fe,"LI",{});var nPe=s(w5);uTe=n(nPe,"STRONG",{});var SCt=s(uTe);I5r=r(SCt,"roberta"),SCt.forEach(t),q5r=r(nPe," \u2014 "),gU=n(nPe,"A",{href:!0});var RCt=s(gU);N5r=r(RCt,"TFRobertaForTokenClassification"),RCt.forEach(t),j5r=r(nPe," (RoBERTa model)"),nPe.forEach(t),D5r=i(fe),A5=n(fe,"LI",{});var sPe=s(A5);pTe=n(sPe,"STRONG",{});var PCt=s(pTe);G5r=r(PCt,"roformer"),PCt.forEach(t),O5r=r(sPe," \u2014 "),hU=n(sPe,"A",{href:!0});var BCt=s(hU);V5r=r(BCt,"TFRoFormerForTokenClassification"),BCt.forEach(t),X5r=r(sPe," (RoFormer model)"),sPe.forEach(t),z5r=i(fe),y5=n(fe,"LI",{});var lPe=s(y5);_Te=n(lPe,"STRONG",{});var ICt=s(_Te);W5r=r(ICt,"xlm"),ICt.forEach(t),Q5r=r(lPe," \u2014 "),uU=n(lPe,"A",{href:!0});var qCt=s(uU);H5r=r(qCt,"TFXLMForTokenClassification"),qCt.forEach(t),U5r=r(lPe," (XLM model)"),lPe.forEach(t),J5r=i(fe),L5=n(fe,"LI",{});var iPe=s(L5);bTe=n(iPe,"STRONG",{});var NCt=s(bTe);Y5r=r(NCt,"xlm-roberta"),NCt.forEach(t),K5r=r(iPe," \u2014 "),pU=n(iPe,"A",{href:!0});var jCt=s(pU);Z5r=r(jCt,"TFXLMRobertaForTokenClassification"),jCt.forEach(t),e3r=r(iPe," (XLM-RoBERTa model)"),iPe.forEach(t),o3r=i(fe),x5=n(fe,"LI",{});var dPe=s(x5);vTe=n(dPe,"STRONG",{});var DCt=s(vTe);r3r=r(DCt,"xlnet"),DCt.forEach(t),t3r=r(dPe," \u2014 "),_U=n(dPe,"A",{href:!0});var GCt=s(_U);a3r=r(GCt,"TFXLNetForTokenClassification"),GCt.forEach(t),n3r=r(dPe," (XLNet model)"),dPe.forEach(t),fe.forEach(t),s3r=i(Rl),T($5.$$.fragment,Rl),Rl.forEach(t),Sl.forEach(t),rNe=i(m),vc=n(m,"H2",{class:!0});var dDe=s(vc);k5=n(dDe,"A",{id:!0,class:!0,href:!0});var OCt=s(k5);FTe=n(OCt,"SPAN",{});var VCt=s(FTe);T(zx.$$.fragment,VCt),VCt.forEach(t),OCt.forEach(t),l3r=i(dDe),TTe=n(dDe,"SPAN",{});var XCt=s(TTe);i3r=r(XCt,"TFAutoModelForQuestionAnswering"),XCt.forEach(t),dDe.forEach(t),tNe=i(m),ir=n(m,"DIV",{class:!0});var Pl=s(ir);T(Wx.$$.fragment,Pl),d3r=i(Pl),Fc=n(Pl,"P",{});var XZ=s(Fc);c3r=r(XZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),bU=n(XZ,"A",{href:!0});var zCt=s(bU);m3r=r(zCt,"from_pretrained()"),zCt.forEach(t),f3r=r(XZ," class method or the "),vU=n(XZ,"A",{href:!0});var WCt=s(vU);g3r=r(WCt,"from_config()"),WCt.forEach(t),h3r=r(XZ,` class
method.`),XZ.forEach(t),u3r=i(Pl),Qx=n(Pl,"P",{});var cDe=s(Qx);p3r=r(cDe,"This class cannot be instantiated directly using "),MTe=n(cDe,"CODE",{});var QCt=s(MTe);_3r=r(QCt,"__init__()"),QCt.forEach(t),b3r=r(cDe," (throws an error)."),cDe.forEach(t),v3r=i(Pl),Nt=n(Pl,"DIV",{class:!0});var L0=s(Nt);T(Hx.$$.fragment,L0),F3r=i(L0),ETe=n(L0,"P",{});var HCt=s(ETe);T3r=r(HCt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),HCt.forEach(t),M3r=i(L0),Tc=n(L0,"P",{});var zZ=s(Tc);E3r=r(zZ,`Note:
Loading a model from its configuration file does `),CTe=n(zZ,"STRONG",{});var UCt=s(CTe);C3r=r(UCt,"not"),UCt.forEach(t),w3r=r(zZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),FU=n(zZ,"A",{href:!0});var JCt=s(FU);A3r=r(JCt,"from_pretrained()"),JCt.forEach(t),y3r=r(zZ," to load the model weights."),zZ.forEach(t),L3r=i(L0),T(S5.$$.fragment,L0),L0.forEach(t),x3r=i(Pl),Ir=n(Pl,"DIV",{class:!0});var Bl=s(Ir);T(Ux.$$.fragment,Bl),$3r=i(Bl),wTe=n(Bl,"P",{});var YCt=s(wTe);k3r=r(YCt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),YCt.forEach(t),S3r=i(Bl),mn=n(Bl,"P",{});var x0=s(mn);R3r=r(x0,"The model class to instantiate is selected based on the "),ATe=n(x0,"CODE",{});var KCt=s(ATe);P3r=r(KCt,"model_type"),KCt.forEach(t),B3r=r(x0,` property of the config object (either
passed as an argument or loaded from `),yTe=n(x0,"CODE",{});var ZCt=s(yTe);I3r=r(ZCt,"pretrained_model_name_or_path"),ZCt.forEach(t),q3r=r(x0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),LTe=n(x0,"CODE",{});var e5t=s(LTe);N3r=r(e5t,"pretrained_model_name_or_path"),e5t.forEach(t),j3r=r(x0,":"),x0.forEach(t),D3r=i(Bl),ce=n(Bl,"UL",{});var ge=s(ce);R5=n(ge,"LI",{});var cPe=s(R5);xTe=n(cPe,"STRONG",{});var o5t=s(xTe);G3r=r(o5t,"albert"),o5t.forEach(t),O3r=r(cPe," \u2014 "),TU=n(cPe,"A",{href:!0});var r5t=s(TU);V3r=r(r5t,"TFAlbertForQuestionAnswering"),r5t.forEach(t),X3r=r(cPe," (ALBERT model)"),cPe.forEach(t),z3r=i(ge),P5=n(ge,"LI",{});var mPe=s(P5);$Te=n(mPe,"STRONG",{});var t5t=s($Te);W3r=r(t5t,"bert"),t5t.forEach(t),Q3r=r(mPe," \u2014 "),MU=n(mPe,"A",{href:!0});var a5t=s(MU);H3r=r(a5t,"TFBertForQuestionAnswering"),a5t.forEach(t),U3r=r(mPe," (BERT model)"),mPe.forEach(t),J3r=i(ge),B5=n(ge,"LI",{});var fPe=s(B5);kTe=n(fPe,"STRONG",{});var n5t=s(kTe);Y3r=r(n5t,"camembert"),n5t.forEach(t),K3r=r(fPe," \u2014 "),EU=n(fPe,"A",{href:!0});var s5t=s(EU);Z3r=r(s5t,"TFCamembertForQuestionAnswering"),s5t.forEach(t),ewr=r(fPe," (CamemBERT model)"),fPe.forEach(t),owr=i(ge),I5=n(ge,"LI",{});var gPe=s(I5);STe=n(gPe,"STRONG",{});var l5t=s(STe);rwr=r(l5t,"convbert"),l5t.forEach(t),twr=r(gPe," \u2014 "),CU=n(gPe,"A",{href:!0});var i5t=s(CU);awr=r(i5t,"TFConvBertForQuestionAnswering"),i5t.forEach(t),nwr=r(gPe," (ConvBERT model)"),gPe.forEach(t),swr=i(ge),q5=n(ge,"LI",{});var hPe=s(q5);RTe=n(hPe,"STRONG",{});var d5t=s(RTe);lwr=r(d5t,"deberta"),d5t.forEach(t),iwr=r(hPe," \u2014 "),wU=n(hPe,"A",{href:!0});var c5t=s(wU);dwr=r(c5t,"TFDebertaForQuestionAnswering"),c5t.forEach(t),cwr=r(hPe," (DeBERTa model)"),hPe.forEach(t),mwr=i(ge),N5=n(ge,"LI",{});var uPe=s(N5);PTe=n(uPe,"STRONG",{});var m5t=s(PTe);fwr=r(m5t,"deberta-v2"),m5t.forEach(t),gwr=r(uPe," \u2014 "),AU=n(uPe,"A",{href:!0});var f5t=s(AU);hwr=r(f5t,"TFDebertaV2ForQuestionAnswering"),f5t.forEach(t),uwr=r(uPe," (DeBERTa-v2 model)"),uPe.forEach(t),pwr=i(ge),j5=n(ge,"LI",{});var pPe=s(j5);BTe=n(pPe,"STRONG",{});var g5t=s(BTe);_wr=r(g5t,"distilbert"),g5t.forEach(t),bwr=r(pPe," \u2014 "),yU=n(pPe,"A",{href:!0});var h5t=s(yU);vwr=r(h5t,"TFDistilBertForQuestionAnswering"),h5t.forEach(t),Fwr=r(pPe," (DistilBERT model)"),pPe.forEach(t),Twr=i(ge),D5=n(ge,"LI",{});var _Pe=s(D5);ITe=n(_Pe,"STRONG",{});var u5t=s(ITe);Mwr=r(u5t,"electra"),u5t.forEach(t),Ewr=r(_Pe," \u2014 "),LU=n(_Pe,"A",{href:!0});var p5t=s(LU);Cwr=r(p5t,"TFElectraForQuestionAnswering"),p5t.forEach(t),wwr=r(_Pe," (ELECTRA model)"),_Pe.forEach(t),Awr=i(ge),G5=n(ge,"LI",{});var bPe=s(G5);qTe=n(bPe,"STRONG",{});var _5t=s(qTe);ywr=r(_5t,"flaubert"),_5t.forEach(t),Lwr=r(bPe," \u2014 "),xU=n(bPe,"A",{href:!0});var b5t=s(xU);xwr=r(b5t,"TFFlaubertForQuestionAnsweringSimple"),b5t.forEach(t),$wr=r(bPe," (FlauBERT model)"),bPe.forEach(t),kwr=i(ge),O5=n(ge,"LI",{});var vPe=s(O5);NTe=n(vPe,"STRONG",{});var v5t=s(NTe);Swr=r(v5t,"funnel"),v5t.forEach(t),Rwr=r(vPe," \u2014 "),$U=n(vPe,"A",{href:!0});var F5t=s($U);Pwr=r(F5t,"TFFunnelForQuestionAnswering"),F5t.forEach(t),Bwr=r(vPe," (Funnel Transformer model)"),vPe.forEach(t),Iwr=i(ge),V5=n(ge,"LI",{});var FPe=s(V5);jTe=n(FPe,"STRONG",{});var T5t=s(jTe);qwr=r(T5t,"gptj"),T5t.forEach(t),Nwr=r(FPe," \u2014 "),kU=n(FPe,"A",{href:!0});var M5t=s(kU);jwr=r(M5t,"TFGPTJForQuestionAnswering"),M5t.forEach(t),Dwr=r(FPe," (GPT-J model)"),FPe.forEach(t),Gwr=i(ge),X5=n(ge,"LI",{});var TPe=s(X5);DTe=n(TPe,"STRONG",{});var E5t=s(DTe);Owr=r(E5t,"longformer"),E5t.forEach(t),Vwr=r(TPe," \u2014 "),SU=n(TPe,"A",{href:!0});var C5t=s(SU);Xwr=r(C5t,"TFLongformerForQuestionAnswering"),C5t.forEach(t),zwr=r(TPe," (Longformer model)"),TPe.forEach(t),Wwr=i(ge),z5=n(ge,"LI",{});var MPe=s(z5);GTe=n(MPe,"STRONG",{});var w5t=s(GTe);Qwr=r(w5t,"mobilebert"),w5t.forEach(t),Hwr=r(MPe," \u2014 "),RU=n(MPe,"A",{href:!0});var A5t=s(RU);Uwr=r(A5t,"TFMobileBertForQuestionAnswering"),A5t.forEach(t),Jwr=r(MPe," (MobileBERT model)"),MPe.forEach(t),Ywr=i(ge),W5=n(ge,"LI",{});var EPe=s(W5);OTe=n(EPe,"STRONG",{});var y5t=s(OTe);Kwr=r(y5t,"mpnet"),y5t.forEach(t),Zwr=r(EPe," \u2014 "),PU=n(EPe,"A",{href:!0});var L5t=s(PU);eAr=r(L5t,"TFMPNetForQuestionAnswering"),L5t.forEach(t),oAr=r(EPe," (MPNet model)"),EPe.forEach(t),rAr=i(ge),Q5=n(ge,"LI",{});var CPe=s(Q5);VTe=n(CPe,"STRONG",{});var x5t=s(VTe);tAr=r(x5t,"rembert"),x5t.forEach(t),aAr=r(CPe," \u2014 "),BU=n(CPe,"A",{href:!0});var $5t=s(BU);nAr=r($5t,"TFRemBertForQuestionAnswering"),$5t.forEach(t),sAr=r(CPe," (RemBERT model)"),CPe.forEach(t),lAr=i(ge),H5=n(ge,"LI",{});var wPe=s(H5);XTe=n(wPe,"STRONG",{});var k5t=s(XTe);iAr=r(k5t,"roberta"),k5t.forEach(t),dAr=r(wPe," \u2014 "),IU=n(wPe,"A",{href:!0});var S5t=s(IU);cAr=r(S5t,"TFRobertaForQuestionAnswering"),S5t.forEach(t),mAr=r(wPe," (RoBERTa model)"),wPe.forEach(t),fAr=i(ge),U5=n(ge,"LI",{});var APe=s(U5);zTe=n(APe,"STRONG",{});var R5t=s(zTe);gAr=r(R5t,"roformer"),R5t.forEach(t),hAr=r(APe," \u2014 "),qU=n(APe,"A",{href:!0});var P5t=s(qU);uAr=r(P5t,"TFRoFormerForQuestionAnswering"),P5t.forEach(t),pAr=r(APe," (RoFormer model)"),APe.forEach(t),_Ar=i(ge),J5=n(ge,"LI",{});var yPe=s(J5);WTe=n(yPe,"STRONG",{});var B5t=s(WTe);bAr=r(B5t,"xlm"),B5t.forEach(t),vAr=r(yPe," \u2014 "),NU=n(yPe,"A",{href:!0});var I5t=s(NU);FAr=r(I5t,"TFXLMForQuestionAnsweringSimple"),I5t.forEach(t),TAr=r(yPe," (XLM model)"),yPe.forEach(t),MAr=i(ge),Y5=n(ge,"LI",{});var LPe=s(Y5);QTe=n(LPe,"STRONG",{});var q5t=s(QTe);EAr=r(q5t,"xlm-roberta"),q5t.forEach(t),CAr=r(LPe," \u2014 "),jU=n(LPe,"A",{href:!0});var N5t=s(jU);wAr=r(N5t,"TFXLMRobertaForQuestionAnswering"),N5t.forEach(t),AAr=r(LPe," (XLM-RoBERTa model)"),LPe.forEach(t),yAr=i(ge),K5=n(ge,"LI",{});var xPe=s(K5);HTe=n(xPe,"STRONG",{});var j5t=s(HTe);LAr=r(j5t,"xlnet"),j5t.forEach(t),xAr=r(xPe," \u2014 "),DU=n(xPe,"A",{href:!0});var D5t=s(DU);$Ar=r(D5t,"TFXLNetForQuestionAnsweringSimple"),D5t.forEach(t),kAr=r(xPe," (XLNet model)"),xPe.forEach(t),ge.forEach(t),SAr=i(Bl),T(Z5.$$.fragment,Bl),Bl.forEach(t),Pl.forEach(t),aNe=i(m),Mc=n(m,"H2",{class:!0});var mDe=s(Mc);e3=n(mDe,"A",{id:!0,class:!0,href:!0});var G5t=s(e3);UTe=n(G5t,"SPAN",{});var O5t=s(UTe);T(Jx.$$.fragment,O5t),O5t.forEach(t),G5t.forEach(t),RAr=i(mDe),JTe=n(mDe,"SPAN",{});var V5t=s(JTe);PAr=r(V5t,"TFAutoModelForVision2Seq"),V5t.forEach(t),mDe.forEach(t),nNe=i(m),dr=n(m,"DIV",{class:!0});var Il=s(dr);T(Yx.$$.fragment,Il),BAr=i(Il),Ec=n(Il,"P",{});var WZ=s(Ec);IAr=r(WZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),GU=n(WZ,"A",{href:!0});var X5t=s(GU);qAr=r(X5t,"from_pretrained()"),X5t.forEach(t),NAr=r(WZ," class method or the "),OU=n(WZ,"A",{href:!0});var z5t=s(OU);jAr=r(z5t,"from_config()"),z5t.forEach(t),DAr=r(WZ,` class
method.`),WZ.forEach(t),GAr=i(Il),Kx=n(Il,"P",{});var fDe=s(Kx);OAr=r(fDe,"This class cannot be instantiated directly using "),YTe=n(fDe,"CODE",{});var W5t=s(YTe);VAr=r(W5t,"__init__()"),W5t.forEach(t),XAr=r(fDe," (throws an error)."),fDe.forEach(t),zAr=i(Il),jt=n(Il,"DIV",{class:!0});var $0=s(jt);T(Zx.$$.fragment,$0),WAr=i($0),KTe=n($0,"P",{});var Q5t=s(KTe);QAr=r(Q5t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Q5t.forEach(t),HAr=i($0),Cc=n($0,"P",{});var QZ=s(Cc);UAr=r(QZ,`Note:
Loading a model from its configuration file does `),ZTe=n(QZ,"STRONG",{});var H5t=s(ZTe);JAr=r(H5t,"not"),H5t.forEach(t),YAr=r(QZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),VU=n(QZ,"A",{href:!0});var U5t=s(VU);KAr=r(U5t,"from_pretrained()"),U5t.forEach(t),ZAr=r(QZ," to load the model weights."),QZ.forEach(t),e6r=i($0),T(o3.$$.fragment,$0),$0.forEach(t),o6r=i(Il),qr=n(Il,"DIV",{class:!0});var ql=s(qr);T(e7.$$.fragment,ql),r6r=i(ql),eMe=n(ql,"P",{});var J5t=s(eMe);t6r=r(J5t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),J5t.forEach(t),a6r=i(ql),fn=n(ql,"P",{});var k0=s(fn);n6r=r(k0,"The model class to instantiate is selected based on the "),oMe=n(k0,"CODE",{});var Y5t=s(oMe);s6r=r(Y5t,"model_type"),Y5t.forEach(t),l6r=r(k0,` property of the config object (either
passed as an argument or loaded from `),rMe=n(k0,"CODE",{});var K5t=s(rMe);i6r=r(K5t,"pretrained_model_name_or_path"),K5t.forEach(t),d6r=r(k0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),tMe=n(k0,"CODE",{});var Z5t=s(tMe);c6r=r(Z5t,"pretrained_model_name_or_path"),Z5t.forEach(t),m6r=r(k0,":"),k0.forEach(t),f6r=i(ql),aMe=n(ql,"UL",{});var e3t=s(aMe);r3=n(e3t,"LI",{});var $Pe=s(r3);nMe=n($Pe,"STRONG",{});var o3t=s(nMe);g6r=r(o3t,"vision-encoder-decoder"),o3t.forEach(t),h6r=r($Pe," \u2014 "),XU=n($Pe,"A",{href:!0});var r3t=s(XU);u6r=r(r3t,"TFVisionEncoderDecoderModel"),r3t.forEach(t),p6r=r($Pe," (Vision Encoder decoder model)"),$Pe.forEach(t),e3t.forEach(t),_6r=i(ql),T(t3.$$.fragment,ql),ql.forEach(t),Il.forEach(t),sNe=i(m),wc=n(m,"H2",{class:!0});var gDe=s(wc);a3=n(gDe,"A",{id:!0,class:!0,href:!0});var t3t=s(a3);sMe=n(t3t,"SPAN",{});var a3t=s(sMe);T(o7.$$.fragment,a3t),a3t.forEach(t),t3t.forEach(t),b6r=i(gDe),lMe=n(gDe,"SPAN",{});var n3t=s(lMe);v6r=r(n3t,"TFAutoModelForSpeechSeq2Seq"),n3t.forEach(t),gDe.forEach(t),lNe=i(m),cr=n(m,"DIV",{class:!0});var Nl=s(cr);T(r7.$$.fragment,Nl),F6r=i(Nl),Ac=n(Nl,"P",{});var HZ=s(Ac);T6r=r(HZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),zU=n(HZ,"A",{href:!0});var s3t=s(zU);M6r=r(s3t,"from_pretrained()"),s3t.forEach(t),E6r=r(HZ," class method or the "),WU=n(HZ,"A",{href:!0});var l3t=s(WU);C6r=r(l3t,"from_config()"),l3t.forEach(t),w6r=r(HZ,` class
method.`),HZ.forEach(t),A6r=i(Nl),t7=n(Nl,"P",{});var hDe=s(t7);y6r=r(hDe,"This class cannot be instantiated directly using "),iMe=n(hDe,"CODE",{});var i3t=s(iMe);L6r=r(i3t,"__init__()"),i3t.forEach(t),x6r=r(hDe," (throws an error)."),hDe.forEach(t),$6r=i(Nl),Dt=n(Nl,"DIV",{class:!0});var S0=s(Dt);T(a7.$$.fragment,S0),k6r=i(S0),dMe=n(S0,"P",{});var d3t=s(dMe);S6r=r(d3t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),d3t.forEach(t),R6r=i(S0),yc=n(S0,"P",{});var UZ=s(yc);P6r=r(UZ,`Note:
Loading a model from its configuration file does `),cMe=n(UZ,"STRONG",{});var c3t=s(cMe);B6r=r(c3t,"not"),c3t.forEach(t),I6r=r(UZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),QU=n(UZ,"A",{href:!0});var m3t=s(QU);q6r=r(m3t,"from_pretrained()"),m3t.forEach(t),N6r=r(UZ," to load the model weights."),UZ.forEach(t),j6r=i(S0),T(n3.$$.fragment,S0),S0.forEach(t),D6r=i(Nl),Nr=n(Nl,"DIV",{class:!0});var jl=s(Nr);T(n7.$$.fragment,jl),G6r=i(jl),mMe=n(jl,"P",{});var f3t=s(mMe);O6r=r(f3t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),f3t.forEach(t),V6r=i(jl),gn=n(jl,"P",{});var R0=s(gn);X6r=r(R0,"The model class to instantiate is selected based on the "),fMe=n(R0,"CODE",{});var g3t=s(fMe);z6r=r(g3t,"model_type"),g3t.forEach(t),W6r=r(R0,` property of the config object (either
passed as an argument or loaded from `),gMe=n(R0,"CODE",{});var h3t=s(gMe);Q6r=r(h3t,"pretrained_model_name_or_path"),h3t.forEach(t),H6r=r(R0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hMe=n(R0,"CODE",{});var u3t=s(hMe);U6r=r(u3t,"pretrained_model_name_or_path"),u3t.forEach(t),J6r=r(R0,":"),R0.forEach(t),Y6r=i(jl),uMe=n(jl,"UL",{});var p3t=s(uMe);s3=n(p3t,"LI",{});var kPe=s(s3);pMe=n(kPe,"STRONG",{});var _3t=s(pMe);K6r=r(_3t,"speech_to_text"),_3t.forEach(t),Z6r=r(kPe," \u2014 "),HU=n(kPe,"A",{href:!0});var b3t=s(HU);e0r=r(b3t,"TFSpeech2TextForConditionalGeneration"),b3t.forEach(t),o0r=r(kPe," (Speech2Text model)"),kPe.forEach(t),p3t.forEach(t),r0r=i(jl),T(l3.$$.fragment,jl),jl.forEach(t),Nl.forEach(t),iNe=i(m),Lc=n(m,"H2",{class:!0});var uDe=s(Lc);i3=n(uDe,"A",{id:!0,class:!0,href:!0});var v3t=s(i3);_Me=n(v3t,"SPAN",{});var F3t=s(_Me);T(s7.$$.fragment,F3t),F3t.forEach(t),v3t.forEach(t),t0r=i(uDe),bMe=n(uDe,"SPAN",{});var T3t=s(bMe);a0r=r(T3t,"FlaxAutoModel"),T3t.forEach(t),uDe.forEach(t),dNe=i(m),mr=n(m,"DIV",{class:!0});var Dl=s(mr);T(l7.$$.fragment,Dl),n0r=i(Dl),xc=n(Dl,"P",{});var JZ=s(xc);s0r=r(JZ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),UU=n(JZ,"A",{href:!0});var M3t=s(UU);l0r=r(M3t,"from_pretrained()"),M3t.forEach(t),i0r=r(JZ," class method or the "),JU=n(JZ,"A",{href:!0});var E3t=s(JU);d0r=r(E3t,"from_config()"),E3t.forEach(t),c0r=r(JZ,` class
method.`),JZ.forEach(t),m0r=i(Dl),i7=n(Dl,"P",{});var pDe=s(i7);f0r=r(pDe,"This class cannot be instantiated directly using "),vMe=n(pDe,"CODE",{});var C3t=s(vMe);g0r=r(C3t,"__init__()"),C3t.forEach(t),h0r=r(pDe," (throws an error)."),pDe.forEach(t),u0r=i(Dl),Gt=n(Dl,"DIV",{class:!0});var P0=s(Gt);T(d7.$$.fragment,P0),p0r=i(P0),FMe=n(P0,"P",{});var w3t=s(FMe);_0r=r(w3t,"Instantiates one of the base model classes of the library from a configuration."),w3t.forEach(t),b0r=i(P0),$c=n(P0,"P",{});var YZ=s($c);v0r=r(YZ,`Note:
Loading a model from its configuration file does `),TMe=n(YZ,"STRONG",{});var A3t=s(TMe);F0r=r(A3t,"not"),A3t.forEach(t),T0r=r(YZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),YU=n(YZ,"A",{href:!0});var y3t=s(YU);M0r=r(y3t,"from_pretrained()"),y3t.forEach(t),E0r=r(YZ," to load the model weights."),YZ.forEach(t),C0r=i(P0),T(d3.$$.fragment,P0),P0.forEach(t),w0r=i(Dl),jr=n(Dl,"DIV",{class:!0});var Gl=s(jr);T(c7.$$.fragment,Gl),A0r=i(Gl),MMe=n(Gl,"P",{});var L3t=s(MMe);y0r=r(L3t,"Instantiate one of the base model classes of the library from a pretrained model."),L3t.forEach(t),L0r=i(Gl),hn=n(Gl,"P",{});var B0=s(hn);x0r=r(B0,"The model class to instantiate is selected based on the "),EMe=n(B0,"CODE",{});var x3t=s(EMe);$0r=r(x3t,"model_type"),x3t.forEach(t),k0r=r(B0,` property of the config object (either
passed as an argument or loaded from `),CMe=n(B0,"CODE",{});var $3t=s(CMe);S0r=r($3t,"pretrained_model_name_or_path"),$3t.forEach(t),R0r=r(B0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wMe=n(B0,"CODE",{});var k3t=s(wMe);P0r=r(k3t,"pretrained_model_name_or_path"),k3t.forEach(t),B0r=r(B0,":"),B0.forEach(t),I0r=i(Gl),re=n(Gl,"UL",{});var ne=s(re);c3=n(ne,"LI",{});var SPe=s(c3);AMe=n(SPe,"STRONG",{});var S3t=s(AMe);q0r=r(S3t,"albert"),S3t.forEach(t),N0r=r(SPe," \u2014 "),KU=n(SPe,"A",{href:!0});var R3t=s(KU);j0r=r(R3t,"FlaxAlbertModel"),R3t.forEach(t),D0r=r(SPe," (ALBERT model)"),SPe.forEach(t),G0r=i(ne),m3=n(ne,"LI",{});var RPe=s(m3);yMe=n(RPe,"STRONG",{});var P3t=s(yMe);O0r=r(P3t,"bart"),P3t.forEach(t),V0r=r(RPe," \u2014 "),ZU=n(RPe,"A",{href:!0});var B3t=s(ZU);X0r=r(B3t,"FlaxBartModel"),B3t.forEach(t),z0r=r(RPe," (BART model)"),RPe.forEach(t),W0r=i(ne),f3=n(ne,"LI",{});var PPe=s(f3);LMe=n(PPe,"STRONG",{});var I3t=s(LMe);Q0r=r(I3t,"beit"),I3t.forEach(t),H0r=r(PPe," \u2014 "),eJ=n(PPe,"A",{href:!0});var q3t=s(eJ);U0r=r(q3t,"FlaxBeitModel"),q3t.forEach(t),J0r=r(PPe," (BEiT model)"),PPe.forEach(t),Y0r=i(ne),g3=n(ne,"LI",{});var BPe=s(g3);xMe=n(BPe,"STRONG",{});var N3t=s(xMe);K0r=r(N3t,"bert"),N3t.forEach(t),Z0r=r(BPe," \u2014 "),oJ=n(BPe,"A",{href:!0});var j3t=s(oJ);eyr=r(j3t,"FlaxBertModel"),j3t.forEach(t),oyr=r(BPe," (BERT model)"),BPe.forEach(t),ryr=i(ne),h3=n(ne,"LI",{});var IPe=s(h3);$Me=n(IPe,"STRONG",{});var D3t=s($Me);tyr=r(D3t,"big_bird"),D3t.forEach(t),ayr=r(IPe," \u2014 "),rJ=n(IPe,"A",{href:!0});var G3t=s(rJ);nyr=r(G3t,"FlaxBigBirdModel"),G3t.forEach(t),syr=r(IPe," (BigBird model)"),IPe.forEach(t),lyr=i(ne),u3=n(ne,"LI",{});var qPe=s(u3);kMe=n(qPe,"STRONG",{});var O3t=s(kMe);iyr=r(O3t,"blenderbot"),O3t.forEach(t),dyr=r(qPe," \u2014 "),tJ=n(qPe,"A",{href:!0});var V3t=s(tJ);cyr=r(V3t,"FlaxBlenderbotModel"),V3t.forEach(t),myr=r(qPe," (Blenderbot model)"),qPe.forEach(t),fyr=i(ne),p3=n(ne,"LI",{});var NPe=s(p3);SMe=n(NPe,"STRONG",{});var X3t=s(SMe);gyr=r(X3t,"blenderbot-small"),X3t.forEach(t),hyr=r(NPe," \u2014 "),aJ=n(NPe,"A",{href:!0});var z3t=s(aJ);uyr=r(z3t,"FlaxBlenderbotSmallModel"),z3t.forEach(t),pyr=r(NPe," (BlenderbotSmall model)"),NPe.forEach(t),_yr=i(ne),_3=n(ne,"LI",{});var jPe=s(_3);RMe=n(jPe,"STRONG",{});var W3t=s(RMe);byr=r(W3t,"clip"),W3t.forEach(t),vyr=r(jPe," \u2014 "),nJ=n(jPe,"A",{href:!0});var Q3t=s(nJ);Fyr=r(Q3t,"FlaxCLIPModel"),Q3t.forEach(t),Tyr=r(jPe," (CLIP model)"),jPe.forEach(t),Myr=i(ne),b3=n(ne,"LI",{});var DPe=s(b3);PMe=n(DPe,"STRONG",{});var H3t=s(PMe);Eyr=r(H3t,"distilbert"),H3t.forEach(t),Cyr=r(DPe," \u2014 "),sJ=n(DPe,"A",{href:!0});var U3t=s(sJ);wyr=r(U3t,"FlaxDistilBertModel"),U3t.forEach(t),Ayr=r(DPe," (DistilBERT model)"),DPe.forEach(t),yyr=i(ne),v3=n(ne,"LI",{});var GPe=s(v3);BMe=n(GPe,"STRONG",{});var J3t=s(BMe);Lyr=r(J3t,"electra"),J3t.forEach(t),xyr=r(GPe," \u2014 "),lJ=n(GPe,"A",{href:!0});var Y3t=s(lJ);$yr=r(Y3t,"FlaxElectraModel"),Y3t.forEach(t),kyr=r(GPe," (ELECTRA model)"),GPe.forEach(t),Syr=i(ne),F3=n(ne,"LI",{});var OPe=s(F3);IMe=n(OPe,"STRONG",{});var K3t=s(IMe);Ryr=r(K3t,"gpt2"),K3t.forEach(t),Pyr=r(OPe," \u2014 "),iJ=n(OPe,"A",{href:!0});var Z3t=s(iJ);Byr=r(Z3t,"FlaxGPT2Model"),Z3t.forEach(t),Iyr=r(OPe," (OpenAI GPT-2 model)"),OPe.forEach(t),qyr=i(ne),T3=n(ne,"LI",{});var VPe=s(T3);qMe=n(VPe,"STRONG",{});var ewt=s(qMe);Nyr=r(ewt,"gpt_neo"),ewt.forEach(t),jyr=r(VPe," \u2014 "),dJ=n(VPe,"A",{href:!0});var owt=s(dJ);Dyr=r(owt,"FlaxGPTNeoModel"),owt.forEach(t),Gyr=r(VPe," (GPT Neo model)"),VPe.forEach(t),Oyr=i(ne),M3=n(ne,"LI",{});var XPe=s(M3);NMe=n(XPe,"STRONG",{});var rwt=s(NMe);Vyr=r(rwt,"gptj"),rwt.forEach(t),Xyr=r(XPe," \u2014 "),cJ=n(XPe,"A",{href:!0});var twt=s(cJ);zyr=r(twt,"FlaxGPTJModel"),twt.forEach(t),Wyr=r(XPe," (GPT-J model)"),XPe.forEach(t),Qyr=i(ne),E3=n(ne,"LI",{});var zPe=s(E3);jMe=n(zPe,"STRONG",{});var awt=s(jMe);Hyr=r(awt,"marian"),awt.forEach(t),Uyr=r(zPe," \u2014 "),mJ=n(zPe,"A",{href:!0});var nwt=s(mJ);Jyr=r(nwt,"FlaxMarianModel"),nwt.forEach(t),Yyr=r(zPe," (Marian model)"),zPe.forEach(t),Kyr=i(ne),C3=n(ne,"LI",{});var WPe=s(C3);DMe=n(WPe,"STRONG",{});var swt=s(DMe);Zyr=r(swt,"mbart"),swt.forEach(t),eLr=r(WPe," \u2014 "),fJ=n(WPe,"A",{href:!0});var lwt=s(fJ);oLr=r(lwt,"FlaxMBartModel"),lwt.forEach(t),rLr=r(WPe," (mBART model)"),WPe.forEach(t),tLr=i(ne),w3=n(ne,"LI",{});var QPe=s(w3);GMe=n(QPe,"STRONG",{});var iwt=s(GMe);aLr=r(iwt,"mt5"),iwt.forEach(t),nLr=r(QPe," \u2014 "),gJ=n(QPe,"A",{href:!0});var dwt=s(gJ);sLr=r(dwt,"FlaxMT5Model"),dwt.forEach(t),lLr=r(QPe," (mT5 model)"),QPe.forEach(t),iLr=i(ne),A3=n(ne,"LI",{});var HPe=s(A3);OMe=n(HPe,"STRONG",{});var cwt=s(OMe);dLr=r(cwt,"pegasus"),cwt.forEach(t),cLr=r(HPe," \u2014 "),hJ=n(HPe,"A",{href:!0});var mwt=s(hJ);mLr=r(mwt,"FlaxPegasusModel"),mwt.forEach(t),fLr=r(HPe," (Pegasus model)"),HPe.forEach(t),gLr=i(ne),y3=n(ne,"LI",{});var UPe=s(y3);VMe=n(UPe,"STRONG",{});var fwt=s(VMe);hLr=r(fwt,"roberta"),fwt.forEach(t),uLr=r(UPe," \u2014 "),uJ=n(UPe,"A",{href:!0});var gwt=s(uJ);pLr=r(gwt,"FlaxRobertaModel"),gwt.forEach(t),_Lr=r(UPe," (RoBERTa model)"),UPe.forEach(t),bLr=i(ne),L3=n(ne,"LI",{});var JPe=s(L3);XMe=n(JPe,"STRONG",{});var hwt=s(XMe);vLr=r(hwt,"roformer"),hwt.forEach(t),FLr=r(JPe," \u2014 "),pJ=n(JPe,"A",{href:!0});var uwt=s(pJ);TLr=r(uwt,"FlaxRoFormerModel"),uwt.forEach(t),MLr=r(JPe," (RoFormer model)"),JPe.forEach(t),ELr=i(ne),x3=n(ne,"LI",{});var YPe=s(x3);zMe=n(YPe,"STRONG",{});var pwt=s(zMe);CLr=r(pwt,"t5"),pwt.forEach(t),wLr=r(YPe," \u2014 "),_J=n(YPe,"A",{href:!0});var _wt=s(_J);ALr=r(_wt,"FlaxT5Model"),_wt.forEach(t),yLr=r(YPe," (T5 model)"),YPe.forEach(t),LLr=i(ne),$3=n(ne,"LI",{});var KPe=s($3);WMe=n(KPe,"STRONG",{});var bwt=s(WMe);xLr=r(bwt,"vision-text-dual-encoder"),bwt.forEach(t),$Lr=r(KPe," \u2014 "),bJ=n(KPe,"A",{href:!0});var vwt=s(bJ);kLr=r(vwt,"FlaxVisionTextDualEncoderModel"),vwt.forEach(t),SLr=r(KPe," (VisionTextDualEncoder model)"),KPe.forEach(t),RLr=i(ne),k3=n(ne,"LI",{});var ZPe=s(k3);QMe=n(ZPe,"STRONG",{});var Fwt=s(QMe);PLr=r(Fwt,"vit"),Fwt.forEach(t),BLr=r(ZPe," \u2014 "),vJ=n(ZPe,"A",{href:!0});var Twt=s(vJ);ILr=r(Twt,"FlaxViTModel"),Twt.forEach(t),qLr=r(ZPe," (ViT model)"),ZPe.forEach(t),NLr=i(ne),S3=n(ne,"LI",{});var eBe=s(S3);HMe=n(eBe,"STRONG",{});var Mwt=s(HMe);jLr=r(Mwt,"wav2vec2"),Mwt.forEach(t),DLr=r(eBe," \u2014 "),FJ=n(eBe,"A",{href:!0});var Ewt=s(FJ);GLr=r(Ewt,"FlaxWav2Vec2Model"),Ewt.forEach(t),OLr=r(eBe," (Wav2Vec2 model)"),eBe.forEach(t),VLr=i(ne),R3=n(ne,"LI",{});var oBe=s(R3);UMe=n(oBe,"STRONG",{});var Cwt=s(UMe);XLr=r(Cwt,"xglm"),Cwt.forEach(t),zLr=r(oBe," \u2014 "),TJ=n(oBe,"A",{href:!0});var wwt=s(TJ);WLr=r(wwt,"FlaxXGLMModel"),wwt.forEach(t),QLr=r(oBe," (XGLM model)"),oBe.forEach(t),HLr=i(ne),P3=n(ne,"LI",{});var rBe=s(P3);JMe=n(rBe,"STRONG",{});var Awt=s(JMe);ULr=r(Awt,"xlm-roberta"),Awt.forEach(t),JLr=r(rBe," \u2014 "),MJ=n(rBe,"A",{href:!0});var ywt=s(MJ);YLr=r(ywt,"FlaxXLMRobertaModel"),ywt.forEach(t),KLr=r(rBe," (XLM-RoBERTa model)"),rBe.forEach(t),ne.forEach(t),ZLr=i(Gl),T(B3.$$.fragment,Gl),Gl.forEach(t),Dl.forEach(t),cNe=i(m),kc=n(m,"H2",{class:!0});var _De=s(kc);I3=n(_De,"A",{id:!0,class:!0,href:!0});var Lwt=s(I3);YMe=n(Lwt,"SPAN",{});var xwt=s(YMe);T(m7.$$.fragment,xwt),xwt.forEach(t),Lwt.forEach(t),e8r=i(_De),KMe=n(_De,"SPAN",{});var $wt=s(KMe);o8r=r($wt,"FlaxAutoModelForCausalLM"),$wt.forEach(t),_De.forEach(t),mNe=i(m),fr=n(m,"DIV",{class:!0});var Ol=s(fr);T(f7.$$.fragment,Ol),r8r=i(Ol),Sc=n(Ol,"P",{});var KZ=s(Sc);t8r=r(KZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),EJ=n(KZ,"A",{href:!0});var kwt=s(EJ);a8r=r(kwt,"from_pretrained()"),kwt.forEach(t),n8r=r(KZ," class method or the "),CJ=n(KZ,"A",{href:!0});var Swt=s(CJ);s8r=r(Swt,"from_config()"),Swt.forEach(t),l8r=r(KZ,` class
method.`),KZ.forEach(t),i8r=i(Ol),g7=n(Ol,"P",{});var bDe=s(g7);d8r=r(bDe,"This class cannot be instantiated directly using "),ZMe=n(bDe,"CODE",{});var Rwt=s(ZMe);c8r=r(Rwt,"__init__()"),Rwt.forEach(t),m8r=r(bDe," (throws an error)."),bDe.forEach(t),f8r=i(Ol),Ot=n(Ol,"DIV",{class:!0});var I0=s(Ot);T(h7.$$.fragment,I0),g8r=i(I0),e4e=n(I0,"P",{});var Pwt=s(e4e);h8r=r(Pwt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Pwt.forEach(t),u8r=i(I0),Rc=n(I0,"P",{});var ZZ=s(Rc);p8r=r(ZZ,`Note:
Loading a model from its configuration file does `),o4e=n(ZZ,"STRONG",{});var Bwt=s(o4e);_8r=r(Bwt,"not"),Bwt.forEach(t),b8r=r(ZZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),wJ=n(ZZ,"A",{href:!0});var Iwt=s(wJ);v8r=r(Iwt,"from_pretrained()"),Iwt.forEach(t),F8r=r(ZZ," to load the model weights."),ZZ.forEach(t),T8r=i(I0),T(q3.$$.fragment,I0),I0.forEach(t),M8r=i(Ol),Dr=n(Ol,"DIV",{class:!0});var Vl=s(Dr);T(u7.$$.fragment,Vl),E8r=i(Vl),r4e=n(Vl,"P",{});var qwt=s(r4e);C8r=r(qwt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),qwt.forEach(t),w8r=i(Vl),un=n(Vl,"P",{});var q0=s(un);A8r=r(q0,"The model class to instantiate is selected based on the "),t4e=n(q0,"CODE",{});var Nwt=s(t4e);y8r=r(Nwt,"model_type"),Nwt.forEach(t),L8r=r(q0,` property of the config object (either
passed as an argument or loaded from `),a4e=n(q0,"CODE",{});var jwt=s(a4e);x8r=r(jwt,"pretrained_model_name_or_path"),jwt.forEach(t),$8r=r(q0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),n4e=n(q0,"CODE",{});var Dwt=s(n4e);k8r=r(Dwt,"pretrained_model_name_or_path"),Dwt.forEach(t),S8r=r(q0,":"),q0.forEach(t),R8r=i(Vl),Re=n(Vl,"UL",{});var Xe=s(Re);N3=n(Xe,"LI",{});var tBe=s(N3);s4e=n(tBe,"STRONG",{});var Gwt=s(s4e);P8r=r(Gwt,"bart"),Gwt.forEach(t),B8r=r(tBe," \u2014 "),AJ=n(tBe,"A",{href:!0});var Owt=s(AJ);I8r=r(Owt,"FlaxBartForCausalLM"),Owt.forEach(t),q8r=r(tBe," (BART model)"),tBe.forEach(t),N8r=i(Xe),j3=n(Xe,"LI",{});var aBe=s(j3);l4e=n(aBe,"STRONG",{});var Vwt=s(l4e);j8r=r(Vwt,"bert"),Vwt.forEach(t),D8r=r(aBe," \u2014 "),yJ=n(aBe,"A",{href:!0});var Xwt=s(yJ);G8r=r(Xwt,"FlaxBertForCausalLM"),Xwt.forEach(t),O8r=r(aBe," (BERT model)"),aBe.forEach(t),V8r=i(Xe),D3=n(Xe,"LI",{});var nBe=s(D3);i4e=n(nBe,"STRONG",{});var zwt=s(i4e);X8r=r(zwt,"big_bird"),zwt.forEach(t),z8r=r(nBe," \u2014 "),LJ=n(nBe,"A",{href:!0});var Wwt=s(LJ);W8r=r(Wwt,"FlaxBigBirdForCausalLM"),Wwt.forEach(t),Q8r=r(nBe," (BigBird model)"),nBe.forEach(t),H8r=i(Xe),G3=n(Xe,"LI",{});var sBe=s(G3);d4e=n(sBe,"STRONG",{});var Qwt=s(d4e);U8r=r(Qwt,"electra"),Qwt.forEach(t),J8r=r(sBe," \u2014 "),xJ=n(sBe,"A",{href:!0});var Hwt=s(xJ);Y8r=r(Hwt,"FlaxElectraForCausalLM"),Hwt.forEach(t),K8r=r(sBe," (ELECTRA model)"),sBe.forEach(t),Z8r=i(Xe),O3=n(Xe,"LI",{});var lBe=s(O3);c4e=n(lBe,"STRONG",{});var Uwt=s(c4e);exr=r(Uwt,"gpt2"),Uwt.forEach(t),oxr=r(lBe," \u2014 "),$J=n(lBe,"A",{href:!0});var Jwt=s($J);rxr=r(Jwt,"FlaxGPT2LMHeadModel"),Jwt.forEach(t),txr=r(lBe," (OpenAI GPT-2 model)"),lBe.forEach(t),axr=i(Xe),V3=n(Xe,"LI",{});var iBe=s(V3);m4e=n(iBe,"STRONG",{});var Ywt=s(m4e);nxr=r(Ywt,"gpt_neo"),Ywt.forEach(t),sxr=r(iBe," \u2014 "),kJ=n(iBe,"A",{href:!0});var Kwt=s(kJ);lxr=r(Kwt,"FlaxGPTNeoForCausalLM"),Kwt.forEach(t),ixr=r(iBe," (GPT Neo model)"),iBe.forEach(t),dxr=i(Xe),X3=n(Xe,"LI",{});var dBe=s(X3);f4e=n(dBe,"STRONG",{});var Zwt=s(f4e);cxr=r(Zwt,"gptj"),Zwt.forEach(t),mxr=r(dBe," \u2014 "),SJ=n(dBe,"A",{href:!0});var eAt=s(SJ);fxr=r(eAt,"FlaxGPTJForCausalLM"),eAt.forEach(t),gxr=r(dBe," (GPT-J model)"),dBe.forEach(t),hxr=i(Xe),z3=n(Xe,"LI",{});var cBe=s(z3);g4e=n(cBe,"STRONG",{});var oAt=s(g4e);uxr=r(oAt,"roberta"),oAt.forEach(t),pxr=r(cBe," \u2014 "),RJ=n(cBe,"A",{href:!0});var rAt=s(RJ);_xr=r(rAt,"FlaxRobertaForCausalLM"),rAt.forEach(t),bxr=r(cBe," (RoBERTa model)"),cBe.forEach(t),vxr=i(Xe),W3=n(Xe,"LI",{});var mBe=s(W3);h4e=n(mBe,"STRONG",{});var tAt=s(h4e);Fxr=r(tAt,"xglm"),tAt.forEach(t),Txr=r(mBe," \u2014 "),PJ=n(mBe,"A",{href:!0});var aAt=s(PJ);Mxr=r(aAt,"FlaxXGLMForCausalLM"),aAt.forEach(t),Exr=r(mBe," (XGLM model)"),mBe.forEach(t),Xe.forEach(t),Cxr=i(Vl),T(Q3.$$.fragment,Vl),Vl.forEach(t),Ol.forEach(t),fNe=i(m),Pc=n(m,"H2",{class:!0});var vDe=s(Pc);H3=n(vDe,"A",{id:!0,class:!0,href:!0});var nAt=s(H3);u4e=n(nAt,"SPAN",{});var sAt=s(u4e);T(p7.$$.fragment,sAt),sAt.forEach(t),nAt.forEach(t),wxr=i(vDe),p4e=n(vDe,"SPAN",{});var lAt=s(p4e);Axr=r(lAt,"FlaxAutoModelForPreTraining"),lAt.forEach(t),vDe.forEach(t),gNe=i(m),gr=n(m,"DIV",{class:!0});var Xl=s(gr);T(_7.$$.fragment,Xl),yxr=i(Xl),Bc=n(Xl,"P",{});var eee=s(Bc);Lxr=r(eee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),BJ=n(eee,"A",{href:!0});var iAt=s(BJ);xxr=r(iAt,"from_pretrained()"),iAt.forEach(t),$xr=r(eee," class method or the "),IJ=n(eee,"A",{href:!0});var dAt=s(IJ);kxr=r(dAt,"from_config()"),dAt.forEach(t),Sxr=r(eee,` class
method.`),eee.forEach(t),Rxr=i(Xl),b7=n(Xl,"P",{});var FDe=s(b7);Pxr=r(FDe,"This class cannot be instantiated directly using "),_4e=n(FDe,"CODE",{});var cAt=s(_4e);Bxr=r(cAt,"__init__()"),cAt.forEach(t),Ixr=r(FDe," (throws an error)."),FDe.forEach(t),qxr=i(Xl),Vt=n(Xl,"DIV",{class:!0});var N0=s(Vt);T(v7.$$.fragment,N0),Nxr=i(N0),b4e=n(N0,"P",{});var mAt=s(b4e);jxr=r(mAt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),mAt.forEach(t),Dxr=i(N0),Ic=n(N0,"P",{});var oee=s(Ic);Gxr=r(oee,`Note:
Loading a model from its configuration file does `),v4e=n(oee,"STRONG",{});var fAt=s(v4e);Oxr=r(fAt,"not"),fAt.forEach(t),Vxr=r(oee,` load the model weights. It only affects the
model\u2019s configuration. Use `),qJ=n(oee,"A",{href:!0});var gAt=s(qJ);Xxr=r(gAt,"from_pretrained()"),gAt.forEach(t),zxr=r(oee," to load the model weights."),oee.forEach(t),Wxr=i(N0),T(U3.$$.fragment,N0),N0.forEach(t),Qxr=i(Xl),Gr=n(Xl,"DIV",{class:!0});var zl=s(Gr);T(F7.$$.fragment,zl),Hxr=i(zl),F4e=n(zl,"P",{});var hAt=s(F4e);Uxr=r(hAt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),hAt.forEach(t),Jxr=i(zl),pn=n(zl,"P",{});var j0=s(pn);Yxr=r(j0,"The model class to instantiate is selected based on the "),T4e=n(j0,"CODE",{});var uAt=s(T4e);Kxr=r(uAt,"model_type"),uAt.forEach(t),Zxr=r(j0,` property of the config object (either
passed as an argument or loaded from `),M4e=n(j0,"CODE",{});var pAt=s(M4e);e7r=r(pAt,"pretrained_model_name_or_path"),pAt.forEach(t),o7r=r(j0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E4e=n(j0,"CODE",{});var _At=s(E4e);r7r=r(_At,"pretrained_model_name_or_path"),_At.forEach(t),t7r=r(j0,":"),j0.forEach(t),a7r=i(zl),Me=n(zl,"UL",{});var we=s(Me);J3=n(we,"LI",{});var fBe=s(J3);C4e=n(fBe,"STRONG",{});var bAt=s(C4e);n7r=r(bAt,"albert"),bAt.forEach(t),s7r=r(fBe," \u2014 "),NJ=n(fBe,"A",{href:!0});var vAt=s(NJ);l7r=r(vAt,"FlaxAlbertForPreTraining"),vAt.forEach(t),i7r=r(fBe," (ALBERT model)"),fBe.forEach(t),d7r=i(we),Y3=n(we,"LI",{});var gBe=s(Y3);w4e=n(gBe,"STRONG",{});var FAt=s(w4e);c7r=r(FAt,"bart"),FAt.forEach(t),m7r=r(gBe," \u2014 "),jJ=n(gBe,"A",{href:!0});var TAt=s(jJ);f7r=r(TAt,"FlaxBartForConditionalGeneration"),TAt.forEach(t),g7r=r(gBe," (BART model)"),gBe.forEach(t),h7r=i(we),K3=n(we,"LI",{});var hBe=s(K3);A4e=n(hBe,"STRONG",{});var MAt=s(A4e);u7r=r(MAt,"bert"),MAt.forEach(t),p7r=r(hBe," \u2014 "),DJ=n(hBe,"A",{href:!0});var EAt=s(DJ);_7r=r(EAt,"FlaxBertForPreTraining"),EAt.forEach(t),b7r=r(hBe," (BERT model)"),hBe.forEach(t),v7r=i(we),Z3=n(we,"LI",{});var uBe=s(Z3);y4e=n(uBe,"STRONG",{});var CAt=s(y4e);F7r=r(CAt,"big_bird"),CAt.forEach(t),T7r=r(uBe," \u2014 "),GJ=n(uBe,"A",{href:!0});var wAt=s(GJ);M7r=r(wAt,"FlaxBigBirdForPreTraining"),wAt.forEach(t),E7r=r(uBe," (BigBird model)"),uBe.forEach(t),C7r=i(we),ew=n(we,"LI",{});var pBe=s(ew);L4e=n(pBe,"STRONG",{});var AAt=s(L4e);w7r=r(AAt,"electra"),AAt.forEach(t),A7r=r(pBe," \u2014 "),OJ=n(pBe,"A",{href:!0});var yAt=s(OJ);y7r=r(yAt,"FlaxElectraForPreTraining"),yAt.forEach(t),L7r=r(pBe," (ELECTRA model)"),pBe.forEach(t),x7r=i(we),ow=n(we,"LI",{});var _Be=s(ow);x4e=n(_Be,"STRONG",{});var LAt=s(x4e);$7r=r(LAt,"mbart"),LAt.forEach(t),k7r=r(_Be," \u2014 "),VJ=n(_Be,"A",{href:!0});var xAt=s(VJ);S7r=r(xAt,"FlaxMBartForConditionalGeneration"),xAt.forEach(t),R7r=r(_Be," (mBART model)"),_Be.forEach(t),P7r=i(we),rw=n(we,"LI",{});var bBe=s(rw);$4e=n(bBe,"STRONG",{});var $At=s($4e);B7r=r($At,"mt5"),$At.forEach(t),I7r=r(bBe," \u2014 "),XJ=n(bBe,"A",{href:!0});var kAt=s(XJ);q7r=r(kAt,"FlaxMT5ForConditionalGeneration"),kAt.forEach(t),N7r=r(bBe," (mT5 model)"),bBe.forEach(t),j7r=i(we),tw=n(we,"LI",{});var vBe=s(tw);k4e=n(vBe,"STRONG",{});var SAt=s(k4e);D7r=r(SAt,"roberta"),SAt.forEach(t),G7r=r(vBe," \u2014 "),zJ=n(vBe,"A",{href:!0});var RAt=s(zJ);O7r=r(RAt,"FlaxRobertaForMaskedLM"),RAt.forEach(t),V7r=r(vBe," (RoBERTa model)"),vBe.forEach(t),X7r=i(we),aw=n(we,"LI",{});var FBe=s(aw);S4e=n(FBe,"STRONG",{});var PAt=s(S4e);z7r=r(PAt,"roformer"),PAt.forEach(t),W7r=r(FBe," \u2014 "),WJ=n(FBe,"A",{href:!0});var BAt=s(WJ);Q7r=r(BAt,"FlaxRoFormerForMaskedLM"),BAt.forEach(t),H7r=r(FBe," (RoFormer model)"),FBe.forEach(t),U7r=i(we),nw=n(we,"LI",{});var TBe=s(nw);R4e=n(TBe,"STRONG",{});var IAt=s(R4e);J7r=r(IAt,"t5"),IAt.forEach(t),Y7r=r(TBe," \u2014 "),QJ=n(TBe,"A",{href:!0});var qAt=s(QJ);K7r=r(qAt,"FlaxT5ForConditionalGeneration"),qAt.forEach(t),Z7r=r(TBe," (T5 model)"),TBe.forEach(t),e9r=i(we),sw=n(we,"LI",{});var MBe=s(sw);P4e=n(MBe,"STRONG",{});var NAt=s(P4e);o9r=r(NAt,"wav2vec2"),NAt.forEach(t),r9r=r(MBe," \u2014 "),HJ=n(MBe,"A",{href:!0});var jAt=s(HJ);t9r=r(jAt,"FlaxWav2Vec2ForPreTraining"),jAt.forEach(t),a9r=r(MBe," (Wav2Vec2 model)"),MBe.forEach(t),n9r=i(we),lw=n(we,"LI",{});var EBe=s(lw);B4e=n(EBe,"STRONG",{});var DAt=s(B4e);s9r=r(DAt,"xlm-roberta"),DAt.forEach(t),l9r=r(EBe," \u2014 "),UJ=n(EBe,"A",{href:!0});var GAt=s(UJ);i9r=r(GAt,"FlaxXLMRobertaForMaskedLM"),GAt.forEach(t),d9r=r(EBe," (XLM-RoBERTa model)"),EBe.forEach(t),we.forEach(t),c9r=i(zl),T(iw.$$.fragment,zl),zl.forEach(t),Xl.forEach(t),hNe=i(m),qc=n(m,"H2",{class:!0});var TDe=s(qc);dw=n(TDe,"A",{id:!0,class:!0,href:!0});var OAt=s(dw);I4e=n(OAt,"SPAN",{});var VAt=s(I4e);T(T7.$$.fragment,VAt),VAt.forEach(t),OAt.forEach(t),m9r=i(TDe),q4e=n(TDe,"SPAN",{});var XAt=s(q4e);f9r=r(XAt,"FlaxAutoModelForMaskedLM"),XAt.forEach(t),TDe.forEach(t),uNe=i(m),hr=n(m,"DIV",{class:!0});var Wl=s(hr);T(M7.$$.fragment,Wl),g9r=i(Wl),Nc=n(Wl,"P",{});var ree=s(Nc);h9r=r(ree,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),JJ=n(ree,"A",{href:!0});var zAt=s(JJ);u9r=r(zAt,"from_pretrained()"),zAt.forEach(t),p9r=r(ree," class method or the "),YJ=n(ree,"A",{href:!0});var WAt=s(YJ);_9r=r(WAt,"from_config()"),WAt.forEach(t),b9r=r(ree,` class
method.`),ree.forEach(t),v9r=i(Wl),E7=n(Wl,"P",{});var MDe=s(E7);F9r=r(MDe,"This class cannot be instantiated directly using "),N4e=n(MDe,"CODE",{});var QAt=s(N4e);T9r=r(QAt,"__init__()"),QAt.forEach(t),M9r=r(MDe," (throws an error)."),MDe.forEach(t),E9r=i(Wl),Xt=n(Wl,"DIV",{class:!0});var D0=s(Xt);T(C7.$$.fragment,D0),C9r=i(D0),j4e=n(D0,"P",{});var HAt=s(j4e);w9r=r(HAt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),HAt.forEach(t),A9r=i(D0),jc=n(D0,"P",{});var tee=s(jc);y9r=r(tee,`Note:
Loading a model from its configuration file does `),D4e=n(tee,"STRONG",{});var UAt=s(D4e);L9r=r(UAt,"not"),UAt.forEach(t),x9r=r(tee,` load the model weights. It only affects the
model\u2019s configuration. Use `),KJ=n(tee,"A",{href:!0});var JAt=s(KJ);$9r=r(JAt,"from_pretrained()"),JAt.forEach(t),k9r=r(tee," to load the model weights."),tee.forEach(t),S9r=i(D0),T(cw.$$.fragment,D0),D0.forEach(t),R9r=i(Wl),Or=n(Wl,"DIV",{class:!0});var Ql=s(Or);T(w7.$$.fragment,Ql),P9r=i(Ql),G4e=n(Ql,"P",{});var YAt=s(G4e);B9r=r(YAt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),YAt.forEach(t),I9r=i(Ql),_n=n(Ql,"P",{});var G0=s(_n);q9r=r(G0,"The model class to instantiate is selected based on the "),O4e=n(G0,"CODE",{});var KAt=s(O4e);N9r=r(KAt,"model_type"),KAt.forEach(t),j9r=r(G0,` property of the config object (either
passed as an argument or loaded from `),V4e=n(G0,"CODE",{});var ZAt=s(V4e);D9r=r(ZAt,"pretrained_model_name_or_path"),ZAt.forEach(t),G9r=r(G0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X4e=n(G0,"CODE",{});var e6t=s(X4e);O9r=r(e6t,"pretrained_model_name_or_path"),e6t.forEach(t),V9r=r(G0,":"),G0.forEach(t),X9r=i(Ql),Le=n(Ql,"UL",{});var Ie=s(Le);mw=n(Ie,"LI",{});var CBe=s(mw);z4e=n(CBe,"STRONG",{});var o6t=s(z4e);z9r=r(o6t,"albert"),o6t.forEach(t),W9r=r(CBe," \u2014 "),ZJ=n(CBe,"A",{href:!0});var r6t=s(ZJ);Q9r=r(r6t,"FlaxAlbertForMaskedLM"),r6t.forEach(t),H9r=r(CBe," (ALBERT model)"),CBe.forEach(t),U9r=i(Ie),fw=n(Ie,"LI",{});var wBe=s(fw);W4e=n(wBe,"STRONG",{});var t6t=s(W4e);J9r=r(t6t,"bart"),t6t.forEach(t),Y9r=r(wBe," \u2014 "),eY=n(wBe,"A",{href:!0});var a6t=s(eY);K9r=r(a6t,"FlaxBartForConditionalGeneration"),a6t.forEach(t),Z9r=r(wBe," (BART model)"),wBe.forEach(t),e$r=i(Ie),gw=n(Ie,"LI",{});var ABe=s(gw);Q4e=n(ABe,"STRONG",{});var n6t=s(Q4e);o$r=r(n6t,"bert"),n6t.forEach(t),r$r=r(ABe," \u2014 "),oY=n(ABe,"A",{href:!0});var s6t=s(oY);t$r=r(s6t,"FlaxBertForMaskedLM"),s6t.forEach(t),a$r=r(ABe," (BERT model)"),ABe.forEach(t),n$r=i(Ie),hw=n(Ie,"LI",{});var yBe=s(hw);H4e=n(yBe,"STRONG",{});var l6t=s(H4e);s$r=r(l6t,"big_bird"),l6t.forEach(t),l$r=r(yBe," \u2014 "),rY=n(yBe,"A",{href:!0});var i6t=s(rY);i$r=r(i6t,"FlaxBigBirdForMaskedLM"),i6t.forEach(t),d$r=r(yBe," (BigBird model)"),yBe.forEach(t),c$r=i(Ie),uw=n(Ie,"LI",{});var LBe=s(uw);U4e=n(LBe,"STRONG",{});var d6t=s(U4e);m$r=r(d6t,"distilbert"),d6t.forEach(t),f$r=r(LBe," \u2014 "),tY=n(LBe,"A",{href:!0});var c6t=s(tY);g$r=r(c6t,"FlaxDistilBertForMaskedLM"),c6t.forEach(t),h$r=r(LBe," (DistilBERT model)"),LBe.forEach(t),u$r=i(Ie),pw=n(Ie,"LI",{});var xBe=s(pw);J4e=n(xBe,"STRONG",{});var m6t=s(J4e);p$r=r(m6t,"electra"),m6t.forEach(t),_$r=r(xBe," \u2014 "),aY=n(xBe,"A",{href:!0});var f6t=s(aY);b$r=r(f6t,"FlaxElectraForMaskedLM"),f6t.forEach(t),v$r=r(xBe," (ELECTRA model)"),xBe.forEach(t),F$r=i(Ie),_w=n(Ie,"LI",{});var $Be=s(_w);Y4e=n($Be,"STRONG",{});var g6t=s(Y4e);T$r=r(g6t,"mbart"),g6t.forEach(t),M$r=r($Be," \u2014 "),nY=n($Be,"A",{href:!0});var h6t=s(nY);E$r=r(h6t,"FlaxMBartForConditionalGeneration"),h6t.forEach(t),C$r=r($Be," (mBART model)"),$Be.forEach(t),w$r=i(Ie),bw=n(Ie,"LI",{});var kBe=s(bw);K4e=n(kBe,"STRONG",{});var u6t=s(K4e);A$r=r(u6t,"roberta"),u6t.forEach(t),y$r=r(kBe," \u2014 "),sY=n(kBe,"A",{href:!0});var p6t=s(sY);L$r=r(p6t,"FlaxRobertaForMaskedLM"),p6t.forEach(t),x$r=r(kBe," (RoBERTa model)"),kBe.forEach(t),$$r=i(Ie),vw=n(Ie,"LI",{});var SBe=s(vw);Z4e=n(SBe,"STRONG",{});var _6t=s(Z4e);k$r=r(_6t,"roformer"),_6t.forEach(t),S$r=r(SBe," \u2014 "),lY=n(SBe,"A",{href:!0});var b6t=s(lY);R$r=r(b6t,"FlaxRoFormerForMaskedLM"),b6t.forEach(t),P$r=r(SBe," (RoFormer model)"),SBe.forEach(t),B$r=i(Ie),Fw=n(Ie,"LI",{});var RBe=s(Fw);eEe=n(RBe,"STRONG",{});var v6t=s(eEe);I$r=r(v6t,"xlm-roberta"),v6t.forEach(t),q$r=r(RBe," \u2014 "),iY=n(RBe,"A",{href:!0});var F6t=s(iY);N$r=r(F6t,"FlaxXLMRobertaForMaskedLM"),F6t.forEach(t),j$r=r(RBe," (XLM-RoBERTa model)"),RBe.forEach(t),Ie.forEach(t),D$r=i(Ql),T(Tw.$$.fragment,Ql),Ql.forEach(t),Wl.forEach(t),pNe=i(m),Dc=n(m,"H2",{class:!0});var EDe=s(Dc);Mw=n(EDe,"A",{id:!0,class:!0,href:!0});var T6t=s(Mw);oEe=n(T6t,"SPAN",{});var M6t=s(oEe);T(A7.$$.fragment,M6t),M6t.forEach(t),T6t.forEach(t),G$r=i(EDe),rEe=n(EDe,"SPAN",{});var E6t=s(rEe);O$r=r(E6t,"FlaxAutoModelForSeq2SeqLM"),E6t.forEach(t),EDe.forEach(t),_Ne=i(m),ur=n(m,"DIV",{class:!0});var Hl=s(ur);T(y7.$$.fragment,Hl),V$r=i(Hl),Gc=n(Hl,"P",{});var aee=s(Gc);X$r=r(aee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),dY=n(aee,"A",{href:!0});var C6t=s(dY);z$r=r(C6t,"from_pretrained()"),C6t.forEach(t),W$r=r(aee," class method or the "),cY=n(aee,"A",{href:!0});var w6t=s(cY);Q$r=r(w6t,"from_config()"),w6t.forEach(t),H$r=r(aee,` class
method.`),aee.forEach(t),U$r=i(Hl),L7=n(Hl,"P",{});var CDe=s(L7);J$r=r(CDe,"This class cannot be instantiated directly using "),tEe=n(CDe,"CODE",{});var A6t=s(tEe);Y$r=r(A6t,"__init__()"),A6t.forEach(t),K$r=r(CDe," (throws an error)."),CDe.forEach(t),Z$r=i(Hl),zt=n(Hl,"DIV",{class:!0});var O0=s(zt);T(x7.$$.fragment,O0),ekr=i(O0),aEe=n(O0,"P",{});var y6t=s(aEe);okr=r(y6t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),y6t.forEach(t),rkr=i(O0),Oc=n(O0,"P",{});var nee=s(Oc);tkr=r(nee,`Note:
Loading a model from its configuration file does `),nEe=n(nee,"STRONG",{});var L6t=s(nEe);akr=r(L6t,"not"),L6t.forEach(t),nkr=r(nee,` load the model weights. It only affects the
model\u2019s configuration. Use `),mY=n(nee,"A",{href:!0});var x6t=s(mY);skr=r(x6t,"from_pretrained()"),x6t.forEach(t),lkr=r(nee," to load the model weights."),nee.forEach(t),ikr=i(O0),T(Ew.$$.fragment,O0),O0.forEach(t),dkr=i(Hl),Vr=n(Hl,"DIV",{class:!0});var Ul=s(Vr);T($7.$$.fragment,Ul),ckr=i(Ul),sEe=n(Ul,"P",{});var $6t=s(sEe);mkr=r($6t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),$6t.forEach(t),fkr=i(Ul),bn=n(Ul,"P",{});var V0=s(bn);gkr=r(V0,"The model class to instantiate is selected based on the "),lEe=n(V0,"CODE",{});var k6t=s(lEe);hkr=r(k6t,"model_type"),k6t.forEach(t),ukr=r(V0,` property of the config object (either
passed as an argument or loaded from `),iEe=n(V0,"CODE",{});var S6t=s(iEe);pkr=r(S6t,"pretrained_model_name_or_path"),S6t.forEach(t),_kr=r(V0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dEe=n(V0,"CODE",{});var R6t=s(dEe);bkr=r(R6t,"pretrained_model_name_or_path"),R6t.forEach(t),vkr=r(V0,":"),V0.forEach(t),Fkr=i(Ul),Pe=n(Ul,"UL",{});var ze=s(Pe);Cw=n(ze,"LI",{});var PBe=s(Cw);cEe=n(PBe,"STRONG",{});var P6t=s(cEe);Tkr=r(P6t,"bart"),P6t.forEach(t),Mkr=r(PBe," \u2014 "),fY=n(PBe,"A",{href:!0});var B6t=s(fY);Ekr=r(B6t,"FlaxBartForConditionalGeneration"),B6t.forEach(t),Ckr=r(PBe," (BART model)"),PBe.forEach(t),wkr=i(ze),ww=n(ze,"LI",{});var BBe=s(ww);mEe=n(BBe,"STRONG",{});var I6t=s(mEe);Akr=r(I6t,"blenderbot"),I6t.forEach(t),ykr=r(BBe," \u2014 "),gY=n(BBe,"A",{href:!0});var q6t=s(gY);Lkr=r(q6t,"FlaxBlenderbotForConditionalGeneration"),q6t.forEach(t),xkr=r(BBe," (Blenderbot model)"),BBe.forEach(t),$kr=i(ze),Aw=n(ze,"LI",{});var IBe=s(Aw);fEe=n(IBe,"STRONG",{});var N6t=s(fEe);kkr=r(N6t,"blenderbot-small"),N6t.forEach(t),Skr=r(IBe," \u2014 "),hY=n(IBe,"A",{href:!0});var j6t=s(hY);Rkr=r(j6t,"FlaxBlenderbotSmallForConditionalGeneration"),j6t.forEach(t),Pkr=r(IBe," (BlenderbotSmall model)"),IBe.forEach(t),Bkr=i(ze),yw=n(ze,"LI",{});var qBe=s(yw);gEe=n(qBe,"STRONG",{});var D6t=s(gEe);Ikr=r(D6t,"encoder-decoder"),D6t.forEach(t),qkr=r(qBe," \u2014 "),uY=n(qBe,"A",{href:!0});var G6t=s(uY);Nkr=r(G6t,"FlaxEncoderDecoderModel"),G6t.forEach(t),jkr=r(qBe," (Encoder decoder model)"),qBe.forEach(t),Dkr=i(ze),Lw=n(ze,"LI",{});var NBe=s(Lw);hEe=n(NBe,"STRONG",{});var O6t=s(hEe);Gkr=r(O6t,"marian"),O6t.forEach(t),Okr=r(NBe," \u2014 "),pY=n(NBe,"A",{href:!0});var V6t=s(pY);Vkr=r(V6t,"FlaxMarianMTModel"),V6t.forEach(t),Xkr=r(NBe," (Marian model)"),NBe.forEach(t),zkr=i(ze),xw=n(ze,"LI",{});var jBe=s(xw);uEe=n(jBe,"STRONG",{});var X6t=s(uEe);Wkr=r(X6t,"mbart"),X6t.forEach(t),Qkr=r(jBe," \u2014 "),_Y=n(jBe,"A",{href:!0});var z6t=s(_Y);Hkr=r(z6t,"FlaxMBartForConditionalGeneration"),z6t.forEach(t),Ukr=r(jBe," (mBART model)"),jBe.forEach(t),Jkr=i(ze),$w=n(ze,"LI",{});var DBe=s($w);pEe=n(DBe,"STRONG",{});var W6t=s(pEe);Ykr=r(W6t,"mt5"),W6t.forEach(t),Kkr=r(DBe," \u2014 "),bY=n(DBe,"A",{href:!0});var Q6t=s(bY);Zkr=r(Q6t,"FlaxMT5ForConditionalGeneration"),Q6t.forEach(t),eSr=r(DBe," (mT5 model)"),DBe.forEach(t),oSr=i(ze),kw=n(ze,"LI",{});var GBe=s(kw);_Ee=n(GBe,"STRONG",{});var H6t=s(_Ee);rSr=r(H6t,"pegasus"),H6t.forEach(t),tSr=r(GBe," \u2014 "),vY=n(GBe,"A",{href:!0});var U6t=s(vY);aSr=r(U6t,"FlaxPegasusForConditionalGeneration"),U6t.forEach(t),nSr=r(GBe," (Pegasus model)"),GBe.forEach(t),sSr=i(ze),Sw=n(ze,"LI",{});var OBe=s(Sw);bEe=n(OBe,"STRONG",{});var J6t=s(bEe);lSr=r(J6t,"t5"),J6t.forEach(t),iSr=r(OBe," \u2014 "),FY=n(OBe,"A",{href:!0});var Y6t=s(FY);dSr=r(Y6t,"FlaxT5ForConditionalGeneration"),Y6t.forEach(t),cSr=r(OBe," (T5 model)"),OBe.forEach(t),ze.forEach(t),mSr=i(Ul),T(Rw.$$.fragment,Ul),Ul.forEach(t),Hl.forEach(t),bNe=i(m),Vc=n(m,"H2",{class:!0});var wDe=s(Vc);Pw=n(wDe,"A",{id:!0,class:!0,href:!0});var K6t=s(Pw);vEe=n(K6t,"SPAN",{});var Z6t=s(vEe);T(k7.$$.fragment,Z6t),Z6t.forEach(t),K6t.forEach(t),fSr=i(wDe),FEe=n(wDe,"SPAN",{});var e0t=s(FEe);gSr=r(e0t,"FlaxAutoModelForSequenceClassification"),e0t.forEach(t),wDe.forEach(t),vNe=i(m),pr=n(m,"DIV",{class:!0});var Jl=s(pr);T(S7.$$.fragment,Jl),hSr=i(Jl),Xc=n(Jl,"P",{});var see=s(Xc);uSr=r(see,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),TY=n(see,"A",{href:!0});var o0t=s(TY);pSr=r(o0t,"from_pretrained()"),o0t.forEach(t),_Sr=r(see," class method or the "),MY=n(see,"A",{href:!0});var r0t=s(MY);bSr=r(r0t,"from_config()"),r0t.forEach(t),vSr=r(see,` class
method.`),see.forEach(t),FSr=i(Jl),R7=n(Jl,"P",{});var ADe=s(R7);TSr=r(ADe,"This class cannot be instantiated directly using "),TEe=n(ADe,"CODE",{});var t0t=s(TEe);MSr=r(t0t,"__init__()"),t0t.forEach(t),ESr=r(ADe," (throws an error)."),ADe.forEach(t),CSr=i(Jl),Wt=n(Jl,"DIV",{class:!0});var X0=s(Wt);T(P7.$$.fragment,X0),wSr=i(X0),MEe=n(X0,"P",{});var a0t=s(MEe);ASr=r(a0t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),a0t.forEach(t),ySr=i(X0),zc=n(X0,"P",{});var lee=s(zc);LSr=r(lee,`Note:
Loading a model from its configuration file does `),EEe=n(lee,"STRONG",{});var n0t=s(EEe);xSr=r(n0t,"not"),n0t.forEach(t),$Sr=r(lee,` load the model weights. It only affects the
model\u2019s configuration. Use `),EY=n(lee,"A",{href:!0});var s0t=s(EY);kSr=r(s0t,"from_pretrained()"),s0t.forEach(t),SSr=r(lee," to load the model weights."),lee.forEach(t),RSr=i(X0),T(Bw.$$.fragment,X0),X0.forEach(t),PSr=i(Jl),Xr=n(Jl,"DIV",{class:!0});var Yl=s(Xr);T(B7.$$.fragment,Yl),BSr=i(Yl),CEe=n(Yl,"P",{});var l0t=s(CEe);ISr=r(l0t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),l0t.forEach(t),qSr=i(Yl),vn=n(Yl,"P",{});var z0=s(vn);NSr=r(z0,"The model class to instantiate is selected based on the "),wEe=n(z0,"CODE",{});var i0t=s(wEe);jSr=r(i0t,"model_type"),i0t.forEach(t),DSr=r(z0,` property of the config object (either
passed as an argument or loaded from `),AEe=n(z0,"CODE",{});var d0t=s(AEe);GSr=r(d0t,"pretrained_model_name_or_path"),d0t.forEach(t),OSr=r(z0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yEe=n(z0,"CODE",{});var c0t=s(yEe);VSr=r(c0t,"pretrained_model_name_or_path"),c0t.forEach(t),XSr=r(z0,":"),z0.forEach(t),zSr=i(Yl),xe=n(Yl,"UL",{});var qe=s(xe);Iw=n(qe,"LI",{});var VBe=s(Iw);LEe=n(VBe,"STRONG",{});var m0t=s(LEe);WSr=r(m0t,"albert"),m0t.forEach(t),QSr=r(VBe," \u2014 "),CY=n(VBe,"A",{href:!0});var f0t=s(CY);HSr=r(f0t,"FlaxAlbertForSequenceClassification"),f0t.forEach(t),USr=r(VBe," (ALBERT model)"),VBe.forEach(t),JSr=i(qe),qw=n(qe,"LI",{});var XBe=s(qw);xEe=n(XBe,"STRONG",{});var g0t=s(xEe);YSr=r(g0t,"bart"),g0t.forEach(t),KSr=r(XBe," \u2014 "),wY=n(XBe,"A",{href:!0});var h0t=s(wY);ZSr=r(h0t,"FlaxBartForSequenceClassification"),h0t.forEach(t),eRr=r(XBe," (BART model)"),XBe.forEach(t),oRr=i(qe),Nw=n(qe,"LI",{});var zBe=s(Nw);$Ee=n(zBe,"STRONG",{});var u0t=s($Ee);rRr=r(u0t,"bert"),u0t.forEach(t),tRr=r(zBe," \u2014 "),AY=n(zBe,"A",{href:!0});var p0t=s(AY);aRr=r(p0t,"FlaxBertForSequenceClassification"),p0t.forEach(t),nRr=r(zBe," (BERT model)"),zBe.forEach(t),sRr=i(qe),jw=n(qe,"LI",{});var WBe=s(jw);kEe=n(WBe,"STRONG",{});var _0t=s(kEe);lRr=r(_0t,"big_bird"),_0t.forEach(t),iRr=r(WBe," \u2014 "),yY=n(WBe,"A",{href:!0});var b0t=s(yY);dRr=r(b0t,"FlaxBigBirdForSequenceClassification"),b0t.forEach(t),cRr=r(WBe," (BigBird model)"),WBe.forEach(t),mRr=i(qe),Dw=n(qe,"LI",{});var QBe=s(Dw);SEe=n(QBe,"STRONG",{});var v0t=s(SEe);fRr=r(v0t,"distilbert"),v0t.forEach(t),gRr=r(QBe," \u2014 "),LY=n(QBe,"A",{href:!0});var F0t=s(LY);hRr=r(F0t,"FlaxDistilBertForSequenceClassification"),F0t.forEach(t),uRr=r(QBe," (DistilBERT model)"),QBe.forEach(t),pRr=i(qe),Gw=n(qe,"LI",{});var HBe=s(Gw);REe=n(HBe,"STRONG",{});var T0t=s(REe);_Rr=r(T0t,"electra"),T0t.forEach(t),bRr=r(HBe," \u2014 "),xY=n(HBe,"A",{href:!0});var M0t=s(xY);vRr=r(M0t,"FlaxElectraForSequenceClassification"),M0t.forEach(t),FRr=r(HBe," (ELECTRA model)"),HBe.forEach(t),TRr=i(qe),Ow=n(qe,"LI",{});var UBe=s(Ow);PEe=n(UBe,"STRONG",{});var E0t=s(PEe);MRr=r(E0t,"mbart"),E0t.forEach(t),ERr=r(UBe," \u2014 "),$Y=n(UBe,"A",{href:!0});var C0t=s($Y);CRr=r(C0t,"FlaxMBartForSequenceClassification"),C0t.forEach(t),wRr=r(UBe," (mBART model)"),UBe.forEach(t),ARr=i(qe),Vw=n(qe,"LI",{});var JBe=s(Vw);BEe=n(JBe,"STRONG",{});var w0t=s(BEe);yRr=r(w0t,"roberta"),w0t.forEach(t),LRr=r(JBe," \u2014 "),kY=n(JBe,"A",{href:!0});var A0t=s(kY);xRr=r(A0t,"FlaxRobertaForSequenceClassification"),A0t.forEach(t),$Rr=r(JBe," (RoBERTa model)"),JBe.forEach(t),kRr=i(qe),Xw=n(qe,"LI",{});var YBe=s(Xw);IEe=n(YBe,"STRONG",{});var y0t=s(IEe);SRr=r(y0t,"roformer"),y0t.forEach(t),RRr=r(YBe," \u2014 "),SY=n(YBe,"A",{href:!0});var L0t=s(SY);PRr=r(L0t,"FlaxRoFormerForSequenceClassification"),L0t.forEach(t),BRr=r(YBe," (RoFormer model)"),YBe.forEach(t),IRr=i(qe),zw=n(qe,"LI",{});var KBe=s(zw);qEe=n(KBe,"STRONG",{});var x0t=s(qEe);qRr=r(x0t,"xlm-roberta"),x0t.forEach(t),NRr=r(KBe," \u2014 "),RY=n(KBe,"A",{href:!0});var $0t=s(RY);jRr=r($0t,"FlaxXLMRobertaForSequenceClassification"),$0t.forEach(t),DRr=r(KBe," (XLM-RoBERTa model)"),KBe.forEach(t),qe.forEach(t),GRr=i(Yl),T(Ww.$$.fragment,Yl),Yl.forEach(t),Jl.forEach(t),FNe=i(m),Wc=n(m,"H2",{class:!0});var yDe=s(Wc);Qw=n(yDe,"A",{id:!0,class:!0,href:!0});var k0t=s(Qw);NEe=n(k0t,"SPAN",{});var S0t=s(NEe);T(I7.$$.fragment,S0t),S0t.forEach(t),k0t.forEach(t),ORr=i(yDe),jEe=n(yDe,"SPAN",{});var R0t=s(jEe);VRr=r(R0t,"FlaxAutoModelForQuestionAnswering"),R0t.forEach(t),yDe.forEach(t),TNe=i(m),_r=n(m,"DIV",{class:!0});var Kl=s(_r);T(q7.$$.fragment,Kl),XRr=i(Kl),Qc=n(Kl,"P",{});var iee=s(Qc);zRr=r(iee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),PY=n(iee,"A",{href:!0});var P0t=s(PY);WRr=r(P0t,"from_pretrained()"),P0t.forEach(t),QRr=r(iee," class method or the "),BY=n(iee,"A",{href:!0});var B0t=s(BY);HRr=r(B0t,"from_config()"),B0t.forEach(t),URr=r(iee,` class
method.`),iee.forEach(t),JRr=i(Kl),N7=n(Kl,"P",{});var LDe=s(N7);YRr=r(LDe,"This class cannot be instantiated directly using "),DEe=n(LDe,"CODE",{});var I0t=s(DEe);KRr=r(I0t,"__init__()"),I0t.forEach(t),ZRr=r(LDe," (throws an error)."),LDe.forEach(t),ePr=i(Kl),Qt=n(Kl,"DIV",{class:!0});var W0=s(Qt);T(j7.$$.fragment,W0),oPr=i(W0),GEe=n(W0,"P",{});var q0t=s(GEe);rPr=r(q0t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),q0t.forEach(t),tPr=i(W0),Hc=n(W0,"P",{});var dee=s(Hc);aPr=r(dee,`Note:
Loading a model from its configuration file does `),OEe=n(dee,"STRONG",{});var N0t=s(OEe);nPr=r(N0t,"not"),N0t.forEach(t),sPr=r(dee,` load the model weights. It only affects the
model\u2019s configuration. Use `),IY=n(dee,"A",{href:!0});var j0t=s(IY);lPr=r(j0t,"from_pretrained()"),j0t.forEach(t),iPr=r(dee," to load the model weights."),dee.forEach(t),dPr=i(W0),T(Hw.$$.fragment,W0),W0.forEach(t),cPr=i(Kl),zr=n(Kl,"DIV",{class:!0});var Zl=s(zr);T(D7.$$.fragment,Zl),mPr=i(Zl),VEe=n(Zl,"P",{});var D0t=s(VEe);fPr=r(D0t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),D0t.forEach(t),gPr=i(Zl),Fn=n(Zl,"P",{});var Q0=s(Fn);hPr=r(Q0,"The model class to instantiate is selected based on the "),XEe=n(Q0,"CODE",{});var G0t=s(XEe);uPr=r(G0t,"model_type"),G0t.forEach(t),pPr=r(Q0,` property of the config object (either
passed as an argument or loaded from `),zEe=n(Q0,"CODE",{});var O0t=s(zEe);_Pr=r(O0t,"pretrained_model_name_or_path"),O0t.forEach(t),bPr=r(Q0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),WEe=n(Q0,"CODE",{});var V0t=s(WEe);vPr=r(V0t,"pretrained_model_name_or_path"),V0t.forEach(t),FPr=r(Q0,":"),Q0.forEach(t),TPr=i(Zl),$e=n(Zl,"UL",{});var Ne=s($e);Uw=n(Ne,"LI",{});var ZBe=s(Uw);QEe=n(ZBe,"STRONG",{});var X0t=s(QEe);MPr=r(X0t,"albert"),X0t.forEach(t),EPr=r(ZBe," \u2014 "),qY=n(ZBe,"A",{href:!0});var z0t=s(qY);CPr=r(z0t,"FlaxAlbertForQuestionAnswering"),z0t.forEach(t),wPr=r(ZBe," (ALBERT model)"),ZBe.forEach(t),APr=i(Ne),Jw=n(Ne,"LI",{});var eIe=s(Jw);HEe=n(eIe,"STRONG",{});var W0t=s(HEe);yPr=r(W0t,"bart"),W0t.forEach(t),LPr=r(eIe," \u2014 "),NY=n(eIe,"A",{href:!0});var Q0t=s(NY);xPr=r(Q0t,"FlaxBartForQuestionAnswering"),Q0t.forEach(t),$Pr=r(eIe," (BART model)"),eIe.forEach(t),kPr=i(Ne),Yw=n(Ne,"LI",{});var oIe=s(Yw);UEe=n(oIe,"STRONG",{});var H0t=s(UEe);SPr=r(H0t,"bert"),H0t.forEach(t),RPr=r(oIe," \u2014 "),jY=n(oIe,"A",{href:!0});var U0t=s(jY);PPr=r(U0t,"FlaxBertForQuestionAnswering"),U0t.forEach(t),BPr=r(oIe," (BERT model)"),oIe.forEach(t),IPr=i(Ne),Kw=n(Ne,"LI",{});var rIe=s(Kw);JEe=n(rIe,"STRONG",{});var J0t=s(JEe);qPr=r(J0t,"big_bird"),J0t.forEach(t),NPr=r(rIe," \u2014 "),DY=n(rIe,"A",{href:!0});var Y0t=s(DY);jPr=r(Y0t,"FlaxBigBirdForQuestionAnswering"),Y0t.forEach(t),DPr=r(rIe," (BigBird model)"),rIe.forEach(t),GPr=i(Ne),Zw=n(Ne,"LI",{});var tIe=s(Zw);YEe=n(tIe,"STRONG",{});var K0t=s(YEe);OPr=r(K0t,"distilbert"),K0t.forEach(t),VPr=r(tIe," \u2014 "),GY=n(tIe,"A",{href:!0});var Z0t=s(GY);XPr=r(Z0t,"FlaxDistilBertForQuestionAnswering"),Z0t.forEach(t),zPr=r(tIe," (DistilBERT model)"),tIe.forEach(t),WPr=i(Ne),eA=n(Ne,"LI",{});var aIe=s(eA);KEe=n(aIe,"STRONG",{});var eyt=s(KEe);QPr=r(eyt,"electra"),eyt.forEach(t),HPr=r(aIe," \u2014 "),OY=n(aIe,"A",{href:!0});var oyt=s(OY);UPr=r(oyt,"FlaxElectraForQuestionAnswering"),oyt.forEach(t),JPr=r(aIe," (ELECTRA model)"),aIe.forEach(t),YPr=i(Ne),oA=n(Ne,"LI",{});var nIe=s(oA);ZEe=n(nIe,"STRONG",{});var ryt=s(ZEe);KPr=r(ryt,"mbart"),ryt.forEach(t),ZPr=r(nIe," \u2014 "),VY=n(nIe,"A",{href:!0});var tyt=s(VY);eBr=r(tyt,"FlaxMBartForQuestionAnswering"),tyt.forEach(t),oBr=r(nIe," (mBART model)"),nIe.forEach(t),rBr=i(Ne),rA=n(Ne,"LI",{});var sIe=s(rA);eCe=n(sIe,"STRONG",{});var ayt=s(eCe);tBr=r(ayt,"roberta"),ayt.forEach(t),aBr=r(sIe," \u2014 "),XY=n(sIe,"A",{href:!0});var nyt=s(XY);nBr=r(nyt,"FlaxRobertaForQuestionAnswering"),nyt.forEach(t),sBr=r(sIe," (RoBERTa model)"),sIe.forEach(t),lBr=i(Ne),tA=n(Ne,"LI",{});var lIe=s(tA);oCe=n(lIe,"STRONG",{});var syt=s(oCe);iBr=r(syt,"roformer"),syt.forEach(t),dBr=r(lIe," \u2014 "),zY=n(lIe,"A",{href:!0});var lyt=s(zY);cBr=r(lyt,"FlaxRoFormerForQuestionAnswering"),lyt.forEach(t),mBr=r(lIe," (RoFormer model)"),lIe.forEach(t),fBr=i(Ne),aA=n(Ne,"LI",{});var iIe=s(aA);rCe=n(iIe,"STRONG",{});var iyt=s(rCe);gBr=r(iyt,"xlm-roberta"),iyt.forEach(t),hBr=r(iIe," \u2014 "),WY=n(iIe,"A",{href:!0});var dyt=s(WY);uBr=r(dyt,"FlaxXLMRobertaForQuestionAnswering"),dyt.forEach(t),pBr=r(iIe," (XLM-RoBERTa model)"),iIe.forEach(t),Ne.forEach(t),_Br=i(Zl),T(nA.$$.fragment,Zl),Zl.forEach(t),Kl.forEach(t),MNe=i(m),Uc=n(m,"H2",{class:!0});var xDe=s(Uc);sA=n(xDe,"A",{id:!0,class:!0,href:!0});var cyt=s(sA);tCe=n(cyt,"SPAN",{});var myt=s(tCe);T(G7.$$.fragment,myt),myt.forEach(t),cyt.forEach(t),bBr=i(xDe),aCe=n(xDe,"SPAN",{});var fyt=s(aCe);vBr=r(fyt,"FlaxAutoModelForTokenClassification"),fyt.forEach(t),xDe.forEach(t),ENe=i(m),br=n(m,"DIV",{class:!0});var ei=s(br);T(O7.$$.fragment,ei),FBr=i(ei),Jc=n(ei,"P",{});var cee=s(Jc);TBr=r(cee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),QY=n(cee,"A",{href:!0});var gyt=s(QY);MBr=r(gyt,"from_pretrained()"),gyt.forEach(t),EBr=r(cee," class method or the "),HY=n(cee,"A",{href:!0});var hyt=s(HY);CBr=r(hyt,"from_config()"),hyt.forEach(t),wBr=r(cee,` class
method.`),cee.forEach(t),ABr=i(ei),V7=n(ei,"P",{});var $De=s(V7);yBr=r($De,"This class cannot be instantiated directly using "),nCe=n($De,"CODE",{});var uyt=s(nCe);LBr=r(uyt,"__init__()"),uyt.forEach(t),xBr=r($De," (throws an error)."),$De.forEach(t),$Br=i(ei),Ht=n(ei,"DIV",{class:!0});var H0=s(Ht);T(X7.$$.fragment,H0),kBr=i(H0),sCe=n(H0,"P",{});var pyt=s(sCe);SBr=r(pyt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),pyt.forEach(t),RBr=i(H0),Yc=n(H0,"P",{});var mee=s(Yc);PBr=r(mee,`Note:
Loading a model from its configuration file does `),lCe=n(mee,"STRONG",{});var _yt=s(lCe);BBr=r(_yt,"not"),_yt.forEach(t),IBr=r(mee,` load the model weights. It only affects the
model\u2019s configuration. Use `),UY=n(mee,"A",{href:!0});var byt=s(UY);qBr=r(byt,"from_pretrained()"),byt.forEach(t),NBr=r(mee," to load the model weights."),mee.forEach(t),jBr=i(H0),T(lA.$$.fragment,H0),H0.forEach(t),DBr=i(ei),Wr=n(ei,"DIV",{class:!0});var oi=s(Wr);T(z7.$$.fragment,oi),GBr=i(oi),iCe=n(oi,"P",{});var vyt=s(iCe);OBr=r(vyt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),vyt.forEach(t),VBr=i(oi),Tn=n(oi,"P",{});var U0=s(Tn);XBr=r(U0,"The model class to instantiate is selected based on the "),dCe=n(U0,"CODE",{});var Fyt=s(dCe);zBr=r(Fyt,"model_type"),Fyt.forEach(t),WBr=r(U0,` property of the config object (either
passed as an argument or loaded from `),cCe=n(U0,"CODE",{});var Tyt=s(cCe);QBr=r(Tyt,"pretrained_model_name_or_path"),Tyt.forEach(t),HBr=r(U0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mCe=n(U0,"CODE",{});var Myt=s(mCe);UBr=r(Myt,"pretrained_model_name_or_path"),Myt.forEach(t),JBr=r(U0,":"),U0.forEach(t),YBr=i(oi),De=n(oi,"UL",{});var Fo=s(De);iA=n(Fo,"LI",{});var dIe=s(iA);fCe=n(dIe,"STRONG",{});var Eyt=s(fCe);KBr=r(Eyt,"albert"),Eyt.forEach(t),ZBr=r(dIe," \u2014 "),JY=n(dIe,"A",{href:!0});var Cyt=s(JY);eIr=r(Cyt,"FlaxAlbertForTokenClassification"),Cyt.forEach(t),oIr=r(dIe," (ALBERT model)"),dIe.forEach(t),rIr=i(Fo),dA=n(Fo,"LI",{});var cIe=s(dA);gCe=n(cIe,"STRONG",{});var wyt=s(gCe);tIr=r(wyt,"bert"),wyt.forEach(t),aIr=r(cIe," \u2014 "),YY=n(cIe,"A",{href:!0});var Ayt=s(YY);nIr=r(Ayt,"FlaxBertForTokenClassification"),Ayt.forEach(t),sIr=r(cIe," (BERT model)"),cIe.forEach(t),lIr=i(Fo),cA=n(Fo,"LI",{});var mIe=s(cA);hCe=n(mIe,"STRONG",{});var yyt=s(hCe);iIr=r(yyt,"big_bird"),yyt.forEach(t),dIr=r(mIe," \u2014 "),KY=n(mIe,"A",{href:!0});var Lyt=s(KY);cIr=r(Lyt,"FlaxBigBirdForTokenClassification"),Lyt.forEach(t),mIr=r(mIe," (BigBird model)"),mIe.forEach(t),fIr=i(Fo),mA=n(Fo,"LI",{});var fIe=s(mA);uCe=n(fIe,"STRONG",{});var xyt=s(uCe);gIr=r(xyt,"distilbert"),xyt.forEach(t),hIr=r(fIe," \u2014 "),ZY=n(fIe,"A",{href:!0});var $yt=s(ZY);uIr=r($yt,"FlaxDistilBertForTokenClassification"),$yt.forEach(t),pIr=r(fIe," (DistilBERT model)"),fIe.forEach(t),_Ir=i(Fo),fA=n(Fo,"LI",{});var gIe=s(fA);pCe=n(gIe,"STRONG",{});var kyt=s(pCe);bIr=r(kyt,"electra"),kyt.forEach(t),vIr=r(gIe," \u2014 "),eK=n(gIe,"A",{href:!0});var Syt=s(eK);FIr=r(Syt,"FlaxElectraForTokenClassification"),Syt.forEach(t),TIr=r(gIe," (ELECTRA model)"),gIe.forEach(t),MIr=i(Fo),gA=n(Fo,"LI",{});var hIe=s(gA);_Ce=n(hIe,"STRONG",{});var Ryt=s(_Ce);EIr=r(Ryt,"roberta"),Ryt.forEach(t),CIr=r(hIe," \u2014 "),oK=n(hIe,"A",{href:!0});var Pyt=s(oK);wIr=r(Pyt,"FlaxRobertaForTokenClassification"),Pyt.forEach(t),AIr=r(hIe," (RoBERTa model)"),hIe.forEach(t),yIr=i(Fo),hA=n(Fo,"LI",{});var uIe=s(hA);bCe=n(uIe,"STRONG",{});var Byt=s(bCe);LIr=r(Byt,"roformer"),Byt.forEach(t),xIr=r(uIe," \u2014 "),rK=n(uIe,"A",{href:!0});var Iyt=s(rK);$Ir=r(Iyt,"FlaxRoFormerForTokenClassification"),Iyt.forEach(t),kIr=r(uIe," (RoFormer model)"),uIe.forEach(t),SIr=i(Fo),uA=n(Fo,"LI",{});var pIe=s(uA);vCe=n(pIe,"STRONG",{});var qyt=s(vCe);RIr=r(qyt,"xlm-roberta"),qyt.forEach(t),PIr=r(pIe," \u2014 "),tK=n(pIe,"A",{href:!0});var Nyt=s(tK);BIr=r(Nyt,"FlaxXLMRobertaForTokenClassification"),Nyt.forEach(t),IIr=r(pIe," (XLM-RoBERTa model)"),pIe.forEach(t),Fo.forEach(t),qIr=i(oi),T(pA.$$.fragment,oi),oi.forEach(t),ei.forEach(t),CNe=i(m),Kc=n(m,"H2",{class:!0});var kDe=s(Kc);_A=n(kDe,"A",{id:!0,class:!0,href:!0});var jyt=s(_A);FCe=n(jyt,"SPAN",{});var Dyt=s(FCe);T(W7.$$.fragment,Dyt),Dyt.forEach(t),jyt.forEach(t),NIr=i(kDe),TCe=n(kDe,"SPAN",{});var Gyt=s(TCe);jIr=r(Gyt,"FlaxAutoModelForMultipleChoice"),Gyt.forEach(t),kDe.forEach(t),wNe=i(m),vr=n(m,"DIV",{class:!0});var ri=s(vr);T(Q7.$$.fragment,ri),DIr=i(ri),Zc=n(ri,"P",{});var fee=s(Zc);GIr=r(fee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),aK=n(fee,"A",{href:!0});var Oyt=s(aK);OIr=r(Oyt,"from_pretrained()"),Oyt.forEach(t),VIr=r(fee," class method or the "),nK=n(fee,"A",{href:!0});var Vyt=s(nK);XIr=r(Vyt,"from_config()"),Vyt.forEach(t),zIr=r(fee,` class
method.`),fee.forEach(t),WIr=i(ri),H7=n(ri,"P",{});var SDe=s(H7);QIr=r(SDe,"This class cannot be instantiated directly using "),MCe=n(SDe,"CODE",{});var Xyt=s(MCe);HIr=r(Xyt,"__init__()"),Xyt.forEach(t),UIr=r(SDe," (throws an error)."),SDe.forEach(t),JIr=i(ri),Ut=n(ri,"DIV",{class:!0});var J0=s(Ut);T(U7.$$.fragment,J0),YIr=i(J0),ECe=n(J0,"P",{});var zyt=s(ECe);KIr=r(zyt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),zyt.forEach(t),ZIr=i(J0),em=n(J0,"P",{});var gee=s(em);eqr=r(gee,`Note:
Loading a model from its configuration file does `),CCe=n(gee,"STRONG",{});var Wyt=s(CCe);oqr=r(Wyt,"not"),Wyt.forEach(t),rqr=r(gee,` load the model weights. It only affects the
model\u2019s configuration. Use `),sK=n(gee,"A",{href:!0});var Qyt=s(sK);tqr=r(Qyt,"from_pretrained()"),Qyt.forEach(t),aqr=r(gee," to load the model weights."),gee.forEach(t),nqr=i(J0),T(bA.$$.fragment,J0),J0.forEach(t),sqr=i(ri),Qr=n(ri,"DIV",{class:!0});var ti=s(Qr);T(J7.$$.fragment,ti),lqr=i(ti),wCe=n(ti,"P",{});var Hyt=s(wCe);iqr=r(Hyt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Hyt.forEach(t),dqr=i(ti),Mn=n(ti,"P",{});var Y0=s(Mn);cqr=r(Y0,"The model class to instantiate is selected based on the "),ACe=n(Y0,"CODE",{});var Uyt=s(ACe);mqr=r(Uyt,"model_type"),Uyt.forEach(t),fqr=r(Y0,` property of the config object (either
passed as an argument or loaded from `),yCe=n(Y0,"CODE",{});var Jyt=s(yCe);gqr=r(Jyt,"pretrained_model_name_or_path"),Jyt.forEach(t),hqr=r(Y0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),LCe=n(Y0,"CODE",{});var Yyt=s(LCe);uqr=r(Yyt,"pretrained_model_name_or_path"),Yyt.forEach(t),pqr=r(Y0,":"),Y0.forEach(t),_qr=i(ti),Ge=n(ti,"UL",{});var To=s(Ge);vA=n(To,"LI",{});var _Ie=s(vA);xCe=n(_Ie,"STRONG",{});var Kyt=s(xCe);bqr=r(Kyt,"albert"),Kyt.forEach(t),vqr=r(_Ie," \u2014 "),lK=n(_Ie,"A",{href:!0});var Zyt=s(lK);Fqr=r(Zyt,"FlaxAlbertForMultipleChoice"),Zyt.forEach(t),Tqr=r(_Ie," (ALBERT model)"),_Ie.forEach(t),Mqr=i(To),FA=n(To,"LI",{});var bIe=s(FA);$Ce=n(bIe,"STRONG",{});var eLt=s($Ce);Eqr=r(eLt,"bert"),eLt.forEach(t),Cqr=r(bIe," \u2014 "),iK=n(bIe,"A",{href:!0});var oLt=s(iK);wqr=r(oLt,"FlaxBertForMultipleChoice"),oLt.forEach(t),Aqr=r(bIe," (BERT model)"),bIe.forEach(t),yqr=i(To),TA=n(To,"LI",{});var vIe=s(TA);kCe=n(vIe,"STRONG",{});var rLt=s(kCe);Lqr=r(rLt,"big_bird"),rLt.forEach(t),xqr=r(vIe," \u2014 "),dK=n(vIe,"A",{href:!0});var tLt=s(dK);$qr=r(tLt,"FlaxBigBirdForMultipleChoice"),tLt.forEach(t),kqr=r(vIe," (BigBird model)"),vIe.forEach(t),Sqr=i(To),MA=n(To,"LI",{});var FIe=s(MA);SCe=n(FIe,"STRONG",{});var aLt=s(SCe);Rqr=r(aLt,"distilbert"),aLt.forEach(t),Pqr=r(FIe," \u2014 "),cK=n(FIe,"A",{href:!0});var nLt=s(cK);Bqr=r(nLt,"FlaxDistilBertForMultipleChoice"),nLt.forEach(t),Iqr=r(FIe," (DistilBERT model)"),FIe.forEach(t),qqr=i(To),EA=n(To,"LI",{});var TIe=s(EA);RCe=n(TIe,"STRONG",{});var sLt=s(RCe);Nqr=r(sLt,"electra"),sLt.forEach(t),jqr=r(TIe," \u2014 "),mK=n(TIe,"A",{href:!0});var lLt=s(mK);Dqr=r(lLt,"FlaxElectraForMultipleChoice"),lLt.forEach(t),Gqr=r(TIe," (ELECTRA model)"),TIe.forEach(t),Oqr=i(To),CA=n(To,"LI",{});var MIe=s(CA);PCe=n(MIe,"STRONG",{});var iLt=s(PCe);Vqr=r(iLt,"roberta"),iLt.forEach(t),Xqr=r(MIe," \u2014 "),fK=n(MIe,"A",{href:!0});var dLt=s(fK);zqr=r(dLt,"FlaxRobertaForMultipleChoice"),dLt.forEach(t),Wqr=r(MIe," (RoBERTa model)"),MIe.forEach(t),Qqr=i(To),wA=n(To,"LI",{});var EIe=s(wA);BCe=n(EIe,"STRONG",{});var cLt=s(BCe);Hqr=r(cLt,"roformer"),cLt.forEach(t),Uqr=r(EIe," \u2014 "),gK=n(EIe,"A",{href:!0});var mLt=s(gK);Jqr=r(mLt,"FlaxRoFormerForMultipleChoice"),mLt.forEach(t),Yqr=r(EIe," (RoFormer model)"),EIe.forEach(t),Kqr=i(To),AA=n(To,"LI",{});var CIe=s(AA);ICe=n(CIe,"STRONG",{});var fLt=s(ICe);Zqr=r(fLt,"xlm-roberta"),fLt.forEach(t),eNr=r(CIe," \u2014 "),hK=n(CIe,"A",{href:!0});var gLt=s(hK);oNr=r(gLt,"FlaxXLMRobertaForMultipleChoice"),gLt.forEach(t),rNr=r(CIe," (XLM-RoBERTa model)"),CIe.forEach(t),To.forEach(t),tNr=i(ti),T(yA.$$.fragment,ti),ti.forEach(t),ri.forEach(t),ANe=i(m),om=n(m,"H2",{class:!0});var RDe=s(om);LA=n(RDe,"A",{id:!0,class:!0,href:!0});var hLt=s(LA);qCe=n(hLt,"SPAN",{});var uLt=s(qCe);T(Y7.$$.fragment,uLt),uLt.forEach(t),hLt.forEach(t),aNr=i(RDe),NCe=n(RDe,"SPAN",{});var pLt=s(NCe);nNr=r(pLt,"FlaxAutoModelForNextSentencePrediction"),pLt.forEach(t),RDe.forEach(t),yNe=i(m),Fr=n(m,"DIV",{class:!0});var ai=s(Fr);T(K7.$$.fragment,ai),sNr=i(ai),rm=n(ai,"P",{});var hee=s(rm);lNr=r(hee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),uK=n(hee,"A",{href:!0});var _Lt=s(uK);iNr=r(_Lt,"from_pretrained()"),_Lt.forEach(t),dNr=r(hee," class method or the "),pK=n(hee,"A",{href:!0});var bLt=s(pK);cNr=r(bLt,"from_config()"),bLt.forEach(t),mNr=r(hee,` class
method.`),hee.forEach(t),fNr=i(ai),Z7=n(ai,"P",{});var PDe=s(Z7);gNr=r(PDe,"This class cannot be instantiated directly using "),jCe=n(PDe,"CODE",{});var vLt=s(jCe);hNr=r(vLt,"__init__()"),vLt.forEach(t),uNr=r(PDe," (throws an error)."),PDe.forEach(t),pNr=i(ai),Jt=n(ai,"DIV",{class:!0});var K0=s(Jt);T(e9.$$.fragment,K0),_Nr=i(K0),DCe=n(K0,"P",{});var FLt=s(DCe);bNr=r(FLt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),FLt.forEach(t),vNr=i(K0),tm=n(K0,"P",{});var uee=s(tm);FNr=r(uee,`Note:
Loading a model from its configuration file does `),GCe=n(uee,"STRONG",{});var TLt=s(GCe);TNr=r(TLt,"not"),TLt.forEach(t),MNr=r(uee,` load the model weights. It only affects the
model\u2019s configuration. Use `),_K=n(uee,"A",{href:!0});var MLt=s(_K);ENr=r(MLt,"from_pretrained()"),MLt.forEach(t),CNr=r(uee," to load the model weights."),uee.forEach(t),wNr=i(K0),T(xA.$$.fragment,K0),K0.forEach(t),ANr=i(ai),Hr=n(ai,"DIV",{class:!0});var ni=s(Hr);T(o9.$$.fragment,ni),yNr=i(ni),OCe=n(ni,"P",{});var ELt=s(OCe);LNr=r(ELt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),ELt.forEach(t),xNr=i(ni),En=n(ni,"P",{});var Z0=s(En);$Nr=r(Z0,"The model class to instantiate is selected based on the "),VCe=n(Z0,"CODE",{});var CLt=s(VCe);kNr=r(CLt,"model_type"),CLt.forEach(t),SNr=r(Z0,` property of the config object (either
passed as an argument or loaded from `),XCe=n(Z0,"CODE",{});var wLt=s(XCe);RNr=r(wLt,"pretrained_model_name_or_path"),wLt.forEach(t),PNr=r(Z0,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zCe=n(Z0,"CODE",{});var ALt=s(zCe);BNr=r(ALt,"pretrained_model_name_or_path"),ALt.forEach(t),INr=r(Z0,":"),Z0.forEach(t),qNr=i(ni),WCe=n(ni,"UL",{});var yLt=s(WCe);$A=n(yLt,"LI",{});var wIe=s($A);QCe=n(wIe,"STRONG",{});var LLt=s(QCe);NNr=r(LLt,"bert"),LLt.forEach(t),jNr=r(wIe," \u2014 "),bK=n(wIe,"A",{href:!0});var xLt=s(bK);DNr=r(xLt,"FlaxBertForNextSentencePrediction"),xLt.forEach(t),GNr=r(wIe," (BERT model)"),wIe.forEach(t),yLt.forEach(t),ONr=i(ni),T(kA.$$.fragment,ni),ni.forEach(t),ai.forEach(t),LNe=i(m),am=n(m,"H2",{class:!0});var BDe=s(am);SA=n(BDe,"A",{id:!0,class:!0,href:!0});var $Lt=s(SA);HCe=n($Lt,"SPAN",{});var kLt=s(HCe);T(r9.$$.fragment,kLt),kLt.forEach(t),$Lt.forEach(t),VNr=i(BDe),UCe=n(BDe,"SPAN",{});var SLt=s(UCe);XNr=r(SLt,"FlaxAutoModelForImageClassification"),SLt.forEach(t),BDe.forEach(t),xNe=i(m),Tr=n(m,"DIV",{class:!0});var si=s(Tr);T(t9.$$.fragment,si),zNr=i(si),nm=n(si,"P",{});var pee=s(nm);WNr=r(pee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),vK=n(pee,"A",{href:!0});var RLt=s(vK);QNr=r(RLt,"from_pretrained()"),RLt.forEach(t),HNr=r(pee," class method or the "),FK=n(pee,"A",{href:!0});var PLt=s(FK);UNr=r(PLt,"from_config()"),PLt.forEach(t),JNr=r(pee,` class
method.`),pee.forEach(t),YNr=i(si),a9=n(si,"P",{});var IDe=s(a9);KNr=r(IDe,"This class cannot be instantiated directly using "),JCe=n(IDe,"CODE",{});var BLt=s(JCe);ZNr=r(BLt,"__init__()"),BLt.forEach(t),ejr=r(IDe," (throws an error)."),IDe.forEach(t),ojr=i(si),Yt=n(si,"DIV",{class:!0});var ey=s(Yt);T(n9.$$.fragment,ey),rjr=i(ey),YCe=n(ey,"P",{});var ILt=s(YCe);tjr=r(ILt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),ILt.forEach(t),ajr=i(ey),sm=n(ey,"P",{});var _ee=s(sm);njr=r(_ee,`Note:
Loading a model from its configuration file does `),KCe=n(_ee,"STRONG",{});var qLt=s(KCe);sjr=r(qLt,"not"),qLt.forEach(t),ljr=r(_ee,` load the model weights. It only affects the
model\u2019s configuration. Use `),TK=n(_ee,"A",{href:!0});var NLt=s(TK);ijr=r(NLt,"from_pretrained()"),NLt.forEach(t),djr=r(_ee," to load the model weights."),_ee.forEach(t),cjr=i(ey),T(RA.$$.fragment,ey),ey.forEach(t),mjr=i(si),Ur=n(si,"DIV",{class:!0});var li=s(Ur);T(s9.$$.fragment,li),fjr=i(li),ZCe=n(li,"P",{});var jLt=s(ZCe);gjr=r(jLt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),jLt.forEach(t),hjr=i(li),Cn=n(li,"P",{});var oy=s(Cn);ujr=r(oy,"The model class to instantiate is selected based on the "),e5e=n(oy,"CODE",{});var DLt=s(e5e);pjr=r(DLt,"model_type"),DLt.forEach(t),_jr=r(oy,` property of the config object (either
passed as an argument or loaded from `),o5e=n(oy,"CODE",{});var GLt=s(o5e);bjr=r(GLt,"pretrained_model_name_or_path"),GLt.forEach(t),vjr=r(oy,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r5e=n(oy,"CODE",{});var OLt=s(r5e);Fjr=r(OLt,"pretrained_model_name_or_path"),OLt.forEach(t),Tjr=r(oy,":"),oy.forEach(t),Mjr=i(li),l9=n(li,"UL",{});var qDe=s(l9);PA=n(qDe,"LI",{});var AIe=s(PA);t5e=n(AIe,"STRONG",{});var VLt=s(t5e);Ejr=r(VLt,"beit"),VLt.forEach(t),Cjr=r(AIe," \u2014 "),MK=n(AIe,"A",{href:!0});var XLt=s(MK);wjr=r(XLt,"FlaxBeitForImageClassification"),XLt.forEach(t),Ajr=r(AIe," (BEiT model)"),AIe.forEach(t),yjr=i(qDe),BA=n(qDe,"LI",{});var yIe=s(BA);a5e=n(yIe,"STRONG",{});var zLt=s(a5e);Ljr=r(zLt,"vit"),zLt.forEach(t),xjr=r(yIe," \u2014 "),EK=n(yIe,"A",{href:!0});var WLt=s(EK);$jr=r(WLt,"FlaxViTForImageClassification"),WLt.forEach(t),kjr=r(yIe," (ViT model)"),yIe.forEach(t),qDe.forEach(t),Sjr=i(li),T(IA.$$.fragment,li),li.forEach(t),si.forEach(t),$Ne=i(m),lm=n(m,"H2",{class:!0});var NDe=s(lm);qA=n(NDe,"A",{id:!0,class:!0,href:!0});var QLt=s(qA);n5e=n(QLt,"SPAN",{});var HLt=s(n5e);T(i9.$$.fragment,HLt),HLt.forEach(t),QLt.forEach(t),Rjr=i(NDe),s5e=n(NDe,"SPAN",{});var ULt=s(s5e);Pjr=r(ULt,"FlaxAutoModelForVision2Seq"),ULt.forEach(t),NDe.forEach(t),kNe=i(m),Mr=n(m,"DIV",{class:!0});var ii=s(Mr);T(d9.$$.fragment,ii),Bjr=i(ii),im=n(ii,"P",{});var bee=s(im);Ijr=r(bee,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),CK=n(bee,"A",{href:!0});var JLt=s(CK);qjr=r(JLt,"from_pretrained()"),JLt.forEach(t),Njr=r(bee," class method or the "),wK=n(bee,"A",{href:!0});var YLt=s(wK);jjr=r(YLt,"from_config()"),YLt.forEach(t),Djr=r(bee,` class
method.`),bee.forEach(t),Gjr=i(ii),c9=n(ii,"P",{});var jDe=s(c9);Ojr=r(jDe,"This class cannot be instantiated directly using "),l5e=n(jDe,"CODE",{});var KLt=s(l5e);Vjr=r(KLt,"__init__()"),KLt.forEach(t),Xjr=r(jDe," (throws an error)."),jDe.forEach(t),zjr=i(ii),Kt=n(ii,"DIV",{class:!0});var ry=s(Kt);T(m9.$$.fragment,ry),Wjr=i(ry),i5e=n(ry,"P",{});var ZLt=s(i5e);Qjr=r(ZLt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),ZLt.forEach(t),Hjr=i(ry),dm=n(ry,"P",{});var vee=s(dm);Ujr=r(vee,`Note:
Loading a model from its configuration file does `),d5e=n(vee,"STRONG",{});var e8t=s(d5e);Jjr=r(e8t,"not"),e8t.forEach(t),Yjr=r(vee,` load the model weights. It only affects the
model\u2019s configuration. Use `),AK=n(vee,"A",{href:!0});var o8t=s(AK);Kjr=r(o8t,"from_pretrained()"),o8t.forEach(t),Zjr=r(vee," to load the model weights."),vee.forEach(t),eDr=i(ry),T(NA.$$.fragment,ry),ry.forEach(t),oDr=i(ii),Jr=n(ii,"DIV",{class:!0});var di=s(Jr);T(f9.$$.fragment,di),rDr=i(di),c5e=n(di,"P",{});var r8t=s(c5e);tDr=r(r8t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),r8t.forEach(t),aDr=i(di),wn=n(di,"P",{});var ty=s(wn);nDr=r(ty,"The model class to instantiate is selected based on the "),m5e=n(ty,"CODE",{});var t8t=s(m5e);sDr=r(t8t,"model_type"),t8t.forEach(t),lDr=r(ty,` property of the config object (either
passed as an argument or loaded from `),f5e=n(ty,"CODE",{});var a8t=s(f5e);iDr=r(a8t,"pretrained_model_name_or_path"),a8t.forEach(t),dDr=r(ty,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),g5e=n(ty,"CODE",{});var n8t=s(g5e);cDr=r(n8t,"pretrained_model_name_or_path"),n8t.forEach(t),mDr=r(ty,":"),ty.forEach(t),fDr=i(di),h5e=n(di,"UL",{});var s8t=s(h5e);jA=n(s8t,"LI",{});var LIe=s(jA);u5e=n(LIe,"STRONG",{});var l8t=s(u5e);gDr=r(l8t,"vision-encoder-decoder"),l8t.forEach(t),hDr=r(LIe," \u2014 "),yK=n(LIe,"A",{href:!0});var i8t=s(yK);uDr=r(i8t,"FlaxVisionEncoderDecoderModel"),i8t.forEach(t),pDr=r(LIe," (Vision Encoder decoder model)"),LIe.forEach(t),s8t.forEach(t),_Dr=i(di),T(DA.$$.fragment,di),di.forEach(t),ii.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(f7t)),c(f,"id","auto-classes"),c(f,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(f,"href","#auto-classes"),c(u,"class","relative group"),c(yn,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoConfig"),c(xn,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoModel"),c($n,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoTokenizer"),c(pi,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertModel"),c(_m,"id","extending-the-auto-classes"),c(_m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_m,"href","#extending-the-auto-classes"),c(_i,"class","relative group"),c(vm,"id","transformers.AutoConfig"),c(vm,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vm,"href","#transformers.AutoConfig"),c(bi,"class","relative group"),c(k$,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(S$,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig"),c(R$,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartConfig"),c(P$,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig"),c(B$,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertConfig"),c(I$,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(q$,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig"),c(N$,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(j$,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(D$,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(G$,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig"),c(O$,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig"),c(V$,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig"),c(X$,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig"),c(z$,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig"),c(W$,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig"),c(Q$,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(H$,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(U$,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(J$,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig"),c(Y$,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(K$,"href","/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(Z$,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig"),c(ek,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig"),c(ok,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig"),c(rk,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRConfig"),c(tk,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTConfig"),c(ak,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig"),c(nk,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(sk,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig"),c(lk,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaConfig"),c(ik,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig"),c(dk,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig"),c(ck,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig"),c(mk,"href","/docs/transformers/main/en/model_doc/glpn#transformers.GLPNConfig"),c(fk,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config"),c(gk,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(hk,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig"),c(uk,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig"),c(pk,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig"),c(_k,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(bk,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(vk,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(Fk,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDConfig"),c(Tk,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig"),c(Mk,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig"),c(Ek,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig"),c(Ck,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Config"),c(wk,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig"),c(Ak,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(yk,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig"),c(Lk,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(xk,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig"),c($k,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig"),c(kk,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config"),c(Sk,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(Rk,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(Pk,"href","/docs/transformers/main/en/model_doc/opt#transformers.OPTConfig"),c(Bk,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig"),c(Ik,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig"),c(qk,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig"),c(Nk,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(jk,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(Dk,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(Gk,"href","/docs/transformers/main/en/model_doc/rag#transformers.RagConfig"),c(Ok,"href","/docs/transformers/main/en/model_doc/realm#transformers.RealmConfig"),c(Vk,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig"),c(Xk,"href","/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig"),c(zk,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig"),c(Wk,"href","/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig"),c(Qk,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertConfig"),c(Hk,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig"),c(Uk,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig"),c(Jk,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig"),c(Yk,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig"),c(Kk,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig"),c(Zk,"href","/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(eS,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(oS,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(rS,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig"),c(tS,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(aS,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig"),c(nS,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Config"),c(sS,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig"),c(lS,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(iS,"href","/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRConfig"),c(dS,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(cS,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(mS,"href","/docs/transformers/main/en/model_doc/van#transformers.VanConfig"),c(fS,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltConfig"),c(gS,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(hS,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(uS,"href","/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(pS,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig"),c(_S,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(bS,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(vS,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerConfig"),c(FS,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig"),c(TS,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig"),c(MS,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig"),c(ES,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(CS,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(wS,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(AS,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig"),c(yS,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosConfig"),c(LS,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fg,"id","transformers.AutoTokenizer"),c(Fg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Fg,"href","#transformers.AutoTokenizer"),c(Fi,"class","relative group"),c(xS,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c($S,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizer"),c(kS,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(SS,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartTokenizer"),c(RS,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartTokenizerFast"),c(PS,"href","/docs/transformers/main/en/model_doc/barthez#transformers.BarthezTokenizer"),c(BS,"href","/docs/transformers/main/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(IS,"href","/docs/transformers/main/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(qS,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(NS,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(jS,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(DS,"href","/docs/transformers/main/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(GS,"href","/docs/transformers/main/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(OS,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(VS,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(XS,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(zS,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(WS,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(QS,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(HS,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(US,"href","/docs/transformers/main/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(JS,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertTokenizer"),c(YS,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(KS,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineTokenizer"),c(ZS,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizer"),c(eR,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(oR,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(rR,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(tR,"href","/docs/transformers/main/en/model_doc/cpm#transformers.CpmTokenizer"),c(aR,"href","/docs/transformers/main/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(nR,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(sR,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),c(lR,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(iR,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaTokenizer"),c(dR,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(cR,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(mR,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(fR,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(gR,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(hR,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(uR,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(pR,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraTokenizer"),c(_R,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(bR,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(vR,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetTokenizer"),c(FR,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(TR,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(MR,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelTokenizer"),c(ER,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(CR,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(wR,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(AR,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(yR,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(LR,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(xR,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c($R,"href","/docs/transformers/main/en/model_doc/herbert#transformers.HerbertTokenizer"),c(kR,"href","/docs/transformers/main/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(SR,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(RR,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),c(PR,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(BR,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(IR,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(qR,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(NR,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(jR,"href","/docs/transformers/main/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(DR,"href","/docs/transformers/main/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(GR,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDTokenizer"),c(OR,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDTokenizerFast"),c(VR,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerTokenizer"),c(XR,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(zR,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeTokenizer"),c(WR,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(QR,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(HR,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(UR,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianTokenizer"),c(JR,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartTokenizer"),c(YR,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(KR,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(ZR,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(eP,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(oP,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(rP,"href","/docs/transformers/main/en/model_doc/mluke#transformers.MLukeTokenizer"),c(tP,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(aP,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(nP,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(sP,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(lP,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5Tokenizer"),c(iP,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5TokenizerFast"),c(dP,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizer"),c(cP,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(mP,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(fP,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(gP,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(hP,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(uP,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(pP,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(_P,"href","/docs/transformers/main/en/model_doc/phobert#transformers.PhobertTokenizer"),c(bP,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartTokenizer"),c(vP,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(FP,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(TP,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(MP,"href","/docs/transformers/main/en/model_doc/rag#transformers.RagTokenizer"),c(EP,"href","/docs/transformers/main/en/model_doc/realm#transformers.RealmTokenizer"),c(CP,"href","/docs/transformers/main/en/model_doc/realm#transformers.RealmTokenizerFast"),c(wP,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerTokenizer"),c(AP,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(yP,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertTokenizer"),c(LP,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(xP,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertTokenizer"),c($P,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(kP,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),c(SP,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(RP,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(PP,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(BP,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(IP,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(qP,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterTokenizer"),c(NP,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(jP,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(DP,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(GP,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5Tokenizer"),c(OP,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5TokenizerFast"),c(VP,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasTokenizer"),c(XP,"href","/docs/transformers/main/en/model_doc/tapex#transformers.TapexTokenizer"),c(zP,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(WP,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),c(QP,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),c(HP,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(UP,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(JP,"href","/docs/transformers/main/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(YP,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMTokenizer"),c(KP,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(ZP,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMTokenizer"),c(eB,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(oB,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(rB,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(tB,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),c(aB,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(nB,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(sB,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(lB,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizer"),c(iB,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eh,"id","transformers.AutoFeatureExtractor"),c(eh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(eh,"href","#transformers.AutoFeatureExtractor"),c(Ti,"class","relative group"),c(dB,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(cB,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(mB,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(fB,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(gB,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(hB,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(uB,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(pB,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(_B,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(bB,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaFeatureExtractor"),c(vB,"href","/docs/transformers/main/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(FB,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(TB,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(MB,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(EB,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(CB,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(wB,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(AB,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(yB,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(LB,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(xB,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),c($B,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(kB,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(SB,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(RB,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(PB,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(BB,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($h,"id","transformers.AutoProcessor"),c($h,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($h,"href","#transformers.AutoProcessor"),c(Mi,"class","relative group"),c(IB,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(qB,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPProcessor"),c(NB,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(jB,"href","/docs/transformers/main/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(DB,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(GB,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(OB,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(VB,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(XB,"href","/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRProcessor"),c(zB,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(WB,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(QB,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltProcessor"),c(HB,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(UB,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(JB,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(YB,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jh,"id","transformers.AutoModel"),c(Jh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Jh,"href","#transformers.AutoModel"),c(Ci,"class","relative group"),c(KB,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZB,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eI,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oI,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertModel"),c(rI,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartModel"),c(tI,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitModel"),c(aI,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertModel"),c(nI,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(sI,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdModel"),c(lI,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(iI,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(dI,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(cI,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertModel"),c(mI,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineModel"),c(fI,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPModel"),c(gI,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertModel"),c(hI,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextModel"),c(uI,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLModel"),c(pI,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(_I,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(bI,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(vI,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaModel"),c(FI,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(TI,"href","/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(MI,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTModel"),c(EI,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrModel"),c(CI,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertModel"),c(wI,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(AI,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTModel"),c(yI,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraModel"),c(LI,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertModel"),c(xI,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaModel"),c($I,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetModel"),c(kI,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTModel"),c(SI,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelModel"),c(RI,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelBaseModel"),c(PI,"href","/docs/transformers/main/en/model_doc/glpn#transformers.GLPNModel"),c(BI,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Model"),c(II,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(qI,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJModel"),c(NI,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertModel"),c(jI,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertModel"),c(DI,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(GI,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(OI,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(VI,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDModel"),c(XI,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerModel"),c(zI,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeModel"),c(WI,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertModel"),c(QI,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Model"),c(HI,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianModel"),c(UI,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerModel"),c(JI,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartModel"),c(YI,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(KI,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertModel"),c(ZI,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetModel"),c(eq,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5Model"),c(oq,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerModel"),c(rq,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(tq,"href","/docs/transformers/main/en/model_doc/opt#transformers.OPTModel"),c(aq,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusModel"),c(nq,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverModel"),c(sq,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartModel"),c(lq,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerModel"),c(iq,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(dq,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertModel"),c(cq,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModel"),c(mq,"href","/docs/transformers/main/en/model_doc/regnet#transformers.RegNetModel"),c(fq,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertModel"),c(gq,"href","/docs/transformers/main/en/model_doc/resnet#transformers.ResNetModel"),c(hq,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel"),c(uq,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaModel"),c(pq,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerModel"),c(_q,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerModel"),c(bq,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWModel"),c(vq,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDModel"),c(Fq,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(Tq,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterModel"),c(Mq,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(Eq,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinModel"),c(Cq,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Model"),c(wq,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasModel"),c(Aq,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(yq,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechModel"),c(Lq,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(xq,"href","/docs/transformers/main/en/model_doc/van#transformers.VanModel"),c($q,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltModel"),c(kq,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(Sq,"href","/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertModel"),c(Rq,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTModel"),c(Pq,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(Bq,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(Iq,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerModel"),c(qq,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMModel"),c(Nq,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMModel"),c(jq,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMModel"),c(Dq,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(Gq,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(Oq,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(Vq,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetModel"),c(Xq,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosModel"),c(zq,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vp,"id","transformers.AutoModelForPreTraining"),c(Vp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Vp,"href","#transformers.AutoModelForPreTraining"),c(yi,"class","relative group"),c(Wq,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qq,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Hq,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uq,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForPreTraining"),c(Jq,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(Yq,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForPreTraining"),c(Kq,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(Zq,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(eN,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(oN,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(rN,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(tN,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(aN,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(nN,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForPreTraining"),c(sN,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(lN,"href","/docs/transformers/main/en/model_doc/flava#transformers.FlavaForPreTraining"),c(iN,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForPreTraining"),c(dN,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(cN,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(mN,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(fN,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(gN,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(hN,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(uN,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(pN,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(_N,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(bN,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(vN,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(FN,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel"),c(TN,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(MN,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForPreTraining"),c(EN,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(CN,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(wN,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(AN,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(yN,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(LN,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(xN,"href","/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c($N,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(kN,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(SN,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForPreTraining"),c(RN,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(PN,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(BN,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(IN,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(B_,"id","transformers.AutoModelForCausalLM"),c(B_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(B_,"href","#transformers.AutoModelForCausalLM"),c($i,"class","relative group"),c(qN,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NN,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jN,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DN,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForCausalLM"),c(GN,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertLMHeadModel"),c(ON,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(VN,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(XN,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(zN,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(WN,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(QN,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(HN,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(UN,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(JN,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForCausalLM"),c(YN,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(KN,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(ZN,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(ej,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianForCausalLM"),c(oj,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForCausalLM"),c(rj,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(tj,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(aj,"href","/docs/transformers/main/en/model_doc/opt#transformers.OPTForCausalLM"),c(nj,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(sj,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(lj,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(ij,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(dj,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(cj,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(mj,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(fj,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(gj,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(hj,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(uj,"href","/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(pj,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(_j,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(bj,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(vj,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(Fj,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(Tj,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tb,"id","transformers.AutoModelForMaskedLM"),c(Tb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Tb,"href","#transformers.AutoModelForMaskedLM"),c(Ri,"class","relative group"),c(Mj,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ej,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Cj,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wj,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(Aj,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(yj,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForMaskedLM"),c(Lj,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(xj,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c($j,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(kj,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(Sj,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(Rj,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(Pj,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(Bj,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(Ij,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(qj,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(Nj,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(jj,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(Dj,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(Gj,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(Oj,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(Vj,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(Xj,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(zj,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(Wj,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(Qj,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(Hj,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(Uj,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(Jj,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(Yj,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(Kj,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(Zj,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(eD,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(oD,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(rD,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(tD,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(aD,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(s2,"id","transformers.AutoModelForSeq2SeqLM"),c(s2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(s2,"href","#transformers.AutoModelForSeq2SeqLM"),c(Ii,"class","relative group"),c(nD,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sD,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lD,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iD,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(dD,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(cD,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(mD,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(fD,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(gD,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(hD,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(uD,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(pD,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianMTModel"),c(_D,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(bD,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(vD,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(FD,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(TD,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(MD,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(ED,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(A2,"id","transformers.AutoModelForSequenceClassification"),c(A2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(A2,"href","#transformers.AutoModelForSequenceClassification"),c(ji,"class","relative group"),c(CD,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wD,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(AD,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yD,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(LD,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForSequenceClassification"),c(xD,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForSequenceClassification"),c($D,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(kD,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(SD,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(RD,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(PD,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(BD,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(ID,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(qD,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(ND,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(jD,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(DD,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(GD,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(OD,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(VD,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(XD,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(zD,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(WD,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(QD,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(HD,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(UD,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(JD,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDForSequenceClassification"),c(YD,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(KD,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(ZD,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(eG,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(oG,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(rG,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(tG,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(aG,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(nG,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(sG,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(lG,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(iG,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(dG,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(cG,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(mG,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(fG,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(gG,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(hG,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(uG,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(pG,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(_G,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(bG,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mv,"id","transformers.AutoModelForMultipleChoice"),c(Mv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Mv,"href","#transformers.AutoModelForMultipleChoice"),c(Oi,"class","relative group"),c(vG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MG,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(EG,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForMultipleChoice"),c(CG,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(wG,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(AG,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(yG,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(LG,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(xG,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c($G,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(kG,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(SG,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(RG,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(PG,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(BG,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(IG,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(qG,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(NG,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(jG,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(DG,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(GG,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(OG,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(VG,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(XG,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(zG,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(WG,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(QG,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(HG,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(UG,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(JG,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oF,"id","transformers.AutoModelForNextSentencePrediction"),c(oF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(oF,"href","#transformers.AutoModelForNextSentencePrediction"),c(zi,"class","relative group"),c(YG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eO,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(oO,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(rO,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(tO,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(aO,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cF,"id","transformers.AutoModelForTokenClassification"),c(cF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(cF,"href","#transformers.AutoModelForTokenClassification"),c(Hi,"class","relative group"),c(nO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iO,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(dO,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForTokenClassification"),c(cO,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(mO,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(fO,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForTokenClassification"),c(gO,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(hO,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(uO,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(pO,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(_O,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(bO,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(vO,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(FO,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(TO,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(MO,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(EO,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(CO,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(wO,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(AO,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(yO,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(LO,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(xO,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c($O,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(kO,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(SO,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(RO,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(PO,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(BO,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(IO,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(qO,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(NO,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(jO,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(DO,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QF,"id","transformers.AutoModelForQuestionAnswering"),c(QF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(QF,"href","#transformers.AutoModelForQuestionAnswering"),c(Yi,"class","relative group"),c(GO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XO,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(zO,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(WO,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(QO,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(HO,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(UO,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(JO,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(YO,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(KO,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(ZO,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(eV,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(oV,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(rV,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(tV,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(aV,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(nV,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(sV,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(lV,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(iV,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(dV,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(cV,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(mV,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(fV,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(gV,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(hV,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(uV,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(pV,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(_V,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(bV,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(vV,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(FV,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(TV,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(MV,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(EV,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(CV,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(wV,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(AV,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(yV,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(LV,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(I1,"id","transformers.AutoModelForTableQuestionAnswering"),c(I1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(I1,"href","#transformers.AutoModelForTableQuestionAnswering"),c(ed,"class","relative group"),c(xV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($V,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(kV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SV,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(G1,"id","transformers.AutoModelForImageClassification"),c(G1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(G1,"href","#transformers.AutoModelForImageClassification"),c(td,"class","relative group"),c(RV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(PV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(BV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IV,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitForImageClassification"),c(qV,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(NV,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(jV,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassification"),c(DV,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(GV,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(OV,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(VV,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(XV,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(zV,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(WV,"href","/docs/transformers/main/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(QV,"href","/docs/transformers/main/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(HV,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(UV,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinForImageClassification"),c(JV,"href","/docs/transformers/main/en/model_doc/van#transformers.VanForImageClassification"),c(YV,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTForImageClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rT,"id","transformers.AutoModelForVision2Seq"),c(rT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(rT,"href","#transformers.AutoModelForVision2Seq"),c(sd,"class","relative group"),c(KV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oX,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lT,"id","transformers.AutoModelForAudioClassification"),c(lT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lT,"href","#transformers.AutoModelForAudioClassification"),c(dd,"class","relative group"),c(rX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nX,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(sX,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(lX,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(iX,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(dX,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(cX,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(mX,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(fX,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForSequenceClassification"),c(gX,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FT,"id","transformers.AutoModelForAudioFrameClassification"),c(FT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(FT,"href","#transformers.AutoModelForAudioFrameClassification"),c(fd,"class","relative group"),c(hX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_X,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(bX,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(vX,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(FX,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForAudioFrameClassification"),c(TX,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xT,"id","transformers.AutoModelForCTC"),c(xT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(xT,"href","#transformers.AutoModelForCTC"),c(ud,"class","relative group"),c(MX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(EX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(CX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wX,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(AX,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertForCTC"),c(yX,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWForCTC"),c(LX,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForCTC"),c(xX,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c($X,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(kX,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(SX,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForCTC"),c(RX,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForCTC"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OT,"id","transformers.AutoModelForSpeechSeq2Seq"),c(OT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(OT,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(bd,"class","relative group"),c(PX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(IX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qX,"href","/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(NX,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HT,"id","transformers.AutoModelForAudioXVector"),c(HT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(HT,"href","#transformers.AutoModelForAudioXVector"),c(Td,"class","relative group"),c(jX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OX,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(VX,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(XX,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(zX,"href","/docs/transformers/main/en/model_doc/wav2vec2-conformer#transformers.Wav2Vec2ConformerForXVector"),c(WX,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForXVector"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tM,"id","transformers.AutoModelForMaskedImageModeling"),c(tM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(tM,"href","#transformers.AutoModelForMaskedImageModeling"),c(Cd,"class","relative group"),c(QX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JX,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(YX,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(KX,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cM,"id","transformers.AutoModelForObjectDetection"),c(cM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(cM,"href","#transformers.AutoModelForObjectDetection"),c(Ld,"class","relative group"),c(ZX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ez,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rz,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrForObjectDetection"),c(tz,"href","/docs/transformers/main/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pM,"id","transformers.AutoModelForImageSegmentation"),c(pM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pM,"href","#transformers.AutoModelForImageSegmentation"),c(kd,"class","relative group"),c(az,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lz,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrForSegmentation"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TM,"id","transformers.AutoModelForSemanticSegmentation"),c(TM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(TM,"href","#transformers.AutoModelForSemanticSegmentation"),c(Pd,"class","relative group"),c(iz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(cz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mz,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(fz,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(gz,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(hz,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xM,"id","transformers.AutoModelForInstanceSegmentation"),c(xM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(xM,"href","#transformers.AutoModelForInstanceSegmentation"),c(qd,"class","relative group"),c(uz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_z,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bz,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(PM,"id","transformers.TFAutoModel"),c(PM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(PM,"href","#transformers.TFAutoModel"),c(Dd,"class","relative group"),c(vz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Fz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Tz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mz,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertModel"),c(Ez,"href","/docs/transformers/main/en/model_doc/bart#transformers.TFBartModel"),c(Cz,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertModel"),c(wz,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(Az,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(yz,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertModel"),c(Lz,"href","/docs/transformers/main/en/model_doc/clip#transformers.TFCLIPModel"),c(xz,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertModel"),c($z,"href","/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextModel"),c(kz,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLModel"),c(Sz,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(Rz,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaModel"),c(Pz,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(Bz,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(Iz,"href","/docs/transformers/main/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(qz,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraModel"),c(Nz,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(jz,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelModel"),c(Dz,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(Gz,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2Model"),c(Oz,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJModel"),c(Vz,"href","/docs/transformers/main/en/model_doc/hubert#transformers.TFHubertModel"),c(Xz,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(zz,"href","/docs/transformers/main/en/model_doc/led#transformers.TFLEDModel"),c(Wz,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerModel"),c(Qz,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertModel"),c(Hz,"href","/docs/transformers/main/en/model_doc/marian#transformers.TFMarianModel"),c(Uz,"href","/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartModel"),c(Jz,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(Yz,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetModel"),c(Kz,"href","/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5Model"),c(Zz,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(eW,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusModel"),c(oW,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertModel"),c(rW,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaModel"),c(tW,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerModel"),c(aW,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(nW,"href","/docs/transformers/main/en/model_doc/swin#transformers.TFSwinModel"),c(sW,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5Model"),c(lW,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasModel"),c(iW,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(dW,"href","/docs/transformers/main/en/model_doc/vit#transformers.TFViTModel"),c(cW,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(mW,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(fW,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMModel"),c(gW,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(hW,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetModel"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(L4,"id","transformers.TFAutoModelForPreTraining"),c(L4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(L4,"href","#transformers.TFAutoModelForPreTraining"),c(Vd,"class","relative group"),c(uW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_W,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bW,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(vW,"href","/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(FW,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForPreTraining"),c(TW,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(MW,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(EW,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(CW,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(wW,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(AW,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(yW,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(LW,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(xW,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c($W,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(kW,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(SW,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(RW,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(PW,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(BW,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(IW,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(qW,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(NW,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(jW,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(DW,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eE,"id","transformers.TFAutoModelForCausalLM"),c(eE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(eE,"href","#transformers.TFAutoModelForCausalLM"),c(Wd,"class","relative group"),c(GW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XW,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(zW,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(WW,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(QW,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(HW,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(UW,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(JW,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(YW,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(KW,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(ZW,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(eQ,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(oQ,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uE,"id","transformers.TFAutoModelForImageClassification"),c(uE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(uE,"href","#transformers.TFAutoModelForImageClassification"),c(Ud,"class","relative group"),c(rQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nQ,"href","/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(sQ,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(lQ,"href","/docs/transformers/main/en/model_doc/swin#transformers.TFSwinForImageClassification"),c(iQ,"href","/docs/transformers/main/en/model_doc/vit#transformers.TFViTForImageClassification"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ME,"id","transformers.TFAutoModelForMaskedLM"),c(ME,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ME,"href","#transformers.TFAutoModelForMaskedLM"),c(Kd,"class","relative group"),c(dQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fQ,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(gQ,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(hQ,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(uQ,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(pQ,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(_Q,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(bQ,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(vQ,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(FQ,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(TQ,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(MQ,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(EQ,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(CQ,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(wQ,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(AQ,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(yQ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(LQ,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(xQ,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c($Q,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(kQ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zE,"id","transformers.TFAutoModelForSeq2SeqLM"),c(zE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(zE,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(oc,"class","relative group"),c(SQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(RQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BQ,"href","/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(IQ,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(qQ,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(NQ,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(jQ,"href","/docs/transformers/main/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(DQ,"href","/docs/transformers/main/en/model_doc/marian#transformers.TFMarianMTModel"),c(GQ,"href","/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(OQ,"href","/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(VQ,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(XQ,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aC,"id","transformers.TFAutoModelForSequenceClassification"),c(aC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(aC,"href","#transformers.TFAutoModelForSequenceClassification"),c(ac,"class","relative group"),c(zQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HQ,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(UQ,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(JQ,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(YQ,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(KQ,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(ZQ,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(eH,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(oH,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(rH,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(tH,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(aH,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(nH,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(sH,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(lH,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(iH,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(dH,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(cH,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(mH,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(fH,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(gH,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(hH,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(uH,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(pH,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(_H,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(bH,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(vH,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RC,"id","transformers.TFAutoModelForMultipleChoice"),c(RC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(RC,"href","#transformers.TFAutoModelForMultipleChoice"),c(lc,"class","relative group"),c(FH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EH,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(CH,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(wH,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(AH,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(yH,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(LH,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(xH,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c($H,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(kH,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(SH,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(RH,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(PH,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(BH,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(IH,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(qH,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(NH,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(jH,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZC,"id","transformers.TFAutoModelForNextSentencePrediction"),c(ZC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ZC,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(cc,"class","relative group"),c(DH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VH,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(XH,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(a5,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(a5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(a5,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(gc,"class","relative group"),c(zH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HH,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(i5,"id","transformers.TFAutoModelForTokenClassification"),c(i5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(i5,"href","#transformers.TFAutoModelForTokenClassification"),c(pc,"class","relative group"),c(UH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KH,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(ZH,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(eU,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(oU,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(rU,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(tU,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(aU,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(nU,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(sU,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(lU,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(iU,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(dU,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(cU,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(mU,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(fU,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(gU,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(hU,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(uU,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(pU,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(_U,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(k5,"id","transformers.TFAutoModelForQuestionAnswering"),c(k5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(k5,"href","#transformers.TFAutoModelForQuestionAnswering"),c(vc,"class","relative group"),c(bU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TU,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(MU,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(EU,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(CU,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(wU,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(AU,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(yU,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(LU,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(xU,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c($U,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(kU,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(SU,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(RU,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(PU,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(BU,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(IU,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(qU,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(NU,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(jU,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(DU,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(e3,"id","transformers.TFAutoModelForVision2Seq"),c(e3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(e3,"href","#transformers.TFAutoModelForVision2Seq"),c(Mc,"class","relative group"),c(GU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XU,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(a3,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(a3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(a3,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(wc,"class","relative group"),c(zU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HU,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(i3,"id","transformers.FlaxAutoModel"),c(i3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(i3,"href","#transformers.FlaxAutoModel"),c(Lc,"class","relative group"),c(UU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KU,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertModel"),c(ZU,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartModel"),c(eJ,"href","/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitModel"),c(oJ,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertModel"),c(rJ,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(tJ,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(aJ,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(nJ,"href","/docs/transformers/main/en/model_doc/clip#transformers.FlaxCLIPModel"),c(sJ,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(lJ,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraModel"),c(iJ,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(dJ,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(cJ,"href","/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(mJ,"href","/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianModel"),c(fJ,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartModel"),c(gJ,"href","/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5Model"),c(hJ,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(uJ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(pJ,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(_J,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5Model"),c(bJ,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(vJ,"href","/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTModel"),c(FJ,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(TJ,"href","/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(MJ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(I3,"id","transformers.FlaxAutoModelForCausalLM"),c(I3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(I3,"href","#transformers.FlaxAutoModelForCausalLM"),c(kc,"class","relative group"),c(EJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(CJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AJ,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(yJ,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(LJ,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(xJ,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c($J,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(kJ,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(SJ,"href","/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(RJ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(PJ,"href","/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(H3,"id","transformers.FlaxAutoModelForPreTraining"),c(H3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(H3,"href","#transformers.FlaxAutoModelForPreTraining"),c(Pc,"class","relative group"),c(BJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NJ,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(jJ,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(DJ,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(GJ,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(OJ,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(VJ,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(XJ,"href","/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(zJ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(WJ,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(QJ,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(HJ,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(UJ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dw,"id","transformers.FlaxAutoModelForMaskedLM"),c(dw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(dw,"href","#transformers.FlaxAutoModelForMaskedLM"),c(qc,"class","relative group"),c(JJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(YJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(KJ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZJ,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(eY,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(oY,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(rY,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(tY,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(aY,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(nY,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(sY,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(lY,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(iY,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mw,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(Mw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Mw,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(Dc,"class","relative group"),c(dY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(mY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fY,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(gY,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(hY,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(uY,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(pY,"href","/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(_Y,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(bY,"href","/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(vY,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(FY,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Pw,"id","transformers.FlaxAutoModelForSequenceClassification"),c(Pw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Pw,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(Vc,"class","relative group"),c(TY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(MY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(EY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CY,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(wY,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(AY,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(yY,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(LY,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(xY,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c($Y,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(kY,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(SY,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(RY,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qw,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(Qw,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Qw,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(Wc,"class","relative group"),c(PY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(IY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qY,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(NY,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(jY,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(DY,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(GY,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(OY,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(VY,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(XY,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(zY,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(WY,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sA,"id","transformers.FlaxAutoModelForTokenClassification"),c(sA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(sA,"href","#transformers.FlaxAutoModelForTokenClassification"),c(Uc,"class","relative group"),c(QY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UY,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JY,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(YY,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(KY,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(ZY,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(eK,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(oK,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(rK,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(tK,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_A,"id","transformers.FlaxAutoModelForMultipleChoice"),c(_A,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_A,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(Kc,"class","relative group"),c(aK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lK,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(iK,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(dK,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(cK,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(mK,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(fK,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(gK,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(hK,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LA,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(LA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(LA,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(om,"class","relative group"),c(uK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_K,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bK,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(SA,"id","transformers.FlaxAutoModelForImageClassification"),c(SA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(SA,"href","#transformers.FlaxAutoModelForImageClassification"),c(am,"class","relative group"),c(vK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MK,"href","/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(EK,"href","/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qA,"id","transformers.FlaxAutoModelForVision2Seq"),c(qA,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(qA,"href","#transformers.FlaxAutoModelForVision2Seq"),c(lm,"class","relative group"),c(CK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(AK,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yK,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(m,_){e(document.head,g),b(m,v,_),b(m,u,_),e(u,f),e(f,p),M(d,p,null),e(u,h),e(u,Mo),e(Mo,ci),b(m,gm,_),b(m,rt,_),e(rt,mi),e(rt,fi),e(fi,ay),e(rt,hm),b(m,je,_),b(m,We,_),e(We,gi),e(We,yn),e(yn,ny),e(We,Ln),e(We,xn),e(xn,sy),e(We,hi),e(We,$n),e($n,ly),e(We,ui),b(m,um,_),M(Ca,m,_),b(m,Qe,_),b(m,Ae,_),e(Ae,w$),e(Ae,pi),e(pi,A$),e(Ae,y$),b(m,Eo,_),b(m,wa,_),e(wa,L$),e(wa,pm),e(pm,x$),e(wa,DDe),b(m,xIe,_),b(m,_i,_),e(_i,_m),e(_m,Fee),M(iy,Fee,null),e(_i,GDe),e(_i,Tee),e(Tee,ODe),b(m,$Ie,_),b(m,kn,_),e(kn,VDe),e(kn,Mee),e(Mee,XDe),e(kn,zDe),e(kn,Eee),e(Eee,WDe),e(kn,QDe),b(m,kIe,_),M(dy,m,_),b(m,SIe,_),b(m,$$,_),e($$,HDe),b(m,RIe,_),M(bm,m,_),b(m,PIe,_),b(m,bi,_),e(bi,vm),e(vm,Cee),M(cy,Cee,null),e(bi,UDe),e(bi,wee),e(wee,JDe),b(m,BIe,_),b(m,Co,_),M(my,Co,null),e(Co,YDe),e(Co,fy),e(fy,KDe),e(fy,k$),e(k$,ZDe),e(fy,eGe),e(Co,oGe),e(Co,gy),e(gy,rGe),e(gy,Aee),e(Aee,tGe),e(gy,aGe),e(Co,nGe),e(Co,Er),M(hy,Er,null),e(Er,sGe),e(Er,yee),e(yee,lGe),e(Er,iGe),e(Er,vi),e(vi,dGe),e(vi,Lee),e(Lee,cGe),e(vi,mGe),e(vi,xee),e(xee,fGe),e(vi,gGe),e(Er,hGe),e(Er,A),e(A,Fm),e(Fm,$ee),e($ee,uGe),e(Fm,pGe),e(Fm,S$),e(S$,_Ge),e(Fm,bGe),e(A,vGe),e(A,Tm),e(Tm,kee),e(kee,FGe),e(Tm,TGe),e(Tm,R$),e(R$,MGe),e(Tm,EGe),e(A,CGe),e(A,Mm),e(Mm,See),e(See,wGe),e(Mm,AGe),e(Mm,P$),e(P$,yGe),e(Mm,LGe),e(A,xGe),e(A,Em),e(Em,Ree),e(Ree,$Ge),e(Em,kGe),e(Em,B$),e(B$,SGe),e(Em,RGe),e(A,PGe),e(A,Cm),e(Cm,Pee),e(Pee,BGe),e(Cm,IGe),e(Cm,I$),e(I$,qGe),e(Cm,NGe),e(A,jGe),e(A,wm),e(wm,Bee),e(Bee,DGe),e(wm,GGe),e(wm,q$),e(q$,OGe),e(wm,VGe),e(A,XGe),e(A,Am),e(Am,Iee),e(Iee,zGe),e(Am,WGe),e(Am,N$),e(N$,QGe),e(Am,HGe),e(A,UGe),e(A,ym),e(ym,qee),e(qee,JGe),e(ym,YGe),e(ym,j$),e(j$,KGe),e(ym,ZGe),e(A,eOe),e(A,Lm),e(Lm,Nee),e(Nee,oOe),e(Lm,rOe),e(Lm,D$),e(D$,tOe),e(Lm,aOe),e(A,nOe),e(A,xm),e(xm,jee),e(jee,sOe),e(xm,lOe),e(xm,G$),e(G$,iOe),e(xm,dOe),e(A,cOe),e(A,$m),e($m,Dee),e(Dee,mOe),e($m,fOe),e($m,O$),e(O$,gOe),e($m,hOe),e(A,uOe),e(A,km),e(km,Gee),e(Gee,pOe),e(km,_Oe),e(km,V$),e(V$,bOe),e(km,vOe),e(A,FOe),e(A,Sm),e(Sm,Oee),e(Oee,TOe),e(Sm,MOe),e(Sm,X$),e(X$,EOe),e(Sm,COe),e(A,wOe),e(A,Rm),e(Rm,Vee),e(Vee,AOe),e(Rm,yOe),e(Rm,z$),e(z$,LOe),e(Rm,xOe),e(A,$Oe),e(A,Pm),e(Pm,Xee),e(Xee,kOe),e(Pm,SOe),e(Pm,W$),e(W$,ROe),e(Pm,POe),e(A,BOe),e(A,Bm),e(Bm,zee),e(zee,IOe),e(Bm,qOe),e(Bm,Q$),e(Q$,NOe),e(Bm,jOe),e(A,DOe),e(A,Im),e(Im,Wee),e(Wee,GOe),e(Im,OOe),e(Im,H$),e(H$,VOe),e(Im,XOe),e(A,zOe),e(A,qm),e(qm,Qee),e(Qee,WOe),e(qm,QOe),e(qm,U$),e(U$,HOe),e(qm,UOe),e(A,JOe),e(A,Nm),e(Nm,Hee),e(Hee,YOe),e(Nm,KOe),e(Nm,J$),e(J$,ZOe),e(Nm,eVe),e(A,oVe),e(A,jm),e(jm,Uee),e(Uee,rVe),e(jm,tVe),e(jm,Y$),e(Y$,aVe),e(jm,nVe),e(A,sVe),e(A,Dm),e(Dm,Jee),e(Jee,lVe),e(Dm,iVe),e(Dm,K$),e(K$,dVe),e(Dm,cVe),e(A,mVe),e(A,Gm),e(Gm,Yee),e(Yee,fVe),e(Gm,gVe),e(Gm,Z$),e(Z$,hVe),e(Gm,uVe),e(A,pVe),e(A,Om),e(Om,Kee),e(Kee,_Ve),e(Om,bVe),e(Om,ek),e(ek,vVe),e(Om,FVe),e(A,TVe),e(A,Vm),e(Vm,Zee),e(Zee,MVe),e(Vm,EVe),e(Vm,ok),e(ok,CVe),e(Vm,wVe),e(A,AVe),e(A,Xm),e(Xm,eoe),e(eoe,yVe),e(Xm,LVe),e(Xm,rk),e(rk,xVe),e(Xm,$Ve),e(A,kVe),e(A,zm),e(zm,ooe),e(ooe,SVe),e(zm,RVe),e(zm,tk),e(tk,PVe),e(zm,BVe),e(A,IVe),e(A,Wm),e(Wm,roe),e(roe,qVe),e(Wm,NVe),e(Wm,ak),e(ak,jVe),e(Wm,DVe),e(A,GVe),e(A,Qm),e(Qm,toe),e(toe,OVe),e(Qm,VVe),e(Qm,nk),e(nk,XVe),e(Qm,zVe),e(A,WVe),e(A,Hm),e(Hm,aoe),e(aoe,QVe),e(Hm,HVe),e(Hm,sk),e(sk,UVe),e(Hm,JVe),e(A,YVe),e(A,Um),e(Um,noe),e(noe,KVe),e(Um,ZVe),e(Um,lk),e(lk,eXe),e(Um,oXe),e(A,rXe),e(A,Jm),e(Jm,soe),e(soe,tXe),e(Jm,aXe),e(Jm,ik),e(ik,nXe),e(Jm,sXe),e(A,lXe),e(A,Ym),e(Ym,loe),e(loe,iXe),e(Ym,dXe),e(Ym,dk),e(dk,cXe),e(Ym,mXe),e(A,fXe),e(A,Km),e(Km,ioe),e(ioe,gXe),e(Km,hXe),e(Km,ck),e(ck,uXe),e(Km,pXe),e(A,_Xe),e(A,Zm),e(Zm,doe),e(doe,bXe),e(Zm,vXe),e(Zm,mk),e(mk,FXe),e(Zm,TXe),e(A,MXe),e(A,ef),e(ef,coe),e(coe,EXe),e(ef,CXe),e(ef,fk),e(fk,wXe),e(ef,AXe),e(A,yXe),e(A,of),e(of,moe),e(moe,LXe),e(of,xXe),e(of,gk),e(gk,$Xe),e(of,kXe),e(A,SXe),e(A,rf),e(rf,foe),e(foe,RXe),e(rf,PXe),e(rf,hk),e(hk,BXe),e(rf,IXe),e(A,qXe),e(A,tf),e(tf,goe),e(goe,NXe),e(tf,jXe),e(tf,uk),e(uk,DXe),e(tf,GXe),e(A,OXe),e(A,af),e(af,hoe),e(hoe,VXe),e(af,XXe),e(af,pk),e(pk,zXe),e(af,WXe),e(A,QXe),e(A,nf),e(nf,uoe),e(uoe,HXe),e(nf,UXe),e(nf,_k),e(_k,JXe),e(nf,YXe),e(A,KXe),e(A,sf),e(sf,poe),e(poe,ZXe),e(sf,eze),e(sf,bk),e(bk,oze),e(sf,rze),e(A,tze),e(A,lf),e(lf,_oe),e(_oe,aze),e(lf,nze),e(lf,vk),e(vk,sze),e(lf,lze),e(A,ize),e(A,df),e(df,boe),e(boe,dze),e(df,cze),e(df,Fk),e(Fk,mze),e(df,fze),e(A,gze),e(A,cf),e(cf,voe),e(voe,hze),e(cf,uze),e(cf,Tk),e(Tk,pze),e(cf,_ze),e(A,bze),e(A,mf),e(mf,Foe),e(Foe,vze),e(mf,Fze),e(mf,Mk),e(Mk,Tze),e(mf,Mze),e(A,Eze),e(A,ff),e(ff,Toe),e(Toe,Cze),e(ff,wze),e(ff,Ek),e(Ek,Aze),e(ff,yze),e(A,Lze),e(A,gf),e(gf,Moe),e(Moe,xze),e(gf,$ze),e(gf,Ck),e(Ck,kze),e(gf,Sze),e(A,Rze),e(A,hf),e(hf,Eoe),e(Eoe,Pze),e(hf,Bze),e(hf,wk),e(wk,Ize),e(hf,qze),e(A,Nze),e(A,uf),e(uf,Coe),e(Coe,jze),e(uf,Dze),e(uf,Ak),e(Ak,Gze),e(uf,Oze),e(A,Vze),e(A,pf),e(pf,woe),e(woe,Xze),e(pf,zze),e(pf,yk),e(yk,Wze),e(pf,Qze),e(A,Hze),e(A,_f),e(_f,Aoe),e(Aoe,Uze),e(_f,Jze),e(_f,Lk),e(Lk,Yze),e(_f,Kze),e(A,Zze),e(A,bf),e(bf,yoe),e(yoe,eWe),e(bf,oWe),e(bf,xk),e(xk,rWe),e(bf,tWe),e(A,aWe),e(A,vf),e(vf,Loe),e(Loe,nWe),e(vf,sWe),e(vf,$k),e($k,lWe),e(vf,iWe),e(A,dWe),e(A,Ff),e(Ff,xoe),e(xoe,cWe),e(Ff,mWe),e(Ff,kk),e(kk,fWe),e(Ff,gWe),e(A,hWe),e(A,Tf),e(Tf,$oe),e($oe,uWe),e(Tf,pWe),e(Tf,Sk),e(Sk,_We),e(Tf,bWe),e(A,vWe),e(A,Mf),e(Mf,koe),e(koe,FWe),e(Mf,TWe),e(Mf,Rk),e(Rk,MWe),e(Mf,EWe),e(A,CWe),e(A,Ef),e(Ef,Soe),e(Soe,wWe),e(Ef,AWe),e(Ef,Pk),e(Pk,yWe),e(Ef,LWe),e(A,xWe),e(A,Cf),e(Cf,Roe),e(Roe,$We),e(Cf,kWe),e(Cf,Bk),e(Bk,SWe),e(Cf,RWe),e(A,PWe),e(A,wf),e(wf,Poe),e(Poe,BWe),e(wf,IWe),e(wf,Ik),e(Ik,qWe),e(wf,NWe),e(A,jWe),e(A,Af),e(Af,Boe),e(Boe,DWe),e(Af,GWe),e(Af,qk),e(qk,OWe),e(Af,VWe),e(A,XWe),e(A,yf),e(yf,Ioe),e(Ioe,zWe),e(yf,WWe),e(yf,Nk),e(Nk,QWe),e(yf,HWe),e(A,UWe),e(A,Lf),e(Lf,qoe),e(qoe,JWe),e(Lf,YWe),e(Lf,jk),e(jk,KWe),e(Lf,ZWe),e(A,eQe),e(A,xf),e(xf,Noe),e(Noe,oQe),e(xf,rQe),e(xf,Dk),e(Dk,tQe),e(xf,aQe),e(A,nQe),e(A,$f),e($f,joe),e(joe,sQe),e($f,lQe),e($f,Gk),e(Gk,iQe),e($f,dQe),e(A,cQe),e(A,kf),e(kf,Doe),e(Doe,mQe),e(kf,fQe),e(kf,Ok),e(Ok,gQe),e(kf,hQe),e(A,uQe),e(A,Sf),e(Sf,Goe),e(Goe,pQe),e(Sf,_Qe),e(Sf,Vk),e(Vk,bQe),e(Sf,vQe),e(A,FQe),e(A,Rf),e(Rf,Ooe),e(Ooe,TQe),e(Rf,MQe),e(Rf,Xk),e(Xk,EQe),e(Rf,CQe),e(A,wQe),e(A,Pf),e(Pf,Voe),e(Voe,AQe),e(Pf,yQe),e(Pf,zk),e(zk,LQe),e(Pf,xQe),e(A,$Qe),e(A,Bf),e(Bf,Xoe),e(Xoe,kQe),e(Bf,SQe),e(Bf,Wk),e(Wk,RQe),e(Bf,PQe),e(A,BQe),e(A,If),e(If,zoe),e(zoe,IQe),e(If,qQe),e(If,Qk),e(Qk,NQe),e(If,jQe),e(A,DQe),e(A,qf),e(qf,Woe),e(Woe,GQe),e(qf,OQe),e(qf,Hk),e(Hk,VQe),e(qf,XQe),e(A,zQe),e(A,Nf),e(Nf,Qoe),e(Qoe,WQe),e(Nf,QQe),e(Nf,Uk),e(Uk,HQe),e(Nf,UQe),e(A,JQe),e(A,jf),e(jf,Hoe),e(Hoe,YQe),e(jf,KQe),e(jf,Jk),e(Jk,ZQe),e(jf,eHe),e(A,oHe),e(A,Df),e(Df,Uoe),e(Uoe,rHe),e(Df,tHe),e(Df,Yk),e(Yk,aHe),e(Df,nHe),e(A,sHe),e(A,Gf),e(Gf,Joe),e(Joe,lHe),e(Gf,iHe),e(Gf,Kk),e(Kk,dHe),e(Gf,cHe),e(A,mHe),e(A,Of),e(Of,Yoe),e(Yoe,fHe),e(Of,gHe),e(Of,Zk),e(Zk,hHe),e(Of,uHe),e(A,pHe),e(A,Vf),e(Vf,Koe),e(Koe,_He),e(Vf,bHe),e(Vf,eS),e(eS,vHe),e(Vf,FHe),e(A,THe),e(A,Xf),e(Xf,Zoe),e(Zoe,MHe),e(Xf,EHe),e(Xf,oS),e(oS,CHe),e(Xf,wHe),e(A,AHe),e(A,zf),e(zf,ere),e(ere,yHe),e(zf,LHe),e(zf,rS),e(rS,xHe),e(zf,$He),e(A,kHe),e(A,Wf),e(Wf,ore),e(ore,SHe),e(Wf,RHe),e(Wf,tS),e(tS,PHe),e(Wf,BHe),e(A,IHe),e(A,Qf),e(Qf,rre),e(rre,qHe),e(Qf,NHe),e(Qf,aS),e(aS,jHe),e(Qf,DHe),e(A,GHe),e(A,Hf),e(Hf,tre),e(tre,OHe),e(Hf,VHe),e(Hf,nS),e(nS,XHe),e(Hf,zHe),e(A,WHe),e(A,Uf),e(Uf,are),e(are,QHe),e(Uf,HHe),e(Uf,sS),e(sS,UHe),e(Uf,JHe),e(A,YHe),e(A,Jf),e(Jf,nre),e(nre,KHe),e(Jf,ZHe),e(Jf,lS),e(lS,eUe),e(Jf,oUe),e(A,rUe),e(A,Yf),e(Yf,sre),e(sre,tUe),e(Yf,aUe),e(Yf,iS),e(iS,nUe),e(Yf,sUe),e(A,lUe),e(A,Kf),e(Kf,lre),e(lre,iUe),e(Kf,dUe),e(Kf,dS),e(dS,cUe),e(Kf,mUe),e(A,fUe),e(A,Zf),e(Zf,ire),e(ire,gUe),e(Zf,hUe),e(Zf,cS),e(cS,uUe),e(Zf,pUe),e(A,_Ue),e(A,eg),e(eg,dre),e(dre,bUe),e(eg,vUe),e(eg,mS),e(mS,FUe),e(eg,TUe),e(A,MUe),e(A,og),e(og,cre),e(cre,EUe),e(og,CUe),e(og,fS),e(fS,wUe),e(og,AUe),e(A,yUe),e(A,rg),e(rg,mre),e(mre,LUe),e(rg,xUe),e(rg,gS),e(gS,$Ue),e(rg,kUe),e(A,SUe),e(A,tg),e(tg,fre),e(fre,RUe),e(tg,PUe),e(tg,hS),e(hS,BUe),e(tg,IUe),e(A,qUe),e(A,ag),e(ag,gre),e(gre,NUe),e(ag,jUe),e(ag,uS),e(uS,DUe),e(ag,GUe),e(A,OUe),e(A,ng),e(ng,hre),e(hre,VUe),e(ng,XUe),e(ng,pS),e(pS,zUe),e(ng,WUe),e(A,QUe),e(A,sg),e(sg,ure),e(ure,HUe),e(sg,UUe),e(sg,_S),e(_S,JUe),e(sg,YUe),e(A,KUe),e(A,lg),e(lg,pre),e(pre,ZUe),e(lg,eJe),e(lg,bS),e(bS,oJe),e(lg,rJe),e(A,tJe),e(A,ig),e(ig,_re),e(_re,aJe),e(ig,nJe),e(ig,vS),e(vS,sJe),e(ig,lJe),e(A,iJe),e(A,dg),e(dg,bre),e(bre,dJe),e(dg,cJe),e(dg,FS),e(FS,mJe),e(dg,fJe),e(A,gJe),e(A,cg),e(cg,vre),e(vre,hJe),e(cg,uJe),e(cg,TS),e(TS,pJe),e(cg,_Je),e(A,bJe),e(A,mg),e(mg,Fre),e(Fre,vJe),e(mg,FJe),e(mg,MS),e(MS,TJe),e(mg,MJe),e(A,EJe),e(A,fg),e(fg,Tre),e(Tre,CJe),e(fg,wJe),e(fg,ES),e(ES,AJe),e(fg,yJe),e(A,LJe),e(A,gg),e(gg,Mre),e(Mre,xJe),e(gg,$Je),e(gg,CS),e(CS,kJe),e(gg,SJe),e(A,RJe),e(A,hg),e(hg,Ere),e(Ere,PJe),e(hg,BJe),e(hg,wS),e(wS,IJe),e(hg,qJe),e(A,NJe),e(A,ug),e(ug,Cre),e(Cre,jJe),e(ug,DJe),e(ug,AS),e(AS,GJe),e(ug,OJe),e(A,VJe),e(A,pg),e(pg,wre),e(wre,XJe),e(pg,zJe),e(pg,yS),e(yS,WJe),e(pg,QJe),e(A,HJe),e(A,_g),e(_g,Are),e(Are,UJe),e(_g,JJe),e(_g,LS),e(LS,YJe),e(_g,KJe),e(Er,ZJe),M(bg,Er,null),e(Co,eYe),e(Co,vg),M(uy,vg,null),e(vg,oYe),e(vg,yre),e(yre,rYe),b(m,IIe,_),b(m,Fi,_),e(Fi,Fg),e(Fg,Lre),M(py,Lre,null),e(Fi,tYe),e(Fi,xre),e(xre,aYe),b(m,qIe,_),b(m,wo,_),M(_y,wo,null),e(wo,nYe),e(wo,by),e(by,sYe),e(by,xS),e(xS,lYe),e(by,iYe),e(wo,dYe),e(wo,vy),e(vy,cYe),e(vy,$re),e($re,mYe),e(vy,fYe),e(wo,gYe),e(wo,Cr),M(Fy,Cr,null),e(Cr,hYe),e(Cr,kre),e(kre,uYe),e(Cr,pYe),e(Cr,Aa),e(Aa,_Ye),e(Aa,Sre),e(Sre,bYe),e(Aa,vYe),e(Aa,Rre),e(Rre,FYe),e(Aa,TYe),e(Aa,Pre),e(Pre,MYe),e(Aa,EYe),e(Cr,CYe),e(Cr,k),e(k,Sn),e(Sn,Bre),e(Bre,wYe),e(Sn,AYe),e(Sn,$S),e($S,yYe),e(Sn,LYe),e(Sn,kS),e(kS,xYe),e(Sn,$Ye),e(k,kYe),e(k,Rn),e(Rn,Ire),e(Ire,SYe),e(Rn,RYe),e(Rn,SS),e(SS,PYe),e(Rn,BYe),e(Rn,RS),e(RS,IYe),e(Rn,qYe),e(k,NYe),e(k,Pn),e(Pn,qre),e(qre,jYe),e(Pn,DYe),e(Pn,PS),e(PS,GYe),e(Pn,OYe),e(Pn,BS),e(BS,VYe),e(Pn,XYe),e(k,zYe),e(k,Tg),e(Tg,Nre),e(Nre,WYe),e(Tg,QYe),e(Tg,IS),e(IS,HYe),e(Tg,UYe),e(k,JYe),e(k,Bn),e(Bn,jre),e(jre,YYe),e(Bn,KYe),e(Bn,qS),e(qS,ZYe),e(Bn,eKe),e(Bn,NS),e(NS,oKe),e(Bn,rKe),e(k,tKe),e(k,Mg),e(Mg,Dre),e(Dre,aKe),e(Mg,nKe),e(Mg,jS),e(jS,sKe),e(Mg,lKe),e(k,iKe),e(k,Eg),e(Eg,Gre),e(Gre,dKe),e(Eg,cKe),e(Eg,DS),e(DS,mKe),e(Eg,fKe),e(k,gKe),e(k,Cg),e(Cg,Ore),e(Ore,hKe),e(Cg,uKe),e(Cg,GS),e(GS,pKe),e(Cg,_Ke),e(k,bKe),e(k,In),e(In,Vre),e(Vre,vKe),e(In,FKe),e(In,OS),e(OS,TKe),e(In,MKe),e(In,VS),e(VS,EKe),e(In,CKe),e(k,wKe),e(k,qn),e(qn,Xre),e(Xre,AKe),e(qn,yKe),e(qn,XS),e(XS,LKe),e(qn,xKe),e(qn,zS),e(zS,$Ke),e(qn,kKe),e(k,SKe),e(k,Nn),e(Nn,zre),e(zre,RKe),e(Nn,PKe),e(Nn,WS),e(WS,BKe),e(Nn,IKe),e(Nn,QS),e(QS,qKe),e(Nn,NKe),e(k,jKe),e(k,wg),e(wg,Wre),e(Wre,DKe),e(wg,GKe),e(wg,HS),e(HS,OKe),e(wg,VKe),e(k,XKe),e(k,Ag),e(Ag,Qre),e(Qre,zKe),e(Ag,WKe),e(Ag,US),e(US,QKe),e(Ag,HKe),e(k,UKe),e(k,jn),e(jn,Hre),e(Hre,JKe),e(jn,YKe),e(jn,JS),e(JS,KKe),e(jn,ZKe),e(jn,YS),e(YS,eZe),e(jn,oZe),e(k,rZe),e(k,yg),e(yg,Ure),e(Ure,tZe),e(yg,aZe),e(yg,KS),e(KS,nZe),e(yg,sZe),e(k,lZe),e(k,Dn),e(Dn,Jre),e(Jre,iZe),e(Dn,dZe),e(Dn,ZS),e(ZS,cZe),e(Dn,mZe),e(Dn,eR),e(eR,fZe),e(Dn,gZe),e(k,hZe),e(k,Gn),e(Gn,Yre),e(Yre,uZe),e(Gn,pZe),e(Gn,oR),e(oR,_Ze),e(Gn,bZe),e(Gn,rR),e(rR,vZe),e(Gn,FZe),e(k,TZe),e(k,On),e(On,Kre),e(Kre,MZe),e(On,EZe),e(On,tR),e(tR,CZe),e(On,wZe),e(On,aR),e(aR,AZe),e(On,yZe),e(k,LZe),e(k,Lg),e(Lg,Zre),e(Zre,xZe),e(Lg,$Ze),e(Lg,nR),e(nR,kZe),e(Lg,SZe),e(k,RZe),e(k,Vn),e(Vn,ete),e(ete,PZe),e(Vn,BZe),e(Vn,sR),e(sR,IZe),e(Vn,qZe),e(Vn,lR),e(lR,NZe),e(Vn,jZe),e(k,DZe),e(k,Xn),e(Xn,ote),e(ote,GZe),e(Xn,OZe),e(Xn,iR),e(iR,VZe),e(Xn,XZe),e(Xn,dR),e(dR,zZe),e(Xn,WZe),e(k,QZe),e(k,zn),e(zn,rte),e(rte,HZe),e(zn,UZe),e(zn,cR),e(cR,JZe),e(zn,YZe),e(zn,mR),e(mR,KZe),e(zn,ZZe),e(k,eeo),e(k,Wn),e(Wn,tte),e(tte,oeo),e(Wn,reo),e(Wn,fR),e(fR,teo),e(Wn,aeo),e(Wn,gR),e(gR,neo),e(Wn,seo),e(k,leo),e(k,Qn),e(Qn,ate),e(ate,ieo),e(Qn,deo),e(Qn,hR),e(hR,ceo),e(Qn,meo),e(Qn,uR),e(uR,feo),e(Qn,geo),e(k,heo),e(k,Hn),e(Hn,nte),e(nte,ueo),e(Hn,peo),e(Hn,pR),e(pR,_eo),e(Hn,beo),e(Hn,_R),e(_R,veo),e(Hn,Feo),e(k,Teo),e(k,xg),e(xg,ste),e(ste,Meo),e(xg,Eeo),e(xg,bR),e(bR,Ceo),e(xg,weo),e(k,Aeo),e(k,Un),e(Un,lte),e(lte,yeo),e(Un,Leo),e(Un,vR),e(vR,xeo),e(Un,$eo),e(Un,FR),e(FR,keo),e(Un,Seo),e(k,Reo),e(k,$g),e($g,ite),e(ite,Peo),e($g,Beo),e($g,TR),e(TR,Ieo),e($g,qeo),e(k,Neo),e(k,Jn),e(Jn,dte),e(dte,jeo),e(Jn,Deo),e(Jn,MR),e(MR,Geo),e(Jn,Oeo),e(Jn,ER),e(ER,Veo),e(Jn,Xeo),e(k,zeo),e(k,Yn),e(Yn,cte),e(cte,Weo),e(Yn,Qeo),e(Yn,CR),e(CR,Heo),e(Yn,Ueo),e(Yn,wR),e(wR,Jeo),e(Yn,Yeo),e(k,Keo),e(k,Kn),e(Kn,mte),e(mte,Zeo),e(Kn,eoo),e(Kn,AR),e(AR,ooo),e(Kn,roo),e(Kn,yR),e(yR,too),e(Kn,aoo),e(k,noo),e(k,Zn),e(Zn,fte),e(fte,soo),e(Zn,loo),e(Zn,LR),e(LR,ioo),e(Zn,doo),e(Zn,xR),e(xR,coo),e(Zn,moo),e(k,foo),e(k,es),e(es,gte),e(gte,goo),e(es,hoo),e(es,$R),e($R,uoo),e(es,poo),e(es,kR),e(kR,_oo),e(es,boo),e(k,voo),e(k,kg),e(kg,hte),e(hte,Foo),e(kg,Too),e(kg,SR),e(SR,Moo),e(kg,Eoo),e(k,Coo),e(k,os),e(os,ute),e(ute,woo),e(os,Aoo),e(os,RR),e(RR,yoo),e(os,Loo),e(os,PR),e(PR,xoo),e(os,$oo),e(k,koo),e(k,rs),e(rs,pte),e(pte,Soo),e(rs,Roo),e(rs,BR),e(BR,Poo),e(rs,Boo),e(rs,IR),e(IR,Ioo),e(rs,qoo),e(k,Noo),e(k,ts),e(ts,_te),e(_te,joo),e(ts,Doo),e(ts,qR),e(qR,Goo),e(ts,Ooo),e(ts,NR),e(NR,Voo),e(ts,Xoo),e(k,zoo),e(k,as),e(as,bte),e(bte,Woo),e(as,Qoo),e(as,jR),e(jR,Hoo),e(as,Uoo),e(as,DR),e(DR,Joo),e(as,Yoo),e(k,Koo),e(k,ns),e(ns,vte),e(vte,Zoo),e(ns,ero),e(ns,GR),e(GR,oro),e(ns,rro),e(ns,OR),e(OR,tro),e(ns,aro),e(k,nro),e(k,ss),e(ss,Fte),e(Fte,sro),e(ss,lro),e(ss,VR),e(VR,iro),e(ss,dro),e(ss,XR),e(XR,cro),e(ss,mro),e(k,fro),e(k,Sg),e(Sg,Tte),e(Tte,gro),e(Sg,hro),e(Sg,zR),e(zR,uro),e(Sg,pro),e(k,_ro),e(k,ls),e(ls,Mte),e(Mte,bro),e(ls,vro),e(ls,WR),e(WR,Fro),e(ls,Tro),e(ls,QR),e(QR,Mro),e(ls,Ero),e(k,Cro),e(k,Rg),e(Rg,Ete),e(Ete,wro),e(Rg,Aro),e(Rg,HR),e(HR,yro),e(Rg,Lro),e(k,xro),e(k,Pg),e(Pg,Cte),e(Cte,$ro),e(Pg,kro),e(Pg,UR),e(UR,Sro),e(Pg,Rro),e(k,Pro),e(k,is),e(is,wte),e(wte,Bro),e(is,Iro),e(is,JR),e(JR,qro),e(is,Nro),e(is,YR),e(YR,jro),e(is,Dro),e(k,Gro),e(k,ds),e(ds,Ate),e(Ate,Oro),e(ds,Vro),e(ds,KR),e(KR,Xro),e(ds,zro),e(ds,ZR),e(ZR,Wro),e(ds,Qro),e(k,Hro),e(k,cs),e(cs,yte),e(yte,Uro),e(cs,Jro),e(cs,eP),e(eP,Yro),e(cs,Kro),e(cs,oP),e(oP,Zro),e(cs,eto),e(k,oto),e(k,Bg),e(Bg,Lte),e(Lte,rto),e(Bg,tto),e(Bg,rP),e(rP,ato),e(Bg,nto),e(k,sto),e(k,ms),e(ms,xte),e(xte,lto),e(ms,ito),e(ms,tP),e(tP,dto),e(ms,cto),e(ms,aP),e(aP,mto),e(ms,fto),e(k,gto),e(k,fs),e(fs,$te),e($te,hto),e(fs,uto),e(fs,nP),e(nP,pto),e(fs,_to),e(fs,sP),e(sP,bto),e(fs,vto),e(k,Fto),e(k,gs),e(gs,kte),e(kte,Tto),e(gs,Mto),e(gs,lP),e(lP,Eto),e(gs,Cto),e(gs,iP),e(iP,wto),e(gs,Ato),e(k,yto),e(k,hs),e(hs,Ste),e(Ste,Lto),e(hs,xto),e(hs,dP),e(dP,$to),e(hs,kto),e(hs,cP),e(cP,Sto),e(hs,Rto),e(k,Pto),e(k,us),e(us,Rte),e(Rte,Bto),e(us,Ito),e(us,mP),e(mP,qto),e(us,Nto),e(us,fP),e(fP,jto),e(us,Dto),e(k,Gto),e(k,Ig),e(Ig,Pte),e(Pte,Oto),e(Ig,Vto),e(Ig,gP),e(gP,Xto),e(Ig,zto),e(k,Wto),e(k,ps),e(ps,Bte),e(Bte,Qto),e(ps,Hto),e(ps,hP),e(hP,Uto),e(ps,Jto),e(ps,uP),e(uP,Yto),e(ps,Kto),e(k,Zto),e(k,qg),e(qg,Ite),e(Ite,eao),e(qg,oao),e(qg,pP),e(pP,rao),e(qg,tao),e(k,aao),e(k,Ng),e(Ng,qte),e(qte,nao),e(Ng,sao),e(Ng,_P),e(_P,lao),e(Ng,iao),e(k,dao),e(k,jg),e(jg,Nte),e(Nte,cao),e(jg,mao),e(jg,bP),e(bP,fao),e(jg,gao),e(k,hao),e(k,Dg),e(Dg,jte),e(jte,uao),e(Dg,pao),e(Dg,vP),e(vP,_ao),e(Dg,bao),e(k,vao),e(k,_s),e(_s,Dte),e(Dte,Fao),e(_s,Tao),e(_s,FP),e(FP,Mao),e(_s,Eao),e(_s,TP),e(TP,Cao),e(_s,wao),e(k,Aao),e(k,Gg),e(Gg,Gte),e(Gte,yao),e(Gg,Lao),e(Gg,MP),e(MP,xao),e(Gg,$ao),e(k,kao),e(k,bs),e(bs,Ote),e(Ote,Sao),e(bs,Rao),e(bs,EP),e(EP,Pao),e(bs,Bao),e(bs,CP),e(CP,Iao),e(bs,qao),e(k,Nao),e(k,vs),e(vs,Vte),e(Vte,jao),e(vs,Dao),e(vs,wP),e(wP,Gao),e(vs,Oao),e(vs,AP),e(AP,Vao),e(vs,Xao),e(k,zao),e(k,Fs),e(Fs,Xte),e(Xte,Wao),e(Fs,Qao),e(Fs,yP),e(yP,Hao),e(Fs,Uao),e(Fs,LP),e(LP,Jao),e(Fs,Yao),e(k,Kao),e(k,Ts),e(Ts,zte),e(zte,Zao),e(Ts,eno),e(Ts,xP),e(xP,ono),e(Ts,rno),e(Ts,$P),e($P,tno),e(Ts,ano),e(k,nno),e(k,Ms),e(Ms,Wte),e(Wte,sno),e(Ms,lno),e(Ms,kP),e(kP,ino),e(Ms,dno),e(Ms,SP),e(SP,cno),e(Ms,mno),e(k,fno),e(k,Es),e(Es,Qte),e(Qte,gno),e(Es,hno),e(Es,RP),e(RP,uno),e(Es,pno),e(Es,PP),e(PP,_no),e(Es,bno),e(k,vno),e(k,Og),e(Og,Hte),e(Hte,Fno),e(Og,Tno),e(Og,BP),e(BP,Mno),e(Og,Eno),e(k,Cno),e(k,Vg),e(Vg,Ute),e(Ute,wno),e(Vg,Ano),e(Vg,IP),e(IP,yno),e(Vg,Lno),e(k,xno),e(k,Cs),e(Cs,Jte),e(Jte,$no),e(Cs,kno),e(Cs,qP),e(qP,Sno),e(Cs,Rno),e(Cs,NP),e(NP,Pno),e(Cs,Bno),e(k,Ino),e(k,ws),e(ws,Yte),e(Yte,qno),e(ws,Nno),e(ws,jP),e(jP,jno),e(ws,Dno),e(ws,DP),e(DP,Gno),e(ws,Ono),e(k,Vno),e(k,As),e(As,Kte),e(Kte,Xno),e(As,zno),e(As,GP),e(GP,Wno),e(As,Qno),e(As,OP),e(OP,Hno),e(As,Uno),e(k,Jno),e(k,Xg),e(Xg,Zte),e(Zte,Yno),e(Xg,Kno),e(Xg,VP),e(VP,Zno),e(Xg,eso),e(k,oso),e(k,zg),e(zg,eae),e(eae,rso),e(zg,tso),e(zg,XP),e(XP,aso),e(zg,nso),e(k,sso),e(k,Wg),e(Wg,oae),e(oae,lso),e(Wg,iso),e(Wg,zP),e(zP,dso),e(Wg,cso),e(k,mso),e(k,ys),e(ys,rae),e(rae,fso),e(ys,gso),e(ys,WP),e(WP,hso),e(ys,uso),e(ys,QP),e(QP,pso),e(ys,_so),e(k,bso),e(k,Qg),e(Qg,tae),e(tae,vso),e(Qg,Fso),e(Qg,HP),e(HP,Tso),e(Qg,Mso),e(k,Eso),e(k,Hg),e(Hg,aae),e(aae,Cso),e(Hg,wso),e(Hg,UP),e(UP,Aso),e(Hg,yso),e(k,Lso),e(k,Ug),e(Ug,nae),e(nae,xso),e(Ug,$so),e(Ug,JP),e(JP,kso),e(Ug,Sso),e(k,Rso),e(k,Ls),e(Ls,sae),e(sae,Pso),e(Ls,Bso),e(Ls,YP),e(YP,Iso),e(Ls,qso),e(Ls,KP),e(KP,Nso),e(Ls,jso),e(k,Dso),e(k,Jg),e(Jg,lae),e(lae,Gso),e(Jg,Oso),e(Jg,ZP),e(ZP,Vso),e(Jg,Xso),e(k,zso),e(k,Yg),e(Yg,iae),e(iae,Wso),e(Yg,Qso),e(Yg,eB),e(eB,Hso),e(Yg,Uso),e(k,Jso),e(k,xs),e(xs,dae),e(dae,Yso),e(xs,Kso),e(xs,oB),e(oB,Zso),e(xs,elo),e(xs,rB),e(rB,olo),e(xs,rlo),e(k,tlo),e(k,$s),e($s,cae),e(cae,alo),e($s,nlo),e($s,tB),e(tB,slo),e($s,llo),e($s,aB),e(aB,ilo),e($s,dlo),e(k,clo),e(k,ks),e(ks,mae),e(mae,mlo),e(ks,flo),e(ks,nB),e(nB,glo),e(ks,hlo),e(ks,sB),e(sB,ulo),e(ks,plo),e(k,_lo),e(k,Ss),e(Ss,fae),e(fae,blo),e(Ss,vlo),e(Ss,lB),e(lB,Flo),e(Ss,Tlo),e(Ss,iB),e(iB,Mlo),e(Ss,Elo),e(Cr,Clo),M(Kg,Cr,null),e(wo,wlo),e(wo,Zg),M(Ty,Zg,null),e(Zg,Alo),e(Zg,gae),e(gae,ylo),b(m,NIe,_),b(m,Ti,_),e(Ti,eh),e(eh,hae),M(My,hae,null),e(Ti,Llo),e(Ti,uae),e(uae,xlo),b(m,jIe,_),b(m,Ao,_),M(Ey,Ao,null),e(Ao,$lo),e(Ao,Cy),e(Cy,klo),e(Cy,dB),e(dB,Slo),e(Cy,Rlo),e(Ao,Plo),e(Ao,wy),e(wy,Blo),e(wy,pae),e(pae,Ilo),e(wy,qlo),e(Ao,Nlo),e(Ao,He),M(Ay,He,null),e(He,jlo),e(He,_ae),e(_ae,Dlo),e(He,Glo),e(He,ya),e(ya,Olo),e(ya,bae),e(bae,Vlo),e(ya,Xlo),e(ya,vae),e(vae,zlo),e(ya,Wlo),e(ya,Fae),e(Fae,Qlo),e(ya,Hlo),e(He,Ulo),e(He,Z),e(Z,oh),e(oh,Tae),e(Tae,Jlo),e(oh,Ylo),e(oh,cB),e(cB,Klo),e(oh,Zlo),e(Z,eio),e(Z,rh),e(rh,Mae),e(Mae,oio),e(rh,rio),e(rh,mB),e(mB,tio),e(rh,aio),e(Z,nio),e(Z,th),e(th,Eae),e(Eae,sio),e(th,lio),e(th,fB),e(fB,iio),e(th,dio),e(Z,cio),e(Z,ah),e(ah,Cae),e(Cae,mio),e(ah,fio),e(ah,gB),e(gB,gio),e(ah,hio),e(Z,uio),e(Z,nh),e(nh,wae),e(wae,pio),e(nh,_io),e(nh,hB),e(hB,bio),e(nh,vio),e(Z,Fio),e(Z,sh),e(sh,Aae),e(Aae,Tio),e(sh,Mio),e(sh,uB),e(uB,Eio),e(sh,Cio),e(Z,wio),e(Z,lh),e(lh,yae),e(yae,Aio),e(lh,yio),e(lh,pB),e(pB,Lio),e(lh,xio),e(Z,$io),e(Z,ih),e(ih,Lae),e(Lae,kio),e(ih,Sio),e(ih,_B),e(_B,Rio),e(ih,Pio),e(Z,Bio),e(Z,dh),e(dh,xae),e(xae,Iio),e(dh,qio),e(dh,bB),e(bB,Nio),e(dh,jio),e(Z,Dio),e(Z,ch),e(ch,$ae),e($ae,Gio),e(ch,Oio),e(ch,vB),e(vB,Vio),e(ch,Xio),e(Z,zio),e(Z,mh),e(mh,kae),e(kae,Wio),e(mh,Qio),e(mh,FB),e(FB,Hio),e(mh,Uio),e(Z,Jio),e(Z,fh),e(fh,Sae),e(Sae,Yio),e(fh,Kio),e(fh,TB),e(TB,Zio),e(fh,edo),e(Z,odo),e(Z,gh),e(gh,Rae),e(Rae,rdo),e(gh,tdo),e(gh,MB),e(MB,ado),e(gh,ndo),e(Z,sdo),e(Z,hh),e(hh,Pae),e(Pae,ldo),e(hh,ido),e(hh,EB),e(EB,ddo),e(hh,cdo),e(Z,mdo),e(Z,uh),e(uh,Bae),e(Bae,fdo),e(uh,gdo),e(uh,CB),e(CB,hdo),e(uh,udo),e(Z,pdo),e(Z,ph),e(ph,Iae),e(Iae,_do),e(ph,bdo),e(ph,wB),e(wB,vdo),e(ph,Fdo),e(Z,Tdo),e(Z,_h),e(_h,qae),e(qae,Mdo),e(_h,Edo),e(_h,AB),e(AB,Cdo),e(_h,wdo),e(Z,Ado),e(Z,bh),e(bh,Nae),e(Nae,ydo),e(bh,Ldo),e(bh,yB),e(yB,xdo),e(bh,$do),e(Z,kdo),e(Z,vh),e(vh,jae),e(jae,Sdo),e(vh,Rdo),e(vh,LB),e(LB,Pdo),e(vh,Bdo),e(Z,Ido),e(Z,Fh),e(Fh,Dae),e(Dae,qdo),e(Fh,Ndo),e(Fh,xB),e(xB,jdo),e(Fh,Ddo),e(Z,Gdo),e(Z,Th),e(Th,Gae),e(Gae,Odo),e(Th,Vdo),e(Th,$B),e($B,Xdo),e(Th,zdo),e(Z,Wdo),e(Z,Mh),e(Mh,Oae),e(Oae,Qdo),e(Mh,Hdo),e(Mh,kB),e(kB,Udo),e(Mh,Jdo),e(Z,Ydo),e(Z,Eh),e(Eh,Vae),e(Vae,Kdo),e(Eh,Zdo),e(Eh,SB),e(SB,eco),e(Eh,oco),e(Z,rco),e(Z,Ch),e(Ch,Xae),e(Xae,tco),e(Ch,aco),e(Ch,RB),e(RB,nco),e(Ch,sco),e(Z,lco),e(Z,wh),e(wh,zae),e(zae,ico),e(wh,dco),e(wh,PB),e(PB,cco),e(wh,mco),e(Z,fco),e(Z,Ah),e(Ah,Wae),e(Wae,gco),e(Ah,hco),e(Ah,BB),e(BB,uco),e(Ah,pco),e(He,_co),M(yh,He,null),e(He,bco),M(Lh,He,null),e(Ao,vco),e(Ao,xh),M(yy,xh,null),e(xh,Fco),e(xh,Qae),e(Qae,Tco),b(m,DIe,_),b(m,Mi,_),e(Mi,$h),e($h,Hae),M(Ly,Hae,null),e(Mi,Mco),e(Mi,Uae),e(Uae,Eco),b(m,GIe,_),b(m,yo,_),M(xy,yo,null),e(yo,Cco),e(yo,$y),e($y,wco),e($y,IB),e(IB,Aco),e($y,yco),e(yo,Lco),e(yo,ky),e(ky,xco),e(ky,Jae),e(Jae,$co),e(ky,kco),e(yo,Sco),e(yo,Ue),M(Sy,Ue,null),e(Ue,Rco),e(Ue,Yae),e(Yae,Pco),e(Ue,Bco),e(Ue,Ei),e(Ei,Ico),e(Ei,Kae),e(Kae,qco),e(Ei,Nco),e(Ei,Zae),e(Zae,jco),e(Ei,Dco),e(Ue,Gco),e(Ue,ue),e(ue,kh),e(kh,ene),e(ene,Oco),e(kh,Vco),e(kh,qB),e(qB,Xco),e(kh,zco),e(ue,Wco),e(ue,Sh),e(Sh,one),e(one,Qco),e(Sh,Hco),e(Sh,rne),e(rne,Uco),e(Sh,Jco),e(ue,Yco),e(ue,Rh),e(Rh,tne),e(tne,Kco),e(Rh,Zco),e(Rh,NB),e(NB,emo),e(Rh,omo),e(ue,rmo),e(ue,Ph),e(Ph,ane),e(ane,tmo),e(Ph,amo),e(Ph,jB),e(jB,nmo),e(Ph,smo),e(ue,lmo),e(ue,Bh),e(Bh,nne),e(nne,imo),e(Bh,dmo),e(Bh,DB),e(DB,cmo),e(Bh,mmo),e(ue,fmo),e(ue,Ih),e(Ih,sne),e(sne,gmo),e(Ih,hmo),e(Ih,GB),e(GB,umo),e(Ih,pmo),e(ue,_mo),e(ue,qh),e(qh,lne),e(lne,bmo),e(qh,vmo),e(qh,OB),e(OB,Fmo),e(qh,Tmo),e(ue,Mmo),e(ue,Nh),e(Nh,ine),e(ine,Emo),e(Nh,Cmo),e(Nh,VB),e(VB,wmo),e(Nh,Amo),e(ue,ymo),e(ue,jh),e(jh,dne),e(dne,Lmo),e(jh,xmo),e(jh,XB),e(XB,$mo),e(jh,kmo),e(ue,Smo),e(ue,Dh),e(Dh,cne),e(cne,Rmo),e(Dh,Pmo),e(Dh,zB),e(zB,Bmo),e(Dh,Imo),e(ue,qmo),e(ue,Gh),e(Gh,mne),e(mne,Nmo),e(Gh,jmo),e(Gh,WB),e(WB,Dmo),e(Gh,Gmo),e(ue,Omo),e(ue,Oh),e(Oh,fne),e(fne,Vmo),e(Oh,Xmo),e(Oh,QB),e(QB,zmo),e(Oh,Wmo),e(ue,Qmo),e(ue,Vh),e(Vh,gne),e(gne,Hmo),e(Vh,Umo),e(Vh,HB),e(HB,Jmo),e(Vh,Ymo),e(ue,Kmo),e(ue,Xh),e(Xh,hne),e(hne,Zmo),e(Xh,efo),e(Xh,UB),e(UB,ofo),e(Xh,rfo),e(ue,tfo),e(ue,zh),e(zh,une),e(une,afo),e(zh,nfo),e(zh,JB),e(JB,sfo),e(zh,lfo),e(ue,ifo),e(ue,Wh),e(Wh,pne),e(pne,dfo),e(Wh,cfo),e(Wh,YB),e(YB,mfo),e(Wh,ffo),e(Ue,gfo),M(Qh,Ue,null),e(Ue,hfo),M(Hh,Ue,null),e(yo,ufo),e(yo,Uh),M(Ry,Uh,null),e(Uh,pfo),e(Uh,_ne),e(_ne,_fo),b(m,OIe,_),b(m,Ci,_),e(Ci,Jh),e(Jh,bne),M(Py,bne,null),e(Ci,bfo),e(Ci,vne),e(vne,vfo),b(m,VIe,_),b(m,Lo,_),M(By,Lo,null),e(Lo,Ffo),e(Lo,wi),e(wi,Tfo),e(wi,KB),e(KB,Mfo),e(wi,Efo),e(wi,ZB),e(ZB,Cfo),e(wi,wfo),e(Lo,Afo),e(Lo,Iy),e(Iy,yfo),e(Iy,Fne),e(Fne,Lfo),e(Iy,xfo),e(Lo,$fo),e(Lo,tt),M(qy,tt,null),e(tt,kfo),e(tt,Tne),e(Tne,Sfo),e(tt,Rfo),e(tt,Ai),e(Ai,Pfo),e(Ai,Mne),e(Mne,Bfo),e(Ai,Ifo),e(Ai,eI),e(eI,qfo),e(Ai,Nfo),e(tt,jfo),M(Yh,tt,null),e(Lo,Dfo),e(Lo,Je),M(Ny,Je,null),e(Je,Gfo),e(Je,Ene),e(Ene,Ofo),e(Je,Vfo),e(Je,La),e(La,Xfo),e(La,Cne),e(Cne,zfo),e(La,Wfo),e(La,wne),e(wne,Qfo),e(La,Hfo),e(La,Ane),e(Ane,Ufo),e(La,Jfo),e(Je,Yfo),e(Je,x),e(x,Kh),e(Kh,yne),e(yne,Kfo),e(Kh,Zfo),e(Kh,oI),e(oI,ego),e(Kh,ogo),e(x,rgo),e(x,Zh),e(Zh,Lne),e(Lne,tgo),e(Zh,ago),e(Zh,rI),e(rI,ngo),e(Zh,sgo),e(x,lgo),e(x,eu),e(eu,xne),e(xne,igo),e(eu,dgo),e(eu,tI),e(tI,cgo),e(eu,mgo),e(x,fgo),e(x,ou),e(ou,$ne),e($ne,ggo),e(ou,hgo),e(ou,aI),e(aI,ugo),e(ou,pgo),e(x,_go),e(x,ru),e(ru,kne),e(kne,bgo),e(ru,vgo),e(ru,nI),e(nI,Fgo),e(ru,Tgo),e(x,Mgo),e(x,tu),e(tu,Sne),e(Sne,Ego),e(tu,Cgo),e(tu,sI),e(sI,wgo),e(tu,Ago),e(x,ygo),e(x,au),e(au,Rne),e(Rne,Lgo),e(au,xgo),e(au,lI),e(lI,$go),e(au,kgo),e(x,Sgo),e(x,nu),e(nu,Pne),e(Pne,Rgo),e(nu,Pgo),e(nu,iI),e(iI,Bgo),e(nu,Igo),e(x,qgo),e(x,su),e(su,Bne),e(Bne,Ngo),e(su,jgo),e(su,dI),e(dI,Dgo),e(su,Ggo),e(x,Ogo),e(x,lu),e(lu,Ine),e(Ine,Vgo),e(lu,Xgo),e(lu,cI),e(cI,zgo),e(lu,Wgo),e(x,Qgo),e(x,iu),e(iu,qne),e(qne,Hgo),e(iu,Ugo),e(iu,mI),e(mI,Jgo),e(iu,Ygo),e(x,Kgo),e(x,du),e(du,Nne),e(Nne,Zgo),e(du,eho),e(du,fI),e(fI,oho),e(du,rho),e(x,tho),e(x,cu),e(cu,jne),e(jne,aho),e(cu,nho),e(cu,gI),e(gI,sho),e(cu,lho),e(x,iho),e(x,mu),e(mu,Dne),e(Dne,dho),e(mu,cho),e(mu,hI),e(hI,mho),e(mu,fho),e(x,gho),e(x,fu),e(fu,Gne),e(Gne,hho),e(fu,uho),e(fu,uI),e(uI,pho),e(fu,_ho),e(x,bho),e(x,gu),e(gu,One),e(One,vho),e(gu,Fho),e(gu,pI),e(pI,Tho),e(gu,Mho),e(x,Eho),e(x,hu),e(hu,Vne),e(Vne,Cho),e(hu,who),e(hu,_I),e(_I,Aho),e(hu,yho),e(x,Lho),e(x,uu),e(uu,Xne),e(Xne,xho),e(uu,$ho),e(uu,bI),e(bI,kho),e(uu,Sho),e(x,Rho),e(x,pu),e(pu,zne),e(zne,Pho),e(pu,Bho),e(pu,vI),e(vI,Iho),e(pu,qho),e(x,Nho),e(x,_u),e(_u,Wne),e(Wne,jho),e(_u,Dho),e(_u,FI),e(FI,Gho),e(_u,Oho),e(x,Vho),e(x,bu),e(bu,Qne),e(Qne,Xho),e(bu,zho),e(bu,TI),e(TI,Who),e(bu,Qho),e(x,Hho),e(x,vu),e(vu,Hne),e(Hne,Uho),e(vu,Jho),e(vu,MI),e(MI,Yho),e(vu,Kho),e(x,Zho),e(x,Fu),e(Fu,Une),e(Une,euo),e(Fu,ouo),e(Fu,EI),e(EI,ruo),e(Fu,tuo),e(x,auo),e(x,Tu),e(Tu,Jne),e(Jne,nuo),e(Tu,suo),e(Tu,CI),e(CI,luo),e(Tu,iuo),e(x,duo),e(x,Mu),e(Mu,Yne),e(Yne,cuo),e(Mu,muo),e(Mu,wI),e(wI,fuo),e(Mu,guo),e(x,huo),e(x,Eu),e(Eu,Kne),e(Kne,uuo),e(Eu,puo),e(Eu,AI),e(AI,_uo),e(Eu,buo),e(x,vuo),e(x,Cu),e(Cu,Zne),e(Zne,Fuo),e(Cu,Tuo),e(Cu,yI),e(yI,Muo),e(Cu,Euo),e(x,Cuo),e(x,wu),e(wu,ese),e(ese,wuo),e(wu,Auo),e(wu,LI),e(LI,yuo),e(wu,Luo),e(x,xuo),e(x,Au),e(Au,ose),e(ose,$uo),e(Au,kuo),e(Au,xI),e(xI,Suo),e(Au,Ruo),e(x,Puo),e(x,yu),e(yu,rse),e(rse,Buo),e(yu,Iuo),e(yu,$I),e($I,quo),e(yu,Nuo),e(x,juo),e(x,Lu),e(Lu,tse),e(tse,Duo),e(Lu,Guo),e(Lu,kI),e(kI,Ouo),e(Lu,Vuo),e(x,Xuo),e(x,Rs),e(Rs,ase),e(ase,zuo),e(Rs,Wuo),e(Rs,SI),e(SI,Quo),e(Rs,Huo),e(Rs,RI),e(RI,Uuo),e(Rs,Juo),e(x,Yuo),e(x,xu),e(xu,nse),e(nse,Kuo),e(xu,Zuo),e(xu,PI),e(PI,epo),e(xu,opo),e(x,rpo),e(x,$u),e($u,sse),e(sse,tpo),e($u,apo),e($u,BI),e(BI,npo),e($u,spo),e(x,lpo),e(x,ku),e(ku,lse),e(lse,ipo),e(ku,dpo),e(ku,II),e(II,cpo),e(ku,mpo),e(x,fpo),e(x,Su),e(Su,ise),e(ise,gpo),e(Su,hpo),e(Su,qI),e(qI,upo),e(Su,ppo),e(x,_po),e(x,Ru),e(Ru,dse),e(dse,bpo),e(Ru,vpo),e(Ru,NI),e(NI,Fpo),e(Ru,Tpo),e(x,Mpo),e(x,Pu),e(Pu,cse),e(cse,Epo),e(Pu,Cpo),e(Pu,jI),e(jI,wpo),e(Pu,Apo),e(x,ypo),e(x,Bu),e(Bu,mse),e(mse,Lpo),e(Bu,xpo),e(Bu,DI),e(DI,$po),e(Bu,kpo),e(x,Spo),e(x,Iu),e(Iu,fse),e(fse,Rpo),e(Iu,Ppo),e(Iu,GI),e(GI,Bpo),e(Iu,Ipo),e(x,qpo),e(x,qu),e(qu,gse),e(gse,Npo),e(qu,jpo),e(qu,OI),e(OI,Dpo),e(qu,Gpo),e(x,Opo),e(x,Nu),e(Nu,hse),e(hse,Vpo),e(Nu,Xpo),e(Nu,VI),e(VI,zpo),e(Nu,Wpo),e(x,Qpo),e(x,ju),e(ju,use),e(use,Hpo),e(ju,Upo),e(ju,XI),e(XI,Jpo),e(ju,Ypo),e(x,Kpo),e(x,Du),e(Du,pse),e(pse,Zpo),e(Du,e_o),e(Du,zI),e(zI,o_o),e(Du,r_o),e(x,t_o),e(x,Gu),e(Gu,_se),e(_se,a_o),e(Gu,n_o),e(Gu,WI),e(WI,s_o),e(Gu,l_o),e(x,i_o),e(x,Ou),e(Ou,bse),e(bse,d_o),e(Ou,c_o),e(Ou,QI),e(QI,m_o),e(Ou,f_o),e(x,g_o),e(x,Vu),e(Vu,vse),e(vse,h_o),e(Vu,u_o),e(Vu,HI),e(HI,p_o),e(Vu,__o),e(x,b_o),e(x,Xu),e(Xu,Fse),e(Fse,v_o),e(Xu,F_o),e(Xu,UI),e(UI,T_o),e(Xu,M_o),e(x,E_o),e(x,zu),e(zu,Tse),e(Tse,C_o),e(zu,w_o),e(zu,JI),e(JI,A_o),e(zu,y_o),e(x,L_o),e(x,Wu),e(Wu,Mse),e(Mse,x_o),e(Wu,$_o),e(Wu,YI),e(YI,k_o),e(Wu,S_o),e(x,R_o),e(x,Qu),e(Qu,Ese),e(Ese,P_o),e(Qu,B_o),e(Qu,KI),e(KI,I_o),e(Qu,q_o),e(x,N_o),e(x,Hu),e(Hu,Cse),e(Cse,j_o),e(Hu,D_o),e(Hu,ZI),e(ZI,G_o),e(Hu,O_o),e(x,V_o),e(x,Uu),e(Uu,wse),e(wse,X_o),e(Uu,z_o),e(Uu,eq),e(eq,W_o),e(Uu,Q_o),e(x,H_o),e(x,Ju),e(Ju,Ase),e(Ase,U_o),e(Ju,J_o),e(Ju,oq),e(oq,Y_o),e(Ju,K_o),e(x,Z_o),e(x,Yu),e(Yu,yse),e(yse,ebo),e(Yu,obo),e(Yu,rq),e(rq,rbo),e(Yu,tbo),e(x,abo),e(x,Ku),e(Ku,Lse),e(Lse,nbo),e(Ku,sbo),e(Ku,tq),e(tq,lbo),e(Ku,ibo),e(x,dbo),e(x,Zu),e(Zu,xse),e(xse,cbo),e(Zu,mbo),e(Zu,aq),e(aq,fbo),e(Zu,gbo),e(x,hbo),e(x,ep),e(ep,$se),e($se,ubo),e(ep,pbo),e(ep,nq),e(nq,_bo),e(ep,bbo),e(x,vbo),e(x,op),e(op,kse),e(kse,Fbo),e(op,Tbo),e(op,sq),e(sq,Mbo),e(op,Ebo),e(x,Cbo),e(x,rp),e(rp,Sse),e(Sse,wbo),e(rp,Abo),e(rp,lq),e(lq,ybo),e(rp,Lbo),e(x,xbo),e(x,tp),e(tp,Rse),e(Rse,$bo),e(tp,kbo),e(tp,iq),e(iq,Sbo),e(tp,Rbo),e(x,Pbo),e(x,ap),e(ap,Pse),e(Pse,Bbo),e(ap,Ibo),e(ap,dq),e(dq,qbo),e(ap,Nbo),e(x,jbo),e(x,np),e(np,Bse),e(Bse,Dbo),e(np,Gbo),e(np,cq),e(cq,Obo),e(np,Vbo),e(x,Xbo),e(x,sp),e(sp,Ise),e(Ise,zbo),e(sp,Wbo),e(sp,mq),e(mq,Qbo),e(sp,Hbo),e(x,Ubo),e(x,lp),e(lp,qse),e(qse,Jbo),e(lp,Ybo),e(lp,fq),e(fq,Kbo),e(lp,Zbo),e(x,e2o),e(x,ip),e(ip,Nse),e(Nse,o2o),e(ip,r2o),e(ip,gq),e(gq,t2o),e(ip,a2o),e(x,n2o),e(x,dp),e(dp,jse),e(jse,s2o),e(dp,l2o),e(dp,hq),e(hq,i2o),e(dp,d2o),e(x,c2o),e(x,cp),e(cp,Dse),e(Dse,m2o),e(cp,f2o),e(cp,uq),e(uq,g2o),e(cp,h2o),e(x,u2o),e(x,mp),e(mp,Gse),e(Gse,p2o),e(mp,_2o),e(mp,pq),e(pq,b2o),e(mp,v2o),e(x,F2o),e(x,fp),e(fp,Ose),e(Ose,T2o),e(fp,M2o),e(fp,_q),e(_q,E2o),e(fp,C2o),e(x,w2o),e(x,gp),e(gp,Vse),e(Vse,A2o),e(gp,y2o),e(gp,bq),e(bq,L2o),e(gp,x2o),e(x,$2o),e(x,hp),e(hp,Xse),e(Xse,k2o),e(hp,S2o),e(hp,vq),e(vq,R2o),e(hp,P2o),e(x,B2o),e(x,up),e(up,zse),e(zse,I2o),e(up,q2o),e(up,Fq),e(Fq,N2o),e(up,j2o),e(x,D2o),e(x,pp),e(pp,Wse),e(Wse,G2o),e(pp,O2o),e(pp,Tq),e(Tq,V2o),e(pp,X2o),e(x,z2o),e(x,_p),e(_p,Qse),e(Qse,W2o),e(_p,Q2o),e(_p,Mq),e(Mq,H2o),e(_p,U2o),e(x,J2o),e(x,bp),e(bp,Hse),e(Hse,Y2o),e(bp,K2o),e(bp,Eq),e(Eq,Z2o),e(bp,evo),e(x,ovo),e(x,vp),e(vp,Use),e(Use,rvo),e(vp,tvo),e(vp,Cq),e(Cq,avo),e(vp,nvo),e(x,svo),e(x,Fp),e(Fp,Jse),e(Jse,lvo),e(Fp,ivo),e(Fp,wq),e(wq,dvo),e(Fp,cvo),e(x,mvo),e(x,Tp),e(Tp,Yse),e(Yse,fvo),e(Tp,gvo),e(Tp,Aq),e(Aq,hvo),e(Tp,uvo),e(x,pvo),e(x,Mp),e(Mp,Kse),e(Kse,_vo),e(Mp,bvo),e(Mp,yq),e(yq,vvo),e(Mp,Fvo),e(x,Tvo),e(x,Ep),e(Ep,Zse),e(Zse,Mvo),e(Ep,Evo),e(Ep,Lq),e(Lq,Cvo),e(Ep,wvo),e(x,Avo),e(x,Cp),e(Cp,ele),e(ele,yvo),e(Cp,Lvo),e(Cp,xq),e(xq,xvo),e(Cp,$vo),e(x,kvo),e(x,wp),e(wp,ole),e(ole,Svo),e(wp,Rvo),e(wp,$q),e($q,Pvo),e(wp,Bvo),e(x,Ivo),e(x,Ap),e(Ap,rle),e(rle,qvo),e(Ap,Nvo),e(Ap,kq),e(kq,jvo),e(Ap,Dvo),e(x,Gvo),e(x,yp),e(yp,tle),e(tle,Ovo),e(yp,Vvo),e(yp,Sq),e(Sq,Xvo),e(yp,zvo),e(x,Wvo),e(x,Lp),e(Lp,ale),e(ale,Qvo),e(Lp,Hvo),e(Lp,Rq),e(Rq,Uvo),e(Lp,Jvo),e(x,Yvo),e(x,xp),e(xp,nle),e(nle,Kvo),e(xp,Zvo),e(xp,Pq),e(Pq,eFo),e(xp,oFo),e(x,rFo),e(x,$p),e($p,sle),e(sle,tFo),e($p,aFo),e($p,Bq),e(Bq,nFo),e($p,sFo),e(x,lFo),e(x,kp),e(kp,lle),e(lle,iFo),e(kp,dFo),e(kp,Iq),e(Iq,cFo),e(kp,mFo),e(x,fFo),e(x,Sp),e(Sp,ile),e(ile,gFo),e(Sp,hFo),e(Sp,qq),e(qq,uFo),e(Sp,pFo),e(x,_Fo),e(x,Rp),e(Rp,dle),e(dle,bFo),e(Rp,vFo),e(Rp,Nq),e(Nq,FFo),e(Rp,TFo),e(x,MFo),e(x,Pp),e(Pp,cle),e(cle,EFo),e(Pp,CFo),e(Pp,jq),e(jq,wFo),e(Pp,AFo),e(x,yFo),e(x,Bp),e(Bp,mle),e(mle,LFo),e(Bp,xFo),e(Bp,Dq),e(Dq,$Fo),e(Bp,kFo),e(x,SFo),e(x,Ip),e(Ip,fle),e(fle,RFo),e(Ip,PFo),e(Ip,Gq),e(Gq,BFo),e(Ip,IFo),e(x,qFo),e(x,qp),e(qp,gle),e(gle,NFo),e(qp,jFo),e(qp,Oq),e(Oq,DFo),e(qp,GFo),e(x,OFo),e(x,Np),e(Np,hle),e(hle,VFo),e(Np,XFo),e(Np,Vq),e(Vq,zFo),e(Np,WFo),e(x,QFo),e(x,jp),e(jp,ule),e(ule,HFo),e(jp,UFo),e(jp,Xq),e(Xq,JFo),e(jp,YFo),e(x,KFo),e(x,Dp),e(Dp,ple),e(ple,ZFo),e(Dp,e1o),e(Dp,zq),e(zq,o1o),e(Dp,r1o),e(Je,t1o),e(Je,Gp),e(Gp,a1o),e(Gp,_le),e(_le,n1o),e(Gp,s1o),e(Gp,ble),e(ble,l1o),e(Je,i1o),M(Op,Je,null),b(m,XIe,_),b(m,yi,_),e(yi,Vp),e(Vp,vle),M(jy,vle,null),e(yi,d1o),e(yi,Fle),e(Fle,c1o),b(m,zIe,_),b(m,xo,_),M(Dy,xo,null),e(xo,m1o),e(xo,Li),e(Li,f1o),e(Li,Wq),e(Wq,g1o),e(Li,h1o),e(Li,Qq),e(Qq,u1o),e(Li,p1o),e(xo,_1o),e(xo,Gy),e(Gy,b1o),e(Gy,Tle),e(Tle,v1o),e(Gy,F1o),e(xo,T1o),e(xo,at),M(Oy,at,null),e(at,M1o),e(at,Mle),e(Mle,E1o),e(at,C1o),e(at,xi),e(xi,w1o),e(xi,Ele),e(Ele,A1o),e(xi,y1o),e(xi,Hq),e(Hq,L1o),e(xi,x1o),e(at,$1o),M(Xp,at,null),e(xo,k1o),e(xo,Ye),M(Vy,Ye,null),e(Ye,S1o),e(Ye,Cle),e(Cle,R1o),e(Ye,P1o),e(Ye,xa),e(xa,B1o),e(xa,wle),e(wle,I1o),e(xa,q1o),e(xa,Ale),e(Ale,N1o),e(xa,j1o),e(xa,yle),e(yle,D1o),e(xa,G1o),e(Ye,O1o),e(Ye,G),e(G,zp),e(zp,Lle),e(Lle,V1o),e(zp,X1o),e(zp,Uq),e(Uq,z1o),e(zp,W1o),e(G,Q1o),e(G,Wp),e(Wp,xle),e(xle,H1o),e(Wp,U1o),e(Wp,Jq),e(Jq,J1o),e(Wp,Y1o),e(G,K1o),e(G,Qp),e(Qp,$le),e($le,Z1o),e(Qp,eTo),e(Qp,Yq),e(Yq,oTo),e(Qp,rTo),e(G,tTo),e(G,Hp),e(Hp,kle),e(kle,aTo),e(Hp,nTo),e(Hp,Kq),e(Kq,sTo),e(Hp,lTo),e(G,iTo),e(G,Up),e(Up,Sle),e(Sle,dTo),e(Up,cTo),e(Up,Zq),e(Zq,mTo),e(Up,fTo),e(G,gTo),e(G,Jp),e(Jp,Rle),e(Rle,hTo),e(Jp,uTo),e(Jp,eN),e(eN,pTo),e(Jp,_To),e(G,bTo),e(G,Yp),e(Yp,Ple),e(Ple,vTo),e(Yp,FTo),e(Yp,oN),e(oN,TTo),e(Yp,MTo),e(G,ETo),e(G,Kp),e(Kp,Ble),e(Ble,CTo),e(Kp,wTo),e(Kp,rN),e(rN,ATo),e(Kp,yTo),e(G,LTo),e(G,Zp),e(Zp,Ile),e(Ile,xTo),e(Zp,$To),e(Zp,tN),e(tN,kTo),e(Zp,STo),e(G,RTo),e(G,e_),e(e_,qle),e(qle,PTo),e(e_,BTo),e(e_,aN),e(aN,ITo),e(e_,qTo),e(G,NTo),e(G,o_),e(o_,Nle),e(Nle,jTo),e(o_,DTo),e(o_,nN),e(nN,GTo),e(o_,OTo),e(G,VTo),e(G,r_),e(r_,jle),e(jle,XTo),e(r_,zTo),e(r_,sN),e(sN,WTo),e(r_,QTo),e(G,HTo),e(G,t_),e(t_,Dle),e(Dle,UTo),e(t_,JTo),e(t_,lN),e(lN,YTo),e(t_,KTo),e(G,ZTo),e(G,a_),e(a_,Gle),e(Gle,eMo),e(a_,oMo),e(a_,iN),e(iN,rMo),e(a_,tMo),e(G,aMo),e(G,n_),e(n_,Ole),e(Ole,nMo),e(n_,sMo),e(n_,dN),e(dN,lMo),e(n_,iMo),e(G,dMo),e(G,s_),e(s_,Vle),e(Vle,cMo),e(s_,mMo),e(s_,cN),e(cN,fMo),e(s_,gMo),e(G,hMo),e(G,l_),e(l_,Xle),e(Xle,uMo),e(l_,pMo),e(l_,mN),e(mN,_Mo),e(l_,bMo),e(G,vMo),e(G,i_),e(i_,zle),e(zle,FMo),e(i_,TMo),e(i_,fN),e(fN,MMo),e(i_,EMo),e(G,CMo),e(G,d_),e(d_,Wle),e(Wle,wMo),e(d_,AMo),e(d_,gN),e(gN,yMo),e(d_,LMo),e(G,xMo),e(G,c_),e(c_,Qle),e(Qle,$Mo),e(c_,kMo),e(c_,hN),e(hN,SMo),e(c_,RMo),e(G,PMo),e(G,m_),e(m_,Hle),e(Hle,BMo),e(m_,IMo),e(m_,uN),e(uN,qMo),e(m_,NMo),e(G,jMo),e(G,f_),e(f_,Ule),e(Ule,DMo),e(f_,GMo),e(f_,pN),e(pN,OMo),e(f_,VMo),e(G,XMo),e(G,g_),e(g_,Jle),e(Jle,zMo),e(g_,WMo),e(g_,_N),e(_N,QMo),e(g_,HMo),e(G,UMo),e(G,h_),e(h_,Yle),e(Yle,JMo),e(h_,YMo),e(h_,bN),e(bN,KMo),e(h_,ZMo),e(G,e4o),e(G,u_),e(u_,Kle),e(Kle,o4o),e(u_,r4o),e(u_,vN),e(vN,t4o),e(u_,a4o),e(G,n4o),e(G,p_),e(p_,Zle),e(Zle,s4o),e(p_,l4o),e(p_,FN),e(FN,i4o),e(p_,d4o),e(G,c4o),e(G,__),e(__,eie),e(eie,m4o),e(__,f4o),e(__,TN),e(TN,g4o),e(__,h4o),e(G,u4o),e(G,b_),e(b_,oie),e(oie,p4o),e(b_,_4o),e(b_,MN),e(MN,b4o),e(b_,v4o),e(G,F4o),e(G,v_),e(v_,rie),e(rie,T4o),e(v_,M4o),e(v_,EN),e(EN,E4o),e(v_,C4o),e(G,w4o),e(G,F_),e(F_,tie),e(tie,A4o),e(F_,y4o),e(F_,CN),e(CN,L4o),e(F_,x4o),e(G,$4o),e(G,T_),e(T_,aie),e(aie,k4o),e(T_,S4o),e(T_,wN),e(wN,R4o),e(T_,P4o),e(G,B4o),e(G,M_),e(M_,nie),e(nie,I4o),e(M_,q4o),e(M_,AN),e(AN,N4o),e(M_,j4o),e(G,D4o),e(G,E_),e(E_,sie),e(sie,G4o),e(E_,O4o),e(E_,yN),e(yN,V4o),e(E_,X4o),e(G,z4o),e(G,C_),e(C_,lie),e(lie,W4o),e(C_,Q4o),e(C_,LN),e(LN,H4o),e(C_,U4o),e(G,J4o),e(G,w_),e(w_,iie),e(iie,Y4o),e(w_,K4o),e(w_,xN),e(xN,Z4o),e(w_,eEo),e(G,oEo),e(G,A_),e(A_,die),e(die,rEo),e(A_,tEo),e(A_,$N),e($N,aEo),e(A_,nEo),e(G,sEo),e(G,y_),e(y_,cie),e(cie,lEo),e(y_,iEo),e(y_,kN),e(kN,dEo),e(y_,cEo),e(G,mEo),e(G,L_),e(L_,mie),e(mie,fEo),e(L_,gEo),e(L_,SN),e(SN,hEo),e(L_,uEo),e(G,pEo),e(G,x_),e(x_,fie),e(fie,_Eo),e(x_,bEo),e(x_,RN),e(RN,vEo),e(x_,FEo),e(G,TEo),e(G,$_),e($_,gie),e(gie,MEo),e($_,EEo),e($_,PN),e(PN,CEo),e($_,wEo),e(G,AEo),e(G,k_),e(k_,hie),e(hie,yEo),e(k_,LEo),e(k_,BN),e(BN,xEo),e(k_,$Eo),e(G,kEo),e(G,S_),e(S_,uie),e(uie,SEo),e(S_,REo),e(S_,IN),e(IN,PEo),e(S_,BEo),e(Ye,IEo),e(Ye,R_),e(R_,qEo),e(R_,pie),e(pie,NEo),e(R_,jEo),e(R_,_ie),e(_ie,DEo),e(Ye,GEo),M(P_,Ye,null),b(m,WIe,_),b(m,$i,_),e($i,B_),e(B_,bie),M(Xy,bie,null),e($i,OEo),e($i,vie),e(vie,VEo),b(m,QIe,_),b(m,$o,_),M(zy,$o,null),e($o,XEo),e($o,ki),e(ki,zEo),e(ki,qN),e(qN,WEo),e(ki,QEo),e(ki,NN),e(NN,HEo),e(ki,UEo),e($o,JEo),e($o,Wy),e(Wy,YEo),e(Wy,Fie),e(Fie,KEo),e(Wy,ZEo),e($o,eCo),e($o,nt),M(Qy,nt,null),e(nt,oCo),e(nt,Tie),e(Tie,rCo),e(nt,tCo),e(nt,Si),e(Si,aCo),e(Si,Mie),e(Mie,nCo),e(Si,sCo),e(Si,jN),e(jN,lCo),e(Si,iCo),e(nt,dCo),M(I_,nt,null),e($o,cCo),e($o,Ke),M(Hy,Ke,null),e(Ke,mCo),e(Ke,Eie),e(Eie,fCo),e(Ke,gCo),e(Ke,$a),e($a,hCo),e($a,Cie),e(Cie,uCo),e($a,pCo),e($a,wie),e(wie,_Co),e($a,bCo),e($a,Aie),e(Aie,vCo),e($a,FCo),e(Ke,TCo),e(Ke,z),e(z,q_),e(q_,yie),e(yie,MCo),e(q_,ECo),e(q_,DN),e(DN,CCo),e(q_,wCo),e(z,ACo),e(z,N_),e(N_,Lie),e(Lie,yCo),e(N_,LCo),e(N_,GN),e(GN,xCo),e(N_,$Co),e(z,kCo),e(z,j_),e(j_,xie),e(xie,SCo),e(j_,RCo),e(j_,ON),e(ON,PCo),e(j_,BCo),e(z,ICo),e(z,D_),e(D_,$ie),e($ie,qCo),e(D_,NCo),e(D_,VN),e(VN,jCo),e(D_,DCo),e(z,GCo),e(z,G_),e(G_,kie),e(kie,OCo),e(G_,VCo),e(G_,XN),e(XN,XCo),e(G_,zCo),e(z,WCo),e(z,O_),e(O_,Sie),e(Sie,QCo),e(O_,HCo),e(O_,zN),e(zN,UCo),e(O_,JCo),e(z,YCo),e(z,V_),e(V_,Rie),e(Rie,KCo),e(V_,ZCo),e(V_,WN),e(WN,e5o),e(V_,o5o),e(z,r5o),e(z,X_),e(X_,Pie),e(Pie,t5o),e(X_,a5o),e(X_,QN),e(QN,n5o),e(X_,s5o),e(z,l5o),e(z,z_),e(z_,Bie),e(Bie,i5o),e(z_,d5o),e(z_,HN),e(HN,c5o),e(z_,m5o),e(z,f5o),e(z,W_),e(W_,Iie),e(Iie,g5o),e(W_,h5o),e(W_,UN),e(UN,u5o),e(W_,p5o),e(z,_5o),e(z,Q_),e(Q_,qie),e(qie,b5o),e(Q_,v5o),e(Q_,JN),e(JN,F5o),e(Q_,T5o),e(z,M5o),e(z,H_),e(H_,Nie),e(Nie,E5o),e(H_,C5o),e(H_,YN),e(YN,w5o),e(H_,A5o),e(z,y5o),e(z,U_),e(U_,jie),e(jie,L5o),e(U_,x5o),e(U_,KN),e(KN,$5o),e(U_,k5o),e(z,S5o),e(z,J_),e(J_,Die),e(Die,R5o),e(J_,P5o),e(J_,ZN),e(ZN,B5o),e(J_,I5o),e(z,q5o),e(z,Y_),e(Y_,Gie),e(Gie,N5o),e(Y_,j5o),e(Y_,ej),e(ej,D5o),e(Y_,G5o),e(z,O5o),e(z,K_),e(K_,Oie),e(Oie,V5o),e(K_,X5o),e(K_,oj),e(oj,z5o),e(K_,W5o),e(z,Q5o),e(z,Z_),e(Z_,Vie),e(Vie,H5o),e(Z_,U5o),e(Z_,rj),e(rj,J5o),e(Z_,Y5o),e(z,K5o),e(z,eb),e(eb,Xie),e(Xie,Z5o),e(eb,e3o),e(eb,tj),e(tj,o3o),e(eb,r3o),e(z,t3o),e(z,ob),e(ob,zie),e(zie,a3o),e(ob,n3o),e(ob,aj),e(aj,s3o),e(ob,l3o),e(z,i3o),e(z,rb),e(rb,Wie),e(Wie,d3o),e(rb,c3o),e(rb,nj),e(nj,m3o),e(rb,f3o),e(z,g3o),e(z,tb),e(tb,Qie),e(Qie,h3o),e(tb,u3o),e(tb,sj),e(sj,p3o),e(tb,_3o),e(z,b3o),e(z,ab),e(ab,Hie),e(Hie,v3o),e(ab,F3o),e(ab,lj),e(lj,T3o),e(ab,M3o),e(z,E3o),e(z,nb),e(nb,Uie),e(Uie,C3o),e(nb,w3o),e(nb,ij),e(ij,A3o),e(nb,y3o),e(z,L3o),e(z,sb),e(sb,Jie),e(Jie,x3o),e(sb,$3o),e(sb,dj),e(dj,k3o),e(sb,S3o),e(z,R3o),e(z,lb),e(lb,Yie),e(Yie,P3o),e(lb,B3o),e(lb,cj),e(cj,I3o),e(lb,q3o),e(z,N3o),e(z,ib),e(ib,Kie),e(Kie,j3o),e(ib,D3o),e(ib,mj),e(mj,G3o),e(ib,O3o),e(z,V3o),e(z,db),e(db,Zie),e(Zie,X3o),e(db,z3o),e(db,fj),e(fj,W3o),e(db,Q3o),e(z,H3o),e(z,cb),e(cb,ede),e(ede,U3o),e(cb,J3o),e(cb,gj),e(gj,Y3o),e(cb,K3o),e(z,Z3o),e(z,mb),e(mb,ode),e(ode,ewo),e(mb,owo),e(mb,hj),e(hj,rwo),e(mb,two),e(z,awo),e(z,fb),e(fb,rde),e(rde,nwo),e(fb,swo),e(fb,uj),e(uj,lwo),e(fb,iwo),e(z,dwo),e(z,gb),e(gb,tde),e(tde,cwo),e(gb,mwo),e(gb,pj),e(pj,fwo),e(gb,gwo),e(z,hwo),e(z,hb),e(hb,ade),e(ade,uwo),e(hb,pwo),e(hb,_j),e(_j,_wo),e(hb,bwo),e(z,vwo),e(z,ub),e(ub,nde),e(nde,Fwo),e(ub,Two),e(ub,bj),e(bj,Mwo),e(ub,Ewo),e(z,Cwo),e(z,pb),e(pb,sde),e(sde,wwo),e(pb,Awo),e(pb,vj),e(vj,ywo),e(pb,Lwo),e(z,xwo),e(z,_b),e(_b,lde),e(lde,$wo),e(_b,kwo),e(_b,Fj),e(Fj,Swo),e(_b,Rwo),e(z,Pwo),e(z,bb),e(bb,ide),e(ide,Bwo),e(bb,Iwo),e(bb,Tj),e(Tj,qwo),e(bb,Nwo),e(Ke,jwo),e(Ke,vb),e(vb,Dwo),e(vb,dde),e(dde,Gwo),e(vb,Owo),e(vb,cde),e(cde,Vwo),e(Ke,Xwo),M(Fb,Ke,null),b(m,HIe,_),b(m,Ri,_),e(Ri,Tb),e(Tb,mde),M(Uy,mde,null),e(Ri,zwo),e(Ri,fde),e(fde,Wwo),b(m,UIe,_),b(m,ko,_),M(Jy,ko,null),e(ko,Qwo),e(ko,Pi),e(Pi,Hwo),e(Pi,Mj),e(Mj,Uwo),e(Pi,Jwo),e(Pi,Ej),e(Ej,Ywo),e(Pi,Kwo),e(ko,Zwo),e(ko,Yy),e(Yy,eAo),e(Yy,gde),e(gde,oAo),e(Yy,rAo),e(ko,tAo),e(ko,st),M(Ky,st,null),e(st,aAo),e(st,hde),e(hde,nAo),e(st,sAo),e(st,Bi),e(Bi,lAo),e(Bi,ude),e(ude,iAo),e(Bi,dAo),e(Bi,Cj),e(Cj,cAo),e(Bi,mAo),e(st,fAo),M(Mb,st,null),e(ko,gAo),e(ko,Ze),M(Zy,Ze,null),e(Ze,hAo),e(Ze,pde),e(pde,uAo),e(Ze,pAo),e(Ze,ka),e(ka,_Ao),e(ka,_de),e(_de,bAo),e(ka,vAo),e(ka,bde),e(bde,FAo),e(ka,TAo),e(ka,vde),e(vde,MAo),e(ka,EAo),e(Ze,CAo),e(Ze,W),e(W,Eb),e(Eb,Fde),e(Fde,wAo),e(Eb,AAo),e(Eb,wj),e(wj,yAo),e(Eb,LAo),e(W,xAo),e(W,Cb),e(Cb,Tde),e(Tde,$Ao),e(Cb,kAo),e(Cb,Aj),e(Aj,SAo),e(Cb,RAo),e(W,PAo),e(W,wb),e(wb,Mde),e(Mde,BAo),e(wb,IAo),e(wb,yj),e(yj,qAo),e(wb,NAo),e(W,jAo),e(W,Ab),e(Ab,Ede),e(Ede,DAo),e(Ab,GAo),e(Ab,Lj),e(Lj,OAo),e(Ab,VAo),e(W,XAo),e(W,yb),e(yb,Cde),e(Cde,zAo),e(yb,WAo),e(yb,xj),e(xj,QAo),e(yb,HAo),e(W,UAo),e(W,Lb),e(Lb,wde),e(wde,JAo),e(Lb,YAo),e(Lb,$j),e($j,KAo),e(Lb,ZAo),e(W,e6o),e(W,xb),e(xb,Ade),e(Ade,o6o),e(xb,r6o),e(xb,kj),e(kj,t6o),e(xb,a6o),e(W,n6o),e(W,$b),e($b,yde),e(yde,s6o),e($b,l6o),e($b,Sj),e(Sj,i6o),e($b,d6o),e(W,c6o),e(W,kb),e(kb,Lde),e(Lde,m6o),e(kb,f6o),e(kb,Rj),e(Rj,g6o),e(kb,h6o),e(W,u6o),e(W,Sb),e(Sb,xde),e(xde,p6o),e(Sb,_6o),e(Sb,Pj),e(Pj,b6o),e(Sb,v6o),e(W,F6o),e(W,Rb),e(Rb,$de),e($de,T6o),e(Rb,M6o),e(Rb,Bj),e(Bj,E6o),e(Rb,C6o),e(W,w6o),e(W,Pb),e(Pb,kde),e(kde,A6o),e(Pb,y6o),e(Pb,Ij),e(Ij,L6o),e(Pb,x6o),e(W,$6o),e(W,Bb),e(Bb,Sde),e(Sde,k6o),e(Bb,S6o),e(Bb,qj),e(qj,R6o),e(Bb,P6o),e(W,B6o),e(W,Ib),e(Ib,Rde),e(Rde,I6o),e(Ib,q6o),e(Ib,Nj),e(Nj,N6o),e(Ib,j6o),e(W,D6o),e(W,qb),e(qb,Pde),e(Pde,G6o),e(qb,O6o),e(qb,jj),e(jj,V6o),e(qb,X6o),e(W,z6o),e(W,Nb),e(Nb,Bde),e(Bde,W6o),e(Nb,Q6o),e(Nb,Dj),e(Dj,H6o),e(Nb,U6o),e(W,J6o),e(W,jb),e(jb,Ide),e(Ide,Y6o),e(jb,K6o),e(jb,Gj),e(Gj,Z6o),e(jb,e0o),e(W,o0o),e(W,Db),e(Db,qde),e(qde,r0o),e(Db,t0o),e(Db,Oj),e(Oj,a0o),e(Db,n0o),e(W,s0o),e(W,Gb),e(Gb,Nde),e(Nde,l0o),e(Gb,i0o),e(Gb,Vj),e(Vj,d0o),e(Gb,c0o),e(W,m0o),e(W,Ob),e(Ob,jde),e(jde,f0o),e(Ob,g0o),e(Ob,Xj),e(Xj,h0o),e(Ob,u0o),e(W,p0o),e(W,Vb),e(Vb,Dde),e(Dde,_0o),e(Vb,b0o),e(Vb,zj),e(zj,v0o),e(Vb,F0o),e(W,T0o),e(W,Xb),e(Xb,Gde),e(Gde,M0o),e(Xb,E0o),e(Xb,Wj),e(Wj,C0o),e(Xb,w0o),e(W,A0o),e(W,zb),e(zb,Ode),e(Ode,y0o),e(zb,L0o),e(zb,Qj),e(Qj,x0o),e(zb,$0o),e(W,k0o),e(W,Wb),e(Wb,Vde),e(Vde,S0o),e(Wb,R0o),e(Wb,Hj),e(Hj,P0o),e(Wb,B0o),e(W,I0o),e(W,Qb),e(Qb,Xde),e(Xde,q0o),e(Qb,N0o),e(Qb,Uj),e(Uj,j0o),e(Qb,D0o),e(W,G0o),e(W,Hb),e(Hb,zde),e(zde,O0o),e(Hb,V0o),e(Hb,Jj),e(Jj,X0o),e(Hb,z0o),e(W,W0o),e(W,Ub),e(Ub,Wde),e(Wde,Q0o),e(Ub,H0o),e(Ub,Yj),e(Yj,U0o),e(Ub,J0o),e(W,Y0o),e(W,Jb),e(Jb,Qde),e(Qde,K0o),e(Jb,Z0o),e(Jb,Kj),e(Kj,eyo),e(Jb,oyo),e(W,ryo),e(W,Yb),e(Yb,Hde),e(Hde,tyo),e(Yb,ayo),e(Yb,Zj),e(Zj,nyo),e(Yb,syo),e(W,lyo),e(W,Kb),e(Kb,Ude),e(Ude,iyo),e(Kb,dyo),e(Kb,eD),e(eD,cyo),e(Kb,myo),e(W,fyo),e(W,Zb),e(Zb,Jde),e(Jde,gyo),e(Zb,hyo),e(Zb,Yde),e(Yde,uyo),e(Zb,pyo),e(W,_yo),e(W,e2),e(e2,Kde),e(Kde,byo),e(e2,vyo),e(e2,oD),e(oD,Fyo),e(e2,Tyo),e(W,Myo),e(W,o2),e(o2,Zde),e(Zde,Eyo),e(o2,Cyo),e(o2,rD),e(rD,wyo),e(o2,Ayo),e(W,yyo),e(W,r2),e(r2,ece),e(ece,Lyo),e(r2,xyo),e(r2,tD),e(tD,$yo),e(r2,kyo),e(W,Syo),e(W,t2),e(t2,oce),e(oce,Ryo),e(t2,Pyo),e(t2,aD),e(aD,Byo),e(t2,Iyo),e(Ze,qyo),e(Ze,a2),e(a2,Nyo),e(a2,rce),e(rce,jyo),e(a2,Dyo),e(a2,tce),e(tce,Gyo),e(Ze,Oyo),M(n2,Ze,null),b(m,JIe,_),b(m,Ii,_),e(Ii,s2),e(s2,ace),M(eL,ace,null),e(Ii,Vyo),e(Ii,nce),e(nce,Xyo),b(m,YIe,_),b(m,So,_),M(oL,So,null),e(So,zyo),e(So,qi),e(qi,Wyo),e(qi,nD),e(nD,Qyo),e(qi,Hyo),e(qi,sD),e(sD,Uyo),e(qi,Jyo),e(So,Yyo),e(So,rL),e(rL,Kyo),e(rL,sce),e(sce,Zyo),e(rL,eLo),e(So,oLo),e(So,lt),M(tL,lt,null),e(lt,rLo),e(lt,lce),e(lce,tLo),e(lt,aLo),e(lt,Ni),e(Ni,nLo),e(Ni,ice),e(ice,sLo),e(Ni,lLo),e(Ni,lD),e(lD,iLo),e(Ni,dLo),e(lt,cLo),M(l2,lt,null),e(So,mLo),e(So,eo),M(aL,eo,null),e(eo,fLo),e(eo,dce),e(dce,gLo),e(eo,hLo),e(eo,Sa),e(Sa,uLo),e(Sa,cce),e(cce,pLo),e(Sa,_Lo),e(Sa,mce),e(mce,bLo),e(Sa,vLo),e(Sa,fce),e(fce,FLo),e(Sa,TLo),e(eo,MLo),e(eo,pe),e(pe,i2),e(i2,gce),e(gce,ELo),e(i2,CLo),e(i2,iD),e(iD,wLo),e(i2,ALo),e(pe,yLo),e(pe,d2),e(d2,hce),e(hce,LLo),e(d2,xLo),e(d2,dD),e(dD,$Lo),e(d2,kLo),e(pe,SLo),e(pe,c2),e(c2,uce),e(uce,RLo),e(c2,PLo),e(c2,cD),e(cD,BLo),e(c2,ILo),e(pe,qLo),e(pe,m2),e(m2,pce),e(pce,NLo),e(m2,jLo),e(m2,mD),e(mD,DLo),e(m2,GLo),e(pe,OLo),e(pe,f2),e(f2,_ce),e(_ce,VLo),e(f2,XLo),e(f2,fD),e(fD,zLo),e(f2,WLo),e(pe,QLo),e(pe,g2),e(g2,bce),e(bce,HLo),e(g2,ULo),e(g2,gD),e(gD,JLo),e(g2,YLo),e(pe,KLo),e(pe,h2),e(h2,vce),e(vce,ZLo),e(h2,e8o),e(h2,hD),e(hD,o8o),e(h2,r8o),e(pe,t8o),e(pe,u2),e(u2,Fce),e(Fce,a8o),e(u2,n8o),e(u2,uD),e(uD,s8o),e(u2,l8o),e(pe,i8o),e(pe,p2),e(p2,Tce),e(Tce,d8o),e(p2,c8o),e(p2,pD),e(pD,m8o),e(p2,f8o),e(pe,g8o),e(pe,_2),e(_2,Mce),e(Mce,h8o),e(_2,u8o),e(_2,_D),e(_D,p8o),e(_2,_8o),e(pe,b8o),e(pe,b2),e(b2,Ece),e(Ece,v8o),e(b2,F8o),e(b2,bD),e(bD,T8o),e(b2,M8o),e(pe,E8o),e(pe,v2),e(v2,Cce),e(Cce,C8o),e(v2,w8o),e(v2,vD),e(vD,A8o),e(v2,y8o),e(pe,L8o),e(pe,F2),e(F2,wce),e(wce,x8o),e(F2,$8o),e(F2,FD),e(FD,k8o),e(F2,S8o),e(pe,R8o),e(pe,T2),e(T2,Ace),e(Ace,P8o),e(T2,B8o),e(T2,TD),e(TD,I8o),e(T2,q8o),e(pe,N8o),e(pe,M2),e(M2,yce),e(yce,j8o),e(M2,D8o),e(M2,MD),e(MD,G8o),e(M2,O8o),e(pe,V8o),e(pe,E2),e(E2,Lce),e(Lce,X8o),e(E2,z8o),e(E2,ED),e(ED,W8o),e(E2,Q8o),e(eo,H8o),e(eo,C2),e(C2,U8o),e(C2,xce),e(xce,J8o),e(C2,Y8o),e(C2,$ce),e($ce,K8o),e(eo,Z8o),M(w2,eo,null),b(m,KIe,_),b(m,ji,_),e(ji,A2),e(A2,kce),M(nL,kce,null),e(ji,exo),e(ji,Sce),e(Sce,oxo),b(m,ZIe,_),b(m,Ro,_),M(sL,Ro,null),e(Ro,rxo),e(Ro,Di),e(Di,txo),e(Di,CD),e(CD,axo),e(Di,nxo),e(Di,wD),e(wD,sxo),e(Di,lxo),e(Ro,ixo),e(Ro,lL),e(lL,dxo),e(lL,Rce),e(Rce,cxo),e(lL,mxo),e(Ro,fxo),e(Ro,it),M(iL,it,null),e(it,gxo),e(it,Pce),e(Pce,hxo),e(it,uxo),e(it,Gi),e(Gi,pxo),e(Gi,Bce),e(Bce,_xo),e(Gi,bxo),e(Gi,AD),e(AD,vxo),e(Gi,Fxo),e(it,Txo),M(y2,it,null),e(Ro,Mxo),e(Ro,oo),M(dL,oo,null),e(oo,Exo),e(oo,Ice),e(Ice,Cxo),e(oo,wxo),e(oo,Ra),e(Ra,Axo),e(Ra,qce),e(qce,yxo),e(Ra,Lxo),e(Ra,Nce),e(Nce,xxo),e(Ra,$xo),e(Ra,jce),e(jce,kxo),e(Ra,Sxo),e(oo,Rxo),e(oo,q),e(q,L2),e(L2,Dce),e(Dce,Pxo),e(L2,Bxo),e(L2,yD),e(yD,Ixo),e(L2,qxo),e(q,Nxo),e(q,x2),e(x2,Gce),e(Gce,jxo),e(x2,Dxo),e(x2,LD),e(LD,Gxo),e(x2,Oxo),e(q,Vxo),e(q,$2),e($2,Oce),e(Oce,Xxo),e($2,zxo),e($2,xD),e(xD,Wxo),e($2,Qxo),e(q,Hxo),e(q,k2),e(k2,Vce),e(Vce,Uxo),e(k2,Jxo),e(k2,$D),e($D,Yxo),e(k2,Kxo),e(q,Zxo),e(q,S2),e(S2,Xce),e(Xce,e7o),e(S2,o7o),e(S2,kD),e(kD,r7o),e(S2,t7o),e(q,a7o),e(q,R2),e(R2,zce),e(zce,n7o),e(R2,s7o),e(R2,SD),e(SD,l7o),e(R2,i7o),e(q,d7o),e(q,P2),e(P2,Wce),e(Wce,c7o),e(P2,m7o),e(P2,RD),e(RD,f7o),e(P2,g7o),e(q,h7o),e(q,B2),e(B2,Qce),e(Qce,u7o),e(B2,p7o),e(B2,PD),e(PD,_7o),e(B2,b7o),e(q,v7o),e(q,I2),e(I2,Hce),e(Hce,F7o),e(I2,T7o),e(I2,BD),e(BD,M7o),e(I2,E7o),e(q,C7o),e(q,q2),e(q2,Uce),e(Uce,w7o),e(q2,A7o),e(q2,ID),e(ID,y7o),e(q2,L7o),e(q,x7o),e(q,N2),e(N2,Jce),e(Jce,$7o),e(N2,k7o),e(N2,qD),e(qD,S7o),e(N2,R7o),e(q,P7o),e(q,j2),e(j2,Yce),e(Yce,B7o),e(j2,I7o),e(j2,ND),e(ND,q7o),e(j2,N7o),e(q,j7o),e(q,D2),e(D2,Kce),e(Kce,D7o),e(D2,G7o),e(D2,jD),e(jD,O7o),e(D2,V7o),e(q,X7o),e(q,G2),e(G2,Zce),e(Zce,z7o),e(G2,W7o),e(G2,DD),e(DD,Q7o),e(G2,H7o),e(q,U7o),e(q,O2),e(O2,eme),e(eme,J7o),e(O2,Y7o),e(O2,GD),e(GD,K7o),e(O2,Z7o),e(q,e9o),e(q,V2),e(V2,ome),e(ome,o9o),e(V2,r9o),e(V2,OD),e(OD,t9o),e(V2,a9o),e(q,n9o),e(q,X2),e(X2,rme),e(rme,s9o),e(X2,l9o),e(X2,VD),e(VD,i9o),e(X2,d9o),e(q,c9o),e(q,z2),e(z2,tme),e(tme,m9o),e(z2,f9o),e(z2,XD),e(XD,g9o),e(z2,h9o),e(q,u9o),e(q,W2),e(W2,ame),e(ame,p9o),e(W2,_9o),e(W2,zD),e(zD,b9o),e(W2,v9o),e(q,F9o),e(q,Q2),e(Q2,nme),e(nme,T9o),e(Q2,M9o),e(Q2,WD),e(WD,E9o),e(Q2,C9o),e(q,w9o),e(q,H2),e(H2,sme),e(sme,A9o),e(H2,y9o),e(H2,QD),e(QD,L9o),e(H2,x9o),e(q,$9o),e(q,U2),e(U2,lme),e(lme,k9o),e(U2,S9o),e(U2,HD),e(HD,R9o),e(U2,P9o),e(q,B9o),e(q,J2),e(J2,ime),e(ime,I9o),e(J2,q9o),e(J2,UD),e(UD,N9o),e(J2,j9o),e(q,D9o),e(q,Y2),e(Y2,dme),e(dme,G9o),e(Y2,O9o),e(Y2,JD),e(JD,V9o),e(Y2,X9o),e(q,z9o),e(q,K2),e(K2,cme),e(cme,W9o),e(K2,Q9o),e(K2,YD),e(YD,H9o),e(K2,U9o),e(q,J9o),e(q,Z2),e(Z2,mme),e(mme,Y9o),e(Z2,K9o),e(Z2,KD),e(KD,Z9o),e(Z2,e$o),e(q,o$o),e(q,ev),e(ev,fme),e(fme,r$o),e(ev,t$o),e(ev,ZD),e(ZD,a$o),e(ev,n$o),e(q,s$o),e(q,ov),e(ov,gme),e(gme,l$o),e(ov,i$o),e(ov,eG),e(eG,d$o),e(ov,c$o),e(q,m$o),e(q,rv),e(rv,hme),e(hme,f$o),e(rv,g$o),e(rv,oG),e(oG,h$o),e(rv,u$o),e(q,p$o),e(q,tv),e(tv,ume),e(ume,_$o),e(tv,b$o),e(tv,rG),e(rG,v$o),e(tv,F$o),e(q,T$o),e(q,av),e(av,pme),e(pme,M$o),e(av,E$o),e(av,tG),e(tG,C$o),e(av,w$o),e(q,A$o),e(q,nv),e(nv,_me),e(_me,y$o),e(nv,L$o),e(nv,aG),e(aG,x$o),e(nv,$$o),e(q,k$o),e(q,sv),e(sv,bme),e(bme,S$o),e(sv,R$o),e(sv,nG),e(nG,P$o),e(sv,B$o),e(q,I$o),e(q,lv),e(lv,vme),e(vme,q$o),e(lv,N$o),e(lv,sG),e(sG,j$o),e(lv,D$o),e(q,G$o),e(q,iv),e(iv,Fme),e(Fme,O$o),e(iv,V$o),e(iv,lG),e(lG,X$o),e(iv,z$o),e(q,W$o),e(q,dv),e(dv,Tme),e(Tme,Q$o),e(dv,H$o),e(dv,iG),e(iG,U$o),e(dv,J$o),e(q,Y$o),e(q,cv),e(cv,Mme),e(Mme,K$o),e(cv,Z$o),e(cv,dG),e(dG,eko),e(cv,oko),e(q,rko),e(q,mv),e(mv,Eme),e(Eme,tko),e(mv,ako),e(mv,cG),e(cG,nko),e(mv,sko),e(q,lko),e(q,fv),e(fv,Cme),e(Cme,iko),e(fv,dko),e(fv,mG),e(mG,cko),e(fv,mko),e(q,fko),e(q,gv),e(gv,wme),e(wme,gko),e(gv,hko),e(gv,fG),e(fG,uko),e(gv,pko),e(q,_ko),e(q,hv),e(hv,Ame),e(Ame,bko),e(hv,vko),e(hv,gG),e(gG,Fko),e(hv,Tko),e(q,Mko),e(q,uv),e(uv,yme),e(yme,Eko),e(uv,Cko),e(uv,hG),e(hG,wko),e(uv,Ako),e(q,yko),e(q,pv),e(pv,Lme),e(Lme,Lko),e(pv,xko),e(pv,uG),e(uG,$ko),e(pv,kko),e(q,Sko),e(q,_v),e(_v,xme),e(xme,Rko),e(_v,Pko),e(_v,pG),e(pG,Bko),e(_v,Iko),e(q,qko),e(q,bv),e(bv,$me),e($me,Nko),e(bv,jko),e(bv,_G),e(_G,Dko),e(bv,Gko),e(q,Oko),e(q,vv),e(vv,kme),e(kme,Vko),e(vv,Xko),e(vv,bG),e(bG,zko),e(vv,Wko),e(oo,Qko),e(oo,Fv),e(Fv,Hko),e(Fv,Sme),e(Sme,Uko),e(Fv,Jko),e(Fv,Rme),e(Rme,Yko),e(oo,Kko),M(Tv,oo,null),b(m,eqe,_),b(m,Oi,_),e(Oi,Mv),e(Mv,Pme),M(cL,Pme,null),e(Oi,Zko),e(Oi,Bme),e(Bme,eSo),b(m,oqe,_),b(m,Po,_),M(mL,Po,null),e(Po,oSo),e(Po,Vi),e(Vi,rSo),e(Vi,vG),e(vG,tSo),e(Vi,aSo),e(Vi,FG),e(FG,nSo),e(Vi,sSo),e(Po,lSo),e(Po,fL),e(fL,iSo),e(fL,Ime),e(Ime,dSo),e(fL,cSo),e(Po,mSo),e(Po,dt),M(gL,dt,null),e(dt,fSo),e(dt,qme),e(qme,gSo),e(dt,hSo),e(dt,Xi),e(Xi,uSo),e(Xi,Nme),e(Nme,pSo),e(Xi,_So),e(Xi,TG),e(TG,bSo),e(Xi,vSo),e(dt,FSo),M(Ev,dt,null),e(Po,TSo),e(Po,ro),M(hL,ro,null),e(ro,MSo),e(ro,jme),e(jme,ESo),e(ro,CSo),e(ro,Pa),e(Pa,wSo),e(Pa,Dme),e(Dme,ASo),e(Pa,ySo),e(Pa,Gme),e(Gme,LSo),e(Pa,xSo),e(Pa,Ome),e(Ome,$So),e(Pa,kSo),e(ro,SSo),e(ro,Y),e(Y,Cv),e(Cv,Vme),e(Vme,RSo),e(Cv,PSo),e(Cv,MG),e(MG,BSo),e(Cv,ISo),e(Y,qSo),e(Y,wv),e(wv,Xme),e(Xme,NSo),e(wv,jSo),e(wv,EG),e(EG,DSo),e(wv,GSo),e(Y,OSo),e(Y,Av),e(Av,zme),e(zme,VSo),e(Av,XSo),e(Av,CG),e(CG,zSo),e(Av,WSo),e(Y,QSo),e(Y,yv),e(yv,Wme),e(Wme,HSo),e(yv,USo),e(yv,wG),e(wG,JSo),e(yv,YSo),e(Y,KSo),e(Y,Lv),e(Lv,Qme),e(Qme,ZSo),e(Lv,eRo),e(Lv,AG),e(AG,oRo),e(Lv,rRo),e(Y,tRo),e(Y,xv),e(xv,Hme),e(Hme,aRo),e(xv,nRo),e(xv,yG),e(yG,sRo),e(xv,lRo),e(Y,iRo),e(Y,$v),e($v,Ume),e(Ume,dRo),e($v,cRo),e($v,LG),e(LG,mRo),e($v,fRo),e(Y,gRo),e(Y,kv),e(kv,Jme),e(Jme,hRo),e(kv,uRo),e(kv,xG),e(xG,pRo),e(kv,_Ro),e(Y,bRo),e(Y,Sv),e(Sv,Yme),e(Yme,vRo),e(Sv,FRo),e(Sv,$G),e($G,TRo),e(Sv,MRo),e(Y,ERo),e(Y,Rv),e(Rv,Kme),e(Kme,CRo),e(Rv,wRo),e(Rv,kG),e(kG,ARo),e(Rv,yRo),e(Y,LRo),e(Y,Pv),e(Pv,Zme),e(Zme,xRo),e(Pv,$Ro),e(Pv,SG),e(SG,kRo),e(Pv,SRo),e(Y,RRo),e(Y,Bv),e(Bv,efe),e(efe,PRo),e(Bv,BRo),e(Bv,RG),e(RG,IRo),e(Bv,qRo),e(Y,NRo),e(Y,Iv),e(Iv,ofe),e(ofe,jRo),e(Iv,DRo),e(Iv,PG),e(PG,GRo),e(Iv,ORo),e(Y,VRo),e(Y,qv),e(qv,rfe),e(rfe,XRo),e(qv,zRo),e(qv,BG),e(BG,WRo),e(qv,QRo),e(Y,HRo),e(Y,Nv),e(Nv,tfe),e(tfe,URo),e(Nv,JRo),e(Nv,IG),e(IG,YRo),e(Nv,KRo),e(Y,ZRo),e(Y,jv),e(jv,afe),e(afe,ePo),e(jv,oPo),e(jv,qG),e(qG,rPo),e(jv,tPo),e(Y,aPo),e(Y,Dv),e(Dv,nfe),e(nfe,nPo),e(Dv,sPo),e(Dv,NG),e(NG,lPo),e(Dv,iPo),e(Y,dPo),e(Y,Gv),e(Gv,sfe),e(sfe,cPo),e(Gv,mPo),e(Gv,jG),e(jG,fPo),e(Gv,gPo),e(Y,hPo),e(Y,Ov),e(Ov,lfe),e(lfe,uPo),e(Ov,pPo),e(Ov,DG),e(DG,_Po),e(Ov,bPo),e(Y,vPo),e(Y,Vv),e(Vv,ife),e(ife,FPo),e(Vv,TPo),e(Vv,GG),e(GG,MPo),e(Vv,EPo),e(Y,CPo),e(Y,Xv),e(Xv,dfe),e(dfe,wPo),e(Xv,APo),e(Xv,OG),e(OG,yPo),e(Xv,LPo),e(Y,xPo),e(Y,zv),e(zv,cfe),e(cfe,$Po),e(zv,kPo),e(zv,VG),e(VG,SPo),e(zv,RPo),e(Y,PPo),e(Y,Wv),e(Wv,mfe),e(mfe,BPo),e(Wv,IPo),e(Wv,XG),e(XG,qPo),e(Wv,NPo),e(Y,jPo),e(Y,Qv),e(Qv,ffe),e(ffe,DPo),e(Qv,GPo),e(Qv,zG),e(zG,OPo),e(Qv,VPo),e(Y,XPo),e(Y,Hv),e(Hv,gfe),e(gfe,zPo),e(Hv,WPo),e(Hv,WG),e(WG,QPo),e(Hv,HPo),e(Y,UPo),e(Y,Uv),e(Uv,hfe),e(hfe,JPo),e(Uv,YPo),e(Uv,QG),e(QG,KPo),e(Uv,ZPo),e(Y,eBo),e(Y,Jv),e(Jv,ufe),e(ufe,oBo),e(Jv,rBo),e(Jv,HG),e(HG,tBo),e(Jv,aBo),e(Y,nBo),e(Y,Yv),e(Yv,pfe),e(pfe,sBo),e(Yv,lBo),e(Yv,UG),e(UG,iBo),e(Yv,dBo),e(Y,cBo),e(Y,Kv),e(Kv,_fe),e(_fe,mBo),e(Kv,fBo),e(Kv,JG),e(JG,gBo),e(Kv,hBo),e(ro,uBo),e(ro,Zv),e(Zv,pBo),e(Zv,bfe),e(bfe,_Bo),e(Zv,bBo),e(Zv,vfe),e(vfe,vBo),e(ro,FBo),M(eF,ro,null),b(m,rqe,_),b(m,zi,_),e(zi,oF),e(oF,Ffe),M(uL,Ffe,null),e(zi,TBo),e(zi,Tfe),e(Tfe,MBo),b(m,tqe,_),b(m,Bo,_),M(pL,Bo,null),e(Bo,EBo),e(Bo,Wi),e(Wi,CBo),e(Wi,YG),e(YG,wBo),e(Wi,ABo),e(Wi,KG),e(KG,yBo),e(Wi,LBo),e(Bo,xBo),e(Bo,_L),e(_L,$Bo),e(_L,Mfe),e(Mfe,kBo),e(_L,SBo),e(Bo,RBo),e(Bo,ct),M(bL,ct,null),e(ct,PBo),e(ct,Efe),e(Efe,BBo),e(ct,IBo),e(ct,Qi),e(Qi,qBo),e(Qi,Cfe),e(Cfe,NBo),e(Qi,jBo),e(Qi,ZG),e(ZG,DBo),e(Qi,GBo),e(ct,OBo),M(rF,ct,null),e(Bo,VBo),e(Bo,to),M(vL,to,null),e(to,XBo),e(to,wfe),e(wfe,zBo),e(to,WBo),e(to,Ba),e(Ba,QBo),e(Ba,Afe),e(Afe,HBo),e(Ba,UBo),e(Ba,yfe),e(yfe,JBo),e(Ba,YBo),e(Ba,Lfe),e(Lfe,KBo),e(Ba,ZBo),e(to,eIo),e(to,Yr),e(Yr,tF),e(tF,xfe),e(xfe,oIo),e(tF,rIo),e(tF,eO),e(eO,tIo),e(tF,aIo),e(Yr,nIo),e(Yr,aF),e(aF,$fe),e($fe,sIo),e(aF,lIo),e(aF,oO),e(oO,iIo),e(aF,dIo),e(Yr,cIo),e(Yr,nF),e(nF,kfe),e(kfe,mIo),e(nF,fIo),e(nF,rO),e(rO,gIo),e(nF,hIo),e(Yr,uIo),e(Yr,sF),e(sF,Sfe),e(Sfe,pIo),e(sF,_Io),e(sF,tO),e(tO,bIo),e(sF,vIo),e(Yr,FIo),e(Yr,lF),e(lF,Rfe),e(Rfe,TIo),e(lF,MIo),e(lF,aO),e(aO,EIo),e(lF,CIo),e(to,wIo),e(to,iF),e(iF,AIo),e(iF,Pfe),e(Pfe,yIo),e(iF,LIo),e(iF,Bfe),e(Bfe,xIo),e(to,$Io),M(dF,to,null),b(m,aqe,_),b(m,Hi,_),e(Hi,cF),e(cF,Ife),M(FL,Ife,null),e(Hi,kIo),e(Hi,qfe),e(qfe,SIo),b(m,nqe,_),b(m,Io,_),M(TL,Io,null),e(Io,RIo),e(Io,Ui),e(Ui,PIo),e(Ui,nO),e(nO,BIo),e(Ui,IIo),e(Ui,sO),e(sO,qIo),e(Ui,NIo),e(Io,jIo),e(Io,ML),e(ML,DIo),e(ML,Nfe),e(Nfe,GIo),e(ML,OIo),e(Io,VIo),e(Io,mt),M(EL,mt,null),e(mt,XIo),e(mt,jfe),e(jfe,zIo),e(mt,WIo),e(mt,Ji),e(Ji,QIo),e(Ji,Dfe),e(Dfe,HIo),e(Ji,UIo),e(Ji,lO),e(lO,JIo),e(Ji,YIo),e(mt,KIo),M(mF,mt,null),e(Io,ZIo),e(Io,ao),M(CL,ao,null),e(ao,eqo),e(ao,Gfe),e(Gfe,oqo),e(ao,rqo),e(ao,Ia),e(Ia,tqo),e(Ia,Ofe),e(Ofe,aqo),e(Ia,nqo),e(Ia,Vfe),e(Vfe,sqo),e(Ia,lqo),e(Ia,Xfe),e(Xfe,iqo),e(Ia,dqo),e(ao,cqo),e(ao,U),e(U,fF),e(fF,zfe),e(zfe,mqo),e(fF,fqo),e(fF,iO),e(iO,gqo),e(fF,hqo),e(U,uqo),e(U,gF),e(gF,Wfe),e(Wfe,pqo),e(gF,_qo),e(gF,dO),e(dO,bqo),e(gF,vqo),e(U,Fqo),e(U,hF),e(hF,Qfe),e(Qfe,Tqo),e(hF,Mqo),e(hF,cO),e(cO,Eqo),e(hF,Cqo),e(U,wqo),e(U,uF),e(uF,Hfe),e(Hfe,Aqo),e(uF,yqo),e(uF,mO),e(mO,Lqo),e(uF,xqo),e(U,$qo),e(U,pF),e(pF,Ufe),e(Ufe,kqo),e(pF,Sqo),e(pF,fO),e(fO,Rqo),e(pF,Pqo),e(U,Bqo),e(U,_F),e(_F,Jfe),e(Jfe,Iqo),e(_F,qqo),e(_F,gO),e(gO,Nqo),e(_F,jqo),e(U,Dqo),e(U,bF),e(bF,Yfe),e(Yfe,Gqo),e(bF,Oqo),e(bF,hO),e(hO,Vqo),e(bF,Xqo),e(U,zqo),e(U,vF),e(vF,Kfe),e(Kfe,Wqo),e(vF,Qqo),e(vF,uO),e(uO,Hqo),e(vF,Uqo),e(U,Jqo),e(U,FF),e(FF,Zfe),e(Zfe,Yqo),e(FF,Kqo),e(FF,pO),e(pO,Zqo),e(FF,eNo),e(U,oNo),e(U,TF),e(TF,ege),e(ege,rNo),e(TF,tNo),e(TF,_O),e(_O,aNo),e(TF,nNo),e(U,sNo),e(U,MF),e(MF,oge),e(oge,lNo),e(MF,iNo),e(MF,bO),e(bO,dNo),e(MF,cNo),e(U,mNo),e(U,EF),e(EF,rge),e(rge,fNo),e(EF,gNo),e(EF,vO),e(vO,hNo),e(EF,uNo),e(U,pNo),e(U,CF),e(CF,tge),e(tge,_No),e(CF,bNo),e(CF,FO),e(FO,vNo),e(CF,FNo),e(U,TNo),e(U,wF),e(wF,age),e(age,MNo),e(wF,ENo),e(wF,TO),e(TO,CNo),e(wF,wNo),e(U,ANo),e(U,AF),e(AF,nge),e(nge,yNo),e(AF,LNo),e(AF,MO),e(MO,xNo),e(AF,$No),e(U,kNo),e(U,yF),e(yF,sge),e(sge,SNo),e(yF,RNo),e(yF,EO),e(EO,PNo),e(yF,BNo),e(U,INo),e(U,LF),e(LF,lge),e(lge,qNo),e(LF,NNo),e(LF,CO),e(CO,jNo),e(LF,DNo),e(U,GNo),e(U,xF),e(xF,ige),e(ige,ONo),e(xF,VNo),e(xF,wO),e(wO,XNo),e(xF,zNo),e(U,WNo),e(U,$F),e($F,dge),e(dge,QNo),e($F,HNo),e($F,AO),e(AO,UNo),e($F,JNo),e(U,YNo),e(U,kF),e(kF,cge),e(cge,KNo),e(kF,ZNo),e(kF,yO),e(yO,ejo),e(kF,ojo),e(U,rjo),e(U,SF),e(SF,mge),e(mge,tjo),e(SF,ajo),e(SF,LO),e(LO,njo),e(SF,sjo),e(U,ljo),e(U,RF),e(RF,fge),e(fge,ijo),e(RF,djo),e(RF,xO),e(xO,cjo),e(RF,mjo),e(U,fjo),e(U,PF),e(PF,gge),e(gge,gjo),e(PF,hjo),e(PF,$O),e($O,ujo),e(PF,pjo),e(U,_jo),e(U,BF),e(BF,hge),e(hge,bjo),e(BF,vjo),e(BF,kO),e(kO,Fjo),e(BF,Tjo),e(U,Mjo),e(U,IF),e(IF,uge),e(uge,Ejo),e(IF,Cjo),e(IF,SO),e(SO,wjo),e(IF,Ajo),e(U,yjo),e(U,qF),e(qF,pge),e(pge,Ljo),e(qF,xjo),e(qF,RO),e(RO,$jo),e(qF,kjo),e(U,Sjo),e(U,NF),e(NF,_ge),e(_ge,Rjo),e(NF,Pjo),e(NF,PO),e(PO,Bjo),e(NF,Ijo),e(U,qjo),e(U,jF),e(jF,bge),e(bge,Njo),e(jF,jjo),e(jF,BO),e(BO,Djo),e(jF,Gjo),e(U,Ojo),e(U,DF),e(DF,vge),e(vge,Vjo),e(DF,Xjo),e(DF,IO),e(IO,zjo),e(DF,Wjo),e(U,Qjo),e(U,GF),e(GF,Fge),e(Fge,Hjo),e(GF,Ujo),e(GF,qO),e(qO,Jjo),e(GF,Yjo),e(U,Kjo),e(U,OF),e(OF,Tge),e(Tge,Zjo),e(OF,eDo),e(OF,NO),e(NO,oDo),e(OF,rDo),e(U,tDo),e(U,VF),e(VF,Mge),e(Mge,aDo),e(VF,nDo),e(VF,jO),e(jO,sDo),e(VF,lDo),e(U,iDo),e(U,XF),e(XF,Ege),e(Ege,dDo),e(XF,cDo),e(XF,DO),e(DO,mDo),e(XF,fDo),e(ao,gDo),e(ao,zF),e(zF,hDo),e(zF,Cge),e(Cge,uDo),e(zF,pDo),e(zF,wge),e(wge,_Do),e(ao,bDo),M(WF,ao,null),b(m,sqe,_),b(m,Yi,_),e(Yi,QF),e(QF,Age),M(wL,Age,null),e(Yi,vDo),e(Yi,yge),e(yge,FDo),b(m,lqe,_),b(m,qo,_),M(AL,qo,null),e(qo,TDo),e(qo,Ki),e(Ki,MDo),e(Ki,GO),e(GO,EDo),e(Ki,CDo),e(Ki,OO),e(OO,wDo),e(Ki,ADo),e(qo,yDo),e(qo,yL),e(yL,LDo),e(yL,Lge),e(Lge,xDo),e(yL,$Do),e(qo,kDo),e(qo,ft),M(LL,ft,null),e(ft,SDo),e(ft,xge),e(xge,RDo),e(ft,PDo),e(ft,Zi),e(Zi,BDo),e(Zi,$ge),e($ge,IDo),e(Zi,qDo),e(Zi,VO),e(VO,NDo),e(Zi,jDo),e(ft,DDo),M(HF,ft,null),e(qo,GDo),e(qo,no),M(xL,no,null),e(no,ODo),e(no,kge),e(kge,VDo),e(no,XDo),e(no,qa),e(qa,zDo),e(qa,Sge),e(Sge,WDo),e(qa,QDo),e(qa,Rge),e(Rge,HDo),e(qa,UDo),e(qa,Pge),e(Pge,JDo),e(qa,YDo),e(no,KDo),e(no,V),e(V,UF),e(UF,Bge),e(Bge,ZDo),e(UF,eGo),e(UF,XO),e(XO,oGo),e(UF,rGo),e(V,tGo),e(V,JF),e(JF,Ige),e(Ige,aGo),e(JF,nGo),e(JF,zO),e(zO,sGo),e(JF,lGo),e(V,iGo),e(V,YF),e(YF,qge),e(qge,dGo),e(YF,cGo),e(YF,WO),e(WO,mGo),e(YF,fGo),e(V,gGo),e(V,KF),e(KF,Nge),e(Nge,hGo),e(KF,uGo),e(KF,QO),e(QO,pGo),e(KF,_Go),e(V,bGo),e(V,ZF),e(ZF,jge),e(jge,vGo),e(ZF,FGo),e(ZF,HO),e(HO,TGo),e(ZF,MGo),e(V,EGo),e(V,e1),e(e1,Dge),e(Dge,CGo),e(e1,wGo),e(e1,UO),e(UO,AGo),e(e1,yGo),e(V,LGo),e(V,o1),e(o1,Gge),e(Gge,xGo),e(o1,$Go),e(o1,JO),e(JO,kGo),e(o1,SGo),e(V,RGo),e(V,r1),e(r1,Oge),e(Oge,PGo),e(r1,BGo),e(r1,YO),e(YO,IGo),e(r1,qGo),e(V,NGo),e(V,t1),e(t1,Vge),e(Vge,jGo),e(t1,DGo),e(t1,KO),e(KO,GGo),e(t1,OGo),e(V,VGo),e(V,a1),e(a1,Xge),e(Xge,XGo),e(a1,zGo),e(a1,ZO),e(ZO,WGo),e(a1,QGo),e(V,HGo),e(V,n1),e(n1,zge),e(zge,UGo),e(n1,JGo),e(n1,eV),e(eV,YGo),e(n1,KGo),e(V,ZGo),e(V,s1),e(s1,Wge),e(Wge,eOo),e(s1,oOo),e(s1,oV),e(oV,rOo),e(s1,tOo),e(V,aOo),e(V,l1),e(l1,Qge),e(Qge,nOo),e(l1,sOo),e(l1,rV),e(rV,lOo),e(l1,iOo),e(V,dOo),e(V,i1),e(i1,Hge),e(Hge,cOo),e(i1,mOo),e(i1,tV),e(tV,fOo),e(i1,gOo),e(V,hOo),e(V,d1),e(d1,Uge),e(Uge,uOo),e(d1,pOo),e(d1,aV),e(aV,_Oo),e(d1,bOo),e(V,vOo),e(V,c1),e(c1,Jge),e(Jge,FOo),e(c1,TOo),e(c1,nV),e(nV,MOo),e(c1,EOo),e(V,COo),e(V,m1),e(m1,Yge),e(Yge,wOo),e(m1,AOo),e(m1,sV),e(sV,yOo),e(m1,LOo),e(V,xOo),e(V,f1),e(f1,Kge),e(Kge,$Oo),e(f1,kOo),e(f1,lV),e(lV,SOo),e(f1,ROo),e(V,POo),e(V,g1),e(g1,Zge),e(Zge,BOo),e(g1,IOo),e(g1,iV),e(iV,qOo),e(g1,NOo),e(V,jOo),e(V,h1),e(h1,ehe),e(ehe,DOo),e(h1,GOo),e(h1,dV),e(dV,OOo),e(h1,VOo),e(V,XOo),e(V,u1),e(u1,ohe),e(ohe,zOo),e(u1,WOo),e(u1,cV),e(cV,QOo),e(u1,HOo),e(V,UOo),e(V,p1),e(p1,rhe),e(rhe,JOo),e(p1,YOo),e(p1,mV),e(mV,KOo),e(p1,ZOo),e(V,eVo),e(V,_1),e(_1,the),e(the,oVo),e(_1,rVo),e(_1,fV),e(fV,tVo),e(_1,aVo),e(V,nVo),e(V,b1),e(b1,ahe),e(ahe,sVo),e(b1,lVo),e(b1,gV),e(gV,iVo),e(b1,dVo),e(V,cVo),e(V,v1),e(v1,nhe),e(nhe,mVo),e(v1,fVo),e(v1,hV),e(hV,gVo),e(v1,hVo),e(V,uVo),e(V,F1),e(F1,she),e(she,pVo),e(F1,_Vo),e(F1,uV),e(uV,bVo),e(F1,vVo),e(V,FVo),e(V,T1),e(T1,lhe),e(lhe,TVo),e(T1,MVo),e(T1,pV),e(pV,EVo),e(T1,CVo),e(V,wVo),e(V,M1),e(M1,ihe),e(ihe,AVo),e(M1,yVo),e(M1,_V),e(_V,LVo),e(M1,xVo),e(V,$Vo),e(V,E1),e(E1,dhe),e(dhe,kVo),e(E1,SVo),e(E1,bV),e(bV,RVo),e(E1,PVo),e(V,BVo),e(V,C1),e(C1,che),e(che,IVo),e(C1,qVo),e(C1,vV),e(vV,NVo),e(C1,jVo),e(V,DVo),e(V,w1),e(w1,mhe),e(mhe,GVo),e(w1,OVo),e(w1,FV),e(FV,VVo),e(w1,XVo),e(V,zVo),e(V,A1),e(A1,fhe),e(fhe,WVo),e(A1,QVo),e(A1,TV),e(TV,HVo),e(A1,UVo),e(V,JVo),e(V,y1),e(y1,ghe),e(ghe,YVo),e(y1,KVo),e(y1,MV),e(MV,ZVo),e(y1,eXo),e(V,oXo),e(V,L1),e(L1,hhe),e(hhe,rXo),e(L1,tXo),e(L1,EV),e(EV,aXo),e(L1,nXo),e(V,sXo),e(V,x1),e(x1,uhe),e(uhe,lXo),e(x1,iXo),e(x1,CV),e(CV,dXo),e(x1,cXo),e(V,mXo),e(V,$1),e($1,phe),e(phe,fXo),e($1,gXo),e($1,wV),e(wV,hXo),e($1,uXo),e(V,pXo),e(V,k1),e(k1,_he),e(_he,_Xo),e(k1,bXo),e(k1,AV),e(AV,vXo),e(k1,FXo),e(V,TXo),e(V,S1),e(S1,bhe),e(bhe,MXo),e(S1,EXo),e(S1,yV),e(yV,CXo),e(S1,wXo),e(V,AXo),e(V,R1),e(R1,vhe),e(vhe,yXo),e(R1,LXo),e(R1,LV),e(LV,xXo),e(R1,$Xo),e(no,kXo),e(no,P1),e(P1,SXo),e(P1,Fhe),e(Fhe,RXo),e(P1,PXo),e(P1,The),e(The,BXo),e(no,IXo),M(B1,no,null),b(m,iqe,_),b(m,ed,_),e(ed,I1),e(I1,Mhe),M($L,Mhe,null),e(ed,qXo),e(ed,Ehe),e(Ehe,NXo),b(m,dqe,_),b(m,No,_),M(kL,No,null),e(No,jXo),e(No,od),e(od,DXo),e(od,xV),e(xV,GXo),e(od,OXo),e(od,$V),e($V,VXo),e(od,XXo),e(No,zXo),e(No,SL),e(SL,WXo),e(SL,Che),e(Che,QXo),e(SL,HXo),e(No,UXo),e(No,gt),M(RL,gt,null),e(gt,JXo),e(gt,whe),e(whe,YXo),e(gt,KXo),e(gt,rd),e(rd,ZXo),e(rd,Ahe),e(Ahe,ezo),e(rd,ozo),e(rd,kV),e(kV,rzo),e(rd,tzo),e(gt,azo),M(q1,gt,null),e(No,nzo),e(No,so),M(PL,so,null),e(so,szo),e(so,yhe),e(yhe,lzo),e(so,izo),e(so,Na),e(Na,dzo),e(Na,Lhe),e(Lhe,czo),e(Na,mzo),e(Na,xhe),e(xhe,fzo),e(Na,gzo),e(Na,$he),e($he,hzo),e(Na,uzo),e(so,pzo),e(so,khe),e(khe,N1),e(N1,She),e(She,_zo),e(N1,bzo),e(N1,SV),e(SV,vzo),e(N1,Fzo),e(so,Tzo),e(so,j1),e(j1,Mzo),e(j1,Rhe),e(Rhe,Ezo),e(j1,Czo),e(j1,Phe),e(Phe,wzo),e(so,Azo),M(D1,so,null),b(m,cqe,_),b(m,td,_),e(td,G1),e(G1,Bhe),M(BL,Bhe,null),e(td,yzo),e(td,Ihe),e(Ihe,Lzo),b(m,mqe,_),b(m,jo,_),M(IL,jo,null),e(jo,xzo),e(jo,ad),e(ad,$zo),e(ad,RV),e(RV,kzo),e(ad,Szo),e(ad,PV),e(PV,Rzo),e(ad,Pzo),e(jo,Bzo),e(jo,qL),e(qL,Izo),e(qL,qhe),e(qhe,qzo),e(qL,Nzo),e(jo,jzo),e(jo,ht),M(NL,ht,null),e(ht,Dzo),e(ht,Nhe),e(Nhe,Gzo),e(ht,Ozo),e(ht,nd),e(nd,Vzo),e(nd,jhe),e(jhe,Xzo),e(nd,zzo),e(nd,BV),e(BV,Wzo),e(nd,Qzo),e(ht,Hzo),M(O1,ht,null),e(jo,Uzo),e(jo,lo),M(jL,lo,null),e(lo,Jzo),e(lo,Dhe),e(Dhe,Yzo),e(lo,Kzo),e(lo,ja),e(ja,Zzo),e(ja,Ghe),e(Ghe,eWo),e(ja,oWo),e(ja,Ohe),e(Ohe,rWo),e(ja,tWo),e(ja,Vhe),e(Vhe,aWo),e(ja,nWo),e(lo,sWo),e(lo,Fe),e(Fe,V1),e(V1,Xhe),e(Xhe,lWo),e(V1,iWo),e(V1,IV),e(IV,dWo),e(V1,cWo),e(Fe,mWo),e(Fe,X1),e(X1,zhe),e(zhe,fWo),e(X1,gWo),e(X1,qV),e(qV,hWo),e(X1,uWo),e(Fe,pWo),e(Fe,z1),e(z1,Whe),e(Whe,_Wo),e(z1,bWo),e(z1,NV),e(NV,vWo),e(z1,FWo),e(Fe,TWo),e(Fe,Ps),e(Ps,Qhe),e(Qhe,MWo),e(Ps,EWo),e(Ps,jV),e(jV,CWo),e(Ps,wWo),e(Ps,DV),e(DV,AWo),e(Ps,yWo),e(Fe,LWo),e(Fe,W1),e(W1,Hhe),e(Hhe,xWo),e(W1,$Wo),e(W1,GV),e(GV,kWo),e(W1,SWo),e(Fe,RWo),e(Fe,ut),e(ut,Uhe),e(Uhe,PWo),e(ut,BWo),e(ut,OV),e(OV,IWo),e(ut,qWo),e(ut,VV),e(VV,NWo),e(ut,jWo),e(ut,XV),e(XV,DWo),e(ut,GWo),e(Fe,OWo),e(Fe,Q1),e(Q1,Jhe),e(Jhe,VWo),e(Q1,XWo),e(Q1,zV),e(zV,zWo),e(Q1,WWo),e(Fe,QWo),e(Fe,H1),e(H1,Yhe),e(Yhe,HWo),e(H1,UWo),e(H1,WV),e(WV,JWo),e(H1,YWo),e(Fe,KWo),e(Fe,U1),e(U1,Khe),e(Khe,ZWo),e(U1,eQo),e(U1,QV),e(QV,oQo),e(U1,rQo),e(Fe,tQo),e(Fe,J1),e(J1,Zhe),e(Zhe,aQo),e(J1,nQo),e(J1,HV),e(HV,sQo),e(J1,lQo),e(Fe,iQo),e(Fe,Y1),e(Y1,eue),e(eue,dQo),e(Y1,cQo),e(Y1,UV),e(UV,mQo),e(Y1,fQo),e(Fe,gQo),e(Fe,K1),e(K1,oue),e(oue,hQo),e(K1,uQo),e(K1,JV),e(JV,pQo),e(K1,_Qo),e(Fe,bQo),e(Fe,Z1),e(Z1,rue),e(rue,vQo),e(Z1,FQo),e(Z1,YV),e(YV,TQo),e(Z1,MQo),e(lo,EQo),e(lo,eT),e(eT,CQo),e(eT,tue),e(tue,wQo),e(eT,AQo),e(eT,aue),e(aue,yQo),e(lo,LQo),M(oT,lo,null),b(m,fqe,_),b(m,sd,_),e(sd,rT),e(rT,nue),M(DL,nue,null),e(sd,xQo),e(sd,sue),e(sue,$Qo),b(m,gqe,_),b(m,Do,_),M(GL,Do,null),e(Do,kQo),e(Do,ld),e(ld,SQo),e(ld,KV),e(KV,RQo),e(ld,PQo),e(ld,ZV),e(ZV,BQo),e(ld,IQo),e(Do,qQo),e(Do,OL),e(OL,NQo),e(OL,lue),e(lue,jQo),e(OL,DQo),e(Do,GQo),e(Do,pt),M(VL,pt,null),e(pt,OQo),e(pt,iue),e(iue,VQo),e(pt,XQo),e(pt,id),e(id,zQo),e(id,due),e(due,WQo),e(id,QQo),e(id,eX),e(eX,HQo),e(id,UQo),e(pt,JQo),M(tT,pt,null),e(Do,YQo),e(Do,io),M(XL,io,null),e(io,KQo),e(io,cue),e(cue,ZQo),e(io,eHo),e(io,Da),e(Da,oHo),e(Da,mue),e(mue,rHo),e(Da,tHo),e(Da,fue),e(fue,aHo),e(Da,nHo),e(Da,gue),e(gue,sHo),e(Da,lHo),e(io,iHo),e(io,hue),e(hue,aT),e(aT,uue),e(uue,dHo),e(aT,cHo),e(aT,oX),e(oX,mHo),e(aT,fHo),e(io,gHo),e(io,nT),e(nT,hHo),e(nT,pue),e(pue,uHo),e(nT,pHo),e(nT,_ue),e(_ue,_Ho),e(io,bHo),M(sT,io,null),b(m,hqe,_),b(m,dd,_),e(dd,lT),e(lT,bue),M(zL,bue,null),e(dd,vHo),e(dd,vue),e(vue,FHo),b(m,uqe,_),b(m,Go,_),M(WL,Go,null),e(Go,THo),e(Go,cd),e(cd,MHo),e(cd,rX),e(rX,EHo),e(cd,CHo),e(cd,tX),e(tX,wHo),e(cd,AHo),e(Go,yHo),e(Go,QL),e(QL,LHo),e(QL,Fue),e(Fue,xHo),e(QL,$Ho),e(Go,kHo),e(Go,_t),M(HL,_t,null),e(_t,SHo),e(_t,Tue),e(Tue,RHo),e(_t,PHo),e(_t,md),e(md,BHo),e(md,Mue),e(Mue,IHo),e(md,qHo),e(md,aX),e(aX,NHo),e(md,jHo),e(_t,DHo),M(iT,_t,null),e(Go,GHo),e(Go,co),M(UL,co,null),e(co,OHo),e(co,Eue),e(Eue,VHo),e(co,XHo),e(co,Ga),e(Ga,zHo),e(Ga,Cue),e(Cue,WHo),e(Ga,QHo),e(Ga,wue),e(wue,HHo),e(Ga,UHo),e(Ga,Aue),e(Aue,JHo),e(Ga,YHo),e(co,KHo),e(co,ke),e(ke,dT),e(dT,yue),e(yue,ZHo),e(dT,eUo),e(dT,nX),e(nX,oUo),e(dT,rUo),e(ke,tUo),e(ke,cT),e(cT,Lue),e(Lue,aUo),e(cT,nUo),e(cT,sX),e(sX,sUo),e(cT,lUo),e(ke,iUo),e(ke,mT),e(mT,xue),e(xue,dUo),e(mT,cUo),e(mT,lX),e(lX,mUo),e(mT,fUo),e(ke,gUo),e(ke,fT),e(fT,$ue),e($ue,hUo),e(fT,uUo),e(fT,iX),e(iX,pUo),e(fT,_Uo),e(ke,bUo),e(ke,gT),e(gT,kue),e(kue,vUo),e(gT,FUo),e(gT,dX),e(dX,TUo),e(gT,MUo),e(ke,EUo),e(ke,hT),e(hT,Sue),e(Sue,CUo),e(hT,wUo),e(hT,cX),e(cX,AUo),e(hT,yUo),e(ke,LUo),e(ke,uT),e(uT,Rue),e(Rue,xUo),e(uT,$Uo),e(uT,mX),e(mX,kUo),e(uT,SUo),e(ke,RUo),e(ke,pT),e(pT,Pue),e(Pue,PUo),e(pT,BUo),e(pT,fX),e(fX,IUo),e(pT,qUo),e(ke,NUo),e(ke,_T),e(_T,Bue),e(Bue,jUo),e(_T,DUo),e(_T,gX),e(gX,GUo),e(_T,OUo),e(co,VUo),e(co,bT),e(bT,XUo),e(bT,Iue),e(Iue,zUo),e(bT,WUo),e(bT,que),e(que,QUo),e(co,HUo),M(vT,co,null),b(m,pqe,_),b(m,fd,_),e(fd,FT),e(FT,Nue),M(JL,Nue,null),e(fd,UUo),e(fd,jue),e(jue,JUo),b(m,_qe,_),b(m,Oo,_),M(YL,Oo,null),e(Oo,YUo),e(Oo,gd),e(gd,KUo),e(gd,hX),e(hX,ZUo),e(gd,eJo),e(gd,uX),e(uX,oJo),e(gd,rJo),e(Oo,tJo),e(Oo,KL),e(KL,aJo),e(KL,Due),e(Due,nJo),e(KL,sJo),e(Oo,lJo),e(Oo,bt),M(ZL,bt,null),e(bt,iJo),e(bt,Gue),e(Gue,dJo),e(bt,cJo),e(bt,hd),e(hd,mJo),e(hd,Oue),e(Oue,fJo),e(hd,gJo),e(hd,pX),e(pX,hJo),e(hd,uJo),e(bt,pJo),M(TT,bt,null),e(Oo,_Jo),e(Oo,mo),M(e8,mo,null),e(mo,bJo),e(mo,Vue),e(Vue,vJo),e(mo,FJo),e(mo,Oa),e(Oa,TJo),e(Oa,Xue),e(Xue,MJo),e(Oa,EJo),e(Oa,zue),e(zue,CJo),e(Oa,wJo),e(Oa,Wue),e(Wue,AJo),e(Oa,yJo),e(mo,LJo),e(mo,Kr),e(Kr,MT),e(MT,Que),e(Que,xJo),e(MT,$Jo),e(MT,_X),e(_X,kJo),e(MT,SJo),e(Kr,RJo),e(Kr,ET),e(ET,Hue),e(Hue,PJo),e(ET,BJo),e(ET,bX),e(bX,IJo),e(ET,qJo),e(Kr,NJo),e(Kr,CT),e(CT,Uue),e(Uue,jJo),e(CT,DJo),e(CT,vX),e(vX,GJo),e(CT,OJo),e(Kr,VJo),e(Kr,wT),e(wT,Jue),e(Jue,XJo),e(wT,zJo),e(wT,FX),e(FX,WJo),e(wT,QJo),e(Kr,HJo),e(Kr,AT),e(AT,Yue),e(Yue,UJo),e(AT,JJo),e(AT,TX),e(TX,YJo),e(AT,KJo),e(mo,ZJo),e(mo,yT),e(yT,eYo),e(yT,Kue),e(Kue,oYo),e(yT,rYo),e(yT,Zue),e(Zue,tYo),e(mo,aYo),M(LT,mo,null),b(m,bqe,_),b(m,ud,_),e(ud,xT),e(xT,epe),M(o8,epe,null),e(ud,nYo),e(ud,ope),e(ope,sYo),b(m,vqe,_),b(m,Vo,_),M(r8,Vo,null),e(Vo,lYo),e(Vo,pd),e(pd,iYo),e(pd,MX),e(MX,dYo),e(pd,cYo),e(pd,EX),e(EX,mYo),e(pd,fYo),e(Vo,gYo),e(Vo,t8),e(t8,hYo),e(t8,rpe),e(rpe,uYo),e(t8,pYo),e(Vo,_Yo),e(Vo,vt),M(a8,vt,null),e(vt,bYo),e(vt,tpe),e(tpe,vYo),e(vt,FYo),e(vt,_d),e(_d,TYo),e(_d,ape),e(ape,MYo),e(_d,EYo),e(_d,CX),e(CX,CYo),e(_d,wYo),e(vt,AYo),M($T,vt,null),e(Vo,yYo),e(Vo,fo),M(n8,fo,null),e(fo,LYo),e(fo,npe),e(npe,xYo),e(fo,$Yo),e(fo,Va),e(Va,kYo),e(Va,spe),e(spe,SYo),e(Va,RYo),e(Va,lpe),e(lpe,PYo),e(Va,BYo),e(Va,ipe),e(ipe,IYo),e(Va,qYo),e(fo,NYo),e(fo,Se),e(Se,kT),e(kT,dpe),e(dpe,jYo),e(kT,DYo),e(kT,wX),e(wX,GYo),e(kT,OYo),e(Se,VYo),e(Se,ST),e(ST,cpe),e(cpe,XYo),e(ST,zYo),e(ST,AX),e(AX,WYo),e(ST,QYo),e(Se,HYo),e(Se,RT),e(RT,mpe),e(mpe,UYo),e(RT,JYo),e(RT,yX),e(yX,YYo),e(RT,KYo),e(Se,ZYo),e(Se,PT),e(PT,fpe),e(fpe,eKo),e(PT,oKo),e(PT,LX),e(LX,rKo),e(PT,tKo),e(Se,aKo),e(Se,BT),e(BT,gpe),e(gpe,nKo),e(BT,sKo),e(BT,xX),e(xX,lKo),e(BT,iKo),e(Se,dKo),e(Se,IT),e(IT,hpe),e(hpe,cKo),e(IT,mKo),e(IT,$X),e($X,fKo),e(IT,gKo),e(Se,hKo),e(Se,qT),e(qT,upe),e(upe,uKo),e(qT,pKo),e(qT,kX),e(kX,_Ko),e(qT,bKo),e(Se,vKo),e(Se,NT),e(NT,ppe),e(ppe,FKo),e(NT,TKo),e(NT,SX),e(SX,MKo),e(NT,EKo),e(Se,CKo),e(Se,jT),e(jT,_pe),e(_pe,wKo),e(jT,AKo),e(jT,RX),e(RX,yKo),e(jT,LKo),e(fo,xKo),e(fo,DT),e(DT,$Ko),e(DT,bpe),e(bpe,kKo),e(DT,SKo),e(DT,vpe),e(vpe,RKo),e(fo,PKo),M(GT,fo,null),b(m,Fqe,_),b(m,bd,_),e(bd,OT),e(OT,Fpe),M(s8,Fpe,null),e(bd,BKo),e(bd,Tpe),e(Tpe,IKo),b(m,Tqe,_),b(m,Xo,_),M(l8,Xo,null),e(Xo,qKo),e(Xo,vd),e(vd,NKo),e(vd,PX),e(PX,jKo),e(vd,DKo),e(vd,BX),e(BX,GKo),e(vd,OKo),e(Xo,VKo),e(Xo,i8),e(i8,XKo),e(i8,Mpe),e(Mpe,zKo),e(i8,WKo),e(Xo,QKo),e(Xo,Ft),M(d8,Ft,null),e(Ft,HKo),e(Ft,Epe),e(Epe,UKo),e(Ft,JKo),e(Ft,Fd),e(Fd,YKo),e(Fd,Cpe),e(Cpe,KKo),e(Fd,ZKo),e(Fd,IX),e(IX,eZo),e(Fd,oZo),e(Ft,rZo),M(VT,Ft,null),e(Xo,tZo),e(Xo,go),M(c8,go,null),e(go,aZo),e(go,wpe),e(wpe,nZo),e(go,sZo),e(go,Xa),e(Xa,lZo),e(Xa,Ape),e(Ape,iZo),e(Xa,dZo),e(Xa,ype),e(ype,cZo),e(Xa,mZo),e(Xa,Lpe),e(Lpe,fZo),e(Xa,gZo),e(go,hZo),e(go,m8),e(m8,XT),e(XT,xpe),e(xpe,uZo),e(XT,pZo),e(XT,qX),e(qX,_Zo),e(XT,bZo),e(m8,vZo),e(m8,zT),e(zT,$pe),e($pe,FZo),e(zT,TZo),e(zT,NX),e(NX,MZo),e(zT,EZo),e(go,CZo),e(go,WT),e(WT,wZo),e(WT,kpe),e(kpe,AZo),e(WT,yZo),e(WT,Spe),e(Spe,LZo),e(go,xZo),M(QT,go,null),b(m,Mqe,_),b(m,Td,_),e(Td,HT),e(HT,Rpe),M(f8,Rpe,null),e(Td,$Zo),e(Td,Ppe),e(Ppe,kZo),b(m,Eqe,_),b(m,zo,_),M(g8,zo,null),e(zo,SZo),e(zo,Md),e(Md,RZo),e(Md,jX),e(jX,PZo),e(Md,BZo),e(Md,DX),e(DX,IZo),e(Md,qZo),e(zo,NZo),e(zo,h8),e(h8,jZo),e(h8,Bpe),e(Bpe,DZo),e(h8,GZo),e(zo,OZo),e(zo,Tt),M(u8,Tt,null),e(Tt,VZo),e(Tt,Ipe),e(Ipe,XZo),e(Tt,zZo),e(Tt,Ed),e(Ed,WZo),e(Ed,qpe),e(qpe,QZo),e(Ed,HZo),e(Ed,GX),e(GX,UZo),e(Ed,JZo),e(Tt,YZo),M(UT,Tt,null),e(zo,KZo),e(zo,ho),M(p8,ho,null),e(ho,ZZo),e(ho,Npe),e(Npe,eer),e(ho,oer),e(ho,za),e(za,rer),e(za,jpe),e(jpe,ter),e(za,aer),e(za,Dpe),e(Dpe,ner),e(za,ser),e(za,Gpe),e(Gpe,ler),e(za,ier),e(ho,der),e(ho,Zr),e(Zr,JT),e(JT,Ope),e(Ope,cer),e(JT,mer),e(JT,OX),e(OX,fer),e(JT,ger),e(Zr,her),e(Zr,YT),e(YT,Vpe),e(Vpe,uer),e(YT,per),e(YT,VX),e(VX,_er),e(YT,ber),e(Zr,ver),e(Zr,KT),e(KT,Xpe),e(Xpe,Fer),e(KT,Ter),e(KT,XX),e(XX,Mer),e(KT,Eer),e(Zr,Cer),e(Zr,ZT),e(ZT,zpe),e(zpe,wer),e(ZT,Aer),e(ZT,zX),e(zX,yer),e(ZT,Ler),e(Zr,xer),e(Zr,eM),e(eM,Wpe),e(Wpe,$er),e(eM,ker),e(eM,WX),e(WX,Ser),e(eM,Rer),e(ho,Per),e(ho,oM),e(oM,Ber),e(oM,Qpe),e(Qpe,Ier),e(oM,qer),e(oM,Hpe),e(Hpe,Ner),e(ho,jer),M(rM,ho,null),b(m,Cqe,_),b(m,Cd,_),e(Cd,tM),e(tM,Upe),M(_8,Upe,null),e(Cd,Der),e(Cd,Jpe),e(Jpe,Ger),b(m,wqe,_),b(m,Wo,_),M(b8,Wo,null),e(Wo,Oer),e(Wo,wd),e(wd,Ver),e(wd,QX),e(QX,Xer),e(wd,zer),e(wd,HX),e(HX,Wer),e(wd,Qer),e(Wo,Her),e(Wo,v8),e(v8,Uer),e(v8,Ype),e(Ype,Jer),e(v8,Yer),e(Wo,Ker),e(Wo,Mt),M(F8,Mt,null),e(Mt,Zer),e(Mt,Kpe),e(Kpe,eor),e(Mt,oor),e(Mt,Ad),e(Ad,ror),e(Ad,Zpe),e(Zpe,tor),e(Ad,aor),e(Ad,UX),e(UX,nor),e(Ad,sor),e(Mt,lor),M(aM,Mt,null),e(Wo,ior),e(Wo,uo),M(T8,uo,null),e(uo,dor),e(uo,e_e),e(e_e,cor),e(uo,mor),e(uo,Wa),e(Wa,gor),e(Wa,o_e),e(o_e,hor),e(Wa,uor),e(Wa,r_e),e(r_e,por),e(Wa,_or),e(Wa,t_e),e(t_e,bor),e(Wa,vor),e(uo,For),e(uo,yd),e(yd,nM),e(nM,a_e),e(a_e,Tor),e(nM,Mor),e(nM,JX),e(JX,Eor),e(nM,Cor),e(yd,wor),e(yd,sM),e(sM,n_e),e(n_e,Aor),e(sM,yor),e(sM,YX),e(YX,Lor),e(sM,xor),e(yd,$or),e(yd,lM),e(lM,s_e),e(s_e,kor),e(lM,Sor),e(lM,KX),e(KX,Ror),e(lM,Por),e(uo,Bor),e(uo,iM),e(iM,Ior),e(iM,l_e),e(l_e,qor),e(iM,Nor),e(iM,i_e),e(i_e,jor),e(uo,Dor),M(dM,uo,null),b(m,Aqe,_),b(m,Ld,_),e(Ld,cM),e(cM,d_e),M(M8,d_e,null),e(Ld,Gor),e(Ld,c_e),e(c_e,Oor),b(m,yqe,_),b(m,Qo,_),M(E8,Qo,null),e(Qo,Vor),e(Qo,xd),e(xd,Xor),e(xd,ZX),e(ZX,zor),e(xd,Wor),e(xd,ez),e(ez,Qor),e(xd,Hor),e(Qo,Uor),e(Qo,C8),e(C8,Jor),e(C8,m_e),e(m_e,Yor),e(C8,Kor),e(Qo,Zor),e(Qo,Et),M(w8,Et,null),e(Et,err),e(Et,f_e),e(f_e,orr),e(Et,rrr),e(Et,$d),e($d,trr),e($d,g_e),e(g_e,arr),e($d,nrr),e($d,oz),e(oz,srr),e($d,lrr),e(Et,irr),M(mM,Et,null),e(Qo,drr),e(Qo,po),M(A8,po,null),e(po,crr),e(po,h_e),e(h_e,mrr),e(po,frr),e(po,Qa),e(Qa,grr),e(Qa,u_e),e(u_e,hrr),e(Qa,urr),e(Qa,p_e),e(p_e,prr),e(Qa,_rr),e(Qa,__e),e(__e,brr),e(Qa,vrr),e(po,Frr),e(po,y8),e(y8,fM),e(fM,b_e),e(b_e,Trr),e(fM,Mrr),e(fM,rz),e(rz,Err),e(fM,Crr),e(y8,wrr),e(y8,gM),e(gM,v_e),e(v_e,Arr),e(gM,yrr),e(gM,tz),e(tz,Lrr),e(gM,xrr),e(po,$rr),e(po,hM),e(hM,krr),e(hM,F_e),e(F_e,Srr),e(hM,Rrr),e(hM,T_e),e(T_e,Prr),e(po,Brr),M(uM,po,null),b(m,Lqe,_),b(m,kd,_),e(kd,pM),e(pM,M_e),M(L8,M_e,null),e(kd,Irr),e(kd,E_e),e(E_e,qrr),b(m,xqe,_),b(m,Ho,_),M(x8,Ho,null),e(Ho,Nrr),e(Ho,Sd),e(Sd,jrr),e(Sd,az),e(az,Drr),e(Sd,Grr),e(Sd,nz),e(nz,Orr),e(Sd,Vrr),e(Ho,Xrr),e(Ho,$8),e($8,zrr),e($8,C_e),e(C_e,Wrr),e($8,Qrr),e(Ho,Hrr),e(Ho,Ct),M(k8,Ct,null),e(Ct,Urr),e(Ct,w_e),e(w_e,Jrr),e(Ct,Yrr),e(Ct,Rd),e(Rd,Krr),e(Rd,A_e),e(A_e,Zrr),e(Rd,etr),e(Rd,sz),e(sz,otr),e(Rd,rtr),e(Ct,ttr),M(_M,Ct,null),e(Ho,atr),e(Ho,_o),M(S8,_o,null),e(_o,ntr),e(_o,y_e),e(y_e,str),e(_o,ltr),e(_o,Ha),e(Ha,itr),e(Ha,L_e),e(L_e,dtr),e(Ha,ctr),e(Ha,x_e),e(x_e,mtr),e(Ha,ftr),e(Ha,$_e),e($_e,gtr),e(Ha,htr),e(_o,utr),e(_o,k_e),e(k_e,bM),e(bM,S_e),e(S_e,ptr),e(bM,_tr),e(bM,lz),e(lz,btr),e(bM,vtr),e(_o,Ftr),e(_o,vM),e(vM,Ttr),e(vM,R_e),e(R_e,Mtr),e(vM,Etr),e(vM,P_e),e(P_e,Ctr),e(_o,wtr),M(FM,_o,null),b(m,$qe,_),b(m,Pd,_),e(Pd,TM),e(TM,B_e),M(R8,B_e,null),e(Pd,Atr),e(Pd,I_e),e(I_e,ytr),b(m,kqe,_),b(m,Uo,_),M(P8,Uo,null),e(Uo,Ltr),e(Uo,Bd),e(Bd,xtr),e(Bd,iz),e(iz,$tr),e(Bd,ktr),e(Bd,dz),e(dz,Str),e(Bd,Rtr),e(Uo,Ptr),e(Uo,B8),e(B8,Btr),e(B8,q_e),e(q_e,Itr),e(B8,qtr),e(Uo,Ntr),e(Uo,wt),M(I8,wt,null),e(wt,jtr),e(wt,N_e),e(N_e,Dtr),e(wt,Gtr),e(wt,Id),e(Id,Otr),e(Id,j_e),e(j_e,Vtr),e(Id,Xtr),e(Id,cz),e(cz,ztr),e(Id,Wtr),e(wt,Qtr),M(MM,wt,null),e(Uo,Htr),e(Uo,bo),M(q8,bo,null),e(bo,Utr),e(bo,D_e),e(D_e,Jtr),e(bo,Ytr),e(bo,Ua),e(Ua,Ktr),e(Ua,G_e),e(G_e,Ztr),e(Ua,ear),e(Ua,O_e),e(O_e,oar),e(Ua,rar),e(Ua,V_e),e(V_e,tar),e(Ua,aar),e(bo,nar),e(bo,Ja),e(Ja,EM),e(EM,X_e),e(X_e,sar),e(EM,lar),e(EM,mz),e(mz,iar),e(EM,dar),e(Ja,car),e(Ja,CM),e(CM,z_e),e(z_e,mar),e(CM,far),e(CM,fz),e(fz,gar),e(CM,har),e(Ja,uar),e(Ja,wM),e(wM,W_e),e(W_e,par),e(wM,_ar),e(wM,gz),e(gz,bar),e(wM,Far),e(Ja,Tar),e(Ja,AM),e(AM,Q_e),e(Q_e,Mar),e(AM,Ear),e(AM,hz),e(hz,Car),e(AM,war),e(bo,Aar),e(bo,yM),e(yM,yar),e(yM,H_e),e(H_e,Lar),e(yM,xar),e(yM,U_e),e(U_e,$ar),e(bo,kar),M(LM,bo,null),b(m,Sqe,_),b(m,qd,_),e(qd,xM),e(xM,J_e),M(N8,J_e,null),e(qd,Sar),e(qd,Y_e),e(Y_e,Rar),b(m,Rqe,_),b(m,Jo,_),M(j8,Jo,null),e(Jo,Par),e(Jo,Nd),e(Nd,Bar),e(Nd,uz),e(uz,Iar),e(Nd,qar),e(Nd,pz),e(pz,Nar),e(Nd,jar),e(Jo,Dar),e(Jo,D8),e(D8,Gar),e(D8,K_e),e(K_e,Oar),e(D8,Var),e(Jo,Xar),e(Jo,At),M(G8,At,null),e(At,zar),e(At,Z_e),e(Z_e,War),e(At,Qar),e(At,jd),e(jd,Har),e(jd,ebe),e(ebe,Uar),e(jd,Jar),e(jd,_z),e(_z,Yar),e(jd,Kar),e(At,Zar),M($M,At,null),e(Jo,enr),e(Jo,vo),M(O8,vo,null),e(vo,onr),e(vo,obe),e(obe,rnr),e(vo,tnr),e(vo,Ya),e(Ya,anr),e(Ya,rbe),e(rbe,nnr),e(Ya,snr),e(Ya,tbe),e(tbe,lnr),e(Ya,inr),e(Ya,abe),e(abe,dnr),e(Ya,cnr),e(vo,mnr),e(vo,nbe),e(nbe,kM),e(kM,sbe),e(sbe,fnr),e(kM,gnr),e(kM,bz),e(bz,hnr),e(kM,unr),e(vo,pnr),e(vo,SM),e(SM,_nr),e(SM,lbe),e(lbe,bnr),e(SM,vnr),e(SM,ibe),e(ibe,Fnr),e(vo,Tnr),M(RM,vo,null),b(m,Pqe,_),b(m,Dd,_),e(Dd,PM),e(PM,dbe),M(V8,dbe,null),e(Dd,Mnr),e(Dd,cbe),e(cbe,Enr),b(m,Bqe,_),b(m,Yo,_),M(X8,Yo,null),e(Yo,Cnr),e(Yo,Gd),e(Gd,wnr),e(Gd,vz),e(vz,Anr),e(Gd,ynr),e(Gd,Fz),e(Fz,Lnr),e(Gd,xnr),e(Yo,$nr),e(Yo,z8),e(z8,knr),e(z8,mbe),e(mbe,Snr),e(z8,Rnr),e(Yo,Pnr),e(Yo,yt),M(W8,yt,null),e(yt,Bnr),e(yt,fbe),e(fbe,Inr),e(yt,qnr),e(yt,Od),e(Od,Nnr),e(Od,gbe),e(gbe,jnr),e(Od,Dnr),e(Od,Tz),e(Tz,Gnr),e(Od,Onr),e(yt,Vnr),M(BM,yt,null),e(Yo,Xnr),e(Yo,wr),M(Q8,wr,null),e(wr,znr),e(wr,hbe),e(hbe,Wnr),e(wr,Qnr),e(wr,Ka),e(Ka,Hnr),e(Ka,ube),e(ube,Unr),e(Ka,Jnr),e(Ka,pbe),e(pbe,Ynr),e(Ka,Knr),e(Ka,_be),e(_be,Znr),e(Ka,esr),e(wr,osr),e(wr,N),e(N,IM),e(IM,bbe),e(bbe,rsr),e(IM,tsr),e(IM,Mz),e(Mz,asr),e(IM,nsr),e(N,ssr),e(N,qM),e(qM,vbe),e(vbe,lsr),e(qM,isr),e(qM,Ez),e(Ez,dsr),e(qM,csr),e(N,msr),e(N,NM),e(NM,Fbe),e(Fbe,fsr),e(NM,gsr),e(NM,Cz),e(Cz,hsr),e(NM,usr),e(N,psr),e(N,jM),e(jM,Tbe),e(Tbe,_sr),e(jM,bsr),e(jM,wz),e(wz,vsr),e(jM,Fsr),e(N,Tsr),e(N,DM),e(DM,Mbe),e(Mbe,Msr),e(DM,Esr),e(DM,Az),e(Az,Csr),e(DM,wsr),e(N,Asr),e(N,GM),e(GM,Ebe),e(Ebe,ysr),e(GM,Lsr),e(GM,yz),e(yz,xsr),e(GM,$sr),e(N,ksr),e(N,OM),e(OM,Cbe),e(Cbe,Ssr),e(OM,Rsr),e(OM,Lz),e(Lz,Psr),e(OM,Bsr),e(N,Isr),e(N,VM),e(VM,wbe),e(wbe,qsr),e(VM,Nsr),e(VM,xz),e(xz,jsr),e(VM,Dsr),e(N,Gsr),e(N,XM),e(XM,Abe),e(Abe,Osr),e(XM,Vsr),e(XM,$z),e($z,Xsr),e(XM,zsr),e(N,Wsr),e(N,zM),e(zM,ybe),e(ybe,Qsr),e(zM,Hsr),e(zM,kz),e(kz,Usr),e(zM,Jsr),e(N,Ysr),e(N,WM),e(WM,Lbe),e(Lbe,Ksr),e(WM,Zsr),e(WM,Sz),e(Sz,elr),e(WM,olr),e(N,rlr),e(N,QM),e(QM,xbe),e(xbe,tlr),e(QM,alr),e(QM,Rz),e(Rz,nlr),e(QM,slr),e(N,llr),e(N,HM),e(HM,$be),e($be,ilr),e(HM,dlr),e(HM,Pz),e(Pz,clr),e(HM,mlr),e(N,flr),e(N,UM),e(UM,kbe),e(kbe,glr),e(UM,hlr),e(UM,Bz),e(Bz,ulr),e(UM,plr),e(N,_lr),e(N,JM),e(JM,Sbe),e(Sbe,blr),e(JM,vlr),e(JM,Iz),e(Iz,Flr),e(JM,Tlr),e(N,Mlr),e(N,YM),e(YM,Rbe),e(Rbe,Elr),e(YM,Clr),e(YM,qz),e(qz,wlr),e(YM,Alr),e(N,ylr),e(N,KM),e(KM,Pbe),e(Pbe,Llr),e(KM,xlr),e(KM,Nz),e(Nz,$lr),e(KM,klr),e(N,Slr),e(N,Bs),e(Bs,Bbe),e(Bbe,Rlr),e(Bs,Plr),e(Bs,jz),e(jz,Blr),e(Bs,Ilr),e(Bs,Dz),e(Dz,qlr),e(Bs,Nlr),e(N,jlr),e(N,ZM),e(ZM,Ibe),e(Ibe,Dlr),e(ZM,Glr),e(ZM,Gz),e(Gz,Olr),e(ZM,Vlr),e(N,Xlr),e(N,e4),e(e4,qbe),e(qbe,zlr),e(e4,Wlr),e(e4,Oz),e(Oz,Qlr),e(e4,Hlr),e(N,Ulr),e(N,o4),e(o4,Nbe),e(Nbe,Jlr),e(o4,Ylr),e(o4,Vz),e(Vz,Klr),e(o4,Zlr),e(N,eir),e(N,r4),e(r4,jbe),e(jbe,oir),e(r4,rir),e(r4,Xz),e(Xz,tir),e(r4,air),e(N,nir),e(N,t4),e(t4,Dbe),e(Dbe,sir),e(t4,lir),e(t4,zz),e(zz,iir),e(t4,dir),e(N,cir),e(N,a4),e(a4,Gbe),e(Gbe,mir),e(a4,fir),e(a4,Wz),e(Wz,gir),e(a4,hir),e(N,uir),e(N,n4),e(n4,Obe),e(Obe,pir),e(n4,_ir),e(n4,Qz),e(Qz,bir),e(n4,vir),e(N,Fir),e(N,s4),e(s4,Vbe),e(Vbe,Tir),e(s4,Mir),e(s4,Hz),e(Hz,Eir),e(s4,Cir),e(N,wir),e(N,l4),e(l4,Xbe),e(Xbe,Air),e(l4,yir),e(l4,Uz),e(Uz,Lir),e(l4,xir),e(N,$ir),e(N,i4),e(i4,zbe),e(zbe,kir),e(i4,Sir),e(i4,Jz),e(Jz,Rir),e(i4,Pir),e(N,Bir),e(N,d4),e(d4,Wbe),e(Wbe,Iir),e(d4,qir),e(d4,Yz),e(Yz,Nir),e(d4,jir),e(N,Dir),e(N,c4),e(c4,Qbe),e(Qbe,Gir),e(c4,Oir),e(c4,Kz),e(Kz,Vir),e(c4,Xir),e(N,zir),e(N,m4),e(m4,Hbe),e(Hbe,Wir),e(m4,Qir),e(m4,Zz),e(Zz,Hir),e(m4,Uir),e(N,Jir),e(N,f4),e(f4,Ube),e(Ube,Yir),e(f4,Kir),e(f4,eW),e(eW,Zir),e(f4,edr),e(N,odr),e(N,g4),e(g4,Jbe),e(Jbe,rdr),e(g4,tdr),e(g4,oW),e(oW,adr),e(g4,ndr),e(N,sdr),e(N,h4),e(h4,Ybe),e(Ybe,ldr),e(h4,idr),e(h4,rW),e(rW,ddr),e(h4,cdr),e(N,mdr),e(N,u4),e(u4,Kbe),e(Kbe,fdr),e(u4,gdr),e(u4,tW),e(tW,hdr),e(u4,udr),e(N,pdr),e(N,p4),e(p4,Zbe),e(Zbe,_dr),e(p4,bdr),e(p4,aW),e(aW,vdr),e(p4,Fdr),e(N,Tdr),e(N,_4),e(_4,e2e),e(e2e,Mdr),e(_4,Edr),e(_4,nW),e(nW,Cdr),e(_4,wdr),e(N,Adr),e(N,b4),e(b4,o2e),e(o2e,ydr),e(b4,Ldr),e(b4,sW),e(sW,xdr),e(b4,$dr),e(N,kdr),e(N,v4),e(v4,r2e),e(r2e,Sdr),e(v4,Rdr),e(v4,lW),e(lW,Pdr),e(v4,Bdr),e(N,Idr),e(N,F4),e(F4,t2e),e(t2e,qdr),e(F4,Ndr),e(F4,iW),e(iW,jdr),e(F4,Ddr),e(N,Gdr),e(N,T4),e(T4,a2e),e(a2e,Odr),e(T4,Vdr),e(T4,dW),e(dW,Xdr),e(T4,zdr),e(N,Wdr),e(N,M4),e(M4,n2e),e(n2e,Qdr),e(M4,Hdr),e(M4,cW),e(cW,Udr),e(M4,Jdr),e(N,Ydr),e(N,E4),e(E4,s2e),e(s2e,Kdr),e(E4,Zdr),e(E4,mW),e(mW,ecr),e(E4,ocr),e(N,rcr),e(N,C4),e(C4,l2e),e(l2e,tcr),e(C4,acr),e(C4,fW),e(fW,ncr),e(C4,scr),e(N,lcr),e(N,w4),e(w4,i2e),e(i2e,icr),e(w4,dcr),e(w4,gW),e(gW,ccr),e(w4,mcr),e(N,fcr),e(N,A4),e(A4,d2e),e(d2e,gcr),e(A4,hcr),e(A4,hW),e(hW,ucr),e(A4,pcr),e(wr,_cr),M(y4,wr,null),b(m,Iqe,_),b(m,Vd,_),e(Vd,L4),e(L4,c2e),M(H8,c2e,null),e(Vd,bcr),e(Vd,m2e),e(m2e,vcr),b(m,qqe,_),b(m,Ko,_),M(U8,Ko,null),e(Ko,Fcr),e(Ko,Xd),e(Xd,Tcr),e(Xd,uW),e(uW,Mcr),e(Xd,Ecr),e(Xd,pW),e(pW,Ccr),e(Xd,wcr),e(Ko,Acr),e(Ko,J8),e(J8,ycr),e(J8,f2e),e(f2e,Lcr),e(J8,xcr),e(Ko,$cr),e(Ko,Lt),M(Y8,Lt,null),e(Lt,kcr),e(Lt,g2e),e(g2e,Scr),e(Lt,Rcr),e(Lt,zd),e(zd,Pcr),e(zd,h2e),e(h2e,Bcr),e(zd,Icr),e(zd,_W),e(_W,qcr),e(zd,Ncr),e(Lt,jcr),M(x4,Lt,null),e(Ko,Dcr),e(Ko,Ar),M(K8,Ar,null),e(Ar,Gcr),e(Ar,u2e),e(u2e,Ocr),e(Ar,Vcr),e(Ar,Za),e(Za,Xcr),e(Za,p2e),e(p2e,zcr),e(Za,Wcr),e(Za,_2e),e(_2e,Qcr),e(Za,Hcr),e(Za,b2e),e(b2e,Ucr),e(Za,Jcr),e(Ar,Ycr),e(Ar,se),e(se,$4),e($4,v2e),e(v2e,Kcr),e($4,Zcr),e($4,bW),e(bW,emr),e($4,omr),e(se,rmr),e(se,k4),e(k4,F2e),e(F2e,tmr),e(k4,amr),e(k4,vW),e(vW,nmr),e(k4,smr),e(se,lmr),e(se,S4),e(S4,T2e),e(T2e,imr),e(S4,dmr),e(S4,FW),e(FW,cmr),e(S4,mmr),e(se,fmr),e(se,R4),e(R4,M2e),e(M2e,gmr),e(R4,hmr),e(R4,TW),e(TW,umr),e(R4,pmr),e(se,_mr),e(se,P4),e(P4,E2e),e(E2e,bmr),e(P4,vmr),e(P4,MW),e(MW,Fmr),e(P4,Tmr),e(se,Mmr),e(se,B4),e(B4,C2e),e(C2e,Emr),e(B4,Cmr),e(B4,EW),e(EW,wmr),e(B4,Amr),e(se,ymr),e(se,I4),e(I4,w2e),e(w2e,Lmr),e(I4,xmr),e(I4,CW),e(CW,$mr),e(I4,kmr),e(se,Smr),e(se,q4),e(q4,A2e),e(A2e,Rmr),e(q4,Pmr),e(q4,wW),e(wW,Bmr),e(q4,Imr),e(se,qmr),e(se,N4),e(N4,y2e),e(y2e,Nmr),e(N4,jmr),e(N4,AW),e(AW,Dmr),e(N4,Gmr),e(se,Omr),e(se,j4),e(j4,L2e),e(L2e,Vmr),e(j4,Xmr),e(j4,yW),e(yW,zmr),e(j4,Wmr),e(se,Qmr),e(se,D4),e(D4,x2e),e(x2e,Hmr),e(D4,Umr),e(D4,LW),e(LW,Jmr),e(D4,Ymr),e(se,Kmr),e(se,G4),e(G4,$2e),e($2e,Zmr),e(G4,efr),e(G4,xW),e(xW,ofr),e(G4,rfr),e(se,tfr),e(se,O4),e(O4,k2e),e(k2e,afr),e(O4,nfr),e(O4,$W),e($W,sfr),e(O4,lfr),e(se,ifr),e(se,V4),e(V4,S2e),e(S2e,dfr),e(V4,cfr),e(V4,kW),e(kW,mfr),e(V4,ffr),e(se,gfr),e(se,X4),e(X4,R2e),e(R2e,hfr),e(X4,ufr),e(X4,SW),e(SW,pfr),e(X4,_fr),e(se,bfr),e(se,z4),e(z4,P2e),e(P2e,vfr),e(z4,Ffr),e(z4,RW),e(RW,Tfr),e(z4,Mfr),e(se,Efr),e(se,W4),e(W4,B2e),e(B2e,Cfr),e(W4,wfr),e(W4,PW),e(PW,Afr),e(W4,yfr),e(se,Lfr),e(se,Q4),e(Q4,I2e),e(I2e,xfr),e(Q4,$fr),e(Q4,BW),e(BW,kfr),e(Q4,Sfr),e(se,Rfr),e(se,H4),e(H4,q2e),e(q2e,Pfr),e(H4,Bfr),e(H4,IW),e(IW,Ifr),e(H4,qfr),e(se,Nfr),e(se,U4),e(U4,N2e),e(N2e,jfr),e(U4,Dfr),e(U4,qW),e(qW,Gfr),e(U4,Ofr),e(se,Vfr),e(se,J4),e(J4,j2e),e(j2e,Xfr),e(J4,zfr),e(J4,NW),e(NW,Wfr),e(J4,Qfr),e(se,Hfr),e(se,Y4),e(Y4,D2e),e(D2e,Ufr),e(Y4,Jfr),e(Y4,jW),e(jW,Yfr),e(Y4,Kfr),e(se,Zfr),e(se,K4),e(K4,G2e),e(G2e,egr),e(K4,ogr),e(K4,DW),e(DW,rgr),e(K4,tgr),e(Ar,agr),M(Z4,Ar,null),b(m,Nqe,_),b(m,Wd,_),e(Wd,eE),e(eE,O2e),M(Z8,O2e,null),e(Wd,ngr),e(Wd,V2e),e(V2e,sgr),b(m,jqe,_),b(m,Zo,_),M(ex,Zo,null),e(Zo,lgr),e(Zo,Qd),e(Qd,igr),e(Qd,GW),e(GW,dgr),e(Qd,cgr),e(Qd,OW),e(OW,mgr),e(Qd,fgr),e(Zo,ggr),e(Zo,ox),e(ox,hgr),e(ox,X2e),e(X2e,ugr),e(ox,pgr),e(Zo,_gr),e(Zo,xt),M(rx,xt,null),e(xt,bgr),e(xt,z2e),e(z2e,vgr),e(xt,Fgr),e(xt,Hd),e(Hd,Tgr),e(Hd,W2e),e(W2e,Mgr),e(Hd,Egr),e(Hd,VW),e(VW,Cgr),e(Hd,wgr),e(xt,Agr),M(oE,xt,null),e(Zo,ygr),e(Zo,yr),M(tx,yr,null),e(yr,Lgr),e(yr,Q2e),e(Q2e,xgr),e(yr,$gr),e(yr,en),e(en,kgr),e(en,H2e),e(H2e,Sgr),e(en,Rgr),e(en,U2e),e(U2e,Pgr),e(en,Bgr),e(en,J2e),e(J2e,Igr),e(en,qgr),e(yr,Ngr),e(yr,Te),e(Te,rE),e(rE,Y2e),e(Y2e,jgr),e(rE,Dgr),e(rE,XW),e(XW,Ggr),e(rE,Ogr),e(Te,Vgr),e(Te,tE),e(tE,K2e),e(K2e,Xgr),e(tE,zgr),e(tE,zW),e(zW,Wgr),e(tE,Qgr),e(Te,Hgr),e(Te,aE),e(aE,Z2e),e(Z2e,Ugr),e(aE,Jgr),e(aE,WW),e(WW,Ygr),e(aE,Kgr),e(Te,Zgr),e(Te,nE),e(nE,eve),e(eve,ehr),e(nE,ohr),e(nE,QW),e(QW,rhr),e(nE,thr),e(Te,ahr),e(Te,sE),e(sE,ove),e(ove,nhr),e(sE,shr),e(sE,HW),e(HW,lhr),e(sE,ihr),e(Te,dhr),e(Te,lE),e(lE,rve),e(rve,chr),e(lE,mhr),e(lE,UW),e(UW,fhr),e(lE,ghr),e(Te,hhr),e(Te,iE),e(iE,tve),e(tve,uhr),e(iE,phr),e(iE,JW),e(JW,_hr),e(iE,bhr),e(Te,vhr),e(Te,dE),e(dE,ave),e(ave,Fhr),e(dE,Thr),e(dE,YW),e(YW,Mhr),e(dE,Ehr),e(Te,Chr),e(Te,cE),e(cE,nve),e(nve,whr),e(cE,Ahr),e(cE,KW),e(KW,yhr),e(cE,Lhr),e(Te,xhr),e(Te,mE),e(mE,sve),e(sve,$hr),e(mE,khr),e(mE,ZW),e(ZW,Shr),e(mE,Rhr),e(Te,Phr),e(Te,fE),e(fE,lve),e(lve,Bhr),e(fE,Ihr),e(fE,eQ),e(eQ,qhr),e(fE,Nhr),e(Te,jhr),e(Te,gE),e(gE,ive),e(ive,Dhr),e(gE,Ghr),e(gE,oQ),e(oQ,Ohr),e(gE,Vhr),e(yr,Xhr),M(hE,yr,null),b(m,Dqe,_),b(m,Ud,_),e(Ud,uE),e(uE,dve),M(ax,dve,null),e(Ud,zhr),e(Ud,cve),e(cve,Whr),b(m,Gqe,_),b(m,er,_),M(nx,er,null),e(er,Qhr),e(er,Jd),e(Jd,Hhr),e(Jd,rQ),e(rQ,Uhr),e(Jd,Jhr),e(Jd,tQ),e(tQ,Yhr),e(Jd,Khr),e(er,Zhr),e(er,sx),e(sx,eur),e(sx,mve),e(mve,our),e(sx,rur),e(er,tur),e(er,$t),M(lx,$t,null),e($t,aur),e($t,fve),e(fve,nur),e($t,sur),e($t,Yd),e(Yd,lur),e(Yd,gve),e(gve,iur),e(Yd,dur),e(Yd,aQ),e(aQ,cur),e(Yd,mur),e($t,fur),M(pE,$t,null),e(er,gur),e(er,Lr),M(ix,Lr,null),e(Lr,hur),e(Lr,hve),e(hve,uur),e(Lr,pur),e(Lr,on),e(on,_ur),e(on,uve),e(uve,bur),e(on,vur),e(on,pve),e(pve,Fur),e(on,Tur),e(on,_ve),e(_ve,Mur),e(on,Eur),e(Lr,Cur),e(Lr,rn),e(rn,_E),e(_E,bve),e(bve,wur),e(_E,Aur),e(_E,nQ),e(nQ,yur),e(_E,Lur),e(rn,xur),e(rn,bE),e(bE,vve),e(vve,$ur),e(bE,kur),e(bE,sQ),e(sQ,Sur),e(bE,Rur),e(rn,Pur),e(rn,vE),e(vE,Fve),e(Fve,Bur),e(vE,Iur),e(vE,lQ),e(lQ,qur),e(vE,Nur),e(rn,jur),e(rn,FE),e(FE,Tve),e(Tve,Dur),e(FE,Gur),e(FE,iQ),e(iQ,Our),e(FE,Vur),e(Lr,Xur),M(TE,Lr,null),b(m,Oqe,_),b(m,Kd,_),e(Kd,ME),e(ME,Mve),M(dx,Mve,null),e(Kd,zur),e(Kd,Eve),e(Eve,Wur),b(m,Vqe,_),b(m,or,_),M(cx,or,null),e(or,Qur),e(or,Zd),e(Zd,Hur),e(Zd,dQ),e(dQ,Uur),e(Zd,Jur),e(Zd,cQ),e(cQ,Yur),e(Zd,Kur),e(or,Zur),e(or,mx),e(mx,epr),e(mx,Cve),e(Cve,opr),e(mx,rpr),e(or,tpr),e(or,kt),M(fx,kt,null),e(kt,apr),e(kt,wve),e(wve,npr),e(kt,spr),e(kt,ec),e(ec,lpr),e(ec,Ave),e(Ave,ipr),e(ec,dpr),e(ec,mQ),e(mQ,cpr),e(ec,mpr),e(kt,fpr),M(EE,kt,null),e(or,gpr),e(or,xr),M(gx,xr,null),e(xr,hpr),e(xr,yve),e(yve,upr),e(xr,ppr),e(xr,tn),e(tn,_pr),e(tn,Lve),e(Lve,bpr),e(tn,vpr),e(tn,xve),e(xve,Fpr),e(tn,Tpr),e(tn,$ve),e($ve,Mpr),e(tn,Epr),e(xr,Cpr),e(xr,ie),e(ie,CE),e(CE,kve),e(kve,wpr),e(CE,Apr),e(CE,fQ),e(fQ,ypr),e(CE,Lpr),e(ie,xpr),e(ie,wE),e(wE,Sve),e(Sve,$pr),e(wE,kpr),e(wE,gQ),e(gQ,Spr),e(wE,Rpr),e(ie,Ppr),e(ie,AE),e(AE,Rve),e(Rve,Bpr),e(AE,Ipr),e(AE,hQ),e(hQ,qpr),e(AE,Npr),e(ie,jpr),e(ie,yE),e(yE,Pve),e(Pve,Dpr),e(yE,Gpr),e(yE,uQ),e(uQ,Opr),e(yE,Vpr),e(ie,Xpr),e(ie,LE),e(LE,Bve),e(Bve,zpr),e(LE,Wpr),e(LE,pQ),e(pQ,Qpr),e(LE,Hpr),e(ie,Upr),e(ie,xE),e(xE,Ive),e(Ive,Jpr),e(xE,Ypr),e(xE,_Q),e(_Q,Kpr),e(xE,Zpr),e(ie,e_r),e(ie,$E),e($E,qve),e(qve,o_r),e($E,r_r),e($E,bQ),e(bQ,t_r),e($E,a_r),e(ie,n_r),e(ie,kE),e(kE,Nve),e(Nve,s_r),e(kE,l_r),e(kE,vQ),e(vQ,i_r),e(kE,d_r),e(ie,c_r),e(ie,SE),e(SE,jve),e(jve,m_r),e(SE,f_r),e(SE,FQ),e(FQ,g_r),e(SE,h_r),e(ie,u_r),e(ie,RE),e(RE,Dve),e(Dve,p_r),e(RE,__r),e(RE,TQ),e(TQ,b_r),e(RE,v_r),e(ie,F_r),e(ie,PE),e(PE,Gve),e(Gve,T_r),e(PE,M_r),e(PE,MQ),e(MQ,E_r),e(PE,C_r),e(ie,w_r),e(ie,BE),e(BE,Ove),e(Ove,A_r),e(BE,y_r),e(BE,EQ),e(EQ,L_r),e(BE,x_r),e(ie,$_r),e(ie,IE),e(IE,Vve),e(Vve,k_r),e(IE,S_r),e(IE,CQ),e(CQ,R_r),e(IE,P_r),e(ie,B_r),e(ie,qE),e(qE,Xve),e(Xve,I_r),e(qE,q_r),e(qE,wQ),e(wQ,N_r),e(qE,j_r),e(ie,D_r),e(ie,NE),e(NE,zve),e(zve,G_r),e(NE,O_r),e(NE,AQ),e(AQ,V_r),e(NE,X_r),e(ie,z_r),e(ie,jE),e(jE,Wve),e(Wve,W_r),e(jE,Q_r),e(jE,yQ),e(yQ,H_r),e(jE,U_r),e(ie,J_r),e(ie,DE),e(DE,Qve),e(Qve,Y_r),e(DE,K_r),e(DE,LQ),e(LQ,Z_r),e(DE,ebr),e(ie,obr),e(ie,GE),e(GE,Hve),e(Hve,rbr),e(GE,tbr),e(GE,xQ),e(xQ,abr),e(GE,nbr),e(ie,sbr),e(ie,OE),e(OE,Uve),e(Uve,lbr),e(OE,ibr),e(OE,$Q),e($Q,dbr),e(OE,cbr),e(ie,mbr),e(ie,VE),e(VE,Jve),e(Jve,fbr),e(VE,gbr),e(VE,kQ),e(kQ,hbr),e(VE,ubr),e(xr,pbr),M(XE,xr,null),b(m,Xqe,_),b(m,oc,_),e(oc,zE),e(zE,Yve),M(hx,Yve,null),e(oc,_br),e(oc,Kve),e(Kve,bbr),b(m,zqe,_),b(m,rr,_),M(ux,rr,null),e(rr,vbr),e(rr,rc),e(rc,Fbr),e(rc,SQ),e(SQ,Tbr),e(rc,Mbr),e(rc,RQ),e(RQ,Ebr),e(rc,Cbr),e(rr,wbr),e(rr,px),e(px,Abr),e(px,Zve),e(Zve,ybr),e(px,Lbr),e(rr,xbr),e(rr,St),M(_x,St,null),e(St,$br),e(St,eFe),e(eFe,kbr),e(St,Sbr),e(St,tc),e(tc,Rbr),e(tc,oFe),e(oFe,Pbr),e(tc,Bbr),e(tc,PQ),e(PQ,Ibr),e(tc,qbr),e(St,Nbr),M(WE,St,null),e(rr,jbr),e(rr,$r),M(bx,$r,null),e($r,Dbr),e($r,rFe),e(rFe,Gbr),e($r,Obr),e($r,an),e(an,Vbr),e(an,tFe),e(tFe,Xbr),e(an,zbr),e(an,aFe),e(aFe,Wbr),e(an,Qbr),e(an,nFe),e(nFe,Hbr),e(an,Ubr),e($r,Jbr),e($r,ye),e(ye,QE),e(QE,sFe),e(sFe,Ybr),e(QE,Kbr),e(QE,BQ),e(BQ,Zbr),e(QE,e2r),e(ye,o2r),e(ye,HE),e(HE,lFe),e(lFe,r2r),e(HE,t2r),e(HE,IQ),e(IQ,a2r),e(HE,n2r),e(ye,s2r),e(ye,UE),e(UE,iFe),e(iFe,l2r),e(UE,i2r),e(UE,qQ),e(qQ,d2r),e(UE,c2r),e(ye,m2r),e(ye,JE),e(JE,dFe),e(dFe,f2r),e(JE,g2r),e(JE,NQ),e(NQ,h2r),e(JE,u2r),e(ye,p2r),e(ye,YE),e(YE,cFe),e(cFe,_2r),e(YE,b2r),e(YE,jQ),e(jQ,v2r),e(YE,F2r),e(ye,T2r),e(ye,KE),e(KE,mFe),e(mFe,M2r),e(KE,E2r),e(KE,DQ),e(DQ,C2r),e(KE,w2r),e(ye,A2r),e(ye,ZE),e(ZE,fFe),e(fFe,y2r),e(ZE,L2r),e(ZE,GQ),e(GQ,x2r),e(ZE,$2r),e(ye,k2r),e(ye,eC),e(eC,gFe),e(gFe,S2r),e(eC,R2r),e(eC,OQ),e(OQ,P2r),e(eC,B2r),e(ye,I2r),e(ye,oC),e(oC,hFe),e(hFe,q2r),e(oC,N2r),e(oC,VQ),e(VQ,j2r),e(oC,D2r),e(ye,G2r),e(ye,rC),e(rC,uFe),e(uFe,O2r),e(rC,V2r),e(rC,XQ),e(XQ,X2r),e(rC,z2r),e($r,W2r),M(tC,$r,null),b(m,Wqe,_),b(m,ac,_),e(ac,aC),e(aC,pFe),M(vx,pFe,null),e(ac,Q2r),e(ac,_Fe),e(_Fe,H2r),b(m,Qqe,_),b(m,tr,_),M(Fx,tr,null),e(tr,U2r),e(tr,nc),e(nc,J2r),e(nc,zQ),e(zQ,Y2r),e(nc,K2r),e(nc,WQ),e(WQ,Z2r),e(nc,evr),e(tr,ovr),e(tr,Tx),e(Tx,rvr),e(Tx,bFe),e(bFe,tvr),e(Tx,avr),e(tr,nvr),e(tr,Rt),M(Mx,Rt,null),e(Rt,svr),e(Rt,vFe),e(vFe,lvr),e(Rt,ivr),e(Rt,sc),e(sc,dvr),e(sc,FFe),e(FFe,cvr),e(sc,mvr),e(sc,QQ),e(QQ,fvr),e(sc,gvr),e(Rt,hvr),M(nC,Rt,null),e(tr,uvr),e(tr,kr),M(Ex,kr,null),e(kr,pvr),e(kr,TFe),e(TFe,_vr),e(kr,bvr),e(kr,nn),e(nn,vvr),e(nn,MFe),e(MFe,Fvr),e(nn,Tvr),e(nn,EFe),e(EFe,Mvr),e(nn,Evr),e(nn,CFe),e(CFe,Cvr),e(nn,wvr),e(kr,Avr),e(kr,ee),e(ee,sC),e(sC,wFe),e(wFe,yvr),e(sC,Lvr),e(sC,HQ),e(HQ,xvr),e(sC,$vr),e(ee,kvr),e(ee,lC),e(lC,AFe),e(AFe,Svr),e(lC,Rvr),e(lC,UQ),e(UQ,Pvr),e(lC,Bvr),e(ee,Ivr),e(ee,iC),e(iC,yFe),e(yFe,qvr),e(iC,Nvr),e(iC,JQ),e(JQ,jvr),e(iC,Dvr),e(ee,Gvr),e(ee,dC),e(dC,LFe),e(LFe,Ovr),e(dC,Vvr),e(dC,YQ),e(YQ,Xvr),e(dC,zvr),e(ee,Wvr),e(ee,cC),e(cC,xFe),e(xFe,Qvr),e(cC,Hvr),e(cC,KQ),e(KQ,Uvr),e(cC,Jvr),e(ee,Yvr),e(ee,mC),e(mC,$Fe),e($Fe,Kvr),e(mC,Zvr),e(mC,ZQ),e(ZQ,eFr),e(mC,oFr),e(ee,rFr),e(ee,fC),e(fC,kFe),e(kFe,tFr),e(fC,aFr),e(fC,eH),e(eH,nFr),e(fC,sFr),e(ee,lFr),e(ee,gC),e(gC,SFe),e(SFe,iFr),e(gC,dFr),e(gC,oH),e(oH,cFr),e(gC,mFr),e(ee,fFr),e(ee,hC),e(hC,RFe),e(RFe,gFr),e(hC,hFr),e(hC,rH),e(rH,uFr),e(hC,pFr),e(ee,_Fr),e(ee,uC),e(uC,PFe),e(PFe,bFr),e(uC,vFr),e(uC,tH),e(tH,FFr),e(uC,TFr),e(ee,MFr),e(ee,pC),e(pC,BFe),e(BFe,EFr),e(pC,CFr),e(pC,aH),e(aH,wFr),e(pC,AFr),e(ee,yFr),e(ee,_C),e(_C,IFe),e(IFe,LFr),e(_C,xFr),e(_C,nH),e(nH,$Fr),e(_C,kFr),e(ee,SFr),e(ee,bC),e(bC,qFe),e(qFe,RFr),e(bC,PFr),e(bC,sH),e(sH,BFr),e(bC,IFr),e(ee,qFr),e(ee,vC),e(vC,NFe),e(NFe,NFr),e(vC,jFr),e(vC,lH),e(lH,DFr),e(vC,GFr),e(ee,OFr),e(ee,FC),e(FC,jFe),e(jFe,VFr),e(FC,XFr),e(FC,iH),e(iH,zFr),e(FC,WFr),e(ee,QFr),e(ee,TC),e(TC,DFe),e(DFe,HFr),e(TC,UFr),e(TC,dH),e(dH,JFr),e(TC,YFr),e(ee,KFr),e(ee,MC),e(MC,GFe),e(GFe,ZFr),e(MC,e1r),e(MC,cH),e(cH,o1r),e(MC,r1r),e(ee,t1r),e(ee,EC),e(EC,OFe),e(OFe,a1r),e(EC,n1r),e(EC,mH),e(mH,s1r),e(EC,l1r),e(ee,i1r),e(ee,CC),e(CC,VFe),e(VFe,d1r),e(CC,c1r),e(CC,fH),e(fH,m1r),e(CC,f1r),e(ee,g1r),e(ee,wC),e(wC,XFe),e(XFe,h1r),e(wC,u1r),e(wC,gH),e(gH,p1r),e(wC,_1r),e(ee,b1r),e(ee,AC),e(AC,zFe),e(zFe,v1r),e(AC,F1r),e(AC,hH),e(hH,T1r),e(AC,M1r),e(ee,E1r),e(ee,yC),e(yC,WFe),e(WFe,C1r),e(yC,w1r),e(yC,uH),e(uH,A1r),e(yC,y1r),e(ee,L1r),e(ee,LC),e(LC,QFe),e(QFe,x1r),e(LC,$1r),e(LC,pH),e(pH,k1r),e(LC,S1r),e(ee,R1r),e(ee,xC),e(xC,HFe),e(HFe,P1r),e(xC,B1r),e(xC,_H),e(_H,I1r),e(xC,q1r),e(ee,N1r),e(ee,$C),e($C,UFe),e(UFe,j1r),e($C,D1r),e($C,bH),e(bH,G1r),e($C,O1r),e(ee,V1r),e(ee,kC),e(kC,JFe),e(JFe,X1r),e(kC,z1r),e(kC,vH),e(vH,W1r),e(kC,Q1r),e(kr,H1r),M(SC,kr,null),b(m,Hqe,_),b(m,lc,_),e(lc,RC),e(RC,YFe),M(Cx,YFe,null),e(lc,U1r),e(lc,KFe),e(KFe,J1r),b(m,Uqe,_),b(m,ar,_),M(wx,ar,null),e(ar,Y1r),e(ar,ic),e(ic,K1r),e(ic,FH),e(FH,Z1r),e(ic,eTr),e(ic,TH),e(TH,oTr),e(ic,rTr),e(ar,tTr),e(ar,Ax),e(Ax,aTr),e(Ax,ZFe),e(ZFe,nTr),e(Ax,sTr),e(ar,lTr),e(ar,Pt),M(yx,Pt,null),e(Pt,iTr),e(Pt,e1e),e(e1e,dTr),e(Pt,cTr),e(Pt,dc),e(dc,mTr),e(dc,o1e),e(o1e,fTr),e(dc,gTr),e(dc,MH),e(MH,hTr),e(dc,uTr),e(Pt,pTr),M(PC,Pt,null),e(ar,_Tr),e(ar,Sr),M(Lx,Sr,null),e(Sr,bTr),e(Sr,r1e),e(r1e,vTr),e(Sr,FTr),e(Sr,sn),e(sn,TTr),e(sn,t1e),e(t1e,MTr),e(sn,ETr),e(sn,a1e),e(a1e,CTr),e(sn,wTr),e(sn,n1e),e(n1e,ATr),e(sn,yTr),e(Sr,LTr),e(Sr,he),e(he,BC),e(BC,s1e),e(s1e,xTr),e(BC,$Tr),e(BC,EH),e(EH,kTr),e(BC,STr),e(he,RTr),e(he,IC),e(IC,l1e),e(l1e,PTr),e(IC,BTr),e(IC,CH),e(CH,ITr),e(IC,qTr),e(he,NTr),e(he,qC),e(qC,i1e),e(i1e,jTr),e(qC,DTr),e(qC,wH),e(wH,GTr),e(qC,OTr),e(he,VTr),e(he,NC),e(NC,d1e),e(d1e,XTr),e(NC,zTr),e(NC,AH),e(AH,WTr),e(NC,QTr),e(he,HTr),e(he,jC),e(jC,c1e),e(c1e,UTr),e(jC,JTr),e(jC,yH),e(yH,YTr),e(jC,KTr),e(he,ZTr),e(he,DC),e(DC,m1e),e(m1e,eMr),e(DC,oMr),e(DC,LH),e(LH,rMr),e(DC,tMr),e(he,aMr),e(he,GC),e(GC,f1e),e(f1e,nMr),e(GC,sMr),e(GC,xH),e(xH,lMr),e(GC,iMr),e(he,dMr),e(he,OC),e(OC,g1e),e(g1e,cMr),e(OC,mMr),e(OC,$H),e($H,fMr),e(OC,gMr),e(he,hMr),e(he,VC),e(VC,h1e),e(h1e,uMr),e(VC,pMr),e(VC,kH),e(kH,_Mr),e(VC,bMr),e(he,vMr),e(he,XC),e(XC,u1e),e(u1e,FMr),e(XC,TMr),e(XC,SH),e(SH,MMr),e(XC,EMr),e(he,CMr),e(he,zC),e(zC,p1e),e(p1e,wMr),e(zC,AMr),e(zC,RH),e(RH,yMr),e(zC,LMr),e(he,xMr),e(he,WC),e(WC,_1e),e(_1e,$Mr),e(WC,kMr),e(WC,PH),e(PH,SMr),e(WC,RMr),e(he,PMr),e(he,QC),e(QC,b1e),e(b1e,BMr),e(QC,IMr),e(QC,BH),e(BH,qMr),e(QC,NMr),e(he,jMr),e(he,HC),e(HC,v1e),e(v1e,DMr),e(HC,GMr),e(HC,IH),e(IH,OMr),e(HC,VMr),e(he,XMr),e(he,UC),e(UC,F1e),e(F1e,zMr),e(UC,WMr),e(UC,qH),e(qH,QMr),e(UC,HMr),e(he,UMr),e(he,JC),e(JC,T1e),e(T1e,JMr),e(JC,YMr),e(JC,NH),e(NH,KMr),e(JC,ZMr),e(he,e4r),e(he,YC),e(YC,M1e),e(M1e,o4r),e(YC,r4r),e(YC,jH),e(jH,t4r),e(YC,a4r),e(Sr,n4r),M(KC,Sr,null),b(m,Jqe,_),b(m,cc,_),e(cc,ZC),e(ZC,E1e),M(xx,E1e,null),e(cc,s4r),e(cc,C1e),e(C1e,l4r),b(m,Yqe,_),b(m,nr,_),M($x,nr,null),e(nr,i4r),e(nr,mc),e(mc,d4r),e(mc,DH),e(DH,c4r),e(mc,m4r),e(mc,GH),e(GH,f4r),e(mc,g4r),e(nr,h4r),e(nr,kx),e(kx,u4r),e(kx,w1e),e(w1e,p4r),e(kx,_4r),e(nr,b4r),e(nr,Bt),M(Sx,Bt,null),e(Bt,v4r),e(Bt,A1e),e(A1e,F4r),e(Bt,T4r),e(Bt,fc),e(fc,M4r),e(fc,y1e),e(y1e,E4r),e(fc,C4r),e(fc,OH),e(OH,w4r),e(fc,A4r),e(Bt,y4r),M(e5,Bt,null),e(nr,L4r),e(nr,Rr),M(Rx,Rr,null),e(Rr,x4r),e(Rr,L1e),e(L1e,$4r),e(Rr,k4r),e(Rr,ln),e(ln,S4r),e(ln,x1e),e(x1e,R4r),e(ln,P4r),e(ln,$1e),e($1e,B4r),e(ln,I4r),e(ln,k1e),e(k1e,q4r),e(ln,N4r),e(Rr,j4r),e(Rr,Px),e(Px,o5),e(o5,S1e),e(S1e,D4r),e(o5,G4r),e(o5,VH),e(VH,O4r),e(o5,V4r),e(Px,X4r),e(Px,r5),e(r5,R1e),e(R1e,z4r),e(r5,W4r),e(r5,XH),e(XH,Q4r),e(r5,H4r),e(Rr,U4r),M(t5,Rr,null),b(m,Kqe,_),b(m,gc,_),e(gc,a5),e(a5,P1e),M(Bx,P1e,null),e(gc,J4r),e(gc,B1e),e(B1e,Y4r),b(m,Zqe,_),b(m,sr,_),M(Ix,sr,null),e(sr,K4r),e(sr,hc),e(hc,Z4r),e(hc,zH),e(zH,eEr),e(hc,oEr),e(hc,WH),e(WH,rEr),e(hc,tEr),e(sr,aEr),e(sr,qx),e(qx,nEr),e(qx,I1e),e(I1e,sEr),e(qx,lEr),e(sr,iEr),e(sr,It),M(Nx,It,null),e(It,dEr),e(It,q1e),e(q1e,cEr),e(It,mEr),e(It,uc),e(uc,fEr),e(uc,N1e),e(N1e,gEr),e(uc,hEr),e(uc,QH),e(QH,uEr),e(uc,pEr),e(It,_Er),M(n5,It,null),e(sr,bEr),e(sr,Pr),M(jx,Pr,null),e(Pr,vEr),e(Pr,j1e),e(j1e,FEr),e(Pr,TEr),e(Pr,dn),e(dn,MEr),e(dn,D1e),e(D1e,EEr),e(dn,CEr),e(dn,G1e),e(G1e,wEr),e(dn,AEr),e(dn,O1e),e(O1e,yEr),e(dn,LEr),e(Pr,xEr),e(Pr,V1e),e(V1e,s5),e(s5,X1e),e(X1e,$Er),e(s5,kEr),e(s5,HH),e(HH,SEr),e(s5,REr),e(Pr,PEr),M(l5,Pr,null),b(m,eNe,_),b(m,pc,_),e(pc,i5),e(i5,z1e),M(Dx,z1e,null),e(pc,BEr),e(pc,W1e),e(W1e,IEr),b(m,oNe,_),b(m,lr,_),M(Gx,lr,null),e(lr,qEr),e(lr,_c),e(_c,NEr),e(_c,UH),e(UH,jEr),e(_c,DEr),e(_c,JH),e(JH,GEr),e(_c,OEr),e(lr,VEr),e(lr,Ox),e(Ox,XEr),e(Ox,Q1e),e(Q1e,zEr),e(Ox,WEr),e(lr,QEr),e(lr,qt),M(Vx,qt,null),e(qt,HEr),e(qt,H1e),e(H1e,UEr),e(qt,JEr),e(qt,bc),e(bc,YEr),e(bc,U1e),e(U1e,KEr),e(bc,ZEr),e(bc,YH),e(YH,eCr),e(bc,oCr),e(qt,rCr),M(d5,qt,null),e(lr,tCr),e(lr,Br),M(Xx,Br,null),e(Br,aCr),e(Br,J1e),e(J1e,nCr),e(Br,sCr),e(Br,cn),e(cn,lCr),e(cn,Y1e),e(Y1e,iCr),e(cn,dCr),e(cn,K1e),e(K1e,cCr),e(cn,mCr),e(cn,Z1e),e(Z1e,fCr),e(cn,gCr),e(Br,hCr),e(Br,de),e(de,c5),e(c5,eTe),e(eTe,uCr),e(c5,pCr),e(c5,KH),e(KH,_Cr),e(c5,bCr),e(de,vCr),e(de,m5),e(m5,oTe),e(oTe,FCr),e(m5,TCr),e(m5,ZH),e(ZH,MCr),e(m5,ECr),e(de,CCr),e(de,f5),e(f5,rTe),e(rTe,wCr),e(f5,ACr),e(f5,eU),e(eU,yCr),e(f5,LCr),e(de,xCr),e(de,g5),e(g5,tTe),e(tTe,$Cr),e(g5,kCr),e(g5,oU),e(oU,SCr),e(g5,RCr),e(de,PCr),e(de,h5),e(h5,aTe),e(aTe,BCr),e(h5,ICr),e(h5,rU),e(rU,qCr),e(h5,NCr),e(de,jCr),e(de,u5),e(u5,nTe),e(nTe,DCr),e(u5,GCr),e(u5,tU),e(tU,OCr),e(u5,VCr),e(de,XCr),e(de,p5),e(p5,sTe),e(sTe,zCr),e(p5,WCr),e(p5,aU),e(aU,QCr),e(p5,HCr),e(de,UCr),e(de,_5),e(_5,lTe),e(lTe,JCr),e(_5,YCr),e(_5,nU),e(nU,KCr),e(_5,ZCr),e(de,e5r),e(de,b5),e(b5,iTe),e(iTe,o5r),e(b5,r5r),e(b5,sU),e(sU,t5r),e(b5,a5r),e(de,n5r),e(de,v5),e(v5,dTe),e(dTe,s5r),e(v5,l5r),e(v5,lU),e(lU,i5r),e(v5,d5r),e(de,c5r),e(de,F5),e(F5,cTe),e(cTe,m5r),e(F5,f5r),e(F5,iU),e(iU,g5r),e(F5,h5r),e(de,u5r),e(de,T5),e(T5,mTe),e(mTe,p5r),e(T5,_5r),e(T5,dU),e(dU,b5r),e(T5,v5r),e(de,F5r),e(de,M5),e(M5,fTe),e(fTe,T5r),e(M5,M5r),e(M5,cU),e(cU,E5r),e(M5,C5r),e(de,w5r),e(de,E5),e(E5,gTe),e(gTe,A5r),e(E5,y5r),e(E5,mU),e(mU,L5r),e(E5,x5r),e(de,$5r),e(de,C5),e(C5,hTe),e(hTe,k5r),e(C5,S5r),e(C5,fU),e(fU,R5r),e(C5,P5r),e(de,B5r),e(de,w5),e(w5,uTe),e(uTe,I5r),e(w5,q5r),e(w5,gU),e(gU,N5r),e(w5,j5r),e(de,D5r),e(de,A5),e(A5,pTe),e(pTe,G5r),e(A5,O5r),e(A5,hU),e(hU,V5r),e(A5,X5r),e(de,z5r),e(de,y5),e(y5,_Te),e(_Te,W5r),e(y5,Q5r),e(y5,uU),e(uU,H5r),e(y5,U5r),e(de,J5r),e(de,L5),e(L5,bTe),e(bTe,Y5r),e(L5,K5r),e(L5,pU),e(pU,Z5r),e(L5,e3r),e(de,o3r),e(de,x5),e(x5,vTe),e(vTe,r3r),e(x5,t3r),e(x5,_U),e(_U,a3r),e(x5,n3r),e(Br,s3r),M($5,Br,null),b(m,rNe,_),b(m,vc,_),e(vc,k5),e(k5,FTe),M(zx,FTe,null),e(vc,l3r),e(vc,TTe),e(TTe,i3r),b(m,tNe,_),b(m,ir,_),M(Wx,ir,null),e(ir,d3r),e(ir,Fc),e(Fc,c3r),e(Fc,bU),e(bU,m3r),e(Fc,f3r),e(Fc,vU),e(vU,g3r),e(Fc,h3r),e(ir,u3r),e(ir,Qx),e(Qx,p3r),e(Qx,MTe),e(MTe,_3r),e(Qx,b3r),e(ir,v3r),e(ir,Nt),M(Hx,Nt,null),e(Nt,F3r),e(Nt,ETe),e(ETe,T3r),e(Nt,M3r),e(Nt,Tc),e(Tc,E3r),e(Tc,CTe),e(CTe,C3r),e(Tc,w3r),e(Tc,FU),e(FU,A3r),e(Tc,y3r),e(Nt,L3r),M(S5,Nt,null),e(ir,x3r),e(ir,Ir),M(Ux,Ir,null),e(Ir,$3r),e(Ir,wTe),e(wTe,k3r),e(Ir,S3r),e(Ir,mn),e(mn,R3r),e(mn,ATe),e(ATe,P3r),e(mn,B3r),e(mn,yTe),e(yTe,I3r),e(mn,q3r),e(mn,LTe),e(LTe,N3r),e(mn,j3r),e(Ir,D3r),e(Ir,ce),e(ce,R5),e(R5,xTe),e(xTe,G3r),e(R5,O3r),e(R5,TU),e(TU,V3r),e(R5,X3r),e(ce,z3r),e(ce,P5),e(P5,$Te),e($Te,W3r),e(P5,Q3r),e(P5,MU),e(MU,H3r),e(P5,U3r),e(ce,J3r),e(ce,B5),e(B5,kTe),e(kTe,Y3r),e(B5,K3r),e(B5,EU),e(EU,Z3r),e(B5,ewr),e(ce,owr),e(ce,I5),e(I5,STe),e(STe,rwr),e(I5,twr),e(I5,CU),e(CU,awr),e(I5,nwr),e(ce,swr),e(ce,q5),e(q5,RTe),e(RTe,lwr),e(q5,iwr),e(q5,wU),e(wU,dwr),e(q5,cwr),e(ce,mwr),e(ce,N5),e(N5,PTe),e(PTe,fwr),e(N5,gwr),e(N5,AU),e(AU,hwr),e(N5,uwr),e(ce,pwr),e(ce,j5),e(j5,BTe),e(BTe,_wr),e(j5,bwr),e(j5,yU),e(yU,vwr),e(j5,Fwr),e(ce,Twr),e(ce,D5),e(D5,ITe),e(ITe,Mwr),e(D5,Ewr),e(D5,LU),e(LU,Cwr),e(D5,wwr),e(ce,Awr),e(ce,G5),e(G5,qTe),e(qTe,ywr),e(G5,Lwr),e(G5,xU),e(xU,xwr),e(G5,$wr),e(ce,kwr),e(ce,O5),e(O5,NTe),e(NTe,Swr),e(O5,Rwr),e(O5,$U),e($U,Pwr),e(O5,Bwr),e(ce,Iwr),e(ce,V5),e(V5,jTe),e(jTe,qwr),e(V5,Nwr),e(V5,kU),e(kU,jwr),e(V5,Dwr),e(ce,Gwr),e(ce,X5),e(X5,DTe),e(DTe,Owr),e(X5,Vwr),e(X5,SU),e(SU,Xwr),e(X5,zwr),e(ce,Wwr),e(ce,z5),e(z5,GTe),e(GTe,Qwr),e(z5,Hwr),e(z5,RU),e(RU,Uwr),e(z5,Jwr),e(ce,Ywr),e(ce,W5),e(W5,OTe),e(OTe,Kwr),e(W5,Zwr),e(W5,PU),e(PU,eAr),e(W5,oAr),e(ce,rAr),e(ce,Q5),e(Q5,VTe),e(VTe,tAr),e(Q5,aAr),e(Q5,BU),e(BU,nAr),e(Q5,sAr),e(ce,lAr),e(ce,H5),e(H5,XTe),e(XTe,iAr),e(H5,dAr),e(H5,IU),e(IU,cAr),e(H5,mAr),e(ce,fAr),e(ce,U5),e(U5,zTe),e(zTe,gAr),e(U5,hAr),e(U5,qU),e(qU,uAr),e(U5,pAr),e(ce,_Ar),e(ce,J5),e(J5,WTe),e(WTe,bAr),e(J5,vAr),e(J5,NU),e(NU,FAr),e(J5,TAr),e(ce,MAr),e(ce,Y5),e(Y5,QTe),e(QTe,EAr),e(Y5,CAr),e(Y5,jU),e(jU,wAr),e(Y5,AAr),e(ce,yAr),e(ce,K5),e(K5,HTe),e(HTe,LAr),e(K5,xAr),e(K5,DU),e(DU,$Ar),e(K5,kAr),e(Ir,SAr),M(Z5,Ir,null),b(m,aNe,_),b(m,Mc,_),e(Mc,e3),e(e3,UTe),M(Jx,UTe,null),e(Mc,RAr),e(Mc,JTe),e(JTe,PAr),b(m,nNe,_),b(m,dr,_),M(Yx,dr,null),e(dr,BAr),e(dr,Ec),e(Ec,IAr),e(Ec,GU),e(GU,qAr),e(Ec,NAr),e(Ec,OU),e(OU,jAr),e(Ec,DAr),e(dr,GAr),e(dr,Kx),e(Kx,OAr),e(Kx,YTe),e(YTe,VAr),e(Kx,XAr),e(dr,zAr),e(dr,jt),M(Zx,jt,null),e(jt,WAr),e(jt,KTe),e(KTe,QAr),e(jt,HAr),e(jt,Cc),e(Cc,UAr),e(Cc,ZTe),e(ZTe,JAr),e(Cc,YAr),e(Cc,VU),e(VU,KAr),e(Cc,ZAr),e(jt,e6r),M(o3,jt,null),e(dr,o6r),e(dr,qr),M(e7,qr,null),e(qr,r6r),e(qr,eMe),e(eMe,t6r),e(qr,a6r),e(qr,fn),e(fn,n6r),e(fn,oMe),e(oMe,s6r),e(fn,l6r),e(fn,rMe),e(rMe,i6r),e(fn,d6r),e(fn,tMe),e(tMe,c6r),e(fn,m6r),e(qr,f6r),e(qr,aMe),e(aMe,r3),e(r3,nMe),e(nMe,g6r),e(r3,h6r),e(r3,XU),e(XU,u6r),e(r3,p6r),e(qr,_6r),M(t3,qr,null),b(m,sNe,_),b(m,wc,_),e(wc,a3),e(a3,sMe),M(o7,sMe,null),e(wc,b6r),e(wc,lMe),e(lMe,v6r),b(m,lNe,_),b(m,cr,_),M(r7,cr,null),e(cr,F6r),e(cr,Ac),e(Ac,T6r),e(Ac,zU),e(zU,M6r),e(Ac,E6r),e(Ac,WU),e(WU,C6r),e(Ac,w6r),e(cr,A6r),e(cr,t7),e(t7,y6r),e(t7,iMe),e(iMe,L6r),e(t7,x6r),e(cr,$6r),e(cr,Dt),M(a7,Dt,null),e(Dt,k6r),e(Dt,dMe),e(dMe,S6r),e(Dt,R6r),e(Dt,yc),e(yc,P6r),e(yc,cMe),e(cMe,B6r),e(yc,I6r),e(yc,QU),e(QU,q6r),e(yc,N6r),e(Dt,j6r),M(n3,Dt,null),e(cr,D6r),e(cr,Nr),M(n7,Nr,null),e(Nr,G6r),e(Nr,mMe),e(mMe,O6r),e(Nr,V6r),e(Nr,gn),e(gn,X6r),e(gn,fMe),e(fMe,z6r),e(gn,W6r),e(gn,gMe),e(gMe,Q6r),e(gn,H6r),e(gn,hMe),e(hMe,U6r),e(gn,J6r),e(Nr,Y6r),e(Nr,uMe),e(uMe,s3),e(s3,pMe),e(pMe,K6r),e(s3,Z6r),e(s3,HU),e(HU,e0r),e(s3,o0r),e(Nr,r0r),M(l3,Nr,null),b(m,iNe,_),b(m,Lc,_),e(Lc,i3),e(i3,_Me),M(s7,_Me,null),e(Lc,t0r),e(Lc,bMe),e(bMe,a0r),b(m,dNe,_),b(m,mr,_),M(l7,mr,null),e(mr,n0r),e(mr,xc),e(xc,s0r),e(xc,UU),e(UU,l0r),e(xc,i0r),e(xc,JU),e(JU,d0r),e(xc,c0r),e(mr,m0r),e(mr,i7),e(i7,f0r),e(i7,vMe),e(vMe,g0r),e(i7,h0r),e(mr,u0r),e(mr,Gt),M(d7,Gt,null),e(Gt,p0r),e(Gt,FMe),e(FMe,_0r),e(Gt,b0r),e(Gt,$c),e($c,v0r),e($c,TMe),e(TMe,F0r),e($c,T0r),e($c,YU),e(YU,M0r),e($c,E0r),e(Gt,C0r),M(d3,Gt,null),e(mr,w0r),e(mr,jr),M(c7,jr,null),e(jr,A0r),e(jr,MMe),e(MMe,y0r),e(jr,L0r),e(jr,hn),e(hn,x0r),e(hn,EMe),e(EMe,$0r),e(hn,k0r),e(hn,CMe),e(CMe,S0r),e(hn,R0r),e(hn,wMe),e(wMe,P0r),e(hn,B0r),e(jr,I0r),e(jr,re),e(re,c3),e(c3,AMe),e(AMe,q0r),e(c3,N0r),e(c3,KU),e(KU,j0r),e(c3,D0r),e(re,G0r),e(re,m3),e(m3,yMe),e(yMe,O0r),e(m3,V0r),e(m3,ZU),e(ZU,X0r),e(m3,z0r),e(re,W0r),e(re,f3),e(f3,LMe),e(LMe,Q0r),e(f3,H0r),e(f3,eJ),e(eJ,U0r),e(f3,J0r),e(re,Y0r),e(re,g3),e(g3,xMe),e(xMe,K0r),e(g3,Z0r),e(g3,oJ),e(oJ,eyr),e(g3,oyr),e(re,ryr),e(re,h3),e(h3,$Me),e($Me,tyr),e(h3,ayr),e(h3,rJ),e(rJ,nyr),e(h3,syr),e(re,lyr),e(re,u3),e(u3,kMe),e(kMe,iyr),e(u3,dyr),e(u3,tJ),e(tJ,cyr),e(u3,myr),e(re,fyr),e(re,p3),e(p3,SMe),e(SMe,gyr),e(p3,hyr),e(p3,aJ),e(aJ,uyr),e(p3,pyr),e(re,_yr),e(re,_3),e(_3,RMe),e(RMe,byr),e(_3,vyr),e(_3,nJ),e(nJ,Fyr),e(_3,Tyr),e(re,Myr),e(re,b3),e(b3,PMe),e(PMe,Eyr),e(b3,Cyr),e(b3,sJ),e(sJ,wyr),e(b3,Ayr),e(re,yyr),e(re,v3),e(v3,BMe),e(BMe,Lyr),e(v3,xyr),e(v3,lJ),e(lJ,$yr),e(v3,kyr),e(re,Syr),e(re,F3),e(F3,IMe),e(IMe,Ryr),e(F3,Pyr),e(F3,iJ),e(iJ,Byr),e(F3,Iyr),e(re,qyr),e(re,T3),e(T3,qMe),e(qMe,Nyr),e(T3,jyr),e(T3,dJ),e(dJ,Dyr),e(T3,Gyr),e(re,Oyr),e(re,M3),e(M3,NMe),e(NMe,Vyr),e(M3,Xyr),e(M3,cJ),e(cJ,zyr),e(M3,Wyr),e(re,Qyr),e(re,E3),e(E3,jMe),e(jMe,Hyr),e(E3,Uyr),e(E3,mJ),e(mJ,Jyr),e(E3,Yyr),e(re,Kyr),e(re,C3),e(C3,DMe),e(DMe,Zyr),e(C3,eLr),e(C3,fJ),e(fJ,oLr),e(C3,rLr),e(re,tLr),e(re,w3),e(w3,GMe),e(GMe,aLr),e(w3,nLr),e(w3,gJ),e(gJ,sLr),e(w3,lLr),e(re,iLr),e(re,A3),e(A3,OMe),e(OMe,dLr),e(A3,cLr),e(A3,hJ),e(hJ,mLr),e(A3,fLr),e(re,gLr),e(re,y3),e(y3,VMe),e(VMe,hLr),e(y3,uLr),e(y3,uJ),e(uJ,pLr),e(y3,_Lr),e(re,bLr),e(re,L3),e(L3,XMe),e(XMe,vLr),e(L3,FLr),e(L3,pJ),e(pJ,TLr),e(L3,MLr),e(re,ELr),e(re,x3),e(x3,zMe),e(zMe,CLr),e(x3,wLr),e(x3,_J),e(_J,ALr),e(x3,yLr),e(re,LLr),e(re,$3),e($3,WMe),e(WMe,xLr),e($3,$Lr),e($3,bJ),e(bJ,kLr),e($3,SLr),e(re,RLr),e(re,k3),e(k3,QMe),e(QMe,PLr),e(k3,BLr),e(k3,vJ),e(vJ,ILr),e(k3,qLr),e(re,NLr),e(re,S3),e(S3,HMe),e(HMe,jLr),e(S3,DLr),e(S3,FJ),e(FJ,GLr),e(S3,OLr),e(re,VLr),e(re,R3),e(R3,UMe),e(UMe,XLr),e(R3,zLr),e(R3,TJ),e(TJ,WLr),e(R3,QLr),e(re,HLr),e(re,P3),e(P3,JMe),e(JMe,ULr),e(P3,JLr),e(P3,MJ),e(MJ,YLr),e(P3,KLr),e(jr,ZLr),M(B3,jr,null),b(m,cNe,_),b(m,kc,_),e(kc,I3),e(I3,YMe),M(m7,YMe,null),e(kc,e8r),e(kc,KMe),e(KMe,o8r),b(m,mNe,_),b(m,fr,_),M(f7,fr,null),e(fr,r8r),e(fr,Sc),e(Sc,t8r),e(Sc,EJ),e(EJ,a8r),e(Sc,n8r),e(Sc,CJ),e(CJ,s8r),e(Sc,l8r),e(fr,i8r),e(fr,g7),e(g7,d8r),e(g7,ZMe),e(ZMe,c8r),e(g7,m8r),e(fr,f8r),e(fr,Ot),M(h7,Ot,null),e(Ot,g8r),e(Ot,e4e),e(e4e,h8r),e(Ot,u8r),e(Ot,Rc),e(Rc,p8r),e(Rc,o4e),e(o4e,_8r),e(Rc,b8r),e(Rc,wJ),e(wJ,v8r),e(Rc,F8r),e(Ot,T8r),M(q3,Ot,null),e(fr,M8r),e(fr,Dr),M(u7,Dr,null),e(Dr,E8r),e(Dr,r4e),e(r4e,C8r),e(Dr,w8r),e(Dr,un),e(un,A8r),e(un,t4e),e(t4e,y8r),e(un,L8r),e(un,a4e),e(a4e,x8r),e(un,$8r),e(un,n4e),e(n4e,k8r),e(un,S8r),e(Dr,R8r),e(Dr,Re),e(Re,N3),e(N3,s4e),e(s4e,P8r),e(N3,B8r),e(N3,AJ),e(AJ,I8r),e(N3,q8r),e(Re,N8r),e(Re,j3),e(j3,l4e),e(l4e,j8r),e(j3,D8r),e(j3,yJ),e(yJ,G8r),e(j3,O8r),e(Re,V8r),e(Re,D3),e(D3,i4e),e(i4e,X8r),e(D3,z8r),e(D3,LJ),e(LJ,W8r),e(D3,Q8r),e(Re,H8r),e(Re,G3),e(G3,d4e),e(d4e,U8r),e(G3,J8r),e(G3,xJ),e(xJ,Y8r),e(G3,K8r),e(Re,Z8r),e(Re,O3),e(O3,c4e),e(c4e,exr),e(O3,oxr),e(O3,$J),e($J,rxr),e(O3,txr),e(Re,axr),e(Re,V3),e(V3,m4e),e(m4e,nxr),e(V3,sxr),e(V3,kJ),e(kJ,lxr),e(V3,ixr),e(Re,dxr),e(Re,X3),e(X3,f4e),e(f4e,cxr),e(X3,mxr),e(X3,SJ),e(SJ,fxr),e(X3,gxr),e(Re,hxr),e(Re,z3),e(z3,g4e),e(g4e,uxr),e(z3,pxr),e(z3,RJ),e(RJ,_xr),e(z3,bxr),e(Re,vxr),e(Re,W3),e(W3,h4e),e(h4e,Fxr),e(W3,Txr),e(W3,PJ),e(PJ,Mxr),e(W3,Exr),e(Dr,Cxr),M(Q3,Dr,null),b(m,fNe,_),b(m,Pc,_),e(Pc,H3),e(H3,u4e),M(p7,u4e,null),e(Pc,wxr),e(Pc,p4e),e(p4e,Axr),b(m,gNe,_),b(m,gr,_),M(_7,gr,null),e(gr,yxr),e(gr,Bc),e(Bc,Lxr),e(Bc,BJ),e(BJ,xxr),e(Bc,$xr),e(Bc,IJ),e(IJ,kxr),e(Bc,Sxr),e(gr,Rxr),e(gr,b7),e(b7,Pxr),e(b7,_4e),e(_4e,Bxr),e(b7,Ixr),e(gr,qxr),e(gr,Vt),M(v7,Vt,null),e(Vt,Nxr),e(Vt,b4e),e(b4e,jxr),e(Vt,Dxr),e(Vt,Ic),e(Ic,Gxr),e(Ic,v4e),e(v4e,Oxr),e(Ic,Vxr),e(Ic,qJ),e(qJ,Xxr),e(Ic,zxr),e(Vt,Wxr),M(U3,Vt,null),e(gr,Qxr),e(gr,Gr),M(F7,Gr,null),e(Gr,Hxr),e(Gr,F4e),e(F4e,Uxr),e(Gr,Jxr),e(Gr,pn),e(pn,Yxr),e(pn,T4e),e(T4e,Kxr),e(pn,Zxr),e(pn,M4e),e(M4e,e7r),e(pn,o7r),e(pn,E4e),e(E4e,r7r),e(pn,t7r),e(Gr,a7r),e(Gr,Me),e(Me,J3),e(J3,C4e),e(C4e,n7r),e(J3,s7r),e(J3,NJ),e(NJ,l7r),e(J3,i7r),e(Me,d7r),e(Me,Y3),e(Y3,w4e),e(w4e,c7r),e(Y3,m7r),e(Y3,jJ),e(jJ,f7r),e(Y3,g7r),e(Me,h7r),e(Me,K3),e(K3,A4e),e(A4e,u7r),e(K3,p7r),e(K3,DJ),e(DJ,_7r),e(K3,b7r),e(Me,v7r),e(Me,Z3),e(Z3,y4e),e(y4e,F7r),e(Z3,T7r),e(Z3,GJ),e(GJ,M7r),e(Z3,E7r),e(Me,C7r),e(Me,ew),e(ew,L4e),e(L4e,w7r),e(ew,A7r),e(ew,OJ),e(OJ,y7r),e(ew,L7r),e(Me,x7r),e(Me,ow),e(ow,x4e),e(x4e,$7r),e(ow,k7r),e(ow,VJ),e(VJ,S7r),e(ow,R7r),e(Me,P7r),e(Me,rw),e(rw,$4e),e($4e,B7r),e(rw,I7r),e(rw,XJ),e(XJ,q7r),e(rw,N7r),e(Me,j7r),e(Me,tw),e(tw,k4e),e(k4e,D7r),e(tw,G7r),e(tw,zJ),e(zJ,O7r),e(tw,V7r),e(Me,X7r),e(Me,aw),e(aw,S4e),e(S4e,z7r),e(aw,W7r),e(aw,WJ),e(WJ,Q7r),e(aw,H7r),e(Me,U7r),e(Me,nw),e(nw,R4e),e(R4e,J7r),e(nw,Y7r),e(nw,QJ),e(QJ,K7r),e(nw,Z7r),e(Me,e9r),e(Me,sw),e(sw,P4e),e(P4e,o9r),e(sw,r9r),e(sw,HJ),e(HJ,t9r),e(sw,a9r),e(Me,n9r),e(Me,lw),e(lw,B4e),e(B4e,s9r),e(lw,l9r),e(lw,UJ),e(UJ,i9r),e(lw,d9r),e(Gr,c9r),M(iw,Gr,null),b(m,hNe,_),b(m,qc,_),e(qc,dw),e(dw,I4e),M(T7,I4e,null),e(qc,m9r),e(qc,q4e),e(q4e,f9r),b(m,uNe,_),b(m,hr,_),M(M7,hr,null),e(hr,g9r),e(hr,Nc),e(Nc,h9r),e(Nc,JJ),e(JJ,u9r),e(Nc,p9r),e(Nc,YJ),e(YJ,_9r),e(Nc,b9r),e(hr,v9r),e(hr,E7),e(E7,F9r),e(E7,N4e),e(N4e,T9r),e(E7,M9r),e(hr,E9r),e(hr,Xt),M(C7,Xt,null),e(Xt,C9r),e(Xt,j4e),e(j4e,w9r),e(Xt,A9r),e(Xt,jc),e(jc,y9r),e(jc,D4e),e(D4e,L9r),e(jc,x9r),e(jc,KJ),e(KJ,$9r),e(jc,k9r),e(Xt,S9r),M(cw,Xt,null),e(hr,R9r),e(hr,Or),M(w7,Or,null),e(Or,P9r),e(Or,G4e),e(G4e,B9r),e(Or,I9r),e(Or,_n),e(_n,q9r),e(_n,O4e),e(O4e,N9r),e(_n,j9r),e(_n,V4e),e(V4e,D9r),e(_n,G9r),e(_n,X4e),e(X4e,O9r),e(_n,V9r),e(Or,X9r),e(Or,Le),e(Le,mw),e(mw,z4e),e(z4e,z9r),e(mw,W9r),e(mw,ZJ),e(ZJ,Q9r),e(mw,H9r),e(Le,U9r),e(Le,fw),e(fw,W4e),e(W4e,J9r),e(fw,Y9r),e(fw,eY),e(eY,K9r),e(fw,Z9r),e(Le,e$r),e(Le,gw),e(gw,Q4e),e(Q4e,o$r),e(gw,r$r),e(gw,oY),e(oY,t$r),e(gw,a$r),e(Le,n$r),e(Le,hw),e(hw,H4e),e(H4e,s$r),e(hw,l$r),e(hw,rY),e(rY,i$r),e(hw,d$r),e(Le,c$r),e(Le,uw),e(uw,U4e),e(U4e,m$r),e(uw,f$r),e(uw,tY),e(tY,g$r),e(uw,h$r),e(Le,u$r),e(Le,pw),e(pw,J4e),e(J4e,p$r),e(pw,_$r),e(pw,aY),e(aY,b$r),e(pw,v$r),e(Le,F$r),e(Le,_w),e(_w,Y4e),e(Y4e,T$r),e(_w,M$r),e(_w,nY),e(nY,E$r),e(_w,C$r),e(Le,w$r),e(Le,bw),e(bw,K4e),e(K4e,A$r),e(bw,y$r),e(bw,sY),e(sY,L$r),e(bw,x$r),e(Le,$$r),e(Le,vw),e(vw,Z4e),e(Z4e,k$r),e(vw,S$r),e(vw,lY),e(lY,R$r),e(vw,P$r),e(Le,B$r),e(Le,Fw),e(Fw,eEe),e(eEe,I$r),e(Fw,q$r),e(Fw,iY),e(iY,N$r),e(Fw,j$r),e(Or,D$r),M(Tw,Or,null),b(m,pNe,_),b(m,Dc,_),e(Dc,Mw),e(Mw,oEe),M(A7,oEe,null),e(Dc,G$r),e(Dc,rEe),e(rEe,O$r),b(m,_Ne,_),b(m,ur,_),M(y7,ur,null),e(ur,V$r),e(ur,Gc),e(Gc,X$r),e(Gc,dY),e(dY,z$r),e(Gc,W$r),e(Gc,cY),e(cY,Q$r),e(Gc,H$r),e(ur,U$r),e(ur,L7),e(L7,J$r),e(L7,tEe),e(tEe,Y$r),e(L7,K$r),e(ur,Z$r),e(ur,zt),M(x7,zt,null),e(zt,ekr),e(zt,aEe),e(aEe,okr),e(zt,rkr),e(zt,Oc),e(Oc,tkr),e(Oc,nEe),e(nEe,akr),e(Oc,nkr),e(Oc,mY),e(mY,skr),e(Oc,lkr),e(zt,ikr),M(Ew,zt,null),e(ur,dkr),e(ur,Vr),M($7,Vr,null),e(Vr,ckr),e(Vr,sEe),e(sEe,mkr),e(Vr,fkr),e(Vr,bn),e(bn,gkr),e(bn,lEe),e(lEe,hkr),e(bn,ukr),e(bn,iEe),e(iEe,pkr),e(bn,_kr),e(bn,dEe),e(dEe,bkr),e(bn,vkr),e(Vr,Fkr),e(Vr,Pe),e(Pe,Cw),e(Cw,cEe),e(cEe,Tkr),e(Cw,Mkr),e(Cw,fY),e(fY,Ekr),e(Cw,Ckr),e(Pe,wkr),e(Pe,ww),e(ww,mEe),e(mEe,Akr),e(ww,ykr),e(ww,gY),e(gY,Lkr),e(ww,xkr),e(Pe,$kr),e(Pe,Aw),e(Aw,fEe),e(fEe,kkr),e(Aw,Skr),e(Aw,hY),e(hY,Rkr),e(Aw,Pkr),e(Pe,Bkr),e(Pe,yw),e(yw,gEe),e(gEe,Ikr),e(yw,qkr),e(yw,uY),e(uY,Nkr),e(yw,jkr),e(Pe,Dkr),e(Pe,Lw),e(Lw,hEe),e(hEe,Gkr),e(Lw,Okr),e(Lw,pY),e(pY,Vkr),e(Lw,Xkr),e(Pe,zkr),e(Pe,xw),e(xw,uEe),e(uEe,Wkr),e(xw,Qkr),e(xw,_Y),e(_Y,Hkr),e(xw,Ukr),e(Pe,Jkr),e(Pe,$w),e($w,pEe),e(pEe,Ykr),e($w,Kkr),e($w,bY),e(bY,Zkr),e($w,eSr),e(Pe,oSr),e(Pe,kw),e(kw,_Ee),e(_Ee,rSr),e(kw,tSr),e(kw,vY),e(vY,aSr),e(kw,nSr),e(Pe,sSr),e(Pe,Sw),e(Sw,bEe),e(bEe,lSr),e(Sw,iSr),e(Sw,FY),e(FY,dSr),e(Sw,cSr),e(Vr,mSr),M(Rw,Vr,null),b(m,bNe,_),b(m,Vc,_),e(Vc,Pw),e(Pw,vEe),M(k7,vEe,null),e(Vc,fSr),e(Vc,FEe),e(FEe,gSr),b(m,vNe,_),b(m,pr,_),M(S7,pr,null),e(pr,hSr),e(pr,Xc),e(Xc,uSr),e(Xc,TY),e(TY,pSr),e(Xc,_Sr),e(Xc,MY),e(MY,bSr),e(Xc,vSr),e(pr,FSr),e(pr,R7),e(R7,TSr),e(R7,TEe),e(TEe,MSr),e(R7,ESr),e(pr,CSr),e(pr,Wt),M(P7,Wt,null),e(Wt,wSr),e(Wt,MEe),e(MEe,ASr),e(Wt,ySr),e(Wt,zc),e(zc,LSr),e(zc,EEe),e(EEe,xSr),e(zc,$Sr),e(zc,EY),e(EY,kSr),e(zc,SSr),e(Wt,RSr),M(Bw,Wt,null),e(pr,PSr),e(pr,Xr),M(B7,Xr,null),e(Xr,BSr),e(Xr,CEe),e(CEe,ISr),e(Xr,qSr),e(Xr,vn),e(vn,NSr),e(vn,wEe),e(wEe,jSr),e(vn,DSr),e(vn,AEe),e(AEe,GSr),e(vn,OSr),e(vn,yEe),e(yEe,VSr),e(vn,XSr),e(Xr,zSr),e(Xr,xe),e(xe,Iw),e(Iw,LEe),e(LEe,WSr),e(Iw,QSr),e(Iw,CY),e(CY,HSr),e(Iw,USr),e(xe,JSr),e(xe,qw),e(qw,xEe),e(xEe,YSr),e(qw,KSr),e(qw,wY),e(wY,ZSr),e(qw,eRr),e(xe,oRr),e(xe,Nw),e(Nw,$Ee),e($Ee,rRr),e(Nw,tRr),e(Nw,AY),e(AY,aRr),e(Nw,nRr),e(xe,sRr),e(xe,jw),e(jw,kEe),e(kEe,lRr),e(jw,iRr),e(jw,yY),e(yY,dRr),e(jw,cRr),e(xe,mRr),e(xe,Dw),e(Dw,SEe),e(SEe,fRr),e(Dw,gRr),e(Dw,LY),e(LY,hRr),e(Dw,uRr),e(xe,pRr),e(xe,Gw),e(Gw,REe),e(REe,_Rr),e(Gw,bRr),e(Gw,xY),e(xY,vRr),e(Gw,FRr),e(xe,TRr),e(xe,Ow),e(Ow,PEe),e(PEe,MRr),e(Ow,ERr),e(Ow,$Y),e($Y,CRr),e(Ow,wRr),e(xe,ARr),e(xe,Vw),e(Vw,BEe),e(BEe,yRr),e(Vw,LRr),e(Vw,kY),e(kY,xRr),e(Vw,$Rr),e(xe,kRr),e(xe,Xw),e(Xw,IEe),e(IEe,SRr),e(Xw,RRr),e(Xw,SY),e(SY,PRr),e(Xw,BRr),e(xe,IRr),e(xe,zw),e(zw,qEe),e(qEe,qRr),e(zw,NRr),e(zw,RY),e(RY,jRr),e(zw,DRr),e(Xr,GRr),M(Ww,Xr,null),b(m,FNe,_),b(m,Wc,_),e(Wc,Qw),e(Qw,NEe),M(I7,NEe,null),e(Wc,ORr),e(Wc,jEe),e(jEe,VRr),b(m,TNe,_),b(m,_r,_),M(q7,_r,null),e(_r,XRr),e(_r,Qc),e(Qc,zRr),e(Qc,PY),e(PY,WRr),e(Qc,QRr),e(Qc,BY),e(BY,HRr),e(Qc,URr),e(_r,JRr),e(_r,N7),e(N7,YRr),e(N7,DEe),e(DEe,KRr),e(N7,ZRr),e(_r,ePr),e(_r,Qt),M(j7,Qt,null),e(Qt,oPr),e(Qt,GEe),e(GEe,rPr),e(Qt,tPr),e(Qt,Hc),e(Hc,aPr),e(Hc,OEe),e(OEe,nPr),e(Hc,sPr),e(Hc,IY),e(IY,lPr),e(Hc,iPr),e(Qt,dPr),M(Hw,Qt,null),e(_r,cPr),e(_r,zr),M(D7,zr,null),e(zr,mPr),e(zr,VEe),e(VEe,fPr),e(zr,gPr),e(zr,Fn),e(Fn,hPr),e(Fn,XEe),e(XEe,uPr),e(Fn,pPr),e(Fn,zEe),e(zEe,_Pr),e(Fn,bPr),e(Fn,WEe),e(WEe,vPr),e(Fn,FPr),e(zr,TPr),e(zr,$e),e($e,Uw),e(Uw,QEe),e(QEe,MPr),e(Uw,EPr),e(Uw,qY),e(qY,CPr),e(Uw,wPr),e($e,APr),e($e,Jw),e(Jw,HEe),e(HEe,yPr),e(Jw,LPr),e(Jw,NY),e(NY,xPr),e(Jw,$Pr),e($e,kPr),e($e,Yw),e(Yw,UEe),e(UEe,SPr),e(Yw,RPr),e(Yw,jY),e(jY,PPr),e(Yw,BPr),e($e,IPr),e($e,Kw),e(Kw,JEe),e(JEe,qPr),e(Kw,NPr),e(Kw,DY),e(DY,jPr),e(Kw,DPr),e($e,GPr),e($e,Zw),e(Zw,YEe),e(YEe,OPr),e(Zw,VPr),e(Zw,GY),e(GY,XPr),e(Zw,zPr),e($e,WPr),e($e,eA),e(eA,KEe),e(KEe,QPr),e(eA,HPr),e(eA,OY),e(OY,UPr),e(eA,JPr),e($e,YPr),e($e,oA),e(oA,ZEe),e(ZEe,KPr),e(oA,ZPr),e(oA,VY),e(VY,eBr),e(oA,oBr),e($e,rBr),e($e,rA),e(rA,eCe),e(eCe,tBr),e(rA,aBr),e(rA,XY),e(XY,nBr),e(rA,sBr),e($e,lBr),e($e,tA),e(tA,oCe),e(oCe,iBr),e(tA,dBr),e(tA,zY),e(zY,cBr),e(tA,mBr),e($e,fBr),e($e,aA),e(aA,rCe),e(rCe,gBr),e(aA,hBr),e(aA,WY),e(WY,uBr),e(aA,pBr),e(zr,_Br),M(nA,zr,null),b(m,MNe,_),b(m,Uc,_),e(Uc,sA),e(sA,tCe),M(G7,tCe,null),e(Uc,bBr),e(Uc,aCe),e(aCe,vBr),b(m,ENe,_),b(m,br,_),M(O7,br,null),e(br,FBr),e(br,Jc),e(Jc,TBr),e(Jc,QY),e(QY,MBr),e(Jc,EBr),e(Jc,HY),e(HY,CBr),e(Jc,wBr),e(br,ABr),e(br,V7),e(V7,yBr),e(V7,nCe),e(nCe,LBr),e(V7,xBr),e(br,$Br),e(br,Ht),M(X7,Ht,null),e(Ht,kBr),e(Ht,sCe),e(sCe,SBr),e(Ht,RBr),e(Ht,Yc),e(Yc,PBr),e(Yc,lCe),e(lCe,BBr),e(Yc,IBr),e(Yc,UY),e(UY,qBr),e(Yc,NBr),e(Ht,jBr),M(lA,Ht,null),e(br,DBr),e(br,Wr),M(z7,Wr,null),e(Wr,GBr),e(Wr,iCe),e(iCe,OBr),e(Wr,VBr),e(Wr,Tn),e(Tn,XBr),e(Tn,dCe),e(dCe,zBr),e(Tn,WBr),e(Tn,cCe),e(cCe,QBr),e(Tn,HBr),e(Tn,mCe),e(mCe,UBr),e(Tn,JBr),e(Wr,YBr),e(Wr,De),e(De,iA),e(iA,fCe),e(fCe,KBr),e(iA,ZBr),e(iA,JY),e(JY,eIr),e(iA,oIr),e(De,rIr),e(De,dA),e(dA,gCe),e(gCe,tIr),e(dA,aIr),e(dA,YY),e(YY,nIr),e(dA,sIr),e(De,lIr),e(De,cA),e(cA,hCe),e(hCe,iIr),e(cA,dIr),e(cA,KY),e(KY,cIr),e(cA,mIr),e(De,fIr),e(De,mA),e(mA,uCe),e(uCe,gIr),e(mA,hIr),e(mA,ZY),e(ZY,uIr),e(mA,pIr),e(De,_Ir),e(De,fA),e(fA,pCe),e(pCe,bIr),e(fA,vIr),e(fA,eK),e(eK,FIr),e(fA,TIr),e(De,MIr),e(De,gA),e(gA,_Ce),e(_Ce,EIr),e(gA,CIr),e(gA,oK),e(oK,wIr),e(gA,AIr),e(De,yIr),e(De,hA),e(hA,bCe),e(bCe,LIr),e(hA,xIr),e(hA,rK),e(rK,$Ir),e(hA,kIr),e(De,SIr),e(De,uA),e(uA,vCe),e(vCe,RIr),e(uA,PIr),e(uA,tK),e(tK,BIr),e(uA,IIr),e(Wr,qIr),M(pA,Wr,null),b(m,CNe,_),b(m,Kc,_),e(Kc,_A),e(_A,FCe),M(W7,FCe,null),e(Kc,NIr),e(Kc,TCe),e(TCe,jIr),b(m,wNe,_),b(m,vr,_),M(Q7,vr,null),e(vr,DIr),e(vr,Zc),e(Zc,GIr),e(Zc,aK),e(aK,OIr),e(Zc,VIr),e(Zc,nK),e(nK,XIr),e(Zc,zIr),e(vr,WIr),e(vr,H7),e(H7,QIr),e(H7,MCe),e(MCe,HIr),e(H7,UIr),e(vr,JIr),e(vr,Ut),M(U7,Ut,null),e(Ut,YIr),e(Ut,ECe),e(ECe,KIr),e(Ut,ZIr),e(Ut,em),e(em,eqr),e(em,CCe),e(CCe,oqr),e(em,rqr),e(em,sK),e(sK,tqr),e(em,aqr),e(Ut,nqr),M(bA,Ut,null),e(vr,sqr),e(vr,Qr),M(J7,Qr,null),e(Qr,lqr),e(Qr,wCe),e(wCe,iqr),e(Qr,dqr),e(Qr,Mn),e(Mn,cqr),e(Mn,ACe),e(ACe,mqr),e(Mn,fqr),e(Mn,yCe),e(yCe,gqr),e(Mn,hqr),e(Mn,LCe),e(LCe,uqr),e(Mn,pqr),e(Qr,_qr),e(Qr,Ge),e(Ge,vA),e(vA,xCe),e(xCe,bqr),e(vA,vqr),e(vA,lK),e(lK,Fqr),e(vA,Tqr),e(Ge,Mqr),e(Ge,FA),e(FA,$Ce),e($Ce,Eqr),e(FA,Cqr),e(FA,iK),e(iK,wqr),e(FA,Aqr),e(Ge,yqr),e(Ge,TA),e(TA,kCe),e(kCe,Lqr),e(TA,xqr),e(TA,dK),e(dK,$qr),e(TA,kqr),e(Ge,Sqr),e(Ge,MA),e(MA,SCe),e(SCe,Rqr),e(MA,Pqr),e(MA,cK),e(cK,Bqr),e(MA,Iqr),e(Ge,qqr),e(Ge,EA),e(EA,RCe),e(RCe,Nqr),e(EA,jqr),e(EA,mK),e(mK,Dqr),e(EA,Gqr),e(Ge,Oqr),e(Ge,CA),e(CA,PCe),e(PCe,Vqr),e(CA,Xqr),e(CA,fK),e(fK,zqr),e(CA,Wqr),e(Ge,Qqr),e(Ge,wA),e(wA,BCe),e(BCe,Hqr),e(wA,Uqr),e(wA,gK),e(gK,Jqr),e(wA,Yqr),e(Ge,Kqr),e(Ge,AA),e(AA,ICe),e(ICe,Zqr),e(AA,eNr),e(AA,hK),e(hK,oNr),e(AA,rNr),e(Qr,tNr),M(yA,Qr,null),b(m,ANe,_),b(m,om,_),e(om,LA),e(LA,qCe),M(Y7,qCe,null),e(om,aNr),e(om,NCe),e(NCe,nNr),b(m,yNe,_),b(m,Fr,_),M(K7,Fr,null),e(Fr,sNr),e(Fr,rm),e(rm,lNr),e(rm,uK),e(uK,iNr),e(rm,dNr),e(rm,pK),e(pK,cNr),e(rm,mNr),e(Fr,fNr),e(Fr,Z7),e(Z7,gNr),e(Z7,jCe),e(jCe,hNr),e(Z7,uNr),e(Fr,pNr),e(Fr,Jt),M(e9,Jt,null),e(Jt,_Nr),e(Jt,DCe),e(DCe,bNr),e(Jt,vNr),e(Jt,tm),e(tm,FNr),e(tm,GCe),e(GCe,TNr),e(tm,MNr),e(tm,_K),e(_K,ENr),e(tm,CNr),e(Jt,wNr),M(xA,Jt,null),e(Fr,ANr),e(Fr,Hr),M(o9,Hr,null),e(Hr,yNr),e(Hr,OCe),e(OCe,LNr),e(Hr,xNr),e(Hr,En),e(En,$Nr),e(En,VCe),e(VCe,kNr),e(En,SNr),e(En,XCe),e(XCe,RNr),e(En,PNr),e(En,zCe),e(zCe,BNr),e(En,INr),e(Hr,qNr),e(Hr,WCe),e(WCe,$A),e($A,QCe),e(QCe,NNr),e($A,jNr),e($A,bK),e(bK,DNr),e($A,GNr),e(Hr,ONr),M(kA,Hr,null),b(m,LNe,_),b(m,am,_),e(am,SA),e(SA,HCe),M(r9,HCe,null),e(am,VNr),e(am,UCe),e(UCe,XNr),b(m,xNe,_),b(m,Tr,_),M(t9,Tr,null),e(Tr,zNr),e(Tr,nm),e(nm,WNr),e(nm,vK),e(vK,QNr),e(nm,HNr),e(nm,FK),e(FK,UNr),e(nm,JNr),e(Tr,YNr),e(Tr,a9),e(a9,KNr),e(a9,JCe),e(JCe,ZNr),e(a9,ejr),e(Tr,ojr),e(Tr,Yt),M(n9,Yt,null),e(Yt,rjr),e(Yt,YCe),e(YCe,tjr),e(Yt,ajr),e(Yt,sm),e(sm,njr),e(sm,KCe),e(KCe,sjr),e(sm,ljr),e(sm,TK),e(TK,ijr),e(sm,djr),e(Yt,cjr),M(RA,Yt,null),e(Tr,mjr),e(Tr,Ur),M(s9,Ur,null),e(Ur,fjr),e(Ur,ZCe),e(ZCe,gjr),e(Ur,hjr),e(Ur,Cn),e(Cn,ujr),e(Cn,e5e),e(e5e,pjr),e(Cn,_jr),e(Cn,o5e),e(o5e,bjr),e(Cn,vjr),e(Cn,r5e),e(r5e,Fjr),e(Cn,Tjr),e(Ur,Mjr),e(Ur,l9),e(l9,PA),e(PA,t5e),e(t5e,Ejr),e(PA,Cjr),e(PA,MK),e(MK,wjr),e(PA,Ajr),e(l9,yjr),e(l9,BA),e(BA,a5e),e(a5e,Ljr),e(BA,xjr),e(BA,EK),e(EK,$jr),e(BA,kjr),e(Ur,Sjr),M(IA,Ur,null),b(m,$Ne,_),b(m,lm,_),e(lm,qA),e(qA,n5e),M(i9,n5e,null),e(lm,Rjr),e(lm,s5e),e(s5e,Pjr),b(m,kNe,_),b(m,Mr,_),M(d9,Mr,null),e(Mr,Bjr),e(Mr,im),e(im,Ijr),e(im,CK),e(CK,qjr),e(im,Njr),e(im,wK),e(wK,jjr),e(im,Djr),e(Mr,Gjr),e(Mr,c9),e(c9,Ojr),e(c9,l5e),e(l5e,Vjr),e(c9,Xjr),e(Mr,zjr),e(Mr,Kt),M(m9,Kt,null),e(Kt,Wjr),e(Kt,i5e),e(i5e,Qjr),e(Kt,Hjr),e(Kt,dm),e(dm,Ujr),e(dm,d5e),e(d5e,Jjr),e(dm,Yjr),e(dm,AK),e(AK,Kjr),e(dm,Zjr),e(Kt,eDr),M(NA,Kt,null),e(Mr,oDr),e(Mr,Jr),M(f9,Jr,null),e(Jr,rDr),e(Jr,c5e),e(c5e,tDr),e(Jr,aDr),e(Jr,wn),e(wn,nDr),e(wn,m5e),e(m5e,sDr),e(wn,lDr),e(wn,f5e),e(f5e,iDr),e(wn,dDr),e(wn,g5e),e(g5e,cDr),e(wn,mDr),e(Jr,fDr),e(Jr,h5e),e(h5e,jA),e(jA,u5e),e(u5e,gDr),e(jA,hDr),e(jA,yK),e(yK,uDr),e(jA,pDr),e(Jr,_Dr),M(DA,Jr,null),SNe=!0},p(m,[_]){const g9={};_&2&&(g9.$$scope={dirty:_,ctx:m}),bm.$set(g9);const p5e={};_&2&&(p5e.$$scope={dirty:_,ctx:m}),bg.$set(p5e);const _5e={};_&2&&(_5e.$$scope={dirty:_,ctx:m}),Kg.$set(_5e);const b5e={};_&2&&(b5e.$$scope={dirty:_,ctx:m}),yh.$set(b5e);const h9={};_&2&&(h9.$$scope={dirty:_,ctx:m}),Lh.$set(h9);const v5e={};_&2&&(v5e.$$scope={dirty:_,ctx:m}),Qh.$set(v5e);const An={};_&2&&(An.$$scope={dirty:_,ctx:m}),Hh.$set(An);const F5e={};_&2&&(F5e.$$scope={dirty:_,ctx:m}),Yh.$set(F5e);const T5e={};_&2&&(T5e.$$scope={dirty:_,ctx:m}),Op.$set(T5e);const M5e={};_&2&&(M5e.$$scope={dirty:_,ctx:m}),Xp.$set(M5e);const u9={};_&2&&(u9.$$scope={dirty:_,ctx:m}),P_.$set(u9);const E5e={};_&2&&(E5e.$$scope={dirty:_,ctx:m}),I_.$set(E5e);const p9={};_&2&&(p9.$$scope={dirty:_,ctx:m}),Fb.$set(p9);const C5e={};_&2&&(C5e.$$scope={dirty:_,ctx:m}),Mb.$set(C5e);const _9={};_&2&&(_9.$$scope={dirty:_,ctx:m}),n2.$set(_9);const w5e={};_&2&&(w5e.$$scope={dirty:_,ctx:m}),l2.$set(w5e);const A5e={};_&2&&(A5e.$$scope={dirty:_,ctx:m}),w2.$set(A5e);const y5e={};_&2&&(y5e.$$scope={dirty:_,ctx:m}),y2.$set(y5e);const cm={};_&2&&(cm.$$scope={dirty:_,ctx:m}),Tv.$set(cm);const L5e={};_&2&&(L5e.$$scope={dirty:_,ctx:m}),Ev.$set(L5e);const x5e={};_&2&&(x5e.$$scope={dirty:_,ctx:m}),eF.$set(x5e);const $5e={};_&2&&($5e.$$scope={dirty:_,ctx:m}),rF.$set($5e);const b9={};_&2&&(b9.$$scope={dirty:_,ctx:m}),dF.$set(b9);const k5e={};_&2&&(k5e.$$scope={dirty:_,ctx:m}),mF.$set(k5e);const S5e={};_&2&&(S5e.$$scope={dirty:_,ctx:m}),WF.$set(S5e);const R5e={};_&2&&(R5e.$$scope={dirty:_,ctx:m}),HF.$set(R5e);const et={};_&2&&(et.$$scope={dirty:_,ctx:m}),B1.$set(et);const v9={};_&2&&(v9.$$scope={dirty:_,ctx:m}),q1.$set(v9);const P5e={};_&2&&(P5e.$$scope={dirty:_,ctx:m}),D1.$set(P5e);const F9={};_&2&&(F9.$$scope={dirty:_,ctx:m}),O1.$set(F9);const B5e={};_&2&&(B5e.$$scope={dirty:_,ctx:m}),oT.$set(B5e);const ot={};_&2&&(ot.$$scope={dirty:_,ctx:m}),tT.$set(ot);const I5e={};_&2&&(I5e.$$scope={dirty:_,ctx:m}),sT.$set(I5e);const mm={};_&2&&(mm.$$scope={dirty:_,ctx:m}),iT.$set(mm);const q5e={};_&2&&(q5e.$$scope={dirty:_,ctx:m}),vT.$set(q5e);const N5e={};_&2&&(N5e.$$scope={dirty:_,ctx:m}),TT.$set(N5e);const y={};_&2&&(y.$$scope={dirty:_,ctx:m}),LT.$set(y);const GA={};_&2&&(GA.$$scope={dirty:_,ctx:m}),$T.$set(GA);const j5e={};_&2&&(j5e.$$scope={dirty:_,ctx:m}),GT.$set(j5e);const D5e={};_&2&&(D5e.$$scope={dirty:_,ctx:m}),VT.$set(D5e);const OA={};_&2&&(OA.$$scope={dirty:_,ctx:m}),QT.$set(OA);const G5e={};_&2&&(G5e.$$scope={dirty:_,ctx:m}),UT.$set(G5e);const O5e={};_&2&&(O5e.$$scope={dirty:_,ctx:m}),rM.$set(O5e);const VA={};_&2&&(VA.$$scope={dirty:_,ctx:m}),aM.$set(VA);const V5e={};_&2&&(V5e.$$scope={dirty:_,ctx:m}),dM.$set(V5e);const X5e={};_&2&&(X5e.$$scope={dirty:_,ctx:m}),mM.$set(X5e);const XA={};_&2&&(XA.$$scope={dirty:_,ctx:m}),uM.$set(XA);const z5e={};_&2&&(z5e.$$scope={dirty:_,ctx:m}),_M.$set(z5e);const W5e={};_&2&&(W5e.$$scope={dirty:_,ctx:m}),FM.$set(W5e);const zA={};_&2&&(zA.$$scope={dirty:_,ctx:m}),MM.$set(zA);const Q5e={};_&2&&(Q5e.$$scope={dirty:_,ctx:m}),LM.$set(Q5e);const H5e={};_&2&&(H5e.$$scope={dirty:_,ctx:m}),$M.$set(H5e);const WA={};_&2&&(WA.$$scope={dirty:_,ctx:m}),RM.$set(WA);const U5e={};_&2&&(U5e.$$scope={dirty:_,ctx:m}),BM.$set(U5e);const J5e={};_&2&&(J5e.$$scope={dirty:_,ctx:m}),y4.$set(J5e);const QA={};_&2&&(QA.$$scope={dirty:_,ctx:m}),x4.$set(QA);const Y5e={};_&2&&(Y5e.$$scope={dirty:_,ctx:m}),Z4.$set(Y5e);const K5e={};_&2&&(K5e.$$scope={dirty:_,ctx:m}),oE.$set(K5e);const HA={};_&2&&(HA.$$scope={dirty:_,ctx:m}),hE.$set(HA);const Z5e={};_&2&&(Z5e.$$scope={dirty:_,ctx:m}),pE.$set(Z5e);const e3e={};_&2&&(e3e.$$scope={dirty:_,ctx:m}),TE.$set(e3e);const UA={};_&2&&(UA.$$scope={dirty:_,ctx:m}),EE.$set(UA);const o3e={};_&2&&(o3e.$$scope={dirty:_,ctx:m}),XE.$set(o3e);const r3e={};_&2&&(r3e.$$scope={dirty:_,ctx:m}),WE.$set(r3e);const JA={};_&2&&(JA.$$scope={dirty:_,ctx:m}),tC.$set(JA);const t3e={};_&2&&(t3e.$$scope={dirty:_,ctx:m}),nC.$set(t3e);const a3e={};_&2&&(a3e.$$scope={dirty:_,ctx:m}),SC.$set(a3e);const YA={};_&2&&(YA.$$scope={dirty:_,ctx:m}),PC.$set(YA);const n3e={};_&2&&(n3e.$$scope={dirty:_,ctx:m}),KC.$set(n3e);const s3e={};_&2&&(s3e.$$scope={dirty:_,ctx:m}),e5.$set(s3e);const KA={};_&2&&(KA.$$scope={dirty:_,ctx:m}),t5.$set(KA);const l3e={};_&2&&(l3e.$$scope={dirty:_,ctx:m}),n5.$set(l3e);const i3e={};_&2&&(i3e.$$scope={dirty:_,ctx:m}),l5.$set(i3e);const ZA={};_&2&&(ZA.$$scope={dirty:_,ctx:m}),d5.$set(ZA);const d3e={};_&2&&(d3e.$$scope={dirty:_,ctx:m}),$5.$set(d3e);const c3e={};_&2&&(c3e.$$scope={dirty:_,ctx:m}),S5.$set(c3e);const e6={};_&2&&(e6.$$scope={dirty:_,ctx:m}),Z5.$set(e6);const m3e={};_&2&&(m3e.$$scope={dirty:_,ctx:m}),o3.$set(m3e);const f3e={};_&2&&(f3e.$$scope={dirty:_,ctx:m}),t3.$set(f3e);const o6={};_&2&&(o6.$$scope={dirty:_,ctx:m}),n3.$set(o6);const g3e={};_&2&&(g3e.$$scope={dirty:_,ctx:m}),l3.$set(g3e);const h3e={};_&2&&(h3e.$$scope={dirty:_,ctx:m}),d3.$set(h3e);const r6={};_&2&&(r6.$$scope={dirty:_,ctx:m}),B3.$set(r6);const u3e={};_&2&&(u3e.$$scope={dirty:_,ctx:m}),q3.$set(u3e);const p3e={};_&2&&(p3e.$$scope={dirty:_,ctx:m}),Q3.$set(p3e);const t6={};_&2&&(t6.$$scope={dirty:_,ctx:m}),U3.$set(t6);const _3e={};_&2&&(_3e.$$scope={dirty:_,ctx:m}),iw.$set(_3e);const b3e={};_&2&&(b3e.$$scope={dirty:_,ctx:m}),cw.$set(b3e);const a6={};_&2&&(a6.$$scope={dirty:_,ctx:m}),Tw.$set(a6);const v3e={};_&2&&(v3e.$$scope={dirty:_,ctx:m}),Ew.$set(v3e);const F3e={};_&2&&(F3e.$$scope={dirty:_,ctx:m}),Rw.$set(F3e);const n6={};_&2&&(n6.$$scope={dirty:_,ctx:m}),Bw.$set(n6);const T3e={};_&2&&(T3e.$$scope={dirty:_,ctx:m}),Ww.$set(T3e);const M3e={};_&2&&(M3e.$$scope={dirty:_,ctx:m}),Hw.$set(M3e);const s6={};_&2&&(s6.$$scope={dirty:_,ctx:m}),nA.$set(s6);const E3e={};_&2&&(E3e.$$scope={dirty:_,ctx:m}),lA.$set(E3e);const C3e={};_&2&&(C3e.$$scope={dirty:_,ctx:m}),pA.$set(C3e);const l6={};_&2&&(l6.$$scope={dirty:_,ctx:m}),bA.$set(l6);const w3e={};_&2&&(w3e.$$scope={dirty:_,ctx:m}),yA.$set(w3e);const A3e={};_&2&&(A3e.$$scope={dirty:_,ctx:m}),xA.$set(A3e);const i6={};_&2&&(i6.$$scope={dirty:_,ctx:m}),kA.$set(i6);const y3e={};_&2&&(y3e.$$scope={dirty:_,ctx:m}),RA.$set(y3e);const L3e={};_&2&&(L3e.$$scope={dirty:_,ctx:m}),IA.$set(L3e);const d6={};_&2&&(d6.$$scope={dirty:_,ctx:m}),NA.$set(d6);const x3e={};_&2&&(x3e.$$scope={dirty:_,ctx:m}),DA.$set(x3e)},i(m){SNe||(E(d.$$.fragment,m),E(Ca.$$.fragment,m),E(iy.$$.fragment,m),E(dy.$$.fragment,m),E(bm.$$.fragment,m),E(cy.$$.fragment,m),E(my.$$.fragment,m),E(hy.$$.fragment,m),E(bg.$$.fragment,m),E(uy.$$.fragment,m),E(py.$$.fragment,m),E(_y.$$.fragment,m),E(Fy.$$.fragment,m),E(Kg.$$.fragment,m),E(Ty.$$.fragment,m),E(My.$$.fragment,m),E(Ey.$$.fragment,m),E(Ay.$$.fragment,m),E(yh.$$.fragment,m),E(Lh.$$.fragment,m),E(yy.$$.fragment,m),E(Ly.$$.fragment,m),E(xy.$$.fragment,m),E(Sy.$$.fragment,m),E(Qh.$$.fragment,m),E(Hh.$$.fragment,m),E(Ry.$$.fragment,m),E(Py.$$.fragment,m),E(By.$$.fragment,m),E(qy.$$.fragment,m),E(Yh.$$.fragment,m),E(Ny.$$.fragment,m),E(Op.$$.fragment,m),E(jy.$$.fragment,m),E(Dy.$$.fragment,m),E(Oy.$$.fragment,m),E(Xp.$$.fragment,m),E(Vy.$$.fragment,m),E(P_.$$.fragment,m),E(Xy.$$.fragment,m),E(zy.$$.fragment,m),E(Qy.$$.fragment,m),E(I_.$$.fragment,m),E(Hy.$$.fragment,m),E(Fb.$$.fragment,m),E(Uy.$$.fragment,m),E(Jy.$$.fragment,m),E(Ky.$$.fragment,m),E(Mb.$$.fragment,m),E(Zy.$$.fragment,m),E(n2.$$.fragment,m),E(eL.$$.fragment,m),E(oL.$$.fragment,m),E(tL.$$.fragment,m),E(l2.$$.fragment,m),E(aL.$$.fragment,m),E(w2.$$.fragment,m),E(nL.$$.fragment,m),E(sL.$$.fragment,m),E(iL.$$.fragment,m),E(y2.$$.fragment,m),E(dL.$$.fragment,m),E(Tv.$$.fragment,m),E(cL.$$.fragment,m),E(mL.$$.fragment,m),E(gL.$$.fragment,m),E(Ev.$$.fragment,m),E(hL.$$.fragment,m),E(eF.$$.fragment,m),E(uL.$$.fragment,m),E(pL.$$.fragment,m),E(bL.$$.fragment,m),E(rF.$$.fragment,m),E(vL.$$.fragment,m),E(dF.$$.fragment,m),E(FL.$$.fragment,m),E(TL.$$.fragment,m),E(EL.$$.fragment,m),E(mF.$$.fragment,m),E(CL.$$.fragment,m),E(WF.$$.fragment,m),E(wL.$$.fragment,m),E(AL.$$.fragment,m),E(LL.$$.fragment,m),E(HF.$$.fragment,m),E(xL.$$.fragment,m),E(B1.$$.fragment,m),E($L.$$.fragment,m),E(kL.$$.fragment,m),E(RL.$$.fragment,m),E(q1.$$.fragment,m),E(PL.$$.fragment,m),E(D1.$$.fragment,m),E(BL.$$.fragment,m),E(IL.$$.fragment,m),E(NL.$$.fragment,m),E(O1.$$.fragment,m),E(jL.$$.fragment,m),E(oT.$$.fragment,m),E(DL.$$.fragment,m),E(GL.$$.fragment,m),E(VL.$$.fragment,m),E(tT.$$.fragment,m),E(XL.$$.fragment,m),E(sT.$$.fragment,m),E(zL.$$.fragment,m),E(WL.$$.fragment,m),E(HL.$$.fragment,m),E(iT.$$.fragment,m),E(UL.$$.fragment,m),E(vT.$$.fragment,m),E(JL.$$.fragment,m),E(YL.$$.fragment,m),E(ZL.$$.fragment,m),E(TT.$$.fragment,m),E(e8.$$.fragment,m),E(LT.$$.fragment,m),E(o8.$$.fragment,m),E(r8.$$.fragment,m),E(a8.$$.fragment,m),E($T.$$.fragment,m),E(n8.$$.fragment,m),E(GT.$$.fragment,m),E(s8.$$.fragment,m),E(l8.$$.fragment,m),E(d8.$$.fragment,m),E(VT.$$.fragment,m),E(c8.$$.fragment,m),E(QT.$$.fragment,m),E(f8.$$.fragment,m),E(g8.$$.fragment,m),E(u8.$$.fragment,m),E(UT.$$.fragment,m),E(p8.$$.fragment,m),E(rM.$$.fragment,m),E(_8.$$.fragment,m),E(b8.$$.fragment,m),E(F8.$$.fragment,m),E(aM.$$.fragment,m),E(T8.$$.fragment,m),E(dM.$$.fragment,m),E(M8.$$.fragment,m),E(E8.$$.fragment,m),E(w8.$$.fragment,m),E(mM.$$.fragment,m),E(A8.$$.fragment,m),E(uM.$$.fragment,m),E(L8.$$.fragment,m),E(x8.$$.fragment,m),E(k8.$$.fragment,m),E(_M.$$.fragment,m),E(S8.$$.fragment,m),E(FM.$$.fragment,m),E(R8.$$.fragment,m),E(P8.$$.fragment,m),E(I8.$$.fragment,m),E(MM.$$.fragment,m),E(q8.$$.fragment,m),E(LM.$$.fragment,m),E(N8.$$.fragment,m),E(j8.$$.fragment,m),E(G8.$$.fragment,m),E($M.$$.fragment,m),E(O8.$$.fragment,m),E(RM.$$.fragment,m),E(V8.$$.fragment,m),E(X8.$$.fragment,m),E(W8.$$.fragment,m),E(BM.$$.fragment,m),E(Q8.$$.fragment,m),E(y4.$$.fragment,m),E(H8.$$.fragment,m),E(U8.$$.fragment,m),E(Y8.$$.fragment,m),E(x4.$$.fragment,m),E(K8.$$.fragment,m),E(Z4.$$.fragment,m),E(Z8.$$.fragment,m),E(ex.$$.fragment,m),E(rx.$$.fragment,m),E(oE.$$.fragment,m),E(tx.$$.fragment,m),E(hE.$$.fragment,m),E(ax.$$.fragment,m),E(nx.$$.fragment,m),E(lx.$$.fragment,m),E(pE.$$.fragment,m),E(ix.$$.fragment,m),E(TE.$$.fragment,m),E(dx.$$.fragment,m),E(cx.$$.fragment,m),E(fx.$$.fragment,m),E(EE.$$.fragment,m),E(gx.$$.fragment,m),E(XE.$$.fragment,m),E(hx.$$.fragment,m),E(ux.$$.fragment,m),E(_x.$$.fragment,m),E(WE.$$.fragment,m),E(bx.$$.fragment,m),E(tC.$$.fragment,m),E(vx.$$.fragment,m),E(Fx.$$.fragment,m),E(Mx.$$.fragment,m),E(nC.$$.fragment,m),E(Ex.$$.fragment,m),E(SC.$$.fragment,m),E(Cx.$$.fragment,m),E(wx.$$.fragment,m),E(yx.$$.fragment,m),E(PC.$$.fragment,m),E(Lx.$$.fragment,m),E(KC.$$.fragment,m),E(xx.$$.fragment,m),E($x.$$.fragment,m),E(Sx.$$.fragment,m),E(e5.$$.fragment,m),E(Rx.$$.fragment,m),E(t5.$$.fragment,m),E(Bx.$$.fragment,m),E(Ix.$$.fragment,m),E(Nx.$$.fragment,m),E(n5.$$.fragment,m),E(jx.$$.fragment,m),E(l5.$$.fragment,m),E(Dx.$$.fragment,m),E(Gx.$$.fragment,m),E(Vx.$$.fragment,m),E(d5.$$.fragment,m),E(Xx.$$.fragment,m),E($5.$$.fragment,m),E(zx.$$.fragment,m),E(Wx.$$.fragment,m),E(Hx.$$.fragment,m),E(S5.$$.fragment,m),E(Ux.$$.fragment,m),E(Z5.$$.fragment,m),E(Jx.$$.fragment,m),E(Yx.$$.fragment,m),E(Zx.$$.fragment,m),E(o3.$$.fragment,m),E(e7.$$.fragment,m),E(t3.$$.fragment,m),E(o7.$$.fragment,m),E(r7.$$.fragment,m),E(a7.$$.fragment,m),E(n3.$$.fragment,m),E(n7.$$.fragment,m),E(l3.$$.fragment,m),E(s7.$$.fragment,m),E(l7.$$.fragment,m),E(d7.$$.fragment,m),E(d3.$$.fragment,m),E(c7.$$.fragment,m),E(B3.$$.fragment,m),E(m7.$$.fragment,m),E(f7.$$.fragment,m),E(h7.$$.fragment,m),E(q3.$$.fragment,m),E(u7.$$.fragment,m),E(Q3.$$.fragment,m),E(p7.$$.fragment,m),E(_7.$$.fragment,m),E(v7.$$.fragment,m),E(U3.$$.fragment,m),E(F7.$$.fragment,m),E(iw.$$.fragment,m),E(T7.$$.fragment,m),E(M7.$$.fragment,m),E(C7.$$.fragment,m),E(cw.$$.fragment,m),E(w7.$$.fragment,m),E(Tw.$$.fragment,m),E(A7.$$.fragment,m),E(y7.$$.fragment,m),E(x7.$$.fragment,m),E(Ew.$$.fragment,m),E($7.$$.fragment,m),E(Rw.$$.fragment,m),E(k7.$$.fragment,m),E(S7.$$.fragment,m),E(P7.$$.fragment,m),E(Bw.$$.fragment,m),E(B7.$$.fragment,m),E(Ww.$$.fragment,m),E(I7.$$.fragment,m),E(q7.$$.fragment,m),E(j7.$$.fragment,m),E(Hw.$$.fragment,m),E(D7.$$.fragment,m),E(nA.$$.fragment,m),E(G7.$$.fragment,m),E(O7.$$.fragment,m),E(X7.$$.fragment,m),E(lA.$$.fragment,m),E(z7.$$.fragment,m),E(pA.$$.fragment,m),E(W7.$$.fragment,m),E(Q7.$$.fragment,m),E(U7.$$.fragment,m),E(bA.$$.fragment,m),E(J7.$$.fragment,m),E(yA.$$.fragment,m),E(Y7.$$.fragment,m),E(K7.$$.fragment,m),E(e9.$$.fragment,m),E(xA.$$.fragment,m),E(o9.$$.fragment,m),E(kA.$$.fragment,m),E(r9.$$.fragment,m),E(t9.$$.fragment,m),E(n9.$$.fragment,m),E(RA.$$.fragment,m),E(s9.$$.fragment,m),E(IA.$$.fragment,m),E(i9.$$.fragment,m),E(d9.$$.fragment,m),E(m9.$$.fragment,m),E(NA.$$.fragment,m),E(f9.$$.fragment,m),E(DA.$$.fragment,m),SNe=!0)},o(m){C(d.$$.fragment,m),C(Ca.$$.fragment,m),C(iy.$$.fragment,m),C(dy.$$.fragment,m),C(bm.$$.fragment,m),C(cy.$$.fragment,m),C(my.$$.fragment,m),C(hy.$$.fragment,m),C(bg.$$.fragment,m),C(uy.$$.fragment,m),C(py.$$.fragment,m),C(_y.$$.fragment,m),C(Fy.$$.fragment,m),C(Kg.$$.fragment,m),C(Ty.$$.fragment,m),C(My.$$.fragment,m),C(Ey.$$.fragment,m),C(Ay.$$.fragment,m),C(yh.$$.fragment,m),C(Lh.$$.fragment,m),C(yy.$$.fragment,m),C(Ly.$$.fragment,m),C(xy.$$.fragment,m),C(Sy.$$.fragment,m),C(Qh.$$.fragment,m),C(Hh.$$.fragment,m),C(Ry.$$.fragment,m),C(Py.$$.fragment,m),C(By.$$.fragment,m),C(qy.$$.fragment,m),C(Yh.$$.fragment,m),C(Ny.$$.fragment,m),C(Op.$$.fragment,m),C(jy.$$.fragment,m),C(Dy.$$.fragment,m),C(Oy.$$.fragment,m),C(Xp.$$.fragment,m),C(Vy.$$.fragment,m),C(P_.$$.fragment,m),C(Xy.$$.fragment,m),C(zy.$$.fragment,m),C(Qy.$$.fragment,m),C(I_.$$.fragment,m),C(Hy.$$.fragment,m),C(Fb.$$.fragment,m),C(Uy.$$.fragment,m),C(Jy.$$.fragment,m),C(Ky.$$.fragment,m),C(Mb.$$.fragment,m),C(Zy.$$.fragment,m),C(n2.$$.fragment,m),C(eL.$$.fragment,m),C(oL.$$.fragment,m),C(tL.$$.fragment,m),C(l2.$$.fragment,m),C(aL.$$.fragment,m),C(w2.$$.fragment,m),C(nL.$$.fragment,m),C(sL.$$.fragment,m),C(iL.$$.fragment,m),C(y2.$$.fragment,m),C(dL.$$.fragment,m),C(Tv.$$.fragment,m),C(cL.$$.fragment,m),C(mL.$$.fragment,m),C(gL.$$.fragment,m),C(Ev.$$.fragment,m),C(hL.$$.fragment,m),C(eF.$$.fragment,m),C(uL.$$.fragment,m),C(pL.$$.fragment,m),C(bL.$$.fragment,m),C(rF.$$.fragment,m),C(vL.$$.fragment,m),C(dF.$$.fragment,m),C(FL.$$.fragment,m),C(TL.$$.fragment,m),C(EL.$$.fragment,m),C(mF.$$.fragment,m),C(CL.$$.fragment,m),C(WF.$$.fragment,m),C(wL.$$.fragment,m),C(AL.$$.fragment,m),C(LL.$$.fragment,m),C(HF.$$.fragment,m),C(xL.$$.fragment,m),C(B1.$$.fragment,m),C($L.$$.fragment,m),C(kL.$$.fragment,m),C(RL.$$.fragment,m),C(q1.$$.fragment,m),C(PL.$$.fragment,m),C(D1.$$.fragment,m),C(BL.$$.fragment,m),C(IL.$$.fragment,m),C(NL.$$.fragment,m),C(O1.$$.fragment,m),C(jL.$$.fragment,m),C(oT.$$.fragment,m),C(DL.$$.fragment,m),C(GL.$$.fragment,m),C(VL.$$.fragment,m),C(tT.$$.fragment,m),C(XL.$$.fragment,m),C(sT.$$.fragment,m),C(zL.$$.fragment,m),C(WL.$$.fragment,m),C(HL.$$.fragment,m),C(iT.$$.fragment,m),C(UL.$$.fragment,m),C(vT.$$.fragment,m),C(JL.$$.fragment,m),C(YL.$$.fragment,m),C(ZL.$$.fragment,m),C(TT.$$.fragment,m),C(e8.$$.fragment,m),C(LT.$$.fragment,m),C(o8.$$.fragment,m),C(r8.$$.fragment,m),C(a8.$$.fragment,m),C($T.$$.fragment,m),C(n8.$$.fragment,m),C(GT.$$.fragment,m),C(s8.$$.fragment,m),C(l8.$$.fragment,m),C(d8.$$.fragment,m),C(VT.$$.fragment,m),C(c8.$$.fragment,m),C(QT.$$.fragment,m),C(f8.$$.fragment,m),C(g8.$$.fragment,m),C(u8.$$.fragment,m),C(UT.$$.fragment,m),C(p8.$$.fragment,m),C(rM.$$.fragment,m),C(_8.$$.fragment,m),C(b8.$$.fragment,m),C(F8.$$.fragment,m),C(aM.$$.fragment,m),C(T8.$$.fragment,m),C(dM.$$.fragment,m),C(M8.$$.fragment,m),C(E8.$$.fragment,m),C(w8.$$.fragment,m),C(mM.$$.fragment,m),C(A8.$$.fragment,m),C(uM.$$.fragment,m),C(L8.$$.fragment,m),C(x8.$$.fragment,m),C(k8.$$.fragment,m),C(_M.$$.fragment,m),C(S8.$$.fragment,m),C(FM.$$.fragment,m),C(R8.$$.fragment,m),C(P8.$$.fragment,m),C(I8.$$.fragment,m),C(MM.$$.fragment,m),C(q8.$$.fragment,m),C(LM.$$.fragment,m),C(N8.$$.fragment,m),C(j8.$$.fragment,m),C(G8.$$.fragment,m),C($M.$$.fragment,m),C(O8.$$.fragment,m),C(RM.$$.fragment,m),C(V8.$$.fragment,m),C(X8.$$.fragment,m),C(W8.$$.fragment,m),C(BM.$$.fragment,m),C(Q8.$$.fragment,m),C(y4.$$.fragment,m),C(H8.$$.fragment,m),C(U8.$$.fragment,m),C(Y8.$$.fragment,m),C(x4.$$.fragment,m),C(K8.$$.fragment,m),C(Z4.$$.fragment,m),C(Z8.$$.fragment,m),C(ex.$$.fragment,m),C(rx.$$.fragment,m),C(oE.$$.fragment,m),C(tx.$$.fragment,m),C(hE.$$.fragment,m),C(ax.$$.fragment,m),C(nx.$$.fragment,m),C(lx.$$.fragment,m),C(pE.$$.fragment,m),C(ix.$$.fragment,m),C(TE.$$.fragment,m),C(dx.$$.fragment,m),C(cx.$$.fragment,m),C(fx.$$.fragment,m),C(EE.$$.fragment,m),C(gx.$$.fragment,m),C(XE.$$.fragment,m),C(hx.$$.fragment,m),C(ux.$$.fragment,m),C(_x.$$.fragment,m),C(WE.$$.fragment,m),C(bx.$$.fragment,m),C(tC.$$.fragment,m),C(vx.$$.fragment,m),C(Fx.$$.fragment,m),C(Mx.$$.fragment,m),C(nC.$$.fragment,m),C(Ex.$$.fragment,m),C(SC.$$.fragment,m),C(Cx.$$.fragment,m),C(wx.$$.fragment,m),C(yx.$$.fragment,m),C(PC.$$.fragment,m),C(Lx.$$.fragment,m),C(KC.$$.fragment,m),C(xx.$$.fragment,m),C($x.$$.fragment,m),C(Sx.$$.fragment,m),C(e5.$$.fragment,m),C(Rx.$$.fragment,m),C(t5.$$.fragment,m),C(Bx.$$.fragment,m),C(Ix.$$.fragment,m),C(Nx.$$.fragment,m),C(n5.$$.fragment,m),C(jx.$$.fragment,m),C(l5.$$.fragment,m),C(Dx.$$.fragment,m),C(Gx.$$.fragment,m),C(Vx.$$.fragment,m),C(d5.$$.fragment,m),C(Xx.$$.fragment,m),C($5.$$.fragment,m),C(zx.$$.fragment,m),C(Wx.$$.fragment,m),C(Hx.$$.fragment,m),C(S5.$$.fragment,m),C(Ux.$$.fragment,m),C(Z5.$$.fragment,m),C(Jx.$$.fragment,m),C(Yx.$$.fragment,m),C(Zx.$$.fragment,m),C(o3.$$.fragment,m),C(e7.$$.fragment,m),C(t3.$$.fragment,m),C(o7.$$.fragment,m),C(r7.$$.fragment,m),C(a7.$$.fragment,m),C(n3.$$.fragment,m),C(n7.$$.fragment,m),C(l3.$$.fragment,m),C(s7.$$.fragment,m),C(l7.$$.fragment,m),C(d7.$$.fragment,m),C(d3.$$.fragment,m),C(c7.$$.fragment,m),C(B3.$$.fragment,m),C(m7.$$.fragment,m),C(f7.$$.fragment,m),C(h7.$$.fragment,m),C(q3.$$.fragment,m),C(u7.$$.fragment,m),C(Q3.$$.fragment,m),C(p7.$$.fragment,m),C(_7.$$.fragment,m),C(v7.$$.fragment,m),C(U3.$$.fragment,m),C(F7.$$.fragment,m),C(iw.$$.fragment,m),C(T7.$$.fragment,m),C(M7.$$.fragment,m),C(C7.$$.fragment,m),C(cw.$$.fragment,m),C(w7.$$.fragment,m),C(Tw.$$.fragment,m),C(A7.$$.fragment,m),C(y7.$$.fragment,m),C(x7.$$.fragment,m),C(Ew.$$.fragment,m),C($7.$$.fragment,m),C(Rw.$$.fragment,m),C(k7.$$.fragment,m),C(S7.$$.fragment,m),C(P7.$$.fragment,m),C(Bw.$$.fragment,m),C(B7.$$.fragment,m),C(Ww.$$.fragment,m),C(I7.$$.fragment,m),C(q7.$$.fragment,m),C(j7.$$.fragment,m),C(Hw.$$.fragment,m),C(D7.$$.fragment,m),C(nA.$$.fragment,m),C(G7.$$.fragment,m),C(O7.$$.fragment,m),C(X7.$$.fragment,m),C(lA.$$.fragment,m),C(z7.$$.fragment,m),C(pA.$$.fragment,m),C(W7.$$.fragment,m),C(Q7.$$.fragment,m),C(U7.$$.fragment,m),C(bA.$$.fragment,m),C(J7.$$.fragment,m),C(yA.$$.fragment,m),C(Y7.$$.fragment,m),C(K7.$$.fragment,m),C(e9.$$.fragment,m),C(xA.$$.fragment,m),C(o9.$$.fragment,m),C(kA.$$.fragment,m),C(r9.$$.fragment,m),C(t9.$$.fragment,m),C(n9.$$.fragment,m),C(RA.$$.fragment,m),C(s9.$$.fragment,m),C(IA.$$.fragment,m),C(i9.$$.fragment,m),C(d9.$$.fragment,m),C(m9.$$.fragment,m),C(NA.$$.fragment,m),C(f9.$$.fragment,m),C(DA.$$.fragment,m),SNe=!1},d(m){t(g),m&&t(v),m&&t(u),w(d),m&&t(gm),m&&t(rt),m&&t(je),m&&t(We),m&&t(um),w(Ca,m),m&&t(Qe),m&&t(Ae),m&&t(Eo),m&&t(wa),m&&t(xIe),m&&t(_i),w(iy),m&&t($Ie),m&&t(kn),m&&t(kIe),w(dy,m),m&&t(SIe),m&&t($$),m&&t(RIe),w(bm,m),m&&t(PIe),m&&t(bi),w(cy),m&&t(BIe),m&&t(Co),w(my),w(hy),w(bg),w(uy),m&&t(IIe),m&&t(Fi),w(py),m&&t(qIe),m&&t(wo),w(_y),w(Fy),w(Kg),w(Ty),m&&t(NIe),m&&t(Ti),w(My),m&&t(jIe),m&&t(Ao),w(Ey),w(Ay),w(yh),w(Lh),w(yy),m&&t(DIe),m&&t(Mi),w(Ly),m&&t(GIe),m&&t(yo),w(xy),w(Sy),w(Qh),w(Hh),w(Ry),m&&t(OIe),m&&t(Ci),w(Py),m&&t(VIe),m&&t(Lo),w(By),w(qy),w(Yh),w(Ny),w(Op),m&&t(XIe),m&&t(yi),w(jy),m&&t(zIe),m&&t(xo),w(Dy),w(Oy),w(Xp),w(Vy),w(P_),m&&t(WIe),m&&t($i),w(Xy),m&&t(QIe),m&&t($o),w(zy),w(Qy),w(I_),w(Hy),w(Fb),m&&t(HIe),m&&t(Ri),w(Uy),m&&t(UIe),m&&t(ko),w(Jy),w(Ky),w(Mb),w(Zy),w(n2),m&&t(JIe),m&&t(Ii),w(eL),m&&t(YIe),m&&t(So),w(oL),w(tL),w(l2),w(aL),w(w2),m&&t(KIe),m&&t(ji),w(nL),m&&t(ZIe),m&&t(Ro),w(sL),w(iL),w(y2),w(dL),w(Tv),m&&t(eqe),m&&t(Oi),w(cL),m&&t(oqe),m&&t(Po),w(mL),w(gL),w(Ev),w(hL),w(eF),m&&t(rqe),m&&t(zi),w(uL),m&&t(tqe),m&&t(Bo),w(pL),w(bL),w(rF),w(vL),w(dF),m&&t(aqe),m&&t(Hi),w(FL),m&&t(nqe),m&&t(Io),w(TL),w(EL),w(mF),w(CL),w(WF),m&&t(sqe),m&&t(Yi),w(wL),m&&t(lqe),m&&t(qo),w(AL),w(LL),w(HF),w(xL),w(B1),m&&t(iqe),m&&t(ed),w($L),m&&t(dqe),m&&t(No),w(kL),w(RL),w(q1),w(PL),w(D1),m&&t(cqe),m&&t(td),w(BL),m&&t(mqe),m&&t(jo),w(IL),w(NL),w(O1),w(jL),w(oT),m&&t(fqe),m&&t(sd),w(DL),m&&t(gqe),m&&t(Do),w(GL),w(VL),w(tT),w(XL),w(sT),m&&t(hqe),m&&t(dd),w(zL),m&&t(uqe),m&&t(Go),w(WL),w(HL),w(iT),w(UL),w(vT),m&&t(pqe),m&&t(fd),w(JL),m&&t(_qe),m&&t(Oo),w(YL),w(ZL),w(TT),w(e8),w(LT),m&&t(bqe),m&&t(ud),w(o8),m&&t(vqe),m&&t(Vo),w(r8),w(a8),w($T),w(n8),w(GT),m&&t(Fqe),m&&t(bd),w(s8),m&&t(Tqe),m&&t(Xo),w(l8),w(d8),w(VT),w(c8),w(QT),m&&t(Mqe),m&&t(Td),w(f8),m&&t(Eqe),m&&t(zo),w(g8),w(u8),w(UT),w(p8),w(rM),m&&t(Cqe),m&&t(Cd),w(_8),m&&t(wqe),m&&t(Wo),w(b8),w(F8),w(aM),w(T8),w(dM),m&&t(Aqe),m&&t(Ld),w(M8),m&&t(yqe),m&&t(Qo),w(E8),w(w8),w(mM),w(A8),w(uM),m&&t(Lqe),m&&t(kd),w(L8),m&&t(xqe),m&&t(Ho),w(x8),w(k8),w(_M),w(S8),w(FM),m&&t($qe),m&&t(Pd),w(R8),m&&t(kqe),m&&t(Uo),w(P8),w(I8),w(MM),w(q8),w(LM),m&&t(Sqe),m&&t(qd),w(N8),m&&t(Rqe),m&&t(Jo),w(j8),w(G8),w($M),w(O8),w(RM),m&&t(Pqe),m&&t(Dd),w(V8),m&&t(Bqe),m&&t(Yo),w(X8),w(W8),w(BM),w(Q8),w(y4),m&&t(Iqe),m&&t(Vd),w(H8),m&&t(qqe),m&&t(Ko),w(U8),w(Y8),w(x4),w(K8),w(Z4),m&&t(Nqe),m&&t(Wd),w(Z8),m&&t(jqe),m&&t(Zo),w(ex),w(rx),w(oE),w(tx),w(hE),m&&t(Dqe),m&&t(Ud),w(ax),m&&t(Gqe),m&&t(er),w(nx),w(lx),w(pE),w(ix),w(TE),m&&t(Oqe),m&&t(Kd),w(dx),m&&t(Vqe),m&&t(or),w(cx),w(fx),w(EE),w(gx),w(XE),m&&t(Xqe),m&&t(oc),w(hx),m&&t(zqe),m&&t(rr),w(ux),w(_x),w(WE),w(bx),w(tC),m&&t(Wqe),m&&t(ac),w(vx),m&&t(Qqe),m&&t(tr),w(Fx),w(Mx),w(nC),w(Ex),w(SC),m&&t(Hqe),m&&t(lc),w(Cx),m&&t(Uqe),m&&t(ar),w(wx),w(yx),w(PC),w(Lx),w(KC),m&&t(Jqe),m&&t(cc),w(xx),m&&t(Yqe),m&&t(nr),w($x),w(Sx),w(e5),w(Rx),w(t5),m&&t(Kqe),m&&t(gc),w(Bx),m&&t(Zqe),m&&t(sr),w(Ix),w(Nx),w(n5),w(jx),w(l5),m&&t(eNe),m&&t(pc),w(Dx),m&&t(oNe),m&&t(lr),w(Gx),w(Vx),w(d5),w(Xx),w($5),m&&t(rNe),m&&t(vc),w(zx),m&&t(tNe),m&&t(ir),w(Wx),w(Hx),w(S5),w(Ux),w(Z5),m&&t(aNe),m&&t(Mc),w(Jx),m&&t(nNe),m&&t(dr),w(Yx),w(Zx),w(o3),w(e7),w(t3),m&&t(sNe),m&&t(wc),w(o7),m&&t(lNe),m&&t(cr),w(r7),w(a7),w(n3),w(n7),w(l3),m&&t(iNe),m&&t(Lc),w(s7),m&&t(dNe),m&&t(mr),w(l7),w(d7),w(d3),w(c7),w(B3),m&&t(cNe),m&&t(kc),w(m7),m&&t(mNe),m&&t(fr),w(f7),w(h7),w(q3),w(u7),w(Q3),m&&t(fNe),m&&t(Pc),w(p7),m&&t(gNe),m&&t(gr),w(_7),w(v7),w(U3),w(F7),w(iw),m&&t(hNe),m&&t(qc),w(T7),m&&t(uNe),m&&t(hr),w(M7),w(C7),w(cw),w(w7),w(Tw),m&&t(pNe),m&&t(Dc),w(A7),m&&t(_Ne),m&&t(ur),w(y7),w(x7),w(Ew),w($7),w(Rw),m&&t(bNe),m&&t(Vc),w(k7),m&&t(vNe),m&&t(pr),w(S7),w(P7),w(Bw),w(B7),w(Ww),m&&t(FNe),m&&t(Wc),w(I7),m&&t(TNe),m&&t(_r),w(q7),w(j7),w(Hw),w(D7),w(nA),m&&t(MNe),m&&t(Uc),w(G7),m&&t(ENe),m&&t(br),w(O7),w(X7),w(lA),w(z7),w(pA),m&&t(CNe),m&&t(Kc),w(W7),m&&t(wNe),m&&t(vr),w(Q7),w(U7),w(bA),w(J7),w(yA),m&&t(ANe),m&&t(om),w(Y7),m&&t(yNe),m&&t(Fr),w(K7),w(e9),w(xA),w(o9),w(kA),m&&t(LNe),m&&t(am),w(r9),m&&t(xNe),m&&t(Tr),w(t9),w(n9),w(RA),w(s9),w(IA),m&&t($Ne),m&&t(lm),w(i9),m&&t(kNe),m&&t(Mr),w(d9),w(m9),w(NA),w(f9),w(DA)}}}const f7t={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function g7t(L){return g8t(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class F7t extends d8t{constructor(g){super();c8t(this,g,g7t,m7t,m8t,{})}}export{F7t as default,f7t as metadata};
