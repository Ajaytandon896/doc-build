import{S as F6t,i as T6t,s as M6t,e as a,k as l,w as m,t as o,M as E6t,c as n,d as t,m as i,a as s,x as f,h as r,b as d,F as e,g as b,y as g,q as h,o as u,B as p,v as C6t}from"../../chunks/vendor-6b77c823.js";import{T as $Pr}from"../../chunks/Tip-39098574.js";import{D as C}from"../../chunks/Docstring-17b815d9.js";import{C as A}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as X}from"../../chunks/IconCopyLink-7a11ce68.js";function w6t($m){let Z,io,ce,Ce,lo,he,Me,Xo,qi,Im,ma,Ni,ji,Lw,qm,xe,co,Di,On,xw,Vn,Xn,kw,Gi,zn,Sw,Oi,Nm,Da;return{c(){Z=a("p"),io=o("If your "),ce=a("code"),Ce=o("NewModelConfig"),lo=o(" is a subclass of "),he=a("code"),Me=o("PretrainedConfig"),Xo=o(`, make sure its
`),qi=a("code"),Im=o("model_type"),ma=o(" attribute is set to the same key you use when registering the config (here "),Ni=a("code"),ji=o('"new-model"'),Lw=o(")."),qm=l(),xe=a("p"),co=o("Likewise, if your "),Di=a("code"),On=o("NewModel"),xw=o(" is a subclass of "),Vn=a("a"),Xn=o("PreTrainedModel"),kw=o(`, make sure its
`),Gi=a("code"),zn=o("config_class"),Sw=o(` attribute is set to the same class you use when registering the model (here
`),Oi=a("code"),Nm=o("NewModelConfig"),Da=o(")."),this.h()},l(mo){Z=n(mo,"P",{});var _e=s(Z);io=r(_e,"If your "),ce=n(_e,"CODE",{});var F9=s(ce);Ce=r(F9,"NewModelConfig"),F9.forEach(t),lo=r(_e," is a subclass of "),he=n(_e,"CODE",{});var Vi=s(he);Me=r(Vi,"PretrainedConfig"),Vi.forEach(t),Xo=r(_e,`, make sure its
`),qi=n(_e,"CODE",{});var T9=s(qi);Im=r(T9,"model_type"),T9.forEach(t),ma=r(_e," attribute is set to the same key you use when registering the config (here "),Ni=n(_e,"CODE",{});var M9=s(Ni);ji=r(M9,'"new-model"'),M9.forEach(t),Lw=r(_e,")."),_e.forEach(t),qm=i(mo),xe=n(mo,"P",{});var zo=s(xe);co=r(zo,"Likewise, if your "),Di=n(zo,"CODE",{});var Ga=s(Di);On=r(Ga,"NewModel"),Ga.forEach(t),xw=r(zo," is a subclass of "),Vn=n(zo,"A",{href:!0});var E9=s(Vn);Xn=r(E9,"PreTrainedModel"),E9.forEach(t),kw=r(zo,`, make sure its
`),Gi=n(zo,"CODE",{});var jm=s(Gi);zn=r(jm,"config_class"),jm.forEach(t),Sw=r(zo,` attribute is set to the same class you use when registering the model (here
`),Oi=n(zo,"CODE",{});var C9=s(Oi);Nm=r(C9,"NewModelConfig"),C9.forEach(t),Da=r(zo,")."),zo.forEach(t),this.h()},h(){d(Vn,"href","/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel")},m(mo,_e){b(mo,Z,_e),e(Z,io),e(Z,ce),e(ce,Ce),e(Z,lo),e(Z,he),e(he,Me),e(Z,Xo),e(Z,qi),e(qi,Im),e(Z,ma),e(Z,Ni),e(Ni,ji),e(Z,Lw),b(mo,qm,_e),b(mo,xe,_e),e(xe,co),e(xe,Di),e(Di,On),e(xe,xw),e(xe,Vn),e(Vn,Xn),e(xe,kw),e(xe,Gi),e(Gi,zn),e(xe,Sw),e(xe,Oi),e(Oi,Nm),e(xe,Da)},d(mo){mo&&t(Z),mo&&t(qm),mo&&t(xe)}}}function A6t($m){let Z,io,ce,Ce,lo;return{c(){Z=a("p"),io=o("Passing "),ce=a("code"),Ce=o("use_auth_token=True"),lo=o(" is required when you want to use a private model.")},l(he){Z=n(he,"P",{});var Me=s(Z);io=r(Me,"Passing "),ce=n(Me,"CODE",{});var Xo=s(ce);Ce=r(Xo,"use_auth_token=True"),Xo.forEach(t),lo=r(Me," is required when you want to use a private model."),Me.forEach(t)},m(he,Me){b(he,Z,Me),e(Z,io),e(Z,ce),e(ce,Ce),e(Z,lo)},d(he){he&&t(Z)}}}function y6t($m){let Z,io,ce,Ce,lo;return{c(){Z=a("p"),io=o("Passing "),ce=a("code"),Ce=o("use_auth_token=True"),lo=o(" is required when you want to use a private model.")},l(he){Z=n(he,"P",{});var Me=s(Z);io=r(Me,"Passing "),ce=n(Me,"CODE",{});var Xo=s(ce);Ce=r(Xo,"use_auth_token=True"),Xo.forEach(t),lo=r(Me," is required when you want to use a private model."),Me.forEach(t)},m(he,Me){b(he,Z,Me),e(Z,io),e(Z,ce),e(ce,Ce),e(Z,lo)},d(he){he&&t(Z)}}}function L6t($m){let Z,io,ce,Ce,lo,he,Me,Xo,qi,Im,ma,Ni,ji,Lw,qm,xe,co,Di,On,xw,Vn,Xn,kw,Gi,zn,Sw,Oi,Nm,Da,mo,_e,F9,Vi,T9,M9,zo,Ga,E9,jm,C9,XIe,SRe,Xi,Dm,dY,Rw,zIe,cY,QIe,RRe,Qn,WIe,mY,HIe,UIe,fY,JIe,YIe,BRe,Bw,PRe,w9,KIe,$Re,Gm,IRe,zi,Om,gY,Pw,ZIe,hY,eqe,qRe,Qo,$w,oqe,Iw,rqe,A9,tqe,aqe,nqe,qw,sqe,uY,lqe,iqe,dqe,fo,Nw,cqe,pY,mqe,fqe,Qi,gqe,_Y,hqe,uqe,bY,pqe,_qe,bqe,v,Vm,vY,vqe,Fqe,y9,Tqe,Mqe,Eqe,Xm,FY,Cqe,wqe,L9,Aqe,yqe,Lqe,zm,TY,xqe,kqe,x9,Sqe,Rqe,Bqe,Qm,MY,Pqe,$qe,k9,Iqe,qqe,Nqe,Wm,EY,jqe,Dqe,S9,Gqe,Oqe,Vqe,Hm,CY,Xqe,zqe,R9,Qqe,Wqe,Hqe,Um,wY,Uqe,Jqe,B9,Yqe,Kqe,Zqe,Jm,AY,eNe,oNe,P9,rNe,tNe,aNe,Ym,yY,nNe,sNe,$9,lNe,iNe,dNe,Km,LY,cNe,mNe,I9,fNe,gNe,hNe,Zm,xY,uNe,pNe,q9,_Ne,bNe,vNe,ef,kY,FNe,TNe,N9,MNe,ENe,CNe,of,SY,wNe,ANe,j9,yNe,LNe,xNe,rf,RY,kNe,SNe,D9,RNe,BNe,PNe,tf,BY,$Ne,INe,G9,qNe,NNe,jNe,af,PY,DNe,GNe,O9,ONe,VNe,XNe,nf,$Y,zNe,QNe,V9,WNe,HNe,UNe,sf,IY,JNe,YNe,X9,KNe,ZNe,eje,lf,qY,oje,rje,z9,tje,aje,nje,df,NY,sje,lje,Q9,ije,dje,cje,cf,jY,mje,fje,W9,gje,hje,uje,mf,DY,pje,_je,H9,bje,vje,Fje,ff,GY,Tje,Mje,U9,Eje,Cje,wje,gf,OY,Aje,yje,J9,Lje,xje,kje,hf,VY,Sje,Rje,Y9,Bje,Pje,$je,uf,XY,Ije,qje,K9,Nje,jje,Dje,pf,zY,Gje,Oje,Z9,Vje,Xje,zje,_f,QY,Qje,Wje,ex,Hje,Uje,Jje,bf,WY,Yje,Kje,ox,Zje,eDe,oDe,vf,HY,rDe,tDe,rx,aDe,nDe,sDe,Ff,UY,lDe,iDe,tx,dDe,cDe,mDe,Tf,JY,fDe,gDe,ax,hDe,uDe,pDe,Mf,YY,_De,bDe,nx,vDe,FDe,TDe,Ef,KY,MDe,EDe,sx,CDe,wDe,ADe,Cf,ZY,yDe,LDe,lx,xDe,kDe,SDe,wf,eK,RDe,BDe,ix,PDe,$De,IDe,Af,oK,qDe,NDe,dx,jDe,DDe,GDe,yf,rK,ODe,VDe,cx,XDe,zDe,QDe,Lf,tK,WDe,HDe,mx,UDe,JDe,YDe,xf,aK,KDe,ZDe,fx,eGe,oGe,rGe,kf,nK,tGe,aGe,gx,nGe,sGe,lGe,Sf,sK,iGe,dGe,hx,cGe,mGe,fGe,Rf,lK,gGe,hGe,ux,uGe,pGe,_Ge,Bf,iK,bGe,vGe,px,FGe,TGe,MGe,Pf,dK,EGe,CGe,_x,wGe,AGe,yGe,$f,cK,LGe,xGe,bx,kGe,SGe,RGe,If,mK,BGe,PGe,vx,$Ge,IGe,qGe,qf,fK,NGe,jGe,Fx,DGe,GGe,OGe,Nf,gK,VGe,XGe,Tx,zGe,QGe,WGe,jf,hK,HGe,UGe,Mx,JGe,YGe,KGe,Df,uK,ZGe,eOe,Ex,oOe,rOe,tOe,Gf,pK,aOe,nOe,Cx,sOe,lOe,iOe,Of,_K,dOe,cOe,wx,mOe,fOe,gOe,Vf,bK,hOe,uOe,Ax,pOe,_Oe,bOe,Xf,vK,vOe,FOe,yx,TOe,MOe,EOe,zf,FK,COe,wOe,Lx,AOe,yOe,LOe,Qf,TK,xOe,kOe,xx,SOe,ROe,BOe,Wf,MK,POe,$Oe,kx,IOe,qOe,NOe,Hf,EK,jOe,DOe,Sx,GOe,OOe,VOe,Uf,CK,XOe,zOe,Rx,QOe,WOe,HOe,Jf,wK,UOe,JOe,Bx,YOe,KOe,ZOe,Yf,AK,eVe,oVe,Px,rVe,tVe,aVe,Kf,yK,nVe,sVe,$x,lVe,iVe,dVe,Zf,LK,cVe,mVe,Ix,fVe,gVe,hVe,eg,xK,uVe,pVe,qx,_Ve,bVe,vVe,og,kK,FVe,TVe,Nx,MVe,EVe,CVe,rg,SK,wVe,AVe,jx,yVe,LVe,xVe,tg,RK,kVe,SVe,Dx,RVe,BVe,PVe,ag,BK,$Ve,IVe,Gx,qVe,NVe,jVe,ng,PK,DVe,GVe,Ox,OVe,VVe,XVe,sg,$K,zVe,QVe,Vx,WVe,HVe,UVe,lg,IK,JVe,YVe,Xx,KVe,ZVe,eXe,ig,qK,oXe,rXe,zx,tXe,aXe,nXe,dg,NK,sXe,lXe,Qx,iXe,dXe,cXe,cg,jK,mXe,fXe,Wx,gXe,hXe,uXe,mg,DK,pXe,_Xe,Hx,bXe,vXe,FXe,fg,GK,TXe,MXe,Ux,EXe,CXe,wXe,gg,OK,AXe,yXe,Jx,LXe,xXe,kXe,hg,VK,SXe,RXe,Yx,BXe,PXe,$Xe,ug,XK,IXe,qXe,Kx,NXe,jXe,DXe,pg,zK,GXe,OXe,Zx,VXe,XXe,zXe,_g,QK,QXe,WXe,ek,HXe,UXe,JXe,bg,WK,YXe,KXe,ok,ZXe,eze,oze,vg,HK,rze,tze,rk,aze,nze,sze,Fg,UK,lze,ize,tk,dze,cze,mze,Tg,JK,fze,gze,ak,hze,uze,pze,Mg,YK,_ze,bze,nk,vze,Fze,Tze,Eg,KK,Mze,Eze,sk,Cze,wze,Aze,Cg,ZK,yze,Lze,lk,xze,kze,Sze,wg,eZ,Rze,Bze,ik,Pze,$ze,Ize,Ag,oZ,qze,Nze,dk,jze,Dze,Gze,yg,rZ,Oze,Vze,ck,Xze,zze,Qze,Lg,tZ,Wze,Hze,mk,Uze,Jze,Yze,xg,aZ,Kze,Zze,fk,eQe,oQe,rQe,kg,nZ,tQe,aQe,gk,nQe,sQe,lQe,Sg,sZ,iQe,dQe,hk,cQe,mQe,fQe,Rg,lZ,gQe,hQe,uk,uQe,pQe,_Qe,Bg,iZ,bQe,vQe,pk,FQe,TQe,MQe,Pg,dZ,EQe,CQe,_k,wQe,AQe,yQe,$g,cZ,LQe,xQe,bk,kQe,SQe,RQe,Ig,mZ,BQe,PQe,vk,$Qe,IQe,qQe,qg,fZ,NQe,jQe,Fk,DQe,GQe,OQe,gZ,VQe,XQe,jw,zQe,Ng,Dw,QQe,hZ,WQe,NRe,Wi,jg,uZ,Gw,HQe,pZ,UQe,jRe,Wo,Ow,JQe,Vw,YQe,Tk,KQe,ZQe,eWe,Xw,oWe,_Z,rWe,tWe,aWe,go,zw,nWe,bZ,sWe,lWe,Oa,iWe,vZ,dWe,cWe,FZ,mWe,fWe,TZ,gWe,hWe,uWe,E,Wn,MZ,pWe,_We,Mk,bWe,vWe,Ek,FWe,TWe,MWe,Hn,EZ,EWe,CWe,Ck,wWe,AWe,wk,yWe,LWe,xWe,Un,CZ,kWe,SWe,Ak,RWe,BWe,yk,PWe,$We,IWe,Dg,wZ,qWe,NWe,Lk,jWe,DWe,GWe,Jn,AZ,OWe,VWe,xk,XWe,zWe,kk,QWe,WWe,HWe,Gg,yZ,UWe,JWe,Sk,YWe,KWe,ZWe,Og,LZ,eHe,oHe,Rk,rHe,tHe,aHe,Vg,xZ,nHe,sHe,Bk,lHe,iHe,dHe,Yn,kZ,cHe,mHe,Pk,fHe,gHe,$k,hHe,uHe,pHe,Kn,SZ,_He,bHe,Ik,vHe,FHe,qk,THe,MHe,EHe,Zn,RZ,CHe,wHe,Nk,AHe,yHe,jk,LHe,xHe,kHe,Xg,BZ,SHe,RHe,Dk,BHe,PHe,$He,zg,PZ,IHe,qHe,Gk,NHe,jHe,DHe,es,$Z,GHe,OHe,Ok,VHe,XHe,Vk,zHe,QHe,WHe,Qg,IZ,HHe,UHe,Xk,JHe,YHe,KHe,os,qZ,ZHe,eUe,zk,oUe,rUe,Qk,tUe,aUe,nUe,rs,NZ,sUe,lUe,Wk,iUe,dUe,Hk,cUe,mUe,fUe,ts,jZ,gUe,hUe,Uk,uUe,pUe,DZ,_Ue,bUe,vUe,Wg,GZ,FUe,TUe,Jk,MUe,EUe,CUe,as,OZ,wUe,AUe,Yk,yUe,LUe,Kk,xUe,kUe,SUe,Hg,VZ,RUe,BUe,Zk,PUe,$Ue,IUe,ns,XZ,qUe,NUe,eS,jUe,DUe,oS,GUe,OUe,VUe,ss,zZ,XUe,zUe,rS,QUe,WUe,tS,HUe,UUe,JUe,ls,QZ,YUe,KUe,aS,ZUe,eJe,nS,oJe,rJe,tJe,Ug,WZ,aJe,nJe,sS,sJe,lJe,iJe,is,HZ,dJe,cJe,lS,mJe,fJe,iS,gJe,hJe,uJe,Jg,UZ,pJe,_Je,dS,bJe,vJe,FJe,ds,JZ,TJe,MJe,cS,EJe,CJe,mS,wJe,AJe,yJe,cs,YZ,LJe,xJe,fS,kJe,SJe,gS,RJe,BJe,PJe,ms,KZ,$Je,IJe,hS,qJe,NJe,uS,jJe,DJe,GJe,fs,ZZ,OJe,VJe,pS,XJe,zJe,_S,QJe,WJe,HJe,Yg,eee,UJe,JJe,bS,YJe,KJe,ZJe,gs,oee,eYe,oYe,vS,rYe,tYe,FS,aYe,nYe,sYe,hs,ree,lYe,iYe,TS,dYe,cYe,MS,mYe,fYe,gYe,us,tee,hYe,uYe,ES,pYe,_Ye,CS,bYe,vYe,FYe,ps,aee,TYe,MYe,wS,EYe,CYe,AS,wYe,AYe,yYe,_s,nee,LYe,xYe,yS,kYe,SYe,LS,RYe,BYe,PYe,bs,see,$Ye,IYe,xS,qYe,NYe,kS,jYe,DYe,GYe,Kg,lee,OYe,VYe,SS,XYe,zYe,QYe,vs,iee,WYe,HYe,RS,UYe,JYe,BS,YYe,KYe,ZYe,Zg,dee,eKe,oKe,PS,rKe,tKe,aKe,eh,cee,nKe,sKe,$S,lKe,iKe,dKe,Fs,mee,cKe,mKe,IS,fKe,gKe,qS,hKe,uKe,pKe,Ts,fee,_Ke,bKe,NS,vKe,FKe,jS,TKe,MKe,EKe,oh,gee,CKe,wKe,DS,AKe,yKe,LKe,Ms,hee,xKe,kKe,GS,SKe,RKe,OS,BKe,PKe,$Ke,Es,uee,IKe,qKe,VS,NKe,jKe,XS,DKe,GKe,OKe,Cs,pee,VKe,XKe,zS,zKe,QKe,QS,WKe,HKe,UKe,ws,_ee,JKe,YKe,WS,KKe,ZKe,HS,eZe,oZe,rZe,As,bee,tZe,aZe,US,nZe,sZe,JS,lZe,iZe,dZe,rh,vee,cZe,mZe,YS,fZe,gZe,hZe,th,Fee,uZe,pZe,KS,_Ze,bZe,vZe,ah,Tee,FZe,TZe,ZS,MZe,EZe,CZe,nh,Mee,wZe,AZe,eR,yZe,LZe,xZe,ys,Eee,kZe,SZe,oR,RZe,BZe,rR,PZe,$Ze,IZe,sh,Cee,qZe,NZe,tR,jZe,DZe,GZe,Ls,wee,OZe,VZe,aR,XZe,zZe,nR,QZe,WZe,HZe,xs,Aee,UZe,JZe,sR,YZe,KZe,lR,ZZe,eeo,oeo,ks,yee,reo,teo,iR,aeo,neo,dR,seo,leo,ieo,Ss,Lee,deo,ceo,cR,meo,feo,mR,geo,heo,ueo,Rs,xee,peo,_eo,fR,beo,veo,gR,Feo,Teo,Meo,Bs,kee,Eeo,Ceo,hR,weo,Aeo,uR,yeo,Leo,xeo,lh,See,keo,Seo,pR,Reo,Beo,Peo,ih,Ree,$eo,Ieo,_R,qeo,Neo,jeo,Ps,Bee,Deo,Geo,bR,Oeo,Veo,vR,Xeo,zeo,Qeo,$s,Pee,Weo,Heo,FR,Ueo,Jeo,TR,Yeo,Keo,Zeo,Is,$ee,eoo,ooo,MR,roo,too,ER,aoo,noo,soo,dh,Iee,loo,ioo,CR,doo,coo,moo,ch,qee,foo,goo,wR,hoo,uoo,poo,mh,Nee,_oo,boo,AR,voo,Foo,Too,fh,jee,Moo,Eoo,yR,Coo,woo,Aoo,gh,Dee,yoo,Loo,LR,xoo,koo,Soo,qs,Gee,Roo,Boo,xR,Poo,$oo,kR,Ioo,qoo,Noo,hh,Oee,joo,Doo,SR,Goo,Ooo,Voo,uh,Vee,Xoo,zoo,RR,Qoo,Woo,Hoo,Ns,Xee,Uoo,Joo,BR,Yoo,Koo,PR,Zoo,ero,oro,js,zee,rro,tro,$R,aro,nro,IR,sro,lro,iro,Qee,dro,cro,Qw,mro,ph,Ww,fro,Wee,gro,DRe,Hi,_h,Hee,Hw,hro,Uee,uro,GRe,Ho,Uw,pro,Jw,_ro,qR,bro,vro,Fro,Yw,Tro,Jee,Mro,Ero,Cro,$e,Kw,wro,Yee,Aro,yro,Va,Lro,Kee,xro,kro,Zee,Sro,Rro,eoe,Bro,Pro,$ro,ee,bh,ooe,Iro,qro,NR,Nro,jro,Dro,vh,roe,Gro,Oro,jR,Vro,Xro,zro,Fh,toe,Qro,Wro,DR,Hro,Uro,Jro,Th,aoe,Yro,Kro,GR,Zro,eto,oto,Mh,noe,rto,tto,OR,ato,nto,sto,Eh,soe,lto,ito,VR,dto,cto,mto,Ch,loe,fto,gto,XR,hto,uto,pto,wh,ioe,_to,bto,zR,vto,Fto,Tto,Ah,doe,Mto,Eto,QR,Cto,wto,Ato,yh,coe,yto,Lto,WR,xto,kto,Sto,Lh,moe,Rto,Bto,HR,Pto,$to,Ito,xh,foe,qto,Nto,UR,jto,Dto,Gto,kh,goe,Oto,Vto,JR,Xto,zto,Qto,Sh,hoe,Wto,Hto,YR,Uto,Jto,Yto,Rh,uoe,Kto,Zto,KR,eao,oao,rao,Bh,poe,tao,aao,ZR,nao,sao,lao,Ph,_oe,iao,dao,eB,cao,mao,fao,$h,boe,gao,hao,oB,uao,pao,_ao,Ih,voe,bao,vao,rB,Fao,Tao,Mao,qh,Eao,Foe,Cao,wao,Zw,Aao,Nh,e6,yao,Toe,Lao,ORe,Ui,jh,Moe,o6,xao,Eoe,kao,VRe,Uo,r6,Sao,t6,Rao,tB,Bao,Pao,$ao,a6,Iao,Coe,qao,Nao,jao,Ie,n6,Dao,woe,Gao,Oao,Ji,Vao,Aoe,Xao,zao,yoe,Qao,Wao,Hao,ke,Dh,Loe,Uao,Jao,aB,Yao,Kao,Zao,Gh,xoe,eno,ono,nB,rno,tno,ano,Oh,koe,nno,sno,sB,lno,ino,dno,Vh,Soe,cno,mno,lB,fno,gno,hno,Xh,Roe,uno,pno,iB,_no,bno,vno,zh,Boe,Fno,Tno,dB,Mno,Eno,Cno,Qh,Poe,wno,Ano,cB,yno,Lno,xno,Wh,$oe,kno,Sno,mB,Rno,Bno,Pno,Hh,$no,Ioe,Ino,qno,s6,Nno,Uh,l6,jno,qoe,Dno,XRe,Yi,Jh,Noe,i6,Gno,joe,Ono,zRe,Jo,d6,Vno,Ki,Xno,fB,zno,Qno,gB,Wno,Hno,Uno,c6,Jno,Doe,Yno,Kno,Zno,Xr,m6,eso,Goe,oso,rso,Zi,tso,Ooe,aso,nso,hB,sso,lso,iso,Voe,dso,cso,f6,mso,qe,g6,fso,Xoe,gso,hso,Xa,uso,zoe,pso,_so,Qoe,bso,vso,Woe,Fso,Tso,Mso,T,Yh,Hoe,Eso,Cso,uB,wso,Aso,yso,Kh,Uoe,Lso,xso,pB,kso,Sso,Rso,Zh,Joe,Bso,Pso,_B,$so,Iso,qso,eu,Yoe,Nso,jso,bB,Dso,Gso,Oso,ou,Koe,Vso,Xso,vB,zso,Qso,Wso,ru,Zoe,Hso,Uso,FB,Jso,Yso,Kso,tu,ere,Zso,elo,TB,olo,rlo,tlo,au,ore,alo,nlo,MB,slo,llo,ilo,nu,rre,dlo,clo,EB,mlo,flo,glo,su,tre,hlo,ulo,CB,plo,_lo,blo,lu,are,vlo,Flo,wB,Tlo,Mlo,Elo,iu,nre,Clo,wlo,AB,Alo,ylo,Llo,du,sre,xlo,klo,yB,Slo,Rlo,Blo,cu,lre,Plo,$lo,LB,Ilo,qlo,Nlo,mu,ire,jlo,Dlo,xB,Glo,Olo,Vlo,fu,dre,Xlo,zlo,kB,Qlo,Wlo,Hlo,gu,cre,Ulo,Jlo,SB,Ylo,Klo,Zlo,hu,mre,eio,oio,RB,rio,tio,aio,uu,fre,nio,sio,BB,lio,iio,dio,pu,gre,cio,mio,PB,fio,gio,hio,_u,hre,uio,pio,$B,_io,bio,vio,bu,ure,Fio,Tio,IB,Mio,Eio,Cio,vu,pre,wio,Aio,qB,yio,Lio,xio,Fu,_re,kio,Sio,NB,Rio,Bio,Pio,Tu,bre,$io,Iio,jB,qio,Nio,jio,Mu,vre,Dio,Gio,DB,Oio,Vio,Xio,Eu,Fre,zio,Qio,GB,Wio,Hio,Uio,Cu,Tre,Jio,Yio,OB,Kio,Zio,edo,wu,Mre,odo,rdo,VB,tdo,ado,ndo,Au,Ere,sdo,ldo,XB,ido,ddo,cdo,Ds,Cre,mdo,fdo,zB,gdo,hdo,QB,udo,pdo,_do,yu,wre,bdo,vdo,WB,Fdo,Tdo,Mdo,Lu,Are,Edo,Cdo,HB,wdo,Ado,ydo,xu,yre,Ldo,xdo,UB,kdo,Sdo,Rdo,ku,Lre,Bdo,Pdo,JB,$do,Ido,qdo,Su,xre,Ndo,jdo,YB,Ddo,Gdo,Odo,Ru,kre,Vdo,Xdo,KB,zdo,Qdo,Wdo,Bu,Sre,Hdo,Udo,ZB,Jdo,Ydo,Kdo,Pu,Rre,Zdo,eco,eP,oco,rco,tco,$u,Bre,aco,nco,oP,sco,lco,ico,Iu,Pre,dco,cco,rP,mco,fco,gco,qu,$re,hco,uco,tP,pco,_co,bco,Nu,Ire,vco,Fco,aP,Tco,Mco,Eco,ju,qre,Cco,wco,nP,Aco,yco,Lco,Du,Nre,xco,kco,sP,Sco,Rco,Bco,Gu,jre,Pco,$co,lP,Ico,qco,Nco,Ou,Dre,jco,Dco,iP,Gco,Oco,Vco,Vu,Gre,Xco,zco,dP,Qco,Wco,Hco,Xu,Ore,Uco,Jco,cP,Yco,Kco,Zco,zu,Vre,emo,omo,mP,rmo,tmo,amo,Qu,Xre,nmo,smo,fP,lmo,imo,dmo,Wu,zre,cmo,mmo,gP,fmo,gmo,hmo,Hu,Qre,umo,pmo,hP,_mo,bmo,vmo,Uu,Wre,Fmo,Tmo,uP,Mmo,Emo,Cmo,Ju,Hre,wmo,Amo,pP,ymo,Lmo,xmo,Yu,Ure,kmo,Smo,_P,Rmo,Bmo,Pmo,Ku,Jre,$mo,Imo,bP,qmo,Nmo,jmo,Zu,Yre,Dmo,Gmo,vP,Omo,Vmo,Xmo,ep,Kre,zmo,Qmo,FP,Wmo,Hmo,Umo,op,Zre,Jmo,Ymo,TP,Kmo,Zmo,efo,rp,ete,ofo,rfo,MP,tfo,afo,nfo,tp,ote,sfo,lfo,EP,ifo,dfo,cfo,ap,rte,mfo,ffo,CP,gfo,hfo,ufo,np,tte,pfo,_fo,wP,bfo,vfo,Ffo,sp,ate,Tfo,Mfo,AP,Efo,Cfo,wfo,lp,nte,Afo,yfo,yP,Lfo,xfo,kfo,ip,ste,Sfo,Rfo,LP,Bfo,Pfo,$fo,dp,lte,Ifo,qfo,xP,Nfo,jfo,Dfo,cp,ite,Gfo,Ofo,kP,Vfo,Xfo,zfo,mp,dte,Qfo,Wfo,SP,Hfo,Ufo,Jfo,fp,cte,Yfo,Kfo,RP,Zfo,ego,ogo,gp,mte,rgo,tgo,BP,ago,ngo,sgo,hp,fte,lgo,igo,PP,dgo,cgo,mgo,up,gte,fgo,ggo,$P,hgo,ugo,pgo,pp,hte,_go,bgo,IP,vgo,Fgo,Tgo,_p,ute,Mgo,Ego,qP,Cgo,wgo,Ago,bp,pte,ygo,Lgo,NP,xgo,kgo,Sgo,vp,_te,Rgo,Bgo,jP,Pgo,$go,Igo,Fp,bte,qgo,Ngo,DP,jgo,Dgo,Ggo,Tp,vte,Ogo,Vgo,GP,Xgo,zgo,Qgo,Mp,Fte,Wgo,Hgo,OP,Ugo,Jgo,Ygo,Ep,Tte,Kgo,Zgo,VP,eho,oho,rho,Cp,Mte,tho,aho,XP,nho,sho,lho,wp,Ete,iho,dho,zP,cho,mho,fho,Ap,Cte,gho,hho,QP,uho,pho,_ho,yp,wte,bho,vho,WP,Fho,Tho,Mho,Lp,Ate,Eho,Cho,HP,who,Aho,yho,xp,yte,Lho,xho,UP,kho,Sho,Rho,kp,Lte,Bho,Pho,JP,$ho,Iho,qho,Sp,xte,Nho,jho,YP,Dho,Gho,Oho,Rp,kte,Vho,Xho,KP,zho,Qho,Who,Bp,Ste,Hho,Uho,ZP,Jho,Yho,Kho,Pp,Rte,Zho,euo,e$,ouo,ruo,tuo,$p,Bte,auo,nuo,o$,suo,luo,iuo,Ip,duo,Pte,cuo,muo,$te,fuo,guo,Ite,huo,uuo,h6,QRe,ed,qp,qte,u6,puo,Nte,_uo,WRe,Yo,p6,buo,od,vuo,r$,Fuo,Tuo,t$,Muo,Euo,Cuo,_6,wuo,jte,Auo,yuo,Luo,zr,b6,xuo,Dte,kuo,Suo,rd,Ruo,Gte,Buo,Puo,a$,$uo,Iuo,quo,Ote,Nuo,juo,v6,Duo,Ne,F6,Guo,Vte,Ouo,Vuo,za,Xuo,Xte,zuo,Quo,zte,Wuo,Huo,Qte,Uuo,Juo,Yuo,S,Np,Wte,Kuo,Zuo,n$,epo,opo,rpo,jp,Hte,tpo,apo,s$,npo,spo,lpo,Dp,Ute,ipo,dpo,l$,cpo,mpo,fpo,Gp,Jte,gpo,hpo,i$,upo,ppo,_po,Op,Yte,bpo,vpo,d$,Fpo,Tpo,Mpo,Vp,Kte,Epo,Cpo,c$,wpo,Apo,ypo,Xp,Zte,Lpo,xpo,m$,kpo,Spo,Rpo,zp,eae,Bpo,Ppo,f$,$po,Ipo,qpo,Qp,oae,Npo,jpo,g$,Dpo,Gpo,Opo,Wp,rae,Vpo,Xpo,h$,zpo,Qpo,Wpo,Hp,tae,Hpo,Upo,u$,Jpo,Ypo,Kpo,Up,aae,Zpo,e_o,p$,o_o,r_o,t_o,Jp,nae,a_o,n_o,_$,s_o,l_o,i_o,Yp,sae,d_o,c_o,b$,m_o,f_o,g_o,Kp,lae,h_o,u_o,v$,p_o,__o,b_o,Zp,iae,v_o,F_o,F$,T_o,M_o,E_o,e_,dae,C_o,w_o,T$,A_o,y_o,L_o,o_,cae,x_o,k_o,M$,S_o,R_o,B_o,r_,mae,P_o,$_o,E$,I_o,q_o,N_o,t_,fae,j_o,D_o,C$,G_o,O_o,V_o,a_,gae,X_o,z_o,w$,Q_o,W_o,H_o,n_,hae,U_o,J_o,A$,Y_o,K_o,Z_o,s_,uae,ebo,obo,y$,rbo,tbo,abo,l_,pae,nbo,sbo,L$,lbo,ibo,dbo,i_,_ae,cbo,mbo,x$,fbo,gbo,hbo,d_,bae,ubo,pbo,k$,_bo,bbo,vbo,c_,vae,Fbo,Tbo,S$,Mbo,Ebo,Cbo,m_,Fae,wbo,Abo,R$,ybo,Lbo,xbo,f_,Tae,kbo,Sbo,B$,Rbo,Bbo,Pbo,g_,Mae,$bo,Ibo,P$,qbo,Nbo,jbo,h_,Eae,Dbo,Gbo,$$,Obo,Vbo,Xbo,u_,Cae,zbo,Qbo,I$,Wbo,Hbo,Ubo,p_,wae,Jbo,Ybo,q$,Kbo,Zbo,e2o,__,Aae,o2o,r2o,N$,t2o,a2o,n2o,b_,yae,s2o,l2o,j$,i2o,d2o,c2o,v_,Lae,m2o,f2o,D$,g2o,h2o,u2o,F_,xae,p2o,_2o,G$,b2o,v2o,F2o,T_,kae,T2o,M2o,O$,E2o,C2o,w2o,M_,Sae,A2o,y2o,V$,L2o,x2o,k2o,E_,S2o,Rae,R2o,B2o,Bae,P2o,$2o,Pae,I2o,q2o,T6,HRe,td,C_,$ae,M6,N2o,Iae,j2o,URe,Ko,E6,D2o,ad,G2o,X$,O2o,V2o,z$,X2o,z2o,Q2o,C6,W2o,qae,H2o,U2o,J2o,Qr,w6,Y2o,Nae,K2o,Z2o,nd,evo,jae,ovo,rvo,Q$,tvo,avo,nvo,Dae,svo,lvo,A6,ivo,je,y6,dvo,Gae,cvo,mvo,Qa,fvo,Oae,gvo,hvo,Vae,uvo,pvo,Xae,_vo,bvo,vvo,$,w_,zae,Fvo,Tvo,W$,Mvo,Evo,Cvo,A_,Qae,wvo,Avo,H$,yvo,Lvo,xvo,y_,Wae,kvo,Svo,U$,Rvo,Bvo,Pvo,L_,Hae,$vo,Ivo,J$,qvo,Nvo,jvo,x_,Uae,Dvo,Gvo,Y$,Ovo,Vvo,Xvo,k_,Jae,zvo,Qvo,K$,Wvo,Hvo,Uvo,S_,Yae,Jvo,Yvo,Z$,Kvo,Zvo,eFo,R_,Kae,oFo,rFo,eI,tFo,aFo,nFo,B_,Zae,sFo,lFo,oI,iFo,dFo,cFo,P_,ene,mFo,fFo,rI,gFo,hFo,uFo,$_,one,pFo,_Fo,tI,bFo,vFo,FFo,I_,rne,TFo,MFo,aI,EFo,CFo,wFo,q_,tne,AFo,yFo,nI,LFo,xFo,kFo,N_,ane,SFo,RFo,sI,BFo,PFo,$Fo,j_,nne,IFo,qFo,lI,NFo,jFo,DFo,D_,sne,GFo,OFo,iI,VFo,XFo,zFo,G_,lne,QFo,WFo,dI,HFo,UFo,JFo,O_,ine,YFo,KFo,cI,ZFo,e1o,o1o,V_,dne,r1o,t1o,mI,a1o,n1o,s1o,X_,cne,l1o,i1o,fI,d1o,c1o,m1o,z_,mne,f1o,g1o,gI,h1o,u1o,p1o,Q_,fne,_1o,b1o,hI,v1o,F1o,T1o,W_,gne,M1o,E1o,uI,C1o,w1o,A1o,H_,hne,y1o,L1o,pI,x1o,k1o,S1o,U_,une,R1o,B1o,_I,P1o,$1o,I1o,J_,pne,q1o,N1o,bI,j1o,D1o,G1o,Y_,_ne,O1o,V1o,vI,X1o,z1o,Q1o,K_,bne,W1o,H1o,FI,U1o,J1o,Y1o,Z_,vne,K1o,Z1o,TI,eTo,oTo,rTo,eb,Fne,tTo,aTo,MI,nTo,sTo,lTo,ob,Tne,iTo,dTo,EI,cTo,mTo,fTo,rb,Mne,gTo,hTo,CI,uTo,pTo,_To,tb,Ene,bTo,vTo,wI,FTo,TTo,MTo,ab,Cne,ETo,CTo,AI,wTo,ATo,yTo,nb,wne,LTo,xTo,yI,kTo,STo,RTo,sb,BTo,Ane,PTo,$To,yne,ITo,qTo,Lne,NTo,jTo,L6,JRe,sd,lb,xne,x6,DTo,kne,GTo,YRe,Zo,k6,OTo,ld,VTo,LI,XTo,zTo,xI,QTo,WTo,HTo,S6,UTo,Sne,JTo,YTo,KTo,Wr,R6,ZTo,Rne,eMo,oMo,id,rMo,Bne,tMo,aMo,kI,nMo,sMo,lMo,Pne,iMo,dMo,B6,cMo,De,P6,mMo,$ne,fMo,gMo,Wa,hMo,Ine,uMo,pMo,qne,_Mo,bMo,Nne,vMo,FMo,TMo,I,ib,jne,MMo,EMo,SI,CMo,wMo,AMo,db,Dne,yMo,LMo,RI,xMo,kMo,SMo,cb,Gne,RMo,BMo,BI,PMo,$Mo,IMo,mb,One,qMo,NMo,PI,jMo,DMo,GMo,fb,Vne,OMo,VMo,$I,XMo,zMo,QMo,gb,Xne,WMo,HMo,II,UMo,JMo,YMo,hb,zne,KMo,ZMo,qI,e4o,o4o,r4o,ub,Qne,t4o,a4o,NI,n4o,s4o,l4o,pb,Wne,i4o,d4o,jI,c4o,m4o,f4o,_b,Hne,g4o,h4o,DI,u4o,p4o,_4o,bb,Une,b4o,v4o,GI,F4o,T4o,M4o,vb,Jne,E4o,C4o,OI,w4o,A4o,y4o,Fb,Yne,L4o,x4o,VI,k4o,S4o,R4o,Tb,Kne,B4o,P4o,XI,$4o,I4o,q4o,Mb,Zne,N4o,j4o,zI,D4o,G4o,O4o,Eb,ese,V4o,X4o,QI,z4o,Q4o,W4o,Cb,ose,H4o,U4o,WI,J4o,Y4o,K4o,wb,rse,Z4o,eEo,HI,oEo,rEo,tEo,Ab,tse,aEo,nEo,UI,sEo,lEo,iEo,yb,ase,dEo,cEo,JI,mEo,fEo,gEo,Lb,nse,hEo,uEo,YI,pEo,_Eo,bEo,xb,sse,vEo,FEo,KI,TEo,MEo,EEo,kb,lse,CEo,wEo,ZI,AEo,yEo,LEo,Sb,ise,xEo,kEo,eq,SEo,REo,BEo,Rb,dse,PEo,$Eo,oq,IEo,qEo,NEo,Bb,cse,jEo,DEo,rq,GEo,OEo,VEo,Pb,mse,XEo,zEo,tq,QEo,WEo,HEo,$b,fse,UEo,JEo,aq,YEo,KEo,ZEo,Ib,gse,e5o,o5o,nq,r5o,t5o,a5o,qb,hse,n5o,s5o,sq,l5o,i5o,d5o,Nb,use,c5o,m5o,pse,f5o,g5o,h5o,jb,_se,u5o,p5o,lq,_5o,b5o,v5o,Db,bse,F5o,T5o,iq,M5o,E5o,C5o,Gb,vse,w5o,A5o,dq,y5o,L5o,x5o,Ob,Fse,k5o,S5o,cq,R5o,B5o,P5o,Vb,$5o,Tse,I5o,q5o,Mse,N5o,j5o,Ese,D5o,G5o,$6,KRe,dd,Xb,Cse,I6,O5o,wse,V5o,ZRe,er,q6,X5o,cd,z5o,mq,Q5o,W5o,fq,H5o,U5o,J5o,N6,Y5o,Ase,K5o,Z5o,e3o,Hr,j6,o3o,yse,r3o,t3o,md,a3o,Lse,n3o,s3o,gq,l3o,i3o,d3o,xse,c3o,m3o,D6,f3o,Ge,G6,g3o,kse,h3o,u3o,Ha,p3o,Sse,_3o,b3o,Rse,v3o,F3o,Bse,T3o,M3o,E3o,ne,zb,Pse,C3o,w3o,hq,A3o,y3o,L3o,Qb,$se,x3o,k3o,uq,S3o,R3o,B3o,Wb,Ise,P3o,$3o,pq,I3o,q3o,N3o,Hb,qse,j3o,D3o,_q,G3o,O3o,V3o,Ub,Nse,X3o,z3o,bq,Q3o,W3o,H3o,Jb,jse,U3o,J3o,vq,Y3o,K3o,Z3o,Yb,Dse,eCo,oCo,Fq,rCo,tCo,aCo,Kb,Gse,nCo,sCo,Tq,lCo,iCo,dCo,Zb,Ose,cCo,mCo,Mq,fCo,gCo,hCo,e2,Vse,uCo,pCo,Eq,_Co,bCo,vCo,o2,Xse,FCo,TCo,Cq,MCo,ECo,CCo,r2,zse,wCo,ACo,wq,yCo,LCo,xCo,t2,Qse,kCo,SCo,Aq,RCo,BCo,PCo,a2,Wse,$Co,ICo,yq,qCo,NCo,jCo,n2,Hse,DCo,GCo,Lq,OCo,VCo,XCo,s2,Use,zCo,QCo,xq,WCo,HCo,UCo,l2,Jse,JCo,YCo,kq,KCo,ZCo,ewo,i2,owo,Yse,rwo,two,Kse,awo,nwo,Zse,swo,lwo,O6,eBe,fd,d2,ele,V6,iwo,ole,dwo,oBe,or,X6,cwo,gd,mwo,Sq,fwo,gwo,Rq,hwo,uwo,pwo,z6,_wo,rle,bwo,vwo,Fwo,Ur,Q6,Two,tle,Mwo,Ewo,hd,Cwo,ale,wwo,Awo,Bq,ywo,Lwo,xwo,nle,kwo,Swo,W6,Rwo,Oe,H6,Bwo,sle,Pwo,$wo,Ua,Iwo,lle,qwo,Nwo,ile,jwo,Dwo,dle,Gwo,Owo,Vwo,y,c2,cle,Xwo,zwo,Pq,Qwo,Wwo,Hwo,m2,mle,Uwo,Jwo,$q,Ywo,Kwo,Zwo,f2,fle,e6o,o6o,Iq,r6o,t6o,a6o,g2,gle,n6o,s6o,qq,l6o,i6o,d6o,h2,hle,c6o,m6o,Nq,f6o,g6o,h6o,u2,ule,u6o,p6o,jq,_6o,b6o,v6o,p2,ple,F6o,T6o,Dq,M6o,E6o,C6o,_2,_le,w6o,A6o,Gq,y6o,L6o,x6o,b2,ble,k6o,S6o,Oq,R6o,B6o,P6o,v2,vle,$6o,I6o,Vq,q6o,N6o,j6o,F2,Fle,D6o,G6o,Xq,O6o,V6o,X6o,T2,Tle,z6o,Q6o,zq,W6o,H6o,U6o,M2,Mle,J6o,Y6o,Qq,K6o,Z6o,eAo,E2,Ele,oAo,rAo,Wq,tAo,aAo,nAo,C2,Cle,sAo,lAo,Hq,iAo,dAo,cAo,w2,wle,mAo,fAo,Uq,gAo,hAo,uAo,A2,Ale,pAo,_Ao,Jq,bAo,vAo,FAo,y2,yle,TAo,MAo,Yq,EAo,CAo,wAo,L2,Lle,AAo,yAo,Kq,LAo,xAo,kAo,x2,xle,SAo,RAo,Zq,BAo,PAo,$Ao,k2,kle,IAo,qAo,eN,NAo,jAo,DAo,S2,Sle,GAo,OAo,oN,VAo,XAo,zAo,R2,Rle,QAo,WAo,rN,HAo,UAo,JAo,B2,Ble,YAo,KAo,tN,ZAo,e0o,o0o,P2,Ple,r0o,t0o,aN,a0o,n0o,s0o,$2,$le,l0o,i0o,nN,d0o,c0o,m0o,I2,Ile,f0o,g0o,sN,h0o,u0o,p0o,q2,qle,_0o,b0o,lN,v0o,F0o,T0o,N2,Nle,M0o,E0o,iN,C0o,w0o,A0o,j2,jle,y0o,L0o,dN,x0o,k0o,S0o,D2,Dle,R0o,B0o,cN,P0o,$0o,I0o,G2,Gle,q0o,N0o,mN,j0o,D0o,G0o,O2,Ole,O0o,V0o,fN,X0o,z0o,Q0o,V2,Vle,W0o,H0o,gN,U0o,J0o,Y0o,X2,Xle,K0o,Z0o,hN,eyo,oyo,ryo,z2,zle,tyo,ayo,uN,nyo,syo,lyo,Q2,Qle,iyo,dyo,pN,cyo,myo,fyo,W2,Wle,gyo,hyo,_N,uyo,pyo,_yo,H2,Hle,byo,vyo,bN,Fyo,Tyo,Myo,U2,Ule,Eyo,Cyo,vN,wyo,Ayo,yyo,J2,Jle,Lyo,xyo,FN,kyo,Syo,Ryo,Y2,Yle,Byo,Pyo,TN,$yo,Iyo,qyo,K2,Kle,Nyo,jyo,MN,Dyo,Gyo,Oyo,Z2,Zle,Vyo,Xyo,EN,zyo,Qyo,Wyo,ev,eie,Hyo,Uyo,CN,Jyo,Yyo,Kyo,ov,oie,Zyo,e8o,wN,o8o,r8o,t8o,rv,rie,a8o,n8o,AN,s8o,l8o,i8o,tv,d8o,tie,c8o,m8o,aie,f8o,g8o,nie,h8o,u8o,U6,rBe,ud,av,sie,J6,p8o,lie,_8o,tBe,rr,Y6,b8o,pd,v8o,yN,F8o,T8o,LN,M8o,E8o,C8o,K6,w8o,iie,A8o,y8o,L8o,Jr,Z6,x8o,die,k8o,S8o,_d,R8o,cie,B8o,P8o,xN,$8o,I8o,q8o,mie,N8o,j8o,eA,D8o,Ve,oA,G8o,fie,O8o,V8o,Ja,X8o,gie,z8o,Q8o,hie,W8o,H8o,uie,U8o,J8o,Y8o,G,nv,pie,K8o,Z8o,kN,eLo,oLo,rLo,sv,_ie,tLo,aLo,SN,nLo,sLo,lLo,lv,bie,iLo,dLo,RN,cLo,mLo,fLo,iv,vie,gLo,hLo,BN,uLo,pLo,_Lo,dv,Fie,bLo,vLo,PN,FLo,TLo,MLo,cv,Tie,ELo,CLo,$N,wLo,ALo,yLo,mv,Mie,LLo,xLo,IN,kLo,SLo,RLo,fv,Eie,BLo,PLo,qN,$Lo,ILo,qLo,gv,Cie,NLo,jLo,NN,DLo,GLo,OLo,hv,wie,VLo,XLo,jN,zLo,QLo,WLo,uv,Aie,HLo,ULo,DN,JLo,YLo,KLo,pv,yie,ZLo,e7o,GN,o7o,r7o,t7o,_v,Lie,a7o,n7o,ON,s7o,l7o,i7o,bv,xie,d7o,c7o,VN,m7o,f7o,g7o,vv,kie,h7o,u7o,XN,p7o,_7o,b7o,Fv,Sie,v7o,F7o,zN,T7o,M7o,E7o,Tv,Rie,C7o,w7o,QN,A7o,y7o,L7o,Mv,Bie,x7o,k7o,WN,S7o,R7o,B7o,Ev,Pie,P7o,$7o,HN,I7o,q7o,N7o,Cv,$ie,j7o,D7o,UN,G7o,O7o,V7o,wv,Iie,X7o,z7o,JN,Q7o,W7o,H7o,Av,qie,U7o,J7o,YN,Y7o,K7o,Z7o,yv,Nie,e9o,o9o,KN,r9o,t9o,a9o,Lv,jie,n9o,s9o,ZN,l9o,i9o,d9o,xv,Die,c9o,m9o,ej,f9o,g9o,h9o,kv,Gie,u9o,p9o,oj,_9o,b9o,v9o,Sv,Oie,F9o,T9o,rj,M9o,E9o,C9o,Rv,Vie,w9o,A9o,tj,y9o,L9o,x9o,Bv,k9o,Xie,S9o,R9o,zie,B9o,P9o,Qie,$9o,I9o,rA,aBe,bd,Pv,Wie,tA,q9o,Hie,N9o,nBe,tr,aA,j9o,vd,D9o,aj,G9o,O9o,nj,V9o,X9o,z9o,nA,Q9o,Uie,W9o,H9o,U9o,Yr,sA,J9o,Jie,Y9o,K9o,Fd,Z9o,Yie,exo,oxo,sj,rxo,txo,axo,Kie,nxo,sxo,lA,lxo,Xe,iA,ixo,Zie,dxo,cxo,Ya,mxo,ede,fxo,gxo,ode,hxo,uxo,rde,pxo,_xo,bxo,da,$v,tde,vxo,Fxo,lj,Txo,Mxo,Exo,Iv,ade,Cxo,wxo,ij,Axo,yxo,Lxo,qv,nde,xxo,kxo,dj,Sxo,Rxo,Bxo,Nv,sde,Pxo,$xo,cj,Ixo,qxo,Nxo,jv,lde,jxo,Dxo,mj,Gxo,Oxo,Vxo,Dv,Xxo,ide,zxo,Qxo,dde,Wxo,Hxo,cde,Uxo,Jxo,dA,sBe,Td,Gv,mde,cA,Yxo,fde,Kxo,lBe,ar,mA,Zxo,Md,eko,fj,oko,rko,gj,tko,ako,nko,fA,sko,gde,lko,iko,dko,Kr,gA,cko,hde,mko,fko,Ed,gko,ude,hko,uko,hj,pko,_ko,bko,pde,vko,Fko,hA,Tko,ze,uA,Mko,_de,Eko,Cko,Ka,wko,bde,Ako,yko,vde,Lko,xko,Fde,kko,Sko,Rko,j,Ov,Tde,Bko,Pko,uj,$ko,Iko,qko,Vv,Mde,Nko,jko,pj,Dko,Gko,Oko,Xv,Ede,Vko,Xko,_j,zko,Qko,Wko,zv,Cde,Hko,Uko,bj,Jko,Yko,Kko,Qv,wde,Zko,eSo,vj,oSo,rSo,tSo,Wv,Ade,aSo,nSo,Fj,sSo,lSo,iSo,Hv,yde,dSo,cSo,Tj,mSo,fSo,gSo,Uv,Lde,hSo,uSo,Mj,pSo,_So,bSo,Jv,xde,vSo,FSo,Ej,TSo,MSo,ESo,Yv,kde,CSo,wSo,Cj,ASo,ySo,LSo,Kv,Sde,xSo,kSo,wj,SSo,RSo,BSo,Zv,Rde,PSo,$So,Aj,ISo,qSo,NSo,eF,Bde,jSo,DSo,yj,GSo,OSo,VSo,oF,Pde,XSo,zSo,Lj,QSo,WSo,HSo,rF,$de,USo,JSo,xj,YSo,KSo,ZSo,tF,Ide,eRo,oRo,kj,rRo,tRo,aRo,aF,qde,nRo,sRo,Sj,lRo,iRo,dRo,nF,Nde,cRo,mRo,Rj,fRo,gRo,hRo,sF,jde,uRo,pRo,Bj,_Ro,bRo,vRo,lF,Dde,FRo,TRo,Pj,MRo,ERo,CRo,iF,Gde,wRo,ARo,$j,yRo,LRo,xRo,dF,Ode,kRo,SRo,Ij,RRo,BRo,PRo,cF,Vde,$Ro,IRo,qj,qRo,NRo,jRo,mF,Xde,DRo,GRo,Nj,ORo,VRo,XRo,fF,zde,zRo,QRo,jj,WRo,HRo,URo,gF,Qde,JRo,YRo,Dj,KRo,ZRo,eBo,hF,Wde,oBo,rBo,Gj,tBo,aBo,nBo,uF,Hde,sBo,lBo,Oj,iBo,dBo,cBo,pF,Ude,mBo,fBo,Vj,gBo,hBo,uBo,_F,Jde,pBo,_Bo,Xj,bBo,vBo,FBo,bF,Yde,TBo,MBo,zj,EBo,CBo,wBo,vF,Kde,ABo,yBo,Qj,LBo,xBo,kBo,FF,Zde,SBo,RBo,Wj,BBo,PBo,$Bo,TF,IBo,ece,qBo,NBo,oce,jBo,DBo,rce,GBo,OBo,pA,iBe,Cd,MF,tce,_A,VBo,ace,XBo,dBe,nr,bA,zBo,wd,QBo,Hj,WBo,HBo,Uj,UBo,JBo,YBo,vA,KBo,nce,ZBo,ePo,oPo,Zr,FA,rPo,sce,tPo,aPo,Ad,nPo,lce,sPo,lPo,Jj,iPo,dPo,cPo,ice,mPo,fPo,TA,gPo,Qe,MA,hPo,dce,uPo,pPo,Za,_Po,cce,bPo,vPo,mce,FPo,TPo,fce,MPo,EPo,CPo,R,EF,gce,wPo,APo,Yj,yPo,LPo,xPo,CF,hce,kPo,SPo,Kj,RPo,BPo,PPo,wF,uce,$Po,IPo,Zj,qPo,NPo,jPo,AF,pce,DPo,GPo,eD,OPo,VPo,XPo,yF,_ce,zPo,QPo,oD,WPo,HPo,UPo,LF,bce,JPo,YPo,rD,KPo,ZPo,e$o,xF,vce,o$o,r$o,tD,t$o,a$o,n$o,kF,Fce,s$o,l$o,aD,i$o,d$o,c$o,SF,Tce,m$o,f$o,nD,g$o,h$o,u$o,RF,Mce,p$o,_$o,sD,b$o,v$o,F$o,BF,Ece,T$o,M$o,lD,E$o,C$o,w$o,PF,Cce,A$o,y$o,iD,L$o,x$o,k$o,$F,wce,S$o,R$o,dD,B$o,P$o,$$o,IF,Ace,I$o,q$o,cD,N$o,j$o,D$o,qF,yce,G$o,O$o,mD,V$o,X$o,z$o,NF,Lce,Q$o,W$o,fD,H$o,U$o,J$o,jF,xce,Y$o,K$o,gD,Z$o,eIo,oIo,DF,kce,rIo,tIo,hD,aIo,nIo,sIo,GF,Sce,lIo,iIo,uD,dIo,cIo,mIo,OF,Rce,fIo,gIo,pD,hIo,uIo,pIo,VF,Bce,_Io,bIo,_D,vIo,FIo,TIo,XF,Pce,MIo,EIo,bD,CIo,wIo,AIo,zF,$ce,yIo,LIo,vD,xIo,kIo,SIo,QF,Ice,RIo,BIo,FD,PIo,$Io,IIo,WF,qce,qIo,NIo,TD,jIo,DIo,GIo,HF,Nce,OIo,VIo,MD,XIo,zIo,QIo,UF,jce,WIo,HIo,ED,UIo,JIo,YIo,JF,Dce,KIo,ZIo,CD,eqo,oqo,rqo,YF,Gce,tqo,aqo,wD,nqo,sqo,lqo,KF,Oce,iqo,dqo,AD,cqo,mqo,fqo,ZF,Vce,gqo,hqo,yD,uqo,pqo,_qo,e1,Xce,bqo,vqo,LD,Fqo,Tqo,Mqo,o1,zce,Eqo,Cqo,xD,wqo,Aqo,yqo,r1,Qce,Lqo,xqo,kD,kqo,Sqo,Rqo,t1,Wce,Bqo,Pqo,SD,$qo,Iqo,qqo,a1,Hce,Nqo,jqo,RD,Dqo,Gqo,Oqo,n1,Uce,Vqo,Xqo,BD,zqo,Qqo,Wqo,s1,Jce,Hqo,Uqo,PD,Jqo,Yqo,Kqo,l1,Yce,Zqo,eNo,$D,oNo,rNo,tNo,i1,aNo,Kce,nNo,sNo,Zce,lNo,iNo,eme,dNo,cNo,EA,cBe,yd,d1,ome,CA,mNo,rme,fNo,mBe,sr,wA,gNo,Ld,hNo,ID,uNo,pNo,qD,_No,bNo,vNo,AA,FNo,tme,TNo,MNo,ENo,et,yA,CNo,ame,wNo,ANo,xd,yNo,nme,LNo,xNo,ND,kNo,SNo,RNo,sme,BNo,PNo,LA,$No,We,xA,INo,lme,qNo,NNo,en,jNo,ime,DNo,GNo,dme,ONo,VNo,cme,XNo,zNo,QNo,mme,c1,fme,WNo,HNo,jD,UNo,JNo,YNo,m1,KNo,gme,ZNo,ejo,hme,ojo,rjo,ume,tjo,ajo,kA,fBe,kd,f1,pme,SA,njo,_me,sjo,gBe,lr,RA,ljo,Sd,ijo,DD,djo,cjo,GD,mjo,fjo,gjo,BA,hjo,bme,ujo,pjo,_jo,ot,PA,bjo,vme,vjo,Fjo,Rd,Tjo,Fme,Mjo,Ejo,OD,Cjo,wjo,Ajo,Tme,yjo,Ljo,$A,xjo,He,IA,kjo,Mme,Sjo,Rjo,on,Bjo,Eme,Pjo,$jo,Cme,Ijo,qjo,wme,Njo,jjo,Djo,de,g1,Ame,Gjo,Ojo,VD,Vjo,Xjo,zjo,h1,yme,Qjo,Wjo,XD,Hjo,Ujo,Jjo,u1,Lme,Yjo,Kjo,zD,Zjo,eDo,oDo,Gs,xme,rDo,tDo,QD,aDo,nDo,WD,sDo,lDo,iDo,p1,kme,dDo,cDo,HD,mDo,fDo,gDo,fa,Sme,hDo,uDo,UD,pDo,_Do,JD,bDo,vDo,YD,FDo,TDo,MDo,_1,Rme,EDo,CDo,KD,wDo,ADo,yDo,b1,Bme,LDo,xDo,ZD,kDo,SDo,RDo,v1,Pme,BDo,PDo,eG,$Do,IDo,qDo,F1,$me,NDo,jDo,oG,DDo,GDo,ODo,T1,Ime,VDo,XDo,rG,zDo,QDo,WDo,M1,qme,HDo,UDo,tG,JDo,YDo,KDo,E1,Nme,ZDo,eGo,aG,oGo,rGo,tGo,C1,aGo,jme,nGo,sGo,Dme,lGo,iGo,Gme,dGo,cGo,qA,hBe,Bd,w1,Ome,NA,mGo,Vme,fGo,uBe,ir,jA,gGo,Pd,hGo,nG,uGo,pGo,sG,_Go,bGo,vGo,DA,FGo,Xme,TGo,MGo,EGo,rt,GA,CGo,zme,wGo,AGo,$d,yGo,Qme,LGo,xGo,lG,kGo,SGo,RGo,Wme,BGo,PGo,OA,$Go,Ue,VA,IGo,Hme,qGo,NGo,rn,jGo,Ume,DGo,GGo,Jme,OGo,VGo,Yme,XGo,zGo,QGo,Kme,A1,Zme,WGo,HGo,iG,UGo,JGo,YGo,y1,KGo,efe,ZGo,eOo,ofe,oOo,rOo,rfe,tOo,aOo,XA,pBe,Id,L1,tfe,zA,nOo,afe,sOo,_Be,dr,QA,lOo,qd,iOo,dG,dOo,cOo,cG,mOo,fOo,gOo,WA,hOo,nfe,uOo,pOo,_Oo,tt,HA,bOo,sfe,vOo,FOo,Nd,TOo,lfe,MOo,EOo,mG,COo,wOo,AOo,ife,yOo,LOo,UA,xOo,Je,JA,kOo,dfe,SOo,ROo,tn,BOo,cfe,POo,$Oo,mfe,IOo,qOo,ffe,NOo,jOo,DOo,Se,x1,gfe,GOo,OOo,fG,VOo,XOo,zOo,k1,hfe,QOo,WOo,gG,HOo,UOo,JOo,S1,ufe,YOo,KOo,hG,ZOo,eVo,oVo,R1,pfe,rVo,tVo,uG,aVo,nVo,sVo,B1,_fe,lVo,iVo,pG,dVo,cVo,mVo,P1,bfe,fVo,gVo,_G,hVo,uVo,pVo,$1,vfe,_Vo,bVo,bG,vVo,FVo,TVo,I1,Ffe,MVo,EVo,vG,CVo,wVo,AVo,q1,yVo,Tfe,LVo,xVo,Mfe,kVo,SVo,Efe,RVo,BVo,YA,bBe,jd,N1,Cfe,KA,PVo,wfe,$Vo,vBe,cr,ZA,IVo,Dd,qVo,FG,NVo,jVo,TG,DVo,GVo,OVo,e0,VVo,Afe,XVo,zVo,QVo,at,o0,WVo,yfe,HVo,UVo,Gd,JVo,Lfe,YVo,KVo,MG,ZVo,eXo,oXo,xfe,rXo,tXo,r0,aXo,Ye,t0,nXo,kfe,sXo,lXo,an,iXo,Sfe,dXo,cXo,Rfe,mXo,fXo,Bfe,gXo,hXo,uXo,nn,j1,Pfe,pXo,_Xo,EG,bXo,vXo,FXo,D1,$fe,TXo,MXo,CG,EXo,CXo,wXo,G1,Ife,AXo,yXo,wG,LXo,xXo,kXo,O1,qfe,SXo,RXo,AG,BXo,PXo,$Xo,V1,IXo,Nfe,qXo,NXo,jfe,jXo,DXo,Dfe,GXo,OXo,a0,FBe,Od,X1,Gfe,n0,VXo,Ofe,XXo,TBe,mr,s0,zXo,Vd,QXo,yG,WXo,HXo,LG,UXo,JXo,YXo,l0,KXo,Vfe,ZXo,ezo,ozo,nt,i0,rzo,Xfe,tzo,azo,Xd,nzo,zfe,szo,lzo,xG,izo,dzo,czo,Qfe,mzo,fzo,d0,gzo,Ke,c0,hzo,Wfe,uzo,pzo,sn,_zo,Hfe,bzo,vzo,Ufe,Fzo,Tzo,Jfe,Mzo,Ezo,Czo,Re,z1,Yfe,wzo,Azo,kG,yzo,Lzo,xzo,Q1,Kfe,kzo,Szo,SG,Rzo,Bzo,Pzo,W1,Zfe,$zo,Izo,RG,qzo,Nzo,jzo,H1,ege,Dzo,Gzo,BG,Ozo,Vzo,Xzo,U1,oge,zzo,Qzo,PG,Wzo,Hzo,Uzo,J1,rge,Jzo,Yzo,$G,Kzo,Zzo,eQo,Y1,tge,oQo,rQo,IG,tQo,aQo,nQo,K1,age,sQo,lQo,qG,iQo,dQo,cQo,Z1,mQo,nge,fQo,gQo,sge,hQo,uQo,lge,pQo,_Qo,m0,MBe,zd,eT,ige,f0,bQo,dge,vQo,EBe,fr,g0,FQo,Qd,TQo,NG,MQo,EQo,jG,CQo,wQo,AQo,h0,yQo,cge,LQo,xQo,kQo,st,u0,SQo,mge,RQo,BQo,Wd,PQo,fge,$Qo,IQo,DG,qQo,NQo,jQo,gge,DQo,GQo,p0,OQo,Ze,_0,VQo,hge,XQo,zQo,ln,QQo,uge,WQo,HQo,pge,UQo,JQo,_ge,YQo,KQo,ZQo,b0,oT,bge,eWo,oWo,GG,rWo,tWo,aWo,rT,vge,nWo,sWo,OG,lWo,iWo,dWo,tT,cWo,Fge,mWo,fWo,Tge,gWo,hWo,Mge,uWo,pWo,v0,CBe,Hd,aT,Ege,F0,_Wo,Cge,bWo,wBe,gr,T0,vWo,Ud,FWo,VG,TWo,MWo,XG,EWo,CWo,wWo,M0,AWo,wge,yWo,LWo,xWo,lt,E0,kWo,Age,SWo,RWo,Jd,BWo,yge,PWo,$Wo,zG,IWo,qWo,NWo,Lge,jWo,DWo,C0,GWo,eo,w0,OWo,xge,VWo,XWo,dn,zWo,kge,QWo,WWo,Sge,HWo,UWo,Rge,JWo,YWo,KWo,cn,nT,Bge,ZWo,eHo,QG,oHo,rHo,tHo,sT,Pge,aHo,nHo,WG,sHo,lHo,iHo,lT,$ge,dHo,cHo,HG,mHo,fHo,gHo,iT,Ige,hHo,uHo,UG,pHo,_Ho,bHo,dT,vHo,qge,FHo,THo,Nge,MHo,EHo,jge,CHo,wHo,A0,ABe,Yd,cT,Dge,y0,AHo,Gge,yHo,yBe,hr,L0,LHo,Kd,xHo,JG,kHo,SHo,YG,RHo,BHo,PHo,x0,$Ho,Oge,IHo,qHo,NHo,it,k0,jHo,Vge,DHo,GHo,Zd,OHo,Xge,VHo,XHo,KG,zHo,QHo,WHo,zge,HHo,UHo,S0,JHo,oo,R0,YHo,Qge,KHo,ZHo,mn,eUo,Wge,oUo,rUo,Hge,tUo,aUo,Uge,nUo,sUo,lUo,ec,mT,Jge,iUo,dUo,ZG,cUo,mUo,fUo,fT,Yge,gUo,hUo,eO,uUo,pUo,_Uo,gT,Kge,bUo,vUo,oO,FUo,TUo,MUo,hT,EUo,Zge,CUo,wUo,ehe,AUo,yUo,ohe,LUo,xUo,B0,LBe,oc,uT,rhe,P0,kUo,the,SUo,xBe,ur,$0,RUo,rc,BUo,rO,PUo,$Uo,tO,IUo,qUo,NUo,I0,jUo,ahe,DUo,GUo,OUo,dt,q0,VUo,nhe,XUo,zUo,tc,QUo,she,WUo,HUo,aO,UUo,JUo,YUo,lhe,KUo,ZUo,N0,eJo,ro,j0,oJo,ihe,rJo,tJo,fn,aJo,dhe,nJo,sJo,che,lJo,iJo,mhe,dJo,cJo,mJo,fhe,pT,ghe,fJo,gJo,nO,hJo,uJo,pJo,_T,_Jo,hhe,bJo,vJo,uhe,FJo,TJo,phe,MJo,EJo,D0,kBe,ac,bT,_he,G0,CJo,bhe,wJo,SBe,pr,O0,AJo,nc,yJo,sO,LJo,xJo,lO,kJo,SJo,RJo,V0,BJo,vhe,PJo,$Jo,IJo,ct,X0,qJo,Fhe,NJo,jJo,sc,DJo,The,GJo,OJo,iO,VJo,XJo,zJo,Mhe,QJo,WJo,z0,HJo,to,Q0,UJo,Ehe,JJo,YJo,gn,KJo,Che,ZJo,eYo,whe,oYo,rYo,Ahe,tYo,aYo,nYo,yhe,vT,Lhe,sYo,lYo,dO,iYo,dYo,cYo,FT,mYo,xhe,fYo,gYo,khe,hYo,uYo,She,pYo,_Yo,W0,RBe,lc,TT,Rhe,H0,bYo,Bhe,vYo,BBe,_r,U0,FYo,ic,TYo,cO,MYo,EYo,mO,CYo,wYo,AYo,J0,yYo,Phe,LYo,xYo,kYo,mt,Y0,SYo,$he,RYo,BYo,dc,PYo,Ihe,$Yo,IYo,fO,qYo,NYo,jYo,qhe,DYo,GYo,K0,OYo,ao,Z0,VYo,Nhe,XYo,zYo,hn,QYo,jhe,WYo,HYo,Dhe,UYo,JYo,Ghe,YYo,KYo,ZYo,un,MT,Ohe,eKo,oKo,gO,rKo,tKo,aKo,ET,Vhe,nKo,sKo,hO,lKo,iKo,dKo,CT,Xhe,cKo,mKo,uO,fKo,gKo,hKo,wT,zhe,uKo,pKo,pO,_Ko,bKo,vKo,AT,FKo,Qhe,TKo,MKo,Whe,EKo,CKo,Hhe,wKo,AKo,ey,PBe,cc,yT,Uhe,oy,yKo,Jhe,LKo,$Be,br,ry,xKo,mc,kKo,_O,SKo,RKo,bO,BKo,PKo,$Ko,ty,IKo,Yhe,qKo,NKo,jKo,ft,ay,DKo,Khe,GKo,OKo,fc,VKo,Zhe,XKo,zKo,vO,QKo,WKo,HKo,eue,UKo,JKo,ny,YKo,no,sy,KKo,oue,ZKo,eZo,pn,oZo,rue,rZo,tZo,tue,aZo,nZo,aue,sZo,lZo,iZo,nue,LT,sue,dZo,cZo,FO,mZo,fZo,gZo,xT,hZo,lue,uZo,pZo,iue,_Zo,bZo,due,vZo,FZo,ly,IBe,gc,kT,cue,iy,TZo,mue,MZo,qBe,vr,dy,EZo,hc,CZo,TO,wZo,AZo,MO,yZo,LZo,xZo,cy,kZo,fue,SZo,RZo,BZo,gt,my,PZo,gue,$Zo,IZo,uc,qZo,hue,NZo,jZo,EO,DZo,GZo,OZo,uue,VZo,XZo,fy,zZo,ho,gy,QZo,pue,WZo,HZo,_n,UZo,_ue,JZo,YZo,bue,KZo,ZZo,vue,eer,oer,rer,x,ST,Fue,ter,aer,CO,ner,ser,ler,RT,Tue,ier,der,wO,cer,mer,fer,BT,Mue,ger,her,AO,uer,per,_er,PT,Eue,ber,ver,yO,Fer,Ter,Mer,$T,Cue,Eer,Cer,LO,wer,Aer,yer,IT,wue,Ler,xer,xO,ker,Ser,Rer,qT,Aue,Ber,Per,kO,$er,Ier,qer,NT,yue,Ner,jer,SO,Der,Ger,Oer,jT,Lue,Ver,Xer,RO,zer,Qer,Wer,DT,xue,Her,Uer,BO,Jer,Yer,Ker,GT,kue,Zer,eor,PO,oor,ror,tor,OT,Sue,aor,nor,$O,sor,lor,ior,VT,Rue,dor,cor,IO,mor,gor,hor,XT,Bue,uor,por,qO,_or,bor,vor,zT,Pue,For,Tor,NO,Mor,Eor,Cor,QT,$ue,wor,Aor,jO,yor,Lor,xor,Os,Iue,kor,Sor,DO,Ror,Bor,GO,Por,$or,Ior,WT,que,qor,Nor,OO,jor,Dor,Gor,HT,Nue,Oor,Vor,VO,Xor,zor,Qor,UT,jue,Wor,Hor,XO,Uor,Jor,Yor,JT,Due,Kor,Zor,zO,err,orr,rrr,YT,Gue,trr,arr,QO,nrr,srr,lrr,KT,Oue,irr,drr,WO,crr,mrr,frr,ZT,Vue,grr,hrr,HO,urr,prr,_rr,eM,Xue,brr,vrr,UO,Frr,Trr,Mrr,oM,zue,Err,Crr,JO,wrr,Arr,yrr,rM,Que,Lrr,xrr,YO,krr,Srr,Rrr,tM,Wue,Brr,Prr,KO,$rr,Irr,qrr,aM,Hue,Nrr,jrr,ZO,Drr,Grr,Orr,nM,Uue,Vrr,Xrr,eV,zrr,Qrr,Wrr,sM,Jue,Hrr,Urr,oV,Jrr,Yrr,Krr,lM,Yue,Zrr,etr,rV,otr,rtr,ttr,iM,Kue,atr,ntr,tV,str,ltr,itr,dM,Zue,dtr,ctr,aV,mtr,ftr,gtr,cM,epe,htr,utr,nV,ptr,_tr,btr,mM,ope,vtr,Ftr,sV,Ttr,Mtr,Etr,fM,rpe,Ctr,wtr,lV,Atr,ytr,Ltr,gM,tpe,xtr,ktr,iV,Str,Rtr,Btr,hM,ape,Ptr,$tr,dV,Itr,qtr,Ntr,uM,npe,jtr,Dtr,cV,Gtr,Otr,Vtr,pM,spe,Xtr,ztr,mV,Qtr,Wtr,Htr,_M,lpe,Utr,Jtr,fV,Ytr,Ktr,Ztr,bM,ipe,ear,oar,gV,rar,tar,aar,vM,dpe,nar,sar,hV,lar,iar,dar,cpe,car,mar,hy,NBe,pc,FM,mpe,uy,far,fpe,gar,jBe,Fr,py,har,_c,uar,uV,par,_ar,pV,bar,Far,Tar,_y,Mar,gpe,Ear,Car,war,ht,by,Aar,hpe,yar,Lar,bc,xar,upe,kar,Sar,_V,Rar,Bar,Par,ppe,$ar,Iar,vy,qar,uo,Fy,Nar,_pe,jar,Dar,bn,Gar,bpe,Oar,Var,vpe,Xar,zar,Fpe,Qar,War,Har,H,TM,Tpe,Uar,Jar,bV,Yar,Kar,Zar,MM,Mpe,enr,onr,vV,rnr,tnr,anr,EM,Epe,nnr,snr,FV,lnr,inr,dnr,CM,Cpe,cnr,mnr,TV,fnr,gnr,hnr,wM,wpe,unr,pnr,MV,_nr,bnr,vnr,AM,Ape,Fnr,Tnr,EV,Mnr,Enr,Cnr,yM,ype,wnr,Anr,CV,ynr,Lnr,xnr,LM,Lpe,knr,Snr,wV,Rnr,Bnr,Pnr,xM,xpe,$nr,Inr,AV,qnr,Nnr,jnr,kM,kpe,Dnr,Gnr,yV,Onr,Vnr,Xnr,SM,Spe,znr,Qnr,LV,Wnr,Hnr,Unr,RM,Rpe,Jnr,Ynr,xV,Knr,Znr,esr,BM,Bpe,osr,rsr,kV,tsr,asr,nsr,PM,Ppe,ssr,lsr,SV,isr,dsr,csr,$M,$pe,msr,fsr,RV,gsr,hsr,usr,IM,Ipe,psr,_sr,BV,bsr,vsr,Fsr,qM,qpe,Tsr,Msr,PV,Esr,Csr,wsr,NM,Npe,Asr,ysr,$V,Lsr,xsr,ksr,jM,jpe,Ssr,Rsr,IV,Bsr,Psr,$sr,DM,Dpe,Isr,qsr,qV,Nsr,jsr,Dsr,GM,Gpe,Gsr,Osr,NV,Vsr,Xsr,zsr,OM,Ope,Qsr,Wsr,jV,Hsr,Usr,Jsr,VM,Vpe,Ysr,Ksr,DV,Zsr,elr,olr,Xpe,rlr,tlr,Ty,DBe,vc,XM,zpe,My,alr,Qpe,nlr,GBe,Tr,Ey,slr,Fc,llr,GV,ilr,dlr,OV,clr,mlr,flr,Cy,glr,Wpe,hlr,ulr,plr,ut,wy,_lr,Hpe,blr,vlr,Tc,Flr,Upe,Tlr,Mlr,VV,Elr,Clr,wlr,Jpe,Alr,ylr,Ay,Llr,po,yy,xlr,Ype,klr,Slr,vn,Rlr,Kpe,Blr,Plr,Zpe,$lr,Ilr,e_e,qlr,Nlr,jlr,me,zM,o_e,Dlr,Glr,XV,Olr,Vlr,Xlr,QM,r_e,zlr,Qlr,zV,Wlr,Hlr,Ulr,WM,t_e,Jlr,Ylr,QV,Klr,Zlr,eir,HM,a_e,oir,rir,WV,tir,air,nir,UM,n_e,sir,lir,HV,iir,dir,cir,JM,s_e,mir,fir,UV,gir,hir,uir,YM,l_e,pir,_ir,JV,bir,vir,Fir,KM,i_e,Tir,Mir,YV,Eir,Cir,wir,ZM,d_e,Air,yir,KV,Lir,xir,kir,e4,c_e,Sir,Rir,ZV,Bir,Pir,$ir,o4,m_e,Iir,qir,eX,Nir,jir,Dir,r4,f_e,Gir,Oir,oX,Vir,Xir,zir,g_e,Qir,Wir,Ly,OBe,Mc,t4,h_e,xy,Hir,u_e,Uir,VBe,Mr,ky,Jir,Ec,Yir,rX,Kir,Zir,tX,edr,odr,rdr,Sy,tdr,p_e,adr,ndr,sdr,pt,Ry,ldr,__e,idr,ddr,Cc,cdr,b_e,mdr,fdr,aX,gdr,hdr,udr,v_e,pdr,_dr,By,bdr,_o,Py,vdr,F_e,Fdr,Tdr,Fn,Mdr,T_e,Edr,Cdr,M_e,wdr,Adr,E_e,ydr,Ldr,xdr,$y,a4,C_e,kdr,Sdr,nX,Rdr,Bdr,Pdr,n4,w_e,$dr,Idr,sX,qdr,Ndr,jdr,A_e,Ddr,Gdr,Iy,XBe,wc,s4,y_e,qy,Odr,L_e,Vdr,zBe,Er,Ny,Xdr,Ac,zdr,lX,Qdr,Wdr,iX,Hdr,Udr,Jdr,jy,Ydr,x_e,Kdr,Zdr,ecr,_t,Dy,ocr,k_e,rcr,tcr,yc,acr,S_e,ncr,scr,dX,lcr,icr,dcr,R_e,ccr,mcr,Gy,fcr,bo,Oy,gcr,B_e,hcr,ucr,Tn,pcr,P_e,_cr,bcr,$_e,vcr,Fcr,I_e,Tcr,Mcr,Ecr,J,l4,q_e,Ccr,wcr,cX,Acr,ycr,Lcr,i4,N_e,xcr,kcr,mX,Scr,Rcr,Bcr,d4,j_e,Pcr,$cr,fX,Icr,qcr,Ncr,c4,D_e,jcr,Dcr,gX,Gcr,Ocr,Vcr,m4,G_e,Xcr,zcr,hX,Qcr,Wcr,Hcr,f4,O_e,Ucr,Jcr,uX,Ycr,Kcr,Zcr,g4,V_e,emr,omr,pX,rmr,tmr,amr,h4,X_e,nmr,smr,_X,lmr,imr,dmr,u4,z_e,cmr,mmr,bX,fmr,gmr,hmr,p4,Q_e,umr,pmr,vX,_mr,bmr,vmr,_4,W_e,Fmr,Tmr,FX,Mmr,Emr,Cmr,b4,H_e,wmr,Amr,TX,ymr,Lmr,xmr,v4,U_e,kmr,Smr,MX,Rmr,Bmr,Pmr,F4,J_e,$mr,Imr,EX,qmr,Nmr,jmr,T4,Y_e,Dmr,Gmr,CX,Omr,Vmr,Xmr,M4,K_e,zmr,Qmr,wX,Wmr,Hmr,Umr,E4,Z_e,Jmr,Ymr,AX,Kmr,Zmr,efr,C4,ebe,ofr,rfr,yX,tfr,afr,nfr,w4,obe,sfr,lfr,LX,ifr,dfr,cfr,A4,rbe,mfr,ffr,xX,gfr,hfr,ufr,tbe,pfr,_fr,Vy,QBe,Lc,y4,abe,Xy,bfr,nbe,vfr,WBe,Cr,zy,Ffr,xc,Tfr,kX,Mfr,Efr,SX,Cfr,wfr,Afr,Qy,yfr,sbe,Lfr,xfr,kfr,bt,Wy,Sfr,lbe,Rfr,Bfr,kc,Pfr,ibe,$fr,Ifr,RX,qfr,Nfr,jfr,dbe,Dfr,Gfr,Hy,Ofr,vo,Uy,Vfr,cbe,Xfr,zfr,Mn,Qfr,mbe,Wfr,Hfr,fbe,Ufr,Jfr,gbe,Yfr,Kfr,Zfr,be,L4,hbe,egr,ogr,BX,rgr,tgr,agr,x4,ube,ngr,sgr,PX,lgr,igr,dgr,k4,pbe,cgr,mgr,$X,fgr,ggr,hgr,S4,_be,ugr,pgr,IX,_gr,bgr,vgr,R4,bbe,Fgr,Tgr,qX,Mgr,Egr,Cgr,B4,vbe,wgr,Agr,NX,ygr,Lgr,xgr,P4,Fbe,kgr,Sgr,jX,Rgr,Bgr,Pgr,$4,Tbe,$gr,Igr,DX,qgr,Ngr,jgr,I4,Mbe,Dgr,Ggr,GX,Ogr,Vgr,Xgr,q4,Ebe,zgr,Qgr,OX,Wgr,Hgr,Ugr,Cbe,Jgr,Ygr,Jy,HBe,Sc,N4,wbe,Yy,Kgr,Abe,Zgr,UBe,wr,Ky,ehr,Rc,ohr,VX,rhr,thr,XX,ahr,nhr,shr,Zy,lhr,ybe,ihr,dhr,chr,vt,e8,mhr,Lbe,fhr,ghr,Bc,hhr,xbe,uhr,phr,zX,_hr,bhr,vhr,kbe,Fhr,Thr,o8,Mhr,Fo,r8,Ehr,Sbe,Chr,whr,En,Ahr,Rbe,yhr,Lhr,Bbe,xhr,khr,Pbe,Shr,Rhr,Bhr,V,j4,$be,Phr,$hr,QX,Ihr,qhr,Nhr,D4,Ibe,jhr,Dhr,WX,Ghr,Ohr,Vhr,G4,qbe,Xhr,zhr,HX,Qhr,Whr,Hhr,O4,Nbe,Uhr,Jhr,UX,Yhr,Khr,Zhr,V4,jbe,eur,our,JX,rur,tur,aur,X4,Dbe,nur,sur,YX,lur,iur,dur,z4,Gbe,cur,mur,KX,fur,gur,hur,Q4,Obe,uur,pur,ZX,_ur,bur,vur,W4,Vbe,Fur,Tur,ez,Mur,Eur,Cur,H4,Xbe,wur,Aur,oz,yur,Lur,xur,U4,zbe,kur,Sur,rz,Rur,Bur,Pur,J4,Qbe,$ur,Iur,tz,qur,Nur,jur,Y4,Wbe,Dur,Gur,az,Our,Vur,Xur,K4,Hbe,zur,Qur,nz,Wur,Hur,Uur,Z4,Ube,Jur,Yur,sz,Kur,Zur,epr,eE,Jbe,opr,rpr,lz,tpr,apr,npr,oE,Ybe,spr,lpr,iz,ipr,dpr,cpr,rE,Kbe,mpr,fpr,dz,gpr,hpr,upr,tE,Zbe,ppr,_pr,cz,bpr,vpr,Fpr,aE,e2e,Tpr,Mpr,mz,Epr,Cpr,wpr,nE,o2e,Apr,ypr,fz,Lpr,xpr,kpr,sE,r2e,Spr,Rpr,gz,Bpr,Ppr,$pr,lE,t2e,Ipr,qpr,hz,Npr,jpr,Dpr,iE,a2e,Gpr,Opr,uz,Vpr,Xpr,zpr,dE,n2e,Qpr,Wpr,pz,Hpr,Upr,Jpr,cE,s2e,Ypr,Kpr,_z,Zpr,e_r,o_r,l2e,r_r,t_r,t8,JBe,Pc,mE,i2e,a8,a_r,d2e,n_r,YBe,Ar,n8,s_r,$c,l_r,bz,i_r,d_r,vz,c_r,m_r,f_r,s8,g_r,c2e,h_r,u_r,p_r,Ft,l8,__r,m2e,b_r,v_r,Ic,F_r,f2e,T_r,M_r,Fz,E_r,C_r,w_r,g2e,A_r,y_r,i8,L_r,To,d8,x_r,h2e,k_r,S_r,Cn,R_r,u2e,B_r,P_r,p2e,$_r,I_r,_2e,q_r,N_r,j_r,se,fE,b2e,D_r,G_r,Tz,O_r,V_r,X_r,gE,v2e,z_r,Q_r,Mz,W_r,H_r,U_r,hE,F2e,J_r,Y_r,Ez,K_r,Z_r,ebr,uE,T2e,obr,rbr,Cz,tbr,abr,nbr,pE,M2e,sbr,lbr,wz,ibr,dbr,cbr,_E,E2e,mbr,fbr,Az,gbr,hbr,ubr,bE,C2e,pbr,_br,yz,bbr,vbr,Fbr,vE,w2e,Tbr,Mbr,Lz,Ebr,Cbr,wbr,FE,A2e,Abr,ybr,xz,Lbr,xbr,kbr,TE,y2e,Sbr,Rbr,kz,Bbr,Pbr,$br,ME,L2e,Ibr,qbr,Sz,Nbr,jbr,Dbr,EE,x2e,Gbr,Obr,Rz,Vbr,Xbr,zbr,CE,k2e,Qbr,Wbr,Bz,Hbr,Ubr,Jbr,wE,S2e,Ybr,Kbr,Pz,Zbr,e2r,o2r,AE,R2e,r2r,t2r,$z,a2r,n2r,s2r,yE,B2e,l2r,i2r,Iz,d2r,c2r,m2r,LE,P2e,f2r,g2r,qz,h2r,u2r,p2r,$2e,_2r,b2r,c8,KBe,qc,xE,I2e,m8,v2r,q2e,F2r,ZBe,yr,f8,T2r,Nc,M2r,Nz,E2r,C2r,jz,w2r,A2r,y2r,g8,L2r,N2e,x2r,k2r,S2r,Tt,h8,R2r,j2e,B2r,P2r,jc,$2r,D2e,I2r,q2r,Dz,N2r,j2r,D2r,G2e,G2r,O2r,u8,V2r,Mo,p8,X2r,O2e,z2r,Q2r,wn,W2r,V2e,H2r,U2r,X2e,J2r,Y2r,z2e,K2r,Z2r,evr,Q2e,kE,W2e,ovr,rvr,Gz,tvr,avr,nvr,H2e,svr,lvr,_8,ePe,Dc,SE,U2e,b8,ivr,J2e,dvr,oPe,Lr,v8,cvr,Gc,mvr,Oz,fvr,gvr,Vz,hvr,uvr,pvr,F8,_vr,Y2e,bvr,vvr,Fvr,Mt,T8,Tvr,K2e,Mvr,Evr,Oc,Cvr,Z2e,wvr,Avr,Xz,yvr,Lvr,xvr,eve,kvr,Svr,M8,Rvr,Eo,E8,Bvr,ove,Pvr,$vr,An,Ivr,rve,qvr,Nvr,tve,jvr,Dvr,ave,Gvr,Ovr,Vvr,Y,RE,nve,Xvr,zvr,zz,Qvr,Wvr,Hvr,BE,sve,Uvr,Jvr,Qz,Yvr,Kvr,Zvr,PE,lve,eFr,oFr,Wz,rFr,tFr,aFr,$E,ive,nFr,sFr,Hz,lFr,iFr,dFr,IE,dve,cFr,mFr,Uz,fFr,gFr,hFr,qE,cve,uFr,pFr,Jz,_Fr,bFr,vFr,NE,mve,FFr,TFr,Yz,MFr,EFr,CFr,jE,fve,wFr,AFr,Kz,yFr,LFr,xFr,DE,gve,kFr,SFr,Zz,RFr,BFr,PFr,GE,hve,$Fr,IFr,eQ,qFr,NFr,jFr,OE,uve,DFr,GFr,oQ,OFr,VFr,XFr,VE,pve,zFr,QFr,rQ,WFr,HFr,UFr,XE,_ve,JFr,YFr,tQ,KFr,ZFr,e1r,zE,bve,o1r,r1r,aQ,t1r,a1r,n1r,QE,vve,s1r,l1r,nQ,i1r,d1r,c1r,WE,Fve,m1r,f1r,sQ,g1r,h1r,u1r,HE,Tve,p1r,_1r,lQ,b1r,v1r,F1r,UE,Mve,T1r,M1r,iQ,E1r,C1r,w1r,JE,Eve,A1r,y1r,dQ,L1r,x1r,k1r,YE,Cve,S1r,R1r,cQ,B1r,P1r,$1r,wve,I1r,q1r,C8,rPe,Vc,KE,Ave,w8,N1r,yve,j1r,tPe,xr,A8,D1r,Xc,G1r,mQ,O1r,V1r,fQ,X1r,z1r,Q1r,y8,W1r,Lve,H1r,U1r,J1r,Et,L8,Y1r,xve,K1r,Z1r,zc,eTr,kve,oTr,rTr,gQ,tTr,aTr,nTr,Sve,sTr,lTr,x8,iTr,Co,k8,dTr,Rve,cTr,mTr,yn,fTr,Bve,gTr,hTr,Pve,uTr,pTr,$ve,_Tr,bTr,vTr,K,ZE,Ive,FTr,TTr,hQ,MTr,ETr,CTr,e5,qve,wTr,ATr,uQ,yTr,LTr,xTr,o5,Nve,kTr,STr,pQ,RTr,BTr,PTr,r5,jve,$Tr,ITr,_Q,qTr,NTr,jTr,t5,Dve,DTr,GTr,bQ,OTr,VTr,XTr,a5,Gve,zTr,QTr,vQ,WTr,HTr,UTr,n5,Ove,JTr,YTr,FQ,KTr,ZTr,eMr,s5,Vve,oMr,rMr,TQ,tMr,aMr,nMr,l5,Xve,sMr,lMr,MQ,iMr,dMr,cMr,i5,zve,mMr,fMr,EQ,gMr,hMr,uMr,d5,Qve,pMr,_Mr,CQ,bMr,vMr,FMr,c5,Wve,TMr,MMr,wQ,EMr,CMr,wMr,m5,Hve,AMr,yMr,AQ,LMr,xMr,kMr,f5,Uve,SMr,RMr,yQ,BMr,PMr,$Mr,g5,Jve,IMr,qMr,LQ,NMr,jMr,DMr,h5,Yve,GMr,OMr,xQ,VMr,XMr,zMr,u5,Kve,QMr,WMr,kQ,HMr,UMr,JMr,p5,Zve,YMr,KMr,SQ,ZMr,e4r,o4r,_5,eFe,r4r,t4r,RQ,a4r,n4r,s4r,b5,oFe,l4r,i4r,BQ,d4r,c4r,m4r,rFe,f4r,g4r,S8,aPe,Qc,v5,tFe,R8,h4r,aFe,u4r,nPe,kr,B8,p4r,Wc,_4r,PQ,b4r,v4r,$Q,F4r,T4r,M4r,P8,E4r,nFe,C4r,w4r,A4r,Ct,$8,y4r,sFe,L4r,x4r,Hc,k4r,lFe,S4r,R4r,IQ,B4r,P4r,$4r,iFe,I4r,q4r,I8,N4r,wo,q8,j4r,dFe,D4r,G4r,Ln,O4r,cFe,V4r,X4r,mFe,z4r,Q4r,fFe,W4r,H4r,U4r,gFe,F5,hFe,J4r,Y4r,qQ,K4r,Z4r,eEr,uFe,oEr,rEr,N8,sPe,Uc,T5,pFe,j8,tEr,_Fe,aEr,lPe,Sr,D8,nEr,Jc,sEr,NQ,lEr,iEr,jQ,dEr,cEr,mEr,G8,fEr,bFe,gEr,hEr,uEr,wt,O8,pEr,vFe,_Er,bEr,Yc,vEr,FFe,FEr,TEr,DQ,MEr,EEr,CEr,TFe,wEr,AEr,V8,yEr,Ao,X8,LEr,MFe,xEr,kEr,xn,SEr,EFe,REr,BEr,CFe,PEr,$Er,wFe,IEr,qEr,NEr,AFe,M5,yFe,jEr,DEr,GQ,GEr,OEr,VEr,LFe,XEr,zEr,z8,iPe,Kc,E5,xFe,Q8,QEr,kFe,WEr,dPe,Rr,W8,HEr,Zc,UEr,OQ,JEr,YEr,VQ,KEr,ZEr,e5r,H8,o5r,SFe,r5r,t5r,a5r,At,U8,n5r,RFe,s5r,l5r,em,i5r,BFe,d5r,c5r,XQ,m5r,f5r,g5r,PFe,h5r,u5r,J8,p5r,yo,Y8,_5r,$Fe,b5r,v5r,kn,F5r,IFe,T5r,M5r,qFe,E5r,C5r,NFe,w5r,A5r,y5r,z,C5,jFe,L5r,x5r,zQ,k5r,S5r,R5r,w5,DFe,B5r,P5r,QQ,$5r,I5r,q5r,A5,GFe,N5r,j5r,WQ,D5r,G5r,O5r,y5,OFe,V5r,X5r,HQ,z5r,Q5r,W5r,L5,VFe,H5r,U5r,UQ,J5r,Y5r,K5r,x5,XFe,Z5r,e3r,JQ,o3r,r3r,t3r,k5,zFe,a3r,n3r,YQ,s3r,l3r,i3r,S5,QFe,d3r,c3r,KQ,m3r,f3r,g3r,R5,WFe,h3r,u3r,ZQ,p3r,_3r,b3r,B5,HFe,v3r,F3r,eW,T3r,M3r,E3r,P5,UFe,C3r,w3r,oW,A3r,y3r,L3r,$5,JFe,x3r,k3r,rW,S3r,R3r,B3r,I5,YFe,P3r,$3r,tW,I3r,q3r,N3r,q5,KFe,j3r,D3r,aW,G3r,O3r,V3r,N5,ZFe,X3r,z3r,nW,Q3r,W3r,H3r,j5,e1e,U3r,J3r,sW,Y3r,K3r,Z3r,D5,o1e,eCr,oCr,lW,rCr,tCr,aCr,G5,r1e,nCr,sCr,iW,lCr,iCr,dCr,O5,t1e,cCr,mCr,dW,fCr,gCr,hCr,V5,a1e,uCr,pCr,cW,_Cr,bCr,vCr,X5,n1e,FCr,TCr,mW,MCr,ECr,CCr,z5,s1e,wCr,ACr,fW,yCr,LCr,xCr,Q5,l1e,kCr,SCr,gW,RCr,BCr,PCr,W5,i1e,$Cr,ICr,hW,qCr,NCr,jCr,H5,d1e,DCr,GCr,uW,OCr,VCr,XCr,c1e,zCr,QCr,K8,cPe,om,U5,m1e,Z8,WCr,f1e,HCr,mPe,Br,eL,UCr,rm,JCr,pW,YCr,KCr,_W,ZCr,ewr,owr,oL,rwr,g1e,twr,awr,nwr,yt,rL,swr,h1e,lwr,iwr,tm,dwr,u1e,cwr,mwr,bW,fwr,gwr,hwr,p1e,uwr,pwr,tL,_wr,Lo,aL,bwr,_1e,vwr,Fwr,Sn,Twr,b1e,Mwr,Ewr,v1e,Cwr,wwr,F1e,Awr,ywr,Lwr,ca,J5,T1e,xwr,kwr,vW,Swr,Rwr,Bwr,Y5,M1e,Pwr,$wr,FW,Iwr,qwr,Nwr,K5,E1e,jwr,Dwr,TW,Gwr,Owr,Vwr,Z5,C1e,Xwr,zwr,MW,Qwr,Wwr,Hwr,e3,w1e,Uwr,Jwr,EW,Ywr,Kwr,Zwr,A1e,e6r,o6r,nL,fPe,am,o3,y1e,sL,r6r,L1e,t6r,gPe,Pr,lL,a6r,nm,n6r,CW,s6r,l6r,wW,i6r,d6r,c6r,iL,m6r,x1e,f6r,g6r,h6r,Lt,dL,u6r,k1e,p6r,_6r,sm,b6r,S1e,v6r,F6r,AW,T6r,M6r,E6r,R1e,C6r,w6r,cL,A6r,xo,mL,y6r,B1e,L6r,x6r,Rn,k6r,P1e,S6r,R6r,$1e,B6r,P6r,I1e,$6r,I6r,q6r,fe,r3,q1e,N6r,j6r,yW,D6r,G6r,O6r,t3,N1e,V6r,X6r,LW,z6r,Q6r,W6r,a3,j1e,H6r,U6r,xW,J6r,Y6r,K6r,n3,D1e,Z6r,eAr,kW,oAr,rAr,tAr,s3,G1e,aAr,nAr,SW,sAr,lAr,iAr,l3,O1e,dAr,cAr,RW,mAr,fAr,gAr,i3,V1e,hAr,uAr,BW,pAr,_Ar,bAr,d3,X1e,vAr,FAr,PW,TAr,MAr,EAr,c3,z1e,CAr,wAr,$W,AAr,yAr,LAr,m3,Q1e,xAr,kAr,IW,SAr,RAr,BAr,f3,W1e,PAr,$Ar,qW,IAr,qAr,NAr,g3,H1e,jAr,DAr,NW,GAr,OAr,VAr,U1e,XAr,zAr,fL,hPe,lm,h3,J1e,gL,QAr,Y1e,WAr,uPe,$r,hL,HAr,im,UAr,jW,JAr,YAr,DW,KAr,ZAr,e0r,uL,o0r,K1e,r0r,t0r,a0r,xt,pL,n0r,Z1e,s0r,l0r,dm,i0r,eTe,d0r,c0r,GW,m0r,f0r,g0r,oTe,h0r,u0r,_L,p0r,ko,bL,_0r,rTe,b0r,v0r,Bn,F0r,tTe,T0r,M0r,aTe,E0r,C0r,nTe,w0r,A0r,y0r,ve,u3,sTe,L0r,x0r,OW,k0r,S0r,R0r,p3,lTe,B0r,P0r,VW,$0r,I0r,q0r,_3,iTe,N0r,j0r,XW,D0r,G0r,O0r,b3,dTe,V0r,X0r,zW,z0r,Q0r,W0r,v3,cTe,H0r,U0r,QW,J0r,Y0r,K0r,F3,mTe,Z0r,eyr,WW,oyr,ryr,tyr,T3,fTe,ayr,nyr,HW,syr,lyr,iyr,M3,gTe,dyr,cyr,UW,myr,fyr,gyr,E3,hTe,hyr,uyr,JW,pyr,_yr,byr,C3,uTe,vyr,Fyr,YW,Tyr,Myr,Eyr,pTe,Cyr,wyr,vL,pPe,cm,w3,_Te,FL,Ayr,bTe,yyr,_Pe,Ir,TL,Lyr,mm,xyr,KW,kyr,Syr,ZW,Ryr,Byr,Pyr,ML,$yr,vTe,Iyr,qyr,Nyr,kt,EL,jyr,FTe,Dyr,Gyr,fm,Oyr,TTe,Vyr,Xyr,eH,zyr,Qyr,Wyr,MTe,Hyr,Uyr,CL,Jyr,So,wL,Yyr,ETe,Kyr,Zyr,Pn,e8r,CTe,o8r,r8r,wTe,t8r,a8r,ATe,n8r,s8r,l8r,Ee,A3,yTe,i8r,d8r,oH,c8r,m8r,f8r,y3,LTe,g8r,h8r,rH,u8r,p8r,_8r,L3,xTe,b8r,v8r,tH,F8r,T8r,M8r,x3,kTe,E8r,C8r,aH,w8r,A8r,y8r,k3,STe,L8r,x8r,nH,k8r,S8r,R8r,S3,RTe,B8r,P8r,sH,$8r,I8r,q8r,R3,BTe,N8r,j8r,lH,D8r,G8r,O8r,B3,PTe,V8r,X8r,iH,z8r,Q8r,W8r,P3,$Te,H8r,U8r,dH,J8r,Y8r,K8r,ITe,Z8r,eLr,AL,bPe,gm,$3,qTe,yL,oLr,NTe,rLr,vPe,qr,LL,tLr,hm,aLr,cH,nLr,sLr,mH,lLr,iLr,dLr,xL,cLr,jTe,mLr,fLr,gLr,St,kL,hLr,DTe,uLr,pLr,um,_Lr,GTe,bLr,vLr,fH,FLr,TLr,MLr,OTe,ELr,CLr,SL,wLr,Ro,RL,ALr,VTe,yLr,LLr,$n,xLr,XTe,kLr,SLr,zTe,RLr,BLr,QTe,PLr,$Lr,ILr,Fe,I3,WTe,qLr,NLr,gH,jLr,DLr,GLr,q3,HTe,OLr,VLr,hH,XLr,zLr,QLr,N3,UTe,WLr,HLr,uH,ULr,JLr,YLr,j3,JTe,KLr,ZLr,pH,e7r,o7r,r7r,D3,YTe,t7r,a7r,_H,n7r,s7r,l7r,G3,KTe,i7r,d7r,bH,c7r,m7r,f7r,O3,ZTe,g7r,h7r,vH,u7r,p7r,_7r,V3,eMe,b7r,v7r,FH,F7r,T7r,M7r,X3,oMe,E7r,C7r,TH,w7r,A7r,y7r,z3,rMe,L7r,x7r,MH,k7r,S7r,R7r,tMe,B7r,P7r,BL,FPe,pm,Q3,aMe,PL,$7r,nMe,I7r,TPe,Nr,$L,q7r,_m,N7r,EH,j7r,D7r,CH,G7r,O7r,V7r,IL,X7r,sMe,z7r,Q7r,W7r,Rt,qL,H7r,lMe,U7r,J7r,bm,Y7r,iMe,K7r,Z7r,wH,e9r,o9r,r9r,dMe,t9r,a9r,NL,n9r,Bo,jL,s9r,cMe,l9r,i9r,In,d9r,mMe,c9r,m9r,fMe,f9r,g9r,gMe,h9r,u9r,p9r,Te,W3,hMe,_9r,b9r,AH,v9r,F9r,T9r,H3,uMe,M9r,E9r,yH,C9r,w9r,A9r,U3,pMe,y9r,L9r,LH,x9r,k9r,S9r,J3,_Me,R9r,B9r,xH,P9r,$9r,I9r,Y3,bMe,q9r,N9r,kH,j9r,D9r,G9r,K3,vMe,O9r,V9r,SH,X9r,z9r,Q9r,Z3,FMe,W9r,H9r,RH,U9r,J9r,Y9r,eC,TMe,K9r,Z9r,BH,exr,oxr,rxr,oC,MMe,txr,axr,PH,nxr,sxr,lxr,rC,EMe,ixr,dxr,$H,cxr,mxr,fxr,CMe,gxr,hxr,DL,MPe,vm,tC,wMe,GL,uxr,AMe,pxr,EPe,jr,OL,_xr,Fm,bxr,IH,vxr,Fxr,qH,Txr,Mxr,Exr,VL,Cxr,yMe,wxr,Axr,yxr,Bt,XL,Lxr,LMe,xxr,kxr,Tm,Sxr,xMe,Rxr,Bxr,NH,Pxr,$xr,Ixr,kMe,qxr,Nxr,zL,jxr,Po,QL,Dxr,SMe,Gxr,Oxr,qn,Vxr,RMe,Xxr,zxr,BMe,Qxr,Wxr,PMe,Hxr,Uxr,Jxr,Be,aC,$Me,Yxr,Kxr,jH,Zxr,ekr,okr,nC,IMe,rkr,tkr,DH,akr,nkr,skr,sC,qMe,lkr,ikr,GH,dkr,ckr,mkr,lC,NMe,fkr,gkr,OH,hkr,ukr,pkr,iC,jMe,_kr,bkr,VH,vkr,Fkr,Tkr,dC,DMe,Mkr,Ekr,XH,Ckr,wkr,Akr,cC,GMe,ykr,Lkr,zH,xkr,kkr,Skr,mC,OMe,Rkr,Bkr,QH,Pkr,$kr,Ikr,VMe,qkr,Nkr,WL,CPe,Mm,fC,XMe,HL,jkr,zMe,Dkr,wPe,Dr,UL,Gkr,Em,Okr,WH,Vkr,Xkr,HH,zkr,Qkr,Wkr,JL,Hkr,QMe,Ukr,Jkr,Ykr,Pt,YL,Kkr,WMe,Zkr,eSr,Cm,oSr,HMe,rSr,tSr,UH,aSr,nSr,sSr,UMe,lSr,iSr,KL,dSr,$o,ZL,cSr,JMe,mSr,fSr,Nn,gSr,YMe,hSr,uSr,KMe,pSr,_Sr,ZMe,bSr,vSr,FSr,Pe,gC,e4e,TSr,MSr,JH,ESr,CSr,wSr,hC,o4e,ASr,ySr,YH,LSr,xSr,kSr,uC,r4e,SSr,RSr,KH,BSr,PSr,$Sr,pC,t4e,ISr,qSr,ZH,NSr,jSr,DSr,_C,a4e,GSr,OSr,eU,VSr,XSr,zSr,bC,n4e,QSr,WSr,oU,HSr,USr,JSr,vC,s4e,YSr,KSr,rU,ZSr,eRr,oRr,FC,l4e,rRr,tRr,tU,aRr,nRr,sRr,i4e,lRr,iRr,e7,APe,wm,TC,d4e,o7,dRr,c4e,cRr,yPe,Gr,r7,mRr,Am,fRr,aU,gRr,hRr,nU,uRr,pRr,_Rr,t7,bRr,m4e,vRr,FRr,TRr,$t,a7,MRr,f4e,ERr,CRr,ym,wRr,g4e,ARr,yRr,sU,LRr,xRr,kRr,h4e,SRr,RRr,n7,BRr,Io,s7,PRr,u4e,$Rr,IRr,jn,qRr,p4e,NRr,jRr,_4e,DRr,GRr,b4e,ORr,VRr,XRr,v4e,MC,F4e,zRr,QRr,lU,WRr,HRr,URr,T4e,JRr,YRr,l7,LPe,Lm,EC,M4e,i7,KRr,E4e,ZRr,xPe,Or,d7,eBr,xm,oBr,iU,rBr,tBr,dU,aBr,nBr,sBr,c7,lBr,C4e,iBr,dBr,cBr,It,m7,mBr,w4e,fBr,gBr,km,hBr,A4e,uBr,pBr,cU,_Br,bBr,vBr,y4e,FBr,TBr,f7,MBr,qo,g7,EBr,L4e,CBr,wBr,Dn,ABr,x4e,yBr,LBr,k4e,xBr,kBr,S4e,SBr,RBr,BBr,h7,CC,R4e,PBr,$Br,mU,IBr,qBr,NBr,wC,B4e,jBr,DBr,fU,GBr,OBr,VBr,P4e,XBr,zBr,u7,kPe,Sm,AC,$4e,p7,QBr,I4e,WBr,SPe,Vr,_7,HBr,Rm,UBr,gU,JBr,YBr,hU,KBr,ZBr,ePr,b7,oPr,q4e,rPr,tPr,aPr,qt,v7,nPr,N4e,sPr,lPr,Bm,iPr,j4e,dPr,cPr,uU,mPr,fPr,gPr,D4e,hPr,uPr,F7,pPr,No,T7,_Pr,G4e,bPr,vPr,Gn,FPr,O4e,TPr,MPr,V4e,EPr,CPr,X4e,wPr,APr,yPr,z4e,yC,Q4e,LPr,xPr,pU,kPr,SPr,RPr,W4e,BPr,PPr,M7,RPe;return he=new X({}),Da=new A({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),Rw=new X({}),Bw=new A({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Gm=new $Pr({props:{warning:!0,$$slots:{default:[w6t]},$$scope:{ctx:$m}}}),Pw=new X({}),$w=new C({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/configuration_auto.py#L560"}}),Nw=new C({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/configuration_auto.py#L583"}}),jw=new A({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),Dw=new C({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/configuration_auto.py#L705"}}),Gw=new X({}),Ow=new C({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/tokenization_auto.py#L352"}}),zw=new C({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/main/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/tokenization_auto.py#L366"}}),Qw=new A({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),Ww=new C({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/tokenization_auto.py#L562"}}),Hw=new X({}),Uw=new C({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/feature_extraction_auto.py#L172"}}),Kw=new C({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/main/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/feature_extraction_auto.py#L186"}}),qh=new $Pr({props:{$$slots:{default:[A6t]},$$scope:{ctx:$m}}}),Zw=new A({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),e6=new C({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/feature_extraction_auto.py#L313"}}),o6=new X({}),r6=new C({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/processing_auto.py#L70"}}),n6=new C({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/processing_auto.py#L84"}}),Hh=new $Pr({props:{$$slots:{default:[y6t]},$$scope:{ctx:$m}}}),s6=new A({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),l6=new C({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/processing_auto.py#L237"}}),i6=new X({}),d6=new C({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L714"}}),m6=new C({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),f6=new A({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),g6=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),h6=new A({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),u6=new X({}),p6=new C({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L721"}}),b6=new C({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),v6=new A({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),F6=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),T6=new A({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),M6=new X({}),E6=new C({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L736"}}),w6=new C({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),A6=new A({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),y6=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),L6=new A({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),x6=new X({}),k6=new C({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L743"}}),R6=new C({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),B6=new A({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),P6=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),$6=new A({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),I6=new X({}),q6=new C({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L750"}}),j6=new C({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),D6=new A({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),G6=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),O6=new A({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),V6=new X({}),X6=new C({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L759"}}),Q6=new C({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),W6=new A({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),H6=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),U6=new A({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),J6=new X({}),Y6=new C({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L793"}}),Z6=new C({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),eA=new A({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),oA=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),rA=new A({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),tA=new X({}),aA=new C({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L800"}}),sA=new C({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),lA=new A({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),iA=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),dA=new A({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),cA=new X({}),mA=new C({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L786"}}),gA=new C({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),hA=new A({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),uA=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),pA=new A({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),_A=new X({}),bA=new C({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L768"}}),FA=new C({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),TA=new A({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),MA=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),EA=new A({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),CA=new X({}),wA=new C({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L775"}}),yA=new C({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),LA=new A({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),xA=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),kA=new A({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),SA=new X({}),RA=new C({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L809"}}),PA=new C({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/main/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),$A=new A({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),IA=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),qA=new A({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),NA=new X({}),jA=new C({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L848"}}),GA=new C({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),OA=new A({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),VA=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),XA=new A({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),zA=new X({}),QA=new C({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L855"}}),HA=new C({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),UA=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),JA=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),YA=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),KA=new X({}),ZA=new C({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L878"}}),o0=new C({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),r0=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),t0=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),a0=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),n0=new X({}),s0=new C({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L862"}}),i0=new C({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),d0=new A({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),c0=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),m0=new A({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),f0=new X({}),g0=new C({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L869"}}),u0=new C({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),p0=new A({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),_0=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),v0=new A({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),F0=new X({}),T0=new C({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L887"}}),E0=new C({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),C0=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),w0=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),A0=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),y0=new X({}),L0=new C({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L894"}}),k0=new C({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),S0=new A({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),R0=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),B0=new A({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),P0=new X({}),$0=new C({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L841"}}),q0=new C({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),N0=new A({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),j0=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),D0=new A({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),G0=new X({}),O0=new C({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L816"}}),X0=new C({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),z0=new A({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),Q0=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),W0=new A({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),H0=new X({}),U0=new C({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L823"}}),Y0=new C({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),K0=new A({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),Z0=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),ey=new A({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),oy=new X({}),ry=new C({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_auto.py#L832"}}),ay=new C({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),ny=new A({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),sy=new C({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),ly=new A({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),iy=new X({}),dy=new C({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L381"}}),my=new C({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/main/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),fy=new A({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),gy=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),hy=new A({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),uy=new X({}),py=new C({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L388"}}),by=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),vy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),Fy=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Ty=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),My=new X({}),Ey=new C({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L403"}}),wy=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Ay=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),yy=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Ly=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),xy=new X({}),ky=new C({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L410"}}),Ry=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),By=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),Py=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Iy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),qy=new X({}),Ny=new C({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L424"}}),Dy=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Gy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),Oy=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Vy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Xy=new X({}),zy=new C({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L431"}}),Wy=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),Hy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),Uy=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),Jy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Yy=new X({}),Ky=new C({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L440"}}),e8=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),o8=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),r8=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),t8=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),a8=new X({}),n8=new C({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L476"}}),l8=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),i8=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),d8=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),c8=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),m8=new X({}),f8=new C({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L456"}}),h8=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),u8=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),p8=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),_8=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),b8=new X({}),v8=new C({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L467"}}),T8=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),M8=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),E8=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),C8=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),w8=new X({}),A8=new C({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L449"}}),L8=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),x8=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),k8=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),S8=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),R8=new X({}),B8=new C({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L417"}}),$8=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),I8=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),q8=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),N8=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),j8=new X({}),D8=new C({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_tf_auto.py#L492"}}),O8=new C({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),V8=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),X8=new C({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),z8=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Q8=new X({}),W8=new C({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L237"}}),U8=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),J8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),Y8=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),K8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Z8=new X({}),eL=new C({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L251"}}),rL=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),tL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),aL=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),nL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),sL=new X({}),lL=new C({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L244"}}),dL=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),cL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),mL=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),fL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),gL=new X({}),hL=new C({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L258"}}),pL=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),_L=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),bL=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),vL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),FL=new X({}),TL=new C({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L265"}}),EL=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/main/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),CL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),wL=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),AL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),yL=new X({}),LL=new C({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),kL=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),SL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),RL=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),BL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),PL=new X({}),$L=new C({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),qL=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),NL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),jL=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),DL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),GL=new X({}),OL=new C({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L290"}}),XL=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),zL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),QL=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),WL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),HL=new X({}),UL=new C({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),YL=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),KL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),ZL=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),e7=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),o7=new X({}),r7=new C({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L306"}}),a7=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),n7=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),s7=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),l7=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),i7=new X({}),d7=new C({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),m7=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),f7=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),g7=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),u7=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),p7=new X({}),_7=new C({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),v7=new C({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L389"}}),F7=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),T7=new C({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/main/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/main/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/main/src/transformers/models/auto/auto_factory.py#L417"}}),M7=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){Z=a("meta"),io=l(),ce=a("h1"),Ce=a("a"),lo=a("span"),m(he.$$.fragment),Me=l(),Xo=a("span"),qi=o("Auto Classes"),Im=l(),ma=a("p"),Ni=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),ji=a("code"),Lw=o("from_pretrained()"),qm=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),xe=l(),co=a("p"),Di=o("Instantiating one of "),On=a("a"),xw=o("AutoConfig"),Vn=o(", "),Xn=a("a"),kw=o("AutoModel"),Gi=o(`, and
`),zn=a("a"),Sw=o("AutoTokenizer"),Oi=o(" will directly create a class of the relevant architecture. For instance"),Nm=l(),m(Da.$$.fragment),mo=l(),_e=a("p"),F9=o("will create a model that is an instance of "),Vi=a("a"),T9=o("BertModel"),M9=o("."),zo=l(),Ga=a("p"),E9=o("There is one class of "),jm=a("code"),C9=o("AutoModel"),XIe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),SRe=l(),Xi=a("h2"),Dm=a("a"),dY=a("span"),m(Rw.$$.fragment),zIe=l(),cY=a("span"),QIe=o("Extending the Auto Classes"),RRe=l(),Qn=a("p"),WIe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),mY=a("code"),HIe=o("NewModel"),UIe=o(", make sure you have a "),fY=a("code"),JIe=o("NewModelConfig"),YIe=o(` then you can add those to the auto
classes like this:`),BRe=l(),m(Bw.$$.fragment),PRe=l(),w9=a("p"),KIe=o("You will then be able to use the auto classes like you would usually do!"),$Re=l(),m(Gm.$$.fragment),IRe=l(),zi=a("h2"),Om=a("a"),gY=a("span"),m(Pw.$$.fragment),ZIe=l(),hY=a("span"),eqe=o("AutoConfig"),qRe=l(),Qo=a("div"),m($w.$$.fragment),oqe=l(),Iw=a("p"),rqe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),A9=a("a"),tqe=o("from_pretrained()"),aqe=o(" class method."),nqe=l(),qw=a("p"),sqe=o("This class cannot be instantiated directly using "),uY=a("code"),lqe=o("__init__()"),iqe=o(" (throws an error)."),dqe=l(),fo=a("div"),m(Nw.$$.fragment),cqe=l(),pY=a("p"),mqe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),fqe=l(),Qi=a("p"),gqe=o("The configuration class to instantiate is selected based on the "),_Y=a("code"),hqe=o("model_type"),uqe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),bY=a("code"),pqe=o("pretrained_model_name_or_path"),_qe=o(":"),bqe=l(),v=a("ul"),Vm=a("li"),vY=a("strong"),vqe=o("albert"),Fqe=o(" \u2014 "),y9=a("a"),Tqe=o("AlbertConfig"),Mqe=o(" (ALBERT model)"),Eqe=l(),Xm=a("li"),FY=a("strong"),Cqe=o("bart"),wqe=o(" \u2014 "),L9=a("a"),Aqe=o("BartConfig"),yqe=o(" (BART model)"),Lqe=l(),zm=a("li"),TY=a("strong"),xqe=o("beit"),kqe=o(" \u2014 "),x9=a("a"),Sqe=o("BeitConfig"),Rqe=o(" (BEiT model)"),Bqe=l(),Qm=a("li"),MY=a("strong"),Pqe=o("bert"),$qe=o(" \u2014 "),k9=a("a"),Iqe=o("BertConfig"),qqe=o(" (BERT model)"),Nqe=l(),Wm=a("li"),EY=a("strong"),jqe=o("bert-generation"),Dqe=o(" \u2014 "),S9=a("a"),Gqe=o("BertGenerationConfig"),Oqe=o(" (Bert Generation model)"),Vqe=l(),Hm=a("li"),CY=a("strong"),Xqe=o("big_bird"),zqe=o(" \u2014 "),R9=a("a"),Qqe=o("BigBirdConfig"),Wqe=o(" (BigBird model)"),Hqe=l(),Um=a("li"),wY=a("strong"),Uqe=o("bigbird_pegasus"),Jqe=o(" \u2014 "),B9=a("a"),Yqe=o("BigBirdPegasusConfig"),Kqe=o(" (BigBirdPegasus model)"),Zqe=l(),Jm=a("li"),AY=a("strong"),eNe=o("blenderbot"),oNe=o(" \u2014 "),P9=a("a"),rNe=o("BlenderbotConfig"),tNe=o(" (Blenderbot model)"),aNe=l(),Ym=a("li"),yY=a("strong"),nNe=o("blenderbot-small"),sNe=o(" \u2014 "),$9=a("a"),lNe=o("BlenderbotSmallConfig"),iNe=o(" (BlenderbotSmall model)"),dNe=l(),Km=a("li"),LY=a("strong"),cNe=o("camembert"),mNe=o(" \u2014 "),I9=a("a"),fNe=o("CamembertConfig"),gNe=o(" (CamemBERT model)"),hNe=l(),Zm=a("li"),xY=a("strong"),uNe=o("canine"),pNe=o(" \u2014 "),q9=a("a"),_Ne=o("CanineConfig"),bNe=o(" (Canine model)"),vNe=l(),ef=a("li"),kY=a("strong"),FNe=o("clip"),TNe=o(" \u2014 "),N9=a("a"),MNe=o("CLIPConfig"),ENe=o(" (CLIP model)"),CNe=l(),of=a("li"),SY=a("strong"),wNe=o("convbert"),ANe=o(" \u2014 "),j9=a("a"),yNe=o("ConvBertConfig"),LNe=o(" (ConvBERT model)"),xNe=l(),rf=a("li"),RY=a("strong"),kNe=o("convnext"),SNe=o(" \u2014 "),D9=a("a"),RNe=o("ConvNextConfig"),BNe=o(" (ConvNext model)"),PNe=l(),tf=a("li"),BY=a("strong"),$Ne=o("ctrl"),INe=o(" \u2014 "),G9=a("a"),qNe=o("CTRLConfig"),NNe=o(" (CTRL model)"),jNe=l(),af=a("li"),PY=a("strong"),DNe=o("data2vec-audio"),GNe=o(" \u2014 "),O9=a("a"),ONe=o("Data2VecAudioConfig"),VNe=o(" (Data2VecAudio model)"),XNe=l(),nf=a("li"),$Y=a("strong"),zNe=o("data2vec-text"),QNe=o(" \u2014 "),V9=a("a"),WNe=o("Data2VecTextConfig"),HNe=o(" (Data2VecText model)"),UNe=l(),sf=a("li"),IY=a("strong"),JNe=o("data2vec-vision"),YNe=o(" \u2014 "),X9=a("a"),KNe=o("Data2VecVisionConfig"),ZNe=o(" (Data2VecVision model)"),eje=l(),lf=a("li"),qY=a("strong"),oje=o("deberta"),rje=o(" \u2014 "),z9=a("a"),tje=o("DebertaConfig"),aje=o(" (DeBERTa model)"),nje=l(),df=a("li"),NY=a("strong"),sje=o("deberta-v2"),lje=o(" \u2014 "),Q9=a("a"),ije=o("DebertaV2Config"),dje=o(" (DeBERTa-v2 model)"),cje=l(),cf=a("li"),jY=a("strong"),mje=o("decision_transformer"),fje=o(" \u2014 "),W9=a("a"),gje=o("DecisionTransformerConfig"),hje=o(" (Decision Transformer model)"),uje=l(),mf=a("li"),DY=a("strong"),pje=o("deit"),_je=o(" \u2014 "),H9=a("a"),bje=o("DeiTConfig"),vje=o(" (DeiT model)"),Fje=l(),ff=a("li"),GY=a("strong"),Tje=o("detr"),Mje=o(" \u2014 "),U9=a("a"),Eje=o("DetrConfig"),Cje=o(" (DETR model)"),wje=l(),gf=a("li"),OY=a("strong"),Aje=o("distilbert"),yje=o(" \u2014 "),J9=a("a"),Lje=o("DistilBertConfig"),xje=o(" (DistilBERT model)"),kje=l(),hf=a("li"),VY=a("strong"),Sje=o("dpr"),Rje=o(" \u2014 "),Y9=a("a"),Bje=o("DPRConfig"),Pje=o(" (DPR model)"),$je=l(),uf=a("li"),XY=a("strong"),Ije=o("dpt"),qje=o(" \u2014 "),K9=a("a"),Nje=o("DPTConfig"),jje=o(" (DPT model)"),Dje=l(),pf=a("li"),zY=a("strong"),Gje=o("electra"),Oje=o(" \u2014 "),Z9=a("a"),Vje=o("ElectraConfig"),Xje=o(" (ELECTRA model)"),zje=l(),_f=a("li"),QY=a("strong"),Qje=o("encoder-decoder"),Wje=o(" \u2014 "),ex=a("a"),Hje=o("EncoderDecoderConfig"),Uje=o(" (Encoder decoder model)"),Jje=l(),bf=a("li"),WY=a("strong"),Yje=o("flaubert"),Kje=o(" \u2014 "),ox=a("a"),Zje=o("FlaubertConfig"),eDe=o(" (FlauBERT model)"),oDe=l(),vf=a("li"),HY=a("strong"),rDe=o("fnet"),tDe=o(" \u2014 "),rx=a("a"),aDe=o("FNetConfig"),nDe=o(" (FNet model)"),sDe=l(),Ff=a("li"),UY=a("strong"),lDe=o("fsmt"),iDe=o(" \u2014 "),tx=a("a"),dDe=o("FSMTConfig"),cDe=o(" (FairSeq Machine-Translation model)"),mDe=l(),Tf=a("li"),JY=a("strong"),fDe=o("funnel"),gDe=o(" \u2014 "),ax=a("a"),hDe=o("FunnelConfig"),uDe=o(" (Funnel Transformer model)"),pDe=l(),Mf=a("li"),YY=a("strong"),_De=o("glpn"),bDe=o(" \u2014 "),nx=a("a"),vDe=o("GLPNConfig"),FDe=o(" (GLPN model)"),TDe=l(),Ef=a("li"),KY=a("strong"),MDe=o("gpt2"),EDe=o(" \u2014 "),sx=a("a"),CDe=o("GPT2Config"),wDe=o(" (OpenAI GPT-2 model)"),ADe=l(),Cf=a("li"),ZY=a("strong"),yDe=o("gpt_neo"),LDe=o(" \u2014 "),lx=a("a"),xDe=o("GPTNeoConfig"),kDe=o(" (GPT Neo model)"),SDe=l(),wf=a("li"),eK=a("strong"),RDe=o("gptj"),BDe=o(" \u2014 "),ix=a("a"),PDe=o("GPTJConfig"),$De=o(" (GPT-J model)"),IDe=l(),Af=a("li"),oK=a("strong"),qDe=o("hubert"),NDe=o(" \u2014 "),dx=a("a"),jDe=o("HubertConfig"),DDe=o(" (Hubert model)"),GDe=l(),yf=a("li"),rK=a("strong"),ODe=o("ibert"),VDe=o(" \u2014 "),cx=a("a"),XDe=o("IBertConfig"),zDe=o(" (I-BERT model)"),QDe=l(),Lf=a("li"),tK=a("strong"),WDe=o("imagegpt"),HDe=o(" \u2014 "),mx=a("a"),UDe=o("ImageGPTConfig"),JDe=o(" (ImageGPT model)"),YDe=l(),xf=a("li"),aK=a("strong"),KDe=o("layoutlm"),ZDe=o(" \u2014 "),fx=a("a"),eGe=o("LayoutLMConfig"),oGe=o(" (LayoutLM model)"),rGe=l(),kf=a("li"),nK=a("strong"),tGe=o("layoutlmv2"),aGe=o(" \u2014 "),gx=a("a"),nGe=o("LayoutLMv2Config"),sGe=o(" (LayoutLMv2 model)"),lGe=l(),Sf=a("li"),sK=a("strong"),iGe=o("led"),dGe=o(" \u2014 "),hx=a("a"),cGe=o("LEDConfig"),mGe=o(" (LED model)"),fGe=l(),Rf=a("li"),lK=a("strong"),gGe=o("longformer"),hGe=o(" \u2014 "),ux=a("a"),uGe=o("LongformerConfig"),pGe=o(" (Longformer model)"),_Ge=l(),Bf=a("li"),iK=a("strong"),bGe=o("luke"),vGe=o(" \u2014 "),px=a("a"),FGe=o("LukeConfig"),TGe=o(" (LUKE model)"),MGe=l(),Pf=a("li"),dK=a("strong"),EGe=o("lxmert"),CGe=o(" \u2014 "),_x=a("a"),wGe=o("LxmertConfig"),AGe=o(" (LXMERT model)"),yGe=l(),$f=a("li"),cK=a("strong"),LGe=o("m2m_100"),xGe=o(" \u2014 "),bx=a("a"),kGe=o("M2M100Config"),SGe=o(" (M2M100 model)"),RGe=l(),If=a("li"),mK=a("strong"),BGe=o("marian"),PGe=o(" \u2014 "),vx=a("a"),$Ge=o("MarianConfig"),IGe=o(" (Marian model)"),qGe=l(),qf=a("li"),fK=a("strong"),NGe=o("maskformer"),jGe=o(" \u2014 "),Fx=a("a"),DGe=o("MaskFormerConfig"),GGe=o(" (MaskFormer model)"),OGe=l(),Nf=a("li"),gK=a("strong"),VGe=o("mbart"),XGe=o(" \u2014 "),Tx=a("a"),zGe=o("MBartConfig"),QGe=o(" (mBART model)"),WGe=l(),jf=a("li"),hK=a("strong"),HGe=o("megatron-bert"),UGe=o(" \u2014 "),Mx=a("a"),JGe=o("MegatronBertConfig"),YGe=o(" (MegatronBert model)"),KGe=l(),Df=a("li"),uK=a("strong"),ZGe=o("mobilebert"),eOe=o(" \u2014 "),Ex=a("a"),oOe=o("MobileBertConfig"),rOe=o(" (MobileBERT model)"),tOe=l(),Gf=a("li"),pK=a("strong"),aOe=o("mpnet"),nOe=o(" \u2014 "),Cx=a("a"),sOe=o("MPNetConfig"),lOe=o(" (MPNet model)"),iOe=l(),Of=a("li"),_K=a("strong"),dOe=o("mt5"),cOe=o(" \u2014 "),wx=a("a"),mOe=o("MT5Config"),fOe=o(" (mT5 model)"),gOe=l(),Vf=a("li"),bK=a("strong"),hOe=o("nystromformer"),uOe=o(" \u2014 "),Ax=a("a"),pOe=o("NystromformerConfig"),_Oe=o(" (Nystromformer model)"),bOe=l(),Xf=a("li"),vK=a("strong"),vOe=o("openai-gpt"),FOe=o(" \u2014 "),yx=a("a"),TOe=o("OpenAIGPTConfig"),MOe=o(" (OpenAI GPT model)"),EOe=l(),zf=a("li"),FK=a("strong"),COe=o("pegasus"),wOe=o(" \u2014 "),Lx=a("a"),AOe=o("PegasusConfig"),yOe=o(" (Pegasus model)"),LOe=l(),Qf=a("li"),TK=a("strong"),xOe=o("perceiver"),kOe=o(" \u2014 "),xx=a("a"),SOe=o("PerceiverConfig"),ROe=o(" (Perceiver model)"),BOe=l(),Wf=a("li"),MK=a("strong"),POe=o("plbart"),$Oe=o(" \u2014 "),kx=a("a"),IOe=o("PLBartConfig"),qOe=o(" (PLBart model)"),NOe=l(),Hf=a("li"),EK=a("strong"),jOe=o("poolformer"),DOe=o(" \u2014 "),Sx=a("a"),GOe=o("PoolFormerConfig"),OOe=o(" (PoolFormer model)"),VOe=l(),Uf=a("li"),CK=a("strong"),XOe=o("prophetnet"),zOe=o(" \u2014 "),Rx=a("a"),QOe=o("ProphetNetConfig"),WOe=o(" (ProphetNet model)"),HOe=l(),Jf=a("li"),wK=a("strong"),UOe=o("qdqbert"),JOe=o(" \u2014 "),Bx=a("a"),YOe=o("QDQBertConfig"),KOe=o(" (QDQBert model)"),ZOe=l(),Yf=a("li"),AK=a("strong"),eVe=o("rag"),oVe=o(" \u2014 "),Px=a("a"),rVe=o("RagConfig"),tVe=o(" (RAG model)"),aVe=l(),Kf=a("li"),yK=a("strong"),nVe=o("realm"),sVe=o(" \u2014 "),$x=a("a"),lVe=o("RealmConfig"),iVe=o(" (Realm model)"),dVe=l(),Zf=a("li"),LK=a("strong"),cVe=o("reformer"),mVe=o(" \u2014 "),Ix=a("a"),fVe=o("ReformerConfig"),gVe=o(" (Reformer model)"),hVe=l(),eg=a("li"),xK=a("strong"),uVe=o("regnet"),pVe=o(" \u2014 "),qx=a("a"),_Ve=o("RegNetConfig"),bVe=o(" (RegNet model)"),vVe=l(),og=a("li"),kK=a("strong"),FVe=o("rembert"),TVe=o(" \u2014 "),Nx=a("a"),MVe=o("RemBertConfig"),EVe=o(" (RemBERT model)"),CVe=l(),rg=a("li"),SK=a("strong"),wVe=o("resnet"),AVe=o(" \u2014 "),jx=a("a"),yVe=o("ResNetConfig"),LVe=o(" (ResNet model)"),xVe=l(),tg=a("li"),RK=a("strong"),kVe=o("retribert"),SVe=o(" \u2014 "),Dx=a("a"),RVe=o("RetriBertConfig"),BVe=o(" (RetriBERT model)"),PVe=l(),ag=a("li"),BK=a("strong"),$Ve=o("roberta"),IVe=o(" \u2014 "),Gx=a("a"),qVe=o("RobertaConfig"),NVe=o(" (RoBERTa model)"),jVe=l(),ng=a("li"),PK=a("strong"),DVe=o("roformer"),GVe=o(" \u2014 "),Ox=a("a"),OVe=o("RoFormerConfig"),VVe=o(" (RoFormer model)"),XVe=l(),sg=a("li"),$K=a("strong"),zVe=o("segformer"),QVe=o(" \u2014 "),Vx=a("a"),WVe=o("SegformerConfig"),HVe=o(" (SegFormer model)"),UVe=l(),lg=a("li"),IK=a("strong"),JVe=o("sew"),YVe=o(" \u2014 "),Xx=a("a"),KVe=o("SEWConfig"),ZVe=o(" (SEW model)"),eXe=l(),ig=a("li"),qK=a("strong"),oXe=o("sew-d"),rXe=o(" \u2014 "),zx=a("a"),tXe=o("SEWDConfig"),aXe=o(" (SEW-D model)"),nXe=l(),dg=a("li"),NK=a("strong"),sXe=o("speech-encoder-decoder"),lXe=o(" \u2014 "),Qx=a("a"),iXe=o("SpeechEncoderDecoderConfig"),dXe=o(" (Speech Encoder decoder model)"),cXe=l(),cg=a("li"),jK=a("strong"),mXe=o("speech_to_text"),fXe=o(" \u2014 "),Wx=a("a"),gXe=o("Speech2TextConfig"),hXe=o(" (Speech2Text model)"),uXe=l(),mg=a("li"),DK=a("strong"),pXe=o("speech_to_text_2"),_Xe=o(" \u2014 "),Hx=a("a"),bXe=o("Speech2Text2Config"),vXe=o(" (Speech2Text2 model)"),FXe=l(),fg=a("li"),GK=a("strong"),TXe=o("splinter"),MXe=o(" \u2014 "),Ux=a("a"),EXe=o("SplinterConfig"),CXe=o(" (Splinter model)"),wXe=l(),gg=a("li"),OK=a("strong"),AXe=o("squeezebert"),yXe=o(" \u2014 "),Jx=a("a"),LXe=o("SqueezeBertConfig"),xXe=o(" (SqueezeBERT model)"),kXe=l(),hg=a("li"),VK=a("strong"),SXe=o("swin"),RXe=o(" \u2014 "),Yx=a("a"),BXe=o("SwinConfig"),PXe=o(" (Swin model)"),$Xe=l(),ug=a("li"),XK=a("strong"),IXe=o("t5"),qXe=o(" \u2014 "),Kx=a("a"),NXe=o("T5Config"),jXe=o(" (T5 model)"),DXe=l(),pg=a("li"),zK=a("strong"),GXe=o("tapas"),OXe=o(" \u2014 "),Zx=a("a"),VXe=o("TapasConfig"),XXe=o(" (TAPAS model)"),zXe=l(),_g=a("li"),QK=a("strong"),QXe=o("tapex"),WXe=o(" \u2014 "),ek=a("a"),HXe=o("BartConfig"),UXe=o(" (TAPEX model)"),JXe=l(),bg=a("li"),WK=a("strong"),YXe=o("transfo-xl"),KXe=o(" \u2014 "),ok=a("a"),ZXe=o("TransfoXLConfig"),eze=o(" (Transformer-XL model)"),oze=l(),vg=a("li"),HK=a("strong"),rze=o("trocr"),tze=o(" \u2014 "),rk=a("a"),aze=o("TrOCRConfig"),nze=o(" (TrOCR model)"),sze=l(),Fg=a("li"),UK=a("strong"),lze=o("unispeech"),ize=o(" \u2014 "),tk=a("a"),dze=o("UniSpeechConfig"),cze=o(" (UniSpeech model)"),mze=l(),Tg=a("li"),JK=a("strong"),fze=o("unispeech-sat"),gze=o(" \u2014 "),ak=a("a"),hze=o("UniSpeechSatConfig"),uze=o(" (UniSpeechSat model)"),pze=l(),Mg=a("li"),YK=a("strong"),_ze=o("van"),bze=o(" \u2014 "),nk=a("a"),vze=o("VanConfig"),Fze=o(" (VAN model)"),Tze=l(),Eg=a("li"),KK=a("strong"),Mze=o("vilt"),Eze=o(" \u2014 "),sk=a("a"),Cze=o("ViltConfig"),wze=o(" (ViLT model)"),Aze=l(),Cg=a("li"),ZK=a("strong"),yze=o("vision-encoder-decoder"),Lze=o(" \u2014 "),lk=a("a"),xze=o("VisionEncoderDecoderConfig"),kze=o(" (Vision Encoder decoder model)"),Sze=l(),wg=a("li"),eZ=a("strong"),Rze=o("vision-text-dual-encoder"),Bze=o(" \u2014 "),ik=a("a"),Pze=o("VisionTextDualEncoderConfig"),$ze=o(" (VisionTextDualEncoder model)"),Ize=l(),Ag=a("li"),oZ=a("strong"),qze=o("visual_bert"),Nze=o(" \u2014 "),dk=a("a"),jze=o("VisualBertConfig"),Dze=o(" (VisualBert model)"),Gze=l(),yg=a("li"),rZ=a("strong"),Oze=o("vit"),Vze=o(" \u2014 "),ck=a("a"),Xze=o("ViTConfig"),zze=o(" (ViT model)"),Qze=l(),Lg=a("li"),tZ=a("strong"),Wze=o("vit_mae"),Hze=o(" \u2014 "),mk=a("a"),Uze=o("ViTMAEConfig"),Jze=o(" (ViTMAE model)"),Yze=l(),xg=a("li"),aZ=a("strong"),Kze=o("wav2vec2"),Zze=o(" \u2014 "),fk=a("a"),eQe=o("Wav2Vec2Config"),oQe=o(" (Wav2Vec2 model)"),rQe=l(),kg=a("li"),nZ=a("strong"),tQe=o("wavlm"),aQe=o(" \u2014 "),gk=a("a"),nQe=o("WavLMConfig"),sQe=o(" (WavLM model)"),lQe=l(),Sg=a("li"),sZ=a("strong"),iQe=o("xglm"),dQe=o(" \u2014 "),hk=a("a"),cQe=o("XGLMConfig"),mQe=o(" (XGLM model)"),fQe=l(),Rg=a("li"),lZ=a("strong"),gQe=o("xlm"),hQe=o(" \u2014 "),uk=a("a"),uQe=o("XLMConfig"),pQe=o(" (XLM model)"),_Qe=l(),Bg=a("li"),iZ=a("strong"),bQe=o("xlm-prophetnet"),vQe=o(" \u2014 "),pk=a("a"),FQe=o("XLMProphetNetConfig"),TQe=o(" (XLMProphetNet model)"),MQe=l(),Pg=a("li"),dZ=a("strong"),EQe=o("xlm-roberta"),CQe=o(" \u2014 "),_k=a("a"),wQe=o("XLMRobertaConfig"),AQe=o(" (XLM-RoBERTa model)"),yQe=l(),$g=a("li"),cZ=a("strong"),LQe=o("xlm-roberta-xl"),xQe=o(" \u2014 "),bk=a("a"),kQe=o("XLMRobertaXLConfig"),SQe=o(" (XLM-RoBERTa-XL model)"),RQe=l(),Ig=a("li"),mZ=a("strong"),BQe=o("xlnet"),PQe=o(" \u2014 "),vk=a("a"),$Qe=o("XLNetConfig"),IQe=o(" (XLNet model)"),qQe=l(),qg=a("li"),fZ=a("strong"),NQe=o("yoso"),jQe=o(" \u2014 "),Fk=a("a"),DQe=o("YosoConfig"),GQe=o(" (YOSO model)"),OQe=l(),gZ=a("p"),VQe=o("Examples:"),XQe=l(),m(jw.$$.fragment),zQe=l(),Ng=a("div"),m(Dw.$$.fragment),QQe=l(),hZ=a("p"),WQe=o("Register a new configuration for this class."),NRe=l(),Wi=a("h2"),jg=a("a"),uZ=a("span"),m(Gw.$$.fragment),HQe=l(),pZ=a("span"),UQe=o("AutoTokenizer"),jRe=l(),Wo=a("div"),m(Ow.$$.fragment),JQe=l(),Vw=a("p"),YQe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),Tk=a("a"),KQe=o("AutoTokenizer.from_pretrained()"),ZQe=o(" class method."),eWe=l(),Xw=a("p"),oWe=o("This class cannot be instantiated directly using "),_Z=a("code"),rWe=o("__init__()"),tWe=o(" (throws an error)."),aWe=l(),go=a("div"),m(zw.$$.fragment),nWe=l(),bZ=a("p"),sWe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),lWe=l(),Oa=a("p"),iWe=o("The tokenizer class to instantiate is selected based on the "),vZ=a("code"),dWe=o("model_type"),cWe=o(` property of the config object (either
passed as an argument or loaded from `),FZ=a("code"),mWe=o("pretrained_model_name_or_path"),fWe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),TZ=a("code"),gWe=o("pretrained_model_name_or_path"),hWe=o(":"),uWe=l(),E=a("ul"),Wn=a("li"),MZ=a("strong"),pWe=o("albert"),_We=o(" \u2014 "),Mk=a("a"),bWe=o("AlbertTokenizer"),vWe=o(" or "),Ek=a("a"),FWe=o("AlbertTokenizerFast"),TWe=o(" (ALBERT model)"),MWe=l(),Hn=a("li"),EZ=a("strong"),EWe=o("bart"),CWe=o(" \u2014 "),Ck=a("a"),wWe=o("BartTokenizer"),AWe=o(" or "),wk=a("a"),yWe=o("BartTokenizerFast"),LWe=o(" (BART model)"),xWe=l(),Un=a("li"),CZ=a("strong"),kWe=o("barthez"),SWe=o(" \u2014 "),Ak=a("a"),RWe=o("BarthezTokenizer"),BWe=o(" or "),yk=a("a"),PWe=o("BarthezTokenizerFast"),$We=o(" (BARThez model)"),IWe=l(),Dg=a("li"),wZ=a("strong"),qWe=o("bartpho"),NWe=o(" \u2014 "),Lk=a("a"),jWe=o("BartphoTokenizer"),DWe=o(" (BARTpho model)"),GWe=l(),Jn=a("li"),AZ=a("strong"),OWe=o("bert"),VWe=o(" \u2014 "),xk=a("a"),XWe=o("BertTokenizer"),zWe=o(" or "),kk=a("a"),QWe=o("BertTokenizerFast"),WWe=o(" (BERT model)"),HWe=l(),Gg=a("li"),yZ=a("strong"),UWe=o("bert-generation"),JWe=o(" \u2014 "),Sk=a("a"),YWe=o("BertGenerationTokenizer"),KWe=o(" (Bert Generation model)"),ZWe=l(),Og=a("li"),LZ=a("strong"),eHe=o("bert-japanese"),oHe=o(" \u2014 "),Rk=a("a"),rHe=o("BertJapaneseTokenizer"),tHe=o(" (BertJapanese model)"),aHe=l(),Vg=a("li"),xZ=a("strong"),nHe=o("bertweet"),sHe=o(" \u2014 "),Bk=a("a"),lHe=o("BertweetTokenizer"),iHe=o(" (Bertweet model)"),dHe=l(),Yn=a("li"),kZ=a("strong"),cHe=o("big_bird"),mHe=o(" \u2014 "),Pk=a("a"),fHe=o("BigBirdTokenizer"),gHe=o(" or "),$k=a("a"),hHe=o("BigBirdTokenizerFast"),uHe=o(" (BigBird model)"),pHe=l(),Kn=a("li"),SZ=a("strong"),_He=o("bigbird_pegasus"),bHe=o(" \u2014 "),Ik=a("a"),vHe=o("PegasusTokenizer"),FHe=o(" or "),qk=a("a"),THe=o("PegasusTokenizerFast"),MHe=o(" (BigBirdPegasus model)"),EHe=l(),Zn=a("li"),RZ=a("strong"),CHe=o("blenderbot"),wHe=o(" \u2014 "),Nk=a("a"),AHe=o("BlenderbotTokenizer"),yHe=o(" or "),jk=a("a"),LHe=o("BlenderbotTokenizerFast"),xHe=o(" (Blenderbot model)"),kHe=l(),Xg=a("li"),BZ=a("strong"),SHe=o("blenderbot-small"),RHe=o(" \u2014 "),Dk=a("a"),BHe=o("BlenderbotSmallTokenizer"),PHe=o(" (BlenderbotSmall model)"),$He=l(),zg=a("li"),PZ=a("strong"),IHe=o("byt5"),qHe=o(" \u2014 "),Gk=a("a"),NHe=o("ByT5Tokenizer"),jHe=o(" (ByT5 model)"),DHe=l(),es=a("li"),$Z=a("strong"),GHe=o("camembert"),OHe=o(" \u2014 "),Ok=a("a"),VHe=o("CamembertTokenizer"),XHe=o(" or "),Vk=a("a"),zHe=o("CamembertTokenizerFast"),QHe=o(" (CamemBERT model)"),WHe=l(),Qg=a("li"),IZ=a("strong"),HHe=o("canine"),UHe=o(" \u2014 "),Xk=a("a"),JHe=o("CanineTokenizer"),YHe=o(" (Canine model)"),KHe=l(),os=a("li"),qZ=a("strong"),ZHe=o("clip"),eUe=o(" \u2014 "),zk=a("a"),oUe=o("CLIPTokenizer"),rUe=o(" or "),Qk=a("a"),tUe=o("CLIPTokenizerFast"),aUe=o(" (CLIP model)"),nUe=l(),rs=a("li"),NZ=a("strong"),sUe=o("convbert"),lUe=o(" \u2014 "),Wk=a("a"),iUe=o("ConvBertTokenizer"),dUe=o(" or "),Hk=a("a"),cUe=o("ConvBertTokenizerFast"),mUe=o(" (ConvBERT model)"),fUe=l(),ts=a("li"),jZ=a("strong"),gUe=o("cpm"),hUe=o(" \u2014 "),Uk=a("a"),uUe=o("CpmTokenizer"),pUe=o(" or "),DZ=a("code"),_Ue=o("CpmTokenizerFast"),bUe=o(" (CPM model)"),vUe=l(),Wg=a("li"),GZ=a("strong"),FUe=o("ctrl"),TUe=o(" \u2014 "),Jk=a("a"),MUe=o("CTRLTokenizer"),EUe=o(" (CTRL model)"),CUe=l(),as=a("li"),OZ=a("strong"),wUe=o("deberta"),AUe=o(" \u2014 "),Yk=a("a"),yUe=o("DebertaTokenizer"),LUe=o(" or "),Kk=a("a"),xUe=o("DebertaTokenizerFast"),kUe=o(" (DeBERTa model)"),SUe=l(),Hg=a("li"),VZ=a("strong"),RUe=o("deberta-v2"),BUe=o(" \u2014 "),Zk=a("a"),PUe=o("DebertaV2Tokenizer"),$Ue=o(" (DeBERTa-v2 model)"),IUe=l(),ns=a("li"),XZ=a("strong"),qUe=o("distilbert"),NUe=o(" \u2014 "),eS=a("a"),jUe=o("DistilBertTokenizer"),DUe=o(" or "),oS=a("a"),GUe=o("DistilBertTokenizerFast"),OUe=o(" (DistilBERT model)"),VUe=l(),ss=a("li"),zZ=a("strong"),XUe=o("dpr"),zUe=o(" \u2014 "),rS=a("a"),QUe=o("DPRQuestionEncoderTokenizer"),WUe=o(" or "),tS=a("a"),HUe=o("DPRQuestionEncoderTokenizerFast"),UUe=o(" (DPR model)"),JUe=l(),ls=a("li"),QZ=a("strong"),YUe=o("electra"),KUe=o(" \u2014 "),aS=a("a"),ZUe=o("ElectraTokenizer"),eJe=o(" or "),nS=a("a"),oJe=o("ElectraTokenizerFast"),rJe=o(" (ELECTRA model)"),tJe=l(),Ug=a("li"),WZ=a("strong"),aJe=o("flaubert"),nJe=o(" \u2014 "),sS=a("a"),sJe=o("FlaubertTokenizer"),lJe=o(" (FlauBERT model)"),iJe=l(),is=a("li"),HZ=a("strong"),dJe=o("fnet"),cJe=o(" \u2014 "),lS=a("a"),mJe=o("FNetTokenizer"),fJe=o(" or "),iS=a("a"),gJe=o("FNetTokenizerFast"),hJe=o(" (FNet model)"),uJe=l(),Jg=a("li"),UZ=a("strong"),pJe=o("fsmt"),_Je=o(" \u2014 "),dS=a("a"),bJe=o("FSMTTokenizer"),vJe=o(" (FairSeq Machine-Translation model)"),FJe=l(),ds=a("li"),JZ=a("strong"),TJe=o("funnel"),MJe=o(" \u2014 "),cS=a("a"),EJe=o("FunnelTokenizer"),CJe=o(" or "),mS=a("a"),wJe=o("FunnelTokenizerFast"),AJe=o(" (Funnel Transformer model)"),yJe=l(),cs=a("li"),YZ=a("strong"),LJe=o("gpt2"),xJe=o(" \u2014 "),fS=a("a"),kJe=o("GPT2Tokenizer"),SJe=o(" or "),gS=a("a"),RJe=o("GPT2TokenizerFast"),BJe=o(" (OpenAI GPT-2 model)"),PJe=l(),ms=a("li"),KZ=a("strong"),$Je=o("gpt_neo"),IJe=o(" \u2014 "),hS=a("a"),qJe=o("GPT2Tokenizer"),NJe=o(" or "),uS=a("a"),jJe=o("GPT2TokenizerFast"),DJe=o(" (GPT Neo model)"),GJe=l(),fs=a("li"),ZZ=a("strong"),OJe=o("herbert"),VJe=o(" \u2014 "),pS=a("a"),XJe=o("HerbertTokenizer"),zJe=o(" or "),_S=a("a"),QJe=o("HerbertTokenizerFast"),WJe=o(" (HerBERT model)"),HJe=l(),Yg=a("li"),eee=a("strong"),UJe=o("hubert"),JJe=o(" \u2014 "),bS=a("a"),YJe=o("Wav2Vec2CTCTokenizer"),KJe=o(" (Hubert model)"),ZJe=l(),gs=a("li"),oee=a("strong"),eYe=o("ibert"),oYe=o(" \u2014 "),vS=a("a"),rYe=o("RobertaTokenizer"),tYe=o(" or "),FS=a("a"),aYe=o("RobertaTokenizerFast"),nYe=o(" (I-BERT model)"),sYe=l(),hs=a("li"),ree=a("strong"),lYe=o("layoutlm"),iYe=o(" \u2014 "),TS=a("a"),dYe=o("LayoutLMTokenizer"),cYe=o(" or "),MS=a("a"),mYe=o("LayoutLMTokenizerFast"),fYe=o(" (LayoutLM model)"),gYe=l(),us=a("li"),tee=a("strong"),hYe=o("layoutlmv2"),uYe=o(" \u2014 "),ES=a("a"),pYe=o("LayoutLMv2Tokenizer"),_Ye=o(" or "),CS=a("a"),bYe=o("LayoutLMv2TokenizerFast"),vYe=o(" (LayoutLMv2 model)"),FYe=l(),ps=a("li"),aee=a("strong"),TYe=o("layoutxlm"),MYe=o(" \u2014 "),wS=a("a"),EYe=o("LayoutXLMTokenizer"),CYe=o(" or "),AS=a("a"),wYe=o("LayoutXLMTokenizerFast"),AYe=o(" (LayoutXLM model)"),yYe=l(),_s=a("li"),nee=a("strong"),LYe=o("led"),xYe=o(" \u2014 "),yS=a("a"),kYe=o("LEDTokenizer"),SYe=o(" or "),LS=a("a"),RYe=o("LEDTokenizerFast"),BYe=o(" (LED model)"),PYe=l(),bs=a("li"),see=a("strong"),$Ye=o("longformer"),IYe=o(" \u2014 "),xS=a("a"),qYe=o("LongformerTokenizer"),NYe=o(" or "),kS=a("a"),jYe=o("LongformerTokenizerFast"),DYe=o(" (Longformer model)"),GYe=l(),Kg=a("li"),lee=a("strong"),OYe=o("luke"),VYe=o(" \u2014 "),SS=a("a"),XYe=o("LukeTokenizer"),zYe=o(" (LUKE model)"),QYe=l(),vs=a("li"),iee=a("strong"),WYe=o("lxmert"),HYe=o(" \u2014 "),RS=a("a"),UYe=o("LxmertTokenizer"),JYe=o(" or "),BS=a("a"),YYe=o("LxmertTokenizerFast"),KYe=o(" (LXMERT model)"),ZYe=l(),Zg=a("li"),dee=a("strong"),eKe=o("m2m_100"),oKe=o(" \u2014 "),PS=a("a"),rKe=o("M2M100Tokenizer"),tKe=o(" (M2M100 model)"),aKe=l(),eh=a("li"),cee=a("strong"),nKe=o("marian"),sKe=o(" \u2014 "),$S=a("a"),lKe=o("MarianTokenizer"),iKe=o(" (Marian model)"),dKe=l(),Fs=a("li"),mee=a("strong"),cKe=o("mbart"),mKe=o(" \u2014 "),IS=a("a"),fKe=o("MBartTokenizer"),gKe=o(" or "),qS=a("a"),hKe=o("MBartTokenizerFast"),uKe=o(" (mBART model)"),pKe=l(),Ts=a("li"),fee=a("strong"),_Ke=o("mbart50"),bKe=o(" \u2014 "),NS=a("a"),vKe=o("MBart50Tokenizer"),FKe=o(" or "),jS=a("a"),TKe=o("MBart50TokenizerFast"),MKe=o(" (mBART-50 model)"),EKe=l(),oh=a("li"),gee=a("strong"),CKe=o("mluke"),wKe=o(" \u2014 "),DS=a("a"),AKe=o("MLukeTokenizer"),yKe=o(" (mLUKE model)"),LKe=l(),Ms=a("li"),hee=a("strong"),xKe=o("mobilebert"),kKe=o(" \u2014 "),GS=a("a"),SKe=o("MobileBertTokenizer"),RKe=o(" or "),OS=a("a"),BKe=o("MobileBertTokenizerFast"),PKe=o(" (MobileBERT model)"),$Ke=l(),Es=a("li"),uee=a("strong"),IKe=o("mpnet"),qKe=o(" \u2014 "),VS=a("a"),NKe=o("MPNetTokenizer"),jKe=o(" or "),XS=a("a"),DKe=o("MPNetTokenizerFast"),GKe=o(" (MPNet model)"),OKe=l(),Cs=a("li"),pee=a("strong"),VKe=o("mt5"),XKe=o(" \u2014 "),zS=a("a"),zKe=o("MT5Tokenizer"),QKe=o(" or "),QS=a("a"),WKe=o("MT5TokenizerFast"),HKe=o(" (mT5 model)"),UKe=l(),ws=a("li"),_ee=a("strong"),JKe=o("openai-gpt"),YKe=o(" \u2014 "),WS=a("a"),KKe=o("OpenAIGPTTokenizer"),ZKe=o(" or "),HS=a("a"),eZe=o("OpenAIGPTTokenizerFast"),oZe=o(" (OpenAI GPT model)"),rZe=l(),As=a("li"),bee=a("strong"),tZe=o("pegasus"),aZe=o(" \u2014 "),US=a("a"),nZe=o("PegasusTokenizer"),sZe=o(" or "),JS=a("a"),lZe=o("PegasusTokenizerFast"),iZe=o(" (Pegasus model)"),dZe=l(),rh=a("li"),vee=a("strong"),cZe=o("perceiver"),mZe=o(" \u2014 "),YS=a("a"),fZe=o("PerceiverTokenizer"),gZe=o(" (Perceiver model)"),hZe=l(),th=a("li"),Fee=a("strong"),uZe=o("phobert"),pZe=o(" \u2014 "),KS=a("a"),_Ze=o("PhobertTokenizer"),bZe=o(" (PhoBERT model)"),vZe=l(),ah=a("li"),Tee=a("strong"),FZe=o("plbart"),TZe=o(" \u2014 "),ZS=a("a"),MZe=o("PLBartTokenizer"),EZe=o(" (PLBart model)"),CZe=l(),nh=a("li"),Mee=a("strong"),wZe=o("prophetnet"),AZe=o(" \u2014 "),eR=a("a"),yZe=o("ProphetNetTokenizer"),LZe=o(" (ProphetNet model)"),xZe=l(),ys=a("li"),Eee=a("strong"),kZe=o("qdqbert"),SZe=o(" \u2014 "),oR=a("a"),RZe=o("BertTokenizer"),BZe=o(" or "),rR=a("a"),PZe=o("BertTokenizerFast"),$Ze=o(" (QDQBert model)"),IZe=l(),sh=a("li"),Cee=a("strong"),qZe=o("rag"),NZe=o(" \u2014 "),tR=a("a"),jZe=o("RagTokenizer"),DZe=o(" (RAG model)"),GZe=l(),Ls=a("li"),wee=a("strong"),OZe=o("realm"),VZe=o(" \u2014 "),aR=a("a"),XZe=o("RealmTokenizer"),zZe=o(" or "),nR=a("a"),QZe=o("RealmTokenizerFast"),WZe=o(" (Realm model)"),HZe=l(),xs=a("li"),Aee=a("strong"),UZe=o("reformer"),JZe=o(" \u2014 "),sR=a("a"),YZe=o("ReformerTokenizer"),KZe=o(" or "),lR=a("a"),ZZe=o("ReformerTokenizerFast"),eeo=o(" (Reformer model)"),oeo=l(),ks=a("li"),yee=a("strong"),reo=o("rembert"),teo=o(" \u2014 "),iR=a("a"),aeo=o("RemBertTokenizer"),neo=o(" or "),dR=a("a"),seo=o("RemBertTokenizerFast"),leo=o(" (RemBERT model)"),ieo=l(),Ss=a("li"),Lee=a("strong"),deo=o("retribert"),ceo=o(" \u2014 "),cR=a("a"),meo=o("RetriBertTokenizer"),feo=o(" or "),mR=a("a"),geo=o("RetriBertTokenizerFast"),heo=o(" (RetriBERT model)"),ueo=l(),Rs=a("li"),xee=a("strong"),peo=o("roberta"),_eo=o(" \u2014 "),fR=a("a"),beo=o("RobertaTokenizer"),veo=o(" or "),gR=a("a"),Feo=o("RobertaTokenizerFast"),Teo=o(" (RoBERTa model)"),Meo=l(),Bs=a("li"),kee=a("strong"),Eeo=o("roformer"),Ceo=o(" \u2014 "),hR=a("a"),weo=o("RoFormerTokenizer"),Aeo=o(" or "),uR=a("a"),yeo=o("RoFormerTokenizerFast"),Leo=o(" (RoFormer model)"),xeo=l(),lh=a("li"),See=a("strong"),keo=o("speech_to_text"),Seo=o(" \u2014 "),pR=a("a"),Reo=o("Speech2TextTokenizer"),Beo=o(" (Speech2Text model)"),Peo=l(),ih=a("li"),Ree=a("strong"),$eo=o("speech_to_text_2"),Ieo=o(" \u2014 "),_R=a("a"),qeo=o("Speech2Text2Tokenizer"),Neo=o(" (Speech2Text2 model)"),jeo=l(),Ps=a("li"),Bee=a("strong"),Deo=o("splinter"),Geo=o(" \u2014 "),bR=a("a"),Oeo=o("SplinterTokenizer"),Veo=o(" or "),vR=a("a"),Xeo=o("SplinterTokenizerFast"),zeo=o(" (Splinter model)"),Qeo=l(),$s=a("li"),Pee=a("strong"),Weo=o("squeezebert"),Heo=o(" \u2014 "),FR=a("a"),Ueo=o("SqueezeBertTokenizer"),Jeo=o(" or "),TR=a("a"),Yeo=o("SqueezeBertTokenizerFast"),Keo=o(" (SqueezeBERT model)"),Zeo=l(),Is=a("li"),$ee=a("strong"),eoo=o("t5"),ooo=o(" \u2014 "),MR=a("a"),roo=o("T5Tokenizer"),too=o(" or "),ER=a("a"),aoo=o("T5TokenizerFast"),noo=o(" (T5 model)"),soo=l(),dh=a("li"),Iee=a("strong"),loo=o("tapas"),ioo=o(" \u2014 "),CR=a("a"),doo=o("TapasTokenizer"),coo=o(" (TAPAS model)"),moo=l(),ch=a("li"),qee=a("strong"),foo=o("tapex"),goo=o(" \u2014 "),wR=a("a"),hoo=o("TapexTokenizer"),uoo=o(" (TAPEX model)"),poo=l(),mh=a("li"),Nee=a("strong"),_oo=o("transfo-xl"),boo=o(" \u2014 "),AR=a("a"),voo=o("TransfoXLTokenizer"),Foo=o(" (Transformer-XL model)"),Too=l(),fh=a("li"),jee=a("strong"),Moo=o("wav2vec2"),Eoo=o(" \u2014 "),yR=a("a"),Coo=o("Wav2Vec2CTCTokenizer"),woo=o(" (Wav2Vec2 model)"),Aoo=l(),gh=a("li"),Dee=a("strong"),yoo=o("wav2vec2_phoneme"),Loo=o(" \u2014 "),LR=a("a"),xoo=o("Wav2Vec2PhonemeCTCTokenizer"),koo=o(" (Wav2Vec2Phoneme model)"),Soo=l(),qs=a("li"),Gee=a("strong"),Roo=o("xglm"),Boo=o(" \u2014 "),xR=a("a"),Poo=o("XGLMTokenizer"),$oo=o(" or "),kR=a("a"),Ioo=o("XGLMTokenizerFast"),qoo=o(" (XGLM model)"),Noo=l(),hh=a("li"),Oee=a("strong"),joo=o("xlm"),Doo=o(" \u2014 "),SR=a("a"),Goo=o("XLMTokenizer"),Ooo=o(" (XLM model)"),Voo=l(),uh=a("li"),Vee=a("strong"),Xoo=o("xlm-prophetnet"),zoo=o(" \u2014 "),RR=a("a"),Qoo=o("XLMProphetNetTokenizer"),Woo=o(" (XLMProphetNet model)"),Hoo=l(),Ns=a("li"),Xee=a("strong"),Uoo=o("xlm-roberta"),Joo=o(" \u2014 "),BR=a("a"),Yoo=o("XLMRobertaTokenizer"),Koo=o(" or "),PR=a("a"),Zoo=o("XLMRobertaTokenizerFast"),ero=o(" (XLM-RoBERTa model)"),oro=l(),js=a("li"),zee=a("strong"),rro=o("xlnet"),tro=o(" \u2014 "),$R=a("a"),aro=o("XLNetTokenizer"),nro=o(" or "),IR=a("a"),sro=o("XLNetTokenizerFast"),lro=o(" (XLNet model)"),iro=l(),Qee=a("p"),dro=o("Examples:"),cro=l(),m(Qw.$$.fragment),mro=l(),ph=a("div"),m(Ww.$$.fragment),fro=l(),Wee=a("p"),gro=o("Register a new tokenizer in this mapping."),DRe=l(),Hi=a("h2"),_h=a("a"),Hee=a("span"),m(Hw.$$.fragment),hro=l(),Uee=a("span"),uro=o("AutoFeatureExtractor"),GRe=l(),Ho=a("div"),m(Uw.$$.fragment),pro=l(),Jw=a("p"),_ro=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),qR=a("a"),bro=o("AutoFeatureExtractor.from_pretrained()"),vro=o(" class method."),Fro=l(),Yw=a("p"),Tro=o("This class cannot be instantiated directly using "),Jee=a("code"),Mro=o("__init__()"),Ero=o(" (throws an error)."),Cro=l(),$e=a("div"),m(Kw.$$.fragment),wro=l(),Yee=a("p"),Aro=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),yro=l(),Va=a("p"),Lro=o("The feature extractor class to instantiate is selected based on the "),Kee=a("code"),xro=o("model_type"),kro=o(` property of the config object
(either passed as an argument or loaded from `),Zee=a("code"),Sro=o("pretrained_model_name_or_path"),Rro=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),eoe=a("code"),Bro=o("pretrained_model_name_or_path"),Pro=o(":"),$ro=l(),ee=a("ul"),bh=a("li"),ooe=a("strong"),Iro=o("beit"),qro=o(" \u2014 "),NR=a("a"),Nro=o("BeitFeatureExtractor"),jro=o(" (BEiT model)"),Dro=l(),vh=a("li"),roe=a("strong"),Gro=o("clip"),Oro=o(" \u2014 "),jR=a("a"),Vro=o("CLIPFeatureExtractor"),Xro=o(" (CLIP model)"),zro=l(),Fh=a("li"),toe=a("strong"),Qro=o("convnext"),Wro=o(" \u2014 "),DR=a("a"),Hro=o("ConvNextFeatureExtractor"),Uro=o(" (ConvNext model)"),Jro=l(),Th=a("li"),aoe=a("strong"),Yro=o("deit"),Kro=o(" \u2014 "),GR=a("a"),Zro=o("DeiTFeatureExtractor"),eto=o(" (DeiT model)"),oto=l(),Mh=a("li"),noe=a("strong"),rto=o("detr"),tto=o(" \u2014 "),OR=a("a"),ato=o("DetrFeatureExtractor"),nto=o(" (DETR model)"),sto=l(),Eh=a("li"),soe=a("strong"),lto=o("hubert"),ito=o(" \u2014 "),VR=a("a"),dto=o("Wav2Vec2FeatureExtractor"),cto=o(" (Hubert model)"),mto=l(),Ch=a("li"),loe=a("strong"),fto=o("layoutlmv2"),gto=o(" \u2014 "),XR=a("a"),hto=o("LayoutLMv2FeatureExtractor"),uto=o(" (LayoutLMv2 model)"),pto=l(),wh=a("li"),ioe=a("strong"),_to=o("maskformer"),bto=o(" \u2014 "),zR=a("a"),vto=o("MaskFormerFeatureExtractor"),Fto=o(" (MaskFormer model)"),Tto=l(),Ah=a("li"),doe=a("strong"),Mto=o("perceiver"),Eto=o(" \u2014 "),QR=a("a"),Cto=o("PerceiverFeatureExtractor"),wto=o(" (Perceiver model)"),Ato=l(),yh=a("li"),coe=a("strong"),yto=o("poolformer"),Lto=o(" \u2014 "),WR=a("a"),xto=o("PoolFormerFeatureExtractor"),kto=o(" (PoolFormer model)"),Sto=l(),Lh=a("li"),moe=a("strong"),Rto=o("regnet"),Bto=o(" \u2014 "),HR=a("a"),Pto=o("ConvNextFeatureExtractor"),$to=o(" (RegNet model)"),Ito=l(),xh=a("li"),foe=a("strong"),qto=o("resnet"),Nto=o(" \u2014 "),UR=a("a"),jto=o("ConvNextFeatureExtractor"),Dto=o(" (ResNet model)"),Gto=l(),kh=a("li"),goe=a("strong"),Oto=o("segformer"),Vto=o(" \u2014 "),JR=a("a"),Xto=o("SegformerFeatureExtractor"),zto=o(" (SegFormer model)"),Qto=l(),Sh=a("li"),hoe=a("strong"),Wto=o("speech_to_text"),Hto=o(" \u2014 "),YR=a("a"),Uto=o("Speech2TextFeatureExtractor"),Jto=o(" (Speech2Text model)"),Yto=l(),Rh=a("li"),uoe=a("strong"),Kto=o("swin"),Zto=o(" \u2014 "),KR=a("a"),eao=o("ViTFeatureExtractor"),oao=o(" (Swin model)"),rao=l(),Bh=a("li"),poe=a("strong"),tao=o("van"),aao=o(" \u2014 "),ZR=a("a"),nao=o("ConvNextFeatureExtractor"),sao=o(" (VAN model)"),lao=l(),Ph=a("li"),_oe=a("strong"),iao=o("vit"),dao=o(" \u2014 "),eB=a("a"),cao=o("ViTFeatureExtractor"),mao=o(" (ViT model)"),fao=l(),$h=a("li"),boe=a("strong"),gao=o("vit_mae"),hao=o(" \u2014 "),oB=a("a"),uao=o("ViTFeatureExtractor"),pao=o(" (ViTMAE model)"),_ao=l(),Ih=a("li"),voe=a("strong"),bao=o("wav2vec2"),vao=o(" \u2014 "),rB=a("a"),Fao=o("Wav2Vec2FeatureExtractor"),Tao=o(" (Wav2Vec2 model)"),Mao=l(),m(qh.$$.fragment),Eao=l(),Foe=a("p"),Cao=o("Examples:"),wao=l(),m(Zw.$$.fragment),Aao=l(),Nh=a("div"),m(e6.$$.fragment),yao=l(),Toe=a("p"),Lao=o("Register a new feature extractor for this class."),ORe=l(),Ui=a("h2"),jh=a("a"),Moe=a("span"),m(o6.$$.fragment),xao=l(),Eoe=a("span"),kao=o("AutoProcessor"),VRe=l(),Uo=a("div"),m(r6.$$.fragment),Sao=l(),t6=a("p"),Rao=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),tB=a("a"),Bao=o("AutoProcessor.from_pretrained()"),Pao=o(" class method."),$ao=l(),a6=a("p"),Iao=o("This class cannot be instantiated directly using "),Coe=a("code"),qao=o("__init__()"),Nao=o(" (throws an error)."),jao=l(),Ie=a("div"),m(n6.$$.fragment),Dao=l(),woe=a("p"),Gao=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Oao=l(),Ji=a("p"),Vao=o("The processor class to instantiate is selected based on the "),Aoe=a("code"),Xao=o("model_type"),zao=o(` property of the config object (either
passed as an argument or loaded from `),yoe=a("code"),Qao=o("pretrained_model_name_or_path"),Wao=o(" if possible):"),Hao=l(),ke=a("ul"),Dh=a("li"),Loe=a("strong"),Uao=o("clip"),Jao=o(" \u2014 "),aB=a("a"),Yao=o("CLIPProcessor"),Kao=o(" (CLIP model)"),Zao=l(),Gh=a("li"),xoe=a("strong"),eno=o("layoutlmv2"),ono=o(" \u2014 "),nB=a("a"),rno=o("LayoutLMv2Processor"),tno=o(" (LayoutLMv2 model)"),ano=l(),Oh=a("li"),koe=a("strong"),nno=o("layoutxlm"),sno=o(" \u2014 "),sB=a("a"),lno=o("LayoutXLMProcessor"),ino=o(" (LayoutXLM model)"),dno=l(),Vh=a("li"),Soe=a("strong"),cno=o("speech_to_text"),mno=o(" \u2014 "),lB=a("a"),fno=o("Speech2TextProcessor"),gno=o(" (Speech2Text model)"),hno=l(),Xh=a("li"),Roe=a("strong"),uno=o("speech_to_text_2"),pno=o(" \u2014 "),iB=a("a"),_no=o("Speech2Text2Processor"),bno=o(" (Speech2Text2 model)"),vno=l(),zh=a("li"),Boe=a("strong"),Fno=o("trocr"),Tno=o(" \u2014 "),dB=a("a"),Mno=o("TrOCRProcessor"),Eno=o(" (TrOCR model)"),Cno=l(),Qh=a("li"),Poe=a("strong"),wno=o("vision-text-dual-encoder"),Ano=o(" \u2014 "),cB=a("a"),yno=o("VisionTextDualEncoderProcessor"),Lno=o(" (VisionTextDualEncoder model)"),xno=l(),Wh=a("li"),$oe=a("strong"),kno=o("wav2vec2"),Sno=o(" \u2014 "),mB=a("a"),Rno=o("Wav2Vec2Processor"),Bno=o(" (Wav2Vec2 model)"),Pno=l(),m(Hh.$$.fragment),$no=l(),Ioe=a("p"),Ino=o("Examples:"),qno=l(),m(s6.$$.fragment),Nno=l(),Uh=a("div"),m(l6.$$.fragment),jno=l(),qoe=a("p"),Dno=o("Register a new processor for this class."),XRe=l(),Yi=a("h2"),Jh=a("a"),Noe=a("span"),m(i6.$$.fragment),Gno=l(),joe=a("span"),Ono=o("AutoModel"),zRe=l(),Jo=a("div"),m(d6.$$.fragment),Vno=l(),Ki=a("p"),Xno=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),fB=a("a"),zno=o("from_pretrained()"),Qno=o(" class method or the "),gB=a("a"),Wno=o("from_config()"),Hno=o(` class
method.`),Uno=l(),c6=a("p"),Jno=o("This class cannot be instantiated directly using "),Doe=a("code"),Yno=o("__init__()"),Kno=o(" (throws an error)."),Zno=l(),Xr=a("div"),m(m6.$$.fragment),eso=l(),Goe=a("p"),oso=o("Instantiates one of the base model classes of the library from a configuration."),rso=l(),Zi=a("p"),tso=o(`Note:
Loading a model from its configuration file does `),Ooe=a("strong"),aso=o("not"),nso=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hB=a("a"),sso=o("from_pretrained()"),lso=o(" to load the model weights."),iso=l(),Voe=a("p"),dso=o("Examples:"),cso=l(),m(f6.$$.fragment),mso=l(),qe=a("div"),m(g6.$$.fragment),fso=l(),Xoe=a("p"),gso=o("Instantiate one of the base model classes of the library from a pretrained model."),hso=l(),Xa=a("p"),uso=o("The model class to instantiate is selected based on the "),zoe=a("code"),pso=o("model_type"),_so=o(` property of the config object (either
passed as an argument or loaded from `),Qoe=a("code"),bso=o("pretrained_model_name_or_path"),vso=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Woe=a("code"),Fso=o("pretrained_model_name_or_path"),Tso=o(":"),Mso=l(),T=a("ul"),Yh=a("li"),Hoe=a("strong"),Eso=o("albert"),Cso=o(" \u2014 "),uB=a("a"),wso=o("AlbertModel"),Aso=o(" (ALBERT model)"),yso=l(),Kh=a("li"),Uoe=a("strong"),Lso=o("bart"),xso=o(" \u2014 "),pB=a("a"),kso=o("BartModel"),Sso=o(" (BART model)"),Rso=l(),Zh=a("li"),Joe=a("strong"),Bso=o("beit"),Pso=o(" \u2014 "),_B=a("a"),$so=o("BeitModel"),Iso=o(" (BEiT model)"),qso=l(),eu=a("li"),Yoe=a("strong"),Nso=o("bert"),jso=o(" \u2014 "),bB=a("a"),Dso=o("BertModel"),Gso=o(" (BERT model)"),Oso=l(),ou=a("li"),Koe=a("strong"),Vso=o("bert-generation"),Xso=o(" \u2014 "),vB=a("a"),zso=o("BertGenerationEncoder"),Qso=o(" (Bert Generation model)"),Wso=l(),ru=a("li"),Zoe=a("strong"),Hso=o("big_bird"),Uso=o(" \u2014 "),FB=a("a"),Jso=o("BigBirdModel"),Yso=o(" (BigBird model)"),Kso=l(),tu=a("li"),ere=a("strong"),Zso=o("bigbird_pegasus"),elo=o(" \u2014 "),TB=a("a"),olo=o("BigBirdPegasusModel"),rlo=o(" (BigBirdPegasus model)"),tlo=l(),au=a("li"),ore=a("strong"),alo=o("blenderbot"),nlo=o(" \u2014 "),MB=a("a"),slo=o("BlenderbotModel"),llo=o(" (Blenderbot model)"),ilo=l(),nu=a("li"),rre=a("strong"),dlo=o("blenderbot-small"),clo=o(" \u2014 "),EB=a("a"),mlo=o("BlenderbotSmallModel"),flo=o(" (BlenderbotSmall model)"),glo=l(),su=a("li"),tre=a("strong"),hlo=o("camembert"),ulo=o(" \u2014 "),CB=a("a"),plo=o("CamembertModel"),_lo=o(" (CamemBERT model)"),blo=l(),lu=a("li"),are=a("strong"),vlo=o("canine"),Flo=o(" \u2014 "),wB=a("a"),Tlo=o("CanineModel"),Mlo=o(" (Canine model)"),Elo=l(),iu=a("li"),nre=a("strong"),Clo=o("clip"),wlo=o(" \u2014 "),AB=a("a"),Alo=o("CLIPModel"),ylo=o(" (CLIP model)"),Llo=l(),du=a("li"),sre=a("strong"),xlo=o("convbert"),klo=o(" \u2014 "),yB=a("a"),Slo=o("ConvBertModel"),Rlo=o(" (ConvBERT model)"),Blo=l(),cu=a("li"),lre=a("strong"),Plo=o("convnext"),$lo=o(" \u2014 "),LB=a("a"),Ilo=o("ConvNextModel"),qlo=o(" (ConvNext model)"),Nlo=l(),mu=a("li"),ire=a("strong"),jlo=o("ctrl"),Dlo=o(" \u2014 "),xB=a("a"),Glo=o("CTRLModel"),Olo=o(" (CTRL model)"),Vlo=l(),fu=a("li"),dre=a("strong"),Xlo=o("data2vec-audio"),zlo=o(" \u2014 "),kB=a("a"),Qlo=o("Data2VecAudioModel"),Wlo=o(" (Data2VecAudio model)"),Hlo=l(),gu=a("li"),cre=a("strong"),Ulo=o("data2vec-text"),Jlo=o(" \u2014 "),SB=a("a"),Ylo=o("Data2VecTextModel"),Klo=o(" (Data2VecText model)"),Zlo=l(),hu=a("li"),mre=a("strong"),eio=o("data2vec-vision"),oio=o(" \u2014 "),RB=a("a"),rio=o("Data2VecVisionModel"),tio=o(" (Data2VecVision model)"),aio=l(),uu=a("li"),fre=a("strong"),nio=o("deberta"),sio=o(" \u2014 "),BB=a("a"),lio=o("DebertaModel"),iio=o(" (DeBERTa model)"),dio=l(),pu=a("li"),gre=a("strong"),cio=o("deberta-v2"),mio=o(" \u2014 "),PB=a("a"),fio=o("DebertaV2Model"),gio=o(" (DeBERTa-v2 model)"),hio=l(),_u=a("li"),hre=a("strong"),uio=o("decision_transformer"),pio=o(" \u2014 "),$B=a("a"),_io=o("DecisionTransformerModel"),bio=o(" (Decision Transformer model)"),vio=l(),bu=a("li"),ure=a("strong"),Fio=o("deit"),Tio=o(" \u2014 "),IB=a("a"),Mio=o("DeiTModel"),Eio=o(" (DeiT model)"),Cio=l(),vu=a("li"),pre=a("strong"),wio=o("detr"),Aio=o(" \u2014 "),qB=a("a"),yio=o("DetrModel"),Lio=o(" (DETR model)"),xio=l(),Fu=a("li"),_re=a("strong"),kio=o("distilbert"),Sio=o(" \u2014 "),NB=a("a"),Rio=o("DistilBertModel"),Bio=o(" (DistilBERT model)"),Pio=l(),Tu=a("li"),bre=a("strong"),$io=o("dpr"),Iio=o(" \u2014 "),jB=a("a"),qio=o("DPRQuestionEncoder"),Nio=o(" (DPR model)"),jio=l(),Mu=a("li"),vre=a("strong"),Dio=o("dpt"),Gio=o(" \u2014 "),DB=a("a"),Oio=o("DPTModel"),Vio=o(" (DPT model)"),Xio=l(),Eu=a("li"),Fre=a("strong"),zio=o("electra"),Qio=o(" \u2014 "),GB=a("a"),Wio=o("ElectraModel"),Hio=o(" (ELECTRA model)"),Uio=l(),Cu=a("li"),Tre=a("strong"),Jio=o("flaubert"),Yio=o(" \u2014 "),OB=a("a"),Kio=o("FlaubertModel"),Zio=o(" (FlauBERT model)"),edo=l(),wu=a("li"),Mre=a("strong"),odo=o("fnet"),rdo=o(" \u2014 "),VB=a("a"),tdo=o("FNetModel"),ado=o(" (FNet model)"),ndo=l(),Au=a("li"),Ere=a("strong"),sdo=o("fsmt"),ldo=o(" \u2014 "),XB=a("a"),ido=o("FSMTModel"),ddo=o(" (FairSeq Machine-Translation model)"),cdo=l(),Ds=a("li"),Cre=a("strong"),mdo=o("funnel"),fdo=o(" \u2014 "),zB=a("a"),gdo=o("FunnelModel"),hdo=o(" or "),QB=a("a"),udo=o("FunnelBaseModel"),pdo=o(" (Funnel Transformer model)"),_do=l(),yu=a("li"),wre=a("strong"),bdo=o("glpn"),vdo=o(" \u2014 "),WB=a("a"),Fdo=o("GLPNModel"),Tdo=o(" (GLPN model)"),Mdo=l(),Lu=a("li"),Are=a("strong"),Edo=o("gpt2"),Cdo=o(" \u2014 "),HB=a("a"),wdo=o("GPT2Model"),Ado=o(" (OpenAI GPT-2 model)"),ydo=l(),xu=a("li"),yre=a("strong"),Ldo=o("gpt_neo"),xdo=o(" \u2014 "),UB=a("a"),kdo=o("GPTNeoModel"),Sdo=o(" (GPT Neo model)"),Rdo=l(),ku=a("li"),Lre=a("strong"),Bdo=o("gptj"),Pdo=o(" \u2014 "),JB=a("a"),$do=o("GPTJModel"),Ido=o(" (GPT-J model)"),qdo=l(),Su=a("li"),xre=a("strong"),Ndo=o("hubert"),jdo=o(" \u2014 "),YB=a("a"),Ddo=o("HubertModel"),Gdo=o(" (Hubert model)"),Odo=l(),Ru=a("li"),kre=a("strong"),Vdo=o("ibert"),Xdo=o(" \u2014 "),KB=a("a"),zdo=o("IBertModel"),Qdo=o(" (I-BERT model)"),Wdo=l(),Bu=a("li"),Sre=a("strong"),Hdo=o("imagegpt"),Udo=o(" \u2014 "),ZB=a("a"),Jdo=o("ImageGPTModel"),Ydo=o(" (ImageGPT model)"),Kdo=l(),Pu=a("li"),Rre=a("strong"),Zdo=o("layoutlm"),eco=o(" \u2014 "),eP=a("a"),oco=o("LayoutLMModel"),rco=o(" (LayoutLM model)"),tco=l(),$u=a("li"),Bre=a("strong"),aco=o("layoutlmv2"),nco=o(" \u2014 "),oP=a("a"),sco=o("LayoutLMv2Model"),lco=o(" (LayoutLMv2 model)"),ico=l(),Iu=a("li"),Pre=a("strong"),dco=o("led"),cco=o(" \u2014 "),rP=a("a"),mco=o("LEDModel"),fco=o(" (LED model)"),gco=l(),qu=a("li"),$re=a("strong"),hco=o("longformer"),uco=o(" \u2014 "),tP=a("a"),pco=o("LongformerModel"),_co=o(" (Longformer model)"),bco=l(),Nu=a("li"),Ire=a("strong"),vco=o("luke"),Fco=o(" \u2014 "),aP=a("a"),Tco=o("LukeModel"),Mco=o(" (LUKE model)"),Eco=l(),ju=a("li"),qre=a("strong"),Cco=o("lxmert"),wco=o(" \u2014 "),nP=a("a"),Aco=o("LxmertModel"),yco=o(" (LXMERT model)"),Lco=l(),Du=a("li"),Nre=a("strong"),xco=o("m2m_100"),kco=o(" \u2014 "),sP=a("a"),Sco=o("M2M100Model"),Rco=o(" (M2M100 model)"),Bco=l(),Gu=a("li"),jre=a("strong"),Pco=o("marian"),$co=o(" \u2014 "),lP=a("a"),Ico=o("MarianModel"),qco=o(" (Marian model)"),Nco=l(),Ou=a("li"),Dre=a("strong"),jco=o("maskformer"),Dco=o(" \u2014 "),iP=a("a"),Gco=o("MaskFormerModel"),Oco=o(" (MaskFormer model)"),Vco=l(),Vu=a("li"),Gre=a("strong"),Xco=o("mbart"),zco=o(" \u2014 "),dP=a("a"),Qco=o("MBartModel"),Wco=o(" (mBART model)"),Hco=l(),Xu=a("li"),Ore=a("strong"),Uco=o("megatron-bert"),Jco=o(" \u2014 "),cP=a("a"),Yco=o("MegatronBertModel"),Kco=o(" (MegatronBert model)"),Zco=l(),zu=a("li"),Vre=a("strong"),emo=o("mobilebert"),omo=o(" \u2014 "),mP=a("a"),rmo=o("MobileBertModel"),tmo=o(" (MobileBERT model)"),amo=l(),Qu=a("li"),Xre=a("strong"),nmo=o("mpnet"),smo=o(" \u2014 "),fP=a("a"),lmo=o("MPNetModel"),imo=o(" (MPNet model)"),dmo=l(),Wu=a("li"),zre=a("strong"),cmo=o("mt5"),mmo=o(" \u2014 "),gP=a("a"),fmo=o("MT5Model"),gmo=o(" (mT5 model)"),hmo=l(),Hu=a("li"),Qre=a("strong"),umo=o("nystromformer"),pmo=o(" \u2014 "),hP=a("a"),_mo=o("NystromformerModel"),bmo=o(" (Nystromformer model)"),vmo=l(),Uu=a("li"),Wre=a("strong"),Fmo=o("openai-gpt"),Tmo=o(" \u2014 "),uP=a("a"),Mmo=o("OpenAIGPTModel"),Emo=o(" (OpenAI GPT model)"),Cmo=l(),Ju=a("li"),Hre=a("strong"),wmo=o("pegasus"),Amo=o(" \u2014 "),pP=a("a"),ymo=o("PegasusModel"),Lmo=o(" (Pegasus model)"),xmo=l(),Yu=a("li"),Ure=a("strong"),kmo=o("perceiver"),Smo=o(" \u2014 "),_P=a("a"),Rmo=o("PerceiverModel"),Bmo=o(" (Perceiver model)"),Pmo=l(),Ku=a("li"),Jre=a("strong"),$mo=o("plbart"),Imo=o(" \u2014 "),bP=a("a"),qmo=o("PLBartModel"),Nmo=o(" (PLBart model)"),jmo=l(),Zu=a("li"),Yre=a("strong"),Dmo=o("poolformer"),Gmo=o(" \u2014 "),vP=a("a"),Omo=o("PoolFormerModel"),Vmo=o(" (PoolFormer model)"),Xmo=l(),ep=a("li"),Kre=a("strong"),zmo=o("prophetnet"),Qmo=o(" \u2014 "),FP=a("a"),Wmo=o("ProphetNetModel"),Hmo=o(" (ProphetNet model)"),Umo=l(),op=a("li"),Zre=a("strong"),Jmo=o("qdqbert"),Ymo=o(" \u2014 "),TP=a("a"),Kmo=o("QDQBertModel"),Zmo=o(" (QDQBert model)"),efo=l(),rp=a("li"),ete=a("strong"),ofo=o("reformer"),rfo=o(" \u2014 "),MP=a("a"),tfo=o("ReformerModel"),afo=o(" (Reformer model)"),nfo=l(),tp=a("li"),ote=a("strong"),sfo=o("regnet"),lfo=o(" \u2014 "),EP=a("a"),ifo=o("RegNetModel"),dfo=o(" (RegNet model)"),cfo=l(),ap=a("li"),rte=a("strong"),mfo=o("rembert"),ffo=o(" \u2014 "),CP=a("a"),gfo=o("RemBertModel"),hfo=o(" (RemBERT model)"),ufo=l(),np=a("li"),tte=a("strong"),pfo=o("resnet"),_fo=o(" \u2014 "),wP=a("a"),bfo=o("ResNetModel"),vfo=o(" (ResNet model)"),Ffo=l(),sp=a("li"),ate=a("strong"),Tfo=o("retribert"),Mfo=o(" \u2014 "),AP=a("a"),Efo=o("RetriBertModel"),Cfo=o(" (RetriBERT model)"),wfo=l(),lp=a("li"),nte=a("strong"),Afo=o("roberta"),yfo=o(" \u2014 "),yP=a("a"),Lfo=o("RobertaModel"),xfo=o(" (RoBERTa model)"),kfo=l(),ip=a("li"),ste=a("strong"),Sfo=o("roformer"),Rfo=o(" \u2014 "),LP=a("a"),Bfo=o("RoFormerModel"),Pfo=o(" (RoFormer model)"),$fo=l(),dp=a("li"),lte=a("strong"),Ifo=o("segformer"),qfo=o(" \u2014 "),xP=a("a"),Nfo=o("SegformerModel"),jfo=o(" (SegFormer model)"),Dfo=l(),cp=a("li"),ite=a("strong"),Gfo=o("sew"),Ofo=o(" \u2014 "),kP=a("a"),Vfo=o("SEWModel"),Xfo=o(" (SEW model)"),zfo=l(),mp=a("li"),dte=a("strong"),Qfo=o("sew-d"),Wfo=o(" \u2014 "),SP=a("a"),Hfo=o("SEWDModel"),Ufo=o(" (SEW-D model)"),Jfo=l(),fp=a("li"),cte=a("strong"),Yfo=o("speech_to_text"),Kfo=o(" \u2014 "),RP=a("a"),Zfo=o("Speech2TextModel"),ego=o(" (Speech2Text model)"),ogo=l(),gp=a("li"),mte=a("strong"),rgo=o("splinter"),tgo=o(" \u2014 "),BP=a("a"),ago=o("SplinterModel"),ngo=o(" (Splinter model)"),sgo=l(),hp=a("li"),fte=a("strong"),lgo=o("squeezebert"),igo=o(" \u2014 "),PP=a("a"),dgo=o("SqueezeBertModel"),cgo=o(" (SqueezeBERT model)"),mgo=l(),up=a("li"),gte=a("strong"),fgo=o("swin"),ggo=o(" \u2014 "),$P=a("a"),hgo=o("SwinModel"),ugo=o(" (Swin model)"),pgo=l(),pp=a("li"),hte=a("strong"),_go=o("t5"),bgo=o(" \u2014 "),IP=a("a"),vgo=o("T5Model"),Fgo=o(" (T5 model)"),Tgo=l(),_p=a("li"),ute=a("strong"),Mgo=o("tapas"),Ego=o(" \u2014 "),qP=a("a"),Cgo=o("TapasModel"),wgo=o(" (TAPAS model)"),Ago=l(),bp=a("li"),pte=a("strong"),ygo=o("transfo-xl"),Lgo=o(" \u2014 "),NP=a("a"),xgo=o("TransfoXLModel"),kgo=o(" (Transformer-XL model)"),Sgo=l(),vp=a("li"),_te=a("strong"),Rgo=o("unispeech"),Bgo=o(" \u2014 "),jP=a("a"),Pgo=o("UniSpeechModel"),$go=o(" (UniSpeech model)"),Igo=l(),Fp=a("li"),bte=a("strong"),qgo=o("unispeech-sat"),Ngo=o(" \u2014 "),DP=a("a"),jgo=o("UniSpeechSatModel"),Dgo=o(" (UniSpeechSat model)"),Ggo=l(),Tp=a("li"),vte=a("strong"),Ogo=o("van"),Vgo=o(" \u2014 "),GP=a("a"),Xgo=o("VanModel"),zgo=o(" (VAN model)"),Qgo=l(),Mp=a("li"),Fte=a("strong"),Wgo=o("vilt"),Hgo=o(" \u2014 "),OP=a("a"),Ugo=o("ViltModel"),Jgo=o(" (ViLT model)"),Ygo=l(),Ep=a("li"),Tte=a("strong"),Kgo=o("vision-text-dual-encoder"),Zgo=o(" \u2014 "),VP=a("a"),eho=o("VisionTextDualEncoderModel"),oho=o(" (VisionTextDualEncoder model)"),rho=l(),Cp=a("li"),Mte=a("strong"),tho=o("visual_bert"),aho=o(" \u2014 "),XP=a("a"),nho=o("VisualBertModel"),sho=o(" (VisualBert model)"),lho=l(),wp=a("li"),Ete=a("strong"),iho=o("vit"),dho=o(" \u2014 "),zP=a("a"),cho=o("ViTModel"),mho=o(" (ViT model)"),fho=l(),Ap=a("li"),Cte=a("strong"),gho=o("vit_mae"),hho=o(" \u2014 "),QP=a("a"),uho=o("ViTMAEModel"),pho=o(" (ViTMAE model)"),_ho=l(),yp=a("li"),wte=a("strong"),bho=o("wav2vec2"),vho=o(" \u2014 "),WP=a("a"),Fho=o("Wav2Vec2Model"),Tho=o(" (Wav2Vec2 model)"),Mho=l(),Lp=a("li"),Ate=a("strong"),Eho=o("wavlm"),Cho=o(" \u2014 "),HP=a("a"),who=o("WavLMModel"),Aho=o(" (WavLM model)"),yho=l(),xp=a("li"),yte=a("strong"),Lho=o("xglm"),xho=o(" \u2014 "),UP=a("a"),kho=o("XGLMModel"),Sho=o(" (XGLM model)"),Rho=l(),kp=a("li"),Lte=a("strong"),Bho=o("xlm"),Pho=o(" \u2014 "),JP=a("a"),$ho=o("XLMModel"),Iho=o(" (XLM model)"),qho=l(),Sp=a("li"),xte=a("strong"),Nho=o("xlm-prophetnet"),jho=o(" \u2014 "),YP=a("a"),Dho=o("XLMProphetNetModel"),Gho=o(" (XLMProphetNet model)"),Oho=l(),Rp=a("li"),kte=a("strong"),Vho=o("xlm-roberta"),Xho=o(" \u2014 "),KP=a("a"),zho=o("XLMRobertaModel"),Qho=o(" (XLM-RoBERTa model)"),Who=l(),Bp=a("li"),Ste=a("strong"),Hho=o("xlm-roberta-xl"),Uho=o(" \u2014 "),ZP=a("a"),Jho=o("XLMRobertaXLModel"),Yho=o(" (XLM-RoBERTa-XL model)"),Kho=l(),Pp=a("li"),Rte=a("strong"),Zho=o("xlnet"),euo=o(" \u2014 "),e$=a("a"),ouo=o("XLNetModel"),ruo=o(" (XLNet model)"),tuo=l(),$p=a("li"),Bte=a("strong"),auo=o("yoso"),nuo=o(" \u2014 "),o$=a("a"),suo=o("YosoModel"),luo=o(" (YOSO model)"),iuo=l(),Ip=a("p"),duo=o("The model is set in evaluation mode by default using "),Pte=a("code"),cuo=o("model.eval()"),muo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$te=a("code"),fuo=o("model.train()"),guo=l(),Ite=a("p"),huo=o("Examples:"),uuo=l(),m(h6.$$.fragment),QRe=l(),ed=a("h2"),qp=a("a"),qte=a("span"),m(u6.$$.fragment),puo=l(),Nte=a("span"),_uo=o("AutoModelForPreTraining"),WRe=l(),Yo=a("div"),m(p6.$$.fragment),buo=l(),od=a("p"),vuo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),r$=a("a"),Fuo=o("from_pretrained()"),Tuo=o(" class method or the "),t$=a("a"),Muo=o("from_config()"),Euo=o(` class
method.`),Cuo=l(),_6=a("p"),wuo=o("This class cannot be instantiated directly using "),jte=a("code"),Auo=o("__init__()"),yuo=o(" (throws an error)."),Luo=l(),zr=a("div"),m(b6.$$.fragment),xuo=l(),Dte=a("p"),kuo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Suo=l(),rd=a("p"),Ruo=o(`Note:
Loading a model from its configuration file does `),Gte=a("strong"),Buo=o("not"),Puo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),a$=a("a"),$uo=o("from_pretrained()"),Iuo=o(" to load the model weights."),quo=l(),Ote=a("p"),Nuo=o("Examples:"),juo=l(),m(v6.$$.fragment),Duo=l(),Ne=a("div"),m(F6.$$.fragment),Guo=l(),Vte=a("p"),Ouo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Vuo=l(),za=a("p"),Xuo=o("The model class to instantiate is selected based on the "),Xte=a("code"),zuo=o("model_type"),Quo=o(` property of the config object (either
passed as an argument or loaded from `),zte=a("code"),Wuo=o("pretrained_model_name_or_path"),Huo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qte=a("code"),Uuo=o("pretrained_model_name_or_path"),Juo=o(":"),Yuo=l(),S=a("ul"),Np=a("li"),Wte=a("strong"),Kuo=o("albert"),Zuo=o(" \u2014 "),n$=a("a"),epo=o("AlbertForPreTraining"),opo=o(" (ALBERT model)"),rpo=l(),jp=a("li"),Hte=a("strong"),tpo=o("bart"),apo=o(" \u2014 "),s$=a("a"),npo=o("BartForConditionalGeneration"),spo=o(" (BART model)"),lpo=l(),Dp=a("li"),Ute=a("strong"),ipo=o("bert"),dpo=o(" \u2014 "),l$=a("a"),cpo=o("BertForPreTraining"),mpo=o(" (BERT model)"),fpo=l(),Gp=a("li"),Jte=a("strong"),gpo=o("big_bird"),hpo=o(" \u2014 "),i$=a("a"),upo=o("BigBirdForPreTraining"),ppo=o(" (BigBird model)"),_po=l(),Op=a("li"),Yte=a("strong"),bpo=o("camembert"),vpo=o(" \u2014 "),d$=a("a"),Fpo=o("CamembertForMaskedLM"),Tpo=o(" (CamemBERT model)"),Mpo=l(),Vp=a("li"),Kte=a("strong"),Epo=o("ctrl"),Cpo=o(" \u2014 "),c$=a("a"),wpo=o("CTRLLMHeadModel"),Apo=o(" (CTRL model)"),ypo=l(),Xp=a("li"),Zte=a("strong"),Lpo=o("data2vec-text"),xpo=o(" \u2014 "),m$=a("a"),kpo=o("Data2VecTextForMaskedLM"),Spo=o(" (Data2VecText model)"),Rpo=l(),zp=a("li"),eae=a("strong"),Bpo=o("deberta"),Ppo=o(" \u2014 "),f$=a("a"),$po=o("DebertaForMaskedLM"),Ipo=o(" (DeBERTa model)"),qpo=l(),Qp=a("li"),oae=a("strong"),Npo=o("deberta-v2"),jpo=o(" \u2014 "),g$=a("a"),Dpo=o("DebertaV2ForMaskedLM"),Gpo=o(" (DeBERTa-v2 model)"),Opo=l(),Wp=a("li"),rae=a("strong"),Vpo=o("distilbert"),Xpo=o(" \u2014 "),h$=a("a"),zpo=o("DistilBertForMaskedLM"),Qpo=o(" (DistilBERT model)"),Wpo=l(),Hp=a("li"),tae=a("strong"),Hpo=o("electra"),Upo=o(" \u2014 "),u$=a("a"),Jpo=o("ElectraForPreTraining"),Ypo=o(" (ELECTRA model)"),Kpo=l(),Up=a("li"),aae=a("strong"),Zpo=o("flaubert"),e_o=o(" \u2014 "),p$=a("a"),o_o=o("FlaubertWithLMHeadModel"),r_o=o(" (FlauBERT model)"),t_o=l(),Jp=a("li"),nae=a("strong"),a_o=o("fnet"),n_o=o(" \u2014 "),_$=a("a"),s_o=o("FNetForPreTraining"),l_o=o(" (FNet model)"),i_o=l(),Yp=a("li"),sae=a("strong"),d_o=o("fsmt"),c_o=o(" \u2014 "),b$=a("a"),m_o=o("FSMTForConditionalGeneration"),f_o=o(" (FairSeq Machine-Translation model)"),g_o=l(),Kp=a("li"),lae=a("strong"),h_o=o("funnel"),u_o=o(" \u2014 "),v$=a("a"),p_o=o("FunnelForPreTraining"),__o=o(" (Funnel Transformer model)"),b_o=l(),Zp=a("li"),iae=a("strong"),v_o=o("gpt2"),F_o=o(" \u2014 "),F$=a("a"),T_o=o("GPT2LMHeadModel"),M_o=o(" (OpenAI GPT-2 model)"),E_o=l(),e_=a("li"),dae=a("strong"),C_o=o("ibert"),w_o=o(" \u2014 "),T$=a("a"),A_o=o("IBertForMaskedLM"),y_o=o(" (I-BERT model)"),L_o=l(),o_=a("li"),cae=a("strong"),x_o=o("layoutlm"),k_o=o(" \u2014 "),M$=a("a"),S_o=o("LayoutLMForMaskedLM"),R_o=o(" (LayoutLM model)"),B_o=l(),r_=a("li"),mae=a("strong"),P_o=o("longformer"),$_o=o(" \u2014 "),E$=a("a"),I_o=o("LongformerForMaskedLM"),q_o=o(" (Longformer model)"),N_o=l(),t_=a("li"),fae=a("strong"),j_o=o("lxmert"),D_o=o(" \u2014 "),C$=a("a"),G_o=o("LxmertForPreTraining"),O_o=o(" (LXMERT model)"),V_o=l(),a_=a("li"),gae=a("strong"),X_o=o("megatron-bert"),z_o=o(" \u2014 "),w$=a("a"),Q_o=o("MegatronBertForPreTraining"),W_o=o(" (MegatronBert model)"),H_o=l(),n_=a("li"),hae=a("strong"),U_o=o("mobilebert"),J_o=o(" \u2014 "),A$=a("a"),Y_o=o("MobileBertForPreTraining"),K_o=o(" (MobileBERT model)"),Z_o=l(),s_=a("li"),uae=a("strong"),ebo=o("mpnet"),obo=o(" \u2014 "),y$=a("a"),rbo=o("MPNetForMaskedLM"),tbo=o(" (MPNet model)"),abo=l(),l_=a("li"),pae=a("strong"),nbo=o("openai-gpt"),sbo=o(" \u2014 "),L$=a("a"),lbo=o("OpenAIGPTLMHeadModel"),ibo=o(" (OpenAI GPT model)"),dbo=l(),i_=a("li"),_ae=a("strong"),cbo=o("retribert"),mbo=o(" \u2014 "),x$=a("a"),fbo=o("RetriBertModel"),gbo=o(" (RetriBERT model)"),hbo=l(),d_=a("li"),bae=a("strong"),ubo=o("roberta"),pbo=o(" \u2014 "),k$=a("a"),_bo=o("RobertaForMaskedLM"),bbo=o(" (RoBERTa model)"),vbo=l(),c_=a("li"),vae=a("strong"),Fbo=o("squeezebert"),Tbo=o(" \u2014 "),S$=a("a"),Mbo=o("SqueezeBertForMaskedLM"),Ebo=o(" (SqueezeBERT model)"),Cbo=l(),m_=a("li"),Fae=a("strong"),wbo=o("t5"),Abo=o(" \u2014 "),R$=a("a"),ybo=o("T5ForConditionalGeneration"),Lbo=o(" (T5 model)"),xbo=l(),f_=a("li"),Tae=a("strong"),kbo=o("tapas"),Sbo=o(" \u2014 "),B$=a("a"),Rbo=o("TapasForMaskedLM"),Bbo=o(" (TAPAS model)"),Pbo=l(),g_=a("li"),Mae=a("strong"),$bo=o("transfo-xl"),Ibo=o(" \u2014 "),P$=a("a"),qbo=o("TransfoXLLMHeadModel"),Nbo=o(" (Transformer-XL model)"),jbo=l(),h_=a("li"),Eae=a("strong"),Dbo=o("unispeech"),Gbo=o(" \u2014 "),$$=a("a"),Obo=o("UniSpeechForPreTraining"),Vbo=o(" (UniSpeech model)"),Xbo=l(),u_=a("li"),Cae=a("strong"),zbo=o("unispeech-sat"),Qbo=o(" \u2014 "),I$=a("a"),Wbo=o("UniSpeechSatForPreTraining"),Hbo=o(" (UniSpeechSat model)"),Ubo=l(),p_=a("li"),wae=a("strong"),Jbo=o("visual_bert"),Ybo=o(" \u2014 "),q$=a("a"),Kbo=o("VisualBertForPreTraining"),Zbo=o(" (VisualBert model)"),e2o=l(),__=a("li"),Aae=a("strong"),o2o=o("vit_mae"),r2o=o(" \u2014 "),N$=a("a"),t2o=o("ViTMAEForPreTraining"),a2o=o(" (ViTMAE model)"),n2o=l(),b_=a("li"),yae=a("strong"),s2o=o("wav2vec2"),l2o=o(" \u2014 "),j$=a("a"),i2o=o("Wav2Vec2ForPreTraining"),d2o=o(" (Wav2Vec2 model)"),c2o=l(),v_=a("li"),Lae=a("strong"),m2o=o("xlm"),f2o=o(" \u2014 "),D$=a("a"),g2o=o("XLMWithLMHeadModel"),h2o=o(" (XLM model)"),u2o=l(),F_=a("li"),xae=a("strong"),p2o=o("xlm-roberta"),_2o=o(" \u2014 "),G$=a("a"),b2o=o("XLMRobertaForMaskedLM"),v2o=o(" (XLM-RoBERTa model)"),F2o=l(),T_=a("li"),kae=a("strong"),T2o=o("xlm-roberta-xl"),M2o=o(" \u2014 "),O$=a("a"),E2o=o("XLMRobertaXLForMaskedLM"),C2o=o(" (XLM-RoBERTa-XL model)"),w2o=l(),M_=a("li"),Sae=a("strong"),A2o=o("xlnet"),y2o=o(" \u2014 "),V$=a("a"),L2o=o("XLNetLMHeadModel"),x2o=o(" (XLNet model)"),k2o=l(),E_=a("p"),S2o=o("The model is set in evaluation mode by default using "),Rae=a("code"),R2o=o("model.eval()"),B2o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Bae=a("code"),P2o=o("model.train()"),$2o=l(),Pae=a("p"),I2o=o("Examples:"),q2o=l(),m(T6.$$.fragment),HRe=l(),td=a("h2"),C_=a("a"),$ae=a("span"),m(M6.$$.fragment),N2o=l(),Iae=a("span"),j2o=o("AutoModelForCausalLM"),URe=l(),Ko=a("div"),m(E6.$$.fragment),D2o=l(),ad=a("p"),G2o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),X$=a("a"),O2o=o("from_pretrained()"),V2o=o(" class method or the "),z$=a("a"),X2o=o("from_config()"),z2o=o(` class
method.`),Q2o=l(),C6=a("p"),W2o=o("This class cannot be instantiated directly using "),qae=a("code"),H2o=o("__init__()"),U2o=o(" (throws an error)."),J2o=l(),Qr=a("div"),m(w6.$$.fragment),Y2o=l(),Nae=a("p"),K2o=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Z2o=l(),nd=a("p"),evo=o(`Note:
Loading a model from its configuration file does `),jae=a("strong"),ovo=o("not"),rvo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Q$=a("a"),tvo=o("from_pretrained()"),avo=o(" to load the model weights."),nvo=l(),Dae=a("p"),svo=o("Examples:"),lvo=l(),m(A6.$$.fragment),ivo=l(),je=a("div"),m(y6.$$.fragment),dvo=l(),Gae=a("p"),cvo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),mvo=l(),Qa=a("p"),fvo=o("The model class to instantiate is selected based on the "),Oae=a("code"),gvo=o("model_type"),hvo=o(` property of the config object (either
passed as an argument or loaded from `),Vae=a("code"),uvo=o("pretrained_model_name_or_path"),pvo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xae=a("code"),_vo=o("pretrained_model_name_or_path"),bvo=o(":"),vvo=l(),$=a("ul"),w_=a("li"),zae=a("strong"),Fvo=o("bart"),Tvo=o(" \u2014 "),W$=a("a"),Mvo=o("BartForCausalLM"),Evo=o(" (BART model)"),Cvo=l(),A_=a("li"),Qae=a("strong"),wvo=o("bert"),Avo=o(" \u2014 "),H$=a("a"),yvo=o("BertLMHeadModel"),Lvo=o(" (BERT model)"),xvo=l(),y_=a("li"),Wae=a("strong"),kvo=o("bert-generation"),Svo=o(" \u2014 "),U$=a("a"),Rvo=o("BertGenerationDecoder"),Bvo=o(" (Bert Generation model)"),Pvo=l(),L_=a("li"),Hae=a("strong"),$vo=o("big_bird"),Ivo=o(" \u2014 "),J$=a("a"),qvo=o("BigBirdForCausalLM"),Nvo=o(" (BigBird model)"),jvo=l(),x_=a("li"),Uae=a("strong"),Dvo=o("bigbird_pegasus"),Gvo=o(" \u2014 "),Y$=a("a"),Ovo=o("BigBirdPegasusForCausalLM"),Vvo=o(" (BigBirdPegasus model)"),Xvo=l(),k_=a("li"),Jae=a("strong"),zvo=o("blenderbot"),Qvo=o(" \u2014 "),K$=a("a"),Wvo=o("BlenderbotForCausalLM"),Hvo=o(" (Blenderbot model)"),Uvo=l(),S_=a("li"),Yae=a("strong"),Jvo=o("blenderbot-small"),Yvo=o(" \u2014 "),Z$=a("a"),Kvo=o("BlenderbotSmallForCausalLM"),Zvo=o(" (BlenderbotSmall model)"),eFo=l(),R_=a("li"),Kae=a("strong"),oFo=o("camembert"),rFo=o(" \u2014 "),eI=a("a"),tFo=o("CamembertForCausalLM"),aFo=o(" (CamemBERT model)"),nFo=l(),B_=a("li"),Zae=a("strong"),sFo=o("ctrl"),lFo=o(" \u2014 "),oI=a("a"),iFo=o("CTRLLMHeadModel"),dFo=o(" (CTRL model)"),cFo=l(),P_=a("li"),ene=a("strong"),mFo=o("data2vec-text"),fFo=o(" \u2014 "),rI=a("a"),gFo=o("Data2VecTextForCausalLM"),hFo=o(" (Data2VecText model)"),uFo=l(),$_=a("li"),one=a("strong"),pFo=o("electra"),_Fo=o(" \u2014 "),tI=a("a"),bFo=o("ElectraForCausalLM"),vFo=o(" (ELECTRA model)"),FFo=l(),I_=a("li"),rne=a("strong"),TFo=o("gpt2"),MFo=o(" \u2014 "),aI=a("a"),EFo=o("GPT2LMHeadModel"),CFo=o(" (OpenAI GPT-2 model)"),wFo=l(),q_=a("li"),tne=a("strong"),AFo=o("gpt_neo"),yFo=o(" \u2014 "),nI=a("a"),LFo=o("GPTNeoForCausalLM"),xFo=o(" (GPT Neo model)"),kFo=l(),N_=a("li"),ane=a("strong"),SFo=o("gptj"),RFo=o(" \u2014 "),sI=a("a"),BFo=o("GPTJForCausalLM"),PFo=o(" (GPT-J model)"),$Fo=l(),j_=a("li"),nne=a("strong"),IFo=o("marian"),qFo=o(" \u2014 "),lI=a("a"),NFo=o("MarianForCausalLM"),jFo=o(" (Marian model)"),DFo=l(),D_=a("li"),sne=a("strong"),GFo=o("mbart"),OFo=o(" \u2014 "),iI=a("a"),VFo=o("MBartForCausalLM"),XFo=o(" (mBART model)"),zFo=l(),G_=a("li"),lne=a("strong"),QFo=o("megatron-bert"),WFo=o(" \u2014 "),dI=a("a"),HFo=o("MegatronBertForCausalLM"),UFo=o(" (MegatronBert model)"),JFo=l(),O_=a("li"),ine=a("strong"),YFo=o("openai-gpt"),KFo=o(" \u2014 "),cI=a("a"),ZFo=o("OpenAIGPTLMHeadModel"),e1o=o(" (OpenAI GPT model)"),o1o=l(),V_=a("li"),dne=a("strong"),r1o=o("pegasus"),t1o=o(" \u2014 "),mI=a("a"),a1o=o("PegasusForCausalLM"),n1o=o(" (Pegasus model)"),s1o=l(),X_=a("li"),cne=a("strong"),l1o=o("plbart"),i1o=o(" \u2014 "),fI=a("a"),d1o=o("PLBartForCausalLM"),c1o=o(" (PLBart model)"),m1o=l(),z_=a("li"),mne=a("strong"),f1o=o("prophetnet"),g1o=o(" \u2014 "),gI=a("a"),h1o=o("ProphetNetForCausalLM"),u1o=o(" (ProphetNet model)"),p1o=l(),Q_=a("li"),fne=a("strong"),_1o=o("qdqbert"),b1o=o(" \u2014 "),hI=a("a"),v1o=o("QDQBertLMHeadModel"),F1o=o(" (QDQBert model)"),T1o=l(),W_=a("li"),gne=a("strong"),M1o=o("reformer"),E1o=o(" \u2014 "),uI=a("a"),C1o=o("ReformerModelWithLMHead"),w1o=o(" (Reformer model)"),A1o=l(),H_=a("li"),hne=a("strong"),y1o=o("rembert"),L1o=o(" \u2014 "),pI=a("a"),x1o=o("RemBertForCausalLM"),k1o=o(" (RemBERT model)"),S1o=l(),U_=a("li"),une=a("strong"),R1o=o("roberta"),B1o=o(" \u2014 "),_I=a("a"),P1o=o("RobertaForCausalLM"),$1o=o(" (RoBERTa model)"),I1o=l(),J_=a("li"),pne=a("strong"),q1o=o("roformer"),N1o=o(" \u2014 "),bI=a("a"),j1o=o("RoFormerForCausalLM"),D1o=o(" (RoFormer model)"),G1o=l(),Y_=a("li"),_ne=a("strong"),O1o=o("speech_to_text_2"),V1o=o(" \u2014 "),vI=a("a"),X1o=o("Speech2Text2ForCausalLM"),z1o=o(" (Speech2Text2 model)"),Q1o=l(),K_=a("li"),bne=a("strong"),W1o=o("transfo-xl"),H1o=o(" \u2014 "),FI=a("a"),U1o=o("TransfoXLLMHeadModel"),J1o=o(" (Transformer-XL model)"),Y1o=l(),Z_=a("li"),vne=a("strong"),K1o=o("trocr"),Z1o=o(" \u2014 "),TI=a("a"),eTo=o("TrOCRForCausalLM"),oTo=o(" (TrOCR model)"),rTo=l(),eb=a("li"),Fne=a("strong"),tTo=o("xglm"),aTo=o(" \u2014 "),MI=a("a"),nTo=o("XGLMForCausalLM"),sTo=o(" (XGLM model)"),lTo=l(),ob=a("li"),Tne=a("strong"),iTo=o("xlm"),dTo=o(" \u2014 "),EI=a("a"),cTo=o("XLMWithLMHeadModel"),mTo=o(" (XLM model)"),fTo=l(),rb=a("li"),Mne=a("strong"),gTo=o("xlm-prophetnet"),hTo=o(" \u2014 "),CI=a("a"),uTo=o("XLMProphetNetForCausalLM"),pTo=o(" (XLMProphetNet model)"),_To=l(),tb=a("li"),Ene=a("strong"),bTo=o("xlm-roberta"),vTo=o(" \u2014 "),wI=a("a"),FTo=o("XLMRobertaForCausalLM"),TTo=o(" (XLM-RoBERTa model)"),MTo=l(),ab=a("li"),Cne=a("strong"),ETo=o("xlm-roberta-xl"),CTo=o(" \u2014 "),AI=a("a"),wTo=o("XLMRobertaXLForCausalLM"),ATo=o(" (XLM-RoBERTa-XL model)"),yTo=l(),nb=a("li"),wne=a("strong"),LTo=o("xlnet"),xTo=o(" \u2014 "),yI=a("a"),kTo=o("XLNetLMHeadModel"),STo=o(" (XLNet model)"),RTo=l(),sb=a("p"),BTo=o("The model is set in evaluation mode by default using "),Ane=a("code"),PTo=o("model.eval()"),$To=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yne=a("code"),ITo=o("model.train()"),qTo=l(),Lne=a("p"),NTo=o("Examples:"),jTo=l(),m(L6.$$.fragment),JRe=l(),sd=a("h2"),lb=a("a"),xne=a("span"),m(x6.$$.fragment),DTo=l(),kne=a("span"),GTo=o("AutoModelForMaskedLM"),YRe=l(),Zo=a("div"),m(k6.$$.fragment),OTo=l(),ld=a("p"),VTo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),LI=a("a"),XTo=o("from_pretrained()"),zTo=o(" class method or the "),xI=a("a"),QTo=o("from_config()"),WTo=o(` class
method.`),HTo=l(),S6=a("p"),UTo=o("This class cannot be instantiated directly using "),Sne=a("code"),JTo=o("__init__()"),YTo=o(" (throws an error)."),KTo=l(),Wr=a("div"),m(R6.$$.fragment),ZTo=l(),Rne=a("p"),eMo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),oMo=l(),id=a("p"),rMo=o(`Note:
Loading a model from its configuration file does `),Bne=a("strong"),tMo=o("not"),aMo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kI=a("a"),nMo=o("from_pretrained()"),sMo=o(" to load the model weights."),lMo=l(),Pne=a("p"),iMo=o("Examples:"),dMo=l(),m(B6.$$.fragment),cMo=l(),De=a("div"),m(P6.$$.fragment),mMo=l(),$ne=a("p"),fMo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),gMo=l(),Wa=a("p"),hMo=o("The model class to instantiate is selected based on the "),Ine=a("code"),uMo=o("model_type"),pMo=o(` property of the config object (either
passed as an argument or loaded from `),qne=a("code"),_Mo=o("pretrained_model_name_or_path"),bMo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nne=a("code"),vMo=o("pretrained_model_name_or_path"),FMo=o(":"),TMo=l(),I=a("ul"),ib=a("li"),jne=a("strong"),MMo=o("albert"),EMo=o(" \u2014 "),SI=a("a"),CMo=o("AlbertForMaskedLM"),wMo=o(" (ALBERT model)"),AMo=l(),db=a("li"),Dne=a("strong"),yMo=o("bart"),LMo=o(" \u2014 "),RI=a("a"),xMo=o("BartForConditionalGeneration"),kMo=o(" (BART model)"),SMo=l(),cb=a("li"),Gne=a("strong"),RMo=o("bert"),BMo=o(" \u2014 "),BI=a("a"),PMo=o("BertForMaskedLM"),$Mo=o(" (BERT model)"),IMo=l(),mb=a("li"),One=a("strong"),qMo=o("big_bird"),NMo=o(" \u2014 "),PI=a("a"),jMo=o("BigBirdForMaskedLM"),DMo=o(" (BigBird model)"),GMo=l(),fb=a("li"),Vne=a("strong"),OMo=o("camembert"),VMo=o(" \u2014 "),$I=a("a"),XMo=o("CamembertForMaskedLM"),zMo=o(" (CamemBERT model)"),QMo=l(),gb=a("li"),Xne=a("strong"),WMo=o("convbert"),HMo=o(" \u2014 "),II=a("a"),UMo=o("ConvBertForMaskedLM"),JMo=o(" (ConvBERT model)"),YMo=l(),hb=a("li"),zne=a("strong"),KMo=o("data2vec-text"),ZMo=o(" \u2014 "),qI=a("a"),e4o=o("Data2VecTextForMaskedLM"),o4o=o(" (Data2VecText model)"),r4o=l(),ub=a("li"),Qne=a("strong"),t4o=o("deberta"),a4o=o(" \u2014 "),NI=a("a"),n4o=o("DebertaForMaskedLM"),s4o=o(" (DeBERTa model)"),l4o=l(),pb=a("li"),Wne=a("strong"),i4o=o("deberta-v2"),d4o=o(" \u2014 "),jI=a("a"),c4o=o("DebertaV2ForMaskedLM"),m4o=o(" (DeBERTa-v2 model)"),f4o=l(),_b=a("li"),Hne=a("strong"),g4o=o("distilbert"),h4o=o(" \u2014 "),DI=a("a"),u4o=o("DistilBertForMaskedLM"),p4o=o(" (DistilBERT model)"),_4o=l(),bb=a("li"),Une=a("strong"),b4o=o("electra"),v4o=o(" \u2014 "),GI=a("a"),F4o=o("ElectraForMaskedLM"),T4o=o(" (ELECTRA model)"),M4o=l(),vb=a("li"),Jne=a("strong"),E4o=o("flaubert"),C4o=o(" \u2014 "),OI=a("a"),w4o=o("FlaubertWithLMHeadModel"),A4o=o(" (FlauBERT model)"),y4o=l(),Fb=a("li"),Yne=a("strong"),L4o=o("fnet"),x4o=o(" \u2014 "),VI=a("a"),k4o=o("FNetForMaskedLM"),S4o=o(" (FNet model)"),R4o=l(),Tb=a("li"),Kne=a("strong"),B4o=o("funnel"),P4o=o(" \u2014 "),XI=a("a"),$4o=o("FunnelForMaskedLM"),I4o=o(" (Funnel Transformer model)"),q4o=l(),Mb=a("li"),Zne=a("strong"),N4o=o("ibert"),j4o=o(" \u2014 "),zI=a("a"),D4o=o("IBertForMaskedLM"),G4o=o(" (I-BERT model)"),O4o=l(),Eb=a("li"),ese=a("strong"),V4o=o("layoutlm"),X4o=o(" \u2014 "),QI=a("a"),z4o=o("LayoutLMForMaskedLM"),Q4o=o(" (LayoutLM model)"),W4o=l(),Cb=a("li"),ose=a("strong"),H4o=o("longformer"),U4o=o(" \u2014 "),WI=a("a"),J4o=o("LongformerForMaskedLM"),Y4o=o(" (Longformer model)"),K4o=l(),wb=a("li"),rse=a("strong"),Z4o=o("mbart"),eEo=o(" \u2014 "),HI=a("a"),oEo=o("MBartForConditionalGeneration"),rEo=o(" (mBART model)"),tEo=l(),Ab=a("li"),tse=a("strong"),aEo=o("megatron-bert"),nEo=o(" \u2014 "),UI=a("a"),sEo=o("MegatronBertForMaskedLM"),lEo=o(" (MegatronBert model)"),iEo=l(),yb=a("li"),ase=a("strong"),dEo=o("mobilebert"),cEo=o(" \u2014 "),JI=a("a"),mEo=o("MobileBertForMaskedLM"),fEo=o(" (MobileBERT model)"),gEo=l(),Lb=a("li"),nse=a("strong"),hEo=o("mpnet"),uEo=o(" \u2014 "),YI=a("a"),pEo=o("MPNetForMaskedLM"),_Eo=o(" (MPNet model)"),bEo=l(),xb=a("li"),sse=a("strong"),vEo=o("nystromformer"),FEo=o(" \u2014 "),KI=a("a"),TEo=o("NystromformerForMaskedLM"),MEo=o(" (Nystromformer model)"),EEo=l(),kb=a("li"),lse=a("strong"),CEo=o("perceiver"),wEo=o(" \u2014 "),ZI=a("a"),AEo=o("PerceiverForMaskedLM"),yEo=o(" (Perceiver model)"),LEo=l(),Sb=a("li"),ise=a("strong"),xEo=o("qdqbert"),kEo=o(" \u2014 "),eq=a("a"),SEo=o("QDQBertForMaskedLM"),REo=o(" (QDQBert model)"),BEo=l(),Rb=a("li"),dse=a("strong"),PEo=o("reformer"),$Eo=o(" \u2014 "),oq=a("a"),IEo=o("ReformerForMaskedLM"),qEo=o(" (Reformer model)"),NEo=l(),Bb=a("li"),cse=a("strong"),jEo=o("rembert"),DEo=o(" \u2014 "),rq=a("a"),GEo=o("RemBertForMaskedLM"),OEo=o(" (RemBERT model)"),VEo=l(),Pb=a("li"),mse=a("strong"),XEo=o("roberta"),zEo=o(" \u2014 "),tq=a("a"),QEo=o("RobertaForMaskedLM"),WEo=o(" (RoBERTa model)"),HEo=l(),$b=a("li"),fse=a("strong"),UEo=o("roformer"),JEo=o(" \u2014 "),aq=a("a"),YEo=o("RoFormerForMaskedLM"),KEo=o(" (RoFormer model)"),ZEo=l(),Ib=a("li"),gse=a("strong"),e5o=o("squeezebert"),o5o=o(" \u2014 "),nq=a("a"),r5o=o("SqueezeBertForMaskedLM"),t5o=o(" (SqueezeBERT model)"),a5o=l(),qb=a("li"),hse=a("strong"),n5o=o("tapas"),s5o=o(" \u2014 "),sq=a("a"),l5o=o("TapasForMaskedLM"),i5o=o(" (TAPAS model)"),d5o=l(),Nb=a("li"),use=a("strong"),c5o=o("wav2vec2"),m5o=o(" \u2014 "),pse=a("code"),f5o=o("Wav2Vec2ForMaskedLM"),g5o=o(" (Wav2Vec2 model)"),h5o=l(),jb=a("li"),_se=a("strong"),u5o=o("xlm"),p5o=o(" \u2014 "),lq=a("a"),_5o=o("XLMWithLMHeadModel"),b5o=o(" (XLM model)"),v5o=l(),Db=a("li"),bse=a("strong"),F5o=o("xlm-roberta"),T5o=o(" \u2014 "),iq=a("a"),M5o=o("XLMRobertaForMaskedLM"),E5o=o(" (XLM-RoBERTa model)"),C5o=l(),Gb=a("li"),vse=a("strong"),w5o=o("xlm-roberta-xl"),A5o=o(" \u2014 "),dq=a("a"),y5o=o("XLMRobertaXLForMaskedLM"),L5o=o(" (XLM-RoBERTa-XL model)"),x5o=l(),Ob=a("li"),Fse=a("strong"),k5o=o("yoso"),S5o=o(" \u2014 "),cq=a("a"),R5o=o("YosoForMaskedLM"),B5o=o(" (YOSO model)"),P5o=l(),Vb=a("p"),$5o=o("The model is set in evaluation mode by default using "),Tse=a("code"),I5o=o("model.eval()"),q5o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mse=a("code"),N5o=o("model.train()"),j5o=l(),Ese=a("p"),D5o=o("Examples:"),G5o=l(),m($6.$$.fragment),KRe=l(),dd=a("h2"),Xb=a("a"),Cse=a("span"),m(I6.$$.fragment),O5o=l(),wse=a("span"),V5o=o("AutoModelForSeq2SeqLM"),ZRe=l(),er=a("div"),m(q6.$$.fragment),X5o=l(),cd=a("p"),z5o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),mq=a("a"),Q5o=o("from_pretrained()"),W5o=o(" class method or the "),fq=a("a"),H5o=o("from_config()"),U5o=o(` class
method.`),J5o=l(),N6=a("p"),Y5o=o("This class cannot be instantiated directly using "),Ase=a("code"),K5o=o("__init__()"),Z5o=o(" (throws an error)."),e3o=l(),Hr=a("div"),m(j6.$$.fragment),o3o=l(),yse=a("p"),r3o=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),t3o=l(),md=a("p"),a3o=o(`Note:
Loading a model from its configuration file does `),Lse=a("strong"),n3o=o("not"),s3o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gq=a("a"),l3o=o("from_pretrained()"),i3o=o(" to load the model weights."),d3o=l(),xse=a("p"),c3o=o("Examples:"),m3o=l(),m(D6.$$.fragment),f3o=l(),Ge=a("div"),m(G6.$$.fragment),g3o=l(),kse=a("p"),h3o=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),u3o=l(),Ha=a("p"),p3o=o("The model class to instantiate is selected based on the "),Sse=a("code"),_3o=o("model_type"),b3o=o(` property of the config object (either
passed as an argument or loaded from `),Rse=a("code"),v3o=o("pretrained_model_name_or_path"),F3o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bse=a("code"),T3o=o("pretrained_model_name_or_path"),M3o=o(":"),E3o=l(),ne=a("ul"),zb=a("li"),Pse=a("strong"),C3o=o("bart"),w3o=o(" \u2014 "),hq=a("a"),A3o=o("BartForConditionalGeneration"),y3o=o(" (BART model)"),L3o=l(),Qb=a("li"),$se=a("strong"),x3o=o("bigbird_pegasus"),k3o=o(" \u2014 "),uq=a("a"),S3o=o("BigBirdPegasusForConditionalGeneration"),R3o=o(" (BigBirdPegasus model)"),B3o=l(),Wb=a("li"),Ise=a("strong"),P3o=o("blenderbot"),$3o=o(" \u2014 "),pq=a("a"),I3o=o("BlenderbotForConditionalGeneration"),q3o=o(" (Blenderbot model)"),N3o=l(),Hb=a("li"),qse=a("strong"),j3o=o("blenderbot-small"),D3o=o(" \u2014 "),_q=a("a"),G3o=o("BlenderbotSmallForConditionalGeneration"),O3o=o(" (BlenderbotSmall model)"),V3o=l(),Ub=a("li"),Nse=a("strong"),X3o=o("encoder-decoder"),z3o=o(" \u2014 "),bq=a("a"),Q3o=o("EncoderDecoderModel"),W3o=o(" (Encoder decoder model)"),H3o=l(),Jb=a("li"),jse=a("strong"),U3o=o("fsmt"),J3o=o(" \u2014 "),vq=a("a"),Y3o=o("FSMTForConditionalGeneration"),K3o=o(" (FairSeq Machine-Translation model)"),Z3o=l(),Yb=a("li"),Dse=a("strong"),eCo=o("led"),oCo=o(" \u2014 "),Fq=a("a"),rCo=o("LEDForConditionalGeneration"),tCo=o(" (LED model)"),aCo=l(),Kb=a("li"),Gse=a("strong"),nCo=o("m2m_100"),sCo=o(" \u2014 "),Tq=a("a"),lCo=o("M2M100ForConditionalGeneration"),iCo=o(" (M2M100 model)"),dCo=l(),Zb=a("li"),Ose=a("strong"),cCo=o("marian"),mCo=o(" \u2014 "),Mq=a("a"),fCo=o("MarianMTModel"),gCo=o(" (Marian model)"),hCo=l(),e2=a("li"),Vse=a("strong"),uCo=o("mbart"),pCo=o(" \u2014 "),Eq=a("a"),_Co=o("MBartForConditionalGeneration"),bCo=o(" (mBART model)"),vCo=l(),o2=a("li"),Xse=a("strong"),FCo=o("mt5"),TCo=o(" \u2014 "),Cq=a("a"),MCo=o("MT5ForConditionalGeneration"),ECo=o(" (mT5 model)"),CCo=l(),r2=a("li"),zse=a("strong"),wCo=o("pegasus"),ACo=o(" \u2014 "),wq=a("a"),yCo=o("PegasusForConditionalGeneration"),LCo=o(" (Pegasus model)"),xCo=l(),t2=a("li"),Qse=a("strong"),kCo=o("plbart"),SCo=o(" \u2014 "),Aq=a("a"),RCo=o("PLBartForConditionalGeneration"),BCo=o(" (PLBart model)"),PCo=l(),a2=a("li"),Wse=a("strong"),$Co=o("prophetnet"),ICo=o(" \u2014 "),yq=a("a"),qCo=o("ProphetNetForConditionalGeneration"),NCo=o(" (ProphetNet model)"),jCo=l(),n2=a("li"),Hse=a("strong"),DCo=o("t5"),GCo=o(" \u2014 "),Lq=a("a"),OCo=o("T5ForConditionalGeneration"),VCo=o(" (T5 model)"),XCo=l(),s2=a("li"),Use=a("strong"),zCo=o("tapex"),QCo=o(" \u2014 "),xq=a("a"),WCo=o("BartForConditionalGeneration"),HCo=o(" (TAPEX model)"),UCo=l(),l2=a("li"),Jse=a("strong"),JCo=o("xlm-prophetnet"),YCo=o(" \u2014 "),kq=a("a"),KCo=o("XLMProphetNetForConditionalGeneration"),ZCo=o(" (XLMProphetNet model)"),ewo=l(),i2=a("p"),owo=o("The model is set in evaluation mode by default using "),Yse=a("code"),rwo=o("model.eval()"),two=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Kse=a("code"),awo=o("model.train()"),nwo=l(),Zse=a("p"),swo=o("Examples:"),lwo=l(),m(O6.$$.fragment),eBe=l(),fd=a("h2"),d2=a("a"),ele=a("span"),m(V6.$$.fragment),iwo=l(),ole=a("span"),dwo=o("AutoModelForSequenceClassification"),oBe=l(),or=a("div"),m(X6.$$.fragment),cwo=l(),gd=a("p"),mwo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Sq=a("a"),fwo=o("from_pretrained()"),gwo=o(" class method or the "),Rq=a("a"),hwo=o("from_config()"),uwo=o(` class
method.`),pwo=l(),z6=a("p"),_wo=o("This class cannot be instantiated directly using "),rle=a("code"),bwo=o("__init__()"),vwo=o(" (throws an error)."),Fwo=l(),Ur=a("div"),m(Q6.$$.fragment),Two=l(),tle=a("p"),Mwo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Ewo=l(),hd=a("p"),Cwo=o(`Note:
Loading a model from its configuration file does `),ale=a("strong"),wwo=o("not"),Awo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Bq=a("a"),ywo=o("from_pretrained()"),Lwo=o(" to load the model weights."),xwo=l(),nle=a("p"),kwo=o("Examples:"),Swo=l(),m(W6.$$.fragment),Rwo=l(),Oe=a("div"),m(H6.$$.fragment),Bwo=l(),sle=a("p"),Pwo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),$wo=l(),Ua=a("p"),Iwo=o("The model class to instantiate is selected based on the "),lle=a("code"),qwo=o("model_type"),Nwo=o(` property of the config object (either
passed as an argument or loaded from `),ile=a("code"),jwo=o("pretrained_model_name_or_path"),Dwo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dle=a("code"),Gwo=o("pretrained_model_name_or_path"),Owo=o(":"),Vwo=l(),y=a("ul"),c2=a("li"),cle=a("strong"),Xwo=o("albert"),zwo=o(" \u2014 "),Pq=a("a"),Qwo=o("AlbertForSequenceClassification"),Wwo=o(" (ALBERT model)"),Hwo=l(),m2=a("li"),mle=a("strong"),Uwo=o("bart"),Jwo=o(" \u2014 "),$q=a("a"),Ywo=o("BartForSequenceClassification"),Kwo=o(" (BART model)"),Zwo=l(),f2=a("li"),fle=a("strong"),e6o=o("bert"),o6o=o(" \u2014 "),Iq=a("a"),r6o=o("BertForSequenceClassification"),t6o=o(" (BERT model)"),a6o=l(),g2=a("li"),gle=a("strong"),n6o=o("big_bird"),s6o=o(" \u2014 "),qq=a("a"),l6o=o("BigBirdForSequenceClassification"),i6o=o(" (BigBird model)"),d6o=l(),h2=a("li"),hle=a("strong"),c6o=o("bigbird_pegasus"),m6o=o(" \u2014 "),Nq=a("a"),f6o=o("BigBirdPegasusForSequenceClassification"),g6o=o(" (BigBirdPegasus model)"),h6o=l(),u2=a("li"),ule=a("strong"),u6o=o("camembert"),p6o=o(" \u2014 "),jq=a("a"),_6o=o("CamembertForSequenceClassification"),b6o=o(" (CamemBERT model)"),v6o=l(),p2=a("li"),ple=a("strong"),F6o=o("canine"),T6o=o(" \u2014 "),Dq=a("a"),M6o=o("CanineForSequenceClassification"),E6o=o(" (Canine model)"),C6o=l(),_2=a("li"),_le=a("strong"),w6o=o("convbert"),A6o=o(" \u2014 "),Gq=a("a"),y6o=o("ConvBertForSequenceClassification"),L6o=o(" (ConvBERT model)"),x6o=l(),b2=a("li"),ble=a("strong"),k6o=o("ctrl"),S6o=o(" \u2014 "),Oq=a("a"),R6o=o("CTRLForSequenceClassification"),B6o=o(" (CTRL model)"),P6o=l(),v2=a("li"),vle=a("strong"),$6o=o("data2vec-text"),I6o=o(" \u2014 "),Vq=a("a"),q6o=o("Data2VecTextForSequenceClassification"),N6o=o(" (Data2VecText model)"),j6o=l(),F2=a("li"),Fle=a("strong"),D6o=o("deberta"),G6o=o(" \u2014 "),Xq=a("a"),O6o=o("DebertaForSequenceClassification"),V6o=o(" (DeBERTa model)"),X6o=l(),T2=a("li"),Tle=a("strong"),z6o=o("deberta-v2"),Q6o=o(" \u2014 "),zq=a("a"),W6o=o("DebertaV2ForSequenceClassification"),H6o=o(" (DeBERTa-v2 model)"),U6o=l(),M2=a("li"),Mle=a("strong"),J6o=o("distilbert"),Y6o=o(" \u2014 "),Qq=a("a"),K6o=o("DistilBertForSequenceClassification"),Z6o=o(" (DistilBERT model)"),eAo=l(),E2=a("li"),Ele=a("strong"),oAo=o("electra"),rAo=o(" \u2014 "),Wq=a("a"),tAo=o("ElectraForSequenceClassification"),aAo=o(" (ELECTRA model)"),nAo=l(),C2=a("li"),Cle=a("strong"),sAo=o("flaubert"),lAo=o(" \u2014 "),Hq=a("a"),iAo=o("FlaubertForSequenceClassification"),dAo=o(" (FlauBERT model)"),cAo=l(),w2=a("li"),wle=a("strong"),mAo=o("fnet"),fAo=o(" \u2014 "),Uq=a("a"),gAo=o("FNetForSequenceClassification"),hAo=o(" (FNet model)"),uAo=l(),A2=a("li"),Ale=a("strong"),pAo=o("funnel"),_Ao=o(" \u2014 "),Jq=a("a"),bAo=o("FunnelForSequenceClassification"),vAo=o(" (Funnel Transformer model)"),FAo=l(),y2=a("li"),yle=a("strong"),TAo=o("gpt2"),MAo=o(" \u2014 "),Yq=a("a"),EAo=o("GPT2ForSequenceClassification"),CAo=o(" (OpenAI GPT-2 model)"),wAo=l(),L2=a("li"),Lle=a("strong"),AAo=o("gpt_neo"),yAo=o(" \u2014 "),Kq=a("a"),LAo=o("GPTNeoForSequenceClassification"),xAo=o(" (GPT Neo model)"),kAo=l(),x2=a("li"),xle=a("strong"),SAo=o("gptj"),RAo=o(" \u2014 "),Zq=a("a"),BAo=o("GPTJForSequenceClassification"),PAo=o(" (GPT-J model)"),$Ao=l(),k2=a("li"),kle=a("strong"),IAo=o("ibert"),qAo=o(" \u2014 "),eN=a("a"),NAo=o("IBertForSequenceClassification"),jAo=o(" (I-BERT model)"),DAo=l(),S2=a("li"),Sle=a("strong"),GAo=o("layoutlm"),OAo=o(" \u2014 "),oN=a("a"),VAo=o("LayoutLMForSequenceClassification"),XAo=o(" (LayoutLM model)"),zAo=l(),R2=a("li"),Rle=a("strong"),QAo=o("layoutlmv2"),WAo=o(" \u2014 "),rN=a("a"),HAo=o("LayoutLMv2ForSequenceClassification"),UAo=o(" (LayoutLMv2 model)"),JAo=l(),B2=a("li"),Ble=a("strong"),YAo=o("led"),KAo=o(" \u2014 "),tN=a("a"),ZAo=o("LEDForSequenceClassification"),e0o=o(" (LED model)"),o0o=l(),P2=a("li"),Ple=a("strong"),r0o=o("longformer"),t0o=o(" \u2014 "),aN=a("a"),a0o=o("LongformerForSequenceClassification"),n0o=o(" (Longformer model)"),s0o=l(),$2=a("li"),$le=a("strong"),l0o=o("mbart"),i0o=o(" \u2014 "),nN=a("a"),d0o=o("MBartForSequenceClassification"),c0o=o(" (mBART model)"),m0o=l(),I2=a("li"),Ile=a("strong"),f0o=o("megatron-bert"),g0o=o(" \u2014 "),sN=a("a"),h0o=o("MegatronBertForSequenceClassification"),u0o=o(" (MegatronBert model)"),p0o=l(),q2=a("li"),qle=a("strong"),_0o=o("mobilebert"),b0o=o(" \u2014 "),lN=a("a"),v0o=o("MobileBertForSequenceClassification"),F0o=o(" (MobileBERT model)"),T0o=l(),N2=a("li"),Nle=a("strong"),M0o=o("mpnet"),E0o=o(" \u2014 "),iN=a("a"),C0o=o("MPNetForSequenceClassification"),w0o=o(" (MPNet model)"),A0o=l(),j2=a("li"),jle=a("strong"),y0o=o("nystromformer"),L0o=o(" \u2014 "),dN=a("a"),x0o=o("NystromformerForSequenceClassification"),k0o=o(" (Nystromformer model)"),S0o=l(),D2=a("li"),Dle=a("strong"),R0o=o("openai-gpt"),B0o=o(" \u2014 "),cN=a("a"),P0o=o("OpenAIGPTForSequenceClassification"),$0o=o(" (OpenAI GPT model)"),I0o=l(),G2=a("li"),Gle=a("strong"),q0o=o("perceiver"),N0o=o(" \u2014 "),mN=a("a"),j0o=o("PerceiverForSequenceClassification"),D0o=o(" (Perceiver model)"),G0o=l(),O2=a("li"),Ole=a("strong"),O0o=o("plbart"),V0o=o(" \u2014 "),fN=a("a"),X0o=o("PLBartForSequenceClassification"),z0o=o(" (PLBart model)"),Q0o=l(),V2=a("li"),Vle=a("strong"),W0o=o("qdqbert"),H0o=o(" \u2014 "),gN=a("a"),U0o=o("QDQBertForSequenceClassification"),J0o=o(" (QDQBert model)"),Y0o=l(),X2=a("li"),Xle=a("strong"),K0o=o("reformer"),Z0o=o(" \u2014 "),hN=a("a"),eyo=o("ReformerForSequenceClassification"),oyo=o(" (Reformer model)"),ryo=l(),z2=a("li"),zle=a("strong"),tyo=o("rembert"),ayo=o(" \u2014 "),uN=a("a"),nyo=o("RemBertForSequenceClassification"),syo=o(" (RemBERT model)"),lyo=l(),Q2=a("li"),Qle=a("strong"),iyo=o("roberta"),dyo=o(" \u2014 "),pN=a("a"),cyo=o("RobertaForSequenceClassification"),myo=o(" (RoBERTa model)"),fyo=l(),W2=a("li"),Wle=a("strong"),gyo=o("roformer"),hyo=o(" \u2014 "),_N=a("a"),uyo=o("RoFormerForSequenceClassification"),pyo=o(" (RoFormer model)"),_yo=l(),H2=a("li"),Hle=a("strong"),byo=o("squeezebert"),vyo=o(" \u2014 "),bN=a("a"),Fyo=o("SqueezeBertForSequenceClassification"),Tyo=o(" (SqueezeBERT model)"),Myo=l(),U2=a("li"),Ule=a("strong"),Eyo=o("tapas"),Cyo=o(" \u2014 "),vN=a("a"),wyo=o("TapasForSequenceClassification"),Ayo=o(" (TAPAS model)"),yyo=l(),J2=a("li"),Jle=a("strong"),Lyo=o("tapex"),xyo=o(" \u2014 "),FN=a("a"),kyo=o("BartForSequenceClassification"),Syo=o(" (TAPEX model)"),Ryo=l(),Y2=a("li"),Yle=a("strong"),Byo=o("transfo-xl"),Pyo=o(" \u2014 "),TN=a("a"),$yo=o("TransfoXLForSequenceClassification"),Iyo=o(" (Transformer-XL model)"),qyo=l(),K2=a("li"),Kle=a("strong"),Nyo=o("xlm"),jyo=o(" \u2014 "),MN=a("a"),Dyo=o("XLMForSequenceClassification"),Gyo=o(" (XLM model)"),Oyo=l(),Z2=a("li"),Zle=a("strong"),Vyo=o("xlm-roberta"),Xyo=o(" \u2014 "),EN=a("a"),zyo=o("XLMRobertaForSequenceClassification"),Qyo=o(" (XLM-RoBERTa model)"),Wyo=l(),ev=a("li"),eie=a("strong"),Hyo=o("xlm-roberta-xl"),Uyo=o(" \u2014 "),CN=a("a"),Jyo=o("XLMRobertaXLForSequenceClassification"),Yyo=o(" (XLM-RoBERTa-XL model)"),Kyo=l(),ov=a("li"),oie=a("strong"),Zyo=o("xlnet"),e8o=o(" \u2014 "),wN=a("a"),o8o=o("XLNetForSequenceClassification"),r8o=o(" (XLNet model)"),t8o=l(),rv=a("li"),rie=a("strong"),a8o=o("yoso"),n8o=o(" \u2014 "),AN=a("a"),s8o=o("YosoForSequenceClassification"),l8o=o(" (YOSO model)"),i8o=l(),tv=a("p"),d8o=o("The model is set in evaluation mode by default using "),tie=a("code"),c8o=o("model.eval()"),m8o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),aie=a("code"),f8o=o("model.train()"),g8o=l(),nie=a("p"),h8o=o("Examples:"),u8o=l(),m(U6.$$.fragment),rBe=l(),ud=a("h2"),av=a("a"),sie=a("span"),m(J6.$$.fragment),p8o=l(),lie=a("span"),_8o=o("AutoModelForMultipleChoice"),tBe=l(),rr=a("div"),m(Y6.$$.fragment),b8o=l(),pd=a("p"),v8o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),yN=a("a"),F8o=o("from_pretrained()"),T8o=o(" class method or the "),LN=a("a"),M8o=o("from_config()"),E8o=o(` class
method.`),C8o=l(),K6=a("p"),w8o=o("This class cannot be instantiated directly using "),iie=a("code"),A8o=o("__init__()"),y8o=o(" (throws an error)."),L8o=l(),Jr=a("div"),m(Z6.$$.fragment),x8o=l(),die=a("p"),k8o=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),S8o=l(),_d=a("p"),R8o=o(`Note:
Loading a model from its configuration file does `),cie=a("strong"),B8o=o("not"),P8o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xN=a("a"),$8o=o("from_pretrained()"),I8o=o(" to load the model weights."),q8o=l(),mie=a("p"),N8o=o("Examples:"),j8o=l(),m(eA.$$.fragment),D8o=l(),Ve=a("div"),m(oA.$$.fragment),G8o=l(),fie=a("p"),O8o=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),V8o=l(),Ja=a("p"),X8o=o("The model class to instantiate is selected based on the "),gie=a("code"),z8o=o("model_type"),Q8o=o(` property of the config object (either
passed as an argument or loaded from `),hie=a("code"),W8o=o("pretrained_model_name_or_path"),H8o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uie=a("code"),U8o=o("pretrained_model_name_or_path"),J8o=o(":"),Y8o=l(),G=a("ul"),nv=a("li"),pie=a("strong"),K8o=o("albert"),Z8o=o(" \u2014 "),kN=a("a"),eLo=o("AlbertForMultipleChoice"),oLo=o(" (ALBERT model)"),rLo=l(),sv=a("li"),_ie=a("strong"),tLo=o("bert"),aLo=o(" \u2014 "),SN=a("a"),nLo=o("BertForMultipleChoice"),sLo=o(" (BERT model)"),lLo=l(),lv=a("li"),bie=a("strong"),iLo=o("big_bird"),dLo=o(" \u2014 "),RN=a("a"),cLo=o("BigBirdForMultipleChoice"),mLo=o(" (BigBird model)"),fLo=l(),iv=a("li"),vie=a("strong"),gLo=o("camembert"),hLo=o(" \u2014 "),BN=a("a"),uLo=o("CamembertForMultipleChoice"),pLo=o(" (CamemBERT model)"),_Lo=l(),dv=a("li"),Fie=a("strong"),bLo=o("canine"),vLo=o(" \u2014 "),PN=a("a"),FLo=o("CanineForMultipleChoice"),TLo=o(" (Canine model)"),MLo=l(),cv=a("li"),Tie=a("strong"),ELo=o("convbert"),CLo=o(" \u2014 "),$N=a("a"),wLo=o("ConvBertForMultipleChoice"),ALo=o(" (ConvBERT model)"),yLo=l(),mv=a("li"),Mie=a("strong"),LLo=o("data2vec-text"),xLo=o(" \u2014 "),IN=a("a"),kLo=o("Data2VecTextForMultipleChoice"),SLo=o(" (Data2VecText model)"),RLo=l(),fv=a("li"),Eie=a("strong"),BLo=o("distilbert"),PLo=o(" \u2014 "),qN=a("a"),$Lo=o("DistilBertForMultipleChoice"),ILo=o(" (DistilBERT model)"),qLo=l(),gv=a("li"),Cie=a("strong"),NLo=o("electra"),jLo=o(" \u2014 "),NN=a("a"),DLo=o("ElectraForMultipleChoice"),GLo=o(" (ELECTRA model)"),OLo=l(),hv=a("li"),wie=a("strong"),VLo=o("flaubert"),XLo=o(" \u2014 "),jN=a("a"),zLo=o("FlaubertForMultipleChoice"),QLo=o(" (FlauBERT model)"),WLo=l(),uv=a("li"),Aie=a("strong"),HLo=o("fnet"),ULo=o(" \u2014 "),DN=a("a"),JLo=o("FNetForMultipleChoice"),YLo=o(" (FNet model)"),KLo=l(),pv=a("li"),yie=a("strong"),ZLo=o("funnel"),e7o=o(" \u2014 "),GN=a("a"),o7o=o("FunnelForMultipleChoice"),r7o=o(" (Funnel Transformer model)"),t7o=l(),_v=a("li"),Lie=a("strong"),a7o=o("ibert"),n7o=o(" \u2014 "),ON=a("a"),s7o=o("IBertForMultipleChoice"),l7o=o(" (I-BERT model)"),i7o=l(),bv=a("li"),xie=a("strong"),d7o=o("longformer"),c7o=o(" \u2014 "),VN=a("a"),m7o=o("LongformerForMultipleChoice"),f7o=o(" (Longformer model)"),g7o=l(),vv=a("li"),kie=a("strong"),h7o=o("megatron-bert"),u7o=o(" \u2014 "),XN=a("a"),p7o=o("MegatronBertForMultipleChoice"),_7o=o(" (MegatronBert model)"),b7o=l(),Fv=a("li"),Sie=a("strong"),v7o=o("mobilebert"),F7o=o(" \u2014 "),zN=a("a"),T7o=o("MobileBertForMultipleChoice"),M7o=o(" (MobileBERT model)"),E7o=l(),Tv=a("li"),Rie=a("strong"),C7o=o("mpnet"),w7o=o(" \u2014 "),QN=a("a"),A7o=o("MPNetForMultipleChoice"),y7o=o(" (MPNet model)"),L7o=l(),Mv=a("li"),Bie=a("strong"),x7o=o("nystromformer"),k7o=o(" \u2014 "),WN=a("a"),S7o=o("NystromformerForMultipleChoice"),R7o=o(" (Nystromformer model)"),B7o=l(),Ev=a("li"),Pie=a("strong"),P7o=o("qdqbert"),$7o=o(" \u2014 "),HN=a("a"),I7o=o("QDQBertForMultipleChoice"),q7o=o(" (QDQBert model)"),N7o=l(),Cv=a("li"),$ie=a("strong"),j7o=o("rembert"),D7o=o(" \u2014 "),UN=a("a"),G7o=o("RemBertForMultipleChoice"),O7o=o(" (RemBERT model)"),V7o=l(),wv=a("li"),Iie=a("strong"),X7o=o("roberta"),z7o=o(" \u2014 "),JN=a("a"),Q7o=o("RobertaForMultipleChoice"),W7o=o(" (RoBERTa model)"),H7o=l(),Av=a("li"),qie=a("strong"),U7o=o("roformer"),J7o=o(" \u2014 "),YN=a("a"),Y7o=o("RoFormerForMultipleChoice"),K7o=o(" (RoFormer model)"),Z7o=l(),yv=a("li"),Nie=a("strong"),e9o=o("squeezebert"),o9o=o(" \u2014 "),KN=a("a"),r9o=o("SqueezeBertForMultipleChoice"),t9o=o(" (SqueezeBERT model)"),a9o=l(),Lv=a("li"),jie=a("strong"),n9o=o("xlm"),s9o=o(" \u2014 "),ZN=a("a"),l9o=o("XLMForMultipleChoice"),i9o=o(" (XLM model)"),d9o=l(),xv=a("li"),Die=a("strong"),c9o=o("xlm-roberta"),m9o=o(" \u2014 "),ej=a("a"),f9o=o("XLMRobertaForMultipleChoice"),g9o=o(" (XLM-RoBERTa model)"),h9o=l(),kv=a("li"),Gie=a("strong"),u9o=o("xlm-roberta-xl"),p9o=o(" \u2014 "),oj=a("a"),_9o=o("XLMRobertaXLForMultipleChoice"),b9o=o(" (XLM-RoBERTa-XL model)"),v9o=l(),Sv=a("li"),Oie=a("strong"),F9o=o("xlnet"),T9o=o(" \u2014 "),rj=a("a"),M9o=o("XLNetForMultipleChoice"),E9o=o(" (XLNet model)"),C9o=l(),Rv=a("li"),Vie=a("strong"),w9o=o("yoso"),A9o=o(" \u2014 "),tj=a("a"),y9o=o("YosoForMultipleChoice"),L9o=o(" (YOSO model)"),x9o=l(),Bv=a("p"),k9o=o("The model is set in evaluation mode by default using "),Xie=a("code"),S9o=o("model.eval()"),R9o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zie=a("code"),B9o=o("model.train()"),P9o=l(),Qie=a("p"),$9o=o("Examples:"),I9o=l(),m(rA.$$.fragment),aBe=l(),bd=a("h2"),Pv=a("a"),Wie=a("span"),m(tA.$$.fragment),q9o=l(),Hie=a("span"),N9o=o("AutoModelForNextSentencePrediction"),nBe=l(),tr=a("div"),m(aA.$$.fragment),j9o=l(),vd=a("p"),D9o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),aj=a("a"),G9o=o("from_pretrained()"),O9o=o(" class method or the "),nj=a("a"),V9o=o("from_config()"),X9o=o(` class
method.`),z9o=l(),nA=a("p"),Q9o=o("This class cannot be instantiated directly using "),Uie=a("code"),W9o=o("__init__()"),H9o=o(" (throws an error)."),U9o=l(),Yr=a("div"),m(sA.$$.fragment),J9o=l(),Jie=a("p"),Y9o=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),K9o=l(),Fd=a("p"),Z9o=o(`Note:
Loading a model from its configuration file does `),Yie=a("strong"),exo=o("not"),oxo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sj=a("a"),rxo=o("from_pretrained()"),txo=o(" to load the model weights."),axo=l(),Kie=a("p"),nxo=o("Examples:"),sxo=l(),m(lA.$$.fragment),lxo=l(),Xe=a("div"),m(iA.$$.fragment),ixo=l(),Zie=a("p"),dxo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),cxo=l(),Ya=a("p"),mxo=o("The model class to instantiate is selected based on the "),ede=a("code"),fxo=o("model_type"),gxo=o(` property of the config object (either
passed as an argument or loaded from `),ode=a("code"),hxo=o("pretrained_model_name_or_path"),uxo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rde=a("code"),pxo=o("pretrained_model_name_or_path"),_xo=o(":"),bxo=l(),da=a("ul"),$v=a("li"),tde=a("strong"),vxo=o("bert"),Fxo=o(" \u2014 "),lj=a("a"),Txo=o("BertForNextSentencePrediction"),Mxo=o(" (BERT model)"),Exo=l(),Iv=a("li"),ade=a("strong"),Cxo=o("fnet"),wxo=o(" \u2014 "),ij=a("a"),Axo=o("FNetForNextSentencePrediction"),yxo=o(" (FNet model)"),Lxo=l(),qv=a("li"),nde=a("strong"),xxo=o("megatron-bert"),kxo=o(" \u2014 "),dj=a("a"),Sxo=o("MegatronBertForNextSentencePrediction"),Rxo=o(" (MegatronBert model)"),Bxo=l(),Nv=a("li"),sde=a("strong"),Pxo=o("mobilebert"),$xo=o(" \u2014 "),cj=a("a"),Ixo=o("MobileBertForNextSentencePrediction"),qxo=o(" (MobileBERT model)"),Nxo=l(),jv=a("li"),lde=a("strong"),jxo=o("qdqbert"),Dxo=o(" \u2014 "),mj=a("a"),Gxo=o("QDQBertForNextSentencePrediction"),Oxo=o(" (QDQBert model)"),Vxo=l(),Dv=a("p"),Xxo=o("The model is set in evaluation mode by default using "),ide=a("code"),zxo=o("model.eval()"),Qxo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dde=a("code"),Wxo=o("model.train()"),Hxo=l(),cde=a("p"),Uxo=o("Examples:"),Jxo=l(),m(dA.$$.fragment),sBe=l(),Td=a("h2"),Gv=a("a"),mde=a("span"),m(cA.$$.fragment),Yxo=l(),fde=a("span"),Kxo=o("AutoModelForTokenClassification"),lBe=l(),ar=a("div"),m(mA.$$.fragment),Zxo=l(),Md=a("p"),eko=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),fj=a("a"),oko=o("from_pretrained()"),rko=o(" class method or the "),gj=a("a"),tko=o("from_config()"),ako=o(` class
method.`),nko=l(),fA=a("p"),sko=o("This class cannot be instantiated directly using "),gde=a("code"),lko=o("__init__()"),iko=o(" (throws an error)."),dko=l(),Kr=a("div"),m(gA.$$.fragment),cko=l(),hde=a("p"),mko=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),fko=l(),Ed=a("p"),gko=o(`Note:
Loading a model from its configuration file does `),ude=a("strong"),hko=o("not"),uko=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hj=a("a"),pko=o("from_pretrained()"),_ko=o(" to load the model weights."),bko=l(),pde=a("p"),vko=o("Examples:"),Fko=l(),m(hA.$$.fragment),Tko=l(),ze=a("div"),m(uA.$$.fragment),Mko=l(),_de=a("p"),Eko=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Cko=l(),Ka=a("p"),wko=o("The model class to instantiate is selected based on the "),bde=a("code"),Ako=o("model_type"),yko=o(` property of the config object (either
passed as an argument or loaded from `),vde=a("code"),Lko=o("pretrained_model_name_or_path"),xko=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fde=a("code"),kko=o("pretrained_model_name_or_path"),Sko=o(":"),Rko=l(),j=a("ul"),Ov=a("li"),Tde=a("strong"),Bko=o("albert"),Pko=o(" \u2014 "),uj=a("a"),$ko=o("AlbertForTokenClassification"),Iko=o(" (ALBERT model)"),qko=l(),Vv=a("li"),Mde=a("strong"),Nko=o("bert"),jko=o(" \u2014 "),pj=a("a"),Dko=o("BertForTokenClassification"),Gko=o(" (BERT model)"),Oko=l(),Xv=a("li"),Ede=a("strong"),Vko=o("big_bird"),Xko=o(" \u2014 "),_j=a("a"),zko=o("BigBirdForTokenClassification"),Qko=o(" (BigBird model)"),Wko=l(),zv=a("li"),Cde=a("strong"),Hko=o("camembert"),Uko=o(" \u2014 "),bj=a("a"),Jko=o("CamembertForTokenClassification"),Yko=o(" (CamemBERT model)"),Kko=l(),Qv=a("li"),wde=a("strong"),Zko=o("canine"),eSo=o(" \u2014 "),vj=a("a"),oSo=o("CanineForTokenClassification"),rSo=o(" (Canine model)"),tSo=l(),Wv=a("li"),Ade=a("strong"),aSo=o("convbert"),nSo=o(" \u2014 "),Fj=a("a"),sSo=o("ConvBertForTokenClassification"),lSo=o(" (ConvBERT model)"),iSo=l(),Hv=a("li"),yde=a("strong"),dSo=o("data2vec-text"),cSo=o(" \u2014 "),Tj=a("a"),mSo=o("Data2VecTextForTokenClassification"),fSo=o(" (Data2VecText model)"),gSo=l(),Uv=a("li"),Lde=a("strong"),hSo=o("deberta"),uSo=o(" \u2014 "),Mj=a("a"),pSo=o("DebertaForTokenClassification"),_So=o(" (DeBERTa model)"),bSo=l(),Jv=a("li"),xde=a("strong"),vSo=o("deberta-v2"),FSo=o(" \u2014 "),Ej=a("a"),TSo=o("DebertaV2ForTokenClassification"),MSo=o(" (DeBERTa-v2 model)"),ESo=l(),Yv=a("li"),kde=a("strong"),CSo=o("distilbert"),wSo=o(" \u2014 "),Cj=a("a"),ASo=o("DistilBertForTokenClassification"),ySo=o(" (DistilBERT model)"),LSo=l(),Kv=a("li"),Sde=a("strong"),xSo=o("electra"),kSo=o(" \u2014 "),wj=a("a"),SSo=o("ElectraForTokenClassification"),RSo=o(" (ELECTRA model)"),BSo=l(),Zv=a("li"),Rde=a("strong"),PSo=o("flaubert"),$So=o(" \u2014 "),Aj=a("a"),ISo=o("FlaubertForTokenClassification"),qSo=o(" (FlauBERT model)"),NSo=l(),eF=a("li"),Bde=a("strong"),jSo=o("fnet"),DSo=o(" \u2014 "),yj=a("a"),GSo=o("FNetForTokenClassification"),OSo=o(" (FNet model)"),VSo=l(),oF=a("li"),Pde=a("strong"),XSo=o("funnel"),zSo=o(" \u2014 "),Lj=a("a"),QSo=o("FunnelForTokenClassification"),WSo=o(" (Funnel Transformer model)"),HSo=l(),rF=a("li"),$de=a("strong"),USo=o("gpt2"),JSo=o(" \u2014 "),xj=a("a"),YSo=o("GPT2ForTokenClassification"),KSo=o(" (OpenAI GPT-2 model)"),ZSo=l(),tF=a("li"),Ide=a("strong"),eRo=o("ibert"),oRo=o(" \u2014 "),kj=a("a"),rRo=o("IBertForTokenClassification"),tRo=o(" (I-BERT model)"),aRo=l(),aF=a("li"),qde=a("strong"),nRo=o("layoutlm"),sRo=o(" \u2014 "),Sj=a("a"),lRo=o("LayoutLMForTokenClassification"),iRo=o(" (LayoutLM model)"),dRo=l(),nF=a("li"),Nde=a("strong"),cRo=o("layoutlmv2"),mRo=o(" \u2014 "),Rj=a("a"),fRo=o("LayoutLMv2ForTokenClassification"),gRo=o(" (LayoutLMv2 model)"),hRo=l(),sF=a("li"),jde=a("strong"),uRo=o("longformer"),pRo=o(" \u2014 "),Bj=a("a"),_Ro=o("LongformerForTokenClassification"),bRo=o(" (Longformer model)"),vRo=l(),lF=a("li"),Dde=a("strong"),FRo=o("megatron-bert"),TRo=o(" \u2014 "),Pj=a("a"),MRo=o("MegatronBertForTokenClassification"),ERo=o(" (MegatronBert model)"),CRo=l(),iF=a("li"),Gde=a("strong"),wRo=o("mobilebert"),ARo=o(" \u2014 "),$j=a("a"),yRo=o("MobileBertForTokenClassification"),LRo=o(" (MobileBERT model)"),xRo=l(),dF=a("li"),Ode=a("strong"),kRo=o("mpnet"),SRo=o(" \u2014 "),Ij=a("a"),RRo=o("MPNetForTokenClassification"),BRo=o(" (MPNet model)"),PRo=l(),cF=a("li"),Vde=a("strong"),$Ro=o("nystromformer"),IRo=o(" \u2014 "),qj=a("a"),qRo=o("NystromformerForTokenClassification"),NRo=o(" (Nystromformer model)"),jRo=l(),mF=a("li"),Xde=a("strong"),DRo=o("qdqbert"),GRo=o(" \u2014 "),Nj=a("a"),ORo=o("QDQBertForTokenClassification"),VRo=o(" (QDQBert model)"),XRo=l(),fF=a("li"),zde=a("strong"),zRo=o("rembert"),QRo=o(" \u2014 "),jj=a("a"),WRo=o("RemBertForTokenClassification"),HRo=o(" (RemBERT model)"),URo=l(),gF=a("li"),Qde=a("strong"),JRo=o("roberta"),YRo=o(" \u2014 "),Dj=a("a"),KRo=o("RobertaForTokenClassification"),ZRo=o(" (RoBERTa model)"),eBo=l(),hF=a("li"),Wde=a("strong"),oBo=o("roformer"),rBo=o(" \u2014 "),Gj=a("a"),tBo=o("RoFormerForTokenClassification"),aBo=o(" (RoFormer model)"),nBo=l(),uF=a("li"),Hde=a("strong"),sBo=o("squeezebert"),lBo=o(" \u2014 "),Oj=a("a"),iBo=o("SqueezeBertForTokenClassification"),dBo=o(" (SqueezeBERT model)"),cBo=l(),pF=a("li"),Ude=a("strong"),mBo=o("xlm"),fBo=o(" \u2014 "),Vj=a("a"),gBo=o("XLMForTokenClassification"),hBo=o(" (XLM model)"),uBo=l(),_F=a("li"),Jde=a("strong"),pBo=o("xlm-roberta"),_Bo=o(" \u2014 "),Xj=a("a"),bBo=o("XLMRobertaForTokenClassification"),vBo=o(" (XLM-RoBERTa model)"),FBo=l(),bF=a("li"),Yde=a("strong"),TBo=o("xlm-roberta-xl"),MBo=o(" \u2014 "),zj=a("a"),EBo=o("XLMRobertaXLForTokenClassification"),CBo=o(" (XLM-RoBERTa-XL model)"),wBo=l(),vF=a("li"),Kde=a("strong"),ABo=o("xlnet"),yBo=o(" \u2014 "),Qj=a("a"),LBo=o("XLNetForTokenClassification"),xBo=o(" (XLNet model)"),kBo=l(),FF=a("li"),Zde=a("strong"),SBo=o("yoso"),RBo=o(" \u2014 "),Wj=a("a"),BBo=o("YosoForTokenClassification"),PBo=o(" (YOSO model)"),$Bo=l(),TF=a("p"),IBo=o("The model is set in evaluation mode by default using "),ece=a("code"),qBo=o("model.eval()"),NBo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),oce=a("code"),jBo=o("model.train()"),DBo=l(),rce=a("p"),GBo=o("Examples:"),OBo=l(),m(pA.$$.fragment),iBe=l(),Cd=a("h2"),MF=a("a"),tce=a("span"),m(_A.$$.fragment),VBo=l(),ace=a("span"),XBo=o("AutoModelForQuestionAnswering"),dBe=l(),nr=a("div"),m(bA.$$.fragment),zBo=l(),wd=a("p"),QBo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Hj=a("a"),WBo=o("from_pretrained()"),HBo=o(" class method or the "),Uj=a("a"),UBo=o("from_config()"),JBo=o(` class
method.`),YBo=l(),vA=a("p"),KBo=o("This class cannot be instantiated directly using "),nce=a("code"),ZBo=o("__init__()"),ePo=o(" (throws an error)."),oPo=l(),Zr=a("div"),m(FA.$$.fragment),rPo=l(),sce=a("p"),tPo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),aPo=l(),Ad=a("p"),nPo=o(`Note:
Loading a model from its configuration file does `),lce=a("strong"),sPo=o("not"),lPo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Jj=a("a"),iPo=o("from_pretrained()"),dPo=o(" to load the model weights."),cPo=l(),ice=a("p"),mPo=o("Examples:"),fPo=l(),m(TA.$$.fragment),gPo=l(),Qe=a("div"),m(MA.$$.fragment),hPo=l(),dce=a("p"),uPo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),pPo=l(),Za=a("p"),_Po=o("The model class to instantiate is selected based on the "),cce=a("code"),bPo=o("model_type"),vPo=o(` property of the config object (either
passed as an argument or loaded from `),mce=a("code"),FPo=o("pretrained_model_name_or_path"),TPo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fce=a("code"),MPo=o("pretrained_model_name_or_path"),EPo=o(":"),CPo=l(),R=a("ul"),EF=a("li"),gce=a("strong"),wPo=o("albert"),APo=o(" \u2014 "),Yj=a("a"),yPo=o("AlbertForQuestionAnswering"),LPo=o(" (ALBERT model)"),xPo=l(),CF=a("li"),hce=a("strong"),kPo=o("bart"),SPo=o(" \u2014 "),Kj=a("a"),RPo=o("BartForQuestionAnswering"),BPo=o(" (BART model)"),PPo=l(),wF=a("li"),uce=a("strong"),$Po=o("bert"),IPo=o(" \u2014 "),Zj=a("a"),qPo=o("BertForQuestionAnswering"),NPo=o(" (BERT model)"),jPo=l(),AF=a("li"),pce=a("strong"),DPo=o("big_bird"),GPo=o(" \u2014 "),eD=a("a"),OPo=o("BigBirdForQuestionAnswering"),VPo=o(" (BigBird model)"),XPo=l(),yF=a("li"),_ce=a("strong"),zPo=o("bigbird_pegasus"),QPo=o(" \u2014 "),oD=a("a"),WPo=o("BigBirdPegasusForQuestionAnswering"),HPo=o(" (BigBirdPegasus model)"),UPo=l(),LF=a("li"),bce=a("strong"),JPo=o("camembert"),YPo=o(" \u2014 "),rD=a("a"),KPo=o("CamembertForQuestionAnswering"),ZPo=o(" (CamemBERT model)"),e$o=l(),xF=a("li"),vce=a("strong"),o$o=o("canine"),r$o=o(" \u2014 "),tD=a("a"),t$o=o("CanineForQuestionAnswering"),a$o=o(" (Canine model)"),n$o=l(),kF=a("li"),Fce=a("strong"),s$o=o("convbert"),l$o=o(" \u2014 "),aD=a("a"),i$o=o("ConvBertForQuestionAnswering"),d$o=o(" (ConvBERT model)"),c$o=l(),SF=a("li"),Tce=a("strong"),m$o=o("data2vec-text"),f$o=o(" \u2014 "),nD=a("a"),g$o=o("Data2VecTextForQuestionAnswering"),h$o=o(" (Data2VecText model)"),u$o=l(),RF=a("li"),Mce=a("strong"),p$o=o("deberta"),_$o=o(" \u2014 "),sD=a("a"),b$o=o("DebertaForQuestionAnswering"),v$o=o(" (DeBERTa model)"),F$o=l(),BF=a("li"),Ece=a("strong"),T$o=o("deberta-v2"),M$o=o(" \u2014 "),lD=a("a"),E$o=o("DebertaV2ForQuestionAnswering"),C$o=o(" (DeBERTa-v2 model)"),w$o=l(),PF=a("li"),Cce=a("strong"),A$o=o("distilbert"),y$o=o(" \u2014 "),iD=a("a"),L$o=o("DistilBertForQuestionAnswering"),x$o=o(" (DistilBERT model)"),k$o=l(),$F=a("li"),wce=a("strong"),S$o=o("electra"),R$o=o(" \u2014 "),dD=a("a"),B$o=o("ElectraForQuestionAnswering"),P$o=o(" (ELECTRA model)"),$$o=l(),IF=a("li"),Ace=a("strong"),I$o=o("flaubert"),q$o=o(" \u2014 "),cD=a("a"),N$o=o("FlaubertForQuestionAnsweringSimple"),j$o=o(" (FlauBERT model)"),D$o=l(),qF=a("li"),yce=a("strong"),G$o=o("fnet"),O$o=o(" \u2014 "),mD=a("a"),V$o=o("FNetForQuestionAnswering"),X$o=o(" (FNet model)"),z$o=l(),NF=a("li"),Lce=a("strong"),Q$o=o("funnel"),W$o=o(" \u2014 "),fD=a("a"),H$o=o("FunnelForQuestionAnswering"),U$o=o(" (Funnel Transformer model)"),J$o=l(),jF=a("li"),xce=a("strong"),Y$o=o("gptj"),K$o=o(" \u2014 "),gD=a("a"),Z$o=o("GPTJForQuestionAnswering"),eIo=o(" (GPT-J model)"),oIo=l(),DF=a("li"),kce=a("strong"),rIo=o("ibert"),tIo=o(" \u2014 "),hD=a("a"),aIo=o("IBertForQuestionAnswering"),nIo=o(" (I-BERT model)"),sIo=l(),GF=a("li"),Sce=a("strong"),lIo=o("layoutlmv2"),iIo=o(" \u2014 "),uD=a("a"),dIo=o("LayoutLMv2ForQuestionAnswering"),cIo=o(" (LayoutLMv2 model)"),mIo=l(),OF=a("li"),Rce=a("strong"),fIo=o("led"),gIo=o(" \u2014 "),pD=a("a"),hIo=o("LEDForQuestionAnswering"),uIo=o(" (LED model)"),pIo=l(),VF=a("li"),Bce=a("strong"),_Io=o("longformer"),bIo=o(" \u2014 "),_D=a("a"),vIo=o("LongformerForQuestionAnswering"),FIo=o(" (Longformer model)"),TIo=l(),XF=a("li"),Pce=a("strong"),MIo=o("lxmert"),EIo=o(" \u2014 "),bD=a("a"),CIo=o("LxmertForQuestionAnswering"),wIo=o(" (LXMERT model)"),AIo=l(),zF=a("li"),$ce=a("strong"),yIo=o("mbart"),LIo=o(" \u2014 "),vD=a("a"),xIo=o("MBartForQuestionAnswering"),kIo=o(" (mBART model)"),SIo=l(),QF=a("li"),Ice=a("strong"),RIo=o("megatron-bert"),BIo=o(" \u2014 "),FD=a("a"),PIo=o("MegatronBertForQuestionAnswering"),$Io=o(" (MegatronBert model)"),IIo=l(),WF=a("li"),qce=a("strong"),qIo=o("mobilebert"),NIo=o(" \u2014 "),TD=a("a"),jIo=o("MobileBertForQuestionAnswering"),DIo=o(" (MobileBERT model)"),GIo=l(),HF=a("li"),Nce=a("strong"),OIo=o("mpnet"),VIo=o(" \u2014 "),MD=a("a"),XIo=o("MPNetForQuestionAnswering"),zIo=o(" (MPNet model)"),QIo=l(),UF=a("li"),jce=a("strong"),WIo=o("nystromformer"),HIo=o(" \u2014 "),ED=a("a"),UIo=o("NystromformerForQuestionAnswering"),JIo=o(" (Nystromformer model)"),YIo=l(),JF=a("li"),Dce=a("strong"),KIo=o("qdqbert"),ZIo=o(" \u2014 "),CD=a("a"),eqo=o("QDQBertForQuestionAnswering"),oqo=o(" (QDQBert model)"),rqo=l(),YF=a("li"),Gce=a("strong"),tqo=o("reformer"),aqo=o(" \u2014 "),wD=a("a"),nqo=o("ReformerForQuestionAnswering"),sqo=o(" (Reformer model)"),lqo=l(),KF=a("li"),Oce=a("strong"),iqo=o("rembert"),dqo=o(" \u2014 "),AD=a("a"),cqo=o("RemBertForQuestionAnswering"),mqo=o(" (RemBERT model)"),fqo=l(),ZF=a("li"),Vce=a("strong"),gqo=o("roberta"),hqo=o(" \u2014 "),yD=a("a"),uqo=o("RobertaForQuestionAnswering"),pqo=o(" (RoBERTa model)"),_qo=l(),e1=a("li"),Xce=a("strong"),bqo=o("roformer"),vqo=o(" \u2014 "),LD=a("a"),Fqo=o("RoFormerForQuestionAnswering"),Tqo=o(" (RoFormer model)"),Mqo=l(),o1=a("li"),zce=a("strong"),Eqo=o("splinter"),Cqo=o(" \u2014 "),xD=a("a"),wqo=o("SplinterForQuestionAnswering"),Aqo=o(" (Splinter model)"),yqo=l(),r1=a("li"),Qce=a("strong"),Lqo=o("squeezebert"),xqo=o(" \u2014 "),kD=a("a"),kqo=o("SqueezeBertForQuestionAnswering"),Sqo=o(" (SqueezeBERT model)"),Rqo=l(),t1=a("li"),Wce=a("strong"),Bqo=o("xlm"),Pqo=o(" \u2014 "),SD=a("a"),$qo=o("XLMForQuestionAnsweringSimple"),Iqo=o(" (XLM model)"),qqo=l(),a1=a("li"),Hce=a("strong"),Nqo=o("xlm-roberta"),jqo=o(" \u2014 "),RD=a("a"),Dqo=o("XLMRobertaForQuestionAnswering"),Gqo=o(" (XLM-RoBERTa model)"),Oqo=l(),n1=a("li"),Uce=a("strong"),Vqo=o("xlm-roberta-xl"),Xqo=o(" \u2014 "),BD=a("a"),zqo=o("XLMRobertaXLForQuestionAnswering"),Qqo=o(" (XLM-RoBERTa-XL model)"),Wqo=l(),s1=a("li"),Jce=a("strong"),Hqo=o("xlnet"),Uqo=o(" \u2014 "),PD=a("a"),Jqo=o("XLNetForQuestionAnsweringSimple"),Yqo=o(" (XLNet model)"),Kqo=l(),l1=a("li"),Yce=a("strong"),Zqo=o("yoso"),eNo=o(" \u2014 "),$D=a("a"),oNo=o("YosoForQuestionAnswering"),rNo=o(" (YOSO model)"),tNo=l(),i1=a("p"),aNo=o("The model is set in evaluation mode by default using "),Kce=a("code"),nNo=o("model.eval()"),sNo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zce=a("code"),lNo=o("model.train()"),iNo=l(),eme=a("p"),dNo=o("Examples:"),cNo=l(),m(EA.$$.fragment),cBe=l(),yd=a("h2"),d1=a("a"),ome=a("span"),m(CA.$$.fragment),mNo=l(),rme=a("span"),fNo=o("AutoModelForTableQuestionAnswering"),mBe=l(),sr=a("div"),m(wA.$$.fragment),gNo=l(),Ld=a("p"),hNo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),ID=a("a"),uNo=o("from_pretrained()"),pNo=o(" class method or the "),qD=a("a"),_No=o("from_config()"),bNo=o(` class
method.`),vNo=l(),AA=a("p"),FNo=o("This class cannot be instantiated directly using "),tme=a("code"),TNo=o("__init__()"),MNo=o(" (throws an error)."),ENo=l(),et=a("div"),m(yA.$$.fragment),CNo=l(),ame=a("p"),wNo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),ANo=l(),xd=a("p"),yNo=o(`Note:
Loading a model from its configuration file does `),nme=a("strong"),LNo=o("not"),xNo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ND=a("a"),kNo=o("from_pretrained()"),SNo=o(" to load the model weights."),RNo=l(),sme=a("p"),BNo=o("Examples:"),PNo=l(),m(LA.$$.fragment),$No=l(),We=a("div"),m(xA.$$.fragment),INo=l(),lme=a("p"),qNo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),NNo=l(),en=a("p"),jNo=o("The model class to instantiate is selected based on the "),ime=a("code"),DNo=o("model_type"),GNo=o(` property of the config object (either
passed as an argument or loaded from `),dme=a("code"),ONo=o("pretrained_model_name_or_path"),VNo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cme=a("code"),XNo=o("pretrained_model_name_or_path"),zNo=o(":"),QNo=l(),mme=a("ul"),c1=a("li"),fme=a("strong"),WNo=o("tapas"),HNo=o(" \u2014 "),jD=a("a"),UNo=o("TapasForQuestionAnswering"),JNo=o(" (TAPAS model)"),YNo=l(),m1=a("p"),KNo=o("The model is set in evaluation mode by default using "),gme=a("code"),ZNo=o("model.eval()"),ejo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hme=a("code"),ojo=o("model.train()"),rjo=l(),ume=a("p"),tjo=o("Examples:"),ajo=l(),m(kA.$$.fragment),fBe=l(),kd=a("h2"),f1=a("a"),pme=a("span"),m(SA.$$.fragment),njo=l(),_me=a("span"),sjo=o("AutoModelForImageClassification"),gBe=l(),lr=a("div"),m(RA.$$.fragment),ljo=l(),Sd=a("p"),ijo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),DD=a("a"),djo=o("from_pretrained()"),cjo=o(" class method or the "),GD=a("a"),mjo=o("from_config()"),fjo=o(` class
method.`),gjo=l(),BA=a("p"),hjo=o("This class cannot be instantiated directly using "),bme=a("code"),ujo=o("__init__()"),pjo=o(" (throws an error)."),_jo=l(),ot=a("div"),m(PA.$$.fragment),bjo=l(),vme=a("p"),vjo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Fjo=l(),Rd=a("p"),Tjo=o(`Note:
Loading a model from its configuration file does `),Fme=a("strong"),Mjo=o("not"),Ejo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OD=a("a"),Cjo=o("from_pretrained()"),wjo=o(" to load the model weights."),Ajo=l(),Tme=a("p"),yjo=o("Examples:"),Ljo=l(),m($A.$$.fragment),xjo=l(),He=a("div"),m(IA.$$.fragment),kjo=l(),Mme=a("p"),Sjo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Rjo=l(),on=a("p"),Bjo=o("The model class to instantiate is selected based on the "),Eme=a("code"),Pjo=o("model_type"),$jo=o(` property of the config object (either
passed as an argument or loaded from `),Cme=a("code"),Ijo=o("pretrained_model_name_or_path"),qjo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wme=a("code"),Njo=o("pretrained_model_name_or_path"),jjo=o(":"),Djo=l(),de=a("ul"),g1=a("li"),Ame=a("strong"),Gjo=o("beit"),Ojo=o(" \u2014 "),VD=a("a"),Vjo=o("BeitForImageClassification"),Xjo=o(" (BEiT model)"),zjo=l(),h1=a("li"),yme=a("strong"),Qjo=o("convnext"),Wjo=o(" \u2014 "),XD=a("a"),Hjo=o("ConvNextForImageClassification"),Ujo=o(" (ConvNext model)"),Jjo=l(),u1=a("li"),Lme=a("strong"),Yjo=o("data2vec-vision"),Kjo=o(" \u2014 "),zD=a("a"),Zjo=o("Data2VecVisionForImageClassification"),eDo=o(" (Data2VecVision model)"),oDo=l(),Gs=a("li"),xme=a("strong"),rDo=o("deit"),tDo=o(" \u2014 "),QD=a("a"),aDo=o("DeiTForImageClassification"),nDo=o(" or "),WD=a("a"),sDo=o("DeiTForImageClassificationWithTeacher"),lDo=o(" (DeiT model)"),iDo=l(),p1=a("li"),kme=a("strong"),dDo=o("imagegpt"),cDo=o(" \u2014 "),HD=a("a"),mDo=o("ImageGPTForImageClassification"),fDo=o(" (ImageGPT model)"),gDo=l(),fa=a("li"),Sme=a("strong"),hDo=o("perceiver"),uDo=o(" \u2014 "),UD=a("a"),pDo=o("PerceiverForImageClassificationLearned"),_Do=o(" or "),JD=a("a"),bDo=o("PerceiverForImageClassificationFourier"),vDo=o(" or "),YD=a("a"),FDo=o("PerceiverForImageClassificationConvProcessing"),TDo=o(" (Perceiver model)"),MDo=l(),_1=a("li"),Rme=a("strong"),EDo=o("poolformer"),CDo=o(" \u2014 "),KD=a("a"),wDo=o("PoolFormerForImageClassification"),ADo=o(" (PoolFormer model)"),yDo=l(),b1=a("li"),Bme=a("strong"),LDo=o("regnet"),xDo=o(" \u2014 "),ZD=a("a"),kDo=o("RegNetForImageClassification"),SDo=o(" (RegNet model)"),RDo=l(),v1=a("li"),Pme=a("strong"),BDo=o("resnet"),PDo=o(" \u2014 "),eG=a("a"),$Do=o("ResNetForImageClassification"),IDo=o(" (ResNet model)"),qDo=l(),F1=a("li"),$me=a("strong"),NDo=o("segformer"),jDo=o(" \u2014 "),oG=a("a"),DDo=o("SegformerForImageClassification"),GDo=o(" (SegFormer model)"),ODo=l(),T1=a("li"),Ime=a("strong"),VDo=o("swin"),XDo=o(" \u2014 "),rG=a("a"),zDo=o("SwinForImageClassification"),QDo=o(" (Swin model)"),WDo=l(),M1=a("li"),qme=a("strong"),HDo=o("van"),UDo=o(" \u2014 "),tG=a("a"),JDo=o("VanForImageClassification"),YDo=o(" (VAN model)"),KDo=l(),E1=a("li"),Nme=a("strong"),ZDo=o("vit"),eGo=o(" \u2014 "),aG=a("a"),oGo=o("ViTForImageClassification"),rGo=o(" (ViT model)"),tGo=l(),C1=a("p"),aGo=o("The model is set in evaluation mode by default using "),jme=a("code"),nGo=o("model.eval()"),sGo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dme=a("code"),lGo=o("model.train()"),iGo=l(),Gme=a("p"),dGo=o("Examples:"),cGo=l(),m(qA.$$.fragment),hBe=l(),Bd=a("h2"),w1=a("a"),Ome=a("span"),m(NA.$$.fragment),mGo=l(),Vme=a("span"),fGo=o("AutoModelForVision2Seq"),uBe=l(),ir=a("div"),m(jA.$$.fragment),gGo=l(),Pd=a("p"),hGo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),nG=a("a"),uGo=o("from_pretrained()"),pGo=o(" class method or the "),sG=a("a"),_Go=o("from_config()"),bGo=o(` class
method.`),vGo=l(),DA=a("p"),FGo=o("This class cannot be instantiated directly using "),Xme=a("code"),TGo=o("__init__()"),MGo=o(" (throws an error)."),EGo=l(),rt=a("div"),m(GA.$$.fragment),CGo=l(),zme=a("p"),wGo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),AGo=l(),$d=a("p"),yGo=o(`Note:
Loading a model from its configuration file does `),Qme=a("strong"),LGo=o("not"),xGo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lG=a("a"),kGo=o("from_pretrained()"),SGo=o(" to load the model weights."),RGo=l(),Wme=a("p"),BGo=o("Examples:"),PGo=l(),m(OA.$$.fragment),$Go=l(),Ue=a("div"),m(VA.$$.fragment),IGo=l(),Hme=a("p"),qGo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),NGo=l(),rn=a("p"),jGo=o("The model class to instantiate is selected based on the "),Ume=a("code"),DGo=o("model_type"),GGo=o(` property of the config object (either
passed as an argument or loaded from `),Jme=a("code"),OGo=o("pretrained_model_name_or_path"),VGo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yme=a("code"),XGo=o("pretrained_model_name_or_path"),zGo=o(":"),QGo=l(),Kme=a("ul"),A1=a("li"),Zme=a("strong"),WGo=o("vision-encoder-decoder"),HGo=o(" \u2014 "),iG=a("a"),UGo=o("VisionEncoderDecoderModel"),JGo=o(" (Vision Encoder decoder model)"),YGo=l(),y1=a("p"),KGo=o("The model is set in evaluation mode by default using "),efe=a("code"),ZGo=o("model.eval()"),eOo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ofe=a("code"),oOo=o("model.train()"),rOo=l(),rfe=a("p"),tOo=o("Examples:"),aOo=l(),m(XA.$$.fragment),pBe=l(),Id=a("h2"),L1=a("a"),tfe=a("span"),m(zA.$$.fragment),nOo=l(),afe=a("span"),sOo=o("AutoModelForAudioClassification"),_Be=l(),dr=a("div"),m(QA.$$.fragment),lOo=l(),qd=a("p"),iOo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),dG=a("a"),dOo=o("from_pretrained()"),cOo=o(" class method or the "),cG=a("a"),mOo=o("from_config()"),fOo=o(` class
method.`),gOo=l(),WA=a("p"),hOo=o("This class cannot be instantiated directly using "),nfe=a("code"),uOo=o("__init__()"),pOo=o(" (throws an error)."),_Oo=l(),tt=a("div"),m(HA.$$.fragment),bOo=l(),sfe=a("p"),vOo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),FOo=l(),Nd=a("p"),TOo=o(`Note:
Loading a model from its configuration file does `),lfe=a("strong"),MOo=o("not"),EOo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mG=a("a"),COo=o("from_pretrained()"),wOo=o(" to load the model weights."),AOo=l(),ife=a("p"),yOo=o("Examples:"),LOo=l(),m(UA.$$.fragment),xOo=l(),Je=a("div"),m(JA.$$.fragment),kOo=l(),dfe=a("p"),SOo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),ROo=l(),tn=a("p"),BOo=o("The model class to instantiate is selected based on the "),cfe=a("code"),POo=o("model_type"),$Oo=o(` property of the config object (either
passed as an argument or loaded from `),mfe=a("code"),IOo=o("pretrained_model_name_or_path"),qOo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ffe=a("code"),NOo=o("pretrained_model_name_or_path"),jOo=o(":"),DOo=l(),Se=a("ul"),x1=a("li"),gfe=a("strong"),GOo=o("data2vec-audio"),OOo=o(" \u2014 "),fG=a("a"),VOo=o("Data2VecAudioForSequenceClassification"),XOo=o(" (Data2VecAudio model)"),zOo=l(),k1=a("li"),hfe=a("strong"),QOo=o("hubert"),WOo=o(" \u2014 "),gG=a("a"),HOo=o("HubertForSequenceClassification"),UOo=o(" (Hubert model)"),JOo=l(),S1=a("li"),ufe=a("strong"),YOo=o("sew"),KOo=o(" \u2014 "),hG=a("a"),ZOo=o("SEWForSequenceClassification"),eVo=o(" (SEW model)"),oVo=l(),R1=a("li"),pfe=a("strong"),rVo=o("sew-d"),tVo=o(" \u2014 "),uG=a("a"),aVo=o("SEWDForSequenceClassification"),nVo=o(" (SEW-D model)"),sVo=l(),B1=a("li"),_fe=a("strong"),lVo=o("unispeech"),iVo=o(" \u2014 "),pG=a("a"),dVo=o("UniSpeechForSequenceClassification"),cVo=o(" (UniSpeech model)"),mVo=l(),P1=a("li"),bfe=a("strong"),fVo=o("unispeech-sat"),gVo=o(" \u2014 "),_G=a("a"),hVo=o("UniSpeechSatForSequenceClassification"),uVo=o(" (UniSpeechSat model)"),pVo=l(),$1=a("li"),vfe=a("strong"),_Vo=o("wav2vec2"),bVo=o(" \u2014 "),bG=a("a"),vVo=o("Wav2Vec2ForSequenceClassification"),FVo=o(" (Wav2Vec2 model)"),TVo=l(),I1=a("li"),Ffe=a("strong"),MVo=o("wavlm"),EVo=o(" \u2014 "),vG=a("a"),CVo=o("WavLMForSequenceClassification"),wVo=o(" (WavLM model)"),AVo=l(),q1=a("p"),yVo=o("The model is set in evaluation mode by default using "),Tfe=a("code"),LVo=o("model.eval()"),xVo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mfe=a("code"),kVo=o("model.train()"),SVo=l(),Efe=a("p"),RVo=o("Examples:"),BVo=l(),m(YA.$$.fragment),bBe=l(),jd=a("h2"),N1=a("a"),Cfe=a("span"),m(KA.$$.fragment),PVo=l(),wfe=a("span"),$Vo=o("AutoModelForAudioFrameClassification"),vBe=l(),cr=a("div"),m(ZA.$$.fragment),IVo=l(),Dd=a("p"),qVo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),FG=a("a"),NVo=o("from_pretrained()"),jVo=o(" class method or the "),TG=a("a"),DVo=o("from_config()"),GVo=o(` class
method.`),OVo=l(),e0=a("p"),VVo=o("This class cannot be instantiated directly using "),Afe=a("code"),XVo=o("__init__()"),zVo=o(" (throws an error)."),QVo=l(),at=a("div"),m(o0.$$.fragment),WVo=l(),yfe=a("p"),HVo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),UVo=l(),Gd=a("p"),JVo=o(`Note:
Loading a model from its configuration file does `),Lfe=a("strong"),YVo=o("not"),KVo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MG=a("a"),ZVo=o("from_pretrained()"),eXo=o(" to load the model weights."),oXo=l(),xfe=a("p"),rXo=o("Examples:"),tXo=l(),m(r0.$$.fragment),aXo=l(),Ye=a("div"),m(t0.$$.fragment),nXo=l(),kfe=a("p"),sXo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),lXo=l(),an=a("p"),iXo=o("The model class to instantiate is selected based on the "),Sfe=a("code"),dXo=o("model_type"),cXo=o(` property of the config object (either
passed as an argument or loaded from `),Rfe=a("code"),mXo=o("pretrained_model_name_or_path"),fXo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bfe=a("code"),gXo=o("pretrained_model_name_or_path"),hXo=o(":"),uXo=l(),nn=a("ul"),j1=a("li"),Pfe=a("strong"),pXo=o("data2vec-audio"),_Xo=o(" \u2014 "),EG=a("a"),bXo=o("Data2VecAudioForAudioFrameClassification"),vXo=o(" (Data2VecAudio model)"),FXo=l(),D1=a("li"),$fe=a("strong"),TXo=o("unispeech-sat"),MXo=o(" \u2014 "),CG=a("a"),EXo=o("UniSpeechSatForAudioFrameClassification"),CXo=o(" (UniSpeechSat model)"),wXo=l(),G1=a("li"),Ife=a("strong"),AXo=o("wav2vec2"),yXo=o(" \u2014 "),wG=a("a"),LXo=o("Wav2Vec2ForAudioFrameClassification"),xXo=o(" (Wav2Vec2 model)"),kXo=l(),O1=a("li"),qfe=a("strong"),SXo=o("wavlm"),RXo=o(" \u2014 "),AG=a("a"),BXo=o("WavLMForAudioFrameClassification"),PXo=o(" (WavLM model)"),$Xo=l(),V1=a("p"),IXo=o("The model is set in evaluation mode by default using "),Nfe=a("code"),qXo=o("model.eval()"),NXo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jfe=a("code"),jXo=o("model.train()"),DXo=l(),Dfe=a("p"),GXo=o("Examples:"),OXo=l(),m(a0.$$.fragment),FBe=l(),Od=a("h2"),X1=a("a"),Gfe=a("span"),m(n0.$$.fragment),VXo=l(),Ofe=a("span"),XXo=o("AutoModelForCTC"),TBe=l(),mr=a("div"),m(s0.$$.fragment),zXo=l(),Vd=a("p"),QXo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),yG=a("a"),WXo=o("from_pretrained()"),HXo=o(" class method or the "),LG=a("a"),UXo=o("from_config()"),JXo=o(` class
method.`),YXo=l(),l0=a("p"),KXo=o("This class cannot be instantiated directly using "),Vfe=a("code"),ZXo=o("__init__()"),ezo=o(" (throws an error)."),ozo=l(),nt=a("div"),m(i0.$$.fragment),rzo=l(),Xfe=a("p"),tzo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),azo=l(),Xd=a("p"),nzo=o(`Note:
Loading a model from its configuration file does `),zfe=a("strong"),szo=o("not"),lzo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xG=a("a"),izo=o("from_pretrained()"),dzo=o(" to load the model weights."),czo=l(),Qfe=a("p"),mzo=o("Examples:"),fzo=l(),m(d0.$$.fragment),gzo=l(),Ke=a("div"),m(c0.$$.fragment),hzo=l(),Wfe=a("p"),uzo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),pzo=l(),sn=a("p"),_zo=o("The model class to instantiate is selected based on the "),Hfe=a("code"),bzo=o("model_type"),vzo=o(` property of the config object (either
passed as an argument or loaded from `),Ufe=a("code"),Fzo=o("pretrained_model_name_or_path"),Tzo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jfe=a("code"),Mzo=o("pretrained_model_name_or_path"),Ezo=o(":"),Czo=l(),Re=a("ul"),z1=a("li"),Yfe=a("strong"),wzo=o("data2vec-audio"),Azo=o(" \u2014 "),kG=a("a"),yzo=o("Data2VecAudioForCTC"),Lzo=o(" (Data2VecAudio model)"),xzo=l(),Q1=a("li"),Kfe=a("strong"),kzo=o("hubert"),Szo=o(" \u2014 "),SG=a("a"),Rzo=o("HubertForCTC"),Bzo=o(" (Hubert model)"),Pzo=l(),W1=a("li"),Zfe=a("strong"),$zo=o("sew"),Izo=o(" \u2014 "),RG=a("a"),qzo=o("SEWForCTC"),Nzo=o(" (SEW model)"),jzo=l(),H1=a("li"),ege=a("strong"),Dzo=o("sew-d"),Gzo=o(" \u2014 "),BG=a("a"),Ozo=o("SEWDForCTC"),Vzo=o(" (SEW-D model)"),Xzo=l(),U1=a("li"),oge=a("strong"),zzo=o("unispeech"),Qzo=o(" \u2014 "),PG=a("a"),Wzo=o("UniSpeechForCTC"),Hzo=o(" (UniSpeech model)"),Uzo=l(),J1=a("li"),rge=a("strong"),Jzo=o("unispeech-sat"),Yzo=o(" \u2014 "),$G=a("a"),Kzo=o("UniSpeechSatForCTC"),Zzo=o(" (UniSpeechSat model)"),eQo=l(),Y1=a("li"),tge=a("strong"),oQo=o("wav2vec2"),rQo=o(" \u2014 "),IG=a("a"),tQo=o("Wav2Vec2ForCTC"),aQo=o(" (Wav2Vec2 model)"),nQo=l(),K1=a("li"),age=a("strong"),sQo=o("wavlm"),lQo=o(" \u2014 "),qG=a("a"),iQo=o("WavLMForCTC"),dQo=o(" (WavLM model)"),cQo=l(),Z1=a("p"),mQo=o("The model is set in evaluation mode by default using "),nge=a("code"),fQo=o("model.eval()"),gQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sge=a("code"),hQo=o("model.train()"),uQo=l(),lge=a("p"),pQo=o("Examples:"),_Qo=l(),m(m0.$$.fragment),MBe=l(),zd=a("h2"),eT=a("a"),ige=a("span"),m(f0.$$.fragment),bQo=l(),dge=a("span"),vQo=o("AutoModelForSpeechSeq2Seq"),EBe=l(),fr=a("div"),m(g0.$$.fragment),FQo=l(),Qd=a("p"),TQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),NG=a("a"),MQo=o("from_pretrained()"),EQo=o(" class method or the "),jG=a("a"),CQo=o("from_config()"),wQo=o(` class
method.`),AQo=l(),h0=a("p"),yQo=o("This class cannot be instantiated directly using "),cge=a("code"),LQo=o("__init__()"),xQo=o(" (throws an error)."),kQo=l(),st=a("div"),m(u0.$$.fragment),SQo=l(),mge=a("p"),RQo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),BQo=l(),Wd=a("p"),PQo=o(`Note:
Loading a model from its configuration file does `),fge=a("strong"),$Qo=o("not"),IQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DG=a("a"),qQo=o("from_pretrained()"),NQo=o(" to load the model weights."),jQo=l(),gge=a("p"),DQo=o("Examples:"),GQo=l(),m(p0.$$.fragment),OQo=l(),Ze=a("div"),m(_0.$$.fragment),VQo=l(),hge=a("p"),XQo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),zQo=l(),ln=a("p"),QQo=o("The model class to instantiate is selected based on the "),uge=a("code"),WQo=o("model_type"),HQo=o(` property of the config object (either
passed as an argument or loaded from `),pge=a("code"),UQo=o("pretrained_model_name_or_path"),JQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_ge=a("code"),YQo=o("pretrained_model_name_or_path"),KQo=o(":"),ZQo=l(),b0=a("ul"),oT=a("li"),bge=a("strong"),eWo=o("speech-encoder-decoder"),oWo=o(" \u2014 "),GG=a("a"),rWo=o("SpeechEncoderDecoderModel"),tWo=o(" (Speech Encoder decoder model)"),aWo=l(),rT=a("li"),vge=a("strong"),nWo=o("speech_to_text"),sWo=o(" \u2014 "),OG=a("a"),lWo=o("Speech2TextForConditionalGeneration"),iWo=o(" (Speech2Text model)"),dWo=l(),tT=a("p"),cWo=o("The model is set in evaluation mode by default using "),Fge=a("code"),mWo=o("model.eval()"),fWo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tge=a("code"),gWo=o("model.train()"),hWo=l(),Mge=a("p"),uWo=o("Examples:"),pWo=l(),m(v0.$$.fragment),CBe=l(),Hd=a("h2"),aT=a("a"),Ege=a("span"),m(F0.$$.fragment),_Wo=l(),Cge=a("span"),bWo=o("AutoModelForAudioXVector"),wBe=l(),gr=a("div"),m(T0.$$.fragment),vWo=l(),Ud=a("p"),FWo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),VG=a("a"),TWo=o("from_pretrained()"),MWo=o(" class method or the "),XG=a("a"),EWo=o("from_config()"),CWo=o(` class
method.`),wWo=l(),M0=a("p"),AWo=o("This class cannot be instantiated directly using "),wge=a("code"),yWo=o("__init__()"),LWo=o(" (throws an error)."),xWo=l(),lt=a("div"),m(E0.$$.fragment),kWo=l(),Age=a("p"),SWo=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),RWo=l(),Jd=a("p"),BWo=o(`Note:
Loading a model from its configuration file does `),yge=a("strong"),PWo=o("not"),$Wo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zG=a("a"),IWo=o("from_pretrained()"),qWo=o(" to load the model weights."),NWo=l(),Lge=a("p"),jWo=o("Examples:"),DWo=l(),m(C0.$$.fragment),GWo=l(),eo=a("div"),m(w0.$$.fragment),OWo=l(),xge=a("p"),VWo=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),XWo=l(),dn=a("p"),zWo=o("The model class to instantiate is selected based on the "),kge=a("code"),QWo=o("model_type"),WWo=o(` property of the config object (either
passed as an argument or loaded from `),Sge=a("code"),HWo=o("pretrained_model_name_or_path"),UWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rge=a("code"),JWo=o("pretrained_model_name_or_path"),YWo=o(":"),KWo=l(),cn=a("ul"),nT=a("li"),Bge=a("strong"),ZWo=o("data2vec-audio"),eHo=o(" \u2014 "),QG=a("a"),oHo=o("Data2VecAudioForXVector"),rHo=o(" (Data2VecAudio model)"),tHo=l(),sT=a("li"),Pge=a("strong"),aHo=o("unispeech-sat"),nHo=o(" \u2014 "),WG=a("a"),sHo=o("UniSpeechSatForXVector"),lHo=o(" (UniSpeechSat model)"),iHo=l(),lT=a("li"),$ge=a("strong"),dHo=o("wav2vec2"),cHo=o(" \u2014 "),HG=a("a"),mHo=o("Wav2Vec2ForXVector"),fHo=o(" (Wav2Vec2 model)"),gHo=l(),iT=a("li"),Ige=a("strong"),hHo=o("wavlm"),uHo=o(" \u2014 "),UG=a("a"),pHo=o("WavLMForXVector"),_Ho=o(" (WavLM model)"),bHo=l(),dT=a("p"),vHo=o("The model is set in evaluation mode by default using "),qge=a("code"),FHo=o("model.eval()"),THo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nge=a("code"),MHo=o("model.train()"),EHo=l(),jge=a("p"),CHo=o("Examples:"),wHo=l(),m(A0.$$.fragment),ABe=l(),Yd=a("h2"),cT=a("a"),Dge=a("span"),m(y0.$$.fragment),AHo=l(),Gge=a("span"),yHo=o("AutoModelForMaskedImageModeling"),yBe=l(),hr=a("div"),m(L0.$$.fragment),LHo=l(),Kd=a("p"),xHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),JG=a("a"),kHo=o("from_pretrained()"),SHo=o(" class method or the "),YG=a("a"),RHo=o("from_config()"),BHo=o(` class
method.`),PHo=l(),x0=a("p"),$Ho=o("This class cannot be instantiated directly using "),Oge=a("code"),IHo=o("__init__()"),qHo=o(" (throws an error)."),NHo=l(),it=a("div"),m(k0.$$.fragment),jHo=l(),Vge=a("p"),DHo=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),GHo=l(),Zd=a("p"),OHo=o(`Note:
Loading a model from its configuration file does `),Xge=a("strong"),VHo=o("not"),XHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KG=a("a"),zHo=o("from_pretrained()"),QHo=o(" to load the model weights."),WHo=l(),zge=a("p"),HHo=o("Examples:"),UHo=l(),m(S0.$$.fragment),JHo=l(),oo=a("div"),m(R0.$$.fragment),YHo=l(),Qge=a("p"),KHo=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),ZHo=l(),mn=a("p"),eUo=o("The model class to instantiate is selected based on the "),Wge=a("code"),oUo=o("model_type"),rUo=o(` property of the config object (either
passed as an argument or loaded from `),Hge=a("code"),tUo=o("pretrained_model_name_or_path"),aUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uge=a("code"),nUo=o("pretrained_model_name_or_path"),sUo=o(":"),lUo=l(),ec=a("ul"),mT=a("li"),Jge=a("strong"),iUo=o("deit"),dUo=o(" \u2014 "),ZG=a("a"),cUo=o("DeiTForMaskedImageModeling"),mUo=o(" (DeiT model)"),fUo=l(),fT=a("li"),Yge=a("strong"),gUo=o("swin"),hUo=o(" \u2014 "),eO=a("a"),uUo=o("SwinForMaskedImageModeling"),pUo=o(" (Swin model)"),_Uo=l(),gT=a("li"),Kge=a("strong"),bUo=o("vit"),vUo=o(" \u2014 "),oO=a("a"),FUo=o("ViTForMaskedImageModeling"),TUo=o(" (ViT model)"),MUo=l(),hT=a("p"),EUo=o("The model is set in evaluation mode by default using "),Zge=a("code"),CUo=o("model.eval()"),wUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ehe=a("code"),AUo=o("model.train()"),yUo=l(),ohe=a("p"),LUo=o("Examples:"),xUo=l(),m(B0.$$.fragment),LBe=l(),oc=a("h2"),uT=a("a"),rhe=a("span"),m(P0.$$.fragment),kUo=l(),the=a("span"),SUo=o("AutoModelForObjectDetection"),xBe=l(),ur=a("div"),m($0.$$.fragment),RUo=l(),rc=a("p"),BUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),rO=a("a"),PUo=o("from_pretrained()"),$Uo=o(" class method or the "),tO=a("a"),IUo=o("from_config()"),qUo=o(` class
method.`),NUo=l(),I0=a("p"),jUo=o("This class cannot be instantiated directly using "),ahe=a("code"),DUo=o("__init__()"),GUo=o(" (throws an error)."),OUo=l(),dt=a("div"),m(q0.$$.fragment),VUo=l(),nhe=a("p"),XUo=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),zUo=l(),tc=a("p"),QUo=o(`Note:
Loading a model from its configuration file does `),she=a("strong"),WUo=o("not"),HUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aO=a("a"),UUo=o("from_pretrained()"),JUo=o(" to load the model weights."),YUo=l(),lhe=a("p"),KUo=o("Examples:"),ZUo=l(),m(N0.$$.fragment),eJo=l(),ro=a("div"),m(j0.$$.fragment),oJo=l(),ihe=a("p"),rJo=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),tJo=l(),fn=a("p"),aJo=o("The model class to instantiate is selected based on the "),dhe=a("code"),nJo=o("model_type"),sJo=o(` property of the config object (either
passed as an argument or loaded from `),che=a("code"),lJo=o("pretrained_model_name_or_path"),iJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mhe=a("code"),dJo=o("pretrained_model_name_or_path"),cJo=o(":"),mJo=l(),fhe=a("ul"),pT=a("li"),ghe=a("strong"),fJo=o("detr"),gJo=o(" \u2014 "),nO=a("a"),hJo=o("DetrForObjectDetection"),uJo=o(" (DETR model)"),pJo=l(),_T=a("p"),_Jo=o("The model is set in evaluation mode by default using "),hhe=a("code"),bJo=o("model.eval()"),vJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),uhe=a("code"),FJo=o("model.train()"),TJo=l(),phe=a("p"),MJo=o("Examples:"),EJo=l(),m(D0.$$.fragment),kBe=l(),ac=a("h2"),bT=a("a"),_he=a("span"),m(G0.$$.fragment),CJo=l(),bhe=a("span"),wJo=o("AutoModelForImageSegmentation"),SBe=l(),pr=a("div"),m(O0.$$.fragment),AJo=l(),nc=a("p"),yJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),sO=a("a"),LJo=o("from_pretrained()"),xJo=o(" class method or the "),lO=a("a"),kJo=o("from_config()"),SJo=o(` class
method.`),RJo=l(),V0=a("p"),BJo=o("This class cannot be instantiated directly using "),vhe=a("code"),PJo=o("__init__()"),$Jo=o(" (throws an error)."),IJo=l(),ct=a("div"),m(X0.$$.fragment),qJo=l(),Fhe=a("p"),NJo=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),jJo=l(),sc=a("p"),DJo=o(`Note:
Loading a model from its configuration file does `),The=a("strong"),GJo=o("not"),OJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iO=a("a"),VJo=o("from_pretrained()"),XJo=o(" to load the model weights."),zJo=l(),Mhe=a("p"),QJo=o("Examples:"),WJo=l(),m(z0.$$.fragment),HJo=l(),to=a("div"),m(Q0.$$.fragment),UJo=l(),Ehe=a("p"),JJo=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),YJo=l(),gn=a("p"),KJo=o("The model class to instantiate is selected based on the "),Che=a("code"),ZJo=o("model_type"),eYo=o(` property of the config object (either
passed as an argument or loaded from `),whe=a("code"),oYo=o("pretrained_model_name_or_path"),rYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ahe=a("code"),tYo=o("pretrained_model_name_or_path"),aYo=o(":"),nYo=l(),yhe=a("ul"),vT=a("li"),Lhe=a("strong"),sYo=o("detr"),lYo=o(" \u2014 "),dO=a("a"),iYo=o("DetrForSegmentation"),dYo=o(" (DETR model)"),cYo=l(),FT=a("p"),mYo=o("The model is set in evaluation mode by default using "),xhe=a("code"),fYo=o("model.eval()"),gYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),khe=a("code"),hYo=o("model.train()"),uYo=l(),She=a("p"),pYo=o("Examples:"),_Yo=l(),m(W0.$$.fragment),RBe=l(),lc=a("h2"),TT=a("a"),Rhe=a("span"),m(H0.$$.fragment),bYo=l(),Bhe=a("span"),vYo=o("AutoModelForSemanticSegmentation"),BBe=l(),_r=a("div"),m(U0.$$.fragment),FYo=l(),ic=a("p"),TYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),cO=a("a"),MYo=o("from_pretrained()"),EYo=o(" class method or the "),mO=a("a"),CYo=o("from_config()"),wYo=o(` class
method.`),AYo=l(),J0=a("p"),yYo=o("This class cannot be instantiated directly using "),Phe=a("code"),LYo=o("__init__()"),xYo=o(" (throws an error)."),kYo=l(),mt=a("div"),m(Y0.$$.fragment),SYo=l(),$he=a("p"),RYo=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),BYo=l(),dc=a("p"),PYo=o(`Note:
Loading a model from its configuration file does `),Ihe=a("strong"),$Yo=o("not"),IYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fO=a("a"),qYo=o("from_pretrained()"),NYo=o(" to load the model weights."),jYo=l(),qhe=a("p"),DYo=o("Examples:"),GYo=l(),m(K0.$$.fragment),OYo=l(),ao=a("div"),m(Z0.$$.fragment),VYo=l(),Nhe=a("p"),XYo=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),zYo=l(),hn=a("p"),QYo=o("The model class to instantiate is selected based on the "),jhe=a("code"),WYo=o("model_type"),HYo=o(` property of the config object (either
passed as an argument or loaded from `),Dhe=a("code"),UYo=o("pretrained_model_name_or_path"),JYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ghe=a("code"),YYo=o("pretrained_model_name_or_path"),KYo=o(":"),ZYo=l(),un=a("ul"),MT=a("li"),Ohe=a("strong"),eKo=o("beit"),oKo=o(" \u2014 "),gO=a("a"),rKo=o("BeitForSemanticSegmentation"),tKo=o(" (BEiT model)"),aKo=l(),ET=a("li"),Vhe=a("strong"),nKo=o("data2vec-vision"),sKo=o(" \u2014 "),hO=a("a"),lKo=o("Data2VecVisionForSemanticSegmentation"),iKo=o(" (Data2VecVision model)"),dKo=l(),CT=a("li"),Xhe=a("strong"),cKo=o("dpt"),mKo=o(" \u2014 "),uO=a("a"),fKo=o("DPTForSemanticSegmentation"),gKo=o(" (DPT model)"),hKo=l(),wT=a("li"),zhe=a("strong"),uKo=o("segformer"),pKo=o(" \u2014 "),pO=a("a"),_Ko=o("SegformerForSemanticSegmentation"),bKo=o(" (SegFormer model)"),vKo=l(),AT=a("p"),FKo=o("The model is set in evaluation mode by default using "),Qhe=a("code"),TKo=o("model.eval()"),MKo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Whe=a("code"),EKo=o("model.train()"),CKo=l(),Hhe=a("p"),wKo=o("Examples:"),AKo=l(),m(ey.$$.fragment),PBe=l(),cc=a("h2"),yT=a("a"),Uhe=a("span"),m(oy.$$.fragment),yKo=l(),Jhe=a("span"),LKo=o("AutoModelForInstanceSegmentation"),$Be=l(),br=a("div"),m(ry.$$.fragment),xKo=l(),mc=a("p"),kKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),_O=a("a"),SKo=o("from_pretrained()"),RKo=o(" class method or the "),bO=a("a"),BKo=o("from_config()"),PKo=o(` class
method.`),$Ko=l(),ty=a("p"),IKo=o("This class cannot be instantiated directly using "),Yhe=a("code"),qKo=o("__init__()"),NKo=o(" (throws an error)."),jKo=l(),ft=a("div"),m(ay.$$.fragment),DKo=l(),Khe=a("p"),GKo=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),OKo=l(),fc=a("p"),VKo=o(`Note:
Loading a model from its configuration file does `),Zhe=a("strong"),XKo=o("not"),zKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vO=a("a"),QKo=o("from_pretrained()"),WKo=o(" to load the model weights."),HKo=l(),eue=a("p"),UKo=o("Examples:"),JKo=l(),m(ny.$$.fragment),YKo=l(),no=a("div"),m(sy.$$.fragment),KKo=l(),oue=a("p"),ZKo=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),eZo=l(),pn=a("p"),oZo=o("The model class to instantiate is selected based on the "),rue=a("code"),rZo=o("model_type"),tZo=o(` property of the config object (either
passed as an argument or loaded from `),tue=a("code"),aZo=o("pretrained_model_name_or_path"),nZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aue=a("code"),sZo=o("pretrained_model_name_or_path"),lZo=o(":"),iZo=l(),nue=a("ul"),LT=a("li"),sue=a("strong"),dZo=o("maskformer"),cZo=o(" \u2014 "),FO=a("a"),mZo=o("MaskFormerForInstanceSegmentation"),fZo=o(" (MaskFormer model)"),gZo=l(),xT=a("p"),hZo=o("The model is set in evaluation mode by default using "),lue=a("code"),uZo=o("model.eval()"),pZo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),iue=a("code"),_Zo=o("model.train()"),bZo=l(),due=a("p"),vZo=o("Examples:"),FZo=l(),m(ly.$$.fragment),IBe=l(),gc=a("h2"),kT=a("a"),cue=a("span"),m(iy.$$.fragment),TZo=l(),mue=a("span"),MZo=o("TFAutoModel"),qBe=l(),vr=a("div"),m(dy.$$.fragment),EZo=l(),hc=a("p"),CZo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),TO=a("a"),wZo=o("from_pretrained()"),AZo=o(" class method or the "),MO=a("a"),yZo=o("from_config()"),LZo=o(` class
method.`),xZo=l(),cy=a("p"),kZo=o("This class cannot be instantiated directly using "),fue=a("code"),SZo=o("__init__()"),RZo=o(" (throws an error)."),BZo=l(),gt=a("div"),m(my.$$.fragment),PZo=l(),gue=a("p"),$Zo=o("Instantiates one of the base model classes of the library from a configuration."),IZo=l(),uc=a("p"),qZo=o(`Note:
Loading a model from its configuration file does `),hue=a("strong"),NZo=o("not"),jZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EO=a("a"),DZo=o("from_pretrained()"),GZo=o(" to load the model weights."),OZo=l(),uue=a("p"),VZo=o("Examples:"),XZo=l(),m(fy.$$.fragment),zZo=l(),ho=a("div"),m(gy.$$.fragment),QZo=l(),pue=a("p"),WZo=o("Instantiate one of the base model classes of the library from a pretrained model."),HZo=l(),_n=a("p"),UZo=o("The model class to instantiate is selected based on the "),_ue=a("code"),JZo=o("model_type"),YZo=o(` property of the config object (either
passed as an argument or loaded from `),bue=a("code"),KZo=o("pretrained_model_name_or_path"),ZZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vue=a("code"),eer=o("pretrained_model_name_or_path"),oer=o(":"),rer=l(),x=a("ul"),ST=a("li"),Fue=a("strong"),ter=o("albert"),aer=o(" \u2014 "),CO=a("a"),ner=o("TFAlbertModel"),ser=o(" (ALBERT model)"),ler=l(),RT=a("li"),Tue=a("strong"),ier=o("bart"),der=o(" \u2014 "),wO=a("a"),cer=o("TFBartModel"),mer=o(" (BART model)"),fer=l(),BT=a("li"),Mue=a("strong"),ger=o("bert"),her=o(" \u2014 "),AO=a("a"),uer=o("TFBertModel"),per=o(" (BERT model)"),_er=l(),PT=a("li"),Eue=a("strong"),ber=o("blenderbot"),ver=o(" \u2014 "),yO=a("a"),Fer=o("TFBlenderbotModel"),Ter=o(" (Blenderbot model)"),Mer=l(),$T=a("li"),Cue=a("strong"),Eer=o("blenderbot-small"),Cer=o(" \u2014 "),LO=a("a"),wer=o("TFBlenderbotSmallModel"),Aer=o(" (BlenderbotSmall model)"),yer=l(),IT=a("li"),wue=a("strong"),Ler=o("camembert"),xer=o(" \u2014 "),xO=a("a"),ker=o("TFCamembertModel"),Ser=o(" (CamemBERT model)"),Rer=l(),qT=a("li"),Aue=a("strong"),Ber=o("clip"),Per=o(" \u2014 "),kO=a("a"),$er=o("TFCLIPModel"),Ier=o(" (CLIP model)"),qer=l(),NT=a("li"),yue=a("strong"),Ner=o("convbert"),jer=o(" \u2014 "),SO=a("a"),Der=o("TFConvBertModel"),Ger=o(" (ConvBERT model)"),Oer=l(),jT=a("li"),Lue=a("strong"),Ver=o("convnext"),Xer=o(" \u2014 "),RO=a("a"),zer=o("TFConvNextModel"),Qer=o(" (ConvNext model)"),Wer=l(),DT=a("li"),xue=a("strong"),Her=o("ctrl"),Uer=o(" \u2014 "),BO=a("a"),Jer=o("TFCTRLModel"),Yer=o(" (CTRL model)"),Ker=l(),GT=a("li"),kue=a("strong"),Zer=o("deberta"),eor=o(" \u2014 "),PO=a("a"),oor=o("TFDebertaModel"),ror=o(" (DeBERTa model)"),tor=l(),OT=a("li"),Sue=a("strong"),aor=o("deberta-v2"),nor=o(" \u2014 "),$O=a("a"),sor=o("TFDebertaV2Model"),lor=o(" (DeBERTa-v2 model)"),ior=l(),VT=a("li"),Rue=a("strong"),dor=o("distilbert"),cor=o(" \u2014 "),IO=a("a"),mor=o("TFDistilBertModel"),gor=o(" (DistilBERT model)"),hor=l(),XT=a("li"),Bue=a("strong"),uor=o("dpr"),por=o(" \u2014 "),qO=a("a"),_or=o("TFDPRQuestionEncoder"),bor=o(" (DPR model)"),vor=l(),zT=a("li"),Pue=a("strong"),For=o("electra"),Tor=o(" \u2014 "),NO=a("a"),Mor=o("TFElectraModel"),Eor=o(" (ELECTRA model)"),Cor=l(),QT=a("li"),$ue=a("strong"),wor=o("flaubert"),Aor=o(" \u2014 "),jO=a("a"),yor=o("TFFlaubertModel"),Lor=o(" (FlauBERT model)"),xor=l(),Os=a("li"),Iue=a("strong"),kor=o("funnel"),Sor=o(" \u2014 "),DO=a("a"),Ror=o("TFFunnelModel"),Bor=o(" or "),GO=a("a"),Por=o("TFFunnelBaseModel"),$or=o(" (Funnel Transformer model)"),Ior=l(),WT=a("li"),que=a("strong"),qor=o("gpt2"),Nor=o(" \u2014 "),OO=a("a"),jor=o("TFGPT2Model"),Dor=o(" (OpenAI GPT-2 model)"),Gor=l(),HT=a("li"),Nue=a("strong"),Oor=o("gptj"),Vor=o(" \u2014 "),VO=a("a"),Xor=o("TFGPTJModel"),zor=o(" (GPT-J model)"),Qor=l(),UT=a("li"),jue=a("strong"),Wor=o("hubert"),Hor=o(" \u2014 "),XO=a("a"),Uor=o("TFHubertModel"),Jor=o(" (Hubert model)"),Yor=l(),JT=a("li"),Due=a("strong"),Kor=o("layoutlm"),Zor=o(" \u2014 "),zO=a("a"),err=o("TFLayoutLMModel"),orr=o(" (LayoutLM model)"),rrr=l(),YT=a("li"),Gue=a("strong"),trr=o("led"),arr=o(" \u2014 "),QO=a("a"),nrr=o("TFLEDModel"),srr=o(" (LED model)"),lrr=l(),KT=a("li"),Oue=a("strong"),irr=o("longformer"),drr=o(" \u2014 "),WO=a("a"),crr=o("TFLongformerModel"),mrr=o(" (Longformer model)"),frr=l(),ZT=a("li"),Vue=a("strong"),grr=o("lxmert"),hrr=o(" \u2014 "),HO=a("a"),urr=o("TFLxmertModel"),prr=o(" (LXMERT model)"),_rr=l(),eM=a("li"),Xue=a("strong"),brr=o("marian"),vrr=o(" \u2014 "),UO=a("a"),Frr=o("TFMarianModel"),Trr=o(" (Marian model)"),Mrr=l(),oM=a("li"),zue=a("strong"),Err=o("mbart"),Crr=o(" \u2014 "),JO=a("a"),wrr=o("TFMBartModel"),Arr=o(" (mBART model)"),yrr=l(),rM=a("li"),Que=a("strong"),Lrr=o("mobilebert"),xrr=o(" \u2014 "),YO=a("a"),krr=o("TFMobileBertModel"),Srr=o(" (MobileBERT model)"),Rrr=l(),tM=a("li"),Wue=a("strong"),Brr=o("mpnet"),Prr=o(" \u2014 "),KO=a("a"),$rr=o("TFMPNetModel"),Irr=o(" (MPNet model)"),qrr=l(),aM=a("li"),Hue=a("strong"),Nrr=o("mt5"),jrr=o(" \u2014 "),ZO=a("a"),Drr=o("TFMT5Model"),Grr=o(" (mT5 model)"),Orr=l(),nM=a("li"),Uue=a("strong"),Vrr=o("openai-gpt"),Xrr=o(" \u2014 "),eV=a("a"),zrr=o("TFOpenAIGPTModel"),Qrr=o(" (OpenAI GPT model)"),Wrr=l(),sM=a("li"),Jue=a("strong"),Hrr=o("pegasus"),Urr=o(" \u2014 "),oV=a("a"),Jrr=o("TFPegasusModel"),Yrr=o(" (Pegasus model)"),Krr=l(),lM=a("li"),Yue=a("strong"),Zrr=o("rembert"),etr=o(" \u2014 "),rV=a("a"),otr=o("TFRemBertModel"),rtr=o(" (RemBERT model)"),ttr=l(),iM=a("li"),Kue=a("strong"),atr=o("roberta"),ntr=o(" \u2014 "),tV=a("a"),str=o("TFRobertaModel"),ltr=o(" (RoBERTa model)"),itr=l(),dM=a("li"),Zue=a("strong"),dtr=o("roformer"),ctr=o(" \u2014 "),aV=a("a"),mtr=o("TFRoFormerModel"),ftr=o(" (RoFormer model)"),gtr=l(),cM=a("li"),epe=a("strong"),htr=o("speech_to_text"),utr=o(" \u2014 "),nV=a("a"),ptr=o("TFSpeech2TextModel"),_tr=o(" (Speech2Text model)"),btr=l(),mM=a("li"),ope=a("strong"),vtr=o("t5"),Ftr=o(" \u2014 "),sV=a("a"),Ttr=o("TFT5Model"),Mtr=o(" (T5 model)"),Etr=l(),fM=a("li"),rpe=a("strong"),Ctr=o("tapas"),wtr=o(" \u2014 "),lV=a("a"),Atr=o("TFTapasModel"),ytr=o(" (TAPAS model)"),Ltr=l(),gM=a("li"),tpe=a("strong"),xtr=o("transfo-xl"),ktr=o(" \u2014 "),iV=a("a"),Str=o("TFTransfoXLModel"),Rtr=o(" (Transformer-XL model)"),Btr=l(),hM=a("li"),ape=a("strong"),Ptr=o("vit"),$tr=o(" \u2014 "),dV=a("a"),Itr=o("TFViTModel"),qtr=o(" (ViT model)"),Ntr=l(),uM=a("li"),npe=a("strong"),jtr=o("vit_mae"),Dtr=o(" \u2014 "),cV=a("a"),Gtr=o("TFViTMAEModel"),Otr=o(" (ViTMAE model)"),Vtr=l(),pM=a("li"),spe=a("strong"),Xtr=o("wav2vec2"),ztr=o(" \u2014 "),mV=a("a"),Qtr=o("TFWav2Vec2Model"),Wtr=o(" (Wav2Vec2 model)"),Htr=l(),_M=a("li"),lpe=a("strong"),Utr=o("xlm"),Jtr=o(" \u2014 "),fV=a("a"),Ytr=o("TFXLMModel"),Ktr=o(" (XLM model)"),Ztr=l(),bM=a("li"),ipe=a("strong"),ear=o("xlm-roberta"),oar=o(" \u2014 "),gV=a("a"),rar=o("TFXLMRobertaModel"),tar=o(" (XLM-RoBERTa model)"),aar=l(),vM=a("li"),dpe=a("strong"),nar=o("xlnet"),sar=o(" \u2014 "),hV=a("a"),lar=o("TFXLNetModel"),iar=o(" (XLNet model)"),dar=l(),cpe=a("p"),car=o("Examples:"),mar=l(),m(hy.$$.fragment),NBe=l(),pc=a("h2"),FM=a("a"),mpe=a("span"),m(uy.$$.fragment),far=l(),fpe=a("span"),gar=o("TFAutoModelForPreTraining"),jBe=l(),Fr=a("div"),m(py.$$.fragment),har=l(),_c=a("p"),uar=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),uV=a("a"),par=o("from_pretrained()"),_ar=o(" class method or the "),pV=a("a"),bar=o("from_config()"),Far=o(` class
method.`),Tar=l(),_y=a("p"),Mar=o("This class cannot be instantiated directly using "),gpe=a("code"),Ear=o("__init__()"),Car=o(" (throws an error)."),war=l(),ht=a("div"),m(by.$$.fragment),Aar=l(),hpe=a("p"),yar=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Lar=l(),bc=a("p"),xar=o(`Note:
Loading a model from its configuration file does `),upe=a("strong"),kar=o("not"),Sar=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_V=a("a"),Rar=o("from_pretrained()"),Bar=o(" to load the model weights."),Par=l(),ppe=a("p"),$ar=o("Examples:"),Iar=l(),m(vy.$$.fragment),qar=l(),uo=a("div"),m(Fy.$$.fragment),Nar=l(),_pe=a("p"),jar=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Dar=l(),bn=a("p"),Gar=o("The model class to instantiate is selected based on the "),bpe=a("code"),Oar=o("model_type"),Var=o(` property of the config object (either
passed as an argument or loaded from `),vpe=a("code"),Xar=o("pretrained_model_name_or_path"),zar=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fpe=a("code"),Qar=o("pretrained_model_name_or_path"),War=o(":"),Har=l(),H=a("ul"),TM=a("li"),Tpe=a("strong"),Uar=o("albert"),Jar=o(" \u2014 "),bV=a("a"),Yar=o("TFAlbertForPreTraining"),Kar=o(" (ALBERT model)"),Zar=l(),MM=a("li"),Mpe=a("strong"),enr=o("bart"),onr=o(" \u2014 "),vV=a("a"),rnr=o("TFBartForConditionalGeneration"),tnr=o(" (BART model)"),anr=l(),EM=a("li"),Epe=a("strong"),nnr=o("bert"),snr=o(" \u2014 "),FV=a("a"),lnr=o("TFBertForPreTraining"),inr=o(" (BERT model)"),dnr=l(),CM=a("li"),Cpe=a("strong"),cnr=o("camembert"),mnr=o(" \u2014 "),TV=a("a"),fnr=o("TFCamembertForMaskedLM"),gnr=o(" (CamemBERT model)"),hnr=l(),wM=a("li"),wpe=a("strong"),unr=o("ctrl"),pnr=o(" \u2014 "),MV=a("a"),_nr=o("TFCTRLLMHeadModel"),bnr=o(" (CTRL model)"),vnr=l(),AM=a("li"),Ape=a("strong"),Fnr=o("distilbert"),Tnr=o(" \u2014 "),EV=a("a"),Mnr=o("TFDistilBertForMaskedLM"),Enr=o(" (DistilBERT model)"),Cnr=l(),yM=a("li"),ype=a("strong"),wnr=o("electra"),Anr=o(" \u2014 "),CV=a("a"),ynr=o("TFElectraForPreTraining"),Lnr=o(" (ELECTRA model)"),xnr=l(),LM=a("li"),Lpe=a("strong"),knr=o("flaubert"),Snr=o(" \u2014 "),wV=a("a"),Rnr=o("TFFlaubertWithLMHeadModel"),Bnr=o(" (FlauBERT model)"),Pnr=l(),xM=a("li"),xpe=a("strong"),$nr=o("funnel"),Inr=o(" \u2014 "),AV=a("a"),qnr=o("TFFunnelForPreTraining"),Nnr=o(" (Funnel Transformer model)"),jnr=l(),kM=a("li"),kpe=a("strong"),Dnr=o("gpt2"),Gnr=o(" \u2014 "),yV=a("a"),Onr=o("TFGPT2LMHeadModel"),Vnr=o(" (OpenAI GPT-2 model)"),Xnr=l(),SM=a("li"),Spe=a("strong"),znr=o("layoutlm"),Qnr=o(" \u2014 "),LV=a("a"),Wnr=o("TFLayoutLMForMaskedLM"),Hnr=o(" (LayoutLM model)"),Unr=l(),RM=a("li"),Rpe=a("strong"),Jnr=o("lxmert"),Ynr=o(" \u2014 "),xV=a("a"),Knr=o("TFLxmertForPreTraining"),Znr=o(" (LXMERT model)"),esr=l(),BM=a("li"),Bpe=a("strong"),osr=o("mobilebert"),rsr=o(" \u2014 "),kV=a("a"),tsr=o("TFMobileBertForPreTraining"),asr=o(" (MobileBERT model)"),nsr=l(),PM=a("li"),Ppe=a("strong"),ssr=o("mpnet"),lsr=o(" \u2014 "),SV=a("a"),isr=o("TFMPNetForMaskedLM"),dsr=o(" (MPNet model)"),csr=l(),$M=a("li"),$pe=a("strong"),msr=o("openai-gpt"),fsr=o(" \u2014 "),RV=a("a"),gsr=o("TFOpenAIGPTLMHeadModel"),hsr=o(" (OpenAI GPT model)"),usr=l(),IM=a("li"),Ipe=a("strong"),psr=o("roberta"),_sr=o(" \u2014 "),BV=a("a"),bsr=o("TFRobertaForMaskedLM"),vsr=o(" (RoBERTa model)"),Fsr=l(),qM=a("li"),qpe=a("strong"),Tsr=o("t5"),Msr=o(" \u2014 "),PV=a("a"),Esr=o("TFT5ForConditionalGeneration"),Csr=o(" (T5 model)"),wsr=l(),NM=a("li"),Npe=a("strong"),Asr=o("tapas"),ysr=o(" \u2014 "),$V=a("a"),Lsr=o("TFTapasForMaskedLM"),xsr=o(" (TAPAS model)"),ksr=l(),jM=a("li"),jpe=a("strong"),Ssr=o("transfo-xl"),Rsr=o(" \u2014 "),IV=a("a"),Bsr=o("TFTransfoXLLMHeadModel"),Psr=o(" (Transformer-XL model)"),$sr=l(),DM=a("li"),Dpe=a("strong"),Isr=o("vit_mae"),qsr=o(" \u2014 "),qV=a("a"),Nsr=o("TFViTMAEForPreTraining"),jsr=o(" (ViTMAE model)"),Dsr=l(),GM=a("li"),Gpe=a("strong"),Gsr=o("xlm"),Osr=o(" \u2014 "),NV=a("a"),Vsr=o("TFXLMWithLMHeadModel"),Xsr=o(" (XLM model)"),zsr=l(),OM=a("li"),Ope=a("strong"),Qsr=o("xlm-roberta"),Wsr=o(" \u2014 "),jV=a("a"),Hsr=o("TFXLMRobertaForMaskedLM"),Usr=o(" (XLM-RoBERTa model)"),Jsr=l(),VM=a("li"),Vpe=a("strong"),Ysr=o("xlnet"),Ksr=o(" \u2014 "),DV=a("a"),Zsr=o("TFXLNetLMHeadModel"),elr=o(" (XLNet model)"),olr=l(),Xpe=a("p"),rlr=o("Examples:"),tlr=l(),m(Ty.$$.fragment),DBe=l(),vc=a("h2"),XM=a("a"),zpe=a("span"),m(My.$$.fragment),alr=l(),Qpe=a("span"),nlr=o("TFAutoModelForCausalLM"),GBe=l(),Tr=a("div"),m(Ey.$$.fragment),slr=l(),Fc=a("p"),llr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),GV=a("a"),ilr=o("from_pretrained()"),dlr=o(" class method or the "),OV=a("a"),clr=o("from_config()"),mlr=o(` class
method.`),flr=l(),Cy=a("p"),glr=o("This class cannot be instantiated directly using "),Wpe=a("code"),hlr=o("__init__()"),ulr=o(" (throws an error)."),plr=l(),ut=a("div"),m(wy.$$.fragment),_lr=l(),Hpe=a("p"),blr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),vlr=l(),Tc=a("p"),Flr=o(`Note:
Loading a model from its configuration file does `),Upe=a("strong"),Tlr=o("not"),Mlr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VV=a("a"),Elr=o("from_pretrained()"),Clr=o(" to load the model weights."),wlr=l(),Jpe=a("p"),Alr=o("Examples:"),ylr=l(),m(Ay.$$.fragment),Llr=l(),po=a("div"),m(yy.$$.fragment),xlr=l(),Ype=a("p"),klr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Slr=l(),vn=a("p"),Rlr=o("The model class to instantiate is selected based on the "),Kpe=a("code"),Blr=o("model_type"),Plr=o(` property of the config object (either
passed as an argument or loaded from `),Zpe=a("code"),$lr=o("pretrained_model_name_or_path"),Ilr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e_e=a("code"),qlr=o("pretrained_model_name_or_path"),Nlr=o(":"),jlr=l(),me=a("ul"),zM=a("li"),o_e=a("strong"),Dlr=o("bert"),Glr=o(" \u2014 "),XV=a("a"),Olr=o("TFBertLMHeadModel"),Vlr=o(" (BERT model)"),Xlr=l(),QM=a("li"),r_e=a("strong"),zlr=o("camembert"),Qlr=o(" \u2014 "),zV=a("a"),Wlr=o("TFCamembertForCausalLM"),Hlr=o(" (CamemBERT model)"),Ulr=l(),WM=a("li"),t_e=a("strong"),Jlr=o("ctrl"),Ylr=o(" \u2014 "),QV=a("a"),Klr=o("TFCTRLLMHeadModel"),Zlr=o(" (CTRL model)"),eir=l(),HM=a("li"),a_e=a("strong"),oir=o("gpt2"),rir=o(" \u2014 "),WV=a("a"),tir=o("TFGPT2LMHeadModel"),air=o(" (OpenAI GPT-2 model)"),nir=l(),UM=a("li"),n_e=a("strong"),sir=o("gptj"),lir=o(" \u2014 "),HV=a("a"),iir=o("TFGPTJForCausalLM"),dir=o(" (GPT-J model)"),cir=l(),JM=a("li"),s_e=a("strong"),mir=o("openai-gpt"),fir=o(" \u2014 "),UV=a("a"),gir=o("TFOpenAIGPTLMHeadModel"),hir=o(" (OpenAI GPT model)"),uir=l(),YM=a("li"),l_e=a("strong"),pir=o("rembert"),_ir=o(" \u2014 "),JV=a("a"),bir=o("TFRemBertForCausalLM"),vir=o(" (RemBERT model)"),Fir=l(),KM=a("li"),i_e=a("strong"),Tir=o("roberta"),Mir=o(" \u2014 "),YV=a("a"),Eir=o("TFRobertaForCausalLM"),Cir=o(" (RoBERTa model)"),wir=l(),ZM=a("li"),d_e=a("strong"),Air=o("roformer"),yir=o(" \u2014 "),KV=a("a"),Lir=o("TFRoFormerForCausalLM"),xir=o(" (RoFormer model)"),kir=l(),e4=a("li"),c_e=a("strong"),Sir=o("transfo-xl"),Rir=o(" \u2014 "),ZV=a("a"),Bir=o("TFTransfoXLLMHeadModel"),Pir=o(" (Transformer-XL model)"),$ir=l(),o4=a("li"),m_e=a("strong"),Iir=o("xlm"),qir=o(" \u2014 "),eX=a("a"),Nir=o("TFXLMWithLMHeadModel"),jir=o(" (XLM model)"),Dir=l(),r4=a("li"),f_e=a("strong"),Gir=o("xlnet"),Oir=o(" \u2014 "),oX=a("a"),Vir=o("TFXLNetLMHeadModel"),Xir=o(" (XLNet model)"),zir=l(),g_e=a("p"),Qir=o("Examples:"),Wir=l(),m(Ly.$$.fragment),OBe=l(),Mc=a("h2"),t4=a("a"),h_e=a("span"),m(xy.$$.fragment),Hir=l(),u_e=a("span"),Uir=o("TFAutoModelForImageClassification"),VBe=l(),Mr=a("div"),m(ky.$$.fragment),Jir=l(),Ec=a("p"),Yir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),rX=a("a"),Kir=o("from_pretrained()"),Zir=o(" class method or the "),tX=a("a"),edr=o("from_config()"),odr=o(` class
method.`),rdr=l(),Sy=a("p"),tdr=o("This class cannot be instantiated directly using "),p_e=a("code"),adr=o("__init__()"),ndr=o(" (throws an error)."),sdr=l(),pt=a("div"),m(Ry.$$.fragment),ldr=l(),__e=a("p"),idr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),ddr=l(),Cc=a("p"),cdr=o(`Note:
Loading a model from its configuration file does `),b_e=a("strong"),mdr=o("not"),fdr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aX=a("a"),gdr=o("from_pretrained()"),hdr=o(" to load the model weights."),udr=l(),v_e=a("p"),pdr=o("Examples:"),_dr=l(),m(By.$$.fragment),bdr=l(),_o=a("div"),m(Py.$$.fragment),vdr=l(),F_e=a("p"),Fdr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Tdr=l(),Fn=a("p"),Mdr=o("The model class to instantiate is selected based on the "),T_e=a("code"),Edr=o("model_type"),Cdr=o(` property of the config object (either
passed as an argument or loaded from `),M_e=a("code"),wdr=o("pretrained_model_name_or_path"),Adr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E_e=a("code"),ydr=o("pretrained_model_name_or_path"),Ldr=o(":"),xdr=l(),$y=a("ul"),a4=a("li"),C_e=a("strong"),kdr=o("convnext"),Sdr=o(" \u2014 "),nX=a("a"),Rdr=o("TFConvNextForImageClassification"),Bdr=o(" (ConvNext model)"),Pdr=l(),n4=a("li"),w_e=a("strong"),$dr=o("vit"),Idr=o(" \u2014 "),sX=a("a"),qdr=o("TFViTForImageClassification"),Ndr=o(" (ViT model)"),jdr=l(),A_e=a("p"),Ddr=o("Examples:"),Gdr=l(),m(Iy.$$.fragment),XBe=l(),wc=a("h2"),s4=a("a"),y_e=a("span"),m(qy.$$.fragment),Odr=l(),L_e=a("span"),Vdr=o("TFAutoModelForMaskedLM"),zBe=l(),Er=a("div"),m(Ny.$$.fragment),Xdr=l(),Ac=a("p"),zdr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),lX=a("a"),Qdr=o("from_pretrained()"),Wdr=o(" class method or the "),iX=a("a"),Hdr=o("from_config()"),Udr=o(` class
method.`),Jdr=l(),jy=a("p"),Ydr=o("This class cannot be instantiated directly using "),x_e=a("code"),Kdr=o("__init__()"),Zdr=o(" (throws an error)."),ecr=l(),_t=a("div"),m(Dy.$$.fragment),ocr=l(),k_e=a("p"),rcr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),tcr=l(),yc=a("p"),acr=o(`Note:
Loading a model from its configuration file does `),S_e=a("strong"),ncr=o("not"),scr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dX=a("a"),lcr=o("from_pretrained()"),icr=o(" to load the model weights."),dcr=l(),R_e=a("p"),ccr=o("Examples:"),mcr=l(),m(Gy.$$.fragment),fcr=l(),bo=a("div"),m(Oy.$$.fragment),gcr=l(),B_e=a("p"),hcr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),ucr=l(),Tn=a("p"),pcr=o("The model class to instantiate is selected based on the "),P_e=a("code"),_cr=o("model_type"),bcr=o(` property of the config object (either
passed as an argument or loaded from `),$_e=a("code"),vcr=o("pretrained_model_name_or_path"),Fcr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I_e=a("code"),Tcr=o("pretrained_model_name_or_path"),Mcr=o(":"),Ecr=l(),J=a("ul"),l4=a("li"),q_e=a("strong"),Ccr=o("albert"),wcr=o(" \u2014 "),cX=a("a"),Acr=o("TFAlbertForMaskedLM"),ycr=o(" (ALBERT model)"),Lcr=l(),i4=a("li"),N_e=a("strong"),xcr=o("bert"),kcr=o(" \u2014 "),mX=a("a"),Scr=o("TFBertForMaskedLM"),Rcr=o(" (BERT model)"),Bcr=l(),d4=a("li"),j_e=a("strong"),Pcr=o("camembert"),$cr=o(" \u2014 "),fX=a("a"),Icr=o("TFCamembertForMaskedLM"),qcr=o(" (CamemBERT model)"),Ncr=l(),c4=a("li"),D_e=a("strong"),jcr=o("convbert"),Dcr=o(" \u2014 "),gX=a("a"),Gcr=o("TFConvBertForMaskedLM"),Ocr=o(" (ConvBERT model)"),Vcr=l(),m4=a("li"),G_e=a("strong"),Xcr=o("deberta"),zcr=o(" \u2014 "),hX=a("a"),Qcr=o("TFDebertaForMaskedLM"),Wcr=o(" (DeBERTa model)"),Hcr=l(),f4=a("li"),O_e=a("strong"),Ucr=o("deberta-v2"),Jcr=o(" \u2014 "),uX=a("a"),Ycr=o("TFDebertaV2ForMaskedLM"),Kcr=o(" (DeBERTa-v2 model)"),Zcr=l(),g4=a("li"),V_e=a("strong"),emr=o("distilbert"),omr=o(" \u2014 "),pX=a("a"),rmr=o("TFDistilBertForMaskedLM"),tmr=o(" (DistilBERT model)"),amr=l(),h4=a("li"),X_e=a("strong"),nmr=o("electra"),smr=o(" \u2014 "),_X=a("a"),lmr=o("TFElectraForMaskedLM"),imr=o(" (ELECTRA model)"),dmr=l(),u4=a("li"),z_e=a("strong"),cmr=o("flaubert"),mmr=o(" \u2014 "),bX=a("a"),fmr=o("TFFlaubertWithLMHeadModel"),gmr=o(" (FlauBERT model)"),hmr=l(),p4=a("li"),Q_e=a("strong"),umr=o("funnel"),pmr=o(" \u2014 "),vX=a("a"),_mr=o("TFFunnelForMaskedLM"),bmr=o(" (Funnel Transformer model)"),vmr=l(),_4=a("li"),W_e=a("strong"),Fmr=o("layoutlm"),Tmr=o(" \u2014 "),FX=a("a"),Mmr=o("TFLayoutLMForMaskedLM"),Emr=o(" (LayoutLM model)"),Cmr=l(),b4=a("li"),H_e=a("strong"),wmr=o("longformer"),Amr=o(" \u2014 "),TX=a("a"),ymr=o("TFLongformerForMaskedLM"),Lmr=o(" (Longformer model)"),xmr=l(),v4=a("li"),U_e=a("strong"),kmr=o("mobilebert"),Smr=o(" \u2014 "),MX=a("a"),Rmr=o("TFMobileBertForMaskedLM"),Bmr=o(" (MobileBERT model)"),Pmr=l(),F4=a("li"),J_e=a("strong"),$mr=o("mpnet"),Imr=o(" \u2014 "),EX=a("a"),qmr=o("TFMPNetForMaskedLM"),Nmr=o(" (MPNet model)"),jmr=l(),T4=a("li"),Y_e=a("strong"),Dmr=o("rembert"),Gmr=o(" \u2014 "),CX=a("a"),Omr=o("TFRemBertForMaskedLM"),Vmr=o(" (RemBERT model)"),Xmr=l(),M4=a("li"),K_e=a("strong"),zmr=o("roberta"),Qmr=o(" \u2014 "),wX=a("a"),Wmr=o("TFRobertaForMaskedLM"),Hmr=o(" (RoBERTa model)"),Umr=l(),E4=a("li"),Z_e=a("strong"),Jmr=o("roformer"),Ymr=o(" \u2014 "),AX=a("a"),Kmr=o("TFRoFormerForMaskedLM"),Zmr=o(" (RoFormer model)"),efr=l(),C4=a("li"),ebe=a("strong"),ofr=o("tapas"),rfr=o(" \u2014 "),yX=a("a"),tfr=o("TFTapasForMaskedLM"),afr=o(" (TAPAS model)"),nfr=l(),w4=a("li"),obe=a("strong"),sfr=o("xlm"),lfr=o(" \u2014 "),LX=a("a"),ifr=o("TFXLMWithLMHeadModel"),dfr=o(" (XLM model)"),cfr=l(),A4=a("li"),rbe=a("strong"),mfr=o("xlm-roberta"),ffr=o(" \u2014 "),xX=a("a"),gfr=o("TFXLMRobertaForMaskedLM"),hfr=o(" (XLM-RoBERTa model)"),ufr=l(),tbe=a("p"),pfr=o("Examples:"),_fr=l(),m(Vy.$$.fragment),QBe=l(),Lc=a("h2"),y4=a("a"),abe=a("span"),m(Xy.$$.fragment),bfr=l(),nbe=a("span"),vfr=o("TFAutoModelForSeq2SeqLM"),WBe=l(),Cr=a("div"),m(zy.$$.fragment),Ffr=l(),xc=a("p"),Tfr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),kX=a("a"),Mfr=o("from_pretrained()"),Efr=o(" class method or the "),SX=a("a"),Cfr=o("from_config()"),wfr=o(` class
method.`),Afr=l(),Qy=a("p"),yfr=o("This class cannot be instantiated directly using "),sbe=a("code"),Lfr=o("__init__()"),xfr=o(" (throws an error)."),kfr=l(),bt=a("div"),m(Wy.$$.fragment),Sfr=l(),lbe=a("p"),Rfr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Bfr=l(),kc=a("p"),Pfr=o(`Note:
Loading a model from its configuration file does `),ibe=a("strong"),$fr=o("not"),Ifr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RX=a("a"),qfr=o("from_pretrained()"),Nfr=o(" to load the model weights."),jfr=l(),dbe=a("p"),Dfr=o("Examples:"),Gfr=l(),m(Hy.$$.fragment),Ofr=l(),vo=a("div"),m(Uy.$$.fragment),Vfr=l(),cbe=a("p"),Xfr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),zfr=l(),Mn=a("p"),Qfr=o("The model class to instantiate is selected based on the "),mbe=a("code"),Wfr=o("model_type"),Hfr=o(` property of the config object (either
passed as an argument or loaded from `),fbe=a("code"),Ufr=o("pretrained_model_name_or_path"),Jfr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gbe=a("code"),Yfr=o("pretrained_model_name_or_path"),Kfr=o(":"),Zfr=l(),be=a("ul"),L4=a("li"),hbe=a("strong"),egr=o("bart"),ogr=o(" \u2014 "),BX=a("a"),rgr=o("TFBartForConditionalGeneration"),tgr=o(" (BART model)"),agr=l(),x4=a("li"),ube=a("strong"),ngr=o("blenderbot"),sgr=o(" \u2014 "),PX=a("a"),lgr=o("TFBlenderbotForConditionalGeneration"),igr=o(" (Blenderbot model)"),dgr=l(),k4=a("li"),pbe=a("strong"),cgr=o("blenderbot-small"),mgr=o(" \u2014 "),$X=a("a"),fgr=o("TFBlenderbotSmallForConditionalGeneration"),ggr=o(" (BlenderbotSmall model)"),hgr=l(),S4=a("li"),_be=a("strong"),ugr=o("encoder-decoder"),pgr=o(" \u2014 "),IX=a("a"),_gr=o("TFEncoderDecoderModel"),bgr=o(" (Encoder decoder model)"),vgr=l(),R4=a("li"),bbe=a("strong"),Fgr=o("led"),Tgr=o(" \u2014 "),qX=a("a"),Mgr=o("TFLEDForConditionalGeneration"),Egr=o(" (LED model)"),Cgr=l(),B4=a("li"),vbe=a("strong"),wgr=o("marian"),Agr=o(" \u2014 "),NX=a("a"),ygr=o("TFMarianMTModel"),Lgr=o(" (Marian model)"),xgr=l(),P4=a("li"),Fbe=a("strong"),kgr=o("mbart"),Sgr=o(" \u2014 "),jX=a("a"),Rgr=o("TFMBartForConditionalGeneration"),Bgr=o(" (mBART model)"),Pgr=l(),$4=a("li"),Tbe=a("strong"),$gr=o("mt5"),Igr=o(" \u2014 "),DX=a("a"),qgr=o("TFMT5ForConditionalGeneration"),Ngr=o(" (mT5 model)"),jgr=l(),I4=a("li"),Mbe=a("strong"),Dgr=o("pegasus"),Ggr=o(" \u2014 "),GX=a("a"),Ogr=o("TFPegasusForConditionalGeneration"),Vgr=o(" (Pegasus model)"),Xgr=l(),q4=a("li"),Ebe=a("strong"),zgr=o("t5"),Qgr=o(" \u2014 "),OX=a("a"),Wgr=o("TFT5ForConditionalGeneration"),Hgr=o(" (T5 model)"),Ugr=l(),Cbe=a("p"),Jgr=o("Examples:"),Ygr=l(),m(Jy.$$.fragment),HBe=l(),Sc=a("h2"),N4=a("a"),wbe=a("span"),m(Yy.$$.fragment),Kgr=l(),Abe=a("span"),Zgr=o("TFAutoModelForSequenceClassification"),UBe=l(),wr=a("div"),m(Ky.$$.fragment),ehr=l(),Rc=a("p"),ohr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),VX=a("a"),rhr=o("from_pretrained()"),thr=o(" class method or the "),XX=a("a"),ahr=o("from_config()"),nhr=o(` class
method.`),shr=l(),Zy=a("p"),lhr=o("This class cannot be instantiated directly using "),ybe=a("code"),ihr=o("__init__()"),dhr=o(" (throws an error)."),chr=l(),vt=a("div"),m(e8.$$.fragment),mhr=l(),Lbe=a("p"),fhr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),ghr=l(),Bc=a("p"),hhr=o(`Note:
Loading a model from its configuration file does `),xbe=a("strong"),uhr=o("not"),phr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zX=a("a"),_hr=o("from_pretrained()"),bhr=o(" to load the model weights."),vhr=l(),kbe=a("p"),Fhr=o("Examples:"),Thr=l(),m(o8.$$.fragment),Mhr=l(),Fo=a("div"),m(r8.$$.fragment),Ehr=l(),Sbe=a("p"),Chr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),whr=l(),En=a("p"),Ahr=o("The model class to instantiate is selected based on the "),Rbe=a("code"),yhr=o("model_type"),Lhr=o(` property of the config object (either
passed as an argument or loaded from `),Bbe=a("code"),xhr=o("pretrained_model_name_or_path"),khr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pbe=a("code"),Shr=o("pretrained_model_name_or_path"),Rhr=o(":"),Bhr=l(),V=a("ul"),j4=a("li"),$be=a("strong"),Phr=o("albert"),$hr=o(" \u2014 "),QX=a("a"),Ihr=o("TFAlbertForSequenceClassification"),qhr=o(" (ALBERT model)"),Nhr=l(),D4=a("li"),Ibe=a("strong"),jhr=o("bert"),Dhr=o(" \u2014 "),WX=a("a"),Ghr=o("TFBertForSequenceClassification"),Ohr=o(" (BERT model)"),Vhr=l(),G4=a("li"),qbe=a("strong"),Xhr=o("camembert"),zhr=o(" \u2014 "),HX=a("a"),Qhr=o("TFCamembertForSequenceClassification"),Whr=o(" (CamemBERT model)"),Hhr=l(),O4=a("li"),Nbe=a("strong"),Uhr=o("convbert"),Jhr=o(" \u2014 "),UX=a("a"),Yhr=o("TFConvBertForSequenceClassification"),Khr=o(" (ConvBERT model)"),Zhr=l(),V4=a("li"),jbe=a("strong"),eur=o("ctrl"),our=o(" \u2014 "),JX=a("a"),rur=o("TFCTRLForSequenceClassification"),tur=o(" (CTRL model)"),aur=l(),X4=a("li"),Dbe=a("strong"),nur=o("deberta"),sur=o(" \u2014 "),YX=a("a"),lur=o("TFDebertaForSequenceClassification"),iur=o(" (DeBERTa model)"),dur=l(),z4=a("li"),Gbe=a("strong"),cur=o("deberta-v2"),mur=o(" \u2014 "),KX=a("a"),fur=o("TFDebertaV2ForSequenceClassification"),gur=o(" (DeBERTa-v2 model)"),hur=l(),Q4=a("li"),Obe=a("strong"),uur=o("distilbert"),pur=o(" \u2014 "),ZX=a("a"),_ur=o("TFDistilBertForSequenceClassification"),bur=o(" (DistilBERT model)"),vur=l(),W4=a("li"),Vbe=a("strong"),Fur=o("electra"),Tur=o(" \u2014 "),ez=a("a"),Mur=o("TFElectraForSequenceClassification"),Eur=o(" (ELECTRA model)"),Cur=l(),H4=a("li"),Xbe=a("strong"),wur=o("flaubert"),Aur=o(" \u2014 "),oz=a("a"),yur=o("TFFlaubertForSequenceClassification"),Lur=o(" (FlauBERT model)"),xur=l(),U4=a("li"),zbe=a("strong"),kur=o("funnel"),Sur=o(" \u2014 "),rz=a("a"),Rur=o("TFFunnelForSequenceClassification"),Bur=o(" (Funnel Transformer model)"),Pur=l(),J4=a("li"),Qbe=a("strong"),$ur=o("gpt2"),Iur=o(" \u2014 "),tz=a("a"),qur=o("TFGPT2ForSequenceClassification"),Nur=o(" (OpenAI GPT-2 model)"),jur=l(),Y4=a("li"),Wbe=a("strong"),Dur=o("gptj"),Gur=o(" \u2014 "),az=a("a"),Our=o("TFGPTJForSequenceClassification"),Vur=o(" (GPT-J model)"),Xur=l(),K4=a("li"),Hbe=a("strong"),zur=o("layoutlm"),Qur=o(" \u2014 "),nz=a("a"),Wur=o("TFLayoutLMForSequenceClassification"),Hur=o(" (LayoutLM model)"),Uur=l(),Z4=a("li"),Ube=a("strong"),Jur=o("longformer"),Yur=o(" \u2014 "),sz=a("a"),Kur=o("TFLongformerForSequenceClassification"),Zur=o(" (Longformer model)"),epr=l(),eE=a("li"),Jbe=a("strong"),opr=o("mobilebert"),rpr=o(" \u2014 "),lz=a("a"),tpr=o("TFMobileBertForSequenceClassification"),apr=o(" (MobileBERT model)"),npr=l(),oE=a("li"),Ybe=a("strong"),spr=o("mpnet"),lpr=o(" \u2014 "),iz=a("a"),ipr=o("TFMPNetForSequenceClassification"),dpr=o(" (MPNet model)"),cpr=l(),rE=a("li"),Kbe=a("strong"),mpr=o("openai-gpt"),fpr=o(" \u2014 "),dz=a("a"),gpr=o("TFOpenAIGPTForSequenceClassification"),hpr=o(" (OpenAI GPT model)"),upr=l(),tE=a("li"),Zbe=a("strong"),ppr=o("rembert"),_pr=o(" \u2014 "),cz=a("a"),bpr=o("TFRemBertForSequenceClassification"),vpr=o(" (RemBERT model)"),Fpr=l(),aE=a("li"),e2e=a("strong"),Tpr=o("roberta"),Mpr=o(" \u2014 "),mz=a("a"),Epr=o("TFRobertaForSequenceClassification"),Cpr=o(" (RoBERTa model)"),wpr=l(),nE=a("li"),o2e=a("strong"),Apr=o("roformer"),ypr=o(" \u2014 "),fz=a("a"),Lpr=o("TFRoFormerForSequenceClassification"),xpr=o(" (RoFormer model)"),kpr=l(),sE=a("li"),r2e=a("strong"),Spr=o("tapas"),Rpr=o(" \u2014 "),gz=a("a"),Bpr=o("TFTapasForSequenceClassification"),Ppr=o(" (TAPAS model)"),$pr=l(),lE=a("li"),t2e=a("strong"),Ipr=o("transfo-xl"),qpr=o(" \u2014 "),hz=a("a"),Npr=o("TFTransfoXLForSequenceClassification"),jpr=o(" (Transformer-XL model)"),Dpr=l(),iE=a("li"),a2e=a("strong"),Gpr=o("xlm"),Opr=o(" \u2014 "),uz=a("a"),Vpr=o("TFXLMForSequenceClassification"),Xpr=o(" (XLM model)"),zpr=l(),dE=a("li"),n2e=a("strong"),Qpr=o("xlm-roberta"),Wpr=o(" \u2014 "),pz=a("a"),Hpr=o("TFXLMRobertaForSequenceClassification"),Upr=o(" (XLM-RoBERTa model)"),Jpr=l(),cE=a("li"),s2e=a("strong"),Ypr=o("xlnet"),Kpr=o(" \u2014 "),_z=a("a"),Zpr=o("TFXLNetForSequenceClassification"),e_r=o(" (XLNet model)"),o_r=l(),l2e=a("p"),r_r=o("Examples:"),t_r=l(),m(t8.$$.fragment),JBe=l(),Pc=a("h2"),mE=a("a"),i2e=a("span"),m(a8.$$.fragment),a_r=l(),d2e=a("span"),n_r=o("TFAutoModelForMultipleChoice"),YBe=l(),Ar=a("div"),m(n8.$$.fragment),s_r=l(),$c=a("p"),l_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),bz=a("a"),i_r=o("from_pretrained()"),d_r=o(" class method or the "),vz=a("a"),c_r=o("from_config()"),m_r=o(` class
method.`),f_r=l(),s8=a("p"),g_r=o("This class cannot be instantiated directly using "),c2e=a("code"),h_r=o("__init__()"),u_r=o(" (throws an error)."),p_r=l(),Ft=a("div"),m(l8.$$.fragment),__r=l(),m2e=a("p"),b_r=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),v_r=l(),Ic=a("p"),F_r=o(`Note:
Loading a model from its configuration file does `),f2e=a("strong"),T_r=o("not"),M_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Fz=a("a"),E_r=o("from_pretrained()"),C_r=o(" to load the model weights."),w_r=l(),g2e=a("p"),A_r=o("Examples:"),y_r=l(),m(i8.$$.fragment),L_r=l(),To=a("div"),m(d8.$$.fragment),x_r=l(),h2e=a("p"),k_r=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),S_r=l(),Cn=a("p"),R_r=o("The model class to instantiate is selected based on the "),u2e=a("code"),B_r=o("model_type"),P_r=o(` property of the config object (either
passed as an argument or loaded from `),p2e=a("code"),$_r=o("pretrained_model_name_or_path"),I_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_2e=a("code"),q_r=o("pretrained_model_name_or_path"),N_r=o(":"),j_r=l(),se=a("ul"),fE=a("li"),b2e=a("strong"),D_r=o("albert"),G_r=o(" \u2014 "),Tz=a("a"),O_r=o("TFAlbertForMultipleChoice"),V_r=o(" (ALBERT model)"),X_r=l(),gE=a("li"),v2e=a("strong"),z_r=o("bert"),Q_r=o(" \u2014 "),Mz=a("a"),W_r=o("TFBertForMultipleChoice"),H_r=o(" (BERT model)"),U_r=l(),hE=a("li"),F2e=a("strong"),J_r=o("camembert"),Y_r=o(" \u2014 "),Ez=a("a"),K_r=o("TFCamembertForMultipleChoice"),Z_r=o(" (CamemBERT model)"),ebr=l(),uE=a("li"),T2e=a("strong"),obr=o("convbert"),rbr=o(" \u2014 "),Cz=a("a"),tbr=o("TFConvBertForMultipleChoice"),abr=o(" (ConvBERT model)"),nbr=l(),pE=a("li"),M2e=a("strong"),sbr=o("distilbert"),lbr=o(" \u2014 "),wz=a("a"),ibr=o("TFDistilBertForMultipleChoice"),dbr=o(" (DistilBERT model)"),cbr=l(),_E=a("li"),E2e=a("strong"),mbr=o("electra"),fbr=o(" \u2014 "),Az=a("a"),gbr=o("TFElectraForMultipleChoice"),hbr=o(" (ELECTRA model)"),ubr=l(),bE=a("li"),C2e=a("strong"),pbr=o("flaubert"),_br=o(" \u2014 "),yz=a("a"),bbr=o("TFFlaubertForMultipleChoice"),vbr=o(" (FlauBERT model)"),Fbr=l(),vE=a("li"),w2e=a("strong"),Tbr=o("funnel"),Mbr=o(" \u2014 "),Lz=a("a"),Ebr=o("TFFunnelForMultipleChoice"),Cbr=o(" (Funnel Transformer model)"),wbr=l(),FE=a("li"),A2e=a("strong"),Abr=o("longformer"),ybr=o(" \u2014 "),xz=a("a"),Lbr=o("TFLongformerForMultipleChoice"),xbr=o(" (Longformer model)"),kbr=l(),TE=a("li"),y2e=a("strong"),Sbr=o("mobilebert"),Rbr=o(" \u2014 "),kz=a("a"),Bbr=o("TFMobileBertForMultipleChoice"),Pbr=o(" (MobileBERT model)"),$br=l(),ME=a("li"),L2e=a("strong"),Ibr=o("mpnet"),qbr=o(" \u2014 "),Sz=a("a"),Nbr=o("TFMPNetForMultipleChoice"),jbr=o(" (MPNet model)"),Dbr=l(),EE=a("li"),x2e=a("strong"),Gbr=o("rembert"),Obr=o(" \u2014 "),Rz=a("a"),Vbr=o("TFRemBertForMultipleChoice"),Xbr=o(" (RemBERT model)"),zbr=l(),CE=a("li"),k2e=a("strong"),Qbr=o("roberta"),Wbr=o(" \u2014 "),Bz=a("a"),Hbr=o("TFRobertaForMultipleChoice"),Ubr=o(" (RoBERTa model)"),Jbr=l(),wE=a("li"),S2e=a("strong"),Ybr=o("roformer"),Kbr=o(" \u2014 "),Pz=a("a"),Zbr=o("TFRoFormerForMultipleChoice"),e2r=o(" (RoFormer model)"),o2r=l(),AE=a("li"),R2e=a("strong"),r2r=o("xlm"),t2r=o(" \u2014 "),$z=a("a"),a2r=o("TFXLMForMultipleChoice"),n2r=o(" (XLM model)"),s2r=l(),yE=a("li"),B2e=a("strong"),l2r=o("xlm-roberta"),i2r=o(" \u2014 "),Iz=a("a"),d2r=o("TFXLMRobertaForMultipleChoice"),c2r=o(" (XLM-RoBERTa model)"),m2r=l(),LE=a("li"),P2e=a("strong"),f2r=o("xlnet"),g2r=o(" \u2014 "),qz=a("a"),h2r=o("TFXLNetForMultipleChoice"),u2r=o(" (XLNet model)"),p2r=l(),$2e=a("p"),_2r=o("Examples:"),b2r=l(),m(c8.$$.fragment),KBe=l(),qc=a("h2"),xE=a("a"),I2e=a("span"),m(m8.$$.fragment),v2r=l(),q2e=a("span"),F2r=o("TFAutoModelForTableQuestionAnswering"),ZBe=l(),yr=a("div"),m(f8.$$.fragment),T2r=l(),Nc=a("p"),M2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Nz=a("a"),E2r=o("from_pretrained()"),C2r=o(" class method or the "),jz=a("a"),w2r=o("from_config()"),A2r=o(` class
method.`),y2r=l(),g8=a("p"),L2r=o("This class cannot be instantiated directly using "),N2e=a("code"),x2r=o("__init__()"),k2r=o(" (throws an error)."),S2r=l(),Tt=a("div"),m(h8.$$.fragment),R2r=l(),j2e=a("p"),B2r=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),P2r=l(),jc=a("p"),$2r=o(`Note:
Loading a model from its configuration file does `),D2e=a("strong"),I2r=o("not"),q2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Dz=a("a"),N2r=o("from_pretrained()"),j2r=o(" to load the model weights."),D2r=l(),G2e=a("p"),G2r=o("Examples:"),O2r=l(),m(u8.$$.fragment),V2r=l(),Mo=a("div"),m(p8.$$.fragment),X2r=l(),O2e=a("p"),z2r=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Q2r=l(),wn=a("p"),W2r=o("The model class to instantiate is selected based on the "),V2e=a("code"),H2r=o("model_type"),U2r=o(` property of the config object (either
passed as an argument or loaded from `),X2e=a("code"),J2r=o("pretrained_model_name_or_path"),Y2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z2e=a("code"),K2r=o("pretrained_model_name_or_path"),Z2r=o(":"),evr=l(),Q2e=a("ul"),kE=a("li"),W2e=a("strong"),ovr=o("tapas"),rvr=o(" \u2014 "),Gz=a("a"),tvr=o("TFTapasForQuestionAnswering"),avr=o(" (TAPAS model)"),nvr=l(),H2e=a("p"),svr=o("Examples:"),lvr=l(),m(_8.$$.fragment),ePe=l(),Dc=a("h2"),SE=a("a"),U2e=a("span"),m(b8.$$.fragment),ivr=l(),J2e=a("span"),dvr=o("TFAutoModelForTokenClassification"),oPe=l(),Lr=a("div"),m(v8.$$.fragment),cvr=l(),Gc=a("p"),mvr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Oz=a("a"),fvr=o("from_pretrained()"),gvr=o(" class method or the "),Vz=a("a"),hvr=o("from_config()"),uvr=o(` class
method.`),pvr=l(),F8=a("p"),_vr=o("This class cannot be instantiated directly using "),Y2e=a("code"),bvr=o("__init__()"),vvr=o(" (throws an error)."),Fvr=l(),Mt=a("div"),m(T8.$$.fragment),Tvr=l(),K2e=a("p"),Mvr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Evr=l(),Oc=a("p"),Cvr=o(`Note:
Loading a model from its configuration file does `),Z2e=a("strong"),wvr=o("not"),Avr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Xz=a("a"),yvr=o("from_pretrained()"),Lvr=o(" to load the model weights."),xvr=l(),eve=a("p"),kvr=o("Examples:"),Svr=l(),m(M8.$$.fragment),Rvr=l(),Eo=a("div"),m(E8.$$.fragment),Bvr=l(),ove=a("p"),Pvr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),$vr=l(),An=a("p"),Ivr=o("The model class to instantiate is selected based on the "),rve=a("code"),qvr=o("model_type"),Nvr=o(` property of the config object (either
passed as an argument or loaded from `),tve=a("code"),jvr=o("pretrained_model_name_or_path"),Dvr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ave=a("code"),Gvr=o("pretrained_model_name_or_path"),Ovr=o(":"),Vvr=l(),Y=a("ul"),RE=a("li"),nve=a("strong"),Xvr=o("albert"),zvr=o(" \u2014 "),zz=a("a"),Qvr=o("TFAlbertForTokenClassification"),Wvr=o(" (ALBERT model)"),Hvr=l(),BE=a("li"),sve=a("strong"),Uvr=o("bert"),Jvr=o(" \u2014 "),Qz=a("a"),Yvr=o("TFBertForTokenClassification"),Kvr=o(" (BERT model)"),Zvr=l(),PE=a("li"),lve=a("strong"),eFr=o("camembert"),oFr=o(" \u2014 "),Wz=a("a"),rFr=o("TFCamembertForTokenClassification"),tFr=o(" (CamemBERT model)"),aFr=l(),$E=a("li"),ive=a("strong"),nFr=o("convbert"),sFr=o(" \u2014 "),Hz=a("a"),lFr=o("TFConvBertForTokenClassification"),iFr=o(" (ConvBERT model)"),dFr=l(),IE=a("li"),dve=a("strong"),cFr=o("deberta"),mFr=o(" \u2014 "),Uz=a("a"),fFr=o("TFDebertaForTokenClassification"),gFr=o(" (DeBERTa model)"),hFr=l(),qE=a("li"),cve=a("strong"),uFr=o("deberta-v2"),pFr=o(" \u2014 "),Jz=a("a"),_Fr=o("TFDebertaV2ForTokenClassification"),bFr=o(" (DeBERTa-v2 model)"),vFr=l(),NE=a("li"),mve=a("strong"),FFr=o("distilbert"),TFr=o(" \u2014 "),Yz=a("a"),MFr=o("TFDistilBertForTokenClassification"),EFr=o(" (DistilBERT model)"),CFr=l(),jE=a("li"),fve=a("strong"),wFr=o("electra"),AFr=o(" \u2014 "),Kz=a("a"),yFr=o("TFElectraForTokenClassification"),LFr=o(" (ELECTRA model)"),xFr=l(),DE=a("li"),gve=a("strong"),kFr=o("flaubert"),SFr=o(" \u2014 "),Zz=a("a"),RFr=o("TFFlaubertForTokenClassification"),BFr=o(" (FlauBERT model)"),PFr=l(),GE=a("li"),hve=a("strong"),$Fr=o("funnel"),IFr=o(" \u2014 "),eQ=a("a"),qFr=o("TFFunnelForTokenClassification"),NFr=o(" (Funnel Transformer model)"),jFr=l(),OE=a("li"),uve=a("strong"),DFr=o("layoutlm"),GFr=o(" \u2014 "),oQ=a("a"),OFr=o("TFLayoutLMForTokenClassification"),VFr=o(" (LayoutLM model)"),XFr=l(),VE=a("li"),pve=a("strong"),zFr=o("longformer"),QFr=o(" \u2014 "),rQ=a("a"),WFr=o("TFLongformerForTokenClassification"),HFr=o(" (Longformer model)"),UFr=l(),XE=a("li"),_ve=a("strong"),JFr=o("mobilebert"),YFr=o(" \u2014 "),tQ=a("a"),KFr=o("TFMobileBertForTokenClassification"),ZFr=o(" (MobileBERT model)"),e1r=l(),zE=a("li"),bve=a("strong"),o1r=o("mpnet"),r1r=o(" \u2014 "),aQ=a("a"),t1r=o("TFMPNetForTokenClassification"),a1r=o(" (MPNet model)"),n1r=l(),QE=a("li"),vve=a("strong"),s1r=o("rembert"),l1r=o(" \u2014 "),nQ=a("a"),i1r=o("TFRemBertForTokenClassification"),d1r=o(" (RemBERT model)"),c1r=l(),WE=a("li"),Fve=a("strong"),m1r=o("roberta"),f1r=o(" \u2014 "),sQ=a("a"),g1r=o("TFRobertaForTokenClassification"),h1r=o(" (RoBERTa model)"),u1r=l(),HE=a("li"),Tve=a("strong"),p1r=o("roformer"),_1r=o(" \u2014 "),lQ=a("a"),b1r=o("TFRoFormerForTokenClassification"),v1r=o(" (RoFormer model)"),F1r=l(),UE=a("li"),Mve=a("strong"),T1r=o("xlm"),M1r=o(" \u2014 "),iQ=a("a"),E1r=o("TFXLMForTokenClassification"),C1r=o(" (XLM model)"),w1r=l(),JE=a("li"),Eve=a("strong"),A1r=o("xlm-roberta"),y1r=o(" \u2014 "),dQ=a("a"),L1r=o("TFXLMRobertaForTokenClassification"),x1r=o(" (XLM-RoBERTa model)"),k1r=l(),YE=a("li"),Cve=a("strong"),S1r=o("xlnet"),R1r=o(" \u2014 "),cQ=a("a"),B1r=o("TFXLNetForTokenClassification"),P1r=o(" (XLNet model)"),$1r=l(),wve=a("p"),I1r=o("Examples:"),q1r=l(),m(C8.$$.fragment),rPe=l(),Vc=a("h2"),KE=a("a"),Ave=a("span"),m(w8.$$.fragment),N1r=l(),yve=a("span"),j1r=o("TFAutoModelForQuestionAnswering"),tPe=l(),xr=a("div"),m(A8.$$.fragment),D1r=l(),Xc=a("p"),G1r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),mQ=a("a"),O1r=o("from_pretrained()"),V1r=o(" class method or the "),fQ=a("a"),X1r=o("from_config()"),z1r=o(` class
method.`),Q1r=l(),y8=a("p"),W1r=o("This class cannot be instantiated directly using "),Lve=a("code"),H1r=o("__init__()"),U1r=o(" (throws an error)."),J1r=l(),Et=a("div"),m(L8.$$.fragment),Y1r=l(),xve=a("p"),K1r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Z1r=l(),zc=a("p"),eTr=o(`Note:
Loading a model from its configuration file does `),kve=a("strong"),oTr=o("not"),rTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gQ=a("a"),tTr=o("from_pretrained()"),aTr=o(" to load the model weights."),nTr=l(),Sve=a("p"),sTr=o("Examples:"),lTr=l(),m(x8.$$.fragment),iTr=l(),Co=a("div"),m(k8.$$.fragment),dTr=l(),Rve=a("p"),cTr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),mTr=l(),yn=a("p"),fTr=o("The model class to instantiate is selected based on the "),Bve=a("code"),gTr=o("model_type"),hTr=o(` property of the config object (either
passed as an argument or loaded from `),Pve=a("code"),uTr=o("pretrained_model_name_or_path"),pTr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$ve=a("code"),_Tr=o("pretrained_model_name_or_path"),bTr=o(":"),vTr=l(),K=a("ul"),ZE=a("li"),Ive=a("strong"),FTr=o("albert"),TTr=o(" \u2014 "),hQ=a("a"),MTr=o("TFAlbertForQuestionAnswering"),ETr=o(" (ALBERT model)"),CTr=l(),e5=a("li"),qve=a("strong"),wTr=o("bert"),ATr=o(" \u2014 "),uQ=a("a"),yTr=o("TFBertForQuestionAnswering"),LTr=o(" (BERT model)"),xTr=l(),o5=a("li"),Nve=a("strong"),kTr=o("camembert"),STr=o(" \u2014 "),pQ=a("a"),RTr=o("TFCamembertForQuestionAnswering"),BTr=o(" (CamemBERT model)"),PTr=l(),r5=a("li"),jve=a("strong"),$Tr=o("convbert"),ITr=o(" \u2014 "),_Q=a("a"),qTr=o("TFConvBertForQuestionAnswering"),NTr=o(" (ConvBERT model)"),jTr=l(),t5=a("li"),Dve=a("strong"),DTr=o("deberta"),GTr=o(" \u2014 "),bQ=a("a"),OTr=o("TFDebertaForQuestionAnswering"),VTr=o(" (DeBERTa model)"),XTr=l(),a5=a("li"),Gve=a("strong"),zTr=o("deberta-v2"),QTr=o(" \u2014 "),vQ=a("a"),WTr=o("TFDebertaV2ForQuestionAnswering"),HTr=o(" (DeBERTa-v2 model)"),UTr=l(),n5=a("li"),Ove=a("strong"),JTr=o("distilbert"),YTr=o(" \u2014 "),FQ=a("a"),KTr=o("TFDistilBertForQuestionAnswering"),ZTr=o(" (DistilBERT model)"),eMr=l(),s5=a("li"),Vve=a("strong"),oMr=o("electra"),rMr=o(" \u2014 "),TQ=a("a"),tMr=o("TFElectraForQuestionAnswering"),aMr=o(" (ELECTRA model)"),nMr=l(),l5=a("li"),Xve=a("strong"),sMr=o("flaubert"),lMr=o(" \u2014 "),MQ=a("a"),iMr=o("TFFlaubertForQuestionAnsweringSimple"),dMr=o(" (FlauBERT model)"),cMr=l(),i5=a("li"),zve=a("strong"),mMr=o("funnel"),fMr=o(" \u2014 "),EQ=a("a"),gMr=o("TFFunnelForQuestionAnswering"),hMr=o(" (Funnel Transformer model)"),uMr=l(),d5=a("li"),Qve=a("strong"),pMr=o("gptj"),_Mr=o(" \u2014 "),CQ=a("a"),bMr=o("TFGPTJForQuestionAnswering"),vMr=o(" (GPT-J model)"),FMr=l(),c5=a("li"),Wve=a("strong"),TMr=o("longformer"),MMr=o(" \u2014 "),wQ=a("a"),EMr=o("TFLongformerForQuestionAnswering"),CMr=o(" (Longformer model)"),wMr=l(),m5=a("li"),Hve=a("strong"),AMr=o("mobilebert"),yMr=o(" \u2014 "),AQ=a("a"),LMr=o("TFMobileBertForQuestionAnswering"),xMr=o(" (MobileBERT model)"),kMr=l(),f5=a("li"),Uve=a("strong"),SMr=o("mpnet"),RMr=o(" \u2014 "),yQ=a("a"),BMr=o("TFMPNetForQuestionAnswering"),PMr=o(" (MPNet model)"),$Mr=l(),g5=a("li"),Jve=a("strong"),IMr=o("rembert"),qMr=o(" \u2014 "),LQ=a("a"),NMr=o("TFRemBertForQuestionAnswering"),jMr=o(" (RemBERT model)"),DMr=l(),h5=a("li"),Yve=a("strong"),GMr=o("roberta"),OMr=o(" \u2014 "),xQ=a("a"),VMr=o("TFRobertaForQuestionAnswering"),XMr=o(" (RoBERTa model)"),zMr=l(),u5=a("li"),Kve=a("strong"),QMr=o("roformer"),WMr=o(" \u2014 "),kQ=a("a"),HMr=o("TFRoFormerForQuestionAnswering"),UMr=o(" (RoFormer model)"),JMr=l(),p5=a("li"),Zve=a("strong"),YMr=o("xlm"),KMr=o(" \u2014 "),SQ=a("a"),ZMr=o("TFXLMForQuestionAnsweringSimple"),e4r=o(" (XLM model)"),o4r=l(),_5=a("li"),eFe=a("strong"),r4r=o("xlm-roberta"),t4r=o(" \u2014 "),RQ=a("a"),a4r=o("TFXLMRobertaForQuestionAnswering"),n4r=o(" (XLM-RoBERTa model)"),s4r=l(),b5=a("li"),oFe=a("strong"),l4r=o("xlnet"),i4r=o(" \u2014 "),BQ=a("a"),d4r=o("TFXLNetForQuestionAnsweringSimple"),c4r=o(" (XLNet model)"),m4r=l(),rFe=a("p"),f4r=o("Examples:"),g4r=l(),m(S8.$$.fragment),aPe=l(),Qc=a("h2"),v5=a("a"),tFe=a("span"),m(R8.$$.fragment),h4r=l(),aFe=a("span"),u4r=o("TFAutoModelForVision2Seq"),nPe=l(),kr=a("div"),m(B8.$$.fragment),p4r=l(),Wc=a("p"),_4r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),PQ=a("a"),b4r=o("from_pretrained()"),v4r=o(" class method or the "),$Q=a("a"),F4r=o("from_config()"),T4r=o(` class
method.`),M4r=l(),P8=a("p"),E4r=o("This class cannot be instantiated directly using "),nFe=a("code"),C4r=o("__init__()"),w4r=o(" (throws an error)."),A4r=l(),Ct=a("div"),m($8.$$.fragment),y4r=l(),sFe=a("p"),L4r=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),x4r=l(),Hc=a("p"),k4r=o(`Note:
Loading a model from its configuration file does `),lFe=a("strong"),S4r=o("not"),R4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IQ=a("a"),B4r=o("from_pretrained()"),P4r=o(" to load the model weights."),$4r=l(),iFe=a("p"),I4r=o("Examples:"),q4r=l(),m(I8.$$.fragment),N4r=l(),wo=a("div"),m(q8.$$.fragment),j4r=l(),dFe=a("p"),D4r=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),G4r=l(),Ln=a("p"),O4r=o("The model class to instantiate is selected based on the "),cFe=a("code"),V4r=o("model_type"),X4r=o(` property of the config object (either
passed as an argument or loaded from `),mFe=a("code"),z4r=o("pretrained_model_name_or_path"),Q4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fFe=a("code"),W4r=o("pretrained_model_name_or_path"),H4r=o(":"),U4r=l(),gFe=a("ul"),F5=a("li"),hFe=a("strong"),J4r=o("vision-encoder-decoder"),Y4r=o(" \u2014 "),qQ=a("a"),K4r=o("TFVisionEncoderDecoderModel"),Z4r=o(" (Vision Encoder decoder model)"),eEr=l(),uFe=a("p"),oEr=o("Examples:"),rEr=l(),m(N8.$$.fragment),sPe=l(),Uc=a("h2"),T5=a("a"),pFe=a("span"),m(j8.$$.fragment),tEr=l(),_Fe=a("span"),aEr=o("TFAutoModelForSpeechSeq2Seq"),lPe=l(),Sr=a("div"),m(D8.$$.fragment),nEr=l(),Jc=a("p"),sEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),NQ=a("a"),lEr=o("from_pretrained()"),iEr=o(" class method or the "),jQ=a("a"),dEr=o("from_config()"),cEr=o(` class
method.`),mEr=l(),G8=a("p"),fEr=o("This class cannot be instantiated directly using "),bFe=a("code"),gEr=o("__init__()"),hEr=o(" (throws an error)."),uEr=l(),wt=a("div"),m(O8.$$.fragment),pEr=l(),vFe=a("p"),_Er=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),bEr=l(),Yc=a("p"),vEr=o(`Note:
Loading a model from its configuration file does `),FFe=a("strong"),FEr=o("not"),TEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DQ=a("a"),MEr=o("from_pretrained()"),EEr=o(" to load the model weights."),CEr=l(),TFe=a("p"),wEr=o("Examples:"),AEr=l(),m(V8.$$.fragment),yEr=l(),Ao=a("div"),m(X8.$$.fragment),LEr=l(),MFe=a("p"),xEr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),kEr=l(),xn=a("p"),SEr=o("The model class to instantiate is selected based on the "),EFe=a("code"),REr=o("model_type"),BEr=o(` property of the config object (either
passed as an argument or loaded from `),CFe=a("code"),PEr=o("pretrained_model_name_or_path"),$Er=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wFe=a("code"),IEr=o("pretrained_model_name_or_path"),qEr=o(":"),NEr=l(),AFe=a("ul"),M5=a("li"),yFe=a("strong"),jEr=o("speech_to_text"),DEr=o(" \u2014 "),GQ=a("a"),GEr=o("TFSpeech2TextForConditionalGeneration"),OEr=o(" (Speech2Text model)"),VEr=l(),LFe=a("p"),XEr=o("Examples:"),zEr=l(),m(z8.$$.fragment),iPe=l(),Kc=a("h2"),E5=a("a"),xFe=a("span"),m(Q8.$$.fragment),QEr=l(),kFe=a("span"),WEr=o("FlaxAutoModel"),dPe=l(),Rr=a("div"),m(W8.$$.fragment),HEr=l(),Zc=a("p"),UEr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),OQ=a("a"),JEr=o("from_pretrained()"),YEr=o(" class method or the "),VQ=a("a"),KEr=o("from_config()"),ZEr=o(` class
method.`),e5r=l(),H8=a("p"),o5r=o("This class cannot be instantiated directly using "),SFe=a("code"),r5r=o("__init__()"),t5r=o(" (throws an error)."),a5r=l(),At=a("div"),m(U8.$$.fragment),n5r=l(),RFe=a("p"),s5r=o("Instantiates one of the base model classes of the library from a configuration."),l5r=l(),em=a("p"),i5r=o(`Note:
Loading a model from its configuration file does `),BFe=a("strong"),d5r=o("not"),c5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XQ=a("a"),m5r=o("from_pretrained()"),f5r=o(" to load the model weights."),g5r=l(),PFe=a("p"),h5r=o("Examples:"),u5r=l(),m(J8.$$.fragment),p5r=l(),yo=a("div"),m(Y8.$$.fragment),_5r=l(),$Fe=a("p"),b5r=o("Instantiate one of the base model classes of the library from a pretrained model."),v5r=l(),kn=a("p"),F5r=o("The model class to instantiate is selected based on the "),IFe=a("code"),T5r=o("model_type"),M5r=o(` property of the config object (either
passed as an argument or loaded from `),qFe=a("code"),E5r=o("pretrained_model_name_or_path"),C5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),NFe=a("code"),w5r=o("pretrained_model_name_or_path"),A5r=o(":"),y5r=l(),z=a("ul"),C5=a("li"),jFe=a("strong"),L5r=o("albert"),x5r=o(" \u2014 "),zQ=a("a"),k5r=o("FlaxAlbertModel"),S5r=o(" (ALBERT model)"),R5r=l(),w5=a("li"),DFe=a("strong"),B5r=o("bart"),P5r=o(" \u2014 "),QQ=a("a"),$5r=o("FlaxBartModel"),I5r=o(" (BART model)"),q5r=l(),A5=a("li"),GFe=a("strong"),N5r=o("beit"),j5r=o(" \u2014 "),WQ=a("a"),D5r=o("FlaxBeitModel"),G5r=o(" (BEiT model)"),O5r=l(),y5=a("li"),OFe=a("strong"),V5r=o("bert"),X5r=o(" \u2014 "),HQ=a("a"),z5r=o("FlaxBertModel"),Q5r=o(" (BERT model)"),W5r=l(),L5=a("li"),VFe=a("strong"),H5r=o("big_bird"),U5r=o(" \u2014 "),UQ=a("a"),J5r=o("FlaxBigBirdModel"),Y5r=o(" (BigBird model)"),K5r=l(),x5=a("li"),XFe=a("strong"),Z5r=o("blenderbot"),e3r=o(" \u2014 "),JQ=a("a"),o3r=o("FlaxBlenderbotModel"),r3r=o(" (Blenderbot model)"),t3r=l(),k5=a("li"),zFe=a("strong"),a3r=o("blenderbot-small"),n3r=o(" \u2014 "),YQ=a("a"),s3r=o("FlaxBlenderbotSmallModel"),l3r=o(" (BlenderbotSmall model)"),i3r=l(),S5=a("li"),QFe=a("strong"),d3r=o("clip"),c3r=o(" \u2014 "),KQ=a("a"),m3r=o("FlaxCLIPModel"),f3r=o(" (CLIP model)"),g3r=l(),R5=a("li"),WFe=a("strong"),h3r=o("distilbert"),u3r=o(" \u2014 "),ZQ=a("a"),p3r=o("FlaxDistilBertModel"),_3r=o(" (DistilBERT model)"),b3r=l(),B5=a("li"),HFe=a("strong"),v3r=o("electra"),F3r=o(" \u2014 "),eW=a("a"),T3r=o("FlaxElectraModel"),M3r=o(" (ELECTRA model)"),E3r=l(),P5=a("li"),UFe=a("strong"),C3r=o("gpt2"),w3r=o(" \u2014 "),oW=a("a"),A3r=o("FlaxGPT2Model"),y3r=o(" (OpenAI GPT-2 model)"),L3r=l(),$5=a("li"),JFe=a("strong"),x3r=o("gpt_neo"),k3r=o(" \u2014 "),rW=a("a"),S3r=o("FlaxGPTNeoModel"),R3r=o(" (GPT Neo model)"),B3r=l(),I5=a("li"),YFe=a("strong"),P3r=o("gptj"),$3r=o(" \u2014 "),tW=a("a"),I3r=o("FlaxGPTJModel"),q3r=o(" (GPT-J model)"),N3r=l(),q5=a("li"),KFe=a("strong"),j3r=o("marian"),D3r=o(" \u2014 "),aW=a("a"),G3r=o("FlaxMarianModel"),O3r=o(" (Marian model)"),V3r=l(),N5=a("li"),ZFe=a("strong"),X3r=o("mbart"),z3r=o(" \u2014 "),nW=a("a"),Q3r=o("FlaxMBartModel"),W3r=o(" (mBART model)"),H3r=l(),j5=a("li"),e1e=a("strong"),U3r=o("mt5"),J3r=o(" \u2014 "),sW=a("a"),Y3r=o("FlaxMT5Model"),K3r=o(" (mT5 model)"),Z3r=l(),D5=a("li"),o1e=a("strong"),eCr=o("pegasus"),oCr=o(" \u2014 "),lW=a("a"),rCr=o("FlaxPegasusModel"),tCr=o(" (Pegasus model)"),aCr=l(),G5=a("li"),r1e=a("strong"),nCr=o("roberta"),sCr=o(" \u2014 "),iW=a("a"),lCr=o("FlaxRobertaModel"),iCr=o(" (RoBERTa model)"),dCr=l(),O5=a("li"),t1e=a("strong"),cCr=o("roformer"),mCr=o(" \u2014 "),dW=a("a"),fCr=o("FlaxRoFormerModel"),gCr=o(" (RoFormer model)"),hCr=l(),V5=a("li"),a1e=a("strong"),uCr=o("t5"),pCr=o(" \u2014 "),cW=a("a"),_Cr=o("FlaxT5Model"),bCr=o(" (T5 model)"),vCr=l(),X5=a("li"),n1e=a("strong"),FCr=o("vision-text-dual-encoder"),TCr=o(" \u2014 "),mW=a("a"),MCr=o("FlaxVisionTextDualEncoderModel"),ECr=o(" (VisionTextDualEncoder model)"),CCr=l(),z5=a("li"),s1e=a("strong"),wCr=o("vit"),ACr=o(" \u2014 "),fW=a("a"),yCr=o("FlaxViTModel"),LCr=o(" (ViT model)"),xCr=l(),Q5=a("li"),l1e=a("strong"),kCr=o("wav2vec2"),SCr=o(" \u2014 "),gW=a("a"),RCr=o("FlaxWav2Vec2Model"),BCr=o(" (Wav2Vec2 model)"),PCr=l(),W5=a("li"),i1e=a("strong"),$Cr=o("xglm"),ICr=o(" \u2014 "),hW=a("a"),qCr=o("FlaxXGLMModel"),NCr=o(" (XGLM model)"),jCr=l(),H5=a("li"),d1e=a("strong"),DCr=o("xlm-roberta"),GCr=o(" \u2014 "),uW=a("a"),OCr=o("FlaxXLMRobertaModel"),VCr=o(" (XLM-RoBERTa model)"),XCr=l(),c1e=a("p"),zCr=o("Examples:"),QCr=l(),m(K8.$$.fragment),cPe=l(),om=a("h2"),U5=a("a"),m1e=a("span"),m(Z8.$$.fragment),WCr=l(),f1e=a("span"),HCr=o("FlaxAutoModelForCausalLM"),mPe=l(),Br=a("div"),m(eL.$$.fragment),UCr=l(),rm=a("p"),JCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),pW=a("a"),YCr=o("from_pretrained()"),KCr=o(" class method or the "),_W=a("a"),ZCr=o("from_config()"),ewr=o(` class
method.`),owr=l(),oL=a("p"),rwr=o("This class cannot be instantiated directly using "),g1e=a("code"),twr=o("__init__()"),awr=o(" (throws an error)."),nwr=l(),yt=a("div"),m(rL.$$.fragment),swr=l(),h1e=a("p"),lwr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),iwr=l(),tm=a("p"),dwr=o(`Note:
Loading a model from its configuration file does `),u1e=a("strong"),cwr=o("not"),mwr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bW=a("a"),fwr=o("from_pretrained()"),gwr=o(" to load the model weights."),hwr=l(),p1e=a("p"),uwr=o("Examples:"),pwr=l(),m(tL.$$.fragment),_wr=l(),Lo=a("div"),m(aL.$$.fragment),bwr=l(),_1e=a("p"),vwr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Fwr=l(),Sn=a("p"),Twr=o("The model class to instantiate is selected based on the "),b1e=a("code"),Mwr=o("model_type"),Ewr=o(` property of the config object (either
passed as an argument or loaded from `),v1e=a("code"),Cwr=o("pretrained_model_name_or_path"),wwr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F1e=a("code"),Awr=o("pretrained_model_name_or_path"),ywr=o(":"),Lwr=l(),ca=a("ul"),J5=a("li"),T1e=a("strong"),xwr=o("bart"),kwr=o(" \u2014 "),vW=a("a"),Swr=o("FlaxBartForCausalLM"),Rwr=o(" (BART model)"),Bwr=l(),Y5=a("li"),M1e=a("strong"),Pwr=o("gpt2"),$wr=o(" \u2014 "),FW=a("a"),Iwr=o("FlaxGPT2LMHeadModel"),qwr=o(" (OpenAI GPT-2 model)"),Nwr=l(),K5=a("li"),E1e=a("strong"),jwr=o("gpt_neo"),Dwr=o(" \u2014 "),TW=a("a"),Gwr=o("FlaxGPTNeoForCausalLM"),Owr=o(" (GPT Neo model)"),Vwr=l(),Z5=a("li"),C1e=a("strong"),Xwr=o("gptj"),zwr=o(" \u2014 "),MW=a("a"),Qwr=o("FlaxGPTJForCausalLM"),Wwr=o(" (GPT-J model)"),Hwr=l(),e3=a("li"),w1e=a("strong"),Uwr=o("xglm"),Jwr=o(" \u2014 "),EW=a("a"),Ywr=o("FlaxXGLMForCausalLM"),Kwr=o(" (XGLM model)"),Zwr=l(),A1e=a("p"),e6r=o("Examples:"),o6r=l(),m(nL.$$.fragment),fPe=l(),am=a("h2"),o3=a("a"),y1e=a("span"),m(sL.$$.fragment),r6r=l(),L1e=a("span"),t6r=o("FlaxAutoModelForPreTraining"),gPe=l(),Pr=a("div"),m(lL.$$.fragment),a6r=l(),nm=a("p"),n6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),CW=a("a"),s6r=o("from_pretrained()"),l6r=o(" class method or the "),wW=a("a"),i6r=o("from_config()"),d6r=o(` class
method.`),c6r=l(),iL=a("p"),m6r=o("This class cannot be instantiated directly using "),x1e=a("code"),f6r=o("__init__()"),g6r=o(" (throws an error)."),h6r=l(),Lt=a("div"),m(dL.$$.fragment),u6r=l(),k1e=a("p"),p6r=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),_6r=l(),sm=a("p"),b6r=o(`Note:
Loading a model from its configuration file does `),S1e=a("strong"),v6r=o("not"),F6r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),AW=a("a"),T6r=o("from_pretrained()"),M6r=o(" to load the model weights."),E6r=l(),R1e=a("p"),C6r=o("Examples:"),w6r=l(),m(cL.$$.fragment),A6r=l(),xo=a("div"),m(mL.$$.fragment),y6r=l(),B1e=a("p"),L6r=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),x6r=l(),Rn=a("p"),k6r=o("The model class to instantiate is selected based on the "),P1e=a("code"),S6r=o("model_type"),R6r=o(` property of the config object (either
passed as an argument or loaded from `),$1e=a("code"),B6r=o("pretrained_model_name_or_path"),P6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I1e=a("code"),$6r=o("pretrained_model_name_or_path"),I6r=o(":"),q6r=l(),fe=a("ul"),r3=a("li"),q1e=a("strong"),N6r=o("albert"),j6r=o(" \u2014 "),yW=a("a"),D6r=o("FlaxAlbertForPreTraining"),G6r=o(" (ALBERT model)"),O6r=l(),t3=a("li"),N1e=a("strong"),V6r=o("bart"),X6r=o(" \u2014 "),LW=a("a"),z6r=o("FlaxBartForConditionalGeneration"),Q6r=o(" (BART model)"),W6r=l(),a3=a("li"),j1e=a("strong"),H6r=o("bert"),U6r=o(" \u2014 "),xW=a("a"),J6r=o("FlaxBertForPreTraining"),Y6r=o(" (BERT model)"),K6r=l(),n3=a("li"),D1e=a("strong"),Z6r=o("big_bird"),eAr=o(" \u2014 "),kW=a("a"),oAr=o("FlaxBigBirdForPreTraining"),rAr=o(" (BigBird model)"),tAr=l(),s3=a("li"),G1e=a("strong"),aAr=o("electra"),nAr=o(" \u2014 "),SW=a("a"),sAr=o("FlaxElectraForPreTraining"),lAr=o(" (ELECTRA model)"),iAr=l(),l3=a("li"),O1e=a("strong"),dAr=o("mbart"),cAr=o(" \u2014 "),RW=a("a"),mAr=o("FlaxMBartForConditionalGeneration"),fAr=o(" (mBART model)"),gAr=l(),i3=a("li"),V1e=a("strong"),hAr=o("mt5"),uAr=o(" \u2014 "),BW=a("a"),pAr=o("FlaxMT5ForConditionalGeneration"),_Ar=o(" (mT5 model)"),bAr=l(),d3=a("li"),X1e=a("strong"),vAr=o("roberta"),FAr=o(" \u2014 "),PW=a("a"),TAr=o("FlaxRobertaForMaskedLM"),MAr=o(" (RoBERTa model)"),EAr=l(),c3=a("li"),z1e=a("strong"),CAr=o("roformer"),wAr=o(" \u2014 "),$W=a("a"),AAr=o("FlaxRoFormerForMaskedLM"),yAr=o(" (RoFormer model)"),LAr=l(),m3=a("li"),Q1e=a("strong"),xAr=o("t5"),kAr=o(" \u2014 "),IW=a("a"),SAr=o("FlaxT5ForConditionalGeneration"),RAr=o(" (T5 model)"),BAr=l(),f3=a("li"),W1e=a("strong"),PAr=o("wav2vec2"),$Ar=o(" \u2014 "),qW=a("a"),IAr=o("FlaxWav2Vec2ForPreTraining"),qAr=o(" (Wav2Vec2 model)"),NAr=l(),g3=a("li"),H1e=a("strong"),jAr=o("xlm-roberta"),DAr=o(" \u2014 "),NW=a("a"),GAr=o("FlaxXLMRobertaForMaskedLM"),OAr=o(" (XLM-RoBERTa model)"),VAr=l(),U1e=a("p"),XAr=o("Examples:"),zAr=l(),m(fL.$$.fragment),hPe=l(),lm=a("h2"),h3=a("a"),J1e=a("span"),m(gL.$$.fragment),QAr=l(),Y1e=a("span"),WAr=o("FlaxAutoModelForMaskedLM"),uPe=l(),$r=a("div"),m(hL.$$.fragment),HAr=l(),im=a("p"),UAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),jW=a("a"),JAr=o("from_pretrained()"),YAr=o(" class method or the "),DW=a("a"),KAr=o("from_config()"),ZAr=o(` class
method.`),e0r=l(),uL=a("p"),o0r=o("This class cannot be instantiated directly using "),K1e=a("code"),r0r=o("__init__()"),t0r=o(" (throws an error)."),a0r=l(),xt=a("div"),m(pL.$$.fragment),n0r=l(),Z1e=a("p"),s0r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),l0r=l(),dm=a("p"),i0r=o(`Note:
Loading a model from its configuration file does `),eTe=a("strong"),d0r=o("not"),c0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GW=a("a"),m0r=o("from_pretrained()"),f0r=o(" to load the model weights."),g0r=l(),oTe=a("p"),h0r=o("Examples:"),u0r=l(),m(_L.$$.fragment),p0r=l(),ko=a("div"),m(bL.$$.fragment),_0r=l(),rTe=a("p"),b0r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),v0r=l(),Bn=a("p"),F0r=o("The model class to instantiate is selected based on the "),tTe=a("code"),T0r=o("model_type"),M0r=o(` property of the config object (either
passed as an argument or loaded from `),aTe=a("code"),E0r=o("pretrained_model_name_or_path"),C0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nTe=a("code"),w0r=o("pretrained_model_name_or_path"),A0r=o(":"),y0r=l(),ve=a("ul"),u3=a("li"),sTe=a("strong"),L0r=o("albert"),x0r=o(" \u2014 "),OW=a("a"),k0r=o("FlaxAlbertForMaskedLM"),S0r=o(" (ALBERT model)"),R0r=l(),p3=a("li"),lTe=a("strong"),B0r=o("bart"),P0r=o(" \u2014 "),VW=a("a"),$0r=o("FlaxBartForConditionalGeneration"),I0r=o(" (BART model)"),q0r=l(),_3=a("li"),iTe=a("strong"),N0r=o("bert"),j0r=o(" \u2014 "),XW=a("a"),D0r=o("FlaxBertForMaskedLM"),G0r=o(" (BERT model)"),O0r=l(),b3=a("li"),dTe=a("strong"),V0r=o("big_bird"),X0r=o(" \u2014 "),zW=a("a"),z0r=o("FlaxBigBirdForMaskedLM"),Q0r=o(" (BigBird model)"),W0r=l(),v3=a("li"),cTe=a("strong"),H0r=o("distilbert"),U0r=o(" \u2014 "),QW=a("a"),J0r=o("FlaxDistilBertForMaskedLM"),Y0r=o(" (DistilBERT model)"),K0r=l(),F3=a("li"),mTe=a("strong"),Z0r=o("electra"),eyr=o(" \u2014 "),WW=a("a"),oyr=o("FlaxElectraForMaskedLM"),ryr=o(" (ELECTRA model)"),tyr=l(),T3=a("li"),fTe=a("strong"),ayr=o("mbart"),nyr=o(" \u2014 "),HW=a("a"),syr=o("FlaxMBartForConditionalGeneration"),lyr=o(" (mBART model)"),iyr=l(),M3=a("li"),gTe=a("strong"),dyr=o("roberta"),cyr=o(" \u2014 "),UW=a("a"),myr=o("FlaxRobertaForMaskedLM"),fyr=o(" (RoBERTa model)"),gyr=l(),E3=a("li"),hTe=a("strong"),hyr=o("roformer"),uyr=o(" \u2014 "),JW=a("a"),pyr=o("FlaxRoFormerForMaskedLM"),_yr=o(" (RoFormer model)"),byr=l(),C3=a("li"),uTe=a("strong"),vyr=o("xlm-roberta"),Fyr=o(" \u2014 "),YW=a("a"),Tyr=o("FlaxXLMRobertaForMaskedLM"),Myr=o(" (XLM-RoBERTa model)"),Eyr=l(),pTe=a("p"),Cyr=o("Examples:"),wyr=l(),m(vL.$$.fragment),pPe=l(),cm=a("h2"),w3=a("a"),_Te=a("span"),m(FL.$$.fragment),Ayr=l(),bTe=a("span"),yyr=o("FlaxAutoModelForSeq2SeqLM"),_Pe=l(),Ir=a("div"),m(TL.$$.fragment),Lyr=l(),mm=a("p"),xyr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),KW=a("a"),kyr=o("from_pretrained()"),Syr=o(" class method or the "),ZW=a("a"),Ryr=o("from_config()"),Byr=o(` class
method.`),Pyr=l(),ML=a("p"),$yr=o("This class cannot be instantiated directly using "),vTe=a("code"),Iyr=o("__init__()"),qyr=o(" (throws an error)."),Nyr=l(),kt=a("div"),m(EL.$$.fragment),jyr=l(),FTe=a("p"),Dyr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Gyr=l(),fm=a("p"),Oyr=o(`Note:
Loading a model from its configuration file does `),TTe=a("strong"),Vyr=o("not"),Xyr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eH=a("a"),zyr=o("from_pretrained()"),Qyr=o(" to load the model weights."),Wyr=l(),MTe=a("p"),Hyr=o("Examples:"),Uyr=l(),m(CL.$$.fragment),Jyr=l(),So=a("div"),m(wL.$$.fragment),Yyr=l(),ETe=a("p"),Kyr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Zyr=l(),Pn=a("p"),e8r=o("The model class to instantiate is selected based on the "),CTe=a("code"),o8r=o("model_type"),r8r=o(` property of the config object (either
passed as an argument or loaded from `),wTe=a("code"),t8r=o("pretrained_model_name_or_path"),a8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ATe=a("code"),n8r=o("pretrained_model_name_or_path"),s8r=o(":"),l8r=l(),Ee=a("ul"),A3=a("li"),yTe=a("strong"),i8r=o("bart"),d8r=o(" \u2014 "),oH=a("a"),c8r=o("FlaxBartForConditionalGeneration"),m8r=o(" (BART model)"),f8r=l(),y3=a("li"),LTe=a("strong"),g8r=o("blenderbot"),h8r=o(" \u2014 "),rH=a("a"),u8r=o("FlaxBlenderbotForConditionalGeneration"),p8r=o(" (Blenderbot model)"),_8r=l(),L3=a("li"),xTe=a("strong"),b8r=o("blenderbot-small"),v8r=o(" \u2014 "),tH=a("a"),F8r=o("FlaxBlenderbotSmallForConditionalGeneration"),T8r=o(" (BlenderbotSmall model)"),M8r=l(),x3=a("li"),kTe=a("strong"),E8r=o("encoder-decoder"),C8r=o(" \u2014 "),aH=a("a"),w8r=o("FlaxEncoderDecoderModel"),A8r=o(" (Encoder decoder model)"),y8r=l(),k3=a("li"),STe=a("strong"),L8r=o("marian"),x8r=o(" \u2014 "),nH=a("a"),k8r=o("FlaxMarianMTModel"),S8r=o(" (Marian model)"),R8r=l(),S3=a("li"),RTe=a("strong"),B8r=o("mbart"),P8r=o(" \u2014 "),sH=a("a"),$8r=o("FlaxMBartForConditionalGeneration"),I8r=o(" (mBART model)"),q8r=l(),R3=a("li"),BTe=a("strong"),N8r=o("mt5"),j8r=o(" \u2014 "),lH=a("a"),D8r=o("FlaxMT5ForConditionalGeneration"),G8r=o(" (mT5 model)"),O8r=l(),B3=a("li"),PTe=a("strong"),V8r=o("pegasus"),X8r=o(" \u2014 "),iH=a("a"),z8r=o("FlaxPegasusForConditionalGeneration"),Q8r=o(" (Pegasus model)"),W8r=l(),P3=a("li"),$Te=a("strong"),H8r=o("t5"),U8r=o(" \u2014 "),dH=a("a"),J8r=o("FlaxT5ForConditionalGeneration"),Y8r=o(" (T5 model)"),K8r=l(),ITe=a("p"),Z8r=o("Examples:"),eLr=l(),m(AL.$$.fragment),bPe=l(),gm=a("h2"),$3=a("a"),qTe=a("span"),m(yL.$$.fragment),oLr=l(),NTe=a("span"),rLr=o("FlaxAutoModelForSequenceClassification"),vPe=l(),qr=a("div"),m(LL.$$.fragment),tLr=l(),hm=a("p"),aLr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),cH=a("a"),nLr=o("from_pretrained()"),sLr=o(" class method or the "),mH=a("a"),lLr=o("from_config()"),iLr=o(` class
method.`),dLr=l(),xL=a("p"),cLr=o("This class cannot be instantiated directly using "),jTe=a("code"),mLr=o("__init__()"),fLr=o(" (throws an error)."),gLr=l(),St=a("div"),m(kL.$$.fragment),hLr=l(),DTe=a("p"),uLr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),pLr=l(),um=a("p"),_Lr=o(`Note:
Loading a model from its configuration file does `),GTe=a("strong"),bLr=o("not"),vLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fH=a("a"),FLr=o("from_pretrained()"),TLr=o(" to load the model weights."),MLr=l(),OTe=a("p"),ELr=o("Examples:"),CLr=l(),m(SL.$$.fragment),wLr=l(),Ro=a("div"),m(RL.$$.fragment),ALr=l(),VTe=a("p"),yLr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),LLr=l(),$n=a("p"),xLr=o("The model class to instantiate is selected based on the "),XTe=a("code"),kLr=o("model_type"),SLr=o(` property of the config object (either
passed as an argument or loaded from `),zTe=a("code"),RLr=o("pretrained_model_name_or_path"),BLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),QTe=a("code"),PLr=o("pretrained_model_name_or_path"),$Lr=o(":"),ILr=l(),Fe=a("ul"),I3=a("li"),WTe=a("strong"),qLr=o("albert"),NLr=o(" \u2014 "),gH=a("a"),jLr=o("FlaxAlbertForSequenceClassification"),DLr=o(" (ALBERT model)"),GLr=l(),q3=a("li"),HTe=a("strong"),OLr=o("bart"),VLr=o(" \u2014 "),hH=a("a"),XLr=o("FlaxBartForSequenceClassification"),zLr=o(" (BART model)"),QLr=l(),N3=a("li"),UTe=a("strong"),WLr=o("bert"),HLr=o(" \u2014 "),uH=a("a"),ULr=o("FlaxBertForSequenceClassification"),JLr=o(" (BERT model)"),YLr=l(),j3=a("li"),JTe=a("strong"),KLr=o("big_bird"),ZLr=o(" \u2014 "),pH=a("a"),e7r=o("FlaxBigBirdForSequenceClassification"),o7r=o(" (BigBird model)"),r7r=l(),D3=a("li"),YTe=a("strong"),t7r=o("distilbert"),a7r=o(" \u2014 "),_H=a("a"),n7r=o("FlaxDistilBertForSequenceClassification"),s7r=o(" (DistilBERT model)"),l7r=l(),G3=a("li"),KTe=a("strong"),i7r=o("electra"),d7r=o(" \u2014 "),bH=a("a"),c7r=o("FlaxElectraForSequenceClassification"),m7r=o(" (ELECTRA model)"),f7r=l(),O3=a("li"),ZTe=a("strong"),g7r=o("mbart"),h7r=o(" \u2014 "),vH=a("a"),u7r=o("FlaxMBartForSequenceClassification"),p7r=o(" (mBART model)"),_7r=l(),V3=a("li"),eMe=a("strong"),b7r=o("roberta"),v7r=o(" \u2014 "),FH=a("a"),F7r=o("FlaxRobertaForSequenceClassification"),T7r=o(" (RoBERTa model)"),M7r=l(),X3=a("li"),oMe=a("strong"),E7r=o("roformer"),C7r=o(" \u2014 "),TH=a("a"),w7r=o("FlaxRoFormerForSequenceClassification"),A7r=o(" (RoFormer model)"),y7r=l(),z3=a("li"),rMe=a("strong"),L7r=o("xlm-roberta"),x7r=o(" \u2014 "),MH=a("a"),k7r=o("FlaxXLMRobertaForSequenceClassification"),S7r=o(" (XLM-RoBERTa model)"),R7r=l(),tMe=a("p"),B7r=o("Examples:"),P7r=l(),m(BL.$$.fragment),FPe=l(),pm=a("h2"),Q3=a("a"),aMe=a("span"),m(PL.$$.fragment),$7r=l(),nMe=a("span"),I7r=o("FlaxAutoModelForQuestionAnswering"),TPe=l(),Nr=a("div"),m($L.$$.fragment),q7r=l(),_m=a("p"),N7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),EH=a("a"),j7r=o("from_pretrained()"),D7r=o(" class method or the "),CH=a("a"),G7r=o("from_config()"),O7r=o(` class
method.`),V7r=l(),IL=a("p"),X7r=o("This class cannot be instantiated directly using "),sMe=a("code"),z7r=o("__init__()"),Q7r=o(" (throws an error)."),W7r=l(),Rt=a("div"),m(qL.$$.fragment),H7r=l(),lMe=a("p"),U7r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),J7r=l(),bm=a("p"),Y7r=o(`Note:
Loading a model from its configuration file does `),iMe=a("strong"),K7r=o("not"),Z7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wH=a("a"),e9r=o("from_pretrained()"),o9r=o(" to load the model weights."),r9r=l(),dMe=a("p"),t9r=o("Examples:"),a9r=l(),m(NL.$$.fragment),n9r=l(),Bo=a("div"),m(jL.$$.fragment),s9r=l(),cMe=a("p"),l9r=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),i9r=l(),In=a("p"),d9r=o("The model class to instantiate is selected based on the "),mMe=a("code"),c9r=o("model_type"),m9r=o(` property of the config object (either
passed as an argument or loaded from `),fMe=a("code"),f9r=o("pretrained_model_name_or_path"),g9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gMe=a("code"),h9r=o("pretrained_model_name_or_path"),u9r=o(":"),p9r=l(),Te=a("ul"),W3=a("li"),hMe=a("strong"),_9r=o("albert"),b9r=o(" \u2014 "),AH=a("a"),v9r=o("FlaxAlbertForQuestionAnswering"),F9r=o(" (ALBERT model)"),T9r=l(),H3=a("li"),uMe=a("strong"),M9r=o("bart"),E9r=o(" \u2014 "),yH=a("a"),C9r=o("FlaxBartForQuestionAnswering"),w9r=o(" (BART model)"),A9r=l(),U3=a("li"),pMe=a("strong"),y9r=o("bert"),L9r=o(" \u2014 "),LH=a("a"),x9r=o("FlaxBertForQuestionAnswering"),k9r=o(" (BERT model)"),S9r=l(),J3=a("li"),_Me=a("strong"),R9r=o("big_bird"),B9r=o(" \u2014 "),xH=a("a"),P9r=o("FlaxBigBirdForQuestionAnswering"),$9r=o(" (BigBird model)"),I9r=l(),Y3=a("li"),bMe=a("strong"),q9r=o("distilbert"),N9r=o(" \u2014 "),kH=a("a"),j9r=o("FlaxDistilBertForQuestionAnswering"),D9r=o(" (DistilBERT model)"),G9r=l(),K3=a("li"),vMe=a("strong"),O9r=o("electra"),V9r=o(" \u2014 "),SH=a("a"),X9r=o("FlaxElectraForQuestionAnswering"),z9r=o(" (ELECTRA model)"),Q9r=l(),Z3=a("li"),FMe=a("strong"),W9r=o("mbart"),H9r=o(" \u2014 "),RH=a("a"),U9r=o("FlaxMBartForQuestionAnswering"),J9r=o(" (mBART model)"),Y9r=l(),eC=a("li"),TMe=a("strong"),K9r=o("roberta"),Z9r=o(" \u2014 "),BH=a("a"),exr=o("FlaxRobertaForQuestionAnswering"),oxr=o(" (RoBERTa model)"),rxr=l(),oC=a("li"),MMe=a("strong"),txr=o("roformer"),axr=o(" \u2014 "),PH=a("a"),nxr=o("FlaxRoFormerForQuestionAnswering"),sxr=o(" (RoFormer model)"),lxr=l(),rC=a("li"),EMe=a("strong"),ixr=o("xlm-roberta"),dxr=o(" \u2014 "),$H=a("a"),cxr=o("FlaxXLMRobertaForQuestionAnswering"),mxr=o(" (XLM-RoBERTa model)"),fxr=l(),CMe=a("p"),gxr=o("Examples:"),hxr=l(),m(DL.$$.fragment),MPe=l(),vm=a("h2"),tC=a("a"),wMe=a("span"),m(GL.$$.fragment),uxr=l(),AMe=a("span"),pxr=o("FlaxAutoModelForTokenClassification"),EPe=l(),jr=a("div"),m(OL.$$.fragment),_xr=l(),Fm=a("p"),bxr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),IH=a("a"),vxr=o("from_pretrained()"),Fxr=o(" class method or the "),qH=a("a"),Txr=o("from_config()"),Mxr=o(` class
method.`),Exr=l(),VL=a("p"),Cxr=o("This class cannot be instantiated directly using "),yMe=a("code"),wxr=o("__init__()"),Axr=o(" (throws an error)."),yxr=l(),Bt=a("div"),m(XL.$$.fragment),Lxr=l(),LMe=a("p"),xxr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),kxr=l(),Tm=a("p"),Sxr=o(`Note:
Loading a model from its configuration file does `),xMe=a("strong"),Rxr=o("not"),Bxr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NH=a("a"),Pxr=o("from_pretrained()"),$xr=o(" to load the model weights."),Ixr=l(),kMe=a("p"),qxr=o("Examples:"),Nxr=l(),m(zL.$$.fragment),jxr=l(),Po=a("div"),m(QL.$$.fragment),Dxr=l(),SMe=a("p"),Gxr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Oxr=l(),qn=a("p"),Vxr=o("The model class to instantiate is selected based on the "),RMe=a("code"),Xxr=o("model_type"),zxr=o(` property of the config object (either
passed as an argument or loaded from `),BMe=a("code"),Qxr=o("pretrained_model_name_or_path"),Wxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PMe=a("code"),Hxr=o("pretrained_model_name_or_path"),Uxr=o(":"),Jxr=l(),Be=a("ul"),aC=a("li"),$Me=a("strong"),Yxr=o("albert"),Kxr=o(" \u2014 "),jH=a("a"),Zxr=o("FlaxAlbertForTokenClassification"),ekr=o(" (ALBERT model)"),okr=l(),nC=a("li"),IMe=a("strong"),rkr=o("bert"),tkr=o(" \u2014 "),DH=a("a"),akr=o("FlaxBertForTokenClassification"),nkr=o(" (BERT model)"),skr=l(),sC=a("li"),qMe=a("strong"),lkr=o("big_bird"),ikr=o(" \u2014 "),GH=a("a"),dkr=o("FlaxBigBirdForTokenClassification"),ckr=o(" (BigBird model)"),mkr=l(),lC=a("li"),NMe=a("strong"),fkr=o("distilbert"),gkr=o(" \u2014 "),OH=a("a"),hkr=o("FlaxDistilBertForTokenClassification"),ukr=o(" (DistilBERT model)"),pkr=l(),iC=a("li"),jMe=a("strong"),_kr=o("electra"),bkr=o(" \u2014 "),VH=a("a"),vkr=o("FlaxElectraForTokenClassification"),Fkr=o(" (ELECTRA model)"),Tkr=l(),dC=a("li"),DMe=a("strong"),Mkr=o("roberta"),Ekr=o(" \u2014 "),XH=a("a"),Ckr=o("FlaxRobertaForTokenClassification"),wkr=o(" (RoBERTa model)"),Akr=l(),cC=a("li"),GMe=a("strong"),ykr=o("roformer"),Lkr=o(" \u2014 "),zH=a("a"),xkr=o("FlaxRoFormerForTokenClassification"),kkr=o(" (RoFormer model)"),Skr=l(),mC=a("li"),OMe=a("strong"),Rkr=o("xlm-roberta"),Bkr=o(" \u2014 "),QH=a("a"),Pkr=o("FlaxXLMRobertaForTokenClassification"),$kr=o(" (XLM-RoBERTa model)"),Ikr=l(),VMe=a("p"),qkr=o("Examples:"),Nkr=l(),m(WL.$$.fragment),CPe=l(),Mm=a("h2"),fC=a("a"),XMe=a("span"),m(HL.$$.fragment),jkr=l(),zMe=a("span"),Dkr=o("FlaxAutoModelForMultipleChoice"),wPe=l(),Dr=a("div"),m(UL.$$.fragment),Gkr=l(),Em=a("p"),Okr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),WH=a("a"),Vkr=o("from_pretrained()"),Xkr=o(" class method or the "),HH=a("a"),zkr=o("from_config()"),Qkr=o(` class
method.`),Wkr=l(),JL=a("p"),Hkr=o("This class cannot be instantiated directly using "),QMe=a("code"),Ukr=o("__init__()"),Jkr=o(" (throws an error)."),Ykr=l(),Pt=a("div"),m(YL.$$.fragment),Kkr=l(),WMe=a("p"),Zkr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),eSr=l(),Cm=a("p"),oSr=o(`Note:
Loading a model from its configuration file does `),HMe=a("strong"),rSr=o("not"),tSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UH=a("a"),aSr=o("from_pretrained()"),nSr=o(" to load the model weights."),sSr=l(),UMe=a("p"),lSr=o("Examples:"),iSr=l(),m(KL.$$.fragment),dSr=l(),$o=a("div"),m(ZL.$$.fragment),cSr=l(),JMe=a("p"),mSr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),fSr=l(),Nn=a("p"),gSr=o("The model class to instantiate is selected based on the "),YMe=a("code"),hSr=o("model_type"),uSr=o(` property of the config object (either
passed as an argument or loaded from `),KMe=a("code"),pSr=o("pretrained_model_name_or_path"),_Sr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ZMe=a("code"),bSr=o("pretrained_model_name_or_path"),vSr=o(":"),FSr=l(),Pe=a("ul"),gC=a("li"),e4e=a("strong"),TSr=o("albert"),MSr=o(" \u2014 "),JH=a("a"),ESr=o("FlaxAlbertForMultipleChoice"),CSr=o(" (ALBERT model)"),wSr=l(),hC=a("li"),o4e=a("strong"),ASr=o("bert"),ySr=o(" \u2014 "),YH=a("a"),LSr=o("FlaxBertForMultipleChoice"),xSr=o(" (BERT model)"),kSr=l(),uC=a("li"),r4e=a("strong"),SSr=o("big_bird"),RSr=o(" \u2014 "),KH=a("a"),BSr=o("FlaxBigBirdForMultipleChoice"),PSr=o(" (BigBird model)"),$Sr=l(),pC=a("li"),t4e=a("strong"),ISr=o("distilbert"),qSr=o(" \u2014 "),ZH=a("a"),NSr=o("FlaxDistilBertForMultipleChoice"),jSr=o(" (DistilBERT model)"),DSr=l(),_C=a("li"),a4e=a("strong"),GSr=o("electra"),OSr=o(" \u2014 "),eU=a("a"),VSr=o("FlaxElectraForMultipleChoice"),XSr=o(" (ELECTRA model)"),zSr=l(),bC=a("li"),n4e=a("strong"),QSr=o("roberta"),WSr=o(" \u2014 "),oU=a("a"),HSr=o("FlaxRobertaForMultipleChoice"),USr=o(" (RoBERTa model)"),JSr=l(),vC=a("li"),s4e=a("strong"),YSr=o("roformer"),KSr=o(" \u2014 "),rU=a("a"),ZSr=o("FlaxRoFormerForMultipleChoice"),eRr=o(" (RoFormer model)"),oRr=l(),FC=a("li"),l4e=a("strong"),rRr=o("xlm-roberta"),tRr=o(" \u2014 "),tU=a("a"),aRr=o("FlaxXLMRobertaForMultipleChoice"),nRr=o(" (XLM-RoBERTa model)"),sRr=l(),i4e=a("p"),lRr=o("Examples:"),iRr=l(),m(e7.$$.fragment),APe=l(),wm=a("h2"),TC=a("a"),d4e=a("span"),m(o7.$$.fragment),dRr=l(),c4e=a("span"),cRr=o("FlaxAutoModelForNextSentencePrediction"),yPe=l(),Gr=a("div"),m(r7.$$.fragment),mRr=l(),Am=a("p"),fRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),aU=a("a"),gRr=o("from_pretrained()"),hRr=o(" class method or the "),nU=a("a"),uRr=o("from_config()"),pRr=o(` class
method.`),_Rr=l(),t7=a("p"),bRr=o("This class cannot be instantiated directly using "),m4e=a("code"),vRr=o("__init__()"),FRr=o(" (throws an error)."),TRr=l(),$t=a("div"),m(a7.$$.fragment),MRr=l(),f4e=a("p"),ERr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),CRr=l(),ym=a("p"),wRr=o(`Note:
Loading a model from its configuration file does `),g4e=a("strong"),ARr=o("not"),yRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sU=a("a"),LRr=o("from_pretrained()"),xRr=o(" to load the model weights."),kRr=l(),h4e=a("p"),SRr=o("Examples:"),RRr=l(),m(n7.$$.fragment),BRr=l(),Io=a("div"),m(s7.$$.fragment),PRr=l(),u4e=a("p"),$Rr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),IRr=l(),jn=a("p"),qRr=o("The model class to instantiate is selected based on the "),p4e=a("code"),NRr=o("model_type"),jRr=o(` property of the config object (either
passed as an argument or loaded from `),_4e=a("code"),DRr=o("pretrained_model_name_or_path"),GRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b4e=a("code"),ORr=o("pretrained_model_name_or_path"),VRr=o(":"),XRr=l(),v4e=a("ul"),MC=a("li"),F4e=a("strong"),zRr=o("bert"),QRr=o(" \u2014 "),lU=a("a"),WRr=o("FlaxBertForNextSentencePrediction"),HRr=o(" (BERT model)"),URr=l(),T4e=a("p"),JRr=o("Examples:"),YRr=l(),m(l7.$$.fragment),LPe=l(),Lm=a("h2"),EC=a("a"),M4e=a("span"),m(i7.$$.fragment),KRr=l(),E4e=a("span"),ZRr=o("FlaxAutoModelForImageClassification"),xPe=l(),Or=a("div"),m(d7.$$.fragment),eBr=l(),xm=a("p"),oBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),iU=a("a"),rBr=o("from_pretrained()"),tBr=o(" class method or the "),dU=a("a"),aBr=o("from_config()"),nBr=o(` class
method.`),sBr=l(),c7=a("p"),lBr=o("This class cannot be instantiated directly using "),C4e=a("code"),iBr=o("__init__()"),dBr=o(" (throws an error)."),cBr=l(),It=a("div"),m(m7.$$.fragment),mBr=l(),w4e=a("p"),fBr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),gBr=l(),km=a("p"),hBr=o(`Note:
Loading a model from its configuration file does `),A4e=a("strong"),uBr=o("not"),pBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cU=a("a"),_Br=o("from_pretrained()"),bBr=o(" to load the model weights."),vBr=l(),y4e=a("p"),FBr=o("Examples:"),TBr=l(),m(f7.$$.fragment),MBr=l(),qo=a("div"),m(g7.$$.fragment),EBr=l(),L4e=a("p"),CBr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),wBr=l(),Dn=a("p"),ABr=o("The model class to instantiate is selected based on the "),x4e=a("code"),yBr=o("model_type"),LBr=o(` property of the config object (either
passed as an argument or loaded from `),k4e=a("code"),xBr=o("pretrained_model_name_or_path"),kBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S4e=a("code"),SBr=o("pretrained_model_name_or_path"),RBr=o(":"),BBr=l(),h7=a("ul"),CC=a("li"),R4e=a("strong"),PBr=o("beit"),$Br=o(" \u2014 "),mU=a("a"),IBr=o("FlaxBeitForImageClassification"),qBr=o(" (BEiT model)"),NBr=l(),wC=a("li"),B4e=a("strong"),jBr=o("vit"),DBr=o(" \u2014 "),fU=a("a"),GBr=o("FlaxViTForImageClassification"),OBr=o(" (ViT model)"),VBr=l(),P4e=a("p"),XBr=o("Examples:"),zBr=l(),m(u7.$$.fragment),kPe=l(),Sm=a("h2"),AC=a("a"),$4e=a("span"),m(p7.$$.fragment),QBr=l(),I4e=a("span"),WBr=o("FlaxAutoModelForVision2Seq"),SPe=l(),Vr=a("div"),m(_7.$$.fragment),HBr=l(),Rm=a("p"),UBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),gU=a("a"),JBr=o("from_pretrained()"),YBr=o(" class method or the "),hU=a("a"),KBr=o("from_config()"),ZBr=o(` class
method.`),ePr=l(),b7=a("p"),oPr=o("This class cannot be instantiated directly using "),q4e=a("code"),rPr=o("__init__()"),tPr=o(" (throws an error)."),aPr=l(),qt=a("div"),m(v7.$$.fragment),nPr=l(),N4e=a("p"),sPr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),lPr=l(),Bm=a("p"),iPr=o(`Note:
Loading a model from its configuration file does `),j4e=a("strong"),dPr=o("not"),cPr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uU=a("a"),mPr=o("from_pretrained()"),fPr=o(" to load the model weights."),gPr=l(),D4e=a("p"),hPr=o("Examples:"),uPr=l(),m(F7.$$.fragment),pPr=l(),No=a("div"),m(T7.$$.fragment),_Pr=l(),G4e=a("p"),bPr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),vPr=l(),Gn=a("p"),FPr=o("The model class to instantiate is selected based on the "),O4e=a("code"),TPr=o("model_type"),MPr=o(` property of the config object (either
passed as an argument or loaded from `),V4e=a("code"),EPr=o("pretrained_model_name_or_path"),CPr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X4e=a("code"),wPr=o("pretrained_model_name_or_path"),APr=o(":"),yPr=l(),z4e=a("ul"),yC=a("li"),Q4e=a("strong"),LPr=o("vision-encoder-decoder"),xPr=o(" \u2014 "),pU=a("a"),kPr=o("FlaxVisionEncoderDecoderModel"),SPr=o(" (Vision Encoder decoder model)"),RPr=l(),W4e=a("p"),BPr=o("Examples:"),PPr=l(),m(M7.$$.fragment),this.h()},l(c){const _=E6t('[data-svelte="svelte-1phssyn"]',document.head);Z=n(_,"META",{name:!0,content:!0}),_.forEach(t),io=i(c),ce=n(c,"H1",{class:!0});var E7=s(ce);Ce=n(E7,"A",{id:!0,class:!0,href:!0});var H4e=s(Ce);lo=n(H4e,"SPAN",{});var U4e=s(lo);f(he.$$.fragment,U4e),U4e.forEach(t),H4e.forEach(t),Me=i(E7),Xo=n(E7,"SPAN",{});var IPr=s(Xo);qi=r(IPr,"Auto Classes"),IPr.forEach(t),E7.forEach(t),Im=i(c),ma=n(c,"P",{});var BPe=s(ma);Ni=r(BPe,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),ji=n(BPe,"CODE",{});var qPr=s(ji);Lw=r(qPr,"from_pretrained()"),qPr.forEach(t),qm=r(BPe,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),BPe.forEach(t),xe=i(c),co=n(c,"P",{});var LC=s(co);Di=r(LC,"Instantiating one of "),On=n(LC,"A",{href:!0});var NPr=s(On);xw=r(NPr,"AutoConfig"),NPr.forEach(t),Vn=r(LC,", "),Xn=n(LC,"A",{href:!0});var jPr=s(Xn);kw=r(jPr,"AutoModel"),jPr.forEach(t),Gi=r(LC,`, and
`),zn=n(LC,"A",{href:!0});var DPr=s(zn);Sw=r(DPr,"AutoTokenizer"),DPr.forEach(t),Oi=r(LC," will directly create a class of the relevant architecture. For instance"),LC.forEach(t),Nm=i(c),f(Da.$$.fragment,c),mo=i(c),_e=n(c,"P",{});var PPe=s(_e);F9=r(PPe,"will create a model that is an instance of "),Vi=n(PPe,"A",{href:!0});var GPr=s(Vi);T9=r(GPr,"BertModel"),GPr.forEach(t),M9=r(PPe,"."),PPe.forEach(t),zo=i(c),Ga=n(c,"P",{});var $Pe=s(Ga);E9=r($Pe,"There is one class of "),jm=n($Pe,"CODE",{});var OPr=s(jm);C9=r(OPr,"AutoModel"),OPr.forEach(t),XIe=r($Pe," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),$Pe.forEach(t),SRe=i(c),Xi=n(c,"H2",{class:!0});var IPe=s(Xi);Dm=n(IPe,"A",{id:!0,class:!0,href:!0});var VPr=s(Dm);dY=n(VPr,"SPAN",{});var XPr=s(dY);f(Rw.$$.fragment,XPr),XPr.forEach(t),VPr.forEach(t),zIe=i(IPe),cY=n(IPe,"SPAN",{});var zPr=s(cY);QIe=r(zPr,"Extending the Auto Classes"),zPr.forEach(t),IPe.forEach(t),RRe=i(c),Qn=n(c,"P",{});var _U=s(Qn);WIe=r(_U,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),mY=n(_U,"CODE",{});var QPr=s(mY);HIe=r(QPr,"NewModel"),QPr.forEach(t),UIe=r(_U,", make sure you have a "),fY=n(_U,"CODE",{});var WPr=s(fY);JIe=r(WPr,"NewModelConfig"),WPr.forEach(t),YIe=r(_U,` then you can add those to the auto
classes like this:`),_U.forEach(t),BRe=i(c),f(Bw.$$.fragment,c),PRe=i(c),w9=n(c,"P",{});var HPr=s(w9);KIe=r(HPr,"You will then be able to use the auto classes like you would usually do!"),HPr.forEach(t),$Re=i(c),f(Gm.$$.fragment,c),IRe=i(c),zi=n(c,"H2",{class:!0});var qPe=s(zi);Om=n(qPe,"A",{id:!0,class:!0,href:!0});var UPr=s(Om);gY=n(UPr,"SPAN",{});var JPr=s(gY);f(Pw.$$.fragment,JPr),JPr.forEach(t),UPr.forEach(t),ZIe=i(qPe),hY=n(qPe,"SPAN",{});var YPr=s(hY);eqe=r(YPr,"AutoConfig"),YPr.forEach(t),qPe.forEach(t),qRe=i(c),Qo=n(c,"DIV",{class:!0});var Vs=s(Qo);f($w.$$.fragment,Vs),oqe=i(Vs),Iw=n(Vs,"P",{});var NPe=s(Iw);rqe=r(NPe,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),A9=n(NPe,"A",{href:!0});var KPr=s(A9);tqe=r(KPr,"from_pretrained()"),KPr.forEach(t),aqe=r(NPe," class method."),NPe.forEach(t),nqe=i(Vs),qw=n(Vs,"P",{});var jPe=s(qw);sqe=r(jPe,"This class cannot be instantiated directly using "),uY=n(jPe,"CODE",{});var ZPr=s(uY);lqe=r(ZPr,"__init__()"),ZPr.forEach(t),iqe=r(jPe," (throws an error)."),jPe.forEach(t),dqe=i(Vs),fo=n(Vs,"DIV",{class:!0});var ga=s(fo);f(Nw.$$.fragment,ga),cqe=i(ga),pY=n(ga,"P",{});var e$r=s(pY);mqe=r(e$r,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),e$r.forEach(t),fqe=i(ga),Qi=n(ga,"P",{});var bU=s(Qi);gqe=r(bU,"The configuration class to instantiate is selected based on the "),_Y=n(bU,"CODE",{});var o$r=s(_Y);hqe=r(o$r,"model_type"),o$r.forEach(t),uqe=r(bU,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),bY=n(bU,"CODE",{});var r$r=s(bY);pqe=r(r$r,"pretrained_model_name_or_path"),r$r.forEach(t),_qe=r(bU,":"),bU.forEach(t),bqe=i(ga),v=n(ga,"UL",{});var F=s(v);Vm=n(F,"LI",{});var J4e=s(Vm);vY=n(J4e,"STRONG",{});var t$r=s(vY);vqe=r(t$r,"albert"),t$r.forEach(t),Fqe=r(J4e," \u2014 "),y9=n(J4e,"A",{href:!0});var a$r=s(y9);Tqe=r(a$r,"AlbertConfig"),a$r.forEach(t),Mqe=r(J4e," (ALBERT model)"),J4e.forEach(t),Eqe=i(F),Xm=n(F,"LI",{});var Y4e=s(Xm);FY=n(Y4e,"STRONG",{});var n$r=s(FY);Cqe=r(n$r,"bart"),n$r.forEach(t),wqe=r(Y4e," \u2014 "),L9=n(Y4e,"A",{href:!0});var s$r=s(L9);Aqe=r(s$r,"BartConfig"),s$r.forEach(t),yqe=r(Y4e," (BART model)"),Y4e.forEach(t),Lqe=i(F),zm=n(F,"LI",{});var K4e=s(zm);TY=n(K4e,"STRONG",{});var l$r=s(TY);xqe=r(l$r,"beit"),l$r.forEach(t),kqe=r(K4e," \u2014 "),x9=n(K4e,"A",{href:!0});var i$r=s(x9);Sqe=r(i$r,"BeitConfig"),i$r.forEach(t),Rqe=r(K4e," (BEiT model)"),K4e.forEach(t),Bqe=i(F),Qm=n(F,"LI",{});var Z4e=s(Qm);MY=n(Z4e,"STRONG",{});var d$r=s(MY);Pqe=r(d$r,"bert"),d$r.forEach(t),$qe=r(Z4e," \u2014 "),k9=n(Z4e,"A",{href:!0});var c$r=s(k9);Iqe=r(c$r,"BertConfig"),c$r.forEach(t),qqe=r(Z4e," (BERT model)"),Z4e.forEach(t),Nqe=i(F),Wm=n(F,"LI",{});var eEe=s(Wm);EY=n(eEe,"STRONG",{});var m$r=s(EY);jqe=r(m$r,"bert-generation"),m$r.forEach(t),Dqe=r(eEe," \u2014 "),S9=n(eEe,"A",{href:!0});var f$r=s(S9);Gqe=r(f$r,"BertGenerationConfig"),f$r.forEach(t),Oqe=r(eEe," (Bert Generation model)"),eEe.forEach(t),Vqe=i(F),Hm=n(F,"LI",{});var oEe=s(Hm);CY=n(oEe,"STRONG",{});var g$r=s(CY);Xqe=r(g$r,"big_bird"),g$r.forEach(t),zqe=r(oEe," \u2014 "),R9=n(oEe,"A",{href:!0});var h$r=s(R9);Qqe=r(h$r,"BigBirdConfig"),h$r.forEach(t),Wqe=r(oEe," (BigBird model)"),oEe.forEach(t),Hqe=i(F),Um=n(F,"LI",{});var rEe=s(Um);wY=n(rEe,"STRONG",{});var u$r=s(wY);Uqe=r(u$r,"bigbird_pegasus"),u$r.forEach(t),Jqe=r(rEe," \u2014 "),B9=n(rEe,"A",{href:!0});var p$r=s(B9);Yqe=r(p$r,"BigBirdPegasusConfig"),p$r.forEach(t),Kqe=r(rEe," (BigBirdPegasus model)"),rEe.forEach(t),Zqe=i(F),Jm=n(F,"LI",{});var tEe=s(Jm);AY=n(tEe,"STRONG",{});var _$r=s(AY);eNe=r(_$r,"blenderbot"),_$r.forEach(t),oNe=r(tEe," \u2014 "),P9=n(tEe,"A",{href:!0});var b$r=s(P9);rNe=r(b$r,"BlenderbotConfig"),b$r.forEach(t),tNe=r(tEe," (Blenderbot model)"),tEe.forEach(t),aNe=i(F),Ym=n(F,"LI",{});var aEe=s(Ym);yY=n(aEe,"STRONG",{});var v$r=s(yY);nNe=r(v$r,"blenderbot-small"),v$r.forEach(t),sNe=r(aEe," \u2014 "),$9=n(aEe,"A",{href:!0});var F$r=s($9);lNe=r(F$r,"BlenderbotSmallConfig"),F$r.forEach(t),iNe=r(aEe," (BlenderbotSmall model)"),aEe.forEach(t),dNe=i(F),Km=n(F,"LI",{});var nEe=s(Km);LY=n(nEe,"STRONG",{});var T$r=s(LY);cNe=r(T$r,"camembert"),T$r.forEach(t),mNe=r(nEe," \u2014 "),I9=n(nEe,"A",{href:!0});var M$r=s(I9);fNe=r(M$r,"CamembertConfig"),M$r.forEach(t),gNe=r(nEe," (CamemBERT model)"),nEe.forEach(t),hNe=i(F),Zm=n(F,"LI",{});var sEe=s(Zm);xY=n(sEe,"STRONG",{});var E$r=s(xY);uNe=r(E$r,"canine"),E$r.forEach(t),pNe=r(sEe," \u2014 "),q9=n(sEe,"A",{href:!0});var C$r=s(q9);_Ne=r(C$r,"CanineConfig"),C$r.forEach(t),bNe=r(sEe," (Canine model)"),sEe.forEach(t),vNe=i(F),ef=n(F,"LI",{});var lEe=s(ef);kY=n(lEe,"STRONG",{});var w$r=s(kY);FNe=r(w$r,"clip"),w$r.forEach(t),TNe=r(lEe," \u2014 "),N9=n(lEe,"A",{href:!0});var A$r=s(N9);MNe=r(A$r,"CLIPConfig"),A$r.forEach(t),ENe=r(lEe," (CLIP model)"),lEe.forEach(t),CNe=i(F),of=n(F,"LI",{});var iEe=s(of);SY=n(iEe,"STRONG",{});var y$r=s(SY);wNe=r(y$r,"convbert"),y$r.forEach(t),ANe=r(iEe," \u2014 "),j9=n(iEe,"A",{href:!0});var L$r=s(j9);yNe=r(L$r,"ConvBertConfig"),L$r.forEach(t),LNe=r(iEe," (ConvBERT model)"),iEe.forEach(t),xNe=i(F),rf=n(F,"LI",{});var dEe=s(rf);RY=n(dEe,"STRONG",{});var x$r=s(RY);kNe=r(x$r,"convnext"),x$r.forEach(t),SNe=r(dEe," \u2014 "),D9=n(dEe,"A",{href:!0});var k$r=s(D9);RNe=r(k$r,"ConvNextConfig"),k$r.forEach(t),BNe=r(dEe," (ConvNext model)"),dEe.forEach(t),PNe=i(F),tf=n(F,"LI",{});var cEe=s(tf);BY=n(cEe,"STRONG",{});var S$r=s(BY);$Ne=r(S$r,"ctrl"),S$r.forEach(t),INe=r(cEe," \u2014 "),G9=n(cEe,"A",{href:!0});var R$r=s(G9);qNe=r(R$r,"CTRLConfig"),R$r.forEach(t),NNe=r(cEe," (CTRL model)"),cEe.forEach(t),jNe=i(F),af=n(F,"LI",{});var mEe=s(af);PY=n(mEe,"STRONG",{});var B$r=s(PY);DNe=r(B$r,"data2vec-audio"),B$r.forEach(t),GNe=r(mEe," \u2014 "),O9=n(mEe,"A",{href:!0});var P$r=s(O9);ONe=r(P$r,"Data2VecAudioConfig"),P$r.forEach(t),VNe=r(mEe," (Data2VecAudio model)"),mEe.forEach(t),XNe=i(F),nf=n(F,"LI",{});var fEe=s(nf);$Y=n(fEe,"STRONG",{});var $$r=s($Y);zNe=r($$r,"data2vec-text"),$$r.forEach(t),QNe=r(fEe," \u2014 "),V9=n(fEe,"A",{href:!0});var I$r=s(V9);WNe=r(I$r,"Data2VecTextConfig"),I$r.forEach(t),HNe=r(fEe," (Data2VecText model)"),fEe.forEach(t),UNe=i(F),sf=n(F,"LI",{});var gEe=s(sf);IY=n(gEe,"STRONG",{});var q$r=s(IY);JNe=r(q$r,"data2vec-vision"),q$r.forEach(t),YNe=r(gEe," \u2014 "),X9=n(gEe,"A",{href:!0});var N$r=s(X9);KNe=r(N$r,"Data2VecVisionConfig"),N$r.forEach(t),ZNe=r(gEe," (Data2VecVision model)"),gEe.forEach(t),eje=i(F),lf=n(F,"LI",{});var hEe=s(lf);qY=n(hEe,"STRONG",{});var j$r=s(qY);oje=r(j$r,"deberta"),j$r.forEach(t),rje=r(hEe," \u2014 "),z9=n(hEe,"A",{href:!0});var D$r=s(z9);tje=r(D$r,"DebertaConfig"),D$r.forEach(t),aje=r(hEe," (DeBERTa model)"),hEe.forEach(t),nje=i(F),df=n(F,"LI",{});var uEe=s(df);NY=n(uEe,"STRONG",{});var G$r=s(NY);sje=r(G$r,"deberta-v2"),G$r.forEach(t),lje=r(uEe," \u2014 "),Q9=n(uEe,"A",{href:!0});var O$r=s(Q9);ije=r(O$r,"DebertaV2Config"),O$r.forEach(t),dje=r(uEe," (DeBERTa-v2 model)"),uEe.forEach(t),cje=i(F),cf=n(F,"LI",{});var pEe=s(cf);jY=n(pEe,"STRONG",{});var V$r=s(jY);mje=r(V$r,"decision_transformer"),V$r.forEach(t),fje=r(pEe," \u2014 "),W9=n(pEe,"A",{href:!0});var X$r=s(W9);gje=r(X$r,"DecisionTransformerConfig"),X$r.forEach(t),hje=r(pEe," (Decision Transformer model)"),pEe.forEach(t),uje=i(F),mf=n(F,"LI",{});var _Ee=s(mf);DY=n(_Ee,"STRONG",{});var z$r=s(DY);pje=r(z$r,"deit"),z$r.forEach(t),_je=r(_Ee," \u2014 "),H9=n(_Ee,"A",{href:!0});var Q$r=s(H9);bje=r(Q$r,"DeiTConfig"),Q$r.forEach(t),vje=r(_Ee," (DeiT model)"),_Ee.forEach(t),Fje=i(F),ff=n(F,"LI",{});var bEe=s(ff);GY=n(bEe,"STRONG",{});var W$r=s(GY);Tje=r(W$r,"detr"),W$r.forEach(t),Mje=r(bEe," \u2014 "),U9=n(bEe,"A",{href:!0});var H$r=s(U9);Eje=r(H$r,"DetrConfig"),H$r.forEach(t),Cje=r(bEe," (DETR model)"),bEe.forEach(t),wje=i(F),gf=n(F,"LI",{});var vEe=s(gf);OY=n(vEe,"STRONG",{});var U$r=s(OY);Aje=r(U$r,"distilbert"),U$r.forEach(t),yje=r(vEe," \u2014 "),J9=n(vEe,"A",{href:!0});var J$r=s(J9);Lje=r(J$r,"DistilBertConfig"),J$r.forEach(t),xje=r(vEe," (DistilBERT model)"),vEe.forEach(t),kje=i(F),hf=n(F,"LI",{});var FEe=s(hf);VY=n(FEe,"STRONG",{});var Y$r=s(VY);Sje=r(Y$r,"dpr"),Y$r.forEach(t),Rje=r(FEe," \u2014 "),Y9=n(FEe,"A",{href:!0});var K$r=s(Y9);Bje=r(K$r,"DPRConfig"),K$r.forEach(t),Pje=r(FEe," (DPR model)"),FEe.forEach(t),$je=i(F),uf=n(F,"LI",{});var TEe=s(uf);XY=n(TEe,"STRONG",{});var Z$r=s(XY);Ije=r(Z$r,"dpt"),Z$r.forEach(t),qje=r(TEe," \u2014 "),K9=n(TEe,"A",{href:!0});var eIr=s(K9);Nje=r(eIr,"DPTConfig"),eIr.forEach(t),jje=r(TEe," (DPT model)"),TEe.forEach(t),Dje=i(F),pf=n(F,"LI",{});var MEe=s(pf);zY=n(MEe,"STRONG",{});var oIr=s(zY);Gje=r(oIr,"electra"),oIr.forEach(t),Oje=r(MEe," \u2014 "),Z9=n(MEe,"A",{href:!0});var rIr=s(Z9);Vje=r(rIr,"ElectraConfig"),rIr.forEach(t),Xje=r(MEe," (ELECTRA model)"),MEe.forEach(t),zje=i(F),_f=n(F,"LI",{});var EEe=s(_f);QY=n(EEe,"STRONG",{});var tIr=s(QY);Qje=r(tIr,"encoder-decoder"),tIr.forEach(t),Wje=r(EEe," \u2014 "),ex=n(EEe,"A",{href:!0});var aIr=s(ex);Hje=r(aIr,"EncoderDecoderConfig"),aIr.forEach(t),Uje=r(EEe," (Encoder decoder model)"),EEe.forEach(t),Jje=i(F),bf=n(F,"LI",{});var CEe=s(bf);WY=n(CEe,"STRONG",{});var nIr=s(WY);Yje=r(nIr,"flaubert"),nIr.forEach(t),Kje=r(CEe," \u2014 "),ox=n(CEe,"A",{href:!0});var sIr=s(ox);Zje=r(sIr,"FlaubertConfig"),sIr.forEach(t),eDe=r(CEe," (FlauBERT model)"),CEe.forEach(t),oDe=i(F),vf=n(F,"LI",{});var wEe=s(vf);HY=n(wEe,"STRONG",{});var lIr=s(HY);rDe=r(lIr,"fnet"),lIr.forEach(t),tDe=r(wEe," \u2014 "),rx=n(wEe,"A",{href:!0});var iIr=s(rx);aDe=r(iIr,"FNetConfig"),iIr.forEach(t),nDe=r(wEe," (FNet model)"),wEe.forEach(t),sDe=i(F),Ff=n(F,"LI",{});var AEe=s(Ff);UY=n(AEe,"STRONG",{});var dIr=s(UY);lDe=r(dIr,"fsmt"),dIr.forEach(t),iDe=r(AEe," \u2014 "),tx=n(AEe,"A",{href:!0});var cIr=s(tx);dDe=r(cIr,"FSMTConfig"),cIr.forEach(t),cDe=r(AEe," (FairSeq Machine-Translation model)"),AEe.forEach(t),mDe=i(F),Tf=n(F,"LI",{});var yEe=s(Tf);JY=n(yEe,"STRONG",{});var mIr=s(JY);fDe=r(mIr,"funnel"),mIr.forEach(t),gDe=r(yEe," \u2014 "),ax=n(yEe,"A",{href:!0});var fIr=s(ax);hDe=r(fIr,"FunnelConfig"),fIr.forEach(t),uDe=r(yEe," (Funnel Transformer model)"),yEe.forEach(t),pDe=i(F),Mf=n(F,"LI",{});var LEe=s(Mf);YY=n(LEe,"STRONG",{});var gIr=s(YY);_De=r(gIr,"glpn"),gIr.forEach(t),bDe=r(LEe," \u2014 "),nx=n(LEe,"A",{href:!0});var hIr=s(nx);vDe=r(hIr,"GLPNConfig"),hIr.forEach(t),FDe=r(LEe," (GLPN model)"),LEe.forEach(t),TDe=i(F),Ef=n(F,"LI",{});var xEe=s(Ef);KY=n(xEe,"STRONG",{});var uIr=s(KY);MDe=r(uIr,"gpt2"),uIr.forEach(t),EDe=r(xEe," \u2014 "),sx=n(xEe,"A",{href:!0});var pIr=s(sx);CDe=r(pIr,"GPT2Config"),pIr.forEach(t),wDe=r(xEe," (OpenAI GPT-2 model)"),xEe.forEach(t),ADe=i(F),Cf=n(F,"LI",{});var kEe=s(Cf);ZY=n(kEe,"STRONG",{});var _Ir=s(ZY);yDe=r(_Ir,"gpt_neo"),_Ir.forEach(t),LDe=r(kEe," \u2014 "),lx=n(kEe,"A",{href:!0});var bIr=s(lx);xDe=r(bIr,"GPTNeoConfig"),bIr.forEach(t),kDe=r(kEe," (GPT Neo model)"),kEe.forEach(t),SDe=i(F),wf=n(F,"LI",{});var SEe=s(wf);eK=n(SEe,"STRONG",{});var vIr=s(eK);RDe=r(vIr,"gptj"),vIr.forEach(t),BDe=r(SEe," \u2014 "),ix=n(SEe,"A",{href:!0});var FIr=s(ix);PDe=r(FIr,"GPTJConfig"),FIr.forEach(t),$De=r(SEe," (GPT-J model)"),SEe.forEach(t),IDe=i(F),Af=n(F,"LI",{});var REe=s(Af);oK=n(REe,"STRONG",{});var TIr=s(oK);qDe=r(TIr,"hubert"),TIr.forEach(t),NDe=r(REe," \u2014 "),dx=n(REe,"A",{href:!0});var MIr=s(dx);jDe=r(MIr,"HubertConfig"),MIr.forEach(t),DDe=r(REe," (Hubert model)"),REe.forEach(t),GDe=i(F),yf=n(F,"LI",{});var BEe=s(yf);rK=n(BEe,"STRONG",{});var EIr=s(rK);ODe=r(EIr,"ibert"),EIr.forEach(t),VDe=r(BEe," \u2014 "),cx=n(BEe,"A",{href:!0});var CIr=s(cx);XDe=r(CIr,"IBertConfig"),CIr.forEach(t),zDe=r(BEe," (I-BERT model)"),BEe.forEach(t),QDe=i(F),Lf=n(F,"LI",{});var PEe=s(Lf);tK=n(PEe,"STRONG",{});var wIr=s(tK);WDe=r(wIr,"imagegpt"),wIr.forEach(t),HDe=r(PEe," \u2014 "),mx=n(PEe,"A",{href:!0});var AIr=s(mx);UDe=r(AIr,"ImageGPTConfig"),AIr.forEach(t),JDe=r(PEe," (ImageGPT model)"),PEe.forEach(t),YDe=i(F),xf=n(F,"LI",{});var $Ee=s(xf);aK=n($Ee,"STRONG",{});var yIr=s(aK);KDe=r(yIr,"layoutlm"),yIr.forEach(t),ZDe=r($Ee," \u2014 "),fx=n($Ee,"A",{href:!0});var LIr=s(fx);eGe=r(LIr,"LayoutLMConfig"),LIr.forEach(t),oGe=r($Ee," (LayoutLM model)"),$Ee.forEach(t),rGe=i(F),kf=n(F,"LI",{});var IEe=s(kf);nK=n(IEe,"STRONG",{});var xIr=s(nK);tGe=r(xIr,"layoutlmv2"),xIr.forEach(t),aGe=r(IEe," \u2014 "),gx=n(IEe,"A",{href:!0});var kIr=s(gx);nGe=r(kIr,"LayoutLMv2Config"),kIr.forEach(t),sGe=r(IEe," (LayoutLMv2 model)"),IEe.forEach(t),lGe=i(F),Sf=n(F,"LI",{});var qEe=s(Sf);sK=n(qEe,"STRONG",{});var SIr=s(sK);iGe=r(SIr,"led"),SIr.forEach(t),dGe=r(qEe," \u2014 "),hx=n(qEe,"A",{href:!0});var RIr=s(hx);cGe=r(RIr,"LEDConfig"),RIr.forEach(t),mGe=r(qEe," (LED model)"),qEe.forEach(t),fGe=i(F),Rf=n(F,"LI",{});var NEe=s(Rf);lK=n(NEe,"STRONG",{});var BIr=s(lK);gGe=r(BIr,"longformer"),BIr.forEach(t),hGe=r(NEe," \u2014 "),ux=n(NEe,"A",{href:!0});var PIr=s(ux);uGe=r(PIr,"LongformerConfig"),PIr.forEach(t),pGe=r(NEe," (Longformer model)"),NEe.forEach(t),_Ge=i(F),Bf=n(F,"LI",{});var jEe=s(Bf);iK=n(jEe,"STRONG",{});var $Ir=s(iK);bGe=r($Ir,"luke"),$Ir.forEach(t),vGe=r(jEe," \u2014 "),px=n(jEe,"A",{href:!0});var IIr=s(px);FGe=r(IIr,"LukeConfig"),IIr.forEach(t),TGe=r(jEe," (LUKE model)"),jEe.forEach(t),MGe=i(F),Pf=n(F,"LI",{});var DEe=s(Pf);dK=n(DEe,"STRONG",{});var qIr=s(dK);EGe=r(qIr,"lxmert"),qIr.forEach(t),CGe=r(DEe," \u2014 "),_x=n(DEe,"A",{href:!0});var NIr=s(_x);wGe=r(NIr,"LxmertConfig"),NIr.forEach(t),AGe=r(DEe," (LXMERT model)"),DEe.forEach(t),yGe=i(F),$f=n(F,"LI",{});var GEe=s($f);cK=n(GEe,"STRONG",{});var jIr=s(cK);LGe=r(jIr,"m2m_100"),jIr.forEach(t),xGe=r(GEe," \u2014 "),bx=n(GEe,"A",{href:!0});var DIr=s(bx);kGe=r(DIr,"M2M100Config"),DIr.forEach(t),SGe=r(GEe," (M2M100 model)"),GEe.forEach(t),RGe=i(F),If=n(F,"LI",{});var OEe=s(If);mK=n(OEe,"STRONG",{});var GIr=s(mK);BGe=r(GIr,"marian"),GIr.forEach(t),PGe=r(OEe," \u2014 "),vx=n(OEe,"A",{href:!0});var OIr=s(vx);$Ge=r(OIr,"MarianConfig"),OIr.forEach(t),IGe=r(OEe," (Marian model)"),OEe.forEach(t),qGe=i(F),qf=n(F,"LI",{});var VEe=s(qf);fK=n(VEe,"STRONG",{});var VIr=s(fK);NGe=r(VIr,"maskformer"),VIr.forEach(t),jGe=r(VEe," \u2014 "),Fx=n(VEe,"A",{href:!0});var XIr=s(Fx);DGe=r(XIr,"MaskFormerConfig"),XIr.forEach(t),GGe=r(VEe," (MaskFormer model)"),VEe.forEach(t),OGe=i(F),Nf=n(F,"LI",{});var XEe=s(Nf);gK=n(XEe,"STRONG",{});var zIr=s(gK);VGe=r(zIr,"mbart"),zIr.forEach(t),XGe=r(XEe," \u2014 "),Tx=n(XEe,"A",{href:!0});var QIr=s(Tx);zGe=r(QIr,"MBartConfig"),QIr.forEach(t),QGe=r(XEe," (mBART model)"),XEe.forEach(t),WGe=i(F),jf=n(F,"LI",{});var zEe=s(jf);hK=n(zEe,"STRONG",{});var WIr=s(hK);HGe=r(WIr,"megatron-bert"),WIr.forEach(t),UGe=r(zEe," \u2014 "),Mx=n(zEe,"A",{href:!0});var HIr=s(Mx);JGe=r(HIr,"MegatronBertConfig"),HIr.forEach(t),YGe=r(zEe," (MegatronBert model)"),zEe.forEach(t),KGe=i(F),Df=n(F,"LI",{});var QEe=s(Df);uK=n(QEe,"STRONG",{});var UIr=s(uK);ZGe=r(UIr,"mobilebert"),UIr.forEach(t),eOe=r(QEe," \u2014 "),Ex=n(QEe,"A",{href:!0});var JIr=s(Ex);oOe=r(JIr,"MobileBertConfig"),JIr.forEach(t),rOe=r(QEe," (MobileBERT model)"),QEe.forEach(t),tOe=i(F),Gf=n(F,"LI",{});var WEe=s(Gf);pK=n(WEe,"STRONG",{});var YIr=s(pK);aOe=r(YIr,"mpnet"),YIr.forEach(t),nOe=r(WEe," \u2014 "),Cx=n(WEe,"A",{href:!0});var KIr=s(Cx);sOe=r(KIr,"MPNetConfig"),KIr.forEach(t),lOe=r(WEe," (MPNet model)"),WEe.forEach(t),iOe=i(F),Of=n(F,"LI",{});var HEe=s(Of);_K=n(HEe,"STRONG",{});var ZIr=s(_K);dOe=r(ZIr,"mt5"),ZIr.forEach(t),cOe=r(HEe," \u2014 "),wx=n(HEe,"A",{href:!0});var eqr=s(wx);mOe=r(eqr,"MT5Config"),eqr.forEach(t),fOe=r(HEe," (mT5 model)"),HEe.forEach(t),gOe=i(F),Vf=n(F,"LI",{});var UEe=s(Vf);bK=n(UEe,"STRONG",{});var oqr=s(bK);hOe=r(oqr,"nystromformer"),oqr.forEach(t),uOe=r(UEe," \u2014 "),Ax=n(UEe,"A",{href:!0});var rqr=s(Ax);pOe=r(rqr,"NystromformerConfig"),rqr.forEach(t),_Oe=r(UEe," (Nystromformer model)"),UEe.forEach(t),bOe=i(F),Xf=n(F,"LI",{});var JEe=s(Xf);vK=n(JEe,"STRONG",{});var tqr=s(vK);vOe=r(tqr,"openai-gpt"),tqr.forEach(t),FOe=r(JEe," \u2014 "),yx=n(JEe,"A",{href:!0});var aqr=s(yx);TOe=r(aqr,"OpenAIGPTConfig"),aqr.forEach(t),MOe=r(JEe," (OpenAI GPT model)"),JEe.forEach(t),EOe=i(F),zf=n(F,"LI",{});var YEe=s(zf);FK=n(YEe,"STRONG",{});var nqr=s(FK);COe=r(nqr,"pegasus"),nqr.forEach(t),wOe=r(YEe," \u2014 "),Lx=n(YEe,"A",{href:!0});var sqr=s(Lx);AOe=r(sqr,"PegasusConfig"),sqr.forEach(t),yOe=r(YEe," (Pegasus model)"),YEe.forEach(t),LOe=i(F),Qf=n(F,"LI",{});var KEe=s(Qf);TK=n(KEe,"STRONG",{});var lqr=s(TK);xOe=r(lqr,"perceiver"),lqr.forEach(t),kOe=r(KEe," \u2014 "),xx=n(KEe,"A",{href:!0});var iqr=s(xx);SOe=r(iqr,"PerceiverConfig"),iqr.forEach(t),ROe=r(KEe," (Perceiver model)"),KEe.forEach(t),BOe=i(F),Wf=n(F,"LI",{});var ZEe=s(Wf);MK=n(ZEe,"STRONG",{});var dqr=s(MK);POe=r(dqr,"plbart"),dqr.forEach(t),$Oe=r(ZEe," \u2014 "),kx=n(ZEe,"A",{href:!0});var cqr=s(kx);IOe=r(cqr,"PLBartConfig"),cqr.forEach(t),qOe=r(ZEe," (PLBart model)"),ZEe.forEach(t),NOe=i(F),Hf=n(F,"LI",{});var e5e=s(Hf);EK=n(e5e,"STRONG",{});var mqr=s(EK);jOe=r(mqr,"poolformer"),mqr.forEach(t),DOe=r(e5e," \u2014 "),Sx=n(e5e,"A",{href:!0});var fqr=s(Sx);GOe=r(fqr,"PoolFormerConfig"),fqr.forEach(t),OOe=r(e5e," (PoolFormer model)"),e5e.forEach(t),VOe=i(F),Uf=n(F,"LI",{});var o5e=s(Uf);CK=n(o5e,"STRONG",{});var gqr=s(CK);XOe=r(gqr,"prophetnet"),gqr.forEach(t),zOe=r(o5e," \u2014 "),Rx=n(o5e,"A",{href:!0});var hqr=s(Rx);QOe=r(hqr,"ProphetNetConfig"),hqr.forEach(t),WOe=r(o5e," (ProphetNet model)"),o5e.forEach(t),HOe=i(F),Jf=n(F,"LI",{});var r5e=s(Jf);wK=n(r5e,"STRONG",{});var uqr=s(wK);UOe=r(uqr,"qdqbert"),uqr.forEach(t),JOe=r(r5e," \u2014 "),Bx=n(r5e,"A",{href:!0});var pqr=s(Bx);YOe=r(pqr,"QDQBertConfig"),pqr.forEach(t),KOe=r(r5e," (QDQBert model)"),r5e.forEach(t),ZOe=i(F),Yf=n(F,"LI",{});var t5e=s(Yf);AK=n(t5e,"STRONG",{});var _qr=s(AK);eVe=r(_qr,"rag"),_qr.forEach(t),oVe=r(t5e," \u2014 "),Px=n(t5e,"A",{href:!0});var bqr=s(Px);rVe=r(bqr,"RagConfig"),bqr.forEach(t),tVe=r(t5e," (RAG model)"),t5e.forEach(t),aVe=i(F),Kf=n(F,"LI",{});var a5e=s(Kf);yK=n(a5e,"STRONG",{});var vqr=s(yK);nVe=r(vqr,"realm"),vqr.forEach(t),sVe=r(a5e," \u2014 "),$x=n(a5e,"A",{href:!0});var Fqr=s($x);lVe=r(Fqr,"RealmConfig"),Fqr.forEach(t),iVe=r(a5e," (Realm model)"),a5e.forEach(t),dVe=i(F),Zf=n(F,"LI",{});var n5e=s(Zf);LK=n(n5e,"STRONG",{});var Tqr=s(LK);cVe=r(Tqr,"reformer"),Tqr.forEach(t),mVe=r(n5e," \u2014 "),Ix=n(n5e,"A",{href:!0});var Mqr=s(Ix);fVe=r(Mqr,"ReformerConfig"),Mqr.forEach(t),gVe=r(n5e," (Reformer model)"),n5e.forEach(t),hVe=i(F),eg=n(F,"LI",{});var s5e=s(eg);xK=n(s5e,"STRONG",{});var Eqr=s(xK);uVe=r(Eqr,"regnet"),Eqr.forEach(t),pVe=r(s5e," \u2014 "),qx=n(s5e,"A",{href:!0});var Cqr=s(qx);_Ve=r(Cqr,"RegNetConfig"),Cqr.forEach(t),bVe=r(s5e," (RegNet model)"),s5e.forEach(t),vVe=i(F),og=n(F,"LI",{});var l5e=s(og);kK=n(l5e,"STRONG",{});var wqr=s(kK);FVe=r(wqr,"rembert"),wqr.forEach(t),TVe=r(l5e," \u2014 "),Nx=n(l5e,"A",{href:!0});var Aqr=s(Nx);MVe=r(Aqr,"RemBertConfig"),Aqr.forEach(t),EVe=r(l5e," (RemBERT model)"),l5e.forEach(t),CVe=i(F),rg=n(F,"LI",{});var i5e=s(rg);SK=n(i5e,"STRONG",{});var yqr=s(SK);wVe=r(yqr,"resnet"),yqr.forEach(t),AVe=r(i5e," \u2014 "),jx=n(i5e,"A",{href:!0});var Lqr=s(jx);yVe=r(Lqr,"ResNetConfig"),Lqr.forEach(t),LVe=r(i5e," (ResNet model)"),i5e.forEach(t),xVe=i(F),tg=n(F,"LI",{});var d5e=s(tg);RK=n(d5e,"STRONG",{});var xqr=s(RK);kVe=r(xqr,"retribert"),xqr.forEach(t),SVe=r(d5e," \u2014 "),Dx=n(d5e,"A",{href:!0});var kqr=s(Dx);RVe=r(kqr,"RetriBertConfig"),kqr.forEach(t),BVe=r(d5e," (RetriBERT model)"),d5e.forEach(t),PVe=i(F),ag=n(F,"LI",{});var c5e=s(ag);BK=n(c5e,"STRONG",{});var Sqr=s(BK);$Ve=r(Sqr,"roberta"),Sqr.forEach(t),IVe=r(c5e," \u2014 "),Gx=n(c5e,"A",{href:!0});var Rqr=s(Gx);qVe=r(Rqr,"RobertaConfig"),Rqr.forEach(t),NVe=r(c5e," (RoBERTa model)"),c5e.forEach(t),jVe=i(F),ng=n(F,"LI",{});var m5e=s(ng);PK=n(m5e,"STRONG",{});var Bqr=s(PK);DVe=r(Bqr,"roformer"),Bqr.forEach(t),GVe=r(m5e," \u2014 "),Ox=n(m5e,"A",{href:!0});var Pqr=s(Ox);OVe=r(Pqr,"RoFormerConfig"),Pqr.forEach(t),VVe=r(m5e," (RoFormer model)"),m5e.forEach(t),XVe=i(F),sg=n(F,"LI",{});var f5e=s(sg);$K=n(f5e,"STRONG",{});var $qr=s($K);zVe=r($qr,"segformer"),$qr.forEach(t),QVe=r(f5e," \u2014 "),Vx=n(f5e,"A",{href:!0});var Iqr=s(Vx);WVe=r(Iqr,"SegformerConfig"),Iqr.forEach(t),HVe=r(f5e," (SegFormer model)"),f5e.forEach(t),UVe=i(F),lg=n(F,"LI",{});var g5e=s(lg);IK=n(g5e,"STRONG",{});var qqr=s(IK);JVe=r(qqr,"sew"),qqr.forEach(t),YVe=r(g5e," \u2014 "),Xx=n(g5e,"A",{href:!0});var Nqr=s(Xx);KVe=r(Nqr,"SEWConfig"),Nqr.forEach(t),ZVe=r(g5e," (SEW model)"),g5e.forEach(t),eXe=i(F),ig=n(F,"LI",{});var h5e=s(ig);qK=n(h5e,"STRONG",{});var jqr=s(qK);oXe=r(jqr,"sew-d"),jqr.forEach(t),rXe=r(h5e," \u2014 "),zx=n(h5e,"A",{href:!0});var Dqr=s(zx);tXe=r(Dqr,"SEWDConfig"),Dqr.forEach(t),aXe=r(h5e," (SEW-D model)"),h5e.forEach(t),nXe=i(F),dg=n(F,"LI",{});var u5e=s(dg);NK=n(u5e,"STRONG",{});var Gqr=s(NK);sXe=r(Gqr,"speech-encoder-decoder"),Gqr.forEach(t),lXe=r(u5e," \u2014 "),Qx=n(u5e,"A",{href:!0});var Oqr=s(Qx);iXe=r(Oqr,"SpeechEncoderDecoderConfig"),Oqr.forEach(t),dXe=r(u5e," (Speech Encoder decoder model)"),u5e.forEach(t),cXe=i(F),cg=n(F,"LI",{});var p5e=s(cg);jK=n(p5e,"STRONG",{});var Vqr=s(jK);mXe=r(Vqr,"speech_to_text"),Vqr.forEach(t),fXe=r(p5e," \u2014 "),Wx=n(p5e,"A",{href:!0});var Xqr=s(Wx);gXe=r(Xqr,"Speech2TextConfig"),Xqr.forEach(t),hXe=r(p5e," (Speech2Text model)"),p5e.forEach(t),uXe=i(F),mg=n(F,"LI",{});var _5e=s(mg);DK=n(_5e,"STRONG",{});var zqr=s(DK);pXe=r(zqr,"speech_to_text_2"),zqr.forEach(t),_Xe=r(_5e," \u2014 "),Hx=n(_5e,"A",{href:!0});var Qqr=s(Hx);bXe=r(Qqr,"Speech2Text2Config"),Qqr.forEach(t),vXe=r(_5e," (Speech2Text2 model)"),_5e.forEach(t),FXe=i(F),fg=n(F,"LI",{});var b5e=s(fg);GK=n(b5e,"STRONG",{});var Wqr=s(GK);TXe=r(Wqr,"splinter"),Wqr.forEach(t),MXe=r(b5e," \u2014 "),Ux=n(b5e,"A",{href:!0});var Hqr=s(Ux);EXe=r(Hqr,"SplinterConfig"),Hqr.forEach(t),CXe=r(b5e," (Splinter model)"),b5e.forEach(t),wXe=i(F),gg=n(F,"LI",{});var v5e=s(gg);OK=n(v5e,"STRONG",{});var Uqr=s(OK);AXe=r(Uqr,"squeezebert"),Uqr.forEach(t),yXe=r(v5e," \u2014 "),Jx=n(v5e,"A",{href:!0});var Jqr=s(Jx);LXe=r(Jqr,"SqueezeBertConfig"),Jqr.forEach(t),xXe=r(v5e," (SqueezeBERT model)"),v5e.forEach(t),kXe=i(F),hg=n(F,"LI",{});var F5e=s(hg);VK=n(F5e,"STRONG",{});var Yqr=s(VK);SXe=r(Yqr,"swin"),Yqr.forEach(t),RXe=r(F5e," \u2014 "),Yx=n(F5e,"A",{href:!0});var Kqr=s(Yx);BXe=r(Kqr,"SwinConfig"),Kqr.forEach(t),PXe=r(F5e," (Swin model)"),F5e.forEach(t),$Xe=i(F),ug=n(F,"LI",{});var T5e=s(ug);XK=n(T5e,"STRONG",{});var Zqr=s(XK);IXe=r(Zqr,"t5"),Zqr.forEach(t),qXe=r(T5e," \u2014 "),Kx=n(T5e,"A",{href:!0});var eNr=s(Kx);NXe=r(eNr,"T5Config"),eNr.forEach(t),jXe=r(T5e," (T5 model)"),T5e.forEach(t),DXe=i(F),pg=n(F,"LI",{});var M5e=s(pg);zK=n(M5e,"STRONG",{});var oNr=s(zK);GXe=r(oNr,"tapas"),oNr.forEach(t),OXe=r(M5e," \u2014 "),Zx=n(M5e,"A",{href:!0});var rNr=s(Zx);VXe=r(rNr,"TapasConfig"),rNr.forEach(t),XXe=r(M5e," (TAPAS model)"),M5e.forEach(t),zXe=i(F),_g=n(F,"LI",{});var E5e=s(_g);QK=n(E5e,"STRONG",{});var tNr=s(QK);QXe=r(tNr,"tapex"),tNr.forEach(t),WXe=r(E5e," \u2014 "),ek=n(E5e,"A",{href:!0});var aNr=s(ek);HXe=r(aNr,"BartConfig"),aNr.forEach(t),UXe=r(E5e," (TAPEX model)"),E5e.forEach(t),JXe=i(F),bg=n(F,"LI",{});var C5e=s(bg);WK=n(C5e,"STRONG",{});var nNr=s(WK);YXe=r(nNr,"transfo-xl"),nNr.forEach(t),KXe=r(C5e," \u2014 "),ok=n(C5e,"A",{href:!0});var sNr=s(ok);ZXe=r(sNr,"TransfoXLConfig"),sNr.forEach(t),eze=r(C5e," (Transformer-XL model)"),C5e.forEach(t),oze=i(F),vg=n(F,"LI",{});var w5e=s(vg);HK=n(w5e,"STRONG",{});var lNr=s(HK);rze=r(lNr,"trocr"),lNr.forEach(t),tze=r(w5e," \u2014 "),rk=n(w5e,"A",{href:!0});var iNr=s(rk);aze=r(iNr,"TrOCRConfig"),iNr.forEach(t),nze=r(w5e," (TrOCR model)"),w5e.forEach(t),sze=i(F),Fg=n(F,"LI",{});var A5e=s(Fg);UK=n(A5e,"STRONG",{});var dNr=s(UK);lze=r(dNr,"unispeech"),dNr.forEach(t),ize=r(A5e," \u2014 "),tk=n(A5e,"A",{href:!0});var cNr=s(tk);dze=r(cNr,"UniSpeechConfig"),cNr.forEach(t),cze=r(A5e," (UniSpeech model)"),A5e.forEach(t),mze=i(F),Tg=n(F,"LI",{});var y5e=s(Tg);JK=n(y5e,"STRONG",{});var mNr=s(JK);fze=r(mNr,"unispeech-sat"),mNr.forEach(t),gze=r(y5e," \u2014 "),ak=n(y5e,"A",{href:!0});var fNr=s(ak);hze=r(fNr,"UniSpeechSatConfig"),fNr.forEach(t),uze=r(y5e," (UniSpeechSat model)"),y5e.forEach(t),pze=i(F),Mg=n(F,"LI",{});var L5e=s(Mg);YK=n(L5e,"STRONG",{});var gNr=s(YK);_ze=r(gNr,"van"),gNr.forEach(t),bze=r(L5e," \u2014 "),nk=n(L5e,"A",{href:!0});var hNr=s(nk);vze=r(hNr,"VanConfig"),hNr.forEach(t),Fze=r(L5e," (VAN model)"),L5e.forEach(t),Tze=i(F),Eg=n(F,"LI",{});var x5e=s(Eg);KK=n(x5e,"STRONG",{});var uNr=s(KK);Mze=r(uNr,"vilt"),uNr.forEach(t),Eze=r(x5e," \u2014 "),sk=n(x5e,"A",{href:!0});var pNr=s(sk);Cze=r(pNr,"ViltConfig"),pNr.forEach(t),wze=r(x5e," (ViLT model)"),x5e.forEach(t),Aze=i(F),Cg=n(F,"LI",{});var k5e=s(Cg);ZK=n(k5e,"STRONG",{});var _Nr=s(ZK);yze=r(_Nr,"vision-encoder-decoder"),_Nr.forEach(t),Lze=r(k5e," \u2014 "),lk=n(k5e,"A",{href:!0});var bNr=s(lk);xze=r(bNr,"VisionEncoderDecoderConfig"),bNr.forEach(t),kze=r(k5e," (Vision Encoder decoder model)"),k5e.forEach(t),Sze=i(F),wg=n(F,"LI",{});var S5e=s(wg);eZ=n(S5e,"STRONG",{});var vNr=s(eZ);Rze=r(vNr,"vision-text-dual-encoder"),vNr.forEach(t),Bze=r(S5e," \u2014 "),ik=n(S5e,"A",{href:!0});var FNr=s(ik);Pze=r(FNr,"VisionTextDualEncoderConfig"),FNr.forEach(t),$ze=r(S5e," (VisionTextDualEncoder model)"),S5e.forEach(t),Ize=i(F),Ag=n(F,"LI",{});var R5e=s(Ag);oZ=n(R5e,"STRONG",{});var TNr=s(oZ);qze=r(TNr,"visual_bert"),TNr.forEach(t),Nze=r(R5e," \u2014 "),dk=n(R5e,"A",{href:!0});var MNr=s(dk);jze=r(MNr,"VisualBertConfig"),MNr.forEach(t),Dze=r(R5e," (VisualBert model)"),R5e.forEach(t),Gze=i(F),yg=n(F,"LI",{});var B5e=s(yg);rZ=n(B5e,"STRONG",{});var ENr=s(rZ);Oze=r(ENr,"vit"),ENr.forEach(t),Vze=r(B5e," \u2014 "),ck=n(B5e,"A",{href:!0});var CNr=s(ck);Xze=r(CNr,"ViTConfig"),CNr.forEach(t),zze=r(B5e," (ViT model)"),B5e.forEach(t),Qze=i(F),Lg=n(F,"LI",{});var P5e=s(Lg);tZ=n(P5e,"STRONG",{});var wNr=s(tZ);Wze=r(wNr,"vit_mae"),wNr.forEach(t),Hze=r(P5e," \u2014 "),mk=n(P5e,"A",{href:!0});var ANr=s(mk);Uze=r(ANr,"ViTMAEConfig"),ANr.forEach(t),Jze=r(P5e," (ViTMAE model)"),P5e.forEach(t),Yze=i(F),xg=n(F,"LI",{});var $5e=s(xg);aZ=n($5e,"STRONG",{});var yNr=s(aZ);Kze=r(yNr,"wav2vec2"),yNr.forEach(t),Zze=r($5e," \u2014 "),fk=n($5e,"A",{href:!0});var LNr=s(fk);eQe=r(LNr,"Wav2Vec2Config"),LNr.forEach(t),oQe=r($5e," (Wav2Vec2 model)"),$5e.forEach(t),rQe=i(F),kg=n(F,"LI",{});var I5e=s(kg);nZ=n(I5e,"STRONG",{});var xNr=s(nZ);tQe=r(xNr,"wavlm"),xNr.forEach(t),aQe=r(I5e," \u2014 "),gk=n(I5e,"A",{href:!0});var kNr=s(gk);nQe=r(kNr,"WavLMConfig"),kNr.forEach(t),sQe=r(I5e," (WavLM model)"),I5e.forEach(t),lQe=i(F),Sg=n(F,"LI",{});var q5e=s(Sg);sZ=n(q5e,"STRONG",{});var SNr=s(sZ);iQe=r(SNr,"xglm"),SNr.forEach(t),dQe=r(q5e," \u2014 "),hk=n(q5e,"A",{href:!0});var RNr=s(hk);cQe=r(RNr,"XGLMConfig"),RNr.forEach(t),mQe=r(q5e," (XGLM model)"),q5e.forEach(t),fQe=i(F),Rg=n(F,"LI",{});var N5e=s(Rg);lZ=n(N5e,"STRONG",{});var BNr=s(lZ);gQe=r(BNr,"xlm"),BNr.forEach(t),hQe=r(N5e," \u2014 "),uk=n(N5e,"A",{href:!0});var PNr=s(uk);uQe=r(PNr,"XLMConfig"),PNr.forEach(t),pQe=r(N5e," (XLM model)"),N5e.forEach(t),_Qe=i(F),Bg=n(F,"LI",{});var j5e=s(Bg);iZ=n(j5e,"STRONG",{});var $Nr=s(iZ);bQe=r($Nr,"xlm-prophetnet"),$Nr.forEach(t),vQe=r(j5e," \u2014 "),pk=n(j5e,"A",{href:!0});var INr=s(pk);FQe=r(INr,"XLMProphetNetConfig"),INr.forEach(t),TQe=r(j5e," (XLMProphetNet model)"),j5e.forEach(t),MQe=i(F),Pg=n(F,"LI",{});var D5e=s(Pg);dZ=n(D5e,"STRONG",{});var qNr=s(dZ);EQe=r(qNr,"xlm-roberta"),qNr.forEach(t),CQe=r(D5e," \u2014 "),_k=n(D5e,"A",{href:!0});var NNr=s(_k);wQe=r(NNr,"XLMRobertaConfig"),NNr.forEach(t),AQe=r(D5e," (XLM-RoBERTa model)"),D5e.forEach(t),yQe=i(F),$g=n(F,"LI",{});var G5e=s($g);cZ=n(G5e,"STRONG",{});var jNr=s(cZ);LQe=r(jNr,"xlm-roberta-xl"),jNr.forEach(t),xQe=r(G5e," \u2014 "),bk=n(G5e,"A",{href:!0});var DNr=s(bk);kQe=r(DNr,"XLMRobertaXLConfig"),DNr.forEach(t),SQe=r(G5e," (XLM-RoBERTa-XL model)"),G5e.forEach(t),RQe=i(F),Ig=n(F,"LI",{});var O5e=s(Ig);mZ=n(O5e,"STRONG",{});var GNr=s(mZ);BQe=r(GNr,"xlnet"),GNr.forEach(t),PQe=r(O5e," \u2014 "),vk=n(O5e,"A",{href:!0});var ONr=s(vk);$Qe=r(ONr,"XLNetConfig"),ONr.forEach(t),IQe=r(O5e," (XLNet model)"),O5e.forEach(t),qQe=i(F),qg=n(F,"LI",{});var V5e=s(qg);fZ=n(V5e,"STRONG",{});var VNr=s(fZ);NQe=r(VNr,"yoso"),VNr.forEach(t),jQe=r(V5e," \u2014 "),Fk=n(V5e,"A",{href:!0});var XNr=s(Fk);DQe=r(XNr,"YosoConfig"),XNr.forEach(t),GQe=r(V5e," (YOSO model)"),V5e.forEach(t),F.forEach(t),OQe=i(ga),gZ=n(ga,"P",{});var zNr=s(gZ);VQe=r(zNr,"Examples:"),zNr.forEach(t),XQe=i(ga),f(jw.$$.fragment,ga),ga.forEach(t),zQe=i(Vs),Ng=n(Vs,"DIV",{class:!0});var DPe=s(Ng);f(Dw.$$.fragment,DPe),QQe=i(DPe),hZ=n(DPe,"P",{});var QNr=s(hZ);WQe=r(QNr,"Register a new configuration for this class."),QNr.forEach(t),DPe.forEach(t),Vs.forEach(t),NRe=i(c),Wi=n(c,"H2",{class:!0});var GPe=s(Wi);jg=n(GPe,"A",{id:!0,class:!0,href:!0});var WNr=s(jg);uZ=n(WNr,"SPAN",{});var HNr=s(uZ);f(Gw.$$.fragment,HNr),HNr.forEach(t),WNr.forEach(t),HQe=i(GPe),pZ=n(GPe,"SPAN",{});var UNr=s(pZ);UQe=r(UNr,"AutoTokenizer"),UNr.forEach(t),GPe.forEach(t),jRe=i(c),Wo=n(c,"DIV",{class:!0});var Xs=s(Wo);f(Ow.$$.fragment,Xs),JQe=i(Xs),Vw=n(Xs,"P",{});var OPe=s(Vw);YQe=r(OPe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),Tk=n(OPe,"A",{href:!0});var JNr=s(Tk);KQe=r(JNr,"AutoTokenizer.from_pretrained()"),JNr.forEach(t),ZQe=r(OPe," class method."),OPe.forEach(t),eWe=i(Xs),Xw=n(Xs,"P",{});var VPe=s(Xw);oWe=r(VPe,"This class cannot be instantiated directly using "),_Z=n(VPe,"CODE",{});var YNr=s(_Z);rWe=r(YNr,"__init__()"),YNr.forEach(t),tWe=r(VPe," (throws an error)."),VPe.forEach(t),aWe=i(Xs),go=n(Xs,"DIV",{class:!0});var ha=s(go);f(zw.$$.fragment,ha),nWe=i(ha),bZ=n(ha,"P",{});var KNr=s(bZ);sWe=r(KNr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),KNr.forEach(t),lWe=i(ha),Oa=n(ha,"P",{});var xC=s(Oa);iWe=r(xC,"The tokenizer class to instantiate is selected based on the "),vZ=n(xC,"CODE",{});var ZNr=s(vZ);dWe=r(ZNr,"model_type"),ZNr.forEach(t),cWe=r(xC,` property of the config object (either
passed as an argument or loaded from `),FZ=n(xC,"CODE",{});var ejr=s(FZ);mWe=r(ejr,"pretrained_model_name_or_path"),ejr.forEach(t),fWe=r(xC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),TZ=n(xC,"CODE",{});var ojr=s(TZ);gWe=r(ojr,"pretrained_model_name_or_path"),ojr.forEach(t),hWe=r(xC,":"),xC.forEach(t),uWe=i(ha),E=n(ha,"UL",{});var w=s(E);Wn=n(w,"LI",{});var C7=s(Wn);MZ=n(C7,"STRONG",{});var rjr=s(MZ);pWe=r(rjr,"albert"),rjr.forEach(t),_We=r(C7," \u2014 "),Mk=n(C7,"A",{href:!0});var tjr=s(Mk);bWe=r(tjr,"AlbertTokenizer"),tjr.forEach(t),vWe=r(C7," or "),Ek=n(C7,"A",{href:!0});var ajr=s(Ek);FWe=r(ajr,"AlbertTokenizerFast"),ajr.forEach(t),TWe=r(C7," (ALBERT model)"),C7.forEach(t),MWe=i(w),Hn=n(w,"LI",{});var w7=s(Hn);EZ=n(w7,"STRONG",{});var njr=s(EZ);EWe=r(njr,"bart"),njr.forEach(t),CWe=r(w7," \u2014 "),Ck=n(w7,"A",{href:!0});var sjr=s(Ck);wWe=r(sjr,"BartTokenizer"),sjr.forEach(t),AWe=r(w7," or "),wk=n(w7,"A",{href:!0});var ljr=s(wk);yWe=r(ljr,"BartTokenizerFast"),ljr.forEach(t),LWe=r(w7," (BART model)"),w7.forEach(t),xWe=i(w),Un=n(w,"LI",{});var A7=s(Un);CZ=n(A7,"STRONG",{});var ijr=s(CZ);kWe=r(ijr,"barthez"),ijr.forEach(t),SWe=r(A7," \u2014 "),Ak=n(A7,"A",{href:!0});var djr=s(Ak);RWe=r(djr,"BarthezTokenizer"),djr.forEach(t),BWe=r(A7," or "),yk=n(A7,"A",{href:!0});var cjr=s(yk);PWe=r(cjr,"BarthezTokenizerFast"),cjr.forEach(t),$We=r(A7," (BARThez model)"),A7.forEach(t),IWe=i(w),Dg=n(w,"LI",{});var X5e=s(Dg);wZ=n(X5e,"STRONG",{});var mjr=s(wZ);qWe=r(mjr,"bartpho"),mjr.forEach(t),NWe=r(X5e," \u2014 "),Lk=n(X5e,"A",{href:!0});var fjr=s(Lk);jWe=r(fjr,"BartphoTokenizer"),fjr.forEach(t),DWe=r(X5e," (BARTpho model)"),X5e.forEach(t),GWe=i(w),Jn=n(w,"LI",{});var y7=s(Jn);AZ=n(y7,"STRONG",{});var gjr=s(AZ);OWe=r(gjr,"bert"),gjr.forEach(t),VWe=r(y7," \u2014 "),xk=n(y7,"A",{href:!0});var hjr=s(xk);XWe=r(hjr,"BertTokenizer"),hjr.forEach(t),zWe=r(y7," or "),kk=n(y7,"A",{href:!0});var ujr=s(kk);QWe=r(ujr,"BertTokenizerFast"),ujr.forEach(t),WWe=r(y7," (BERT model)"),y7.forEach(t),HWe=i(w),Gg=n(w,"LI",{});var z5e=s(Gg);yZ=n(z5e,"STRONG",{});var pjr=s(yZ);UWe=r(pjr,"bert-generation"),pjr.forEach(t),JWe=r(z5e," \u2014 "),Sk=n(z5e,"A",{href:!0});var _jr=s(Sk);YWe=r(_jr,"BertGenerationTokenizer"),_jr.forEach(t),KWe=r(z5e," (Bert Generation model)"),z5e.forEach(t),ZWe=i(w),Og=n(w,"LI",{});var Q5e=s(Og);LZ=n(Q5e,"STRONG",{});var bjr=s(LZ);eHe=r(bjr,"bert-japanese"),bjr.forEach(t),oHe=r(Q5e," \u2014 "),Rk=n(Q5e,"A",{href:!0});var vjr=s(Rk);rHe=r(vjr,"BertJapaneseTokenizer"),vjr.forEach(t),tHe=r(Q5e," (BertJapanese model)"),Q5e.forEach(t),aHe=i(w),Vg=n(w,"LI",{});var W5e=s(Vg);xZ=n(W5e,"STRONG",{});var Fjr=s(xZ);nHe=r(Fjr,"bertweet"),Fjr.forEach(t),sHe=r(W5e," \u2014 "),Bk=n(W5e,"A",{href:!0});var Tjr=s(Bk);lHe=r(Tjr,"BertweetTokenizer"),Tjr.forEach(t),iHe=r(W5e," (Bertweet model)"),W5e.forEach(t),dHe=i(w),Yn=n(w,"LI",{});var L7=s(Yn);kZ=n(L7,"STRONG",{});var Mjr=s(kZ);cHe=r(Mjr,"big_bird"),Mjr.forEach(t),mHe=r(L7," \u2014 "),Pk=n(L7,"A",{href:!0});var Ejr=s(Pk);fHe=r(Ejr,"BigBirdTokenizer"),Ejr.forEach(t),gHe=r(L7," or "),$k=n(L7,"A",{href:!0});var Cjr=s($k);hHe=r(Cjr,"BigBirdTokenizerFast"),Cjr.forEach(t),uHe=r(L7," (BigBird model)"),L7.forEach(t),pHe=i(w),Kn=n(w,"LI",{});var x7=s(Kn);SZ=n(x7,"STRONG",{});var wjr=s(SZ);_He=r(wjr,"bigbird_pegasus"),wjr.forEach(t),bHe=r(x7," \u2014 "),Ik=n(x7,"A",{href:!0});var Ajr=s(Ik);vHe=r(Ajr,"PegasusTokenizer"),Ajr.forEach(t),FHe=r(x7," or "),qk=n(x7,"A",{href:!0});var yjr=s(qk);THe=r(yjr,"PegasusTokenizerFast"),yjr.forEach(t),MHe=r(x7," (BigBirdPegasus model)"),x7.forEach(t),EHe=i(w),Zn=n(w,"LI",{});var k7=s(Zn);RZ=n(k7,"STRONG",{});var Ljr=s(RZ);CHe=r(Ljr,"blenderbot"),Ljr.forEach(t),wHe=r(k7," \u2014 "),Nk=n(k7,"A",{href:!0});var xjr=s(Nk);AHe=r(xjr,"BlenderbotTokenizer"),xjr.forEach(t),yHe=r(k7," or "),jk=n(k7,"A",{href:!0});var kjr=s(jk);LHe=r(kjr,"BlenderbotTokenizerFast"),kjr.forEach(t),xHe=r(k7," (Blenderbot model)"),k7.forEach(t),kHe=i(w),Xg=n(w,"LI",{});var H5e=s(Xg);BZ=n(H5e,"STRONG",{});var Sjr=s(BZ);SHe=r(Sjr,"blenderbot-small"),Sjr.forEach(t),RHe=r(H5e," \u2014 "),Dk=n(H5e,"A",{href:!0});var Rjr=s(Dk);BHe=r(Rjr,"BlenderbotSmallTokenizer"),Rjr.forEach(t),PHe=r(H5e," (BlenderbotSmall model)"),H5e.forEach(t),$He=i(w),zg=n(w,"LI",{});var U5e=s(zg);PZ=n(U5e,"STRONG",{});var Bjr=s(PZ);IHe=r(Bjr,"byt5"),Bjr.forEach(t),qHe=r(U5e," \u2014 "),Gk=n(U5e,"A",{href:!0});var Pjr=s(Gk);NHe=r(Pjr,"ByT5Tokenizer"),Pjr.forEach(t),jHe=r(U5e," (ByT5 model)"),U5e.forEach(t),DHe=i(w),es=n(w,"LI",{});var S7=s(es);$Z=n(S7,"STRONG",{});var $jr=s($Z);GHe=r($jr,"camembert"),$jr.forEach(t),OHe=r(S7," \u2014 "),Ok=n(S7,"A",{href:!0});var Ijr=s(Ok);VHe=r(Ijr,"CamembertTokenizer"),Ijr.forEach(t),XHe=r(S7," or "),Vk=n(S7,"A",{href:!0});var qjr=s(Vk);zHe=r(qjr,"CamembertTokenizerFast"),qjr.forEach(t),QHe=r(S7," (CamemBERT model)"),S7.forEach(t),WHe=i(w),Qg=n(w,"LI",{});var J5e=s(Qg);IZ=n(J5e,"STRONG",{});var Njr=s(IZ);HHe=r(Njr,"canine"),Njr.forEach(t),UHe=r(J5e," \u2014 "),Xk=n(J5e,"A",{href:!0});var jjr=s(Xk);JHe=r(jjr,"CanineTokenizer"),jjr.forEach(t),YHe=r(J5e," (Canine model)"),J5e.forEach(t),KHe=i(w),os=n(w,"LI",{});var R7=s(os);qZ=n(R7,"STRONG",{});var Djr=s(qZ);ZHe=r(Djr,"clip"),Djr.forEach(t),eUe=r(R7," \u2014 "),zk=n(R7,"A",{href:!0});var Gjr=s(zk);oUe=r(Gjr,"CLIPTokenizer"),Gjr.forEach(t),rUe=r(R7," or "),Qk=n(R7,"A",{href:!0});var Ojr=s(Qk);tUe=r(Ojr,"CLIPTokenizerFast"),Ojr.forEach(t),aUe=r(R7," (CLIP model)"),R7.forEach(t),nUe=i(w),rs=n(w,"LI",{});var B7=s(rs);NZ=n(B7,"STRONG",{});var Vjr=s(NZ);sUe=r(Vjr,"convbert"),Vjr.forEach(t),lUe=r(B7," \u2014 "),Wk=n(B7,"A",{href:!0});var Xjr=s(Wk);iUe=r(Xjr,"ConvBertTokenizer"),Xjr.forEach(t),dUe=r(B7," or "),Hk=n(B7,"A",{href:!0});var zjr=s(Hk);cUe=r(zjr,"ConvBertTokenizerFast"),zjr.forEach(t),mUe=r(B7," (ConvBERT model)"),B7.forEach(t),fUe=i(w),ts=n(w,"LI",{});var P7=s(ts);jZ=n(P7,"STRONG",{});var Qjr=s(jZ);gUe=r(Qjr,"cpm"),Qjr.forEach(t),hUe=r(P7," \u2014 "),Uk=n(P7,"A",{href:!0});var Wjr=s(Uk);uUe=r(Wjr,"CpmTokenizer"),Wjr.forEach(t),pUe=r(P7," or "),DZ=n(P7,"CODE",{});var Hjr=s(DZ);_Ue=r(Hjr,"CpmTokenizerFast"),Hjr.forEach(t),bUe=r(P7," (CPM model)"),P7.forEach(t),vUe=i(w),Wg=n(w,"LI",{});var Y5e=s(Wg);GZ=n(Y5e,"STRONG",{});var Ujr=s(GZ);FUe=r(Ujr,"ctrl"),Ujr.forEach(t),TUe=r(Y5e," \u2014 "),Jk=n(Y5e,"A",{href:!0});var Jjr=s(Jk);MUe=r(Jjr,"CTRLTokenizer"),Jjr.forEach(t),EUe=r(Y5e," (CTRL model)"),Y5e.forEach(t),CUe=i(w),as=n(w,"LI",{});var $7=s(as);OZ=n($7,"STRONG",{});var Yjr=s(OZ);wUe=r(Yjr,"deberta"),Yjr.forEach(t),AUe=r($7," \u2014 "),Yk=n($7,"A",{href:!0});var Kjr=s(Yk);yUe=r(Kjr,"DebertaTokenizer"),Kjr.forEach(t),LUe=r($7," or "),Kk=n($7,"A",{href:!0});var Zjr=s(Kk);xUe=r(Zjr,"DebertaTokenizerFast"),Zjr.forEach(t),kUe=r($7," (DeBERTa model)"),$7.forEach(t),SUe=i(w),Hg=n(w,"LI",{});var K5e=s(Hg);VZ=n(K5e,"STRONG",{});var eDr=s(VZ);RUe=r(eDr,"deberta-v2"),eDr.forEach(t),BUe=r(K5e," \u2014 "),Zk=n(K5e,"A",{href:!0});var oDr=s(Zk);PUe=r(oDr,"DebertaV2Tokenizer"),oDr.forEach(t),$Ue=r(K5e," (DeBERTa-v2 model)"),K5e.forEach(t),IUe=i(w),ns=n(w,"LI",{});var I7=s(ns);XZ=n(I7,"STRONG",{});var rDr=s(XZ);qUe=r(rDr,"distilbert"),rDr.forEach(t),NUe=r(I7," \u2014 "),eS=n(I7,"A",{href:!0});var tDr=s(eS);jUe=r(tDr,"DistilBertTokenizer"),tDr.forEach(t),DUe=r(I7," or "),oS=n(I7,"A",{href:!0});var aDr=s(oS);GUe=r(aDr,"DistilBertTokenizerFast"),aDr.forEach(t),OUe=r(I7," (DistilBERT model)"),I7.forEach(t),VUe=i(w),ss=n(w,"LI",{});var q7=s(ss);zZ=n(q7,"STRONG",{});var nDr=s(zZ);XUe=r(nDr,"dpr"),nDr.forEach(t),zUe=r(q7," \u2014 "),rS=n(q7,"A",{href:!0});var sDr=s(rS);QUe=r(sDr,"DPRQuestionEncoderTokenizer"),sDr.forEach(t),WUe=r(q7," or "),tS=n(q7,"A",{href:!0});var lDr=s(tS);HUe=r(lDr,"DPRQuestionEncoderTokenizerFast"),lDr.forEach(t),UUe=r(q7," (DPR model)"),q7.forEach(t),JUe=i(w),ls=n(w,"LI",{});var N7=s(ls);QZ=n(N7,"STRONG",{});var iDr=s(QZ);YUe=r(iDr,"electra"),iDr.forEach(t),KUe=r(N7," \u2014 "),aS=n(N7,"A",{href:!0});var dDr=s(aS);ZUe=r(dDr,"ElectraTokenizer"),dDr.forEach(t),eJe=r(N7," or "),nS=n(N7,"A",{href:!0});var cDr=s(nS);oJe=r(cDr,"ElectraTokenizerFast"),cDr.forEach(t),rJe=r(N7," (ELECTRA model)"),N7.forEach(t),tJe=i(w),Ug=n(w,"LI",{});var Z5e=s(Ug);WZ=n(Z5e,"STRONG",{});var mDr=s(WZ);aJe=r(mDr,"flaubert"),mDr.forEach(t),nJe=r(Z5e," \u2014 "),sS=n(Z5e,"A",{href:!0});var fDr=s(sS);sJe=r(fDr,"FlaubertTokenizer"),fDr.forEach(t),lJe=r(Z5e," (FlauBERT model)"),Z5e.forEach(t),iJe=i(w),is=n(w,"LI",{});var j7=s(is);HZ=n(j7,"STRONG",{});var gDr=s(HZ);dJe=r(gDr,"fnet"),gDr.forEach(t),cJe=r(j7," \u2014 "),lS=n(j7,"A",{href:!0});var hDr=s(lS);mJe=r(hDr,"FNetTokenizer"),hDr.forEach(t),fJe=r(j7," or "),iS=n(j7,"A",{href:!0});var uDr=s(iS);gJe=r(uDr,"FNetTokenizerFast"),uDr.forEach(t),hJe=r(j7," (FNet model)"),j7.forEach(t),uJe=i(w),Jg=n(w,"LI",{});var e3e=s(Jg);UZ=n(e3e,"STRONG",{});var pDr=s(UZ);pJe=r(pDr,"fsmt"),pDr.forEach(t),_Je=r(e3e," \u2014 "),dS=n(e3e,"A",{href:!0});var _Dr=s(dS);bJe=r(_Dr,"FSMTTokenizer"),_Dr.forEach(t),vJe=r(e3e," (FairSeq Machine-Translation model)"),e3e.forEach(t),FJe=i(w),ds=n(w,"LI",{});var D7=s(ds);JZ=n(D7,"STRONG",{});var bDr=s(JZ);TJe=r(bDr,"funnel"),bDr.forEach(t),MJe=r(D7," \u2014 "),cS=n(D7,"A",{href:!0});var vDr=s(cS);EJe=r(vDr,"FunnelTokenizer"),vDr.forEach(t),CJe=r(D7," or "),mS=n(D7,"A",{href:!0});var FDr=s(mS);wJe=r(FDr,"FunnelTokenizerFast"),FDr.forEach(t),AJe=r(D7," (Funnel Transformer model)"),D7.forEach(t),yJe=i(w),cs=n(w,"LI",{});var G7=s(cs);YZ=n(G7,"STRONG",{});var TDr=s(YZ);LJe=r(TDr,"gpt2"),TDr.forEach(t),xJe=r(G7," \u2014 "),fS=n(G7,"A",{href:!0});var MDr=s(fS);kJe=r(MDr,"GPT2Tokenizer"),MDr.forEach(t),SJe=r(G7," or "),gS=n(G7,"A",{href:!0});var EDr=s(gS);RJe=r(EDr,"GPT2TokenizerFast"),EDr.forEach(t),BJe=r(G7," (OpenAI GPT-2 model)"),G7.forEach(t),PJe=i(w),ms=n(w,"LI",{});var O7=s(ms);KZ=n(O7,"STRONG",{});var CDr=s(KZ);$Je=r(CDr,"gpt_neo"),CDr.forEach(t),IJe=r(O7," \u2014 "),hS=n(O7,"A",{href:!0});var wDr=s(hS);qJe=r(wDr,"GPT2Tokenizer"),wDr.forEach(t),NJe=r(O7," or "),uS=n(O7,"A",{href:!0});var ADr=s(uS);jJe=r(ADr,"GPT2TokenizerFast"),ADr.forEach(t),DJe=r(O7," (GPT Neo model)"),O7.forEach(t),GJe=i(w),fs=n(w,"LI",{});var V7=s(fs);ZZ=n(V7,"STRONG",{});var yDr=s(ZZ);OJe=r(yDr,"herbert"),yDr.forEach(t),VJe=r(V7," \u2014 "),pS=n(V7,"A",{href:!0});var LDr=s(pS);XJe=r(LDr,"HerbertTokenizer"),LDr.forEach(t),zJe=r(V7," or "),_S=n(V7,"A",{href:!0});var xDr=s(_S);QJe=r(xDr,"HerbertTokenizerFast"),xDr.forEach(t),WJe=r(V7," (HerBERT model)"),V7.forEach(t),HJe=i(w),Yg=n(w,"LI",{});var o3e=s(Yg);eee=n(o3e,"STRONG",{});var kDr=s(eee);UJe=r(kDr,"hubert"),kDr.forEach(t),JJe=r(o3e," \u2014 "),bS=n(o3e,"A",{href:!0});var SDr=s(bS);YJe=r(SDr,"Wav2Vec2CTCTokenizer"),SDr.forEach(t),KJe=r(o3e," (Hubert model)"),o3e.forEach(t),ZJe=i(w),gs=n(w,"LI",{});var X7=s(gs);oee=n(X7,"STRONG",{});var RDr=s(oee);eYe=r(RDr,"ibert"),RDr.forEach(t),oYe=r(X7," \u2014 "),vS=n(X7,"A",{href:!0});var BDr=s(vS);rYe=r(BDr,"RobertaTokenizer"),BDr.forEach(t),tYe=r(X7," or "),FS=n(X7,"A",{href:!0});var PDr=s(FS);aYe=r(PDr,"RobertaTokenizerFast"),PDr.forEach(t),nYe=r(X7," (I-BERT model)"),X7.forEach(t),sYe=i(w),hs=n(w,"LI",{});var z7=s(hs);ree=n(z7,"STRONG",{});var $Dr=s(ree);lYe=r($Dr,"layoutlm"),$Dr.forEach(t),iYe=r(z7," \u2014 "),TS=n(z7,"A",{href:!0});var IDr=s(TS);dYe=r(IDr,"LayoutLMTokenizer"),IDr.forEach(t),cYe=r(z7," or "),MS=n(z7,"A",{href:!0});var qDr=s(MS);mYe=r(qDr,"LayoutLMTokenizerFast"),qDr.forEach(t),fYe=r(z7," (LayoutLM model)"),z7.forEach(t),gYe=i(w),us=n(w,"LI",{});var Q7=s(us);tee=n(Q7,"STRONG",{});var NDr=s(tee);hYe=r(NDr,"layoutlmv2"),NDr.forEach(t),uYe=r(Q7," \u2014 "),ES=n(Q7,"A",{href:!0});var jDr=s(ES);pYe=r(jDr,"LayoutLMv2Tokenizer"),jDr.forEach(t),_Ye=r(Q7," or "),CS=n(Q7,"A",{href:!0});var DDr=s(CS);bYe=r(DDr,"LayoutLMv2TokenizerFast"),DDr.forEach(t),vYe=r(Q7," (LayoutLMv2 model)"),Q7.forEach(t),FYe=i(w),ps=n(w,"LI",{});var W7=s(ps);aee=n(W7,"STRONG",{});var GDr=s(aee);TYe=r(GDr,"layoutxlm"),GDr.forEach(t),MYe=r(W7," \u2014 "),wS=n(W7,"A",{href:!0});var ODr=s(wS);EYe=r(ODr,"LayoutXLMTokenizer"),ODr.forEach(t),CYe=r(W7," or "),AS=n(W7,"A",{href:!0});var VDr=s(AS);wYe=r(VDr,"LayoutXLMTokenizerFast"),VDr.forEach(t),AYe=r(W7," (LayoutXLM model)"),W7.forEach(t),yYe=i(w),_s=n(w,"LI",{});var H7=s(_s);nee=n(H7,"STRONG",{});var XDr=s(nee);LYe=r(XDr,"led"),XDr.forEach(t),xYe=r(H7," \u2014 "),yS=n(H7,"A",{href:!0});var zDr=s(yS);kYe=r(zDr,"LEDTokenizer"),zDr.forEach(t),SYe=r(H7," or "),LS=n(H7,"A",{href:!0});var QDr=s(LS);RYe=r(QDr,"LEDTokenizerFast"),QDr.forEach(t),BYe=r(H7," (LED model)"),H7.forEach(t),PYe=i(w),bs=n(w,"LI",{});var U7=s(bs);see=n(U7,"STRONG",{});var WDr=s(see);$Ye=r(WDr,"longformer"),WDr.forEach(t),IYe=r(U7," \u2014 "),xS=n(U7,"A",{href:!0});var HDr=s(xS);qYe=r(HDr,"LongformerTokenizer"),HDr.forEach(t),NYe=r(U7," or "),kS=n(U7,"A",{href:!0});var UDr=s(kS);jYe=r(UDr,"LongformerTokenizerFast"),UDr.forEach(t),DYe=r(U7," (Longformer model)"),U7.forEach(t),GYe=i(w),Kg=n(w,"LI",{});var r3e=s(Kg);lee=n(r3e,"STRONG",{});var JDr=s(lee);OYe=r(JDr,"luke"),JDr.forEach(t),VYe=r(r3e," \u2014 "),SS=n(r3e,"A",{href:!0});var YDr=s(SS);XYe=r(YDr,"LukeTokenizer"),YDr.forEach(t),zYe=r(r3e," (LUKE model)"),r3e.forEach(t),QYe=i(w),vs=n(w,"LI",{});var J7=s(vs);iee=n(J7,"STRONG",{});var KDr=s(iee);WYe=r(KDr,"lxmert"),KDr.forEach(t),HYe=r(J7," \u2014 "),RS=n(J7,"A",{href:!0});var ZDr=s(RS);UYe=r(ZDr,"LxmertTokenizer"),ZDr.forEach(t),JYe=r(J7," or "),BS=n(J7,"A",{href:!0});var eGr=s(BS);YYe=r(eGr,"LxmertTokenizerFast"),eGr.forEach(t),KYe=r(J7," (LXMERT model)"),J7.forEach(t),ZYe=i(w),Zg=n(w,"LI",{});var t3e=s(Zg);dee=n(t3e,"STRONG",{});var oGr=s(dee);eKe=r(oGr,"m2m_100"),oGr.forEach(t),oKe=r(t3e," \u2014 "),PS=n(t3e,"A",{href:!0});var rGr=s(PS);rKe=r(rGr,"M2M100Tokenizer"),rGr.forEach(t),tKe=r(t3e," (M2M100 model)"),t3e.forEach(t),aKe=i(w),eh=n(w,"LI",{});var a3e=s(eh);cee=n(a3e,"STRONG",{});var tGr=s(cee);nKe=r(tGr,"marian"),tGr.forEach(t),sKe=r(a3e," \u2014 "),$S=n(a3e,"A",{href:!0});var aGr=s($S);lKe=r(aGr,"MarianTokenizer"),aGr.forEach(t),iKe=r(a3e," (Marian model)"),a3e.forEach(t),dKe=i(w),Fs=n(w,"LI",{});var Y7=s(Fs);mee=n(Y7,"STRONG",{});var nGr=s(mee);cKe=r(nGr,"mbart"),nGr.forEach(t),mKe=r(Y7," \u2014 "),IS=n(Y7,"A",{href:!0});var sGr=s(IS);fKe=r(sGr,"MBartTokenizer"),sGr.forEach(t),gKe=r(Y7," or "),qS=n(Y7,"A",{href:!0});var lGr=s(qS);hKe=r(lGr,"MBartTokenizerFast"),lGr.forEach(t),uKe=r(Y7," (mBART model)"),Y7.forEach(t),pKe=i(w),Ts=n(w,"LI",{});var K7=s(Ts);fee=n(K7,"STRONG",{});var iGr=s(fee);_Ke=r(iGr,"mbart50"),iGr.forEach(t),bKe=r(K7," \u2014 "),NS=n(K7,"A",{href:!0});var dGr=s(NS);vKe=r(dGr,"MBart50Tokenizer"),dGr.forEach(t),FKe=r(K7," or "),jS=n(K7,"A",{href:!0});var cGr=s(jS);TKe=r(cGr,"MBart50TokenizerFast"),cGr.forEach(t),MKe=r(K7," (mBART-50 model)"),K7.forEach(t),EKe=i(w),oh=n(w,"LI",{});var n3e=s(oh);gee=n(n3e,"STRONG",{});var mGr=s(gee);CKe=r(mGr,"mluke"),mGr.forEach(t),wKe=r(n3e," \u2014 "),DS=n(n3e,"A",{href:!0});var fGr=s(DS);AKe=r(fGr,"MLukeTokenizer"),fGr.forEach(t),yKe=r(n3e," (mLUKE model)"),n3e.forEach(t),LKe=i(w),Ms=n(w,"LI",{});var Z7=s(Ms);hee=n(Z7,"STRONG",{});var gGr=s(hee);xKe=r(gGr,"mobilebert"),gGr.forEach(t),kKe=r(Z7," \u2014 "),GS=n(Z7,"A",{href:!0});var hGr=s(GS);SKe=r(hGr,"MobileBertTokenizer"),hGr.forEach(t),RKe=r(Z7," or "),OS=n(Z7,"A",{href:!0});var uGr=s(OS);BKe=r(uGr,"MobileBertTokenizerFast"),uGr.forEach(t),PKe=r(Z7," (MobileBERT model)"),Z7.forEach(t),$Ke=i(w),Es=n(w,"LI",{});var e9=s(Es);uee=n(e9,"STRONG",{});var pGr=s(uee);IKe=r(pGr,"mpnet"),pGr.forEach(t),qKe=r(e9," \u2014 "),VS=n(e9,"A",{href:!0});var _Gr=s(VS);NKe=r(_Gr,"MPNetTokenizer"),_Gr.forEach(t),jKe=r(e9," or "),XS=n(e9,"A",{href:!0});var bGr=s(XS);DKe=r(bGr,"MPNetTokenizerFast"),bGr.forEach(t),GKe=r(e9," (MPNet model)"),e9.forEach(t),OKe=i(w),Cs=n(w,"LI",{});var o9=s(Cs);pee=n(o9,"STRONG",{});var vGr=s(pee);VKe=r(vGr,"mt5"),vGr.forEach(t),XKe=r(o9," \u2014 "),zS=n(o9,"A",{href:!0});var FGr=s(zS);zKe=r(FGr,"MT5Tokenizer"),FGr.forEach(t),QKe=r(o9," or "),QS=n(o9,"A",{href:!0});var TGr=s(QS);WKe=r(TGr,"MT5TokenizerFast"),TGr.forEach(t),HKe=r(o9," (mT5 model)"),o9.forEach(t),UKe=i(w),ws=n(w,"LI",{});var r9=s(ws);_ee=n(r9,"STRONG",{});var MGr=s(_ee);JKe=r(MGr,"openai-gpt"),MGr.forEach(t),YKe=r(r9," \u2014 "),WS=n(r9,"A",{href:!0});var EGr=s(WS);KKe=r(EGr,"OpenAIGPTTokenizer"),EGr.forEach(t),ZKe=r(r9," or "),HS=n(r9,"A",{href:!0});var CGr=s(HS);eZe=r(CGr,"OpenAIGPTTokenizerFast"),CGr.forEach(t),oZe=r(r9," (OpenAI GPT model)"),r9.forEach(t),rZe=i(w),As=n(w,"LI",{});var t9=s(As);bee=n(t9,"STRONG",{});var wGr=s(bee);tZe=r(wGr,"pegasus"),wGr.forEach(t),aZe=r(t9," \u2014 "),US=n(t9,"A",{href:!0});var AGr=s(US);nZe=r(AGr,"PegasusTokenizer"),AGr.forEach(t),sZe=r(t9," or "),JS=n(t9,"A",{href:!0});var yGr=s(JS);lZe=r(yGr,"PegasusTokenizerFast"),yGr.forEach(t),iZe=r(t9," (Pegasus model)"),t9.forEach(t),dZe=i(w),rh=n(w,"LI",{});var s3e=s(rh);vee=n(s3e,"STRONG",{});var LGr=s(vee);cZe=r(LGr,"perceiver"),LGr.forEach(t),mZe=r(s3e," \u2014 "),YS=n(s3e,"A",{href:!0});var xGr=s(YS);fZe=r(xGr,"PerceiverTokenizer"),xGr.forEach(t),gZe=r(s3e," (Perceiver model)"),s3e.forEach(t),hZe=i(w),th=n(w,"LI",{});var l3e=s(th);Fee=n(l3e,"STRONG",{});var kGr=s(Fee);uZe=r(kGr,"phobert"),kGr.forEach(t),pZe=r(l3e," \u2014 "),KS=n(l3e,"A",{href:!0});var SGr=s(KS);_Ze=r(SGr,"PhobertTokenizer"),SGr.forEach(t),bZe=r(l3e," (PhoBERT model)"),l3e.forEach(t),vZe=i(w),ah=n(w,"LI",{});var i3e=s(ah);Tee=n(i3e,"STRONG",{});var RGr=s(Tee);FZe=r(RGr,"plbart"),RGr.forEach(t),TZe=r(i3e," \u2014 "),ZS=n(i3e,"A",{href:!0});var BGr=s(ZS);MZe=r(BGr,"PLBartTokenizer"),BGr.forEach(t),EZe=r(i3e," (PLBart model)"),i3e.forEach(t),CZe=i(w),nh=n(w,"LI",{});var d3e=s(nh);Mee=n(d3e,"STRONG",{});var PGr=s(Mee);wZe=r(PGr,"prophetnet"),PGr.forEach(t),AZe=r(d3e," \u2014 "),eR=n(d3e,"A",{href:!0});var $Gr=s(eR);yZe=r($Gr,"ProphetNetTokenizer"),$Gr.forEach(t),LZe=r(d3e," (ProphetNet model)"),d3e.forEach(t),xZe=i(w),ys=n(w,"LI",{});var a9=s(ys);Eee=n(a9,"STRONG",{});var IGr=s(Eee);kZe=r(IGr,"qdqbert"),IGr.forEach(t),SZe=r(a9," \u2014 "),oR=n(a9,"A",{href:!0});var qGr=s(oR);RZe=r(qGr,"BertTokenizer"),qGr.forEach(t),BZe=r(a9," or "),rR=n(a9,"A",{href:!0});var NGr=s(rR);PZe=r(NGr,"BertTokenizerFast"),NGr.forEach(t),$Ze=r(a9," (QDQBert model)"),a9.forEach(t),IZe=i(w),sh=n(w,"LI",{});var c3e=s(sh);Cee=n(c3e,"STRONG",{});var jGr=s(Cee);qZe=r(jGr,"rag"),jGr.forEach(t),NZe=r(c3e," \u2014 "),tR=n(c3e,"A",{href:!0});var DGr=s(tR);jZe=r(DGr,"RagTokenizer"),DGr.forEach(t),DZe=r(c3e," (RAG model)"),c3e.forEach(t),GZe=i(w),Ls=n(w,"LI",{});var n9=s(Ls);wee=n(n9,"STRONG",{});var GGr=s(wee);OZe=r(GGr,"realm"),GGr.forEach(t),VZe=r(n9," \u2014 "),aR=n(n9,"A",{href:!0});var OGr=s(aR);XZe=r(OGr,"RealmTokenizer"),OGr.forEach(t),zZe=r(n9," or "),nR=n(n9,"A",{href:!0});var VGr=s(nR);QZe=r(VGr,"RealmTokenizerFast"),VGr.forEach(t),WZe=r(n9," (Realm model)"),n9.forEach(t),HZe=i(w),xs=n(w,"LI",{});var s9=s(xs);Aee=n(s9,"STRONG",{});var XGr=s(Aee);UZe=r(XGr,"reformer"),XGr.forEach(t),JZe=r(s9," \u2014 "),sR=n(s9,"A",{href:!0});var zGr=s(sR);YZe=r(zGr,"ReformerTokenizer"),zGr.forEach(t),KZe=r(s9," or "),lR=n(s9,"A",{href:!0});var QGr=s(lR);ZZe=r(QGr,"ReformerTokenizerFast"),QGr.forEach(t),eeo=r(s9," (Reformer model)"),s9.forEach(t),oeo=i(w),ks=n(w,"LI",{});var l9=s(ks);yee=n(l9,"STRONG",{});var WGr=s(yee);reo=r(WGr,"rembert"),WGr.forEach(t),teo=r(l9," \u2014 "),iR=n(l9,"A",{href:!0});var HGr=s(iR);aeo=r(HGr,"RemBertTokenizer"),HGr.forEach(t),neo=r(l9," or "),dR=n(l9,"A",{href:!0});var UGr=s(dR);seo=r(UGr,"RemBertTokenizerFast"),UGr.forEach(t),leo=r(l9," (RemBERT model)"),l9.forEach(t),ieo=i(w),Ss=n(w,"LI",{});var i9=s(Ss);Lee=n(i9,"STRONG",{});var JGr=s(Lee);deo=r(JGr,"retribert"),JGr.forEach(t),ceo=r(i9," \u2014 "),cR=n(i9,"A",{href:!0});var YGr=s(cR);meo=r(YGr,"RetriBertTokenizer"),YGr.forEach(t),feo=r(i9," or "),mR=n(i9,"A",{href:!0});var KGr=s(mR);geo=r(KGr,"RetriBertTokenizerFast"),KGr.forEach(t),heo=r(i9," (RetriBERT model)"),i9.forEach(t),ueo=i(w),Rs=n(w,"LI",{});var d9=s(Rs);xee=n(d9,"STRONG",{});var ZGr=s(xee);peo=r(ZGr,"roberta"),ZGr.forEach(t),_eo=r(d9," \u2014 "),fR=n(d9,"A",{href:!0});var eOr=s(fR);beo=r(eOr,"RobertaTokenizer"),eOr.forEach(t),veo=r(d9," or "),gR=n(d9,"A",{href:!0});var oOr=s(gR);Feo=r(oOr,"RobertaTokenizerFast"),oOr.forEach(t),Teo=r(d9," (RoBERTa model)"),d9.forEach(t),Meo=i(w),Bs=n(w,"LI",{});var c9=s(Bs);kee=n(c9,"STRONG",{});var rOr=s(kee);Eeo=r(rOr,"roformer"),rOr.forEach(t),Ceo=r(c9," \u2014 "),hR=n(c9,"A",{href:!0});var tOr=s(hR);weo=r(tOr,"RoFormerTokenizer"),tOr.forEach(t),Aeo=r(c9," or "),uR=n(c9,"A",{href:!0});var aOr=s(uR);yeo=r(aOr,"RoFormerTokenizerFast"),aOr.forEach(t),Leo=r(c9," (RoFormer model)"),c9.forEach(t),xeo=i(w),lh=n(w,"LI",{});var m3e=s(lh);See=n(m3e,"STRONG",{});var nOr=s(See);keo=r(nOr,"speech_to_text"),nOr.forEach(t),Seo=r(m3e," \u2014 "),pR=n(m3e,"A",{href:!0});var sOr=s(pR);Reo=r(sOr,"Speech2TextTokenizer"),sOr.forEach(t),Beo=r(m3e," (Speech2Text model)"),m3e.forEach(t),Peo=i(w),ih=n(w,"LI",{});var f3e=s(ih);Ree=n(f3e,"STRONG",{});var lOr=s(Ree);$eo=r(lOr,"speech_to_text_2"),lOr.forEach(t),Ieo=r(f3e," \u2014 "),_R=n(f3e,"A",{href:!0});var iOr=s(_R);qeo=r(iOr,"Speech2Text2Tokenizer"),iOr.forEach(t),Neo=r(f3e," (Speech2Text2 model)"),f3e.forEach(t),jeo=i(w),Ps=n(w,"LI",{});var m9=s(Ps);Bee=n(m9,"STRONG",{});var dOr=s(Bee);Deo=r(dOr,"splinter"),dOr.forEach(t),Geo=r(m9," \u2014 "),bR=n(m9,"A",{href:!0});var cOr=s(bR);Oeo=r(cOr,"SplinterTokenizer"),cOr.forEach(t),Veo=r(m9," or "),vR=n(m9,"A",{href:!0});var mOr=s(vR);Xeo=r(mOr,"SplinterTokenizerFast"),mOr.forEach(t),zeo=r(m9," (Splinter model)"),m9.forEach(t),Qeo=i(w),$s=n(w,"LI",{});var f9=s($s);Pee=n(f9,"STRONG",{});var fOr=s(Pee);Weo=r(fOr,"squeezebert"),fOr.forEach(t),Heo=r(f9," \u2014 "),FR=n(f9,"A",{href:!0});var gOr=s(FR);Ueo=r(gOr,"SqueezeBertTokenizer"),gOr.forEach(t),Jeo=r(f9," or "),TR=n(f9,"A",{href:!0});var hOr=s(TR);Yeo=r(hOr,"SqueezeBertTokenizerFast"),hOr.forEach(t),Keo=r(f9," (SqueezeBERT model)"),f9.forEach(t),Zeo=i(w),Is=n(w,"LI",{});var g9=s(Is);$ee=n(g9,"STRONG",{});var uOr=s($ee);eoo=r(uOr,"t5"),uOr.forEach(t),ooo=r(g9," \u2014 "),MR=n(g9,"A",{href:!0});var pOr=s(MR);roo=r(pOr,"T5Tokenizer"),pOr.forEach(t),too=r(g9," or "),ER=n(g9,"A",{href:!0});var _Or=s(ER);aoo=r(_Or,"T5TokenizerFast"),_Or.forEach(t),noo=r(g9," (T5 model)"),g9.forEach(t),soo=i(w),dh=n(w,"LI",{});var g3e=s(dh);Iee=n(g3e,"STRONG",{});var bOr=s(Iee);loo=r(bOr,"tapas"),bOr.forEach(t),ioo=r(g3e," \u2014 "),CR=n(g3e,"A",{href:!0});var vOr=s(CR);doo=r(vOr,"TapasTokenizer"),vOr.forEach(t),coo=r(g3e," (TAPAS model)"),g3e.forEach(t),moo=i(w),ch=n(w,"LI",{});var h3e=s(ch);qee=n(h3e,"STRONG",{});var FOr=s(qee);foo=r(FOr,"tapex"),FOr.forEach(t),goo=r(h3e," \u2014 "),wR=n(h3e,"A",{href:!0});var TOr=s(wR);hoo=r(TOr,"TapexTokenizer"),TOr.forEach(t),uoo=r(h3e," (TAPEX model)"),h3e.forEach(t),poo=i(w),mh=n(w,"LI",{});var u3e=s(mh);Nee=n(u3e,"STRONG",{});var MOr=s(Nee);_oo=r(MOr,"transfo-xl"),MOr.forEach(t),boo=r(u3e," \u2014 "),AR=n(u3e,"A",{href:!0});var EOr=s(AR);voo=r(EOr,"TransfoXLTokenizer"),EOr.forEach(t),Foo=r(u3e," (Transformer-XL model)"),u3e.forEach(t),Too=i(w),fh=n(w,"LI",{});var p3e=s(fh);jee=n(p3e,"STRONG",{});var COr=s(jee);Moo=r(COr,"wav2vec2"),COr.forEach(t),Eoo=r(p3e," \u2014 "),yR=n(p3e,"A",{href:!0});var wOr=s(yR);Coo=r(wOr,"Wav2Vec2CTCTokenizer"),wOr.forEach(t),woo=r(p3e," (Wav2Vec2 model)"),p3e.forEach(t),Aoo=i(w),gh=n(w,"LI",{});var _3e=s(gh);Dee=n(_3e,"STRONG",{});var AOr=s(Dee);yoo=r(AOr,"wav2vec2_phoneme"),AOr.forEach(t),Loo=r(_3e," \u2014 "),LR=n(_3e,"A",{href:!0});var yOr=s(LR);xoo=r(yOr,"Wav2Vec2PhonemeCTCTokenizer"),yOr.forEach(t),koo=r(_3e," (Wav2Vec2Phoneme model)"),_3e.forEach(t),Soo=i(w),qs=n(w,"LI",{});var h9=s(qs);Gee=n(h9,"STRONG",{});var LOr=s(Gee);Roo=r(LOr,"xglm"),LOr.forEach(t),Boo=r(h9," \u2014 "),xR=n(h9,"A",{href:!0});var xOr=s(xR);Poo=r(xOr,"XGLMTokenizer"),xOr.forEach(t),$oo=r(h9," or "),kR=n(h9,"A",{href:!0});var kOr=s(kR);Ioo=r(kOr,"XGLMTokenizerFast"),kOr.forEach(t),qoo=r(h9," (XGLM model)"),h9.forEach(t),Noo=i(w),hh=n(w,"LI",{});var b3e=s(hh);Oee=n(b3e,"STRONG",{});var SOr=s(Oee);joo=r(SOr,"xlm"),SOr.forEach(t),Doo=r(b3e," \u2014 "),SR=n(b3e,"A",{href:!0});var ROr=s(SR);Goo=r(ROr,"XLMTokenizer"),ROr.forEach(t),Ooo=r(b3e," (XLM model)"),b3e.forEach(t),Voo=i(w),uh=n(w,"LI",{});var v3e=s(uh);Vee=n(v3e,"STRONG",{});var BOr=s(Vee);Xoo=r(BOr,"xlm-prophetnet"),BOr.forEach(t),zoo=r(v3e," \u2014 "),RR=n(v3e,"A",{href:!0});var POr=s(RR);Qoo=r(POr,"XLMProphetNetTokenizer"),POr.forEach(t),Woo=r(v3e," (XLMProphetNet model)"),v3e.forEach(t),Hoo=i(w),Ns=n(w,"LI",{});var u9=s(Ns);Xee=n(u9,"STRONG",{});var $Or=s(Xee);Uoo=r($Or,"xlm-roberta"),$Or.forEach(t),Joo=r(u9," \u2014 "),BR=n(u9,"A",{href:!0});var IOr=s(BR);Yoo=r(IOr,"XLMRobertaTokenizer"),IOr.forEach(t),Koo=r(u9," or "),PR=n(u9,"A",{href:!0});var qOr=s(PR);Zoo=r(qOr,"XLMRobertaTokenizerFast"),qOr.forEach(t),ero=r(u9," (XLM-RoBERTa model)"),u9.forEach(t),oro=i(w),js=n(w,"LI",{});var p9=s(js);zee=n(p9,"STRONG",{});var NOr=s(zee);rro=r(NOr,"xlnet"),NOr.forEach(t),tro=r(p9," \u2014 "),$R=n(p9,"A",{href:!0});var jOr=s($R);aro=r(jOr,"XLNetTokenizer"),jOr.forEach(t),nro=r(p9," or "),IR=n(p9,"A",{href:!0});var DOr=s(IR);sro=r(DOr,"XLNetTokenizerFast"),DOr.forEach(t),lro=r(p9," (XLNet model)"),p9.forEach(t),w.forEach(t),iro=i(ha),Qee=n(ha,"P",{});var GOr=s(Qee);dro=r(GOr,"Examples:"),GOr.forEach(t),cro=i(ha),f(Qw.$$.fragment,ha),ha.forEach(t),mro=i(Xs),ph=n(Xs,"DIV",{class:!0});var XPe=s(ph);f(Ww.$$.fragment,XPe),fro=i(XPe),Wee=n(XPe,"P",{});var OOr=s(Wee);gro=r(OOr,"Register a new tokenizer in this mapping."),OOr.forEach(t),XPe.forEach(t),Xs.forEach(t),DRe=i(c),Hi=n(c,"H2",{class:!0});var zPe=s(Hi);_h=n(zPe,"A",{id:!0,class:!0,href:!0});var VOr=s(_h);Hee=n(VOr,"SPAN",{});var XOr=s(Hee);f(Hw.$$.fragment,XOr),XOr.forEach(t),VOr.forEach(t),hro=i(zPe),Uee=n(zPe,"SPAN",{});var zOr=s(Uee);uro=r(zOr,"AutoFeatureExtractor"),zOr.forEach(t),zPe.forEach(t),GRe=i(c),Ho=n(c,"DIV",{class:!0});var zs=s(Ho);f(Uw.$$.fragment,zs),pro=i(zs),Jw=n(zs,"P",{});var QPe=s(Jw);_ro=r(QPe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),qR=n(QPe,"A",{href:!0});var QOr=s(qR);bro=r(QOr,"AutoFeatureExtractor.from_pretrained()"),QOr.forEach(t),vro=r(QPe," class method."),QPe.forEach(t),Fro=i(zs),Yw=n(zs,"P",{});var WPe=s(Yw);Tro=r(WPe,"This class cannot be instantiated directly using "),Jee=n(WPe,"CODE",{});var WOr=s(Jee);Mro=r(WOr,"__init__()"),WOr.forEach(t),Ero=r(WPe," (throws an error)."),WPe.forEach(t),Cro=i(zs),$e=n(zs,"DIV",{class:!0});var Nt=s($e);f(Kw.$$.fragment,Nt),wro=i(Nt),Yee=n(Nt,"P",{});var HOr=s(Yee);Aro=r(HOr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),HOr.forEach(t),yro=i(Nt),Va=n(Nt,"P",{});var kC=s(Va);Lro=r(kC,"The feature extractor class to instantiate is selected based on the "),Kee=n(kC,"CODE",{});var UOr=s(Kee);xro=r(UOr,"model_type"),UOr.forEach(t),kro=r(kC,` property of the config object
(either passed as an argument or loaded from `),Zee=n(kC,"CODE",{});var JOr=s(Zee);Sro=r(JOr,"pretrained_model_name_or_path"),JOr.forEach(t),Rro=r(kC,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),eoe=n(kC,"CODE",{});var YOr=s(eoe);Bro=r(YOr,"pretrained_model_name_or_path"),YOr.forEach(t),Pro=r(kC,":"),kC.forEach(t),$ro=i(Nt),ee=n(Nt,"UL",{});var ae=s(ee);bh=n(ae,"LI",{});var F3e=s(bh);ooe=n(F3e,"STRONG",{});var KOr=s(ooe);Iro=r(KOr,"beit"),KOr.forEach(t),qro=r(F3e," \u2014 "),NR=n(F3e,"A",{href:!0});var ZOr=s(NR);Nro=r(ZOr,"BeitFeatureExtractor"),ZOr.forEach(t),jro=r(F3e," (BEiT model)"),F3e.forEach(t),Dro=i(ae),vh=n(ae,"LI",{});var T3e=s(vh);roe=n(T3e,"STRONG",{});var eVr=s(roe);Gro=r(eVr,"clip"),eVr.forEach(t),Oro=r(T3e," \u2014 "),jR=n(T3e,"A",{href:!0});var oVr=s(jR);Vro=r(oVr,"CLIPFeatureExtractor"),oVr.forEach(t),Xro=r(T3e," (CLIP model)"),T3e.forEach(t),zro=i(ae),Fh=n(ae,"LI",{});var M3e=s(Fh);toe=n(M3e,"STRONG",{});var rVr=s(toe);Qro=r(rVr,"convnext"),rVr.forEach(t),Wro=r(M3e," \u2014 "),DR=n(M3e,"A",{href:!0});var tVr=s(DR);Hro=r(tVr,"ConvNextFeatureExtractor"),tVr.forEach(t),Uro=r(M3e," (ConvNext model)"),M3e.forEach(t),Jro=i(ae),Th=n(ae,"LI",{});var E3e=s(Th);aoe=n(E3e,"STRONG",{});var aVr=s(aoe);Yro=r(aVr,"deit"),aVr.forEach(t),Kro=r(E3e," \u2014 "),GR=n(E3e,"A",{href:!0});var nVr=s(GR);Zro=r(nVr,"DeiTFeatureExtractor"),nVr.forEach(t),eto=r(E3e," (DeiT model)"),E3e.forEach(t),oto=i(ae),Mh=n(ae,"LI",{});var C3e=s(Mh);noe=n(C3e,"STRONG",{});var sVr=s(noe);rto=r(sVr,"detr"),sVr.forEach(t),tto=r(C3e," \u2014 "),OR=n(C3e,"A",{href:!0});var lVr=s(OR);ato=r(lVr,"DetrFeatureExtractor"),lVr.forEach(t),nto=r(C3e," (DETR model)"),C3e.forEach(t),sto=i(ae),Eh=n(ae,"LI",{});var w3e=s(Eh);soe=n(w3e,"STRONG",{});var iVr=s(soe);lto=r(iVr,"hubert"),iVr.forEach(t),ito=r(w3e," \u2014 "),VR=n(w3e,"A",{href:!0});var dVr=s(VR);dto=r(dVr,"Wav2Vec2FeatureExtractor"),dVr.forEach(t),cto=r(w3e," (Hubert model)"),w3e.forEach(t),mto=i(ae),Ch=n(ae,"LI",{});var A3e=s(Ch);loe=n(A3e,"STRONG",{});var cVr=s(loe);fto=r(cVr,"layoutlmv2"),cVr.forEach(t),gto=r(A3e," \u2014 "),XR=n(A3e,"A",{href:!0});var mVr=s(XR);hto=r(mVr,"LayoutLMv2FeatureExtractor"),mVr.forEach(t),uto=r(A3e," (LayoutLMv2 model)"),A3e.forEach(t),pto=i(ae),wh=n(ae,"LI",{});var y3e=s(wh);ioe=n(y3e,"STRONG",{});var fVr=s(ioe);_to=r(fVr,"maskformer"),fVr.forEach(t),bto=r(y3e," \u2014 "),zR=n(y3e,"A",{href:!0});var gVr=s(zR);vto=r(gVr,"MaskFormerFeatureExtractor"),gVr.forEach(t),Fto=r(y3e," (MaskFormer model)"),y3e.forEach(t),Tto=i(ae),Ah=n(ae,"LI",{});var L3e=s(Ah);doe=n(L3e,"STRONG",{});var hVr=s(doe);Mto=r(hVr,"perceiver"),hVr.forEach(t),Eto=r(L3e," \u2014 "),QR=n(L3e,"A",{href:!0});var uVr=s(QR);Cto=r(uVr,"PerceiverFeatureExtractor"),uVr.forEach(t),wto=r(L3e," (Perceiver model)"),L3e.forEach(t),Ato=i(ae),yh=n(ae,"LI",{});var x3e=s(yh);coe=n(x3e,"STRONG",{});var pVr=s(coe);yto=r(pVr,"poolformer"),pVr.forEach(t),Lto=r(x3e," \u2014 "),WR=n(x3e,"A",{href:!0});var _Vr=s(WR);xto=r(_Vr,"PoolFormerFeatureExtractor"),_Vr.forEach(t),kto=r(x3e," (PoolFormer model)"),x3e.forEach(t),Sto=i(ae),Lh=n(ae,"LI",{});var k3e=s(Lh);moe=n(k3e,"STRONG",{});var bVr=s(moe);Rto=r(bVr,"regnet"),bVr.forEach(t),Bto=r(k3e," \u2014 "),HR=n(k3e,"A",{href:!0});var vVr=s(HR);Pto=r(vVr,"ConvNextFeatureExtractor"),vVr.forEach(t),$to=r(k3e," (RegNet model)"),k3e.forEach(t),Ito=i(ae),xh=n(ae,"LI",{});var S3e=s(xh);foe=n(S3e,"STRONG",{});var FVr=s(foe);qto=r(FVr,"resnet"),FVr.forEach(t),Nto=r(S3e," \u2014 "),UR=n(S3e,"A",{href:!0});var TVr=s(UR);jto=r(TVr,"ConvNextFeatureExtractor"),TVr.forEach(t),Dto=r(S3e," (ResNet model)"),S3e.forEach(t),Gto=i(ae),kh=n(ae,"LI",{});var R3e=s(kh);goe=n(R3e,"STRONG",{});var MVr=s(goe);Oto=r(MVr,"segformer"),MVr.forEach(t),Vto=r(R3e," \u2014 "),JR=n(R3e,"A",{href:!0});var EVr=s(JR);Xto=r(EVr,"SegformerFeatureExtractor"),EVr.forEach(t),zto=r(R3e," (SegFormer model)"),R3e.forEach(t),Qto=i(ae),Sh=n(ae,"LI",{});var B3e=s(Sh);hoe=n(B3e,"STRONG",{});var CVr=s(hoe);Wto=r(CVr,"speech_to_text"),CVr.forEach(t),Hto=r(B3e," \u2014 "),YR=n(B3e,"A",{href:!0});var wVr=s(YR);Uto=r(wVr,"Speech2TextFeatureExtractor"),wVr.forEach(t),Jto=r(B3e," (Speech2Text model)"),B3e.forEach(t),Yto=i(ae),Rh=n(ae,"LI",{});var P3e=s(Rh);uoe=n(P3e,"STRONG",{});var AVr=s(uoe);Kto=r(AVr,"swin"),AVr.forEach(t),Zto=r(P3e," \u2014 "),KR=n(P3e,"A",{href:!0});var yVr=s(KR);eao=r(yVr,"ViTFeatureExtractor"),yVr.forEach(t),oao=r(P3e," (Swin model)"),P3e.forEach(t),rao=i(ae),Bh=n(ae,"LI",{});var $3e=s(Bh);poe=n($3e,"STRONG",{});var LVr=s(poe);tao=r(LVr,"van"),LVr.forEach(t),aao=r($3e," \u2014 "),ZR=n($3e,"A",{href:!0});var xVr=s(ZR);nao=r(xVr,"ConvNextFeatureExtractor"),xVr.forEach(t),sao=r($3e," (VAN model)"),$3e.forEach(t),lao=i(ae),Ph=n(ae,"LI",{});var I3e=s(Ph);_oe=n(I3e,"STRONG",{});var kVr=s(_oe);iao=r(kVr,"vit"),kVr.forEach(t),dao=r(I3e," \u2014 "),eB=n(I3e,"A",{href:!0});var SVr=s(eB);cao=r(SVr,"ViTFeatureExtractor"),SVr.forEach(t),mao=r(I3e," (ViT model)"),I3e.forEach(t),fao=i(ae),$h=n(ae,"LI",{});var q3e=s($h);boe=n(q3e,"STRONG",{});var RVr=s(boe);gao=r(RVr,"vit_mae"),RVr.forEach(t),hao=r(q3e," \u2014 "),oB=n(q3e,"A",{href:!0});var BVr=s(oB);uao=r(BVr,"ViTFeatureExtractor"),BVr.forEach(t),pao=r(q3e," (ViTMAE model)"),q3e.forEach(t),_ao=i(ae),Ih=n(ae,"LI",{});var N3e=s(Ih);voe=n(N3e,"STRONG",{});var PVr=s(voe);bao=r(PVr,"wav2vec2"),PVr.forEach(t),vao=r(N3e," \u2014 "),rB=n(N3e,"A",{href:!0});var $Vr=s(rB);Fao=r($Vr,"Wav2Vec2FeatureExtractor"),$Vr.forEach(t),Tao=r(N3e," (Wav2Vec2 model)"),N3e.forEach(t),ae.forEach(t),Mao=i(Nt),f(qh.$$.fragment,Nt),Eao=i(Nt),Foe=n(Nt,"P",{});var IVr=s(Foe);Cao=r(IVr,"Examples:"),IVr.forEach(t),wao=i(Nt),f(Zw.$$.fragment,Nt),Nt.forEach(t),Aao=i(zs),Nh=n(zs,"DIV",{class:!0});var HPe=s(Nh);f(e6.$$.fragment,HPe),yao=i(HPe),Toe=n(HPe,"P",{});var qVr=s(Toe);Lao=r(qVr,"Register a new feature extractor for this class."),qVr.forEach(t),HPe.forEach(t),zs.forEach(t),ORe=i(c),Ui=n(c,"H2",{class:!0});var UPe=s(Ui);jh=n(UPe,"A",{id:!0,class:!0,href:!0});var NVr=s(jh);Moe=n(NVr,"SPAN",{});var jVr=s(Moe);f(o6.$$.fragment,jVr),jVr.forEach(t),NVr.forEach(t),xao=i(UPe),Eoe=n(UPe,"SPAN",{});var DVr=s(Eoe);kao=r(DVr,"AutoProcessor"),DVr.forEach(t),UPe.forEach(t),VRe=i(c),Uo=n(c,"DIV",{class:!0});var Qs=s(Uo);f(r6.$$.fragment,Qs),Sao=i(Qs),t6=n(Qs,"P",{});var JPe=s(t6);Rao=r(JPe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),tB=n(JPe,"A",{href:!0});var GVr=s(tB);Bao=r(GVr,"AutoProcessor.from_pretrained()"),GVr.forEach(t),Pao=r(JPe," class method."),JPe.forEach(t),$ao=i(Qs),a6=n(Qs,"P",{});var YPe=s(a6);Iao=r(YPe,"This class cannot be instantiated directly using "),Coe=n(YPe,"CODE",{});var OVr=s(Coe);qao=r(OVr,"__init__()"),OVr.forEach(t),Nao=r(YPe," (throws an error)."),YPe.forEach(t),jao=i(Qs),Ie=n(Qs,"DIV",{class:!0});var jt=s(Ie);f(n6.$$.fragment,jt),Dao=i(jt),woe=n(jt,"P",{});var VVr=s(woe);Gao=r(VVr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),VVr.forEach(t),Oao=i(jt),Ji=n(jt,"P",{});var vU=s(Ji);Vao=r(vU,"The processor class to instantiate is selected based on the "),Aoe=n(vU,"CODE",{});var XVr=s(Aoe);Xao=r(XVr,"model_type"),XVr.forEach(t),zao=r(vU,` property of the config object (either
passed as an argument or loaded from `),yoe=n(vU,"CODE",{});var zVr=s(yoe);Qao=r(zVr,"pretrained_model_name_or_path"),zVr.forEach(t),Wao=r(vU," if possible):"),vU.forEach(t),Hao=i(jt),ke=n(jt,"UL",{});var jo=s(ke);Dh=n(jo,"LI",{});var j3e=s(Dh);Loe=n(j3e,"STRONG",{});var QVr=s(Loe);Uao=r(QVr,"clip"),QVr.forEach(t),Jao=r(j3e," \u2014 "),aB=n(j3e,"A",{href:!0});var WVr=s(aB);Yao=r(WVr,"CLIPProcessor"),WVr.forEach(t),Kao=r(j3e," (CLIP model)"),j3e.forEach(t),Zao=i(jo),Gh=n(jo,"LI",{});var D3e=s(Gh);xoe=n(D3e,"STRONG",{});var HVr=s(xoe);eno=r(HVr,"layoutlmv2"),HVr.forEach(t),ono=r(D3e," \u2014 "),nB=n(D3e,"A",{href:!0});var UVr=s(nB);rno=r(UVr,"LayoutLMv2Processor"),UVr.forEach(t),tno=r(D3e," (LayoutLMv2 model)"),D3e.forEach(t),ano=i(jo),Oh=n(jo,"LI",{});var G3e=s(Oh);koe=n(G3e,"STRONG",{});var JVr=s(koe);nno=r(JVr,"layoutxlm"),JVr.forEach(t),sno=r(G3e," \u2014 "),sB=n(G3e,"A",{href:!0});var YVr=s(sB);lno=r(YVr,"LayoutXLMProcessor"),YVr.forEach(t),ino=r(G3e," (LayoutXLM model)"),G3e.forEach(t),dno=i(jo),Vh=n(jo,"LI",{});var O3e=s(Vh);Soe=n(O3e,"STRONG",{});var KVr=s(Soe);cno=r(KVr,"speech_to_text"),KVr.forEach(t),mno=r(O3e," \u2014 "),lB=n(O3e,"A",{href:!0});var ZVr=s(lB);fno=r(ZVr,"Speech2TextProcessor"),ZVr.forEach(t),gno=r(O3e," (Speech2Text model)"),O3e.forEach(t),hno=i(jo),Xh=n(jo,"LI",{});var V3e=s(Xh);Roe=n(V3e,"STRONG",{});var eXr=s(Roe);uno=r(eXr,"speech_to_text_2"),eXr.forEach(t),pno=r(V3e," \u2014 "),iB=n(V3e,"A",{href:!0});var oXr=s(iB);_no=r(oXr,"Speech2Text2Processor"),oXr.forEach(t),bno=r(V3e," (Speech2Text2 model)"),V3e.forEach(t),vno=i(jo),zh=n(jo,"LI",{});var X3e=s(zh);Boe=n(X3e,"STRONG",{});var rXr=s(Boe);Fno=r(rXr,"trocr"),rXr.forEach(t),Tno=r(X3e," \u2014 "),dB=n(X3e,"A",{href:!0});var tXr=s(dB);Mno=r(tXr,"TrOCRProcessor"),tXr.forEach(t),Eno=r(X3e," (TrOCR model)"),X3e.forEach(t),Cno=i(jo),Qh=n(jo,"LI",{});var z3e=s(Qh);Poe=n(z3e,"STRONG",{});var aXr=s(Poe);wno=r(aXr,"vision-text-dual-encoder"),aXr.forEach(t),Ano=r(z3e," \u2014 "),cB=n(z3e,"A",{href:!0});var nXr=s(cB);yno=r(nXr,"VisionTextDualEncoderProcessor"),nXr.forEach(t),Lno=r(z3e," (VisionTextDualEncoder model)"),z3e.forEach(t),xno=i(jo),Wh=n(jo,"LI",{});var Q3e=s(Wh);$oe=n(Q3e,"STRONG",{});var sXr=s($oe);kno=r(sXr,"wav2vec2"),sXr.forEach(t),Sno=r(Q3e," \u2014 "),mB=n(Q3e,"A",{href:!0});var lXr=s(mB);Rno=r(lXr,"Wav2Vec2Processor"),lXr.forEach(t),Bno=r(Q3e," (Wav2Vec2 model)"),Q3e.forEach(t),jo.forEach(t),Pno=i(jt),f(Hh.$$.fragment,jt),$no=i(jt),Ioe=n(jt,"P",{});var iXr=s(Ioe);Ino=r(iXr,"Examples:"),iXr.forEach(t),qno=i(jt),f(s6.$$.fragment,jt),jt.forEach(t),Nno=i(Qs),Uh=n(Qs,"DIV",{class:!0});var KPe=s(Uh);f(l6.$$.fragment,KPe),jno=i(KPe),qoe=n(KPe,"P",{});var dXr=s(qoe);Dno=r(dXr,"Register a new processor for this class."),dXr.forEach(t),KPe.forEach(t),Qs.forEach(t),XRe=i(c),Yi=n(c,"H2",{class:!0});var ZPe=s(Yi);Jh=n(ZPe,"A",{id:!0,class:!0,href:!0});var cXr=s(Jh);Noe=n(cXr,"SPAN",{});var mXr=s(Noe);f(i6.$$.fragment,mXr),mXr.forEach(t),cXr.forEach(t),Gno=i(ZPe),joe=n(ZPe,"SPAN",{});var fXr=s(joe);Ono=r(fXr,"AutoModel"),fXr.forEach(t),ZPe.forEach(t),zRe=i(c),Jo=n(c,"DIV",{class:!0});var Ws=s(Jo);f(d6.$$.fragment,Ws),Vno=i(Ws),Ki=n(Ws,"P",{});var FU=s(Ki);Xno=r(FU,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),fB=n(FU,"A",{href:!0});var gXr=s(fB);zno=r(gXr,"from_pretrained()"),gXr.forEach(t),Qno=r(FU," class method or the "),gB=n(FU,"A",{href:!0});var hXr=s(gB);Wno=r(hXr,"from_config()"),hXr.forEach(t),Hno=r(FU,` class
method.`),FU.forEach(t),Uno=i(Ws),c6=n(Ws,"P",{});var e$e=s(c6);Jno=r(e$e,"This class cannot be instantiated directly using "),Doe=n(e$e,"CODE",{});var uXr=s(Doe);Yno=r(uXr,"__init__()"),uXr.forEach(t),Kno=r(e$e," (throws an error)."),e$e.forEach(t),Zno=i(Ws),Xr=n(Ws,"DIV",{class:!0});var Hs=s(Xr);f(m6.$$.fragment,Hs),eso=i(Hs),Goe=n(Hs,"P",{});var pXr=s(Goe);oso=r(pXr,"Instantiates one of the base model classes of the library from a configuration."),pXr.forEach(t),rso=i(Hs),Zi=n(Hs,"P",{});var TU=s(Zi);tso=r(TU,`Note:
Loading a model from its configuration file does `),Ooe=n(TU,"STRONG",{});var _Xr=s(Ooe);aso=r(_Xr,"not"),_Xr.forEach(t),nso=r(TU,` load the model weights. It only affects the
model\u2019s configuration. Use `),hB=n(TU,"A",{href:!0});var bXr=s(hB);sso=r(bXr,"from_pretrained()"),bXr.forEach(t),lso=r(TU," to load the model weights."),TU.forEach(t),iso=i(Hs),Voe=n(Hs,"P",{});var vXr=s(Voe);dso=r(vXr,"Examples:"),vXr.forEach(t),cso=i(Hs),f(f6.$$.fragment,Hs),Hs.forEach(t),mso=i(Ws),qe=n(Ws,"DIV",{class:!0});var Dt=s(qe);f(g6.$$.fragment,Dt),fso=i(Dt),Xoe=n(Dt,"P",{});var FXr=s(Xoe);gso=r(FXr,"Instantiate one of the base model classes of the library from a pretrained model."),FXr.forEach(t),hso=i(Dt),Xa=n(Dt,"P",{});var SC=s(Xa);uso=r(SC,"The model class to instantiate is selected based on the "),zoe=n(SC,"CODE",{});var TXr=s(zoe);pso=r(TXr,"model_type"),TXr.forEach(t),_so=r(SC,` property of the config object (either
passed as an argument or loaded from `),Qoe=n(SC,"CODE",{});var MXr=s(Qoe);bso=r(MXr,"pretrained_model_name_or_path"),MXr.forEach(t),vso=r(SC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Woe=n(SC,"CODE",{});var EXr=s(Woe);Fso=r(EXr,"pretrained_model_name_or_path"),EXr.forEach(t),Tso=r(SC,":"),SC.forEach(t),Mso=i(Dt),T=n(Dt,"UL",{});var M=s(T);Yh=n(M,"LI",{});var W3e=s(Yh);Hoe=n(W3e,"STRONG",{});var CXr=s(Hoe);Eso=r(CXr,"albert"),CXr.forEach(t),Cso=r(W3e," \u2014 "),uB=n(W3e,"A",{href:!0});var wXr=s(uB);wso=r(wXr,"AlbertModel"),wXr.forEach(t),Aso=r(W3e," (ALBERT model)"),W3e.forEach(t),yso=i(M),Kh=n(M,"LI",{});var H3e=s(Kh);Uoe=n(H3e,"STRONG",{});var AXr=s(Uoe);Lso=r(AXr,"bart"),AXr.forEach(t),xso=r(H3e," \u2014 "),pB=n(H3e,"A",{href:!0});var yXr=s(pB);kso=r(yXr,"BartModel"),yXr.forEach(t),Sso=r(H3e," (BART model)"),H3e.forEach(t),Rso=i(M),Zh=n(M,"LI",{});var U3e=s(Zh);Joe=n(U3e,"STRONG",{});var LXr=s(Joe);Bso=r(LXr,"beit"),LXr.forEach(t),Pso=r(U3e," \u2014 "),_B=n(U3e,"A",{href:!0});var xXr=s(_B);$so=r(xXr,"BeitModel"),xXr.forEach(t),Iso=r(U3e," (BEiT model)"),U3e.forEach(t),qso=i(M),eu=n(M,"LI",{});var J3e=s(eu);Yoe=n(J3e,"STRONG",{});var kXr=s(Yoe);Nso=r(kXr,"bert"),kXr.forEach(t),jso=r(J3e," \u2014 "),bB=n(J3e,"A",{href:!0});var SXr=s(bB);Dso=r(SXr,"BertModel"),SXr.forEach(t),Gso=r(J3e," (BERT model)"),J3e.forEach(t),Oso=i(M),ou=n(M,"LI",{});var Y3e=s(ou);Koe=n(Y3e,"STRONG",{});var RXr=s(Koe);Vso=r(RXr,"bert-generation"),RXr.forEach(t),Xso=r(Y3e," \u2014 "),vB=n(Y3e,"A",{href:!0});var BXr=s(vB);zso=r(BXr,"BertGenerationEncoder"),BXr.forEach(t),Qso=r(Y3e," (Bert Generation model)"),Y3e.forEach(t),Wso=i(M),ru=n(M,"LI",{});var K3e=s(ru);Zoe=n(K3e,"STRONG",{});var PXr=s(Zoe);Hso=r(PXr,"big_bird"),PXr.forEach(t),Uso=r(K3e," \u2014 "),FB=n(K3e,"A",{href:!0});var $Xr=s(FB);Jso=r($Xr,"BigBirdModel"),$Xr.forEach(t),Yso=r(K3e," (BigBird model)"),K3e.forEach(t),Kso=i(M),tu=n(M,"LI",{});var Z3e=s(tu);ere=n(Z3e,"STRONG",{});var IXr=s(ere);Zso=r(IXr,"bigbird_pegasus"),IXr.forEach(t),elo=r(Z3e," \u2014 "),TB=n(Z3e,"A",{href:!0});var qXr=s(TB);olo=r(qXr,"BigBirdPegasusModel"),qXr.forEach(t),rlo=r(Z3e," (BigBirdPegasus model)"),Z3e.forEach(t),tlo=i(M),au=n(M,"LI",{});var eCe=s(au);ore=n(eCe,"STRONG",{});var NXr=s(ore);alo=r(NXr,"blenderbot"),NXr.forEach(t),nlo=r(eCe," \u2014 "),MB=n(eCe,"A",{href:!0});var jXr=s(MB);slo=r(jXr,"BlenderbotModel"),jXr.forEach(t),llo=r(eCe," (Blenderbot model)"),eCe.forEach(t),ilo=i(M),nu=n(M,"LI",{});var oCe=s(nu);rre=n(oCe,"STRONG",{});var DXr=s(rre);dlo=r(DXr,"blenderbot-small"),DXr.forEach(t),clo=r(oCe," \u2014 "),EB=n(oCe,"A",{href:!0});var GXr=s(EB);mlo=r(GXr,"BlenderbotSmallModel"),GXr.forEach(t),flo=r(oCe," (BlenderbotSmall model)"),oCe.forEach(t),glo=i(M),su=n(M,"LI",{});var rCe=s(su);tre=n(rCe,"STRONG",{});var OXr=s(tre);hlo=r(OXr,"camembert"),OXr.forEach(t),ulo=r(rCe," \u2014 "),CB=n(rCe,"A",{href:!0});var VXr=s(CB);plo=r(VXr,"CamembertModel"),VXr.forEach(t),_lo=r(rCe," (CamemBERT model)"),rCe.forEach(t),blo=i(M),lu=n(M,"LI",{});var tCe=s(lu);are=n(tCe,"STRONG",{});var XXr=s(are);vlo=r(XXr,"canine"),XXr.forEach(t),Flo=r(tCe," \u2014 "),wB=n(tCe,"A",{href:!0});var zXr=s(wB);Tlo=r(zXr,"CanineModel"),zXr.forEach(t),Mlo=r(tCe," (Canine model)"),tCe.forEach(t),Elo=i(M),iu=n(M,"LI",{});var aCe=s(iu);nre=n(aCe,"STRONG",{});var QXr=s(nre);Clo=r(QXr,"clip"),QXr.forEach(t),wlo=r(aCe," \u2014 "),AB=n(aCe,"A",{href:!0});var WXr=s(AB);Alo=r(WXr,"CLIPModel"),WXr.forEach(t),ylo=r(aCe," (CLIP model)"),aCe.forEach(t),Llo=i(M),du=n(M,"LI",{});var nCe=s(du);sre=n(nCe,"STRONG",{});var HXr=s(sre);xlo=r(HXr,"convbert"),HXr.forEach(t),klo=r(nCe," \u2014 "),yB=n(nCe,"A",{href:!0});var UXr=s(yB);Slo=r(UXr,"ConvBertModel"),UXr.forEach(t),Rlo=r(nCe," (ConvBERT model)"),nCe.forEach(t),Blo=i(M),cu=n(M,"LI",{});var sCe=s(cu);lre=n(sCe,"STRONG",{});var JXr=s(lre);Plo=r(JXr,"convnext"),JXr.forEach(t),$lo=r(sCe," \u2014 "),LB=n(sCe,"A",{href:!0});var YXr=s(LB);Ilo=r(YXr,"ConvNextModel"),YXr.forEach(t),qlo=r(sCe," (ConvNext model)"),sCe.forEach(t),Nlo=i(M),mu=n(M,"LI",{});var lCe=s(mu);ire=n(lCe,"STRONG",{});var KXr=s(ire);jlo=r(KXr,"ctrl"),KXr.forEach(t),Dlo=r(lCe," \u2014 "),xB=n(lCe,"A",{href:!0});var ZXr=s(xB);Glo=r(ZXr,"CTRLModel"),ZXr.forEach(t),Olo=r(lCe," (CTRL model)"),lCe.forEach(t),Vlo=i(M),fu=n(M,"LI",{});var iCe=s(fu);dre=n(iCe,"STRONG",{});var ezr=s(dre);Xlo=r(ezr,"data2vec-audio"),ezr.forEach(t),zlo=r(iCe," \u2014 "),kB=n(iCe,"A",{href:!0});var ozr=s(kB);Qlo=r(ozr,"Data2VecAudioModel"),ozr.forEach(t),Wlo=r(iCe," (Data2VecAudio model)"),iCe.forEach(t),Hlo=i(M),gu=n(M,"LI",{});var dCe=s(gu);cre=n(dCe,"STRONG",{});var rzr=s(cre);Ulo=r(rzr,"data2vec-text"),rzr.forEach(t),Jlo=r(dCe," \u2014 "),SB=n(dCe,"A",{href:!0});var tzr=s(SB);Ylo=r(tzr,"Data2VecTextModel"),tzr.forEach(t),Klo=r(dCe," (Data2VecText model)"),dCe.forEach(t),Zlo=i(M),hu=n(M,"LI",{});var cCe=s(hu);mre=n(cCe,"STRONG",{});var azr=s(mre);eio=r(azr,"data2vec-vision"),azr.forEach(t),oio=r(cCe," \u2014 "),RB=n(cCe,"A",{href:!0});var nzr=s(RB);rio=r(nzr,"Data2VecVisionModel"),nzr.forEach(t),tio=r(cCe," (Data2VecVision model)"),cCe.forEach(t),aio=i(M),uu=n(M,"LI",{});var mCe=s(uu);fre=n(mCe,"STRONG",{});var szr=s(fre);nio=r(szr,"deberta"),szr.forEach(t),sio=r(mCe," \u2014 "),BB=n(mCe,"A",{href:!0});var lzr=s(BB);lio=r(lzr,"DebertaModel"),lzr.forEach(t),iio=r(mCe," (DeBERTa model)"),mCe.forEach(t),dio=i(M),pu=n(M,"LI",{});var fCe=s(pu);gre=n(fCe,"STRONG",{});var izr=s(gre);cio=r(izr,"deberta-v2"),izr.forEach(t),mio=r(fCe," \u2014 "),PB=n(fCe,"A",{href:!0});var dzr=s(PB);fio=r(dzr,"DebertaV2Model"),dzr.forEach(t),gio=r(fCe," (DeBERTa-v2 model)"),fCe.forEach(t),hio=i(M),_u=n(M,"LI",{});var gCe=s(_u);hre=n(gCe,"STRONG",{});var czr=s(hre);uio=r(czr,"decision_transformer"),czr.forEach(t),pio=r(gCe," \u2014 "),$B=n(gCe,"A",{href:!0});var mzr=s($B);_io=r(mzr,"DecisionTransformerModel"),mzr.forEach(t),bio=r(gCe," (Decision Transformer model)"),gCe.forEach(t),vio=i(M),bu=n(M,"LI",{});var hCe=s(bu);ure=n(hCe,"STRONG",{});var fzr=s(ure);Fio=r(fzr,"deit"),fzr.forEach(t),Tio=r(hCe," \u2014 "),IB=n(hCe,"A",{href:!0});var gzr=s(IB);Mio=r(gzr,"DeiTModel"),gzr.forEach(t),Eio=r(hCe," (DeiT model)"),hCe.forEach(t),Cio=i(M),vu=n(M,"LI",{});var uCe=s(vu);pre=n(uCe,"STRONG",{});var hzr=s(pre);wio=r(hzr,"detr"),hzr.forEach(t),Aio=r(uCe," \u2014 "),qB=n(uCe,"A",{href:!0});var uzr=s(qB);yio=r(uzr,"DetrModel"),uzr.forEach(t),Lio=r(uCe," (DETR model)"),uCe.forEach(t),xio=i(M),Fu=n(M,"LI",{});var pCe=s(Fu);_re=n(pCe,"STRONG",{});var pzr=s(_re);kio=r(pzr,"distilbert"),pzr.forEach(t),Sio=r(pCe," \u2014 "),NB=n(pCe,"A",{href:!0});var _zr=s(NB);Rio=r(_zr,"DistilBertModel"),_zr.forEach(t),Bio=r(pCe," (DistilBERT model)"),pCe.forEach(t),Pio=i(M),Tu=n(M,"LI",{});var _Ce=s(Tu);bre=n(_Ce,"STRONG",{});var bzr=s(bre);$io=r(bzr,"dpr"),bzr.forEach(t),Iio=r(_Ce," \u2014 "),jB=n(_Ce,"A",{href:!0});var vzr=s(jB);qio=r(vzr,"DPRQuestionEncoder"),vzr.forEach(t),Nio=r(_Ce," (DPR model)"),_Ce.forEach(t),jio=i(M),Mu=n(M,"LI",{});var bCe=s(Mu);vre=n(bCe,"STRONG",{});var Fzr=s(vre);Dio=r(Fzr,"dpt"),Fzr.forEach(t),Gio=r(bCe," \u2014 "),DB=n(bCe,"A",{href:!0});var Tzr=s(DB);Oio=r(Tzr,"DPTModel"),Tzr.forEach(t),Vio=r(bCe," (DPT model)"),bCe.forEach(t),Xio=i(M),Eu=n(M,"LI",{});var vCe=s(Eu);Fre=n(vCe,"STRONG",{});var Mzr=s(Fre);zio=r(Mzr,"electra"),Mzr.forEach(t),Qio=r(vCe," \u2014 "),GB=n(vCe,"A",{href:!0});var Ezr=s(GB);Wio=r(Ezr,"ElectraModel"),Ezr.forEach(t),Hio=r(vCe," (ELECTRA model)"),vCe.forEach(t),Uio=i(M),Cu=n(M,"LI",{});var FCe=s(Cu);Tre=n(FCe,"STRONG",{});var Czr=s(Tre);Jio=r(Czr,"flaubert"),Czr.forEach(t),Yio=r(FCe," \u2014 "),OB=n(FCe,"A",{href:!0});var wzr=s(OB);Kio=r(wzr,"FlaubertModel"),wzr.forEach(t),Zio=r(FCe," (FlauBERT model)"),FCe.forEach(t),edo=i(M),wu=n(M,"LI",{});var TCe=s(wu);Mre=n(TCe,"STRONG",{});var Azr=s(Mre);odo=r(Azr,"fnet"),Azr.forEach(t),rdo=r(TCe," \u2014 "),VB=n(TCe,"A",{href:!0});var yzr=s(VB);tdo=r(yzr,"FNetModel"),yzr.forEach(t),ado=r(TCe," (FNet model)"),TCe.forEach(t),ndo=i(M),Au=n(M,"LI",{});var MCe=s(Au);Ere=n(MCe,"STRONG",{});var Lzr=s(Ere);sdo=r(Lzr,"fsmt"),Lzr.forEach(t),ldo=r(MCe," \u2014 "),XB=n(MCe,"A",{href:!0});var xzr=s(XB);ido=r(xzr,"FSMTModel"),xzr.forEach(t),ddo=r(MCe," (FairSeq Machine-Translation model)"),MCe.forEach(t),cdo=i(M),Ds=n(M,"LI",{});var _9=s(Ds);Cre=n(_9,"STRONG",{});var kzr=s(Cre);mdo=r(kzr,"funnel"),kzr.forEach(t),fdo=r(_9," \u2014 "),zB=n(_9,"A",{href:!0});var Szr=s(zB);gdo=r(Szr,"FunnelModel"),Szr.forEach(t),hdo=r(_9," or "),QB=n(_9,"A",{href:!0});var Rzr=s(QB);udo=r(Rzr,"FunnelBaseModel"),Rzr.forEach(t),pdo=r(_9," (Funnel Transformer model)"),_9.forEach(t),_do=i(M),yu=n(M,"LI",{});var ECe=s(yu);wre=n(ECe,"STRONG",{});var Bzr=s(wre);bdo=r(Bzr,"glpn"),Bzr.forEach(t),vdo=r(ECe," \u2014 "),WB=n(ECe,"A",{href:!0});var Pzr=s(WB);Fdo=r(Pzr,"GLPNModel"),Pzr.forEach(t),Tdo=r(ECe," (GLPN model)"),ECe.forEach(t),Mdo=i(M),Lu=n(M,"LI",{});var CCe=s(Lu);Are=n(CCe,"STRONG",{});var $zr=s(Are);Edo=r($zr,"gpt2"),$zr.forEach(t),Cdo=r(CCe," \u2014 "),HB=n(CCe,"A",{href:!0});var Izr=s(HB);wdo=r(Izr,"GPT2Model"),Izr.forEach(t),Ado=r(CCe," (OpenAI GPT-2 model)"),CCe.forEach(t),ydo=i(M),xu=n(M,"LI",{});var wCe=s(xu);yre=n(wCe,"STRONG",{});var qzr=s(yre);Ldo=r(qzr,"gpt_neo"),qzr.forEach(t),xdo=r(wCe," \u2014 "),UB=n(wCe,"A",{href:!0});var Nzr=s(UB);kdo=r(Nzr,"GPTNeoModel"),Nzr.forEach(t),Sdo=r(wCe," (GPT Neo model)"),wCe.forEach(t),Rdo=i(M),ku=n(M,"LI",{});var ACe=s(ku);Lre=n(ACe,"STRONG",{});var jzr=s(Lre);Bdo=r(jzr,"gptj"),jzr.forEach(t),Pdo=r(ACe," \u2014 "),JB=n(ACe,"A",{href:!0});var Dzr=s(JB);$do=r(Dzr,"GPTJModel"),Dzr.forEach(t),Ido=r(ACe," (GPT-J model)"),ACe.forEach(t),qdo=i(M),Su=n(M,"LI",{});var yCe=s(Su);xre=n(yCe,"STRONG",{});var Gzr=s(xre);Ndo=r(Gzr,"hubert"),Gzr.forEach(t),jdo=r(yCe," \u2014 "),YB=n(yCe,"A",{href:!0});var Ozr=s(YB);Ddo=r(Ozr,"HubertModel"),Ozr.forEach(t),Gdo=r(yCe," (Hubert model)"),yCe.forEach(t),Odo=i(M),Ru=n(M,"LI",{});var LCe=s(Ru);kre=n(LCe,"STRONG",{});var Vzr=s(kre);Vdo=r(Vzr,"ibert"),Vzr.forEach(t),Xdo=r(LCe," \u2014 "),KB=n(LCe,"A",{href:!0});var Xzr=s(KB);zdo=r(Xzr,"IBertModel"),Xzr.forEach(t),Qdo=r(LCe," (I-BERT model)"),LCe.forEach(t),Wdo=i(M),Bu=n(M,"LI",{});var xCe=s(Bu);Sre=n(xCe,"STRONG",{});var zzr=s(Sre);Hdo=r(zzr,"imagegpt"),zzr.forEach(t),Udo=r(xCe," \u2014 "),ZB=n(xCe,"A",{href:!0});var Qzr=s(ZB);Jdo=r(Qzr,"ImageGPTModel"),Qzr.forEach(t),Ydo=r(xCe," (ImageGPT model)"),xCe.forEach(t),Kdo=i(M),Pu=n(M,"LI",{});var kCe=s(Pu);Rre=n(kCe,"STRONG",{});var Wzr=s(Rre);Zdo=r(Wzr,"layoutlm"),Wzr.forEach(t),eco=r(kCe," \u2014 "),eP=n(kCe,"A",{href:!0});var Hzr=s(eP);oco=r(Hzr,"LayoutLMModel"),Hzr.forEach(t),rco=r(kCe," (LayoutLM model)"),kCe.forEach(t),tco=i(M),$u=n(M,"LI",{});var SCe=s($u);Bre=n(SCe,"STRONG",{});var Uzr=s(Bre);aco=r(Uzr,"layoutlmv2"),Uzr.forEach(t),nco=r(SCe," \u2014 "),oP=n(SCe,"A",{href:!0});var Jzr=s(oP);sco=r(Jzr,"LayoutLMv2Model"),Jzr.forEach(t),lco=r(SCe," (LayoutLMv2 model)"),SCe.forEach(t),ico=i(M),Iu=n(M,"LI",{});var RCe=s(Iu);Pre=n(RCe,"STRONG",{});var Yzr=s(Pre);dco=r(Yzr,"led"),Yzr.forEach(t),cco=r(RCe," \u2014 "),rP=n(RCe,"A",{href:!0});var Kzr=s(rP);mco=r(Kzr,"LEDModel"),Kzr.forEach(t),fco=r(RCe," (LED model)"),RCe.forEach(t),gco=i(M),qu=n(M,"LI",{});var BCe=s(qu);$re=n(BCe,"STRONG",{});var Zzr=s($re);hco=r(Zzr,"longformer"),Zzr.forEach(t),uco=r(BCe," \u2014 "),tP=n(BCe,"A",{href:!0});var eQr=s(tP);pco=r(eQr,"LongformerModel"),eQr.forEach(t),_co=r(BCe," (Longformer model)"),BCe.forEach(t),bco=i(M),Nu=n(M,"LI",{});var PCe=s(Nu);Ire=n(PCe,"STRONG",{});var oQr=s(Ire);vco=r(oQr,"luke"),oQr.forEach(t),Fco=r(PCe," \u2014 "),aP=n(PCe,"A",{href:!0});var rQr=s(aP);Tco=r(rQr,"LukeModel"),rQr.forEach(t),Mco=r(PCe," (LUKE model)"),PCe.forEach(t),Eco=i(M),ju=n(M,"LI",{});var $Ce=s(ju);qre=n($Ce,"STRONG",{});var tQr=s(qre);Cco=r(tQr,"lxmert"),tQr.forEach(t),wco=r($Ce," \u2014 "),nP=n($Ce,"A",{href:!0});var aQr=s(nP);Aco=r(aQr,"LxmertModel"),aQr.forEach(t),yco=r($Ce," (LXMERT model)"),$Ce.forEach(t),Lco=i(M),Du=n(M,"LI",{});var ICe=s(Du);Nre=n(ICe,"STRONG",{});var nQr=s(Nre);xco=r(nQr,"m2m_100"),nQr.forEach(t),kco=r(ICe," \u2014 "),sP=n(ICe,"A",{href:!0});var sQr=s(sP);Sco=r(sQr,"M2M100Model"),sQr.forEach(t),Rco=r(ICe," (M2M100 model)"),ICe.forEach(t),Bco=i(M),Gu=n(M,"LI",{});var qCe=s(Gu);jre=n(qCe,"STRONG",{});var lQr=s(jre);Pco=r(lQr,"marian"),lQr.forEach(t),$co=r(qCe," \u2014 "),lP=n(qCe,"A",{href:!0});var iQr=s(lP);Ico=r(iQr,"MarianModel"),iQr.forEach(t),qco=r(qCe," (Marian model)"),qCe.forEach(t),Nco=i(M),Ou=n(M,"LI",{});var NCe=s(Ou);Dre=n(NCe,"STRONG",{});var dQr=s(Dre);jco=r(dQr,"maskformer"),dQr.forEach(t),Dco=r(NCe," \u2014 "),iP=n(NCe,"A",{href:!0});var cQr=s(iP);Gco=r(cQr,"MaskFormerModel"),cQr.forEach(t),Oco=r(NCe," (MaskFormer model)"),NCe.forEach(t),Vco=i(M),Vu=n(M,"LI",{});var jCe=s(Vu);Gre=n(jCe,"STRONG",{});var mQr=s(Gre);Xco=r(mQr,"mbart"),mQr.forEach(t),zco=r(jCe," \u2014 "),dP=n(jCe,"A",{href:!0});var fQr=s(dP);Qco=r(fQr,"MBartModel"),fQr.forEach(t),Wco=r(jCe," (mBART model)"),jCe.forEach(t),Hco=i(M),Xu=n(M,"LI",{});var DCe=s(Xu);Ore=n(DCe,"STRONG",{});var gQr=s(Ore);Uco=r(gQr,"megatron-bert"),gQr.forEach(t),Jco=r(DCe," \u2014 "),cP=n(DCe,"A",{href:!0});var hQr=s(cP);Yco=r(hQr,"MegatronBertModel"),hQr.forEach(t),Kco=r(DCe," (MegatronBert model)"),DCe.forEach(t),Zco=i(M),zu=n(M,"LI",{});var GCe=s(zu);Vre=n(GCe,"STRONG",{});var uQr=s(Vre);emo=r(uQr,"mobilebert"),uQr.forEach(t),omo=r(GCe," \u2014 "),mP=n(GCe,"A",{href:!0});var pQr=s(mP);rmo=r(pQr,"MobileBertModel"),pQr.forEach(t),tmo=r(GCe," (MobileBERT model)"),GCe.forEach(t),amo=i(M),Qu=n(M,"LI",{});var OCe=s(Qu);Xre=n(OCe,"STRONG",{});var _Qr=s(Xre);nmo=r(_Qr,"mpnet"),_Qr.forEach(t),smo=r(OCe," \u2014 "),fP=n(OCe,"A",{href:!0});var bQr=s(fP);lmo=r(bQr,"MPNetModel"),bQr.forEach(t),imo=r(OCe," (MPNet model)"),OCe.forEach(t),dmo=i(M),Wu=n(M,"LI",{});var VCe=s(Wu);zre=n(VCe,"STRONG",{});var vQr=s(zre);cmo=r(vQr,"mt5"),vQr.forEach(t),mmo=r(VCe," \u2014 "),gP=n(VCe,"A",{href:!0});var FQr=s(gP);fmo=r(FQr,"MT5Model"),FQr.forEach(t),gmo=r(VCe," (mT5 model)"),VCe.forEach(t),hmo=i(M),Hu=n(M,"LI",{});var XCe=s(Hu);Qre=n(XCe,"STRONG",{});var TQr=s(Qre);umo=r(TQr,"nystromformer"),TQr.forEach(t),pmo=r(XCe," \u2014 "),hP=n(XCe,"A",{href:!0});var MQr=s(hP);_mo=r(MQr,"NystromformerModel"),MQr.forEach(t),bmo=r(XCe," (Nystromformer model)"),XCe.forEach(t),vmo=i(M),Uu=n(M,"LI",{});var zCe=s(Uu);Wre=n(zCe,"STRONG",{});var EQr=s(Wre);Fmo=r(EQr,"openai-gpt"),EQr.forEach(t),Tmo=r(zCe," \u2014 "),uP=n(zCe,"A",{href:!0});var CQr=s(uP);Mmo=r(CQr,"OpenAIGPTModel"),CQr.forEach(t),Emo=r(zCe," (OpenAI GPT model)"),zCe.forEach(t),Cmo=i(M),Ju=n(M,"LI",{});var QCe=s(Ju);Hre=n(QCe,"STRONG",{});var wQr=s(Hre);wmo=r(wQr,"pegasus"),wQr.forEach(t),Amo=r(QCe," \u2014 "),pP=n(QCe,"A",{href:!0});var AQr=s(pP);ymo=r(AQr,"PegasusModel"),AQr.forEach(t),Lmo=r(QCe," (Pegasus model)"),QCe.forEach(t),xmo=i(M),Yu=n(M,"LI",{});var WCe=s(Yu);Ure=n(WCe,"STRONG",{});var yQr=s(Ure);kmo=r(yQr,"perceiver"),yQr.forEach(t),Smo=r(WCe," \u2014 "),_P=n(WCe,"A",{href:!0});var LQr=s(_P);Rmo=r(LQr,"PerceiverModel"),LQr.forEach(t),Bmo=r(WCe," (Perceiver model)"),WCe.forEach(t),Pmo=i(M),Ku=n(M,"LI",{});var HCe=s(Ku);Jre=n(HCe,"STRONG",{});var xQr=s(Jre);$mo=r(xQr,"plbart"),xQr.forEach(t),Imo=r(HCe," \u2014 "),bP=n(HCe,"A",{href:!0});var kQr=s(bP);qmo=r(kQr,"PLBartModel"),kQr.forEach(t),Nmo=r(HCe," (PLBart model)"),HCe.forEach(t),jmo=i(M),Zu=n(M,"LI",{});var UCe=s(Zu);Yre=n(UCe,"STRONG",{});var SQr=s(Yre);Dmo=r(SQr,"poolformer"),SQr.forEach(t),Gmo=r(UCe," \u2014 "),vP=n(UCe,"A",{href:!0});var RQr=s(vP);Omo=r(RQr,"PoolFormerModel"),RQr.forEach(t),Vmo=r(UCe," (PoolFormer model)"),UCe.forEach(t),Xmo=i(M),ep=n(M,"LI",{});var JCe=s(ep);Kre=n(JCe,"STRONG",{});var BQr=s(Kre);zmo=r(BQr,"prophetnet"),BQr.forEach(t),Qmo=r(JCe," \u2014 "),FP=n(JCe,"A",{href:!0});var PQr=s(FP);Wmo=r(PQr,"ProphetNetModel"),PQr.forEach(t),Hmo=r(JCe," (ProphetNet model)"),JCe.forEach(t),Umo=i(M),op=n(M,"LI",{});var YCe=s(op);Zre=n(YCe,"STRONG",{});var $Qr=s(Zre);Jmo=r($Qr,"qdqbert"),$Qr.forEach(t),Ymo=r(YCe," \u2014 "),TP=n(YCe,"A",{href:!0});var IQr=s(TP);Kmo=r(IQr,"QDQBertModel"),IQr.forEach(t),Zmo=r(YCe," (QDQBert model)"),YCe.forEach(t),efo=i(M),rp=n(M,"LI",{});var KCe=s(rp);ete=n(KCe,"STRONG",{});var qQr=s(ete);ofo=r(qQr,"reformer"),qQr.forEach(t),rfo=r(KCe," \u2014 "),MP=n(KCe,"A",{href:!0});var NQr=s(MP);tfo=r(NQr,"ReformerModel"),NQr.forEach(t),afo=r(KCe," (Reformer model)"),KCe.forEach(t),nfo=i(M),tp=n(M,"LI",{});var ZCe=s(tp);ote=n(ZCe,"STRONG",{});var jQr=s(ote);sfo=r(jQr,"regnet"),jQr.forEach(t),lfo=r(ZCe," \u2014 "),EP=n(ZCe,"A",{href:!0});var DQr=s(EP);ifo=r(DQr,"RegNetModel"),DQr.forEach(t),dfo=r(ZCe," (RegNet model)"),ZCe.forEach(t),cfo=i(M),ap=n(M,"LI",{});var ewe=s(ap);rte=n(ewe,"STRONG",{});var GQr=s(rte);mfo=r(GQr,"rembert"),GQr.forEach(t),ffo=r(ewe," \u2014 "),CP=n(ewe,"A",{href:!0});var OQr=s(CP);gfo=r(OQr,"RemBertModel"),OQr.forEach(t),hfo=r(ewe," (RemBERT model)"),ewe.forEach(t),ufo=i(M),np=n(M,"LI",{});var owe=s(np);tte=n(owe,"STRONG",{});var VQr=s(tte);pfo=r(VQr,"resnet"),VQr.forEach(t),_fo=r(owe," \u2014 "),wP=n(owe,"A",{href:!0});var XQr=s(wP);bfo=r(XQr,"ResNetModel"),XQr.forEach(t),vfo=r(owe," (ResNet model)"),owe.forEach(t),Ffo=i(M),sp=n(M,"LI",{});var rwe=s(sp);ate=n(rwe,"STRONG",{});var zQr=s(ate);Tfo=r(zQr,"retribert"),zQr.forEach(t),Mfo=r(rwe," \u2014 "),AP=n(rwe,"A",{href:!0});var QQr=s(AP);Efo=r(QQr,"RetriBertModel"),QQr.forEach(t),Cfo=r(rwe," (RetriBERT model)"),rwe.forEach(t),wfo=i(M),lp=n(M,"LI",{});var twe=s(lp);nte=n(twe,"STRONG",{});var WQr=s(nte);Afo=r(WQr,"roberta"),WQr.forEach(t),yfo=r(twe," \u2014 "),yP=n(twe,"A",{href:!0});var HQr=s(yP);Lfo=r(HQr,"RobertaModel"),HQr.forEach(t),xfo=r(twe," (RoBERTa model)"),twe.forEach(t),kfo=i(M),ip=n(M,"LI",{});var awe=s(ip);ste=n(awe,"STRONG",{});var UQr=s(ste);Sfo=r(UQr,"roformer"),UQr.forEach(t),Rfo=r(awe," \u2014 "),LP=n(awe,"A",{href:!0});var JQr=s(LP);Bfo=r(JQr,"RoFormerModel"),JQr.forEach(t),Pfo=r(awe," (RoFormer model)"),awe.forEach(t),$fo=i(M),dp=n(M,"LI",{});var nwe=s(dp);lte=n(nwe,"STRONG",{});var YQr=s(lte);Ifo=r(YQr,"segformer"),YQr.forEach(t),qfo=r(nwe," \u2014 "),xP=n(nwe,"A",{href:!0});var KQr=s(xP);Nfo=r(KQr,"SegformerModel"),KQr.forEach(t),jfo=r(nwe," (SegFormer model)"),nwe.forEach(t),Dfo=i(M),cp=n(M,"LI",{});var swe=s(cp);ite=n(swe,"STRONG",{});var ZQr=s(ite);Gfo=r(ZQr,"sew"),ZQr.forEach(t),Ofo=r(swe," \u2014 "),kP=n(swe,"A",{href:!0});var eWr=s(kP);Vfo=r(eWr,"SEWModel"),eWr.forEach(t),Xfo=r(swe," (SEW model)"),swe.forEach(t),zfo=i(M),mp=n(M,"LI",{});var lwe=s(mp);dte=n(lwe,"STRONG",{});var oWr=s(dte);Qfo=r(oWr,"sew-d"),oWr.forEach(t),Wfo=r(lwe," \u2014 "),SP=n(lwe,"A",{href:!0});var rWr=s(SP);Hfo=r(rWr,"SEWDModel"),rWr.forEach(t),Ufo=r(lwe," (SEW-D model)"),lwe.forEach(t),Jfo=i(M),fp=n(M,"LI",{});var iwe=s(fp);cte=n(iwe,"STRONG",{});var tWr=s(cte);Yfo=r(tWr,"speech_to_text"),tWr.forEach(t),Kfo=r(iwe," \u2014 "),RP=n(iwe,"A",{href:!0});var aWr=s(RP);Zfo=r(aWr,"Speech2TextModel"),aWr.forEach(t),ego=r(iwe," (Speech2Text model)"),iwe.forEach(t),ogo=i(M),gp=n(M,"LI",{});var dwe=s(gp);mte=n(dwe,"STRONG",{});var nWr=s(mte);rgo=r(nWr,"splinter"),nWr.forEach(t),tgo=r(dwe," \u2014 "),BP=n(dwe,"A",{href:!0});var sWr=s(BP);ago=r(sWr,"SplinterModel"),sWr.forEach(t),ngo=r(dwe," (Splinter model)"),dwe.forEach(t),sgo=i(M),hp=n(M,"LI",{});var cwe=s(hp);fte=n(cwe,"STRONG",{});var lWr=s(fte);lgo=r(lWr,"squeezebert"),lWr.forEach(t),igo=r(cwe," \u2014 "),PP=n(cwe,"A",{href:!0});var iWr=s(PP);dgo=r(iWr,"SqueezeBertModel"),iWr.forEach(t),cgo=r(cwe," (SqueezeBERT model)"),cwe.forEach(t),mgo=i(M),up=n(M,"LI",{});var mwe=s(up);gte=n(mwe,"STRONG",{});var dWr=s(gte);fgo=r(dWr,"swin"),dWr.forEach(t),ggo=r(mwe," \u2014 "),$P=n(mwe,"A",{href:!0});var cWr=s($P);hgo=r(cWr,"SwinModel"),cWr.forEach(t),ugo=r(mwe," (Swin model)"),mwe.forEach(t),pgo=i(M),pp=n(M,"LI",{});var fwe=s(pp);hte=n(fwe,"STRONG",{});var mWr=s(hte);_go=r(mWr,"t5"),mWr.forEach(t),bgo=r(fwe," \u2014 "),IP=n(fwe,"A",{href:!0});var fWr=s(IP);vgo=r(fWr,"T5Model"),fWr.forEach(t),Fgo=r(fwe," (T5 model)"),fwe.forEach(t),Tgo=i(M),_p=n(M,"LI",{});var gwe=s(_p);ute=n(gwe,"STRONG",{});var gWr=s(ute);Mgo=r(gWr,"tapas"),gWr.forEach(t),Ego=r(gwe," \u2014 "),qP=n(gwe,"A",{href:!0});var hWr=s(qP);Cgo=r(hWr,"TapasModel"),hWr.forEach(t),wgo=r(gwe," (TAPAS model)"),gwe.forEach(t),Ago=i(M),bp=n(M,"LI",{});var hwe=s(bp);pte=n(hwe,"STRONG",{});var uWr=s(pte);ygo=r(uWr,"transfo-xl"),uWr.forEach(t),Lgo=r(hwe," \u2014 "),NP=n(hwe,"A",{href:!0});var pWr=s(NP);xgo=r(pWr,"TransfoXLModel"),pWr.forEach(t),kgo=r(hwe," (Transformer-XL model)"),hwe.forEach(t),Sgo=i(M),vp=n(M,"LI",{});var uwe=s(vp);_te=n(uwe,"STRONG",{});var _Wr=s(_te);Rgo=r(_Wr,"unispeech"),_Wr.forEach(t),Bgo=r(uwe," \u2014 "),jP=n(uwe,"A",{href:!0});var bWr=s(jP);Pgo=r(bWr,"UniSpeechModel"),bWr.forEach(t),$go=r(uwe," (UniSpeech model)"),uwe.forEach(t),Igo=i(M),Fp=n(M,"LI",{});var pwe=s(Fp);bte=n(pwe,"STRONG",{});var vWr=s(bte);qgo=r(vWr,"unispeech-sat"),vWr.forEach(t),Ngo=r(pwe," \u2014 "),DP=n(pwe,"A",{href:!0});var FWr=s(DP);jgo=r(FWr,"UniSpeechSatModel"),FWr.forEach(t),Dgo=r(pwe," (UniSpeechSat model)"),pwe.forEach(t),Ggo=i(M),Tp=n(M,"LI",{});var _we=s(Tp);vte=n(_we,"STRONG",{});var TWr=s(vte);Ogo=r(TWr,"van"),TWr.forEach(t),Vgo=r(_we," \u2014 "),GP=n(_we,"A",{href:!0});var MWr=s(GP);Xgo=r(MWr,"VanModel"),MWr.forEach(t),zgo=r(_we," (VAN model)"),_we.forEach(t),Qgo=i(M),Mp=n(M,"LI",{});var bwe=s(Mp);Fte=n(bwe,"STRONG",{});var EWr=s(Fte);Wgo=r(EWr,"vilt"),EWr.forEach(t),Hgo=r(bwe," \u2014 "),OP=n(bwe,"A",{href:!0});var CWr=s(OP);Ugo=r(CWr,"ViltModel"),CWr.forEach(t),Jgo=r(bwe," (ViLT model)"),bwe.forEach(t),Ygo=i(M),Ep=n(M,"LI",{});var vwe=s(Ep);Tte=n(vwe,"STRONG",{});var wWr=s(Tte);Kgo=r(wWr,"vision-text-dual-encoder"),wWr.forEach(t),Zgo=r(vwe," \u2014 "),VP=n(vwe,"A",{href:!0});var AWr=s(VP);eho=r(AWr,"VisionTextDualEncoderModel"),AWr.forEach(t),oho=r(vwe," (VisionTextDualEncoder model)"),vwe.forEach(t),rho=i(M),Cp=n(M,"LI",{});var Fwe=s(Cp);Mte=n(Fwe,"STRONG",{});var yWr=s(Mte);tho=r(yWr,"visual_bert"),yWr.forEach(t),aho=r(Fwe," \u2014 "),XP=n(Fwe,"A",{href:!0});var LWr=s(XP);nho=r(LWr,"VisualBertModel"),LWr.forEach(t),sho=r(Fwe," (VisualBert model)"),Fwe.forEach(t),lho=i(M),wp=n(M,"LI",{});var Twe=s(wp);Ete=n(Twe,"STRONG",{});var xWr=s(Ete);iho=r(xWr,"vit"),xWr.forEach(t),dho=r(Twe," \u2014 "),zP=n(Twe,"A",{href:!0});var kWr=s(zP);cho=r(kWr,"ViTModel"),kWr.forEach(t),mho=r(Twe," (ViT model)"),Twe.forEach(t),fho=i(M),Ap=n(M,"LI",{});var Mwe=s(Ap);Cte=n(Mwe,"STRONG",{});var SWr=s(Cte);gho=r(SWr,"vit_mae"),SWr.forEach(t),hho=r(Mwe," \u2014 "),QP=n(Mwe,"A",{href:!0});var RWr=s(QP);uho=r(RWr,"ViTMAEModel"),RWr.forEach(t),pho=r(Mwe," (ViTMAE model)"),Mwe.forEach(t),_ho=i(M),yp=n(M,"LI",{});var Ewe=s(yp);wte=n(Ewe,"STRONG",{});var BWr=s(wte);bho=r(BWr,"wav2vec2"),BWr.forEach(t),vho=r(Ewe," \u2014 "),WP=n(Ewe,"A",{href:!0});var PWr=s(WP);Fho=r(PWr,"Wav2Vec2Model"),PWr.forEach(t),Tho=r(Ewe," (Wav2Vec2 model)"),Ewe.forEach(t),Mho=i(M),Lp=n(M,"LI",{});var Cwe=s(Lp);Ate=n(Cwe,"STRONG",{});var $Wr=s(Ate);Eho=r($Wr,"wavlm"),$Wr.forEach(t),Cho=r(Cwe," \u2014 "),HP=n(Cwe,"A",{href:!0});var IWr=s(HP);who=r(IWr,"WavLMModel"),IWr.forEach(t),Aho=r(Cwe," (WavLM model)"),Cwe.forEach(t),yho=i(M),xp=n(M,"LI",{});var wwe=s(xp);yte=n(wwe,"STRONG",{});var qWr=s(yte);Lho=r(qWr,"xglm"),qWr.forEach(t),xho=r(wwe," \u2014 "),UP=n(wwe,"A",{href:!0});var NWr=s(UP);kho=r(NWr,"XGLMModel"),NWr.forEach(t),Sho=r(wwe," (XGLM model)"),wwe.forEach(t),Rho=i(M),kp=n(M,"LI",{});var Awe=s(kp);Lte=n(Awe,"STRONG",{});var jWr=s(Lte);Bho=r(jWr,"xlm"),jWr.forEach(t),Pho=r(Awe," \u2014 "),JP=n(Awe,"A",{href:!0});var DWr=s(JP);$ho=r(DWr,"XLMModel"),DWr.forEach(t),Iho=r(Awe," (XLM model)"),Awe.forEach(t),qho=i(M),Sp=n(M,"LI",{});var ywe=s(Sp);xte=n(ywe,"STRONG",{});var GWr=s(xte);Nho=r(GWr,"xlm-prophetnet"),GWr.forEach(t),jho=r(ywe," \u2014 "),YP=n(ywe,"A",{href:!0});var OWr=s(YP);Dho=r(OWr,"XLMProphetNetModel"),OWr.forEach(t),Gho=r(ywe," (XLMProphetNet model)"),ywe.forEach(t),Oho=i(M),Rp=n(M,"LI",{});var Lwe=s(Rp);kte=n(Lwe,"STRONG",{});var VWr=s(kte);Vho=r(VWr,"xlm-roberta"),VWr.forEach(t),Xho=r(Lwe," \u2014 "),KP=n(Lwe,"A",{href:!0});var XWr=s(KP);zho=r(XWr,"XLMRobertaModel"),XWr.forEach(t),Qho=r(Lwe," (XLM-RoBERTa model)"),Lwe.forEach(t),Who=i(M),Bp=n(M,"LI",{});var xwe=s(Bp);Ste=n(xwe,"STRONG",{});var zWr=s(Ste);Hho=r(zWr,"xlm-roberta-xl"),zWr.forEach(t),Uho=r(xwe," \u2014 "),ZP=n(xwe,"A",{href:!0});var QWr=s(ZP);Jho=r(QWr,"XLMRobertaXLModel"),QWr.forEach(t),Yho=r(xwe," (XLM-RoBERTa-XL model)"),xwe.forEach(t),Kho=i(M),Pp=n(M,"LI",{});var kwe=s(Pp);Rte=n(kwe,"STRONG",{});var WWr=s(Rte);Zho=r(WWr,"xlnet"),WWr.forEach(t),euo=r(kwe," \u2014 "),e$=n(kwe,"A",{href:!0});var HWr=s(e$);ouo=r(HWr,"XLNetModel"),HWr.forEach(t),ruo=r(kwe," (XLNet model)"),kwe.forEach(t),tuo=i(M),$p=n(M,"LI",{});var Swe=s($p);Bte=n(Swe,"STRONG",{});var UWr=s(Bte);auo=r(UWr,"yoso"),UWr.forEach(t),nuo=r(Swe," \u2014 "),o$=n(Swe,"A",{href:!0});var JWr=s(o$);suo=r(JWr,"YosoModel"),JWr.forEach(t),luo=r(Swe," (YOSO model)"),Swe.forEach(t),M.forEach(t),iuo=i(Dt),Ip=n(Dt,"P",{});var Rwe=s(Ip);duo=r(Rwe,"The model is set in evaluation mode by default using "),Pte=n(Rwe,"CODE",{});var YWr=s(Pte);cuo=r(YWr,"model.eval()"),YWr.forEach(t),muo=r(Rwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),$te=n(Rwe,"CODE",{});var KWr=s($te);fuo=r(KWr,"model.train()"),KWr.forEach(t),Rwe.forEach(t),guo=i(Dt),Ite=n(Dt,"P",{});var ZWr=s(Ite);huo=r(ZWr,"Examples:"),ZWr.forEach(t),uuo=i(Dt),f(h6.$$.fragment,Dt),Dt.forEach(t),Ws.forEach(t),QRe=i(c),ed=n(c,"H2",{class:!0});var o$e=s(ed);qp=n(o$e,"A",{id:!0,class:!0,href:!0});var eHr=s(qp);qte=n(eHr,"SPAN",{});var oHr=s(qte);f(u6.$$.fragment,oHr),oHr.forEach(t),eHr.forEach(t),puo=i(o$e),Nte=n(o$e,"SPAN",{});var rHr=s(Nte);_uo=r(rHr,"AutoModelForPreTraining"),rHr.forEach(t),o$e.forEach(t),WRe=i(c),Yo=n(c,"DIV",{class:!0});var Us=s(Yo);f(p6.$$.fragment,Us),buo=i(Us),od=n(Us,"P",{});var MU=s(od);vuo=r(MU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),r$=n(MU,"A",{href:!0});var tHr=s(r$);Fuo=r(tHr,"from_pretrained()"),tHr.forEach(t),Tuo=r(MU," class method or the "),t$=n(MU,"A",{href:!0});var aHr=s(t$);Muo=r(aHr,"from_config()"),aHr.forEach(t),Euo=r(MU,` class
method.`),MU.forEach(t),Cuo=i(Us),_6=n(Us,"P",{});var r$e=s(_6);wuo=r(r$e,"This class cannot be instantiated directly using "),jte=n(r$e,"CODE",{});var nHr=s(jte);Auo=r(nHr,"__init__()"),nHr.forEach(t),yuo=r(r$e," (throws an error)."),r$e.forEach(t),Luo=i(Us),zr=n(Us,"DIV",{class:!0});var Js=s(zr);f(b6.$$.fragment,Js),xuo=i(Js),Dte=n(Js,"P",{});var sHr=s(Dte);kuo=r(sHr,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),sHr.forEach(t),Suo=i(Js),rd=n(Js,"P",{});var EU=s(rd);Ruo=r(EU,`Note:
Loading a model from its configuration file does `),Gte=n(EU,"STRONG",{});var lHr=s(Gte);Buo=r(lHr,"not"),lHr.forEach(t),Puo=r(EU,` load the model weights. It only affects the
model\u2019s configuration. Use `),a$=n(EU,"A",{href:!0});var iHr=s(a$);$uo=r(iHr,"from_pretrained()"),iHr.forEach(t),Iuo=r(EU," to load the model weights."),EU.forEach(t),quo=i(Js),Ote=n(Js,"P",{});var dHr=s(Ote);Nuo=r(dHr,"Examples:"),dHr.forEach(t),juo=i(Js),f(v6.$$.fragment,Js),Js.forEach(t),Duo=i(Us),Ne=n(Us,"DIV",{class:!0});var Gt=s(Ne);f(F6.$$.fragment,Gt),Guo=i(Gt),Vte=n(Gt,"P",{});var cHr=s(Vte);Ouo=r(cHr,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),cHr.forEach(t),Vuo=i(Gt),za=n(Gt,"P",{});var RC=s(za);Xuo=r(RC,"The model class to instantiate is selected based on the "),Xte=n(RC,"CODE",{});var mHr=s(Xte);zuo=r(mHr,"model_type"),mHr.forEach(t),Quo=r(RC,` property of the config object (either
passed as an argument or loaded from `),zte=n(RC,"CODE",{});var fHr=s(zte);Wuo=r(fHr,"pretrained_model_name_or_path"),fHr.forEach(t),Huo=r(RC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qte=n(RC,"CODE",{});var gHr=s(Qte);Uuo=r(gHr,"pretrained_model_name_or_path"),gHr.forEach(t),Juo=r(RC,":"),RC.forEach(t),Yuo=i(Gt),S=n(Gt,"UL",{});var B=s(S);Np=n(B,"LI",{});var Bwe=s(Np);Wte=n(Bwe,"STRONG",{});var hHr=s(Wte);Kuo=r(hHr,"albert"),hHr.forEach(t),Zuo=r(Bwe," \u2014 "),n$=n(Bwe,"A",{href:!0});var uHr=s(n$);epo=r(uHr,"AlbertForPreTraining"),uHr.forEach(t),opo=r(Bwe," (ALBERT model)"),Bwe.forEach(t),rpo=i(B),jp=n(B,"LI",{});var Pwe=s(jp);Hte=n(Pwe,"STRONG",{});var pHr=s(Hte);tpo=r(pHr,"bart"),pHr.forEach(t),apo=r(Pwe," \u2014 "),s$=n(Pwe,"A",{href:!0});var _Hr=s(s$);npo=r(_Hr,"BartForConditionalGeneration"),_Hr.forEach(t),spo=r(Pwe," (BART model)"),Pwe.forEach(t),lpo=i(B),Dp=n(B,"LI",{});var $we=s(Dp);Ute=n($we,"STRONG",{});var bHr=s(Ute);ipo=r(bHr,"bert"),bHr.forEach(t),dpo=r($we," \u2014 "),l$=n($we,"A",{href:!0});var vHr=s(l$);cpo=r(vHr,"BertForPreTraining"),vHr.forEach(t),mpo=r($we," (BERT model)"),$we.forEach(t),fpo=i(B),Gp=n(B,"LI",{});var Iwe=s(Gp);Jte=n(Iwe,"STRONG",{});var FHr=s(Jte);gpo=r(FHr,"big_bird"),FHr.forEach(t),hpo=r(Iwe," \u2014 "),i$=n(Iwe,"A",{href:!0});var THr=s(i$);upo=r(THr,"BigBirdForPreTraining"),THr.forEach(t),ppo=r(Iwe," (BigBird model)"),Iwe.forEach(t),_po=i(B),Op=n(B,"LI",{});var qwe=s(Op);Yte=n(qwe,"STRONG",{});var MHr=s(Yte);bpo=r(MHr,"camembert"),MHr.forEach(t),vpo=r(qwe," \u2014 "),d$=n(qwe,"A",{href:!0});var EHr=s(d$);Fpo=r(EHr,"CamembertForMaskedLM"),EHr.forEach(t),Tpo=r(qwe," (CamemBERT model)"),qwe.forEach(t),Mpo=i(B),Vp=n(B,"LI",{});var Nwe=s(Vp);Kte=n(Nwe,"STRONG",{});var CHr=s(Kte);Epo=r(CHr,"ctrl"),CHr.forEach(t),Cpo=r(Nwe," \u2014 "),c$=n(Nwe,"A",{href:!0});var wHr=s(c$);wpo=r(wHr,"CTRLLMHeadModel"),wHr.forEach(t),Apo=r(Nwe," (CTRL model)"),Nwe.forEach(t),ypo=i(B),Xp=n(B,"LI",{});var jwe=s(Xp);Zte=n(jwe,"STRONG",{});var AHr=s(Zte);Lpo=r(AHr,"data2vec-text"),AHr.forEach(t),xpo=r(jwe," \u2014 "),m$=n(jwe,"A",{href:!0});var yHr=s(m$);kpo=r(yHr,"Data2VecTextForMaskedLM"),yHr.forEach(t),Spo=r(jwe," (Data2VecText model)"),jwe.forEach(t),Rpo=i(B),zp=n(B,"LI",{});var Dwe=s(zp);eae=n(Dwe,"STRONG",{});var LHr=s(eae);Bpo=r(LHr,"deberta"),LHr.forEach(t),Ppo=r(Dwe," \u2014 "),f$=n(Dwe,"A",{href:!0});var xHr=s(f$);$po=r(xHr,"DebertaForMaskedLM"),xHr.forEach(t),Ipo=r(Dwe," (DeBERTa model)"),Dwe.forEach(t),qpo=i(B),Qp=n(B,"LI",{});var Gwe=s(Qp);oae=n(Gwe,"STRONG",{});var kHr=s(oae);Npo=r(kHr,"deberta-v2"),kHr.forEach(t),jpo=r(Gwe," \u2014 "),g$=n(Gwe,"A",{href:!0});var SHr=s(g$);Dpo=r(SHr,"DebertaV2ForMaskedLM"),SHr.forEach(t),Gpo=r(Gwe," (DeBERTa-v2 model)"),Gwe.forEach(t),Opo=i(B),Wp=n(B,"LI",{});var Owe=s(Wp);rae=n(Owe,"STRONG",{});var RHr=s(rae);Vpo=r(RHr,"distilbert"),RHr.forEach(t),Xpo=r(Owe," \u2014 "),h$=n(Owe,"A",{href:!0});var BHr=s(h$);zpo=r(BHr,"DistilBertForMaskedLM"),BHr.forEach(t),Qpo=r(Owe," (DistilBERT model)"),Owe.forEach(t),Wpo=i(B),Hp=n(B,"LI",{});var Vwe=s(Hp);tae=n(Vwe,"STRONG",{});var PHr=s(tae);Hpo=r(PHr,"electra"),PHr.forEach(t),Upo=r(Vwe," \u2014 "),u$=n(Vwe,"A",{href:!0});var $Hr=s(u$);Jpo=r($Hr,"ElectraForPreTraining"),$Hr.forEach(t),Ypo=r(Vwe," (ELECTRA model)"),Vwe.forEach(t),Kpo=i(B),Up=n(B,"LI",{});var Xwe=s(Up);aae=n(Xwe,"STRONG",{});var IHr=s(aae);Zpo=r(IHr,"flaubert"),IHr.forEach(t),e_o=r(Xwe," \u2014 "),p$=n(Xwe,"A",{href:!0});var qHr=s(p$);o_o=r(qHr,"FlaubertWithLMHeadModel"),qHr.forEach(t),r_o=r(Xwe," (FlauBERT model)"),Xwe.forEach(t),t_o=i(B),Jp=n(B,"LI",{});var zwe=s(Jp);nae=n(zwe,"STRONG",{});var NHr=s(nae);a_o=r(NHr,"fnet"),NHr.forEach(t),n_o=r(zwe," \u2014 "),_$=n(zwe,"A",{href:!0});var jHr=s(_$);s_o=r(jHr,"FNetForPreTraining"),jHr.forEach(t),l_o=r(zwe," (FNet model)"),zwe.forEach(t),i_o=i(B),Yp=n(B,"LI",{});var Qwe=s(Yp);sae=n(Qwe,"STRONG",{});var DHr=s(sae);d_o=r(DHr,"fsmt"),DHr.forEach(t),c_o=r(Qwe," \u2014 "),b$=n(Qwe,"A",{href:!0});var GHr=s(b$);m_o=r(GHr,"FSMTForConditionalGeneration"),GHr.forEach(t),f_o=r(Qwe," (FairSeq Machine-Translation model)"),Qwe.forEach(t),g_o=i(B),Kp=n(B,"LI",{});var Wwe=s(Kp);lae=n(Wwe,"STRONG",{});var OHr=s(lae);h_o=r(OHr,"funnel"),OHr.forEach(t),u_o=r(Wwe," \u2014 "),v$=n(Wwe,"A",{href:!0});var VHr=s(v$);p_o=r(VHr,"FunnelForPreTraining"),VHr.forEach(t),__o=r(Wwe," (Funnel Transformer model)"),Wwe.forEach(t),b_o=i(B),Zp=n(B,"LI",{});var Hwe=s(Zp);iae=n(Hwe,"STRONG",{});var XHr=s(iae);v_o=r(XHr,"gpt2"),XHr.forEach(t),F_o=r(Hwe," \u2014 "),F$=n(Hwe,"A",{href:!0});var zHr=s(F$);T_o=r(zHr,"GPT2LMHeadModel"),zHr.forEach(t),M_o=r(Hwe," (OpenAI GPT-2 model)"),Hwe.forEach(t),E_o=i(B),e_=n(B,"LI",{});var Uwe=s(e_);dae=n(Uwe,"STRONG",{});var QHr=s(dae);C_o=r(QHr,"ibert"),QHr.forEach(t),w_o=r(Uwe," \u2014 "),T$=n(Uwe,"A",{href:!0});var WHr=s(T$);A_o=r(WHr,"IBertForMaskedLM"),WHr.forEach(t),y_o=r(Uwe," (I-BERT model)"),Uwe.forEach(t),L_o=i(B),o_=n(B,"LI",{});var Jwe=s(o_);cae=n(Jwe,"STRONG",{});var HHr=s(cae);x_o=r(HHr,"layoutlm"),HHr.forEach(t),k_o=r(Jwe," \u2014 "),M$=n(Jwe,"A",{href:!0});var UHr=s(M$);S_o=r(UHr,"LayoutLMForMaskedLM"),UHr.forEach(t),R_o=r(Jwe," (LayoutLM model)"),Jwe.forEach(t),B_o=i(B),r_=n(B,"LI",{});var Ywe=s(r_);mae=n(Ywe,"STRONG",{});var JHr=s(mae);P_o=r(JHr,"longformer"),JHr.forEach(t),$_o=r(Ywe," \u2014 "),E$=n(Ywe,"A",{href:!0});var YHr=s(E$);I_o=r(YHr,"LongformerForMaskedLM"),YHr.forEach(t),q_o=r(Ywe," (Longformer model)"),Ywe.forEach(t),N_o=i(B),t_=n(B,"LI",{});var Kwe=s(t_);fae=n(Kwe,"STRONG",{});var KHr=s(fae);j_o=r(KHr,"lxmert"),KHr.forEach(t),D_o=r(Kwe," \u2014 "),C$=n(Kwe,"A",{href:!0});var ZHr=s(C$);G_o=r(ZHr,"LxmertForPreTraining"),ZHr.forEach(t),O_o=r(Kwe," (LXMERT model)"),Kwe.forEach(t),V_o=i(B),a_=n(B,"LI",{});var Zwe=s(a_);gae=n(Zwe,"STRONG",{});var eUr=s(gae);X_o=r(eUr,"megatron-bert"),eUr.forEach(t),z_o=r(Zwe," \u2014 "),w$=n(Zwe,"A",{href:!0});var oUr=s(w$);Q_o=r(oUr,"MegatronBertForPreTraining"),oUr.forEach(t),W_o=r(Zwe," (MegatronBert model)"),Zwe.forEach(t),H_o=i(B),n_=n(B,"LI",{});var e6e=s(n_);hae=n(e6e,"STRONG",{});var rUr=s(hae);U_o=r(rUr,"mobilebert"),rUr.forEach(t),J_o=r(e6e," \u2014 "),A$=n(e6e,"A",{href:!0});var tUr=s(A$);Y_o=r(tUr,"MobileBertForPreTraining"),tUr.forEach(t),K_o=r(e6e," (MobileBERT model)"),e6e.forEach(t),Z_o=i(B),s_=n(B,"LI",{});var o6e=s(s_);uae=n(o6e,"STRONG",{});var aUr=s(uae);ebo=r(aUr,"mpnet"),aUr.forEach(t),obo=r(o6e," \u2014 "),y$=n(o6e,"A",{href:!0});var nUr=s(y$);rbo=r(nUr,"MPNetForMaskedLM"),nUr.forEach(t),tbo=r(o6e," (MPNet model)"),o6e.forEach(t),abo=i(B),l_=n(B,"LI",{});var r6e=s(l_);pae=n(r6e,"STRONG",{});var sUr=s(pae);nbo=r(sUr,"openai-gpt"),sUr.forEach(t),sbo=r(r6e," \u2014 "),L$=n(r6e,"A",{href:!0});var lUr=s(L$);lbo=r(lUr,"OpenAIGPTLMHeadModel"),lUr.forEach(t),ibo=r(r6e," (OpenAI GPT model)"),r6e.forEach(t),dbo=i(B),i_=n(B,"LI",{});var t6e=s(i_);_ae=n(t6e,"STRONG",{});var iUr=s(_ae);cbo=r(iUr,"retribert"),iUr.forEach(t),mbo=r(t6e," \u2014 "),x$=n(t6e,"A",{href:!0});var dUr=s(x$);fbo=r(dUr,"RetriBertModel"),dUr.forEach(t),gbo=r(t6e," (RetriBERT model)"),t6e.forEach(t),hbo=i(B),d_=n(B,"LI",{});var a6e=s(d_);bae=n(a6e,"STRONG",{});var cUr=s(bae);ubo=r(cUr,"roberta"),cUr.forEach(t),pbo=r(a6e," \u2014 "),k$=n(a6e,"A",{href:!0});var mUr=s(k$);_bo=r(mUr,"RobertaForMaskedLM"),mUr.forEach(t),bbo=r(a6e," (RoBERTa model)"),a6e.forEach(t),vbo=i(B),c_=n(B,"LI",{});var n6e=s(c_);vae=n(n6e,"STRONG",{});var fUr=s(vae);Fbo=r(fUr,"squeezebert"),fUr.forEach(t),Tbo=r(n6e," \u2014 "),S$=n(n6e,"A",{href:!0});var gUr=s(S$);Mbo=r(gUr,"SqueezeBertForMaskedLM"),gUr.forEach(t),Ebo=r(n6e," (SqueezeBERT model)"),n6e.forEach(t),Cbo=i(B),m_=n(B,"LI",{});var s6e=s(m_);Fae=n(s6e,"STRONG",{});var hUr=s(Fae);wbo=r(hUr,"t5"),hUr.forEach(t),Abo=r(s6e," \u2014 "),R$=n(s6e,"A",{href:!0});var uUr=s(R$);ybo=r(uUr,"T5ForConditionalGeneration"),uUr.forEach(t),Lbo=r(s6e," (T5 model)"),s6e.forEach(t),xbo=i(B),f_=n(B,"LI",{});var l6e=s(f_);Tae=n(l6e,"STRONG",{});var pUr=s(Tae);kbo=r(pUr,"tapas"),pUr.forEach(t),Sbo=r(l6e," \u2014 "),B$=n(l6e,"A",{href:!0});var _Ur=s(B$);Rbo=r(_Ur,"TapasForMaskedLM"),_Ur.forEach(t),Bbo=r(l6e," (TAPAS model)"),l6e.forEach(t),Pbo=i(B),g_=n(B,"LI",{});var i6e=s(g_);Mae=n(i6e,"STRONG",{});var bUr=s(Mae);$bo=r(bUr,"transfo-xl"),bUr.forEach(t),Ibo=r(i6e," \u2014 "),P$=n(i6e,"A",{href:!0});var vUr=s(P$);qbo=r(vUr,"TransfoXLLMHeadModel"),vUr.forEach(t),Nbo=r(i6e," (Transformer-XL model)"),i6e.forEach(t),jbo=i(B),h_=n(B,"LI",{});var d6e=s(h_);Eae=n(d6e,"STRONG",{});var FUr=s(Eae);Dbo=r(FUr,"unispeech"),FUr.forEach(t),Gbo=r(d6e," \u2014 "),$$=n(d6e,"A",{href:!0});var TUr=s($$);Obo=r(TUr,"UniSpeechForPreTraining"),TUr.forEach(t),Vbo=r(d6e," (UniSpeech model)"),d6e.forEach(t),Xbo=i(B),u_=n(B,"LI",{});var c6e=s(u_);Cae=n(c6e,"STRONG",{});var MUr=s(Cae);zbo=r(MUr,"unispeech-sat"),MUr.forEach(t),Qbo=r(c6e," \u2014 "),I$=n(c6e,"A",{href:!0});var EUr=s(I$);Wbo=r(EUr,"UniSpeechSatForPreTraining"),EUr.forEach(t),Hbo=r(c6e," (UniSpeechSat model)"),c6e.forEach(t),Ubo=i(B),p_=n(B,"LI",{});var m6e=s(p_);wae=n(m6e,"STRONG",{});var CUr=s(wae);Jbo=r(CUr,"visual_bert"),CUr.forEach(t),Ybo=r(m6e," \u2014 "),q$=n(m6e,"A",{href:!0});var wUr=s(q$);Kbo=r(wUr,"VisualBertForPreTraining"),wUr.forEach(t),Zbo=r(m6e," (VisualBert model)"),m6e.forEach(t),e2o=i(B),__=n(B,"LI",{});var f6e=s(__);Aae=n(f6e,"STRONG",{});var AUr=s(Aae);o2o=r(AUr,"vit_mae"),AUr.forEach(t),r2o=r(f6e," \u2014 "),N$=n(f6e,"A",{href:!0});var yUr=s(N$);t2o=r(yUr,"ViTMAEForPreTraining"),yUr.forEach(t),a2o=r(f6e," (ViTMAE model)"),f6e.forEach(t),n2o=i(B),b_=n(B,"LI",{});var g6e=s(b_);yae=n(g6e,"STRONG",{});var LUr=s(yae);s2o=r(LUr,"wav2vec2"),LUr.forEach(t),l2o=r(g6e," \u2014 "),j$=n(g6e,"A",{href:!0});var xUr=s(j$);i2o=r(xUr,"Wav2Vec2ForPreTraining"),xUr.forEach(t),d2o=r(g6e," (Wav2Vec2 model)"),g6e.forEach(t),c2o=i(B),v_=n(B,"LI",{});var h6e=s(v_);Lae=n(h6e,"STRONG",{});var kUr=s(Lae);m2o=r(kUr,"xlm"),kUr.forEach(t),f2o=r(h6e," \u2014 "),D$=n(h6e,"A",{href:!0});var SUr=s(D$);g2o=r(SUr,"XLMWithLMHeadModel"),SUr.forEach(t),h2o=r(h6e," (XLM model)"),h6e.forEach(t),u2o=i(B),F_=n(B,"LI",{});var u6e=s(F_);xae=n(u6e,"STRONG",{});var RUr=s(xae);p2o=r(RUr,"xlm-roberta"),RUr.forEach(t),_2o=r(u6e," \u2014 "),G$=n(u6e,"A",{href:!0});var BUr=s(G$);b2o=r(BUr,"XLMRobertaForMaskedLM"),BUr.forEach(t),v2o=r(u6e," (XLM-RoBERTa model)"),u6e.forEach(t),F2o=i(B),T_=n(B,"LI",{});var p6e=s(T_);kae=n(p6e,"STRONG",{});var PUr=s(kae);T2o=r(PUr,"xlm-roberta-xl"),PUr.forEach(t),M2o=r(p6e," \u2014 "),O$=n(p6e,"A",{href:!0});var $Ur=s(O$);E2o=r($Ur,"XLMRobertaXLForMaskedLM"),$Ur.forEach(t),C2o=r(p6e," (XLM-RoBERTa-XL model)"),p6e.forEach(t),w2o=i(B),M_=n(B,"LI",{});var _6e=s(M_);Sae=n(_6e,"STRONG",{});var IUr=s(Sae);A2o=r(IUr,"xlnet"),IUr.forEach(t),y2o=r(_6e," \u2014 "),V$=n(_6e,"A",{href:!0});var qUr=s(V$);L2o=r(qUr,"XLNetLMHeadModel"),qUr.forEach(t),x2o=r(_6e," (XLNet model)"),_6e.forEach(t),B.forEach(t),k2o=i(Gt),E_=n(Gt,"P",{});var b6e=s(E_);S2o=r(b6e,"The model is set in evaluation mode by default using "),Rae=n(b6e,"CODE",{});var NUr=s(Rae);R2o=r(NUr,"model.eval()"),NUr.forEach(t),B2o=r(b6e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Bae=n(b6e,"CODE",{});var jUr=s(Bae);P2o=r(jUr,"model.train()"),jUr.forEach(t),b6e.forEach(t),$2o=i(Gt),Pae=n(Gt,"P",{});var DUr=s(Pae);I2o=r(DUr,"Examples:"),DUr.forEach(t),q2o=i(Gt),f(T6.$$.fragment,Gt),Gt.forEach(t),Us.forEach(t),HRe=i(c),td=n(c,"H2",{class:!0});var t$e=s(td);C_=n(t$e,"A",{id:!0,class:!0,href:!0});var GUr=s(C_);$ae=n(GUr,"SPAN",{});var OUr=s($ae);f(M6.$$.fragment,OUr),OUr.forEach(t),GUr.forEach(t),N2o=i(t$e),Iae=n(t$e,"SPAN",{});var VUr=s(Iae);j2o=r(VUr,"AutoModelForCausalLM"),VUr.forEach(t),t$e.forEach(t),URe=i(c),Ko=n(c,"DIV",{class:!0});var Ys=s(Ko);f(E6.$$.fragment,Ys),D2o=i(Ys),ad=n(Ys,"P",{});var CU=s(ad);G2o=r(CU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),X$=n(CU,"A",{href:!0});var XUr=s(X$);O2o=r(XUr,"from_pretrained()"),XUr.forEach(t),V2o=r(CU," class method or the "),z$=n(CU,"A",{href:!0});var zUr=s(z$);X2o=r(zUr,"from_config()"),zUr.forEach(t),z2o=r(CU,` class
method.`),CU.forEach(t),Q2o=i(Ys),C6=n(Ys,"P",{});var a$e=s(C6);W2o=r(a$e,"This class cannot be instantiated directly using "),qae=n(a$e,"CODE",{});var QUr=s(qae);H2o=r(QUr,"__init__()"),QUr.forEach(t),U2o=r(a$e," (throws an error)."),a$e.forEach(t),J2o=i(Ys),Qr=n(Ys,"DIV",{class:!0});var Ks=s(Qr);f(w6.$$.fragment,Ks),Y2o=i(Ks),Nae=n(Ks,"P",{});var WUr=s(Nae);K2o=r(WUr,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),WUr.forEach(t),Z2o=i(Ks),nd=n(Ks,"P",{});var wU=s(nd);evo=r(wU,`Note:
Loading a model from its configuration file does `),jae=n(wU,"STRONG",{});var HUr=s(jae);ovo=r(HUr,"not"),HUr.forEach(t),rvo=r(wU,` load the model weights. It only affects the
model\u2019s configuration. Use `),Q$=n(wU,"A",{href:!0});var UUr=s(Q$);tvo=r(UUr,"from_pretrained()"),UUr.forEach(t),avo=r(wU," to load the model weights."),wU.forEach(t),nvo=i(Ks),Dae=n(Ks,"P",{});var JUr=s(Dae);svo=r(JUr,"Examples:"),JUr.forEach(t),lvo=i(Ks),f(A6.$$.fragment,Ks),Ks.forEach(t),ivo=i(Ys),je=n(Ys,"DIV",{class:!0});var Ot=s(je);f(y6.$$.fragment,Ot),dvo=i(Ot),Gae=n(Ot,"P",{});var YUr=s(Gae);cvo=r(YUr,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),YUr.forEach(t),mvo=i(Ot),Qa=n(Ot,"P",{});var BC=s(Qa);fvo=r(BC,"The model class to instantiate is selected based on the "),Oae=n(BC,"CODE",{});var KUr=s(Oae);gvo=r(KUr,"model_type"),KUr.forEach(t),hvo=r(BC,` property of the config object (either
passed as an argument or loaded from `),Vae=n(BC,"CODE",{});var ZUr=s(Vae);uvo=r(ZUr,"pretrained_model_name_or_path"),ZUr.forEach(t),pvo=r(BC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xae=n(BC,"CODE",{});var eJr=s(Xae);_vo=r(eJr,"pretrained_model_name_or_path"),eJr.forEach(t),bvo=r(BC,":"),BC.forEach(t),vvo=i(Ot),$=n(Ot,"UL",{});var q=s($);w_=n(q,"LI",{});var v6e=s(w_);zae=n(v6e,"STRONG",{});var oJr=s(zae);Fvo=r(oJr,"bart"),oJr.forEach(t),Tvo=r(v6e," \u2014 "),W$=n(v6e,"A",{href:!0});var rJr=s(W$);Mvo=r(rJr,"BartForCausalLM"),rJr.forEach(t),Evo=r(v6e," (BART model)"),v6e.forEach(t),Cvo=i(q),A_=n(q,"LI",{});var F6e=s(A_);Qae=n(F6e,"STRONG",{});var tJr=s(Qae);wvo=r(tJr,"bert"),tJr.forEach(t),Avo=r(F6e," \u2014 "),H$=n(F6e,"A",{href:!0});var aJr=s(H$);yvo=r(aJr,"BertLMHeadModel"),aJr.forEach(t),Lvo=r(F6e," (BERT model)"),F6e.forEach(t),xvo=i(q),y_=n(q,"LI",{});var T6e=s(y_);Wae=n(T6e,"STRONG",{});var nJr=s(Wae);kvo=r(nJr,"bert-generation"),nJr.forEach(t),Svo=r(T6e," \u2014 "),U$=n(T6e,"A",{href:!0});var sJr=s(U$);Rvo=r(sJr,"BertGenerationDecoder"),sJr.forEach(t),Bvo=r(T6e," (Bert Generation model)"),T6e.forEach(t),Pvo=i(q),L_=n(q,"LI",{});var M6e=s(L_);Hae=n(M6e,"STRONG",{});var lJr=s(Hae);$vo=r(lJr,"big_bird"),lJr.forEach(t),Ivo=r(M6e," \u2014 "),J$=n(M6e,"A",{href:!0});var iJr=s(J$);qvo=r(iJr,"BigBirdForCausalLM"),iJr.forEach(t),Nvo=r(M6e," (BigBird model)"),M6e.forEach(t),jvo=i(q),x_=n(q,"LI",{});var E6e=s(x_);Uae=n(E6e,"STRONG",{});var dJr=s(Uae);Dvo=r(dJr,"bigbird_pegasus"),dJr.forEach(t),Gvo=r(E6e," \u2014 "),Y$=n(E6e,"A",{href:!0});var cJr=s(Y$);Ovo=r(cJr,"BigBirdPegasusForCausalLM"),cJr.forEach(t),Vvo=r(E6e," (BigBirdPegasus model)"),E6e.forEach(t),Xvo=i(q),k_=n(q,"LI",{});var C6e=s(k_);Jae=n(C6e,"STRONG",{});var mJr=s(Jae);zvo=r(mJr,"blenderbot"),mJr.forEach(t),Qvo=r(C6e," \u2014 "),K$=n(C6e,"A",{href:!0});var fJr=s(K$);Wvo=r(fJr,"BlenderbotForCausalLM"),fJr.forEach(t),Hvo=r(C6e," (Blenderbot model)"),C6e.forEach(t),Uvo=i(q),S_=n(q,"LI",{});var w6e=s(S_);Yae=n(w6e,"STRONG",{});var gJr=s(Yae);Jvo=r(gJr,"blenderbot-small"),gJr.forEach(t),Yvo=r(w6e," \u2014 "),Z$=n(w6e,"A",{href:!0});var hJr=s(Z$);Kvo=r(hJr,"BlenderbotSmallForCausalLM"),hJr.forEach(t),Zvo=r(w6e," (BlenderbotSmall model)"),w6e.forEach(t),eFo=i(q),R_=n(q,"LI",{});var A6e=s(R_);Kae=n(A6e,"STRONG",{});var uJr=s(Kae);oFo=r(uJr,"camembert"),uJr.forEach(t),rFo=r(A6e," \u2014 "),eI=n(A6e,"A",{href:!0});var pJr=s(eI);tFo=r(pJr,"CamembertForCausalLM"),pJr.forEach(t),aFo=r(A6e," (CamemBERT model)"),A6e.forEach(t),nFo=i(q),B_=n(q,"LI",{});var y6e=s(B_);Zae=n(y6e,"STRONG",{});var _Jr=s(Zae);sFo=r(_Jr,"ctrl"),_Jr.forEach(t),lFo=r(y6e," \u2014 "),oI=n(y6e,"A",{href:!0});var bJr=s(oI);iFo=r(bJr,"CTRLLMHeadModel"),bJr.forEach(t),dFo=r(y6e," (CTRL model)"),y6e.forEach(t),cFo=i(q),P_=n(q,"LI",{});var L6e=s(P_);ene=n(L6e,"STRONG",{});var vJr=s(ene);mFo=r(vJr,"data2vec-text"),vJr.forEach(t),fFo=r(L6e," \u2014 "),rI=n(L6e,"A",{href:!0});var FJr=s(rI);gFo=r(FJr,"Data2VecTextForCausalLM"),FJr.forEach(t),hFo=r(L6e," (Data2VecText model)"),L6e.forEach(t),uFo=i(q),$_=n(q,"LI",{});var x6e=s($_);one=n(x6e,"STRONG",{});var TJr=s(one);pFo=r(TJr,"electra"),TJr.forEach(t),_Fo=r(x6e," \u2014 "),tI=n(x6e,"A",{href:!0});var MJr=s(tI);bFo=r(MJr,"ElectraForCausalLM"),MJr.forEach(t),vFo=r(x6e," (ELECTRA model)"),x6e.forEach(t),FFo=i(q),I_=n(q,"LI",{});var k6e=s(I_);rne=n(k6e,"STRONG",{});var EJr=s(rne);TFo=r(EJr,"gpt2"),EJr.forEach(t),MFo=r(k6e," \u2014 "),aI=n(k6e,"A",{href:!0});var CJr=s(aI);EFo=r(CJr,"GPT2LMHeadModel"),CJr.forEach(t),CFo=r(k6e," (OpenAI GPT-2 model)"),k6e.forEach(t),wFo=i(q),q_=n(q,"LI",{});var S6e=s(q_);tne=n(S6e,"STRONG",{});var wJr=s(tne);AFo=r(wJr,"gpt_neo"),wJr.forEach(t),yFo=r(S6e," \u2014 "),nI=n(S6e,"A",{href:!0});var AJr=s(nI);LFo=r(AJr,"GPTNeoForCausalLM"),AJr.forEach(t),xFo=r(S6e," (GPT Neo model)"),S6e.forEach(t),kFo=i(q),N_=n(q,"LI",{});var R6e=s(N_);ane=n(R6e,"STRONG",{});var yJr=s(ane);SFo=r(yJr,"gptj"),yJr.forEach(t),RFo=r(R6e," \u2014 "),sI=n(R6e,"A",{href:!0});var LJr=s(sI);BFo=r(LJr,"GPTJForCausalLM"),LJr.forEach(t),PFo=r(R6e," (GPT-J model)"),R6e.forEach(t),$Fo=i(q),j_=n(q,"LI",{});var B6e=s(j_);nne=n(B6e,"STRONG",{});var xJr=s(nne);IFo=r(xJr,"marian"),xJr.forEach(t),qFo=r(B6e," \u2014 "),lI=n(B6e,"A",{href:!0});var kJr=s(lI);NFo=r(kJr,"MarianForCausalLM"),kJr.forEach(t),jFo=r(B6e," (Marian model)"),B6e.forEach(t),DFo=i(q),D_=n(q,"LI",{});var P6e=s(D_);sne=n(P6e,"STRONG",{});var SJr=s(sne);GFo=r(SJr,"mbart"),SJr.forEach(t),OFo=r(P6e," \u2014 "),iI=n(P6e,"A",{href:!0});var RJr=s(iI);VFo=r(RJr,"MBartForCausalLM"),RJr.forEach(t),XFo=r(P6e," (mBART model)"),P6e.forEach(t),zFo=i(q),G_=n(q,"LI",{});var $6e=s(G_);lne=n($6e,"STRONG",{});var BJr=s(lne);QFo=r(BJr,"megatron-bert"),BJr.forEach(t),WFo=r($6e," \u2014 "),dI=n($6e,"A",{href:!0});var PJr=s(dI);HFo=r(PJr,"MegatronBertForCausalLM"),PJr.forEach(t),UFo=r($6e," (MegatronBert model)"),$6e.forEach(t),JFo=i(q),O_=n(q,"LI",{});var I6e=s(O_);ine=n(I6e,"STRONG",{});var $Jr=s(ine);YFo=r($Jr,"openai-gpt"),$Jr.forEach(t),KFo=r(I6e," \u2014 "),cI=n(I6e,"A",{href:!0});var IJr=s(cI);ZFo=r(IJr,"OpenAIGPTLMHeadModel"),IJr.forEach(t),e1o=r(I6e," (OpenAI GPT model)"),I6e.forEach(t),o1o=i(q),V_=n(q,"LI",{});var q6e=s(V_);dne=n(q6e,"STRONG",{});var qJr=s(dne);r1o=r(qJr,"pegasus"),qJr.forEach(t),t1o=r(q6e," \u2014 "),mI=n(q6e,"A",{href:!0});var NJr=s(mI);a1o=r(NJr,"PegasusForCausalLM"),NJr.forEach(t),n1o=r(q6e," (Pegasus model)"),q6e.forEach(t),s1o=i(q),X_=n(q,"LI",{});var N6e=s(X_);cne=n(N6e,"STRONG",{});var jJr=s(cne);l1o=r(jJr,"plbart"),jJr.forEach(t),i1o=r(N6e," \u2014 "),fI=n(N6e,"A",{href:!0});var DJr=s(fI);d1o=r(DJr,"PLBartForCausalLM"),DJr.forEach(t),c1o=r(N6e," (PLBart model)"),N6e.forEach(t),m1o=i(q),z_=n(q,"LI",{});var j6e=s(z_);mne=n(j6e,"STRONG",{});var GJr=s(mne);f1o=r(GJr,"prophetnet"),GJr.forEach(t),g1o=r(j6e," \u2014 "),gI=n(j6e,"A",{href:!0});var OJr=s(gI);h1o=r(OJr,"ProphetNetForCausalLM"),OJr.forEach(t),u1o=r(j6e," (ProphetNet model)"),j6e.forEach(t),p1o=i(q),Q_=n(q,"LI",{});var D6e=s(Q_);fne=n(D6e,"STRONG",{});var VJr=s(fne);_1o=r(VJr,"qdqbert"),VJr.forEach(t),b1o=r(D6e," \u2014 "),hI=n(D6e,"A",{href:!0});var XJr=s(hI);v1o=r(XJr,"QDQBertLMHeadModel"),XJr.forEach(t),F1o=r(D6e," (QDQBert model)"),D6e.forEach(t),T1o=i(q),W_=n(q,"LI",{});var G6e=s(W_);gne=n(G6e,"STRONG",{});var zJr=s(gne);M1o=r(zJr,"reformer"),zJr.forEach(t),E1o=r(G6e," \u2014 "),uI=n(G6e,"A",{href:!0});var QJr=s(uI);C1o=r(QJr,"ReformerModelWithLMHead"),QJr.forEach(t),w1o=r(G6e," (Reformer model)"),G6e.forEach(t),A1o=i(q),H_=n(q,"LI",{});var O6e=s(H_);hne=n(O6e,"STRONG",{});var WJr=s(hne);y1o=r(WJr,"rembert"),WJr.forEach(t),L1o=r(O6e," \u2014 "),pI=n(O6e,"A",{href:!0});var HJr=s(pI);x1o=r(HJr,"RemBertForCausalLM"),HJr.forEach(t),k1o=r(O6e," (RemBERT model)"),O6e.forEach(t),S1o=i(q),U_=n(q,"LI",{});var V6e=s(U_);une=n(V6e,"STRONG",{});var UJr=s(une);R1o=r(UJr,"roberta"),UJr.forEach(t),B1o=r(V6e," \u2014 "),_I=n(V6e,"A",{href:!0});var JJr=s(_I);P1o=r(JJr,"RobertaForCausalLM"),JJr.forEach(t),$1o=r(V6e," (RoBERTa model)"),V6e.forEach(t),I1o=i(q),J_=n(q,"LI",{});var X6e=s(J_);pne=n(X6e,"STRONG",{});var YJr=s(pne);q1o=r(YJr,"roformer"),YJr.forEach(t),N1o=r(X6e," \u2014 "),bI=n(X6e,"A",{href:!0});var KJr=s(bI);j1o=r(KJr,"RoFormerForCausalLM"),KJr.forEach(t),D1o=r(X6e," (RoFormer model)"),X6e.forEach(t),G1o=i(q),Y_=n(q,"LI",{});var z6e=s(Y_);_ne=n(z6e,"STRONG",{});var ZJr=s(_ne);O1o=r(ZJr,"speech_to_text_2"),ZJr.forEach(t),V1o=r(z6e," \u2014 "),vI=n(z6e,"A",{href:!0});var eYr=s(vI);X1o=r(eYr,"Speech2Text2ForCausalLM"),eYr.forEach(t),z1o=r(z6e," (Speech2Text2 model)"),z6e.forEach(t),Q1o=i(q),K_=n(q,"LI",{});var Q6e=s(K_);bne=n(Q6e,"STRONG",{});var oYr=s(bne);W1o=r(oYr,"transfo-xl"),oYr.forEach(t),H1o=r(Q6e," \u2014 "),FI=n(Q6e,"A",{href:!0});var rYr=s(FI);U1o=r(rYr,"TransfoXLLMHeadModel"),rYr.forEach(t),J1o=r(Q6e," (Transformer-XL model)"),Q6e.forEach(t),Y1o=i(q),Z_=n(q,"LI",{});var W6e=s(Z_);vne=n(W6e,"STRONG",{});var tYr=s(vne);K1o=r(tYr,"trocr"),tYr.forEach(t),Z1o=r(W6e," \u2014 "),TI=n(W6e,"A",{href:!0});var aYr=s(TI);eTo=r(aYr,"TrOCRForCausalLM"),aYr.forEach(t),oTo=r(W6e," (TrOCR model)"),W6e.forEach(t),rTo=i(q),eb=n(q,"LI",{});var H6e=s(eb);Fne=n(H6e,"STRONG",{});var nYr=s(Fne);tTo=r(nYr,"xglm"),nYr.forEach(t),aTo=r(H6e," \u2014 "),MI=n(H6e,"A",{href:!0});var sYr=s(MI);nTo=r(sYr,"XGLMForCausalLM"),sYr.forEach(t),sTo=r(H6e," (XGLM model)"),H6e.forEach(t),lTo=i(q),ob=n(q,"LI",{});var U6e=s(ob);Tne=n(U6e,"STRONG",{});var lYr=s(Tne);iTo=r(lYr,"xlm"),lYr.forEach(t),dTo=r(U6e," \u2014 "),EI=n(U6e,"A",{href:!0});var iYr=s(EI);cTo=r(iYr,"XLMWithLMHeadModel"),iYr.forEach(t),mTo=r(U6e," (XLM model)"),U6e.forEach(t),fTo=i(q),rb=n(q,"LI",{});var J6e=s(rb);Mne=n(J6e,"STRONG",{});var dYr=s(Mne);gTo=r(dYr,"xlm-prophetnet"),dYr.forEach(t),hTo=r(J6e," \u2014 "),CI=n(J6e,"A",{href:!0});var cYr=s(CI);uTo=r(cYr,"XLMProphetNetForCausalLM"),cYr.forEach(t),pTo=r(J6e," (XLMProphetNet model)"),J6e.forEach(t),_To=i(q),tb=n(q,"LI",{});var Y6e=s(tb);Ene=n(Y6e,"STRONG",{});var mYr=s(Ene);bTo=r(mYr,"xlm-roberta"),mYr.forEach(t),vTo=r(Y6e," \u2014 "),wI=n(Y6e,"A",{href:!0});var fYr=s(wI);FTo=r(fYr,"XLMRobertaForCausalLM"),fYr.forEach(t),TTo=r(Y6e," (XLM-RoBERTa model)"),Y6e.forEach(t),MTo=i(q),ab=n(q,"LI",{});var K6e=s(ab);Cne=n(K6e,"STRONG",{});var gYr=s(Cne);ETo=r(gYr,"xlm-roberta-xl"),gYr.forEach(t),CTo=r(K6e," \u2014 "),AI=n(K6e,"A",{href:!0});var hYr=s(AI);wTo=r(hYr,"XLMRobertaXLForCausalLM"),hYr.forEach(t),ATo=r(K6e," (XLM-RoBERTa-XL model)"),K6e.forEach(t),yTo=i(q),nb=n(q,"LI",{});var Z6e=s(nb);wne=n(Z6e,"STRONG",{});var uYr=s(wne);LTo=r(uYr,"xlnet"),uYr.forEach(t),xTo=r(Z6e," \u2014 "),yI=n(Z6e,"A",{href:!0});var pYr=s(yI);kTo=r(pYr,"XLNetLMHeadModel"),pYr.forEach(t),STo=r(Z6e," (XLNet model)"),Z6e.forEach(t),q.forEach(t),RTo=i(Ot),sb=n(Ot,"P",{});var eAe=s(sb);BTo=r(eAe,"The model is set in evaluation mode by default using "),Ane=n(eAe,"CODE",{});var _Yr=s(Ane);PTo=r(_Yr,"model.eval()"),_Yr.forEach(t),$To=r(eAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),yne=n(eAe,"CODE",{});var bYr=s(yne);ITo=r(bYr,"model.train()"),bYr.forEach(t),eAe.forEach(t),qTo=i(Ot),Lne=n(Ot,"P",{});var vYr=s(Lne);NTo=r(vYr,"Examples:"),vYr.forEach(t),jTo=i(Ot),f(L6.$$.fragment,Ot),Ot.forEach(t),Ys.forEach(t),JRe=i(c),sd=n(c,"H2",{class:!0});var n$e=s(sd);lb=n(n$e,"A",{id:!0,class:!0,href:!0});var FYr=s(lb);xne=n(FYr,"SPAN",{});var TYr=s(xne);f(x6.$$.fragment,TYr),TYr.forEach(t),FYr.forEach(t),DTo=i(n$e),kne=n(n$e,"SPAN",{});var MYr=s(kne);GTo=r(MYr,"AutoModelForMaskedLM"),MYr.forEach(t),n$e.forEach(t),YRe=i(c),Zo=n(c,"DIV",{class:!0});var Zs=s(Zo);f(k6.$$.fragment,Zs),OTo=i(Zs),ld=n(Zs,"P",{});var AU=s(ld);VTo=r(AU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),LI=n(AU,"A",{href:!0});var EYr=s(LI);XTo=r(EYr,"from_pretrained()"),EYr.forEach(t),zTo=r(AU," class method or the "),xI=n(AU,"A",{href:!0});var CYr=s(xI);QTo=r(CYr,"from_config()"),CYr.forEach(t),WTo=r(AU,` class
method.`),AU.forEach(t),HTo=i(Zs),S6=n(Zs,"P",{});var s$e=s(S6);UTo=r(s$e,"This class cannot be instantiated directly using "),Sne=n(s$e,"CODE",{});var wYr=s(Sne);JTo=r(wYr,"__init__()"),wYr.forEach(t),YTo=r(s$e," (throws an error)."),s$e.forEach(t),KTo=i(Zs),Wr=n(Zs,"DIV",{class:!0});var el=s(Wr);f(R6.$$.fragment,el),ZTo=i(el),Rne=n(el,"P",{});var AYr=s(Rne);eMo=r(AYr,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),AYr.forEach(t),oMo=i(el),id=n(el,"P",{});var yU=s(id);rMo=r(yU,`Note:
Loading a model from its configuration file does `),Bne=n(yU,"STRONG",{});var yYr=s(Bne);tMo=r(yYr,"not"),yYr.forEach(t),aMo=r(yU,` load the model weights. It only affects the
model\u2019s configuration. Use `),kI=n(yU,"A",{href:!0});var LYr=s(kI);nMo=r(LYr,"from_pretrained()"),LYr.forEach(t),sMo=r(yU," to load the model weights."),yU.forEach(t),lMo=i(el),Pne=n(el,"P",{});var xYr=s(Pne);iMo=r(xYr,"Examples:"),xYr.forEach(t),dMo=i(el),f(B6.$$.fragment,el),el.forEach(t),cMo=i(Zs),De=n(Zs,"DIV",{class:!0});var Vt=s(De);f(P6.$$.fragment,Vt),mMo=i(Vt),$ne=n(Vt,"P",{});var kYr=s($ne);fMo=r(kYr,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),kYr.forEach(t),gMo=i(Vt),Wa=n(Vt,"P",{});var PC=s(Wa);hMo=r(PC,"The model class to instantiate is selected based on the "),Ine=n(PC,"CODE",{});var SYr=s(Ine);uMo=r(SYr,"model_type"),SYr.forEach(t),pMo=r(PC,` property of the config object (either
passed as an argument or loaded from `),qne=n(PC,"CODE",{});var RYr=s(qne);_Mo=r(RYr,"pretrained_model_name_or_path"),RYr.forEach(t),bMo=r(PC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nne=n(PC,"CODE",{});var BYr=s(Nne);vMo=r(BYr,"pretrained_model_name_or_path"),BYr.forEach(t),FMo=r(PC,":"),PC.forEach(t),TMo=i(Vt),I=n(Vt,"UL",{});var N=s(I);ib=n(N,"LI",{});var oAe=s(ib);jne=n(oAe,"STRONG",{});var PYr=s(jne);MMo=r(PYr,"albert"),PYr.forEach(t),EMo=r(oAe," \u2014 "),SI=n(oAe,"A",{href:!0});var $Yr=s(SI);CMo=r($Yr,"AlbertForMaskedLM"),$Yr.forEach(t),wMo=r(oAe," (ALBERT model)"),oAe.forEach(t),AMo=i(N),db=n(N,"LI",{});var rAe=s(db);Dne=n(rAe,"STRONG",{});var IYr=s(Dne);yMo=r(IYr,"bart"),IYr.forEach(t),LMo=r(rAe," \u2014 "),RI=n(rAe,"A",{href:!0});var qYr=s(RI);xMo=r(qYr,"BartForConditionalGeneration"),qYr.forEach(t),kMo=r(rAe," (BART model)"),rAe.forEach(t),SMo=i(N),cb=n(N,"LI",{});var tAe=s(cb);Gne=n(tAe,"STRONG",{});var NYr=s(Gne);RMo=r(NYr,"bert"),NYr.forEach(t),BMo=r(tAe," \u2014 "),BI=n(tAe,"A",{href:!0});var jYr=s(BI);PMo=r(jYr,"BertForMaskedLM"),jYr.forEach(t),$Mo=r(tAe," (BERT model)"),tAe.forEach(t),IMo=i(N),mb=n(N,"LI",{});var aAe=s(mb);One=n(aAe,"STRONG",{});var DYr=s(One);qMo=r(DYr,"big_bird"),DYr.forEach(t),NMo=r(aAe," \u2014 "),PI=n(aAe,"A",{href:!0});var GYr=s(PI);jMo=r(GYr,"BigBirdForMaskedLM"),GYr.forEach(t),DMo=r(aAe," (BigBird model)"),aAe.forEach(t),GMo=i(N),fb=n(N,"LI",{});var nAe=s(fb);Vne=n(nAe,"STRONG",{});var OYr=s(Vne);OMo=r(OYr,"camembert"),OYr.forEach(t),VMo=r(nAe," \u2014 "),$I=n(nAe,"A",{href:!0});var VYr=s($I);XMo=r(VYr,"CamembertForMaskedLM"),VYr.forEach(t),zMo=r(nAe," (CamemBERT model)"),nAe.forEach(t),QMo=i(N),gb=n(N,"LI",{});var sAe=s(gb);Xne=n(sAe,"STRONG",{});var XYr=s(Xne);WMo=r(XYr,"convbert"),XYr.forEach(t),HMo=r(sAe," \u2014 "),II=n(sAe,"A",{href:!0});var zYr=s(II);UMo=r(zYr,"ConvBertForMaskedLM"),zYr.forEach(t),JMo=r(sAe," (ConvBERT model)"),sAe.forEach(t),YMo=i(N),hb=n(N,"LI",{});var lAe=s(hb);zne=n(lAe,"STRONG",{});var QYr=s(zne);KMo=r(QYr,"data2vec-text"),QYr.forEach(t),ZMo=r(lAe," \u2014 "),qI=n(lAe,"A",{href:!0});var WYr=s(qI);e4o=r(WYr,"Data2VecTextForMaskedLM"),WYr.forEach(t),o4o=r(lAe," (Data2VecText model)"),lAe.forEach(t),r4o=i(N),ub=n(N,"LI",{});var iAe=s(ub);Qne=n(iAe,"STRONG",{});var HYr=s(Qne);t4o=r(HYr,"deberta"),HYr.forEach(t),a4o=r(iAe," \u2014 "),NI=n(iAe,"A",{href:!0});var UYr=s(NI);n4o=r(UYr,"DebertaForMaskedLM"),UYr.forEach(t),s4o=r(iAe," (DeBERTa model)"),iAe.forEach(t),l4o=i(N),pb=n(N,"LI",{});var dAe=s(pb);Wne=n(dAe,"STRONG",{});var JYr=s(Wne);i4o=r(JYr,"deberta-v2"),JYr.forEach(t),d4o=r(dAe," \u2014 "),jI=n(dAe,"A",{href:!0});var YYr=s(jI);c4o=r(YYr,"DebertaV2ForMaskedLM"),YYr.forEach(t),m4o=r(dAe," (DeBERTa-v2 model)"),dAe.forEach(t),f4o=i(N),_b=n(N,"LI",{});var cAe=s(_b);Hne=n(cAe,"STRONG",{});var KYr=s(Hne);g4o=r(KYr,"distilbert"),KYr.forEach(t),h4o=r(cAe," \u2014 "),DI=n(cAe,"A",{href:!0});var ZYr=s(DI);u4o=r(ZYr,"DistilBertForMaskedLM"),ZYr.forEach(t),p4o=r(cAe," (DistilBERT model)"),cAe.forEach(t),_4o=i(N),bb=n(N,"LI",{});var mAe=s(bb);Une=n(mAe,"STRONG",{});var eKr=s(Une);b4o=r(eKr,"electra"),eKr.forEach(t),v4o=r(mAe," \u2014 "),GI=n(mAe,"A",{href:!0});var oKr=s(GI);F4o=r(oKr,"ElectraForMaskedLM"),oKr.forEach(t),T4o=r(mAe," (ELECTRA model)"),mAe.forEach(t),M4o=i(N),vb=n(N,"LI",{});var fAe=s(vb);Jne=n(fAe,"STRONG",{});var rKr=s(Jne);E4o=r(rKr,"flaubert"),rKr.forEach(t),C4o=r(fAe," \u2014 "),OI=n(fAe,"A",{href:!0});var tKr=s(OI);w4o=r(tKr,"FlaubertWithLMHeadModel"),tKr.forEach(t),A4o=r(fAe," (FlauBERT model)"),fAe.forEach(t),y4o=i(N),Fb=n(N,"LI",{});var gAe=s(Fb);Yne=n(gAe,"STRONG",{});var aKr=s(Yne);L4o=r(aKr,"fnet"),aKr.forEach(t),x4o=r(gAe," \u2014 "),VI=n(gAe,"A",{href:!0});var nKr=s(VI);k4o=r(nKr,"FNetForMaskedLM"),nKr.forEach(t),S4o=r(gAe," (FNet model)"),gAe.forEach(t),R4o=i(N),Tb=n(N,"LI",{});var hAe=s(Tb);Kne=n(hAe,"STRONG",{});var sKr=s(Kne);B4o=r(sKr,"funnel"),sKr.forEach(t),P4o=r(hAe," \u2014 "),XI=n(hAe,"A",{href:!0});var lKr=s(XI);$4o=r(lKr,"FunnelForMaskedLM"),lKr.forEach(t),I4o=r(hAe," (Funnel Transformer model)"),hAe.forEach(t),q4o=i(N),Mb=n(N,"LI",{});var uAe=s(Mb);Zne=n(uAe,"STRONG",{});var iKr=s(Zne);N4o=r(iKr,"ibert"),iKr.forEach(t),j4o=r(uAe," \u2014 "),zI=n(uAe,"A",{href:!0});var dKr=s(zI);D4o=r(dKr,"IBertForMaskedLM"),dKr.forEach(t),G4o=r(uAe," (I-BERT model)"),uAe.forEach(t),O4o=i(N),Eb=n(N,"LI",{});var pAe=s(Eb);ese=n(pAe,"STRONG",{});var cKr=s(ese);V4o=r(cKr,"layoutlm"),cKr.forEach(t),X4o=r(pAe," \u2014 "),QI=n(pAe,"A",{href:!0});var mKr=s(QI);z4o=r(mKr,"LayoutLMForMaskedLM"),mKr.forEach(t),Q4o=r(pAe," (LayoutLM model)"),pAe.forEach(t),W4o=i(N),Cb=n(N,"LI",{});var _Ae=s(Cb);ose=n(_Ae,"STRONG",{});var fKr=s(ose);H4o=r(fKr,"longformer"),fKr.forEach(t),U4o=r(_Ae," \u2014 "),WI=n(_Ae,"A",{href:!0});var gKr=s(WI);J4o=r(gKr,"LongformerForMaskedLM"),gKr.forEach(t),Y4o=r(_Ae," (Longformer model)"),_Ae.forEach(t),K4o=i(N),wb=n(N,"LI",{});var bAe=s(wb);rse=n(bAe,"STRONG",{});var hKr=s(rse);Z4o=r(hKr,"mbart"),hKr.forEach(t),eEo=r(bAe," \u2014 "),HI=n(bAe,"A",{href:!0});var uKr=s(HI);oEo=r(uKr,"MBartForConditionalGeneration"),uKr.forEach(t),rEo=r(bAe," (mBART model)"),bAe.forEach(t),tEo=i(N),Ab=n(N,"LI",{});var vAe=s(Ab);tse=n(vAe,"STRONG",{});var pKr=s(tse);aEo=r(pKr,"megatron-bert"),pKr.forEach(t),nEo=r(vAe," \u2014 "),UI=n(vAe,"A",{href:!0});var _Kr=s(UI);sEo=r(_Kr,"MegatronBertForMaskedLM"),_Kr.forEach(t),lEo=r(vAe," (MegatronBert model)"),vAe.forEach(t),iEo=i(N),yb=n(N,"LI",{});var FAe=s(yb);ase=n(FAe,"STRONG",{});var bKr=s(ase);dEo=r(bKr,"mobilebert"),bKr.forEach(t),cEo=r(FAe," \u2014 "),JI=n(FAe,"A",{href:!0});var vKr=s(JI);mEo=r(vKr,"MobileBertForMaskedLM"),vKr.forEach(t),fEo=r(FAe," (MobileBERT model)"),FAe.forEach(t),gEo=i(N),Lb=n(N,"LI",{});var TAe=s(Lb);nse=n(TAe,"STRONG",{});var FKr=s(nse);hEo=r(FKr,"mpnet"),FKr.forEach(t),uEo=r(TAe," \u2014 "),YI=n(TAe,"A",{href:!0});var TKr=s(YI);pEo=r(TKr,"MPNetForMaskedLM"),TKr.forEach(t),_Eo=r(TAe," (MPNet model)"),TAe.forEach(t),bEo=i(N),xb=n(N,"LI",{});var MAe=s(xb);sse=n(MAe,"STRONG",{});var MKr=s(sse);vEo=r(MKr,"nystromformer"),MKr.forEach(t),FEo=r(MAe," \u2014 "),KI=n(MAe,"A",{href:!0});var EKr=s(KI);TEo=r(EKr,"NystromformerForMaskedLM"),EKr.forEach(t),MEo=r(MAe," (Nystromformer model)"),MAe.forEach(t),EEo=i(N),kb=n(N,"LI",{});var EAe=s(kb);lse=n(EAe,"STRONG",{});var CKr=s(lse);CEo=r(CKr,"perceiver"),CKr.forEach(t),wEo=r(EAe," \u2014 "),ZI=n(EAe,"A",{href:!0});var wKr=s(ZI);AEo=r(wKr,"PerceiverForMaskedLM"),wKr.forEach(t),yEo=r(EAe," (Perceiver model)"),EAe.forEach(t),LEo=i(N),Sb=n(N,"LI",{});var CAe=s(Sb);ise=n(CAe,"STRONG",{});var AKr=s(ise);xEo=r(AKr,"qdqbert"),AKr.forEach(t),kEo=r(CAe," \u2014 "),eq=n(CAe,"A",{href:!0});var yKr=s(eq);SEo=r(yKr,"QDQBertForMaskedLM"),yKr.forEach(t),REo=r(CAe," (QDQBert model)"),CAe.forEach(t),BEo=i(N),Rb=n(N,"LI",{});var wAe=s(Rb);dse=n(wAe,"STRONG",{});var LKr=s(dse);PEo=r(LKr,"reformer"),LKr.forEach(t),$Eo=r(wAe," \u2014 "),oq=n(wAe,"A",{href:!0});var xKr=s(oq);IEo=r(xKr,"ReformerForMaskedLM"),xKr.forEach(t),qEo=r(wAe," (Reformer model)"),wAe.forEach(t),NEo=i(N),Bb=n(N,"LI",{});var AAe=s(Bb);cse=n(AAe,"STRONG",{});var kKr=s(cse);jEo=r(kKr,"rembert"),kKr.forEach(t),DEo=r(AAe," \u2014 "),rq=n(AAe,"A",{href:!0});var SKr=s(rq);GEo=r(SKr,"RemBertForMaskedLM"),SKr.forEach(t),OEo=r(AAe," (RemBERT model)"),AAe.forEach(t),VEo=i(N),Pb=n(N,"LI",{});var yAe=s(Pb);mse=n(yAe,"STRONG",{});var RKr=s(mse);XEo=r(RKr,"roberta"),RKr.forEach(t),zEo=r(yAe," \u2014 "),tq=n(yAe,"A",{href:!0});var BKr=s(tq);QEo=r(BKr,"RobertaForMaskedLM"),BKr.forEach(t),WEo=r(yAe," (RoBERTa model)"),yAe.forEach(t),HEo=i(N),$b=n(N,"LI",{});var LAe=s($b);fse=n(LAe,"STRONG",{});var PKr=s(fse);UEo=r(PKr,"roformer"),PKr.forEach(t),JEo=r(LAe," \u2014 "),aq=n(LAe,"A",{href:!0});var $Kr=s(aq);YEo=r($Kr,"RoFormerForMaskedLM"),$Kr.forEach(t),KEo=r(LAe," (RoFormer model)"),LAe.forEach(t),ZEo=i(N),Ib=n(N,"LI",{});var xAe=s(Ib);gse=n(xAe,"STRONG",{});var IKr=s(gse);e5o=r(IKr,"squeezebert"),IKr.forEach(t),o5o=r(xAe," \u2014 "),nq=n(xAe,"A",{href:!0});var qKr=s(nq);r5o=r(qKr,"SqueezeBertForMaskedLM"),qKr.forEach(t),t5o=r(xAe," (SqueezeBERT model)"),xAe.forEach(t),a5o=i(N),qb=n(N,"LI",{});var kAe=s(qb);hse=n(kAe,"STRONG",{});var NKr=s(hse);n5o=r(NKr,"tapas"),NKr.forEach(t),s5o=r(kAe," \u2014 "),sq=n(kAe,"A",{href:!0});var jKr=s(sq);l5o=r(jKr,"TapasForMaskedLM"),jKr.forEach(t),i5o=r(kAe," (TAPAS model)"),kAe.forEach(t),d5o=i(N),Nb=n(N,"LI",{});var SAe=s(Nb);use=n(SAe,"STRONG",{});var DKr=s(use);c5o=r(DKr,"wav2vec2"),DKr.forEach(t),m5o=r(SAe," \u2014 "),pse=n(SAe,"CODE",{});var GKr=s(pse);f5o=r(GKr,"Wav2Vec2ForMaskedLM"),GKr.forEach(t),g5o=r(SAe," (Wav2Vec2 model)"),SAe.forEach(t),h5o=i(N),jb=n(N,"LI",{});var RAe=s(jb);_se=n(RAe,"STRONG",{});var OKr=s(_se);u5o=r(OKr,"xlm"),OKr.forEach(t),p5o=r(RAe," \u2014 "),lq=n(RAe,"A",{href:!0});var VKr=s(lq);_5o=r(VKr,"XLMWithLMHeadModel"),VKr.forEach(t),b5o=r(RAe," (XLM model)"),RAe.forEach(t),v5o=i(N),Db=n(N,"LI",{});var BAe=s(Db);bse=n(BAe,"STRONG",{});var XKr=s(bse);F5o=r(XKr,"xlm-roberta"),XKr.forEach(t),T5o=r(BAe," \u2014 "),iq=n(BAe,"A",{href:!0});var zKr=s(iq);M5o=r(zKr,"XLMRobertaForMaskedLM"),zKr.forEach(t),E5o=r(BAe," (XLM-RoBERTa model)"),BAe.forEach(t),C5o=i(N),Gb=n(N,"LI",{});var PAe=s(Gb);vse=n(PAe,"STRONG",{});var QKr=s(vse);w5o=r(QKr,"xlm-roberta-xl"),QKr.forEach(t),A5o=r(PAe," \u2014 "),dq=n(PAe,"A",{href:!0});var WKr=s(dq);y5o=r(WKr,"XLMRobertaXLForMaskedLM"),WKr.forEach(t),L5o=r(PAe," (XLM-RoBERTa-XL model)"),PAe.forEach(t),x5o=i(N),Ob=n(N,"LI",{});var $Ae=s(Ob);Fse=n($Ae,"STRONG",{});var HKr=s(Fse);k5o=r(HKr,"yoso"),HKr.forEach(t),S5o=r($Ae," \u2014 "),cq=n($Ae,"A",{href:!0});var UKr=s(cq);R5o=r(UKr,"YosoForMaskedLM"),UKr.forEach(t),B5o=r($Ae," (YOSO model)"),$Ae.forEach(t),N.forEach(t),P5o=i(Vt),Vb=n(Vt,"P",{});var IAe=s(Vb);$5o=r(IAe,"The model is set in evaluation mode by default using "),Tse=n(IAe,"CODE",{});var JKr=s(Tse);I5o=r(JKr,"model.eval()"),JKr.forEach(t),q5o=r(IAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mse=n(IAe,"CODE",{});var YKr=s(Mse);N5o=r(YKr,"model.train()"),YKr.forEach(t),IAe.forEach(t),j5o=i(Vt),Ese=n(Vt,"P",{});var KKr=s(Ese);D5o=r(KKr,"Examples:"),KKr.forEach(t),G5o=i(Vt),f($6.$$.fragment,Vt),Vt.forEach(t),Zs.forEach(t),KRe=i(c),dd=n(c,"H2",{class:!0});var l$e=s(dd);Xb=n(l$e,"A",{id:!0,class:!0,href:!0});var ZKr=s(Xb);Cse=n(ZKr,"SPAN",{});var eZr=s(Cse);f(I6.$$.fragment,eZr),eZr.forEach(t),ZKr.forEach(t),O5o=i(l$e),wse=n(l$e,"SPAN",{});var oZr=s(wse);V5o=r(oZr,"AutoModelForSeq2SeqLM"),oZr.forEach(t),l$e.forEach(t),ZRe=i(c),er=n(c,"DIV",{class:!0});var ol=s(er);f(q6.$$.fragment,ol),X5o=i(ol),cd=n(ol,"P",{});var LU=s(cd);z5o=r(LU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),mq=n(LU,"A",{href:!0});var rZr=s(mq);Q5o=r(rZr,"from_pretrained()"),rZr.forEach(t),W5o=r(LU," class method or the "),fq=n(LU,"A",{href:!0});var tZr=s(fq);H5o=r(tZr,"from_config()"),tZr.forEach(t),U5o=r(LU,` class
method.`),LU.forEach(t),J5o=i(ol),N6=n(ol,"P",{});var i$e=s(N6);Y5o=r(i$e,"This class cannot be instantiated directly using "),Ase=n(i$e,"CODE",{});var aZr=s(Ase);K5o=r(aZr,"__init__()"),aZr.forEach(t),Z5o=r(i$e," (throws an error)."),i$e.forEach(t),e3o=i(ol),Hr=n(ol,"DIV",{class:!0});var rl=s(Hr);f(j6.$$.fragment,rl),o3o=i(rl),yse=n(rl,"P",{});var nZr=s(yse);r3o=r(nZr,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),nZr.forEach(t),t3o=i(rl),md=n(rl,"P",{});var xU=s(md);a3o=r(xU,`Note:
Loading a model from its configuration file does `),Lse=n(xU,"STRONG",{});var sZr=s(Lse);n3o=r(sZr,"not"),sZr.forEach(t),s3o=r(xU,` load the model weights. It only affects the
model\u2019s configuration. Use `),gq=n(xU,"A",{href:!0});var lZr=s(gq);l3o=r(lZr,"from_pretrained()"),lZr.forEach(t),i3o=r(xU," to load the model weights."),xU.forEach(t),d3o=i(rl),xse=n(rl,"P",{});var iZr=s(xse);c3o=r(iZr,"Examples:"),iZr.forEach(t),m3o=i(rl),f(D6.$$.fragment,rl),rl.forEach(t),f3o=i(ol),Ge=n(ol,"DIV",{class:!0});var Xt=s(Ge);f(G6.$$.fragment,Xt),g3o=i(Xt),kse=n(Xt,"P",{});var dZr=s(kse);h3o=r(dZr,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),dZr.forEach(t),u3o=i(Xt),Ha=n(Xt,"P",{});var $C=s(Ha);p3o=r($C,"The model class to instantiate is selected based on the "),Sse=n($C,"CODE",{});var cZr=s(Sse);_3o=r(cZr,"model_type"),cZr.forEach(t),b3o=r($C,` property of the config object (either
passed as an argument or loaded from `),Rse=n($C,"CODE",{});var mZr=s(Rse);v3o=r(mZr,"pretrained_model_name_or_path"),mZr.forEach(t),F3o=r($C,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bse=n($C,"CODE",{});var fZr=s(Bse);T3o=r(fZr,"pretrained_model_name_or_path"),fZr.forEach(t),M3o=r($C,":"),$C.forEach(t),E3o=i(Xt),ne=n(Xt,"UL",{});var le=s(ne);zb=n(le,"LI",{});var qAe=s(zb);Pse=n(qAe,"STRONG",{});var gZr=s(Pse);C3o=r(gZr,"bart"),gZr.forEach(t),w3o=r(qAe," \u2014 "),hq=n(qAe,"A",{href:!0});var hZr=s(hq);A3o=r(hZr,"BartForConditionalGeneration"),hZr.forEach(t),y3o=r(qAe," (BART model)"),qAe.forEach(t),L3o=i(le),Qb=n(le,"LI",{});var NAe=s(Qb);$se=n(NAe,"STRONG",{});var uZr=s($se);x3o=r(uZr,"bigbird_pegasus"),uZr.forEach(t),k3o=r(NAe," \u2014 "),uq=n(NAe,"A",{href:!0});var pZr=s(uq);S3o=r(pZr,"BigBirdPegasusForConditionalGeneration"),pZr.forEach(t),R3o=r(NAe," (BigBirdPegasus model)"),NAe.forEach(t),B3o=i(le),Wb=n(le,"LI",{});var jAe=s(Wb);Ise=n(jAe,"STRONG",{});var _Zr=s(Ise);P3o=r(_Zr,"blenderbot"),_Zr.forEach(t),$3o=r(jAe," \u2014 "),pq=n(jAe,"A",{href:!0});var bZr=s(pq);I3o=r(bZr,"BlenderbotForConditionalGeneration"),bZr.forEach(t),q3o=r(jAe," (Blenderbot model)"),jAe.forEach(t),N3o=i(le),Hb=n(le,"LI",{});var DAe=s(Hb);qse=n(DAe,"STRONG",{});var vZr=s(qse);j3o=r(vZr,"blenderbot-small"),vZr.forEach(t),D3o=r(DAe," \u2014 "),_q=n(DAe,"A",{href:!0});var FZr=s(_q);G3o=r(FZr,"BlenderbotSmallForConditionalGeneration"),FZr.forEach(t),O3o=r(DAe," (BlenderbotSmall model)"),DAe.forEach(t),V3o=i(le),Ub=n(le,"LI",{});var GAe=s(Ub);Nse=n(GAe,"STRONG",{});var TZr=s(Nse);X3o=r(TZr,"encoder-decoder"),TZr.forEach(t),z3o=r(GAe," \u2014 "),bq=n(GAe,"A",{href:!0});var MZr=s(bq);Q3o=r(MZr,"EncoderDecoderModel"),MZr.forEach(t),W3o=r(GAe," (Encoder decoder model)"),GAe.forEach(t),H3o=i(le),Jb=n(le,"LI",{});var OAe=s(Jb);jse=n(OAe,"STRONG",{});var EZr=s(jse);U3o=r(EZr,"fsmt"),EZr.forEach(t),J3o=r(OAe," \u2014 "),vq=n(OAe,"A",{href:!0});var CZr=s(vq);Y3o=r(CZr,"FSMTForConditionalGeneration"),CZr.forEach(t),K3o=r(OAe," (FairSeq Machine-Translation model)"),OAe.forEach(t),Z3o=i(le),Yb=n(le,"LI",{});var VAe=s(Yb);Dse=n(VAe,"STRONG",{});var wZr=s(Dse);eCo=r(wZr,"led"),wZr.forEach(t),oCo=r(VAe," \u2014 "),Fq=n(VAe,"A",{href:!0});var AZr=s(Fq);rCo=r(AZr,"LEDForConditionalGeneration"),AZr.forEach(t),tCo=r(VAe," (LED model)"),VAe.forEach(t),aCo=i(le),Kb=n(le,"LI",{});var XAe=s(Kb);Gse=n(XAe,"STRONG",{});var yZr=s(Gse);nCo=r(yZr,"m2m_100"),yZr.forEach(t),sCo=r(XAe," \u2014 "),Tq=n(XAe,"A",{href:!0});var LZr=s(Tq);lCo=r(LZr,"M2M100ForConditionalGeneration"),LZr.forEach(t),iCo=r(XAe," (M2M100 model)"),XAe.forEach(t),dCo=i(le),Zb=n(le,"LI",{});var zAe=s(Zb);Ose=n(zAe,"STRONG",{});var xZr=s(Ose);cCo=r(xZr,"marian"),xZr.forEach(t),mCo=r(zAe," \u2014 "),Mq=n(zAe,"A",{href:!0});var kZr=s(Mq);fCo=r(kZr,"MarianMTModel"),kZr.forEach(t),gCo=r(zAe," (Marian model)"),zAe.forEach(t),hCo=i(le),e2=n(le,"LI",{});var QAe=s(e2);Vse=n(QAe,"STRONG",{});var SZr=s(Vse);uCo=r(SZr,"mbart"),SZr.forEach(t),pCo=r(QAe," \u2014 "),Eq=n(QAe,"A",{href:!0});var RZr=s(Eq);_Co=r(RZr,"MBartForConditionalGeneration"),RZr.forEach(t),bCo=r(QAe," (mBART model)"),QAe.forEach(t),vCo=i(le),o2=n(le,"LI",{});var WAe=s(o2);Xse=n(WAe,"STRONG",{});var BZr=s(Xse);FCo=r(BZr,"mt5"),BZr.forEach(t),TCo=r(WAe," \u2014 "),Cq=n(WAe,"A",{href:!0});var PZr=s(Cq);MCo=r(PZr,"MT5ForConditionalGeneration"),PZr.forEach(t),ECo=r(WAe," (mT5 model)"),WAe.forEach(t),CCo=i(le),r2=n(le,"LI",{});var HAe=s(r2);zse=n(HAe,"STRONG",{});var $Zr=s(zse);wCo=r($Zr,"pegasus"),$Zr.forEach(t),ACo=r(HAe," \u2014 "),wq=n(HAe,"A",{href:!0});var IZr=s(wq);yCo=r(IZr,"PegasusForConditionalGeneration"),IZr.forEach(t),LCo=r(HAe," (Pegasus model)"),HAe.forEach(t),xCo=i(le),t2=n(le,"LI",{});var UAe=s(t2);Qse=n(UAe,"STRONG",{});var qZr=s(Qse);kCo=r(qZr,"plbart"),qZr.forEach(t),SCo=r(UAe," \u2014 "),Aq=n(UAe,"A",{href:!0});var NZr=s(Aq);RCo=r(NZr,"PLBartForConditionalGeneration"),NZr.forEach(t),BCo=r(UAe," (PLBart model)"),UAe.forEach(t),PCo=i(le),a2=n(le,"LI",{});var JAe=s(a2);Wse=n(JAe,"STRONG",{});var jZr=s(Wse);$Co=r(jZr,"prophetnet"),jZr.forEach(t),ICo=r(JAe," \u2014 "),yq=n(JAe,"A",{href:!0});var DZr=s(yq);qCo=r(DZr,"ProphetNetForConditionalGeneration"),DZr.forEach(t),NCo=r(JAe," (ProphetNet model)"),JAe.forEach(t),jCo=i(le),n2=n(le,"LI",{});var YAe=s(n2);Hse=n(YAe,"STRONG",{});var GZr=s(Hse);DCo=r(GZr,"t5"),GZr.forEach(t),GCo=r(YAe," \u2014 "),Lq=n(YAe,"A",{href:!0});var OZr=s(Lq);OCo=r(OZr,"T5ForConditionalGeneration"),OZr.forEach(t),VCo=r(YAe," (T5 model)"),YAe.forEach(t),XCo=i(le),s2=n(le,"LI",{});var KAe=s(s2);Use=n(KAe,"STRONG",{});var VZr=s(Use);zCo=r(VZr,"tapex"),VZr.forEach(t),QCo=r(KAe," \u2014 "),xq=n(KAe,"A",{href:!0});var XZr=s(xq);WCo=r(XZr,"BartForConditionalGeneration"),XZr.forEach(t),HCo=r(KAe," (TAPEX model)"),KAe.forEach(t),UCo=i(le),l2=n(le,"LI",{});var ZAe=s(l2);Jse=n(ZAe,"STRONG",{});var zZr=s(Jse);JCo=r(zZr,"xlm-prophetnet"),zZr.forEach(t),YCo=r(ZAe," \u2014 "),kq=n(ZAe,"A",{href:!0});var QZr=s(kq);KCo=r(QZr,"XLMProphetNetForConditionalGeneration"),QZr.forEach(t),ZCo=r(ZAe," (XLMProphetNet model)"),ZAe.forEach(t),le.forEach(t),ewo=i(Xt),i2=n(Xt,"P",{});var e0e=s(i2);owo=r(e0e,"The model is set in evaluation mode by default using "),Yse=n(e0e,"CODE",{});var WZr=s(Yse);rwo=r(WZr,"model.eval()"),WZr.forEach(t),two=r(e0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Kse=n(e0e,"CODE",{});var HZr=s(Kse);awo=r(HZr,"model.train()"),HZr.forEach(t),e0e.forEach(t),nwo=i(Xt),Zse=n(Xt,"P",{});var UZr=s(Zse);swo=r(UZr,"Examples:"),UZr.forEach(t),lwo=i(Xt),f(O6.$$.fragment,Xt),Xt.forEach(t),ol.forEach(t),eBe=i(c),fd=n(c,"H2",{class:!0});var d$e=s(fd);d2=n(d$e,"A",{id:!0,class:!0,href:!0});var JZr=s(d2);ele=n(JZr,"SPAN",{});var YZr=s(ele);f(V6.$$.fragment,YZr),YZr.forEach(t),JZr.forEach(t),iwo=i(d$e),ole=n(d$e,"SPAN",{});var KZr=s(ole);dwo=r(KZr,"AutoModelForSequenceClassification"),KZr.forEach(t),d$e.forEach(t),oBe=i(c),or=n(c,"DIV",{class:!0});var tl=s(or);f(X6.$$.fragment,tl),cwo=i(tl),gd=n(tl,"P",{});var kU=s(gd);mwo=r(kU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Sq=n(kU,"A",{href:!0});var ZZr=s(Sq);fwo=r(ZZr,"from_pretrained()"),ZZr.forEach(t),gwo=r(kU," class method or the "),Rq=n(kU,"A",{href:!0});var eet=s(Rq);hwo=r(eet,"from_config()"),eet.forEach(t),uwo=r(kU,` class
method.`),kU.forEach(t),pwo=i(tl),z6=n(tl,"P",{});var c$e=s(z6);_wo=r(c$e,"This class cannot be instantiated directly using "),rle=n(c$e,"CODE",{});var oet=s(rle);bwo=r(oet,"__init__()"),oet.forEach(t),vwo=r(c$e," (throws an error)."),c$e.forEach(t),Fwo=i(tl),Ur=n(tl,"DIV",{class:!0});var al=s(Ur);f(Q6.$$.fragment,al),Two=i(al),tle=n(al,"P",{});var ret=s(tle);Mwo=r(ret,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),ret.forEach(t),Ewo=i(al),hd=n(al,"P",{});var SU=s(hd);Cwo=r(SU,`Note:
Loading a model from its configuration file does `),ale=n(SU,"STRONG",{});var tet=s(ale);wwo=r(tet,"not"),tet.forEach(t),Awo=r(SU,` load the model weights. It only affects the
model\u2019s configuration. Use `),Bq=n(SU,"A",{href:!0});var aet=s(Bq);ywo=r(aet,"from_pretrained()"),aet.forEach(t),Lwo=r(SU," to load the model weights."),SU.forEach(t),xwo=i(al),nle=n(al,"P",{});var net=s(nle);kwo=r(net,"Examples:"),net.forEach(t),Swo=i(al),f(W6.$$.fragment,al),al.forEach(t),Rwo=i(tl),Oe=n(tl,"DIV",{class:!0});var zt=s(Oe);f(H6.$$.fragment,zt),Bwo=i(zt),sle=n(zt,"P",{});var set=s(sle);Pwo=r(set,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),set.forEach(t),$wo=i(zt),Ua=n(zt,"P",{});var IC=s(Ua);Iwo=r(IC,"The model class to instantiate is selected based on the "),lle=n(IC,"CODE",{});var iet=s(lle);qwo=r(iet,"model_type"),iet.forEach(t),Nwo=r(IC,` property of the config object (either
passed as an argument or loaded from `),ile=n(IC,"CODE",{});var det=s(ile);jwo=r(det,"pretrained_model_name_or_path"),det.forEach(t),Dwo=r(IC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dle=n(IC,"CODE",{});var cet=s(dle);Gwo=r(cet,"pretrained_model_name_or_path"),cet.forEach(t),Owo=r(IC,":"),IC.forEach(t),Vwo=i(zt),y=n(zt,"UL",{});var L=s(y);c2=n(L,"LI",{});var o0e=s(c2);cle=n(o0e,"STRONG",{});var met=s(cle);Xwo=r(met,"albert"),met.forEach(t),zwo=r(o0e," \u2014 "),Pq=n(o0e,"A",{href:!0});var fet=s(Pq);Qwo=r(fet,"AlbertForSequenceClassification"),fet.forEach(t),Wwo=r(o0e," (ALBERT model)"),o0e.forEach(t),Hwo=i(L),m2=n(L,"LI",{});var r0e=s(m2);mle=n(r0e,"STRONG",{});var get=s(mle);Uwo=r(get,"bart"),get.forEach(t),Jwo=r(r0e," \u2014 "),$q=n(r0e,"A",{href:!0});var het=s($q);Ywo=r(het,"BartForSequenceClassification"),het.forEach(t),Kwo=r(r0e," (BART model)"),r0e.forEach(t),Zwo=i(L),f2=n(L,"LI",{});var t0e=s(f2);fle=n(t0e,"STRONG",{});var uet=s(fle);e6o=r(uet,"bert"),uet.forEach(t),o6o=r(t0e," \u2014 "),Iq=n(t0e,"A",{href:!0});var pet=s(Iq);r6o=r(pet,"BertForSequenceClassification"),pet.forEach(t),t6o=r(t0e," (BERT model)"),t0e.forEach(t),a6o=i(L),g2=n(L,"LI",{});var a0e=s(g2);gle=n(a0e,"STRONG",{});var _et=s(gle);n6o=r(_et,"big_bird"),_et.forEach(t),s6o=r(a0e," \u2014 "),qq=n(a0e,"A",{href:!0});var bet=s(qq);l6o=r(bet,"BigBirdForSequenceClassification"),bet.forEach(t),i6o=r(a0e," (BigBird model)"),a0e.forEach(t),d6o=i(L),h2=n(L,"LI",{});var n0e=s(h2);hle=n(n0e,"STRONG",{});var vet=s(hle);c6o=r(vet,"bigbird_pegasus"),vet.forEach(t),m6o=r(n0e," \u2014 "),Nq=n(n0e,"A",{href:!0});var Fet=s(Nq);f6o=r(Fet,"BigBirdPegasusForSequenceClassification"),Fet.forEach(t),g6o=r(n0e," (BigBirdPegasus model)"),n0e.forEach(t),h6o=i(L),u2=n(L,"LI",{});var s0e=s(u2);ule=n(s0e,"STRONG",{});var Tet=s(ule);u6o=r(Tet,"camembert"),Tet.forEach(t),p6o=r(s0e," \u2014 "),jq=n(s0e,"A",{href:!0});var Met=s(jq);_6o=r(Met,"CamembertForSequenceClassification"),Met.forEach(t),b6o=r(s0e," (CamemBERT model)"),s0e.forEach(t),v6o=i(L),p2=n(L,"LI",{});var l0e=s(p2);ple=n(l0e,"STRONG",{});var Eet=s(ple);F6o=r(Eet,"canine"),Eet.forEach(t),T6o=r(l0e," \u2014 "),Dq=n(l0e,"A",{href:!0});var Cet=s(Dq);M6o=r(Cet,"CanineForSequenceClassification"),Cet.forEach(t),E6o=r(l0e," (Canine model)"),l0e.forEach(t),C6o=i(L),_2=n(L,"LI",{});var i0e=s(_2);_le=n(i0e,"STRONG",{});var wet=s(_le);w6o=r(wet,"convbert"),wet.forEach(t),A6o=r(i0e," \u2014 "),Gq=n(i0e,"A",{href:!0});var Aet=s(Gq);y6o=r(Aet,"ConvBertForSequenceClassification"),Aet.forEach(t),L6o=r(i0e," (ConvBERT model)"),i0e.forEach(t),x6o=i(L),b2=n(L,"LI",{});var d0e=s(b2);ble=n(d0e,"STRONG",{});var yet=s(ble);k6o=r(yet,"ctrl"),yet.forEach(t),S6o=r(d0e," \u2014 "),Oq=n(d0e,"A",{href:!0});var Let=s(Oq);R6o=r(Let,"CTRLForSequenceClassification"),Let.forEach(t),B6o=r(d0e," (CTRL model)"),d0e.forEach(t),P6o=i(L),v2=n(L,"LI",{});var c0e=s(v2);vle=n(c0e,"STRONG",{});var xet=s(vle);$6o=r(xet,"data2vec-text"),xet.forEach(t),I6o=r(c0e," \u2014 "),Vq=n(c0e,"A",{href:!0});var ket=s(Vq);q6o=r(ket,"Data2VecTextForSequenceClassification"),ket.forEach(t),N6o=r(c0e," (Data2VecText model)"),c0e.forEach(t),j6o=i(L),F2=n(L,"LI",{});var m0e=s(F2);Fle=n(m0e,"STRONG",{});var Set=s(Fle);D6o=r(Set,"deberta"),Set.forEach(t),G6o=r(m0e," \u2014 "),Xq=n(m0e,"A",{href:!0});var Ret=s(Xq);O6o=r(Ret,"DebertaForSequenceClassification"),Ret.forEach(t),V6o=r(m0e," (DeBERTa model)"),m0e.forEach(t),X6o=i(L),T2=n(L,"LI",{});var f0e=s(T2);Tle=n(f0e,"STRONG",{});var Bet=s(Tle);z6o=r(Bet,"deberta-v2"),Bet.forEach(t),Q6o=r(f0e," \u2014 "),zq=n(f0e,"A",{href:!0});var Pet=s(zq);W6o=r(Pet,"DebertaV2ForSequenceClassification"),Pet.forEach(t),H6o=r(f0e," (DeBERTa-v2 model)"),f0e.forEach(t),U6o=i(L),M2=n(L,"LI",{});var g0e=s(M2);Mle=n(g0e,"STRONG",{});var $et=s(Mle);J6o=r($et,"distilbert"),$et.forEach(t),Y6o=r(g0e," \u2014 "),Qq=n(g0e,"A",{href:!0});var Iet=s(Qq);K6o=r(Iet,"DistilBertForSequenceClassification"),Iet.forEach(t),Z6o=r(g0e," (DistilBERT model)"),g0e.forEach(t),eAo=i(L),E2=n(L,"LI",{});var h0e=s(E2);Ele=n(h0e,"STRONG",{});var qet=s(Ele);oAo=r(qet,"electra"),qet.forEach(t),rAo=r(h0e," \u2014 "),Wq=n(h0e,"A",{href:!0});var Net=s(Wq);tAo=r(Net,"ElectraForSequenceClassification"),Net.forEach(t),aAo=r(h0e," (ELECTRA model)"),h0e.forEach(t),nAo=i(L),C2=n(L,"LI",{});var u0e=s(C2);Cle=n(u0e,"STRONG",{});var jet=s(Cle);sAo=r(jet,"flaubert"),jet.forEach(t),lAo=r(u0e," \u2014 "),Hq=n(u0e,"A",{href:!0});var Det=s(Hq);iAo=r(Det,"FlaubertForSequenceClassification"),Det.forEach(t),dAo=r(u0e," (FlauBERT model)"),u0e.forEach(t),cAo=i(L),w2=n(L,"LI",{});var p0e=s(w2);wle=n(p0e,"STRONG",{});var Get=s(wle);mAo=r(Get,"fnet"),Get.forEach(t),fAo=r(p0e," \u2014 "),Uq=n(p0e,"A",{href:!0});var Oet=s(Uq);gAo=r(Oet,"FNetForSequenceClassification"),Oet.forEach(t),hAo=r(p0e," (FNet model)"),p0e.forEach(t),uAo=i(L),A2=n(L,"LI",{});var _0e=s(A2);Ale=n(_0e,"STRONG",{});var Vet=s(Ale);pAo=r(Vet,"funnel"),Vet.forEach(t),_Ao=r(_0e," \u2014 "),Jq=n(_0e,"A",{href:!0});var Xet=s(Jq);bAo=r(Xet,"FunnelForSequenceClassification"),Xet.forEach(t),vAo=r(_0e," (Funnel Transformer model)"),_0e.forEach(t),FAo=i(L),y2=n(L,"LI",{});var b0e=s(y2);yle=n(b0e,"STRONG",{});var zet=s(yle);TAo=r(zet,"gpt2"),zet.forEach(t),MAo=r(b0e," \u2014 "),Yq=n(b0e,"A",{href:!0});var Qet=s(Yq);EAo=r(Qet,"GPT2ForSequenceClassification"),Qet.forEach(t),CAo=r(b0e," (OpenAI GPT-2 model)"),b0e.forEach(t),wAo=i(L),L2=n(L,"LI",{});var v0e=s(L2);Lle=n(v0e,"STRONG",{});var Wet=s(Lle);AAo=r(Wet,"gpt_neo"),Wet.forEach(t),yAo=r(v0e," \u2014 "),Kq=n(v0e,"A",{href:!0});var Het=s(Kq);LAo=r(Het,"GPTNeoForSequenceClassification"),Het.forEach(t),xAo=r(v0e," (GPT Neo model)"),v0e.forEach(t),kAo=i(L),x2=n(L,"LI",{});var F0e=s(x2);xle=n(F0e,"STRONG",{});var Uet=s(xle);SAo=r(Uet,"gptj"),Uet.forEach(t),RAo=r(F0e," \u2014 "),Zq=n(F0e,"A",{href:!0});var Jet=s(Zq);BAo=r(Jet,"GPTJForSequenceClassification"),Jet.forEach(t),PAo=r(F0e," (GPT-J model)"),F0e.forEach(t),$Ao=i(L),k2=n(L,"LI",{});var T0e=s(k2);kle=n(T0e,"STRONG",{});var Yet=s(kle);IAo=r(Yet,"ibert"),Yet.forEach(t),qAo=r(T0e," \u2014 "),eN=n(T0e,"A",{href:!0});var Ket=s(eN);NAo=r(Ket,"IBertForSequenceClassification"),Ket.forEach(t),jAo=r(T0e," (I-BERT model)"),T0e.forEach(t),DAo=i(L),S2=n(L,"LI",{});var M0e=s(S2);Sle=n(M0e,"STRONG",{});var Zet=s(Sle);GAo=r(Zet,"layoutlm"),Zet.forEach(t),OAo=r(M0e," \u2014 "),oN=n(M0e,"A",{href:!0});var eot=s(oN);VAo=r(eot,"LayoutLMForSequenceClassification"),eot.forEach(t),XAo=r(M0e," (LayoutLM model)"),M0e.forEach(t),zAo=i(L),R2=n(L,"LI",{});var E0e=s(R2);Rle=n(E0e,"STRONG",{});var oot=s(Rle);QAo=r(oot,"layoutlmv2"),oot.forEach(t),WAo=r(E0e," \u2014 "),rN=n(E0e,"A",{href:!0});var rot=s(rN);HAo=r(rot,"LayoutLMv2ForSequenceClassification"),rot.forEach(t),UAo=r(E0e," (LayoutLMv2 model)"),E0e.forEach(t),JAo=i(L),B2=n(L,"LI",{});var C0e=s(B2);Ble=n(C0e,"STRONG",{});var tot=s(Ble);YAo=r(tot,"led"),tot.forEach(t),KAo=r(C0e," \u2014 "),tN=n(C0e,"A",{href:!0});var aot=s(tN);ZAo=r(aot,"LEDForSequenceClassification"),aot.forEach(t),e0o=r(C0e," (LED model)"),C0e.forEach(t),o0o=i(L),P2=n(L,"LI",{});var w0e=s(P2);Ple=n(w0e,"STRONG",{});var not=s(Ple);r0o=r(not,"longformer"),not.forEach(t),t0o=r(w0e," \u2014 "),aN=n(w0e,"A",{href:!0});var sot=s(aN);a0o=r(sot,"LongformerForSequenceClassification"),sot.forEach(t),n0o=r(w0e," (Longformer model)"),w0e.forEach(t),s0o=i(L),$2=n(L,"LI",{});var A0e=s($2);$le=n(A0e,"STRONG",{});var lot=s($le);l0o=r(lot,"mbart"),lot.forEach(t),i0o=r(A0e," \u2014 "),nN=n(A0e,"A",{href:!0});var iot=s(nN);d0o=r(iot,"MBartForSequenceClassification"),iot.forEach(t),c0o=r(A0e," (mBART model)"),A0e.forEach(t),m0o=i(L),I2=n(L,"LI",{});var y0e=s(I2);Ile=n(y0e,"STRONG",{});var dot=s(Ile);f0o=r(dot,"megatron-bert"),dot.forEach(t),g0o=r(y0e," \u2014 "),sN=n(y0e,"A",{href:!0});var cot=s(sN);h0o=r(cot,"MegatronBertForSequenceClassification"),cot.forEach(t),u0o=r(y0e," (MegatronBert model)"),y0e.forEach(t),p0o=i(L),q2=n(L,"LI",{});var L0e=s(q2);qle=n(L0e,"STRONG",{});var mot=s(qle);_0o=r(mot,"mobilebert"),mot.forEach(t),b0o=r(L0e," \u2014 "),lN=n(L0e,"A",{href:!0});var fot=s(lN);v0o=r(fot,"MobileBertForSequenceClassification"),fot.forEach(t),F0o=r(L0e," (MobileBERT model)"),L0e.forEach(t),T0o=i(L),N2=n(L,"LI",{});var x0e=s(N2);Nle=n(x0e,"STRONG",{});var got=s(Nle);M0o=r(got,"mpnet"),got.forEach(t),E0o=r(x0e," \u2014 "),iN=n(x0e,"A",{href:!0});var hot=s(iN);C0o=r(hot,"MPNetForSequenceClassification"),hot.forEach(t),w0o=r(x0e," (MPNet model)"),x0e.forEach(t),A0o=i(L),j2=n(L,"LI",{});var k0e=s(j2);jle=n(k0e,"STRONG",{});var uot=s(jle);y0o=r(uot,"nystromformer"),uot.forEach(t),L0o=r(k0e," \u2014 "),dN=n(k0e,"A",{href:!0});var pot=s(dN);x0o=r(pot,"NystromformerForSequenceClassification"),pot.forEach(t),k0o=r(k0e," (Nystromformer model)"),k0e.forEach(t),S0o=i(L),D2=n(L,"LI",{});var S0e=s(D2);Dle=n(S0e,"STRONG",{});var _ot=s(Dle);R0o=r(_ot,"openai-gpt"),_ot.forEach(t),B0o=r(S0e," \u2014 "),cN=n(S0e,"A",{href:!0});var bot=s(cN);P0o=r(bot,"OpenAIGPTForSequenceClassification"),bot.forEach(t),$0o=r(S0e," (OpenAI GPT model)"),S0e.forEach(t),I0o=i(L),G2=n(L,"LI",{});var R0e=s(G2);Gle=n(R0e,"STRONG",{});var vot=s(Gle);q0o=r(vot,"perceiver"),vot.forEach(t),N0o=r(R0e," \u2014 "),mN=n(R0e,"A",{href:!0});var Fot=s(mN);j0o=r(Fot,"PerceiverForSequenceClassification"),Fot.forEach(t),D0o=r(R0e," (Perceiver model)"),R0e.forEach(t),G0o=i(L),O2=n(L,"LI",{});var B0e=s(O2);Ole=n(B0e,"STRONG",{});var Tot=s(Ole);O0o=r(Tot,"plbart"),Tot.forEach(t),V0o=r(B0e," \u2014 "),fN=n(B0e,"A",{href:!0});var Mot=s(fN);X0o=r(Mot,"PLBartForSequenceClassification"),Mot.forEach(t),z0o=r(B0e," (PLBart model)"),B0e.forEach(t),Q0o=i(L),V2=n(L,"LI",{});var P0e=s(V2);Vle=n(P0e,"STRONG",{});var Eot=s(Vle);W0o=r(Eot,"qdqbert"),Eot.forEach(t),H0o=r(P0e," \u2014 "),gN=n(P0e,"A",{href:!0});var Cot=s(gN);U0o=r(Cot,"QDQBertForSequenceClassification"),Cot.forEach(t),J0o=r(P0e," (QDQBert model)"),P0e.forEach(t),Y0o=i(L),X2=n(L,"LI",{});var $0e=s(X2);Xle=n($0e,"STRONG",{});var wot=s(Xle);K0o=r(wot,"reformer"),wot.forEach(t),Z0o=r($0e," \u2014 "),hN=n($0e,"A",{href:!0});var Aot=s(hN);eyo=r(Aot,"ReformerForSequenceClassification"),Aot.forEach(t),oyo=r($0e," (Reformer model)"),$0e.forEach(t),ryo=i(L),z2=n(L,"LI",{});var I0e=s(z2);zle=n(I0e,"STRONG",{});var yot=s(zle);tyo=r(yot,"rembert"),yot.forEach(t),ayo=r(I0e," \u2014 "),uN=n(I0e,"A",{href:!0});var Lot=s(uN);nyo=r(Lot,"RemBertForSequenceClassification"),Lot.forEach(t),syo=r(I0e," (RemBERT model)"),I0e.forEach(t),lyo=i(L),Q2=n(L,"LI",{});var q0e=s(Q2);Qle=n(q0e,"STRONG",{});var xot=s(Qle);iyo=r(xot,"roberta"),xot.forEach(t),dyo=r(q0e," \u2014 "),pN=n(q0e,"A",{href:!0});var kot=s(pN);cyo=r(kot,"RobertaForSequenceClassification"),kot.forEach(t),myo=r(q0e," (RoBERTa model)"),q0e.forEach(t),fyo=i(L),W2=n(L,"LI",{});var N0e=s(W2);Wle=n(N0e,"STRONG",{});var Sot=s(Wle);gyo=r(Sot,"roformer"),Sot.forEach(t),hyo=r(N0e," \u2014 "),_N=n(N0e,"A",{href:!0});var Rot=s(_N);uyo=r(Rot,"RoFormerForSequenceClassification"),Rot.forEach(t),pyo=r(N0e," (RoFormer model)"),N0e.forEach(t),_yo=i(L),H2=n(L,"LI",{});var j0e=s(H2);Hle=n(j0e,"STRONG",{});var Bot=s(Hle);byo=r(Bot,"squeezebert"),Bot.forEach(t),vyo=r(j0e," \u2014 "),bN=n(j0e,"A",{href:!0});var Pot=s(bN);Fyo=r(Pot,"SqueezeBertForSequenceClassification"),Pot.forEach(t),Tyo=r(j0e," (SqueezeBERT model)"),j0e.forEach(t),Myo=i(L),U2=n(L,"LI",{});var D0e=s(U2);Ule=n(D0e,"STRONG",{});var $ot=s(Ule);Eyo=r($ot,"tapas"),$ot.forEach(t),Cyo=r(D0e," \u2014 "),vN=n(D0e,"A",{href:!0});var Iot=s(vN);wyo=r(Iot,"TapasForSequenceClassification"),Iot.forEach(t),Ayo=r(D0e," (TAPAS model)"),D0e.forEach(t),yyo=i(L),J2=n(L,"LI",{});var G0e=s(J2);Jle=n(G0e,"STRONG",{});var qot=s(Jle);Lyo=r(qot,"tapex"),qot.forEach(t),xyo=r(G0e," \u2014 "),FN=n(G0e,"A",{href:!0});var Not=s(FN);kyo=r(Not,"BartForSequenceClassification"),Not.forEach(t),Syo=r(G0e," (TAPEX model)"),G0e.forEach(t),Ryo=i(L),Y2=n(L,"LI",{});var O0e=s(Y2);Yle=n(O0e,"STRONG",{});var jot=s(Yle);Byo=r(jot,"transfo-xl"),jot.forEach(t),Pyo=r(O0e," \u2014 "),TN=n(O0e,"A",{href:!0});var Dot=s(TN);$yo=r(Dot,"TransfoXLForSequenceClassification"),Dot.forEach(t),Iyo=r(O0e," (Transformer-XL model)"),O0e.forEach(t),qyo=i(L),K2=n(L,"LI",{});var V0e=s(K2);Kle=n(V0e,"STRONG",{});var Got=s(Kle);Nyo=r(Got,"xlm"),Got.forEach(t),jyo=r(V0e," \u2014 "),MN=n(V0e,"A",{href:!0});var Oot=s(MN);Dyo=r(Oot,"XLMForSequenceClassification"),Oot.forEach(t),Gyo=r(V0e," (XLM model)"),V0e.forEach(t),Oyo=i(L),Z2=n(L,"LI",{});var X0e=s(Z2);Zle=n(X0e,"STRONG",{});var Vot=s(Zle);Vyo=r(Vot,"xlm-roberta"),Vot.forEach(t),Xyo=r(X0e," \u2014 "),EN=n(X0e,"A",{href:!0});var Xot=s(EN);zyo=r(Xot,"XLMRobertaForSequenceClassification"),Xot.forEach(t),Qyo=r(X0e," (XLM-RoBERTa model)"),X0e.forEach(t),Wyo=i(L),ev=n(L,"LI",{});var z0e=s(ev);eie=n(z0e,"STRONG",{});var zot=s(eie);Hyo=r(zot,"xlm-roberta-xl"),zot.forEach(t),Uyo=r(z0e," \u2014 "),CN=n(z0e,"A",{href:!0});var Qot=s(CN);Jyo=r(Qot,"XLMRobertaXLForSequenceClassification"),Qot.forEach(t),Yyo=r(z0e," (XLM-RoBERTa-XL model)"),z0e.forEach(t),Kyo=i(L),ov=n(L,"LI",{});var Q0e=s(ov);oie=n(Q0e,"STRONG",{});var Wot=s(oie);Zyo=r(Wot,"xlnet"),Wot.forEach(t),e8o=r(Q0e," \u2014 "),wN=n(Q0e,"A",{href:!0});var Hot=s(wN);o8o=r(Hot,"XLNetForSequenceClassification"),Hot.forEach(t),r8o=r(Q0e," (XLNet model)"),Q0e.forEach(t),t8o=i(L),rv=n(L,"LI",{});var W0e=s(rv);rie=n(W0e,"STRONG",{});var Uot=s(rie);a8o=r(Uot,"yoso"),Uot.forEach(t),n8o=r(W0e," \u2014 "),AN=n(W0e,"A",{href:!0});var Jot=s(AN);s8o=r(Jot,"YosoForSequenceClassification"),Jot.forEach(t),l8o=r(W0e," (YOSO model)"),W0e.forEach(t),L.forEach(t),i8o=i(zt),tv=n(zt,"P",{});var H0e=s(tv);d8o=r(H0e,"The model is set in evaluation mode by default using "),tie=n(H0e,"CODE",{});var Yot=s(tie);c8o=r(Yot,"model.eval()"),Yot.forEach(t),m8o=r(H0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),aie=n(H0e,"CODE",{});var Kot=s(aie);f8o=r(Kot,"model.train()"),Kot.forEach(t),H0e.forEach(t),g8o=i(zt),nie=n(zt,"P",{});var Zot=s(nie);h8o=r(Zot,"Examples:"),Zot.forEach(t),u8o=i(zt),f(U6.$$.fragment,zt),zt.forEach(t),tl.forEach(t),rBe=i(c),ud=n(c,"H2",{class:!0});var m$e=s(ud);av=n(m$e,"A",{id:!0,class:!0,href:!0});var ert=s(av);sie=n(ert,"SPAN",{});var ort=s(sie);f(J6.$$.fragment,ort),ort.forEach(t),ert.forEach(t),p8o=i(m$e),lie=n(m$e,"SPAN",{});var rrt=s(lie);_8o=r(rrt,"AutoModelForMultipleChoice"),rrt.forEach(t),m$e.forEach(t),tBe=i(c),rr=n(c,"DIV",{class:!0});var nl=s(rr);f(Y6.$$.fragment,nl),b8o=i(nl),pd=n(nl,"P",{});var RU=s(pd);v8o=r(RU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),yN=n(RU,"A",{href:!0});var trt=s(yN);F8o=r(trt,"from_pretrained()"),trt.forEach(t),T8o=r(RU," class method or the "),LN=n(RU,"A",{href:!0});var art=s(LN);M8o=r(art,"from_config()"),art.forEach(t),E8o=r(RU,` class
method.`),RU.forEach(t),C8o=i(nl),K6=n(nl,"P",{});var f$e=s(K6);w8o=r(f$e,"This class cannot be instantiated directly using "),iie=n(f$e,"CODE",{});var nrt=s(iie);A8o=r(nrt,"__init__()"),nrt.forEach(t),y8o=r(f$e," (throws an error)."),f$e.forEach(t),L8o=i(nl),Jr=n(nl,"DIV",{class:!0});var sl=s(Jr);f(Z6.$$.fragment,sl),x8o=i(sl),die=n(sl,"P",{});var srt=s(die);k8o=r(srt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),srt.forEach(t),S8o=i(sl),_d=n(sl,"P",{});var BU=s(_d);R8o=r(BU,`Note:
Loading a model from its configuration file does `),cie=n(BU,"STRONG",{});var lrt=s(cie);B8o=r(lrt,"not"),lrt.forEach(t),P8o=r(BU,` load the model weights. It only affects the
model\u2019s configuration. Use `),xN=n(BU,"A",{href:!0});var irt=s(xN);$8o=r(irt,"from_pretrained()"),irt.forEach(t),I8o=r(BU," to load the model weights."),BU.forEach(t),q8o=i(sl),mie=n(sl,"P",{});var drt=s(mie);N8o=r(drt,"Examples:"),drt.forEach(t),j8o=i(sl),f(eA.$$.fragment,sl),sl.forEach(t),D8o=i(nl),Ve=n(nl,"DIV",{class:!0});var Qt=s(Ve);f(oA.$$.fragment,Qt),G8o=i(Qt),fie=n(Qt,"P",{});var crt=s(fie);O8o=r(crt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),crt.forEach(t),V8o=i(Qt),Ja=n(Qt,"P",{});var qC=s(Ja);X8o=r(qC,"The model class to instantiate is selected based on the "),gie=n(qC,"CODE",{});var mrt=s(gie);z8o=r(mrt,"model_type"),mrt.forEach(t),Q8o=r(qC,` property of the config object (either
passed as an argument or loaded from `),hie=n(qC,"CODE",{});var frt=s(hie);W8o=r(frt,"pretrained_model_name_or_path"),frt.forEach(t),H8o=r(qC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uie=n(qC,"CODE",{});var grt=s(uie);U8o=r(grt,"pretrained_model_name_or_path"),grt.forEach(t),J8o=r(qC,":"),qC.forEach(t),Y8o=i(Qt),G=n(Qt,"UL",{});var O=s(G);nv=n(O,"LI",{});var U0e=s(nv);pie=n(U0e,"STRONG",{});var hrt=s(pie);K8o=r(hrt,"albert"),hrt.forEach(t),Z8o=r(U0e," \u2014 "),kN=n(U0e,"A",{href:!0});var urt=s(kN);eLo=r(urt,"AlbertForMultipleChoice"),urt.forEach(t),oLo=r(U0e," (ALBERT model)"),U0e.forEach(t),rLo=i(O),sv=n(O,"LI",{});var J0e=s(sv);_ie=n(J0e,"STRONG",{});var prt=s(_ie);tLo=r(prt,"bert"),prt.forEach(t),aLo=r(J0e," \u2014 "),SN=n(J0e,"A",{href:!0});var _rt=s(SN);nLo=r(_rt,"BertForMultipleChoice"),_rt.forEach(t),sLo=r(J0e," (BERT model)"),J0e.forEach(t),lLo=i(O),lv=n(O,"LI",{});var Y0e=s(lv);bie=n(Y0e,"STRONG",{});var brt=s(bie);iLo=r(brt,"big_bird"),brt.forEach(t),dLo=r(Y0e," \u2014 "),RN=n(Y0e,"A",{href:!0});var vrt=s(RN);cLo=r(vrt,"BigBirdForMultipleChoice"),vrt.forEach(t),mLo=r(Y0e," (BigBird model)"),Y0e.forEach(t),fLo=i(O),iv=n(O,"LI",{});var K0e=s(iv);vie=n(K0e,"STRONG",{});var Frt=s(vie);gLo=r(Frt,"camembert"),Frt.forEach(t),hLo=r(K0e," \u2014 "),BN=n(K0e,"A",{href:!0});var Trt=s(BN);uLo=r(Trt,"CamembertForMultipleChoice"),Trt.forEach(t),pLo=r(K0e," (CamemBERT model)"),K0e.forEach(t),_Lo=i(O),dv=n(O,"LI",{});var Z0e=s(dv);Fie=n(Z0e,"STRONG",{});var Mrt=s(Fie);bLo=r(Mrt,"canine"),Mrt.forEach(t),vLo=r(Z0e," \u2014 "),PN=n(Z0e,"A",{href:!0});var Ert=s(PN);FLo=r(Ert,"CanineForMultipleChoice"),Ert.forEach(t),TLo=r(Z0e," (Canine model)"),Z0e.forEach(t),MLo=i(O),cv=n(O,"LI",{});var eye=s(cv);Tie=n(eye,"STRONG",{});var Crt=s(Tie);ELo=r(Crt,"convbert"),Crt.forEach(t),CLo=r(eye," \u2014 "),$N=n(eye,"A",{href:!0});var wrt=s($N);wLo=r(wrt,"ConvBertForMultipleChoice"),wrt.forEach(t),ALo=r(eye," (ConvBERT model)"),eye.forEach(t),yLo=i(O),mv=n(O,"LI",{});var oye=s(mv);Mie=n(oye,"STRONG",{});var Art=s(Mie);LLo=r(Art,"data2vec-text"),Art.forEach(t),xLo=r(oye," \u2014 "),IN=n(oye,"A",{href:!0});var yrt=s(IN);kLo=r(yrt,"Data2VecTextForMultipleChoice"),yrt.forEach(t),SLo=r(oye," (Data2VecText model)"),oye.forEach(t),RLo=i(O),fv=n(O,"LI",{});var rye=s(fv);Eie=n(rye,"STRONG",{});var Lrt=s(Eie);BLo=r(Lrt,"distilbert"),Lrt.forEach(t),PLo=r(rye," \u2014 "),qN=n(rye,"A",{href:!0});var xrt=s(qN);$Lo=r(xrt,"DistilBertForMultipleChoice"),xrt.forEach(t),ILo=r(rye," (DistilBERT model)"),rye.forEach(t),qLo=i(O),gv=n(O,"LI",{});var tye=s(gv);Cie=n(tye,"STRONG",{});var krt=s(Cie);NLo=r(krt,"electra"),krt.forEach(t),jLo=r(tye," \u2014 "),NN=n(tye,"A",{href:!0});var Srt=s(NN);DLo=r(Srt,"ElectraForMultipleChoice"),Srt.forEach(t),GLo=r(tye," (ELECTRA model)"),tye.forEach(t),OLo=i(O),hv=n(O,"LI",{});var aye=s(hv);wie=n(aye,"STRONG",{});var Rrt=s(wie);VLo=r(Rrt,"flaubert"),Rrt.forEach(t),XLo=r(aye," \u2014 "),jN=n(aye,"A",{href:!0});var Brt=s(jN);zLo=r(Brt,"FlaubertForMultipleChoice"),Brt.forEach(t),QLo=r(aye," (FlauBERT model)"),aye.forEach(t),WLo=i(O),uv=n(O,"LI",{});var nye=s(uv);Aie=n(nye,"STRONG",{});var Prt=s(Aie);HLo=r(Prt,"fnet"),Prt.forEach(t),ULo=r(nye," \u2014 "),DN=n(nye,"A",{href:!0});var $rt=s(DN);JLo=r($rt,"FNetForMultipleChoice"),$rt.forEach(t),YLo=r(nye," (FNet model)"),nye.forEach(t),KLo=i(O),pv=n(O,"LI",{});var sye=s(pv);yie=n(sye,"STRONG",{});var Irt=s(yie);ZLo=r(Irt,"funnel"),Irt.forEach(t),e7o=r(sye," \u2014 "),GN=n(sye,"A",{href:!0});var qrt=s(GN);o7o=r(qrt,"FunnelForMultipleChoice"),qrt.forEach(t),r7o=r(sye," (Funnel Transformer model)"),sye.forEach(t),t7o=i(O),_v=n(O,"LI",{});var lye=s(_v);Lie=n(lye,"STRONG",{});var Nrt=s(Lie);a7o=r(Nrt,"ibert"),Nrt.forEach(t),n7o=r(lye," \u2014 "),ON=n(lye,"A",{href:!0});var jrt=s(ON);s7o=r(jrt,"IBertForMultipleChoice"),jrt.forEach(t),l7o=r(lye," (I-BERT model)"),lye.forEach(t),i7o=i(O),bv=n(O,"LI",{});var iye=s(bv);xie=n(iye,"STRONG",{});var Drt=s(xie);d7o=r(Drt,"longformer"),Drt.forEach(t),c7o=r(iye," \u2014 "),VN=n(iye,"A",{href:!0});var Grt=s(VN);m7o=r(Grt,"LongformerForMultipleChoice"),Grt.forEach(t),f7o=r(iye," (Longformer model)"),iye.forEach(t),g7o=i(O),vv=n(O,"LI",{});var dye=s(vv);kie=n(dye,"STRONG",{});var Ort=s(kie);h7o=r(Ort,"megatron-bert"),Ort.forEach(t),u7o=r(dye," \u2014 "),XN=n(dye,"A",{href:!0});var Vrt=s(XN);p7o=r(Vrt,"MegatronBertForMultipleChoice"),Vrt.forEach(t),_7o=r(dye," (MegatronBert model)"),dye.forEach(t),b7o=i(O),Fv=n(O,"LI",{});var cye=s(Fv);Sie=n(cye,"STRONG",{});var Xrt=s(Sie);v7o=r(Xrt,"mobilebert"),Xrt.forEach(t),F7o=r(cye," \u2014 "),zN=n(cye,"A",{href:!0});var zrt=s(zN);T7o=r(zrt,"MobileBertForMultipleChoice"),zrt.forEach(t),M7o=r(cye," (MobileBERT model)"),cye.forEach(t),E7o=i(O),Tv=n(O,"LI",{});var mye=s(Tv);Rie=n(mye,"STRONG",{});var Qrt=s(Rie);C7o=r(Qrt,"mpnet"),Qrt.forEach(t),w7o=r(mye," \u2014 "),QN=n(mye,"A",{href:!0});var Wrt=s(QN);A7o=r(Wrt,"MPNetForMultipleChoice"),Wrt.forEach(t),y7o=r(mye," (MPNet model)"),mye.forEach(t),L7o=i(O),Mv=n(O,"LI",{});var fye=s(Mv);Bie=n(fye,"STRONG",{});var Hrt=s(Bie);x7o=r(Hrt,"nystromformer"),Hrt.forEach(t),k7o=r(fye," \u2014 "),WN=n(fye,"A",{href:!0});var Urt=s(WN);S7o=r(Urt,"NystromformerForMultipleChoice"),Urt.forEach(t),R7o=r(fye," (Nystromformer model)"),fye.forEach(t),B7o=i(O),Ev=n(O,"LI",{});var gye=s(Ev);Pie=n(gye,"STRONG",{});var Jrt=s(Pie);P7o=r(Jrt,"qdqbert"),Jrt.forEach(t),$7o=r(gye," \u2014 "),HN=n(gye,"A",{href:!0});var Yrt=s(HN);I7o=r(Yrt,"QDQBertForMultipleChoice"),Yrt.forEach(t),q7o=r(gye," (QDQBert model)"),gye.forEach(t),N7o=i(O),Cv=n(O,"LI",{});var hye=s(Cv);$ie=n(hye,"STRONG",{});var Krt=s($ie);j7o=r(Krt,"rembert"),Krt.forEach(t),D7o=r(hye," \u2014 "),UN=n(hye,"A",{href:!0});var Zrt=s(UN);G7o=r(Zrt,"RemBertForMultipleChoice"),Zrt.forEach(t),O7o=r(hye," (RemBERT model)"),hye.forEach(t),V7o=i(O),wv=n(O,"LI",{});var uye=s(wv);Iie=n(uye,"STRONG",{});var ett=s(Iie);X7o=r(ett,"roberta"),ett.forEach(t),z7o=r(uye," \u2014 "),JN=n(uye,"A",{href:!0});var ott=s(JN);Q7o=r(ott,"RobertaForMultipleChoice"),ott.forEach(t),W7o=r(uye," (RoBERTa model)"),uye.forEach(t),H7o=i(O),Av=n(O,"LI",{});var pye=s(Av);qie=n(pye,"STRONG",{});var rtt=s(qie);U7o=r(rtt,"roformer"),rtt.forEach(t),J7o=r(pye," \u2014 "),YN=n(pye,"A",{href:!0});var ttt=s(YN);Y7o=r(ttt,"RoFormerForMultipleChoice"),ttt.forEach(t),K7o=r(pye," (RoFormer model)"),pye.forEach(t),Z7o=i(O),yv=n(O,"LI",{});var _ye=s(yv);Nie=n(_ye,"STRONG",{});var att=s(Nie);e9o=r(att,"squeezebert"),att.forEach(t),o9o=r(_ye," \u2014 "),KN=n(_ye,"A",{href:!0});var ntt=s(KN);r9o=r(ntt,"SqueezeBertForMultipleChoice"),ntt.forEach(t),t9o=r(_ye," (SqueezeBERT model)"),_ye.forEach(t),a9o=i(O),Lv=n(O,"LI",{});var bye=s(Lv);jie=n(bye,"STRONG",{});var stt=s(jie);n9o=r(stt,"xlm"),stt.forEach(t),s9o=r(bye," \u2014 "),ZN=n(bye,"A",{href:!0});var ltt=s(ZN);l9o=r(ltt,"XLMForMultipleChoice"),ltt.forEach(t),i9o=r(bye," (XLM model)"),bye.forEach(t),d9o=i(O),xv=n(O,"LI",{});var vye=s(xv);Die=n(vye,"STRONG",{});var itt=s(Die);c9o=r(itt,"xlm-roberta"),itt.forEach(t),m9o=r(vye," \u2014 "),ej=n(vye,"A",{href:!0});var dtt=s(ej);f9o=r(dtt,"XLMRobertaForMultipleChoice"),dtt.forEach(t),g9o=r(vye," (XLM-RoBERTa model)"),vye.forEach(t),h9o=i(O),kv=n(O,"LI",{});var Fye=s(kv);Gie=n(Fye,"STRONG",{});var ctt=s(Gie);u9o=r(ctt,"xlm-roberta-xl"),ctt.forEach(t),p9o=r(Fye," \u2014 "),oj=n(Fye,"A",{href:!0});var mtt=s(oj);_9o=r(mtt,"XLMRobertaXLForMultipleChoice"),mtt.forEach(t),b9o=r(Fye," (XLM-RoBERTa-XL model)"),Fye.forEach(t),v9o=i(O),Sv=n(O,"LI",{});var Tye=s(Sv);Oie=n(Tye,"STRONG",{});var ftt=s(Oie);F9o=r(ftt,"xlnet"),ftt.forEach(t),T9o=r(Tye," \u2014 "),rj=n(Tye,"A",{href:!0});var gtt=s(rj);M9o=r(gtt,"XLNetForMultipleChoice"),gtt.forEach(t),E9o=r(Tye," (XLNet model)"),Tye.forEach(t),C9o=i(O),Rv=n(O,"LI",{});var Mye=s(Rv);Vie=n(Mye,"STRONG",{});var htt=s(Vie);w9o=r(htt,"yoso"),htt.forEach(t),A9o=r(Mye," \u2014 "),tj=n(Mye,"A",{href:!0});var utt=s(tj);y9o=r(utt,"YosoForMultipleChoice"),utt.forEach(t),L9o=r(Mye," (YOSO model)"),Mye.forEach(t),O.forEach(t),x9o=i(Qt),Bv=n(Qt,"P",{});var Eye=s(Bv);k9o=r(Eye,"The model is set in evaluation mode by default using "),Xie=n(Eye,"CODE",{});var ptt=s(Xie);S9o=r(ptt,"model.eval()"),ptt.forEach(t),R9o=r(Eye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zie=n(Eye,"CODE",{});var _tt=s(zie);B9o=r(_tt,"model.train()"),_tt.forEach(t),Eye.forEach(t),P9o=i(Qt),Qie=n(Qt,"P",{});var btt=s(Qie);$9o=r(btt,"Examples:"),btt.forEach(t),I9o=i(Qt),f(rA.$$.fragment,Qt),Qt.forEach(t),nl.forEach(t),aBe=i(c),bd=n(c,"H2",{class:!0});var g$e=s(bd);Pv=n(g$e,"A",{id:!0,class:!0,href:!0});var vtt=s(Pv);Wie=n(vtt,"SPAN",{});var Ftt=s(Wie);f(tA.$$.fragment,Ftt),Ftt.forEach(t),vtt.forEach(t),q9o=i(g$e),Hie=n(g$e,"SPAN",{});var Ttt=s(Hie);N9o=r(Ttt,"AutoModelForNextSentencePrediction"),Ttt.forEach(t),g$e.forEach(t),nBe=i(c),tr=n(c,"DIV",{class:!0});var ll=s(tr);f(aA.$$.fragment,ll),j9o=i(ll),vd=n(ll,"P",{});var PU=s(vd);D9o=r(PU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),aj=n(PU,"A",{href:!0});var Mtt=s(aj);G9o=r(Mtt,"from_pretrained()"),Mtt.forEach(t),O9o=r(PU," class method or the "),nj=n(PU,"A",{href:!0});var Ett=s(nj);V9o=r(Ett,"from_config()"),Ett.forEach(t),X9o=r(PU,` class
method.`),PU.forEach(t),z9o=i(ll),nA=n(ll,"P",{});var h$e=s(nA);Q9o=r(h$e,"This class cannot be instantiated directly using "),Uie=n(h$e,"CODE",{});var Ctt=s(Uie);W9o=r(Ctt,"__init__()"),Ctt.forEach(t),H9o=r(h$e," (throws an error)."),h$e.forEach(t),U9o=i(ll),Yr=n(ll,"DIV",{class:!0});var il=s(Yr);f(sA.$$.fragment,il),J9o=i(il),Jie=n(il,"P",{});var wtt=s(Jie);Y9o=r(wtt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),wtt.forEach(t),K9o=i(il),Fd=n(il,"P",{});var $U=s(Fd);Z9o=r($U,`Note:
Loading a model from its configuration file does `),Yie=n($U,"STRONG",{});var Att=s(Yie);exo=r(Att,"not"),Att.forEach(t),oxo=r($U,` load the model weights. It only affects the
model\u2019s configuration. Use `),sj=n($U,"A",{href:!0});var ytt=s(sj);rxo=r(ytt,"from_pretrained()"),ytt.forEach(t),txo=r($U," to load the model weights."),$U.forEach(t),axo=i(il),Kie=n(il,"P",{});var Ltt=s(Kie);nxo=r(Ltt,"Examples:"),Ltt.forEach(t),sxo=i(il),f(lA.$$.fragment,il),il.forEach(t),lxo=i(ll),Xe=n(ll,"DIV",{class:!0});var Wt=s(Xe);f(iA.$$.fragment,Wt),ixo=i(Wt),Zie=n(Wt,"P",{});var xtt=s(Zie);dxo=r(xtt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),xtt.forEach(t),cxo=i(Wt),Ya=n(Wt,"P",{});var NC=s(Ya);mxo=r(NC,"The model class to instantiate is selected based on the "),ede=n(NC,"CODE",{});var ktt=s(ede);fxo=r(ktt,"model_type"),ktt.forEach(t),gxo=r(NC,` property of the config object (either
passed as an argument or loaded from `),ode=n(NC,"CODE",{});var Stt=s(ode);hxo=r(Stt,"pretrained_model_name_or_path"),Stt.forEach(t),uxo=r(NC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rde=n(NC,"CODE",{});var Rtt=s(rde);pxo=r(Rtt,"pretrained_model_name_or_path"),Rtt.forEach(t),_xo=r(NC,":"),NC.forEach(t),bxo=i(Wt),da=n(Wt,"UL",{});var dl=s(da);$v=n(dl,"LI",{});var Cye=s($v);tde=n(Cye,"STRONG",{});var Btt=s(tde);vxo=r(Btt,"bert"),Btt.forEach(t),Fxo=r(Cye," \u2014 "),lj=n(Cye,"A",{href:!0});var Ptt=s(lj);Txo=r(Ptt,"BertForNextSentencePrediction"),Ptt.forEach(t),Mxo=r(Cye," (BERT model)"),Cye.forEach(t),Exo=i(dl),Iv=n(dl,"LI",{});var wye=s(Iv);ade=n(wye,"STRONG",{});var $tt=s(ade);Cxo=r($tt,"fnet"),$tt.forEach(t),wxo=r(wye," \u2014 "),ij=n(wye,"A",{href:!0});var Itt=s(ij);Axo=r(Itt,"FNetForNextSentencePrediction"),Itt.forEach(t),yxo=r(wye," (FNet model)"),wye.forEach(t),Lxo=i(dl),qv=n(dl,"LI",{});var Aye=s(qv);nde=n(Aye,"STRONG",{});var qtt=s(nde);xxo=r(qtt,"megatron-bert"),qtt.forEach(t),kxo=r(Aye," \u2014 "),dj=n(Aye,"A",{href:!0});var Ntt=s(dj);Sxo=r(Ntt,"MegatronBertForNextSentencePrediction"),Ntt.forEach(t),Rxo=r(Aye," (MegatronBert model)"),Aye.forEach(t),Bxo=i(dl),Nv=n(dl,"LI",{});var yye=s(Nv);sde=n(yye,"STRONG",{});var jtt=s(sde);Pxo=r(jtt,"mobilebert"),jtt.forEach(t),$xo=r(yye," \u2014 "),cj=n(yye,"A",{href:!0});var Dtt=s(cj);Ixo=r(Dtt,"MobileBertForNextSentencePrediction"),Dtt.forEach(t),qxo=r(yye," (MobileBERT model)"),yye.forEach(t),Nxo=i(dl),jv=n(dl,"LI",{});var Lye=s(jv);lde=n(Lye,"STRONG",{});var Gtt=s(lde);jxo=r(Gtt,"qdqbert"),Gtt.forEach(t),Dxo=r(Lye," \u2014 "),mj=n(Lye,"A",{href:!0});var Ott=s(mj);Gxo=r(Ott,"QDQBertForNextSentencePrediction"),Ott.forEach(t),Oxo=r(Lye," (QDQBert model)"),Lye.forEach(t),dl.forEach(t),Vxo=i(Wt),Dv=n(Wt,"P",{});var xye=s(Dv);Xxo=r(xye,"The model is set in evaluation mode by default using "),ide=n(xye,"CODE",{});var Vtt=s(ide);zxo=r(Vtt,"model.eval()"),Vtt.forEach(t),Qxo=r(xye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dde=n(xye,"CODE",{});var Xtt=s(dde);Wxo=r(Xtt,"model.train()"),Xtt.forEach(t),xye.forEach(t),Hxo=i(Wt),cde=n(Wt,"P",{});var ztt=s(cde);Uxo=r(ztt,"Examples:"),ztt.forEach(t),Jxo=i(Wt),f(dA.$$.fragment,Wt),Wt.forEach(t),ll.forEach(t),sBe=i(c),Td=n(c,"H2",{class:!0});var u$e=s(Td);Gv=n(u$e,"A",{id:!0,class:!0,href:!0});var Qtt=s(Gv);mde=n(Qtt,"SPAN",{});var Wtt=s(mde);f(cA.$$.fragment,Wtt),Wtt.forEach(t),Qtt.forEach(t),Yxo=i(u$e),fde=n(u$e,"SPAN",{});var Htt=s(fde);Kxo=r(Htt,"AutoModelForTokenClassification"),Htt.forEach(t),u$e.forEach(t),lBe=i(c),ar=n(c,"DIV",{class:!0});var cl=s(ar);f(mA.$$.fragment,cl),Zxo=i(cl),Md=n(cl,"P",{});var IU=s(Md);eko=r(IU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),fj=n(IU,"A",{href:!0});var Utt=s(fj);oko=r(Utt,"from_pretrained()"),Utt.forEach(t),rko=r(IU," class method or the "),gj=n(IU,"A",{href:!0});var Jtt=s(gj);tko=r(Jtt,"from_config()"),Jtt.forEach(t),ako=r(IU,` class
method.`),IU.forEach(t),nko=i(cl),fA=n(cl,"P",{});var p$e=s(fA);sko=r(p$e,"This class cannot be instantiated directly using "),gde=n(p$e,"CODE",{});var Ytt=s(gde);lko=r(Ytt,"__init__()"),Ytt.forEach(t),iko=r(p$e," (throws an error)."),p$e.forEach(t),dko=i(cl),Kr=n(cl,"DIV",{class:!0});var ml=s(Kr);f(gA.$$.fragment,ml),cko=i(ml),hde=n(ml,"P",{});var Ktt=s(hde);mko=r(Ktt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Ktt.forEach(t),fko=i(ml),Ed=n(ml,"P",{});var qU=s(Ed);gko=r(qU,`Note:
Loading a model from its configuration file does `),ude=n(qU,"STRONG",{});var Ztt=s(ude);hko=r(Ztt,"not"),Ztt.forEach(t),uko=r(qU,` load the model weights. It only affects the
model\u2019s configuration. Use `),hj=n(qU,"A",{href:!0});var eat=s(hj);pko=r(eat,"from_pretrained()"),eat.forEach(t),_ko=r(qU," to load the model weights."),qU.forEach(t),bko=i(ml),pde=n(ml,"P",{});var oat=s(pde);vko=r(oat,"Examples:"),oat.forEach(t),Fko=i(ml),f(hA.$$.fragment,ml),ml.forEach(t),Tko=i(cl),ze=n(cl,"DIV",{class:!0});var Ht=s(ze);f(uA.$$.fragment,Ht),Mko=i(Ht),_de=n(Ht,"P",{});var rat=s(_de);Eko=r(rat,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),rat.forEach(t),Cko=i(Ht),Ka=n(Ht,"P",{});var jC=s(Ka);wko=r(jC,"The model class to instantiate is selected based on the "),bde=n(jC,"CODE",{});var tat=s(bde);Ako=r(tat,"model_type"),tat.forEach(t),yko=r(jC,` property of the config object (either
passed as an argument or loaded from `),vde=n(jC,"CODE",{});var aat=s(vde);Lko=r(aat,"pretrained_model_name_or_path"),aat.forEach(t),xko=r(jC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fde=n(jC,"CODE",{});var nat=s(Fde);kko=r(nat,"pretrained_model_name_or_path"),nat.forEach(t),Sko=r(jC,":"),jC.forEach(t),Rko=i(Ht),j=n(Ht,"UL",{});var D=s(j);Ov=n(D,"LI",{});var kye=s(Ov);Tde=n(kye,"STRONG",{});var sat=s(Tde);Bko=r(sat,"albert"),sat.forEach(t),Pko=r(kye," \u2014 "),uj=n(kye,"A",{href:!0});var lat=s(uj);$ko=r(lat,"AlbertForTokenClassification"),lat.forEach(t),Iko=r(kye," (ALBERT model)"),kye.forEach(t),qko=i(D),Vv=n(D,"LI",{});var Sye=s(Vv);Mde=n(Sye,"STRONG",{});var iat=s(Mde);Nko=r(iat,"bert"),iat.forEach(t),jko=r(Sye," \u2014 "),pj=n(Sye,"A",{href:!0});var dat=s(pj);Dko=r(dat,"BertForTokenClassification"),dat.forEach(t),Gko=r(Sye," (BERT model)"),Sye.forEach(t),Oko=i(D),Xv=n(D,"LI",{});var Rye=s(Xv);Ede=n(Rye,"STRONG",{});var cat=s(Ede);Vko=r(cat,"big_bird"),cat.forEach(t),Xko=r(Rye," \u2014 "),_j=n(Rye,"A",{href:!0});var mat=s(_j);zko=r(mat,"BigBirdForTokenClassification"),mat.forEach(t),Qko=r(Rye," (BigBird model)"),Rye.forEach(t),Wko=i(D),zv=n(D,"LI",{});var Bye=s(zv);Cde=n(Bye,"STRONG",{});var fat=s(Cde);Hko=r(fat,"camembert"),fat.forEach(t),Uko=r(Bye," \u2014 "),bj=n(Bye,"A",{href:!0});var gat=s(bj);Jko=r(gat,"CamembertForTokenClassification"),gat.forEach(t),Yko=r(Bye," (CamemBERT model)"),Bye.forEach(t),Kko=i(D),Qv=n(D,"LI",{});var Pye=s(Qv);wde=n(Pye,"STRONG",{});var hat=s(wde);Zko=r(hat,"canine"),hat.forEach(t),eSo=r(Pye," \u2014 "),vj=n(Pye,"A",{href:!0});var uat=s(vj);oSo=r(uat,"CanineForTokenClassification"),uat.forEach(t),rSo=r(Pye," (Canine model)"),Pye.forEach(t),tSo=i(D),Wv=n(D,"LI",{});var $ye=s(Wv);Ade=n($ye,"STRONG",{});var pat=s(Ade);aSo=r(pat,"convbert"),pat.forEach(t),nSo=r($ye," \u2014 "),Fj=n($ye,"A",{href:!0});var _at=s(Fj);sSo=r(_at,"ConvBertForTokenClassification"),_at.forEach(t),lSo=r($ye," (ConvBERT model)"),$ye.forEach(t),iSo=i(D),Hv=n(D,"LI",{});var Iye=s(Hv);yde=n(Iye,"STRONG",{});var bat=s(yde);dSo=r(bat,"data2vec-text"),bat.forEach(t),cSo=r(Iye," \u2014 "),Tj=n(Iye,"A",{href:!0});var vat=s(Tj);mSo=r(vat,"Data2VecTextForTokenClassification"),vat.forEach(t),fSo=r(Iye," (Data2VecText model)"),Iye.forEach(t),gSo=i(D),Uv=n(D,"LI",{});var qye=s(Uv);Lde=n(qye,"STRONG",{});var Fat=s(Lde);hSo=r(Fat,"deberta"),Fat.forEach(t),uSo=r(qye," \u2014 "),Mj=n(qye,"A",{href:!0});var Tat=s(Mj);pSo=r(Tat,"DebertaForTokenClassification"),Tat.forEach(t),_So=r(qye," (DeBERTa model)"),qye.forEach(t),bSo=i(D),Jv=n(D,"LI",{});var Nye=s(Jv);xde=n(Nye,"STRONG",{});var Mat=s(xde);vSo=r(Mat,"deberta-v2"),Mat.forEach(t),FSo=r(Nye," \u2014 "),Ej=n(Nye,"A",{href:!0});var Eat=s(Ej);TSo=r(Eat,"DebertaV2ForTokenClassification"),Eat.forEach(t),MSo=r(Nye," (DeBERTa-v2 model)"),Nye.forEach(t),ESo=i(D),Yv=n(D,"LI",{});var jye=s(Yv);kde=n(jye,"STRONG",{});var Cat=s(kde);CSo=r(Cat,"distilbert"),Cat.forEach(t),wSo=r(jye," \u2014 "),Cj=n(jye,"A",{href:!0});var wat=s(Cj);ASo=r(wat,"DistilBertForTokenClassification"),wat.forEach(t),ySo=r(jye," (DistilBERT model)"),jye.forEach(t),LSo=i(D),Kv=n(D,"LI",{});var Dye=s(Kv);Sde=n(Dye,"STRONG",{});var Aat=s(Sde);xSo=r(Aat,"electra"),Aat.forEach(t),kSo=r(Dye," \u2014 "),wj=n(Dye,"A",{href:!0});var yat=s(wj);SSo=r(yat,"ElectraForTokenClassification"),yat.forEach(t),RSo=r(Dye," (ELECTRA model)"),Dye.forEach(t),BSo=i(D),Zv=n(D,"LI",{});var Gye=s(Zv);Rde=n(Gye,"STRONG",{});var Lat=s(Rde);PSo=r(Lat,"flaubert"),Lat.forEach(t),$So=r(Gye," \u2014 "),Aj=n(Gye,"A",{href:!0});var xat=s(Aj);ISo=r(xat,"FlaubertForTokenClassification"),xat.forEach(t),qSo=r(Gye," (FlauBERT model)"),Gye.forEach(t),NSo=i(D),eF=n(D,"LI",{});var Oye=s(eF);Bde=n(Oye,"STRONG",{});var kat=s(Bde);jSo=r(kat,"fnet"),kat.forEach(t),DSo=r(Oye," \u2014 "),yj=n(Oye,"A",{href:!0});var Sat=s(yj);GSo=r(Sat,"FNetForTokenClassification"),Sat.forEach(t),OSo=r(Oye," (FNet model)"),Oye.forEach(t),VSo=i(D),oF=n(D,"LI",{});var Vye=s(oF);Pde=n(Vye,"STRONG",{});var Rat=s(Pde);XSo=r(Rat,"funnel"),Rat.forEach(t),zSo=r(Vye," \u2014 "),Lj=n(Vye,"A",{href:!0});var Bat=s(Lj);QSo=r(Bat,"FunnelForTokenClassification"),Bat.forEach(t),WSo=r(Vye," (Funnel Transformer model)"),Vye.forEach(t),HSo=i(D),rF=n(D,"LI",{});var Xye=s(rF);$de=n(Xye,"STRONG",{});var Pat=s($de);USo=r(Pat,"gpt2"),Pat.forEach(t),JSo=r(Xye," \u2014 "),xj=n(Xye,"A",{href:!0});var $at=s(xj);YSo=r($at,"GPT2ForTokenClassification"),$at.forEach(t),KSo=r(Xye," (OpenAI GPT-2 model)"),Xye.forEach(t),ZSo=i(D),tF=n(D,"LI",{});var zye=s(tF);Ide=n(zye,"STRONG",{});var Iat=s(Ide);eRo=r(Iat,"ibert"),Iat.forEach(t),oRo=r(zye," \u2014 "),kj=n(zye,"A",{href:!0});var qat=s(kj);rRo=r(qat,"IBertForTokenClassification"),qat.forEach(t),tRo=r(zye," (I-BERT model)"),zye.forEach(t),aRo=i(D),aF=n(D,"LI",{});var Qye=s(aF);qde=n(Qye,"STRONG",{});var Nat=s(qde);nRo=r(Nat,"layoutlm"),Nat.forEach(t),sRo=r(Qye," \u2014 "),Sj=n(Qye,"A",{href:!0});var jat=s(Sj);lRo=r(jat,"LayoutLMForTokenClassification"),jat.forEach(t),iRo=r(Qye," (LayoutLM model)"),Qye.forEach(t),dRo=i(D),nF=n(D,"LI",{});var Wye=s(nF);Nde=n(Wye,"STRONG",{});var Dat=s(Nde);cRo=r(Dat,"layoutlmv2"),Dat.forEach(t),mRo=r(Wye," \u2014 "),Rj=n(Wye,"A",{href:!0});var Gat=s(Rj);fRo=r(Gat,"LayoutLMv2ForTokenClassification"),Gat.forEach(t),gRo=r(Wye," (LayoutLMv2 model)"),Wye.forEach(t),hRo=i(D),sF=n(D,"LI",{});var Hye=s(sF);jde=n(Hye,"STRONG",{});var Oat=s(jde);uRo=r(Oat,"longformer"),Oat.forEach(t),pRo=r(Hye," \u2014 "),Bj=n(Hye,"A",{href:!0});var Vat=s(Bj);_Ro=r(Vat,"LongformerForTokenClassification"),Vat.forEach(t),bRo=r(Hye," (Longformer model)"),Hye.forEach(t),vRo=i(D),lF=n(D,"LI",{});var Uye=s(lF);Dde=n(Uye,"STRONG",{});var Xat=s(Dde);FRo=r(Xat,"megatron-bert"),Xat.forEach(t),TRo=r(Uye," \u2014 "),Pj=n(Uye,"A",{href:!0});var zat=s(Pj);MRo=r(zat,"MegatronBertForTokenClassification"),zat.forEach(t),ERo=r(Uye," (MegatronBert model)"),Uye.forEach(t),CRo=i(D),iF=n(D,"LI",{});var Jye=s(iF);Gde=n(Jye,"STRONG",{});var Qat=s(Gde);wRo=r(Qat,"mobilebert"),Qat.forEach(t),ARo=r(Jye," \u2014 "),$j=n(Jye,"A",{href:!0});var Wat=s($j);yRo=r(Wat,"MobileBertForTokenClassification"),Wat.forEach(t),LRo=r(Jye," (MobileBERT model)"),Jye.forEach(t),xRo=i(D),dF=n(D,"LI",{});var Yye=s(dF);Ode=n(Yye,"STRONG",{});var Hat=s(Ode);kRo=r(Hat,"mpnet"),Hat.forEach(t),SRo=r(Yye," \u2014 "),Ij=n(Yye,"A",{href:!0});var Uat=s(Ij);RRo=r(Uat,"MPNetForTokenClassification"),Uat.forEach(t),BRo=r(Yye," (MPNet model)"),Yye.forEach(t),PRo=i(D),cF=n(D,"LI",{});var Kye=s(cF);Vde=n(Kye,"STRONG",{});var Jat=s(Vde);$Ro=r(Jat,"nystromformer"),Jat.forEach(t),IRo=r(Kye," \u2014 "),qj=n(Kye,"A",{href:!0});var Yat=s(qj);qRo=r(Yat,"NystromformerForTokenClassification"),Yat.forEach(t),NRo=r(Kye," (Nystromformer model)"),Kye.forEach(t),jRo=i(D),mF=n(D,"LI",{});var Zye=s(mF);Xde=n(Zye,"STRONG",{});var Kat=s(Xde);DRo=r(Kat,"qdqbert"),Kat.forEach(t),GRo=r(Zye," \u2014 "),Nj=n(Zye,"A",{href:!0});var Zat=s(Nj);ORo=r(Zat,"QDQBertForTokenClassification"),Zat.forEach(t),VRo=r(Zye," (QDQBert model)"),Zye.forEach(t),XRo=i(D),fF=n(D,"LI",{});var e8e=s(fF);zde=n(e8e,"STRONG",{});var ent=s(zde);zRo=r(ent,"rembert"),ent.forEach(t),QRo=r(e8e," \u2014 "),jj=n(e8e,"A",{href:!0});var ont=s(jj);WRo=r(ont,"RemBertForTokenClassification"),ont.forEach(t),HRo=r(e8e," (RemBERT model)"),e8e.forEach(t),URo=i(D),gF=n(D,"LI",{});var o8e=s(gF);Qde=n(o8e,"STRONG",{});var rnt=s(Qde);JRo=r(rnt,"roberta"),rnt.forEach(t),YRo=r(o8e," \u2014 "),Dj=n(o8e,"A",{href:!0});var tnt=s(Dj);KRo=r(tnt,"RobertaForTokenClassification"),tnt.forEach(t),ZRo=r(o8e," (RoBERTa model)"),o8e.forEach(t),eBo=i(D),hF=n(D,"LI",{});var r8e=s(hF);Wde=n(r8e,"STRONG",{});var ant=s(Wde);oBo=r(ant,"roformer"),ant.forEach(t),rBo=r(r8e," \u2014 "),Gj=n(r8e,"A",{href:!0});var nnt=s(Gj);tBo=r(nnt,"RoFormerForTokenClassification"),nnt.forEach(t),aBo=r(r8e," (RoFormer model)"),r8e.forEach(t),nBo=i(D),uF=n(D,"LI",{});var t8e=s(uF);Hde=n(t8e,"STRONG",{});var snt=s(Hde);sBo=r(snt,"squeezebert"),snt.forEach(t),lBo=r(t8e," \u2014 "),Oj=n(t8e,"A",{href:!0});var lnt=s(Oj);iBo=r(lnt,"SqueezeBertForTokenClassification"),lnt.forEach(t),dBo=r(t8e," (SqueezeBERT model)"),t8e.forEach(t),cBo=i(D),pF=n(D,"LI",{});var a8e=s(pF);Ude=n(a8e,"STRONG",{});var int=s(Ude);mBo=r(int,"xlm"),int.forEach(t),fBo=r(a8e," \u2014 "),Vj=n(a8e,"A",{href:!0});var dnt=s(Vj);gBo=r(dnt,"XLMForTokenClassification"),dnt.forEach(t),hBo=r(a8e," (XLM model)"),a8e.forEach(t),uBo=i(D),_F=n(D,"LI",{});var n8e=s(_F);Jde=n(n8e,"STRONG",{});var cnt=s(Jde);pBo=r(cnt,"xlm-roberta"),cnt.forEach(t),_Bo=r(n8e," \u2014 "),Xj=n(n8e,"A",{href:!0});var mnt=s(Xj);bBo=r(mnt,"XLMRobertaForTokenClassification"),mnt.forEach(t),vBo=r(n8e," (XLM-RoBERTa model)"),n8e.forEach(t),FBo=i(D),bF=n(D,"LI",{});var s8e=s(bF);Yde=n(s8e,"STRONG",{});var fnt=s(Yde);TBo=r(fnt,"xlm-roberta-xl"),fnt.forEach(t),MBo=r(s8e," \u2014 "),zj=n(s8e,"A",{href:!0});var gnt=s(zj);EBo=r(gnt,"XLMRobertaXLForTokenClassification"),gnt.forEach(t),CBo=r(s8e," (XLM-RoBERTa-XL model)"),s8e.forEach(t),wBo=i(D),vF=n(D,"LI",{});var l8e=s(vF);Kde=n(l8e,"STRONG",{});var hnt=s(Kde);ABo=r(hnt,"xlnet"),hnt.forEach(t),yBo=r(l8e," \u2014 "),Qj=n(l8e,"A",{href:!0});var unt=s(Qj);LBo=r(unt,"XLNetForTokenClassification"),unt.forEach(t),xBo=r(l8e," (XLNet model)"),l8e.forEach(t),kBo=i(D),FF=n(D,"LI",{});var i8e=s(FF);Zde=n(i8e,"STRONG",{});var pnt=s(Zde);SBo=r(pnt,"yoso"),pnt.forEach(t),RBo=r(i8e," \u2014 "),Wj=n(i8e,"A",{href:!0});var _nt=s(Wj);BBo=r(_nt,"YosoForTokenClassification"),_nt.forEach(t),PBo=r(i8e," (YOSO model)"),i8e.forEach(t),D.forEach(t),$Bo=i(Ht),TF=n(Ht,"P",{});var d8e=s(TF);IBo=r(d8e,"The model is set in evaluation mode by default using "),ece=n(d8e,"CODE",{});var bnt=s(ece);qBo=r(bnt,"model.eval()"),bnt.forEach(t),NBo=r(d8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),oce=n(d8e,"CODE",{});var vnt=s(oce);jBo=r(vnt,"model.train()"),vnt.forEach(t),d8e.forEach(t),DBo=i(Ht),rce=n(Ht,"P",{});var Fnt=s(rce);GBo=r(Fnt,"Examples:"),Fnt.forEach(t),OBo=i(Ht),f(pA.$$.fragment,Ht),Ht.forEach(t),cl.forEach(t),iBe=i(c),Cd=n(c,"H2",{class:!0});var _$e=s(Cd);MF=n(_$e,"A",{id:!0,class:!0,href:!0});var Tnt=s(MF);tce=n(Tnt,"SPAN",{});var Mnt=s(tce);f(_A.$$.fragment,Mnt),Mnt.forEach(t),Tnt.forEach(t),VBo=i(_$e),ace=n(_$e,"SPAN",{});var Ent=s(ace);XBo=r(Ent,"AutoModelForQuestionAnswering"),Ent.forEach(t),_$e.forEach(t),dBe=i(c),nr=n(c,"DIV",{class:!0});var fl=s(nr);f(bA.$$.fragment,fl),zBo=i(fl),wd=n(fl,"P",{});var NU=s(wd);QBo=r(NU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Hj=n(NU,"A",{href:!0});var Cnt=s(Hj);WBo=r(Cnt,"from_pretrained()"),Cnt.forEach(t),HBo=r(NU," class method or the "),Uj=n(NU,"A",{href:!0});var wnt=s(Uj);UBo=r(wnt,"from_config()"),wnt.forEach(t),JBo=r(NU,` class
method.`),NU.forEach(t),YBo=i(fl),vA=n(fl,"P",{});var b$e=s(vA);KBo=r(b$e,"This class cannot be instantiated directly using "),nce=n(b$e,"CODE",{});var Ant=s(nce);ZBo=r(Ant,"__init__()"),Ant.forEach(t),ePo=r(b$e," (throws an error)."),b$e.forEach(t),oPo=i(fl),Zr=n(fl,"DIV",{class:!0});var gl=s(Zr);f(FA.$$.fragment,gl),rPo=i(gl),sce=n(gl,"P",{});var ynt=s(sce);tPo=r(ynt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),ynt.forEach(t),aPo=i(gl),Ad=n(gl,"P",{});var jU=s(Ad);nPo=r(jU,`Note:
Loading a model from its configuration file does `),lce=n(jU,"STRONG",{});var Lnt=s(lce);sPo=r(Lnt,"not"),Lnt.forEach(t),lPo=r(jU,` load the model weights. It only affects the
model\u2019s configuration. Use `),Jj=n(jU,"A",{href:!0});var xnt=s(Jj);iPo=r(xnt,"from_pretrained()"),xnt.forEach(t),dPo=r(jU," to load the model weights."),jU.forEach(t),cPo=i(gl),ice=n(gl,"P",{});var knt=s(ice);mPo=r(knt,"Examples:"),knt.forEach(t),fPo=i(gl),f(TA.$$.fragment,gl),gl.forEach(t),gPo=i(fl),Qe=n(fl,"DIV",{class:!0});var Ut=s(Qe);f(MA.$$.fragment,Ut),hPo=i(Ut),dce=n(Ut,"P",{});var Snt=s(dce);uPo=r(Snt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Snt.forEach(t),pPo=i(Ut),Za=n(Ut,"P",{});var DC=s(Za);_Po=r(DC,"The model class to instantiate is selected based on the "),cce=n(DC,"CODE",{});var Rnt=s(cce);bPo=r(Rnt,"model_type"),Rnt.forEach(t),vPo=r(DC,` property of the config object (either
passed as an argument or loaded from `),mce=n(DC,"CODE",{});var Bnt=s(mce);FPo=r(Bnt,"pretrained_model_name_or_path"),Bnt.forEach(t),TPo=r(DC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fce=n(DC,"CODE",{});var Pnt=s(fce);MPo=r(Pnt,"pretrained_model_name_or_path"),Pnt.forEach(t),EPo=r(DC,":"),DC.forEach(t),CPo=i(Ut),R=n(Ut,"UL",{});var P=s(R);EF=n(P,"LI",{});var c8e=s(EF);gce=n(c8e,"STRONG",{});var $nt=s(gce);wPo=r($nt,"albert"),$nt.forEach(t),APo=r(c8e," \u2014 "),Yj=n(c8e,"A",{href:!0});var Int=s(Yj);yPo=r(Int,"AlbertForQuestionAnswering"),Int.forEach(t),LPo=r(c8e," (ALBERT model)"),c8e.forEach(t),xPo=i(P),CF=n(P,"LI",{});var m8e=s(CF);hce=n(m8e,"STRONG",{});var qnt=s(hce);kPo=r(qnt,"bart"),qnt.forEach(t),SPo=r(m8e," \u2014 "),Kj=n(m8e,"A",{href:!0});var Nnt=s(Kj);RPo=r(Nnt,"BartForQuestionAnswering"),Nnt.forEach(t),BPo=r(m8e," (BART model)"),m8e.forEach(t),PPo=i(P),wF=n(P,"LI",{});var f8e=s(wF);uce=n(f8e,"STRONG",{});var jnt=s(uce);$Po=r(jnt,"bert"),jnt.forEach(t),IPo=r(f8e," \u2014 "),Zj=n(f8e,"A",{href:!0});var Dnt=s(Zj);qPo=r(Dnt,"BertForQuestionAnswering"),Dnt.forEach(t),NPo=r(f8e," (BERT model)"),f8e.forEach(t),jPo=i(P),AF=n(P,"LI",{});var g8e=s(AF);pce=n(g8e,"STRONG",{});var Gnt=s(pce);DPo=r(Gnt,"big_bird"),Gnt.forEach(t),GPo=r(g8e," \u2014 "),eD=n(g8e,"A",{href:!0});var Ont=s(eD);OPo=r(Ont,"BigBirdForQuestionAnswering"),Ont.forEach(t),VPo=r(g8e," (BigBird model)"),g8e.forEach(t),XPo=i(P),yF=n(P,"LI",{});var h8e=s(yF);_ce=n(h8e,"STRONG",{});var Vnt=s(_ce);zPo=r(Vnt,"bigbird_pegasus"),Vnt.forEach(t),QPo=r(h8e," \u2014 "),oD=n(h8e,"A",{href:!0});var Xnt=s(oD);WPo=r(Xnt,"BigBirdPegasusForQuestionAnswering"),Xnt.forEach(t),HPo=r(h8e," (BigBirdPegasus model)"),h8e.forEach(t),UPo=i(P),LF=n(P,"LI",{});var u8e=s(LF);bce=n(u8e,"STRONG",{});var znt=s(bce);JPo=r(znt,"camembert"),znt.forEach(t),YPo=r(u8e," \u2014 "),rD=n(u8e,"A",{href:!0});var Qnt=s(rD);KPo=r(Qnt,"CamembertForQuestionAnswering"),Qnt.forEach(t),ZPo=r(u8e," (CamemBERT model)"),u8e.forEach(t),e$o=i(P),xF=n(P,"LI",{});var p8e=s(xF);vce=n(p8e,"STRONG",{});var Wnt=s(vce);o$o=r(Wnt,"canine"),Wnt.forEach(t),r$o=r(p8e," \u2014 "),tD=n(p8e,"A",{href:!0});var Hnt=s(tD);t$o=r(Hnt,"CanineForQuestionAnswering"),Hnt.forEach(t),a$o=r(p8e," (Canine model)"),p8e.forEach(t),n$o=i(P),kF=n(P,"LI",{});var _8e=s(kF);Fce=n(_8e,"STRONG",{});var Unt=s(Fce);s$o=r(Unt,"convbert"),Unt.forEach(t),l$o=r(_8e," \u2014 "),aD=n(_8e,"A",{href:!0});var Jnt=s(aD);i$o=r(Jnt,"ConvBertForQuestionAnswering"),Jnt.forEach(t),d$o=r(_8e," (ConvBERT model)"),_8e.forEach(t),c$o=i(P),SF=n(P,"LI",{});var b8e=s(SF);Tce=n(b8e,"STRONG",{});var Ynt=s(Tce);m$o=r(Ynt,"data2vec-text"),Ynt.forEach(t),f$o=r(b8e," \u2014 "),nD=n(b8e,"A",{href:!0});var Knt=s(nD);g$o=r(Knt,"Data2VecTextForQuestionAnswering"),Knt.forEach(t),h$o=r(b8e," (Data2VecText model)"),b8e.forEach(t),u$o=i(P),RF=n(P,"LI",{});var v8e=s(RF);Mce=n(v8e,"STRONG",{});var Znt=s(Mce);p$o=r(Znt,"deberta"),Znt.forEach(t),_$o=r(v8e," \u2014 "),sD=n(v8e,"A",{href:!0});var est=s(sD);b$o=r(est,"DebertaForQuestionAnswering"),est.forEach(t),v$o=r(v8e," (DeBERTa model)"),v8e.forEach(t),F$o=i(P),BF=n(P,"LI",{});var F8e=s(BF);Ece=n(F8e,"STRONG",{});var ost=s(Ece);T$o=r(ost,"deberta-v2"),ost.forEach(t),M$o=r(F8e," \u2014 "),lD=n(F8e,"A",{href:!0});var rst=s(lD);E$o=r(rst,"DebertaV2ForQuestionAnswering"),rst.forEach(t),C$o=r(F8e," (DeBERTa-v2 model)"),F8e.forEach(t),w$o=i(P),PF=n(P,"LI",{});var T8e=s(PF);Cce=n(T8e,"STRONG",{});var tst=s(Cce);A$o=r(tst,"distilbert"),tst.forEach(t),y$o=r(T8e," \u2014 "),iD=n(T8e,"A",{href:!0});var ast=s(iD);L$o=r(ast,"DistilBertForQuestionAnswering"),ast.forEach(t),x$o=r(T8e," (DistilBERT model)"),T8e.forEach(t),k$o=i(P),$F=n(P,"LI",{});var M8e=s($F);wce=n(M8e,"STRONG",{});var nst=s(wce);S$o=r(nst,"electra"),nst.forEach(t),R$o=r(M8e," \u2014 "),dD=n(M8e,"A",{href:!0});var sst=s(dD);B$o=r(sst,"ElectraForQuestionAnswering"),sst.forEach(t),P$o=r(M8e," (ELECTRA model)"),M8e.forEach(t),$$o=i(P),IF=n(P,"LI",{});var E8e=s(IF);Ace=n(E8e,"STRONG",{});var lst=s(Ace);I$o=r(lst,"flaubert"),lst.forEach(t),q$o=r(E8e," \u2014 "),cD=n(E8e,"A",{href:!0});var ist=s(cD);N$o=r(ist,"FlaubertForQuestionAnsweringSimple"),ist.forEach(t),j$o=r(E8e," (FlauBERT model)"),E8e.forEach(t),D$o=i(P),qF=n(P,"LI",{});var C8e=s(qF);yce=n(C8e,"STRONG",{});var dst=s(yce);G$o=r(dst,"fnet"),dst.forEach(t),O$o=r(C8e," \u2014 "),mD=n(C8e,"A",{href:!0});var cst=s(mD);V$o=r(cst,"FNetForQuestionAnswering"),cst.forEach(t),X$o=r(C8e," (FNet model)"),C8e.forEach(t),z$o=i(P),NF=n(P,"LI",{});var w8e=s(NF);Lce=n(w8e,"STRONG",{});var mst=s(Lce);Q$o=r(mst,"funnel"),mst.forEach(t),W$o=r(w8e," \u2014 "),fD=n(w8e,"A",{href:!0});var fst=s(fD);H$o=r(fst,"FunnelForQuestionAnswering"),fst.forEach(t),U$o=r(w8e," (Funnel Transformer model)"),w8e.forEach(t),J$o=i(P),jF=n(P,"LI",{});var A8e=s(jF);xce=n(A8e,"STRONG",{});var gst=s(xce);Y$o=r(gst,"gptj"),gst.forEach(t),K$o=r(A8e," \u2014 "),gD=n(A8e,"A",{href:!0});var hst=s(gD);Z$o=r(hst,"GPTJForQuestionAnswering"),hst.forEach(t),eIo=r(A8e," (GPT-J model)"),A8e.forEach(t),oIo=i(P),DF=n(P,"LI",{});var y8e=s(DF);kce=n(y8e,"STRONG",{});var ust=s(kce);rIo=r(ust,"ibert"),ust.forEach(t),tIo=r(y8e," \u2014 "),hD=n(y8e,"A",{href:!0});var pst=s(hD);aIo=r(pst,"IBertForQuestionAnswering"),pst.forEach(t),nIo=r(y8e," (I-BERT model)"),y8e.forEach(t),sIo=i(P),GF=n(P,"LI",{});var L8e=s(GF);Sce=n(L8e,"STRONG",{});var _st=s(Sce);lIo=r(_st,"layoutlmv2"),_st.forEach(t),iIo=r(L8e," \u2014 "),uD=n(L8e,"A",{href:!0});var bst=s(uD);dIo=r(bst,"LayoutLMv2ForQuestionAnswering"),bst.forEach(t),cIo=r(L8e," (LayoutLMv2 model)"),L8e.forEach(t),mIo=i(P),OF=n(P,"LI",{});var x8e=s(OF);Rce=n(x8e,"STRONG",{});var vst=s(Rce);fIo=r(vst,"led"),vst.forEach(t),gIo=r(x8e," \u2014 "),pD=n(x8e,"A",{href:!0});var Fst=s(pD);hIo=r(Fst,"LEDForQuestionAnswering"),Fst.forEach(t),uIo=r(x8e," (LED model)"),x8e.forEach(t),pIo=i(P),VF=n(P,"LI",{});var k8e=s(VF);Bce=n(k8e,"STRONG",{});var Tst=s(Bce);_Io=r(Tst,"longformer"),Tst.forEach(t),bIo=r(k8e," \u2014 "),_D=n(k8e,"A",{href:!0});var Mst=s(_D);vIo=r(Mst,"LongformerForQuestionAnswering"),Mst.forEach(t),FIo=r(k8e," (Longformer model)"),k8e.forEach(t),TIo=i(P),XF=n(P,"LI",{});var S8e=s(XF);Pce=n(S8e,"STRONG",{});var Est=s(Pce);MIo=r(Est,"lxmert"),Est.forEach(t),EIo=r(S8e," \u2014 "),bD=n(S8e,"A",{href:!0});var Cst=s(bD);CIo=r(Cst,"LxmertForQuestionAnswering"),Cst.forEach(t),wIo=r(S8e," (LXMERT model)"),S8e.forEach(t),AIo=i(P),zF=n(P,"LI",{});var R8e=s(zF);$ce=n(R8e,"STRONG",{});var wst=s($ce);yIo=r(wst,"mbart"),wst.forEach(t),LIo=r(R8e," \u2014 "),vD=n(R8e,"A",{href:!0});var Ast=s(vD);xIo=r(Ast,"MBartForQuestionAnswering"),Ast.forEach(t),kIo=r(R8e," (mBART model)"),R8e.forEach(t),SIo=i(P),QF=n(P,"LI",{});var B8e=s(QF);Ice=n(B8e,"STRONG",{});var yst=s(Ice);RIo=r(yst,"megatron-bert"),yst.forEach(t),BIo=r(B8e," \u2014 "),FD=n(B8e,"A",{href:!0});var Lst=s(FD);PIo=r(Lst,"MegatronBertForQuestionAnswering"),Lst.forEach(t),$Io=r(B8e," (MegatronBert model)"),B8e.forEach(t),IIo=i(P),WF=n(P,"LI",{});var P8e=s(WF);qce=n(P8e,"STRONG",{});var xst=s(qce);qIo=r(xst,"mobilebert"),xst.forEach(t),NIo=r(P8e," \u2014 "),TD=n(P8e,"A",{href:!0});var kst=s(TD);jIo=r(kst,"MobileBertForQuestionAnswering"),kst.forEach(t),DIo=r(P8e," (MobileBERT model)"),P8e.forEach(t),GIo=i(P),HF=n(P,"LI",{});var $8e=s(HF);Nce=n($8e,"STRONG",{});var Sst=s(Nce);OIo=r(Sst,"mpnet"),Sst.forEach(t),VIo=r($8e," \u2014 "),MD=n($8e,"A",{href:!0});var Rst=s(MD);XIo=r(Rst,"MPNetForQuestionAnswering"),Rst.forEach(t),zIo=r($8e," (MPNet model)"),$8e.forEach(t),QIo=i(P),UF=n(P,"LI",{});var I8e=s(UF);jce=n(I8e,"STRONG",{});var Bst=s(jce);WIo=r(Bst,"nystromformer"),Bst.forEach(t),HIo=r(I8e," \u2014 "),ED=n(I8e,"A",{href:!0});var Pst=s(ED);UIo=r(Pst,"NystromformerForQuestionAnswering"),Pst.forEach(t),JIo=r(I8e," (Nystromformer model)"),I8e.forEach(t),YIo=i(P),JF=n(P,"LI",{});var q8e=s(JF);Dce=n(q8e,"STRONG",{});var $st=s(Dce);KIo=r($st,"qdqbert"),$st.forEach(t),ZIo=r(q8e," \u2014 "),CD=n(q8e,"A",{href:!0});var Ist=s(CD);eqo=r(Ist,"QDQBertForQuestionAnswering"),Ist.forEach(t),oqo=r(q8e," (QDQBert model)"),q8e.forEach(t),rqo=i(P),YF=n(P,"LI",{});var N8e=s(YF);Gce=n(N8e,"STRONG",{});var qst=s(Gce);tqo=r(qst,"reformer"),qst.forEach(t),aqo=r(N8e," \u2014 "),wD=n(N8e,"A",{href:!0});var Nst=s(wD);nqo=r(Nst,"ReformerForQuestionAnswering"),Nst.forEach(t),sqo=r(N8e," (Reformer model)"),N8e.forEach(t),lqo=i(P),KF=n(P,"LI",{});var j8e=s(KF);Oce=n(j8e,"STRONG",{});var jst=s(Oce);iqo=r(jst,"rembert"),jst.forEach(t),dqo=r(j8e," \u2014 "),AD=n(j8e,"A",{href:!0});var Dst=s(AD);cqo=r(Dst,"RemBertForQuestionAnswering"),Dst.forEach(t),mqo=r(j8e," (RemBERT model)"),j8e.forEach(t),fqo=i(P),ZF=n(P,"LI",{});var D8e=s(ZF);Vce=n(D8e,"STRONG",{});var Gst=s(Vce);gqo=r(Gst,"roberta"),Gst.forEach(t),hqo=r(D8e," \u2014 "),yD=n(D8e,"A",{href:!0});var Ost=s(yD);uqo=r(Ost,"RobertaForQuestionAnswering"),Ost.forEach(t),pqo=r(D8e," (RoBERTa model)"),D8e.forEach(t),_qo=i(P),e1=n(P,"LI",{});var G8e=s(e1);Xce=n(G8e,"STRONG",{});var Vst=s(Xce);bqo=r(Vst,"roformer"),Vst.forEach(t),vqo=r(G8e," \u2014 "),LD=n(G8e,"A",{href:!0});var Xst=s(LD);Fqo=r(Xst,"RoFormerForQuestionAnswering"),Xst.forEach(t),Tqo=r(G8e," (RoFormer model)"),G8e.forEach(t),Mqo=i(P),o1=n(P,"LI",{});var O8e=s(o1);zce=n(O8e,"STRONG",{});var zst=s(zce);Eqo=r(zst,"splinter"),zst.forEach(t),Cqo=r(O8e," \u2014 "),xD=n(O8e,"A",{href:!0});var Qst=s(xD);wqo=r(Qst,"SplinterForQuestionAnswering"),Qst.forEach(t),Aqo=r(O8e," (Splinter model)"),O8e.forEach(t),yqo=i(P),r1=n(P,"LI",{});var V8e=s(r1);Qce=n(V8e,"STRONG",{});var Wst=s(Qce);Lqo=r(Wst,"squeezebert"),Wst.forEach(t),xqo=r(V8e," \u2014 "),kD=n(V8e,"A",{href:!0});var Hst=s(kD);kqo=r(Hst,"SqueezeBertForQuestionAnswering"),Hst.forEach(t),Sqo=r(V8e," (SqueezeBERT model)"),V8e.forEach(t),Rqo=i(P),t1=n(P,"LI",{});var X8e=s(t1);Wce=n(X8e,"STRONG",{});var Ust=s(Wce);Bqo=r(Ust,"xlm"),Ust.forEach(t),Pqo=r(X8e," \u2014 "),SD=n(X8e,"A",{href:!0});var Jst=s(SD);$qo=r(Jst,"XLMForQuestionAnsweringSimple"),Jst.forEach(t),Iqo=r(X8e," (XLM model)"),X8e.forEach(t),qqo=i(P),a1=n(P,"LI",{});var z8e=s(a1);Hce=n(z8e,"STRONG",{});var Yst=s(Hce);Nqo=r(Yst,"xlm-roberta"),Yst.forEach(t),jqo=r(z8e," \u2014 "),RD=n(z8e,"A",{href:!0});var Kst=s(RD);Dqo=r(Kst,"XLMRobertaForQuestionAnswering"),Kst.forEach(t),Gqo=r(z8e," (XLM-RoBERTa model)"),z8e.forEach(t),Oqo=i(P),n1=n(P,"LI",{});var Q8e=s(n1);Uce=n(Q8e,"STRONG",{});var Zst=s(Uce);Vqo=r(Zst,"xlm-roberta-xl"),Zst.forEach(t),Xqo=r(Q8e," \u2014 "),BD=n(Q8e,"A",{href:!0});var elt=s(BD);zqo=r(elt,"XLMRobertaXLForQuestionAnswering"),elt.forEach(t),Qqo=r(Q8e," (XLM-RoBERTa-XL model)"),Q8e.forEach(t),Wqo=i(P),s1=n(P,"LI",{});var W8e=s(s1);Jce=n(W8e,"STRONG",{});var olt=s(Jce);Hqo=r(olt,"xlnet"),olt.forEach(t),Uqo=r(W8e," \u2014 "),PD=n(W8e,"A",{href:!0});var rlt=s(PD);Jqo=r(rlt,"XLNetForQuestionAnsweringSimple"),rlt.forEach(t),Yqo=r(W8e," (XLNet model)"),W8e.forEach(t),Kqo=i(P),l1=n(P,"LI",{});var H8e=s(l1);Yce=n(H8e,"STRONG",{});var tlt=s(Yce);Zqo=r(tlt,"yoso"),tlt.forEach(t),eNo=r(H8e," \u2014 "),$D=n(H8e,"A",{href:!0});var alt=s($D);oNo=r(alt,"YosoForQuestionAnswering"),alt.forEach(t),rNo=r(H8e," (YOSO model)"),H8e.forEach(t),P.forEach(t),tNo=i(Ut),i1=n(Ut,"P",{});var U8e=s(i1);aNo=r(U8e,"The model is set in evaluation mode by default using "),Kce=n(U8e,"CODE",{});var nlt=s(Kce);nNo=r(nlt,"model.eval()"),nlt.forEach(t),sNo=r(U8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zce=n(U8e,"CODE",{});var slt=s(Zce);lNo=r(slt,"model.train()"),slt.forEach(t),U8e.forEach(t),iNo=i(Ut),eme=n(Ut,"P",{});var llt=s(eme);dNo=r(llt,"Examples:"),llt.forEach(t),cNo=i(Ut),f(EA.$$.fragment,Ut),Ut.forEach(t),fl.forEach(t),cBe=i(c),yd=n(c,"H2",{class:!0});var v$e=s(yd);d1=n(v$e,"A",{id:!0,class:!0,href:!0});var ilt=s(d1);ome=n(ilt,"SPAN",{});var dlt=s(ome);f(CA.$$.fragment,dlt),dlt.forEach(t),ilt.forEach(t),mNo=i(v$e),rme=n(v$e,"SPAN",{});var clt=s(rme);fNo=r(clt,"AutoModelForTableQuestionAnswering"),clt.forEach(t),v$e.forEach(t),mBe=i(c),sr=n(c,"DIV",{class:!0});var hl=s(sr);f(wA.$$.fragment,hl),gNo=i(hl),Ld=n(hl,"P",{});var DU=s(Ld);hNo=r(DU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),ID=n(DU,"A",{href:!0});var mlt=s(ID);uNo=r(mlt,"from_pretrained()"),mlt.forEach(t),pNo=r(DU," class method or the "),qD=n(DU,"A",{href:!0});var flt=s(qD);_No=r(flt,"from_config()"),flt.forEach(t),bNo=r(DU,` class
method.`),DU.forEach(t),vNo=i(hl),AA=n(hl,"P",{});var F$e=s(AA);FNo=r(F$e,"This class cannot be instantiated directly using "),tme=n(F$e,"CODE",{});var glt=s(tme);TNo=r(glt,"__init__()"),glt.forEach(t),MNo=r(F$e," (throws an error)."),F$e.forEach(t),ENo=i(hl),et=n(hl,"DIV",{class:!0});var ul=s(et);f(yA.$$.fragment,ul),CNo=i(ul),ame=n(ul,"P",{});var hlt=s(ame);wNo=r(hlt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),hlt.forEach(t),ANo=i(ul),xd=n(ul,"P",{});var GU=s(xd);yNo=r(GU,`Note:
Loading a model from its configuration file does `),nme=n(GU,"STRONG",{});var ult=s(nme);LNo=r(ult,"not"),ult.forEach(t),xNo=r(GU,` load the model weights. It only affects the
model\u2019s configuration. Use `),ND=n(GU,"A",{href:!0});var plt=s(ND);kNo=r(plt,"from_pretrained()"),plt.forEach(t),SNo=r(GU," to load the model weights."),GU.forEach(t),RNo=i(ul),sme=n(ul,"P",{});var _lt=s(sme);BNo=r(_lt,"Examples:"),_lt.forEach(t),PNo=i(ul),f(LA.$$.fragment,ul),ul.forEach(t),$No=i(hl),We=n(hl,"DIV",{class:!0});var Jt=s(We);f(xA.$$.fragment,Jt),INo=i(Jt),lme=n(Jt,"P",{});var blt=s(lme);qNo=r(blt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),blt.forEach(t),NNo=i(Jt),en=n(Jt,"P",{});var GC=s(en);jNo=r(GC,"The model class to instantiate is selected based on the "),ime=n(GC,"CODE",{});var vlt=s(ime);DNo=r(vlt,"model_type"),vlt.forEach(t),GNo=r(GC,` property of the config object (either
passed as an argument or loaded from `),dme=n(GC,"CODE",{});var Flt=s(dme);ONo=r(Flt,"pretrained_model_name_or_path"),Flt.forEach(t),VNo=r(GC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cme=n(GC,"CODE",{});var Tlt=s(cme);XNo=r(Tlt,"pretrained_model_name_or_path"),Tlt.forEach(t),zNo=r(GC,":"),GC.forEach(t),QNo=i(Jt),mme=n(Jt,"UL",{});var Mlt=s(mme);c1=n(Mlt,"LI",{});var J8e=s(c1);fme=n(J8e,"STRONG",{});var Elt=s(fme);WNo=r(Elt,"tapas"),Elt.forEach(t),HNo=r(J8e," \u2014 "),jD=n(J8e,"A",{href:!0});var Clt=s(jD);UNo=r(Clt,"TapasForQuestionAnswering"),Clt.forEach(t),JNo=r(J8e," (TAPAS model)"),J8e.forEach(t),Mlt.forEach(t),YNo=i(Jt),m1=n(Jt,"P",{});var Y8e=s(m1);KNo=r(Y8e,"The model is set in evaluation mode by default using "),gme=n(Y8e,"CODE",{});var wlt=s(gme);ZNo=r(wlt,"model.eval()"),wlt.forEach(t),ejo=r(Y8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hme=n(Y8e,"CODE",{});var Alt=s(hme);ojo=r(Alt,"model.train()"),Alt.forEach(t),Y8e.forEach(t),rjo=i(Jt),ume=n(Jt,"P",{});var ylt=s(ume);tjo=r(ylt,"Examples:"),ylt.forEach(t),ajo=i(Jt),f(kA.$$.fragment,Jt),Jt.forEach(t),hl.forEach(t),fBe=i(c),kd=n(c,"H2",{class:!0});var T$e=s(kd);f1=n(T$e,"A",{id:!0,class:!0,href:!0});var Llt=s(f1);pme=n(Llt,"SPAN",{});var xlt=s(pme);f(SA.$$.fragment,xlt),xlt.forEach(t),Llt.forEach(t),njo=i(T$e),_me=n(T$e,"SPAN",{});var klt=s(_me);sjo=r(klt,"AutoModelForImageClassification"),klt.forEach(t),T$e.forEach(t),gBe=i(c),lr=n(c,"DIV",{class:!0});var pl=s(lr);f(RA.$$.fragment,pl),ljo=i(pl),Sd=n(pl,"P",{});var OU=s(Sd);ijo=r(OU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),DD=n(OU,"A",{href:!0});var Slt=s(DD);djo=r(Slt,"from_pretrained()"),Slt.forEach(t),cjo=r(OU," class method or the "),GD=n(OU,"A",{href:!0});var Rlt=s(GD);mjo=r(Rlt,"from_config()"),Rlt.forEach(t),fjo=r(OU,` class
method.`),OU.forEach(t),gjo=i(pl),BA=n(pl,"P",{});var M$e=s(BA);hjo=r(M$e,"This class cannot be instantiated directly using "),bme=n(M$e,"CODE",{});var Blt=s(bme);ujo=r(Blt,"__init__()"),Blt.forEach(t),pjo=r(M$e," (throws an error)."),M$e.forEach(t),_jo=i(pl),ot=n(pl,"DIV",{class:!0});var _l=s(ot);f(PA.$$.fragment,_l),bjo=i(_l),vme=n(_l,"P",{});var Plt=s(vme);vjo=r(Plt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Plt.forEach(t),Fjo=i(_l),Rd=n(_l,"P",{});var VU=s(Rd);Tjo=r(VU,`Note:
Loading a model from its configuration file does `),Fme=n(VU,"STRONG",{});var $lt=s(Fme);Mjo=r($lt,"not"),$lt.forEach(t),Ejo=r(VU,` load the model weights. It only affects the
model\u2019s configuration. Use `),OD=n(VU,"A",{href:!0});var Ilt=s(OD);Cjo=r(Ilt,"from_pretrained()"),Ilt.forEach(t),wjo=r(VU," to load the model weights."),VU.forEach(t),Ajo=i(_l),Tme=n(_l,"P",{});var qlt=s(Tme);yjo=r(qlt,"Examples:"),qlt.forEach(t),Ljo=i(_l),f($A.$$.fragment,_l),_l.forEach(t),xjo=i(pl),He=n(pl,"DIV",{class:!0});var Yt=s(He);f(IA.$$.fragment,Yt),kjo=i(Yt),Mme=n(Yt,"P",{});var Nlt=s(Mme);Sjo=r(Nlt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Nlt.forEach(t),Rjo=i(Yt),on=n(Yt,"P",{});var OC=s(on);Bjo=r(OC,"The model class to instantiate is selected based on the "),Eme=n(OC,"CODE",{});var jlt=s(Eme);Pjo=r(jlt,"model_type"),jlt.forEach(t),$jo=r(OC,` property of the config object (either
passed as an argument or loaded from `),Cme=n(OC,"CODE",{});var Dlt=s(Cme);Ijo=r(Dlt,"pretrained_model_name_or_path"),Dlt.forEach(t),qjo=r(OC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wme=n(OC,"CODE",{});var Glt=s(wme);Njo=r(Glt,"pretrained_model_name_or_path"),Glt.forEach(t),jjo=r(OC,":"),OC.forEach(t),Djo=i(Yt),de=n(Yt,"UL",{});var ge=s(de);g1=n(ge,"LI",{});var K8e=s(g1);Ame=n(K8e,"STRONG",{});var Olt=s(Ame);Gjo=r(Olt,"beit"),Olt.forEach(t),Ojo=r(K8e," \u2014 "),VD=n(K8e,"A",{href:!0});var Vlt=s(VD);Vjo=r(Vlt,"BeitForImageClassification"),Vlt.forEach(t),Xjo=r(K8e," (BEiT model)"),K8e.forEach(t),zjo=i(ge),h1=n(ge,"LI",{});var Z8e=s(h1);yme=n(Z8e,"STRONG",{});var Xlt=s(yme);Qjo=r(Xlt,"convnext"),Xlt.forEach(t),Wjo=r(Z8e," \u2014 "),XD=n(Z8e,"A",{href:!0});var zlt=s(XD);Hjo=r(zlt,"ConvNextForImageClassification"),zlt.forEach(t),Ujo=r(Z8e," (ConvNext model)"),Z8e.forEach(t),Jjo=i(ge),u1=n(ge,"LI",{});var eLe=s(u1);Lme=n(eLe,"STRONG",{});var Qlt=s(Lme);Yjo=r(Qlt,"data2vec-vision"),Qlt.forEach(t),Kjo=r(eLe," \u2014 "),zD=n(eLe,"A",{href:!0});var Wlt=s(zD);Zjo=r(Wlt,"Data2VecVisionForImageClassification"),Wlt.forEach(t),eDo=r(eLe," (Data2VecVision model)"),eLe.forEach(t),oDo=i(ge),Gs=n(ge,"LI",{});var b9=s(Gs);xme=n(b9,"STRONG",{});var Hlt=s(xme);rDo=r(Hlt,"deit"),Hlt.forEach(t),tDo=r(b9," \u2014 "),QD=n(b9,"A",{href:!0});var Ult=s(QD);aDo=r(Ult,"DeiTForImageClassification"),Ult.forEach(t),nDo=r(b9," or "),WD=n(b9,"A",{href:!0});var Jlt=s(WD);sDo=r(Jlt,"DeiTForImageClassificationWithTeacher"),Jlt.forEach(t),lDo=r(b9," (DeiT model)"),b9.forEach(t),iDo=i(ge),p1=n(ge,"LI",{});var oLe=s(p1);kme=n(oLe,"STRONG",{});var Ylt=s(kme);dDo=r(Ylt,"imagegpt"),Ylt.forEach(t),cDo=r(oLe," \u2014 "),HD=n(oLe,"A",{href:!0});var Klt=s(HD);mDo=r(Klt,"ImageGPTForImageClassification"),Klt.forEach(t),fDo=r(oLe," (ImageGPT model)"),oLe.forEach(t),gDo=i(ge),fa=n(ge,"LI",{});var Pm=s(fa);Sme=n(Pm,"STRONG",{});var Zlt=s(Sme);hDo=r(Zlt,"perceiver"),Zlt.forEach(t),uDo=r(Pm," \u2014 "),UD=n(Pm,"A",{href:!0});var eit=s(UD);pDo=r(eit,"PerceiverForImageClassificationLearned"),eit.forEach(t),_Do=r(Pm," or "),JD=n(Pm,"A",{href:!0});var oit=s(JD);bDo=r(oit,"PerceiverForImageClassificationFourier"),oit.forEach(t),vDo=r(Pm," or "),YD=n(Pm,"A",{href:!0});var rit=s(YD);FDo=r(rit,"PerceiverForImageClassificationConvProcessing"),rit.forEach(t),TDo=r(Pm," (Perceiver model)"),Pm.forEach(t),MDo=i(ge),_1=n(ge,"LI",{});var rLe=s(_1);Rme=n(rLe,"STRONG",{});var tit=s(Rme);EDo=r(tit,"poolformer"),tit.forEach(t),CDo=r(rLe," \u2014 "),KD=n(rLe,"A",{href:!0});var ait=s(KD);wDo=r(ait,"PoolFormerForImageClassification"),ait.forEach(t),ADo=r(rLe," (PoolFormer model)"),rLe.forEach(t),yDo=i(ge),b1=n(ge,"LI",{});var tLe=s(b1);Bme=n(tLe,"STRONG",{});var nit=s(Bme);LDo=r(nit,"regnet"),nit.forEach(t),xDo=r(tLe," \u2014 "),ZD=n(tLe,"A",{href:!0});var sit=s(ZD);kDo=r(sit,"RegNetForImageClassification"),sit.forEach(t),SDo=r(tLe," (RegNet model)"),tLe.forEach(t),RDo=i(ge),v1=n(ge,"LI",{});var aLe=s(v1);Pme=n(aLe,"STRONG",{});var lit=s(Pme);BDo=r(lit,"resnet"),lit.forEach(t),PDo=r(aLe," \u2014 "),eG=n(aLe,"A",{href:!0});var iit=s(eG);$Do=r(iit,"ResNetForImageClassification"),iit.forEach(t),IDo=r(aLe," (ResNet model)"),aLe.forEach(t),qDo=i(ge),F1=n(ge,"LI",{});var nLe=s(F1);$me=n(nLe,"STRONG",{});var dit=s($me);NDo=r(dit,"segformer"),dit.forEach(t),jDo=r(nLe," \u2014 "),oG=n(nLe,"A",{href:!0});var cit=s(oG);DDo=r(cit,"SegformerForImageClassification"),cit.forEach(t),GDo=r(nLe," (SegFormer model)"),nLe.forEach(t),ODo=i(ge),T1=n(ge,"LI",{});var sLe=s(T1);Ime=n(sLe,"STRONG",{});var mit=s(Ime);VDo=r(mit,"swin"),mit.forEach(t),XDo=r(sLe," \u2014 "),rG=n(sLe,"A",{href:!0});var fit=s(rG);zDo=r(fit,"SwinForImageClassification"),fit.forEach(t),QDo=r(sLe," (Swin model)"),sLe.forEach(t),WDo=i(ge),M1=n(ge,"LI",{});var lLe=s(M1);qme=n(lLe,"STRONG",{});var git=s(qme);HDo=r(git,"van"),git.forEach(t),UDo=r(lLe," \u2014 "),tG=n(lLe,"A",{href:!0});var hit=s(tG);JDo=r(hit,"VanForImageClassification"),hit.forEach(t),YDo=r(lLe," (VAN model)"),lLe.forEach(t),KDo=i(ge),E1=n(ge,"LI",{});var iLe=s(E1);Nme=n(iLe,"STRONG",{});var uit=s(Nme);ZDo=r(uit,"vit"),uit.forEach(t),eGo=r(iLe," \u2014 "),aG=n(iLe,"A",{href:!0});var pit=s(aG);oGo=r(pit,"ViTForImageClassification"),pit.forEach(t),rGo=r(iLe," (ViT model)"),iLe.forEach(t),ge.forEach(t),tGo=i(Yt),C1=n(Yt,"P",{});var dLe=s(C1);aGo=r(dLe,"The model is set in evaluation mode by default using "),jme=n(dLe,"CODE",{});var _it=s(jme);nGo=r(_it,"model.eval()"),_it.forEach(t),sGo=r(dLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Dme=n(dLe,"CODE",{});var bit=s(Dme);lGo=r(bit,"model.train()"),bit.forEach(t),dLe.forEach(t),iGo=i(Yt),Gme=n(Yt,"P",{});var vit=s(Gme);dGo=r(vit,"Examples:"),vit.forEach(t),cGo=i(Yt),f(qA.$$.fragment,Yt),Yt.forEach(t),pl.forEach(t),hBe=i(c),Bd=n(c,"H2",{class:!0});var E$e=s(Bd);w1=n(E$e,"A",{id:!0,class:!0,href:!0});var Fit=s(w1);Ome=n(Fit,"SPAN",{});var Tit=s(Ome);f(NA.$$.fragment,Tit),Tit.forEach(t),Fit.forEach(t),mGo=i(E$e),Vme=n(E$e,"SPAN",{});var Mit=s(Vme);fGo=r(Mit,"AutoModelForVision2Seq"),Mit.forEach(t),E$e.forEach(t),uBe=i(c),ir=n(c,"DIV",{class:!0});var bl=s(ir);f(jA.$$.fragment,bl),gGo=i(bl),Pd=n(bl,"P",{});var XU=s(Pd);hGo=r(XU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),nG=n(XU,"A",{href:!0});var Eit=s(nG);uGo=r(Eit,"from_pretrained()"),Eit.forEach(t),pGo=r(XU," class method or the "),sG=n(XU,"A",{href:!0});var Cit=s(sG);_Go=r(Cit,"from_config()"),Cit.forEach(t),bGo=r(XU,` class
method.`),XU.forEach(t),vGo=i(bl),DA=n(bl,"P",{});var C$e=s(DA);FGo=r(C$e,"This class cannot be instantiated directly using "),Xme=n(C$e,"CODE",{});var wit=s(Xme);TGo=r(wit,"__init__()"),wit.forEach(t),MGo=r(C$e," (throws an error)."),C$e.forEach(t),EGo=i(bl),rt=n(bl,"DIV",{class:!0});var vl=s(rt);f(GA.$$.fragment,vl),CGo=i(vl),zme=n(vl,"P",{});var Ait=s(zme);wGo=r(Ait,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Ait.forEach(t),AGo=i(vl),$d=n(vl,"P",{});var zU=s($d);yGo=r(zU,`Note:
Loading a model from its configuration file does `),Qme=n(zU,"STRONG",{});var yit=s(Qme);LGo=r(yit,"not"),yit.forEach(t),xGo=r(zU,` load the model weights. It only affects the
model\u2019s configuration. Use `),lG=n(zU,"A",{href:!0});var Lit=s(lG);kGo=r(Lit,"from_pretrained()"),Lit.forEach(t),SGo=r(zU," to load the model weights."),zU.forEach(t),RGo=i(vl),Wme=n(vl,"P",{});var xit=s(Wme);BGo=r(xit,"Examples:"),xit.forEach(t),PGo=i(vl),f(OA.$$.fragment,vl),vl.forEach(t),$Go=i(bl),Ue=n(bl,"DIV",{class:!0});var Kt=s(Ue);f(VA.$$.fragment,Kt),IGo=i(Kt),Hme=n(Kt,"P",{});var kit=s(Hme);qGo=r(kit,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),kit.forEach(t),NGo=i(Kt),rn=n(Kt,"P",{});var VC=s(rn);jGo=r(VC,"The model class to instantiate is selected based on the "),Ume=n(VC,"CODE",{});var Sit=s(Ume);DGo=r(Sit,"model_type"),Sit.forEach(t),GGo=r(VC,` property of the config object (either
passed as an argument or loaded from `),Jme=n(VC,"CODE",{});var Rit=s(Jme);OGo=r(Rit,"pretrained_model_name_or_path"),Rit.forEach(t),VGo=r(VC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Yme=n(VC,"CODE",{});var Bit=s(Yme);XGo=r(Bit,"pretrained_model_name_or_path"),Bit.forEach(t),zGo=r(VC,":"),VC.forEach(t),QGo=i(Kt),Kme=n(Kt,"UL",{});var Pit=s(Kme);A1=n(Pit,"LI",{});var cLe=s(A1);Zme=n(cLe,"STRONG",{});var $it=s(Zme);WGo=r($it,"vision-encoder-decoder"),$it.forEach(t),HGo=r(cLe," \u2014 "),iG=n(cLe,"A",{href:!0});var Iit=s(iG);UGo=r(Iit,"VisionEncoderDecoderModel"),Iit.forEach(t),JGo=r(cLe," (Vision Encoder decoder model)"),cLe.forEach(t),Pit.forEach(t),YGo=i(Kt),y1=n(Kt,"P",{});var mLe=s(y1);KGo=r(mLe,"The model is set in evaluation mode by default using "),efe=n(mLe,"CODE",{});var qit=s(efe);ZGo=r(qit,"model.eval()"),qit.forEach(t),eOo=r(mLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ofe=n(mLe,"CODE",{});var Nit=s(ofe);oOo=r(Nit,"model.train()"),Nit.forEach(t),mLe.forEach(t),rOo=i(Kt),rfe=n(Kt,"P",{});var jit=s(rfe);tOo=r(jit,"Examples:"),jit.forEach(t),aOo=i(Kt),f(XA.$$.fragment,Kt),Kt.forEach(t),bl.forEach(t),pBe=i(c),Id=n(c,"H2",{class:!0});var w$e=s(Id);L1=n(w$e,"A",{id:!0,class:!0,href:!0});var Dit=s(L1);tfe=n(Dit,"SPAN",{});var Git=s(tfe);f(zA.$$.fragment,Git),Git.forEach(t),Dit.forEach(t),nOo=i(w$e),afe=n(w$e,"SPAN",{});var Oit=s(afe);sOo=r(Oit,"AutoModelForAudioClassification"),Oit.forEach(t),w$e.forEach(t),_Be=i(c),dr=n(c,"DIV",{class:!0});var Fl=s(dr);f(QA.$$.fragment,Fl),lOo=i(Fl),qd=n(Fl,"P",{});var QU=s(qd);iOo=r(QU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),dG=n(QU,"A",{href:!0});var Vit=s(dG);dOo=r(Vit,"from_pretrained()"),Vit.forEach(t),cOo=r(QU," class method or the "),cG=n(QU,"A",{href:!0});var Xit=s(cG);mOo=r(Xit,"from_config()"),Xit.forEach(t),fOo=r(QU,` class
method.`),QU.forEach(t),gOo=i(Fl),WA=n(Fl,"P",{});var A$e=s(WA);hOo=r(A$e,"This class cannot be instantiated directly using "),nfe=n(A$e,"CODE",{});var zit=s(nfe);uOo=r(zit,"__init__()"),zit.forEach(t),pOo=r(A$e," (throws an error)."),A$e.forEach(t),_Oo=i(Fl),tt=n(Fl,"DIV",{class:!0});var Tl=s(tt);f(HA.$$.fragment,Tl),bOo=i(Tl),sfe=n(Tl,"P",{});var Qit=s(sfe);vOo=r(Qit,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Qit.forEach(t),FOo=i(Tl),Nd=n(Tl,"P",{});var WU=s(Nd);TOo=r(WU,`Note:
Loading a model from its configuration file does `),lfe=n(WU,"STRONG",{});var Wit=s(lfe);MOo=r(Wit,"not"),Wit.forEach(t),EOo=r(WU,` load the model weights. It only affects the
model\u2019s configuration. Use `),mG=n(WU,"A",{href:!0});var Hit=s(mG);COo=r(Hit,"from_pretrained()"),Hit.forEach(t),wOo=r(WU," to load the model weights."),WU.forEach(t),AOo=i(Tl),ife=n(Tl,"P",{});var Uit=s(ife);yOo=r(Uit,"Examples:"),Uit.forEach(t),LOo=i(Tl),f(UA.$$.fragment,Tl),Tl.forEach(t),xOo=i(Fl),Je=n(Fl,"DIV",{class:!0});var Zt=s(Je);f(JA.$$.fragment,Zt),kOo=i(Zt),dfe=n(Zt,"P",{});var Jit=s(dfe);SOo=r(Jit,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),Jit.forEach(t),ROo=i(Zt),tn=n(Zt,"P",{});var XC=s(tn);BOo=r(XC,"The model class to instantiate is selected based on the "),cfe=n(XC,"CODE",{});var Yit=s(cfe);POo=r(Yit,"model_type"),Yit.forEach(t),$Oo=r(XC,` property of the config object (either
passed as an argument or loaded from `),mfe=n(XC,"CODE",{});var Kit=s(mfe);IOo=r(Kit,"pretrained_model_name_or_path"),Kit.forEach(t),qOo=r(XC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ffe=n(XC,"CODE",{});var Zit=s(ffe);NOo=r(Zit,"pretrained_model_name_or_path"),Zit.forEach(t),jOo=r(XC,":"),XC.forEach(t),DOo=i(Zt),Se=n(Zt,"UL",{});var Do=s(Se);x1=n(Do,"LI",{});var fLe=s(x1);gfe=n(fLe,"STRONG",{});var edt=s(gfe);GOo=r(edt,"data2vec-audio"),edt.forEach(t),OOo=r(fLe," \u2014 "),fG=n(fLe,"A",{href:!0});var odt=s(fG);VOo=r(odt,"Data2VecAudioForSequenceClassification"),odt.forEach(t),XOo=r(fLe," (Data2VecAudio model)"),fLe.forEach(t),zOo=i(Do),k1=n(Do,"LI",{});var gLe=s(k1);hfe=n(gLe,"STRONG",{});var rdt=s(hfe);QOo=r(rdt,"hubert"),rdt.forEach(t),WOo=r(gLe," \u2014 "),gG=n(gLe,"A",{href:!0});var tdt=s(gG);HOo=r(tdt,"HubertForSequenceClassification"),tdt.forEach(t),UOo=r(gLe," (Hubert model)"),gLe.forEach(t),JOo=i(Do),S1=n(Do,"LI",{});var hLe=s(S1);ufe=n(hLe,"STRONG",{});var adt=s(ufe);YOo=r(adt,"sew"),adt.forEach(t),KOo=r(hLe," \u2014 "),hG=n(hLe,"A",{href:!0});var ndt=s(hG);ZOo=r(ndt,"SEWForSequenceClassification"),ndt.forEach(t),eVo=r(hLe," (SEW model)"),hLe.forEach(t),oVo=i(Do),R1=n(Do,"LI",{});var uLe=s(R1);pfe=n(uLe,"STRONG",{});var sdt=s(pfe);rVo=r(sdt,"sew-d"),sdt.forEach(t),tVo=r(uLe," \u2014 "),uG=n(uLe,"A",{href:!0});var ldt=s(uG);aVo=r(ldt,"SEWDForSequenceClassification"),ldt.forEach(t),nVo=r(uLe," (SEW-D model)"),uLe.forEach(t),sVo=i(Do),B1=n(Do,"LI",{});var pLe=s(B1);_fe=n(pLe,"STRONG",{});var idt=s(_fe);lVo=r(idt,"unispeech"),idt.forEach(t),iVo=r(pLe," \u2014 "),pG=n(pLe,"A",{href:!0});var ddt=s(pG);dVo=r(ddt,"UniSpeechForSequenceClassification"),ddt.forEach(t),cVo=r(pLe," (UniSpeech model)"),pLe.forEach(t),mVo=i(Do),P1=n(Do,"LI",{});var _Le=s(P1);bfe=n(_Le,"STRONG",{});var cdt=s(bfe);fVo=r(cdt,"unispeech-sat"),cdt.forEach(t),gVo=r(_Le," \u2014 "),_G=n(_Le,"A",{href:!0});var mdt=s(_G);hVo=r(mdt,"UniSpeechSatForSequenceClassification"),mdt.forEach(t),uVo=r(_Le," (UniSpeechSat model)"),_Le.forEach(t),pVo=i(Do),$1=n(Do,"LI",{});var bLe=s($1);vfe=n(bLe,"STRONG",{});var fdt=s(vfe);_Vo=r(fdt,"wav2vec2"),fdt.forEach(t),bVo=r(bLe," \u2014 "),bG=n(bLe,"A",{href:!0});var gdt=s(bG);vVo=r(gdt,"Wav2Vec2ForSequenceClassification"),gdt.forEach(t),FVo=r(bLe," (Wav2Vec2 model)"),bLe.forEach(t),TVo=i(Do),I1=n(Do,"LI",{});var vLe=s(I1);Ffe=n(vLe,"STRONG",{});var hdt=s(Ffe);MVo=r(hdt,"wavlm"),hdt.forEach(t),EVo=r(vLe," \u2014 "),vG=n(vLe,"A",{href:!0});var udt=s(vG);CVo=r(udt,"WavLMForSequenceClassification"),udt.forEach(t),wVo=r(vLe," (WavLM model)"),vLe.forEach(t),Do.forEach(t),AVo=i(Zt),q1=n(Zt,"P",{});var FLe=s(q1);yVo=r(FLe,"The model is set in evaluation mode by default using "),Tfe=n(FLe,"CODE",{});var pdt=s(Tfe);LVo=r(pdt,"model.eval()"),pdt.forEach(t),xVo=r(FLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mfe=n(FLe,"CODE",{});var _dt=s(Mfe);kVo=r(_dt,"model.train()"),_dt.forEach(t),FLe.forEach(t),SVo=i(Zt),Efe=n(Zt,"P",{});var bdt=s(Efe);RVo=r(bdt,"Examples:"),bdt.forEach(t),BVo=i(Zt),f(YA.$$.fragment,Zt),Zt.forEach(t),Fl.forEach(t),bBe=i(c),jd=n(c,"H2",{class:!0});var y$e=s(jd);N1=n(y$e,"A",{id:!0,class:!0,href:!0});var vdt=s(N1);Cfe=n(vdt,"SPAN",{});var Fdt=s(Cfe);f(KA.$$.fragment,Fdt),Fdt.forEach(t),vdt.forEach(t),PVo=i(y$e),wfe=n(y$e,"SPAN",{});var Tdt=s(wfe);$Vo=r(Tdt,"AutoModelForAudioFrameClassification"),Tdt.forEach(t),y$e.forEach(t),vBe=i(c),cr=n(c,"DIV",{class:!0});var Ml=s(cr);f(ZA.$$.fragment,Ml),IVo=i(Ml),Dd=n(Ml,"P",{});var HU=s(Dd);qVo=r(HU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),FG=n(HU,"A",{href:!0});var Mdt=s(FG);NVo=r(Mdt,"from_pretrained()"),Mdt.forEach(t),jVo=r(HU," class method or the "),TG=n(HU,"A",{href:!0});var Edt=s(TG);DVo=r(Edt,"from_config()"),Edt.forEach(t),GVo=r(HU,` class
method.`),HU.forEach(t),OVo=i(Ml),e0=n(Ml,"P",{});var L$e=s(e0);VVo=r(L$e,"This class cannot be instantiated directly using "),Afe=n(L$e,"CODE",{});var Cdt=s(Afe);XVo=r(Cdt,"__init__()"),Cdt.forEach(t),zVo=r(L$e," (throws an error)."),L$e.forEach(t),QVo=i(Ml),at=n(Ml,"DIV",{class:!0});var El=s(at);f(o0.$$.fragment,El),WVo=i(El),yfe=n(El,"P",{});var wdt=s(yfe);HVo=r(wdt,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),wdt.forEach(t),UVo=i(El),Gd=n(El,"P",{});var UU=s(Gd);JVo=r(UU,`Note:
Loading a model from its configuration file does `),Lfe=n(UU,"STRONG",{});var Adt=s(Lfe);YVo=r(Adt,"not"),Adt.forEach(t),KVo=r(UU,` load the model weights. It only affects the
model\u2019s configuration. Use `),MG=n(UU,"A",{href:!0});var ydt=s(MG);ZVo=r(ydt,"from_pretrained()"),ydt.forEach(t),eXo=r(UU," to load the model weights."),UU.forEach(t),oXo=i(El),xfe=n(El,"P",{});var Ldt=s(xfe);rXo=r(Ldt,"Examples:"),Ldt.forEach(t),tXo=i(El),f(r0.$$.fragment,El),El.forEach(t),aXo=i(Ml),Ye=n(Ml,"DIV",{class:!0});var ea=s(Ye);f(t0.$$.fragment,ea),nXo=i(ea),kfe=n(ea,"P",{});var xdt=s(kfe);sXo=r(xdt,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),xdt.forEach(t),lXo=i(ea),an=n(ea,"P",{});var zC=s(an);iXo=r(zC,"The model class to instantiate is selected based on the "),Sfe=n(zC,"CODE",{});var kdt=s(Sfe);dXo=r(kdt,"model_type"),kdt.forEach(t),cXo=r(zC,` property of the config object (either
passed as an argument or loaded from `),Rfe=n(zC,"CODE",{});var Sdt=s(Rfe);mXo=r(Sdt,"pretrained_model_name_or_path"),Sdt.forEach(t),fXo=r(zC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bfe=n(zC,"CODE",{});var Rdt=s(Bfe);gXo=r(Rdt,"pretrained_model_name_or_path"),Rdt.forEach(t),hXo=r(zC,":"),zC.forEach(t),uXo=i(ea),nn=n(ea,"UL",{});var QC=s(nn);j1=n(QC,"LI",{});var TLe=s(j1);Pfe=n(TLe,"STRONG",{});var Bdt=s(Pfe);pXo=r(Bdt,"data2vec-audio"),Bdt.forEach(t),_Xo=r(TLe," \u2014 "),EG=n(TLe,"A",{href:!0});var Pdt=s(EG);bXo=r(Pdt,"Data2VecAudioForAudioFrameClassification"),Pdt.forEach(t),vXo=r(TLe," (Data2VecAudio model)"),TLe.forEach(t),FXo=i(QC),D1=n(QC,"LI",{});var MLe=s(D1);$fe=n(MLe,"STRONG",{});var $dt=s($fe);TXo=r($dt,"unispeech-sat"),$dt.forEach(t),MXo=r(MLe," \u2014 "),CG=n(MLe,"A",{href:!0});var Idt=s(CG);EXo=r(Idt,"UniSpeechSatForAudioFrameClassification"),Idt.forEach(t),CXo=r(MLe," (UniSpeechSat model)"),MLe.forEach(t),wXo=i(QC),G1=n(QC,"LI",{});var ELe=s(G1);Ife=n(ELe,"STRONG",{});var qdt=s(Ife);AXo=r(qdt,"wav2vec2"),qdt.forEach(t),yXo=r(ELe," \u2014 "),wG=n(ELe,"A",{href:!0});var Ndt=s(wG);LXo=r(Ndt,"Wav2Vec2ForAudioFrameClassification"),Ndt.forEach(t),xXo=r(ELe," (Wav2Vec2 model)"),ELe.forEach(t),kXo=i(QC),O1=n(QC,"LI",{});var CLe=s(O1);qfe=n(CLe,"STRONG",{});var jdt=s(qfe);SXo=r(jdt,"wavlm"),jdt.forEach(t),RXo=r(CLe," \u2014 "),AG=n(CLe,"A",{href:!0});var Ddt=s(AG);BXo=r(Ddt,"WavLMForAudioFrameClassification"),Ddt.forEach(t),PXo=r(CLe," (WavLM model)"),CLe.forEach(t),QC.forEach(t),$Xo=i(ea),V1=n(ea,"P",{});var wLe=s(V1);IXo=r(wLe,"The model is set in evaluation mode by default using "),Nfe=n(wLe,"CODE",{});var Gdt=s(Nfe);qXo=r(Gdt,"model.eval()"),Gdt.forEach(t),NXo=r(wLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jfe=n(wLe,"CODE",{});var Odt=s(jfe);jXo=r(Odt,"model.train()"),Odt.forEach(t),wLe.forEach(t),DXo=i(ea),Dfe=n(ea,"P",{});var Vdt=s(Dfe);GXo=r(Vdt,"Examples:"),Vdt.forEach(t),OXo=i(ea),f(a0.$$.fragment,ea),ea.forEach(t),Ml.forEach(t),FBe=i(c),Od=n(c,"H2",{class:!0});var x$e=s(Od);X1=n(x$e,"A",{id:!0,class:!0,href:!0});var Xdt=s(X1);Gfe=n(Xdt,"SPAN",{});var zdt=s(Gfe);f(n0.$$.fragment,zdt),zdt.forEach(t),Xdt.forEach(t),VXo=i(x$e),Ofe=n(x$e,"SPAN",{});var Qdt=s(Ofe);XXo=r(Qdt,"AutoModelForCTC"),Qdt.forEach(t),x$e.forEach(t),TBe=i(c),mr=n(c,"DIV",{class:!0});var Cl=s(mr);f(s0.$$.fragment,Cl),zXo=i(Cl),Vd=n(Cl,"P",{});var JU=s(Vd);QXo=r(JU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),yG=n(JU,"A",{href:!0});var Wdt=s(yG);WXo=r(Wdt,"from_pretrained()"),Wdt.forEach(t),HXo=r(JU," class method or the "),LG=n(JU,"A",{href:!0});var Hdt=s(LG);UXo=r(Hdt,"from_config()"),Hdt.forEach(t),JXo=r(JU,` class
method.`),JU.forEach(t),YXo=i(Cl),l0=n(Cl,"P",{});var k$e=s(l0);KXo=r(k$e,"This class cannot be instantiated directly using "),Vfe=n(k$e,"CODE",{});var Udt=s(Vfe);ZXo=r(Udt,"__init__()"),Udt.forEach(t),ezo=r(k$e," (throws an error)."),k$e.forEach(t),ozo=i(Cl),nt=n(Cl,"DIV",{class:!0});var wl=s(nt);f(i0.$$.fragment,wl),rzo=i(wl),Xfe=n(wl,"P",{});var Jdt=s(Xfe);tzo=r(Jdt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Jdt.forEach(t),azo=i(wl),Xd=n(wl,"P",{});var YU=s(Xd);nzo=r(YU,`Note:
Loading a model from its configuration file does `),zfe=n(YU,"STRONG",{});var Ydt=s(zfe);szo=r(Ydt,"not"),Ydt.forEach(t),lzo=r(YU,` load the model weights. It only affects the
model\u2019s configuration. Use `),xG=n(YU,"A",{href:!0});var Kdt=s(xG);izo=r(Kdt,"from_pretrained()"),Kdt.forEach(t),dzo=r(YU," to load the model weights."),YU.forEach(t),czo=i(wl),Qfe=n(wl,"P",{});var Zdt=s(Qfe);mzo=r(Zdt,"Examples:"),Zdt.forEach(t),fzo=i(wl),f(d0.$$.fragment,wl),wl.forEach(t),gzo=i(Cl),Ke=n(Cl,"DIV",{class:!0});var oa=s(Ke);f(c0.$$.fragment,oa),hzo=i(oa),Wfe=n(oa,"P",{});var ect=s(Wfe);uzo=r(ect,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),ect.forEach(t),pzo=i(oa),sn=n(oa,"P",{});var WC=s(sn);_zo=r(WC,"The model class to instantiate is selected based on the "),Hfe=n(WC,"CODE",{});var oct=s(Hfe);bzo=r(oct,"model_type"),oct.forEach(t),vzo=r(WC,` property of the config object (either
passed as an argument or loaded from `),Ufe=n(WC,"CODE",{});var rct=s(Ufe);Fzo=r(rct,"pretrained_model_name_or_path"),rct.forEach(t),Tzo=r(WC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jfe=n(WC,"CODE",{});var tct=s(Jfe);Mzo=r(tct,"pretrained_model_name_or_path"),tct.forEach(t),Ezo=r(WC,":"),WC.forEach(t),Czo=i(oa),Re=n(oa,"UL",{});var Go=s(Re);z1=n(Go,"LI",{});var ALe=s(z1);Yfe=n(ALe,"STRONG",{});var act=s(Yfe);wzo=r(act,"data2vec-audio"),act.forEach(t),Azo=r(ALe," \u2014 "),kG=n(ALe,"A",{href:!0});var nct=s(kG);yzo=r(nct,"Data2VecAudioForCTC"),nct.forEach(t),Lzo=r(ALe," (Data2VecAudio model)"),ALe.forEach(t),xzo=i(Go),Q1=n(Go,"LI",{});var yLe=s(Q1);Kfe=n(yLe,"STRONG",{});var sct=s(Kfe);kzo=r(sct,"hubert"),sct.forEach(t),Szo=r(yLe," \u2014 "),SG=n(yLe,"A",{href:!0});var lct=s(SG);Rzo=r(lct,"HubertForCTC"),lct.forEach(t),Bzo=r(yLe," (Hubert model)"),yLe.forEach(t),Pzo=i(Go),W1=n(Go,"LI",{});var LLe=s(W1);Zfe=n(LLe,"STRONG",{});var ict=s(Zfe);$zo=r(ict,"sew"),ict.forEach(t),Izo=r(LLe," \u2014 "),RG=n(LLe,"A",{href:!0});var dct=s(RG);qzo=r(dct,"SEWForCTC"),dct.forEach(t),Nzo=r(LLe," (SEW model)"),LLe.forEach(t),jzo=i(Go),H1=n(Go,"LI",{});var xLe=s(H1);ege=n(xLe,"STRONG",{});var cct=s(ege);Dzo=r(cct,"sew-d"),cct.forEach(t),Gzo=r(xLe," \u2014 "),BG=n(xLe,"A",{href:!0});var mct=s(BG);Ozo=r(mct,"SEWDForCTC"),mct.forEach(t),Vzo=r(xLe," (SEW-D model)"),xLe.forEach(t),Xzo=i(Go),U1=n(Go,"LI",{});var kLe=s(U1);oge=n(kLe,"STRONG",{});var fct=s(oge);zzo=r(fct,"unispeech"),fct.forEach(t),Qzo=r(kLe," \u2014 "),PG=n(kLe,"A",{href:!0});var gct=s(PG);Wzo=r(gct,"UniSpeechForCTC"),gct.forEach(t),Hzo=r(kLe," (UniSpeech model)"),kLe.forEach(t),Uzo=i(Go),J1=n(Go,"LI",{});var SLe=s(J1);rge=n(SLe,"STRONG",{});var hct=s(rge);Jzo=r(hct,"unispeech-sat"),hct.forEach(t),Yzo=r(SLe," \u2014 "),$G=n(SLe,"A",{href:!0});var uct=s($G);Kzo=r(uct,"UniSpeechSatForCTC"),uct.forEach(t),Zzo=r(SLe," (UniSpeechSat model)"),SLe.forEach(t),eQo=i(Go),Y1=n(Go,"LI",{});var RLe=s(Y1);tge=n(RLe,"STRONG",{});var pct=s(tge);oQo=r(pct,"wav2vec2"),pct.forEach(t),rQo=r(RLe," \u2014 "),IG=n(RLe,"A",{href:!0});var _ct=s(IG);tQo=r(_ct,"Wav2Vec2ForCTC"),_ct.forEach(t),aQo=r(RLe," (Wav2Vec2 model)"),RLe.forEach(t),nQo=i(Go),K1=n(Go,"LI",{});var BLe=s(K1);age=n(BLe,"STRONG",{});var bct=s(age);sQo=r(bct,"wavlm"),bct.forEach(t),lQo=r(BLe," \u2014 "),qG=n(BLe,"A",{href:!0});var vct=s(qG);iQo=r(vct,"WavLMForCTC"),vct.forEach(t),dQo=r(BLe," (WavLM model)"),BLe.forEach(t),Go.forEach(t),cQo=i(oa),Z1=n(oa,"P",{});var PLe=s(Z1);mQo=r(PLe,"The model is set in evaluation mode by default using "),nge=n(PLe,"CODE",{});var Fct=s(nge);fQo=r(Fct,"model.eval()"),Fct.forEach(t),gQo=r(PLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),sge=n(PLe,"CODE",{});var Tct=s(sge);hQo=r(Tct,"model.train()"),Tct.forEach(t),PLe.forEach(t),uQo=i(oa),lge=n(oa,"P",{});var Mct=s(lge);pQo=r(Mct,"Examples:"),Mct.forEach(t),_Qo=i(oa),f(m0.$$.fragment,oa),oa.forEach(t),Cl.forEach(t),MBe=i(c),zd=n(c,"H2",{class:!0});var S$e=s(zd);eT=n(S$e,"A",{id:!0,class:!0,href:!0});var Ect=s(eT);ige=n(Ect,"SPAN",{});var Cct=s(ige);f(f0.$$.fragment,Cct),Cct.forEach(t),Ect.forEach(t),bQo=i(S$e),dge=n(S$e,"SPAN",{});var wct=s(dge);vQo=r(wct,"AutoModelForSpeechSeq2Seq"),wct.forEach(t),S$e.forEach(t),EBe=i(c),fr=n(c,"DIV",{class:!0});var Al=s(fr);f(g0.$$.fragment,Al),FQo=i(Al),Qd=n(Al,"P",{});var KU=s(Qd);TQo=r(KU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),NG=n(KU,"A",{href:!0});var Act=s(NG);MQo=r(Act,"from_pretrained()"),Act.forEach(t),EQo=r(KU," class method or the "),jG=n(KU,"A",{href:!0});var yct=s(jG);CQo=r(yct,"from_config()"),yct.forEach(t),wQo=r(KU,` class
method.`),KU.forEach(t),AQo=i(Al),h0=n(Al,"P",{});var R$e=s(h0);yQo=r(R$e,"This class cannot be instantiated directly using "),cge=n(R$e,"CODE",{});var Lct=s(cge);LQo=r(Lct,"__init__()"),Lct.forEach(t),xQo=r(R$e," (throws an error)."),R$e.forEach(t),kQo=i(Al),st=n(Al,"DIV",{class:!0});var yl=s(st);f(u0.$$.fragment,yl),SQo=i(yl),mge=n(yl,"P",{});var xct=s(mge);RQo=r(xct,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),xct.forEach(t),BQo=i(yl),Wd=n(yl,"P",{});var ZU=s(Wd);PQo=r(ZU,`Note:
Loading a model from its configuration file does `),fge=n(ZU,"STRONG",{});var kct=s(fge);$Qo=r(kct,"not"),kct.forEach(t),IQo=r(ZU,` load the model weights. It only affects the
model\u2019s configuration. Use `),DG=n(ZU,"A",{href:!0});var Sct=s(DG);qQo=r(Sct,"from_pretrained()"),Sct.forEach(t),NQo=r(ZU," to load the model weights."),ZU.forEach(t),jQo=i(yl),gge=n(yl,"P",{});var Rct=s(gge);DQo=r(Rct,"Examples:"),Rct.forEach(t),GQo=i(yl),f(p0.$$.fragment,yl),yl.forEach(t),OQo=i(Al),Ze=n(Al,"DIV",{class:!0});var ra=s(Ze);f(_0.$$.fragment,ra),VQo=i(ra),hge=n(ra,"P",{});var Bct=s(hge);XQo=r(Bct,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Bct.forEach(t),zQo=i(ra),ln=n(ra,"P",{});var HC=s(ln);QQo=r(HC,"The model class to instantiate is selected based on the "),uge=n(HC,"CODE",{});var Pct=s(uge);WQo=r(Pct,"model_type"),Pct.forEach(t),HQo=r(HC,` property of the config object (either
passed as an argument or loaded from `),pge=n(HC,"CODE",{});var $ct=s(pge);UQo=r($ct,"pretrained_model_name_or_path"),$ct.forEach(t),JQo=r(HC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_ge=n(HC,"CODE",{});var Ict=s(_ge);YQo=r(Ict,"pretrained_model_name_or_path"),Ict.forEach(t),KQo=r(HC,":"),HC.forEach(t),ZQo=i(ra),b0=n(ra,"UL",{});var B$e=s(b0);oT=n(B$e,"LI",{});var $Le=s(oT);bge=n($Le,"STRONG",{});var qct=s(bge);eWo=r(qct,"speech-encoder-decoder"),qct.forEach(t),oWo=r($Le," \u2014 "),GG=n($Le,"A",{href:!0});var Nct=s(GG);rWo=r(Nct,"SpeechEncoderDecoderModel"),Nct.forEach(t),tWo=r($Le," (Speech Encoder decoder model)"),$Le.forEach(t),aWo=i(B$e),rT=n(B$e,"LI",{});var ILe=s(rT);vge=n(ILe,"STRONG",{});var jct=s(vge);nWo=r(jct,"speech_to_text"),jct.forEach(t),sWo=r(ILe," \u2014 "),OG=n(ILe,"A",{href:!0});var Dct=s(OG);lWo=r(Dct,"Speech2TextForConditionalGeneration"),Dct.forEach(t),iWo=r(ILe," (Speech2Text model)"),ILe.forEach(t),B$e.forEach(t),dWo=i(ra),tT=n(ra,"P",{});var qLe=s(tT);cWo=r(qLe,"The model is set in evaluation mode by default using "),Fge=n(qLe,"CODE",{});var Gct=s(Fge);mWo=r(Gct,"model.eval()"),Gct.forEach(t),fWo=r(qLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tge=n(qLe,"CODE",{});var Oct=s(Tge);gWo=r(Oct,"model.train()"),Oct.forEach(t),qLe.forEach(t),hWo=i(ra),Mge=n(ra,"P",{});var Vct=s(Mge);uWo=r(Vct,"Examples:"),Vct.forEach(t),pWo=i(ra),f(v0.$$.fragment,ra),ra.forEach(t),Al.forEach(t),CBe=i(c),Hd=n(c,"H2",{class:!0});var P$e=s(Hd);aT=n(P$e,"A",{id:!0,class:!0,href:!0});var Xct=s(aT);Ege=n(Xct,"SPAN",{});var zct=s(Ege);f(F0.$$.fragment,zct),zct.forEach(t),Xct.forEach(t),_Wo=i(P$e),Cge=n(P$e,"SPAN",{});var Qct=s(Cge);bWo=r(Qct,"AutoModelForAudioXVector"),Qct.forEach(t),P$e.forEach(t),wBe=i(c),gr=n(c,"DIV",{class:!0});var Ll=s(gr);f(T0.$$.fragment,Ll),vWo=i(Ll),Ud=n(Ll,"P",{});var eJ=s(Ud);FWo=r(eJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),VG=n(eJ,"A",{href:!0});var Wct=s(VG);TWo=r(Wct,"from_pretrained()"),Wct.forEach(t),MWo=r(eJ," class method or the "),XG=n(eJ,"A",{href:!0});var Hct=s(XG);EWo=r(Hct,"from_config()"),Hct.forEach(t),CWo=r(eJ,` class
method.`),eJ.forEach(t),wWo=i(Ll),M0=n(Ll,"P",{});var $$e=s(M0);AWo=r($$e,"This class cannot be instantiated directly using "),wge=n($$e,"CODE",{});var Uct=s(wge);yWo=r(Uct,"__init__()"),Uct.forEach(t),LWo=r($$e," (throws an error)."),$$e.forEach(t),xWo=i(Ll),lt=n(Ll,"DIV",{class:!0});var xl=s(lt);f(E0.$$.fragment,xl),kWo=i(xl),Age=n(xl,"P",{});var Jct=s(Age);SWo=r(Jct,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),Jct.forEach(t),RWo=i(xl),Jd=n(xl,"P",{});var oJ=s(Jd);BWo=r(oJ,`Note:
Loading a model from its configuration file does `),yge=n(oJ,"STRONG",{});var Yct=s(yge);PWo=r(Yct,"not"),Yct.forEach(t),$Wo=r(oJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),zG=n(oJ,"A",{href:!0});var Kct=s(zG);IWo=r(Kct,"from_pretrained()"),Kct.forEach(t),qWo=r(oJ," to load the model weights."),oJ.forEach(t),NWo=i(xl),Lge=n(xl,"P",{});var Zct=s(Lge);jWo=r(Zct,"Examples:"),Zct.forEach(t),DWo=i(xl),f(C0.$$.fragment,xl),xl.forEach(t),GWo=i(Ll),eo=n(Ll,"DIV",{class:!0});var ta=s(eo);f(w0.$$.fragment,ta),OWo=i(ta),xge=n(ta,"P",{});var emt=s(xge);VWo=r(emt,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),emt.forEach(t),XWo=i(ta),dn=n(ta,"P",{});var UC=s(dn);zWo=r(UC,"The model class to instantiate is selected based on the "),kge=n(UC,"CODE",{});var omt=s(kge);QWo=r(omt,"model_type"),omt.forEach(t),WWo=r(UC,` property of the config object (either
passed as an argument or loaded from `),Sge=n(UC,"CODE",{});var rmt=s(Sge);HWo=r(rmt,"pretrained_model_name_or_path"),rmt.forEach(t),UWo=r(UC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rge=n(UC,"CODE",{});var tmt=s(Rge);JWo=r(tmt,"pretrained_model_name_or_path"),tmt.forEach(t),YWo=r(UC,":"),UC.forEach(t),KWo=i(ta),cn=n(ta,"UL",{});var JC=s(cn);nT=n(JC,"LI",{});var NLe=s(nT);Bge=n(NLe,"STRONG",{});var amt=s(Bge);ZWo=r(amt,"data2vec-audio"),amt.forEach(t),eHo=r(NLe," \u2014 "),QG=n(NLe,"A",{href:!0});var nmt=s(QG);oHo=r(nmt,"Data2VecAudioForXVector"),nmt.forEach(t),rHo=r(NLe," (Data2VecAudio model)"),NLe.forEach(t),tHo=i(JC),sT=n(JC,"LI",{});var jLe=s(sT);Pge=n(jLe,"STRONG",{});var smt=s(Pge);aHo=r(smt,"unispeech-sat"),smt.forEach(t),nHo=r(jLe," \u2014 "),WG=n(jLe,"A",{href:!0});var lmt=s(WG);sHo=r(lmt,"UniSpeechSatForXVector"),lmt.forEach(t),lHo=r(jLe," (UniSpeechSat model)"),jLe.forEach(t),iHo=i(JC),lT=n(JC,"LI",{});var DLe=s(lT);$ge=n(DLe,"STRONG",{});var imt=s($ge);dHo=r(imt,"wav2vec2"),imt.forEach(t),cHo=r(DLe," \u2014 "),HG=n(DLe,"A",{href:!0});var dmt=s(HG);mHo=r(dmt,"Wav2Vec2ForXVector"),dmt.forEach(t),fHo=r(DLe," (Wav2Vec2 model)"),DLe.forEach(t),gHo=i(JC),iT=n(JC,"LI",{});var GLe=s(iT);Ige=n(GLe,"STRONG",{});var cmt=s(Ige);hHo=r(cmt,"wavlm"),cmt.forEach(t),uHo=r(GLe," \u2014 "),UG=n(GLe,"A",{href:!0});var mmt=s(UG);pHo=r(mmt,"WavLMForXVector"),mmt.forEach(t),_Ho=r(GLe," (WavLM model)"),GLe.forEach(t),JC.forEach(t),bHo=i(ta),dT=n(ta,"P",{});var OLe=s(dT);vHo=r(OLe,"The model is set in evaluation mode by default using "),qge=n(OLe,"CODE",{});var fmt=s(qge);FHo=r(fmt,"model.eval()"),fmt.forEach(t),THo=r(OLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nge=n(OLe,"CODE",{});var gmt=s(Nge);MHo=r(gmt,"model.train()"),gmt.forEach(t),OLe.forEach(t),EHo=i(ta),jge=n(ta,"P",{});var hmt=s(jge);CHo=r(hmt,"Examples:"),hmt.forEach(t),wHo=i(ta),f(A0.$$.fragment,ta),ta.forEach(t),Ll.forEach(t),ABe=i(c),Yd=n(c,"H2",{class:!0});var I$e=s(Yd);cT=n(I$e,"A",{id:!0,class:!0,href:!0});var umt=s(cT);Dge=n(umt,"SPAN",{});var pmt=s(Dge);f(y0.$$.fragment,pmt),pmt.forEach(t),umt.forEach(t),AHo=i(I$e),Gge=n(I$e,"SPAN",{});var _mt=s(Gge);yHo=r(_mt,"AutoModelForMaskedImageModeling"),_mt.forEach(t),I$e.forEach(t),yBe=i(c),hr=n(c,"DIV",{class:!0});var kl=s(hr);f(L0.$$.fragment,kl),LHo=i(kl),Kd=n(kl,"P",{});var rJ=s(Kd);xHo=r(rJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),JG=n(rJ,"A",{href:!0});var bmt=s(JG);kHo=r(bmt,"from_pretrained()"),bmt.forEach(t),SHo=r(rJ," class method or the "),YG=n(rJ,"A",{href:!0});var vmt=s(YG);RHo=r(vmt,"from_config()"),vmt.forEach(t),BHo=r(rJ,` class
method.`),rJ.forEach(t),PHo=i(kl),x0=n(kl,"P",{});var q$e=s(x0);$Ho=r(q$e,"This class cannot be instantiated directly using "),Oge=n(q$e,"CODE",{});var Fmt=s(Oge);IHo=r(Fmt,"__init__()"),Fmt.forEach(t),qHo=r(q$e," (throws an error)."),q$e.forEach(t),NHo=i(kl),it=n(kl,"DIV",{class:!0});var Sl=s(it);f(k0.$$.fragment,Sl),jHo=i(Sl),Vge=n(Sl,"P",{});var Tmt=s(Vge);DHo=r(Tmt,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Tmt.forEach(t),GHo=i(Sl),Zd=n(Sl,"P",{});var tJ=s(Zd);OHo=r(tJ,`Note:
Loading a model from its configuration file does `),Xge=n(tJ,"STRONG",{});var Mmt=s(Xge);VHo=r(Mmt,"not"),Mmt.forEach(t),XHo=r(tJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),KG=n(tJ,"A",{href:!0});var Emt=s(KG);zHo=r(Emt,"from_pretrained()"),Emt.forEach(t),QHo=r(tJ," to load the model weights."),tJ.forEach(t),WHo=i(Sl),zge=n(Sl,"P",{});var Cmt=s(zge);HHo=r(Cmt,"Examples:"),Cmt.forEach(t),UHo=i(Sl),f(S0.$$.fragment,Sl),Sl.forEach(t),JHo=i(kl),oo=n(kl,"DIV",{class:!0});var aa=s(oo);f(R0.$$.fragment,aa),YHo=i(aa),Qge=n(aa,"P",{});var wmt=s(Qge);KHo=r(wmt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),wmt.forEach(t),ZHo=i(aa),mn=n(aa,"P",{});var YC=s(mn);eUo=r(YC,"The model class to instantiate is selected based on the "),Wge=n(YC,"CODE",{});var Amt=s(Wge);oUo=r(Amt,"model_type"),Amt.forEach(t),rUo=r(YC,` property of the config object (either
passed as an argument or loaded from `),Hge=n(YC,"CODE",{});var ymt=s(Hge);tUo=r(ymt,"pretrained_model_name_or_path"),ymt.forEach(t),aUo=r(YC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uge=n(YC,"CODE",{});var Lmt=s(Uge);nUo=r(Lmt,"pretrained_model_name_or_path"),Lmt.forEach(t),sUo=r(YC,":"),YC.forEach(t),lUo=i(aa),ec=n(aa,"UL",{});var aJ=s(ec);mT=n(aJ,"LI",{});var VLe=s(mT);Jge=n(VLe,"STRONG",{});var xmt=s(Jge);iUo=r(xmt,"deit"),xmt.forEach(t),dUo=r(VLe," \u2014 "),ZG=n(VLe,"A",{href:!0});var kmt=s(ZG);cUo=r(kmt,"DeiTForMaskedImageModeling"),kmt.forEach(t),mUo=r(VLe," (DeiT model)"),VLe.forEach(t),fUo=i(aJ),fT=n(aJ,"LI",{});var XLe=s(fT);Yge=n(XLe,"STRONG",{});var Smt=s(Yge);gUo=r(Smt,"swin"),Smt.forEach(t),hUo=r(XLe," \u2014 "),eO=n(XLe,"A",{href:!0});var Rmt=s(eO);uUo=r(Rmt,"SwinForMaskedImageModeling"),Rmt.forEach(t),pUo=r(XLe," (Swin model)"),XLe.forEach(t),_Uo=i(aJ),gT=n(aJ,"LI",{});var zLe=s(gT);Kge=n(zLe,"STRONG",{});var Bmt=s(Kge);bUo=r(Bmt,"vit"),Bmt.forEach(t),vUo=r(zLe," \u2014 "),oO=n(zLe,"A",{href:!0});var Pmt=s(oO);FUo=r(Pmt,"ViTForMaskedImageModeling"),Pmt.forEach(t),TUo=r(zLe," (ViT model)"),zLe.forEach(t),aJ.forEach(t),MUo=i(aa),hT=n(aa,"P",{});var QLe=s(hT);EUo=r(QLe,"The model is set in evaluation mode by default using "),Zge=n(QLe,"CODE",{});var $mt=s(Zge);CUo=r($mt,"model.eval()"),$mt.forEach(t),wUo=r(QLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ehe=n(QLe,"CODE",{});var Imt=s(ehe);AUo=r(Imt,"model.train()"),Imt.forEach(t),QLe.forEach(t),yUo=i(aa),ohe=n(aa,"P",{});var qmt=s(ohe);LUo=r(qmt,"Examples:"),qmt.forEach(t),xUo=i(aa),f(B0.$$.fragment,aa),aa.forEach(t),kl.forEach(t),LBe=i(c),oc=n(c,"H2",{class:!0});var N$e=s(oc);uT=n(N$e,"A",{id:!0,class:!0,href:!0});var Nmt=s(uT);rhe=n(Nmt,"SPAN",{});var jmt=s(rhe);f(P0.$$.fragment,jmt),jmt.forEach(t),Nmt.forEach(t),kUo=i(N$e),the=n(N$e,"SPAN",{});var Dmt=s(the);SUo=r(Dmt,"AutoModelForObjectDetection"),Dmt.forEach(t),N$e.forEach(t),xBe=i(c),ur=n(c,"DIV",{class:!0});var Rl=s(ur);f($0.$$.fragment,Rl),RUo=i(Rl),rc=n(Rl,"P",{});var nJ=s(rc);BUo=r(nJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),rO=n(nJ,"A",{href:!0});var Gmt=s(rO);PUo=r(Gmt,"from_pretrained()"),Gmt.forEach(t),$Uo=r(nJ," class method or the "),tO=n(nJ,"A",{href:!0});var Omt=s(tO);IUo=r(Omt,"from_config()"),Omt.forEach(t),qUo=r(nJ,` class
method.`),nJ.forEach(t),NUo=i(Rl),I0=n(Rl,"P",{});var j$e=s(I0);jUo=r(j$e,"This class cannot be instantiated directly using "),ahe=n(j$e,"CODE",{});var Vmt=s(ahe);DUo=r(Vmt,"__init__()"),Vmt.forEach(t),GUo=r(j$e," (throws an error)."),j$e.forEach(t),OUo=i(Rl),dt=n(Rl,"DIV",{class:!0});var Bl=s(dt);f(q0.$$.fragment,Bl),VUo=i(Bl),nhe=n(Bl,"P",{});var Xmt=s(nhe);XUo=r(Xmt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Xmt.forEach(t),zUo=i(Bl),tc=n(Bl,"P",{});var sJ=s(tc);QUo=r(sJ,`Note:
Loading a model from its configuration file does `),she=n(sJ,"STRONG",{});var zmt=s(she);WUo=r(zmt,"not"),zmt.forEach(t),HUo=r(sJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),aO=n(sJ,"A",{href:!0});var Qmt=s(aO);UUo=r(Qmt,"from_pretrained()"),Qmt.forEach(t),JUo=r(sJ," to load the model weights."),sJ.forEach(t),YUo=i(Bl),lhe=n(Bl,"P",{});var Wmt=s(lhe);KUo=r(Wmt,"Examples:"),Wmt.forEach(t),ZUo=i(Bl),f(N0.$$.fragment,Bl),Bl.forEach(t),eJo=i(Rl),ro=n(Rl,"DIV",{class:!0});var na=s(ro);f(j0.$$.fragment,na),oJo=i(na),ihe=n(na,"P",{});var Hmt=s(ihe);rJo=r(Hmt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Hmt.forEach(t),tJo=i(na),fn=n(na,"P",{});var KC=s(fn);aJo=r(KC,"The model class to instantiate is selected based on the "),dhe=n(KC,"CODE",{});var Umt=s(dhe);nJo=r(Umt,"model_type"),Umt.forEach(t),sJo=r(KC,` property of the config object (either
passed as an argument or loaded from `),che=n(KC,"CODE",{});var Jmt=s(che);lJo=r(Jmt,"pretrained_model_name_or_path"),Jmt.forEach(t),iJo=r(KC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mhe=n(KC,"CODE",{});var Ymt=s(mhe);dJo=r(Ymt,"pretrained_model_name_or_path"),Ymt.forEach(t),cJo=r(KC,":"),KC.forEach(t),mJo=i(na),fhe=n(na,"UL",{});var Kmt=s(fhe);pT=n(Kmt,"LI",{});var WLe=s(pT);ghe=n(WLe,"STRONG",{});var Zmt=s(ghe);fJo=r(Zmt,"detr"),Zmt.forEach(t),gJo=r(WLe," \u2014 "),nO=n(WLe,"A",{href:!0});var eft=s(nO);hJo=r(eft,"DetrForObjectDetection"),eft.forEach(t),uJo=r(WLe," (DETR model)"),WLe.forEach(t),Kmt.forEach(t),pJo=i(na),_T=n(na,"P",{});var HLe=s(_T);_Jo=r(HLe,"The model is set in evaluation mode by default using "),hhe=n(HLe,"CODE",{});var oft=s(hhe);bJo=r(oft,"model.eval()"),oft.forEach(t),vJo=r(HLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),uhe=n(HLe,"CODE",{});var rft=s(uhe);FJo=r(rft,"model.train()"),rft.forEach(t),HLe.forEach(t),TJo=i(na),phe=n(na,"P",{});var tft=s(phe);MJo=r(tft,"Examples:"),tft.forEach(t),EJo=i(na),f(D0.$$.fragment,na),na.forEach(t),Rl.forEach(t),kBe=i(c),ac=n(c,"H2",{class:!0});var D$e=s(ac);bT=n(D$e,"A",{id:!0,class:!0,href:!0});var aft=s(bT);_he=n(aft,"SPAN",{});var nft=s(_he);f(G0.$$.fragment,nft),nft.forEach(t),aft.forEach(t),CJo=i(D$e),bhe=n(D$e,"SPAN",{});var sft=s(bhe);wJo=r(sft,"AutoModelForImageSegmentation"),sft.forEach(t),D$e.forEach(t),SBe=i(c),pr=n(c,"DIV",{class:!0});var Pl=s(pr);f(O0.$$.fragment,Pl),AJo=i(Pl),nc=n(Pl,"P",{});var lJ=s(nc);yJo=r(lJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),sO=n(lJ,"A",{href:!0});var lft=s(sO);LJo=r(lft,"from_pretrained()"),lft.forEach(t),xJo=r(lJ," class method or the "),lO=n(lJ,"A",{href:!0});var ift=s(lO);kJo=r(ift,"from_config()"),ift.forEach(t),SJo=r(lJ,` class
method.`),lJ.forEach(t),RJo=i(Pl),V0=n(Pl,"P",{});var G$e=s(V0);BJo=r(G$e,"This class cannot be instantiated directly using "),vhe=n(G$e,"CODE",{});var dft=s(vhe);PJo=r(dft,"__init__()"),dft.forEach(t),$Jo=r(G$e," (throws an error)."),G$e.forEach(t),IJo=i(Pl),ct=n(Pl,"DIV",{class:!0});var $l=s(ct);f(X0.$$.fragment,$l),qJo=i($l),Fhe=n($l,"P",{});var cft=s(Fhe);NJo=r(cft,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),cft.forEach(t),jJo=i($l),sc=n($l,"P",{});var iJ=s(sc);DJo=r(iJ,`Note:
Loading a model from its configuration file does `),The=n(iJ,"STRONG",{});var mft=s(The);GJo=r(mft,"not"),mft.forEach(t),OJo=r(iJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),iO=n(iJ,"A",{href:!0});var fft=s(iO);VJo=r(fft,"from_pretrained()"),fft.forEach(t),XJo=r(iJ," to load the model weights."),iJ.forEach(t),zJo=i($l),Mhe=n($l,"P",{});var gft=s(Mhe);QJo=r(gft,"Examples:"),gft.forEach(t),WJo=i($l),f(z0.$$.fragment,$l),$l.forEach(t),HJo=i(Pl),to=n(Pl,"DIV",{class:!0});var sa=s(to);f(Q0.$$.fragment,sa),UJo=i(sa),Ehe=n(sa,"P",{});var hft=s(Ehe);JJo=r(hft,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),hft.forEach(t),YJo=i(sa),gn=n(sa,"P",{});var ZC=s(gn);KJo=r(ZC,"The model class to instantiate is selected based on the "),Che=n(ZC,"CODE",{});var uft=s(Che);ZJo=r(uft,"model_type"),uft.forEach(t),eYo=r(ZC,` property of the config object (either
passed as an argument or loaded from `),whe=n(ZC,"CODE",{});var pft=s(whe);oYo=r(pft,"pretrained_model_name_or_path"),pft.forEach(t),rYo=r(ZC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ahe=n(ZC,"CODE",{});var _ft=s(Ahe);tYo=r(_ft,"pretrained_model_name_or_path"),_ft.forEach(t),aYo=r(ZC,":"),ZC.forEach(t),nYo=i(sa),yhe=n(sa,"UL",{});var bft=s(yhe);vT=n(bft,"LI",{});var ULe=s(vT);Lhe=n(ULe,"STRONG",{});var vft=s(Lhe);sYo=r(vft,"detr"),vft.forEach(t),lYo=r(ULe," \u2014 "),dO=n(ULe,"A",{href:!0});var Fft=s(dO);iYo=r(Fft,"DetrForSegmentation"),Fft.forEach(t),dYo=r(ULe," (DETR model)"),ULe.forEach(t),bft.forEach(t),cYo=i(sa),FT=n(sa,"P",{});var JLe=s(FT);mYo=r(JLe,"The model is set in evaluation mode by default using "),xhe=n(JLe,"CODE",{});var Tft=s(xhe);fYo=r(Tft,"model.eval()"),Tft.forEach(t),gYo=r(JLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),khe=n(JLe,"CODE",{});var Mft=s(khe);hYo=r(Mft,"model.train()"),Mft.forEach(t),JLe.forEach(t),uYo=i(sa),She=n(sa,"P",{});var Eft=s(She);pYo=r(Eft,"Examples:"),Eft.forEach(t),_Yo=i(sa),f(W0.$$.fragment,sa),sa.forEach(t),Pl.forEach(t),RBe=i(c),lc=n(c,"H2",{class:!0});var O$e=s(lc);TT=n(O$e,"A",{id:!0,class:!0,href:!0});var Cft=s(TT);Rhe=n(Cft,"SPAN",{});var wft=s(Rhe);f(H0.$$.fragment,wft),wft.forEach(t),Cft.forEach(t),bYo=i(O$e),Bhe=n(O$e,"SPAN",{});var Aft=s(Bhe);vYo=r(Aft,"AutoModelForSemanticSegmentation"),Aft.forEach(t),O$e.forEach(t),BBe=i(c),_r=n(c,"DIV",{class:!0});var Il=s(_r);f(U0.$$.fragment,Il),FYo=i(Il),ic=n(Il,"P",{});var dJ=s(ic);TYo=r(dJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),cO=n(dJ,"A",{href:!0});var yft=s(cO);MYo=r(yft,"from_pretrained()"),yft.forEach(t),EYo=r(dJ," class method or the "),mO=n(dJ,"A",{href:!0});var Lft=s(mO);CYo=r(Lft,"from_config()"),Lft.forEach(t),wYo=r(dJ,` class
method.`),dJ.forEach(t),AYo=i(Il),J0=n(Il,"P",{});var V$e=s(J0);yYo=r(V$e,"This class cannot be instantiated directly using "),Phe=n(V$e,"CODE",{});var xft=s(Phe);LYo=r(xft,"__init__()"),xft.forEach(t),xYo=r(V$e," (throws an error)."),V$e.forEach(t),kYo=i(Il),mt=n(Il,"DIV",{class:!0});var ql=s(mt);f(Y0.$$.fragment,ql),SYo=i(ql),$he=n(ql,"P",{});var kft=s($he);RYo=r(kft,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),kft.forEach(t),BYo=i(ql),dc=n(ql,"P",{});var cJ=s(dc);PYo=r(cJ,`Note:
Loading a model from its configuration file does `),Ihe=n(cJ,"STRONG",{});var Sft=s(Ihe);$Yo=r(Sft,"not"),Sft.forEach(t),IYo=r(cJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),fO=n(cJ,"A",{href:!0});var Rft=s(fO);qYo=r(Rft,"from_pretrained()"),Rft.forEach(t),NYo=r(cJ," to load the model weights."),cJ.forEach(t),jYo=i(ql),qhe=n(ql,"P",{});var Bft=s(qhe);DYo=r(Bft,"Examples:"),Bft.forEach(t),GYo=i(ql),f(K0.$$.fragment,ql),ql.forEach(t),OYo=i(Il),ao=n(Il,"DIV",{class:!0});var la=s(ao);f(Z0.$$.fragment,la),VYo=i(la),Nhe=n(la,"P",{});var Pft=s(Nhe);XYo=r(Pft,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Pft.forEach(t),zYo=i(la),hn=n(la,"P",{});var ew=s(hn);QYo=r(ew,"The model class to instantiate is selected based on the "),jhe=n(ew,"CODE",{});var $ft=s(jhe);WYo=r($ft,"model_type"),$ft.forEach(t),HYo=r(ew,` property of the config object (either
passed as an argument or loaded from `),Dhe=n(ew,"CODE",{});var Ift=s(Dhe);UYo=r(Ift,"pretrained_model_name_or_path"),Ift.forEach(t),JYo=r(ew,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ghe=n(ew,"CODE",{});var qft=s(Ghe);YYo=r(qft,"pretrained_model_name_or_path"),qft.forEach(t),KYo=r(ew,":"),ew.forEach(t),ZYo=i(la),un=n(la,"UL",{});var ow=s(un);MT=n(ow,"LI",{});var YLe=s(MT);Ohe=n(YLe,"STRONG",{});var Nft=s(Ohe);eKo=r(Nft,"beit"),Nft.forEach(t),oKo=r(YLe," \u2014 "),gO=n(YLe,"A",{href:!0});var jft=s(gO);rKo=r(jft,"BeitForSemanticSegmentation"),jft.forEach(t),tKo=r(YLe," (BEiT model)"),YLe.forEach(t),aKo=i(ow),ET=n(ow,"LI",{});var KLe=s(ET);Vhe=n(KLe,"STRONG",{});var Dft=s(Vhe);nKo=r(Dft,"data2vec-vision"),Dft.forEach(t),sKo=r(KLe," \u2014 "),hO=n(KLe,"A",{href:!0});var Gft=s(hO);lKo=r(Gft,"Data2VecVisionForSemanticSegmentation"),Gft.forEach(t),iKo=r(KLe," (Data2VecVision model)"),KLe.forEach(t),dKo=i(ow),CT=n(ow,"LI",{});var ZLe=s(CT);Xhe=n(ZLe,"STRONG",{});var Oft=s(Xhe);cKo=r(Oft,"dpt"),Oft.forEach(t),mKo=r(ZLe," \u2014 "),uO=n(ZLe,"A",{href:!0});var Vft=s(uO);fKo=r(Vft,"DPTForSemanticSegmentation"),Vft.forEach(t),gKo=r(ZLe," (DPT model)"),ZLe.forEach(t),hKo=i(ow),wT=n(ow,"LI",{});var e7e=s(wT);zhe=n(e7e,"STRONG",{});var Xft=s(zhe);uKo=r(Xft,"segformer"),Xft.forEach(t),pKo=r(e7e," \u2014 "),pO=n(e7e,"A",{href:!0});var zft=s(pO);_Ko=r(zft,"SegformerForSemanticSegmentation"),zft.forEach(t),bKo=r(e7e," (SegFormer model)"),e7e.forEach(t),ow.forEach(t),vKo=i(la),AT=n(la,"P",{});var o7e=s(AT);FKo=r(o7e,"The model is set in evaluation mode by default using "),Qhe=n(o7e,"CODE",{});var Qft=s(Qhe);TKo=r(Qft,"model.eval()"),Qft.forEach(t),MKo=r(o7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Whe=n(o7e,"CODE",{});var Wft=s(Whe);EKo=r(Wft,"model.train()"),Wft.forEach(t),o7e.forEach(t),CKo=i(la),Hhe=n(la,"P",{});var Hft=s(Hhe);wKo=r(Hft,"Examples:"),Hft.forEach(t),AKo=i(la),f(ey.$$.fragment,la),la.forEach(t),Il.forEach(t),PBe=i(c),cc=n(c,"H2",{class:!0});var X$e=s(cc);yT=n(X$e,"A",{id:!0,class:!0,href:!0});var Uft=s(yT);Uhe=n(Uft,"SPAN",{});var Jft=s(Uhe);f(oy.$$.fragment,Jft),Jft.forEach(t),Uft.forEach(t),yKo=i(X$e),Jhe=n(X$e,"SPAN",{});var Yft=s(Jhe);LKo=r(Yft,"AutoModelForInstanceSegmentation"),Yft.forEach(t),X$e.forEach(t),$Be=i(c),br=n(c,"DIV",{class:!0});var Nl=s(br);f(ry.$$.fragment,Nl),xKo=i(Nl),mc=n(Nl,"P",{});var mJ=s(mc);kKo=r(mJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),_O=n(mJ,"A",{href:!0});var Kft=s(_O);SKo=r(Kft,"from_pretrained()"),Kft.forEach(t),RKo=r(mJ," class method or the "),bO=n(mJ,"A",{href:!0});var Zft=s(bO);BKo=r(Zft,"from_config()"),Zft.forEach(t),PKo=r(mJ,` class
method.`),mJ.forEach(t),$Ko=i(Nl),ty=n(Nl,"P",{});var z$e=s(ty);IKo=r(z$e,"This class cannot be instantiated directly using "),Yhe=n(z$e,"CODE",{});var egt=s(Yhe);qKo=r(egt,"__init__()"),egt.forEach(t),NKo=r(z$e," (throws an error)."),z$e.forEach(t),jKo=i(Nl),ft=n(Nl,"DIV",{class:!0});var jl=s(ft);f(ay.$$.fragment,jl),DKo=i(jl),Khe=n(jl,"P",{});var ogt=s(Khe);GKo=r(ogt,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),ogt.forEach(t),OKo=i(jl),fc=n(jl,"P",{});var fJ=s(fc);VKo=r(fJ,`Note:
Loading a model from its configuration file does `),Zhe=n(fJ,"STRONG",{});var rgt=s(Zhe);XKo=r(rgt,"not"),rgt.forEach(t),zKo=r(fJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),vO=n(fJ,"A",{href:!0});var tgt=s(vO);QKo=r(tgt,"from_pretrained()"),tgt.forEach(t),WKo=r(fJ," to load the model weights."),fJ.forEach(t),HKo=i(jl),eue=n(jl,"P",{});var agt=s(eue);UKo=r(agt,"Examples:"),agt.forEach(t),JKo=i(jl),f(ny.$$.fragment,jl),jl.forEach(t),YKo=i(Nl),no=n(Nl,"DIV",{class:!0});var ia=s(no);f(sy.$$.fragment,ia),KKo=i(ia),oue=n(ia,"P",{});var ngt=s(oue);ZKo=r(ngt,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),ngt.forEach(t),eZo=i(ia),pn=n(ia,"P",{});var rw=s(pn);oZo=r(rw,"The model class to instantiate is selected based on the "),rue=n(rw,"CODE",{});var sgt=s(rue);rZo=r(sgt,"model_type"),sgt.forEach(t),tZo=r(rw,` property of the config object (either
passed as an argument or loaded from `),tue=n(rw,"CODE",{});var lgt=s(tue);aZo=r(lgt,"pretrained_model_name_or_path"),lgt.forEach(t),nZo=r(rw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aue=n(rw,"CODE",{});var igt=s(aue);sZo=r(igt,"pretrained_model_name_or_path"),igt.forEach(t),lZo=r(rw,":"),rw.forEach(t),iZo=i(ia),nue=n(ia,"UL",{});var dgt=s(nue);LT=n(dgt,"LI",{});var r7e=s(LT);sue=n(r7e,"STRONG",{});var cgt=s(sue);dZo=r(cgt,"maskformer"),cgt.forEach(t),cZo=r(r7e," \u2014 "),FO=n(r7e,"A",{href:!0});var mgt=s(FO);mZo=r(mgt,"MaskFormerForInstanceSegmentation"),mgt.forEach(t),fZo=r(r7e," (MaskFormer model)"),r7e.forEach(t),dgt.forEach(t),gZo=i(ia),xT=n(ia,"P",{});var t7e=s(xT);hZo=r(t7e,"The model is set in evaluation mode by default using "),lue=n(t7e,"CODE",{});var fgt=s(lue);uZo=r(fgt,"model.eval()"),fgt.forEach(t),pZo=r(t7e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),iue=n(t7e,"CODE",{});var ggt=s(iue);_Zo=r(ggt,"model.train()"),ggt.forEach(t),t7e.forEach(t),bZo=i(ia),due=n(ia,"P",{});var hgt=s(due);vZo=r(hgt,"Examples:"),hgt.forEach(t),FZo=i(ia),f(ly.$$.fragment,ia),ia.forEach(t),Nl.forEach(t),IBe=i(c),gc=n(c,"H2",{class:!0});var Q$e=s(gc);kT=n(Q$e,"A",{id:!0,class:!0,href:!0});var ugt=s(kT);cue=n(ugt,"SPAN",{});var pgt=s(cue);f(iy.$$.fragment,pgt),pgt.forEach(t),ugt.forEach(t),TZo=i(Q$e),mue=n(Q$e,"SPAN",{});var _gt=s(mue);MZo=r(_gt,"TFAutoModel"),_gt.forEach(t),Q$e.forEach(t),qBe=i(c),vr=n(c,"DIV",{class:!0});var Dl=s(vr);f(dy.$$.fragment,Dl),EZo=i(Dl),hc=n(Dl,"P",{});var gJ=s(hc);CZo=r(gJ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),TO=n(gJ,"A",{href:!0});var bgt=s(TO);wZo=r(bgt,"from_pretrained()"),bgt.forEach(t),AZo=r(gJ," class method or the "),MO=n(gJ,"A",{href:!0});var vgt=s(MO);yZo=r(vgt,"from_config()"),vgt.forEach(t),LZo=r(gJ,` class
method.`),gJ.forEach(t),xZo=i(Dl),cy=n(Dl,"P",{});var W$e=s(cy);kZo=r(W$e,"This class cannot be instantiated directly using "),fue=n(W$e,"CODE",{});var Fgt=s(fue);SZo=r(Fgt,"__init__()"),Fgt.forEach(t),RZo=r(W$e," (throws an error)."),W$e.forEach(t),BZo=i(Dl),gt=n(Dl,"DIV",{class:!0});var Gl=s(gt);f(my.$$.fragment,Gl),PZo=i(Gl),gue=n(Gl,"P",{});var Tgt=s(gue);$Zo=r(Tgt,"Instantiates one of the base model classes of the library from a configuration."),Tgt.forEach(t),IZo=i(Gl),uc=n(Gl,"P",{});var hJ=s(uc);qZo=r(hJ,`Note:
Loading a model from its configuration file does `),hue=n(hJ,"STRONG",{});var Mgt=s(hue);NZo=r(Mgt,"not"),Mgt.forEach(t),jZo=r(hJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),EO=n(hJ,"A",{href:!0});var Egt=s(EO);DZo=r(Egt,"from_pretrained()"),Egt.forEach(t),GZo=r(hJ," to load the model weights."),hJ.forEach(t),OZo=i(Gl),uue=n(Gl,"P",{});var Cgt=s(uue);VZo=r(Cgt,"Examples:"),Cgt.forEach(t),XZo=i(Gl),f(fy.$$.fragment,Gl),Gl.forEach(t),zZo=i(Dl),ho=n(Dl,"DIV",{class:!0});var ua=s(ho);f(gy.$$.fragment,ua),QZo=i(ua),pue=n(ua,"P",{});var wgt=s(pue);WZo=r(wgt,"Instantiate one of the base model classes of the library from a pretrained model."),wgt.forEach(t),HZo=i(ua),_n=n(ua,"P",{});var tw=s(_n);UZo=r(tw,"The model class to instantiate is selected based on the "),_ue=n(tw,"CODE",{});var Agt=s(_ue);JZo=r(Agt,"model_type"),Agt.forEach(t),YZo=r(tw,` property of the config object (either
passed as an argument or loaded from `),bue=n(tw,"CODE",{});var ygt=s(bue);KZo=r(ygt,"pretrained_model_name_or_path"),ygt.forEach(t),ZZo=r(tw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vue=n(tw,"CODE",{});var Lgt=s(vue);eer=r(Lgt,"pretrained_model_name_or_path"),Lgt.forEach(t),oer=r(tw,":"),tw.forEach(t),rer=i(ua),x=n(ua,"UL",{});var k=s(x);ST=n(k,"LI",{});var a7e=s(ST);Fue=n(a7e,"STRONG",{});var xgt=s(Fue);ter=r(xgt,"albert"),xgt.forEach(t),aer=r(a7e," \u2014 "),CO=n(a7e,"A",{href:!0});var kgt=s(CO);ner=r(kgt,"TFAlbertModel"),kgt.forEach(t),ser=r(a7e," (ALBERT model)"),a7e.forEach(t),ler=i(k),RT=n(k,"LI",{});var n7e=s(RT);Tue=n(n7e,"STRONG",{});var Sgt=s(Tue);ier=r(Sgt,"bart"),Sgt.forEach(t),der=r(n7e," \u2014 "),wO=n(n7e,"A",{href:!0});var Rgt=s(wO);cer=r(Rgt,"TFBartModel"),Rgt.forEach(t),mer=r(n7e," (BART model)"),n7e.forEach(t),fer=i(k),BT=n(k,"LI",{});var s7e=s(BT);Mue=n(s7e,"STRONG",{});var Bgt=s(Mue);ger=r(Bgt,"bert"),Bgt.forEach(t),her=r(s7e," \u2014 "),AO=n(s7e,"A",{href:!0});var Pgt=s(AO);uer=r(Pgt,"TFBertModel"),Pgt.forEach(t),per=r(s7e," (BERT model)"),s7e.forEach(t),_er=i(k),PT=n(k,"LI",{});var l7e=s(PT);Eue=n(l7e,"STRONG",{});var $gt=s(Eue);ber=r($gt,"blenderbot"),$gt.forEach(t),ver=r(l7e," \u2014 "),yO=n(l7e,"A",{href:!0});var Igt=s(yO);Fer=r(Igt,"TFBlenderbotModel"),Igt.forEach(t),Ter=r(l7e," (Blenderbot model)"),l7e.forEach(t),Mer=i(k),$T=n(k,"LI",{});var i7e=s($T);Cue=n(i7e,"STRONG",{});var qgt=s(Cue);Eer=r(qgt,"blenderbot-small"),qgt.forEach(t),Cer=r(i7e," \u2014 "),LO=n(i7e,"A",{href:!0});var Ngt=s(LO);wer=r(Ngt,"TFBlenderbotSmallModel"),Ngt.forEach(t),Aer=r(i7e," (BlenderbotSmall model)"),i7e.forEach(t),yer=i(k),IT=n(k,"LI",{});var d7e=s(IT);wue=n(d7e,"STRONG",{});var jgt=s(wue);Ler=r(jgt,"camembert"),jgt.forEach(t),xer=r(d7e," \u2014 "),xO=n(d7e,"A",{href:!0});var Dgt=s(xO);ker=r(Dgt,"TFCamembertModel"),Dgt.forEach(t),Ser=r(d7e," (CamemBERT model)"),d7e.forEach(t),Rer=i(k),qT=n(k,"LI",{});var c7e=s(qT);Aue=n(c7e,"STRONG",{});var Ggt=s(Aue);Ber=r(Ggt,"clip"),Ggt.forEach(t),Per=r(c7e," \u2014 "),kO=n(c7e,"A",{href:!0});var Ogt=s(kO);$er=r(Ogt,"TFCLIPModel"),Ogt.forEach(t),Ier=r(c7e," (CLIP model)"),c7e.forEach(t),qer=i(k),NT=n(k,"LI",{});var m7e=s(NT);yue=n(m7e,"STRONG",{});var Vgt=s(yue);Ner=r(Vgt,"convbert"),Vgt.forEach(t),jer=r(m7e," \u2014 "),SO=n(m7e,"A",{href:!0});var Xgt=s(SO);Der=r(Xgt,"TFConvBertModel"),Xgt.forEach(t),Ger=r(m7e," (ConvBERT model)"),m7e.forEach(t),Oer=i(k),jT=n(k,"LI",{});var f7e=s(jT);Lue=n(f7e,"STRONG",{});var zgt=s(Lue);Ver=r(zgt,"convnext"),zgt.forEach(t),Xer=r(f7e," \u2014 "),RO=n(f7e,"A",{href:!0});var Qgt=s(RO);zer=r(Qgt,"TFConvNextModel"),Qgt.forEach(t),Qer=r(f7e," (ConvNext model)"),f7e.forEach(t),Wer=i(k),DT=n(k,"LI",{});var g7e=s(DT);xue=n(g7e,"STRONG",{});var Wgt=s(xue);Her=r(Wgt,"ctrl"),Wgt.forEach(t),Uer=r(g7e," \u2014 "),BO=n(g7e,"A",{href:!0});var Hgt=s(BO);Jer=r(Hgt,"TFCTRLModel"),Hgt.forEach(t),Yer=r(g7e," (CTRL model)"),g7e.forEach(t),Ker=i(k),GT=n(k,"LI",{});var h7e=s(GT);kue=n(h7e,"STRONG",{});var Ugt=s(kue);Zer=r(Ugt,"deberta"),Ugt.forEach(t),eor=r(h7e," \u2014 "),PO=n(h7e,"A",{href:!0});var Jgt=s(PO);oor=r(Jgt,"TFDebertaModel"),Jgt.forEach(t),ror=r(h7e," (DeBERTa model)"),h7e.forEach(t),tor=i(k),OT=n(k,"LI",{});var u7e=s(OT);Sue=n(u7e,"STRONG",{});var Ygt=s(Sue);aor=r(Ygt,"deberta-v2"),Ygt.forEach(t),nor=r(u7e," \u2014 "),$O=n(u7e,"A",{href:!0});var Kgt=s($O);sor=r(Kgt,"TFDebertaV2Model"),Kgt.forEach(t),lor=r(u7e," (DeBERTa-v2 model)"),u7e.forEach(t),ior=i(k),VT=n(k,"LI",{});var p7e=s(VT);Rue=n(p7e,"STRONG",{});var Zgt=s(Rue);dor=r(Zgt,"distilbert"),Zgt.forEach(t),cor=r(p7e," \u2014 "),IO=n(p7e,"A",{href:!0});var eht=s(IO);mor=r(eht,"TFDistilBertModel"),eht.forEach(t),gor=r(p7e," (DistilBERT model)"),p7e.forEach(t),hor=i(k),XT=n(k,"LI",{});var _7e=s(XT);Bue=n(_7e,"STRONG",{});var oht=s(Bue);uor=r(oht,"dpr"),oht.forEach(t),por=r(_7e," \u2014 "),qO=n(_7e,"A",{href:!0});var rht=s(qO);_or=r(rht,"TFDPRQuestionEncoder"),rht.forEach(t),bor=r(_7e," (DPR model)"),_7e.forEach(t),vor=i(k),zT=n(k,"LI",{});var b7e=s(zT);Pue=n(b7e,"STRONG",{});var tht=s(Pue);For=r(tht,"electra"),tht.forEach(t),Tor=r(b7e," \u2014 "),NO=n(b7e,"A",{href:!0});var aht=s(NO);Mor=r(aht,"TFElectraModel"),aht.forEach(t),Eor=r(b7e," (ELECTRA model)"),b7e.forEach(t),Cor=i(k),QT=n(k,"LI",{});var v7e=s(QT);$ue=n(v7e,"STRONG",{});var nht=s($ue);wor=r(nht,"flaubert"),nht.forEach(t),Aor=r(v7e," \u2014 "),jO=n(v7e,"A",{href:!0});var sht=s(jO);yor=r(sht,"TFFlaubertModel"),sht.forEach(t),Lor=r(v7e," (FlauBERT model)"),v7e.forEach(t),xor=i(k),Os=n(k,"LI",{});var v9=s(Os);Iue=n(v9,"STRONG",{});var lht=s(Iue);kor=r(lht,"funnel"),lht.forEach(t),Sor=r(v9," \u2014 "),DO=n(v9,"A",{href:!0});var iht=s(DO);Ror=r(iht,"TFFunnelModel"),iht.forEach(t),Bor=r(v9," or "),GO=n(v9,"A",{href:!0});var dht=s(GO);Por=r(dht,"TFFunnelBaseModel"),dht.forEach(t),$or=r(v9," (Funnel Transformer model)"),v9.forEach(t),Ior=i(k),WT=n(k,"LI",{});var F7e=s(WT);que=n(F7e,"STRONG",{});var cht=s(que);qor=r(cht,"gpt2"),cht.forEach(t),Nor=r(F7e," \u2014 "),OO=n(F7e,"A",{href:!0});var mht=s(OO);jor=r(mht,"TFGPT2Model"),mht.forEach(t),Dor=r(F7e," (OpenAI GPT-2 model)"),F7e.forEach(t),Gor=i(k),HT=n(k,"LI",{});var T7e=s(HT);Nue=n(T7e,"STRONG",{});var fht=s(Nue);Oor=r(fht,"gptj"),fht.forEach(t),Vor=r(T7e," \u2014 "),VO=n(T7e,"A",{href:!0});var ght=s(VO);Xor=r(ght,"TFGPTJModel"),ght.forEach(t),zor=r(T7e," (GPT-J model)"),T7e.forEach(t),Qor=i(k),UT=n(k,"LI",{});var M7e=s(UT);jue=n(M7e,"STRONG",{});var hht=s(jue);Wor=r(hht,"hubert"),hht.forEach(t),Hor=r(M7e," \u2014 "),XO=n(M7e,"A",{href:!0});var uht=s(XO);Uor=r(uht,"TFHubertModel"),uht.forEach(t),Jor=r(M7e," (Hubert model)"),M7e.forEach(t),Yor=i(k),JT=n(k,"LI",{});var E7e=s(JT);Due=n(E7e,"STRONG",{});var pht=s(Due);Kor=r(pht,"layoutlm"),pht.forEach(t),Zor=r(E7e," \u2014 "),zO=n(E7e,"A",{href:!0});var _ht=s(zO);err=r(_ht,"TFLayoutLMModel"),_ht.forEach(t),orr=r(E7e," (LayoutLM model)"),E7e.forEach(t),rrr=i(k),YT=n(k,"LI",{});var C7e=s(YT);Gue=n(C7e,"STRONG",{});var bht=s(Gue);trr=r(bht,"led"),bht.forEach(t),arr=r(C7e," \u2014 "),QO=n(C7e,"A",{href:!0});var vht=s(QO);nrr=r(vht,"TFLEDModel"),vht.forEach(t),srr=r(C7e," (LED model)"),C7e.forEach(t),lrr=i(k),KT=n(k,"LI",{});var w7e=s(KT);Oue=n(w7e,"STRONG",{});var Fht=s(Oue);irr=r(Fht,"longformer"),Fht.forEach(t),drr=r(w7e," \u2014 "),WO=n(w7e,"A",{href:!0});var Tht=s(WO);crr=r(Tht,"TFLongformerModel"),Tht.forEach(t),mrr=r(w7e," (Longformer model)"),w7e.forEach(t),frr=i(k),ZT=n(k,"LI",{});var A7e=s(ZT);Vue=n(A7e,"STRONG",{});var Mht=s(Vue);grr=r(Mht,"lxmert"),Mht.forEach(t),hrr=r(A7e," \u2014 "),HO=n(A7e,"A",{href:!0});var Eht=s(HO);urr=r(Eht,"TFLxmertModel"),Eht.forEach(t),prr=r(A7e," (LXMERT model)"),A7e.forEach(t),_rr=i(k),eM=n(k,"LI",{});var y7e=s(eM);Xue=n(y7e,"STRONG",{});var Cht=s(Xue);brr=r(Cht,"marian"),Cht.forEach(t),vrr=r(y7e," \u2014 "),UO=n(y7e,"A",{href:!0});var wht=s(UO);Frr=r(wht,"TFMarianModel"),wht.forEach(t),Trr=r(y7e," (Marian model)"),y7e.forEach(t),Mrr=i(k),oM=n(k,"LI",{});var L7e=s(oM);zue=n(L7e,"STRONG",{});var Aht=s(zue);Err=r(Aht,"mbart"),Aht.forEach(t),Crr=r(L7e," \u2014 "),JO=n(L7e,"A",{href:!0});var yht=s(JO);wrr=r(yht,"TFMBartModel"),yht.forEach(t),Arr=r(L7e," (mBART model)"),L7e.forEach(t),yrr=i(k),rM=n(k,"LI",{});var x7e=s(rM);Que=n(x7e,"STRONG",{});var Lht=s(Que);Lrr=r(Lht,"mobilebert"),Lht.forEach(t),xrr=r(x7e," \u2014 "),YO=n(x7e,"A",{href:!0});var xht=s(YO);krr=r(xht,"TFMobileBertModel"),xht.forEach(t),Srr=r(x7e," (MobileBERT model)"),x7e.forEach(t),Rrr=i(k),tM=n(k,"LI",{});var k7e=s(tM);Wue=n(k7e,"STRONG",{});var kht=s(Wue);Brr=r(kht,"mpnet"),kht.forEach(t),Prr=r(k7e," \u2014 "),KO=n(k7e,"A",{href:!0});var Sht=s(KO);$rr=r(Sht,"TFMPNetModel"),Sht.forEach(t),Irr=r(k7e," (MPNet model)"),k7e.forEach(t),qrr=i(k),aM=n(k,"LI",{});var S7e=s(aM);Hue=n(S7e,"STRONG",{});var Rht=s(Hue);Nrr=r(Rht,"mt5"),Rht.forEach(t),jrr=r(S7e," \u2014 "),ZO=n(S7e,"A",{href:!0});var Bht=s(ZO);Drr=r(Bht,"TFMT5Model"),Bht.forEach(t),Grr=r(S7e," (mT5 model)"),S7e.forEach(t),Orr=i(k),nM=n(k,"LI",{});var R7e=s(nM);Uue=n(R7e,"STRONG",{});var Pht=s(Uue);Vrr=r(Pht,"openai-gpt"),Pht.forEach(t),Xrr=r(R7e," \u2014 "),eV=n(R7e,"A",{href:!0});var $ht=s(eV);zrr=r($ht,"TFOpenAIGPTModel"),$ht.forEach(t),Qrr=r(R7e," (OpenAI GPT model)"),R7e.forEach(t),Wrr=i(k),sM=n(k,"LI",{});var B7e=s(sM);Jue=n(B7e,"STRONG",{});var Iht=s(Jue);Hrr=r(Iht,"pegasus"),Iht.forEach(t),Urr=r(B7e," \u2014 "),oV=n(B7e,"A",{href:!0});var qht=s(oV);Jrr=r(qht,"TFPegasusModel"),qht.forEach(t),Yrr=r(B7e," (Pegasus model)"),B7e.forEach(t),Krr=i(k),lM=n(k,"LI",{});var P7e=s(lM);Yue=n(P7e,"STRONG",{});var Nht=s(Yue);Zrr=r(Nht,"rembert"),Nht.forEach(t),etr=r(P7e," \u2014 "),rV=n(P7e,"A",{href:!0});var jht=s(rV);otr=r(jht,"TFRemBertModel"),jht.forEach(t),rtr=r(P7e," (RemBERT model)"),P7e.forEach(t),ttr=i(k),iM=n(k,"LI",{});var $7e=s(iM);Kue=n($7e,"STRONG",{});var Dht=s(Kue);atr=r(Dht,"roberta"),Dht.forEach(t),ntr=r($7e," \u2014 "),tV=n($7e,"A",{href:!0});var Ght=s(tV);str=r(Ght,"TFRobertaModel"),Ght.forEach(t),ltr=r($7e," (RoBERTa model)"),$7e.forEach(t),itr=i(k),dM=n(k,"LI",{});var I7e=s(dM);Zue=n(I7e,"STRONG",{});var Oht=s(Zue);dtr=r(Oht,"roformer"),Oht.forEach(t),ctr=r(I7e," \u2014 "),aV=n(I7e,"A",{href:!0});var Vht=s(aV);mtr=r(Vht,"TFRoFormerModel"),Vht.forEach(t),ftr=r(I7e," (RoFormer model)"),I7e.forEach(t),gtr=i(k),cM=n(k,"LI",{});var q7e=s(cM);epe=n(q7e,"STRONG",{});var Xht=s(epe);htr=r(Xht,"speech_to_text"),Xht.forEach(t),utr=r(q7e," \u2014 "),nV=n(q7e,"A",{href:!0});var zht=s(nV);ptr=r(zht,"TFSpeech2TextModel"),zht.forEach(t),_tr=r(q7e," (Speech2Text model)"),q7e.forEach(t),btr=i(k),mM=n(k,"LI",{});var N7e=s(mM);ope=n(N7e,"STRONG",{});var Qht=s(ope);vtr=r(Qht,"t5"),Qht.forEach(t),Ftr=r(N7e," \u2014 "),sV=n(N7e,"A",{href:!0});var Wht=s(sV);Ttr=r(Wht,"TFT5Model"),Wht.forEach(t),Mtr=r(N7e," (T5 model)"),N7e.forEach(t),Etr=i(k),fM=n(k,"LI",{});var j7e=s(fM);rpe=n(j7e,"STRONG",{});var Hht=s(rpe);Ctr=r(Hht,"tapas"),Hht.forEach(t),wtr=r(j7e," \u2014 "),lV=n(j7e,"A",{href:!0});var Uht=s(lV);Atr=r(Uht,"TFTapasModel"),Uht.forEach(t),ytr=r(j7e," (TAPAS model)"),j7e.forEach(t),Ltr=i(k),gM=n(k,"LI",{});var D7e=s(gM);tpe=n(D7e,"STRONG",{});var Jht=s(tpe);xtr=r(Jht,"transfo-xl"),Jht.forEach(t),ktr=r(D7e," \u2014 "),iV=n(D7e,"A",{href:!0});var Yht=s(iV);Str=r(Yht,"TFTransfoXLModel"),Yht.forEach(t),Rtr=r(D7e," (Transformer-XL model)"),D7e.forEach(t),Btr=i(k),hM=n(k,"LI",{});var G7e=s(hM);ape=n(G7e,"STRONG",{});var Kht=s(ape);Ptr=r(Kht,"vit"),Kht.forEach(t),$tr=r(G7e," \u2014 "),dV=n(G7e,"A",{href:!0});var Zht=s(dV);Itr=r(Zht,"TFViTModel"),Zht.forEach(t),qtr=r(G7e," (ViT model)"),G7e.forEach(t),Ntr=i(k),uM=n(k,"LI",{});var O7e=s(uM);npe=n(O7e,"STRONG",{});var eut=s(npe);jtr=r(eut,"vit_mae"),eut.forEach(t),Dtr=r(O7e," \u2014 "),cV=n(O7e,"A",{href:!0});var out=s(cV);Gtr=r(out,"TFViTMAEModel"),out.forEach(t),Otr=r(O7e," (ViTMAE model)"),O7e.forEach(t),Vtr=i(k),pM=n(k,"LI",{});var V7e=s(pM);spe=n(V7e,"STRONG",{});var rut=s(spe);Xtr=r(rut,"wav2vec2"),rut.forEach(t),ztr=r(V7e," \u2014 "),mV=n(V7e,"A",{href:!0});var tut=s(mV);Qtr=r(tut,"TFWav2Vec2Model"),tut.forEach(t),Wtr=r(V7e," (Wav2Vec2 model)"),V7e.forEach(t),Htr=i(k),_M=n(k,"LI",{});var X7e=s(_M);lpe=n(X7e,"STRONG",{});var aut=s(lpe);Utr=r(aut,"xlm"),aut.forEach(t),Jtr=r(X7e," \u2014 "),fV=n(X7e,"A",{href:!0});var nut=s(fV);Ytr=r(nut,"TFXLMModel"),nut.forEach(t),Ktr=r(X7e," (XLM model)"),X7e.forEach(t),Ztr=i(k),bM=n(k,"LI",{});var z7e=s(bM);ipe=n(z7e,"STRONG",{});var sut=s(ipe);ear=r(sut,"xlm-roberta"),sut.forEach(t),oar=r(z7e," \u2014 "),gV=n(z7e,"A",{href:!0});var lut=s(gV);rar=r(lut,"TFXLMRobertaModel"),lut.forEach(t),tar=r(z7e," (XLM-RoBERTa model)"),z7e.forEach(t),aar=i(k),vM=n(k,"LI",{});var Q7e=s(vM);dpe=n(Q7e,"STRONG",{});var iut=s(dpe);nar=r(iut,"xlnet"),iut.forEach(t),sar=r(Q7e," \u2014 "),hV=n(Q7e,"A",{href:!0});var dut=s(hV);lar=r(dut,"TFXLNetModel"),dut.forEach(t),iar=r(Q7e," (XLNet model)"),Q7e.forEach(t),k.forEach(t),dar=i(ua),cpe=n(ua,"P",{});var cut=s(cpe);car=r(cut,"Examples:"),cut.forEach(t),mar=i(ua),f(hy.$$.fragment,ua),ua.forEach(t),Dl.forEach(t),NBe=i(c),pc=n(c,"H2",{class:!0});var H$e=s(pc);FM=n(H$e,"A",{id:!0,class:!0,href:!0});var mut=s(FM);mpe=n(mut,"SPAN",{});var fut=s(mpe);f(uy.$$.fragment,fut),fut.forEach(t),mut.forEach(t),far=i(H$e),fpe=n(H$e,"SPAN",{});var gut=s(fpe);gar=r(gut,"TFAutoModelForPreTraining"),gut.forEach(t),H$e.forEach(t),jBe=i(c),Fr=n(c,"DIV",{class:!0});var Ol=s(Fr);f(py.$$.fragment,Ol),har=i(Ol),_c=n(Ol,"P",{});var uJ=s(_c);uar=r(uJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),uV=n(uJ,"A",{href:!0});var hut=s(uV);par=r(hut,"from_pretrained()"),hut.forEach(t),_ar=r(uJ," class method or the "),pV=n(uJ,"A",{href:!0});var uut=s(pV);bar=r(uut,"from_config()"),uut.forEach(t),Far=r(uJ,` class
method.`),uJ.forEach(t),Tar=i(Ol),_y=n(Ol,"P",{});var U$e=s(_y);Mar=r(U$e,"This class cannot be instantiated directly using "),gpe=n(U$e,"CODE",{});var put=s(gpe);Ear=r(put,"__init__()"),put.forEach(t),Car=r(U$e," (throws an error)."),U$e.forEach(t),war=i(Ol),ht=n(Ol,"DIV",{class:!0});var Vl=s(ht);f(by.$$.fragment,Vl),Aar=i(Vl),hpe=n(Vl,"P",{});var _ut=s(hpe);yar=r(_ut,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),_ut.forEach(t),Lar=i(Vl),bc=n(Vl,"P",{});var pJ=s(bc);xar=r(pJ,`Note:
Loading a model from its configuration file does `),upe=n(pJ,"STRONG",{});var but=s(upe);kar=r(but,"not"),but.forEach(t),Sar=r(pJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),_V=n(pJ,"A",{href:!0});var vut=s(_V);Rar=r(vut,"from_pretrained()"),vut.forEach(t),Bar=r(pJ," to load the model weights."),pJ.forEach(t),Par=i(Vl),ppe=n(Vl,"P",{});var Fut=s(ppe);$ar=r(Fut,"Examples:"),Fut.forEach(t),Iar=i(Vl),f(vy.$$.fragment,Vl),Vl.forEach(t),qar=i(Ol),uo=n(Ol,"DIV",{class:!0});var pa=s(uo);f(Fy.$$.fragment,pa),Nar=i(pa),_pe=n(pa,"P",{});var Tut=s(_pe);jar=r(Tut,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Tut.forEach(t),Dar=i(pa),bn=n(pa,"P",{});var aw=s(bn);Gar=r(aw,"The model class to instantiate is selected based on the "),bpe=n(aw,"CODE",{});var Mut=s(bpe);Oar=r(Mut,"model_type"),Mut.forEach(t),Var=r(aw,` property of the config object (either
passed as an argument or loaded from `),vpe=n(aw,"CODE",{});var Eut=s(vpe);Xar=r(Eut,"pretrained_model_name_or_path"),Eut.forEach(t),zar=r(aw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fpe=n(aw,"CODE",{});var Cut=s(Fpe);Qar=r(Cut,"pretrained_model_name_or_path"),Cut.forEach(t),War=r(aw,":"),aw.forEach(t),Har=i(pa),H=n(pa,"UL",{});var U=s(H);TM=n(U,"LI",{});var W7e=s(TM);Tpe=n(W7e,"STRONG",{});var wut=s(Tpe);Uar=r(wut,"albert"),wut.forEach(t),Jar=r(W7e," \u2014 "),bV=n(W7e,"A",{href:!0});var Aut=s(bV);Yar=r(Aut,"TFAlbertForPreTraining"),Aut.forEach(t),Kar=r(W7e," (ALBERT model)"),W7e.forEach(t),Zar=i(U),MM=n(U,"LI",{});var H7e=s(MM);Mpe=n(H7e,"STRONG",{});var yut=s(Mpe);enr=r(yut,"bart"),yut.forEach(t),onr=r(H7e," \u2014 "),vV=n(H7e,"A",{href:!0});var Lut=s(vV);rnr=r(Lut,"TFBartForConditionalGeneration"),Lut.forEach(t),tnr=r(H7e," (BART model)"),H7e.forEach(t),anr=i(U),EM=n(U,"LI",{});var U7e=s(EM);Epe=n(U7e,"STRONG",{});var xut=s(Epe);nnr=r(xut,"bert"),xut.forEach(t),snr=r(U7e," \u2014 "),FV=n(U7e,"A",{href:!0});var kut=s(FV);lnr=r(kut,"TFBertForPreTraining"),kut.forEach(t),inr=r(U7e," (BERT model)"),U7e.forEach(t),dnr=i(U),CM=n(U,"LI",{});var J7e=s(CM);Cpe=n(J7e,"STRONG",{});var Sut=s(Cpe);cnr=r(Sut,"camembert"),Sut.forEach(t),mnr=r(J7e," \u2014 "),TV=n(J7e,"A",{href:!0});var Rut=s(TV);fnr=r(Rut,"TFCamembertForMaskedLM"),Rut.forEach(t),gnr=r(J7e," (CamemBERT model)"),J7e.forEach(t),hnr=i(U),wM=n(U,"LI",{});var Y7e=s(wM);wpe=n(Y7e,"STRONG",{});var But=s(wpe);unr=r(But,"ctrl"),But.forEach(t),pnr=r(Y7e," \u2014 "),MV=n(Y7e,"A",{href:!0});var Put=s(MV);_nr=r(Put,"TFCTRLLMHeadModel"),Put.forEach(t),bnr=r(Y7e," (CTRL model)"),Y7e.forEach(t),vnr=i(U),AM=n(U,"LI",{});var K7e=s(AM);Ape=n(K7e,"STRONG",{});var $ut=s(Ape);Fnr=r($ut,"distilbert"),$ut.forEach(t),Tnr=r(K7e," \u2014 "),EV=n(K7e,"A",{href:!0});var Iut=s(EV);Mnr=r(Iut,"TFDistilBertForMaskedLM"),Iut.forEach(t),Enr=r(K7e," (DistilBERT model)"),K7e.forEach(t),Cnr=i(U),yM=n(U,"LI",{});var Z7e=s(yM);ype=n(Z7e,"STRONG",{});var qut=s(ype);wnr=r(qut,"electra"),qut.forEach(t),Anr=r(Z7e," \u2014 "),CV=n(Z7e,"A",{href:!0});var Nut=s(CV);ynr=r(Nut,"TFElectraForPreTraining"),Nut.forEach(t),Lnr=r(Z7e," (ELECTRA model)"),Z7e.forEach(t),xnr=i(U),LM=n(U,"LI",{});var e9e=s(LM);Lpe=n(e9e,"STRONG",{});var jut=s(Lpe);knr=r(jut,"flaubert"),jut.forEach(t),Snr=r(e9e," \u2014 "),wV=n(e9e,"A",{href:!0});var Dut=s(wV);Rnr=r(Dut,"TFFlaubertWithLMHeadModel"),Dut.forEach(t),Bnr=r(e9e," (FlauBERT model)"),e9e.forEach(t),Pnr=i(U),xM=n(U,"LI",{});var o9e=s(xM);xpe=n(o9e,"STRONG",{});var Gut=s(xpe);$nr=r(Gut,"funnel"),Gut.forEach(t),Inr=r(o9e," \u2014 "),AV=n(o9e,"A",{href:!0});var Out=s(AV);qnr=r(Out,"TFFunnelForPreTraining"),Out.forEach(t),Nnr=r(o9e," (Funnel Transformer model)"),o9e.forEach(t),jnr=i(U),kM=n(U,"LI",{});var r9e=s(kM);kpe=n(r9e,"STRONG",{});var Vut=s(kpe);Dnr=r(Vut,"gpt2"),Vut.forEach(t),Gnr=r(r9e," \u2014 "),yV=n(r9e,"A",{href:!0});var Xut=s(yV);Onr=r(Xut,"TFGPT2LMHeadModel"),Xut.forEach(t),Vnr=r(r9e," (OpenAI GPT-2 model)"),r9e.forEach(t),Xnr=i(U),SM=n(U,"LI",{});var t9e=s(SM);Spe=n(t9e,"STRONG",{});var zut=s(Spe);znr=r(zut,"layoutlm"),zut.forEach(t),Qnr=r(t9e," \u2014 "),LV=n(t9e,"A",{href:!0});var Qut=s(LV);Wnr=r(Qut,"TFLayoutLMForMaskedLM"),Qut.forEach(t),Hnr=r(t9e," (LayoutLM model)"),t9e.forEach(t),Unr=i(U),RM=n(U,"LI",{});var a9e=s(RM);Rpe=n(a9e,"STRONG",{});var Wut=s(Rpe);Jnr=r(Wut,"lxmert"),Wut.forEach(t),Ynr=r(a9e," \u2014 "),xV=n(a9e,"A",{href:!0});var Hut=s(xV);Knr=r(Hut,"TFLxmertForPreTraining"),Hut.forEach(t),Znr=r(a9e," (LXMERT model)"),a9e.forEach(t),esr=i(U),BM=n(U,"LI",{});var n9e=s(BM);Bpe=n(n9e,"STRONG",{});var Uut=s(Bpe);osr=r(Uut,"mobilebert"),Uut.forEach(t),rsr=r(n9e," \u2014 "),kV=n(n9e,"A",{href:!0});var Jut=s(kV);tsr=r(Jut,"TFMobileBertForPreTraining"),Jut.forEach(t),asr=r(n9e," (MobileBERT model)"),n9e.forEach(t),nsr=i(U),PM=n(U,"LI",{});var s9e=s(PM);Ppe=n(s9e,"STRONG",{});var Yut=s(Ppe);ssr=r(Yut,"mpnet"),Yut.forEach(t),lsr=r(s9e," \u2014 "),SV=n(s9e,"A",{href:!0});var Kut=s(SV);isr=r(Kut,"TFMPNetForMaskedLM"),Kut.forEach(t),dsr=r(s9e," (MPNet model)"),s9e.forEach(t),csr=i(U),$M=n(U,"LI",{});var l9e=s($M);$pe=n(l9e,"STRONG",{});var Zut=s($pe);msr=r(Zut,"openai-gpt"),Zut.forEach(t),fsr=r(l9e," \u2014 "),RV=n(l9e,"A",{href:!0});var ept=s(RV);gsr=r(ept,"TFOpenAIGPTLMHeadModel"),ept.forEach(t),hsr=r(l9e," (OpenAI GPT model)"),l9e.forEach(t),usr=i(U),IM=n(U,"LI",{});var i9e=s(IM);Ipe=n(i9e,"STRONG",{});var opt=s(Ipe);psr=r(opt,"roberta"),opt.forEach(t),_sr=r(i9e," \u2014 "),BV=n(i9e,"A",{href:!0});var rpt=s(BV);bsr=r(rpt,"TFRobertaForMaskedLM"),rpt.forEach(t),vsr=r(i9e," (RoBERTa model)"),i9e.forEach(t),Fsr=i(U),qM=n(U,"LI",{});var d9e=s(qM);qpe=n(d9e,"STRONG",{});var tpt=s(qpe);Tsr=r(tpt,"t5"),tpt.forEach(t),Msr=r(d9e," \u2014 "),PV=n(d9e,"A",{href:!0});var apt=s(PV);Esr=r(apt,"TFT5ForConditionalGeneration"),apt.forEach(t),Csr=r(d9e," (T5 model)"),d9e.forEach(t),wsr=i(U),NM=n(U,"LI",{});var c9e=s(NM);Npe=n(c9e,"STRONG",{});var npt=s(Npe);Asr=r(npt,"tapas"),npt.forEach(t),ysr=r(c9e," \u2014 "),$V=n(c9e,"A",{href:!0});var spt=s($V);Lsr=r(spt,"TFTapasForMaskedLM"),spt.forEach(t),xsr=r(c9e," (TAPAS model)"),c9e.forEach(t),ksr=i(U),jM=n(U,"LI",{});var m9e=s(jM);jpe=n(m9e,"STRONG",{});var lpt=s(jpe);Ssr=r(lpt,"transfo-xl"),lpt.forEach(t),Rsr=r(m9e," \u2014 "),IV=n(m9e,"A",{href:!0});var ipt=s(IV);Bsr=r(ipt,"TFTransfoXLLMHeadModel"),ipt.forEach(t),Psr=r(m9e," (Transformer-XL model)"),m9e.forEach(t),$sr=i(U),DM=n(U,"LI",{});var f9e=s(DM);Dpe=n(f9e,"STRONG",{});var dpt=s(Dpe);Isr=r(dpt,"vit_mae"),dpt.forEach(t),qsr=r(f9e," \u2014 "),qV=n(f9e,"A",{href:!0});var cpt=s(qV);Nsr=r(cpt,"TFViTMAEForPreTraining"),cpt.forEach(t),jsr=r(f9e," (ViTMAE model)"),f9e.forEach(t),Dsr=i(U),GM=n(U,"LI",{});var g9e=s(GM);Gpe=n(g9e,"STRONG",{});var mpt=s(Gpe);Gsr=r(mpt,"xlm"),mpt.forEach(t),Osr=r(g9e," \u2014 "),NV=n(g9e,"A",{href:!0});var fpt=s(NV);Vsr=r(fpt,"TFXLMWithLMHeadModel"),fpt.forEach(t),Xsr=r(g9e," (XLM model)"),g9e.forEach(t),zsr=i(U),OM=n(U,"LI",{});var h9e=s(OM);Ope=n(h9e,"STRONG",{});var gpt=s(Ope);Qsr=r(gpt,"xlm-roberta"),gpt.forEach(t),Wsr=r(h9e," \u2014 "),jV=n(h9e,"A",{href:!0});var hpt=s(jV);Hsr=r(hpt,"TFXLMRobertaForMaskedLM"),hpt.forEach(t),Usr=r(h9e," (XLM-RoBERTa model)"),h9e.forEach(t),Jsr=i(U),VM=n(U,"LI",{});var u9e=s(VM);Vpe=n(u9e,"STRONG",{});var upt=s(Vpe);Ysr=r(upt,"xlnet"),upt.forEach(t),Ksr=r(u9e," \u2014 "),DV=n(u9e,"A",{href:!0});var ppt=s(DV);Zsr=r(ppt,"TFXLNetLMHeadModel"),ppt.forEach(t),elr=r(u9e," (XLNet model)"),u9e.forEach(t),U.forEach(t),olr=i(pa),Xpe=n(pa,"P",{});var _pt=s(Xpe);rlr=r(_pt,"Examples:"),_pt.forEach(t),tlr=i(pa),f(Ty.$$.fragment,pa),pa.forEach(t),Ol.forEach(t),DBe=i(c),vc=n(c,"H2",{class:!0});var J$e=s(vc);XM=n(J$e,"A",{id:!0,class:!0,href:!0});var bpt=s(XM);zpe=n(bpt,"SPAN",{});var vpt=s(zpe);f(My.$$.fragment,vpt),vpt.forEach(t),bpt.forEach(t),alr=i(J$e),Qpe=n(J$e,"SPAN",{});var Fpt=s(Qpe);nlr=r(Fpt,"TFAutoModelForCausalLM"),Fpt.forEach(t),J$e.forEach(t),GBe=i(c),Tr=n(c,"DIV",{class:!0});var Xl=s(Tr);f(Ey.$$.fragment,Xl),slr=i(Xl),Fc=n(Xl,"P",{});var _J=s(Fc);llr=r(_J,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),GV=n(_J,"A",{href:!0});var Tpt=s(GV);ilr=r(Tpt,"from_pretrained()"),Tpt.forEach(t),dlr=r(_J," class method or the "),OV=n(_J,"A",{href:!0});var Mpt=s(OV);clr=r(Mpt,"from_config()"),Mpt.forEach(t),mlr=r(_J,` class
method.`),_J.forEach(t),flr=i(Xl),Cy=n(Xl,"P",{});var Y$e=s(Cy);glr=r(Y$e,"This class cannot be instantiated directly using "),Wpe=n(Y$e,"CODE",{});var Ept=s(Wpe);hlr=r(Ept,"__init__()"),Ept.forEach(t),ulr=r(Y$e," (throws an error)."),Y$e.forEach(t),plr=i(Xl),ut=n(Xl,"DIV",{class:!0});var zl=s(ut);f(wy.$$.fragment,zl),_lr=i(zl),Hpe=n(zl,"P",{});var Cpt=s(Hpe);blr=r(Cpt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Cpt.forEach(t),vlr=i(zl),Tc=n(zl,"P",{});var bJ=s(Tc);Flr=r(bJ,`Note:
Loading a model from its configuration file does `),Upe=n(bJ,"STRONG",{});var wpt=s(Upe);Tlr=r(wpt,"not"),wpt.forEach(t),Mlr=r(bJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),VV=n(bJ,"A",{href:!0});var Apt=s(VV);Elr=r(Apt,"from_pretrained()"),Apt.forEach(t),Clr=r(bJ," to load the model weights."),bJ.forEach(t),wlr=i(zl),Jpe=n(zl,"P",{});var ypt=s(Jpe);Alr=r(ypt,"Examples:"),ypt.forEach(t),ylr=i(zl),f(Ay.$$.fragment,zl),zl.forEach(t),Llr=i(Xl),po=n(Xl,"DIV",{class:!0});var _a=s(po);f(yy.$$.fragment,_a),xlr=i(_a),Ype=n(_a,"P",{});var Lpt=s(Ype);klr=r(Lpt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Lpt.forEach(t),Slr=i(_a),vn=n(_a,"P",{});var nw=s(vn);Rlr=r(nw,"The model class to instantiate is selected based on the "),Kpe=n(nw,"CODE",{});var xpt=s(Kpe);Blr=r(xpt,"model_type"),xpt.forEach(t),Plr=r(nw,` property of the config object (either
passed as an argument or loaded from `),Zpe=n(nw,"CODE",{});var kpt=s(Zpe);$lr=r(kpt,"pretrained_model_name_or_path"),kpt.forEach(t),Ilr=r(nw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e_e=n(nw,"CODE",{});var Spt=s(e_e);qlr=r(Spt,"pretrained_model_name_or_path"),Spt.forEach(t),Nlr=r(nw,":"),nw.forEach(t),jlr=i(_a),me=n(_a,"UL",{});var ue=s(me);zM=n(ue,"LI",{});var p9e=s(zM);o_e=n(p9e,"STRONG",{});var Rpt=s(o_e);Dlr=r(Rpt,"bert"),Rpt.forEach(t),Glr=r(p9e," \u2014 "),XV=n(p9e,"A",{href:!0});var Bpt=s(XV);Olr=r(Bpt,"TFBertLMHeadModel"),Bpt.forEach(t),Vlr=r(p9e," (BERT model)"),p9e.forEach(t),Xlr=i(ue),QM=n(ue,"LI",{});var _9e=s(QM);r_e=n(_9e,"STRONG",{});var Ppt=s(r_e);zlr=r(Ppt,"camembert"),Ppt.forEach(t),Qlr=r(_9e," \u2014 "),zV=n(_9e,"A",{href:!0});var $pt=s(zV);Wlr=r($pt,"TFCamembertForCausalLM"),$pt.forEach(t),Hlr=r(_9e," (CamemBERT model)"),_9e.forEach(t),Ulr=i(ue),WM=n(ue,"LI",{});var b9e=s(WM);t_e=n(b9e,"STRONG",{});var Ipt=s(t_e);Jlr=r(Ipt,"ctrl"),Ipt.forEach(t),Ylr=r(b9e," \u2014 "),QV=n(b9e,"A",{href:!0});var qpt=s(QV);Klr=r(qpt,"TFCTRLLMHeadModel"),qpt.forEach(t),Zlr=r(b9e," (CTRL model)"),b9e.forEach(t),eir=i(ue),HM=n(ue,"LI",{});var v9e=s(HM);a_e=n(v9e,"STRONG",{});var Npt=s(a_e);oir=r(Npt,"gpt2"),Npt.forEach(t),rir=r(v9e," \u2014 "),WV=n(v9e,"A",{href:!0});var jpt=s(WV);tir=r(jpt,"TFGPT2LMHeadModel"),jpt.forEach(t),air=r(v9e," (OpenAI GPT-2 model)"),v9e.forEach(t),nir=i(ue),UM=n(ue,"LI",{});var F9e=s(UM);n_e=n(F9e,"STRONG",{});var Dpt=s(n_e);sir=r(Dpt,"gptj"),Dpt.forEach(t),lir=r(F9e," \u2014 "),HV=n(F9e,"A",{href:!0});var Gpt=s(HV);iir=r(Gpt,"TFGPTJForCausalLM"),Gpt.forEach(t),dir=r(F9e," (GPT-J model)"),F9e.forEach(t),cir=i(ue),JM=n(ue,"LI",{});var T9e=s(JM);s_e=n(T9e,"STRONG",{});var Opt=s(s_e);mir=r(Opt,"openai-gpt"),Opt.forEach(t),fir=r(T9e," \u2014 "),UV=n(T9e,"A",{href:!0});var Vpt=s(UV);gir=r(Vpt,"TFOpenAIGPTLMHeadModel"),Vpt.forEach(t),hir=r(T9e," (OpenAI GPT model)"),T9e.forEach(t),uir=i(ue),YM=n(ue,"LI",{});var M9e=s(YM);l_e=n(M9e,"STRONG",{});var Xpt=s(l_e);pir=r(Xpt,"rembert"),Xpt.forEach(t),_ir=r(M9e," \u2014 "),JV=n(M9e,"A",{href:!0});var zpt=s(JV);bir=r(zpt,"TFRemBertForCausalLM"),zpt.forEach(t),vir=r(M9e," (RemBERT model)"),M9e.forEach(t),Fir=i(ue),KM=n(ue,"LI",{});var E9e=s(KM);i_e=n(E9e,"STRONG",{});var Qpt=s(i_e);Tir=r(Qpt,"roberta"),Qpt.forEach(t),Mir=r(E9e," \u2014 "),YV=n(E9e,"A",{href:!0});var Wpt=s(YV);Eir=r(Wpt,"TFRobertaForCausalLM"),Wpt.forEach(t),Cir=r(E9e," (RoBERTa model)"),E9e.forEach(t),wir=i(ue),ZM=n(ue,"LI",{});var C9e=s(ZM);d_e=n(C9e,"STRONG",{});var Hpt=s(d_e);Air=r(Hpt,"roformer"),Hpt.forEach(t),yir=r(C9e," \u2014 "),KV=n(C9e,"A",{href:!0});var Upt=s(KV);Lir=r(Upt,"TFRoFormerForCausalLM"),Upt.forEach(t),xir=r(C9e," (RoFormer model)"),C9e.forEach(t),kir=i(ue),e4=n(ue,"LI",{});var w9e=s(e4);c_e=n(w9e,"STRONG",{});var Jpt=s(c_e);Sir=r(Jpt,"transfo-xl"),Jpt.forEach(t),Rir=r(w9e," \u2014 "),ZV=n(w9e,"A",{href:!0});var Ypt=s(ZV);Bir=r(Ypt,"TFTransfoXLLMHeadModel"),Ypt.forEach(t),Pir=r(w9e," (Transformer-XL model)"),w9e.forEach(t),$ir=i(ue),o4=n(ue,"LI",{});var A9e=s(o4);m_e=n(A9e,"STRONG",{});var Kpt=s(m_e);Iir=r(Kpt,"xlm"),Kpt.forEach(t),qir=r(A9e," \u2014 "),eX=n(A9e,"A",{href:!0});var Zpt=s(eX);Nir=r(Zpt,"TFXLMWithLMHeadModel"),Zpt.forEach(t),jir=r(A9e," (XLM model)"),A9e.forEach(t),Dir=i(ue),r4=n(ue,"LI",{});var y9e=s(r4);f_e=n(y9e,"STRONG",{});var e_t=s(f_e);Gir=r(e_t,"xlnet"),e_t.forEach(t),Oir=r(y9e," \u2014 "),oX=n(y9e,"A",{href:!0});var o_t=s(oX);Vir=r(o_t,"TFXLNetLMHeadModel"),o_t.forEach(t),Xir=r(y9e," (XLNet model)"),y9e.forEach(t),ue.forEach(t),zir=i(_a),g_e=n(_a,"P",{});var r_t=s(g_e);Qir=r(r_t,"Examples:"),r_t.forEach(t),Wir=i(_a),f(Ly.$$.fragment,_a),_a.forEach(t),Xl.forEach(t),OBe=i(c),Mc=n(c,"H2",{class:!0});var K$e=s(Mc);t4=n(K$e,"A",{id:!0,class:!0,href:!0});var t_t=s(t4);h_e=n(t_t,"SPAN",{});var a_t=s(h_e);f(xy.$$.fragment,a_t),a_t.forEach(t),t_t.forEach(t),Hir=i(K$e),u_e=n(K$e,"SPAN",{});var n_t=s(u_e);Uir=r(n_t,"TFAutoModelForImageClassification"),n_t.forEach(t),K$e.forEach(t),VBe=i(c),Mr=n(c,"DIV",{class:!0});var Ql=s(Mr);f(ky.$$.fragment,Ql),Jir=i(Ql),Ec=n(Ql,"P",{});var vJ=s(Ec);Yir=r(vJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),rX=n(vJ,"A",{href:!0});var s_t=s(rX);Kir=r(s_t,"from_pretrained()"),s_t.forEach(t),Zir=r(vJ," class method or the "),tX=n(vJ,"A",{href:!0});var l_t=s(tX);edr=r(l_t,"from_config()"),l_t.forEach(t),odr=r(vJ,` class
method.`),vJ.forEach(t),rdr=i(Ql),Sy=n(Ql,"P",{});var Z$e=s(Sy);tdr=r(Z$e,"This class cannot be instantiated directly using "),p_e=n(Z$e,"CODE",{});var i_t=s(p_e);adr=r(i_t,"__init__()"),i_t.forEach(t),ndr=r(Z$e," (throws an error)."),Z$e.forEach(t),sdr=i(Ql),pt=n(Ql,"DIV",{class:!0});var Wl=s(pt);f(Ry.$$.fragment,Wl),ldr=i(Wl),__e=n(Wl,"P",{});var d_t=s(__e);idr=r(d_t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),d_t.forEach(t),ddr=i(Wl),Cc=n(Wl,"P",{});var FJ=s(Cc);cdr=r(FJ,`Note:
Loading a model from its configuration file does `),b_e=n(FJ,"STRONG",{});var c_t=s(b_e);mdr=r(c_t,"not"),c_t.forEach(t),fdr=r(FJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),aX=n(FJ,"A",{href:!0});var m_t=s(aX);gdr=r(m_t,"from_pretrained()"),m_t.forEach(t),hdr=r(FJ," to load the model weights."),FJ.forEach(t),udr=i(Wl),v_e=n(Wl,"P",{});var f_t=s(v_e);pdr=r(f_t,"Examples:"),f_t.forEach(t),_dr=i(Wl),f(By.$$.fragment,Wl),Wl.forEach(t),bdr=i(Ql),_o=n(Ql,"DIV",{class:!0});var ba=s(_o);f(Py.$$.fragment,ba),vdr=i(ba),F_e=n(ba,"P",{});var g_t=s(F_e);Fdr=r(g_t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),g_t.forEach(t),Tdr=i(ba),Fn=n(ba,"P",{});var sw=s(Fn);Mdr=r(sw,"The model class to instantiate is selected based on the "),T_e=n(sw,"CODE",{});var h_t=s(T_e);Edr=r(h_t,"model_type"),h_t.forEach(t),Cdr=r(sw,` property of the config object (either
passed as an argument or loaded from `),M_e=n(sw,"CODE",{});var u_t=s(M_e);wdr=r(u_t,"pretrained_model_name_or_path"),u_t.forEach(t),Adr=r(sw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),E_e=n(sw,"CODE",{});var p_t=s(E_e);ydr=r(p_t,"pretrained_model_name_or_path"),p_t.forEach(t),Ldr=r(sw,":"),sw.forEach(t),xdr=i(ba),$y=n(ba,"UL",{});var eIe=s($y);a4=n(eIe,"LI",{});var L9e=s(a4);C_e=n(L9e,"STRONG",{});var __t=s(C_e);kdr=r(__t,"convnext"),__t.forEach(t),Sdr=r(L9e," \u2014 "),nX=n(L9e,"A",{href:!0});var b_t=s(nX);Rdr=r(b_t,"TFConvNextForImageClassification"),b_t.forEach(t),Bdr=r(L9e," (ConvNext model)"),L9e.forEach(t),Pdr=i(eIe),n4=n(eIe,"LI",{});var x9e=s(n4);w_e=n(x9e,"STRONG",{});var v_t=s(w_e);$dr=r(v_t,"vit"),v_t.forEach(t),Idr=r(x9e," \u2014 "),sX=n(x9e,"A",{href:!0});var F_t=s(sX);qdr=r(F_t,"TFViTForImageClassification"),F_t.forEach(t),Ndr=r(x9e," (ViT model)"),x9e.forEach(t),eIe.forEach(t),jdr=i(ba),A_e=n(ba,"P",{});var T_t=s(A_e);Ddr=r(T_t,"Examples:"),T_t.forEach(t),Gdr=i(ba),f(Iy.$$.fragment,ba),ba.forEach(t),Ql.forEach(t),XBe=i(c),wc=n(c,"H2",{class:!0});var oIe=s(wc);s4=n(oIe,"A",{id:!0,class:!0,href:!0});var M_t=s(s4);y_e=n(M_t,"SPAN",{});var E_t=s(y_e);f(qy.$$.fragment,E_t),E_t.forEach(t),M_t.forEach(t),Odr=i(oIe),L_e=n(oIe,"SPAN",{});var C_t=s(L_e);Vdr=r(C_t,"TFAutoModelForMaskedLM"),C_t.forEach(t),oIe.forEach(t),zBe=i(c),Er=n(c,"DIV",{class:!0});var Hl=s(Er);f(Ny.$$.fragment,Hl),Xdr=i(Hl),Ac=n(Hl,"P",{});var TJ=s(Ac);zdr=r(TJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),lX=n(TJ,"A",{href:!0});var w_t=s(lX);Qdr=r(w_t,"from_pretrained()"),w_t.forEach(t),Wdr=r(TJ," class method or the "),iX=n(TJ,"A",{href:!0});var A_t=s(iX);Hdr=r(A_t,"from_config()"),A_t.forEach(t),Udr=r(TJ,` class
method.`),TJ.forEach(t),Jdr=i(Hl),jy=n(Hl,"P",{});var rIe=s(jy);Ydr=r(rIe,"This class cannot be instantiated directly using "),x_e=n(rIe,"CODE",{});var y_t=s(x_e);Kdr=r(y_t,"__init__()"),y_t.forEach(t),Zdr=r(rIe," (throws an error)."),rIe.forEach(t),ecr=i(Hl),_t=n(Hl,"DIV",{class:!0});var Ul=s(_t);f(Dy.$$.fragment,Ul),ocr=i(Ul),k_e=n(Ul,"P",{});var L_t=s(k_e);rcr=r(L_t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),L_t.forEach(t),tcr=i(Ul),yc=n(Ul,"P",{});var MJ=s(yc);acr=r(MJ,`Note:
Loading a model from its configuration file does `),S_e=n(MJ,"STRONG",{});var x_t=s(S_e);ncr=r(x_t,"not"),x_t.forEach(t),scr=r(MJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),dX=n(MJ,"A",{href:!0});var k_t=s(dX);lcr=r(k_t,"from_pretrained()"),k_t.forEach(t),icr=r(MJ," to load the model weights."),MJ.forEach(t),dcr=i(Ul),R_e=n(Ul,"P",{});var S_t=s(R_e);ccr=r(S_t,"Examples:"),S_t.forEach(t),mcr=i(Ul),f(Gy.$$.fragment,Ul),Ul.forEach(t),fcr=i(Hl),bo=n(Hl,"DIV",{class:!0});var va=s(bo);f(Oy.$$.fragment,va),gcr=i(va),B_e=n(va,"P",{});var R_t=s(B_e);hcr=r(R_t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),R_t.forEach(t),ucr=i(va),Tn=n(va,"P",{});var lw=s(Tn);pcr=r(lw,"The model class to instantiate is selected based on the "),P_e=n(lw,"CODE",{});var B_t=s(P_e);_cr=r(B_t,"model_type"),B_t.forEach(t),bcr=r(lw,` property of the config object (either
passed as an argument or loaded from `),$_e=n(lw,"CODE",{});var P_t=s($_e);vcr=r(P_t,"pretrained_model_name_or_path"),P_t.forEach(t),Fcr=r(lw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I_e=n(lw,"CODE",{});var $_t=s(I_e);Tcr=r($_t,"pretrained_model_name_or_path"),$_t.forEach(t),Mcr=r(lw,":"),lw.forEach(t),Ecr=i(va),J=n(va,"UL",{});var oe=s(J);l4=n(oe,"LI",{});var k9e=s(l4);q_e=n(k9e,"STRONG",{});var I_t=s(q_e);Ccr=r(I_t,"albert"),I_t.forEach(t),wcr=r(k9e," \u2014 "),cX=n(k9e,"A",{href:!0});var q_t=s(cX);Acr=r(q_t,"TFAlbertForMaskedLM"),q_t.forEach(t),ycr=r(k9e," (ALBERT model)"),k9e.forEach(t),Lcr=i(oe),i4=n(oe,"LI",{});var S9e=s(i4);N_e=n(S9e,"STRONG",{});var N_t=s(N_e);xcr=r(N_t,"bert"),N_t.forEach(t),kcr=r(S9e," \u2014 "),mX=n(S9e,"A",{href:!0});var j_t=s(mX);Scr=r(j_t,"TFBertForMaskedLM"),j_t.forEach(t),Rcr=r(S9e," (BERT model)"),S9e.forEach(t),Bcr=i(oe),d4=n(oe,"LI",{});var R9e=s(d4);j_e=n(R9e,"STRONG",{});var D_t=s(j_e);Pcr=r(D_t,"camembert"),D_t.forEach(t),$cr=r(R9e," \u2014 "),fX=n(R9e,"A",{href:!0});var G_t=s(fX);Icr=r(G_t,"TFCamembertForMaskedLM"),G_t.forEach(t),qcr=r(R9e," (CamemBERT model)"),R9e.forEach(t),Ncr=i(oe),c4=n(oe,"LI",{});var B9e=s(c4);D_e=n(B9e,"STRONG",{});var O_t=s(D_e);jcr=r(O_t,"convbert"),O_t.forEach(t),Dcr=r(B9e," \u2014 "),gX=n(B9e,"A",{href:!0});var V_t=s(gX);Gcr=r(V_t,"TFConvBertForMaskedLM"),V_t.forEach(t),Ocr=r(B9e," (ConvBERT model)"),B9e.forEach(t),Vcr=i(oe),m4=n(oe,"LI",{});var P9e=s(m4);G_e=n(P9e,"STRONG",{});var X_t=s(G_e);Xcr=r(X_t,"deberta"),X_t.forEach(t),zcr=r(P9e," \u2014 "),hX=n(P9e,"A",{href:!0});var z_t=s(hX);Qcr=r(z_t,"TFDebertaForMaskedLM"),z_t.forEach(t),Wcr=r(P9e," (DeBERTa model)"),P9e.forEach(t),Hcr=i(oe),f4=n(oe,"LI",{});var $9e=s(f4);O_e=n($9e,"STRONG",{});var Q_t=s(O_e);Ucr=r(Q_t,"deberta-v2"),Q_t.forEach(t),Jcr=r($9e," \u2014 "),uX=n($9e,"A",{href:!0});var W_t=s(uX);Ycr=r(W_t,"TFDebertaV2ForMaskedLM"),W_t.forEach(t),Kcr=r($9e," (DeBERTa-v2 model)"),$9e.forEach(t),Zcr=i(oe),g4=n(oe,"LI",{});var I9e=s(g4);V_e=n(I9e,"STRONG",{});var H_t=s(V_e);emr=r(H_t,"distilbert"),H_t.forEach(t),omr=r(I9e," \u2014 "),pX=n(I9e,"A",{href:!0});var U_t=s(pX);rmr=r(U_t,"TFDistilBertForMaskedLM"),U_t.forEach(t),tmr=r(I9e," (DistilBERT model)"),I9e.forEach(t),amr=i(oe),h4=n(oe,"LI",{});var q9e=s(h4);X_e=n(q9e,"STRONG",{});var J_t=s(X_e);nmr=r(J_t,"electra"),J_t.forEach(t),smr=r(q9e," \u2014 "),_X=n(q9e,"A",{href:!0});var Y_t=s(_X);lmr=r(Y_t,"TFElectraForMaskedLM"),Y_t.forEach(t),imr=r(q9e," (ELECTRA model)"),q9e.forEach(t),dmr=i(oe),u4=n(oe,"LI",{});var N9e=s(u4);z_e=n(N9e,"STRONG",{});var K_t=s(z_e);cmr=r(K_t,"flaubert"),K_t.forEach(t),mmr=r(N9e," \u2014 "),bX=n(N9e,"A",{href:!0});var Z_t=s(bX);fmr=r(Z_t,"TFFlaubertWithLMHeadModel"),Z_t.forEach(t),gmr=r(N9e," (FlauBERT model)"),N9e.forEach(t),hmr=i(oe),p4=n(oe,"LI",{});var j9e=s(p4);Q_e=n(j9e,"STRONG",{});var ebt=s(Q_e);umr=r(ebt,"funnel"),ebt.forEach(t),pmr=r(j9e," \u2014 "),vX=n(j9e,"A",{href:!0});var obt=s(vX);_mr=r(obt,"TFFunnelForMaskedLM"),obt.forEach(t),bmr=r(j9e," (Funnel Transformer model)"),j9e.forEach(t),vmr=i(oe),_4=n(oe,"LI",{});var D9e=s(_4);W_e=n(D9e,"STRONG",{});var rbt=s(W_e);Fmr=r(rbt,"layoutlm"),rbt.forEach(t),Tmr=r(D9e," \u2014 "),FX=n(D9e,"A",{href:!0});var tbt=s(FX);Mmr=r(tbt,"TFLayoutLMForMaskedLM"),tbt.forEach(t),Emr=r(D9e," (LayoutLM model)"),D9e.forEach(t),Cmr=i(oe),b4=n(oe,"LI",{});var G9e=s(b4);H_e=n(G9e,"STRONG",{});var abt=s(H_e);wmr=r(abt,"longformer"),abt.forEach(t),Amr=r(G9e," \u2014 "),TX=n(G9e,"A",{href:!0});var nbt=s(TX);ymr=r(nbt,"TFLongformerForMaskedLM"),nbt.forEach(t),Lmr=r(G9e," (Longformer model)"),G9e.forEach(t),xmr=i(oe),v4=n(oe,"LI",{});var O9e=s(v4);U_e=n(O9e,"STRONG",{});var sbt=s(U_e);kmr=r(sbt,"mobilebert"),sbt.forEach(t),Smr=r(O9e," \u2014 "),MX=n(O9e,"A",{href:!0});var lbt=s(MX);Rmr=r(lbt,"TFMobileBertForMaskedLM"),lbt.forEach(t),Bmr=r(O9e," (MobileBERT model)"),O9e.forEach(t),Pmr=i(oe),F4=n(oe,"LI",{});var V9e=s(F4);J_e=n(V9e,"STRONG",{});var ibt=s(J_e);$mr=r(ibt,"mpnet"),ibt.forEach(t),Imr=r(V9e," \u2014 "),EX=n(V9e,"A",{href:!0});var dbt=s(EX);qmr=r(dbt,"TFMPNetForMaskedLM"),dbt.forEach(t),Nmr=r(V9e," (MPNet model)"),V9e.forEach(t),jmr=i(oe),T4=n(oe,"LI",{});var X9e=s(T4);Y_e=n(X9e,"STRONG",{});var cbt=s(Y_e);Dmr=r(cbt,"rembert"),cbt.forEach(t),Gmr=r(X9e," \u2014 "),CX=n(X9e,"A",{href:!0});var mbt=s(CX);Omr=r(mbt,"TFRemBertForMaskedLM"),mbt.forEach(t),Vmr=r(X9e," (RemBERT model)"),X9e.forEach(t),Xmr=i(oe),M4=n(oe,"LI",{});var z9e=s(M4);K_e=n(z9e,"STRONG",{});var fbt=s(K_e);zmr=r(fbt,"roberta"),fbt.forEach(t),Qmr=r(z9e," \u2014 "),wX=n(z9e,"A",{href:!0});var gbt=s(wX);Wmr=r(gbt,"TFRobertaForMaskedLM"),gbt.forEach(t),Hmr=r(z9e," (RoBERTa model)"),z9e.forEach(t),Umr=i(oe),E4=n(oe,"LI",{});var Q9e=s(E4);Z_e=n(Q9e,"STRONG",{});var hbt=s(Z_e);Jmr=r(hbt,"roformer"),hbt.forEach(t),Ymr=r(Q9e," \u2014 "),AX=n(Q9e,"A",{href:!0});var ubt=s(AX);Kmr=r(ubt,"TFRoFormerForMaskedLM"),ubt.forEach(t),Zmr=r(Q9e," (RoFormer model)"),Q9e.forEach(t),efr=i(oe),C4=n(oe,"LI",{});var W9e=s(C4);ebe=n(W9e,"STRONG",{});var pbt=s(ebe);ofr=r(pbt,"tapas"),pbt.forEach(t),rfr=r(W9e," \u2014 "),yX=n(W9e,"A",{href:!0});var _bt=s(yX);tfr=r(_bt,"TFTapasForMaskedLM"),_bt.forEach(t),afr=r(W9e," (TAPAS model)"),W9e.forEach(t),nfr=i(oe),w4=n(oe,"LI",{});var H9e=s(w4);obe=n(H9e,"STRONG",{});var bbt=s(obe);sfr=r(bbt,"xlm"),bbt.forEach(t),lfr=r(H9e," \u2014 "),LX=n(H9e,"A",{href:!0});var vbt=s(LX);ifr=r(vbt,"TFXLMWithLMHeadModel"),vbt.forEach(t),dfr=r(H9e," (XLM model)"),H9e.forEach(t),cfr=i(oe),A4=n(oe,"LI",{});var U9e=s(A4);rbe=n(U9e,"STRONG",{});var Fbt=s(rbe);mfr=r(Fbt,"xlm-roberta"),Fbt.forEach(t),ffr=r(U9e," \u2014 "),xX=n(U9e,"A",{href:!0});var Tbt=s(xX);gfr=r(Tbt,"TFXLMRobertaForMaskedLM"),Tbt.forEach(t),hfr=r(U9e," (XLM-RoBERTa model)"),U9e.forEach(t),oe.forEach(t),ufr=i(va),tbe=n(va,"P",{});var Mbt=s(tbe);pfr=r(Mbt,"Examples:"),Mbt.forEach(t),_fr=i(va),f(Vy.$$.fragment,va),va.forEach(t),Hl.forEach(t),QBe=i(c),Lc=n(c,"H2",{class:!0});var tIe=s(Lc);y4=n(tIe,"A",{id:!0,class:!0,href:!0});var Ebt=s(y4);abe=n(Ebt,"SPAN",{});var Cbt=s(abe);f(Xy.$$.fragment,Cbt),Cbt.forEach(t),Ebt.forEach(t),bfr=i(tIe),nbe=n(tIe,"SPAN",{});var wbt=s(nbe);vfr=r(wbt,"TFAutoModelForSeq2SeqLM"),wbt.forEach(t),tIe.forEach(t),WBe=i(c),Cr=n(c,"DIV",{class:!0});var Jl=s(Cr);f(zy.$$.fragment,Jl),Ffr=i(Jl),xc=n(Jl,"P",{});var EJ=s(xc);Tfr=r(EJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),kX=n(EJ,"A",{href:!0});var Abt=s(kX);Mfr=r(Abt,"from_pretrained()"),Abt.forEach(t),Efr=r(EJ," class method or the "),SX=n(EJ,"A",{href:!0});var ybt=s(SX);Cfr=r(ybt,"from_config()"),ybt.forEach(t),wfr=r(EJ,` class
method.`),EJ.forEach(t),Afr=i(Jl),Qy=n(Jl,"P",{});var aIe=s(Qy);yfr=r(aIe,"This class cannot be instantiated directly using "),sbe=n(aIe,"CODE",{});var Lbt=s(sbe);Lfr=r(Lbt,"__init__()"),Lbt.forEach(t),xfr=r(aIe," (throws an error)."),aIe.forEach(t),kfr=i(Jl),bt=n(Jl,"DIV",{class:!0});var Yl=s(bt);f(Wy.$$.fragment,Yl),Sfr=i(Yl),lbe=n(Yl,"P",{});var xbt=s(lbe);Rfr=r(xbt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),xbt.forEach(t),Bfr=i(Yl),kc=n(Yl,"P",{});var CJ=s(kc);Pfr=r(CJ,`Note:
Loading a model from its configuration file does `),ibe=n(CJ,"STRONG",{});var kbt=s(ibe);$fr=r(kbt,"not"),kbt.forEach(t),Ifr=r(CJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),RX=n(CJ,"A",{href:!0});var Sbt=s(RX);qfr=r(Sbt,"from_pretrained()"),Sbt.forEach(t),Nfr=r(CJ," to load the model weights."),CJ.forEach(t),jfr=i(Yl),dbe=n(Yl,"P",{});var Rbt=s(dbe);Dfr=r(Rbt,"Examples:"),Rbt.forEach(t),Gfr=i(Yl),f(Hy.$$.fragment,Yl),Yl.forEach(t),Ofr=i(Jl),vo=n(Jl,"DIV",{class:!0});var Fa=s(vo);f(Uy.$$.fragment,Fa),Vfr=i(Fa),cbe=n(Fa,"P",{});var Bbt=s(cbe);Xfr=r(Bbt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Bbt.forEach(t),zfr=i(Fa),Mn=n(Fa,"P",{});var iw=s(Mn);Qfr=r(iw,"The model class to instantiate is selected based on the "),mbe=n(iw,"CODE",{});var Pbt=s(mbe);Wfr=r(Pbt,"model_type"),Pbt.forEach(t),Hfr=r(iw,` property of the config object (either
passed as an argument or loaded from `),fbe=n(iw,"CODE",{});var $bt=s(fbe);Ufr=r($bt,"pretrained_model_name_or_path"),$bt.forEach(t),Jfr=r(iw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gbe=n(iw,"CODE",{});var Ibt=s(gbe);Yfr=r(Ibt,"pretrained_model_name_or_path"),Ibt.forEach(t),Kfr=r(iw,":"),iw.forEach(t),Zfr=i(Fa),be=n(Fa,"UL",{});var we=s(be);L4=n(we,"LI",{});var J9e=s(L4);hbe=n(J9e,"STRONG",{});var qbt=s(hbe);egr=r(qbt,"bart"),qbt.forEach(t),ogr=r(J9e," \u2014 "),BX=n(J9e,"A",{href:!0});var Nbt=s(BX);rgr=r(Nbt,"TFBartForConditionalGeneration"),Nbt.forEach(t),tgr=r(J9e," (BART model)"),J9e.forEach(t),agr=i(we),x4=n(we,"LI",{});var Y9e=s(x4);ube=n(Y9e,"STRONG",{});var jbt=s(ube);ngr=r(jbt,"blenderbot"),jbt.forEach(t),sgr=r(Y9e," \u2014 "),PX=n(Y9e,"A",{href:!0});var Dbt=s(PX);lgr=r(Dbt,"TFBlenderbotForConditionalGeneration"),Dbt.forEach(t),igr=r(Y9e," (Blenderbot model)"),Y9e.forEach(t),dgr=i(we),k4=n(we,"LI",{});var K9e=s(k4);pbe=n(K9e,"STRONG",{});var Gbt=s(pbe);cgr=r(Gbt,"blenderbot-small"),Gbt.forEach(t),mgr=r(K9e," \u2014 "),$X=n(K9e,"A",{href:!0});var Obt=s($X);fgr=r(Obt,"TFBlenderbotSmallForConditionalGeneration"),Obt.forEach(t),ggr=r(K9e," (BlenderbotSmall model)"),K9e.forEach(t),hgr=i(we),S4=n(we,"LI",{});var Z9e=s(S4);_be=n(Z9e,"STRONG",{});var Vbt=s(_be);ugr=r(Vbt,"encoder-decoder"),Vbt.forEach(t),pgr=r(Z9e," \u2014 "),IX=n(Z9e,"A",{href:!0});var Xbt=s(IX);_gr=r(Xbt,"TFEncoderDecoderModel"),Xbt.forEach(t),bgr=r(Z9e," (Encoder decoder model)"),Z9e.forEach(t),vgr=i(we),R4=n(we,"LI",{});var exe=s(R4);bbe=n(exe,"STRONG",{});var zbt=s(bbe);Fgr=r(zbt,"led"),zbt.forEach(t),Tgr=r(exe," \u2014 "),qX=n(exe,"A",{href:!0});var Qbt=s(qX);Mgr=r(Qbt,"TFLEDForConditionalGeneration"),Qbt.forEach(t),Egr=r(exe," (LED model)"),exe.forEach(t),Cgr=i(we),B4=n(we,"LI",{});var oxe=s(B4);vbe=n(oxe,"STRONG",{});var Wbt=s(vbe);wgr=r(Wbt,"marian"),Wbt.forEach(t),Agr=r(oxe," \u2014 "),NX=n(oxe,"A",{href:!0});var Hbt=s(NX);ygr=r(Hbt,"TFMarianMTModel"),Hbt.forEach(t),Lgr=r(oxe," (Marian model)"),oxe.forEach(t),xgr=i(we),P4=n(we,"LI",{});var rxe=s(P4);Fbe=n(rxe,"STRONG",{});var Ubt=s(Fbe);kgr=r(Ubt,"mbart"),Ubt.forEach(t),Sgr=r(rxe," \u2014 "),jX=n(rxe,"A",{href:!0});var Jbt=s(jX);Rgr=r(Jbt,"TFMBartForConditionalGeneration"),Jbt.forEach(t),Bgr=r(rxe," (mBART model)"),rxe.forEach(t),Pgr=i(we),$4=n(we,"LI",{});var txe=s($4);Tbe=n(txe,"STRONG",{});var Ybt=s(Tbe);$gr=r(Ybt,"mt5"),Ybt.forEach(t),Igr=r(txe," \u2014 "),DX=n(txe,"A",{href:!0});var Kbt=s(DX);qgr=r(Kbt,"TFMT5ForConditionalGeneration"),Kbt.forEach(t),Ngr=r(txe," (mT5 model)"),txe.forEach(t),jgr=i(we),I4=n(we,"LI",{});var axe=s(I4);Mbe=n(axe,"STRONG",{});var Zbt=s(Mbe);Dgr=r(Zbt,"pegasus"),Zbt.forEach(t),Ggr=r(axe," \u2014 "),GX=n(axe,"A",{href:!0});var e2t=s(GX);Ogr=r(e2t,"TFPegasusForConditionalGeneration"),e2t.forEach(t),Vgr=r(axe," (Pegasus model)"),axe.forEach(t),Xgr=i(we),q4=n(we,"LI",{});var nxe=s(q4);Ebe=n(nxe,"STRONG",{});var o2t=s(Ebe);zgr=r(o2t,"t5"),o2t.forEach(t),Qgr=r(nxe," \u2014 "),OX=n(nxe,"A",{href:!0});var r2t=s(OX);Wgr=r(r2t,"TFT5ForConditionalGeneration"),r2t.forEach(t),Hgr=r(nxe," (T5 model)"),nxe.forEach(t),we.forEach(t),Ugr=i(Fa),Cbe=n(Fa,"P",{});var t2t=s(Cbe);Jgr=r(t2t,"Examples:"),t2t.forEach(t),Ygr=i(Fa),f(Jy.$$.fragment,Fa),Fa.forEach(t),Jl.forEach(t),HBe=i(c),Sc=n(c,"H2",{class:!0});var nIe=s(Sc);N4=n(nIe,"A",{id:!0,class:!0,href:!0});var a2t=s(N4);wbe=n(a2t,"SPAN",{});var n2t=s(wbe);f(Yy.$$.fragment,n2t),n2t.forEach(t),a2t.forEach(t),Kgr=i(nIe),Abe=n(nIe,"SPAN",{});var s2t=s(Abe);Zgr=r(s2t,"TFAutoModelForSequenceClassification"),s2t.forEach(t),nIe.forEach(t),UBe=i(c),wr=n(c,"DIV",{class:!0});var Kl=s(wr);f(Ky.$$.fragment,Kl),ehr=i(Kl),Rc=n(Kl,"P",{});var wJ=s(Rc);ohr=r(wJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),VX=n(wJ,"A",{href:!0});var l2t=s(VX);rhr=r(l2t,"from_pretrained()"),l2t.forEach(t),thr=r(wJ," class method or the "),XX=n(wJ,"A",{href:!0});var i2t=s(XX);ahr=r(i2t,"from_config()"),i2t.forEach(t),nhr=r(wJ,` class
method.`),wJ.forEach(t),shr=i(Kl),Zy=n(Kl,"P",{});var sIe=s(Zy);lhr=r(sIe,"This class cannot be instantiated directly using "),ybe=n(sIe,"CODE",{});var d2t=s(ybe);ihr=r(d2t,"__init__()"),d2t.forEach(t),dhr=r(sIe," (throws an error)."),sIe.forEach(t),chr=i(Kl),vt=n(Kl,"DIV",{class:!0});var Zl=s(vt);f(e8.$$.fragment,Zl),mhr=i(Zl),Lbe=n(Zl,"P",{});var c2t=s(Lbe);fhr=r(c2t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),c2t.forEach(t),ghr=i(Zl),Bc=n(Zl,"P",{});var AJ=s(Bc);hhr=r(AJ,`Note:
Loading a model from its configuration file does `),xbe=n(AJ,"STRONG",{});var m2t=s(xbe);uhr=r(m2t,"not"),m2t.forEach(t),phr=r(AJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),zX=n(AJ,"A",{href:!0});var f2t=s(zX);_hr=r(f2t,"from_pretrained()"),f2t.forEach(t),bhr=r(AJ," to load the model weights."),AJ.forEach(t),vhr=i(Zl),kbe=n(Zl,"P",{});var g2t=s(kbe);Fhr=r(g2t,"Examples:"),g2t.forEach(t),Thr=i(Zl),f(o8.$$.fragment,Zl),Zl.forEach(t),Mhr=i(Kl),Fo=n(Kl,"DIV",{class:!0});var Ta=s(Fo);f(r8.$$.fragment,Ta),Ehr=i(Ta),Sbe=n(Ta,"P",{});var h2t=s(Sbe);Chr=r(h2t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),h2t.forEach(t),whr=i(Ta),En=n(Ta,"P",{});var dw=s(En);Ahr=r(dw,"The model class to instantiate is selected based on the "),Rbe=n(dw,"CODE",{});var u2t=s(Rbe);yhr=r(u2t,"model_type"),u2t.forEach(t),Lhr=r(dw,` property of the config object (either
passed as an argument or loaded from `),Bbe=n(dw,"CODE",{});var p2t=s(Bbe);xhr=r(p2t,"pretrained_model_name_or_path"),p2t.forEach(t),khr=r(dw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pbe=n(dw,"CODE",{});var _2t=s(Pbe);Shr=r(_2t,"pretrained_model_name_or_path"),_2t.forEach(t),Rhr=r(dw,":"),dw.forEach(t),Bhr=i(Ta),V=n(Ta,"UL",{});var Q=s(V);j4=n(Q,"LI",{});var sxe=s(j4);$be=n(sxe,"STRONG",{});var b2t=s($be);Phr=r(b2t,"albert"),b2t.forEach(t),$hr=r(sxe," \u2014 "),QX=n(sxe,"A",{href:!0});var v2t=s(QX);Ihr=r(v2t,"TFAlbertForSequenceClassification"),v2t.forEach(t),qhr=r(sxe," (ALBERT model)"),sxe.forEach(t),Nhr=i(Q),D4=n(Q,"LI",{});var lxe=s(D4);Ibe=n(lxe,"STRONG",{});var F2t=s(Ibe);jhr=r(F2t,"bert"),F2t.forEach(t),Dhr=r(lxe," \u2014 "),WX=n(lxe,"A",{href:!0});var T2t=s(WX);Ghr=r(T2t,"TFBertForSequenceClassification"),T2t.forEach(t),Ohr=r(lxe," (BERT model)"),lxe.forEach(t),Vhr=i(Q),G4=n(Q,"LI",{});var ixe=s(G4);qbe=n(ixe,"STRONG",{});var M2t=s(qbe);Xhr=r(M2t,"camembert"),M2t.forEach(t),zhr=r(ixe," \u2014 "),HX=n(ixe,"A",{href:!0});var E2t=s(HX);Qhr=r(E2t,"TFCamembertForSequenceClassification"),E2t.forEach(t),Whr=r(ixe," (CamemBERT model)"),ixe.forEach(t),Hhr=i(Q),O4=n(Q,"LI",{});var dxe=s(O4);Nbe=n(dxe,"STRONG",{});var C2t=s(Nbe);Uhr=r(C2t,"convbert"),C2t.forEach(t),Jhr=r(dxe," \u2014 "),UX=n(dxe,"A",{href:!0});var w2t=s(UX);Yhr=r(w2t,"TFConvBertForSequenceClassification"),w2t.forEach(t),Khr=r(dxe," (ConvBERT model)"),dxe.forEach(t),Zhr=i(Q),V4=n(Q,"LI",{});var cxe=s(V4);jbe=n(cxe,"STRONG",{});var A2t=s(jbe);eur=r(A2t,"ctrl"),A2t.forEach(t),our=r(cxe," \u2014 "),JX=n(cxe,"A",{href:!0});var y2t=s(JX);rur=r(y2t,"TFCTRLForSequenceClassification"),y2t.forEach(t),tur=r(cxe," (CTRL model)"),cxe.forEach(t),aur=i(Q),X4=n(Q,"LI",{});var mxe=s(X4);Dbe=n(mxe,"STRONG",{});var L2t=s(Dbe);nur=r(L2t,"deberta"),L2t.forEach(t),sur=r(mxe," \u2014 "),YX=n(mxe,"A",{href:!0});var x2t=s(YX);lur=r(x2t,"TFDebertaForSequenceClassification"),x2t.forEach(t),iur=r(mxe," (DeBERTa model)"),mxe.forEach(t),dur=i(Q),z4=n(Q,"LI",{});var fxe=s(z4);Gbe=n(fxe,"STRONG",{});var k2t=s(Gbe);cur=r(k2t,"deberta-v2"),k2t.forEach(t),mur=r(fxe," \u2014 "),KX=n(fxe,"A",{href:!0});var S2t=s(KX);fur=r(S2t,"TFDebertaV2ForSequenceClassification"),S2t.forEach(t),gur=r(fxe," (DeBERTa-v2 model)"),fxe.forEach(t),hur=i(Q),Q4=n(Q,"LI",{});var gxe=s(Q4);Obe=n(gxe,"STRONG",{});var R2t=s(Obe);uur=r(R2t,"distilbert"),R2t.forEach(t),pur=r(gxe," \u2014 "),ZX=n(gxe,"A",{href:!0});var B2t=s(ZX);_ur=r(B2t,"TFDistilBertForSequenceClassification"),B2t.forEach(t),bur=r(gxe," (DistilBERT model)"),gxe.forEach(t),vur=i(Q),W4=n(Q,"LI",{});var hxe=s(W4);Vbe=n(hxe,"STRONG",{});var P2t=s(Vbe);Fur=r(P2t,"electra"),P2t.forEach(t),Tur=r(hxe," \u2014 "),ez=n(hxe,"A",{href:!0});var $2t=s(ez);Mur=r($2t,"TFElectraForSequenceClassification"),$2t.forEach(t),Eur=r(hxe," (ELECTRA model)"),hxe.forEach(t),Cur=i(Q),H4=n(Q,"LI",{});var uxe=s(H4);Xbe=n(uxe,"STRONG",{});var I2t=s(Xbe);wur=r(I2t,"flaubert"),I2t.forEach(t),Aur=r(uxe," \u2014 "),oz=n(uxe,"A",{href:!0});var q2t=s(oz);yur=r(q2t,"TFFlaubertForSequenceClassification"),q2t.forEach(t),Lur=r(uxe," (FlauBERT model)"),uxe.forEach(t),xur=i(Q),U4=n(Q,"LI",{});var pxe=s(U4);zbe=n(pxe,"STRONG",{});var N2t=s(zbe);kur=r(N2t,"funnel"),N2t.forEach(t),Sur=r(pxe," \u2014 "),rz=n(pxe,"A",{href:!0});var j2t=s(rz);Rur=r(j2t,"TFFunnelForSequenceClassification"),j2t.forEach(t),Bur=r(pxe," (Funnel Transformer model)"),pxe.forEach(t),Pur=i(Q),J4=n(Q,"LI",{});var _xe=s(J4);Qbe=n(_xe,"STRONG",{});var D2t=s(Qbe);$ur=r(D2t,"gpt2"),D2t.forEach(t),Iur=r(_xe," \u2014 "),tz=n(_xe,"A",{href:!0});var G2t=s(tz);qur=r(G2t,"TFGPT2ForSequenceClassification"),G2t.forEach(t),Nur=r(_xe," (OpenAI GPT-2 model)"),_xe.forEach(t),jur=i(Q),Y4=n(Q,"LI",{});var bxe=s(Y4);Wbe=n(bxe,"STRONG",{});var O2t=s(Wbe);Dur=r(O2t,"gptj"),O2t.forEach(t),Gur=r(bxe," \u2014 "),az=n(bxe,"A",{href:!0});var V2t=s(az);Our=r(V2t,"TFGPTJForSequenceClassification"),V2t.forEach(t),Vur=r(bxe," (GPT-J model)"),bxe.forEach(t),Xur=i(Q),K4=n(Q,"LI",{});var vxe=s(K4);Hbe=n(vxe,"STRONG",{});var X2t=s(Hbe);zur=r(X2t,"layoutlm"),X2t.forEach(t),Qur=r(vxe," \u2014 "),nz=n(vxe,"A",{href:!0});var z2t=s(nz);Wur=r(z2t,"TFLayoutLMForSequenceClassification"),z2t.forEach(t),Hur=r(vxe," (LayoutLM model)"),vxe.forEach(t),Uur=i(Q),Z4=n(Q,"LI",{});var Fxe=s(Z4);Ube=n(Fxe,"STRONG",{});var Q2t=s(Ube);Jur=r(Q2t,"longformer"),Q2t.forEach(t),Yur=r(Fxe," \u2014 "),sz=n(Fxe,"A",{href:!0});var W2t=s(sz);Kur=r(W2t,"TFLongformerForSequenceClassification"),W2t.forEach(t),Zur=r(Fxe," (Longformer model)"),Fxe.forEach(t),epr=i(Q),eE=n(Q,"LI",{});var Txe=s(eE);Jbe=n(Txe,"STRONG",{});var H2t=s(Jbe);opr=r(H2t,"mobilebert"),H2t.forEach(t),rpr=r(Txe," \u2014 "),lz=n(Txe,"A",{href:!0});var U2t=s(lz);tpr=r(U2t,"TFMobileBertForSequenceClassification"),U2t.forEach(t),apr=r(Txe," (MobileBERT model)"),Txe.forEach(t),npr=i(Q),oE=n(Q,"LI",{});var Mxe=s(oE);Ybe=n(Mxe,"STRONG",{});var J2t=s(Ybe);spr=r(J2t,"mpnet"),J2t.forEach(t),lpr=r(Mxe," \u2014 "),iz=n(Mxe,"A",{href:!0});var Y2t=s(iz);ipr=r(Y2t,"TFMPNetForSequenceClassification"),Y2t.forEach(t),dpr=r(Mxe," (MPNet model)"),Mxe.forEach(t),cpr=i(Q),rE=n(Q,"LI",{});var Exe=s(rE);Kbe=n(Exe,"STRONG",{});var K2t=s(Kbe);mpr=r(K2t,"openai-gpt"),K2t.forEach(t),fpr=r(Exe," \u2014 "),dz=n(Exe,"A",{href:!0});var Z2t=s(dz);gpr=r(Z2t,"TFOpenAIGPTForSequenceClassification"),Z2t.forEach(t),hpr=r(Exe," (OpenAI GPT model)"),Exe.forEach(t),upr=i(Q),tE=n(Q,"LI",{});var Cxe=s(tE);Zbe=n(Cxe,"STRONG",{});var evt=s(Zbe);ppr=r(evt,"rembert"),evt.forEach(t),_pr=r(Cxe," \u2014 "),cz=n(Cxe,"A",{href:!0});var ovt=s(cz);bpr=r(ovt,"TFRemBertForSequenceClassification"),ovt.forEach(t),vpr=r(Cxe," (RemBERT model)"),Cxe.forEach(t),Fpr=i(Q),aE=n(Q,"LI",{});var wxe=s(aE);e2e=n(wxe,"STRONG",{});var rvt=s(e2e);Tpr=r(rvt,"roberta"),rvt.forEach(t),Mpr=r(wxe," \u2014 "),mz=n(wxe,"A",{href:!0});var tvt=s(mz);Epr=r(tvt,"TFRobertaForSequenceClassification"),tvt.forEach(t),Cpr=r(wxe," (RoBERTa model)"),wxe.forEach(t),wpr=i(Q),nE=n(Q,"LI",{});var Axe=s(nE);o2e=n(Axe,"STRONG",{});var avt=s(o2e);Apr=r(avt,"roformer"),avt.forEach(t),ypr=r(Axe," \u2014 "),fz=n(Axe,"A",{href:!0});var nvt=s(fz);Lpr=r(nvt,"TFRoFormerForSequenceClassification"),nvt.forEach(t),xpr=r(Axe," (RoFormer model)"),Axe.forEach(t),kpr=i(Q),sE=n(Q,"LI",{});var yxe=s(sE);r2e=n(yxe,"STRONG",{});var svt=s(r2e);Spr=r(svt,"tapas"),svt.forEach(t),Rpr=r(yxe," \u2014 "),gz=n(yxe,"A",{href:!0});var lvt=s(gz);Bpr=r(lvt,"TFTapasForSequenceClassification"),lvt.forEach(t),Ppr=r(yxe," (TAPAS model)"),yxe.forEach(t),$pr=i(Q),lE=n(Q,"LI",{});var Lxe=s(lE);t2e=n(Lxe,"STRONG",{});var ivt=s(t2e);Ipr=r(ivt,"transfo-xl"),ivt.forEach(t),qpr=r(Lxe," \u2014 "),hz=n(Lxe,"A",{href:!0});var dvt=s(hz);Npr=r(dvt,"TFTransfoXLForSequenceClassification"),dvt.forEach(t),jpr=r(Lxe," (Transformer-XL model)"),Lxe.forEach(t),Dpr=i(Q),iE=n(Q,"LI",{});var xxe=s(iE);a2e=n(xxe,"STRONG",{});var cvt=s(a2e);Gpr=r(cvt,"xlm"),cvt.forEach(t),Opr=r(xxe," \u2014 "),uz=n(xxe,"A",{href:!0});var mvt=s(uz);Vpr=r(mvt,"TFXLMForSequenceClassification"),mvt.forEach(t),Xpr=r(xxe," (XLM model)"),xxe.forEach(t),zpr=i(Q),dE=n(Q,"LI",{});var kxe=s(dE);n2e=n(kxe,"STRONG",{});var fvt=s(n2e);Qpr=r(fvt,"xlm-roberta"),fvt.forEach(t),Wpr=r(kxe," \u2014 "),pz=n(kxe,"A",{href:!0});var gvt=s(pz);Hpr=r(gvt,"TFXLMRobertaForSequenceClassification"),gvt.forEach(t),Upr=r(kxe," (XLM-RoBERTa model)"),kxe.forEach(t),Jpr=i(Q),cE=n(Q,"LI",{});var Sxe=s(cE);s2e=n(Sxe,"STRONG",{});var hvt=s(s2e);Ypr=r(hvt,"xlnet"),hvt.forEach(t),Kpr=r(Sxe," \u2014 "),_z=n(Sxe,"A",{href:!0});var uvt=s(_z);Zpr=r(uvt,"TFXLNetForSequenceClassification"),uvt.forEach(t),e_r=r(Sxe," (XLNet model)"),Sxe.forEach(t),Q.forEach(t),o_r=i(Ta),l2e=n(Ta,"P",{});var pvt=s(l2e);r_r=r(pvt,"Examples:"),pvt.forEach(t),t_r=i(Ta),f(t8.$$.fragment,Ta),Ta.forEach(t),Kl.forEach(t),JBe=i(c),Pc=n(c,"H2",{class:!0});var lIe=s(Pc);mE=n(lIe,"A",{id:!0,class:!0,href:!0});var _vt=s(mE);i2e=n(_vt,"SPAN",{});var bvt=s(i2e);f(a8.$$.fragment,bvt),bvt.forEach(t),_vt.forEach(t),a_r=i(lIe),d2e=n(lIe,"SPAN",{});var vvt=s(d2e);n_r=r(vvt,"TFAutoModelForMultipleChoice"),vvt.forEach(t),lIe.forEach(t),YBe=i(c),Ar=n(c,"DIV",{class:!0});var ei=s(Ar);f(n8.$$.fragment,ei),s_r=i(ei),$c=n(ei,"P",{});var yJ=s($c);l_r=r(yJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),bz=n(yJ,"A",{href:!0});var Fvt=s(bz);i_r=r(Fvt,"from_pretrained()"),Fvt.forEach(t),d_r=r(yJ," class method or the "),vz=n(yJ,"A",{href:!0});var Tvt=s(vz);c_r=r(Tvt,"from_config()"),Tvt.forEach(t),m_r=r(yJ,` class
method.`),yJ.forEach(t),f_r=i(ei),s8=n(ei,"P",{});var iIe=s(s8);g_r=r(iIe,"This class cannot be instantiated directly using "),c2e=n(iIe,"CODE",{});var Mvt=s(c2e);h_r=r(Mvt,"__init__()"),Mvt.forEach(t),u_r=r(iIe," (throws an error)."),iIe.forEach(t),p_r=i(ei),Ft=n(ei,"DIV",{class:!0});var oi=s(Ft);f(l8.$$.fragment,oi),__r=i(oi),m2e=n(oi,"P",{});var Evt=s(m2e);b_r=r(Evt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Evt.forEach(t),v_r=i(oi),Ic=n(oi,"P",{});var LJ=s(Ic);F_r=r(LJ,`Note:
Loading a model from its configuration file does `),f2e=n(LJ,"STRONG",{});var Cvt=s(f2e);T_r=r(Cvt,"not"),Cvt.forEach(t),M_r=r(LJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Fz=n(LJ,"A",{href:!0});var wvt=s(Fz);E_r=r(wvt,"from_pretrained()"),wvt.forEach(t),C_r=r(LJ," to load the model weights."),LJ.forEach(t),w_r=i(oi),g2e=n(oi,"P",{});var Avt=s(g2e);A_r=r(Avt,"Examples:"),Avt.forEach(t),y_r=i(oi),f(i8.$$.fragment,oi),oi.forEach(t),L_r=i(ei),To=n(ei,"DIV",{class:!0});var Ma=s(To);f(d8.$$.fragment,Ma),x_r=i(Ma),h2e=n(Ma,"P",{});var yvt=s(h2e);k_r=r(yvt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),yvt.forEach(t),S_r=i(Ma),Cn=n(Ma,"P",{});var cw=s(Cn);R_r=r(cw,"The model class to instantiate is selected based on the "),u2e=n(cw,"CODE",{});var Lvt=s(u2e);B_r=r(Lvt,"model_type"),Lvt.forEach(t),P_r=r(cw,` property of the config object (either
passed as an argument or loaded from `),p2e=n(cw,"CODE",{});var xvt=s(p2e);$_r=r(xvt,"pretrained_model_name_or_path"),xvt.forEach(t),I_r=r(cw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_2e=n(cw,"CODE",{});var kvt=s(_2e);q_r=r(kvt,"pretrained_model_name_or_path"),kvt.forEach(t),N_r=r(cw,":"),cw.forEach(t),j_r=i(Ma),se=n(Ma,"UL",{});var ie=s(se);fE=n(ie,"LI",{});var Rxe=s(fE);b2e=n(Rxe,"STRONG",{});var Svt=s(b2e);D_r=r(Svt,"albert"),Svt.forEach(t),G_r=r(Rxe," \u2014 "),Tz=n(Rxe,"A",{href:!0});var Rvt=s(Tz);O_r=r(Rvt,"TFAlbertForMultipleChoice"),Rvt.forEach(t),V_r=r(Rxe," (ALBERT model)"),Rxe.forEach(t),X_r=i(ie),gE=n(ie,"LI",{});var Bxe=s(gE);v2e=n(Bxe,"STRONG",{});var Bvt=s(v2e);z_r=r(Bvt,"bert"),Bvt.forEach(t),Q_r=r(Bxe," \u2014 "),Mz=n(Bxe,"A",{href:!0});var Pvt=s(Mz);W_r=r(Pvt,"TFBertForMultipleChoice"),Pvt.forEach(t),H_r=r(Bxe," (BERT model)"),Bxe.forEach(t),U_r=i(ie),hE=n(ie,"LI",{});var Pxe=s(hE);F2e=n(Pxe,"STRONG",{});var $vt=s(F2e);J_r=r($vt,"camembert"),$vt.forEach(t),Y_r=r(Pxe," \u2014 "),Ez=n(Pxe,"A",{href:!0});var Ivt=s(Ez);K_r=r(Ivt,"TFCamembertForMultipleChoice"),Ivt.forEach(t),Z_r=r(Pxe," (CamemBERT model)"),Pxe.forEach(t),ebr=i(ie),uE=n(ie,"LI",{});var $xe=s(uE);T2e=n($xe,"STRONG",{});var qvt=s(T2e);obr=r(qvt,"convbert"),qvt.forEach(t),rbr=r($xe," \u2014 "),Cz=n($xe,"A",{href:!0});var Nvt=s(Cz);tbr=r(Nvt,"TFConvBertForMultipleChoice"),Nvt.forEach(t),abr=r($xe," (ConvBERT model)"),$xe.forEach(t),nbr=i(ie),pE=n(ie,"LI",{});var Ixe=s(pE);M2e=n(Ixe,"STRONG",{});var jvt=s(M2e);sbr=r(jvt,"distilbert"),jvt.forEach(t),lbr=r(Ixe," \u2014 "),wz=n(Ixe,"A",{href:!0});var Dvt=s(wz);ibr=r(Dvt,"TFDistilBertForMultipleChoice"),Dvt.forEach(t),dbr=r(Ixe," (DistilBERT model)"),Ixe.forEach(t),cbr=i(ie),_E=n(ie,"LI",{});var qxe=s(_E);E2e=n(qxe,"STRONG",{});var Gvt=s(E2e);mbr=r(Gvt,"electra"),Gvt.forEach(t),fbr=r(qxe," \u2014 "),Az=n(qxe,"A",{href:!0});var Ovt=s(Az);gbr=r(Ovt,"TFElectraForMultipleChoice"),Ovt.forEach(t),hbr=r(qxe," (ELECTRA model)"),qxe.forEach(t),ubr=i(ie),bE=n(ie,"LI",{});var Nxe=s(bE);C2e=n(Nxe,"STRONG",{});var Vvt=s(C2e);pbr=r(Vvt,"flaubert"),Vvt.forEach(t),_br=r(Nxe," \u2014 "),yz=n(Nxe,"A",{href:!0});var Xvt=s(yz);bbr=r(Xvt,"TFFlaubertForMultipleChoice"),Xvt.forEach(t),vbr=r(Nxe," (FlauBERT model)"),Nxe.forEach(t),Fbr=i(ie),vE=n(ie,"LI",{});var jxe=s(vE);w2e=n(jxe,"STRONG",{});var zvt=s(w2e);Tbr=r(zvt,"funnel"),zvt.forEach(t),Mbr=r(jxe," \u2014 "),Lz=n(jxe,"A",{href:!0});var Qvt=s(Lz);Ebr=r(Qvt,"TFFunnelForMultipleChoice"),Qvt.forEach(t),Cbr=r(jxe," (Funnel Transformer model)"),jxe.forEach(t),wbr=i(ie),FE=n(ie,"LI",{});var Dxe=s(FE);A2e=n(Dxe,"STRONG",{});var Wvt=s(A2e);Abr=r(Wvt,"longformer"),Wvt.forEach(t),ybr=r(Dxe," \u2014 "),xz=n(Dxe,"A",{href:!0});var Hvt=s(xz);Lbr=r(Hvt,"TFLongformerForMultipleChoice"),Hvt.forEach(t),xbr=r(Dxe," (Longformer model)"),Dxe.forEach(t),kbr=i(ie),TE=n(ie,"LI",{});var Gxe=s(TE);y2e=n(Gxe,"STRONG",{});var Uvt=s(y2e);Sbr=r(Uvt,"mobilebert"),Uvt.forEach(t),Rbr=r(Gxe," \u2014 "),kz=n(Gxe,"A",{href:!0});var Jvt=s(kz);Bbr=r(Jvt,"TFMobileBertForMultipleChoice"),Jvt.forEach(t),Pbr=r(Gxe," (MobileBERT model)"),Gxe.forEach(t),$br=i(ie),ME=n(ie,"LI",{});var Oxe=s(ME);L2e=n(Oxe,"STRONG",{});var Yvt=s(L2e);Ibr=r(Yvt,"mpnet"),Yvt.forEach(t),qbr=r(Oxe," \u2014 "),Sz=n(Oxe,"A",{href:!0});var Kvt=s(Sz);Nbr=r(Kvt,"TFMPNetForMultipleChoice"),Kvt.forEach(t),jbr=r(Oxe," (MPNet model)"),Oxe.forEach(t),Dbr=i(ie),EE=n(ie,"LI",{});var Vxe=s(EE);x2e=n(Vxe,"STRONG",{});var Zvt=s(x2e);Gbr=r(Zvt,"rembert"),Zvt.forEach(t),Obr=r(Vxe," \u2014 "),Rz=n(Vxe,"A",{href:!0});var eFt=s(Rz);Vbr=r(eFt,"TFRemBertForMultipleChoice"),eFt.forEach(t),Xbr=r(Vxe," (RemBERT model)"),Vxe.forEach(t),zbr=i(ie),CE=n(ie,"LI",{});var Xxe=s(CE);k2e=n(Xxe,"STRONG",{});var oFt=s(k2e);Qbr=r(oFt,"roberta"),oFt.forEach(t),Wbr=r(Xxe," \u2014 "),Bz=n(Xxe,"A",{href:!0});var rFt=s(Bz);Hbr=r(rFt,"TFRobertaForMultipleChoice"),rFt.forEach(t),Ubr=r(Xxe," (RoBERTa model)"),Xxe.forEach(t),Jbr=i(ie),wE=n(ie,"LI",{});var zxe=s(wE);S2e=n(zxe,"STRONG",{});var tFt=s(S2e);Ybr=r(tFt,"roformer"),tFt.forEach(t),Kbr=r(zxe," \u2014 "),Pz=n(zxe,"A",{href:!0});var aFt=s(Pz);Zbr=r(aFt,"TFRoFormerForMultipleChoice"),aFt.forEach(t),e2r=r(zxe," (RoFormer model)"),zxe.forEach(t),o2r=i(ie),AE=n(ie,"LI",{});var Qxe=s(AE);R2e=n(Qxe,"STRONG",{});var nFt=s(R2e);r2r=r(nFt,"xlm"),nFt.forEach(t),t2r=r(Qxe," \u2014 "),$z=n(Qxe,"A",{href:!0});var sFt=s($z);a2r=r(sFt,"TFXLMForMultipleChoice"),sFt.forEach(t),n2r=r(Qxe," (XLM model)"),Qxe.forEach(t),s2r=i(ie),yE=n(ie,"LI",{});var Wxe=s(yE);B2e=n(Wxe,"STRONG",{});var lFt=s(B2e);l2r=r(lFt,"xlm-roberta"),lFt.forEach(t),i2r=r(Wxe," \u2014 "),Iz=n(Wxe,"A",{href:!0});var iFt=s(Iz);d2r=r(iFt,"TFXLMRobertaForMultipleChoice"),iFt.forEach(t),c2r=r(Wxe," (XLM-RoBERTa model)"),Wxe.forEach(t),m2r=i(ie),LE=n(ie,"LI",{});var Hxe=s(LE);P2e=n(Hxe,"STRONG",{});var dFt=s(P2e);f2r=r(dFt,"xlnet"),dFt.forEach(t),g2r=r(Hxe," \u2014 "),qz=n(Hxe,"A",{href:!0});var cFt=s(qz);h2r=r(cFt,"TFXLNetForMultipleChoice"),cFt.forEach(t),u2r=r(Hxe," (XLNet model)"),Hxe.forEach(t),ie.forEach(t),p2r=i(Ma),$2e=n(Ma,"P",{});var mFt=s($2e);_2r=r(mFt,"Examples:"),mFt.forEach(t),b2r=i(Ma),f(c8.$$.fragment,Ma),Ma.forEach(t),ei.forEach(t),KBe=i(c),qc=n(c,"H2",{class:!0});var dIe=s(qc);xE=n(dIe,"A",{id:!0,class:!0,href:!0});var fFt=s(xE);I2e=n(fFt,"SPAN",{});var gFt=s(I2e);f(m8.$$.fragment,gFt),gFt.forEach(t),fFt.forEach(t),v2r=i(dIe),q2e=n(dIe,"SPAN",{});var hFt=s(q2e);F2r=r(hFt,"TFAutoModelForTableQuestionAnswering"),hFt.forEach(t),dIe.forEach(t),ZBe=i(c),yr=n(c,"DIV",{class:!0});var ri=s(yr);f(f8.$$.fragment,ri),T2r=i(ri),Nc=n(ri,"P",{});var xJ=s(Nc);M2r=r(xJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Nz=n(xJ,"A",{href:!0});var uFt=s(Nz);E2r=r(uFt,"from_pretrained()"),uFt.forEach(t),C2r=r(xJ," class method or the "),jz=n(xJ,"A",{href:!0});var pFt=s(jz);w2r=r(pFt,"from_config()"),pFt.forEach(t),A2r=r(xJ,` class
method.`),xJ.forEach(t),y2r=i(ri),g8=n(ri,"P",{});var cIe=s(g8);L2r=r(cIe,"This class cannot be instantiated directly using "),N2e=n(cIe,"CODE",{});var _Ft=s(N2e);x2r=r(_Ft,"__init__()"),_Ft.forEach(t),k2r=r(cIe," (throws an error)."),cIe.forEach(t),S2r=i(ri),Tt=n(ri,"DIV",{class:!0});var ti=s(Tt);f(h8.$$.fragment,ti),R2r=i(ti),j2e=n(ti,"P",{});var bFt=s(j2e);B2r=r(bFt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),bFt.forEach(t),P2r=i(ti),jc=n(ti,"P",{});var kJ=s(jc);$2r=r(kJ,`Note:
Loading a model from its configuration file does `),D2e=n(kJ,"STRONG",{});var vFt=s(D2e);I2r=r(vFt,"not"),vFt.forEach(t),q2r=r(kJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Dz=n(kJ,"A",{href:!0});var FFt=s(Dz);N2r=r(FFt,"from_pretrained()"),FFt.forEach(t),j2r=r(kJ," to load the model weights."),kJ.forEach(t),D2r=i(ti),G2e=n(ti,"P",{});var TFt=s(G2e);G2r=r(TFt,"Examples:"),TFt.forEach(t),O2r=i(ti),f(u8.$$.fragment,ti),ti.forEach(t),V2r=i(ri),Mo=n(ri,"DIV",{class:!0});var Ea=s(Mo);f(p8.$$.fragment,Ea),X2r=i(Ea),O2e=n(Ea,"P",{});var MFt=s(O2e);z2r=r(MFt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),MFt.forEach(t),Q2r=i(Ea),wn=n(Ea,"P",{});var mw=s(wn);W2r=r(mw,"The model class to instantiate is selected based on the "),V2e=n(mw,"CODE",{});var EFt=s(V2e);H2r=r(EFt,"model_type"),EFt.forEach(t),U2r=r(mw,` property of the config object (either
passed as an argument or loaded from `),X2e=n(mw,"CODE",{});var CFt=s(X2e);J2r=r(CFt,"pretrained_model_name_or_path"),CFt.forEach(t),Y2r=r(mw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z2e=n(mw,"CODE",{});var wFt=s(z2e);K2r=r(wFt,"pretrained_model_name_or_path"),wFt.forEach(t),Z2r=r(mw,":"),mw.forEach(t),evr=i(Ea),Q2e=n(Ea,"UL",{});var AFt=s(Q2e);kE=n(AFt,"LI",{});var Uxe=s(kE);W2e=n(Uxe,"STRONG",{});var yFt=s(W2e);ovr=r(yFt,"tapas"),yFt.forEach(t),rvr=r(Uxe," \u2014 "),Gz=n(Uxe,"A",{href:!0});var LFt=s(Gz);tvr=r(LFt,"TFTapasForQuestionAnswering"),LFt.forEach(t),avr=r(Uxe," (TAPAS model)"),Uxe.forEach(t),AFt.forEach(t),nvr=i(Ea),H2e=n(Ea,"P",{});var xFt=s(H2e);svr=r(xFt,"Examples:"),xFt.forEach(t),lvr=i(Ea),f(_8.$$.fragment,Ea),Ea.forEach(t),ri.forEach(t),ePe=i(c),Dc=n(c,"H2",{class:!0});var mIe=s(Dc);SE=n(mIe,"A",{id:!0,class:!0,href:!0});var kFt=s(SE);U2e=n(kFt,"SPAN",{});var SFt=s(U2e);f(b8.$$.fragment,SFt),SFt.forEach(t),kFt.forEach(t),ivr=i(mIe),J2e=n(mIe,"SPAN",{});var RFt=s(J2e);dvr=r(RFt,"TFAutoModelForTokenClassification"),RFt.forEach(t),mIe.forEach(t),oPe=i(c),Lr=n(c,"DIV",{class:!0});var ai=s(Lr);f(v8.$$.fragment,ai),cvr=i(ai),Gc=n(ai,"P",{});var SJ=s(Gc);mvr=r(SJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Oz=n(SJ,"A",{href:!0});var BFt=s(Oz);fvr=r(BFt,"from_pretrained()"),BFt.forEach(t),gvr=r(SJ," class method or the "),Vz=n(SJ,"A",{href:!0});var PFt=s(Vz);hvr=r(PFt,"from_config()"),PFt.forEach(t),uvr=r(SJ,` class
method.`),SJ.forEach(t),pvr=i(ai),F8=n(ai,"P",{});var fIe=s(F8);_vr=r(fIe,"This class cannot be instantiated directly using "),Y2e=n(fIe,"CODE",{});var $Ft=s(Y2e);bvr=r($Ft,"__init__()"),$Ft.forEach(t),vvr=r(fIe," (throws an error)."),fIe.forEach(t),Fvr=i(ai),Mt=n(ai,"DIV",{class:!0});var ni=s(Mt);f(T8.$$.fragment,ni),Tvr=i(ni),K2e=n(ni,"P",{});var IFt=s(K2e);Mvr=r(IFt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),IFt.forEach(t),Evr=i(ni),Oc=n(ni,"P",{});var RJ=s(Oc);Cvr=r(RJ,`Note:
Loading a model from its configuration file does `),Z2e=n(RJ,"STRONG",{});var qFt=s(Z2e);wvr=r(qFt,"not"),qFt.forEach(t),Avr=r(RJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Xz=n(RJ,"A",{href:!0});var NFt=s(Xz);yvr=r(NFt,"from_pretrained()"),NFt.forEach(t),Lvr=r(RJ," to load the model weights."),RJ.forEach(t),xvr=i(ni),eve=n(ni,"P",{});var jFt=s(eve);kvr=r(jFt,"Examples:"),jFt.forEach(t),Svr=i(ni),f(M8.$$.fragment,ni),ni.forEach(t),Rvr=i(ai),Eo=n(ai,"DIV",{class:!0});var Ca=s(Eo);f(E8.$$.fragment,Ca),Bvr=i(Ca),ove=n(Ca,"P",{});var DFt=s(ove);Pvr=r(DFt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),DFt.forEach(t),$vr=i(Ca),An=n(Ca,"P",{});var fw=s(An);Ivr=r(fw,"The model class to instantiate is selected based on the "),rve=n(fw,"CODE",{});var GFt=s(rve);qvr=r(GFt,"model_type"),GFt.forEach(t),Nvr=r(fw,` property of the config object (either
passed as an argument or loaded from `),tve=n(fw,"CODE",{});var OFt=s(tve);jvr=r(OFt,"pretrained_model_name_or_path"),OFt.forEach(t),Dvr=r(fw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ave=n(fw,"CODE",{});var VFt=s(ave);Gvr=r(VFt,"pretrained_model_name_or_path"),VFt.forEach(t),Ovr=r(fw,":"),fw.forEach(t),Vvr=i(Ca),Y=n(Ca,"UL",{});var re=s(Y);RE=n(re,"LI",{});var Jxe=s(RE);nve=n(Jxe,"STRONG",{});var XFt=s(nve);Xvr=r(XFt,"albert"),XFt.forEach(t),zvr=r(Jxe," \u2014 "),zz=n(Jxe,"A",{href:!0});var zFt=s(zz);Qvr=r(zFt,"TFAlbertForTokenClassification"),zFt.forEach(t),Wvr=r(Jxe," (ALBERT model)"),Jxe.forEach(t),Hvr=i(re),BE=n(re,"LI",{});var Yxe=s(BE);sve=n(Yxe,"STRONG",{});var QFt=s(sve);Uvr=r(QFt,"bert"),QFt.forEach(t),Jvr=r(Yxe," \u2014 "),Qz=n(Yxe,"A",{href:!0});var WFt=s(Qz);Yvr=r(WFt,"TFBertForTokenClassification"),WFt.forEach(t),Kvr=r(Yxe," (BERT model)"),Yxe.forEach(t),Zvr=i(re),PE=n(re,"LI",{});var Kxe=s(PE);lve=n(Kxe,"STRONG",{});var HFt=s(lve);eFr=r(HFt,"camembert"),HFt.forEach(t),oFr=r(Kxe," \u2014 "),Wz=n(Kxe,"A",{href:!0});var UFt=s(Wz);rFr=r(UFt,"TFCamembertForTokenClassification"),UFt.forEach(t),tFr=r(Kxe," (CamemBERT model)"),Kxe.forEach(t),aFr=i(re),$E=n(re,"LI",{});var Zxe=s($E);ive=n(Zxe,"STRONG",{});var JFt=s(ive);nFr=r(JFt,"convbert"),JFt.forEach(t),sFr=r(Zxe," \u2014 "),Hz=n(Zxe,"A",{href:!0});var YFt=s(Hz);lFr=r(YFt,"TFConvBertForTokenClassification"),YFt.forEach(t),iFr=r(Zxe," (ConvBERT model)"),Zxe.forEach(t),dFr=i(re),IE=n(re,"LI",{});var eke=s(IE);dve=n(eke,"STRONG",{});var KFt=s(dve);cFr=r(KFt,"deberta"),KFt.forEach(t),mFr=r(eke," \u2014 "),Uz=n(eke,"A",{href:!0});var ZFt=s(Uz);fFr=r(ZFt,"TFDebertaForTokenClassification"),ZFt.forEach(t),gFr=r(eke," (DeBERTa model)"),eke.forEach(t),hFr=i(re),qE=n(re,"LI",{});var oke=s(qE);cve=n(oke,"STRONG",{});var e1t=s(cve);uFr=r(e1t,"deberta-v2"),e1t.forEach(t),pFr=r(oke," \u2014 "),Jz=n(oke,"A",{href:!0});var o1t=s(Jz);_Fr=r(o1t,"TFDebertaV2ForTokenClassification"),o1t.forEach(t),bFr=r(oke," (DeBERTa-v2 model)"),oke.forEach(t),vFr=i(re),NE=n(re,"LI",{});var rke=s(NE);mve=n(rke,"STRONG",{});var r1t=s(mve);FFr=r(r1t,"distilbert"),r1t.forEach(t),TFr=r(rke," \u2014 "),Yz=n(rke,"A",{href:!0});var t1t=s(Yz);MFr=r(t1t,"TFDistilBertForTokenClassification"),t1t.forEach(t),EFr=r(rke," (DistilBERT model)"),rke.forEach(t),CFr=i(re),jE=n(re,"LI",{});var tke=s(jE);fve=n(tke,"STRONG",{});var a1t=s(fve);wFr=r(a1t,"electra"),a1t.forEach(t),AFr=r(tke," \u2014 "),Kz=n(tke,"A",{href:!0});var n1t=s(Kz);yFr=r(n1t,"TFElectraForTokenClassification"),n1t.forEach(t),LFr=r(tke," (ELECTRA model)"),tke.forEach(t),xFr=i(re),DE=n(re,"LI",{});var ake=s(DE);gve=n(ake,"STRONG",{});var s1t=s(gve);kFr=r(s1t,"flaubert"),s1t.forEach(t),SFr=r(ake," \u2014 "),Zz=n(ake,"A",{href:!0});var l1t=s(Zz);RFr=r(l1t,"TFFlaubertForTokenClassification"),l1t.forEach(t),BFr=r(ake," (FlauBERT model)"),ake.forEach(t),PFr=i(re),GE=n(re,"LI",{});var nke=s(GE);hve=n(nke,"STRONG",{});var i1t=s(hve);$Fr=r(i1t,"funnel"),i1t.forEach(t),IFr=r(nke," \u2014 "),eQ=n(nke,"A",{href:!0});var d1t=s(eQ);qFr=r(d1t,"TFFunnelForTokenClassification"),d1t.forEach(t),NFr=r(nke," (Funnel Transformer model)"),nke.forEach(t),jFr=i(re),OE=n(re,"LI",{});var ske=s(OE);uve=n(ske,"STRONG",{});var c1t=s(uve);DFr=r(c1t,"layoutlm"),c1t.forEach(t),GFr=r(ske," \u2014 "),oQ=n(ske,"A",{href:!0});var m1t=s(oQ);OFr=r(m1t,"TFLayoutLMForTokenClassification"),m1t.forEach(t),VFr=r(ske," (LayoutLM model)"),ske.forEach(t),XFr=i(re),VE=n(re,"LI",{});var lke=s(VE);pve=n(lke,"STRONG",{});var f1t=s(pve);zFr=r(f1t,"longformer"),f1t.forEach(t),QFr=r(lke," \u2014 "),rQ=n(lke,"A",{href:!0});var g1t=s(rQ);WFr=r(g1t,"TFLongformerForTokenClassification"),g1t.forEach(t),HFr=r(lke," (Longformer model)"),lke.forEach(t),UFr=i(re),XE=n(re,"LI",{});var ike=s(XE);_ve=n(ike,"STRONG",{});var h1t=s(_ve);JFr=r(h1t,"mobilebert"),h1t.forEach(t),YFr=r(ike," \u2014 "),tQ=n(ike,"A",{href:!0});var u1t=s(tQ);KFr=r(u1t,"TFMobileBertForTokenClassification"),u1t.forEach(t),ZFr=r(ike," (MobileBERT model)"),ike.forEach(t),e1r=i(re),zE=n(re,"LI",{});var dke=s(zE);bve=n(dke,"STRONG",{});var p1t=s(bve);o1r=r(p1t,"mpnet"),p1t.forEach(t),r1r=r(dke," \u2014 "),aQ=n(dke,"A",{href:!0});var _1t=s(aQ);t1r=r(_1t,"TFMPNetForTokenClassification"),_1t.forEach(t),a1r=r(dke," (MPNet model)"),dke.forEach(t),n1r=i(re),QE=n(re,"LI",{});var cke=s(QE);vve=n(cke,"STRONG",{});var b1t=s(vve);s1r=r(b1t,"rembert"),b1t.forEach(t),l1r=r(cke," \u2014 "),nQ=n(cke,"A",{href:!0});var v1t=s(nQ);i1r=r(v1t,"TFRemBertForTokenClassification"),v1t.forEach(t),d1r=r(cke," (RemBERT model)"),cke.forEach(t),c1r=i(re),WE=n(re,"LI",{});var mke=s(WE);Fve=n(mke,"STRONG",{});var F1t=s(Fve);m1r=r(F1t,"roberta"),F1t.forEach(t),f1r=r(mke," \u2014 "),sQ=n(mke,"A",{href:!0});var T1t=s(sQ);g1r=r(T1t,"TFRobertaForTokenClassification"),T1t.forEach(t),h1r=r(mke," (RoBERTa model)"),mke.forEach(t),u1r=i(re),HE=n(re,"LI",{});var fke=s(HE);Tve=n(fke,"STRONG",{});var M1t=s(Tve);p1r=r(M1t,"roformer"),M1t.forEach(t),_1r=r(fke," \u2014 "),lQ=n(fke,"A",{href:!0});var E1t=s(lQ);b1r=r(E1t,"TFRoFormerForTokenClassification"),E1t.forEach(t),v1r=r(fke," (RoFormer model)"),fke.forEach(t),F1r=i(re),UE=n(re,"LI",{});var gke=s(UE);Mve=n(gke,"STRONG",{});var C1t=s(Mve);T1r=r(C1t,"xlm"),C1t.forEach(t),M1r=r(gke," \u2014 "),iQ=n(gke,"A",{href:!0});var w1t=s(iQ);E1r=r(w1t,"TFXLMForTokenClassification"),w1t.forEach(t),C1r=r(gke," (XLM model)"),gke.forEach(t),w1r=i(re),JE=n(re,"LI",{});var hke=s(JE);Eve=n(hke,"STRONG",{});var A1t=s(Eve);A1r=r(A1t,"xlm-roberta"),A1t.forEach(t),y1r=r(hke," \u2014 "),dQ=n(hke,"A",{href:!0});var y1t=s(dQ);L1r=r(y1t,"TFXLMRobertaForTokenClassification"),y1t.forEach(t),x1r=r(hke," (XLM-RoBERTa model)"),hke.forEach(t),k1r=i(re),YE=n(re,"LI",{});var uke=s(YE);Cve=n(uke,"STRONG",{});var L1t=s(Cve);S1r=r(L1t,"xlnet"),L1t.forEach(t),R1r=r(uke," \u2014 "),cQ=n(uke,"A",{href:!0});var x1t=s(cQ);B1r=r(x1t,"TFXLNetForTokenClassification"),x1t.forEach(t),P1r=r(uke," (XLNet model)"),uke.forEach(t),re.forEach(t),$1r=i(Ca),wve=n(Ca,"P",{});var k1t=s(wve);I1r=r(k1t,"Examples:"),k1t.forEach(t),q1r=i(Ca),f(C8.$$.fragment,Ca),Ca.forEach(t),ai.forEach(t),rPe=i(c),Vc=n(c,"H2",{class:!0});var gIe=s(Vc);KE=n(gIe,"A",{id:!0,class:!0,href:!0});var S1t=s(KE);Ave=n(S1t,"SPAN",{});var R1t=s(Ave);f(w8.$$.fragment,R1t),R1t.forEach(t),S1t.forEach(t),N1r=i(gIe),yve=n(gIe,"SPAN",{});var B1t=s(yve);j1r=r(B1t,"TFAutoModelForQuestionAnswering"),B1t.forEach(t),gIe.forEach(t),tPe=i(c),xr=n(c,"DIV",{class:!0});var si=s(xr);f(A8.$$.fragment,si),D1r=i(si),Xc=n(si,"P",{});var BJ=s(Xc);G1r=r(BJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),mQ=n(BJ,"A",{href:!0});var P1t=s(mQ);O1r=r(P1t,"from_pretrained()"),P1t.forEach(t),V1r=r(BJ," class method or the "),fQ=n(BJ,"A",{href:!0});var $1t=s(fQ);X1r=r($1t,"from_config()"),$1t.forEach(t),z1r=r(BJ,` class
method.`),BJ.forEach(t),Q1r=i(si),y8=n(si,"P",{});var hIe=s(y8);W1r=r(hIe,"This class cannot be instantiated directly using "),Lve=n(hIe,"CODE",{});var I1t=s(Lve);H1r=r(I1t,"__init__()"),I1t.forEach(t),U1r=r(hIe," (throws an error)."),hIe.forEach(t),J1r=i(si),Et=n(si,"DIV",{class:!0});var li=s(Et);f(L8.$$.fragment,li),Y1r=i(li),xve=n(li,"P",{});var q1t=s(xve);K1r=r(q1t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),q1t.forEach(t),Z1r=i(li),zc=n(li,"P",{});var PJ=s(zc);eTr=r(PJ,`Note:
Loading a model from its configuration file does `),kve=n(PJ,"STRONG",{});var N1t=s(kve);oTr=r(N1t,"not"),N1t.forEach(t),rTr=r(PJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),gQ=n(PJ,"A",{href:!0});var j1t=s(gQ);tTr=r(j1t,"from_pretrained()"),j1t.forEach(t),aTr=r(PJ," to load the model weights."),PJ.forEach(t),nTr=i(li),Sve=n(li,"P",{});var D1t=s(Sve);sTr=r(D1t,"Examples:"),D1t.forEach(t),lTr=i(li),f(x8.$$.fragment,li),li.forEach(t),iTr=i(si),Co=n(si,"DIV",{class:!0});var wa=s(Co);f(k8.$$.fragment,wa),dTr=i(wa),Rve=n(wa,"P",{});var G1t=s(Rve);cTr=r(G1t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),G1t.forEach(t),mTr=i(wa),yn=n(wa,"P",{});var gw=s(yn);fTr=r(gw,"The model class to instantiate is selected based on the "),Bve=n(gw,"CODE",{});var O1t=s(Bve);gTr=r(O1t,"model_type"),O1t.forEach(t),hTr=r(gw,` property of the config object (either
passed as an argument or loaded from `),Pve=n(gw,"CODE",{});var V1t=s(Pve);uTr=r(V1t,"pretrained_model_name_or_path"),V1t.forEach(t),pTr=r(gw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$ve=n(gw,"CODE",{});var X1t=s($ve);_Tr=r(X1t,"pretrained_model_name_or_path"),X1t.forEach(t),bTr=r(gw,":"),gw.forEach(t),vTr=i(wa),K=n(wa,"UL",{});var te=s(K);ZE=n(te,"LI",{});var pke=s(ZE);Ive=n(pke,"STRONG",{});var z1t=s(Ive);FTr=r(z1t,"albert"),z1t.forEach(t),TTr=r(pke," \u2014 "),hQ=n(pke,"A",{href:!0});var Q1t=s(hQ);MTr=r(Q1t,"TFAlbertForQuestionAnswering"),Q1t.forEach(t),ETr=r(pke," (ALBERT model)"),pke.forEach(t),CTr=i(te),e5=n(te,"LI",{});var _ke=s(e5);qve=n(_ke,"STRONG",{});var W1t=s(qve);wTr=r(W1t,"bert"),W1t.forEach(t),ATr=r(_ke," \u2014 "),uQ=n(_ke,"A",{href:!0});var H1t=s(uQ);yTr=r(H1t,"TFBertForQuestionAnswering"),H1t.forEach(t),LTr=r(_ke," (BERT model)"),_ke.forEach(t),xTr=i(te),o5=n(te,"LI",{});var bke=s(o5);Nve=n(bke,"STRONG",{});var U1t=s(Nve);kTr=r(U1t,"camembert"),U1t.forEach(t),STr=r(bke," \u2014 "),pQ=n(bke,"A",{href:!0});var J1t=s(pQ);RTr=r(J1t,"TFCamembertForQuestionAnswering"),J1t.forEach(t),BTr=r(bke," (CamemBERT model)"),bke.forEach(t),PTr=i(te),r5=n(te,"LI",{});var vke=s(r5);jve=n(vke,"STRONG",{});var Y1t=s(jve);$Tr=r(Y1t,"convbert"),Y1t.forEach(t),ITr=r(vke," \u2014 "),_Q=n(vke,"A",{href:!0});var K1t=s(_Q);qTr=r(K1t,"TFConvBertForQuestionAnswering"),K1t.forEach(t),NTr=r(vke," (ConvBERT model)"),vke.forEach(t),jTr=i(te),t5=n(te,"LI",{});var Fke=s(t5);Dve=n(Fke,"STRONG",{});var Z1t=s(Dve);DTr=r(Z1t,"deberta"),Z1t.forEach(t),GTr=r(Fke," \u2014 "),bQ=n(Fke,"A",{href:!0});var eTt=s(bQ);OTr=r(eTt,"TFDebertaForQuestionAnswering"),eTt.forEach(t),VTr=r(Fke," (DeBERTa model)"),Fke.forEach(t),XTr=i(te),a5=n(te,"LI",{});var Tke=s(a5);Gve=n(Tke,"STRONG",{});var oTt=s(Gve);zTr=r(oTt,"deberta-v2"),oTt.forEach(t),QTr=r(Tke," \u2014 "),vQ=n(Tke,"A",{href:!0});var rTt=s(vQ);WTr=r(rTt,"TFDebertaV2ForQuestionAnswering"),rTt.forEach(t),HTr=r(Tke," (DeBERTa-v2 model)"),Tke.forEach(t),UTr=i(te),n5=n(te,"LI",{});var Mke=s(n5);Ove=n(Mke,"STRONG",{});var tTt=s(Ove);JTr=r(tTt,"distilbert"),tTt.forEach(t),YTr=r(Mke," \u2014 "),FQ=n(Mke,"A",{href:!0});var aTt=s(FQ);KTr=r(aTt,"TFDistilBertForQuestionAnswering"),aTt.forEach(t),ZTr=r(Mke," (DistilBERT model)"),Mke.forEach(t),eMr=i(te),s5=n(te,"LI",{});var Eke=s(s5);Vve=n(Eke,"STRONG",{});var nTt=s(Vve);oMr=r(nTt,"electra"),nTt.forEach(t),rMr=r(Eke," \u2014 "),TQ=n(Eke,"A",{href:!0});var sTt=s(TQ);tMr=r(sTt,"TFElectraForQuestionAnswering"),sTt.forEach(t),aMr=r(Eke," (ELECTRA model)"),Eke.forEach(t),nMr=i(te),l5=n(te,"LI",{});var Cke=s(l5);Xve=n(Cke,"STRONG",{});var lTt=s(Xve);sMr=r(lTt,"flaubert"),lTt.forEach(t),lMr=r(Cke," \u2014 "),MQ=n(Cke,"A",{href:!0});var iTt=s(MQ);iMr=r(iTt,"TFFlaubertForQuestionAnsweringSimple"),iTt.forEach(t),dMr=r(Cke," (FlauBERT model)"),Cke.forEach(t),cMr=i(te),i5=n(te,"LI",{});var wke=s(i5);zve=n(wke,"STRONG",{});var dTt=s(zve);mMr=r(dTt,"funnel"),dTt.forEach(t),fMr=r(wke," \u2014 "),EQ=n(wke,"A",{href:!0});var cTt=s(EQ);gMr=r(cTt,"TFFunnelForQuestionAnswering"),cTt.forEach(t),hMr=r(wke," (Funnel Transformer model)"),wke.forEach(t),uMr=i(te),d5=n(te,"LI",{});var Ake=s(d5);Qve=n(Ake,"STRONG",{});var mTt=s(Qve);pMr=r(mTt,"gptj"),mTt.forEach(t),_Mr=r(Ake," \u2014 "),CQ=n(Ake,"A",{href:!0});var fTt=s(CQ);bMr=r(fTt,"TFGPTJForQuestionAnswering"),fTt.forEach(t),vMr=r(Ake," (GPT-J model)"),Ake.forEach(t),FMr=i(te),c5=n(te,"LI",{});var yke=s(c5);Wve=n(yke,"STRONG",{});var gTt=s(Wve);TMr=r(gTt,"longformer"),gTt.forEach(t),MMr=r(yke," \u2014 "),wQ=n(yke,"A",{href:!0});var hTt=s(wQ);EMr=r(hTt,"TFLongformerForQuestionAnswering"),hTt.forEach(t),CMr=r(yke," (Longformer model)"),yke.forEach(t),wMr=i(te),m5=n(te,"LI",{});var Lke=s(m5);Hve=n(Lke,"STRONG",{});var uTt=s(Hve);AMr=r(uTt,"mobilebert"),uTt.forEach(t),yMr=r(Lke," \u2014 "),AQ=n(Lke,"A",{href:!0});var pTt=s(AQ);LMr=r(pTt,"TFMobileBertForQuestionAnswering"),pTt.forEach(t),xMr=r(Lke," (MobileBERT model)"),Lke.forEach(t),kMr=i(te),f5=n(te,"LI",{});var xke=s(f5);Uve=n(xke,"STRONG",{});var _Tt=s(Uve);SMr=r(_Tt,"mpnet"),_Tt.forEach(t),RMr=r(xke," \u2014 "),yQ=n(xke,"A",{href:!0});var bTt=s(yQ);BMr=r(bTt,"TFMPNetForQuestionAnswering"),bTt.forEach(t),PMr=r(xke," (MPNet model)"),xke.forEach(t),$Mr=i(te),g5=n(te,"LI",{});var kke=s(g5);Jve=n(kke,"STRONG",{});var vTt=s(Jve);IMr=r(vTt,"rembert"),vTt.forEach(t),qMr=r(kke," \u2014 "),LQ=n(kke,"A",{href:!0});var FTt=s(LQ);NMr=r(FTt,"TFRemBertForQuestionAnswering"),FTt.forEach(t),jMr=r(kke," (RemBERT model)"),kke.forEach(t),DMr=i(te),h5=n(te,"LI",{});var Ske=s(h5);Yve=n(Ske,"STRONG",{});var TTt=s(Yve);GMr=r(TTt,"roberta"),TTt.forEach(t),OMr=r(Ske," \u2014 "),xQ=n(Ske,"A",{href:!0});var MTt=s(xQ);VMr=r(MTt,"TFRobertaForQuestionAnswering"),MTt.forEach(t),XMr=r(Ske," (RoBERTa model)"),Ske.forEach(t),zMr=i(te),u5=n(te,"LI",{});var Rke=s(u5);Kve=n(Rke,"STRONG",{});var ETt=s(Kve);QMr=r(ETt,"roformer"),ETt.forEach(t),WMr=r(Rke," \u2014 "),kQ=n(Rke,"A",{href:!0});var CTt=s(kQ);HMr=r(CTt,"TFRoFormerForQuestionAnswering"),CTt.forEach(t),UMr=r(Rke," (RoFormer model)"),Rke.forEach(t),JMr=i(te),p5=n(te,"LI",{});var Bke=s(p5);Zve=n(Bke,"STRONG",{});var wTt=s(Zve);YMr=r(wTt,"xlm"),wTt.forEach(t),KMr=r(Bke," \u2014 "),SQ=n(Bke,"A",{href:!0});var ATt=s(SQ);ZMr=r(ATt,"TFXLMForQuestionAnsweringSimple"),ATt.forEach(t),e4r=r(Bke," (XLM model)"),Bke.forEach(t),o4r=i(te),_5=n(te,"LI",{});var Pke=s(_5);eFe=n(Pke,"STRONG",{});var yTt=s(eFe);r4r=r(yTt,"xlm-roberta"),yTt.forEach(t),t4r=r(Pke," \u2014 "),RQ=n(Pke,"A",{href:!0});var LTt=s(RQ);a4r=r(LTt,"TFXLMRobertaForQuestionAnswering"),LTt.forEach(t),n4r=r(Pke," (XLM-RoBERTa model)"),Pke.forEach(t),s4r=i(te),b5=n(te,"LI",{});var $ke=s(b5);oFe=n($ke,"STRONG",{});var xTt=s(oFe);l4r=r(xTt,"xlnet"),xTt.forEach(t),i4r=r($ke," \u2014 "),BQ=n($ke,"A",{href:!0});var kTt=s(BQ);d4r=r(kTt,"TFXLNetForQuestionAnsweringSimple"),kTt.forEach(t),c4r=r($ke," (XLNet model)"),$ke.forEach(t),te.forEach(t),m4r=i(wa),rFe=n(wa,"P",{});var STt=s(rFe);f4r=r(STt,"Examples:"),STt.forEach(t),g4r=i(wa),f(S8.$$.fragment,wa),wa.forEach(t),si.forEach(t),aPe=i(c),Qc=n(c,"H2",{class:!0});var uIe=s(Qc);v5=n(uIe,"A",{id:!0,class:!0,href:!0});var RTt=s(v5);tFe=n(RTt,"SPAN",{});var BTt=s(tFe);f(R8.$$.fragment,BTt),BTt.forEach(t),RTt.forEach(t),h4r=i(uIe),aFe=n(uIe,"SPAN",{});var PTt=s(aFe);u4r=r(PTt,"TFAutoModelForVision2Seq"),PTt.forEach(t),uIe.forEach(t),nPe=i(c),kr=n(c,"DIV",{class:!0});var ii=s(kr);f(B8.$$.fragment,ii),p4r=i(ii),Wc=n(ii,"P",{});var $J=s(Wc);_4r=r($J,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),PQ=n($J,"A",{href:!0});var $Tt=s(PQ);b4r=r($Tt,"from_pretrained()"),$Tt.forEach(t),v4r=r($J," class method or the "),$Q=n($J,"A",{href:!0});var ITt=s($Q);F4r=r(ITt,"from_config()"),ITt.forEach(t),T4r=r($J,` class
method.`),$J.forEach(t),M4r=i(ii),P8=n(ii,"P",{});var pIe=s(P8);E4r=r(pIe,"This class cannot be instantiated directly using "),nFe=n(pIe,"CODE",{});var qTt=s(nFe);C4r=r(qTt,"__init__()"),qTt.forEach(t),w4r=r(pIe," (throws an error)."),pIe.forEach(t),A4r=i(ii),Ct=n(ii,"DIV",{class:!0});var di=s(Ct);f($8.$$.fragment,di),y4r=i(di),sFe=n(di,"P",{});var NTt=s(sFe);L4r=r(NTt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),NTt.forEach(t),x4r=i(di),Hc=n(di,"P",{});var IJ=s(Hc);k4r=r(IJ,`Note:
Loading a model from its configuration file does `),lFe=n(IJ,"STRONG",{});var jTt=s(lFe);S4r=r(jTt,"not"),jTt.forEach(t),R4r=r(IJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),IQ=n(IJ,"A",{href:!0});var DTt=s(IQ);B4r=r(DTt,"from_pretrained()"),DTt.forEach(t),P4r=r(IJ," to load the model weights."),IJ.forEach(t),$4r=i(di),iFe=n(di,"P",{});var GTt=s(iFe);I4r=r(GTt,"Examples:"),GTt.forEach(t),q4r=i(di),f(I8.$$.fragment,di),di.forEach(t),N4r=i(ii),wo=n(ii,"DIV",{class:!0});var Aa=s(wo);f(q8.$$.fragment,Aa),j4r=i(Aa),dFe=n(Aa,"P",{});var OTt=s(dFe);D4r=r(OTt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),OTt.forEach(t),G4r=i(Aa),Ln=n(Aa,"P",{});var hw=s(Ln);O4r=r(hw,"The model class to instantiate is selected based on the "),cFe=n(hw,"CODE",{});var VTt=s(cFe);V4r=r(VTt,"model_type"),VTt.forEach(t),X4r=r(hw,` property of the config object (either
passed as an argument or loaded from `),mFe=n(hw,"CODE",{});var XTt=s(mFe);z4r=r(XTt,"pretrained_model_name_or_path"),XTt.forEach(t),Q4r=r(hw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fFe=n(hw,"CODE",{});var zTt=s(fFe);W4r=r(zTt,"pretrained_model_name_or_path"),zTt.forEach(t),H4r=r(hw,":"),hw.forEach(t),U4r=i(Aa),gFe=n(Aa,"UL",{});var QTt=s(gFe);F5=n(QTt,"LI",{});var Ike=s(F5);hFe=n(Ike,"STRONG",{});var WTt=s(hFe);J4r=r(WTt,"vision-encoder-decoder"),WTt.forEach(t),Y4r=r(Ike," \u2014 "),qQ=n(Ike,"A",{href:!0});var HTt=s(qQ);K4r=r(HTt,"TFVisionEncoderDecoderModel"),HTt.forEach(t),Z4r=r(Ike," (Vision Encoder decoder model)"),Ike.forEach(t),QTt.forEach(t),eEr=i(Aa),uFe=n(Aa,"P",{});var UTt=s(uFe);oEr=r(UTt,"Examples:"),UTt.forEach(t),rEr=i(Aa),f(N8.$$.fragment,Aa),Aa.forEach(t),ii.forEach(t),sPe=i(c),Uc=n(c,"H2",{class:!0});var _Ie=s(Uc);T5=n(_Ie,"A",{id:!0,class:!0,href:!0});var JTt=s(T5);pFe=n(JTt,"SPAN",{});var YTt=s(pFe);f(j8.$$.fragment,YTt),YTt.forEach(t),JTt.forEach(t),tEr=i(_Ie),_Fe=n(_Ie,"SPAN",{});var KTt=s(_Fe);aEr=r(KTt,"TFAutoModelForSpeechSeq2Seq"),KTt.forEach(t),_Ie.forEach(t),lPe=i(c),Sr=n(c,"DIV",{class:!0});var ci=s(Sr);f(D8.$$.fragment,ci),nEr=i(ci),Jc=n(ci,"P",{});var qJ=s(Jc);sEr=r(qJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),NQ=n(qJ,"A",{href:!0});var ZTt=s(NQ);lEr=r(ZTt,"from_pretrained()"),ZTt.forEach(t),iEr=r(qJ," class method or the "),jQ=n(qJ,"A",{href:!0});var eMt=s(jQ);dEr=r(eMt,"from_config()"),eMt.forEach(t),cEr=r(qJ,` class
method.`),qJ.forEach(t),mEr=i(ci),G8=n(ci,"P",{});var bIe=s(G8);fEr=r(bIe,"This class cannot be instantiated directly using "),bFe=n(bIe,"CODE",{});var oMt=s(bFe);gEr=r(oMt,"__init__()"),oMt.forEach(t),hEr=r(bIe," (throws an error)."),bIe.forEach(t),uEr=i(ci),wt=n(ci,"DIV",{class:!0});var mi=s(wt);f(O8.$$.fragment,mi),pEr=i(mi),vFe=n(mi,"P",{});var rMt=s(vFe);_Er=r(rMt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),rMt.forEach(t),bEr=i(mi),Yc=n(mi,"P",{});var NJ=s(Yc);vEr=r(NJ,`Note:
Loading a model from its configuration file does `),FFe=n(NJ,"STRONG",{});var tMt=s(FFe);FEr=r(tMt,"not"),tMt.forEach(t),TEr=r(NJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),DQ=n(NJ,"A",{href:!0});var aMt=s(DQ);MEr=r(aMt,"from_pretrained()"),aMt.forEach(t),EEr=r(NJ," to load the model weights."),NJ.forEach(t),CEr=i(mi),TFe=n(mi,"P",{});var nMt=s(TFe);wEr=r(nMt,"Examples:"),nMt.forEach(t),AEr=i(mi),f(V8.$$.fragment,mi),mi.forEach(t),yEr=i(ci),Ao=n(ci,"DIV",{class:!0});var ya=s(Ao);f(X8.$$.fragment,ya),LEr=i(ya),MFe=n(ya,"P",{});var sMt=s(MFe);xEr=r(sMt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),sMt.forEach(t),kEr=i(ya),xn=n(ya,"P",{});var uw=s(xn);SEr=r(uw,"The model class to instantiate is selected based on the "),EFe=n(uw,"CODE",{});var lMt=s(EFe);REr=r(lMt,"model_type"),lMt.forEach(t),BEr=r(uw,` property of the config object (either
passed as an argument or loaded from `),CFe=n(uw,"CODE",{});var iMt=s(CFe);PEr=r(iMt,"pretrained_model_name_or_path"),iMt.forEach(t),$Er=r(uw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wFe=n(uw,"CODE",{});var dMt=s(wFe);IEr=r(dMt,"pretrained_model_name_or_path"),dMt.forEach(t),qEr=r(uw,":"),uw.forEach(t),NEr=i(ya),AFe=n(ya,"UL",{});var cMt=s(AFe);M5=n(cMt,"LI",{});var qke=s(M5);yFe=n(qke,"STRONG",{});var mMt=s(yFe);jEr=r(mMt,"speech_to_text"),mMt.forEach(t),DEr=r(qke," \u2014 "),GQ=n(qke,"A",{href:!0});var fMt=s(GQ);GEr=r(fMt,"TFSpeech2TextForConditionalGeneration"),fMt.forEach(t),OEr=r(qke," (Speech2Text model)"),qke.forEach(t),cMt.forEach(t),VEr=i(ya),LFe=n(ya,"P",{});var gMt=s(LFe);XEr=r(gMt,"Examples:"),gMt.forEach(t),zEr=i(ya),f(z8.$$.fragment,ya),ya.forEach(t),ci.forEach(t),iPe=i(c),Kc=n(c,"H2",{class:!0});var vIe=s(Kc);E5=n(vIe,"A",{id:!0,class:!0,href:!0});var hMt=s(E5);xFe=n(hMt,"SPAN",{});var uMt=s(xFe);f(Q8.$$.fragment,uMt),uMt.forEach(t),hMt.forEach(t),QEr=i(vIe),kFe=n(vIe,"SPAN",{});var pMt=s(kFe);WEr=r(pMt,"FlaxAutoModel"),pMt.forEach(t),vIe.forEach(t),dPe=i(c),Rr=n(c,"DIV",{class:!0});var fi=s(Rr);f(W8.$$.fragment,fi),HEr=i(fi),Zc=n(fi,"P",{});var jJ=s(Zc);UEr=r(jJ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),OQ=n(jJ,"A",{href:!0});var _Mt=s(OQ);JEr=r(_Mt,"from_pretrained()"),_Mt.forEach(t),YEr=r(jJ," class method or the "),VQ=n(jJ,"A",{href:!0});var bMt=s(VQ);KEr=r(bMt,"from_config()"),bMt.forEach(t),ZEr=r(jJ,` class
method.`),jJ.forEach(t),e5r=i(fi),H8=n(fi,"P",{});var FIe=s(H8);o5r=r(FIe,"This class cannot be instantiated directly using "),SFe=n(FIe,"CODE",{});var vMt=s(SFe);r5r=r(vMt,"__init__()"),vMt.forEach(t),t5r=r(FIe," (throws an error)."),FIe.forEach(t),a5r=i(fi),At=n(fi,"DIV",{class:!0});var gi=s(At);f(U8.$$.fragment,gi),n5r=i(gi),RFe=n(gi,"P",{});var FMt=s(RFe);s5r=r(FMt,"Instantiates one of the base model classes of the library from a configuration."),FMt.forEach(t),l5r=i(gi),em=n(gi,"P",{});var DJ=s(em);i5r=r(DJ,`Note:
Loading a model from its configuration file does `),BFe=n(DJ,"STRONG",{});var TMt=s(BFe);d5r=r(TMt,"not"),TMt.forEach(t),c5r=r(DJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),XQ=n(DJ,"A",{href:!0});var MMt=s(XQ);m5r=r(MMt,"from_pretrained()"),MMt.forEach(t),f5r=r(DJ," to load the model weights."),DJ.forEach(t),g5r=i(gi),PFe=n(gi,"P",{});var EMt=s(PFe);h5r=r(EMt,"Examples:"),EMt.forEach(t),u5r=i(gi),f(J8.$$.fragment,gi),gi.forEach(t),p5r=i(fi),yo=n(fi,"DIV",{class:!0});var La=s(yo);f(Y8.$$.fragment,La),_5r=i(La),$Fe=n(La,"P",{});var CMt=s($Fe);b5r=r(CMt,"Instantiate one of the base model classes of the library from a pretrained model."),CMt.forEach(t),v5r=i(La),kn=n(La,"P",{});var pw=s(kn);F5r=r(pw,"The model class to instantiate is selected based on the "),IFe=n(pw,"CODE",{});var wMt=s(IFe);T5r=r(wMt,"model_type"),wMt.forEach(t),M5r=r(pw,` property of the config object (either
passed as an argument or loaded from `),qFe=n(pw,"CODE",{});var AMt=s(qFe);E5r=r(AMt,"pretrained_model_name_or_path"),AMt.forEach(t),C5r=r(pw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),NFe=n(pw,"CODE",{});var yMt=s(NFe);w5r=r(yMt,"pretrained_model_name_or_path"),yMt.forEach(t),A5r=r(pw,":"),pw.forEach(t),y5r=i(La),z=n(La,"UL",{});var W=s(z);C5=n(W,"LI",{});var Nke=s(C5);jFe=n(Nke,"STRONG",{});var LMt=s(jFe);L5r=r(LMt,"albert"),LMt.forEach(t),x5r=r(Nke," \u2014 "),zQ=n(Nke,"A",{href:!0});var xMt=s(zQ);k5r=r(xMt,"FlaxAlbertModel"),xMt.forEach(t),S5r=r(Nke," (ALBERT model)"),Nke.forEach(t),R5r=i(W),w5=n(W,"LI",{});var jke=s(w5);DFe=n(jke,"STRONG",{});var kMt=s(DFe);B5r=r(kMt,"bart"),kMt.forEach(t),P5r=r(jke," \u2014 "),QQ=n(jke,"A",{href:!0});var SMt=s(QQ);$5r=r(SMt,"FlaxBartModel"),SMt.forEach(t),I5r=r(jke," (BART model)"),jke.forEach(t),q5r=i(W),A5=n(W,"LI",{});var Dke=s(A5);GFe=n(Dke,"STRONG",{});var RMt=s(GFe);N5r=r(RMt,"beit"),RMt.forEach(t),j5r=r(Dke," \u2014 "),WQ=n(Dke,"A",{href:!0});var BMt=s(WQ);D5r=r(BMt,"FlaxBeitModel"),BMt.forEach(t),G5r=r(Dke," (BEiT model)"),Dke.forEach(t),O5r=i(W),y5=n(W,"LI",{});var Gke=s(y5);OFe=n(Gke,"STRONG",{});var PMt=s(OFe);V5r=r(PMt,"bert"),PMt.forEach(t),X5r=r(Gke," \u2014 "),HQ=n(Gke,"A",{href:!0});var $Mt=s(HQ);z5r=r($Mt,"FlaxBertModel"),$Mt.forEach(t),Q5r=r(Gke," (BERT model)"),Gke.forEach(t),W5r=i(W),L5=n(W,"LI",{});var Oke=s(L5);VFe=n(Oke,"STRONG",{});var IMt=s(VFe);H5r=r(IMt,"big_bird"),IMt.forEach(t),U5r=r(Oke," \u2014 "),UQ=n(Oke,"A",{href:!0});var qMt=s(UQ);J5r=r(qMt,"FlaxBigBirdModel"),qMt.forEach(t),Y5r=r(Oke," (BigBird model)"),Oke.forEach(t),K5r=i(W),x5=n(W,"LI",{});var Vke=s(x5);XFe=n(Vke,"STRONG",{});var NMt=s(XFe);Z5r=r(NMt,"blenderbot"),NMt.forEach(t),e3r=r(Vke," \u2014 "),JQ=n(Vke,"A",{href:!0});var jMt=s(JQ);o3r=r(jMt,"FlaxBlenderbotModel"),jMt.forEach(t),r3r=r(Vke," (Blenderbot model)"),Vke.forEach(t),t3r=i(W),k5=n(W,"LI",{});var Xke=s(k5);zFe=n(Xke,"STRONG",{});var DMt=s(zFe);a3r=r(DMt,"blenderbot-small"),DMt.forEach(t),n3r=r(Xke," \u2014 "),YQ=n(Xke,"A",{href:!0});var GMt=s(YQ);s3r=r(GMt,"FlaxBlenderbotSmallModel"),GMt.forEach(t),l3r=r(Xke," (BlenderbotSmall model)"),Xke.forEach(t),i3r=i(W),S5=n(W,"LI",{});var zke=s(S5);QFe=n(zke,"STRONG",{});var OMt=s(QFe);d3r=r(OMt,"clip"),OMt.forEach(t),c3r=r(zke," \u2014 "),KQ=n(zke,"A",{href:!0});var VMt=s(KQ);m3r=r(VMt,"FlaxCLIPModel"),VMt.forEach(t),f3r=r(zke," (CLIP model)"),zke.forEach(t),g3r=i(W),R5=n(W,"LI",{});var Qke=s(R5);WFe=n(Qke,"STRONG",{});var XMt=s(WFe);h3r=r(XMt,"distilbert"),XMt.forEach(t),u3r=r(Qke," \u2014 "),ZQ=n(Qke,"A",{href:!0});var zMt=s(ZQ);p3r=r(zMt,"FlaxDistilBertModel"),zMt.forEach(t),_3r=r(Qke," (DistilBERT model)"),Qke.forEach(t),b3r=i(W),B5=n(W,"LI",{});var Wke=s(B5);HFe=n(Wke,"STRONG",{});var QMt=s(HFe);v3r=r(QMt,"electra"),QMt.forEach(t),F3r=r(Wke," \u2014 "),eW=n(Wke,"A",{href:!0});var WMt=s(eW);T3r=r(WMt,"FlaxElectraModel"),WMt.forEach(t),M3r=r(Wke," (ELECTRA model)"),Wke.forEach(t),E3r=i(W),P5=n(W,"LI",{});var Hke=s(P5);UFe=n(Hke,"STRONG",{});var HMt=s(UFe);C3r=r(HMt,"gpt2"),HMt.forEach(t),w3r=r(Hke," \u2014 "),oW=n(Hke,"A",{href:!0});var UMt=s(oW);A3r=r(UMt,"FlaxGPT2Model"),UMt.forEach(t),y3r=r(Hke," (OpenAI GPT-2 model)"),Hke.forEach(t),L3r=i(W),$5=n(W,"LI",{});var Uke=s($5);JFe=n(Uke,"STRONG",{});var JMt=s(JFe);x3r=r(JMt,"gpt_neo"),JMt.forEach(t),k3r=r(Uke," \u2014 "),rW=n(Uke,"A",{href:!0});var YMt=s(rW);S3r=r(YMt,"FlaxGPTNeoModel"),YMt.forEach(t),R3r=r(Uke," (GPT Neo model)"),Uke.forEach(t),B3r=i(W),I5=n(W,"LI",{});var Jke=s(I5);YFe=n(Jke,"STRONG",{});var KMt=s(YFe);P3r=r(KMt,"gptj"),KMt.forEach(t),$3r=r(Jke," \u2014 "),tW=n(Jke,"A",{href:!0});var ZMt=s(tW);I3r=r(ZMt,"FlaxGPTJModel"),ZMt.forEach(t),q3r=r(Jke," (GPT-J model)"),Jke.forEach(t),N3r=i(W),q5=n(W,"LI",{});var Yke=s(q5);KFe=n(Yke,"STRONG",{});var e4t=s(KFe);j3r=r(e4t,"marian"),e4t.forEach(t),D3r=r(Yke," \u2014 "),aW=n(Yke,"A",{href:!0});var o4t=s(aW);G3r=r(o4t,"FlaxMarianModel"),o4t.forEach(t),O3r=r(Yke," (Marian model)"),Yke.forEach(t),V3r=i(W),N5=n(W,"LI",{});var Kke=s(N5);ZFe=n(Kke,"STRONG",{});var r4t=s(ZFe);X3r=r(r4t,"mbart"),r4t.forEach(t),z3r=r(Kke," \u2014 "),nW=n(Kke,"A",{href:!0});var t4t=s(nW);Q3r=r(t4t,"FlaxMBartModel"),t4t.forEach(t),W3r=r(Kke," (mBART model)"),Kke.forEach(t),H3r=i(W),j5=n(W,"LI",{});var Zke=s(j5);e1e=n(Zke,"STRONG",{});var a4t=s(e1e);U3r=r(a4t,"mt5"),a4t.forEach(t),J3r=r(Zke," \u2014 "),sW=n(Zke,"A",{href:!0});var n4t=s(sW);Y3r=r(n4t,"FlaxMT5Model"),n4t.forEach(t),K3r=r(Zke," (mT5 model)"),Zke.forEach(t),Z3r=i(W),D5=n(W,"LI",{});var eSe=s(D5);o1e=n(eSe,"STRONG",{});var s4t=s(o1e);eCr=r(s4t,"pegasus"),s4t.forEach(t),oCr=r(eSe," \u2014 "),lW=n(eSe,"A",{href:!0});var l4t=s(lW);rCr=r(l4t,"FlaxPegasusModel"),l4t.forEach(t),tCr=r(eSe," (Pegasus model)"),eSe.forEach(t),aCr=i(W),G5=n(W,"LI",{});var oSe=s(G5);r1e=n(oSe,"STRONG",{});var i4t=s(r1e);nCr=r(i4t,"roberta"),i4t.forEach(t),sCr=r(oSe," \u2014 "),iW=n(oSe,"A",{href:!0});var d4t=s(iW);lCr=r(d4t,"FlaxRobertaModel"),d4t.forEach(t),iCr=r(oSe," (RoBERTa model)"),oSe.forEach(t),dCr=i(W),O5=n(W,"LI",{});var rSe=s(O5);t1e=n(rSe,"STRONG",{});var c4t=s(t1e);cCr=r(c4t,"roformer"),c4t.forEach(t),mCr=r(rSe," \u2014 "),dW=n(rSe,"A",{href:!0});var m4t=s(dW);fCr=r(m4t,"FlaxRoFormerModel"),m4t.forEach(t),gCr=r(rSe," (RoFormer model)"),rSe.forEach(t),hCr=i(W),V5=n(W,"LI",{});var tSe=s(V5);a1e=n(tSe,"STRONG",{});var f4t=s(a1e);uCr=r(f4t,"t5"),f4t.forEach(t),pCr=r(tSe," \u2014 "),cW=n(tSe,"A",{href:!0});var g4t=s(cW);_Cr=r(g4t,"FlaxT5Model"),g4t.forEach(t),bCr=r(tSe," (T5 model)"),tSe.forEach(t),vCr=i(W),X5=n(W,"LI",{});var aSe=s(X5);n1e=n(aSe,"STRONG",{});var h4t=s(n1e);FCr=r(h4t,"vision-text-dual-encoder"),h4t.forEach(t),TCr=r(aSe," \u2014 "),mW=n(aSe,"A",{href:!0});var u4t=s(mW);MCr=r(u4t,"FlaxVisionTextDualEncoderModel"),u4t.forEach(t),ECr=r(aSe," (VisionTextDualEncoder model)"),aSe.forEach(t),CCr=i(W),z5=n(W,"LI",{});var nSe=s(z5);s1e=n(nSe,"STRONG",{});var p4t=s(s1e);wCr=r(p4t,"vit"),p4t.forEach(t),ACr=r(nSe," \u2014 "),fW=n(nSe,"A",{href:!0});var _4t=s(fW);yCr=r(_4t,"FlaxViTModel"),_4t.forEach(t),LCr=r(nSe," (ViT model)"),nSe.forEach(t),xCr=i(W),Q5=n(W,"LI",{});var sSe=s(Q5);l1e=n(sSe,"STRONG",{});var b4t=s(l1e);kCr=r(b4t,"wav2vec2"),b4t.forEach(t),SCr=r(sSe," \u2014 "),gW=n(sSe,"A",{href:!0});var v4t=s(gW);RCr=r(v4t,"FlaxWav2Vec2Model"),v4t.forEach(t),BCr=r(sSe," (Wav2Vec2 model)"),sSe.forEach(t),PCr=i(W),W5=n(W,"LI",{});var lSe=s(W5);i1e=n(lSe,"STRONG",{});var F4t=s(i1e);$Cr=r(F4t,"xglm"),F4t.forEach(t),ICr=r(lSe," \u2014 "),hW=n(lSe,"A",{href:!0});var T4t=s(hW);qCr=r(T4t,"FlaxXGLMModel"),T4t.forEach(t),NCr=r(lSe," (XGLM model)"),lSe.forEach(t),jCr=i(W),H5=n(W,"LI",{});var iSe=s(H5);d1e=n(iSe,"STRONG",{});var M4t=s(d1e);DCr=r(M4t,"xlm-roberta"),M4t.forEach(t),GCr=r(iSe," \u2014 "),uW=n(iSe,"A",{href:!0});var E4t=s(uW);OCr=r(E4t,"FlaxXLMRobertaModel"),E4t.forEach(t),VCr=r(iSe," (XLM-RoBERTa model)"),iSe.forEach(t),W.forEach(t),XCr=i(La),c1e=n(La,"P",{});var C4t=s(c1e);zCr=r(C4t,"Examples:"),C4t.forEach(t),QCr=i(La),f(K8.$$.fragment,La),La.forEach(t),fi.forEach(t),cPe=i(c),om=n(c,"H2",{class:!0});var TIe=s(om);U5=n(TIe,"A",{id:!0,class:!0,href:!0});var w4t=s(U5);m1e=n(w4t,"SPAN",{});var A4t=s(m1e);f(Z8.$$.fragment,A4t),A4t.forEach(t),w4t.forEach(t),WCr=i(TIe),f1e=n(TIe,"SPAN",{});var y4t=s(f1e);HCr=r(y4t,"FlaxAutoModelForCausalLM"),y4t.forEach(t),TIe.forEach(t),mPe=i(c),Br=n(c,"DIV",{class:!0});var hi=s(Br);f(eL.$$.fragment,hi),UCr=i(hi),rm=n(hi,"P",{});var GJ=s(rm);JCr=r(GJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),pW=n(GJ,"A",{href:!0});var L4t=s(pW);YCr=r(L4t,"from_pretrained()"),L4t.forEach(t),KCr=r(GJ," class method or the "),_W=n(GJ,"A",{href:!0});var x4t=s(_W);ZCr=r(x4t,"from_config()"),x4t.forEach(t),ewr=r(GJ,` class
method.`),GJ.forEach(t),owr=i(hi),oL=n(hi,"P",{});var MIe=s(oL);rwr=r(MIe,"This class cannot be instantiated directly using "),g1e=n(MIe,"CODE",{});var k4t=s(g1e);twr=r(k4t,"__init__()"),k4t.forEach(t),awr=r(MIe," (throws an error)."),MIe.forEach(t),nwr=i(hi),yt=n(hi,"DIV",{class:!0});var ui=s(yt);f(rL.$$.fragment,ui),swr=i(ui),h1e=n(ui,"P",{});var S4t=s(h1e);lwr=r(S4t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),S4t.forEach(t),iwr=i(ui),tm=n(ui,"P",{});var OJ=s(tm);dwr=r(OJ,`Note:
Loading a model from its configuration file does `),u1e=n(OJ,"STRONG",{});var R4t=s(u1e);cwr=r(R4t,"not"),R4t.forEach(t),mwr=r(OJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),bW=n(OJ,"A",{href:!0});var B4t=s(bW);fwr=r(B4t,"from_pretrained()"),B4t.forEach(t),gwr=r(OJ," to load the model weights."),OJ.forEach(t),hwr=i(ui),p1e=n(ui,"P",{});var P4t=s(p1e);uwr=r(P4t,"Examples:"),P4t.forEach(t),pwr=i(ui),f(tL.$$.fragment,ui),ui.forEach(t),_wr=i(hi),Lo=n(hi,"DIV",{class:!0});var xa=s(Lo);f(aL.$$.fragment,xa),bwr=i(xa),_1e=n(xa,"P",{});var $4t=s(_1e);vwr=r($4t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),$4t.forEach(t),Fwr=i(xa),Sn=n(xa,"P",{});var _w=s(Sn);Twr=r(_w,"The model class to instantiate is selected based on the "),b1e=n(_w,"CODE",{});var I4t=s(b1e);Mwr=r(I4t,"model_type"),I4t.forEach(t),Ewr=r(_w,` property of the config object (either
passed as an argument or loaded from `),v1e=n(_w,"CODE",{});var q4t=s(v1e);Cwr=r(q4t,"pretrained_model_name_or_path"),q4t.forEach(t),wwr=r(_w,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F1e=n(_w,"CODE",{});var N4t=s(F1e);Awr=r(N4t,"pretrained_model_name_or_path"),N4t.forEach(t),ywr=r(_w,":"),_w.forEach(t),Lwr=i(xa),ca=n(xa,"UL",{});var pi=s(ca);J5=n(pi,"LI",{});var dSe=s(J5);T1e=n(dSe,"STRONG",{});var j4t=s(T1e);xwr=r(j4t,"bart"),j4t.forEach(t),kwr=r(dSe," \u2014 "),vW=n(dSe,"A",{href:!0});var D4t=s(vW);Swr=r(D4t,"FlaxBartForCausalLM"),D4t.forEach(t),Rwr=r(dSe," (BART model)"),dSe.forEach(t),Bwr=i(pi),Y5=n(pi,"LI",{});var cSe=s(Y5);M1e=n(cSe,"STRONG",{});var G4t=s(M1e);Pwr=r(G4t,"gpt2"),G4t.forEach(t),$wr=r(cSe," \u2014 "),FW=n(cSe,"A",{href:!0});var O4t=s(FW);Iwr=r(O4t,"FlaxGPT2LMHeadModel"),O4t.forEach(t),qwr=r(cSe," (OpenAI GPT-2 model)"),cSe.forEach(t),Nwr=i(pi),K5=n(pi,"LI",{});var mSe=s(K5);E1e=n(mSe,"STRONG",{});var V4t=s(E1e);jwr=r(V4t,"gpt_neo"),V4t.forEach(t),Dwr=r(mSe," \u2014 "),TW=n(mSe,"A",{href:!0});var X4t=s(TW);Gwr=r(X4t,"FlaxGPTNeoForCausalLM"),X4t.forEach(t),Owr=r(mSe," (GPT Neo model)"),mSe.forEach(t),Vwr=i(pi),Z5=n(pi,"LI",{});var fSe=s(Z5);C1e=n(fSe,"STRONG",{});var z4t=s(C1e);Xwr=r(z4t,"gptj"),z4t.forEach(t),zwr=r(fSe," \u2014 "),MW=n(fSe,"A",{href:!0});var Q4t=s(MW);Qwr=r(Q4t,"FlaxGPTJForCausalLM"),Q4t.forEach(t),Wwr=r(fSe," (GPT-J model)"),fSe.forEach(t),Hwr=i(pi),e3=n(pi,"LI",{});var gSe=s(e3);w1e=n(gSe,"STRONG",{});var W4t=s(w1e);Uwr=r(W4t,"xglm"),W4t.forEach(t),Jwr=r(gSe," \u2014 "),EW=n(gSe,"A",{href:!0});var H4t=s(EW);Ywr=r(H4t,"FlaxXGLMForCausalLM"),H4t.forEach(t),Kwr=r(gSe," (XGLM model)"),gSe.forEach(t),pi.forEach(t),Zwr=i(xa),A1e=n(xa,"P",{});var U4t=s(A1e);e6r=r(U4t,"Examples:"),U4t.forEach(t),o6r=i(xa),f(nL.$$.fragment,xa),xa.forEach(t),hi.forEach(t),fPe=i(c),am=n(c,"H2",{class:!0});var EIe=s(am);o3=n(EIe,"A",{id:!0,class:!0,href:!0});var J4t=s(o3);y1e=n(J4t,"SPAN",{});var Y4t=s(y1e);f(sL.$$.fragment,Y4t),Y4t.forEach(t),J4t.forEach(t),r6r=i(EIe),L1e=n(EIe,"SPAN",{});var K4t=s(L1e);t6r=r(K4t,"FlaxAutoModelForPreTraining"),K4t.forEach(t),EIe.forEach(t),gPe=i(c),Pr=n(c,"DIV",{class:!0});var _i=s(Pr);f(lL.$$.fragment,_i),a6r=i(_i),nm=n(_i,"P",{});var VJ=s(nm);n6r=r(VJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),CW=n(VJ,"A",{href:!0});var Z4t=s(CW);s6r=r(Z4t,"from_pretrained()"),Z4t.forEach(t),l6r=r(VJ," class method or the "),wW=n(VJ,"A",{href:!0});var eEt=s(wW);i6r=r(eEt,"from_config()"),eEt.forEach(t),d6r=r(VJ,` class
method.`),VJ.forEach(t),c6r=i(_i),iL=n(_i,"P",{});var CIe=s(iL);m6r=r(CIe,"This class cannot be instantiated directly using "),x1e=n(CIe,"CODE",{});var oEt=s(x1e);f6r=r(oEt,"__init__()"),oEt.forEach(t),g6r=r(CIe," (throws an error)."),CIe.forEach(t),h6r=i(_i),Lt=n(_i,"DIV",{class:!0});var bi=s(Lt);f(dL.$$.fragment,bi),u6r=i(bi),k1e=n(bi,"P",{});var rEt=s(k1e);p6r=r(rEt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),rEt.forEach(t),_6r=i(bi),sm=n(bi,"P",{});var XJ=s(sm);b6r=r(XJ,`Note:
Loading a model from its configuration file does `),S1e=n(XJ,"STRONG",{});var tEt=s(S1e);v6r=r(tEt,"not"),tEt.forEach(t),F6r=r(XJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),AW=n(XJ,"A",{href:!0});var aEt=s(AW);T6r=r(aEt,"from_pretrained()"),aEt.forEach(t),M6r=r(XJ," to load the model weights."),XJ.forEach(t),E6r=i(bi),R1e=n(bi,"P",{});var nEt=s(R1e);C6r=r(nEt,"Examples:"),nEt.forEach(t),w6r=i(bi),f(cL.$$.fragment,bi),bi.forEach(t),A6r=i(_i),xo=n(_i,"DIV",{class:!0});var ka=s(xo);f(mL.$$.fragment,ka),y6r=i(ka),B1e=n(ka,"P",{});var sEt=s(B1e);L6r=r(sEt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),sEt.forEach(t),x6r=i(ka),Rn=n(ka,"P",{});var bw=s(Rn);k6r=r(bw,"The model class to instantiate is selected based on the "),P1e=n(bw,"CODE",{});var lEt=s(P1e);S6r=r(lEt,"model_type"),lEt.forEach(t),R6r=r(bw,` property of the config object (either
passed as an argument or loaded from `),$1e=n(bw,"CODE",{});var iEt=s($1e);B6r=r(iEt,"pretrained_model_name_or_path"),iEt.forEach(t),P6r=r(bw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I1e=n(bw,"CODE",{});var dEt=s(I1e);$6r=r(dEt,"pretrained_model_name_or_path"),dEt.forEach(t),I6r=r(bw,":"),bw.forEach(t),q6r=i(ka),fe=n(ka,"UL",{});var pe=s(fe);r3=n(pe,"LI",{});var hSe=s(r3);q1e=n(hSe,"STRONG",{});var cEt=s(q1e);N6r=r(cEt,"albert"),cEt.forEach(t),j6r=r(hSe," \u2014 "),yW=n(hSe,"A",{href:!0});var mEt=s(yW);D6r=r(mEt,"FlaxAlbertForPreTraining"),mEt.forEach(t),G6r=r(hSe," (ALBERT model)"),hSe.forEach(t),O6r=i(pe),t3=n(pe,"LI",{});var uSe=s(t3);N1e=n(uSe,"STRONG",{});var fEt=s(N1e);V6r=r(fEt,"bart"),fEt.forEach(t),X6r=r(uSe," \u2014 "),LW=n(uSe,"A",{href:!0});var gEt=s(LW);z6r=r(gEt,"FlaxBartForConditionalGeneration"),gEt.forEach(t),Q6r=r(uSe," (BART model)"),uSe.forEach(t),W6r=i(pe),a3=n(pe,"LI",{});var pSe=s(a3);j1e=n(pSe,"STRONG",{});var hEt=s(j1e);H6r=r(hEt,"bert"),hEt.forEach(t),U6r=r(pSe," \u2014 "),xW=n(pSe,"A",{href:!0});var uEt=s(xW);J6r=r(uEt,"FlaxBertForPreTraining"),uEt.forEach(t),Y6r=r(pSe," (BERT model)"),pSe.forEach(t),K6r=i(pe),n3=n(pe,"LI",{});var _Se=s(n3);D1e=n(_Se,"STRONG",{});var pEt=s(D1e);Z6r=r(pEt,"big_bird"),pEt.forEach(t),eAr=r(_Se," \u2014 "),kW=n(_Se,"A",{href:!0});var _Et=s(kW);oAr=r(_Et,"FlaxBigBirdForPreTraining"),_Et.forEach(t),rAr=r(_Se," (BigBird model)"),_Se.forEach(t),tAr=i(pe),s3=n(pe,"LI",{});var bSe=s(s3);G1e=n(bSe,"STRONG",{});var bEt=s(G1e);aAr=r(bEt,"electra"),bEt.forEach(t),nAr=r(bSe," \u2014 "),SW=n(bSe,"A",{href:!0});var vEt=s(SW);sAr=r(vEt,"FlaxElectraForPreTraining"),vEt.forEach(t),lAr=r(bSe," (ELECTRA model)"),bSe.forEach(t),iAr=i(pe),l3=n(pe,"LI",{});var vSe=s(l3);O1e=n(vSe,"STRONG",{});var FEt=s(O1e);dAr=r(FEt,"mbart"),FEt.forEach(t),cAr=r(vSe," \u2014 "),RW=n(vSe,"A",{href:!0});var TEt=s(RW);mAr=r(TEt,"FlaxMBartForConditionalGeneration"),TEt.forEach(t),fAr=r(vSe," (mBART model)"),vSe.forEach(t),gAr=i(pe),i3=n(pe,"LI",{});var FSe=s(i3);V1e=n(FSe,"STRONG",{});var MEt=s(V1e);hAr=r(MEt,"mt5"),MEt.forEach(t),uAr=r(FSe," \u2014 "),BW=n(FSe,"A",{href:!0});var EEt=s(BW);pAr=r(EEt,"FlaxMT5ForConditionalGeneration"),EEt.forEach(t),_Ar=r(FSe," (mT5 model)"),FSe.forEach(t),bAr=i(pe),d3=n(pe,"LI",{});var TSe=s(d3);X1e=n(TSe,"STRONG",{});var CEt=s(X1e);vAr=r(CEt,"roberta"),CEt.forEach(t),FAr=r(TSe," \u2014 "),PW=n(TSe,"A",{href:!0});var wEt=s(PW);TAr=r(wEt,"FlaxRobertaForMaskedLM"),wEt.forEach(t),MAr=r(TSe," (RoBERTa model)"),TSe.forEach(t),EAr=i(pe),c3=n(pe,"LI",{});var MSe=s(c3);z1e=n(MSe,"STRONG",{});var AEt=s(z1e);CAr=r(AEt,"roformer"),AEt.forEach(t),wAr=r(MSe," \u2014 "),$W=n(MSe,"A",{href:!0});var yEt=s($W);AAr=r(yEt,"FlaxRoFormerForMaskedLM"),yEt.forEach(t),yAr=r(MSe," (RoFormer model)"),MSe.forEach(t),LAr=i(pe),m3=n(pe,"LI",{});var ESe=s(m3);Q1e=n(ESe,"STRONG",{});var LEt=s(Q1e);xAr=r(LEt,"t5"),LEt.forEach(t),kAr=r(ESe," \u2014 "),IW=n(ESe,"A",{href:!0});var xEt=s(IW);SAr=r(xEt,"FlaxT5ForConditionalGeneration"),xEt.forEach(t),RAr=r(ESe," (T5 model)"),ESe.forEach(t),BAr=i(pe),f3=n(pe,"LI",{});var CSe=s(f3);W1e=n(CSe,"STRONG",{});var kEt=s(W1e);PAr=r(kEt,"wav2vec2"),kEt.forEach(t),$Ar=r(CSe," \u2014 "),qW=n(CSe,"A",{href:!0});var SEt=s(qW);IAr=r(SEt,"FlaxWav2Vec2ForPreTraining"),SEt.forEach(t),qAr=r(CSe," (Wav2Vec2 model)"),CSe.forEach(t),NAr=i(pe),g3=n(pe,"LI",{});var wSe=s(g3);H1e=n(wSe,"STRONG",{});var REt=s(H1e);jAr=r(REt,"xlm-roberta"),REt.forEach(t),DAr=r(wSe," \u2014 "),NW=n(wSe,"A",{href:!0});var BEt=s(NW);GAr=r(BEt,"FlaxXLMRobertaForMaskedLM"),BEt.forEach(t),OAr=r(wSe," (XLM-RoBERTa model)"),wSe.forEach(t),pe.forEach(t),VAr=i(ka),U1e=n(ka,"P",{});var PEt=s(U1e);XAr=r(PEt,"Examples:"),PEt.forEach(t),zAr=i(ka),f(fL.$$.fragment,ka),ka.forEach(t),_i.forEach(t),hPe=i(c),lm=n(c,"H2",{class:!0});var wIe=s(lm);h3=n(wIe,"A",{id:!0,class:!0,href:!0});var $Et=s(h3);J1e=n($Et,"SPAN",{});var IEt=s(J1e);f(gL.$$.fragment,IEt),IEt.forEach(t),$Et.forEach(t),QAr=i(wIe),Y1e=n(wIe,"SPAN",{});var qEt=s(Y1e);WAr=r(qEt,"FlaxAutoModelForMaskedLM"),qEt.forEach(t),wIe.forEach(t),uPe=i(c),$r=n(c,"DIV",{class:!0});var vi=s($r);f(hL.$$.fragment,vi),HAr=i(vi),im=n(vi,"P",{});var zJ=s(im);UAr=r(zJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),jW=n(zJ,"A",{href:!0});var NEt=s(jW);JAr=r(NEt,"from_pretrained()"),NEt.forEach(t),YAr=r(zJ," class method or the "),DW=n(zJ,"A",{href:!0});var jEt=s(DW);KAr=r(jEt,"from_config()"),jEt.forEach(t),ZAr=r(zJ,` class
method.`),zJ.forEach(t),e0r=i(vi),uL=n(vi,"P",{});var AIe=s(uL);o0r=r(AIe,"This class cannot be instantiated directly using "),K1e=n(AIe,"CODE",{});var DEt=s(K1e);r0r=r(DEt,"__init__()"),DEt.forEach(t),t0r=r(AIe," (throws an error)."),AIe.forEach(t),a0r=i(vi),xt=n(vi,"DIV",{class:!0});var Fi=s(xt);f(pL.$$.fragment,Fi),n0r=i(Fi),Z1e=n(Fi,"P",{});var GEt=s(Z1e);s0r=r(GEt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),GEt.forEach(t),l0r=i(Fi),dm=n(Fi,"P",{});var QJ=s(dm);i0r=r(QJ,`Note:
Loading a model from its configuration file does `),eTe=n(QJ,"STRONG",{});var OEt=s(eTe);d0r=r(OEt,"not"),OEt.forEach(t),c0r=r(QJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),GW=n(QJ,"A",{href:!0});var VEt=s(GW);m0r=r(VEt,"from_pretrained()"),VEt.forEach(t),f0r=r(QJ," to load the model weights."),QJ.forEach(t),g0r=i(Fi),oTe=n(Fi,"P",{});var XEt=s(oTe);h0r=r(XEt,"Examples:"),XEt.forEach(t),u0r=i(Fi),f(_L.$$.fragment,Fi),Fi.forEach(t),p0r=i(vi),ko=n(vi,"DIV",{class:!0});var Sa=s(ko);f(bL.$$.fragment,Sa),_0r=i(Sa),rTe=n(Sa,"P",{});var zEt=s(rTe);b0r=r(zEt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),zEt.forEach(t),v0r=i(Sa),Bn=n(Sa,"P",{});var vw=s(Bn);F0r=r(vw,"The model class to instantiate is selected based on the "),tTe=n(vw,"CODE",{});var QEt=s(tTe);T0r=r(QEt,"model_type"),QEt.forEach(t),M0r=r(vw,` property of the config object (either
passed as an argument or loaded from `),aTe=n(vw,"CODE",{});var WEt=s(aTe);E0r=r(WEt,"pretrained_model_name_or_path"),WEt.forEach(t),C0r=r(vw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nTe=n(vw,"CODE",{});var HEt=s(nTe);w0r=r(HEt,"pretrained_model_name_or_path"),HEt.forEach(t),A0r=r(vw,":"),vw.forEach(t),y0r=i(Sa),ve=n(Sa,"UL",{});var Ae=s(ve);u3=n(Ae,"LI",{});var ASe=s(u3);sTe=n(ASe,"STRONG",{});var UEt=s(sTe);L0r=r(UEt,"albert"),UEt.forEach(t),x0r=r(ASe," \u2014 "),OW=n(ASe,"A",{href:!0});var JEt=s(OW);k0r=r(JEt,"FlaxAlbertForMaskedLM"),JEt.forEach(t),S0r=r(ASe," (ALBERT model)"),ASe.forEach(t),R0r=i(Ae),p3=n(Ae,"LI",{});var ySe=s(p3);lTe=n(ySe,"STRONG",{});var YEt=s(lTe);B0r=r(YEt,"bart"),YEt.forEach(t),P0r=r(ySe," \u2014 "),VW=n(ySe,"A",{href:!0});var KEt=s(VW);$0r=r(KEt,"FlaxBartForConditionalGeneration"),KEt.forEach(t),I0r=r(ySe," (BART model)"),ySe.forEach(t),q0r=i(Ae),_3=n(Ae,"LI",{});var LSe=s(_3);iTe=n(LSe,"STRONG",{});var ZEt=s(iTe);N0r=r(ZEt,"bert"),ZEt.forEach(t),j0r=r(LSe," \u2014 "),XW=n(LSe,"A",{href:!0});var e5t=s(XW);D0r=r(e5t,"FlaxBertForMaskedLM"),e5t.forEach(t),G0r=r(LSe," (BERT model)"),LSe.forEach(t),O0r=i(Ae),b3=n(Ae,"LI",{});var xSe=s(b3);dTe=n(xSe,"STRONG",{});var o5t=s(dTe);V0r=r(o5t,"big_bird"),o5t.forEach(t),X0r=r(xSe," \u2014 "),zW=n(xSe,"A",{href:!0});var r5t=s(zW);z0r=r(r5t,"FlaxBigBirdForMaskedLM"),r5t.forEach(t),Q0r=r(xSe," (BigBird model)"),xSe.forEach(t),W0r=i(Ae),v3=n(Ae,"LI",{});var kSe=s(v3);cTe=n(kSe,"STRONG",{});var t5t=s(cTe);H0r=r(t5t,"distilbert"),t5t.forEach(t),U0r=r(kSe," \u2014 "),QW=n(kSe,"A",{href:!0});var a5t=s(QW);J0r=r(a5t,"FlaxDistilBertForMaskedLM"),a5t.forEach(t),Y0r=r(kSe," (DistilBERT model)"),kSe.forEach(t),K0r=i(Ae),F3=n(Ae,"LI",{});var SSe=s(F3);mTe=n(SSe,"STRONG",{});var n5t=s(mTe);Z0r=r(n5t,"electra"),n5t.forEach(t),eyr=r(SSe," \u2014 "),WW=n(SSe,"A",{href:!0});var s5t=s(WW);oyr=r(s5t,"FlaxElectraForMaskedLM"),s5t.forEach(t),ryr=r(SSe," (ELECTRA model)"),SSe.forEach(t),tyr=i(Ae),T3=n(Ae,"LI",{});var RSe=s(T3);fTe=n(RSe,"STRONG",{});var l5t=s(fTe);ayr=r(l5t,"mbart"),l5t.forEach(t),nyr=r(RSe," \u2014 "),HW=n(RSe,"A",{href:!0});var i5t=s(HW);syr=r(i5t,"FlaxMBartForConditionalGeneration"),i5t.forEach(t),lyr=r(RSe," (mBART model)"),RSe.forEach(t),iyr=i(Ae),M3=n(Ae,"LI",{});var BSe=s(M3);gTe=n(BSe,"STRONG",{});var d5t=s(gTe);dyr=r(d5t,"roberta"),d5t.forEach(t),cyr=r(BSe," \u2014 "),UW=n(BSe,"A",{href:!0});var c5t=s(UW);myr=r(c5t,"FlaxRobertaForMaskedLM"),c5t.forEach(t),fyr=r(BSe," (RoBERTa model)"),BSe.forEach(t),gyr=i(Ae),E3=n(Ae,"LI",{});var PSe=s(E3);hTe=n(PSe,"STRONG",{});var m5t=s(hTe);hyr=r(m5t,"roformer"),m5t.forEach(t),uyr=r(PSe," \u2014 "),JW=n(PSe,"A",{href:!0});var f5t=s(JW);pyr=r(f5t,"FlaxRoFormerForMaskedLM"),f5t.forEach(t),_yr=r(PSe," (RoFormer model)"),PSe.forEach(t),byr=i(Ae),C3=n(Ae,"LI",{});var $Se=s(C3);uTe=n($Se,"STRONG",{});var g5t=s(uTe);vyr=r(g5t,"xlm-roberta"),g5t.forEach(t),Fyr=r($Se," \u2014 "),YW=n($Se,"A",{href:!0});var h5t=s(YW);Tyr=r(h5t,"FlaxXLMRobertaForMaskedLM"),h5t.forEach(t),Myr=r($Se," (XLM-RoBERTa model)"),$Se.forEach(t),Ae.forEach(t),Eyr=i(Sa),pTe=n(Sa,"P",{});var u5t=s(pTe);Cyr=r(u5t,"Examples:"),u5t.forEach(t),wyr=i(Sa),f(vL.$$.fragment,Sa),Sa.forEach(t),vi.forEach(t),pPe=i(c),cm=n(c,"H2",{class:!0});var yIe=s(cm);w3=n(yIe,"A",{id:!0,class:!0,href:!0});var p5t=s(w3);_Te=n(p5t,"SPAN",{});var _5t=s(_Te);f(FL.$$.fragment,_5t),_5t.forEach(t),p5t.forEach(t),Ayr=i(yIe),bTe=n(yIe,"SPAN",{});var b5t=s(bTe);yyr=r(b5t,"FlaxAutoModelForSeq2SeqLM"),b5t.forEach(t),yIe.forEach(t),_Pe=i(c),Ir=n(c,"DIV",{class:!0});var Ti=s(Ir);f(TL.$$.fragment,Ti),Lyr=i(Ti),mm=n(Ti,"P",{});var WJ=s(mm);xyr=r(WJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),KW=n(WJ,"A",{href:!0});var v5t=s(KW);kyr=r(v5t,"from_pretrained()"),v5t.forEach(t),Syr=r(WJ," class method or the "),ZW=n(WJ,"A",{href:!0});var F5t=s(ZW);Ryr=r(F5t,"from_config()"),F5t.forEach(t),Byr=r(WJ,` class
method.`),WJ.forEach(t),Pyr=i(Ti),ML=n(Ti,"P",{});var LIe=s(ML);$yr=r(LIe,"This class cannot be instantiated directly using "),vTe=n(LIe,"CODE",{});var T5t=s(vTe);Iyr=r(T5t,"__init__()"),T5t.forEach(t),qyr=r(LIe," (throws an error)."),LIe.forEach(t),Nyr=i(Ti),kt=n(Ti,"DIV",{class:!0});var Mi=s(kt);f(EL.$$.fragment,Mi),jyr=i(Mi),FTe=n(Mi,"P",{});var M5t=s(FTe);Dyr=r(M5t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),M5t.forEach(t),Gyr=i(Mi),fm=n(Mi,"P",{});var HJ=s(fm);Oyr=r(HJ,`Note:
Loading a model from its configuration file does `),TTe=n(HJ,"STRONG",{});var E5t=s(TTe);Vyr=r(E5t,"not"),E5t.forEach(t),Xyr=r(HJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),eH=n(HJ,"A",{href:!0});var C5t=s(eH);zyr=r(C5t,"from_pretrained()"),C5t.forEach(t),Qyr=r(HJ," to load the model weights."),HJ.forEach(t),Wyr=i(Mi),MTe=n(Mi,"P",{});var w5t=s(MTe);Hyr=r(w5t,"Examples:"),w5t.forEach(t),Uyr=i(Mi),f(CL.$$.fragment,Mi),Mi.forEach(t),Jyr=i(Ti),So=n(Ti,"DIV",{class:!0});var Ra=s(So);f(wL.$$.fragment,Ra),Yyr=i(Ra),ETe=n(Ra,"P",{});var A5t=s(ETe);Kyr=r(A5t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),A5t.forEach(t),Zyr=i(Ra),Pn=n(Ra,"P",{});var Fw=s(Pn);e8r=r(Fw,"The model class to instantiate is selected based on the "),CTe=n(Fw,"CODE",{});var y5t=s(CTe);o8r=r(y5t,"model_type"),y5t.forEach(t),r8r=r(Fw,` property of the config object (either
passed as an argument or loaded from `),wTe=n(Fw,"CODE",{});var L5t=s(wTe);t8r=r(L5t,"pretrained_model_name_or_path"),L5t.forEach(t),a8r=r(Fw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ATe=n(Fw,"CODE",{});var x5t=s(ATe);n8r=r(x5t,"pretrained_model_name_or_path"),x5t.forEach(t),s8r=r(Fw,":"),Fw.forEach(t),l8r=i(Ra),Ee=n(Ra,"UL",{});var so=s(Ee);A3=n(so,"LI",{});var ISe=s(A3);yTe=n(ISe,"STRONG",{});var k5t=s(yTe);i8r=r(k5t,"bart"),k5t.forEach(t),d8r=r(ISe," \u2014 "),oH=n(ISe,"A",{href:!0});var S5t=s(oH);c8r=r(S5t,"FlaxBartForConditionalGeneration"),S5t.forEach(t),m8r=r(ISe," (BART model)"),ISe.forEach(t),f8r=i(so),y3=n(so,"LI",{});var qSe=s(y3);LTe=n(qSe,"STRONG",{});var R5t=s(LTe);g8r=r(R5t,"blenderbot"),R5t.forEach(t),h8r=r(qSe," \u2014 "),rH=n(qSe,"A",{href:!0});var B5t=s(rH);u8r=r(B5t,"FlaxBlenderbotForConditionalGeneration"),B5t.forEach(t),p8r=r(qSe," (Blenderbot model)"),qSe.forEach(t),_8r=i(so),L3=n(so,"LI",{});var NSe=s(L3);xTe=n(NSe,"STRONG",{});var P5t=s(xTe);b8r=r(P5t,"blenderbot-small"),P5t.forEach(t),v8r=r(NSe," \u2014 "),tH=n(NSe,"A",{href:!0});var $5t=s(tH);F8r=r($5t,"FlaxBlenderbotSmallForConditionalGeneration"),$5t.forEach(t),T8r=r(NSe," (BlenderbotSmall model)"),NSe.forEach(t),M8r=i(so),x3=n(so,"LI",{});var jSe=s(x3);kTe=n(jSe,"STRONG",{});var I5t=s(kTe);E8r=r(I5t,"encoder-decoder"),I5t.forEach(t),C8r=r(jSe," \u2014 "),aH=n(jSe,"A",{href:!0});var q5t=s(aH);w8r=r(q5t,"FlaxEncoderDecoderModel"),q5t.forEach(t),A8r=r(jSe," (Encoder decoder model)"),jSe.forEach(t),y8r=i(so),k3=n(so,"LI",{});var DSe=s(k3);STe=n(DSe,"STRONG",{});var N5t=s(STe);L8r=r(N5t,"marian"),N5t.forEach(t),x8r=r(DSe," \u2014 "),nH=n(DSe,"A",{href:!0});var j5t=s(nH);k8r=r(j5t,"FlaxMarianMTModel"),j5t.forEach(t),S8r=r(DSe," (Marian model)"),DSe.forEach(t),R8r=i(so),S3=n(so,"LI",{});var GSe=s(S3);RTe=n(GSe,"STRONG",{});var D5t=s(RTe);B8r=r(D5t,"mbart"),D5t.forEach(t),P8r=r(GSe," \u2014 "),sH=n(GSe,"A",{href:!0});var G5t=s(sH);$8r=r(G5t,"FlaxMBartForConditionalGeneration"),G5t.forEach(t),I8r=r(GSe," (mBART model)"),GSe.forEach(t),q8r=i(so),R3=n(so,"LI",{});var OSe=s(R3);BTe=n(OSe,"STRONG",{});var O5t=s(BTe);N8r=r(O5t,"mt5"),O5t.forEach(t),j8r=r(OSe," \u2014 "),lH=n(OSe,"A",{href:!0});var V5t=s(lH);D8r=r(V5t,"FlaxMT5ForConditionalGeneration"),V5t.forEach(t),G8r=r(OSe," (mT5 model)"),OSe.forEach(t),O8r=i(so),B3=n(so,"LI",{});var VSe=s(B3);PTe=n(VSe,"STRONG",{});var X5t=s(PTe);V8r=r(X5t,"pegasus"),X5t.forEach(t),X8r=r(VSe," \u2014 "),iH=n(VSe,"A",{href:!0});var z5t=s(iH);z8r=r(z5t,"FlaxPegasusForConditionalGeneration"),z5t.forEach(t),Q8r=r(VSe," (Pegasus model)"),VSe.forEach(t),W8r=i(so),P3=n(so,"LI",{});var XSe=s(P3);$Te=n(XSe,"STRONG",{});var Q5t=s($Te);H8r=r(Q5t,"t5"),Q5t.forEach(t),U8r=r(XSe," \u2014 "),dH=n(XSe,"A",{href:!0});var W5t=s(dH);J8r=r(W5t,"FlaxT5ForConditionalGeneration"),W5t.forEach(t),Y8r=r(XSe," (T5 model)"),XSe.forEach(t),so.forEach(t),K8r=i(Ra),ITe=n(Ra,"P",{});var H5t=s(ITe);Z8r=r(H5t,"Examples:"),H5t.forEach(t),eLr=i(Ra),f(AL.$$.fragment,Ra),Ra.forEach(t),Ti.forEach(t),bPe=i(c),gm=n(c,"H2",{class:!0});var xIe=s(gm);$3=n(xIe,"A",{id:!0,class:!0,href:!0});var U5t=s($3);qTe=n(U5t,"SPAN",{});var J5t=s(qTe);f(yL.$$.fragment,J5t),J5t.forEach(t),U5t.forEach(t),oLr=i(xIe),NTe=n(xIe,"SPAN",{});var Y5t=s(NTe);rLr=r(Y5t,"FlaxAutoModelForSequenceClassification"),Y5t.forEach(t),xIe.forEach(t),vPe=i(c),qr=n(c,"DIV",{class:!0});var Ei=s(qr);f(LL.$$.fragment,Ei),tLr=i(Ei),hm=n(Ei,"P",{});var UJ=s(hm);aLr=r(UJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),cH=n(UJ,"A",{href:!0});var K5t=s(cH);nLr=r(K5t,"from_pretrained()"),K5t.forEach(t),sLr=r(UJ," class method or the "),mH=n(UJ,"A",{href:!0});var Z5t=s(mH);lLr=r(Z5t,"from_config()"),Z5t.forEach(t),iLr=r(UJ,` class
method.`),UJ.forEach(t),dLr=i(Ei),xL=n(Ei,"P",{});var kIe=s(xL);cLr=r(kIe,"This class cannot be instantiated directly using "),jTe=n(kIe,"CODE",{});var e3t=s(jTe);mLr=r(e3t,"__init__()"),e3t.forEach(t),fLr=r(kIe," (throws an error)."),kIe.forEach(t),gLr=i(Ei),St=n(Ei,"DIV",{class:!0});var Ci=s(St);f(kL.$$.fragment,Ci),hLr=i(Ci),DTe=n(Ci,"P",{});var o3t=s(DTe);uLr=r(o3t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),o3t.forEach(t),pLr=i(Ci),um=n(Ci,"P",{});var JJ=s(um);_Lr=r(JJ,`Note:
Loading a model from its configuration file does `),GTe=n(JJ,"STRONG",{});var r3t=s(GTe);bLr=r(r3t,"not"),r3t.forEach(t),vLr=r(JJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),fH=n(JJ,"A",{href:!0});var t3t=s(fH);FLr=r(t3t,"from_pretrained()"),t3t.forEach(t),TLr=r(JJ," to load the model weights."),JJ.forEach(t),MLr=i(Ci),OTe=n(Ci,"P",{});var a3t=s(OTe);ELr=r(a3t,"Examples:"),a3t.forEach(t),CLr=i(Ci),f(SL.$$.fragment,Ci),Ci.forEach(t),wLr=i(Ei),Ro=n(Ei,"DIV",{class:!0});var Ba=s(Ro);f(RL.$$.fragment,Ba),ALr=i(Ba),VTe=n(Ba,"P",{});var n3t=s(VTe);yLr=r(n3t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),n3t.forEach(t),LLr=i(Ba),$n=n(Ba,"P",{});var Tw=s($n);xLr=r(Tw,"The model class to instantiate is selected based on the "),XTe=n(Tw,"CODE",{});var s3t=s(XTe);kLr=r(s3t,"model_type"),s3t.forEach(t),SLr=r(Tw,` property of the config object (either
passed as an argument or loaded from `),zTe=n(Tw,"CODE",{});var l3t=s(zTe);RLr=r(l3t,"pretrained_model_name_or_path"),l3t.forEach(t),BLr=r(Tw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),QTe=n(Tw,"CODE",{});var i3t=s(QTe);PLr=r(i3t,"pretrained_model_name_or_path"),i3t.forEach(t),$Lr=r(Tw,":"),Tw.forEach(t),ILr=i(Ba),Fe=n(Ba,"UL",{});var ye=s(Fe);I3=n(ye,"LI",{});var zSe=s(I3);WTe=n(zSe,"STRONG",{});var d3t=s(WTe);qLr=r(d3t,"albert"),d3t.forEach(t),NLr=r(zSe," \u2014 "),gH=n(zSe,"A",{href:!0});var c3t=s(gH);jLr=r(c3t,"FlaxAlbertForSequenceClassification"),c3t.forEach(t),DLr=r(zSe," (ALBERT model)"),zSe.forEach(t),GLr=i(ye),q3=n(ye,"LI",{});var QSe=s(q3);HTe=n(QSe,"STRONG",{});var m3t=s(HTe);OLr=r(m3t,"bart"),m3t.forEach(t),VLr=r(QSe," \u2014 "),hH=n(QSe,"A",{href:!0});var f3t=s(hH);XLr=r(f3t,"FlaxBartForSequenceClassification"),f3t.forEach(t),zLr=r(QSe," (BART model)"),QSe.forEach(t),QLr=i(ye),N3=n(ye,"LI",{});var WSe=s(N3);UTe=n(WSe,"STRONG",{});var g3t=s(UTe);WLr=r(g3t,"bert"),g3t.forEach(t),HLr=r(WSe," \u2014 "),uH=n(WSe,"A",{href:!0});var h3t=s(uH);ULr=r(h3t,"FlaxBertForSequenceClassification"),h3t.forEach(t),JLr=r(WSe," (BERT model)"),WSe.forEach(t),YLr=i(ye),j3=n(ye,"LI",{});var HSe=s(j3);JTe=n(HSe,"STRONG",{});var u3t=s(JTe);KLr=r(u3t,"big_bird"),u3t.forEach(t),ZLr=r(HSe," \u2014 "),pH=n(HSe,"A",{href:!0});var p3t=s(pH);e7r=r(p3t,"FlaxBigBirdForSequenceClassification"),p3t.forEach(t),o7r=r(HSe," (BigBird model)"),HSe.forEach(t),r7r=i(ye),D3=n(ye,"LI",{});var USe=s(D3);YTe=n(USe,"STRONG",{});var _3t=s(YTe);t7r=r(_3t,"distilbert"),_3t.forEach(t),a7r=r(USe," \u2014 "),_H=n(USe,"A",{href:!0});var b3t=s(_H);n7r=r(b3t,"FlaxDistilBertForSequenceClassification"),b3t.forEach(t),s7r=r(USe," (DistilBERT model)"),USe.forEach(t),l7r=i(ye),G3=n(ye,"LI",{});var JSe=s(G3);KTe=n(JSe,"STRONG",{});var v3t=s(KTe);i7r=r(v3t,"electra"),v3t.forEach(t),d7r=r(JSe," \u2014 "),bH=n(JSe,"A",{href:!0});var F3t=s(bH);c7r=r(F3t,"FlaxElectraForSequenceClassification"),F3t.forEach(t),m7r=r(JSe," (ELECTRA model)"),JSe.forEach(t),f7r=i(ye),O3=n(ye,"LI",{});var YSe=s(O3);ZTe=n(YSe,"STRONG",{});var T3t=s(ZTe);g7r=r(T3t,"mbart"),T3t.forEach(t),h7r=r(YSe," \u2014 "),vH=n(YSe,"A",{href:!0});var M3t=s(vH);u7r=r(M3t,"FlaxMBartForSequenceClassification"),M3t.forEach(t),p7r=r(YSe," (mBART model)"),YSe.forEach(t),_7r=i(ye),V3=n(ye,"LI",{});var KSe=s(V3);eMe=n(KSe,"STRONG",{});var E3t=s(eMe);b7r=r(E3t,"roberta"),E3t.forEach(t),v7r=r(KSe," \u2014 "),FH=n(KSe,"A",{href:!0});var C3t=s(FH);F7r=r(C3t,"FlaxRobertaForSequenceClassification"),C3t.forEach(t),T7r=r(KSe," (RoBERTa model)"),KSe.forEach(t),M7r=i(ye),X3=n(ye,"LI",{});var ZSe=s(X3);oMe=n(ZSe,"STRONG",{});var w3t=s(oMe);E7r=r(w3t,"roformer"),w3t.forEach(t),C7r=r(ZSe," \u2014 "),TH=n(ZSe,"A",{href:!0});var A3t=s(TH);w7r=r(A3t,"FlaxRoFormerForSequenceClassification"),A3t.forEach(t),A7r=r(ZSe," (RoFormer model)"),ZSe.forEach(t),y7r=i(ye),z3=n(ye,"LI",{});var eRe=s(z3);rMe=n(eRe,"STRONG",{});var y3t=s(rMe);L7r=r(y3t,"xlm-roberta"),y3t.forEach(t),x7r=r(eRe," \u2014 "),MH=n(eRe,"A",{href:!0});var L3t=s(MH);k7r=r(L3t,"FlaxXLMRobertaForSequenceClassification"),L3t.forEach(t),S7r=r(eRe," (XLM-RoBERTa model)"),eRe.forEach(t),ye.forEach(t),R7r=i(Ba),tMe=n(Ba,"P",{});var x3t=s(tMe);B7r=r(x3t,"Examples:"),x3t.forEach(t),P7r=i(Ba),f(BL.$$.fragment,Ba),Ba.forEach(t),Ei.forEach(t),FPe=i(c),pm=n(c,"H2",{class:!0});var SIe=s(pm);Q3=n(SIe,"A",{id:!0,class:!0,href:!0});var k3t=s(Q3);aMe=n(k3t,"SPAN",{});var S3t=s(aMe);f(PL.$$.fragment,S3t),S3t.forEach(t),k3t.forEach(t),$7r=i(SIe),nMe=n(SIe,"SPAN",{});var R3t=s(nMe);I7r=r(R3t,"FlaxAutoModelForQuestionAnswering"),R3t.forEach(t),SIe.forEach(t),TPe=i(c),Nr=n(c,"DIV",{class:!0});var wi=s(Nr);f($L.$$.fragment,wi),q7r=i(wi),_m=n(wi,"P",{});var YJ=s(_m);N7r=r(YJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),EH=n(YJ,"A",{href:!0});var B3t=s(EH);j7r=r(B3t,"from_pretrained()"),B3t.forEach(t),D7r=r(YJ," class method or the "),CH=n(YJ,"A",{href:!0});var P3t=s(CH);G7r=r(P3t,"from_config()"),P3t.forEach(t),O7r=r(YJ,` class
method.`),YJ.forEach(t),V7r=i(wi),IL=n(wi,"P",{});var RIe=s(IL);X7r=r(RIe,"This class cannot be instantiated directly using "),sMe=n(RIe,"CODE",{});var $3t=s(sMe);z7r=r($3t,"__init__()"),$3t.forEach(t),Q7r=r(RIe," (throws an error)."),RIe.forEach(t),W7r=i(wi),Rt=n(wi,"DIV",{class:!0});var Ai=s(Rt);f(qL.$$.fragment,Ai),H7r=i(Ai),lMe=n(Ai,"P",{});var I3t=s(lMe);U7r=r(I3t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),I3t.forEach(t),J7r=i(Ai),bm=n(Ai,"P",{});var KJ=s(bm);Y7r=r(KJ,`Note:
Loading a model from its configuration file does `),iMe=n(KJ,"STRONG",{});var q3t=s(iMe);K7r=r(q3t,"not"),q3t.forEach(t),Z7r=r(KJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),wH=n(KJ,"A",{href:!0});var N3t=s(wH);e9r=r(N3t,"from_pretrained()"),N3t.forEach(t),o9r=r(KJ," to load the model weights."),KJ.forEach(t),r9r=i(Ai),dMe=n(Ai,"P",{});var j3t=s(dMe);t9r=r(j3t,"Examples:"),j3t.forEach(t),a9r=i(Ai),f(NL.$$.fragment,Ai),Ai.forEach(t),n9r=i(wi),Bo=n(wi,"DIV",{class:!0});var Pa=s(Bo);f(jL.$$.fragment,Pa),s9r=i(Pa),cMe=n(Pa,"P",{});var D3t=s(cMe);l9r=r(D3t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),D3t.forEach(t),i9r=i(Pa),In=n(Pa,"P",{});var Mw=s(In);d9r=r(Mw,"The model class to instantiate is selected based on the "),mMe=n(Mw,"CODE",{});var G3t=s(mMe);c9r=r(G3t,"model_type"),G3t.forEach(t),m9r=r(Mw,` property of the config object (either
passed as an argument or loaded from `),fMe=n(Mw,"CODE",{});var O3t=s(fMe);f9r=r(O3t,"pretrained_model_name_or_path"),O3t.forEach(t),g9r=r(Mw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gMe=n(Mw,"CODE",{});var V3t=s(gMe);h9r=r(V3t,"pretrained_model_name_or_path"),V3t.forEach(t),u9r=r(Mw,":"),Mw.forEach(t),p9r=i(Pa),Te=n(Pa,"UL",{});var Le=s(Te);W3=n(Le,"LI",{});var oRe=s(W3);hMe=n(oRe,"STRONG",{});var X3t=s(hMe);_9r=r(X3t,"albert"),X3t.forEach(t),b9r=r(oRe," \u2014 "),AH=n(oRe,"A",{href:!0});var z3t=s(AH);v9r=r(z3t,"FlaxAlbertForQuestionAnswering"),z3t.forEach(t),F9r=r(oRe," (ALBERT model)"),oRe.forEach(t),T9r=i(Le),H3=n(Le,"LI",{});var rRe=s(H3);uMe=n(rRe,"STRONG",{});var Q3t=s(uMe);M9r=r(Q3t,"bart"),Q3t.forEach(t),E9r=r(rRe," \u2014 "),yH=n(rRe,"A",{href:!0});var W3t=s(yH);C9r=r(W3t,"FlaxBartForQuestionAnswering"),W3t.forEach(t),w9r=r(rRe," (BART model)"),rRe.forEach(t),A9r=i(Le),U3=n(Le,"LI",{});var tRe=s(U3);pMe=n(tRe,"STRONG",{});var H3t=s(pMe);y9r=r(H3t,"bert"),H3t.forEach(t),L9r=r(tRe," \u2014 "),LH=n(tRe,"A",{href:!0});var U3t=s(LH);x9r=r(U3t,"FlaxBertForQuestionAnswering"),U3t.forEach(t),k9r=r(tRe," (BERT model)"),tRe.forEach(t),S9r=i(Le),J3=n(Le,"LI",{});var aRe=s(J3);_Me=n(aRe,"STRONG",{});var J3t=s(_Me);R9r=r(J3t,"big_bird"),J3t.forEach(t),B9r=r(aRe," \u2014 "),xH=n(aRe,"A",{href:!0});var Y3t=s(xH);P9r=r(Y3t,"FlaxBigBirdForQuestionAnswering"),Y3t.forEach(t),$9r=r(aRe," (BigBird model)"),aRe.forEach(t),I9r=i(Le),Y3=n(Le,"LI",{});var nRe=s(Y3);bMe=n(nRe,"STRONG",{});var K3t=s(bMe);q9r=r(K3t,"distilbert"),K3t.forEach(t),N9r=r(nRe," \u2014 "),kH=n(nRe,"A",{href:!0});var Z3t=s(kH);j9r=r(Z3t,"FlaxDistilBertForQuestionAnswering"),Z3t.forEach(t),D9r=r(nRe," (DistilBERT model)"),nRe.forEach(t),G9r=i(Le),K3=n(Le,"LI",{});var sRe=s(K3);vMe=n(sRe,"STRONG",{});var eCt=s(vMe);O9r=r(eCt,"electra"),eCt.forEach(t),V9r=r(sRe," \u2014 "),SH=n(sRe,"A",{href:!0});var oCt=s(SH);X9r=r(oCt,"FlaxElectraForQuestionAnswering"),oCt.forEach(t),z9r=r(sRe," (ELECTRA model)"),sRe.forEach(t),Q9r=i(Le),Z3=n(Le,"LI",{});var lRe=s(Z3);FMe=n(lRe,"STRONG",{});var rCt=s(FMe);W9r=r(rCt,"mbart"),rCt.forEach(t),H9r=r(lRe," \u2014 "),RH=n(lRe,"A",{href:!0});var tCt=s(RH);U9r=r(tCt,"FlaxMBartForQuestionAnswering"),tCt.forEach(t),J9r=r(lRe," (mBART model)"),lRe.forEach(t),Y9r=i(Le),eC=n(Le,"LI",{});var iRe=s(eC);TMe=n(iRe,"STRONG",{});var aCt=s(TMe);K9r=r(aCt,"roberta"),aCt.forEach(t),Z9r=r(iRe," \u2014 "),BH=n(iRe,"A",{href:!0});var nCt=s(BH);exr=r(nCt,"FlaxRobertaForQuestionAnswering"),nCt.forEach(t),oxr=r(iRe," (RoBERTa model)"),iRe.forEach(t),rxr=i(Le),oC=n(Le,"LI",{});var dRe=s(oC);MMe=n(dRe,"STRONG",{});var sCt=s(MMe);txr=r(sCt,"roformer"),sCt.forEach(t),axr=r(dRe," \u2014 "),PH=n(dRe,"A",{href:!0});var lCt=s(PH);nxr=r(lCt,"FlaxRoFormerForQuestionAnswering"),lCt.forEach(t),sxr=r(dRe," (RoFormer model)"),dRe.forEach(t),lxr=i(Le),rC=n(Le,"LI",{});var cRe=s(rC);EMe=n(cRe,"STRONG",{});var iCt=s(EMe);ixr=r(iCt,"xlm-roberta"),iCt.forEach(t),dxr=r(cRe," \u2014 "),$H=n(cRe,"A",{href:!0});var dCt=s($H);cxr=r(dCt,"FlaxXLMRobertaForQuestionAnswering"),dCt.forEach(t),mxr=r(cRe," (XLM-RoBERTa model)"),cRe.forEach(t),Le.forEach(t),fxr=i(Pa),CMe=n(Pa,"P",{});var cCt=s(CMe);gxr=r(cCt,"Examples:"),cCt.forEach(t),hxr=i(Pa),f(DL.$$.fragment,Pa),Pa.forEach(t),wi.forEach(t),MPe=i(c),vm=n(c,"H2",{class:!0});var BIe=s(vm);tC=n(BIe,"A",{id:!0,class:!0,href:!0});var mCt=s(tC);wMe=n(mCt,"SPAN",{});var fCt=s(wMe);f(GL.$$.fragment,fCt),fCt.forEach(t),mCt.forEach(t),uxr=i(BIe),AMe=n(BIe,"SPAN",{});var gCt=s(AMe);pxr=r(gCt,"FlaxAutoModelForTokenClassification"),gCt.forEach(t),BIe.forEach(t),EPe=i(c),jr=n(c,"DIV",{class:!0});var yi=s(jr);f(OL.$$.fragment,yi),_xr=i(yi),Fm=n(yi,"P",{});var ZJ=s(Fm);bxr=r(ZJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),IH=n(ZJ,"A",{href:!0});var hCt=s(IH);vxr=r(hCt,"from_pretrained()"),hCt.forEach(t),Fxr=r(ZJ," class method or the "),qH=n(ZJ,"A",{href:!0});var uCt=s(qH);Txr=r(uCt,"from_config()"),uCt.forEach(t),Mxr=r(ZJ,` class
method.`),ZJ.forEach(t),Exr=i(yi),VL=n(yi,"P",{});var PIe=s(VL);Cxr=r(PIe,"This class cannot be instantiated directly using "),yMe=n(PIe,"CODE",{});var pCt=s(yMe);wxr=r(pCt,"__init__()"),pCt.forEach(t),Axr=r(PIe," (throws an error)."),PIe.forEach(t),yxr=i(yi),Bt=n(yi,"DIV",{class:!0});var Li=s(Bt);f(XL.$$.fragment,Li),Lxr=i(Li),LMe=n(Li,"P",{});var _Ct=s(LMe);xxr=r(_Ct,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),_Ct.forEach(t),kxr=i(Li),Tm=n(Li,"P",{});var eY=s(Tm);Sxr=r(eY,`Note:
Loading a model from its configuration file does `),xMe=n(eY,"STRONG",{});var bCt=s(xMe);Rxr=r(bCt,"not"),bCt.forEach(t),Bxr=r(eY,` load the model weights. It only affects the
model\u2019s configuration. Use `),NH=n(eY,"A",{href:!0});var vCt=s(NH);Pxr=r(vCt,"from_pretrained()"),vCt.forEach(t),$xr=r(eY," to load the model weights."),eY.forEach(t),Ixr=i(Li),kMe=n(Li,"P",{});var FCt=s(kMe);qxr=r(FCt,"Examples:"),FCt.forEach(t),Nxr=i(Li),f(zL.$$.fragment,Li),Li.forEach(t),jxr=i(yi),Po=n(yi,"DIV",{class:!0});var $a=s(Po);f(QL.$$.fragment,$a),Dxr=i($a),SMe=n($a,"P",{});var TCt=s(SMe);Gxr=r(TCt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),TCt.forEach(t),Oxr=i($a),qn=n($a,"P",{});var Ew=s(qn);Vxr=r(Ew,"The model class to instantiate is selected based on the "),RMe=n(Ew,"CODE",{});var MCt=s(RMe);Xxr=r(MCt,"model_type"),MCt.forEach(t),zxr=r(Ew,` property of the config object (either
passed as an argument or loaded from `),BMe=n(Ew,"CODE",{});var ECt=s(BMe);Qxr=r(ECt,"pretrained_model_name_or_path"),ECt.forEach(t),Wxr=r(Ew,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),PMe=n(Ew,"CODE",{});var CCt=s(PMe);Hxr=r(CCt,"pretrained_model_name_or_path"),CCt.forEach(t),Uxr=r(Ew,":"),Ew.forEach(t),Jxr=i($a),Be=n($a,"UL",{});var Oo=s(Be);aC=n(Oo,"LI",{});var mRe=s(aC);$Me=n(mRe,"STRONG",{});var wCt=s($Me);Yxr=r(wCt,"albert"),wCt.forEach(t),Kxr=r(mRe," \u2014 "),jH=n(mRe,"A",{href:!0});var ACt=s(jH);Zxr=r(ACt,"FlaxAlbertForTokenClassification"),ACt.forEach(t),ekr=r(mRe," (ALBERT model)"),mRe.forEach(t),okr=i(Oo),nC=n(Oo,"LI",{});var fRe=s(nC);IMe=n(fRe,"STRONG",{});var yCt=s(IMe);rkr=r(yCt,"bert"),yCt.forEach(t),tkr=r(fRe," \u2014 "),DH=n(fRe,"A",{href:!0});var LCt=s(DH);akr=r(LCt,"FlaxBertForTokenClassification"),LCt.forEach(t),nkr=r(fRe," (BERT model)"),fRe.forEach(t),skr=i(Oo),sC=n(Oo,"LI",{});var gRe=s(sC);qMe=n(gRe,"STRONG",{});var xCt=s(qMe);lkr=r(xCt,"big_bird"),xCt.forEach(t),ikr=r(gRe," \u2014 "),GH=n(gRe,"A",{href:!0});var kCt=s(GH);dkr=r(kCt,"FlaxBigBirdForTokenClassification"),kCt.forEach(t),ckr=r(gRe," (BigBird model)"),gRe.forEach(t),mkr=i(Oo),lC=n(Oo,"LI",{});var hRe=s(lC);NMe=n(hRe,"STRONG",{});var SCt=s(NMe);fkr=r(SCt,"distilbert"),SCt.forEach(t),gkr=r(hRe," \u2014 "),OH=n(hRe,"A",{href:!0});var RCt=s(OH);hkr=r(RCt,"FlaxDistilBertForTokenClassification"),RCt.forEach(t),ukr=r(hRe," (DistilBERT model)"),hRe.forEach(t),pkr=i(Oo),iC=n(Oo,"LI",{});var uRe=s(iC);jMe=n(uRe,"STRONG",{});var BCt=s(jMe);_kr=r(BCt,"electra"),BCt.forEach(t),bkr=r(uRe," \u2014 "),VH=n(uRe,"A",{href:!0});var PCt=s(VH);vkr=r(PCt,"FlaxElectraForTokenClassification"),PCt.forEach(t),Fkr=r(uRe," (ELECTRA model)"),uRe.forEach(t),Tkr=i(Oo),dC=n(Oo,"LI",{});var pRe=s(dC);DMe=n(pRe,"STRONG",{});var $Ct=s(DMe);Mkr=r($Ct,"roberta"),$Ct.forEach(t),Ekr=r(pRe," \u2014 "),XH=n(pRe,"A",{href:!0});var ICt=s(XH);Ckr=r(ICt,"FlaxRobertaForTokenClassification"),ICt.forEach(t),wkr=r(pRe," (RoBERTa model)"),pRe.forEach(t),Akr=i(Oo),cC=n(Oo,"LI",{});var _Re=s(cC);GMe=n(_Re,"STRONG",{});var qCt=s(GMe);ykr=r(qCt,"roformer"),qCt.forEach(t),Lkr=r(_Re," \u2014 "),zH=n(_Re,"A",{href:!0});var NCt=s(zH);xkr=r(NCt,"FlaxRoFormerForTokenClassification"),NCt.forEach(t),kkr=r(_Re," (RoFormer model)"),_Re.forEach(t),Skr=i(Oo),mC=n(Oo,"LI",{});var bRe=s(mC);OMe=n(bRe,"STRONG",{});var jCt=s(OMe);Rkr=r(jCt,"xlm-roberta"),jCt.forEach(t),Bkr=r(bRe," \u2014 "),QH=n(bRe,"A",{href:!0});var DCt=s(QH);Pkr=r(DCt,"FlaxXLMRobertaForTokenClassification"),DCt.forEach(t),$kr=r(bRe," (XLM-RoBERTa model)"),bRe.forEach(t),Oo.forEach(t),Ikr=i($a),VMe=n($a,"P",{});var GCt=s(VMe);qkr=r(GCt,"Examples:"),GCt.forEach(t),Nkr=i($a),f(WL.$$.fragment,$a),$a.forEach(t),yi.forEach(t),CPe=i(c),Mm=n(c,"H2",{class:!0});var $Ie=s(Mm);fC=n($Ie,"A",{id:!0,class:!0,href:!0});var OCt=s(fC);XMe=n(OCt,"SPAN",{});var VCt=s(XMe);f(HL.$$.fragment,VCt),VCt.forEach(t),OCt.forEach(t),jkr=i($Ie),zMe=n($Ie,"SPAN",{});var XCt=s(zMe);Dkr=r(XCt,"FlaxAutoModelForMultipleChoice"),XCt.forEach(t),$Ie.forEach(t),wPe=i(c),Dr=n(c,"DIV",{class:!0});var xi=s(Dr);f(UL.$$.fragment,xi),Gkr=i(xi),Em=n(xi,"P",{});var oY=s(Em);Okr=r(oY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),WH=n(oY,"A",{href:!0});var zCt=s(WH);Vkr=r(zCt,"from_pretrained()"),zCt.forEach(t),Xkr=r(oY," class method or the "),HH=n(oY,"A",{href:!0});var QCt=s(HH);zkr=r(QCt,"from_config()"),QCt.forEach(t),Qkr=r(oY,` class
method.`),oY.forEach(t),Wkr=i(xi),JL=n(xi,"P",{});var IIe=s(JL);Hkr=r(IIe,"This class cannot be instantiated directly using "),QMe=n(IIe,"CODE",{});var WCt=s(QMe);Ukr=r(WCt,"__init__()"),WCt.forEach(t),Jkr=r(IIe," (throws an error)."),IIe.forEach(t),Ykr=i(xi),Pt=n(xi,"DIV",{class:!0});var ki=s(Pt);f(YL.$$.fragment,ki),Kkr=i(ki),WMe=n(ki,"P",{});var HCt=s(WMe);Zkr=r(HCt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),HCt.forEach(t),eSr=i(ki),Cm=n(ki,"P",{});var rY=s(Cm);oSr=r(rY,`Note:
Loading a model from its configuration file does `),HMe=n(rY,"STRONG",{});var UCt=s(HMe);rSr=r(UCt,"not"),UCt.forEach(t),tSr=r(rY,` load the model weights. It only affects the
model\u2019s configuration. Use `),UH=n(rY,"A",{href:!0});var JCt=s(UH);aSr=r(JCt,"from_pretrained()"),JCt.forEach(t),nSr=r(rY," to load the model weights."),rY.forEach(t),sSr=i(ki),UMe=n(ki,"P",{});var YCt=s(UMe);lSr=r(YCt,"Examples:"),YCt.forEach(t),iSr=i(ki),f(KL.$$.fragment,ki),ki.forEach(t),dSr=i(xi),$o=n(xi,"DIV",{class:!0});var Ia=s($o);f(ZL.$$.fragment,Ia),cSr=i(Ia),JMe=n(Ia,"P",{});var KCt=s(JMe);mSr=r(KCt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),KCt.forEach(t),fSr=i(Ia),Nn=n(Ia,"P",{});var Cw=s(Nn);gSr=r(Cw,"The model class to instantiate is selected based on the "),YMe=n(Cw,"CODE",{});var ZCt=s(YMe);hSr=r(ZCt,"model_type"),ZCt.forEach(t),uSr=r(Cw,` property of the config object (either
passed as an argument or loaded from `),KMe=n(Cw,"CODE",{});var ewt=s(KMe);pSr=r(ewt,"pretrained_model_name_or_path"),ewt.forEach(t),_Sr=r(Cw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ZMe=n(Cw,"CODE",{});var owt=s(ZMe);bSr=r(owt,"pretrained_model_name_or_path"),owt.forEach(t),vSr=r(Cw,":"),Cw.forEach(t),FSr=i(Ia),Pe=n(Ia,"UL",{});var Vo=s(Pe);gC=n(Vo,"LI",{});var vRe=s(gC);e4e=n(vRe,"STRONG",{});var rwt=s(e4e);TSr=r(rwt,"albert"),rwt.forEach(t),MSr=r(vRe," \u2014 "),JH=n(vRe,"A",{href:!0});var twt=s(JH);ESr=r(twt,"FlaxAlbertForMultipleChoice"),twt.forEach(t),CSr=r(vRe," (ALBERT model)"),vRe.forEach(t),wSr=i(Vo),hC=n(Vo,"LI",{});var FRe=s(hC);o4e=n(FRe,"STRONG",{});var awt=s(o4e);ASr=r(awt,"bert"),awt.forEach(t),ySr=r(FRe," \u2014 "),YH=n(FRe,"A",{href:!0});var nwt=s(YH);LSr=r(nwt,"FlaxBertForMultipleChoice"),nwt.forEach(t),xSr=r(FRe," (BERT model)"),FRe.forEach(t),kSr=i(Vo),uC=n(Vo,"LI",{});var TRe=s(uC);r4e=n(TRe,"STRONG",{});var swt=s(r4e);SSr=r(swt,"big_bird"),swt.forEach(t),RSr=r(TRe," \u2014 "),KH=n(TRe,"A",{href:!0});var lwt=s(KH);BSr=r(lwt,"FlaxBigBirdForMultipleChoice"),lwt.forEach(t),PSr=r(TRe," (BigBird model)"),TRe.forEach(t),$Sr=i(Vo),pC=n(Vo,"LI",{});var MRe=s(pC);t4e=n(MRe,"STRONG",{});var iwt=s(t4e);ISr=r(iwt,"distilbert"),iwt.forEach(t),qSr=r(MRe," \u2014 "),ZH=n(MRe,"A",{href:!0});var dwt=s(ZH);NSr=r(dwt,"FlaxDistilBertForMultipleChoice"),dwt.forEach(t),jSr=r(MRe," (DistilBERT model)"),MRe.forEach(t),DSr=i(Vo),_C=n(Vo,"LI",{});var ERe=s(_C);a4e=n(ERe,"STRONG",{});var cwt=s(a4e);GSr=r(cwt,"electra"),cwt.forEach(t),OSr=r(ERe," \u2014 "),eU=n(ERe,"A",{href:!0});var mwt=s(eU);VSr=r(mwt,"FlaxElectraForMultipleChoice"),mwt.forEach(t),XSr=r(ERe," (ELECTRA model)"),ERe.forEach(t),zSr=i(Vo),bC=n(Vo,"LI",{});var CRe=s(bC);n4e=n(CRe,"STRONG",{});var fwt=s(n4e);QSr=r(fwt,"roberta"),fwt.forEach(t),WSr=r(CRe," \u2014 "),oU=n(CRe,"A",{href:!0});var gwt=s(oU);HSr=r(gwt,"FlaxRobertaForMultipleChoice"),gwt.forEach(t),USr=r(CRe," (RoBERTa model)"),CRe.forEach(t),JSr=i(Vo),vC=n(Vo,"LI",{});var wRe=s(vC);s4e=n(wRe,"STRONG",{});var hwt=s(s4e);YSr=r(hwt,"roformer"),hwt.forEach(t),KSr=r(wRe," \u2014 "),rU=n(wRe,"A",{href:!0});var uwt=s(rU);ZSr=r(uwt,"FlaxRoFormerForMultipleChoice"),uwt.forEach(t),eRr=r(wRe," (RoFormer model)"),wRe.forEach(t),oRr=i(Vo),FC=n(Vo,"LI",{});var ARe=s(FC);l4e=n(ARe,"STRONG",{});var pwt=s(l4e);rRr=r(pwt,"xlm-roberta"),pwt.forEach(t),tRr=r(ARe," \u2014 "),tU=n(ARe,"A",{href:!0});var _wt=s(tU);aRr=r(_wt,"FlaxXLMRobertaForMultipleChoice"),_wt.forEach(t),nRr=r(ARe," (XLM-RoBERTa model)"),ARe.forEach(t),Vo.forEach(t),sRr=i(Ia),i4e=n(Ia,"P",{});var bwt=s(i4e);lRr=r(bwt,"Examples:"),bwt.forEach(t),iRr=i(Ia),f(e7.$$.fragment,Ia),Ia.forEach(t),xi.forEach(t),APe=i(c),wm=n(c,"H2",{class:!0});var qIe=s(wm);TC=n(qIe,"A",{id:!0,class:!0,href:!0});var vwt=s(TC);d4e=n(vwt,"SPAN",{});var Fwt=s(d4e);f(o7.$$.fragment,Fwt),Fwt.forEach(t),vwt.forEach(t),dRr=i(qIe),c4e=n(qIe,"SPAN",{});var Twt=s(c4e);cRr=r(Twt,"FlaxAutoModelForNextSentencePrediction"),Twt.forEach(t),qIe.forEach(t),yPe=i(c),Gr=n(c,"DIV",{class:!0});var Si=s(Gr);f(r7.$$.fragment,Si),mRr=i(Si),Am=n(Si,"P",{});var tY=s(Am);fRr=r(tY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),aU=n(tY,"A",{href:!0});var Mwt=s(aU);gRr=r(Mwt,"from_pretrained()"),Mwt.forEach(t),hRr=r(tY," class method or the "),nU=n(tY,"A",{href:!0});var Ewt=s(nU);uRr=r(Ewt,"from_config()"),Ewt.forEach(t),pRr=r(tY,` class
method.`),tY.forEach(t),_Rr=i(Si),t7=n(Si,"P",{});var NIe=s(t7);bRr=r(NIe,"This class cannot be instantiated directly using "),m4e=n(NIe,"CODE",{});var Cwt=s(m4e);vRr=r(Cwt,"__init__()"),Cwt.forEach(t),FRr=r(NIe," (throws an error)."),NIe.forEach(t),TRr=i(Si),$t=n(Si,"DIV",{class:!0});var Ri=s($t);f(a7.$$.fragment,Ri),MRr=i(Ri),f4e=n(Ri,"P",{});var wwt=s(f4e);ERr=r(wwt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),wwt.forEach(t),CRr=i(Ri),ym=n(Ri,"P",{});var aY=s(ym);wRr=r(aY,`Note:
Loading a model from its configuration file does `),g4e=n(aY,"STRONG",{});var Awt=s(g4e);ARr=r(Awt,"not"),Awt.forEach(t),yRr=r(aY,` load the model weights. It only affects the
model\u2019s configuration. Use `),sU=n(aY,"A",{href:!0});var ywt=s(sU);LRr=r(ywt,"from_pretrained()"),ywt.forEach(t),xRr=r(aY," to load the model weights."),aY.forEach(t),kRr=i(Ri),h4e=n(Ri,"P",{});var Lwt=s(h4e);SRr=r(Lwt,"Examples:"),Lwt.forEach(t),RRr=i(Ri),f(n7.$$.fragment,Ri),Ri.forEach(t),BRr=i(Si),Io=n(Si,"DIV",{class:!0});var qa=s(Io);f(s7.$$.fragment,qa),PRr=i(qa),u4e=n(qa,"P",{});var xwt=s(u4e);$Rr=r(xwt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),xwt.forEach(t),IRr=i(qa),jn=n(qa,"P",{});var ww=s(jn);qRr=r(ww,"The model class to instantiate is selected based on the "),p4e=n(ww,"CODE",{});var kwt=s(p4e);NRr=r(kwt,"model_type"),kwt.forEach(t),jRr=r(ww,` property of the config object (either
passed as an argument or loaded from `),_4e=n(ww,"CODE",{});var Swt=s(_4e);DRr=r(Swt,"pretrained_model_name_or_path"),Swt.forEach(t),GRr=r(ww,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),b4e=n(ww,"CODE",{});var Rwt=s(b4e);ORr=r(Rwt,"pretrained_model_name_or_path"),Rwt.forEach(t),VRr=r(ww,":"),ww.forEach(t),XRr=i(qa),v4e=n(qa,"UL",{});var Bwt=s(v4e);MC=n(Bwt,"LI",{});var yRe=s(MC);F4e=n(yRe,"STRONG",{});var Pwt=s(F4e);zRr=r(Pwt,"bert"),Pwt.forEach(t),QRr=r(yRe," \u2014 "),lU=n(yRe,"A",{href:!0});var $wt=s(lU);WRr=r($wt,"FlaxBertForNextSentencePrediction"),$wt.forEach(t),HRr=r(yRe," (BERT model)"),yRe.forEach(t),Bwt.forEach(t),URr=i(qa),T4e=n(qa,"P",{});var Iwt=s(T4e);JRr=r(Iwt,"Examples:"),Iwt.forEach(t),YRr=i(qa),f(l7.$$.fragment,qa),qa.forEach(t),Si.forEach(t),LPe=i(c),Lm=n(c,"H2",{class:!0});var jIe=s(Lm);EC=n(jIe,"A",{id:!0,class:!0,href:!0});var qwt=s(EC);M4e=n(qwt,"SPAN",{});var Nwt=s(M4e);f(i7.$$.fragment,Nwt),Nwt.forEach(t),qwt.forEach(t),KRr=i(jIe),E4e=n(jIe,"SPAN",{});var jwt=s(E4e);ZRr=r(jwt,"FlaxAutoModelForImageClassification"),jwt.forEach(t),jIe.forEach(t),xPe=i(c),Or=n(c,"DIV",{class:!0});var Bi=s(Or);f(d7.$$.fragment,Bi),eBr=i(Bi),xm=n(Bi,"P",{});var nY=s(xm);oBr=r(nY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),iU=n(nY,"A",{href:!0});var Dwt=s(iU);rBr=r(Dwt,"from_pretrained()"),Dwt.forEach(t),tBr=r(nY," class method or the "),dU=n(nY,"A",{href:!0});var Gwt=s(dU);aBr=r(Gwt,"from_config()"),Gwt.forEach(t),nBr=r(nY,` class
method.`),nY.forEach(t),sBr=i(Bi),c7=n(Bi,"P",{});var DIe=s(c7);lBr=r(DIe,"This class cannot be instantiated directly using "),C4e=n(DIe,"CODE",{});var Owt=s(C4e);iBr=r(Owt,"__init__()"),Owt.forEach(t),dBr=r(DIe," (throws an error)."),DIe.forEach(t),cBr=i(Bi),It=n(Bi,"DIV",{class:!0});var Pi=s(It);f(m7.$$.fragment,Pi),mBr=i(Pi),w4e=n(Pi,"P",{});var Vwt=s(w4e);fBr=r(Vwt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Vwt.forEach(t),gBr=i(Pi),km=n(Pi,"P",{});var sY=s(km);hBr=r(sY,`Note:
Loading a model from its configuration file does `),A4e=n(sY,"STRONG",{});var Xwt=s(A4e);uBr=r(Xwt,"not"),Xwt.forEach(t),pBr=r(sY,` load the model weights. It only affects the
model\u2019s configuration. Use `),cU=n(sY,"A",{href:!0});var zwt=s(cU);_Br=r(zwt,"from_pretrained()"),zwt.forEach(t),bBr=r(sY," to load the model weights."),sY.forEach(t),vBr=i(Pi),y4e=n(Pi,"P",{});var Qwt=s(y4e);FBr=r(Qwt,"Examples:"),Qwt.forEach(t),TBr=i(Pi),f(f7.$$.fragment,Pi),Pi.forEach(t),MBr=i(Bi),qo=n(Bi,"DIV",{class:!0});var Na=s(qo);f(g7.$$.fragment,Na),EBr=i(Na),L4e=n(Na,"P",{});var Wwt=s(L4e);CBr=r(Wwt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Wwt.forEach(t),wBr=i(Na),Dn=n(Na,"P",{});var Aw=s(Dn);ABr=r(Aw,"The model class to instantiate is selected based on the "),x4e=n(Aw,"CODE",{});var Hwt=s(x4e);yBr=r(Hwt,"model_type"),Hwt.forEach(t),LBr=r(Aw,` property of the config object (either
passed as an argument or loaded from `),k4e=n(Aw,"CODE",{});var Uwt=s(k4e);xBr=r(Uwt,"pretrained_model_name_or_path"),Uwt.forEach(t),kBr=r(Aw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),S4e=n(Aw,"CODE",{});var Jwt=s(S4e);SBr=r(Jwt,"pretrained_model_name_or_path"),Jwt.forEach(t),RBr=r(Aw,":"),Aw.forEach(t),BBr=i(Na),h7=n(Na,"UL",{});var GIe=s(h7);CC=n(GIe,"LI",{});var LRe=s(CC);R4e=n(LRe,"STRONG",{});var Ywt=s(R4e);PBr=r(Ywt,"beit"),Ywt.forEach(t),$Br=r(LRe," \u2014 "),mU=n(LRe,"A",{href:!0});var Kwt=s(mU);IBr=r(Kwt,"FlaxBeitForImageClassification"),Kwt.forEach(t),qBr=r(LRe," (BEiT model)"),LRe.forEach(t),NBr=i(GIe),wC=n(GIe,"LI",{});var xRe=s(wC);B4e=n(xRe,"STRONG",{});var Zwt=s(B4e);jBr=r(Zwt,"vit"),Zwt.forEach(t),DBr=r(xRe," \u2014 "),fU=n(xRe,"A",{href:!0});var e6t=s(fU);GBr=r(e6t,"FlaxViTForImageClassification"),e6t.forEach(t),OBr=r(xRe," (ViT model)"),xRe.forEach(t),GIe.forEach(t),VBr=i(Na),P4e=n(Na,"P",{});var o6t=s(P4e);XBr=r(o6t,"Examples:"),o6t.forEach(t),zBr=i(Na),f(u7.$$.fragment,Na),Na.forEach(t),Bi.forEach(t),kPe=i(c),Sm=n(c,"H2",{class:!0});var OIe=s(Sm);AC=n(OIe,"A",{id:!0,class:!0,href:!0});var r6t=s(AC);$4e=n(r6t,"SPAN",{});var t6t=s($4e);f(p7.$$.fragment,t6t),t6t.forEach(t),r6t.forEach(t),QBr=i(OIe),I4e=n(OIe,"SPAN",{});var a6t=s(I4e);WBr=r(a6t,"FlaxAutoModelForVision2Seq"),a6t.forEach(t),OIe.forEach(t),SPe=i(c),Vr=n(c,"DIV",{class:!0});var $i=s(Vr);f(_7.$$.fragment,$i),HBr=i($i),Rm=n($i,"P",{});var lY=s(Rm);UBr=r(lY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),gU=n(lY,"A",{href:!0});var n6t=s(gU);JBr=r(n6t,"from_pretrained()"),n6t.forEach(t),YBr=r(lY," class method or the "),hU=n(lY,"A",{href:!0});var s6t=s(hU);KBr=r(s6t,"from_config()"),s6t.forEach(t),ZBr=r(lY,` class
method.`),lY.forEach(t),ePr=i($i),b7=n($i,"P",{});var VIe=s(b7);oPr=r(VIe,"This class cannot be instantiated directly using "),q4e=n(VIe,"CODE",{});var l6t=s(q4e);rPr=r(l6t,"__init__()"),l6t.forEach(t),tPr=r(VIe," (throws an error)."),VIe.forEach(t),aPr=i($i),qt=n($i,"DIV",{class:!0});var Ii=s(qt);f(v7.$$.fragment,Ii),nPr=i(Ii),N4e=n(Ii,"P",{});var i6t=s(N4e);sPr=r(i6t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),i6t.forEach(t),lPr=i(Ii),Bm=n(Ii,"P",{});var iY=s(Bm);iPr=r(iY,`Note:
Loading a model from its configuration file does `),j4e=n(iY,"STRONG",{});var d6t=s(j4e);dPr=r(d6t,"not"),d6t.forEach(t),cPr=r(iY,` load the model weights. It only affects the
model\u2019s configuration. Use `),uU=n(iY,"A",{href:!0});var c6t=s(uU);mPr=r(c6t,"from_pretrained()"),c6t.forEach(t),fPr=r(iY," to load the model weights."),iY.forEach(t),gPr=i(Ii),D4e=n(Ii,"P",{});var m6t=s(D4e);hPr=r(m6t,"Examples:"),m6t.forEach(t),uPr=i(Ii),f(F7.$$.fragment,Ii),Ii.forEach(t),pPr=i($i),No=n($i,"DIV",{class:!0});var ja=s(No);f(T7.$$.fragment,ja),_Pr=i(ja),G4e=n(ja,"P",{});var f6t=s(G4e);bPr=r(f6t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),f6t.forEach(t),vPr=i(ja),Gn=n(ja,"P",{});var yw=s(Gn);FPr=r(yw,"The model class to instantiate is selected based on the "),O4e=n(yw,"CODE",{});var g6t=s(O4e);TPr=r(g6t,"model_type"),g6t.forEach(t),MPr=r(yw,` property of the config object (either
passed as an argument or loaded from `),V4e=n(yw,"CODE",{});var h6t=s(V4e);EPr=r(h6t,"pretrained_model_name_or_path"),h6t.forEach(t),CPr=r(yw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X4e=n(yw,"CODE",{});var u6t=s(X4e);wPr=r(u6t,"pretrained_model_name_or_path"),u6t.forEach(t),APr=r(yw,":"),yw.forEach(t),yPr=i(ja),z4e=n(ja,"UL",{});var p6t=s(z4e);yC=n(p6t,"LI",{});var kRe=s(yC);Q4e=n(kRe,"STRONG",{});var _6t=s(Q4e);LPr=r(_6t,"vision-encoder-decoder"),_6t.forEach(t),xPr=r(kRe," \u2014 "),pU=n(kRe,"A",{href:!0});var b6t=s(pU);kPr=r(b6t,"FlaxVisionEncoderDecoderModel"),b6t.forEach(t),SPr=r(kRe," (Vision Encoder decoder model)"),kRe.forEach(t),p6t.forEach(t),RPr=i(ja),W4e=n(ja,"P",{});var v6t=s(W4e);BPr=r(v6t,"Examples:"),v6t.forEach(t),PPr=i(ja),f(M7.$$.fragment,ja),ja.forEach(t),$i.forEach(t),this.h()},h(){d(Z,"name","hf:doc:metadata"),d(Z,"content",JSON.stringify(x6t)),d(Ce,"id","auto-classes"),d(Ce,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ce,"href","#auto-classes"),d(ce,"class","relative group"),d(On,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoConfig"),d(Xn,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoModel"),d(zn,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoTokenizer"),d(Vi,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertModel"),d(Dm,"id","extending-the-auto-classes"),d(Dm,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Dm,"href","#extending-the-auto-classes"),d(Xi,"class","relative group"),d(Om,"id","transformers.AutoConfig"),d(Om,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Om,"href","#transformers.AutoConfig"),d(zi,"class","relative group"),d(A9,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),d(y9,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertConfig"),d(L9,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartConfig"),d(x9,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitConfig"),d(k9,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertConfig"),d(S9,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationConfig"),d(R9,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdConfig"),d(B9,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),d(P9,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotConfig"),d($9,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),d(I9,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertConfig"),d(q9,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineConfig"),d(N9,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPConfig"),d(j9,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertConfig"),d(D9,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextConfig"),d(G9,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLConfig"),d(O9,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),d(V9,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextConfig"),d(X9,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),d(z9,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaConfig"),d(Q9,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Config"),d(W9,"href","/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),d(H9,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTConfig"),d(U9,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrConfig"),d(J9,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertConfig"),d(Y9,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRConfig"),d(K9,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTConfig"),d(Z9,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraConfig"),d(ex,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),d(ox,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertConfig"),d(rx,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetConfig"),d(tx,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTConfig"),d(ax,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelConfig"),d(nx,"href","/docs/transformers/main/en/model_doc/glpn#transformers.GLPNConfig"),d(sx,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Config"),d(lx,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),d(ix,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJConfig"),d(dx,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertConfig"),d(cx,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertConfig"),d(mx,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTConfig"),d(fx,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMConfig"),d(gx,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),d(hx,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDConfig"),d(ux,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerConfig"),d(px,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeConfig"),d(_x,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertConfig"),d(bx,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Config"),d(vx,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianConfig"),d(Fx,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerConfig"),d(Tx,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartConfig"),d(Mx,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),d(Ex,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertConfig"),d(Cx,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetConfig"),d(wx,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5Config"),d(Ax,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerConfig"),d(yx,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),d(Lx,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusConfig"),d(xx,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverConfig"),d(kx,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartConfig"),d(Sx,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerConfig"),d(Rx,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetConfig"),d(Bx,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertConfig"),d(Px,"href","/docs/transformers/main/en/model_doc/rag#transformers.RagConfig"),d($x,"href","/docs/transformers/main/en/model_doc/realm#transformers.RealmConfig"),d(Ix,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerConfig"),d(qx,"href","/docs/transformers/main/en/model_doc/regnet#transformers.RegNetConfig"),d(Nx,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertConfig"),d(jx,"href","/docs/transformers/main/en/model_doc/resnet#transformers.ResNetConfig"),d(Dx,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertConfig"),d(Gx,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaConfig"),d(Ox,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerConfig"),d(Vx,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerConfig"),d(Xx,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWConfig"),d(zx,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDConfig"),d(Qx,"href","/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),d(Wx,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),d(Hx,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),d(Ux,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterConfig"),d(Jx,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),d(Yx,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinConfig"),d(Kx,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Config"),d(Zx,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasConfig"),d(ek,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartConfig"),d(ok,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),d(rk,"href","/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRConfig"),d(tk,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechConfig"),d(ak,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),d(nk,"href","/docs/transformers/main/en/model_doc/van#transformers.VanConfig"),d(sk,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltConfig"),d(lk,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),d(ik,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),d(dk,"href","/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertConfig"),d(ck,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTConfig"),d(mk,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEConfig"),d(fk,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),d(gk,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMConfig"),d(hk,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMConfig"),d(uk,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMConfig"),d(pk,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),d(_k,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),d(bk,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),d(vk,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetConfig"),d(Fk,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoConfig"),d(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ng,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(jg,"id","transformers.AutoTokenizer"),d(jg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(jg,"href","#transformers.AutoTokenizer"),d(Wi,"class","relative group"),d(Tk,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),d(Mk,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizer"),d(Ek,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertTokenizerFast"),d(Ck,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartTokenizer"),d(wk,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartTokenizerFast"),d(Ak,"href","/docs/transformers/main/en/model_doc/barthez#transformers.BarthezTokenizer"),d(yk,"href","/docs/transformers/main/en/model_doc/barthez#transformers.BarthezTokenizerFast"),d(Lk,"href","/docs/transformers/main/en/model_doc/bartpho#transformers.BartphoTokenizer"),d(xk,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),d(kk,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),d(Sk,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),d(Rk,"href","/docs/transformers/main/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),d(Bk,"href","/docs/transformers/main/en/model_doc/bertweet#transformers.BertweetTokenizer"),d(Pk,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdTokenizer"),d($k,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),d(Ik,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizer"),d(qk,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),d(Nk,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),d(jk,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),d(Dk,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),d(Gk,"href","/docs/transformers/main/en/model_doc/byt5#transformers.ByT5Tokenizer"),d(Ok,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertTokenizer"),d(Vk,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertTokenizerFast"),d(Xk,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineTokenizer"),d(zk,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizer"),d(Qk,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPTokenizerFast"),d(Wk,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertTokenizer"),d(Hk,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),d(Uk,"href","/docs/transformers/main/en/model_doc/cpm#transformers.CpmTokenizer"),d(Jk,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLTokenizer"),d(Yk,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaTokenizer"),d(Kk,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaTokenizerFast"),d(Zk,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),d(eS,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertTokenizer"),d(oS,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),d(rS,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),d(tS,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),d(aS,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraTokenizer"),d(nS,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraTokenizerFast"),d(sS,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertTokenizer"),d(lS,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetTokenizer"),d(iS,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetTokenizerFast"),d(dS,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTTokenizer"),d(cS,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelTokenizer"),d(mS,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelTokenizerFast"),d(fS,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(gS,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(hS,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(uS,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(pS,"href","/docs/transformers/main/en/model_doc/herbert#transformers.HerbertTokenizer"),d(_S,"href","/docs/transformers/main/en/model_doc/herbert#transformers.HerbertTokenizerFast"),d(bS,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(vS,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),d(FS,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(TS,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),d(MS,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),d(ES,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),d(CS,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),d(wS,"href","/docs/transformers/main/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),d(AS,"href","/docs/transformers/main/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),d(yS,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDTokenizer"),d(LS,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDTokenizerFast"),d(xS,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerTokenizer"),d(kS,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerTokenizerFast"),d(SS,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeTokenizer"),d(RS,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertTokenizer"),d(BS,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),d(PS,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),d($S,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianTokenizer"),d(IS,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartTokenizer"),d(qS,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartTokenizerFast"),d(NS,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBart50Tokenizer"),d(jS,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBart50TokenizerFast"),d(DS,"href","/docs/transformers/main/en/model_doc/mluke#transformers.MLukeTokenizer"),d(GS,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),d(OS,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),d(VS,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetTokenizer"),d(XS,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),d(zS,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5Tokenizer"),d(QS,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5TokenizerFast"),d(WS,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),d(HS,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),d(US,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizer"),d(JS,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),d(YS,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverTokenizer"),d(KS,"href","/docs/transformers/main/en/model_doc/phobert#transformers.PhobertTokenizer"),d(ZS,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartTokenizer"),d(eR,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),d(oR,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizer"),d(rR,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertTokenizerFast"),d(tR,"href","/docs/transformers/main/en/model_doc/rag#transformers.RagTokenizer"),d(aR,"href","/docs/transformers/main/en/model_doc/realm#transformers.RealmTokenizer"),d(nR,"href","/docs/transformers/main/en/model_doc/realm#transformers.RealmTokenizerFast"),d(sR,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerTokenizer"),d(lR,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerTokenizerFast"),d(iR,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertTokenizer"),d(dR,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertTokenizerFast"),d(cR,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertTokenizer"),d(mR,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),d(fR,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizer"),d(gR,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(hR,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerTokenizer"),d(uR,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),d(pR,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),d(_R,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),d(bR,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterTokenizer"),d(vR,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterTokenizerFast"),d(FR,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),d(TR,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),d(MR,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5Tokenizer"),d(ER,"href","/docs/transformers/main/en/model_doc/mt5#transformers.T5TokenizerFast"),d(CR,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasTokenizer"),d(wR,"href","/docs/transformers/main/en/model_doc/tapex#transformers.TapexTokenizer"),d(AR,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),d(yR,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(LR,"href","/docs/transformers/main/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),d(xR,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMTokenizer"),d(kR,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMTokenizerFast"),d(SR,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMTokenizer"),d(RR,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),d(BR,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),d(PR,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),d($R,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetTokenizer"),d(IR,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),d(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ph,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(_h,"id","transformers.AutoFeatureExtractor"),d(_h,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(_h,"href","#transformers.AutoFeatureExtractor"),d(Hi,"class","relative group"),d(qR,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),d(NR,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitFeatureExtractor"),d(jR,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPFeatureExtractor"),d(DR,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(GR,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTFeatureExtractor"),d(OR,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrFeatureExtractor"),d(VR,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d(XR,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),d(zR,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),d(QR,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),d(WR,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),d(HR,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(UR,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(JR,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),d(YR,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),d(KR,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(ZR,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(eB,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(oB,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(rB,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d($e,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Nh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(jh,"id","transformers.AutoProcessor"),d(jh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(jh,"href","#transformers.AutoProcessor"),d(Ui,"class","relative group"),d(tB,"href","/docs/transformers/main/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),d(aB,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPProcessor"),d(nB,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),d(sB,"href","/docs/transformers/main/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),d(lB,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),d(iB,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),d(dB,"href","/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRProcessor"),d(cB,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),d(mB,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(Ie,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Uh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Jh,"id","transformers.AutoModel"),d(Jh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Jh,"href","#transformers.AutoModel"),d(Yi,"class","relative group"),d(fB,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(gB,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(hB,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(uB,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertModel"),d(pB,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartModel"),d(_B,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitModel"),d(bB,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertModel"),d(vB,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),d(FB,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdModel"),d(TB,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),d(MB,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotModel"),d(EB,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),d(CB,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertModel"),d(wB,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineModel"),d(AB,"href","/docs/transformers/main/en/model_doc/clip#transformers.CLIPModel"),d(yB,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertModel"),d(LB,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextModel"),d(xB,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLModel"),d(kB,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioModel"),d(SB,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextModel"),d(RB,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionModel"),d(BB,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaModel"),d(PB,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2Model"),d($B,"href","/docs/transformers/main/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),d(IB,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTModel"),d(qB,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrModel"),d(NB,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertModel"),d(jB,"href","/docs/transformers/main/en/model_doc/dpr#transformers.DPRQuestionEncoder"),d(DB,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTModel"),d(GB,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraModel"),d(OB,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertModel"),d(VB,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetModel"),d(XB,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTModel"),d(zB,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelModel"),d(QB,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelBaseModel"),d(WB,"href","/docs/transformers/main/en/model_doc/glpn#transformers.GLPNModel"),d(HB,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2Model"),d(UB,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoModel"),d(JB,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJModel"),d(YB,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertModel"),d(KB,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertModel"),d(ZB,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTModel"),d(eP,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMModel"),d(oP,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),d(rP,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDModel"),d(tP,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerModel"),d(aP,"href","/docs/transformers/main/en/model_doc/luke#transformers.LukeModel"),d(nP,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertModel"),d(sP,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100Model"),d(lP,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianModel"),d(iP,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerModel"),d(dP,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartModel"),d(cP,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertModel"),d(mP,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertModel"),d(fP,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetModel"),d(gP,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5Model"),d(hP,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerModel"),d(uP,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),d(pP,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusModel"),d(_P,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverModel"),d(bP,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartModel"),d(vP,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerModel"),d(FP,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetModel"),d(TP,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertModel"),d(MP,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModel"),d(EP,"href","/docs/transformers/main/en/model_doc/regnet#transformers.RegNetModel"),d(CP,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertModel"),d(wP,"href","/docs/transformers/main/en/model_doc/resnet#transformers.ResNetModel"),d(AP,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel"),d(yP,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaModel"),d(LP,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerModel"),d(xP,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerModel"),d(kP,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWModel"),d(SP,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDModel"),d(RP,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextModel"),d(BP,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterModel"),d(PP,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertModel"),d($P,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinModel"),d(IP,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5Model"),d(qP,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasModel"),d(NP,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLModel"),d(jP,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechModel"),d(DP,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),d(GP,"href","/docs/transformers/main/en/model_doc/van#transformers.VanModel"),d(OP,"href","/docs/transformers/main/en/model_doc/vilt#transformers.ViltModel"),d(VP,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),d(XP,"href","/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertModel"),d(zP,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTModel"),d(QP,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEModel"),d(WP,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),d(HP,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMModel"),d(UP,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMModel"),d(JP,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMModel"),d(YP,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),d(KP,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),d(ZP,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),d(e$,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetModel"),d(o$,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoModel"),d(qe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(qp,"id","transformers.AutoModelForPreTraining"),d(qp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(qp,"href","#transformers.AutoModelForPreTraining"),d(ed,"class","relative group"),d(r$,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(t$,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(a$,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(n$,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForPreTraining"),d(s$,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(l$,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForPreTraining"),d(i$,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),d(d$,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM"),d(c$,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),d(m$,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),d(f$,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM"),d(g$,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),d(h$,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),d(u$,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForPreTraining"),d(p$,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),d(_$,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForPreTraining"),d(b$,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),d(v$,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForPreTraining"),d(F$,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),d(T$,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM"),d(M$,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),d(E$,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM"),d(C$,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForPreTraining"),d(w$,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),d(A$,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),d(y$,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),d(L$,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),d(x$,"href","/docs/transformers/main/en/model_doc/retribert#transformers.RetriBertModel"),d(k$,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM"),d(S$,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),d(R$,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration"),d(B$,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM"),d(P$,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),d($$,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),d(I$,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),d(q$,"href","/docs/transformers/main/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),d(N$,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),d(j$,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),d(D$,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(G$,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),d(O$,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),d(V$,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),d(Ne,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(C_,"id","transformers.AutoModelForCausalLM"),d(C_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(C_,"href","#transformers.AutoModelForCausalLM"),d(td,"class","relative group"),d(X$,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(z$,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Q$,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(W$,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForCausalLM"),d(H$,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertLMHeadModel"),d(U$,"href","/docs/transformers/main/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),d(J$,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),d(Y$,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),d(K$,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),d(Z$,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),d(eI,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForCausalLM"),d(oI,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),d(rI,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),d(tI,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForCausalLM"),d(aI,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),d(nI,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),d(sI,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForCausalLM"),d(lI,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianForCausalLM"),d(iI,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForCausalLM"),d(dI,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),d(cI,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),d(mI,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForCausalLM"),d(fI,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForCausalLM"),d(gI,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),d(hI,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),d(uI,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),d(pI,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForCausalLM"),d(_I,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForCausalLM"),d(bI,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForCausalLM"),d(vI,"href","/docs/transformers/main/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),d(FI,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),d(TI,"href","/docs/transformers/main/en/model_doc/trocr#transformers.TrOCRForCausalLM"),d(MI,"href","/docs/transformers/main/en/model_doc/xglm#transformers.XGLMForCausalLM"),d(EI,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(CI,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),d(wI,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),d(AI,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),d(yI,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),d(je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(lb,"id","transformers.AutoModelForMaskedLM"),d(lb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(lb,"href","#transformers.AutoModelForMaskedLM"),d(sd,"class","relative group"),d(LI,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(xI,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(kI,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(SI,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMaskedLM"),d(RI,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(BI,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForMaskedLM"),d(PI,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),d($I,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMaskedLM"),d(II,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),d(qI,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),d(NI,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForMaskedLM"),d(jI,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),d(DI,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),d(GI,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMaskedLM"),d(OI,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),d(VI,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMaskedLM"),d(XI,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMaskedLM"),d(zI,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMaskedLM"),d(QI,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),d(WI,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMaskedLM"),d(HI,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),d(UI,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),d(JI,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),d(YI,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),d(KI,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),d(ZI,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),d(eq,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),d(oq,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForMaskedLM"),d(rq,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMaskedLM"),d(tq,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMaskedLM"),d(aq,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),d(nq,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),d(sq,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForMaskedLM"),d(lq,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(iq,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),d(dq,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),d(cq,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMaskedLM"),d(De,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Xb,"id","transformers.AutoModelForSeq2SeqLM"),d(Xb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Xb,"href","#transformers.AutoModelForSeq2SeqLM"),d(dd,"class","relative group"),d(mq,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(fq,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(gq,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(hq,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(uq,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),d(pq,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),d(_q,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),d(bq,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),d(vq,"href","/docs/transformers/main/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),d(Fq,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDForConditionalGeneration"),d(Tq,"href","/docs/transformers/main/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),d(Mq,"href","/docs/transformers/main/en/model_doc/marian#transformers.MarianMTModel"),d(Eq,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),d(Cq,"href","/docs/transformers/main/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),d(wq,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),d(Aq,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),d(yq,"href","/docs/transformers/main/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),d(Lq,"href","/docs/transformers/main/en/model_doc/t5#transformers.T5ForConditionalGeneration"),d(xq,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(kq,"href","/docs/transformers/main/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),d(Ge,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(d2,"id","transformers.AutoModelForSequenceClassification"),d(d2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(d2,"href","#transformers.AutoModelForSequenceClassification"),d(fd,"class","relative group"),d(Sq,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Rq,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Bq,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Pq,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForSequenceClassification"),d($q,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForSequenceClassification"),d(Iq,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForSequenceClassification"),d(qq,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),d(Nq,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),d(jq,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),d(Dq,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForSequenceClassification"),d(Gq,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),d(Oq,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),d(Vq,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),d(Xq,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),d(zq,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),d(Qq,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),d(Wq,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForSequenceClassification"),d(Hq,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),d(Uq,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForSequenceClassification"),d(Jq,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),d(Yq,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),d(Kq,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),d(Zq,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),d(eN,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForSequenceClassification"),d(oN,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),d(rN,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),d(tN,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDForSequenceClassification"),d(aN,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),d(nN,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForSequenceClassification"),d(sN,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),d(lN,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),d(iN,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),d(dN,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),d(cN,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),d(mN,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),d(fN,"href","/docs/transformers/main/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),d(gN,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),d(hN,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),d(uN,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),d(pN,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),d(_N,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),d(bN,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),d(vN,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForSequenceClassification"),d(FN,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForSequenceClassification"),d(TN,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),d(MN,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForSequenceClassification"),d(EN,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),d(CN,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),d(wN,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),d(AN,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForSequenceClassification"),d(Oe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(av,"id","transformers.AutoModelForMultipleChoice"),d(av,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(av,"href","#transformers.AutoModelForMultipleChoice"),d(ud,"class","relative group"),d(yN,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(LN,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(xN,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(kN,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForMultipleChoice"),d(SN,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForMultipleChoice"),d(RN,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),d(BN,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),d(PN,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForMultipleChoice"),d($N,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),d(IN,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),d(qN,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),d(NN,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForMultipleChoice"),d(jN,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),d(DN,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForMultipleChoice"),d(GN,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),d(ON,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForMultipleChoice"),d(VN,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),d(XN,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),d(zN,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),d(QN,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),d(WN,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),d(HN,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),d(UN,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),d(JN,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),d(YN,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),d(KN,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),d(ZN,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForMultipleChoice"),d(ej,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),d(oj,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),d(rj,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),d(tj,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForMultipleChoice"),d(Ve,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Pv,"id","transformers.AutoModelForNextSentencePrediction"),d(Pv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Pv,"href","#transformers.AutoModelForNextSentencePrediction"),d(bd,"class","relative group"),d(aj,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(nj,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(sj,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(lj,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForNextSentencePrediction"),d(ij,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),d(dj,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),d(cj,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),d(mj,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),d(Xe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Gv,"id","transformers.AutoModelForTokenClassification"),d(Gv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Gv,"href","#transformers.AutoModelForTokenClassification"),d(Td,"class","relative group"),d(fj,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(gj,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(hj,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(uj,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForTokenClassification"),d(pj,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForTokenClassification"),d(_j,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),d(bj,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForTokenClassification"),d(vj,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForTokenClassification"),d(Fj,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),d(Tj,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),d(Mj,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForTokenClassification"),d(Ej,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),d(Cj,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),d(wj,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForTokenClassification"),d(Aj,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),d(yj,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForTokenClassification"),d(Lj,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForTokenClassification"),d(xj,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),d(kj,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForTokenClassification"),d(Sj,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),d(Rj,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),d(Bj,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForTokenClassification"),d(Pj,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),d($j,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),d(Ij,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),d(qj,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),d(Nj,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),d(jj,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForTokenClassification"),d(Dj,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForTokenClassification"),d(Gj,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),d(Oj,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),d(Vj,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForTokenClassification"),d(Xj,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),d(zj,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),d(Qj,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),d(Wj,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForTokenClassification"),d(ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(MF,"id","transformers.AutoModelForQuestionAnswering"),d(MF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(MF,"href","#transformers.AutoModelForQuestionAnswering"),d(Cd,"class","relative group"),d(Hj,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Uj,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Jj,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Yj,"href","/docs/transformers/main/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),d(Kj,"href","/docs/transformers/main/en/model_doc/bart#transformers.BartForQuestionAnswering"),d(Zj,"href","/docs/transformers/main/en/model_doc/bert#transformers.BertForQuestionAnswering"),d(eD,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),d(oD,"href","/docs/transformers/main/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),d(rD,"href","/docs/transformers/main/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),d(tD,"href","/docs/transformers/main/en/model_doc/canine#transformers.CanineForQuestionAnswering"),d(aD,"href","/docs/transformers/main/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),d(nD,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),d(sD,"href","/docs/transformers/main/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),d(lD,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),d(iD,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),d(dD,"href","/docs/transformers/main/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),d(cD,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),d(mD,"href","/docs/transformers/main/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),d(fD,"href","/docs/transformers/main/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),d(gD,"href","/docs/transformers/main/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),d(hD,"href","/docs/transformers/main/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),d(uD,"href","/docs/transformers/main/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),d(pD,"href","/docs/transformers/main/en/model_doc/led#transformers.LEDForQuestionAnswering"),d(_D,"href","/docs/transformers/main/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),d(bD,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),d(vD,"href","/docs/transformers/main/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),d(FD,"href","/docs/transformers/main/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),d(TD,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),d(MD,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),d(ED,"href","/docs/transformers/main/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),d(CD,"href","/docs/transformers/main/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),d(wD,"href","/docs/transformers/main/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),d(AD,"href","/docs/transformers/main/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),d(yD,"href","/docs/transformers/main/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),d(LD,"href","/docs/transformers/main/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),d(xD,"href","/docs/transformers/main/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),d(kD,"href","/docs/transformers/main/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),d(SD,"href","/docs/transformers/main/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),d(RD,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),d(BD,"href","/docs/transformers/main/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),d(PD,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),d($D,"href","/docs/transformers/main/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),d(Qe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(d1,"id","transformers.AutoModelForTableQuestionAnswering"),d(d1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(d1,"href","#transformers.AutoModelForTableQuestionAnswering"),d(yd,"class","relative group"),d(ID,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(qD,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(ND,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(jD,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),d(We,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(f1,"id","transformers.AutoModelForImageClassification"),d(f1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(f1,"href","#transformers.AutoModelForImageClassification"),d(kd,"class","relative group"),d(DD,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(GD,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(OD,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(VD,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitForImageClassification"),d(XD,"href","/docs/transformers/main/en/model_doc/convnext#transformers.ConvNextForImageClassification"),d(zD,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),d(QD,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassification"),d(WD,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),d(HD,"href","/docs/transformers/main/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),d(UD,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),d(JD,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),d(YD,"href","/docs/transformers/main/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),d(KD,"href","/docs/transformers/main/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),d(ZD,"href","/docs/transformers/main/en/model_doc/regnet#transformers.RegNetForImageClassification"),d(eG,"href","/docs/transformers/main/en/model_doc/resnet#transformers.ResNetForImageClassification"),d(oG,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForImageClassification"),d(rG,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinForImageClassification"),d(tG,"href","/docs/transformers/main/en/model_doc/van#transformers.VanForImageClassification"),d(aG,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTForImageClassification"),d(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(w1,"id","transformers.AutoModelForVision2Seq"),d(w1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(w1,"href","#transformers.AutoModelForVision2Seq"),d(Bd,"class","relative group"),d(nG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(sG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(lG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(iG,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),d(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(L1,"id","transformers.AutoModelForAudioClassification"),d(L1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(L1,"href","#transformers.AutoModelForAudioClassification"),d(Id,"class","relative group"),d(dG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(cG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(mG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(fG,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),d(gG,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertForSequenceClassification"),d(hG,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWForSequenceClassification"),d(uG,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),d(pG,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),d(_G,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),d(bG,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),d(vG,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),d(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(N1,"id","transformers.AutoModelForAudioFrameClassification"),d(N1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(N1,"href","#transformers.AutoModelForAudioFrameClassification"),d(jd,"class","relative group"),d(FG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(TG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(MG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(EG,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),d(CG,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),d(wG,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),d(AG,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),d(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(X1,"id","transformers.AutoModelForCTC"),d(X1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(X1,"href","#transformers.AutoModelForCTC"),d(Od,"class","relative group"),d(yG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(LG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(xG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(kG,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),d(SG,"href","/docs/transformers/main/en/model_doc/hubert#transformers.HubertForCTC"),d(RG,"href","/docs/transformers/main/en/model_doc/sew#transformers.SEWForCTC"),d(BG,"href","/docs/transformers/main/en/model_doc/sew-d#transformers.SEWDForCTC"),d(PG,"href","/docs/transformers/main/en/model_doc/unispeech#transformers.UniSpeechForCTC"),d($G,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),d(IG,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),d(qG,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForCTC"),d(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(eT,"id","transformers.AutoModelForSpeechSeq2Seq"),d(eT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(eT,"href","#transformers.AutoModelForSpeechSeq2Seq"),d(zd,"class","relative group"),d(NG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(jG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(DG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(GG,"href","/docs/transformers/main/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),d(OG,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),d(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(aT,"id","transformers.AutoModelForAudioXVector"),d(aT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(aT,"href","#transformers.AutoModelForAudioXVector"),d(Hd,"class","relative group"),d(VG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(XG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(zG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(QG,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),d(WG,"href","/docs/transformers/main/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),d(HG,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),d(UG,"href","/docs/transformers/main/en/model_doc/wavlm#transformers.WavLMForXVector"),d(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(cT,"id","transformers.AutoModelForMaskedImageModeling"),d(cT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(cT,"href","#transformers.AutoModelForMaskedImageModeling"),d(Yd,"class","relative group"),d(JG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(YG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(KG,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ZG,"href","/docs/transformers/main/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),d(eO,"href","/docs/transformers/main/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),d(oO,"href","/docs/transformers/main/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),d(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(uT,"id","transformers.AutoModelForObjectDetection"),d(uT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(uT,"href","#transformers.AutoModelForObjectDetection"),d(oc,"class","relative group"),d(rO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(tO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(aO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(nO,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrForObjectDetection"),d(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(bT,"id","transformers.AutoModelForImageSegmentation"),d(bT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(bT,"href","#transformers.AutoModelForImageSegmentation"),d(ac,"class","relative group"),d(sO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(lO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(iO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(dO,"href","/docs/transformers/main/en/model_doc/detr#transformers.DetrForSegmentation"),d(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(TT,"id","transformers.AutoModelForSemanticSegmentation"),d(TT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(TT,"href","#transformers.AutoModelForSemanticSegmentation"),d(lc,"class","relative group"),d(cO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(mO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(fO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(gO,"href","/docs/transformers/main/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),d(hO,"href","/docs/transformers/main/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),d(uO,"href","/docs/transformers/main/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),d(pO,"href","/docs/transformers/main/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),d(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(yT,"id","transformers.AutoModelForInstanceSegmentation"),d(yT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(yT,"href","#transformers.AutoModelForInstanceSegmentation"),d(cc,"class","relative group"),d(_O,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(bO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(vO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(FO,"href","/docs/transformers/main/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),d(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(kT,"id","transformers.TFAutoModel"),d(kT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(kT,"href","#transformers.TFAutoModel"),d(gc,"class","relative group"),d(TO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(MO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(EO,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(CO,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertModel"),d(wO,"href","/docs/transformers/main/en/model_doc/bart#transformers.TFBartModel"),d(AO,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertModel"),d(yO,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),d(LO,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),d(xO,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertModel"),d(kO,"href","/docs/transformers/main/en/model_doc/clip#transformers.TFCLIPModel"),d(SO,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertModel"),d(RO,"href","/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextModel"),d(BO,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLModel"),d(PO,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaModel"),d($O,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),d(IO,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertModel"),d(qO,"href","/docs/transformers/main/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),d(NO,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraModel"),d(jO,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertModel"),d(DO,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelModel"),d(GO,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelBaseModel"),d(OO,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2Model"),d(VO,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJModel"),d(XO,"href","/docs/transformers/main/en/model_doc/hubert#transformers.TFHubertModel"),d(zO,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),d(QO,"href","/docs/transformers/main/en/model_doc/led#transformers.TFLEDModel"),d(WO,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerModel"),d(HO,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertModel"),d(UO,"href","/docs/transformers/main/en/model_doc/marian#transformers.TFMarianModel"),d(JO,"href","/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartModel"),d(YO,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertModel"),d(KO,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetModel"),d(ZO,"href","/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5Model"),d(eV,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),d(oV,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusModel"),d(rV,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertModel"),d(tV,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaModel"),d(aV,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerModel"),d(nV,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),d(sV,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5Model"),d(lV,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasModel"),d(iV,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),d(dV,"href","/docs/transformers/main/en/model_doc/vit#transformers.TFViTModel"),d(cV,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEModel"),d(mV,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),d(fV,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMModel"),d(gV,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),d(hV,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetModel"),d(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(FM,"id","transformers.TFAutoModelForPreTraining"),d(FM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(FM,"href","#transformers.TFAutoModelForPreTraining"),d(pc,"class","relative group"),d(uV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(pV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(_V,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(bV,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForPreTraining"),d(vV,"href","/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),d(FV,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForPreTraining"),d(TV,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),d(MV,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),d(EV,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),d(CV,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForPreTraining"),d(wV,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),d(AV,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),d(yV,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),d(LV,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),d(xV,"href","/docs/transformers/main/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),d(kV,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),d(SV,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),d(RV,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),d(BV,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),d(PV,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),d($V,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),d(IV,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),d(qV,"href","/docs/transformers/main/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),d(NV,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(jV,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),d(DV,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),d(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(XM,"id","transformers.TFAutoModelForCausalLM"),d(XM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(XM,"href","#transformers.TFAutoModelForCausalLM"),d(vc,"class","relative group"),d(GV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(OV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(VV,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(XV,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertLMHeadModel"),d(zV,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),d(QV,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),d(WV,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),d(HV,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),d(UV,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),d(JV,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),d(YV,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),d(KV,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),d(ZV,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),d(eX,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(oX,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),d(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(t4,"id","transformers.TFAutoModelForImageClassification"),d(t4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(t4,"href","#transformers.TFAutoModelForImageClassification"),d(Mc,"class","relative group"),d(rX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(tX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(aX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(nX,"href","/docs/transformers/main/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),d(sX,"href","/docs/transformers/main/en/model_doc/vit#transformers.TFViTForImageClassification"),d(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(s4,"id","transformers.TFAutoModelForMaskedLM"),d(s4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(s4,"href","#transformers.TFAutoModelForMaskedLM"),d(wc,"class","relative group"),d(lX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(iX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(dX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(cX,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),d(mX,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMaskedLM"),d(fX,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),d(gX,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),d(hX,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),d(uX,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),d(pX,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),d(_X,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMaskedLM"),d(bX,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),d(vX,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),d(FX,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),d(TX,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),d(MX,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),d(EX,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),d(CX,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),d(wX,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),d(AX,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),d(yX,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),d(LX,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(xX,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),d(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(y4,"id","transformers.TFAutoModelForSeq2SeqLM"),d(y4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(y4,"href","#transformers.TFAutoModelForSeq2SeqLM"),d(Lc,"class","relative group"),d(kX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(SX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(RX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(BX,"href","/docs/transformers/main/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),d(PX,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),d($X,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),d(IX,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),d(qX,"href","/docs/transformers/main/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),d(NX,"href","/docs/transformers/main/en/model_doc/marian#transformers.TFMarianMTModel"),d(jX,"href","/docs/transformers/main/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),d(DX,"href","/docs/transformers/main/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),d(GX,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),d(OX,"href","/docs/transformers/main/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),d(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(N4,"id","transformers.TFAutoModelForSequenceClassification"),d(N4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(N4,"href","#transformers.TFAutoModelForSequenceClassification"),d(Sc,"class","relative group"),d(VX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(XX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(zX,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(QX,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),d(WX,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForSequenceClassification"),d(HX,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),d(UX,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),d(JX,"href","/docs/transformers/main/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),d(YX,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),d(KX,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),d(ZX,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),d(ez,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),d(oz,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),d(rz,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),d(tz,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),d(az,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),d(nz,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),d(sz,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),d(lz,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),d(iz,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),d(dz,"href","/docs/transformers/main/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),d(cz,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),d(mz,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),d(fz,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),d(gz,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),d(hz,"href","/docs/transformers/main/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),d(uz,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),d(pz,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),d(_z,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),d(Fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(mE,"id","transformers.TFAutoModelForMultipleChoice"),d(mE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(mE,"href","#transformers.TFAutoModelForMultipleChoice"),d(Pc,"class","relative group"),d(bz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(vz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Fz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Tz,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),d(Mz,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForMultipleChoice"),d(Ez,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),d(Cz,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),d(wz,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),d(Az,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),d(yz,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),d(Lz,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),d(xz,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),d(kz,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),d(Sz,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),d(Rz,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),d(Bz,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),d(Pz,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),d($z,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),d(Iz,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),d(qz,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),d(To,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(xE,"id","transformers.TFAutoModelForTableQuestionAnswering"),d(xE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(xE,"href","#transformers.TFAutoModelForTableQuestionAnswering"),d(qc,"class","relative group"),d(Nz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(jz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Dz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Gz,"href","/docs/transformers/main/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),d(Mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(SE,"id","transformers.TFAutoModelForTokenClassification"),d(SE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(SE,"href","#transformers.TFAutoModelForTokenClassification"),d(Dc,"class","relative group"),d(Oz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Vz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Xz,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(zz,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),d(Qz,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForTokenClassification"),d(Wz,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),d(Hz,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),d(Uz,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),d(Jz,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),d(Yz,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),d(Kz,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForTokenClassification"),d(Zz,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),d(eQ,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),d(oQ,"href","/docs/transformers/main/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),d(rQ,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),d(tQ,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),d(aQ,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),d(nQ,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),d(sQ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),d(lQ,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),d(iQ,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),d(dQ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),d(cQ,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),d(Eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(KE,"id","transformers.TFAutoModelForQuestionAnswering"),d(KE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(KE,"href","#transformers.TFAutoModelForQuestionAnswering"),d(Vc,"class","relative group"),d(mQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(fQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(gQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(hQ,"href","/docs/transformers/main/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),d(uQ,"href","/docs/transformers/main/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),d(pQ,"href","/docs/transformers/main/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),d(_Q,"href","/docs/transformers/main/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),d(bQ,"href","/docs/transformers/main/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),d(vQ,"href","/docs/transformers/main/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),d(FQ,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),d(TQ,"href","/docs/transformers/main/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),d(MQ,"href","/docs/transformers/main/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),d(EQ,"href","/docs/transformers/main/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),d(CQ,"href","/docs/transformers/main/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),d(wQ,"href","/docs/transformers/main/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),d(AQ,"href","/docs/transformers/main/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),d(yQ,"href","/docs/transformers/main/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),d(LQ,"href","/docs/transformers/main/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),d(xQ,"href","/docs/transformers/main/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),d(kQ,"href","/docs/transformers/main/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),d(SQ,"href","/docs/transformers/main/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),d(RQ,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),d(BQ,"href","/docs/transformers/main/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),d(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(v5,"id","transformers.TFAutoModelForVision2Seq"),d(v5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(v5,"href","#transformers.TFAutoModelForVision2Seq"),d(Qc,"class","relative group"),d(PQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d($Q,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(IQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(qQ,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),d(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(T5,"id","transformers.TFAutoModelForSpeechSeq2Seq"),d(T5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(T5,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),d(Uc,"class","relative group"),d(NQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(jQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(DQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(GQ,"href","/docs/transformers/main/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),d(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(E5,"id","transformers.FlaxAutoModel"),d(E5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(E5,"href","#transformers.FlaxAutoModel"),d(Kc,"class","relative group"),d(OQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(VQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(XQ,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(zQ,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertModel"),d(QQ,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartModel"),d(WQ,"href","/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitModel"),d(HQ,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertModel"),d(UQ,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),d(JQ,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),d(YQ,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),d(KQ,"href","/docs/transformers/main/en/model_doc/clip#transformers.FlaxCLIPModel"),d(ZQ,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),d(eW,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraModel"),d(oW,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2Model"),d(rW,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),d(tW,"href","/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJModel"),d(aW,"href","/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianModel"),d(nW,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartModel"),d(sW,"href","/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5Model"),d(lW,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusModel"),d(iW,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaModel"),d(dW,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerModel"),d(cW,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5Model"),d(mW,"href","/docs/transformers/main/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),d(fW,"href","/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTModel"),d(gW,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),d(hW,"href","/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMModel"),d(uW,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),d(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(U5,"id","transformers.FlaxAutoModelForCausalLM"),d(U5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(U5,"href","#transformers.FlaxAutoModelForCausalLM"),d(om,"class","relative group"),d(pW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(_W,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(bW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(vW,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForCausalLM"),d(FW,"href","/docs/transformers/main/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),d(TW,"href","/docs/transformers/main/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),d(MW,"href","/docs/transformers/main/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),d(EW,"href","/docs/transformers/main/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),d(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(o3,"id","transformers.FlaxAutoModelForPreTraining"),d(o3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(o3,"href","#transformers.FlaxAutoModelForPreTraining"),d(am,"class","relative group"),d(CW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(wW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(AW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(yW,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),d(LW,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(xW,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForPreTraining"),d(kW,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),d(SW,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),d(RW,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(BW,"href","/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),d(PW,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),d($W,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),d(IW,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),d(qW,"href","/docs/transformers/main/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),d(NW,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),d(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(h3,"id","transformers.FlaxAutoModelForMaskedLM"),d(h3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(h3,"href","#transformers.FlaxAutoModelForMaskedLM"),d(lm,"class","relative group"),d(jW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(DW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(GW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(OW,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),d(VW,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(XW,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),d(zW,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),d(QW,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),d(WW,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),d(HW,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(UW,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),d(JW,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),d(YW,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),d(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(w3,"id","transformers.FlaxAutoModelForSeq2SeqLM"),d(w3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(w3,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),d(cm,"class","relative group"),d(KW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ZW,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(eH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(oH,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(rH,"href","/docs/transformers/main/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),d(tH,"href","/docs/transformers/main/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),d(aH,"href","/docs/transformers/main/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),d(nH,"href","/docs/transformers/main/en/model_doc/marian#transformers.FlaxMarianMTModel"),d(sH,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(lH,"href","/docs/transformers/main/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),d(iH,"href","/docs/transformers/main/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),d(dH,"href","/docs/transformers/main/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),d(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d($3,"id","transformers.FlaxAutoModelForSequenceClassification"),d($3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d($3,"href","#transformers.FlaxAutoModelForSequenceClassification"),d(gm,"class","relative group"),d(cH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(mH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(fH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(gH,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),d(hH,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),d(uH,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),d(pH,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),d(_H,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),d(bH,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),d(vH,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),d(FH,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),d(TH,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),d(MH,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),d(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Q3,"id","transformers.FlaxAutoModelForQuestionAnswering"),d(Q3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Q3,"href","#transformers.FlaxAutoModelForQuestionAnswering"),d(pm,"class","relative group"),d(EH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(CH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(wH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(AH,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),d(yH,"href","/docs/transformers/main/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),d(LH,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),d(xH,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),d(kH,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),d(SH,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),d(RH,"href","/docs/transformers/main/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),d(BH,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),d(PH,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),d($H,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),d(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(tC,"id","transformers.FlaxAutoModelForTokenClassification"),d(tC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(tC,"href","#transformers.FlaxAutoModelForTokenClassification"),d(vm,"class","relative group"),d(IH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(qH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(NH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(jH,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),d(DH,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),d(GH,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),d(OH,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),d(VH,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),d(XH,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),d(zH,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),d(QH,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),d(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(fC,"id","transformers.FlaxAutoModelForMultipleChoice"),d(fC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(fC,"href","#transformers.FlaxAutoModelForMultipleChoice"),d(Mm,"class","relative group"),d(WH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(HH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(UH,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(JH,"href","/docs/transformers/main/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),d(YH,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),d(KH,"href","/docs/transformers/main/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),d(ZH,"href","/docs/transformers/main/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),d(eU,"href","/docs/transformers/main/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),d(oU,"href","/docs/transformers/main/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),d(rU,"href","/docs/transformers/main/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),d(tU,"href","/docs/transformers/main/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),d($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(TC,"id","transformers.FlaxAutoModelForNextSentencePrediction"),d(TC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(TC,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),d(wm,"class","relative group"),d(aU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(nU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(sU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(lU,"href","/docs/transformers/main/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),d(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(EC,"id","transformers.FlaxAutoModelForImageClassification"),d(EC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(EC,"href","#transformers.FlaxAutoModelForImageClassification"),d(Lm,"class","relative group"),d(iU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(dU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(cU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(mU,"href","/docs/transformers/main/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),d(fU,"href","/docs/transformers/main/en/model_doc/vit#transformers.FlaxViTForImageClassification"),d(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(AC,"id","transformers.FlaxAutoModelForVision2Seq"),d(AC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(AC,"href","#transformers.FlaxAutoModelForVision2Seq"),d(Sm,"class","relative group"),d(gU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(hU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(uU,"href","/docs/transformers/main/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(pU,"href","/docs/transformers/main/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),d(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(c,_){e(document.head,Z),b(c,io,_),b(c,ce,_),e(ce,Ce),e(Ce,lo),g(he,lo,null),e(ce,Me),e(ce,Xo),e(Xo,qi),b(c,Im,_),b(c,ma,_),e(ma,Ni),e(ma,ji),e(ji,Lw),e(ma,qm),b(c,xe,_),b(c,co,_),e(co,Di),e(co,On),e(On,xw),e(co,Vn),e(co,Xn),e(Xn,kw),e(co,Gi),e(co,zn),e(zn,Sw),e(co,Oi),b(c,Nm,_),g(Da,c,_),b(c,mo,_),b(c,_e,_),e(_e,F9),e(_e,Vi),e(Vi,T9),e(_e,M9),b(c,zo,_),b(c,Ga,_),e(Ga,E9),e(Ga,jm),e(jm,C9),e(Ga,XIe),b(c,SRe,_),b(c,Xi,_),e(Xi,Dm),e(Dm,dY),g(Rw,dY,null),e(Xi,zIe),e(Xi,cY),e(cY,QIe),b(c,RRe,_),b(c,Qn,_),e(Qn,WIe),e(Qn,mY),e(mY,HIe),e(Qn,UIe),e(Qn,fY),e(fY,JIe),e(Qn,YIe),b(c,BRe,_),g(Bw,c,_),b(c,PRe,_),b(c,w9,_),e(w9,KIe),b(c,$Re,_),g(Gm,c,_),b(c,IRe,_),b(c,zi,_),e(zi,Om),e(Om,gY),g(Pw,gY,null),e(zi,ZIe),e(zi,hY),e(hY,eqe),b(c,qRe,_),b(c,Qo,_),g($w,Qo,null),e(Qo,oqe),e(Qo,Iw),e(Iw,rqe),e(Iw,A9),e(A9,tqe),e(Iw,aqe),e(Qo,nqe),e(Qo,qw),e(qw,sqe),e(qw,uY),e(uY,lqe),e(qw,iqe),e(Qo,dqe),e(Qo,fo),g(Nw,fo,null),e(fo,cqe),e(fo,pY),e(pY,mqe),e(fo,fqe),e(fo,Qi),e(Qi,gqe),e(Qi,_Y),e(_Y,hqe),e(Qi,uqe),e(Qi,bY),e(bY,pqe),e(Qi,_qe),e(fo,bqe),e(fo,v),e(v,Vm),e(Vm,vY),e(vY,vqe),e(Vm,Fqe),e(Vm,y9),e(y9,Tqe),e(Vm,Mqe),e(v,Eqe),e(v,Xm),e(Xm,FY),e(FY,Cqe),e(Xm,wqe),e(Xm,L9),e(L9,Aqe),e(Xm,yqe),e(v,Lqe),e(v,zm),e(zm,TY),e(TY,xqe),e(zm,kqe),e(zm,x9),e(x9,Sqe),e(zm,Rqe),e(v,Bqe),e(v,Qm),e(Qm,MY),e(MY,Pqe),e(Qm,$qe),e(Qm,k9),e(k9,Iqe),e(Qm,qqe),e(v,Nqe),e(v,Wm),e(Wm,EY),e(EY,jqe),e(Wm,Dqe),e(Wm,S9),e(S9,Gqe),e(Wm,Oqe),e(v,Vqe),e(v,Hm),e(Hm,CY),e(CY,Xqe),e(Hm,zqe),e(Hm,R9),e(R9,Qqe),e(Hm,Wqe),e(v,Hqe),e(v,Um),e(Um,wY),e(wY,Uqe),e(Um,Jqe),e(Um,B9),e(B9,Yqe),e(Um,Kqe),e(v,Zqe),e(v,Jm),e(Jm,AY),e(AY,eNe),e(Jm,oNe),e(Jm,P9),e(P9,rNe),e(Jm,tNe),e(v,aNe),e(v,Ym),e(Ym,yY),e(yY,nNe),e(Ym,sNe),e(Ym,$9),e($9,lNe),e(Ym,iNe),e(v,dNe),e(v,Km),e(Km,LY),e(LY,cNe),e(Km,mNe),e(Km,I9),e(I9,fNe),e(Km,gNe),e(v,hNe),e(v,Zm),e(Zm,xY),e(xY,uNe),e(Zm,pNe),e(Zm,q9),e(q9,_Ne),e(Zm,bNe),e(v,vNe),e(v,ef),e(ef,kY),e(kY,FNe),e(ef,TNe),e(ef,N9),e(N9,MNe),e(ef,ENe),e(v,CNe),e(v,of),e(of,SY),e(SY,wNe),e(of,ANe),e(of,j9),e(j9,yNe),e(of,LNe),e(v,xNe),e(v,rf),e(rf,RY),e(RY,kNe),e(rf,SNe),e(rf,D9),e(D9,RNe),e(rf,BNe),e(v,PNe),e(v,tf),e(tf,BY),e(BY,$Ne),e(tf,INe),e(tf,G9),e(G9,qNe),e(tf,NNe),e(v,jNe),e(v,af),e(af,PY),e(PY,DNe),e(af,GNe),e(af,O9),e(O9,ONe),e(af,VNe),e(v,XNe),e(v,nf),e(nf,$Y),e($Y,zNe),e(nf,QNe),e(nf,V9),e(V9,WNe),e(nf,HNe),e(v,UNe),e(v,sf),e(sf,IY),e(IY,JNe),e(sf,YNe),e(sf,X9),e(X9,KNe),e(sf,ZNe),e(v,eje),e(v,lf),e(lf,qY),e(qY,oje),e(lf,rje),e(lf,z9),e(z9,tje),e(lf,aje),e(v,nje),e(v,df),e(df,NY),e(NY,sje),e(df,lje),e(df,Q9),e(Q9,ije),e(df,dje),e(v,cje),e(v,cf),e(cf,jY),e(jY,mje),e(cf,fje),e(cf,W9),e(W9,gje),e(cf,hje),e(v,uje),e(v,mf),e(mf,DY),e(DY,pje),e(mf,_je),e(mf,H9),e(H9,bje),e(mf,vje),e(v,Fje),e(v,ff),e(ff,GY),e(GY,Tje),e(ff,Mje),e(ff,U9),e(U9,Eje),e(ff,Cje),e(v,wje),e(v,gf),e(gf,OY),e(OY,Aje),e(gf,yje),e(gf,J9),e(J9,Lje),e(gf,xje),e(v,kje),e(v,hf),e(hf,VY),e(VY,Sje),e(hf,Rje),e(hf,Y9),e(Y9,Bje),e(hf,Pje),e(v,$je),e(v,uf),e(uf,XY),e(XY,Ije),e(uf,qje),e(uf,K9),e(K9,Nje),e(uf,jje),e(v,Dje),e(v,pf),e(pf,zY),e(zY,Gje),e(pf,Oje),e(pf,Z9),e(Z9,Vje),e(pf,Xje),e(v,zje),e(v,_f),e(_f,QY),e(QY,Qje),e(_f,Wje),e(_f,ex),e(ex,Hje),e(_f,Uje),e(v,Jje),e(v,bf),e(bf,WY),e(WY,Yje),e(bf,Kje),e(bf,ox),e(ox,Zje),e(bf,eDe),e(v,oDe),e(v,vf),e(vf,HY),e(HY,rDe),e(vf,tDe),e(vf,rx),e(rx,aDe),e(vf,nDe),e(v,sDe),e(v,Ff),e(Ff,UY),e(UY,lDe),e(Ff,iDe),e(Ff,tx),e(tx,dDe),e(Ff,cDe),e(v,mDe),e(v,Tf),e(Tf,JY),e(JY,fDe),e(Tf,gDe),e(Tf,ax),e(ax,hDe),e(Tf,uDe),e(v,pDe),e(v,Mf),e(Mf,YY),e(YY,_De),e(Mf,bDe),e(Mf,nx),e(nx,vDe),e(Mf,FDe),e(v,TDe),e(v,Ef),e(Ef,KY),e(KY,MDe),e(Ef,EDe),e(Ef,sx),e(sx,CDe),e(Ef,wDe),e(v,ADe),e(v,Cf),e(Cf,ZY),e(ZY,yDe),e(Cf,LDe),e(Cf,lx),e(lx,xDe),e(Cf,kDe),e(v,SDe),e(v,wf),e(wf,eK),e(eK,RDe),e(wf,BDe),e(wf,ix),e(ix,PDe),e(wf,$De),e(v,IDe),e(v,Af),e(Af,oK),e(oK,qDe),e(Af,NDe),e(Af,dx),e(dx,jDe),e(Af,DDe),e(v,GDe),e(v,yf),e(yf,rK),e(rK,ODe),e(yf,VDe),e(yf,cx),e(cx,XDe),e(yf,zDe),e(v,QDe),e(v,Lf),e(Lf,tK),e(tK,WDe),e(Lf,HDe),e(Lf,mx),e(mx,UDe),e(Lf,JDe),e(v,YDe),e(v,xf),e(xf,aK),e(aK,KDe),e(xf,ZDe),e(xf,fx),e(fx,eGe),e(xf,oGe),e(v,rGe),e(v,kf),e(kf,nK),e(nK,tGe),e(kf,aGe),e(kf,gx),e(gx,nGe),e(kf,sGe),e(v,lGe),e(v,Sf),e(Sf,sK),e(sK,iGe),e(Sf,dGe),e(Sf,hx),e(hx,cGe),e(Sf,mGe),e(v,fGe),e(v,Rf),e(Rf,lK),e(lK,gGe),e(Rf,hGe),e(Rf,ux),e(ux,uGe),e(Rf,pGe),e(v,_Ge),e(v,Bf),e(Bf,iK),e(iK,bGe),e(Bf,vGe),e(Bf,px),e(px,FGe),e(Bf,TGe),e(v,MGe),e(v,Pf),e(Pf,dK),e(dK,EGe),e(Pf,CGe),e(Pf,_x),e(_x,wGe),e(Pf,AGe),e(v,yGe),e(v,$f),e($f,cK),e(cK,LGe),e($f,xGe),e($f,bx),e(bx,kGe),e($f,SGe),e(v,RGe),e(v,If),e(If,mK),e(mK,BGe),e(If,PGe),e(If,vx),e(vx,$Ge),e(If,IGe),e(v,qGe),e(v,qf),e(qf,fK),e(fK,NGe),e(qf,jGe),e(qf,Fx),e(Fx,DGe),e(qf,GGe),e(v,OGe),e(v,Nf),e(Nf,gK),e(gK,VGe),e(Nf,XGe),e(Nf,Tx),e(Tx,zGe),e(Nf,QGe),e(v,WGe),e(v,jf),e(jf,hK),e(hK,HGe),e(jf,UGe),e(jf,Mx),e(Mx,JGe),e(jf,YGe),e(v,KGe),e(v,Df),e(Df,uK),e(uK,ZGe),e(Df,eOe),e(Df,Ex),e(Ex,oOe),e(Df,rOe),e(v,tOe),e(v,Gf),e(Gf,pK),e(pK,aOe),e(Gf,nOe),e(Gf,Cx),e(Cx,sOe),e(Gf,lOe),e(v,iOe),e(v,Of),e(Of,_K),e(_K,dOe),e(Of,cOe),e(Of,wx),e(wx,mOe),e(Of,fOe),e(v,gOe),e(v,Vf),e(Vf,bK),e(bK,hOe),e(Vf,uOe),e(Vf,Ax),e(Ax,pOe),e(Vf,_Oe),e(v,bOe),e(v,Xf),e(Xf,vK),e(vK,vOe),e(Xf,FOe),e(Xf,yx),e(yx,TOe),e(Xf,MOe),e(v,EOe),e(v,zf),e(zf,FK),e(FK,COe),e(zf,wOe),e(zf,Lx),e(Lx,AOe),e(zf,yOe),e(v,LOe),e(v,Qf),e(Qf,TK),e(TK,xOe),e(Qf,kOe),e(Qf,xx),e(xx,SOe),e(Qf,ROe),e(v,BOe),e(v,Wf),e(Wf,MK),e(MK,POe),e(Wf,$Oe),e(Wf,kx),e(kx,IOe),e(Wf,qOe),e(v,NOe),e(v,Hf),e(Hf,EK),e(EK,jOe),e(Hf,DOe),e(Hf,Sx),e(Sx,GOe),e(Hf,OOe),e(v,VOe),e(v,Uf),e(Uf,CK),e(CK,XOe),e(Uf,zOe),e(Uf,Rx),e(Rx,QOe),e(Uf,WOe),e(v,HOe),e(v,Jf),e(Jf,wK),e(wK,UOe),e(Jf,JOe),e(Jf,Bx),e(Bx,YOe),e(Jf,KOe),e(v,ZOe),e(v,Yf),e(Yf,AK),e(AK,eVe),e(Yf,oVe),e(Yf,Px),e(Px,rVe),e(Yf,tVe),e(v,aVe),e(v,Kf),e(Kf,yK),e(yK,nVe),e(Kf,sVe),e(Kf,$x),e($x,lVe),e(Kf,iVe),e(v,dVe),e(v,Zf),e(Zf,LK),e(LK,cVe),e(Zf,mVe),e(Zf,Ix),e(Ix,fVe),e(Zf,gVe),e(v,hVe),e(v,eg),e(eg,xK),e(xK,uVe),e(eg,pVe),e(eg,qx),e(qx,_Ve),e(eg,bVe),e(v,vVe),e(v,og),e(og,kK),e(kK,FVe),e(og,TVe),e(og,Nx),e(Nx,MVe),e(og,EVe),e(v,CVe),e(v,rg),e(rg,SK),e(SK,wVe),e(rg,AVe),e(rg,jx),e(jx,yVe),e(rg,LVe),e(v,xVe),e(v,tg),e(tg,RK),e(RK,kVe),e(tg,SVe),e(tg,Dx),e(Dx,RVe),e(tg,BVe),e(v,PVe),e(v,ag),e(ag,BK),e(BK,$Ve),e(ag,IVe),e(ag,Gx),e(Gx,qVe),e(ag,NVe),e(v,jVe),e(v,ng),e(ng,PK),e(PK,DVe),e(ng,GVe),e(ng,Ox),e(Ox,OVe),e(ng,VVe),e(v,XVe),e(v,sg),e(sg,$K),e($K,zVe),e(sg,QVe),e(sg,Vx),e(Vx,WVe),e(sg,HVe),e(v,UVe),e(v,lg),e(lg,IK),e(IK,JVe),e(lg,YVe),e(lg,Xx),e(Xx,KVe),e(lg,ZVe),e(v,eXe),e(v,ig),e(ig,qK),e(qK,oXe),e(ig,rXe),e(ig,zx),e(zx,tXe),e(ig,aXe),e(v,nXe),e(v,dg),e(dg,NK),e(NK,sXe),e(dg,lXe),e(dg,Qx),e(Qx,iXe),e(dg,dXe),e(v,cXe),e(v,cg),e(cg,jK),e(jK,mXe),e(cg,fXe),e(cg,Wx),e(Wx,gXe),e(cg,hXe),e(v,uXe),e(v,mg),e(mg,DK),e(DK,pXe),e(mg,_Xe),e(mg,Hx),e(Hx,bXe),e(mg,vXe),e(v,FXe),e(v,fg),e(fg,GK),e(GK,TXe),e(fg,MXe),e(fg,Ux),e(Ux,EXe),e(fg,CXe),e(v,wXe),e(v,gg),e(gg,OK),e(OK,AXe),e(gg,yXe),e(gg,Jx),e(Jx,LXe),e(gg,xXe),e(v,kXe),e(v,hg),e(hg,VK),e(VK,SXe),e(hg,RXe),e(hg,Yx),e(Yx,BXe),e(hg,PXe),e(v,$Xe),e(v,ug),e(ug,XK),e(XK,IXe),e(ug,qXe),e(ug,Kx),e(Kx,NXe),e(ug,jXe),e(v,DXe),e(v,pg),e(pg,zK),e(zK,GXe),e(pg,OXe),e(pg,Zx),e(Zx,VXe),e(pg,XXe),e(v,zXe),e(v,_g),e(_g,QK),e(QK,QXe),e(_g,WXe),e(_g,ek),e(ek,HXe),e(_g,UXe),e(v,JXe),e(v,bg),e(bg,WK),e(WK,YXe),e(bg,KXe),e(bg,ok),e(ok,ZXe),e(bg,eze),e(v,oze),e(v,vg),e(vg,HK),e(HK,rze),e(vg,tze),e(vg,rk),e(rk,aze),e(vg,nze),e(v,sze),e(v,Fg),e(Fg,UK),e(UK,lze),e(Fg,ize),e(Fg,tk),e(tk,dze),e(Fg,cze),e(v,mze),e(v,Tg),e(Tg,JK),e(JK,fze),e(Tg,gze),e(Tg,ak),e(ak,hze),e(Tg,uze),e(v,pze),e(v,Mg),e(Mg,YK),e(YK,_ze),e(Mg,bze),e(Mg,nk),e(nk,vze),e(Mg,Fze),e(v,Tze),e(v,Eg),e(Eg,KK),e(KK,Mze),e(Eg,Eze),e(Eg,sk),e(sk,Cze),e(Eg,wze),e(v,Aze),e(v,Cg),e(Cg,ZK),e(ZK,yze),e(Cg,Lze),e(Cg,lk),e(lk,xze),e(Cg,kze),e(v,Sze),e(v,wg),e(wg,eZ),e(eZ,Rze),e(wg,Bze),e(wg,ik),e(ik,Pze),e(wg,$ze),e(v,Ize),e(v,Ag),e(Ag,oZ),e(oZ,qze),e(Ag,Nze),e(Ag,dk),e(dk,jze),e(Ag,Dze),e(v,Gze),e(v,yg),e(yg,rZ),e(rZ,Oze),e(yg,Vze),e(yg,ck),e(ck,Xze),e(yg,zze),e(v,Qze),e(v,Lg),e(Lg,tZ),e(tZ,Wze),e(Lg,Hze),e(Lg,mk),e(mk,Uze),e(Lg,Jze),e(v,Yze),e(v,xg),e(xg,aZ),e(aZ,Kze),e(xg,Zze),e(xg,fk),e(fk,eQe),e(xg,oQe),e(v,rQe),e(v,kg),e(kg,nZ),e(nZ,tQe),e(kg,aQe),e(kg,gk),e(gk,nQe),e(kg,sQe),e(v,lQe),e(v,Sg),e(Sg,sZ),e(sZ,iQe),e(Sg,dQe),e(Sg,hk),e(hk,cQe),e(Sg,mQe),e(v,fQe),e(v,Rg),e(Rg,lZ),e(lZ,gQe),e(Rg,hQe),e(Rg,uk),e(uk,uQe),e(Rg,pQe),e(v,_Qe),e(v,Bg),e(Bg,iZ),e(iZ,bQe),e(Bg,vQe),e(Bg,pk),e(pk,FQe),e(Bg,TQe),e(v,MQe),e(v,Pg),e(Pg,dZ),e(dZ,EQe),e(Pg,CQe),e(Pg,_k),e(_k,wQe),e(Pg,AQe),e(v,yQe),e(v,$g),e($g,cZ),e(cZ,LQe),e($g,xQe),e($g,bk),e(bk,kQe),e($g,SQe),e(v,RQe),e(v,Ig),e(Ig,mZ),e(mZ,BQe),e(Ig,PQe),e(Ig,vk),e(vk,$Qe),e(Ig,IQe),e(v,qQe),e(v,qg),e(qg,fZ),e(fZ,NQe),e(qg,jQe),e(qg,Fk),e(Fk,DQe),e(qg,GQe),e(fo,OQe),e(fo,gZ),e(gZ,VQe),e(fo,XQe),g(jw,fo,null),e(Qo,zQe),e(Qo,Ng),g(Dw,Ng,null),e(Ng,QQe),e(Ng,hZ),e(hZ,WQe),b(c,NRe,_),b(c,Wi,_),e(Wi,jg),e(jg,uZ),g(Gw,uZ,null),e(Wi,HQe),e(Wi,pZ),e(pZ,UQe),b(c,jRe,_),b(c,Wo,_),g(Ow,Wo,null),e(Wo,JQe),e(Wo,Vw),e(Vw,YQe),e(Vw,Tk),e(Tk,KQe),e(Vw,ZQe),e(Wo,eWe),e(Wo,Xw),e(Xw,oWe),e(Xw,_Z),e(_Z,rWe),e(Xw,tWe),e(Wo,aWe),e(Wo,go),g(zw,go,null),e(go,nWe),e(go,bZ),e(bZ,sWe),e(go,lWe),e(go,Oa),e(Oa,iWe),e(Oa,vZ),e(vZ,dWe),e(Oa,cWe),e(Oa,FZ),e(FZ,mWe),e(Oa,fWe),e(Oa,TZ),e(TZ,gWe),e(Oa,hWe),e(go,uWe),e(go,E),e(E,Wn),e(Wn,MZ),e(MZ,pWe),e(Wn,_We),e(Wn,Mk),e(Mk,bWe),e(Wn,vWe),e(Wn,Ek),e(Ek,FWe),e(Wn,TWe),e(E,MWe),e(E,Hn),e(Hn,EZ),e(EZ,EWe),e(Hn,CWe),e(Hn,Ck),e(Ck,wWe),e(Hn,AWe),e(Hn,wk),e(wk,yWe),e(Hn,LWe),e(E,xWe),e(E,Un),e(Un,CZ),e(CZ,kWe),e(Un,SWe),e(Un,Ak),e(Ak,RWe),e(Un,BWe),e(Un,yk),e(yk,PWe),e(Un,$We),e(E,IWe),e(E,Dg),e(Dg,wZ),e(wZ,qWe),e(Dg,NWe),e(Dg,Lk),e(Lk,jWe),e(Dg,DWe),e(E,GWe),e(E,Jn),e(Jn,AZ),e(AZ,OWe),e(Jn,VWe),e(Jn,xk),e(xk,XWe),e(Jn,zWe),e(Jn,kk),e(kk,QWe),e(Jn,WWe),e(E,HWe),e(E,Gg),e(Gg,yZ),e(yZ,UWe),e(Gg,JWe),e(Gg,Sk),e(Sk,YWe),e(Gg,KWe),e(E,ZWe),e(E,Og),e(Og,LZ),e(LZ,eHe),e(Og,oHe),e(Og,Rk),e(Rk,rHe),e(Og,tHe),e(E,aHe),e(E,Vg),e(Vg,xZ),e(xZ,nHe),e(Vg,sHe),e(Vg,Bk),e(Bk,lHe),e(Vg,iHe),e(E,dHe),e(E,Yn),e(Yn,kZ),e(kZ,cHe),e(Yn,mHe),e(Yn,Pk),e(Pk,fHe),e(Yn,gHe),e(Yn,$k),e($k,hHe),e(Yn,uHe),e(E,pHe),e(E,Kn),e(Kn,SZ),e(SZ,_He),e(Kn,bHe),e(Kn,Ik),e(Ik,vHe),e(Kn,FHe),e(Kn,qk),e(qk,THe),e(Kn,MHe),e(E,EHe),e(E,Zn),e(Zn,RZ),e(RZ,CHe),e(Zn,wHe),e(Zn,Nk),e(Nk,AHe),e(Zn,yHe),e(Zn,jk),e(jk,LHe),e(Zn,xHe),e(E,kHe),e(E,Xg),e(Xg,BZ),e(BZ,SHe),e(Xg,RHe),e(Xg,Dk),e(Dk,BHe),e(Xg,PHe),e(E,$He),e(E,zg),e(zg,PZ),e(PZ,IHe),e(zg,qHe),e(zg,Gk),e(Gk,NHe),e(zg,jHe),e(E,DHe),e(E,es),e(es,$Z),e($Z,GHe),e(es,OHe),e(es,Ok),e(Ok,VHe),e(es,XHe),e(es,Vk),e(Vk,zHe),e(es,QHe),e(E,WHe),e(E,Qg),e(Qg,IZ),e(IZ,HHe),e(Qg,UHe),e(Qg,Xk),e(Xk,JHe),e(Qg,YHe),e(E,KHe),e(E,os),e(os,qZ),e(qZ,ZHe),e(os,eUe),e(os,zk),e(zk,oUe),e(os,rUe),e(os,Qk),e(Qk,tUe),e(os,aUe),e(E,nUe),e(E,rs),e(rs,NZ),e(NZ,sUe),e(rs,lUe),e(rs,Wk),e(Wk,iUe),e(rs,dUe),e(rs,Hk),e(Hk,cUe),e(rs,mUe),e(E,fUe),e(E,ts),e(ts,jZ),e(jZ,gUe),e(ts,hUe),e(ts,Uk),e(Uk,uUe),e(ts,pUe),e(ts,DZ),e(DZ,_Ue),e(ts,bUe),e(E,vUe),e(E,Wg),e(Wg,GZ),e(GZ,FUe),e(Wg,TUe),e(Wg,Jk),e(Jk,MUe),e(Wg,EUe),e(E,CUe),e(E,as),e(as,OZ),e(OZ,wUe),e(as,AUe),e(as,Yk),e(Yk,yUe),e(as,LUe),e(as,Kk),e(Kk,xUe),e(as,kUe),e(E,SUe),e(E,Hg),e(Hg,VZ),e(VZ,RUe),e(Hg,BUe),e(Hg,Zk),e(Zk,PUe),e(Hg,$Ue),e(E,IUe),e(E,ns),e(ns,XZ),e(XZ,qUe),e(ns,NUe),e(ns,eS),e(eS,jUe),e(ns,DUe),e(ns,oS),e(oS,GUe),e(ns,OUe),e(E,VUe),e(E,ss),e(ss,zZ),e(zZ,XUe),e(ss,zUe),e(ss,rS),e(rS,QUe),e(ss,WUe),e(ss,tS),e(tS,HUe),e(ss,UUe),e(E,JUe),e(E,ls),e(ls,QZ),e(QZ,YUe),e(ls,KUe),e(ls,aS),e(aS,ZUe),e(ls,eJe),e(ls,nS),e(nS,oJe),e(ls,rJe),e(E,tJe),e(E,Ug),e(Ug,WZ),e(WZ,aJe),e(Ug,nJe),e(Ug,sS),e(sS,sJe),e(Ug,lJe),e(E,iJe),e(E,is),e(is,HZ),e(HZ,dJe),e(is,cJe),e(is,lS),e(lS,mJe),e(is,fJe),e(is,iS),e(iS,gJe),e(is,hJe),e(E,uJe),e(E,Jg),e(Jg,UZ),e(UZ,pJe),e(Jg,_Je),e(Jg,dS),e(dS,bJe),e(Jg,vJe),e(E,FJe),e(E,ds),e(ds,JZ),e(JZ,TJe),e(ds,MJe),e(ds,cS),e(cS,EJe),e(ds,CJe),e(ds,mS),e(mS,wJe),e(ds,AJe),e(E,yJe),e(E,cs),e(cs,YZ),e(YZ,LJe),e(cs,xJe),e(cs,fS),e(fS,kJe),e(cs,SJe),e(cs,gS),e(gS,RJe),e(cs,BJe),e(E,PJe),e(E,ms),e(ms,KZ),e(KZ,$Je),e(ms,IJe),e(ms,hS),e(hS,qJe),e(ms,NJe),e(ms,uS),e(uS,jJe),e(ms,DJe),e(E,GJe),e(E,fs),e(fs,ZZ),e(ZZ,OJe),e(fs,VJe),e(fs,pS),e(pS,XJe),e(fs,zJe),e(fs,_S),e(_S,QJe),e(fs,WJe),e(E,HJe),e(E,Yg),e(Yg,eee),e(eee,UJe),e(Yg,JJe),e(Yg,bS),e(bS,YJe),e(Yg,KJe),e(E,ZJe),e(E,gs),e(gs,oee),e(oee,eYe),e(gs,oYe),e(gs,vS),e(vS,rYe),e(gs,tYe),e(gs,FS),e(FS,aYe),e(gs,nYe),e(E,sYe),e(E,hs),e(hs,ree),e(ree,lYe),e(hs,iYe),e(hs,TS),e(TS,dYe),e(hs,cYe),e(hs,MS),e(MS,mYe),e(hs,fYe),e(E,gYe),e(E,us),e(us,tee),e(tee,hYe),e(us,uYe),e(us,ES),e(ES,pYe),e(us,_Ye),e(us,CS),e(CS,bYe),e(us,vYe),e(E,FYe),e(E,ps),e(ps,aee),e(aee,TYe),e(ps,MYe),e(ps,wS),e(wS,EYe),e(ps,CYe),e(ps,AS),e(AS,wYe),e(ps,AYe),e(E,yYe),e(E,_s),e(_s,nee),e(nee,LYe),e(_s,xYe),e(_s,yS),e(yS,kYe),e(_s,SYe),e(_s,LS),e(LS,RYe),e(_s,BYe),e(E,PYe),e(E,bs),e(bs,see),e(see,$Ye),e(bs,IYe),e(bs,xS),e(xS,qYe),e(bs,NYe),e(bs,kS),e(kS,jYe),e(bs,DYe),e(E,GYe),e(E,Kg),e(Kg,lee),e(lee,OYe),e(Kg,VYe),e(Kg,SS),e(SS,XYe),e(Kg,zYe),e(E,QYe),e(E,vs),e(vs,iee),e(iee,WYe),e(vs,HYe),e(vs,RS),e(RS,UYe),e(vs,JYe),e(vs,BS),e(BS,YYe),e(vs,KYe),e(E,ZYe),e(E,Zg),e(Zg,dee),e(dee,eKe),e(Zg,oKe),e(Zg,PS),e(PS,rKe),e(Zg,tKe),e(E,aKe),e(E,eh),e(eh,cee),e(cee,nKe),e(eh,sKe),e(eh,$S),e($S,lKe),e(eh,iKe),e(E,dKe),e(E,Fs),e(Fs,mee),e(mee,cKe),e(Fs,mKe),e(Fs,IS),e(IS,fKe),e(Fs,gKe),e(Fs,qS),e(qS,hKe),e(Fs,uKe),e(E,pKe),e(E,Ts),e(Ts,fee),e(fee,_Ke),e(Ts,bKe),e(Ts,NS),e(NS,vKe),e(Ts,FKe),e(Ts,jS),e(jS,TKe),e(Ts,MKe),e(E,EKe),e(E,oh),e(oh,gee),e(gee,CKe),e(oh,wKe),e(oh,DS),e(DS,AKe),e(oh,yKe),e(E,LKe),e(E,Ms),e(Ms,hee),e(hee,xKe),e(Ms,kKe),e(Ms,GS),e(GS,SKe),e(Ms,RKe),e(Ms,OS),e(OS,BKe),e(Ms,PKe),e(E,$Ke),e(E,Es),e(Es,uee),e(uee,IKe),e(Es,qKe),e(Es,VS),e(VS,NKe),e(Es,jKe),e(Es,XS),e(XS,DKe),e(Es,GKe),e(E,OKe),e(E,Cs),e(Cs,pee),e(pee,VKe),e(Cs,XKe),e(Cs,zS),e(zS,zKe),e(Cs,QKe),e(Cs,QS),e(QS,WKe),e(Cs,HKe),e(E,UKe),e(E,ws),e(ws,_ee),e(_ee,JKe),e(ws,YKe),e(ws,WS),e(WS,KKe),e(ws,ZKe),e(ws,HS),e(HS,eZe),e(ws,oZe),e(E,rZe),e(E,As),e(As,bee),e(bee,tZe),e(As,aZe),e(As,US),e(US,nZe),e(As,sZe),e(As,JS),e(JS,lZe),e(As,iZe),e(E,dZe),e(E,rh),e(rh,vee),e(vee,cZe),e(rh,mZe),e(rh,YS),e(YS,fZe),e(rh,gZe),e(E,hZe),e(E,th),e(th,Fee),e(Fee,uZe),e(th,pZe),e(th,KS),e(KS,_Ze),e(th,bZe),e(E,vZe),e(E,ah),e(ah,Tee),e(Tee,FZe),e(ah,TZe),e(ah,ZS),e(ZS,MZe),e(ah,EZe),e(E,CZe),e(E,nh),e(nh,Mee),e(Mee,wZe),e(nh,AZe),e(nh,eR),e(eR,yZe),e(nh,LZe),e(E,xZe),e(E,ys),e(ys,Eee),e(Eee,kZe),e(ys,SZe),e(ys,oR),e(oR,RZe),e(ys,BZe),e(ys,rR),e(rR,PZe),e(ys,$Ze),e(E,IZe),e(E,sh),e(sh,Cee),e(Cee,qZe),e(sh,NZe),e(sh,tR),e(tR,jZe),e(sh,DZe),e(E,GZe),e(E,Ls),e(Ls,wee),e(wee,OZe),e(Ls,VZe),e(Ls,aR),e(aR,XZe),e(Ls,zZe),e(Ls,nR),e(nR,QZe),e(Ls,WZe),e(E,HZe),e(E,xs),e(xs,Aee),e(Aee,UZe),e(xs,JZe),e(xs,sR),e(sR,YZe),e(xs,KZe),e(xs,lR),e(lR,ZZe),e(xs,eeo),e(E,oeo),e(E,ks),e(ks,yee),e(yee,reo),e(ks,teo),e(ks,iR),e(iR,aeo),e(ks,neo),e(ks,dR),e(dR,seo),e(ks,leo),e(E,ieo),e(E,Ss),e(Ss,Lee),e(Lee,deo),e(Ss,ceo),e(Ss,cR),e(cR,meo),e(Ss,feo),e(Ss,mR),e(mR,geo),e(Ss,heo),e(E,ueo),e(E,Rs),e(Rs,xee),e(xee,peo),e(Rs,_eo),e(Rs,fR),e(fR,beo),e(Rs,veo),e(Rs,gR),e(gR,Feo),e(Rs,Teo),e(E,Meo),e(E,Bs),e(Bs,kee),e(kee,Eeo),e(Bs,Ceo),e(Bs,hR),e(hR,weo),e(Bs,Aeo),e(Bs,uR),e(uR,yeo),e(Bs,Leo),e(E,xeo),e(E,lh),e(lh,See),e(See,keo),e(lh,Seo),e(lh,pR),e(pR,Reo),e(lh,Beo),e(E,Peo),e(E,ih),e(ih,Ree),e(Ree,$eo),e(ih,Ieo),e(ih,_R),e(_R,qeo),e(ih,Neo),e(E,jeo),e(E,Ps),e(Ps,Bee),e(Bee,Deo),e(Ps,Geo),e(Ps,bR),e(bR,Oeo),e(Ps,Veo),e(Ps,vR),e(vR,Xeo),e(Ps,zeo),e(E,Qeo),e(E,$s),e($s,Pee),e(Pee,Weo),e($s,Heo),e($s,FR),e(FR,Ueo),e($s,Jeo),e($s,TR),e(TR,Yeo),e($s,Keo),e(E,Zeo),e(E,Is),e(Is,$ee),e($ee,eoo),e(Is,ooo),e(Is,MR),e(MR,roo),e(Is,too),e(Is,ER),e(ER,aoo),e(Is,noo),e(E,soo),e(E,dh),e(dh,Iee),e(Iee,loo),e(dh,ioo),e(dh,CR),e(CR,doo),e(dh,coo),e(E,moo),e(E,ch),e(ch,qee),e(qee,foo),e(ch,goo),e(ch,wR),e(wR,hoo),e(ch,uoo),e(E,poo),e(E,mh),e(mh,Nee),e(Nee,_oo),e(mh,boo),e(mh,AR),e(AR,voo),e(mh,Foo),e(E,Too),e(E,fh),e(fh,jee),e(jee,Moo),e(fh,Eoo),e(fh,yR),e(yR,Coo),e(fh,woo),e(E,Aoo),e(E,gh),e(gh,Dee),e(Dee,yoo),e(gh,Loo),e(gh,LR),e(LR,xoo),e(gh,koo),e(E,Soo),e(E,qs),e(qs,Gee),e(Gee,Roo),e(qs,Boo),e(qs,xR),e(xR,Poo),e(qs,$oo),e(qs,kR),e(kR,Ioo),e(qs,qoo),e(E,Noo),e(E,hh),e(hh,Oee),e(Oee,joo),e(hh,Doo),e(hh,SR),e(SR,Goo),e(hh,Ooo),e(E,Voo),e(E,uh),e(uh,Vee),e(Vee,Xoo),e(uh,zoo),e(uh,RR),e(RR,Qoo),e(uh,Woo),e(E,Hoo),e(E,Ns),e(Ns,Xee),e(Xee,Uoo),e(Ns,Joo),e(Ns,BR),e(BR,Yoo),e(Ns,Koo),e(Ns,PR),e(PR,Zoo),e(Ns,ero),e(E,oro),e(E,js),e(js,zee),e(zee,rro),e(js,tro),e(js,$R),e($R,aro),e(js,nro),e(js,IR),e(IR,sro),e(js,lro),e(go,iro),e(go,Qee),e(Qee,dro),e(go,cro),g(Qw,go,null),e(Wo,mro),e(Wo,ph),g(Ww,ph,null),e(ph,fro),e(ph,Wee),e(Wee,gro),b(c,DRe,_),b(c,Hi,_),e(Hi,_h),e(_h,Hee),g(Hw,Hee,null),e(Hi,hro),e(Hi,Uee),e(Uee,uro),b(c,GRe,_),b(c,Ho,_),g(Uw,Ho,null),e(Ho,pro),e(Ho,Jw),e(Jw,_ro),e(Jw,qR),e(qR,bro),e(Jw,vro),e(Ho,Fro),e(Ho,Yw),e(Yw,Tro),e(Yw,Jee),e(Jee,Mro),e(Yw,Ero),e(Ho,Cro),e(Ho,$e),g(Kw,$e,null),e($e,wro),e($e,Yee),e(Yee,Aro),e($e,yro),e($e,Va),e(Va,Lro),e(Va,Kee),e(Kee,xro),e(Va,kro),e(Va,Zee),e(Zee,Sro),e(Va,Rro),e(Va,eoe),e(eoe,Bro),e(Va,Pro),e($e,$ro),e($e,ee),e(ee,bh),e(bh,ooe),e(ooe,Iro),e(bh,qro),e(bh,NR),e(NR,Nro),e(bh,jro),e(ee,Dro),e(ee,vh),e(vh,roe),e(roe,Gro),e(vh,Oro),e(vh,jR),e(jR,Vro),e(vh,Xro),e(ee,zro),e(ee,Fh),e(Fh,toe),e(toe,Qro),e(Fh,Wro),e(Fh,DR),e(DR,Hro),e(Fh,Uro),e(ee,Jro),e(ee,Th),e(Th,aoe),e(aoe,Yro),e(Th,Kro),e(Th,GR),e(GR,Zro),e(Th,eto),e(ee,oto),e(ee,Mh),e(Mh,noe),e(noe,rto),e(Mh,tto),e(Mh,OR),e(OR,ato),e(Mh,nto),e(ee,sto),e(ee,Eh),e(Eh,soe),e(soe,lto),e(Eh,ito),e(Eh,VR),e(VR,dto),e(Eh,cto),e(ee,mto),e(ee,Ch),e(Ch,loe),e(loe,fto),e(Ch,gto),e(Ch,XR),e(XR,hto),e(Ch,uto),e(ee,pto),e(ee,wh),e(wh,ioe),e(ioe,_to),e(wh,bto),e(wh,zR),e(zR,vto),e(wh,Fto),e(ee,Tto),e(ee,Ah),e(Ah,doe),e(doe,Mto),e(Ah,Eto),e(Ah,QR),e(QR,Cto),e(Ah,wto),e(ee,Ato),e(ee,yh),e(yh,coe),e(coe,yto),e(yh,Lto),e(yh,WR),e(WR,xto),e(yh,kto),e(ee,Sto),e(ee,Lh),e(Lh,moe),e(moe,Rto),e(Lh,Bto),e(Lh,HR),e(HR,Pto),e(Lh,$to),e(ee,Ito),e(ee,xh),e(xh,foe),e(foe,qto),e(xh,Nto),e(xh,UR),e(UR,jto),e(xh,Dto),e(ee,Gto),e(ee,kh),e(kh,goe),e(goe,Oto),e(kh,Vto),e(kh,JR),e(JR,Xto),e(kh,zto),e(ee,Qto),e(ee,Sh),e(Sh,hoe),e(hoe,Wto),e(Sh,Hto),e(Sh,YR),e(YR,Uto),e(Sh,Jto),e(ee,Yto),e(ee,Rh),e(Rh,uoe),e(uoe,Kto),e(Rh,Zto),e(Rh,KR),e(KR,eao),e(Rh,oao),e(ee,rao),e(ee,Bh),e(Bh,poe),e(poe,tao),e(Bh,aao),e(Bh,ZR),e(ZR,nao),e(Bh,sao),e(ee,lao),e(ee,Ph),e(Ph,_oe),e(_oe,iao),e(Ph,dao),e(Ph,eB),e(eB,cao),e(Ph,mao),e(ee,fao),e(ee,$h),e($h,boe),e(boe,gao),e($h,hao),e($h,oB),e(oB,uao),e($h,pao),e(ee,_ao),e(ee,Ih),e(Ih,voe),e(voe,bao),e(Ih,vao),e(Ih,rB),e(rB,Fao),e(Ih,Tao),e($e,Mao),g(qh,$e,null),e($e,Eao),e($e,Foe),e(Foe,Cao),e($e,wao),g(Zw,$e,null),e(Ho,Aao),e(Ho,Nh),g(e6,Nh,null),e(Nh,yao),e(Nh,Toe),e(Toe,Lao),b(c,ORe,_),b(c,Ui,_),e(Ui,jh),e(jh,Moe),g(o6,Moe,null),e(Ui,xao),e(Ui,Eoe),e(Eoe,kao),b(c,VRe,_),b(c,Uo,_),g(r6,Uo,null),e(Uo,Sao),e(Uo,t6),e(t6,Rao),e(t6,tB),e(tB,Bao),e(t6,Pao),e(Uo,$ao),e(Uo,a6),e(a6,Iao),e(a6,Coe),e(Coe,qao),e(a6,Nao),e(Uo,jao),e(Uo,Ie),g(n6,Ie,null),e(Ie,Dao),e(Ie,woe),e(woe,Gao),e(Ie,Oao),e(Ie,Ji),e(Ji,Vao),e(Ji,Aoe),e(Aoe,Xao),e(Ji,zao),e(Ji,yoe),e(yoe,Qao),e(Ji,Wao),e(Ie,Hao),e(Ie,ke),e(ke,Dh),e(Dh,Loe),e(Loe,Uao),e(Dh,Jao),e(Dh,aB),e(aB,Yao),e(Dh,Kao),e(ke,Zao),e(ke,Gh),e(Gh,xoe),e(xoe,eno),e(Gh,ono),e(Gh,nB),e(nB,rno),e(Gh,tno),e(ke,ano),e(ke,Oh),e(Oh,koe),e(koe,nno),e(Oh,sno),e(Oh,sB),e(sB,lno),e(Oh,ino),e(ke,dno),e(ke,Vh),e(Vh,Soe),e(Soe,cno),e(Vh,mno),e(Vh,lB),e(lB,fno),e(Vh,gno),e(ke,hno),e(ke,Xh),e(Xh,Roe),e(Roe,uno),e(Xh,pno),e(Xh,iB),e(iB,_no),e(Xh,bno),e(ke,vno),e(ke,zh),e(zh,Boe),e(Boe,Fno),e(zh,Tno),e(zh,dB),e(dB,Mno),e(zh,Eno),e(ke,Cno),e(ke,Qh),e(Qh,Poe),e(Poe,wno),e(Qh,Ano),e(Qh,cB),e(cB,yno),e(Qh,Lno),e(ke,xno),e(ke,Wh),e(Wh,$oe),e($oe,kno),e(Wh,Sno),e(Wh,mB),e(mB,Rno),e(Wh,Bno),e(Ie,Pno),g(Hh,Ie,null),e(Ie,$no),e(Ie,Ioe),e(Ioe,Ino),e(Ie,qno),g(s6,Ie,null),e(Uo,Nno),e(Uo,Uh),g(l6,Uh,null),e(Uh,jno),e(Uh,qoe),e(qoe,Dno),b(c,XRe,_),b(c,Yi,_),e(Yi,Jh),e(Jh,Noe),g(i6,Noe,null),e(Yi,Gno),e(Yi,joe),e(joe,Ono),b(c,zRe,_),b(c,Jo,_),g(d6,Jo,null),e(Jo,Vno),e(Jo,Ki),e(Ki,Xno),e(Ki,fB),e(fB,zno),e(Ki,Qno),e(Ki,gB),e(gB,Wno),e(Ki,Hno),e(Jo,Uno),e(Jo,c6),e(c6,Jno),e(c6,Doe),e(Doe,Yno),e(c6,Kno),e(Jo,Zno),e(Jo,Xr),g(m6,Xr,null),e(Xr,eso),e(Xr,Goe),e(Goe,oso),e(Xr,rso),e(Xr,Zi),e(Zi,tso),e(Zi,Ooe),e(Ooe,aso),e(Zi,nso),e(Zi,hB),e(hB,sso),e(Zi,lso),e(Xr,iso),e(Xr,Voe),e(Voe,dso),e(Xr,cso),g(f6,Xr,null),e(Jo,mso),e(Jo,qe),g(g6,qe,null),e(qe,fso),e(qe,Xoe),e(Xoe,gso),e(qe,hso),e(qe,Xa),e(Xa,uso),e(Xa,zoe),e(zoe,pso),e(Xa,_so),e(Xa,Qoe),e(Qoe,bso),e(Xa,vso),e(Xa,Woe),e(Woe,Fso),e(Xa,Tso),e(qe,Mso),e(qe,T),e(T,Yh),e(Yh,Hoe),e(Hoe,Eso),e(Yh,Cso),e(Yh,uB),e(uB,wso),e(Yh,Aso),e(T,yso),e(T,Kh),e(Kh,Uoe),e(Uoe,Lso),e(Kh,xso),e(Kh,pB),e(pB,kso),e(Kh,Sso),e(T,Rso),e(T,Zh),e(Zh,Joe),e(Joe,Bso),e(Zh,Pso),e(Zh,_B),e(_B,$so),e(Zh,Iso),e(T,qso),e(T,eu),e(eu,Yoe),e(Yoe,Nso),e(eu,jso),e(eu,bB),e(bB,Dso),e(eu,Gso),e(T,Oso),e(T,ou),e(ou,Koe),e(Koe,Vso),e(ou,Xso),e(ou,vB),e(vB,zso),e(ou,Qso),e(T,Wso),e(T,ru),e(ru,Zoe),e(Zoe,Hso),e(ru,Uso),e(ru,FB),e(FB,Jso),e(ru,Yso),e(T,Kso),e(T,tu),e(tu,ere),e(ere,Zso),e(tu,elo),e(tu,TB),e(TB,olo),e(tu,rlo),e(T,tlo),e(T,au),e(au,ore),e(ore,alo),e(au,nlo),e(au,MB),e(MB,slo),e(au,llo),e(T,ilo),e(T,nu),e(nu,rre),e(rre,dlo),e(nu,clo),e(nu,EB),e(EB,mlo),e(nu,flo),e(T,glo),e(T,su),e(su,tre),e(tre,hlo),e(su,ulo),e(su,CB),e(CB,plo),e(su,_lo),e(T,blo),e(T,lu),e(lu,are),e(are,vlo),e(lu,Flo),e(lu,wB),e(wB,Tlo),e(lu,Mlo),e(T,Elo),e(T,iu),e(iu,nre),e(nre,Clo),e(iu,wlo),e(iu,AB),e(AB,Alo),e(iu,ylo),e(T,Llo),e(T,du),e(du,sre),e(sre,xlo),e(du,klo),e(du,yB),e(yB,Slo),e(du,Rlo),e(T,Blo),e(T,cu),e(cu,lre),e(lre,Plo),e(cu,$lo),e(cu,LB),e(LB,Ilo),e(cu,qlo),e(T,Nlo),e(T,mu),e(mu,ire),e(ire,jlo),e(mu,Dlo),e(mu,xB),e(xB,Glo),e(mu,Olo),e(T,Vlo),e(T,fu),e(fu,dre),e(dre,Xlo),e(fu,zlo),e(fu,kB),e(kB,Qlo),e(fu,Wlo),e(T,Hlo),e(T,gu),e(gu,cre),e(cre,Ulo),e(gu,Jlo),e(gu,SB),e(SB,Ylo),e(gu,Klo),e(T,Zlo),e(T,hu),e(hu,mre),e(mre,eio),e(hu,oio),e(hu,RB),e(RB,rio),e(hu,tio),e(T,aio),e(T,uu),e(uu,fre),e(fre,nio),e(uu,sio),e(uu,BB),e(BB,lio),e(uu,iio),e(T,dio),e(T,pu),e(pu,gre),e(gre,cio),e(pu,mio),e(pu,PB),e(PB,fio),e(pu,gio),e(T,hio),e(T,_u),e(_u,hre),e(hre,uio),e(_u,pio),e(_u,$B),e($B,_io),e(_u,bio),e(T,vio),e(T,bu),e(bu,ure),e(ure,Fio),e(bu,Tio),e(bu,IB),e(IB,Mio),e(bu,Eio),e(T,Cio),e(T,vu),e(vu,pre),e(pre,wio),e(vu,Aio),e(vu,qB),e(qB,yio),e(vu,Lio),e(T,xio),e(T,Fu),e(Fu,_re),e(_re,kio),e(Fu,Sio),e(Fu,NB),e(NB,Rio),e(Fu,Bio),e(T,Pio),e(T,Tu),e(Tu,bre),e(bre,$io),e(Tu,Iio),e(Tu,jB),e(jB,qio),e(Tu,Nio),e(T,jio),e(T,Mu),e(Mu,vre),e(vre,Dio),e(Mu,Gio),e(Mu,DB),e(DB,Oio),e(Mu,Vio),e(T,Xio),e(T,Eu),e(Eu,Fre),e(Fre,zio),e(Eu,Qio),e(Eu,GB),e(GB,Wio),e(Eu,Hio),e(T,Uio),e(T,Cu),e(Cu,Tre),e(Tre,Jio),e(Cu,Yio),e(Cu,OB),e(OB,Kio),e(Cu,Zio),e(T,edo),e(T,wu),e(wu,Mre),e(Mre,odo),e(wu,rdo),e(wu,VB),e(VB,tdo),e(wu,ado),e(T,ndo),e(T,Au),e(Au,Ere),e(Ere,sdo),e(Au,ldo),e(Au,XB),e(XB,ido),e(Au,ddo),e(T,cdo),e(T,Ds),e(Ds,Cre),e(Cre,mdo),e(Ds,fdo),e(Ds,zB),e(zB,gdo),e(Ds,hdo),e(Ds,QB),e(QB,udo),e(Ds,pdo),e(T,_do),e(T,yu),e(yu,wre),e(wre,bdo),e(yu,vdo),e(yu,WB),e(WB,Fdo),e(yu,Tdo),e(T,Mdo),e(T,Lu),e(Lu,Are),e(Are,Edo),e(Lu,Cdo),e(Lu,HB),e(HB,wdo),e(Lu,Ado),e(T,ydo),e(T,xu),e(xu,yre),e(yre,Ldo),e(xu,xdo),e(xu,UB),e(UB,kdo),e(xu,Sdo),e(T,Rdo),e(T,ku),e(ku,Lre),e(Lre,Bdo),e(ku,Pdo),e(ku,JB),e(JB,$do),e(ku,Ido),e(T,qdo),e(T,Su),e(Su,xre),e(xre,Ndo),e(Su,jdo),e(Su,YB),e(YB,Ddo),e(Su,Gdo),e(T,Odo),e(T,Ru),e(Ru,kre),e(kre,Vdo),e(Ru,Xdo),e(Ru,KB),e(KB,zdo),e(Ru,Qdo),e(T,Wdo),e(T,Bu),e(Bu,Sre),e(Sre,Hdo),e(Bu,Udo),e(Bu,ZB),e(ZB,Jdo),e(Bu,Ydo),e(T,Kdo),e(T,Pu),e(Pu,Rre),e(Rre,Zdo),e(Pu,eco),e(Pu,eP),e(eP,oco),e(Pu,rco),e(T,tco),e(T,$u),e($u,Bre),e(Bre,aco),e($u,nco),e($u,oP),e(oP,sco),e($u,lco),e(T,ico),e(T,Iu),e(Iu,Pre),e(Pre,dco),e(Iu,cco),e(Iu,rP),e(rP,mco),e(Iu,fco),e(T,gco),e(T,qu),e(qu,$re),e($re,hco),e(qu,uco),e(qu,tP),e(tP,pco),e(qu,_co),e(T,bco),e(T,Nu),e(Nu,Ire),e(Ire,vco),e(Nu,Fco),e(Nu,aP),e(aP,Tco),e(Nu,Mco),e(T,Eco),e(T,ju),e(ju,qre),e(qre,Cco),e(ju,wco),e(ju,nP),e(nP,Aco),e(ju,yco),e(T,Lco),e(T,Du),e(Du,Nre),e(Nre,xco),e(Du,kco),e(Du,sP),e(sP,Sco),e(Du,Rco),e(T,Bco),e(T,Gu),e(Gu,jre),e(jre,Pco),e(Gu,$co),e(Gu,lP),e(lP,Ico),e(Gu,qco),e(T,Nco),e(T,Ou),e(Ou,Dre),e(Dre,jco),e(Ou,Dco),e(Ou,iP),e(iP,Gco),e(Ou,Oco),e(T,Vco),e(T,Vu),e(Vu,Gre),e(Gre,Xco),e(Vu,zco),e(Vu,dP),e(dP,Qco),e(Vu,Wco),e(T,Hco),e(T,Xu),e(Xu,Ore),e(Ore,Uco),e(Xu,Jco),e(Xu,cP),e(cP,Yco),e(Xu,Kco),e(T,Zco),e(T,zu),e(zu,Vre),e(Vre,emo),e(zu,omo),e(zu,mP),e(mP,rmo),e(zu,tmo),e(T,amo),e(T,Qu),e(Qu,Xre),e(Xre,nmo),e(Qu,smo),e(Qu,fP),e(fP,lmo),e(Qu,imo),e(T,dmo),e(T,Wu),e(Wu,zre),e(zre,cmo),e(Wu,mmo),e(Wu,gP),e(gP,fmo),e(Wu,gmo),e(T,hmo),e(T,Hu),e(Hu,Qre),e(Qre,umo),e(Hu,pmo),e(Hu,hP),e(hP,_mo),e(Hu,bmo),e(T,vmo),e(T,Uu),e(Uu,Wre),e(Wre,Fmo),e(Uu,Tmo),e(Uu,uP),e(uP,Mmo),e(Uu,Emo),e(T,Cmo),e(T,Ju),e(Ju,Hre),e(Hre,wmo),e(Ju,Amo),e(Ju,pP),e(pP,ymo),e(Ju,Lmo),e(T,xmo),e(T,Yu),e(Yu,Ure),e(Ure,kmo),e(Yu,Smo),e(Yu,_P),e(_P,Rmo),e(Yu,Bmo),e(T,Pmo),e(T,Ku),e(Ku,Jre),e(Jre,$mo),e(Ku,Imo),e(Ku,bP),e(bP,qmo),e(Ku,Nmo),e(T,jmo),e(T,Zu),e(Zu,Yre),e(Yre,Dmo),e(Zu,Gmo),e(Zu,vP),e(vP,Omo),e(Zu,Vmo),e(T,Xmo),e(T,ep),e(ep,Kre),e(Kre,zmo),e(ep,Qmo),e(ep,FP),e(FP,Wmo),e(ep,Hmo),e(T,Umo),e(T,op),e(op,Zre),e(Zre,Jmo),e(op,Ymo),e(op,TP),e(TP,Kmo),e(op,Zmo),e(T,efo),e(T,rp),e(rp,ete),e(ete,ofo),e(rp,rfo),e(rp,MP),e(MP,tfo),e(rp,afo),e(T,nfo),e(T,tp),e(tp,ote),e(ote,sfo),e(tp,lfo),e(tp,EP),e(EP,ifo),e(tp,dfo),e(T,cfo),e(T,ap),e(ap,rte),e(rte,mfo),e(ap,ffo),e(ap,CP),e(CP,gfo),e(ap,hfo),e(T,ufo),e(T,np),e(np,tte),e(tte,pfo),e(np,_fo),e(np,wP),e(wP,bfo),e(np,vfo),e(T,Ffo),e(T,sp),e(sp,ate),e(ate,Tfo),e(sp,Mfo),e(sp,AP),e(AP,Efo),e(sp,Cfo),e(T,wfo),e(T,lp),e(lp,nte),e(nte,Afo),e(lp,yfo),e(lp,yP),e(yP,Lfo),e(lp,xfo),e(T,kfo),e(T,ip),e(ip,ste),e(ste,Sfo),e(ip,Rfo),e(ip,LP),e(LP,Bfo),e(ip,Pfo),e(T,$fo),e(T,dp),e(dp,lte),e(lte,Ifo),e(dp,qfo),e(dp,xP),e(xP,Nfo),e(dp,jfo),e(T,Dfo),e(T,cp),e(cp,ite),e(ite,Gfo),e(cp,Ofo),e(cp,kP),e(kP,Vfo),e(cp,Xfo),e(T,zfo),e(T,mp),e(mp,dte),e(dte,Qfo),e(mp,Wfo),e(mp,SP),e(SP,Hfo),e(mp,Ufo),e(T,Jfo),e(T,fp),e(fp,cte),e(cte,Yfo),e(fp,Kfo),e(fp,RP),e(RP,Zfo),e(fp,ego),e(T,ogo),e(T,gp),e(gp,mte),e(mte,rgo),e(gp,tgo),e(gp,BP),e(BP,ago),e(gp,ngo),e(T,sgo),e(T,hp),e(hp,fte),e(fte,lgo),e(hp,igo),e(hp,PP),e(PP,dgo),e(hp,cgo),e(T,mgo),e(T,up),e(up,gte),e(gte,fgo),e(up,ggo),e(up,$P),e($P,hgo),e(up,ugo),e(T,pgo),e(T,pp),e(pp,hte),e(hte,_go),e(pp,bgo),e(pp,IP),e(IP,vgo),e(pp,Fgo),e(T,Tgo),e(T,_p),e(_p,ute),e(ute,Mgo),e(_p,Ego),e(_p,qP),e(qP,Cgo),e(_p,wgo),e(T,Ago),e(T,bp),e(bp,pte),e(pte,ygo),e(bp,Lgo),e(bp,NP),e(NP,xgo),e(bp,kgo),e(T,Sgo),e(T,vp),e(vp,_te),e(_te,Rgo),e(vp,Bgo),e(vp,jP),e(jP,Pgo),e(vp,$go),e(T,Igo),e(T,Fp),e(Fp,bte),e(bte,qgo),e(Fp,Ngo),e(Fp,DP),e(DP,jgo),e(Fp,Dgo),e(T,Ggo),e(T,Tp),e(Tp,vte),e(vte,Ogo),e(Tp,Vgo),e(Tp,GP),e(GP,Xgo),e(Tp,zgo),e(T,Qgo),e(T,Mp),e(Mp,Fte),e(Fte,Wgo),e(Mp,Hgo),e(Mp,OP),e(OP,Ugo),e(Mp,Jgo),e(T,Ygo),e(T,Ep),e(Ep,Tte),e(Tte,Kgo),e(Ep,Zgo),e(Ep,VP),e(VP,eho),e(Ep,oho),e(T,rho),e(T,Cp),e(Cp,Mte),e(Mte,tho),e(Cp,aho),e(Cp,XP),e(XP,nho),e(Cp,sho),e(T,lho),e(T,wp),e(wp,Ete),e(Ete,iho),e(wp,dho),e(wp,zP),e(zP,cho),e(wp,mho),e(T,fho),e(T,Ap),e(Ap,Cte),e(Cte,gho),e(Ap,hho),e(Ap,QP),e(QP,uho),e(Ap,pho),e(T,_ho),e(T,yp),e(yp,wte),e(wte,bho),e(yp,vho),e(yp,WP),e(WP,Fho),e(yp,Tho),e(T,Mho),e(T,Lp),e(Lp,Ate),e(Ate,Eho),e(Lp,Cho),e(Lp,HP),e(HP,who),e(Lp,Aho),e(T,yho),e(T,xp),e(xp,yte),e(yte,Lho),e(xp,xho),e(xp,UP),e(UP,kho),e(xp,Sho),e(T,Rho),e(T,kp),e(kp,Lte),e(Lte,Bho),e(kp,Pho),e(kp,JP),e(JP,$ho),e(kp,Iho),e(T,qho),e(T,Sp),e(Sp,xte),e(xte,Nho),e(Sp,jho),e(Sp,YP),e(YP,Dho),e(Sp,Gho),e(T,Oho),e(T,Rp),e(Rp,kte),e(kte,Vho),e(Rp,Xho),e(Rp,KP),e(KP,zho),e(Rp,Qho),e(T,Who),e(T,Bp),e(Bp,Ste),e(Ste,Hho),e(Bp,Uho),e(Bp,ZP),e(ZP,Jho),e(Bp,Yho),e(T,Kho),e(T,Pp),e(Pp,Rte),e(Rte,Zho),e(Pp,euo),e(Pp,e$),e(e$,ouo),e(Pp,ruo),e(T,tuo),e(T,$p),e($p,Bte),e(Bte,auo),e($p,nuo),e($p,o$),e(o$,suo),e($p,luo),e(qe,iuo),e(qe,Ip),e(Ip,duo),e(Ip,Pte),e(Pte,cuo),e(Ip,muo),e(Ip,$te),e($te,fuo),e(qe,guo),e(qe,Ite),e(Ite,huo),e(qe,uuo),g(h6,qe,null),b(c,QRe,_),b(c,ed,_),e(ed,qp),e(qp,qte),g(u6,qte,null),e(ed,puo),e(ed,Nte),e(Nte,_uo),b(c,WRe,_),b(c,Yo,_),g(p6,Yo,null),e(Yo,buo),e(Yo,od),e(od,vuo),e(od,r$),e(r$,Fuo),e(od,Tuo),e(od,t$),e(t$,Muo),e(od,Euo),e(Yo,Cuo),e(Yo,_6),e(_6,wuo),e(_6,jte),e(jte,Auo),e(_6,yuo),e(Yo,Luo),e(Yo,zr),g(b6,zr,null),e(zr,xuo),e(zr,Dte),e(Dte,kuo),e(zr,Suo),e(zr,rd),e(rd,Ruo),e(rd,Gte),e(Gte,Buo),e(rd,Puo),e(rd,a$),e(a$,$uo),e(rd,Iuo),e(zr,quo),e(zr,Ote),e(Ote,Nuo),e(zr,juo),g(v6,zr,null),e(Yo,Duo),e(Yo,Ne),g(F6,Ne,null),e(Ne,Guo),e(Ne,Vte),e(Vte,Ouo),e(Ne,Vuo),e(Ne,za),e(za,Xuo),e(za,Xte),e(Xte,zuo),e(za,Quo),e(za,zte),e(zte,Wuo),e(za,Huo),e(za,Qte),e(Qte,Uuo),e(za,Juo),e(Ne,Yuo),e(Ne,S),e(S,Np),e(Np,Wte),e(Wte,Kuo),e(Np,Zuo),e(Np,n$),e(n$,epo),e(Np,opo),e(S,rpo),e(S,jp),e(jp,Hte),e(Hte,tpo),e(jp,apo),e(jp,s$),e(s$,npo),e(jp,spo),e(S,lpo),e(S,Dp),e(Dp,Ute),e(Ute,ipo),e(Dp,dpo),e(Dp,l$),e(l$,cpo),e(Dp,mpo),e(S,fpo),e(S,Gp),e(Gp,Jte),e(Jte,gpo),e(Gp,hpo),e(Gp,i$),e(i$,upo),e(Gp,ppo),e(S,_po),e(S,Op),e(Op,Yte),e(Yte,bpo),e(Op,vpo),e(Op,d$),e(d$,Fpo),e(Op,Tpo),e(S,Mpo),e(S,Vp),e(Vp,Kte),e(Kte,Epo),e(Vp,Cpo),e(Vp,c$),e(c$,wpo),e(Vp,Apo),e(S,ypo),e(S,Xp),e(Xp,Zte),e(Zte,Lpo),e(Xp,xpo),e(Xp,m$),e(m$,kpo),e(Xp,Spo),e(S,Rpo),e(S,zp),e(zp,eae),e(eae,Bpo),e(zp,Ppo),e(zp,f$),e(f$,$po),e(zp,Ipo),e(S,qpo),e(S,Qp),e(Qp,oae),e(oae,Npo),e(Qp,jpo),e(Qp,g$),e(g$,Dpo),e(Qp,Gpo),e(S,Opo),e(S,Wp),e(Wp,rae),e(rae,Vpo),e(Wp,Xpo),e(Wp,h$),e(h$,zpo),e(Wp,Qpo),e(S,Wpo),e(S,Hp),e(Hp,tae),e(tae,Hpo),e(Hp,Upo),e(Hp,u$),e(u$,Jpo),e(Hp,Ypo),e(S,Kpo),e(S,Up),e(Up,aae),e(aae,Zpo),e(Up,e_o),e(Up,p$),e(p$,o_o),e(Up,r_o),e(S,t_o),e(S,Jp),e(Jp,nae),e(nae,a_o),e(Jp,n_o),e(Jp,_$),e(_$,s_o),e(Jp,l_o),e(S,i_o),e(S,Yp),e(Yp,sae),e(sae,d_o),e(Yp,c_o),e(Yp,b$),e(b$,m_o),e(Yp,f_o),e(S,g_o),e(S,Kp),e(Kp,lae),e(lae,h_o),e(Kp,u_o),e(Kp,v$),e(v$,p_o),e(Kp,__o),e(S,b_o),e(S,Zp),e(Zp,iae),e(iae,v_o),e(Zp,F_o),e(Zp,F$),e(F$,T_o),e(Zp,M_o),e(S,E_o),e(S,e_),e(e_,dae),e(dae,C_o),e(e_,w_o),e(e_,T$),e(T$,A_o),e(e_,y_o),e(S,L_o),e(S,o_),e(o_,cae),e(cae,x_o),e(o_,k_o),e(o_,M$),e(M$,S_o),e(o_,R_o),e(S,B_o),e(S,r_),e(r_,mae),e(mae,P_o),e(r_,$_o),e(r_,E$),e(E$,I_o),e(r_,q_o),e(S,N_o),e(S,t_),e(t_,fae),e(fae,j_o),e(t_,D_o),e(t_,C$),e(C$,G_o),e(t_,O_o),e(S,V_o),e(S,a_),e(a_,gae),e(gae,X_o),e(a_,z_o),e(a_,w$),e(w$,Q_o),e(a_,W_o),e(S,H_o),e(S,n_),e(n_,hae),e(hae,U_o),e(n_,J_o),e(n_,A$),e(A$,Y_o),e(n_,K_o),e(S,Z_o),e(S,s_),e(s_,uae),e(uae,ebo),e(s_,obo),e(s_,y$),e(y$,rbo),e(s_,tbo),e(S,abo),e(S,l_),e(l_,pae),e(pae,nbo),e(l_,sbo),e(l_,L$),e(L$,lbo),e(l_,ibo),e(S,dbo),e(S,i_),e(i_,_ae),e(_ae,cbo),e(i_,mbo),e(i_,x$),e(x$,fbo),e(i_,gbo),e(S,hbo),e(S,d_),e(d_,bae),e(bae,ubo),e(d_,pbo),e(d_,k$),e(k$,_bo),e(d_,bbo),e(S,vbo),e(S,c_),e(c_,vae),e(vae,Fbo),e(c_,Tbo),e(c_,S$),e(S$,Mbo),e(c_,Ebo),e(S,Cbo),e(S,m_),e(m_,Fae),e(Fae,wbo),e(m_,Abo),e(m_,R$),e(R$,ybo),e(m_,Lbo),e(S,xbo),e(S,f_),e(f_,Tae),e(Tae,kbo),e(f_,Sbo),e(f_,B$),e(B$,Rbo),e(f_,Bbo),e(S,Pbo),e(S,g_),e(g_,Mae),e(Mae,$bo),e(g_,Ibo),e(g_,P$),e(P$,qbo),e(g_,Nbo),e(S,jbo),e(S,h_),e(h_,Eae),e(Eae,Dbo),e(h_,Gbo),e(h_,$$),e($$,Obo),e(h_,Vbo),e(S,Xbo),e(S,u_),e(u_,Cae),e(Cae,zbo),e(u_,Qbo),e(u_,I$),e(I$,Wbo),e(u_,Hbo),e(S,Ubo),e(S,p_),e(p_,wae),e(wae,Jbo),e(p_,Ybo),e(p_,q$),e(q$,Kbo),e(p_,Zbo),e(S,e2o),e(S,__),e(__,Aae),e(Aae,o2o),e(__,r2o),e(__,N$),e(N$,t2o),e(__,a2o),e(S,n2o),e(S,b_),e(b_,yae),e(yae,s2o),e(b_,l2o),e(b_,j$),e(j$,i2o),e(b_,d2o),e(S,c2o),e(S,v_),e(v_,Lae),e(Lae,m2o),e(v_,f2o),e(v_,D$),e(D$,g2o),e(v_,h2o),e(S,u2o),e(S,F_),e(F_,xae),e(xae,p2o),e(F_,_2o),e(F_,G$),e(G$,b2o),e(F_,v2o),e(S,F2o),e(S,T_),e(T_,kae),e(kae,T2o),e(T_,M2o),e(T_,O$),e(O$,E2o),e(T_,C2o),e(S,w2o),e(S,M_),e(M_,Sae),e(Sae,A2o),e(M_,y2o),e(M_,V$),e(V$,L2o),e(M_,x2o),e(Ne,k2o),e(Ne,E_),e(E_,S2o),e(E_,Rae),e(Rae,R2o),e(E_,B2o),e(E_,Bae),e(Bae,P2o),e(Ne,$2o),e(Ne,Pae),e(Pae,I2o),e(Ne,q2o),g(T6,Ne,null),b(c,HRe,_),b(c,td,_),e(td,C_),e(C_,$ae),g(M6,$ae,null),e(td,N2o),e(td,Iae),e(Iae,j2o),b(c,URe,_),b(c,Ko,_),g(E6,Ko,null),e(Ko,D2o),e(Ko,ad),e(ad,G2o),e(ad,X$),e(X$,O2o),e(ad,V2o),e(ad,z$),e(z$,X2o),e(ad,z2o),e(Ko,Q2o),e(Ko,C6),e(C6,W2o),e(C6,qae),e(qae,H2o),e(C6,U2o),e(Ko,J2o),e(Ko,Qr),g(w6,Qr,null),e(Qr,Y2o),e(Qr,Nae),e(Nae,K2o),e(Qr,Z2o),e(Qr,nd),e(nd,evo),e(nd,jae),e(jae,ovo),e(nd,rvo),e(nd,Q$),e(Q$,tvo),e(nd,avo),e(Qr,nvo),e(Qr,Dae),e(Dae,svo),e(Qr,lvo),g(A6,Qr,null),e(Ko,ivo),e(Ko,je),g(y6,je,null),e(je,dvo),e(je,Gae),e(Gae,cvo),e(je,mvo),e(je,Qa),e(Qa,fvo),e(Qa,Oae),e(Oae,gvo),e(Qa,hvo),e(Qa,Vae),e(Vae,uvo),e(Qa,pvo),e(Qa,Xae),e(Xae,_vo),e(Qa,bvo),e(je,vvo),e(je,$),e($,w_),e(w_,zae),e(zae,Fvo),e(w_,Tvo),e(w_,W$),e(W$,Mvo),e(w_,Evo),e($,Cvo),e($,A_),e(A_,Qae),e(Qae,wvo),e(A_,Avo),e(A_,H$),e(H$,yvo),e(A_,Lvo),e($,xvo),e($,y_),e(y_,Wae),e(Wae,kvo),e(y_,Svo),e(y_,U$),e(U$,Rvo),e(y_,Bvo),e($,Pvo),e($,L_),e(L_,Hae),e(Hae,$vo),e(L_,Ivo),e(L_,J$),e(J$,qvo),e(L_,Nvo),e($,jvo),e($,x_),e(x_,Uae),e(Uae,Dvo),e(x_,Gvo),e(x_,Y$),e(Y$,Ovo),e(x_,Vvo),e($,Xvo),e($,k_),e(k_,Jae),e(Jae,zvo),e(k_,Qvo),e(k_,K$),e(K$,Wvo),e(k_,Hvo),e($,Uvo),e($,S_),e(S_,Yae),e(Yae,Jvo),e(S_,Yvo),e(S_,Z$),e(Z$,Kvo),e(S_,Zvo),e($,eFo),e($,R_),e(R_,Kae),e(Kae,oFo),e(R_,rFo),e(R_,eI),e(eI,tFo),e(R_,aFo),e($,nFo),e($,B_),e(B_,Zae),e(Zae,sFo),e(B_,lFo),e(B_,oI),e(oI,iFo),e(B_,dFo),e($,cFo),e($,P_),e(P_,ene),e(ene,mFo),e(P_,fFo),e(P_,rI),e(rI,gFo),e(P_,hFo),e($,uFo),e($,$_),e($_,one),e(one,pFo),e($_,_Fo),e($_,tI),e(tI,bFo),e($_,vFo),e($,FFo),e($,I_),e(I_,rne),e(rne,TFo),e(I_,MFo),e(I_,aI),e(aI,EFo),e(I_,CFo),e($,wFo),e($,q_),e(q_,tne),e(tne,AFo),e(q_,yFo),e(q_,nI),e(nI,LFo),e(q_,xFo),e($,kFo),e($,N_),e(N_,ane),e(ane,SFo),e(N_,RFo),e(N_,sI),e(sI,BFo),e(N_,PFo),e($,$Fo),e($,j_),e(j_,nne),e(nne,IFo),e(j_,qFo),e(j_,lI),e(lI,NFo),e(j_,jFo),e($,DFo),e($,D_),e(D_,sne),e(sne,GFo),e(D_,OFo),e(D_,iI),e(iI,VFo),e(D_,XFo),e($,zFo),e($,G_),e(G_,lne),e(lne,QFo),e(G_,WFo),e(G_,dI),e(dI,HFo),e(G_,UFo),e($,JFo),e($,O_),e(O_,ine),e(ine,YFo),e(O_,KFo),e(O_,cI),e(cI,ZFo),e(O_,e1o),e($,o1o),e($,V_),e(V_,dne),e(dne,r1o),e(V_,t1o),e(V_,mI),e(mI,a1o),e(V_,n1o),e($,s1o),e($,X_),e(X_,cne),e(cne,l1o),e(X_,i1o),e(X_,fI),e(fI,d1o),e(X_,c1o),e($,m1o),e($,z_),e(z_,mne),e(mne,f1o),e(z_,g1o),e(z_,gI),e(gI,h1o),e(z_,u1o),e($,p1o),e($,Q_),e(Q_,fne),e(fne,_1o),e(Q_,b1o),e(Q_,hI),e(hI,v1o),e(Q_,F1o),e($,T1o),e($,W_),e(W_,gne),e(gne,M1o),e(W_,E1o),e(W_,uI),e(uI,C1o),e(W_,w1o),e($,A1o),e($,H_),e(H_,hne),e(hne,y1o),e(H_,L1o),e(H_,pI),e(pI,x1o),e(H_,k1o),e($,S1o),e($,U_),e(U_,une),e(une,R1o),e(U_,B1o),e(U_,_I),e(_I,P1o),e(U_,$1o),e($,I1o),e($,J_),e(J_,pne),e(pne,q1o),e(J_,N1o),e(J_,bI),e(bI,j1o),e(J_,D1o),e($,G1o),e($,Y_),e(Y_,_ne),e(_ne,O1o),e(Y_,V1o),e(Y_,vI),e(vI,X1o),e(Y_,z1o),e($,Q1o),e($,K_),e(K_,bne),e(bne,W1o),e(K_,H1o),e(K_,FI),e(FI,U1o),e(K_,J1o),e($,Y1o),e($,Z_),e(Z_,vne),e(vne,K1o),e(Z_,Z1o),e(Z_,TI),e(TI,eTo),e(Z_,oTo),e($,rTo),e($,eb),e(eb,Fne),e(Fne,tTo),e(eb,aTo),e(eb,MI),e(MI,nTo),e(eb,sTo),e($,lTo),e($,ob),e(ob,Tne),e(Tne,iTo),e(ob,dTo),e(ob,EI),e(EI,cTo),e(ob,mTo),e($,fTo),e($,rb),e(rb,Mne),e(Mne,gTo),e(rb,hTo),e(rb,CI),e(CI,uTo),e(rb,pTo),e($,_To),e($,tb),e(tb,Ene),e(Ene,bTo),e(tb,vTo),e(tb,wI),e(wI,FTo),e(tb,TTo),e($,MTo),e($,ab),e(ab,Cne),e(Cne,ETo),e(ab,CTo),e(ab,AI),e(AI,wTo),e(ab,ATo),e($,yTo),e($,nb),e(nb,wne),e(wne,LTo),e(nb,xTo),e(nb,yI),e(yI,kTo),e(nb,STo),e(je,RTo),e(je,sb),e(sb,BTo),e(sb,Ane),e(Ane,PTo),e(sb,$To),e(sb,yne),e(yne,ITo),e(je,qTo),e(je,Lne),e(Lne,NTo),e(je,jTo),g(L6,je,null),b(c,JRe,_),b(c,sd,_),e(sd,lb),e(lb,xne),g(x6,xne,null),e(sd,DTo),e(sd,kne),e(kne,GTo),b(c,YRe,_),b(c,Zo,_),g(k6,Zo,null),e(Zo,OTo),e(Zo,ld),e(ld,VTo),e(ld,LI),e(LI,XTo),e(ld,zTo),e(ld,xI),e(xI,QTo),e(ld,WTo),e(Zo,HTo),e(Zo,S6),e(S6,UTo),e(S6,Sne),e(Sne,JTo),e(S6,YTo),e(Zo,KTo),e(Zo,Wr),g(R6,Wr,null),e(Wr,ZTo),e(Wr,Rne),e(Rne,eMo),e(Wr,oMo),e(Wr,id),e(id,rMo),e(id,Bne),e(Bne,tMo),e(id,aMo),e(id,kI),e(kI,nMo),e(id,sMo),e(Wr,lMo),e(Wr,Pne),e(Pne,iMo),e(Wr,dMo),g(B6,Wr,null),e(Zo,cMo),e(Zo,De),g(P6,De,null),e(De,mMo),e(De,$ne),e($ne,fMo),e(De,gMo),e(De,Wa),e(Wa,hMo),e(Wa,Ine),e(Ine,uMo),e(Wa,pMo),e(Wa,qne),e(qne,_Mo),e(Wa,bMo),e(Wa,Nne),e(Nne,vMo),e(Wa,FMo),e(De,TMo),e(De,I),e(I,ib),e(ib,jne),e(jne,MMo),e(ib,EMo),e(ib,SI),e(SI,CMo),e(ib,wMo),e(I,AMo),e(I,db),e(db,Dne),e(Dne,yMo),e(db,LMo),e(db,RI),e(RI,xMo),e(db,kMo),e(I,SMo),e(I,cb),e(cb,Gne),e(Gne,RMo),e(cb,BMo),e(cb,BI),e(BI,PMo),e(cb,$Mo),e(I,IMo),e(I,mb),e(mb,One),e(One,qMo),e(mb,NMo),e(mb,PI),e(PI,jMo),e(mb,DMo),e(I,GMo),e(I,fb),e(fb,Vne),e(Vne,OMo),e(fb,VMo),e(fb,$I),e($I,XMo),e(fb,zMo),e(I,QMo),e(I,gb),e(gb,Xne),e(Xne,WMo),e(gb,HMo),e(gb,II),e(II,UMo),e(gb,JMo),e(I,YMo),e(I,hb),e(hb,zne),e(zne,KMo),e(hb,ZMo),e(hb,qI),e(qI,e4o),e(hb,o4o),e(I,r4o),e(I,ub),e(ub,Qne),e(Qne,t4o),e(ub,a4o),e(ub,NI),e(NI,n4o),e(ub,s4o),e(I,l4o),e(I,pb),e(pb,Wne),e(Wne,i4o),e(pb,d4o),e(pb,jI),e(jI,c4o),e(pb,m4o),e(I,f4o),e(I,_b),e(_b,Hne),e(Hne,g4o),e(_b,h4o),e(_b,DI),e(DI,u4o),e(_b,p4o),e(I,_4o),e(I,bb),e(bb,Une),e(Une,b4o),e(bb,v4o),e(bb,GI),e(GI,F4o),e(bb,T4o),e(I,M4o),e(I,vb),e(vb,Jne),e(Jne,E4o),e(vb,C4o),e(vb,OI),e(OI,w4o),e(vb,A4o),e(I,y4o),e(I,Fb),e(Fb,Yne),e(Yne,L4o),e(Fb,x4o),e(Fb,VI),e(VI,k4o),e(Fb,S4o),e(I,R4o),e(I,Tb),e(Tb,Kne),e(Kne,B4o),e(Tb,P4o),e(Tb,XI),e(XI,$4o),e(Tb,I4o),e(I,q4o),e(I,Mb),e(Mb,Zne),e(Zne,N4o),e(Mb,j4o),e(Mb,zI),e(zI,D4o),e(Mb,G4o),e(I,O4o),e(I,Eb),e(Eb,ese),e(ese,V4o),e(Eb,X4o),e(Eb,QI),e(QI,z4o),e(Eb,Q4o),e(I,W4o),e(I,Cb),e(Cb,ose),e(ose,H4o),e(Cb,U4o),e(Cb,WI),e(WI,J4o),e(Cb,Y4o),e(I,K4o),e(I,wb),e(wb,rse),e(rse,Z4o),e(wb,eEo),e(wb,HI),e(HI,oEo),e(wb,rEo),e(I,tEo),e(I,Ab),e(Ab,tse),e(tse,aEo),e(Ab,nEo),e(Ab,UI),e(UI,sEo),e(Ab,lEo),e(I,iEo),e(I,yb),e(yb,ase),e(ase,dEo),e(yb,cEo),e(yb,JI),e(JI,mEo),e(yb,fEo),e(I,gEo),e(I,Lb),e(Lb,nse),e(nse,hEo),e(Lb,uEo),e(Lb,YI),e(YI,pEo),e(Lb,_Eo),e(I,bEo),e(I,xb),e(xb,sse),e(sse,vEo),e(xb,FEo),e(xb,KI),e(KI,TEo),e(xb,MEo),e(I,EEo),e(I,kb),e(kb,lse),e(lse,CEo),e(kb,wEo),e(kb,ZI),e(ZI,AEo),e(kb,yEo),e(I,LEo),e(I,Sb),e(Sb,ise),e(ise,xEo),e(Sb,kEo),e(Sb,eq),e(eq,SEo),e(Sb,REo),e(I,BEo),e(I,Rb),e(Rb,dse),e(dse,PEo),e(Rb,$Eo),e(Rb,oq),e(oq,IEo),e(Rb,qEo),e(I,NEo),e(I,Bb),e(Bb,cse),e(cse,jEo),e(Bb,DEo),e(Bb,rq),e(rq,GEo),e(Bb,OEo),e(I,VEo),e(I,Pb),e(Pb,mse),e(mse,XEo),e(Pb,zEo),e(Pb,tq),e(tq,QEo),e(Pb,WEo),e(I,HEo),e(I,$b),e($b,fse),e(fse,UEo),e($b,JEo),e($b,aq),e(aq,YEo),e($b,KEo),e(I,ZEo),e(I,Ib),e(Ib,gse),e(gse,e5o),e(Ib,o5o),e(Ib,nq),e(nq,r5o),e(Ib,t5o),e(I,a5o),e(I,qb),e(qb,hse),e(hse,n5o),e(qb,s5o),e(qb,sq),e(sq,l5o),e(qb,i5o),e(I,d5o),e(I,Nb),e(Nb,use),e(use,c5o),e(Nb,m5o),e(Nb,pse),e(pse,f5o),e(Nb,g5o),e(I,h5o),e(I,jb),e(jb,_se),e(_se,u5o),e(jb,p5o),e(jb,lq),e(lq,_5o),e(jb,b5o),e(I,v5o),e(I,Db),e(Db,bse),e(bse,F5o),e(Db,T5o),e(Db,iq),e(iq,M5o),e(Db,E5o),e(I,C5o),e(I,Gb),e(Gb,vse),e(vse,w5o),e(Gb,A5o),e(Gb,dq),e(dq,y5o),e(Gb,L5o),e(I,x5o),e(I,Ob),e(Ob,Fse),e(Fse,k5o),e(Ob,S5o),e(Ob,cq),e(cq,R5o),e(Ob,B5o),e(De,P5o),e(De,Vb),e(Vb,$5o),e(Vb,Tse),e(Tse,I5o),e(Vb,q5o),e(Vb,Mse),e(Mse,N5o),e(De,j5o),e(De,Ese),e(Ese,D5o),e(De,G5o),g($6,De,null),b(c,KRe,_),b(c,dd,_),e(dd,Xb),e(Xb,Cse),g(I6,Cse,null),e(dd,O5o),e(dd,wse),e(wse,V5o),b(c,ZRe,_),b(c,er,_),g(q6,er,null),e(er,X5o),e(er,cd),e(cd,z5o),e(cd,mq),e(mq,Q5o),e(cd,W5o),e(cd,fq),e(fq,H5o),e(cd,U5o),e(er,J5o),e(er,N6),e(N6,Y5o),e(N6,Ase),e(Ase,K5o),e(N6,Z5o),e(er,e3o),e(er,Hr),g(j6,Hr,null),e(Hr,o3o),e(Hr,yse),e(yse,r3o),e(Hr,t3o),e(Hr,md),e(md,a3o),e(md,Lse),e(Lse,n3o),e(md,s3o),e(md,gq),e(gq,l3o),e(md,i3o),e(Hr,d3o),e(Hr,xse),e(xse,c3o),e(Hr,m3o),g(D6,Hr,null),e(er,f3o),e(er,Ge),g(G6,Ge,null),e(Ge,g3o),e(Ge,kse),e(kse,h3o),e(Ge,u3o),e(Ge,Ha),e(Ha,p3o),e(Ha,Sse),e(Sse,_3o),e(Ha,b3o),e(Ha,Rse),e(Rse,v3o),e(Ha,F3o),e(Ha,Bse),e(Bse,T3o),e(Ha,M3o),e(Ge,E3o),e(Ge,ne),e(ne,zb),e(zb,Pse),e(Pse,C3o),e(zb,w3o),e(zb,hq),e(hq,A3o),e(zb,y3o),e(ne,L3o),e(ne,Qb),e(Qb,$se),e($se,x3o),e(Qb,k3o),e(Qb,uq),e(uq,S3o),e(Qb,R3o),e(ne,B3o),e(ne,Wb),e(Wb,Ise),e(Ise,P3o),e(Wb,$3o),e(Wb,pq),e(pq,I3o),e(Wb,q3o),e(ne,N3o),e(ne,Hb),e(Hb,qse),e(qse,j3o),e(Hb,D3o),e(Hb,_q),e(_q,G3o),e(Hb,O3o),e(ne,V3o),e(ne,Ub),e(Ub,Nse),e(Nse,X3o),e(Ub,z3o),e(Ub,bq),e(bq,Q3o),e(Ub,W3o),e(ne,H3o),e(ne,Jb),e(Jb,jse),e(jse,U3o),e(Jb,J3o),e(Jb,vq),e(vq,Y3o),e(Jb,K3o),e(ne,Z3o),e(ne,Yb),e(Yb,Dse),e(Dse,eCo),e(Yb,oCo),e(Yb,Fq),e(Fq,rCo),e(Yb,tCo),e(ne,aCo),e(ne,Kb),e(Kb,Gse),e(Gse,nCo),e(Kb,sCo),e(Kb,Tq),e(Tq,lCo),e(Kb,iCo),e(ne,dCo),e(ne,Zb),e(Zb,Ose),e(Ose,cCo),e(Zb,mCo),e(Zb,Mq),e(Mq,fCo),e(Zb,gCo),e(ne,hCo),e(ne,e2),e(e2,Vse),e(Vse,uCo),e(e2,pCo),e(e2,Eq),e(Eq,_Co),e(e2,bCo),e(ne,vCo),e(ne,o2),e(o2,Xse),e(Xse,FCo),e(o2,TCo),e(o2,Cq),e(Cq,MCo),e(o2,ECo),e(ne,CCo),e(ne,r2),e(r2,zse),e(zse,wCo),e(r2,ACo),e(r2,wq),e(wq,yCo),e(r2,LCo),e(ne,xCo),e(ne,t2),e(t2,Qse),e(Qse,kCo),e(t2,SCo),e(t2,Aq),e(Aq,RCo),e(t2,BCo),e(ne,PCo),e(ne,a2),e(a2,Wse),e(Wse,$Co),e(a2,ICo),e(a2,yq),e(yq,qCo),e(a2,NCo),e(ne,jCo),e(ne,n2),e(n2,Hse),e(Hse,DCo),e(n2,GCo),e(n2,Lq),e(Lq,OCo),e(n2,VCo),e(ne,XCo),e(ne,s2),e(s2,Use),e(Use,zCo),e(s2,QCo),e(s2,xq),e(xq,WCo),e(s2,HCo),e(ne,UCo),e(ne,l2),e(l2,Jse),e(Jse,JCo),e(l2,YCo),e(l2,kq),e(kq,KCo),e(l2,ZCo),e(Ge,ewo),e(Ge,i2),e(i2,owo),e(i2,Yse),e(Yse,rwo),e(i2,two),e(i2,Kse),e(Kse,awo),e(Ge,nwo),e(Ge,Zse),e(Zse,swo),e(Ge,lwo),g(O6,Ge,null),b(c,eBe,_),b(c,fd,_),e(fd,d2),e(d2,ele),g(V6,ele,null),e(fd,iwo),e(fd,ole),e(ole,dwo),b(c,oBe,_),b(c,or,_),g(X6,or,null),e(or,cwo),e(or,gd),e(gd,mwo),e(gd,Sq),e(Sq,fwo),e(gd,gwo),e(gd,Rq),e(Rq,hwo),e(gd,uwo),e(or,pwo),e(or,z6),e(z6,_wo),e(z6,rle),e(rle,bwo),e(z6,vwo),e(or,Fwo),e(or,Ur),g(Q6,Ur,null),e(Ur,Two),e(Ur,tle),e(tle,Mwo),e(Ur,Ewo),e(Ur,hd),e(hd,Cwo),e(hd,ale),e(ale,wwo),e(hd,Awo),e(hd,Bq),e(Bq,ywo),e(hd,Lwo),e(Ur,xwo),e(Ur,nle),e(nle,kwo),e(Ur,Swo),g(W6,Ur,null),e(or,Rwo),e(or,Oe),g(H6,Oe,null),e(Oe,Bwo),e(Oe,sle),e(sle,Pwo),e(Oe,$wo),e(Oe,Ua),e(Ua,Iwo),e(Ua,lle),e(lle,qwo),e(Ua,Nwo),e(Ua,ile),e(ile,jwo),e(Ua,Dwo),e(Ua,dle),e(dle,Gwo),e(Ua,Owo),e(Oe,Vwo),e(Oe,y),e(y,c2),e(c2,cle),e(cle,Xwo),e(c2,zwo),e(c2,Pq),e(Pq,Qwo),e(c2,Wwo),e(y,Hwo),e(y,m2),e(m2,mle),e(mle,Uwo),e(m2,Jwo),e(m2,$q),e($q,Ywo),e(m2,Kwo),e(y,Zwo),e(y,f2),e(f2,fle),e(fle,e6o),e(f2,o6o),e(f2,Iq),e(Iq,r6o),e(f2,t6o),e(y,a6o),e(y,g2),e(g2,gle),e(gle,n6o),e(g2,s6o),e(g2,qq),e(qq,l6o),e(g2,i6o),e(y,d6o),e(y,h2),e(h2,hle),e(hle,c6o),e(h2,m6o),e(h2,Nq),e(Nq,f6o),e(h2,g6o),e(y,h6o),e(y,u2),e(u2,ule),e(ule,u6o),e(u2,p6o),e(u2,jq),e(jq,_6o),e(u2,b6o),e(y,v6o),e(y,p2),e(p2,ple),e(ple,F6o),e(p2,T6o),e(p2,Dq),e(Dq,M6o),e(p2,E6o),e(y,C6o),e(y,_2),e(_2,_le),e(_le,w6o),e(_2,A6o),e(_2,Gq),e(Gq,y6o),e(_2,L6o),e(y,x6o),e(y,b2),e(b2,ble),e(ble,k6o),e(b2,S6o),e(b2,Oq),e(Oq,R6o),e(b2,B6o),e(y,P6o),e(y,v2),e(v2,vle),e(vle,$6o),e(v2,I6o),e(v2,Vq),e(Vq,q6o),e(v2,N6o),e(y,j6o),e(y,F2),e(F2,Fle),e(Fle,D6o),e(F2,G6o),e(F2,Xq),e(Xq,O6o),e(F2,V6o),e(y,X6o),e(y,T2),e(T2,Tle),e(Tle,z6o),e(T2,Q6o),e(T2,zq),e(zq,W6o),e(T2,H6o),e(y,U6o),e(y,M2),e(M2,Mle),e(Mle,J6o),e(M2,Y6o),e(M2,Qq),e(Qq,K6o),e(M2,Z6o),e(y,eAo),e(y,E2),e(E2,Ele),e(Ele,oAo),e(E2,rAo),e(E2,Wq),e(Wq,tAo),e(E2,aAo),e(y,nAo),e(y,C2),e(C2,Cle),e(Cle,sAo),e(C2,lAo),e(C2,Hq),e(Hq,iAo),e(C2,dAo),e(y,cAo),e(y,w2),e(w2,wle),e(wle,mAo),e(w2,fAo),e(w2,Uq),e(Uq,gAo),e(w2,hAo),e(y,uAo),e(y,A2),e(A2,Ale),e(Ale,pAo),e(A2,_Ao),e(A2,Jq),e(Jq,bAo),e(A2,vAo),e(y,FAo),e(y,y2),e(y2,yle),e(yle,TAo),e(y2,MAo),e(y2,Yq),e(Yq,EAo),e(y2,CAo),e(y,wAo),e(y,L2),e(L2,Lle),e(Lle,AAo),e(L2,yAo),e(L2,Kq),e(Kq,LAo),e(L2,xAo),e(y,kAo),e(y,x2),e(x2,xle),e(xle,SAo),e(x2,RAo),e(x2,Zq),e(Zq,BAo),e(x2,PAo),e(y,$Ao),e(y,k2),e(k2,kle),e(kle,IAo),e(k2,qAo),e(k2,eN),e(eN,NAo),e(k2,jAo),e(y,DAo),e(y,S2),e(S2,Sle),e(Sle,GAo),e(S2,OAo),e(S2,oN),e(oN,VAo),e(S2,XAo),e(y,zAo),e(y,R2),e(R2,Rle),e(Rle,QAo),e(R2,WAo),e(R2,rN),e(rN,HAo),e(R2,UAo),e(y,JAo),e(y,B2),e(B2,Ble),e(Ble,YAo),e(B2,KAo),e(B2,tN),e(tN,ZAo),e(B2,e0o),e(y,o0o),e(y,P2),e(P2,Ple),e(Ple,r0o),e(P2,t0o),e(P2,aN),e(aN,a0o),e(P2,n0o),e(y,s0o),e(y,$2),e($2,$le),e($le,l0o),e($2,i0o),e($2,nN),e(nN,d0o),e($2,c0o),e(y,m0o),e(y,I2),e(I2,Ile),e(Ile,f0o),e(I2,g0o),e(I2,sN),e(sN,h0o),e(I2,u0o),e(y,p0o),e(y,q2),e(q2,qle),e(qle,_0o),e(q2,b0o),e(q2,lN),e(lN,v0o),e(q2,F0o),e(y,T0o),e(y,N2),e(N2,Nle),e(Nle,M0o),e(N2,E0o),e(N2,iN),e(iN,C0o),e(N2,w0o),e(y,A0o),e(y,j2),e(j2,jle),e(jle,y0o),e(j2,L0o),e(j2,dN),e(dN,x0o),e(j2,k0o),e(y,S0o),e(y,D2),e(D2,Dle),e(Dle,R0o),e(D2,B0o),e(D2,cN),e(cN,P0o),e(D2,$0o),e(y,I0o),e(y,G2),e(G2,Gle),e(Gle,q0o),e(G2,N0o),e(G2,mN),e(mN,j0o),e(G2,D0o),e(y,G0o),e(y,O2),e(O2,Ole),e(Ole,O0o),e(O2,V0o),e(O2,fN),e(fN,X0o),e(O2,z0o),e(y,Q0o),e(y,V2),e(V2,Vle),e(Vle,W0o),e(V2,H0o),e(V2,gN),e(gN,U0o),e(V2,J0o),e(y,Y0o),e(y,X2),e(X2,Xle),e(Xle,K0o),e(X2,Z0o),e(X2,hN),e(hN,eyo),e(X2,oyo),e(y,ryo),e(y,z2),e(z2,zle),e(zle,tyo),e(z2,ayo),e(z2,uN),e(uN,nyo),e(z2,syo),e(y,lyo),e(y,Q2),e(Q2,Qle),e(Qle,iyo),e(Q2,dyo),e(Q2,pN),e(pN,cyo),e(Q2,myo),e(y,fyo),e(y,W2),e(W2,Wle),e(Wle,gyo),e(W2,hyo),e(W2,_N),e(_N,uyo),e(W2,pyo),e(y,_yo),e(y,H2),e(H2,Hle),e(Hle,byo),e(H2,vyo),e(H2,bN),e(bN,Fyo),e(H2,Tyo),e(y,Myo),e(y,U2),e(U2,Ule),e(Ule,Eyo),e(U2,Cyo),e(U2,vN),e(vN,wyo),e(U2,Ayo),e(y,yyo),e(y,J2),e(J2,Jle),e(Jle,Lyo),e(J2,xyo),e(J2,FN),e(FN,kyo),e(J2,Syo),e(y,Ryo),e(y,Y2),e(Y2,Yle),e(Yle,Byo),e(Y2,Pyo),e(Y2,TN),e(TN,$yo),e(Y2,Iyo),e(y,qyo),e(y,K2),e(K2,Kle),e(Kle,Nyo),e(K2,jyo),e(K2,MN),e(MN,Dyo),e(K2,Gyo),e(y,Oyo),e(y,Z2),e(Z2,Zle),e(Zle,Vyo),e(Z2,Xyo),e(Z2,EN),e(EN,zyo),e(Z2,Qyo),e(y,Wyo),e(y,ev),e(ev,eie),e(eie,Hyo),e(ev,Uyo),e(ev,CN),e(CN,Jyo),e(ev,Yyo),e(y,Kyo),e(y,ov),e(ov,oie),e(oie,Zyo),e(ov,e8o),e(ov,wN),e(wN,o8o),e(ov,r8o),e(y,t8o),e(y,rv),e(rv,rie),e(rie,a8o),e(rv,n8o),e(rv,AN),e(AN,s8o),e(rv,l8o),e(Oe,i8o),e(Oe,tv),e(tv,d8o),e(tv,tie),e(tie,c8o),e(tv,m8o),e(tv,aie),e(aie,f8o),e(Oe,g8o),e(Oe,nie),e(nie,h8o),e(Oe,u8o),g(U6,Oe,null),b(c,rBe,_),b(c,ud,_),e(ud,av),e(av,sie),g(J6,sie,null),e(ud,p8o),e(ud,lie),e(lie,_8o),b(c,tBe,_),b(c,rr,_),g(Y6,rr,null),e(rr,b8o),e(rr,pd),e(pd,v8o),e(pd,yN),e(yN,F8o),e(pd,T8o),e(pd,LN),e(LN,M8o),e(pd,E8o),e(rr,C8o),e(rr,K6),e(K6,w8o),e(K6,iie),e(iie,A8o),e(K6,y8o),e(rr,L8o),e(rr,Jr),g(Z6,Jr,null),e(Jr,x8o),e(Jr,die),e(die,k8o),e(Jr,S8o),e(Jr,_d),e(_d,R8o),e(_d,cie),e(cie,B8o),e(_d,P8o),e(_d,xN),e(xN,$8o),e(_d,I8o),e(Jr,q8o),e(Jr,mie),e(mie,N8o),e(Jr,j8o),g(eA,Jr,null),e(rr,D8o),e(rr,Ve),g(oA,Ve,null),e(Ve,G8o),e(Ve,fie),e(fie,O8o),e(Ve,V8o),e(Ve,Ja),e(Ja,X8o),e(Ja,gie),e(gie,z8o),e(Ja,Q8o),e(Ja,hie),e(hie,W8o),e(Ja,H8o),e(Ja,uie),e(uie,U8o),e(Ja,J8o),e(Ve,Y8o),e(Ve,G),e(G,nv),e(nv,pie),e(pie,K8o),e(nv,Z8o),e(nv,kN),e(kN,eLo),e(nv,oLo),e(G,rLo),e(G,sv),e(sv,_ie),e(_ie,tLo),e(sv,aLo),e(sv,SN),e(SN,nLo),e(sv,sLo),e(G,lLo),e(G,lv),e(lv,bie),e(bie,iLo),e(lv,dLo),e(lv,RN),e(RN,cLo),e(lv,mLo),e(G,fLo),e(G,iv),e(iv,vie),e(vie,gLo),e(iv,hLo),e(iv,BN),e(BN,uLo),e(iv,pLo),e(G,_Lo),e(G,dv),e(dv,Fie),e(Fie,bLo),e(dv,vLo),e(dv,PN),e(PN,FLo),e(dv,TLo),e(G,MLo),e(G,cv),e(cv,Tie),e(Tie,ELo),e(cv,CLo),e(cv,$N),e($N,wLo),e(cv,ALo),e(G,yLo),e(G,mv),e(mv,Mie),e(Mie,LLo),e(mv,xLo),e(mv,IN),e(IN,kLo),e(mv,SLo),e(G,RLo),e(G,fv),e(fv,Eie),e(Eie,BLo),e(fv,PLo),e(fv,qN),e(qN,$Lo),e(fv,ILo),e(G,qLo),e(G,gv),e(gv,Cie),e(Cie,NLo),e(gv,jLo),e(gv,NN),e(NN,DLo),e(gv,GLo),e(G,OLo),e(G,hv),e(hv,wie),e(wie,VLo),e(hv,XLo),e(hv,jN),e(jN,zLo),e(hv,QLo),e(G,WLo),e(G,uv),e(uv,Aie),e(Aie,HLo),e(uv,ULo),e(uv,DN),e(DN,JLo),e(uv,YLo),e(G,KLo),e(G,pv),e(pv,yie),e(yie,ZLo),e(pv,e7o),e(pv,GN),e(GN,o7o),e(pv,r7o),e(G,t7o),e(G,_v),e(_v,Lie),e(Lie,a7o),e(_v,n7o),e(_v,ON),e(ON,s7o),e(_v,l7o),e(G,i7o),e(G,bv),e(bv,xie),e(xie,d7o),e(bv,c7o),e(bv,VN),e(VN,m7o),e(bv,f7o),e(G,g7o),e(G,vv),e(vv,kie),e(kie,h7o),e(vv,u7o),e(vv,XN),e(XN,p7o),e(vv,_7o),e(G,b7o),e(G,Fv),e(Fv,Sie),e(Sie,v7o),e(Fv,F7o),e(Fv,zN),e(zN,T7o),e(Fv,M7o),e(G,E7o),e(G,Tv),e(Tv,Rie),e(Rie,C7o),e(Tv,w7o),e(Tv,QN),e(QN,A7o),e(Tv,y7o),e(G,L7o),e(G,Mv),e(Mv,Bie),e(Bie,x7o),e(Mv,k7o),e(Mv,WN),e(WN,S7o),e(Mv,R7o),e(G,B7o),e(G,Ev),e(Ev,Pie),e(Pie,P7o),e(Ev,$7o),e(Ev,HN),e(HN,I7o),e(Ev,q7o),e(G,N7o),e(G,Cv),e(Cv,$ie),e($ie,j7o),e(Cv,D7o),e(Cv,UN),e(UN,G7o),e(Cv,O7o),e(G,V7o),e(G,wv),e(wv,Iie),e(Iie,X7o),e(wv,z7o),e(wv,JN),e(JN,Q7o),e(wv,W7o),e(G,H7o),e(G,Av),e(Av,qie),e(qie,U7o),e(Av,J7o),e(Av,YN),e(YN,Y7o),e(Av,K7o),e(G,Z7o),e(G,yv),e(yv,Nie),e(Nie,e9o),e(yv,o9o),e(yv,KN),e(KN,r9o),e(yv,t9o),e(G,a9o),e(G,Lv),e(Lv,jie),e(jie,n9o),e(Lv,s9o),e(Lv,ZN),e(ZN,l9o),e(Lv,i9o),e(G,d9o),e(G,xv),e(xv,Die),e(Die,c9o),e(xv,m9o),e(xv,ej),e(ej,f9o),e(xv,g9o),e(G,h9o),e(G,kv),e(kv,Gie),e(Gie,u9o),e(kv,p9o),e(kv,oj),e(oj,_9o),e(kv,b9o),e(G,v9o),e(G,Sv),e(Sv,Oie),e(Oie,F9o),e(Sv,T9o),e(Sv,rj),e(rj,M9o),e(Sv,E9o),e(G,C9o),e(G,Rv),e(Rv,Vie),e(Vie,w9o),e(Rv,A9o),e(Rv,tj),e(tj,y9o),e(Rv,L9o),e(Ve,x9o),e(Ve,Bv),e(Bv,k9o),e(Bv,Xie),e(Xie,S9o),e(Bv,R9o),e(Bv,zie),e(zie,B9o),e(Ve,P9o),e(Ve,Qie),e(Qie,$9o),e(Ve,I9o),g(rA,Ve,null),b(c,aBe,_),b(c,bd,_),e(bd,Pv),e(Pv,Wie),g(tA,Wie,null),e(bd,q9o),e(bd,Hie),e(Hie,N9o),b(c,nBe,_),b(c,tr,_),g(aA,tr,null),e(tr,j9o),e(tr,vd),e(vd,D9o),e(vd,aj),e(aj,G9o),e(vd,O9o),e(vd,nj),e(nj,V9o),e(vd,X9o),e(tr,z9o),e(tr,nA),e(nA,Q9o),e(nA,Uie),e(Uie,W9o),e(nA,H9o),e(tr,U9o),e(tr,Yr),g(sA,Yr,null),e(Yr,J9o),e(Yr,Jie),e(Jie,Y9o),e(Yr,K9o),e(Yr,Fd),e(Fd,Z9o),e(Fd,Yie),e(Yie,exo),e(Fd,oxo),e(Fd,sj),e(sj,rxo),e(Fd,txo),e(Yr,axo),e(Yr,Kie),e(Kie,nxo),e(Yr,sxo),g(lA,Yr,null),e(tr,lxo),e(tr,Xe),g(iA,Xe,null),e(Xe,ixo),e(Xe,Zie),e(Zie,dxo),e(Xe,cxo),e(Xe,Ya),e(Ya,mxo),e(Ya,ede),e(ede,fxo),e(Ya,gxo),e(Ya,ode),e(ode,hxo),e(Ya,uxo),e(Ya,rde),e(rde,pxo),e(Ya,_xo),e(Xe,bxo),e(Xe,da),e(da,$v),e($v,tde),e(tde,vxo),e($v,Fxo),e($v,lj),e(lj,Txo),e($v,Mxo),e(da,Exo),e(da,Iv),e(Iv,ade),e(ade,Cxo),e(Iv,wxo),e(Iv,ij),e(ij,Axo),e(Iv,yxo),e(da,Lxo),e(da,qv),e(qv,nde),e(nde,xxo),e(qv,kxo),e(qv,dj),e(dj,Sxo),e(qv,Rxo),e(da,Bxo),e(da,Nv),e(Nv,sde),e(sde,Pxo),e(Nv,$xo),e(Nv,cj),e(cj,Ixo),e(Nv,qxo),e(da,Nxo),e(da,jv),e(jv,lde),e(lde,jxo),e(jv,Dxo),e(jv,mj),e(mj,Gxo),e(jv,Oxo),e(Xe,Vxo),e(Xe,Dv),e(Dv,Xxo),e(Dv,ide),e(ide,zxo),e(Dv,Qxo),e(Dv,dde),e(dde,Wxo),e(Xe,Hxo),e(Xe,cde),e(cde,Uxo),e(Xe,Jxo),g(dA,Xe,null),b(c,sBe,_),b(c,Td,_),e(Td,Gv),e(Gv,mde),g(cA,mde,null),e(Td,Yxo),e(Td,fde),e(fde,Kxo),b(c,lBe,_),b(c,ar,_),g(mA,ar,null),e(ar,Zxo),e(ar,Md),e(Md,eko),e(Md,fj),e(fj,oko),e(Md,rko),e(Md,gj),e(gj,tko),e(Md,ako),e(ar,nko),e(ar,fA),e(fA,sko),e(fA,gde),e(gde,lko),e(fA,iko),e(ar,dko),e(ar,Kr),g(gA,Kr,null),e(Kr,cko),e(Kr,hde),e(hde,mko),e(Kr,fko),e(Kr,Ed),e(Ed,gko),e(Ed,ude),e(ude,hko),e(Ed,uko),e(Ed,hj),e(hj,pko),e(Ed,_ko),e(Kr,bko),e(Kr,pde),e(pde,vko),e(Kr,Fko),g(hA,Kr,null),e(ar,Tko),e(ar,ze),g(uA,ze,null),e(ze,Mko),e(ze,_de),e(_de,Eko),e(ze,Cko),e(ze,Ka),e(Ka,wko),e(Ka,bde),e(bde,Ako),e(Ka,yko),e(Ka,vde),e(vde,Lko),e(Ka,xko),e(Ka,Fde),e(Fde,kko),e(Ka,Sko),e(ze,Rko),e(ze,j),e(j,Ov),e(Ov,Tde),e(Tde,Bko),e(Ov,Pko),e(Ov,uj),e(uj,$ko),e(Ov,Iko),e(j,qko),e(j,Vv),e(Vv,Mde),e(Mde,Nko),e(Vv,jko),e(Vv,pj),e(pj,Dko),e(Vv,Gko),e(j,Oko),e(j,Xv),e(Xv,Ede),e(Ede,Vko),e(Xv,Xko),e(Xv,_j),e(_j,zko),e(Xv,Qko),e(j,Wko),e(j,zv),e(zv,Cde),e(Cde,Hko),e(zv,Uko),e(zv,bj),e(bj,Jko),e(zv,Yko),e(j,Kko),e(j,Qv),e(Qv,wde),e(wde,Zko),e(Qv,eSo),e(Qv,vj),e(vj,oSo),e(Qv,rSo),e(j,tSo),e(j,Wv),e(Wv,Ade),e(Ade,aSo),e(Wv,nSo),e(Wv,Fj),e(Fj,sSo),e(Wv,lSo),e(j,iSo),e(j,Hv),e(Hv,yde),e(yde,dSo),e(Hv,cSo),e(Hv,Tj),e(Tj,mSo),e(Hv,fSo),e(j,gSo),e(j,Uv),e(Uv,Lde),e(Lde,hSo),e(Uv,uSo),e(Uv,Mj),e(Mj,pSo),e(Uv,_So),e(j,bSo),e(j,Jv),e(Jv,xde),e(xde,vSo),e(Jv,FSo),e(Jv,Ej),e(Ej,TSo),e(Jv,MSo),e(j,ESo),e(j,Yv),e(Yv,kde),e(kde,CSo),e(Yv,wSo),e(Yv,Cj),e(Cj,ASo),e(Yv,ySo),e(j,LSo),e(j,Kv),e(Kv,Sde),e(Sde,xSo),e(Kv,kSo),e(Kv,wj),e(wj,SSo),e(Kv,RSo),e(j,BSo),e(j,Zv),e(Zv,Rde),e(Rde,PSo),e(Zv,$So),e(Zv,Aj),e(Aj,ISo),e(Zv,qSo),e(j,NSo),e(j,eF),e(eF,Bde),e(Bde,jSo),e(eF,DSo),e(eF,yj),e(yj,GSo),e(eF,OSo),e(j,VSo),e(j,oF),e(oF,Pde),e(Pde,XSo),e(oF,zSo),e(oF,Lj),e(Lj,QSo),e(oF,WSo),e(j,HSo),e(j,rF),e(rF,$de),e($de,USo),e(rF,JSo),e(rF,xj),e(xj,YSo),e(rF,KSo),e(j,ZSo),e(j,tF),e(tF,Ide),e(Ide,eRo),e(tF,oRo),e(tF,kj),e(kj,rRo),e(tF,tRo),e(j,aRo),e(j,aF),e(aF,qde),e(qde,nRo),e(aF,sRo),e(aF,Sj),e(Sj,lRo),e(aF,iRo),e(j,dRo),e(j,nF),e(nF,Nde),e(Nde,cRo),e(nF,mRo),e(nF,Rj),e(Rj,fRo),e(nF,gRo),e(j,hRo),e(j,sF),e(sF,jde),e(jde,uRo),e(sF,pRo),e(sF,Bj),e(Bj,_Ro),e(sF,bRo),e(j,vRo),e(j,lF),e(lF,Dde),e(Dde,FRo),e(lF,TRo),e(lF,Pj),e(Pj,MRo),e(lF,ERo),e(j,CRo),e(j,iF),e(iF,Gde),e(Gde,wRo),e(iF,ARo),e(iF,$j),e($j,yRo),e(iF,LRo),e(j,xRo),e(j,dF),e(dF,Ode),e(Ode,kRo),e(dF,SRo),e(dF,Ij),e(Ij,RRo),e(dF,BRo),e(j,PRo),e(j,cF),e(cF,Vde),e(Vde,$Ro),e(cF,IRo),e(cF,qj),e(qj,qRo),e(cF,NRo),e(j,jRo),e(j,mF),e(mF,Xde),e(Xde,DRo),e(mF,GRo),e(mF,Nj),e(Nj,ORo),e(mF,VRo),e(j,XRo),e(j,fF),e(fF,zde),e(zde,zRo),e(fF,QRo),e(fF,jj),e(jj,WRo),e(fF,HRo),e(j,URo),e(j,gF),e(gF,Qde),e(Qde,JRo),e(gF,YRo),e(gF,Dj),e(Dj,KRo),e(gF,ZRo),e(j,eBo),e(j,hF),e(hF,Wde),e(Wde,oBo),e(hF,rBo),e(hF,Gj),e(Gj,tBo),e(hF,aBo),e(j,nBo),e(j,uF),e(uF,Hde),e(Hde,sBo),e(uF,lBo),e(uF,Oj),e(Oj,iBo),e(uF,dBo),e(j,cBo),e(j,pF),e(pF,Ude),e(Ude,mBo),e(pF,fBo),e(pF,Vj),e(Vj,gBo),e(pF,hBo),e(j,uBo),e(j,_F),e(_F,Jde),e(Jde,pBo),e(_F,_Bo),e(_F,Xj),e(Xj,bBo),e(_F,vBo),e(j,FBo),e(j,bF),e(bF,Yde),e(Yde,TBo),e(bF,MBo),e(bF,zj),e(zj,EBo),e(bF,CBo),e(j,wBo),e(j,vF),e(vF,Kde),e(Kde,ABo),e(vF,yBo),e(vF,Qj),e(Qj,LBo),e(vF,xBo),e(j,kBo),e(j,FF),e(FF,Zde),e(Zde,SBo),e(FF,RBo),e(FF,Wj),e(Wj,BBo),e(FF,PBo),e(ze,$Bo),e(ze,TF),e(TF,IBo),e(TF,ece),e(ece,qBo),e(TF,NBo),e(TF,oce),e(oce,jBo),e(ze,DBo),e(ze,rce),e(rce,GBo),e(ze,OBo),g(pA,ze,null),b(c,iBe,_),b(c,Cd,_),e(Cd,MF),e(MF,tce),g(_A,tce,null),e(Cd,VBo),e(Cd,ace),e(ace,XBo),b(c,dBe,_),b(c,nr,_),g(bA,nr,null),e(nr,zBo),e(nr,wd),e(wd,QBo),e(wd,Hj),e(Hj,WBo),e(wd,HBo),e(wd,Uj),e(Uj,UBo),e(wd,JBo),e(nr,YBo),e(nr,vA),e(vA,KBo),e(vA,nce),e(nce,ZBo),e(vA,ePo),e(nr,oPo),e(nr,Zr),g(FA,Zr,null),e(Zr,rPo),e(Zr,sce),e(sce,tPo),e(Zr,aPo),e(Zr,Ad),e(Ad,nPo),e(Ad,lce),e(lce,sPo),e(Ad,lPo),e(Ad,Jj),e(Jj,iPo),e(Ad,dPo),e(Zr,cPo),e(Zr,ice),e(ice,mPo),e(Zr,fPo),g(TA,Zr,null),e(nr,gPo),e(nr,Qe),g(MA,Qe,null),e(Qe,hPo),e(Qe,dce),e(dce,uPo),e(Qe,pPo),e(Qe,Za),e(Za,_Po),e(Za,cce),e(cce,bPo),e(Za,vPo),e(Za,mce),e(mce,FPo),e(Za,TPo),e(Za,fce),e(fce,MPo),e(Za,EPo),e(Qe,CPo),e(Qe,R),e(R,EF),e(EF,gce),e(gce,wPo),e(EF,APo),e(EF,Yj),e(Yj,yPo),e(EF,LPo),e(R,xPo),e(R,CF),e(CF,hce),e(hce,kPo),e(CF,SPo),e(CF,Kj),e(Kj,RPo),e(CF,BPo),e(R,PPo),e(R,wF),e(wF,uce),e(uce,$Po),e(wF,IPo),e(wF,Zj),e(Zj,qPo),e(wF,NPo),e(R,jPo),e(R,AF),e(AF,pce),e(pce,DPo),e(AF,GPo),e(AF,eD),e(eD,OPo),e(AF,VPo),e(R,XPo),e(R,yF),e(yF,_ce),e(_ce,zPo),e(yF,QPo),e(yF,oD),e(oD,WPo),e(yF,HPo),e(R,UPo),e(R,LF),e(LF,bce),e(bce,JPo),e(LF,YPo),e(LF,rD),e(rD,KPo),e(LF,ZPo),e(R,e$o),e(R,xF),e(xF,vce),e(vce,o$o),e(xF,r$o),e(xF,tD),e(tD,t$o),e(xF,a$o),e(R,n$o),e(R,kF),e(kF,Fce),e(Fce,s$o),e(kF,l$o),e(kF,aD),e(aD,i$o),e(kF,d$o),e(R,c$o),e(R,SF),e(SF,Tce),e(Tce,m$o),e(SF,f$o),e(SF,nD),e(nD,g$o),e(SF,h$o),e(R,u$o),e(R,RF),e(RF,Mce),e(Mce,p$o),e(RF,_$o),e(RF,sD),e(sD,b$o),e(RF,v$o),e(R,F$o),e(R,BF),e(BF,Ece),e(Ece,T$o),e(BF,M$o),e(BF,lD),e(lD,E$o),e(BF,C$o),e(R,w$o),e(R,PF),e(PF,Cce),e(Cce,A$o),e(PF,y$o),e(PF,iD),e(iD,L$o),e(PF,x$o),e(R,k$o),e(R,$F),e($F,wce),e(wce,S$o),e($F,R$o),e($F,dD),e(dD,B$o),e($F,P$o),e(R,$$o),e(R,IF),e(IF,Ace),e(Ace,I$o),e(IF,q$o),e(IF,cD),e(cD,N$o),e(IF,j$o),e(R,D$o),e(R,qF),e(qF,yce),e(yce,G$o),e(qF,O$o),e(qF,mD),e(mD,V$o),e(qF,X$o),e(R,z$o),e(R,NF),e(NF,Lce),e(Lce,Q$o),e(NF,W$o),e(NF,fD),e(fD,H$o),e(NF,U$o),e(R,J$o),e(R,jF),e(jF,xce),e(xce,Y$o),e(jF,K$o),e(jF,gD),e(gD,Z$o),e(jF,eIo),e(R,oIo),e(R,DF),e(DF,kce),e(kce,rIo),e(DF,tIo),e(DF,hD),e(hD,aIo),e(DF,nIo),e(R,sIo),e(R,GF),e(GF,Sce),e(Sce,lIo),e(GF,iIo),e(GF,uD),e(uD,dIo),e(GF,cIo),e(R,mIo),e(R,OF),e(OF,Rce),e(Rce,fIo),e(OF,gIo),e(OF,pD),e(pD,hIo),e(OF,uIo),e(R,pIo),e(R,VF),e(VF,Bce),e(Bce,_Io),e(VF,bIo),e(VF,_D),e(_D,vIo),e(VF,FIo),e(R,TIo),e(R,XF),e(XF,Pce),e(Pce,MIo),e(XF,EIo),e(XF,bD),e(bD,CIo),e(XF,wIo),e(R,AIo),e(R,zF),e(zF,$ce),e($ce,yIo),e(zF,LIo),e(zF,vD),e(vD,xIo),e(zF,kIo),e(R,SIo),e(R,QF),e(QF,Ice),e(Ice,RIo),e(QF,BIo),e(QF,FD),e(FD,PIo),e(QF,$Io),e(R,IIo),e(R,WF),e(WF,qce),e(qce,qIo),e(WF,NIo),e(WF,TD),e(TD,jIo),e(WF,DIo),e(R,GIo),e(R,HF),e(HF,Nce),e(Nce,OIo),e(HF,VIo),e(HF,MD),e(MD,XIo),e(HF,zIo),e(R,QIo),e(R,UF),e(UF,jce),e(jce,WIo),e(UF,HIo),e(UF,ED),e(ED,UIo),e(UF,JIo),e(R,YIo),e(R,JF),e(JF,Dce),e(Dce,KIo),e(JF,ZIo),e(JF,CD),e(CD,eqo),e(JF,oqo),e(R,rqo),e(R,YF),e(YF,Gce),e(Gce,tqo),e(YF,aqo),e(YF,wD),e(wD,nqo),e(YF,sqo),e(R,lqo),e(R,KF),e(KF,Oce),e(Oce,iqo),e(KF,dqo),e(KF,AD),e(AD,cqo),e(KF,mqo),e(R,fqo),e(R,ZF),e(ZF,Vce),e(Vce,gqo),e(ZF,hqo),e(ZF,yD),e(yD,uqo),e(ZF,pqo),e(R,_qo),e(R,e1),e(e1,Xce),e(Xce,bqo),e(e1,vqo),e(e1,LD),e(LD,Fqo),e(e1,Tqo),e(R,Mqo),e(R,o1),e(o1,zce),e(zce,Eqo),e(o1,Cqo),e(o1,xD),e(xD,wqo),e(o1,Aqo),e(R,yqo),e(R,r1),e(r1,Qce),e(Qce,Lqo),e(r1,xqo),e(r1,kD),e(kD,kqo),e(r1,Sqo),e(R,Rqo),e(R,t1),e(t1,Wce),e(Wce,Bqo),e(t1,Pqo),e(t1,SD),e(SD,$qo),e(t1,Iqo),e(R,qqo),e(R,a1),e(a1,Hce),e(Hce,Nqo),e(a1,jqo),e(a1,RD),e(RD,Dqo),e(a1,Gqo),e(R,Oqo),e(R,n1),e(n1,Uce),e(Uce,Vqo),e(n1,Xqo),e(n1,BD),e(BD,zqo),e(n1,Qqo),e(R,Wqo),e(R,s1),e(s1,Jce),e(Jce,Hqo),e(s1,Uqo),e(s1,PD),e(PD,Jqo),e(s1,Yqo),e(R,Kqo),e(R,l1),e(l1,Yce),e(Yce,Zqo),e(l1,eNo),e(l1,$D),e($D,oNo),e(l1,rNo),e(Qe,tNo),e(Qe,i1),e(i1,aNo),e(i1,Kce),e(Kce,nNo),e(i1,sNo),e(i1,Zce),e(Zce,lNo),e(Qe,iNo),e(Qe,eme),e(eme,dNo),e(Qe,cNo),g(EA,Qe,null),b(c,cBe,_),b(c,yd,_),e(yd,d1),e(d1,ome),g(CA,ome,null),e(yd,mNo),e(yd,rme),e(rme,fNo),b(c,mBe,_),b(c,sr,_),g(wA,sr,null),e(sr,gNo),e(sr,Ld),e(Ld,hNo),e(Ld,ID),e(ID,uNo),e(Ld,pNo),e(Ld,qD),e(qD,_No),e(Ld,bNo),e(sr,vNo),e(sr,AA),e(AA,FNo),e(AA,tme),e(tme,TNo),e(AA,MNo),e(sr,ENo),e(sr,et),g(yA,et,null),e(et,CNo),e(et,ame),e(ame,wNo),e(et,ANo),e(et,xd),e(xd,yNo),e(xd,nme),e(nme,LNo),e(xd,xNo),e(xd,ND),e(ND,kNo),e(xd,SNo),e(et,RNo),e(et,sme),e(sme,BNo),e(et,PNo),g(LA,et,null),e(sr,$No),e(sr,We),g(xA,We,null),e(We,INo),e(We,lme),e(lme,qNo),e(We,NNo),e(We,en),e(en,jNo),e(en,ime),e(ime,DNo),e(en,GNo),e(en,dme),e(dme,ONo),e(en,VNo),e(en,cme),e(cme,XNo),e(en,zNo),e(We,QNo),e(We,mme),e(mme,c1),e(c1,fme),e(fme,WNo),e(c1,HNo),e(c1,jD),e(jD,UNo),e(c1,JNo),e(We,YNo),e(We,m1),e(m1,KNo),e(m1,gme),e(gme,ZNo),e(m1,ejo),e(m1,hme),e(hme,ojo),e(We,rjo),e(We,ume),e(ume,tjo),e(We,ajo),g(kA,We,null),b(c,fBe,_),b(c,kd,_),e(kd,f1),e(f1,pme),g(SA,pme,null),e(kd,njo),e(kd,_me),e(_me,sjo),b(c,gBe,_),b(c,lr,_),g(RA,lr,null),e(lr,ljo),e(lr,Sd),e(Sd,ijo),e(Sd,DD),e(DD,djo),e(Sd,cjo),e(Sd,GD),e(GD,mjo),e(Sd,fjo),e(lr,gjo),e(lr,BA),e(BA,hjo),e(BA,bme),e(bme,ujo),e(BA,pjo),e(lr,_jo),e(lr,ot),g(PA,ot,null),e(ot,bjo),e(ot,vme),e(vme,vjo),e(ot,Fjo),e(ot,Rd),e(Rd,Tjo),e(Rd,Fme),e(Fme,Mjo),e(Rd,Ejo),e(Rd,OD),e(OD,Cjo),e(Rd,wjo),e(ot,Ajo),e(ot,Tme),e(Tme,yjo),e(ot,Ljo),g($A,ot,null),e(lr,xjo),e(lr,He),g(IA,He,null),e(He,kjo),e(He,Mme),e(Mme,Sjo),e(He,Rjo),e(He,on),e(on,Bjo),e(on,Eme),e(Eme,Pjo),e(on,$jo),e(on,Cme),e(Cme,Ijo),e(on,qjo),e(on,wme),e(wme,Njo),e(on,jjo),e(He,Djo),e(He,de),e(de,g1),e(g1,Ame),e(Ame,Gjo),e(g1,Ojo),e(g1,VD),e(VD,Vjo),e(g1,Xjo),e(de,zjo),e(de,h1),e(h1,yme),e(yme,Qjo),e(h1,Wjo),e(h1,XD),e(XD,Hjo),e(h1,Ujo),e(de,Jjo),e(de,u1),e(u1,Lme),e(Lme,Yjo),e(u1,Kjo),e(u1,zD),e(zD,Zjo),e(u1,eDo),e(de,oDo),e(de,Gs),e(Gs,xme),e(xme,rDo),e(Gs,tDo),e(Gs,QD),e(QD,aDo),e(Gs,nDo),e(Gs,WD),e(WD,sDo),e(Gs,lDo),e(de,iDo),e(de,p1),e(p1,kme),e(kme,dDo),e(p1,cDo),e(p1,HD),e(HD,mDo),e(p1,fDo),e(de,gDo),e(de,fa),e(fa,Sme),e(Sme,hDo),e(fa,uDo),e(fa,UD),e(UD,pDo),e(fa,_Do),e(fa,JD),e(JD,bDo),e(fa,vDo),e(fa,YD),e(YD,FDo),e(fa,TDo),e(de,MDo),e(de,_1),e(_1,Rme),e(Rme,EDo),e(_1,CDo),e(_1,KD),e(KD,wDo),e(_1,ADo),e(de,yDo),e(de,b1),e(b1,Bme),e(Bme,LDo),e(b1,xDo),e(b1,ZD),e(ZD,kDo),e(b1,SDo),e(de,RDo),e(de,v1),e(v1,Pme),e(Pme,BDo),e(v1,PDo),e(v1,eG),e(eG,$Do),e(v1,IDo),e(de,qDo),e(de,F1),e(F1,$me),e($me,NDo),e(F1,jDo),e(F1,oG),e(oG,DDo),e(F1,GDo),e(de,ODo),e(de,T1),e(T1,Ime),e(Ime,VDo),e(T1,XDo),e(T1,rG),e(rG,zDo),e(T1,QDo),e(de,WDo),e(de,M1),e(M1,qme),e(qme,HDo),e(M1,UDo),e(M1,tG),e(tG,JDo),e(M1,YDo),e(de,KDo),e(de,E1),e(E1,Nme),e(Nme,ZDo),e(E1,eGo),e(E1,aG),e(aG,oGo),e(E1,rGo),e(He,tGo),e(He,C1),e(C1,aGo),e(C1,jme),e(jme,nGo),e(C1,sGo),e(C1,Dme),e(Dme,lGo),e(He,iGo),e(He,Gme),e(Gme,dGo),e(He,cGo),g(qA,He,null),b(c,hBe,_),b(c,Bd,_),e(Bd,w1),e(w1,Ome),g(NA,Ome,null),e(Bd,mGo),e(Bd,Vme),e(Vme,fGo),b(c,uBe,_),b(c,ir,_),g(jA,ir,null),e(ir,gGo),e(ir,Pd),e(Pd,hGo),e(Pd,nG),e(nG,uGo),e(Pd,pGo),e(Pd,sG),e(sG,_Go),e(Pd,bGo),e(ir,vGo),e(ir,DA),e(DA,FGo),e(DA,Xme),e(Xme,TGo),e(DA,MGo),e(ir,EGo),e(ir,rt),g(GA,rt,null),e(rt,CGo),e(rt,zme),e(zme,wGo),e(rt,AGo),e(rt,$d),e($d,yGo),e($d,Qme),e(Qme,LGo),e($d,xGo),e($d,lG),e(lG,kGo),e($d,SGo),e(rt,RGo),e(rt,Wme),e(Wme,BGo),e(rt,PGo),g(OA,rt,null),e(ir,$Go),e(ir,Ue),g(VA,Ue,null),e(Ue,IGo),e(Ue,Hme),e(Hme,qGo),e(Ue,NGo),e(Ue,rn),e(rn,jGo),e(rn,Ume),e(Ume,DGo),e(rn,GGo),e(rn,Jme),e(Jme,OGo),e(rn,VGo),e(rn,Yme),e(Yme,XGo),e(rn,zGo),e(Ue,QGo),e(Ue,Kme),e(Kme,A1),e(A1,Zme),e(Zme,WGo),e(A1,HGo),e(A1,iG),e(iG,UGo),e(A1,JGo),e(Ue,YGo),e(Ue,y1),e(y1,KGo),e(y1,efe),e(efe,ZGo),e(y1,eOo),e(y1,ofe),e(ofe,oOo),e(Ue,rOo),e(Ue,rfe),e(rfe,tOo),e(Ue,aOo),g(XA,Ue,null),b(c,pBe,_),b(c,Id,_),e(Id,L1),e(L1,tfe),g(zA,tfe,null),e(Id,nOo),e(Id,afe),e(afe,sOo),b(c,_Be,_),b(c,dr,_),g(QA,dr,null),e(dr,lOo),e(dr,qd),e(qd,iOo),e(qd,dG),e(dG,dOo),e(qd,cOo),e(qd,cG),e(cG,mOo),e(qd,fOo),e(dr,gOo),e(dr,WA),e(WA,hOo),e(WA,nfe),e(nfe,uOo),e(WA,pOo),e(dr,_Oo),e(dr,tt),g(HA,tt,null),e(tt,bOo),e(tt,sfe),e(sfe,vOo),e(tt,FOo),e(tt,Nd),e(Nd,TOo),e(Nd,lfe),e(lfe,MOo),e(Nd,EOo),e(Nd,mG),e(mG,COo),e(Nd,wOo),e(tt,AOo),e(tt,ife),e(ife,yOo),e(tt,LOo),g(UA,tt,null),e(dr,xOo),e(dr,Je),g(JA,Je,null),e(Je,kOo),e(Je,dfe),e(dfe,SOo),e(Je,ROo),e(Je,tn),e(tn,BOo),e(tn,cfe),e(cfe,POo),e(tn,$Oo),e(tn,mfe),e(mfe,IOo),e(tn,qOo),e(tn,ffe),e(ffe,NOo),e(tn,jOo),e(Je,DOo),e(Je,Se),e(Se,x1),e(x1,gfe),e(gfe,GOo),e(x1,OOo),e(x1,fG),e(fG,VOo),e(x1,XOo),e(Se,zOo),e(Se,k1),e(k1,hfe),e(hfe,QOo),e(k1,WOo),e(k1,gG),e(gG,HOo),e(k1,UOo),e(Se,JOo),e(Se,S1),e(S1,ufe),e(ufe,YOo),e(S1,KOo),e(S1,hG),e(hG,ZOo),e(S1,eVo),e(Se,oVo),e(Se,R1),e(R1,pfe),e(pfe,rVo),e(R1,tVo),e(R1,uG),e(uG,aVo),e(R1,nVo),e(Se,sVo),e(Se,B1),e(B1,_fe),e(_fe,lVo),e(B1,iVo),e(B1,pG),e(pG,dVo),e(B1,cVo),e(Se,mVo),e(Se,P1),e(P1,bfe),e(bfe,fVo),e(P1,gVo),e(P1,_G),e(_G,hVo),e(P1,uVo),e(Se,pVo),e(Se,$1),e($1,vfe),e(vfe,_Vo),e($1,bVo),e($1,bG),e(bG,vVo),e($1,FVo),e(Se,TVo),e(Se,I1),e(I1,Ffe),e(Ffe,MVo),e(I1,EVo),e(I1,vG),e(vG,CVo),e(I1,wVo),e(Je,AVo),e(Je,q1),e(q1,yVo),e(q1,Tfe),e(Tfe,LVo),e(q1,xVo),e(q1,Mfe),e(Mfe,kVo),e(Je,SVo),e(Je,Efe),e(Efe,RVo),e(Je,BVo),g(YA,Je,null),b(c,bBe,_),b(c,jd,_),e(jd,N1),e(N1,Cfe),g(KA,Cfe,null),e(jd,PVo),e(jd,wfe),e(wfe,$Vo),b(c,vBe,_),b(c,cr,_),g(ZA,cr,null),e(cr,IVo),e(cr,Dd),e(Dd,qVo),e(Dd,FG),e(FG,NVo),e(Dd,jVo),e(Dd,TG),e(TG,DVo),e(Dd,GVo),e(cr,OVo),e(cr,e0),e(e0,VVo),e(e0,Afe),e(Afe,XVo),e(e0,zVo),e(cr,QVo),e(cr,at),g(o0,at,null),e(at,WVo),e(at,yfe),e(yfe,HVo),e(at,UVo),e(at,Gd),e(Gd,JVo),e(Gd,Lfe),e(Lfe,YVo),e(Gd,KVo),e(Gd,MG),e(MG,ZVo),e(Gd,eXo),e(at,oXo),e(at,xfe),e(xfe,rXo),e(at,tXo),g(r0,at,null),e(cr,aXo),e(cr,Ye),g(t0,Ye,null),e(Ye,nXo),e(Ye,kfe),e(kfe,sXo),e(Ye,lXo),e(Ye,an),e(an,iXo),e(an,Sfe),e(Sfe,dXo),e(an,cXo),e(an,Rfe),e(Rfe,mXo),e(an,fXo),e(an,Bfe),e(Bfe,gXo),e(an,hXo),e(Ye,uXo),e(Ye,nn),e(nn,j1),e(j1,Pfe),e(Pfe,pXo),e(j1,_Xo),e(j1,EG),e(EG,bXo),e(j1,vXo),e(nn,FXo),e(nn,D1),e(D1,$fe),e($fe,TXo),e(D1,MXo),e(D1,CG),e(CG,EXo),e(D1,CXo),e(nn,wXo),e(nn,G1),e(G1,Ife),e(Ife,AXo),e(G1,yXo),e(G1,wG),e(wG,LXo),e(G1,xXo),e(nn,kXo),e(nn,O1),e(O1,qfe),e(qfe,SXo),e(O1,RXo),e(O1,AG),e(AG,BXo),e(O1,PXo),e(Ye,$Xo),e(Ye,V1),e(V1,IXo),e(V1,Nfe),e(Nfe,qXo),e(V1,NXo),e(V1,jfe),e(jfe,jXo),e(Ye,DXo),e(Ye,Dfe),e(Dfe,GXo),e(Ye,OXo),g(a0,Ye,null),b(c,FBe,_),b(c,Od,_),e(Od,X1),e(X1,Gfe),g(n0,Gfe,null),e(Od,VXo),e(Od,Ofe),e(Ofe,XXo),b(c,TBe,_),b(c,mr,_),g(s0,mr,null),e(mr,zXo),e(mr,Vd),e(Vd,QXo),e(Vd,yG),e(yG,WXo),e(Vd,HXo),e(Vd,LG),e(LG,UXo),e(Vd,JXo),e(mr,YXo),e(mr,l0),e(l0,KXo),e(l0,Vfe),e(Vfe,ZXo),e(l0,ezo),e(mr,ozo),e(mr,nt),g(i0,nt,null),e(nt,rzo),e(nt,Xfe),e(Xfe,tzo),e(nt,azo),e(nt,Xd),e(Xd,nzo),e(Xd,zfe),e(zfe,szo),e(Xd,lzo),e(Xd,xG),e(xG,izo),e(Xd,dzo),e(nt,czo),e(nt,Qfe),e(Qfe,mzo),e(nt,fzo),g(d0,nt,null),e(mr,gzo),e(mr,Ke),g(c0,Ke,null),e(Ke,hzo),e(Ke,Wfe),e(Wfe,uzo),e(Ke,pzo),e(Ke,sn),e(sn,_zo),e(sn,Hfe),e(Hfe,bzo),e(sn,vzo),e(sn,Ufe),e(Ufe,Fzo),e(sn,Tzo),e(sn,Jfe),e(Jfe,Mzo),e(sn,Ezo),e(Ke,Czo),e(Ke,Re),e(Re,z1),e(z1,Yfe),e(Yfe,wzo),e(z1,Azo),e(z1,kG),e(kG,yzo),e(z1,Lzo),e(Re,xzo),e(Re,Q1),e(Q1,Kfe),e(Kfe,kzo),e(Q1,Szo),e(Q1,SG),e(SG,Rzo),e(Q1,Bzo),e(Re,Pzo),e(Re,W1),e(W1,Zfe),e(Zfe,$zo),e(W1,Izo),e(W1,RG),e(RG,qzo),e(W1,Nzo),e(Re,jzo),e(Re,H1),e(H1,ege),e(ege,Dzo),e(H1,Gzo),e(H1,BG),e(BG,Ozo),e(H1,Vzo),e(Re,Xzo),e(Re,U1),e(U1,oge),e(oge,zzo),e(U1,Qzo),e(U1,PG),e(PG,Wzo),e(U1,Hzo),e(Re,Uzo),e(Re,J1),e(J1,rge),e(rge,Jzo),e(J1,Yzo),e(J1,$G),e($G,Kzo),e(J1,Zzo),e(Re,eQo),e(Re,Y1),e(Y1,tge),e(tge,oQo),e(Y1,rQo),e(Y1,IG),e(IG,tQo),e(Y1,aQo),e(Re,nQo),e(Re,K1),e(K1,age),e(age,sQo),e(K1,lQo),e(K1,qG),e(qG,iQo),e(K1,dQo),e(Ke,cQo),e(Ke,Z1),e(Z1,mQo),e(Z1,nge),e(nge,fQo),e(Z1,gQo),e(Z1,sge),e(sge,hQo),e(Ke,uQo),e(Ke,lge),e(lge,pQo),e(Ke,_Qo),g(m0,Ke,null),b(c,MBe,_),b(c,zd,_),e(zd,eT),e(eT,ige),g(f0,ige,null),e(zd,bQo),e(zd,dge),e(dge,vQo),b(c,EBe,_),b(c,fr,_),g(g0,fr,null),e(fr,FQo),e(fr,Qd),e(Qd,TQo),e(Qd,NG),e(NG,MQo),e(Qd,EQo),e(Qd,jG),e(jG,CQo),e(Qd,wQo),e(fr,AQo),e(fr,h0),e(h0,yQo),e(h0,cge),e(cge,LQo),e(h0,xQo),e(fr,kQo),e(fr,st),g(u0,st,null),e(st,SQo),e(st,mge),e(mge,RQo),e(st,BQo),e(st,Wd),e(Wd,PQo),e(Wd,fge),e(fge,$Qo),e(Wd,IQo),e(Wd,DG),e(DG,qQo),e(Wd,NQo),e(st,jQo),e(st,gge),e(gge,DQo),e(st,GQo),g(p0,st,null),e(fr,OQo),e(fr,Ze),g(_0,Ze,null),e(Ze,VQo),e(Ze,hge),e(hge,XQo),e(Ze,zQo),e(Ze,ln),e(ln,QQo),e(ln,uge),e(uge,WQo),e(ln,HQo),e(ln,pge),e(pge,UQo),e(ln,JQo),e(ln,_ge),e(_ge,YQo),e(ln,KQo),e(Ze,ZQo),e(Ze,b0),e(b0,oT),e(oT,bge),e(bge,eWo),e(oT,oWo),e(oT,GG),e(GG,rWo),e(oT,tWo),e(b0,aWo),e(b0,rT),e(rT,vge),e(vge,nWo),e(rT,sWo),e(rT,OG),e(OG,lWo),e(rT,iWo),e(Ze,dWo),e(Ze,tT),e(tT,cWo),e(tT,Fge),e(Fge,mWo),e(tT,fWo),e(tT,Tge),e(Tge,gWo),e(Ze,hWo),e(Ze,Mge),e(Mge,uWo),e(Ze,pWo),g(v0,Ze,null),b(c,CBe,_),b(c,Hd,_),e(Hd,aT),e(aT,Ege),g(F0,Ege,null),e(Hd,_Wo),e(Hd,Cge),e(Cge,bWo),b(c,wBe,_),b(c,gr,_),g(T0,gr,null),e(gr,vWo),e(gr,Ud),e(Ud,FWo),e(Ud,VG),e(VG,TWo),e(Ud,MWo),e(Ud,XG),e(XG,EWo),e(Ud,CWo),e(gr,wWo),e(gr,M0),e(M0,AWo),e(M0,wge),e(wge,yWo),e(M0,LWo),e(gr,xWo),e(gr,lt),g(E0,lt,null),e(lt,kWo),e(lt,Age),e(Age,SWo),e(lt,RWo),e(lt,Jd),e(Jd,BWo),e(Jd,yge),e(yge,PWo),e(Jd,$Wo),e(Jd,zG),e(zG,IWo),e(Jd,qWo),e(lt,NWo),e(lt,Lge),e(Lge,jWo),e(lt,DWo),g(C0,lt,null),e(gr,GWo),e(gr,eo),g(w0,eo,null),e(eo,OWo),e(eo,xge),e(xge,VWo),e(eo,XWo),e(eo,dn),e(dn,zWo),e(dn,kge),e(kge,QWo),e(dn,WWo),e(dn,Sge),e(Sge,HWo),e(dn,UWo),e(dn,Rge),e(Rge,JWo),e(dn,YWo),e(eo,KWo),e(eo,cn),e(cn,nT),e(nT,Bge),e(Bge,ZWo),e(nT,eHo),e(nT,QG),e(QG,oHo),e(nT,rHo),e(cn,tHo),e(cn,sT),e(sT,Pge),e(Pge,aHo),e(sT,nHo),e(sT,WG),e(WG,sHo),e(sT,lHo),e(cn,iHo),e(cn,lT),e(lT,$ge),e($ge,dHo),e(lT,cHo),e(lT,HG),e(HG,mHo),e(lT,fHo),e(cn,gHo),e(cn,iT),e(iT,Ige),e(Ige,hHo),e(iT,uHo),e(iT,UG),e(UG,pHo),e(iT,_Ho),e(eo,bHo),e(eo,dT),e(dT,vHo),e(dT,qge),e(qge,FHo),e(dT,THo),e(dT,Nge),e(Nge,MHo),e(eo,EHo),e(eo,jge),e(jge,CHo),e(eo,wHo),g(A0,eo,null),b(c,ABe,_),b(c,Yd,_),e(Yd,cT),e(cT,Dge),g(y0,Dge,null),e(Yd,AHo),e(Yd,Gge),e(Gge,yHo),b(c,yBe,_),b(c,hr,_),g(L0,hr,null),e(hr,LHo),e(hr,Kd),e(Kd,xHo),e(Kd,JG),e(JG,kHo),e(Kd,SHo),e(Kd,YG),e(YG,RHo),e(Kd,BHo),e(hr,PHo),e(hr,x0),e(x0,$Ho),e(x0,Oge),e(Oge,IHo),e(x0,qHo),e(hr,NHo),e(hr,it),g(k0,it,null),e(it,jHo),e(it,Vge),e(Vge,DHo),e(it,GHo),e(it,Zd),e(Zd,OHo),e(Zd,Xge),e(Xge,VHo),e(Zd,XHo),e(Zd,KG),e(KG,zHo),e(Zd,QHo),e(it,WHo),e(it,zge),e(zge,HHo),e(it,UHo),g(S0,it,null),e(hr,JHo),e(hr,oo),g(R0,oo,null),e(oo,YHo),e(oo,Qge),e(Qge,KHo),e(oo,ZHo),e(oo,mn),e(mn,eUo),e(mn,Wge),e(Wge,oUo),e(mn,rUo),e(mn,Hge),e(Hge,tUo),e(mn,aUo),e(mn,Uge),e(Uge,nUo),e(mn,sUo),e(oo,lUo),e(oo,ec),e(ec,mT),e(mT,Jge),e(Jge,iUo),e(mT,dUo),e(mT,ZG),e(ZG,cUo),e(mT,mUo),e(ec,fUo),e(ec,fT),e(fT,Yge),e(Yge,gUo),e(fT,hUo),e(fT,eO),e(eO,uUo),e(fT,pUo),e(ec,_Uo),e(ec,gT),e(gT,Kge),e(Kge,bUo),e(gT,vUo),e(gT,oO),e(oO,FUo),e(gT,TUo),e(oo,MUo),e(oo,hT),e(hT,EUo),e(hT,Zge),e(Zge,CUo),e(hT,wUo),e(hT,ehe),e(ehe,AUo),e(oo,yUo),e(oo,ohe),e(ohe,LUo),e(oo,xUo),g(B0,oo,null),b(c,LBe,_),b(c,oc,_),e(oc,uT),e(uT,rhe),g(P0,rhe,null),e(oc,kUo),e(oc,the),e(the,SUo),b(c,xBe,_),b(c,ur,_),g($0,ur,null),e(ur,RUo),e(ur,rc),e(rc,BUo),e(rc,rO),e(rO,PUo),e(rc,$Uo),e(rc,tO),e(tO,IUo),e(rc,qUo),e(ur,NUo),e(ur,I0),e(I0,jUo),e(I0,ahe),e(ahe,DUo),e(I0,GUo),e(ur,OUo),e(ur,dt),g(q0,dt,null),e(dt,VUo),e(dt,nhe),e(nhe,XUo),e(dt,zUo),e(dt,tc),e(tc,QUo),e(tc,she),e(she,WUo),e(tc,HUo),e(tc,aO),e(aO,UUo),e(tc,JUo),e(dt,YUo),e(dt,lhe),e(lhe,KUo),e(dt,ZUo),g(N0,dt,null),e(ur,eJo),e(ur,ro),g(j0,ro,null),e(ro,oJo),e(ro,ihe),e(ihe,rJo),e(ro,tJo),e(ro,fn),e(fn,aJo),e(fn,dhe),e(dhe,nJo),e(fn,sJo),e(fn,che),e(che,lJo),e(fn,iJo),e(fn,mhe),e(mhe,dJo),e(fn,cJo),e(ro,mJo),e(ro,fhe),e(fhe,pT),e(pT,ghe),e(ghe,fJo),e(pT,gJo),e(pT,nO),e(nO,hJo),e(pT,uJo),e(ro,pJo),e(ro,_T),e(_T,_Jo),e(_T,hhe),e(hhe,bJo),e(_T,vJo),e(_T,uhe),e(uhe,FJo),e(ro,TJo),e(ro,phe),e(phe,MJo),e(ro,EJo),g(D0,ro,null),b(c,kBe,_),b(c,ac,_),e(ac,bT),e(bT,_he),g(G0,_he,null),e(ac,CJo),e(ac,bhe),e(bhe,wJo),b(c,SBe,_),b(c,pr,_),g(O0,pr,null),e(pr,AJo),e(pr,nc),e(nc,yJo),e(nc,sO),e(sO,LJo),e(nc,xJo),e(nc,lO),e(lO,kJo),e(nc,SJo),e(pr,RJo),e(pr,V0),e(V0,BJo),e(V0,vhe),e(vhe,PJo),e(V0,$Jo),e(pr,IJo),e(pr,ct),g(X0,ct,null),e(ct,qJo),e(ct,Fhe),e(Fhe,NJo),e(ct,jJo),e(ct,sc),e(sc,DJo),e(sc,The),e(The,GJo),e(sc,OJo),e(sc,iO),e(iO,VJo),e(sc,XJo),e(ct,zJo),e(ct,Mhe),e(Mhe,QJo),e(ct,WJo),g(z0,ct,null),e(pr,HJo),e(pr,to),g(Q0,to,null),e(to,UJo),e(to,Ehe),e(Ehe,JJo),e(to,YJo),e(to,gn),e(gn,KJo),e(gn,Che),e(Che,ZJo),e(gn,eYo),e(gn,whe),e(whe,oYo),e(gn,rYo),e(gn,Ahe),e(Ahe,tYo),e(gn,aYo),e(to,nYo),e(to,yhe),e(yhe,vT),e(vT,Lhe),e(Lhe,sYo),e(vT,lYo),e(vT,dO),e(dO,iYo),e(vT,dYo),e(to,cYo),e(to,FT),e(FT,mYo),e(FT,xhe),e(xhe,fYo),e(FT,gYo),e(FT,khe),e(khe,hYo),e(to,uYo),e(to,She),e(She,pYo),e(to,_Yo),g(W0,to,null),b(c,RBe,_),b(c,lc,_),e(lc,TT),e(TT,Rhe),g(H0,Rhe,null),e(lc,bYo),e(lc,Bhe),e(Bhe,vYo),b(c,BBe,_),b(c,_r,_),g(U0,_r,null),e(_r,FYo),e(_r,ic),e(ic,TYo),e(ic,cO),e(cO,MYo),e(ic,EYo),e(ic,mO),e(mO,CYo),e(ic,wYo),e(_r,AYo),e(_r,J0),e(J0,yYo),e(J0,Phe),e(Phe,LYo),e(J0,xYo),e(_r,kYo),e(_r,mt),g(Y0,mt,null),e(mt,SYo),e(mt,$he),e($he,RYo),e(mt,BYo),e(mt,dc),e(dc,PYo),e(dc,Ihe),e(Ihe,$Yo),e(dc,IYo),e(dc,fO),e(fO,qYo),e(dc,NYo),e(mt,jYo),e(mt,qhe),e(qhe,DYo),e(mt,GYo),g(K0,mt,null),e(_r,OYo),e(_r,ao),g(Z0,ao,null),e(ao,VYo),e(ao,Nhe),e(Nhe,XYo),e(ao,zYo),e(ao,hn),e(hn,QYo),e(hn,jhe),e(jhe,WYo),e(hn,HYo),e(hn,Dhe),e(Dhe,UYo),e(hn,JYo),e(hn,Ghe),e(Ghe,YYo),e(hn,KYo),e(ao,ZYo),e(ao,un),e(un,MT),e(MT,Ohe),e(Ohe,eKo),e(MT,oKo),e(MT,gO),e(gO,rKo),e(MT,tKo),e(un,aKo),e(un,ET),e(ET,Vhe),e(Vhe,nKo),e(ET,sKo),e(ET,hO),e(hO,lKo),e(ET,iKo),e(un,dKo),e(un,CT),e(CT,Xhe),e(Xhe,cKo),e(CT,mKo),e(CT,uO),e(uO,fKo),e(CT,gKo),e(un,hKo),e(un,wT),e(wT,zhe),e(zhe,uKo),e(wT,pKo),e(wT,pO),e(pO,_Ko),e(wT,bKo),e(ao,vKo),e(ao,AT),e(AT,FKo),e(AT,Qhe),e(Qhe,TKo),e(AT,MKo),e(AT,Whe),e(Whe,EKo),e(ao,CKo),e(ao,Hhe),e(Hhe,wKo),e(ao,AKo),g(ey,ao,null),b(c,PBe,_),b(c,cc,_),e(cc,yT),e(yT,Uhe),g(oy,Uhe,null),e(cc,yKo),e(cc,Jhe),e(Jhe,LKo),b(c,$Be,_),b(c,br,_),g(ry,br,null),e(br,xKo),e(br,mc),e(mc,kKo),e(mc,_O),e(_O,SKo),e(mc,RKo),e(mc,bO),e(bO,BKo),e(mc,PKo),e(br,$Ko),e(br,ty),e(ty,IKo),e(ty,Yhe),e(Yhe,qKo),e(ty,NKo),e(br,jKo),e(br,ft),g(ay,ft,null),e(ft,DKo),e(ft,Khe),e(Khe,GKo),e(ft,OKo),e(ft,fc),e(fc,VKo),e(fc,Zhe),e(Zhe,XKo),e(fc,zKo),e(fc,vO),e(vO,QKo),e(fc,WKo),e(ft,HKo),e(ft,eue),e(eue,UKo),e(ft,JKo),g(ny,ft,null),e(br,YKo),e(br,no),g(sy,no,null),e(no,KKo),e(no,oue),e(oue,ZKo),e(no,eZo),e(no,pn),e(pn,oZo),e(pn,rue),e(rue,rZo),e(pn,tZo),e(pn,tue),e(tue,aZo),e(pn,nZo),e(pn,aue),e(aue,sZo),e(pn,lZo),e(no,iZo),e(no,nue),e(nue,LT),e(LT,sue),e(sue,dZo),e(LT,cZo),e(LT,FO),e(FO,mZo),e(LT,fZo),e(no,gZo),e(no,xT),e(xT,hZo),e(xT,lue),e(lue,uZo),e(xT,pZo),e(xT,iue),e(iue,_Zo),e(no,bZo),e(no,due),e(due,vZo),e(no,FZo),g(ly,no,null),b(c,IBe,_),b(c,gc,_),e(gc,kT),e(kT,cue),g(iy,cue,null),e(gc,TZo),e(gc,mue),e(mue,MZo),b(c,qBe,_),b(c,vr,_),g(dy,vr,null),e(vr,EZo),e(vr,hc),e(hc,CZo),e(hc,TO),e(TO,wZo),e(hc,AZo),e(hc,MO),e(MO,yZo),e(hc,LZo),e(vr,xZo),e(vr,cy),e(cy,kZo),e(cy,fue),e(fue,SZo),e(cy,RZo),e(vr,BZo),e(vr,gt),g(my,gt,null),e(gt,PZo),e(gt,gue),e(gue,$Zo),e(gt,IZo),e(gt,uc),e(uc,qZo),e(uc,hue),e(hue,NZo),e(uc,jZo),e(uc,EO),e(EO,DZo),e(uc,GZo),e(gt,OZo),e(gt,uue),e(uue,VZo),e(gt,XZo),g(fy,gt,null),e(vr,zZo),e(vr,ho),g(gy,ho,null),e(ho,QZo),e(ho,pue),e(pue,WZo),e(ho,HZo),e(ho,_n),e(_n,UZo),e(_n,_ue),e(_ue,JZo),e(_n,YZo),e(_n,bue),e(bue,KZo),e(_n,ZZo),e(_n,vue),e(vue,eer),e(_n,oer),e(ho,rer),e(ho,x),e(x,ST),e(ST,Fue),e(Fue,ter),e(ST,aer),e(ST,CO),e(CO,ner),e(ST,ser),e(x,ler),e(x,RT),e(RT,Tue),e(Tue,ier),e(RT,der),e(RT,wO),e(wO,cer),e(RT,mer),e(x,fer),e(x,BT),e(BT,Mue),e(Mue,ger),e(BT,her),e(BT,AO),e(AO,uer),e(BT,per),e(x,_er),e(x,PT),e(PT,Eue),e(Eue,ber),e(PT,ver),e(PT,yO),e(yO,Fer),e(PT,Ter),e(x,Mer),e(x,$T),e($T,Cue),e(Cue,Eer),e($T,Cer),e($T,LO),e(LO,wer),e($T,Aer),e(x,yer),e(x,IT),e(IT,wue),e(wue,Ler),e(IT,xer),e(IT,xO),e(xO,ker),e(IT,Ser),e(x,Rer),e(x,qT),e(qT,Aue),e(Aue,Ber),e(qT,Per),e(qT,kO),e(kO,$er),e(qT,Ier),e(x,qer),e(x,NT),e(NT,yue),e(yue,Ner),e(NT,jer),e(NT,SO),e(SO,Der),e(NT,Ger),e(x,Oer),e(x,jT),e(jT,Lue),e(Lue,Ver),e(jT,Xer),e(jT,RO),e(RO,zer),e(jT,Qer),e(x,Wer),e(x,DT),e(DT,xue),e(xue,Her),e(DT,Uer),e(DT,BO),e(BO,Jer),e(DT,Yer),e(x,Ker),e(x,GT),e(GT,kue),e(kue,Zer),e(GT,eor),e(GT,PO),e(PO,oor),e(GT,ror),e(x,tor),e(x,OT),e(OT,Sue),e(Sue,aor),e(OT,nor),e(OT,$O),e($O,sor),e(OT,lor),e(x,ior),e(x,VT),e(VT,Rue),e(Rue,dor),e(VT,cor),e(VT,IO),e(IO,mor),e(VT,gor),e(x,hor),e(x,XT),e(XT,Bue),e(Bue,uor),e(XT,por),e(XT,qO),e(qO,_or),e(XT,bor),e(x,vor),e(x,zT),e(zT,Pue),e(Pue,For),e(zT,Tor),e(zT,NO),e(NO,Mor),e(zT,Eor),e(x,Cor),e(x,QT),e(QT,$ue),e($ue,wor),e(QT,Aor),e(QT,jO),e(jO,yor),e(QT,Lor),e(x,xor),e(x,Os),e(Os,Iue),e(Iue,kor),e(Os,Sor),e(Os,DO),e(DO,Ror),e(Os,Bor),e(Os,GO),e(GO,Por),e(Os,$or),e(x,Ior),e(x,WT),e(WT,que),e(que,qor),e(WT,Nor),e(WT,OO),e(OO,jor),e(WT,Dor),e(x,Gor),e(x,HT),e(HT,Nue),e(Nue,Oor),e(HT,Vor),e(HT,VO),e(VO,Xor),e(HT,zor),e(x,Qor),e(x,UT),e(UT,jue),e(jue,Wor),e(UT,Hor),e(UT,XO),e(XO,Uor),e(UT,Jor),e(x,Yor),e(x,JT),e(JT,Due),e(Due,Kor),e(JT,Zor),e(JT,zO),e(zO,err),e(JT,orr),e(x,rrr),e(x,YT),e(YT,Gue),e(Gue,trr),e(YT,arr),e(YT,QO),e(QO,nrr),e(YT,srr),e(x,lrr),e(x,KT),e(KT,Oue),e(Oue,irr),e(KT,drr),e(KT,WO),e(WO,crr),e(KT,mrr),e(x,frr),e(x,ZT),e(ZT,Vue),e(Vue,grr),e(ZT,hrr),e(ZT,HO),e(HO,urr),e(ZT,prr),e(x,_rr),e(x,eM),e(eM,Xue),e(Xue,brr),e(eM,vrr),e(eM,UO),e(UO,Frr),e(eM,Trr),e(x,Mrr),e(x,oM),e(oM,zue),e(zue,Err),e(oM,Crr),e(oM,JO),e(JO,wrr),e(oM,Arr),e(x,yrr),e(x,rM),e(rM,Que),e(Que,Lrr),e(rM,xrr),e(rM,YO),e(YO,krr),e(rM,Srr),e(x,Rrr),e(x,tM),e(tM,Wue),e(Wue,Brr),e(tM,Prr),e(tM,KO),e(KO,$rr),e(tM,Irr),e(x,qrr),e(x,aM),e(aM,Hue),e(Hue,Nrr),e(aM,jrr),e(aM,ZO),e(ZO,Drr),e(aM,Grr),e(x,Orr),e(x,nM),e(nM,Uue),e(Uue,Vrr),e(nM,Xrr),e(nM,eV),e(eV,zrr),e(nM,Qrr),e(x,Wrr),e(x,sM),e(sM,Jue),e(Jue,Hrr),e(sM,Urr),e(sM,oV),e(oV,Jrr),e(sM,Yrr),e(x,Krr),e(x,lM),e(lM,Yue),e(Yue,Zrr),e(lM,etr),e(lM,rV),e(rV,otr),e(lM,rtr),e(x,ttr),e(x,iM),e(iM,Kue),e(Kue,atr),e(iM,ntr),e(iM,tV),e(tV,str),e(iM,ltr),e(x,itr),e(x,dM),e(dM,Zue),e(Zue,dtr),e(dM,ctr),e(dM,aV),e(aV,mtr),e(dM,ftr),e(x,gtr),e(x,cM),e(cM,epe),e(epe,htr),e(cM,utr),e(cM,nV),e(nV,ptr),e(cM,_tr),e(x,btr),e(x,mM),e(mM,ope),e(ope,vtr),e(mM,Ftr),e(mM,sV),e(sV,Ttr),e(mM,Mtr),e(x,Etr),e(x,fM),e(fM,rpe),e(rpe,Ctr),e(fM,wtr),e(fM,lV),e(lV,Atr),e(fM,ytr),e(x,Ltr),e(x,gM),e(gM,tpe),e(tpe,xtr),e(gM,ktr),e(gM,iV),e(iV,Str),e(gM,Rtr),e(x,Btr),e(x,hM),e(hM,ape),e(ape,Ptr),e(hM,$tr),e(hM,dV),e(dV,Itr),e(hM,qtr),e(x,Ntr),e(x,uM),e(uM,npe),e(npe,jtr),e(uM,Dtr),e(uM,cV),e(cV,Gtr),e(uM,Otr),e(x,Vtr),e(x,pM),e(pM,spe),e(spe,Xtr),e(pM,ztr),e(pM,mV),e(mV,Qtr),e(pM,Wtr),e(x,Htr),e(x,_M),e(_M,lpe),e(lpe,Utr),e(_M,Jtr),e(_M,fV),e(fV,Ytr),e(_M,Ktr),e(x,Ztr),e(x,bM),e(bM,ipe),e(ipe,ear),e(bM,oar),e(bM,gV),e(gV,rar),e(bM,tar),e(x,aar),e(x,vM),e(vM,dpe),e(dpe,nar),e(vM,sar),e(vM,hV),e(hV,lar),e(vM,iar),e(ho,dar),e(ho,cpe),e(cpe,car),e(ho,mar),g(hy,ho,null),b(c,NBe,_),b(c,pc,_),e(pc,FM),e(FM,mpe),g(uy,mpe,null),e(pc,far),e(pc,fpe),e(fpe,gar),b(c,jBe,_),b(c,Fr,_),g(py,Fr,null),e(Fr,har),e(Fr,_c),e(_c,uar),e(_c,uV),e(uV,par),e(_c,_ar),e(_c,pV),e(pV,bar),e(_c,Far),e(Fr,Tar),e(Fr,_y),e(_y,Mar),e(_y,gpe),e(gpe,Ear),e(_y,Car),e(Fr,war),e(Fr,ht),g(by,ht,null),e(ht,Aar),e(ht,hpe),e(hpe,yar),e(ht,Lar),e(ht,bc),e(bc,xar),e(bc,upe),e(upe,kar),e(bc,Sar),e(bc,_V),e(_V,Rar),e(bc,Bar),e(ht,Par),e(ht,ppe),e(ppe,$ar),e(ht,Iar),g(vy,ht,null),e(Fr,qar),e(Fr,uo),g(Fy,uo,null),e(uo,Nar),e(uo,_pe),e(_pe,jar),e(uo,Dar),e(uo,bn),e(bn,Gar),e(bn,bpe),e(bpe,Oar),e(bn,Var),e(bn,vpe),e(vpe,Xar),e(bn,zar),e(bn,Fpe),e(Fpe,Qar),e(bn,War),e(uo,Har),e(uo,H),e(H,TM),e(TM,Tpe),e(Tpe,Uar),e(TM,Jar),e(TM,bV),e(bV,Yar),e(TM,Kar),e(H,Zar),e(H,MM),e(MM,Mpe),e(Mpe,enr),e(MM,onr),e(MM,vV),e(vV,rnr),e(MM,tnr),e(H,anr),e(H,EM),e(EM,Epe),e(Epe,nnr),e(EM,snr),e(EM,FV),e(FV,lnr),e(EM,inr),e(H,dnr),e(H,CM),e(CM,Cpe),e(Cpe,cnr),e(CM,mnr),e(CM,TV),e(TV,fnr),e(CM,gnr),e(H,hnr),e(H,wM),e(wM,wpe),e(wpe,unr),e(wM,pnr),e(wM,MV),e(MV,_nr),e(wM,bnr),e(H,vnr),e(H,AM),e(AM,Ape),e(Ape,Fnr),e(AM,Tnr),e(AM,EV),e(EV,Mnr),e(AM,Enr),e(H,Cnr),e(H,yM),e(yM,ype),e(ype,wnr),e(yM,Anr),e(yM,CV),e(CV,ynr),e(yM,Lnr),e(H,xnr),e(H,LM),e(LM,Lpe),e(Lpe,knr),e(LM,Snr),e(LM,wV),e(wV,Rnr),e(LM,Bnr),e(H,Pnr),e(H,xM),e(xM,xpe),e(xpe,$nr),e(xM,Inr),e(xM,AV),e(AV,qnr),e(xM,Nnr),e(H,jnr),e(H,kM),e(kM,kpe),e(kpe,Dnr),e(kM,Gnr),e(kM,yV),e(yV,Onr),e(kM,Vnr),e(H,Xnr),e(H,SM),e(SM,Spe),e(Spe,znr),e(SM,Qnr),e(SM,LV),e(LV,Wnr),e(SM,Hnr),e(H,Unr),e(H,RM),e(RM,Rpe),e(Rpe,Jnr),e(RM,Ynr),e(RM,xV),e(xV,Knr),e(RM,Znr),e(H,esr),e(H,BM),e(BM,Bpe),e(Bpe,osr),e(BM,rsr),e(BM,kV),e(kV,tsr),e(BM,asr),e(H,nsr),e(H,PM),e(PM,Ppe),e(Ppe,ssr),e(PM,lsr),e(PM,SV),e(SV,isr),e(PM,dsr),e(H,csr),e(H,$M),e($M,$pe),e($pe,msr),e($M,fsr),e($M,RV),e(RV,gsr),e($M,hsr),e(H,usr),e(H,IM),e(IM,Ipe),e(Ipe,psr),e(IM,_sr),e(IM,BV),e(BV,bsr),e(IM,vsr),e(H,Fsr),e(H,qM),e(qM,qpe),e(qpe,Tsr),e(qM,Msr),e(qM,PV),e(PV,Esr),e(qM,Csr),e(H,wsr),e(H,NM),e(NM,Npe),e(Npe,Asr),e(NM,ysr),e(NM,$V),e($V,Lsr),e(NM,xsr),e(H,ksr),e(H,jM),e(jM,jpe),e(jpe,Ssr),e(jM,Rsr),e(jM,IV),e(IV,Bsr),e(jM,Psr),e(H,$sr),e(H,DM),e(DM,Dpe),e(Dpe,Isr),e(DM,qsr),e(DM,qV),e(qV,Nsr),e(DM,jsr),e(H,Dsr),e(H,GM),e(GM,Gpe),e(Gpe,Gsr),e(GM,Osr),e(GM,NV),e(NV,Vsr),e(GM,Xsr),e(H,zsr),e(H,OM),e(OM,Ope),e(Ope,Qsr),e(OM,Wsr),e(OM,jV),e(jV,Hsr),e(OM,Usr),e(H,Jsr),e(H,VM),e(VM,Vpe),e(Vpe,Ysr),e(VM,Ksr),e(VM,DV),e(DV,Zsr),e(VM,elr),e(uo,olr),e(uo,Xpe),e(Xpe,rlr),e(uo,tlr),g(Ty,uo,null),b(c,DBe,_),b(c,vc,_),e(vc,XM),e(XM,zpe),g(My,zpe,null),e(vc,alr),e(vc,Qpe),e(Qpe,nlr),b(c,GBe,_),b(c,Tr,_),g(Ey,Tr,null),e(Tr,slr),e(Tr,Fc),e(Fc,llr),e(Fc,GV),e(GV,ilr),e(Fc,dlr),e(Fc,OV),e(OV,clr),e(Fc,mlr),e(Tr,flr),e(Tr,Cy),e(Cy,glr),e(Cy,Wpe),e(Wpe,hlr),e(Cy,ulr),e(Tr,plr),e(Tr,ut),g(wy,ut,null),e(ut,_lr),e(ut,Hpe),e(Hpe,blr),e(ut,vlr),e(ut,Tc),e(Tc,Flr),e(Tc,Upe),e(Upe,Tlr),e(Tc,Mlr),e(Tc,VV),e(VV,Elr),e(Tc,Clr),e(ut,wlr),e(ut,Jpe),e(Jpe,Alr),e(ut,ylr),g(Ay,ut,null),e(Tr,Llr),e(Tr,po),g(yy,po,null),e(po,xlr),e(po,Ype),e(Ype,klr),e(po,Slr),e(po,vn),e(vn,Rlr),e(vn,Kpe),e(Kpe,Blr),e(vn,Plr),e(vn,Zpe),e(Zpe,$lr),e(vn,Ilr),e(vn,e_e),e(e_e,qlr),e(vn,Nlr),e(po,jlr),e(po,me),e(me,zM),e(zM,o_e),e(o_e,Dlr),e(zM,Glr),e(zM,XV),e(XV,Olr),e(zM,Vlr),e(me,Xlr),e(me,QM),e(QM,r_e),e(r_e,zlr),e(QM,Qlr),e(QM,zV),e(zV,Wlr),e(QM,Hlr),e(me,Ulr),e(me,WM),e(WM,t_e),e(t_e,Jlr),e(WM,Ylr),e(WM,QV),e(QV,Klr),e(WM,Zlr),e(me,eir),e(me,HM),e(HM,a_e),e(a_e,oir),e(HM,rir),e(HM,WV),e(WV,tir),e(HM,air),e(me,nir),e(me,UM),e(UM,n_e),e(n_e,sir),e(UM,lir),e(UM,HV),e(HV,iir),e(UM,dir),e(me,cir),e(me,JM),e(JM,s_e),e(s_e,mir),e(JM,fir),e(JM,UV),e(UV,gir),e(JM,hir),e(me,uir),e(me,YM),e(YM,l_e),e(l_e,pir),e(YM,_ir),e(YM,JV),e(JV,bir),e(YM,vir),e(me,Fir),e(me,KM),e(KM,i_e),e(i_e,Tir),e(KM,Mir),e(KM,YV),e(YV,Eir),e(KM,Cir),e(me,wir),e(me,ZM),e(ZM,d_e),e(d_e,Air),e(ZM,yir),e(ZM,KV),e(KV,Lir),e(ZM,xir),e(me,kir),e(me,e4),e(e4,c_e),e(c_e,Sir),e(e4,Rir),e(e4,ZV),e(ZV,Bir),e(e4,Pir),e(me,$ir),e(me,o4),e(o4,m_e),e(m_e,Iir),e(o4,qir),e(o4,eX),e(eX,Nir),e(o4,jir),e(me,Dir),e(me,r4),e(r4,f_e),e(f_e,Gir),e(r4,Oir),e(r4,oX),e(oX,Vir),e(r4,Xir),e(po,zir),e(po,g_e),e(g_e,Qir),e(po,Wir),g(Ly,po,null),b(c,OBe,_),b(c,Mc,_),e(Mc,t4),e(t4,h_e),g(xy,h_e,null),e(Mc,Hir),e(Mc,u_e),e(u_e,Uir),b(c,VBe,_),b(c,Mr,_),g(ky,Mr,null),e(Mr,Jir),e(Mr,Ec),e(Ec,Yir),e(Ec,rX),e(rX,Kir),e(Ec,Zir),e(Ec,tX),e(tX,edr),e(Ec,odr),e(Mr,rdr),e(Mr,Sy),e(Sy,tdr),e(Sy,p_e),e(p_e,adr),e(Sy,ndr),e(Mr,sdr),e(Mr,pt),g(Ry,pt,null),e(pt,ldr),e(pt,__e),e(__e,idr),e(pt,ddr),e(pt,Cc),e(Cc,cdr),e(Cc,b_e),e(b_e,mdr),e(Cc,fdr),e(Cc,aX),e(aX,gdr),e(Cc,hdr),e(pt,udr),e(pt,v_e),e(v_e,pdr),e(pt,_dr),g(By,pt,null),e(Mr,bdr),e(Mr,_o),g(Py,_o,null),e(_o,vdr),e(_o,F_e),e(F_e,Fdr),e(_o,Tdr),e(_o,Fn),e(Fn,Mdr),e(Fn,T_e),e(T_e,Edr),e(Fn,Cdr),e(Fn,M_e),e(M_e,wdr),e(Fn,Adr),e(Fn,E_e),e(E_e,ydr),e(Fn,Ldr),e(_o,xdr),e(_o,$y),e($y,a4),e(a4,C_e),e(C_e,kdr),e(a4,Sdr),e(a4,nX),e(nX,Rdr),e(a4,Bdr),e($y,Pdr),e($y,n4),e(n4,w_e),e(w_e,$dr),e(n4,Idr),e(n4,sX),e(sX,qdr),e(n4,Ndr),e(_o,jdr),e(_o,A_e),e(A_e,Ddr),e(_o,Gdr),g(Iy,_o,null),b(c,XBe,_),b(c,wc,_),e(wc,s4),e(s4,y_e),g(qy,y_e,null),e(wc,Odr),e(wc,L_e),e(L_e,Vdr),b(c,zBe,_),b(c,Er,_),g(Ny,Er,null),e(Er,Xdr),e(Er,Ac),e(Ac,zdr),e(Ac,lX),e(lX,Qdr),e(Ac,Wdr),e(Ac,iX),e(iX,Hdr),e(Ac,Udr),e(Er,Jdr),e(Er,jy),e(jy,Ydr),e(jy,x_e),e(x_e,Kdr),e(jy,Zdr),e(Er,ecr),e(Er,_t),g(Dy,_t,null),e(_t,ocr),e(_t,k_e),e(k_e,rcr),e(_t,tcr),e(_t,yc),e(yc,acr),e(yc,S_e),e(S_e,ncr),e(yc,scr),e(yc,dX),e(dX,lcr),e(yc,icr),e(_t,dcr),e(_t,R_e),e(R_e,ccr),e(_t,mcr),g(Gy,_t,null),e(Er,fcr),e(Er,bo),g(Oy,bo,null),e(bo,gcr),e(bo,B_e),e(B_e,hcr),e(bo,ucr),e(bo,Tn),e(Tn,pcr),e(Tn,P_e),e(P_e,_cr),e(Tn,bcr),e(Tn,$_e),e($_e,vcr),e(Tn,Fcr),e(Tn,I_e),e(I_e,Tcr),e(Tn,Mcr),e(bo,Ecr),e(bo,J),e(J,l4),e(l4,q_e),e(q_e,Ccr),e(l4,wcr),e(l4,cX),e(cX,Acr),e(l4,ycr),e(J,Lcr),e(J,i4),e(i4,N_e),e(N_e,xcr),e(i4,kcr),e(i4,mX),e(mX,Scr),e(i4,Rcr),e(J,Bcr),e(J,d4),e(d4,j_e),e(j_e,Pcr),e(d4,$cr),e(d4,fX),e(fX,Icr),e(d4,qcr),e(J,Ncr),e(J,c4),e(c4,D_e),e(D_e,jcr),e(c4,Dcr),e(c4,gX),e(gX,Gcr),e(c4,Ocr),e(J,Vcr),e(J,m4),e(m4,G_e),e(G_e,Xcr),e(m4,zcr),e(m4,hX),e(hX,Qcr),e(m4,Wcr),e(J,Hcr),e(J,f4),e(f4,O_e),e(O_e,Ucr),e(f4,Jcr),e(f4,uX),e(uX,Ycr),e(f4,Kcr),e(J,Zcr),e(J,g4),e(g4,V_e),e(V_e,emr),e(g4,omr),e(g4,pX),e(pX,rmr),e(g4,tmr),e(J,amr),e(J,h4),e(h4,X_e),e(X_e,nmr),e(h4,smr),e(h4,_X),e(_X,lmr),e(h4,imr),e(J,dmr),e(J,u4),e(u4,z_e),e(z_e,cmr),e(u4,mmr),e(u4,bX),e(bX,fmr),e(u4,gmr),e(J,hmr),e(J,p4),e(p4,Q_e),e(Q_e,umr),e(p4,pmr),e(p4,vX),e(vX,_mr),e(p4,bmr),e(J,vmr),e(J,_4),e(_4,W_e),e(W_e,Fmr),e(_4,Tmr),e(_4,FX),e(FX,Mmr),e(_4,Emr),e(J,Cmr),e(J,b4),e(b4,H_e),e(H_e,wmr),e(b4,Amr),e(b4,TX),e(TX,ymr),e(b4,Lmr),e(J,xmr),e(J,v4),e(v4,U_e),e(U_e,kmr),e(v4,Smr),e(v4,MX),e(MX,Rmr),e(v4,Bmr),e(J,Pmr),e(J,F4),e(F4,J_e),e(J_e,$mr),e(F4,Imr),e(F4,EX),e(EX,qmr),e(F4,Nmr),e(J,jmr),e(J,T4),e(T4,Y_e),e(Y_e,Dmr),e(T4,Gmr),e(T4,CX),e(CX,Omr),e(T4,Vmr),e(J,Xmr),e(J,M4),e(M4,K_e),e(K_e,zmr),e(M4,Qmr),e(M4,wX),e(wX,Wmr),e(M4,Hmr),e(J,Umr),e(J,E4),e(E4,Z_e),e(Z_e,Jmr),e(E4,Ymr),e(E4,AX),e(AX,Kmr),e(E4,Zmr),e(J,efr),e(J,C4),e(C4,ebe),e(ebe,ofr),e(C4,rfr),e(C4,yX),e(yX,tfr),e(C4,afr),e(J,nfr),e(J,w4),e(w4,obe),e(obe,sfr),e(w4,lfr),e(w4,LX),e(LX,ifr),e(w4,dfr),e(J,cfr),e(J,A4),e(A4,rbe),e(rbe,mfr),e(A4,ffr),e(A4,xX),e(xX,gfr),e(A4,hfr),e(bo,ufr),e(bo,tbe),e(tbe,pfr),e(bo,_fr),g(Vy,bo,null),b(c,QBe,_),b(c,Lc,_),e(Lc,y4),e(y4,abe),g(Xy,abe,null),e(Lc,bfr),e(Lc,nbe),e(nbe,vfr),b(c,WBe,_),b(c,Cr,_),g(zy,Cr,null),e(Cr,Ffr),e(Cr,xc),e(xc,Tfr),e(xc,kX),e(kX,Mfr),e(xc,Efr),e(xc,SX),e(SX,Cfr),e(xc,wfr),e(Cr,Afr),e(Cr,Qy),e(Qy,yfr),e(Qy,sbe),e(sbe,Lfr),e(Qy,xfr),e(Cr,kfr),e(Cr,bt),g(Wy,bt,null),e(bt,Sfr),e(bt,lbe),e(lbe,Rfr),e(bt,Bfr),e(bt,kc),e(kc,Pfr),e(kc,ibe),e(ibe,$fr),e(kc,Ifr),e(kc,RX),e(RX,qfr),e(kc,Nfr),e(bt,jfr),e(bt,dbe),e(dbe,Dfr),e(bt,Gfr),g(Hy,bt,null),e(Cr,Ofr),e(Cr,vo),g(Uy,vo,null),e(vo,Vfr),e(vo,cbe),e(cbe,Xfr),e(vo,zfr),e(vo,Mn),e(Mn,Qfr),e(Mn,mbe),e(mbe,Wfr),e(Mn,Hfr),e(Mn,fbe),e(fbe,Ufr),e(Mn,Jfr),e(Mn,gbe),e(gbe,Yfr),e(Mn,Kfr),e(vo,Zfr),e(vo,be),e(be,L4),e(L4,hbe),e(hbe,egr),e(L4,ogr),e(L4,BX),e(BX,rgr),e(L4,tgr),e(be,agr),e(be,x4),e(x4,ube),e(ube,ngr),e(x4,sgr),e(x4,PX),e(PX,lgr),e(x4,igr),e(be,dgr),e(be,k4),e(k4,pbe),e(pbe,cgr),e(k4,mgr),e(k4,$X),e($X,fgr),e(k4,ggr),e(be,hgr),e(be,S4),e(S4,_be),e(_be,ugr),e(S4,pgr),e(S4,IX),e(IX,_gr),e(S4,bgr),e(be,vgr),e(be,R4),e(R4,bbe),e(bbe,Fgr),e(R4,Tgr),e(R4,qX),e(qX,Mgr),e(R4,Egr),e(be,Cgr),e(be,B4),e(B4,vbe),e(vbe,wgr),e(B4,Agr),e(B4,NX),e(NX,ygr),e(B4,Lgr),e(be,xgr),e(be,P4),e(P4,Fbe),e(Fbe,kgr),e(P4,Sgr),e(P4,jX),e(jX,Rgr),e(P4,Bgr),e(be,Pgr),e(be,$4),e($4,Tbe),e(Tbe,$gr),e($4,Igr),e($4,DX),e(DX,qgr),e($4,Ngr),e(be,jgr),e(be,I4),e(I4,Mbe),e(Mbe,Dgr),e(I4,Ggr),e(I4,GX),e(GX,Ogr),e(I4,Vgr),e(be,Xgr),e(be,q4),e(q4,Ebe),e(Ebe,zgr),e(q4,Qgr),e(q4,OX),e(OX,Wgr),e(q4,Hgr),e(vo,Ugr),e(vo,Cbe),e(Cbe,Jgr),e(vo,Ygr),g(Jy,vo,null),b(c,HBe,_),b(c,Sc,_),e(Sc,N4),e(N4,wbe),g(Yy,wbe,null),e(Sc,Kgr),e(Sc,Abe),e(Abe,Zgr),b(c,UBe,_),b(c,wr,_),g(Ky,wr,null),e(wr,ehr),e(wr,Rc),e(Rc,ohr),e(Rc,VX),e(VX,rhr),e(Rc,thr),e(Rc,XX),e(XX,ahr),e(Rc,nhr),e(wr,shr),e(wr,Zy),e(Zy,lhr),e(Zy,ybe),e(ybe,ihr),e(Zy,dhr),e(wr,chr),e(wr,vt),g(e8,vt,null),e(vt,mhr),e(vt,Lbe),e(Lbe,fhr),e(vt,ghr),e(vt,Bc),e(Bc,hhr),e(Bc,xbe),e(xbe,uhr),e(Bc,phr),e(Bc,zX),e(zX,_hr),e(Bc,bhr),e(vt,vhr),e(vt,kbe),e(kbe,Fhr),e(vt,Thr),g(o8,vt,null),e(wr,Mhr),e(wr,Fo),g(r8,Fo,null),e(Fo,Ehr),e(Fo,Sbe),e(Sbe,Chr),e(Fo,whr),e(Fo,En),e(En,Ahr),e(En,Rbe),e(Rbe,yhr),e(En,Lhr),e(En,Bbe),e(Bbe,xhr),e(En,khr),e(En,Pbe),e(Pbe,Shr),e(En,Rhr),e(Fo,Bhr),e(Fo,V),e(V,j4),e(j4,$be),e($be,Phr),e(j4,$hr),e(j4,QX),e(QX,Ihr),e(j4,qhr),e(V,Nhr),e(V,D4),e(D4,Ibe),e(Ibe,jhr),e(D4,Dhr),e(D4,WX),e(WX,Ghr),e(D4,Ohr),e(V,Vhr),e(V,G4),e(G4,qbe),e(qbe,Xhr),e(G4,zhr),e(G4,HX),e(HX,Qhr),e(G4,Whr),e(V,Hhr),e(V,O4),e(O4,Nbe),e(Nbe,Uhr),e(O4,Jhr),e(O4,UX),e(UX,Yhr),e(O4,Khr),e(V,Zhr),e(V,V4),e(V4,jbe),e(jbe,eur),e(V4,our),e(V4,JX),e(JX,rur),e(V4,tur),e(V,aur),e(V,X4),e(X4,Dbe),e(Dbe,nur),e(X4,sur),e(X4,YX),e(YX,lur),e(X4,iur),e(V,dur),e(V,z4),e(z4,Gbe),e(Gbe,cur),e(z4,mur),e(z4,KX),e(KX,fur),e(z4,gur),e(V,hur),e(V,Q4),e(Q4,Obe),e(Obe,uur),e(Q4,pur),e(Q4,ZX),e(ZX,_ur),e(Q4,bur),e(V,vur),e(V,W4),e(W4,Vbe),e(Vbe,Fur),e(W4,Tur),e(W4,ez),e(ez,Mur),e(W4,Eur),e(V,Cur),e(V,H4),e(H4,Xbe),e(Xbe,wur),e(H4,Aur),e(H4,oz),e(oz,yur),e(H4,Lur),e(V,xur),e(V,U4),e(U4,zbe),e(zbe,kur),e(U4,Sur),e(U4,rz),e(rz,Rur),e(U4,Bur),e(V,Pur),e(V,J4),e(J4,Qbe),e(Qbe,$ur),e(J4,Iur),e(J4,tz),e(tz,qur),e(J4,Nur),e(V,jur),e(V,Y4),e(Y4,Wbe),e(Wbe,Dur),e(Y4,Gur),e(Y4,az),e(az,Our),e(Y4,Vur),e(V,Xur),e(V,K4),e(K4,Hbe),e(Hbe,zur),e(K4,Qur),e(K4,nz),e(nz,Wur),e(K4,Hur),e(V,Uur),e(V,Z4),e(Z4,Ube),e(Ube,Jur),e(Z4,Yur),e(Z4,sz),e(sz,Kur),e(Z4,Zur),e(V,epr),e(V,eE),e(eE,Jbe),e(Jbe,opr),e(eE,rpr),e(eE,lz),e(lz,tpr),e(eE,apr),e(V,npr),e(V,oE),e(oE,Ybe),e(Ybe,spr),e(oE,lpr),e(oE,iz),e(iz,ipr),e(oE,dpr),e(V,cpr),e(V,rE),e(rE,Kbe),e(Kbe,mpr),e(rE,fpr),e(rE,dz),e(dz,gpr),e(rE,hpr),e(V,upr),e(V,tE),e(tE,Zbe),e(Zbe,ppr),e(tE,_pr),e(tE,cz),e(cz,bpr),e(tE,vpr),e(V,Fpr),e(V,aE),e(aE,e2e),e(e2e,Tpr),e(aE,Mpr),e(aE,mz),e(mz,Epr),e(aE,Cpr),e(V,wpr),e(V,nE),e(nE,o2e),e(o2e,Apr),e(nE,ypr),e(nE,fz),e(fz,Lpr),e(nE,xpr),e(V,kpr),e(V,sE),e(sE,r2e),e(r2e,Spr),e(sE,Rpr),e(sE,gz),e(gz,Bpr),e(sE,Ppr),e(V,$pr),e(V,lE),e(lE,t2e),e(t2e,Ipr),e(lE,qpr),e(lE,hz),e(hz,Npr),e(lE,jpr),e(V,Dpr),e(V,iE),e(iE,a2e),e(a2e,Gpr),e(iE,Opr),e(iE,uz),e(uz,Vpr),e(iE,Xpr),e(V,zpr),e(V,dE),e(dE,n2e),e(n2e,Qpr),e(dE,Wpr),e(dE,pz),e(pz,Hpr),e(dE,Upr),e(V,Jpr),e(V,cE),e(cE,s2e),e(s2e,Ypr),e(cE,Kpr),e(cE,_z),e(_z,Zpr),e(cE,e_r),e(Fo,o_r),e(Fo,l2e),e(l2e,r_r),e(Fo,t_r),g(t8,Fo,null),b(c,JBe,_),b(c,Pc,_),e(Pc,mE),e(mE,i2e),g(a8,i2e,null),e(Pc,a_r),e(Pc,d2e),e(d2e,n_r),b(c,YBe,_),b(c,Ar,_),g(n8,Ar,null),e(Ar,s_r),e(Ar,$c),e($c,l_r),e($c,bz),e(bz,i_r),e($c,d_r),e($c,vz),e(vz,c_r),e($c,m_r),e(Ar,f_r),e(Ar,s8),e(s8,g_r),e(s8,c2e),e(c2e,h_r),e(s8,u_r),e(Ar,p_r),e(Ar,Ft),g(l8,Ft,null),e(Ft,__r),e(Ft,m2e),e(m2e,b_r),e(Ft,v_r),e(Ft,Ic),e(Ic,F_r),e(Ic,f2e),e(f2e,T_r),e(Ic,M_r),e(Ic,Fz),e(Fz,E_r),e(Ic,C_r),e(Ft,w_r),e(Ft,g2e),e(g2e,A_r),e(Ft,y_r),g(i8,Ft,null),e(Ar,L_r),e(Ar,To),g(d8,To,null),e(To,x_r),e(To,h2e),e(h2e,k_r),e(To,S_r),e(To,Cn),e(Cn,R_r),e(Cn,u2e),e(u2e,B_r),e(Cn,P_r),e(Cn,p2e),e(p2e,$_r),e(Cn,I_r),e(Cn,_2e),e(_2e,q_r),e(Cn,N_r),e(To,j_r),e(To,se),e(se,fE),e(fE,b2e),e(b2e,D_r),e(fE,G_r),e(fE,Tz),e(Tz,O_r),e(fE,V_r),e(se,X_r),e(se,gE),e(gE,v2e),e(v2e,z_r),e(gE,Q_r),e(gE,Mz),e(Mz,W_r),e(gE,H_r),e(se,U_r),e(se,hE),e(hE,F2e),e(F2e,J_r),e(hE,Y_r),e(hE,Ez),e(Ez,K_r),e(hE,Z_r),e(se,ebr),e(se,uE),e(uE,T2e),e(T2e,obr),e(uE,rbr),e(uE,Cz),e(Cz,tbr),e(uE,abr),e(se,nbr),e(se,pE),e(pE,M2e),e(M2e,sbr),e(pE,lbr),e(pE,wz),e(wz,ibr),e(pE,dbr),e(se,cbr),e(se,_E),e(_E,E2e),e(E2e,mbr),e(_E,fbr),e(_E,Az),e(Az,gbr),e(_E,hbr),e(se,ubr),e(se,bE),e(bE,C2e),e(C2e,pbr),e(bE,_br),e(bE,yz),e(yz,bbr),e(bE,vbr),e(se,Fbr),e(se,vE),e(vE,w2e),e(w2e,Tbr),e(vE,Mbr),e(vE,Lz),e(Lz,Ebr),e(vE,Cbr),e(se,wbr),e(se,FE),e(FE,A2e),e(A2e,Abr),e(FE,ybr),e(FE,xz),e(xz,Lbr),e(FE,xbr),e(se,kbr),e(se,TE),e(TE,y2e),e(y2e,Sbr),e(TE,Rbr),e(TE,kz),e(kz,Bbr),e(TE,Pbr),e(se,$br),e(se,ME),e(ME,L2e),e(L2e,Ibr),e(ME,qbr),e(ME,Sz),e(Sz,Nbr),e(ME,jbr),e(se,Dbr),e(se,EE),e(EE,x2e),e(x2e,Gbr),e(EE,Obr),e(EE,Rz),e(Rz,Vbr),e(EE,Xbr),e(se,zbr),e(se,CE),e(CE,k2e),e(k2e,Qbr),e(CE,Wbr),e(CE,Bz),e(Bz,Hbr),e(CE,Ubr),e(se,Jbr),e(se,wE),e(wE,S2e),e(S2e,Ybr),e(wE,Kbr),e(wE,Pz),e(Pz,Zbr),e(wE,e2r),e(se,o2r),e(se,AE),e(AE,R2e),e(R2e,r2r),e(AE,t2r),e(AE,$z),e($z,a2r),e(AE,n2r),e(se,s2r),e(se,yE),e(yE,B2e),e(B2e,l2r),e(yE,i2r),e(yE,Iz),e(Iz,d2r),e(yE,c2r),e(se,m2r),e(se,LE),e(LE,P2e),e(P2e,f2r),e(LE,g2r),e(LE,qz),e(qz,h2r),e(LE,u2r),e(To,p2r),e(To,$2e),e($2e,_2r),e(To,b2r),g(c8,To,null),b(c,KBe,_),b(c,qc,_),e(qc,xE),e(xE,I2e),g(m8,I2e,null),e(qc,v2r),e(qc,q2e),e(q2e,F2r),b(c,ZBe,_),b(c,yr,_),g(f8,yr,null),e(yr,T2r),e(yr,Nc),e(Nc,M2r),e(Nc,Nz),e(Nz,E2r),e(Nc,C2r),e(Nc,jz),e(jz,w2r),e(Nc,A2r),e(yr,y2r),e(yr,g8),e(g8,L2r),e(g8,N2e),e(N2e,x2r),e(g8,k2r),e(yr,S2r),e(yr,Tt),g(h8,Tt,null),e(Tt,R2r),e(Tt,j2e),e(j2e,B2r),e(Tt,P2r),e(Tt,jc),e(jc,$2r),e(jc,D2e),e(D2e,I2r),e(jc,q2r),e(jc,Dz),e(Dz,N2r),e(jc,j2r),e(Tt,D2r),e(Tt,G2e),e(G2e,G2r),e(Tt,O2r),g(u8,Tt,null),e(yr,V2r),e(yr,Mo),g(p8,Mo,null),e(Mo,X2r),e(Mo,O2e),e(O2e,z2r),e(Mo,Q2r),e(Mo,wn),e(wn,W2r),e(wn,V2e),e(V2e,H2r),e(wn,U2r),e(wn,X2e),e(X2e,J2r),e(wn,Y2r),e(wn,z2e),e(z2e,K2r),e(wn,Z2r),e(Mo,evr),e(Mo,Q2e),e(Q2e,kE),e(kE,W2e),e(W2e,ovr),e(kE,rvr),e(kE,Gz),e(Gz,tvr),e(kE,avr),e(Mo,nvr),e(Mo,H2e),e(H2e,svr),e(Mo,lvr),g(_8,Mo,null),b(c,ePe,_),b(c,Dc,_),e(Dc,SE),e(SE,U2e),g(b8,U2e,null),e(Dc,ivr),e(Dc,J2e),e(J2e,dvr),b(c,oPe,_),b(c,Lr,_),g(v8,Lr,null),e(Lr,cvr),e(Lr,Gc),e(Gc,mvr),e(Gc,Oz),e(Oz,fvr),e(Gc,gvr),e(Gc,Vz),e(Vz,hvr),e(Gc,uvr),e(Lr,pvr),e(Lr,F8),e(F8,_vr),e(F8,Y2e),e(Y2e,bvr),e(F8,vvr),e(Lr,Fvr),e(Lr,Mt),g(T8,Mt,null),e(Mt,Tvr),e(Mt,K2e),e(K2e,Mvr),e(Mt,Evr),e(Mt,Oc),e(Oc,Cvr),e(Oc,Z2e),e(Z2e,wvr),e(Oc,Avr),e(Oc,Xz),e(Xz,yvr),e(Oc,Lvr),e(Mt,xvr),e(Mt,eve),e(eve,kvr),e(Mt,Svr),g(M8,Mt,null),e(Lr,Rvr),e(Lr,Eo),g(E8,Eo,null),e(Eo,Bvr),e(Eo,ove),e(ove,Pvr),e(Eo,$vr),e(Eo,An),e(An,Ivr),e(An,rve),e(rve,qvr),e(An,Nvr),e(An,tve),e(tve,jvr),e(An,Dvr),e(An,ave),e(ave,Gvr),e(An,Ovr),e(Eo,Vvr),e(Eo,Y),e(Y,RE),e(RE,nve),e(nve,Xvr),e(RE,zvr),e(RE,zz),e(zz,Qvr),e(RE,Wvr),e(Y,Hvr),e(Y,BE),e(BE,sve),e(sve,Uvr),e(BE,Jvr),e(BE,Qz),e(Qz,Yvr),e(BE,Kvr),e(Y,Zvr),e(Y,PE),e(PE,lve),e(lve,eFr),e(PE,oFr),e(PE,Wz),e(Wz,rFr),e(PE,tFr),e(Y,aFr),e(Y,$E),e($E,ive),e(ive,nFr),e($E,sFr),e($E,Hz),e(Hz,lFr),e($E,iFr),e(Y,dFr),e(Y,IE),e(IE,dve),e(dve,cFr),e(IE,mFr),e(IE,Uz),e(Uz,fFr),e(IE,gFr),e(Y,hFr),e(Y,qE),e(qE,cve),e(cve,uFr),e(qE,pFr),e(qE,Jz),e(Jz,_Fr),e(qE,bFr),e(Y,vFr),e(Y,NE),e(NE,mve),e(mve,FFr),e(NE,TFr),e(NE,Yz),e(Yz,MFr),e(NE,EFr),e(Y,CFr),e(Y,jE),e(jE,fve),e(fve,wFr),e(jE,AFr),e(jE,Kz),e(Kz,yFr),e(jE,LFr),e(Y,xFr),e(Y,DE),e(DE,gve),e(gve,kFr),e(DE,SFr),e(DE,Zz),e(Zz,RFr),e(DE,BFr),e(Y,PFr),e(Y,GE),e(GE,hve),e(hve,$Fr),e(GE,IFr),e(GE,eQ),e(eQ,qFr),e(GE,NFr),e(Y,jFr),e(Y,OE),e(OE,uve),e(uve,DFr),e(OE,GFr),e(OE,oQ),e(oQ,OFr),e(OE,VFr),e(Y,XFr),e(Y,VE),e(VE,pve),e(pve,zFr),e(VE,QFr),e(VE,rQ),e(rQ,WFr),e(VE,HFr),e(Y,UFr),e(Y,XE),e(XE,_ve),e(_ve,JFr),e(XE,YFr),e(XE,tQ),e(tQ,KFr),e(XE,ZFr),e(Y,e1r),e(Y,zE),e(zE,bve),e(bve,o1r),e(zE,r1r),e(zE,aQ),e(aQ,t1r),e(zE,a1r),e(Y,n1r),e(Y,QE),e(QE,vve),e(vve,s1r),e(QE,l1r),e(QE,nQ),e(nQ,i1r),e(QE,d1r),e(Y,c1r),e(Y,WE),e(WE,Fve),e(Fve,m1r),e(WE,f1r),e(WE,sQ),e(sQ,g1r),e(WE,h1r),e(Y,u1r),e(Y,HE),e(HE,Tve),e(Tve,p1r),e(HE,_1r),e(HE,lQ),e(lQ,b1r),e(HE,v1r),e(Y,F1r),e(Y,UE),e(UE,Mve),e(Mve,T1r),e(UE,M1r),e(UE,iQ),e(iQ,E1r),e(UE,C1r),e(Y,w1r),e(Y,JE),e(JE,Eve),e(Eve,A1r),e(JE,y1r),e(JE,dQ),e(dQ,L1r),e(JE,x1r),e(Y,k1r),e(Y,YE),e(YE,Cve),e(Cve,S1r),e(YE,R1r),e(YE,cQ),e(cQ,B1r),e(YE,P1r),e(Eo,$1r),e(Eo,wve),e(wve,I1r),e(Eo,q1r),g(C8,Eo,null),b(c,rPe,_),b(c,Vc,_),e(Vc,KE),e(KE,Ave),g(w8,Ave,null),e(Vc,N1r),e(Vc,yve),e(yve,j1r),b(c,tPe,_),b(c,xr,_),g(A8,xr,null),e(xr,D1r),e(xr,Xc),e(Xc,G1r),e(Xc,mQ),e(mQ,O1r),e(Xc,V1r),e(Xc,fQ),e(fQ,X1r),e(Xc,z1r),e(xr,Q1r),e(xr,y8),e(y8,W1r),e(y8,Lve),e(Lve,H1r),e(y8,U1r),e(xr,J1r),e(xr,Et),g(L8,Et,null),e(Et,Y1r),e(Et,xve),e(xve,K1r),e(Et,Z1r),e(Et,zc),e(zc,eTr),e(zc,kve),e(kve,oTr),e(zc,rTr),e(zc,gQ),e(gQ,tTr),e(zc,aTr),e(Et,nTr),e(Et,Sve),e(Sve,sTr),e(Et,lTr),g(x8,Et,null),e(xr,iTr),e(xr,Co),g(k8,Co,null),e(Co,dTr),e(Co,Rve),e(Rve,cTr),e(Co,mTr),e(Co,yn),e(yn,fTr),e(yn,Bve),e(Bve,gTr),e(yn,hTr),e(yn,Pve),e(Pve,uTr),e(yn,pTr),e(yn,$ve),e($ve,_Tr),e(yn,bTr),e(Co,vTr),e(Co,K),e(K,ZE),e(ZE,Ive),e(Ive,FTr),e(ZE,TTr),e(ZE,hQ),e(hQ,MTr),e(ZE,ETr),e(K,CTr),e(K,e5),e(e5,qve),e(qve,wTr),e(e5,ATr),e(e5,uQ),e(uQ,yTr),e(e5,LTr),e(K,xTr),e(K,o5),e(o5,Nve),e(Nve,kTr),e(o5,STr),e(o5,pQ),e(pQ,RTr),e(o5,BTr),e(K,PTr),e(K,r5),e(r5,jve),e(jve,$Tr),e(r5,ITr),e(r5,_Q),e(_Q,qTr),e(r5,NTr),e(K,jTr),e(K,t5),e(t5,Dve),e(Dve,DTr),e(t5,GTr),e(t5,bQ),e(bQ,OTr),e(t5,VTr),e(K,XTr),e(K,a5),e(a5,Gve),e(Gve,zTr),e(a5,QTr),e(a5,vQ),e(vQ,WTr),e(a5,HTr),e(K,UTr),e(K,n5),e(n5,Ove),e(Ove,JTr),e(n5,YTr),e(n5,FQ),e(FQ,KTr),e(n5,ZTr),e(K,eMr),e(K,s5),e(s5,Vve),e(Vve,oMr),e(s5,rMr),e(s5,TQ),e(TQ,tMr),e(s5,aMr),e(K,nMr),e(K,l5),e(l5,Xve),e(Xve,sMr),e(l5,lMr),e(l5,MQ),e(MQ,iMr),e(l5,dMr),e(K,cMr),e(K,i5),e(i5,zve),e(zve,mMr),e(i5,fMr),e(i5,EQ),e(EQ,gMr),e(i5,hMr),e(K,uMr),e(K,d5),e(d5,Qve),e(Qve,pMr),e(d5,_Mr),e(d5,CQ),e(CQ,bMr),e(d5,vMr),e(K,FMr),e(K,c5),e(c5,Wve),e(Wve,TMr),e(c5,MMr),e(c5,wQ),e(wQ,EMr),e(c5,CMr),e(K,wMr),e(K,m5),e(m5,Hve),e(Hve,AMr),e(m5,yMr),e(m5,AQ),e(AQ,LMr),e(m5,xMr),e(K,kMr),e(K,f5),e(f5,Uve),e(Uve,SMr),e(f5,RMr),e(f5,yQ),e(yQ,BMr),e(f5,PMr),e(K,$Mr),e(K,g5),e(g5,Jve),e(Jve,IMr),e(g5,qMr),e(g5,LQ),e(LQ,NMr),e(g5,jMr),e(K,DMr),e(K,h5),e(h5,Yve),e(Yve,GMr),e(h5,OMr),e(h5,xQ),e(xQ,VMr),e(h5,XMr),e(K,zMr),e(K,u5),e(u5,Kve),e(Kve,QMr),e(u5,WMr),e(u5,kQ),e(kQ,HMr),e(u5,UMr),e(K,JMr),e(K,p5),e(p5,Zve),e(Zve,YMr),e(p5,KMr),e(p5,SQ),e(SQ,ZMr),e(p5,e4r),e(K,o4r),e(K,_5),e(_5,eFe),e(eFe,r4r),e(_5,t4r),e(_5,RQ),e(RQ,a4r),e(_5,n4r),e(K,s4r),e(K,b5),e(b5,oFe),e(oFe,l4r),e(b5,i4r),e(b5,BQ),e(BQ,d4r),e(b5,c4r),e(Co,m4r),e(Co,rFe),e(rFe,f4r),e(Co,g4r),g(S8,Co,null),b(c,aPe,_),b(c,Qc,_),e(Qc,v5),e(v5,tFe),g(R8,tFe,null),e(Qc,h4r),e(Qc,aFe),e(aFe,u4r),b(c,nPe,_),b(c,kr,_),g(B8,kr,null),e(kr,p4r),e(kr,Wc),e(Wc,_4r),e(Wc,PQ),e(PQ,b4r),e(Wc,v4r),e(Wc,$Q),e($Q,F4r),e(Wc,T4r),e(kr,M4r),e(kr,P8),e(P8,E4r),e(P8,nFe),e(nFe,C4r),e(P8,w4r),e(kr,A4r),e(kr,Ct),g($8,Ct,null),e(Ct,y4r),e(Ct,sFe),e(sFe,L4r),e(Ct,x4r),e(Ct,Hc),e(Hc,k4r),e(Hc,lFe),e(lFe,S4r),e(Hc,R4r),e(Hc,IQ),e(IQ,B4r),e(Hc,P4r),e(Ct,$4r),e(Ct,iFe),e(iFe,I4r),e(Ct,q4r),g(I8,Ct,null),e(kr,N4r),e(kr,wo),g(q8,wo,null),e(wo,j4r),e(wo,dFe),e(dFe,D4r),e(wo,G4r),e(wo,Ln),e(Ln,O4r),e(Ln,cFe),e(cFe,V4r),e(Ln,X4r),e(Ln,mFe),e(mFe,z4r),e(Ln,Q4r),e(Ln,fFe),e(fFe,W4r),e(Ln,H4r),e(wo,U4r),e(wo,gFe),e(gFe,F5),e(F5,hFe),e(hFe,J4r),e(F5,Y4r),e(F5,qQ),e(qQ,K4r),e(F5,Z4r),e(wo,eEr),e(wo,uFe),e(uFe,oEr),e(wo,rEr),g(N8,wo,null),b(c,sPe,_),b(c,Uc,_),e(Uc,T5),e(T5,pFe),g(j8,pFe,null),e(Uc,tEr),e(Uc,_Fe),e(_Fe,aEr),b(c,lPe,_),b(c,Sr,_),g(D8,Sr,null),e(Sr,nEr),e(Sr,Jc),e(Jc,sEr),e(Jc,NQ),e(NQ,lEr),e(Jc,iEr),e(Jc,jQ),e(jQ,dEr),e(Jc,cEr),e(Sr,mEr),e(Sr,G8),e(G8,fEr),e(G8,bFe),e(bFe,gEr),e(G8,hEr),e(Sr,uEr),e(Sr,wt),g(O8,wt,null),e(wt,pEr),e(wt,vFe),e(vFe,_Er),e(wt,bEr),e(wt,Yc),e(Yc,vEr),e(Yc,FFe),e(FFe,FEr),e(Yc,TEr),e(Yc,DQ),e(DQ,MEr),e(Yc,EEr),e(wt,CEr),e(wt,TFe),e(TFe,wEr),e(wt,AEr),g(V8,wt,null),e(Sr,yEr),e(Sr,Ao),g(X8,Ao,null),e(Ao,LEr),e(Ao,MFe),e(MFe,xEr),e(Ao,kEr),e(Ao,xn),e(xn,SEr),e(xn,EFe),e(EFe,REr),e(xn,BEr),e(xn,CFe),e(CFe,PEr),e(xn,$Er),e(xn,wFe),e(wFe,IEr),e(xn,qEr),e(Ao,NEr),e(Ao,AFe),e(AFe,M5),e(M5,yFe),e(yFe,jEr),e(M5,DEr),e(M5,GQ),e(GQ,GEr),e(M5,OEr),e(Ao,VEr),e(Ao,LFe),e(LFe,XEr),e(Ao,zEr),g(z8,Ao,null),b(c,iPe,_),b(c,Kc,_),e(Kc,E5),e(E5,xFe),g(Q8,xFe,null),e(Kc,QEr),e(Kc,kFe),e(kFe,WEr),b(c,dPe,_),b(c,Rr,_),g(W8,Rr,null),e(Rr,HEr),e(Rr,Zc),e(Zc,UEr),e(Zc,OQ),e(OQ,JEr),e(Zc,YEr),e(Zc,VQ),e(VQ,KEr),e(Zc,ZEr),e(Rr,e5r),e(Rr,H8),e(H8,o5r),e(H8,SFe),e(SFe,r5r),e(H8,t5r),e(Rr,a5r),e(Rr,At),g(U8,At,null),e(At,n5r),e(At,RFe),e(RFe,s5r),e(At,l5r),e(At,em),e(em,i5r),e(em,BFe),e(BFe,d5r),e(em,c5r),e(em,XQ),e(XQ,m5r),e(em,f5r),e(At,g5r),e(At,PFe),e(PFe,h5r),e(At,u5r),g(J8,At,null),e(Rr,p5r),e(Rr,yo),g(Y8,yo,null),e(yo,_5r),e(yo,$Fe),e($Fe,b5r),e(yo,v5r),e(yo,kn),e(kn,F5r),e(kn,IFe),e(IFe,T5r),e(kn,M5r),e(kn,qFe),e(qFe,E5r),e(kn,C5r),e(kn,NFe),e(NFe,w5r),e(kn,A5r),e(yo,y5r),e(yo,z),e(z,C5),e(C5,jFe),e(jFe,L5r),e(C5,x5r),e(C5,zQ),e(zQ,k5r),e(C5,S5r),e(z,R5r),e(z,w5),e(w5,DFe),e(DFe,B5r),e(w5,P5r),e(w5,QQ),e(QQ,$5r),e(w5,I5r),e(z,q5r),e(z,A5),e(A5,GFe),e(GFe,N5r),e(A5,j5r),e(A5,WQ),e(WQ,D5r),e(A5,G5r),e(z,O5r),e(z,y5),e(y5,OFe),e(OFe,V5r),e(y5,X5r),e(y5,HQ),e(HQ,z5r),e(y5,Q5r),e(z,W5r),e(z,L5),e(L5,VFe),e(VFe,H5r),e(L5,U5r),e(L5,UQ),e(UQ,J5r),e(L5,Y5r),e(z,K5r),e(z,x5),e(x5,XFe),e(XFe,Z5r),e(x5,e3r),e(x5,JQ),e(JQ,o3r),e(x5,r3r),e(z,t3r),e(z,k5),e(k5,zFe),e(zFe,a3r),e(k5,n3r),e(k5,YQ),e(YQ,s3r),e(k5,l3r),e(z,i3r),e(z,S5),e(S5,QFe),e(QFe,d3r),e(S5,c3r),e(S5,KQ),e(KQ,m3r),e(S5,f3r),e(z,g3r),e(z,R5),e(R5,WFe),e(WFe,h3r),e(R5,u3r),e(R5,ZQ),e(ZQ,p3r),e(R5,_3r),e(z,b3r),e(z,B5),e(B5,HFe),e(HFe,v3r),e(B5,F3r),e(B5,eW),e(eW,T3r),e(B5,M3r),e(z,E3r),e(z,P5),e(P5,UFe),e(UFe,C3r),e(P5,w3r),e(P5,oW),e(oW,A3r),e(P5,y3r),e(z,L3r),e(z,$5),e($5,JFe),e(JFe,x3r),e($5,k3r),e($5,rW),e(rW,S3r),e($5,R3r),e(z,B3r),e(z,I5),e(I5,YFe),e(YFe,P3r),e(I5,$3r),e(I5,tW),e(tW,I3r),e(I5,q3r),e(z,N3r),e(z,q5),e(q5,KFe),e(KFe,j3r),e(q5,D3r),e(q5,aW),e(aW,G3r),e(q5,O3r),e(z,V3r),e(z,N5),e(N5,ZFe),e(ZFe,X3r),e(N5,z3r),e(N5,nW),e(nW,Q3r),e(N5,W3r),e(z,H3r),e(z,j5),e(j5,e1e),e(e1e,U3r),e(j5,J3r),e(j5,sW),e(sW,Y3r),e(j5,K3r),e(z,Z3r),e(z,D5),e(D5,o1e),e(o1e,eCr),e(D5,oCr),e(D5,lW),e(lW,rCr),e(D5,tCr),e(z,aCr),e(z,G5),e(G5,r1e),e(r1e,nCr),e(G5,sCr),e(G5,iW),e(iW,lCr),e(G5,iCr),e(z,dCr),e(z,O5),e(O5,t1e),e(t1e,cCr),e(O5,mCr),e(O5,dW),e(dW,fCr),e(O5,gCr),e(z,hCr),e(z,V5),e(V5,a1e),e(a1e,uCr),e(V5,pCr),e(V5,cW),e(cW,_Cr),e(V5,bCr),e(z,vCr),e(z,X5),e(X5,n1e),e(n1e,FCr),e(X5,TCr),e(X5,mW),e(mW,MCr),e(X5,ECr),e(z,CCr),e(z,z5),e(z5,s1e),e(s1e,wCr),e(z5,ACr),e(z5,fW),e(fW,yCr),e(z5,LCr),e(z,xCr),e(z,Q5),e(Q5,l1e),e(l1e,kCr),e(Q5,SCr),e(Q5,gW),e(gW,RCr),e(Q5,BCr),e(z,PCr),e(z,W5),e(W5,i1e),e(i1e,$Cr),e(W5,ICr),e(W5,hW),e(hW,qCr),e(W5,NCr),e(z,jCr),e(z,H5),e(H5,d1e),e(d1e,DCr),e(H5,GCr),e(H5,uW),e(uW,OCr),e(H5,VCr),e(yo,XCr),e(yo,c1e),e(c1e,zCr),e(yo,QCr),g(K8,yo,null),b(c,cPe,_),b(c,om,_),e(om,U5),e(U5,m1e),g(Z8,m1e,null),e(om,WCr),e(om,f1e),e(f1e,HCr),b(c,mPe,_),b(c,Br,_),g(eL,Br,null),e(Br,UCr),e(Br,rm),e(rm,JCr),e(rm,pW),e(pW,YCr),e(rm,KCr),e(rm,_W),e(_W,ZCr),e(rm,ewr),e(Br,owr),e(Br,oL),e(oL,rwr),e(oL,g1e),e(g1e,twr),e(oL,awr),e(Br,nwr),e(Br,yt),g(rL,yt,null),e(yt,swr),e(yt,h1e),e(h1e,lwr),e(yt,iwr),e(yt,tm),e(tm,dwr),e(tm,u1e),e(u1e,cwr),e(tm,mwr),e(tm,bW),e(bW,fwr),e(tm,gwr),e(yt,hwr),e(yt,p1e),e(p1e,uwr),e(yt,pwr),g(tL,yt,null),e(Br,_wr),e(Br,Lo),g(aL,Lo,null),e(Lo,bwr),e(Lo,_1e),e(_1e,vwr),e(Lo,Fwr),e(Lo,Sn),e(Sn,Twr),e(Sn,b1e),e(b1e,Mwr),e(Sn,Ewr),e(Sn,v1e),e(v1e,Cwr),e(Sn,wwr),e(Sn,F1e),e(F1e,Awr),e(Sn,ywr),e(Lo,Lwr),e(Lo,ca),e(ca,J5),e(J5,T1e),e(T1e,xwr),e(J5,kwr),e(J5,vW),e(vW,Swr),e(J5,Rwr),e(ca,Bwr),e(ca,Y5),e(Y5,M1e),e(M1e,Pwr),e(Y5,$wr),e(Y5,FW),e(FW,Iwr),e(Y5,qwr),e(ca,Nwr),e(ca,K5),e(K5,E1e),e(E1e,jwr),e(K5,Dwr),e(K5,TW),e(TW,Gwr),e(K5,Owr),e(ca,Vwr),e(ca,Z5),e(Z5,C1e),e(C1e,Xwr),e(Z5,zwr),e(Z5,MW),e(MW,Qwr),e(Z5,Wwr),e(ca,Hwr),e(ca,e3),e(e3,w1e),e(w1e,Uwr),e(e3,Jwr),e(e3,EW),e(EW,Ywr),e(e3,Kwr),e(Lo,Zwr),e(Lo,A1e),e(A1e,e6r),e(Lo,o6r),g(nL,Lo,null),b(c,fPe,_),b(c,am,_),e(am,o3),e(o3,y1e),g(sL,y1e,null),e(am,r6r),e(am,L1e),e(L1e,t6r),b(c,gPe,_),b(c,Pr,_),g(lL,Pr,null),e(Pr,a6r),e(Pr,nm),e(nm,n6r),e(nm,CW),e(CW,s6r),e(nm,l6r),e(nm,wW),e(wW,i6r),e(nm,d6r),e(Pr,c6r),e(Pr,iL),e(iL,m6r),e(iL,x1e),e(x1e,f6r),e(iL,g6r),e(Pr,h6r),e(Pr,Lt),g(dL,Lt,null),e(Lt,u6r),e(Lt,k1e),e(k1e,p6r),e(Lt,_6r),e(Lt,sm),e(sm,b6r),e(sm,S1e),e(S1e,v6r),e(sm,F6r),e(sm,AW),e(AW,T6r),e(sm,M6r),e(Lt,E6r),e(Lt,R1e),e(R1e,C6r),e(Lt,w6r),g(cL,Lt,null),e(Pr,A6r),e(Pr,xo),g(mL,xo,null),e(xo,y6r),e(xo,B1e),e(B1e,L6r),e(xo,x6r),e(xo,Rn),e(Rn,k6r),e(Rn,P1e),e(P1e,S6r),e(Rn,R6r),e(Rn,$1e),e($1e,B6r),e(Rn,P6r),e(Rn,I1e),e(I1e,$6r),e(Rn,I6r),e(xo,q6r),e(xo,fe),e(fe,r3),e(r3,q1e),e(q1e,N6r),e(r3,j6r),e(r3,yW),e(yW,D6r),e(r3,G6r),e(fe,O6r),e(fe,t3),e(t3,N1e),e(N1e,V6r),e(t3,X6r),e(t3,LW),e(LW,z6r),e(t3,Q6r),e(fe,W6r),e(fe,a3),e(a3,j1e),e(j1e,H6r),e(a3,U6r),e(a3,xW),e(xW,J6r),e(a3,Y6r),e(fe,K6r),e(fe,n3),e(n3,D1e),e(D1e,Z6r),e(n3,eAr),e(n3,kW),e(kW,oAr),e(n3,rAr),e(fe,tAr),e(fe,s3),e(s3,G1e),e(G1e,aAr),e(s3,nAr),e(s3,SW),e(SW,sAr),e(s3,lAr),e(fe,iAr),e(fe,l3),e(l3,O1e),e(O1e,dAr),e(l3,cAr),e(l3,RW),e(RW,mAr),e(l3,fAr),e(fe,gAr),e(fe,i3),e(i3,V1e),e(V1e,hAr),e(i3,uAr),e(i3,BW),e(BW,pAr),e(i3,_Ar),e(fe,bAr),e(fe,d3),e(d3,X1e),e(X1e,vAr),e(d3,FAr),e(d3,PW),e(PW,TAr),e(d3,MAr),e(fe,EAr),e(fe,c3),e(c3,z1e),e(z1e,CAr),e(c3,wAr),e(c3,$W),e($W,AAr),e(c3,yAr),e(fe,LAr),e(fe,m3),e(m3,Q1e),e(Q1e,xAr),e(m3,kAr),e(m3,IW),e(IW,SAr),e(m3,RAr),e(fe,BAr),e(fe,f3),e(f3,W1e),e(W1e,PAr),e(f3,$Ar),e(f3,qW),e(qW,IAr),e(f3,qAr),e(fe,NAr),e(fe,g3),e(g3,H1e),e(H1e,jAr),e(g3,DAr),e(g3,NW),e(NW,GAr),e(g3,OAr),e(xo,VAr),e(xo,U1e),e(U1e,XAr),e(xo,zAr),g(fL,xo,null),b(c,hPe,_),b(c,lm,_),e(lm,h3),e(h3,J1e),g(gL,J1e,null),e(lm,QAr),e(lm,Y1e),e(Y1e,WAr),b(c,uPe,_),b(c,$r,_),g(hL,$r,null),e($r,HAr),e($r,im),e(im,UAr),e(im,jW),e(jW,JAr),e(im,YAr),e(im,DW),e(DW,KAr),e(im,ZAr),e($r,e0r),e($r,uL),e(uL,o0r),e(uL,K1e),e(K1e,r0r),e(uL,t0r),e($r,a0r),e($r,xt),g(pL,xt,null),e(xt,n0r),e(xt,Z1e),e(Z1e,s0r),e(xt,l0r),e(xt,dm),e(dm,i0r),e(dm,eTe),e(eTe,d0r),e(dm,c0r),e(dm,GW),e(GW,m0r),e(dm,f0r),e(xt,g0r),e(xt,oTe),e(oTe,h0r),e(xt,u0r),g(_L,xt,null),e($r,p0r),e($r,ko),g(bL,ko,null),e(ko,_0r),e(ko,rTe),e(rTe,b0r),e(ko,v0r),e(ko,Bn),e(Bn,F0r),e(Bn,tTe),e(tTe,T0r),e(Bn,M0r),e(Bn,aTe),e(aTe,E0r),e(Bn,C0r),e(Bn,nTe),e(nTe,w0r),e(Bn,A0r),e(ko,y0r),e(ko,ve),e(ve,u3),e(u3,sTe),e(sTe,L0r),e(u3,x0r),e(u3,OW),e(OW,k0r),e(u3,S0r),e(ve,R0r),e(ve,p3),e(p3,lTe),e(lTe,B0r),e(p3,P0r),e(p3,VW),e(VW,$0r),e(p3,I0r),e(ve,q0r),e(ve,_3),e(_3,iTe),e(iTe,N0r),e(_3,j0r),e(_3,XW),e(XW,D0r),e(_3,G0r),e(ve,O0r),e(ve,b3),e(b3,dTe),e(dTe,V0r),e(b3,X0r),e(b3,zW),e(zW,z0r),e(b3,Q0r),e(ve,W0r),e(ve,v3),e(v3,cTe),e(cTe,H0r),e(v3,U0r),e(v3,QW),e(QW,J0r),e(v3,Y0r),e(ve,K0r),e(ve,F3),e(F3,mTe),e(mTe,Z0r),e(F3,eyr),e(F3,WW),e(WW,oyr),e(F3,ryr),e(ve,tyr),e(ve,T3),e(T3,fTe),e(fTe,ayr),e(T3,nyr),e(T3,HW),e(HW,syr),e(T3,lyr),e(ve,iyr),e(ve,M3),e(M3,gTe),e(gTe,dyr),e(M3,cyr),e(M3,UW),e(UW,myr),e(M3,fyr),e(ve,gyr),e(ve,E3),e(E3,hTe),e(hTe,hyr),e(E3,uyr),e(E3,JW),e(JW,pyr),e(E3,_yr),e(ve,byr),e(ve,C3),e(C3,uTe),e(uTe,vyr),e(C3,Fyr),e(C3,YW),e(YW,Tyr),e(C3,Myr),e(ko,Eyr),e(ko,pTe),e(pTe,Cyr),e(ko,wyr),g(vL,ko,null),b(c,pPe,_),b(c,cm,_),e(cm,w3),e(w3,_Te),g(FL,_Te,null),e(cm,Ayr),e(cm,bTe),e(bTe,yyr),b(c,_Pe,_),b(c,Ir,_),g(TL,Ir,null),e(Ir,Lyr),e(Ir,mm),e(mm,xyr),e(mm,KW),e(KW,kyr),e(mm,Syr),e(mm,ZW),e(ZW,Ryr),e(mm,Byr),e(Ir,Pyr),e(Ir,ML),e(ML,$yr),e(ML,vTe),e(vTe,Iyr),e(ML,qyr),e(Ir,Nyr),e(Ir,kt),g(EL,kt,null),e(kt,jyr),e(kt,FTe),e(FTe,Dyr),e(kt,Gyr),e(kt,fm),e(fm,Oyr),e(fm,TTe),e(TTe,Vyr),e(fm,Xyr),e(fm,eH),e(eH,zyr),e(fm,Qyr),e(kt,Wyr),e(kt,MTe),e(MTe,Hyr),e(kt,Uyr),g(CL,kt,null),e(Ir,Jyr),e(Ir,So),g(wL,So,null),e(So,Yyr),e(So,ETe),e(ETe,Kyr),e(So,Zyr),e(So,Pn),e(Pn,e8r),e(Pn,CTe),e(CTe,o8r),e(Pn,r8r),e(Pn,wTe),e(wTe,t8r),e(Pn,a8r),e(Pn,ATe),e(ATe,n8r),e(Pn,s8r),e(So,l8r),e(So,Ee),e(Ee,A3),e(A3,yTe),e(yTe,i8r),e(A3,d8r),e(A3,oH),e(oH,c8r),e(A3,m8r),e(Ee,f8r),e(Ee,y3),e(y3,LTe),e(LTe,g8r),e(y3,h8r),e(y3,rH),e(rH,u8r),e(y3,p8r),e(Ee,_8r),e(Ee,L3),e(L3,xTe),e(xTe,b8r),e(L3,v8r),e(L3,tH),e(tH,F8r),e(L3,T8r),e(Ee,M8r),e(Ee,x3),e(x3,kTe),e(kTe,E8r),e(x3,C8r),e(x3,aH),e(aH,w8r),e(x3,A8r),e(Ee,y8r),e(Ee,k3),e(k3,STe),e(STe,L8r),e(k3,x8r),e(k3,nH),e(nH,k8r),e(k3,S8r),e(Ee,R8r),e(Ee,S3),e(S3,RTe),e(RTe,B8r),e(S3,P8r),e(S3,sH),e(sH,$8r),e(S3,I8r),e(Ee,q8r),e(Ee,R3),e(R3,BTe),e(BTe,N8r),e(R3,j8r),e(R3,lH),e(lH,D8r),e(R3,G8r),e(Ee,O8r),e(Ee,B3),e(B3,PTe),e(PTe,V8r),e(B3,X8r),e(B3,iH),e(iH,z8r),e(B3,Q8r),e(Ee,W8r),e(Ee,P3),e(P3,$Te),e($Te,H8r),e(P3,U8r),e(P3,dH),e(dH,J8r),e(P3,Y8r),e(So,K8r),e(So,ITe),e(ITe,Z8r),e(So,eLr),g(AL,So,null),b(c,bPe,_),b(c,gm,_),e(gm,$3),e($3,qTe),g(yL,qTe,null),e(gm,oLr),e(gm,NTe),e(NTe,rLr),b(c,vPe,_),b(c,qr,_),g(LL,qr,null),e(qr,tLr),e(qr,hm),e(hm,aLr),e(hm,cH),e(cH,nLr),e(hm,sLr),e(hm,mH),e(mH,lLr),e(hm,iLr),e(qr,dLr),e(qr,xL),e(xL,cLr),e(xL,jTe),e(jTe,mLr),e(xL,fLr),e(qr,gLr),e(qr,St),g(kL,St,null),e(St,hLr),e(St,DTe),e(DTe,uLr),e(St,pLr),e(St,um),e(um,_Lr),e(um,GTe),e(GTe,bLr),e(um,vLr),e(um,fH),e(fH,FLr),e(um,TLr),e(St,MLr),e(St,OTe),e(OTe,ELr),e(St,CLr),g(SL,St,null),e(qr,wLr),e(qr,Ro),g(RL,Ro,null),e(Ro,ALr),e(Ro,VTe),e(VTe,yLr),e(Ro,LLr),e(Ro,$n),e($n,xLr),e($n,XTe),e(XTe,kLr),e($n,SLr),e($n,zTe),e(zTe,RLr),e($n,BLr),e($n,QTe),e(QTe,PLr),e($n,$Lr),e(Ro,ILr),e(Ro,Fe),e(Fe,I3),e(I3,WTe),e(WTe,qLr),e(I3,NLr),e(I3,gH),e(gH,jLr),e(I3,DLr),e(Fe,GLr),e(Fe,q3),e(q3,HTe),e(HTe,OLr),e(q3,VLr),e(q3,hH),e(hH,XLr),e(q3,zLr),e(Fe,QLr),e(Fe,N3),e(N3,UTe),e(UTe,WLr),e(N3,HLr),e(N3,uH),e(uH,ULr),e(N3,JLr),e(Fe,YLr),e(Fe,j3),e(j3,JTe),e(JTe,KLr),e(j3,ZLr),e(j3,pH),e(pH,e7r),e(j3,o7r),e(Fe,r7r),e(Fe,D3),e(D3,YTe),e(YTe,t7r),e(D3,a7r),e(D3,_H),e(_H,n7r),e(D3,s7r),e(Fe,l7r),e(Fe,G3),e(G3,KTe),e(KTe,i7r),e(G3,d7r),e(G3,bH),e(bH,c7r),e(G3,m7r),e(Fe,f7r),e(Fe,O3),e(O3,ZTe),e(ZTe,g7r),e(O3,h7r),e(O3,vH),e(vH,u7r),e(O3,p7r),e(Fe,_7r),e(Fe,V3),e(V3,eMe),e(eMe,b7r),e(V3,v7r),e(V3,FH),e(FH,F7r),e(V3,T7r),e(Fe,M7r),e(Fe,X3),e(X3,oMe),e(oMe,E7r),e(X3,C7r),e(X3,TH),e(TH,w7r),e(X3,A7r),e(Fe,y7r),e(Fe,z3),e(z3,rMe),e(rMe,L7r),e(z3,x7r),e(z3,MH),e(MH,k7r),e(z3,S7r),e(Ro,R7r),e(Ro,tMe),e(tMe,B7r),e(Ro,P7r),g(BL,Ro,null),b(c,FPe,_),b(c,pm,_),e(pm,Q3),e(Q3,aMe),g(PL,aMe,null),e(pm,$7r),e(pm,nMe),e(nMe,I7r),b(c,TPe,_),b(c,Nr,_),g($L,Nr,null),e(Nr,q7r),e(Nr,_m),e(_m,N7r),e(_m,EH),e(EH,j7r),e(_m,D7r),e(_m,CH),e(CH,G7r),e(_m,O7r),e(Nr,V7r),e(Nr,IL),e(IL,X7r),e(IL,sMe),e(sMe,z7r),e(IL,Q7r),e(Nr,W7r),e(Nr,Rt),g(qL,Rt,null),e(Rt,H7r),e(Rt,lMe),e(lMe,U7r),e(Rt,J7r),e(Rt,bm),e(bm,Y7r),e(bm,iMe),e(iMe,K7r),e(bm,Z7r),e(bm,wH),e(wH,e9r),e(bm,o9r),e(Rt,r9r),e(Rt,dMe),e(dMe,t9r),e(Rt,a9r),g(NL,Rt,null),e(Nr,n9r),e(Nr,Bo),g(jL,Bo,null),e(Bo,s9r),e(Bo,cMe),e(cMe,l9r),e(Bo,i9r),e(Bo,In),e(In,d9r),e(In,mMe),e(mMe,c9r),e(In,m9r),e(In,fMe),e(fMe,f9r),e(In,g9r),e(In,gMe),e(gMe,h9r),e(In,u9r),e(Bo,p9r),e(Bo,Te),e(Te,W3),e(W3,hMe),e(hMe,_9r),e(W3,b9r),e(W3,AH),e(AH,v9r),e(W3,F9r),e(Te,T9r),e(Te,H3),e(H3,uMe),e(uMe,M9r),e(H3,E9r),e(H3,yH),e(yH,C9r),e(H3,w9r),e(Te,A9r),e(Te,U3),e(U3,pMe),e(pMe,y9r),e(U3,L9r),e(U3,LH),e(LH,x9r),e(U3,k9r),e(Te,S9r),e(Te,J3),e(J3,_Me),e(_Me,R9r),e(J3,B9r),e(J3,xH),e(xH,P9r),e(J3,$9r),e(Te,I9r),e(Te,Y3),e(Y3,bMe),e(bMe,q9r),e(Y3,N9r),e(Y3,kH),e(kH,j9r),e(Y3,D9r),e(Te,G9r),e(Te,K3),e(K3,vMe),e(vMe,O9r),e(K3,V9r),e(K3,SH),e(SH,X9r),e(K3,z9r),e(Te,Q9r),e(Te,Z3),e(Z3,FMe),e(FMe,W9r),e(Z3,H9r),e(Z3,RH),e(RH,U9r),e(Z3,J9r),e(Te,Y9r),e(Te,eC),e(eC,TMe),e(TMe,K9r),e(eC,Z9r),e(eC,BH),e(BH,exr),e(eC,oxr),e(Te,rxr),e(Te,oC),e(oC,MMe),e(MMe,txr),e(oC,axr),e(oC,PH),e(PH,nxr),e(oC,sxr),e(Te,lxr),e(Te,rC),e(rC,EMe),e(EMe,ixr),e(rC,dxr),e(rC,$H),e($H,cxr),e(rC,mxr),e(Bo,fxr),e(Bo,CMe),e(CMe,gxr),e(Bo,hxr),g(DL,Bo,null),b(c,MPe,_),b(c,vm,_),e(vm,tC),e(tC,wMe),g(GL,wMe,null),e(vm,uxr),e(vm,AMe),e(AMe,pxr),b(c,EPe,_),b(c,jr,_),g(OL,jr,null),e(jr,_xr),e(jr,Fm),e(Fm,bxr),e(Fm,IH),e(IH,vxr),e(Fm,Fxr),e(Fm,qH),e(qH,Txr),e(Fm,Mxr),e(jr,Exr),e(jr,VL),e(VL,Cxr),e(VL,yMe),e(yMe,wxr),e(VL,Axr),e(jr,yxr),e(jr,Bt),g(XL,Bt,null),e(Bt,Lxr),e(Bt,LMe),e(LMe,xxr),e(Bt,kxr),e(Bt,Tm),e(Tm,Sxr),e(Tm,xMe),e(xMe,Rxr),e(Tm,Bxr),e(Tm,NH),e(NH,Pxr),e(Tm,$xr),e(Bt,Ixr),e(Bt,kMe),e(kMe,qxr),e(Bt,Nxr),g(zL,Bt,null),e(jr,jxr),e(jr,Po),g(QL,Po,null),e(Po,Dxr),e(Po,SMe),e(SMe,Gxr),e(Po,Oxr),e(Po,qn),e(qn,Vxr),e(qn,RMe),e(RMe,Xxr),e(qn,zxr),e(qn,BMe),e(BMe,Qxr),e(qn,Wxr),e(qn,PMe),e(PMe,Hxr),e(qn,Uxr),e(Po,Jxr),e(Po,Be),e(Be,aC),e(aC,$Me),e($Me,Yxr),e(aC,Kxr),e(aC,jH),e(jH,Zxr),e(aC,ekr),e(Be,okr),e(Be,nC),e(nC,IMe),e(IMe,rkr),e(nC,tkr),e(nC,DH),e(DH,akr),e(nC,nkr),e(Be,skr),e(Be,sC),e(sC,qMe),e(qMe,lkr),e(sC,ikr),e(sC,GH),e(GH,dkr),e(sC,ckr),e(Be,mkr),e(Be,lC),e(lC,NMe),e(NMe,fkr),e(lC,gkr),e(lC,OH),e(OH,hkr),e(lC,ukr),e(Be,pkr),e(Be,iC),e(iC,jMe),e(jMe,_kr),e(iC,bkr),e(iC,VH),e(VH,vkr),e(iC,Fkr),e(Be,Tkr),e(Be,dC),e(dC,DMe),e(DMe,Mkr),e(dC,Ekr),e(dC,XH),e(XH,Ckr),e(dC,wkr),e(Be,Akr),e(Be,cC),e(cC,GMe),e(GMe,ykr),e(cC,Lkr),e(cC,zH),e(zH,xkr),e(cC,kkr),e(Be,Skr),e(Be,mC),e(mC,OMe),e(OMe,Rkr),e(mC,Bkr),e(mC,QH),e(QH,Pkr),e(mC,$kr),e(Po,Ikr),e(Po,VMe),e(VMe,qkr),e(Po,Nkr),g(WL,Po,null),b(c,CPe,_),b(c,Mm,_),e(Mm,fC),e(fC,XMe),g(HL,XMe,null),e(Mm,jkr),e(Mm,zMe),e(zMe,Dkr),b(c,wPe,_),b(c,Dr,_),g(UL,Dr,null),e(Dr,Gkr),e(Dr,Em),e(Em,Okr),e(Em,WH),e(WH,Vkr),e(Em,Xkr),e(Em,HH),e(HH,zkr),e(Em,Qkr),e(Dr,Wkr),e(Dr,JL),e(JL,Hkr),e(JL,QMe),e(QMe,Ukr),e(JL,Jkr),e(Dr,Ykr),e(Dr,Pt),g(YL,Pt,null),e(Pt,Kkr),e(Pt,WMe),e(WMe,Zkr),e(Pt,eSr),e(Pt,Cm),e(Cm,oSr),e(Cm,HMe),e(HMe,rSr),e(Cm,tSr),e(Cm,UH),e(UH,aSr),e(Cm,nSr),e(Pt,sSr),e(Pt,UMe),e(UMe,lSr),e(Pt,iSr),g(KL,Pt,null),e(Dr,dSr),e(Dr,$o),g(ZL,$o,null),e($o,cSr),e($o,JMe),e(JMe,mSr),e($o,fSr),e($o,Nn),e(Nn,gSr),e(Nn,YMe),e(YMe,hSr),e(Nn,uSr),e(Nn,KMe),e(KMe,pSr),e(Nn,_Sr),e(Nn,ZMe),e(ZMe,bSr),e(Nn,vSr),e($o,FSr),e($o,Pe),e(Pe,gC),e(gC,e4e),e(e4e,TSr),e(gC,MSr),e(gC,JH),e(JH,ESr),e(gC,CSr),e(Pe,wSr),e(Pe,hC),e(hC,o4e),e(o4e,ASr),e(hC,ySr),e(hC,YH),e(YH,LSr),e(hC,xSr),e(Pe,kSr),e(Pe,uC),e(uC,r4e),e(r4e,SSr),e(uC,RSr),e(uC,KH),e(KH,BSr),e(uC,PSr),e(Pe,$Sr),e(Pe,pC),e(pC,t4e),e(t4e,ISr),e(pC,qSr),e(pC,ZH),e(ZH,NSr),e(pC,jSr),e(Pe,DSr),e(Pe,_C),e(_C,a4e),e(a4e,GSr),e(_C,OSr),e(_C,eU),e(eU,VSr),e(_C,XSr),e(Pe,zSr),e(Pe,bC),e(bC,n4e),e(n4e,QSr),e(bC,WSr),e(bC,oU),e(oU,HSr),e(bC,USr),e(Pe,JSr),e(Pe,vC),e(vC,s4e),e(s4e,YSr),e(vC,KSr),e(vC,rU),e(rU,ZSr),e(vC,eRr),e(Pe,oRr),e(Pe,FC),e(FC,l4e),e(l4e,rRr),e(FC,tRr),e(FC,tU),e(tU,aRr),e(FC,nRr),e($o,sRr),e($o,i4e),e(i4e,lRr),e($o,iRr),g(e7,$o,null),b(c,APe,_),b(c,wm,_),e(wm,TC),e(TC,d4e),g(o7,d4e,null),e(wm,dRr),e(wm,c4e),e(c4e,cRr),b(c,yPe,_),b(c,Gr,_),g(r7,Gr,null),e(Gr,mRr),e(Gr,Am),e(Am,fRr),e(Am,aU),e(aU,gRr),e(Am,hRr),e(Am,nU),e(nU,uRr),e(Am,pRr),e(Gr,_Rr),e(Gr,t7),e(t7,bRr),e(t7,m4e),e(m4e,vRr),e(t7,FRr),e(Gr,TRr),e(Gr,$t),g(a7,$t,null),e($t,MRr),e($t,f4e),e(f4e,ERr),e($t,CRr),e($t,ym),e(ym,wRr),e(ym,g4e),e(g4e,ARr),e(ym,yRr),e(ym,sU),e(sU,LRr),e(ym,xRr),e($t,kRr),e($t,h4e),e(h4e,SRr),e($t,RRr),g(n7,$t,null),e(Gr,BRr),e(Gr,Io),g(s7,Io,null),e(Io,PRr),e(Io,u4e),e(u4e,$Rr),e(Io,IRr),e(Io,jn),e(jn,qRr),e(jn,p4e),e(p4e,NRr),e(jn,jRr),e(jn,_4e),e(_4e,DRr),e(jn,GRr),e(jn,b4e),e(b4e,ORr),e(jn,VRr),e(Io,XRr),e(Io,v4e),e(v4e,MC),e(MC,F4e),e(F4e,zRr),e(MC,QRr),e(MC,lU),e(lU,WRr),e(MC,HRr),e(Io,URr),e(Io,T4e),e(T4e,JRr),e(Io,YRr),g(l7,Io,null),b(c,LPe,_),b(c,Lm,_),e(Lm,EC),e(EC,M4e),g(i7,M4e,null),e(Lm,KRr),e(Lm,E4e),e(E4e,ZRr),b(c,xPe,_),b(c,Or,_),g(d7,Or,null),e(Or,eBr),e(Or,xm),e(xm,oBr),e(xm,iU),e(iU,rBr),e(xm,tBr),e(xm,dU),e(dU,aBr),e(xm,nBr),e(Or,sBr),e(Or,c7),e(c7,lBr),e(c7,C4e),e(C4e,iBr),e(c7,dBr),e(Or,cBr),e(Or,It),g(m7,It,null),e(It,mBr),e(It,w4e),e(w4e,fBr),e(It,gBr),e(It,km),e(km,hBr),e(km,A4e),e(A4e,uBr),e(km,pBr),e(km,cU),e(cU,_Br),e(km,bBr),e(It,vBr),e(It,y4e),e(y4e,FBr),e(It,TBr),g(f7,It,null),e(Or,MBr),e(Or,qo),g(g7,qo,null),e(qo,EBr),e(qo,L4e),e(L4e,CBr),e(qo,wBr),e(qo,Dn),e(Dn,ABr),e(Dn,x4e),e(x4e,yBr),e(Dn,LBr),e(Dn,k4e),e(k4e,xBr),e(Dn,kBr),e(Dn,S4e),e(S4e,SBr),e(Dn,RBr),e(qo,BBr),e(qo,h7),e(h7,CC),e(CC,R4e),e(R4e,PBr),e(CC,$Br),e(CC,mU),e(mU,IBr),e(CC,qBr),e(h7,NBr),e(h7,wC),e(wC,B4e),e(B4e,jBr),e(wC,DBr),e(wC,fU),e(fU,GBr),e(wC,OBr),e(qo,VBr),e(qo,P4e),e(P4e,XBr),e(qo,zBr),g(u7,qo,null),b(c,kPe,_),b(c,Sm,_),e(Sm,AC),e(AC,$4e),g(p7,$4e,null),e(Sm,QBr),e(Sm,I4e),e(I4e,WBr),b(c,SPe,_),b(c,Vr,_),g(_7,Vr,null),e(Vr,HBr),e(Vr,Rm),e(Rm,UBr),e(Rm,gU),e(gU,JBr),e(Rm,YBr),e(Rm,hU),e(hU,KBr),e(Rm,ZBr),e(Vr,ePr),e(Vr,b7),e(b7,oPr),e(b7,q4e),e(q4e,rPr),e(b7,tPr),e(Vr,aPr),e(Vr,qt),g(v7,qt,null),e(qt,nPr),e(qt,N4e),e(N4e,sPr),e(qt,lPr),e(qt,Bm),e(Bm,iPr),e(Bm,j4e),e(j4e,dPr),e(Bm,cPr),e(Bm,uU),e(uU,mPr),e(Bm,fPr),e(qt,gPr),e(qt,D4e),e(D4e,hPr),e(qt,uPr),g(F7,qt,null),e(Vr,pPr),e(Vr,No),g(T7,No,null),e(No,_Pr),e(No,G4e),e(G4e,bPr),e(No,vPr),e(No,Gn),e(Gn,FPr),e(Gn,O4e),e(O4e,TPr),e(Gn,MPr),e(Gn,V4e),e(V4e,EPr),e(Gn,CPr),e(Gn,X4e),e(X4e,wPr),e(Gn,APr),e(No,yPr),e(No,z4e),e(z4e,yC),e(yC,Q4e),e(Q4e,LPr),e(yC,xPr),e(yC,pU),e(pU,kPr),e(yC,SPr),e(No,RPr),e(No,W4e),e(W4e,BPr),e(No,PPr),g(M7,No,null),RPe=!0},p(c,[_]){const E7={};_&2&&(E7.$$scope={dirty:_,ctx:c}),Gm.$set(E7);const H4e={};_&2&&(H4e.$$scope={dirty:_,ctx:c}),qh.$set(H4e);const U4e={};_&2&&(U4e.$$scope={dirty:_,ctx:c}),Hh.$set(U4e)},i(c){RPe||(h(he.$$.fragment,c),h(Da.$$.fragment,c),h(Rw.$$.fragment,c),h(Bw.$$.fragment,c),h(Gm.$$.fragment,c),h(Pw.$$.fragment,c),h($w.$$.fragment,c),h(Nw.$$.fragment,c),h(jw.$$.fragment,c),h(Dw.$$.fragment,c),h(Gw.$$.fragment,c),h(Ow.$$.fragment,c),h(zw.$$.fragment,c),h(Qw.$$.fragment,c),h(Ww.$$.fragment,c),h(Hw.$$.fragment,c),h(Uw.$$.fragment,c),h(Kw.$$.fragment,c),h(qh.$$.fragment,c),h(Zw.$$.fragment,c),h(e6.$$.fragment,c),h(o6.$$.fragment,c),h(r6.$$.fragment,c),h(n6.$$.fragment,c),h(Hh.$$.fragment,c),h(s6.$$.fragment,c),h(l6.$$.fragment,c),h(i6.$$.fragment,c),h(d6.$$.fragment,c),h(m6.$$.fragment,c),h(f6.$$.fragment,c),h(g6.$$.fragment,c),h(h6.$$.fragment,c),h(u6.$$.fragment,c),h(p6.$$.fragment,c),h(b6.$$.fragment,c),h(v6.$$.fragment,c),h(F6.$$.fragment,c),h(T6.$$.fragment,c),h(M6.$$.fragment,c),h(E6.$$.fragment,c),h(w6.$$.fragment,c),h(A6.$$.fragment,c),h(y6.$$.fragment,c),h(L6.$$.fragment,c),h(x6.$$.fragment,c),h(k6.$$.fragment,c),h(R6.$$.fragment,c),h(B6.$$.fragment,c),h(P6.$$.fragment,c),h($6.$$.fragment,c),h(I6.$$.fragment,c),h(q6.$$.fragment,c),h(j6.$$.fragment,c),h(D6.$$.fragment,c),h(G6.$$.fragment,c),h(O6.$$.fragment,c),h(V6.$$.fragment,c),h(X6.$$.fragment,c),h(Q6.$$.fragment,c),h(W6.$$.fragment,c),h(H6.$$.fragment,c),h(U6.$$.fragment,c),h(J6.$$.fragment,c),h(Y6.$$.fragment,c),h(Z6.$$.fragment,c),h(eA.$$.fragment,c),h(oA.$$.fragment,c),h(rA.$$.fragment,c),h(tA.$$.fragment,c),h(aA.$$.fragment,c),h(sA.$$.fragment,c),h(lA.$$.fragment,c),h(iA.$$.fragment,c),h(dA.$$.fragment,c),h(cA.$$.fragment,c),h(mA.$$.fragment,c),h(gA.$$.fragment,c),h(hA.$$.fragment,c),h(uA.$$.fragment,c),h(pA.$$.fragment,c),h(_A.$$.fragment,c),h(bA.$$.fragment,c),h(FA.$$.fragment,c),h(TA.$$.fragment,c),h(MA.$$.fragment,c),h(EA.$$.fragment,c),h(CA.$$.fragment,c),h(wA.$$.fragment,c),h(yA.$$.fragment,c),h(LA.$$.fragment,c),h(xA.$$.fragment,c),h(kA.$$.fragment,c),h(SA.$$.fragment,c),h(RA.$$.fragment,c),h(PA.$$.fragment,c),h($A.$$.fragment,c),h(IA.$$.fragment,c),h(qA.$$.fragment,c),h(NA.$$.fragment,c),h(jA.$$.fragment,c),h(GA.$$.fragment,c),h(OA.$$.fragment,c),h(VA.$$.fragment,c),h(XA.$$.fragment,c),h(zA.$$.fragment,c),h(QA.$$.fragment,c),h(HA.$$.fragment,c),h(UA.$$.fragment,c),h(JA.$$.fragment,c),h(YA.$$.fragment,c),h(KA.$$.fragment,c),h(ZA.$$.fragment,c),h(o0.$$.fragment,c),h(r0.$$.fragment,c),h(t0.$$.fragment,c),h(a0.$$.fragment,c),h(n0.$$.fragment,c),h(s0.$$.fragment,c),h(i0.$$.fragment,c),h(d0.$$.fragment,c),h(c0.$$.fragment,c),h(m0.$$.fragment,c),h(f0.$$.fragment,c),h(g0.$$.fragment,c),h(u0.$$.fragment,c),h(p0.$$.fragment,c),h(_0.$$.fragment,c),h(v0.$$.fragment,c),h(F0.$$.fragment,c),h(T0.$$.fragment,c),h(E0.$$.fragment,c),h(C0.$$.fragment,c),h(w0.$$.fragment,c),h(A0.$$.fragment,c),h(y0.$$.fragment,c),h(L0.$$.fragment,c),h(k0.$$.fragment,c),h(S0.$$.fragment,c),h(R0.$$.fragment,c),h(B0.$$.fragment,c),h(P0.$$.fragment,c),h($0.$$.fragment,c),h(q0.$$.fragment,c),h(N0.$$.fragment,c),h(j0.$$.fragment,c),h(D0.$$.fragment,c),h(G0.$$.fragment,c),h(O0.$$.fragment,c),h(X0.$$.fragment,c),h(z0.$$.fragment,c),h(Q0.$$.fragment,c),h(W0.$$.fragment,c),h(H0.$$.fragment,c),h(U0.$$.fragment,c),h(Y0.$$.fragment,c),h(K0.$$.fragment,c),h(Z0.$$.fragment,c),h(ey.$$.fragment,c),h(oy.$$.fragment,c),h(ry.$$.fragment,c),h(ay.$$.fragment,c),h(ny.$$.fragment,c),h(sy.$$.fragment,c),h(ly.$$.fragment,c),h(iy.$$.fragment,c),h(dy.$$.fragment,c),h(my.$$.fragment,c),h(fy.$$.fragment,c),h(gy.$$.fragment,c),h(hy.$$.fragment,c),h(uy.$$.fragment,c),h(py.$$.fragment,c),h(by.$$.fragment,c),h(vy.$$.fragment,c),h(Fy.$$.fragment,c),h(Ty.$$.fragment,c),h(My.$$.fragment,c),h(Ey.$$.fragment,c),h(wy.$$.fragment,c),h(Ay.$$.fragment,c),h(yy.$$.fragment,c),h(Ly.$$.fragment,c),h(xy.$$.fragment,c),h(ky.$$.fragment,c),h(Ry.$$.fragment,c),h(By.$$.fragment,c),h(Py.$$.fragment,c),h(Iy.$$.fragment,c),h(qy.$$.fragment,c),h(Ny.$$.fragment,c),h(Dy.$$.fragment,c),h(Gy.$$.fragment,c),h(Oy.$$.fragment,c),h(Vy.$$.fragment,c),h(Xy.$$.fragment,c),h(zy.$$.fragment,c),h(Wy.$$.fragment,c),h(Hy.$$.fragment,c),h(Uy.$$.fragment,c),h(Jy.$$.fragment,c),h(Yy.$$.fragment,c),h(Ky.$$.fragment,c),h(e8.$$.fragment,c),h(o8.$$.fragment,c),h(r8.$$.fragment,c),h(t8.$$.fragment,c),h(a8.$$.fragment,c),h(n8.$$.fragment,c),h(l8.$$.fragment,c),h(i8.$$.fragment,c),h(d8.$$.fragment,c),h(c8.$$.fragment,c),h(m8.$$.fragment,c),h(f8.$$.fragment,c),h(h8.$$.fragment,c),h(u8.$$.fragment,c),h(p8.$$.fragment,c),h(_8.$$.fragment,c),h(b8.$$.fragment,c),h(v8.$$.fragment,c),h(T8.$$.fragment,c),h(M8.$$.fragment,c),h(E8.$$.fragment,c),h(C8.$$.fragment,c),h(w8.$$.fragment,c),h(A8.$$.fragment,c),h(L8.$$.fragment,c),h(x8.$$.fragment,c),h(k8.$$.fragment,c),h(S8.$$.fragment,c),h(R8.$$.fragment,c),h(B8.$$.fragment,c),h($8.$$.fragment,c),h(I8.$$.fragment,c),h(q8.$$.fragment,c),h(N8.$$.fragment,c),h(j8.$$.fragment,c),h(D8.$$.fragment,c),h(O8.$$.fragment,c),h(V8.$$.fragment,c),h(X8.$$.fragment,c),h(z8.$$.fragment,c),h(Q8.$$.fragment,c),h(W8.$$.fragment,c),h(U8.$$.fragment,c),h(J8.$$.fragment,c),h(Y8.$$.fragment,c),h(K8.$$.fragment,c),h(Z8.$$.fragment,c),h(eL.$$.fragment,c),h(rL.$$.fragment,c),h(tL.$$.fragment,c),h(aL.$$.fragment,c),h(nL.$$.fragment,c),h(sL.$$.fragment,c),h(lL.$$.fragment,c),h(dL.$$.fragment,c),h(cL.$$.fragment,c),h(mL.$$.fragment,c),h(fL.$$.fragment,c),h(gL.$$.fragment,c),h(hL.$$.fragment,c),h(pL.$$.fragment,c),h(_L.$$.fragment,c),h(bL.$$.fragment,c),h(vL.$$.fragment,c),h(FL.$$.fragment,c),h(TL.$$.fragment,c),h(EL.$$.fragment,c),h(CL.$$.fragment,c),h(wL.$$.fragment,c),h(AL.$$.fragment,c),h(yL.$$.fragment,c),h(LL.$$.fragment,c),h(kL.$$.fragment,c),h(SL.$$.fragment,c),h(RL.$$.fragment,c),h(BL.$$.fragment,c),h(PL.$$.fragment,c),h($L.$$.fragment,c),h(qL.$$.fragment,c),h(NL.$$.fragment,c),h(jL.$$.fragment,c),h(DL.$$.fragment,c),h(GL.$$.fragment,c),h(OL.$$.fragment,c),h(XL.$$.fragment,c),h(zL.$$.fragment,c),h(QL.$$.fragment,c),h(WL.$$.fragment,c),h(HL.$$.fragment,c),h(UL.$$.fragment,c),h(YL.$$.fragment,c),h(KL.$$.fragment,c),h(ZL.$$.fragment,c),h(e7.$$.fragment,c),h(o7.$$.fragment,c),h(r7.$$.fragment,c),h(a7.$$.fragment,c),h(n7.$$.fragment,c),h(s7.$$.fragment,c),h(l7.$$.fragment,c),h(i7.$$.fragment,c),h(d7.$$.fragment,c),h(m7.$$.fragment,c),h(f7.$$.fragment,c),h(g7.$$.fragment,c),h(u7.$$.fragment,c),h(p7.$$.fragment,c),h(_7.$$.fragment,c),h(v7.$$.fragment,c),h(F7.$$.fragment,c),h(T7.$$.fragment,c),h(M7.$$.fragment,c),RPe=!0)},o(c){u(he.$$.fragment,c),u(Da.$$.fragment,c),u(Rw.$$.fragment,c),u(Bw.$$.fragment,c),u(Gm.$$.fragment,c),u(Pw.$$.fragment,c),u($w.$$.fragment,c),u(Nw.$$.fragment,c),u(jw.$$.fragment,c),u(Dw.$$.fragment,c),u(Gw.$$.fragment,c),u(Ow.$$.fragment,c),u(zw.$$.fragment,c),u(Qw.$$.fragment,c),u(Ww.$$.fragment,c),u(Hw.$$.fragment,c),u(Uw.$$.fragment,c),u(Kw.$$.fragment,c),u(qh.$$.fragment,c),u(Zw.$$.fragment,c),u(e6.$$.fragment,c),u(o6.$$.fragment,c),u(r6.$$.fragment,c),u(n6.$$.fragment,c),u(Hh.$$.fragment,c),u(s6.$$.fragment,c),u(l6.$$.fragment,c),u(i6.$$.fragment,c),u(d6.$$.fragment,c),u(m6.$$.fragment,c),u(f6.$$.fragment,c),u(g6.$$.fragment,c),u(h6.$$.fragment,c),u(u6.$$.fragment,c),u(p6.$$.fragment,c),u(b6.$$.fragment,c),u(v6.$$.fragment,c),u(F6.$$.fragment,c),u(T6.$$.fragment,c),u(M6.$$.fragment,c),u(E6.$$.fragment,c),u(w6.$$.fragment,c),u(A6.$$.fragment,c),u(y6.$$.fragment,c),u(L6.$$.fragment,c),u(x6.$$.fragment,c),u(k6.$$.fragment,c),u(R6.$$.fragment,c),u(B6.$$.fragment,c),u(P6.$$.fragment,c),u($6.$$.fragment,c),u(I6.$$.fragment,c),u(q6.$$.fragment,c),u(j6.$$.fragment,c),u(D6.$$.fragment,c),u(G6.$$.fragment,c),u(O6.$$.fragment,c),u(V6.$$.fragment,c),u(X6.$$.fragment,c),u(Q6.$$.fragment,c),u(W6.$$.fragment,c),u(H6.$$.fragment,c),u(U6.$$.fragment,c),u(J6.$$.fragment,c),u(Y6.$$.fragment,c),u(Z6.$$.fragment,c),u(eA.$$.fragment,c),u(oA.$$.fragment,c),u(rA.$$.fragment,c),u(tA.$$.fragment,c),u(aA.$$.fragment,c),u(sA.$$.fragment,c),u(lA.$$.fragment,c),u(iA.$$.fragment,c),u(dA.$$.fragment,c),u(cA.$$.fragment,c),u(mA.$$.fragment,c),u(gA.$$.fragment,c),u(hA.$$.fragment,c),u(uA.$$.fragment,c),u(pA.$$.fragment,c),u(_A.$$.fragment,c),u(bA.$$.fragment,c),u(FA.$$.fragment,c),u(TA.$$.fragment,c),u(MA.$$.fragment,c),u(EA.$$.fragment,c),u(CA.$$.fragment,c),u(wA.$$.fragment,c),u(yA.$$.fragment,c),u(LA.$$.fragment,c),u(xA.$$.fragment,c),u(kA.$$.fragment,c),u(SA.$$.fragment,c),u(RA.$$.fragment,c),u(PA.$$.fragment,c),u($A.$$.fragment,c),u(IA.$$.fragment,c),u(qA.$$.fragment,c),u(NA.$$.fragment,c),u(jA.$$.fragment,c),u(GA.$$.fragment,c),u(OA.$$.fragment,c),u(VA.$$.fragment,c),u(XA.$$.fragment,c),u(zA.$$.fragment,c),u(QA.$$.fragment,c),u(HA.$$.fragment,c),u(UA.$$.fragment,c),u(JA.$$.fragment,c),u(YA.$$.fragment,c),u(KA.$$.fragment,c),u(ZA.$$.fragment,c),u(o0.$$.fragment,c),u(r0.$$.fragment,c),u(t0.$$.fragment,c),u(a0.$$.fragment,c),u(n0.$$.fragment,c),u(s0.$$.fragment,c),u(i0.$$.fragment,c),u(d0.$$.fragment,c),u(c0.$$.fragment,c),u(m0.$$.fragment,c),u(f0.$$.fragment,c),u(g0.$$.fragment,c),u(u0.$$.fragment,c),u(p0.$$.fragment,c),u(_0.$$.fragment,c),u(v0.$$.fragment,c),u(F0.$$.fragment,c),u(T0.$$.fragment,c),u(E0.$$.fragment,c),u(C0.$$.fragment,c),u(w0.$$.fragment,c),u(A0.$$.fragment,c),u(y0.$$.fragment,c),u(L0.$$.fragment,c),u(k0.$$.fragment,c),u(S0.$$.fragment,c),u(R0.$$.fragment,c),u(B0.$$.fragment,c),u(P0.$$.fragment,c),u($0.$$.fragment,c),u(q0.$$.fragment,c),u(N0.$$.fragment,c),u(j0.$$.fragment,c),u(D0.$$.fragment,c),u(G0.$$.fragment,c),u(O0.$$.fragment,c),u(X0.$$.fragment,c),u(z0.$$.fragment,c),u(Q0.$$.fragment,c),u(W0.$$.fragment,c),u(H0.$$.fragment,c),u(U0.$$.fragment,c),u(Y0.$$.fragment,c),u(K0.$$.fragment,c),u(Z0.$$.fragment,c),u(ey.$$.fragment,c),u(oy.$$.fragment,c),u(ry.$$.fragment,c),u(ay.$$.fragment,c),u(ny.$$.fragment,c),u(sy.$$.fragment,c),u(ly.$$.fragment,c),u(iy.$$.fragment,c),u(dy.$$.fragment,c),u(my.$$.fragment,c),u(fy.$$.fragment,c),u(gy.$$.fragment,c),u(hy.$$.fragment,c),u(uy.$$.fragment,c),u(py.$$.fragment,c),u(by.$$.fragment,c),u(vy.$$.fragment,c),u(Fy.$$.fragment,c),u(Ty.$$.fragment,c),u(My.$$.fragment,c),u(Ey.$$.fragment,c),u(wy.$$.fragment,c),u(Ay.$$.fragment,c),u(yy.$$.fragment,c),u(Ly.$$.fragment,c),u(xy.$$.fragment,c),u(ky.$$.fragment,c),u(Ry.$$.fragment,c),u(By.$$.fragment,c),u(Py.$$.fragment,c),u(Iy.$$.fragment,c),u(qy.$$.fragment,c),u(Ny.$$.fragment,c),u(Dy.$$.fragment,c),u(Gy.$$.fragment,c),u(Oy.$$.fragment,c),u(Vy.$$.fragment,c),u(Xy.$$.fragment,c),u(zy.$$.fragment,c),u(Wy.$$.fragment,c),u(Hy.$$.fragment,c),u(Uy.$$.fragment,c),u(Jy.$$.fragment,c),u(Yy.$$.fragment,c),u(Ky.$$.fragment,c),u(e8.$$.fragment,c),u(o8.$$.fragment,c),u(r8.$$.fragment,c),u(t8.$$.fragment,c),u(a8.$$.fragment,c),u(n8.$$.fragment,c),u(l8.$$.fragment,c),u(i8.$$.fragment,c),u(d8.$$.fragment,c),u(c8.$$.fragment,c),u(m8.$$.fragment,c),u(f8.$$.fragment,c),u(h8.$$.fragment,c),u(u8.$$.fragment,c),u(p8.$$.fragment,c),u(_8.$$.fragment,c),u(b8.$$.fragment,c),u(v8.$$.fragment,c),u(T8.$$.fragment,c),u(M8.$$.fragment,c),u(E8.$$.fragment,c),u(C8.$$.fragment,c),u(w8.$$.fragment,c),u(A8.$$.fragment,c),u(L8.$$.fragment,c),u(x8.$$.fragment,c),u(k8.$$.fragment,c),u(S8.$$.fragment,c),u(R8.$$.fragment,c),u(B8.$$.fragment,c),u($8.$$.fragment,c),u(I8.$$.fragment,c),u(q8.$$.fragment,c),u(N8.$$.fragment,c),u(j8.$$.fragment,c),u(D8.$$.fragment,c),u(O8.$$.fragment,c),u(V8.$$.fragment,c),u(X8.$$.fragment,c),u(z8.$$.fragment,c),u(Q8.$$.fragment,c),u(W8.$$.fragment,c),u(U8.$$.fragment,c),u(J8.$$.fragment,c),u(Y8.$$.fragment,c),u(K8.$$.fragment,c),u(Z8.$$.fragment,c),u(eL.$$.fragment,c),u(rL.$$.fragment,c),u(tL.$$.fragment,c),u(aL.$$.fragment,c),u(nL.$$.fragment,c),u(sL.$$.fragment,c),u(lL.$$.fragment,c),u(dL.$$.fragment,c),u(cL.$$.fragment,c),u(mL.$$.fragment,c),u(fL.$$.fragment,c),u(gL.$$.fragment,c),u(hL.$$.fragment,c),u(pL.$$.fragment,c),u(_L.$$.fragment,c),u(bL.$$.fragment,c),u(vL.$$.fragment,c),u(FL.$$.fragment,c),u(TL.$$.fragment,c),u(EL.$$.fragment,c),u(CL.$$.fragment,c),u(wL.$$.fragment,c),u(AL.$$.fragment,c),u(yL.$$.fragment,c),u(LL.$$.fragment,c),u(kL.$$.fragment,c),u(SL.$$.fragment,c),u(RL.$$.fragment,c),u(BL.$$.fragment,c),u(PL.$$.fragment,c),u($L.$$.fragment,c),u(qL.$$.fragment,c),u(NL.$$.fragment,c),u(jL.$$.fragment,c),u(DL.$$.fragment,c),u(GL.$$.fragment,c),u(OL.$$.fragment,c),u(XL.$$.fragment,c),u(zL.$$.fragment,c),u(QL.$$.fragment,c),u(WL.$$.fragment,c),u(HL.$$.fragment,c),u(UL.$$.fragment,c),u(YL.$$.fragment,c),u(KL.$$.fragment,c),u(ZL.$$.fragment,c),u(e7.$$.fragment,c),u(o7.$$.fragment,c),u(r7.$$.fragment,c),u(a7.$$.fragment,c),u(n7.$$.fragment,c),u(s7.$$.fragment,c),u(l7.$$.fragment,c),u(i7.$$.fragment,c),u(d7.$$.fragment,c),u(m7.$$.fragment,c),u(f7.$$.fragment,c),u(g7.$$.fragment,c),u(u7.$$.fragment,c),u(p7.$$.fragment,c),u(_7.$$.fragment,c),u(v7.$$.fragment,c),u(F7.$$.fragment,c),u(T7.$$.fragment,c),u(M7.$$.fragment,c),RPe=!1},d(c){t(Z),c&&t(io),c&&t(ce),p(he),c&&t(Im),c&&t(ma),c&&t(xe),c&&t(co),c&&t(Nm),p(Da,c),c&&t(mo),c&&t(_e),c&&t(zo),c&&t(Ga),c&&t(SRe),c&&t(Xi),p(Rw),c&&t(RRe),c&&t(Qn),c&&t(BRe),p(Bw,c),c&&t(PRe),c&&t(w9),c&&t($Re),p(Gm,c),c&&t(IRe),c&&t(zi),p(Pw),c&&t(qRe),c&&t(Qo),p($w),p(Nw),p(jw),p(Dw),c&&t(NRe),c&&t(Wi),p(Gw),c&&t(jRe),c&&t(Wo),p(Ow),p(zw),p(Qw),p(Ww),c&&t(DRe),c&&t(Hi),p(Hw),c&&t(GRe),c&&t(Ho),p(Uw),p(Kw),p(qh),p(Zw),p(e6),c&&t(ORe),c&&t(Ui),p(o6),c&&t(VRe),c&&t(Uo),p(r6),p(n6),p(Hh),p(s6),p(l6),c&&t(XRe),c&&t(Yi),p(i6),c&&t(zRe),c&&t(Jo),p(d6),p(m6),p(f6),p(g6),p(h6),c&&t(QRe),c&&t(ed),p(u6),c&&t(WRe),c&&t(Yo),p(p6),p(b6),p(v6),p(F6),p(T6),c&&t(HRe),c&&t(td),p(M6),c&&t(URe),c&&t(Ko),p(E6),p(w6),p(A6),p(y6),p(L6),c&&t(JRe),c&&t(sd),p(x6),c&&t(YRe),c&&t(Zo),p(k6),p(R6),p(B6),p(P6),p($6),c&&t(KRe),c&&t(dd),p(I6),c&&t(ZRe),c&&t(er),p(q6),p(j6),p(D6),p(G6),p(O6),c&&t(eBe),c&&t(fd),p(V6),c&&t(oBe),c&&t(or),p(X6),p(Q6),p(W6),p(H6),p(U6),c&&t(rBe),c&&t(ud),p(J6),c&&t(tBe),c&&t(rr),p(Y6),p(Z6),p(eA),p(oA),p(rA),c&&t(aBe),c&&t(bd),p(tA),c&&t(nBe),c&&t(tr),p(aA),p(sA),p(lA),p(iA),p(dA),c&&t(sBe),c&&t(Td),p(cA),c&&t(lBe),c&&t(ar),p(mA),p(gA),p(hA),p(uA),p(pA),c&&t(iBe),c&&t(Cd),p(_A),c&&t(dBe),c&&t(nr),p(bA),p(FA),p(TA),p(MA),p(EA),c&&t(cBe),c&&t(yd),p(CA),c&&t(mBe),c&&t(sr),p(wA),p(yA),p(LA),p(xA),p(kA),c&&t(fBe),c&&t(kd),p(SA),c&&t(gBe),c&&t(lr),p(RA),p(PA),p($A),p(IA),p(qA),c&&t(hBe),c&&t(Bd),p(NA),c&&t(uBe),c&&t(ir),p(jA),p(GA),p(OA),p(VA),p(XA),c&&t(pBe),c&&t(Id),p(zA),c&&t(_Be),c&&t(dr),p(QA),p(HA),p(UA),p(JA),p(YA),c&&t(bBe),c&&t(jd),p(KA),c&&t(vBe),c&&t(cr),p(ZA),p(o0),p(r0),p(t0),p(a0),c&&t(FBe),c&&t(Od),p(n0),c&&t(TBe),c&&t(mr),p(s0),p(i0),p(d0),p(c0),p(m0),c&&t(MBe),c&&t(zd),p(f0),c&&t(EBe),c&&t(fr),p(g0),p(u0),p(p0),p(_0),p(v0),c&&t(CBe),c&&t(Hd),p(F0),c&&t(wBe),c&&t(gr),p(T0),p(E0),p(C0),p(w0),p(A0),c&&t(ABe),c&&t(Yd),p(y0),c&&t(yBe),c&&t(hr),p(L0),p(k0),p(S0),p(R0),p(B0),c&&t(LBe),c&&t(oc),p(P0),c&&t(xBe),c&&t(ur),p($0),p(q0),p(N0),p(j0),p(D0),c&&t(kBe),c&&t(ac),p(G0),c&&t(SBe),c&&t(pr),p(O0),p(X0),p(z0),p(Q0),p(W0),c&&t(RBe),c&&t(lc),p(H0),c&&t(BBe),c&&t(_r),p(U0),p(Y0),p(K0),p(Z0),p(ey),c&&t(PBe),c&&t(cc),p(oy),c&&t($Be),c&&t(br),p(ry),p(ay),p(ny),p(sy),p(ly),c&&t(IBe),c&&t(gc),p(iy),c&&t(qBe),c&&t(vr),p(dy),p(my),p(fy),p(gy),p(hy),c&&t(NBe),c&&t(pc),p(uy),c&&t(jBe),c&&t(Fr),p(py),p(by),p(vy),p(Fy),p(Ty),c&&t(DBe),c&&t(vc),p(My),c&&t(GBe),c&&t(Tr),p(Ey),p(wy),p(Ay),p(yy),p(Ly),c&&t(OBe),c&&t(Mc),p(xy),c&&t(VBe),c&&t(Mr),p(ky),p(Ry),p(By),p(Py),p(Iy),c&&t(XBe),c&&t(wc),p(qy),c&&t(zBe),c&&t(Er),p(Ny),p(Dy),p(Gy),p(Oy),p(Vy),c&&t(QBe),c&&t(Lc),p(Xy),c&&t(WBe),c&&t(Cr),p(zy),p(Wy),p(Hy),p(Uy),p(Jy),c&&t(HBe),c&&t(Sc),p(Yy),c&&t(UBe),c&&t(wr),p(Ky),p(e8),p(o8),p(r8),p(t8),c&&t(JBe),c&&t(Pc),p(a8),c&&t(YBe),c&&t(Ar),p(n8),p(l8),p(i8),p(d8),p(c8),c&&t(KBe),c&&t(qc),p(m8),c&&t(ZBe),c&&t(yr),p(f8),p(h8),p(u8),p(p8),p(_8),c&&t(ePe),c&&t(Dc),p(b8),c&&t(oPe),c&&t(Lr),p(v8),p(T8),p(M8),p(E8),p(C8),c&&t(rPe),c&&t(Vc),p(w8),c&&t(tPe),c&&t(xr),p(A8),p(L8),p(x8),p(k8),p(S8),c&&t(aPe),c&&t(Qc),p(R8),c&&t(nPe),c&&t(kr),p(B8),p($8),p(I8),p(q8),p(N8),c&&t(sPe),c&&t(Uc),p(j8),c&&t(lPe),c&&t(Sr),p(D8),p(O8),p(V8),p(X8),p(z8),c&&t(iPe),c&&t(Kc),p(Q8),c&&t(dPe),c&&t(Rr),p(W8),p(U8),p(J8),p(Y8),p(K8),c&&t(cPe),c&&t(om),p(Z8),c&&t(mPe),c&&t(Br),p(eL),p(rL),p(tL),p(aL),p(nL),c&&t(fPe),c&&t(am),p(sL),c&&t(gPe),c&&t(Pr),p(lL),p(dL),p(cL),p(mL),p(fL),c&&t(hPe),c&&t(lm),p(gL),c&&t(uPe),c&&t($r),p(hL),p(pL),p(_L),p(bL),p(vL),c&&t(pPe),c&&t(cm),p(FL),c&&t(_Pe),c&&t(Ir),p(TL),p(EL),p(CL),p(wL),p(AL),c&&t(bPe),c&&t(gm),p(yL),c&&t(vPe),c&&t(qr),p(LL),p(kL),p(SL),p(RL),p(BL),c&&t(FPe),c&&t(pm),p(PL),c&&t(TPe),c&&t(Nr),p($L),p(qL),p(NL),p(jL),p(DL),c&&t(MPe),c&&t(vm),p(GL),c&&t(EPe),c&&t(jr),p(OL),p(XL),p(zL),p(QL),p(WL),c&&t(CPe),c&&t(Mm),p(HL),c&&t(wPe),c&&t(Dr),p(UL),p(YL),p(KL),p(ZL),p(e7),c&&t(APe),c&&t(wm),p(o7),c&&t(yPe),c&&t(Gr),p(r7),p(a7),p(n7),p(s7),p(l7),c&&t(LPe),c&&t(Lm),p(i7),c&&t(xPe),c&&t(Or),p(d7),p(m7),p(f7),p(g7),p(u7),c&&t(kPe),c&&t(Sm),p(p7),c&&t(SPe),c&&t(Vr),p(_7),p(v7),p(F7),p(T7),p(M7)}}}const x6t={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function k6t($m){return C6t(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class I6t extends F6t{constructor(Z){super();T6t(this,Z,k6t,L6t,M6t,{})}}export{I6t as default,x6t as metadata};
